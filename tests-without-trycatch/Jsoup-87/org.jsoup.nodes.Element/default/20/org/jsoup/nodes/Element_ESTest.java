/*
 * This file was automatically generated by EvoSuite
 * Fri Jul 30 08:44:16 GMT 2021
 */

package org.jsoup.nodes;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedWriter;
import java.io.PipedWriter;
import java.io.Reader;
import java.io.StringReader;
import java.io.StringWriter;
import java.nio.BufferOverflowException;
import java.nio.CharBuffer;
import java.nio.charset.Charset;
import java.util.Collection;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.Set;
import java.util.regex.Pattern;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFileWriter;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.jsoup.nodes.Attribute;
import org.jsoup.nodes.Attributes;
import org.jsoup.nodes.CDataNode;
import org.jsoup.nodes.Comment;
import org.jsoup.nodes.DataNode;
import org.jsoup.nodes.Document;
import org.jsoup.nodes.DocumentType;
import org.jsoup.nodes.Element;
import org.jsoup.nodes.FormElement;
import org.jsoup.nodes.Node;
import org.jsoup.nodes.XmlDeclaration;
import org.jsoup.parser.ParseSettings;
import org.jsoup.parser.Parser;
import org.jsoup.parser.Tag;
import org.jsoup.select.Elements;
import org.jsoup.select.Evaluator;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Element_ESTest extends Element_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Tag tag0 = Tag.valueOf("org.jsoup.nodes.Element$2");
      CDataNode cDataNode0 = new CDataNode("org.jsoup.nodes.Element$2");
      Attributes attributes0 = cDataNode0.attributes();
      Element element0 = new Element(tag0, "org.jsoup.nodes.Element$2", attributes0);
      element0.getElementsByAttributeValueMatching("org.jsoup.nodes.Element$2", ": ");
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Document document0 = new Document("7");
      List<Node> list0 = document0.childNodes();
      Element element0 = new Element("7");
      element0.text("");
      // Undeclared exception!
//      try { 
        element0.insertChildren((-3453), (Collection<? extends Node>) list0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Insert position out of bounds.
//         //
//         verifyException("org.jsoup.helper.Validate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("org.jsup.odes.Element$", "org.jsup.odes.Element$");
      MockPrintStream mockPrintStream0 = new MockPrintStream("org.jsup.odes.Element$");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.prettyPrint(false);
      document0.outerHtmlTail(mockPrintStream0, (-795), document_OutputSettings1);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("04?G[z<DU&kA(#M", "04?G[z<DU&kA(#M");
      MockFileWriter mockFileWriter0 = new MockFileWriter("04?G[z<DU&kA(#M");
      BufferedWriter bufferedWriter0 = new BufferedWriter(mockFileWriter0, 1656);
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      document0.outerHtmlHead(bufferedWriter0, 1167, document_OutputSettings0);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Document document0 = Document.createShell("#");
      document0.nodelistChanged();
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Document document0 = Parser.parse("I,", "I,");
      document0.ensureChildNodes();
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Document document0 = Parser.parse("\"[4P&7x0", "\"[4P&7x0");
      document0.doSetBaseUri("\"[4P&7x0");
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Document document0 = Parser.parse("\"[4&P&7x[", "\"[4&P&7x[");
      Document document1 = Parser.parse(".ZV%h@~t-xE'$(@LP.", "p;ZuW");
      document0.appendTo(document1);
      document0.wrap("InRow");
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("org.jsoup.select.Evaluator$AttributeWithValueStarting", "org.jsoup.select.Evaluator$AttributeWithValueStarting");
      Element element0 = document0.head();
      element0.wrap("org.jsoup.select.Evaluator$AttributeWithValueStarting");
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Element element0 = new Element("1-v0|");
      element0.wholeText();
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("Insert position out of bounds.", "Insert position out of bounds.");
      Element element0 = document0.body();
      element0.val("s+");
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Element element0 = new Element("wm 7zu}#");
      Element element1 = element0.val(">dL");
      element1.val();
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Document document0 = Parser.parse("]2|^CrpF&R4\"W<++HD", "wz");
      Element element0 = document0.body();
      element0.toggleClass("'_sevy:");
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Document document0 = Parser.parse("I,", "I,");
      document0.prependChild(document0);
      document0.toggleClass("#root");
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("tR2aF/ 12Di'==Z", "yV7");
      Element element0 = document0.createElement("tR2aF/ 12Di'==Z");
      element0.toggleClass("tR2aF/ 12Di'==Z");
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Document document0 = Document.createShell("#");
      Element element0 = document0.prependElement("#");
      element0.text("#");
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Element element0 = new Element("wm uzu}#");
      element0.text();
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("dkk<sec{a{v+jgzcm", "dkk<sec{a{v+jgzcm");
      document0.tagName("html");
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("br", "Tag name must not be empty.");
      Element element0 = document0.body();
      element0.tagName("Tag name must not be empty.");
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Element element0 = new Element("wm 7zu}#");
      element0.tagName(">dL");
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Document document0 = new Document("SB!");
      document0.tagName();
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Tag tag0 = Tag.valueOf("textarea");
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = new FormElement(tag0, "Z,T/", attributes0);
      formElement0.tag();
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("br", "Tag name must not be empty.");
      Element element0 = document0.prependElement("br");
      element0.tag();
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("br", "Tag name must not be empty.");
      document0.tag();
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("\"[4&P&7x[", ":acFh>");
      Element element0 = document0.body();
      element0.shallowClone();
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment(":nth-last-child(540n)", ":nth-last-child(540n)");
      document0.selectFirst(":nth-last-child(540n)");
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("br", "Tag name must not be empty.");
      document0.prependElement("br");
      document0.prependText(")<TS~g1Ugt|A");
      document0.selectFirst("br");
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("br", "Tag name must not be empty.");
      document0.prependElement("br");
      document0.selectFirst("br");
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Tag tag0 = Tag.valueOf("textarea");
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = new FormElement(tag0, "A_2m2bbF?N:.x'F/", attributes0);
      formElement0.selectFirst("textarea");
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Document document0 = new Document("RU");
      document0.select("RU");
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      ParseSettings parseSettings0 = ParseSettings.htmlDefault;
      Tag tag0 = Tag.valueOf("*", parseSettings0);
      FormElement formElement0 = new FormElement(tag0, ":nth-child(%d)", attributes0);
      formElement0.select("*");
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("br", "");
      Element element0 = document0.body();
      element0.removeClass("");
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Document document0 = Document.createShell("I1L&6&CH%z");
      Element element0 = document0.createElement("I1L&6&CH%z");
      element0.removeClass("H$@Wimt}OT9");
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Document document0 = new Document("04G[z<U&kA#M");
      Document document1 = document0.normalise();
      Node[] nodeArray0 = new Node[7];
      nodeArray0[0] = (Node) document1;
      nodeArray0[1] = (Node) document1;
      nodeArray0[2] = (Node) document1;
      Tag tag0 = Tag.valueOf("04G[z<U&kA#M");
      Element element0 = new Element(tag0, "6H78glk");
      nodeArray0[3] = (Node) element0;
      nodeArray0[4] = (Node) document1;
      nodeArray0[5] = (Node) document0;
      nodeArray0[6] = (Node) document1;
      document1.addChildren(nodeArray0);
      document1.previousElementSibling();
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Document document0 = new Document("04G[z<U&kA#M");
      Node[] nodeArray0 = new Node[7];
      nodeArray0[0] = (Node) document0;
      nodeArray0[1] = (Node) document0;
      nodeArray0[2] = (Node) document0;
      Tag tag0 = Tag.valueOf("04G[z<U&kA#M");
      Element element0 = new Element(tag0, "6H78glk");
      nodeArray0[3] = (Node) element0;
      nodeArray0[4] = (Node) document0;
      nodeArray0[5] = (Node) document0;
      nodeArray0[6] = (Node) document0;
      document0.addChildren(nodeArray0);
      document0.previousElementSibling();
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Tag tag0 = Tag.valueOf("textarea");
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = new FormElement(tag0, "A_2m2bbF?N:.x'F/", attributes0);
      Element.preserveWhitespace(formElement0);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("br", "Tag name must not be empty.");
      Element element0 = document0.body();
      element0.prependText("");
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Document document0 = new Document("Tag name must not be empty.");
      document0.prependElement("body");
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("br", "Tag name must not be empty.");
      Element element0 = document0.body();
      element0.prependChild(document0);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Document document0 = Parser.parse("\"[4P&7x0", "\"[4P&7x0");
      document0.siblingIndex = (-826);
      document0.prepend("gwR`VaCJk#1\u0004-jt");
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Document document0 = Parser.parse("]2|^CrpF&R4\"W<++HD", "wz");
      Element element0 = document0.body();
      element0.prepend("vKS:B&`Rp9q=Bh6&xHO");
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Document document0 = new Document("7");
      document0.prepend("");
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("04?G|\"<!kA(#A", "04?G|\"<!kA(#A");
      document0.parents();
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Document document0 = Parser.parse("", "M");
      Element element0 = document0.body();
      element0.parents();
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Document document0 = new Document("org.jsoup.nodes.Element$NodeList");
      document0.parent();
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("br", "Tag name must not be empty.");
      Element element0 = document0.prependElement("br");
      element0.parent();
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("org.jsoup.nodes.Element$1", "org.jsoup.nodes.Element$1");
      document0.prependChild(document0);
      document0.parent();
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Parser parser0 = Parser.xmlParser();
      Document document0 = parser0.parseInput("CpIg[b\"sE'EW", "Tag name must not be empty.");
      document0.ownText();
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Tag tag0 = Tag.valueOf("textarea");
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = new FormElement(tag0, "textarea", attributes0);
      formElement0.nodeName();
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Document document0 = new Document("Tag name mu8tsnoA be empty.");
      Document document1 = document0.clone();
      Node[] nodeArray0 = new Node[3];
      nodeArray0[0] = (Node) document0;
      nodeArray0[1] = (Node) document1;
      nodeArray0[2] = (Node) document0;
      document0.addChildren(nodeArray0);
      document1.nextElementSibling();
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("04?G[z<DU&kA(#M", "04?G[z<DU&kA(#M");
      Node[] nodeArray0 = new Node[4];
      nodeArray0[0] = (Node) document0;
      nodeArray0[1] = (Node) document0;
      nodeArray0[2] = (Node) document0;
      nodeArray0[3] = (Node) document0;
      document0.addChildren(nodeArray0);
      document0.lastElementSibling();
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("Insert position out of bounds.", "Insert position out of bounds.");
      Element element0 = document0.head();
      element0.lastElementSibling();
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("br", "Tag name must not be empty.");
      Element element0 = document0.body();
      element0.isBlock();
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Document document0 = new Document("RU");
      Evaluator.IsEmpty evaluator_IsEmpty0 = new Evaluator.IsEmpty();
      document0.is((Evaluator) evaluator_IsEmpty0);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("UVASG*52#sD0)CP&d", "UVASG*52#sD0)CP&d");
      Evaluator.ContainsOwnText evaluator_ContainsOwnText0 = new Evaluator.ContainsOwnText(":nth-last-child(-2219n+5)");
      document0.is((Evaluator) evaluator_ContainsOwnText0);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Document document0 = Parser.parse("\"[4P&7x[", "\"[4P&7x[");
      Element element0 = document0.prependElement("aL");
      element0.is("aL");
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Document document0 = new Document("Tag name must not be empty.");
      Document document1 = document0.clone();
      Element element0 = document0.append("gz5xB-I@ZFl}");
      Element element1 = document1.clone();
      Element element2 = element0.prepend("body");
      CDataNode cDataNode0 = new CDataNode("");
      Node[] nodeArray0 = new Node[6];
      nodeArray0[0] = (Node) element2;
      nodeArray0[1] = (Node) document0;
      nodeArray0[2] = (Node) document1;
      nodeArray0[3] = (Node) cDataNode0;
      nodeArray0[4] = (Node) document0;
      nodeArray0[5] = (Node) element1;
      document0.insertChildren(0, nodeArray0);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Document document0 = Parser.parse("v6?{cGALb};^3sf2KWX", "v6?{cGALb};^3sf2KWX");
      LinkedList<Document> linkedList0 = new LinkedList<Document>();
      linkedList0.add(document0);
      document0.insertChildren(0, (Collection<? extends Node>) linkedList0);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Document document0 = new Document("]2|^CrpF&R4\"W<++HD");
      LinkedHashSet<Comment> linkedHashSet0 = new LinkedHashSet<Comment>();
      document0.insertChildren(0, (Collection<? extends Node>) linkedHashSet0);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      ParseSettings parseSettings0 = new ParseSettings(false, false);
      Tag tag0 = Tag.valueOf("head", parseSettings0);
      Attributes attributes0 = new Attributes();
      Attribute attribute0 = new Attribute("id", "id", attributes0);
      Attributes attributes1 = attributes0.put(attribute0);
      FormElement formElement0 = new FormElement(tag0, "Pattern syntax error: ", attributes1);
      formElement0.id();
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("I,", "I,");
      Element element0 = document0.body();
      element0.html("I,");
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("br", "Tag name must not be empty.");
      Element element0 = document0.prependElement("br");
      element0.html("org.jsoup.nodes.Element$1");
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed(" > ", " > ");
      document0.html("");
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Tag tag0 = Tag.valueOf("org.jsoup.nodes.Element$2");
      CDataNode cDataNode0 = new CDataNode("org.jsoup.nodes.Element$2");
      Attributes attributes0 = cDataNode0.attributes();
      FormElement formElement0 = new FormElement(tag0, "org.jsoup.nodes.Element$2", attributes0);
      formElement0.html((StringWriter) null);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Document document0 = new Document("\"[4&P&$x[");
      document0.html();
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Tag tag0 = Tag.valueOf("org.jsoup.nodes.Element$2");
      CDataNode cDataNode0 = new CDataNode("org.jsoup.nodes.Element$2");
      Attributes attributes0 = cDataNode0.attributes();
      Element element0 = new Element(tag0, "org.jsoup.nodes.Element$2", attributes0);
      element0.hasAttributes();
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Document document0 = new Document("T+`");
      document0.hasAttributes();
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Document document0 = new Document("Tag name must not be empty.");
      Pattern pattern0 = Pattern.compile("RKF8j#d|,d", 562);
      document0.getElementsMatchingText(pattern0);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Document document0 = new Document("");
      Pattern pattern0 = Pattern.compile("");
      document0.getElementsMatchingText(pattern0);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Document document0 = Document.createShell("#");
      document0.getElementsMatchingText("#");
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Tag tag0 = Tag.valueOf("textarea");
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = new FormElement(tag0, "", attributes0);
      formElement0.appendText("textarea");
      Pattern pattern0 = Pattern.compile("textarea");
      formElement0.getElementsMatchingOwnText(pattern0);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Document document0 = Document.createShell("#");
      document0.getElementsContainingOwnText("*HnYe");
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Document document0 = Parser.parse("", "M");
      document0.getElementsByTag("Tag name must not be empty.");
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Document document0 = new Document("Tag name must not be empty.");
      document0.getElementsByTag("#root");
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Tag tag0 = Tag.valueOf("Tag name must not be empty.");
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = new FormElement(tag0, "Tag name must not be empty.", attributes0);
      formElement0.getElementsByIndexLessThan(7553);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Document document0 = Parser.parse("=:-b]Wor", "=:-b]Wor");
      document0.getElementsByIndexGreaterThan((-101));
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("&nbsp;", "&nbsp;");
      document0.getElementsByIndexEquals(0);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Document document0 = Parser.parse("\"[4&P&$x[", "\"[4&P&$x[");
      document0.getElementsByAttributeValueNot("\"[4&P&$x[", "DoctypeSystemIdentifier_singleQuoted");
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Document document0 = Document.createShell("0$4?Gu[z<lU&kAd#M");
      document0.getElementsByAttributeValue("0$4?Gu[z<lU&kAd#M", "0$4?Gu[z<lU&kAd#M");
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Document document0 = new Document("Tag name must not be empty.");
      Element element0 = document0.clone();
      Element element1 = document0.prependChild(element0);
      Element element2 = element1.prepend("body");
      document0.appendTo(element2);
      document0.firstElementSibling();
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Document document0 = Parser.parse("I,", "I,");
      document0.prependChild(document0);
      document0.firstElementSibling();
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("org.jsoup.nodes.Element$2", ":matchesOwn(: )");
      Element element0 = document0.body();
      element0.empty();
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Document document0 = Parser.parse("\"[4&P&7x[", "\"[4&P&7x[");
      Element element0 = document0.body();
      element0.doClone(document0);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Tag tag0 = Tag.valueOf("Tag name must not be empty.");
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = new FormElement(tag0, "Tag name must not be empty.", attributes0);
      formElement0.doClone((Node) null);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Document document0 = Document.createShell("]2|^CrpF&R4\"W<++HD");
      document0.clone();
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Document document0 = new Document("wz");
      Element element0 = document0.createElement("title");
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      element0.classNames((Set<String>) linkedHashSet0);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Document document0 = Parser.parse("]2|^CrpF&R4\"W<++HD", "z");
      document0.appendTo(document0);
      Charset charset0 = document0.charset();
      Set<String> set0 = charset0.aliases();
      document0.classNames(set0);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Document document0 = Document.createShell("<%=-!d");
      document0.addClass("r95/;'N?  'nOsK2w");
      document0.className();
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Document document0 = Parser.parse("wm uzu}#", "wm uzu}#");
      document0.children();
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Document document0 = new Document("]2|^CrpF&R4\"W<++HD");
      document0.childNodeSize();
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Document document0 = Parser.parse("]2|^CrpF&R4\"W<++HD", "wz");
      document0.childNodeSize();
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Document document0 = Parser.parse("\"[4&P&$x[", "\"[4&P&$x[");
      document0.prependChild(document0);
      document0.child(0);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Document document0 = Document.createShell("Children collection to be inserted must not be null.");
      document0.child(0);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("tR2aF/ 12Di'==Z", "yV7");
      document0.parentNode = (Node) document0;
      document0.before((Node) document0);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("Insert position out of bounds.", "Insert position out of bounds.");
      Element element0 = document0.body();
      element0.before((Node) document0);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed(">TjU&", "-uL1Ueq}YP=\"b");
      Element element0 = document0.prependElement(">TjU&");
      element0.before("");
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Parser parser0 = Parser.htmlParser();
      Document document0 = parser0.parseInput("#", "#");
      Element element0 = document0.head();
      element0.before("j}X~yB{'q(tS");
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("04?G[z<DU&kA(#M", "<~e5WJmh$");
      Element element0 = document0.body();
      element0.before("04?G[z<DU&kA(#M");
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("br", "Tag name must not be empty.");
      document0.baseUri();
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Document document0 = new Document("");
      document0.baseUri();
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("br", "Tag name must not be empty.");
      Element element0 = document0.body();
      element0.attr(">", false);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Tag tag0 = Tag.valueOf("M");
      FormElement formElement0 = new FormElement(tag0, "M", (Attributes) null);
      formElement0.attr("org.jsoup.nodes.Element", true);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Document document0 = Parser.parse("]2|^CrpF&R4\"W<++HD", "z");
      Element element0 = document0.body();
      element0.attr("c1?", "oI[ag1EWSV ");
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Document document0 = new Document("");
      document0.attr("%iAPqF2sMXv9:P+EC%", "%iAPqF2sMXv9:P+EC%");
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("I,", "I,");
      Element element0 = document0.body();
      element0.appendTo(document0);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("tR2aF/ 12Di'==Z", "yV7");
      Element element0 = document0.createElement("tR2aF/ 12Di'==Z");
      element0.appendTo(document0);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      Document document0 = Parser.parse("\"[4&P&7x[", "\"[4&P&7x[");
      document0.appendTo(document0);
      document0.appendText(".");
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("wm uzu|#", ")<");
      document0.appendElement("ul");
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("Insert position out of bounds.", "Insert position out of bounds.");
      Document document1 = Parser.parseBodyFragment("Insert position out of bounds.", "Insert position out of bounds.");
      document0.appendChild(document1);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      Document document0 = Parser.parse("\"[4&P&7x[", "\"[4&P&7x[");
      document0.appendChild(document0);
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      Document document0 = new Document("wm uzu}#");
      document0.append("");
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("br", "Tag name must not be empty.");
      Element element0 = document0.prependElement("br");
      element0.after((Node) document0);
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      Document document0 = Parser.parse("]2|^CrpF&R4\"W<++HD", "wz");
      Element element0 = document0.body();
      element0.after((Node) document0);
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      Document document0 = new Document("Tag name must not be empty.");
      Document document1 = (Document)document0.clone();
      document0.prependChild(document1);
      document1.after("");
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("lzt]_825?c", "lzt]_825?c");
      Element element0 = document0.body();
      element0.after("lzt]_825?c");
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      Document document0 = Parser.parse("gR", "gR");
      document0.setSiblingIndex((-477));
      document0.addClass("gR");
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("org.jsoup.nodes.Element$1", "org.jsoup.nodes.Element$1");
      Element element0 = document0.body();
      element0.addClass("wml0Y5");
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("org.jsoup.nodes.Element$1", "org.jsoup.nodes.Element$1");
      Element element0 = document0.prependElement("org.jsoup.nodes.Element$1");
      element0.addClass("wml0Y5");
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      Document document0 = Parser.parse("\"[4&P&7x[", "\"[4&P&7x[");
      Element element0 = document0.prependElement("q]v%5>j`&Y");
      element0.before((Node) document0);
      // Undeclared exception!
      element0.wrap("$#");
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      Document document0 = Document.createShell("]2|^CrpF&R4\"W<++HD");
      // Undeclared exception!
//      try { 
        document0.wrap("");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // String must not be empty
//         //
//         verifyException("org.jsoup.helper.Validate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      Document document0 = Parser.parse("c%x`r-($,97wt<1", "e");
      XmlDeclaration xmlDeclaration0 = new XmlDeclaration("BlHy", true);
      xmlDeclaration0.reparentChild(document0);
      // Undeclared exception!
//      try { 
        document0.wrap("ScriptDataDoubleEscapeStart");
//        fail("Expecting exception: ClassCastException");
      
//      } catch(ClassCastException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("org.jsup.qdes.E*ement$", "org.jsup.qdes.E*ement$");
      Element element0 = document0.prependChild(document0);
      // Undeclared exception!
      element0.val("org.jsup.qdes.E*ement$");
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      Document document0 = Parser.parse("", "9:`/_$}~|Lq_@>`$");
      Parser parser0 = Parser.htmlParser();
      Parser parser1 = parser0.settings((ParseSettings) null);
      Document document1 = document0.parser(parser1);
      // Undeclared exception!
//      try { 
        document1.val("textarea");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.jsoup.nodes.Node", e);
//      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("Insert position out of bounds.", "Insert position out of bounds.");
      // Undeclared exception!
//      try { 
        document0.toggleClass((String) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Object must not be null
//         //
//         verifyException("org.jsoup.helper.Validate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      Document document0 = new Document("wm uzu|#");
      // Undeclared exception!
//      try { 
        document0.text("br");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.jsoup.nodes.Document", e);
//      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      Document document0 = Document.createShell("#");
      // Undeclared exception!
//      try { 
        document0.text((String) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Object must not be null
//         //
//         verifyException("org.jsoup.helper.Validate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      Document document0 = Parser.parse("\"[4&P&7x[", "\"[4&P&7x[");
      document0.appendTo(document0);
      // Undeclared exception!
      document0.tagName("p;ZuW");
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      Document document0 = Document.createShell("4\"[4P&x");
      // Undeclared exception!
//      try { 
        document0.tagName("");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Tag name must not be empty.
//         //
//         verifyException("org.jsoup.helper.Validate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("\"[4&P&$x[", "\"[4&P&$x[");
      // Undeclared exception!
//      try { 
        document0.selectFirst((String) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // String must not be empty
//         //
//         verifyException("org.jsoup.helper.Validate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      Document document0 = new Document("'>z1R");
      // Undeclared exception!
//      try { 
        document0.select("");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // String must not be empty
//         //
//         verifyException("org.jsoup.helper.Validate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      Document document0 = new Document("SB!");
      // Undeclared exception!
//      try { 
        document0.removeClass((String) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Object must not be null
//         //
//         verifyException("org.jsoup.helper.Validate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("4\"[4P&x", "4\"[4P&x");
      CDataNode cDataNode0 = new CDataNode("q");
      document0.setParentNode(cDataNode0);
      // Undeclared exception!
//      try { 
        document0.previousElementSibling();
//        fail("Expecting exception: ClassCastException");
      
//      } catch(ClassCastException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("br", "br");
      // Undeclared exception!
//      try { 
        document0.prependText((String) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Object must not be null
//         //
//         verifyException("org.jsoup.helper.Validate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("org.jsoup.nodes.Element$1", "org.jsoup.nodes.Element$1");
      Element element0 = document0.prependChild(document0);
      // Undeclared exception!
      element0.prependElement("");
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      Element element0 = new Element("wm uzu|#");
      // Undeclared exception!
//      try { 
        element0.prependElement((String) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Object must not be null
//         //
//         verifyException("org.jsoup.helper.Validate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      Document document0 = Document.createShell("#");
      Parser parser0 = Parser.htmlParser();
      List<Node> list0 = parser0.parseFragmentInput("#", document0, "#");
      document0.childNodes = list0;
      // Undeclared exception!
//      try { 
        document0.prependChild(document0);
//        fail("Expecting exception: UnsupportedOperationException");
      
//      } catch(UnsupportedOperationException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.util.Collections$UnmodifiableList", e);
//      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("04?G[z<DU&kA(#M", "04?G[z<DU&kA(#M");
      // Undeclared exception!
//      try { 
        document0.prependChild((Node) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Object must not be null
//         //
//         verifyException("org.jsoup.helper.Validate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      Document document0 = Parser.parse("I,", "I,");
      Element element0 = document0.prependChild(document0);
      // Undeclared exception!
      element0.prepend("I,");
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      Parser parser0 = Parser.xmlParser();
      Document document0 = parser0.parseInput("id", "id");
      // Undeclared exception!
//      try { 
        document0.prepend((String) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Object must not be null
//         //
//         verifyException("org.jsoup.helper.Validate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      Document document0 = Document.createShell("]2|^CrpF&R4\"W<++HD");
      char[] charArray0 = new char[3];
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      // Undeclared exception!
//      try { 
        document0.outerHtmlTail(charBuffer0, 58, document_OutputSettings0);
//        fail("Expecting exception: BufferOverflowException");
      
//      } catch(BufferOverflowException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.nio.CharBuffer", e);
//      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("kf_)uRg@jbx%B'", "kf_)uRg@jbx%B'");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      // Undeclared exception!
//      try { 
        document0.outerHtmlTail((Appendable) null, 649, document_OutputSettings0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.jsoup.nodes.Node", e);
//      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("InseUt position out .f bouTds.", "InseUt position out .f bouTds.");
      CharBuffer charBuffer0 = CharBuffer.allocate(62);
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      // Undeclared exception!
//      try { 
        document0.outerHtmlHead(charBuffer0, 4016, document_OutputSettings0);
//        fail("Expecting exception: BufferOverflowException");
      
//      } catch(BufferOverflowException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.nio.CharBuffer", e);
//      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("::.", "::.");
      StringWriter stringWriter0 = new StringWriter();
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      // Undeclared exception!
//      try { 
        document0.outerHtmlHead(stringWriter0, (-3373), document_OutputSettings0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // width must be > 0
//         //
//         verifyException("org.jsoup.internal.StringUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed(" ", " ");
      // Undeclared exception!
//      try { 
        document0.lastElementSibling();
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.jsoup.nodes.Element", e);
//      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      Document document0 = Document.createShell("[*:W)Xbo");
      // Undeclared exception!
//      try { 
        document0.is("[*:W)Xbo");
//        fail("Expecting exception: IllegalStateException");
      
//      } catch(IllegalStateException e) {
//         //
//         // Did not find balanced marker at '*:W)Xbo'
//         //
//         verifyException("org.jsoup.select.QueryParser", e);
//      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      Document document0 = Parser.parse("wm uzu|#", "wm uzu|#");
      Node[] nodeArray0 = new Node[4];
      nodeArray0[0] = (Node) document0;
      nodeArray0[1] = (Node) document0;
      nodeArray0[2] = (Node) document0;
      nodeArray0[3] = (Node) document0;
      // Undeclared exception!
//      try { 
        document0.insertChildren(1, nodeArray0);
//        fail("Expecting exception: IndexOutOfBoundsException");
      
//      } catch(IndexOutOfBoundsException e) {
//         //
//         // Index: 0, Size: 0
//         //
//         verifyException("java.util.ArrayList", e);
//      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("\"[4&P&$x[", "\"[4&P&$x[");
      document0.prependChild(document0);
      // Undeclared exception!
      document0.html("\"[4&P&$x[ \"[4&P&$x[ \"[4&P&$x[");
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("Insert position out of bounds.", "Insert position out of bounds.");
      // Undeclared exception!
//      try { 
        document0.html((String) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Object must not be null
//         //
//         verifyException("org.jsoup.helper.Validate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      Document document0 = Parser.parse("\"[4&P&$x[", "\"[4&P&$x[");
      PipedWriter pipedWriter0 = new PipedWriter();
      // Undeclared exception!
//      try { 
        document0.html(pipedWriter0);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // java.io.IOException: Pipe not connected
//         //
//         verifyException("org.jsoup.nodes.Node$OuterHtmlVisitor", e);
//      }
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("org.jsup.qdes.E*ement$", "org.jsup.qdes.E*ement$");
      document0.prependChild(document0);
      // Undeclared exception!
      document0.html();
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      Document document0 = Document.createShell("P+zQjl");
      Element element0 = document0.prependElement("0");
      Element element1 = element0.appendElement("small");
      Parser parser0 = Parser.xmlParser();
      List<Node> list0 = parser0.parseFragmentInput("^&z,j", document0, "^&z,j");
      element1.childNodes = list0;
      // Undeclared exception!
//      try { 
        document0.html();
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.jsoup.select.NodeTraversor", e);
//      }
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("br", "Tag name must not be empty.");
      CDataNode cDataNode0 = new CDataNode("Tag name must not be empty.");
      document0.parentNode = (Node) cDataNode0;
      // Undeclared exception!
//      try { 
        document0.html();
//        fail("Expecting exception: ClassCastException");
      
//      } catch(ClassCastException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      Document document0 = Parser.parse("iW]9crrU a>|q!@LZOo", "iW]9crrU a>|q!@LZOo");
      // Undeclared exception!
//      try { 
        document0.hasClass((String) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.jsoup.nodes.Element", e);
//      }
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("/KS%Tq&\"?p", "/KS%Tq&\"?p");
      // Undeclared exception!
//      try { 
        document0.getElementsMatchingText((String) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      Element element0 = new Element("\"[4&Pkx[");
      // Undeclared exception!
//      try { 
        element0.getElementsMatchingText("\"[4&Pkx[");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Pattern syntax error: \"[4&Pkx[
//         //
//         verifyException("org.jsoup.nodes.Element", e);
//      }
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("T}<TJu>UEQ", "T}<TJu>UEQ");
      // Undeclared exception!
//      try { 
        document0.getElementsMatchingOwnText((Pattern) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.jsoup.select.Evaluator$MatchesOwn", e);
//      }
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("org.js$p.qdes.E*erent$", "org.js$p.qdes.E*erent$");
      // Undeclared exception!
//      try { 
        document0.getElementsMatchingOwnText((String) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("\"[4P&7x[", "\"[4P&7x[");
      // Undeclared exception!
//      try { 
        document0.getElementsMatchingOwnText("\"[4P&7x[");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Pattern syntax error: \"[4P&7x[
//         //
//         verifyException("org.jsoup.nodes.Element", e);
//      }
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("org.jsup.odes.Element$", "org.jsup.odes.Element$");
      // Undeclared exception!
//      try { 
        document0.getElementsByTag((String) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // String must not be empty
//         //
//         verifyException("org.jsoup.helper.Validate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      Document document0 = Parser.parse("l", "l");
      CDataNode cDataNode0 = new CDataNode("6&$;VuvZ");
      document0.setParentNode(cDataNode0);
      // Undeclared exception!
//      try { 
        document0.getElementsByIndexEquals((-8));
//        fail("Expecting exception: ClassCastException");
      
//      } catch(ClassCastException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      Document document0 = Document.createShell("c%x`r-($,97wt<1");
      // Undeclared exception!
//      try { 
        document0.getElementsByClass((String) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // String must not be empty
//         //
//         verifyException("org.jsoup.helper.Validate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("br", "br");
      // Undeclared exception!
//      try { 
        document0.getElementsByAttributeValueStarting("br", (String) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // String must not be empty
//         //
//         verifyException("org.jsoup.helper.Validate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      Document document0 = new Document("SB!");
      // Undeclared exception!
//      try { 
        document0.getElementsByAttributeValueMatching("SB!", (String) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      Document document0 = Parser.parse("\"[4&P&$x[", "\"[4&P&$x[");
      // Undeclared exception!
//      try { 
        document0.getElementsByAttributeValueMatching("org.jsoup.select.Evaluator$IsNthChild", "\"[4&P&$x[");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Pattern syntax error: \"[4&P&$x[
//         //
//         verifyException("org.jsoup.nodes.Element", e);
//      }
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      Document document0 = Parser.parse("\"[4P&7x[", "\"[4P&7x[");
      // Undeclared exception!
//      try { 
        document0.getElementsByAttributeValueEnding("-)65rM_;UbpI#~{,.#", "'");
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      Document document0 = new Document("html");
      // Undeclared exception!
//      try { 
        document0.getElementsByAttributeValueEnding((String) null, "&,f:Krxh,~k$qnB");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // String must not be empty
//         //
//         verifyException("org.jsoup.helper.Validate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("Insert position out of bounds.", "Insert position out of bounds.");
      // Undeclared exception!
//      try { 
        document0.getElementsByAttributeValueContaining("Insert position out of bounds.", (String) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // String must not be empty
//         //
//         verifyException("org.jsoup.helper.Validate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      Document document0 = new Document("t}<tju>ueq");
      // Undeclared exception!
//      try { 
        document0.getElementsByAttributeStarting((String) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // String must not be empty
//         //
//         verifyException("org.jsoup.helper.Validate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      Document document0 = new Document("tCMRX|Bm%)DHFz7JB");
      // Undeclared exception!
//      try { 
        document0.getElementsByAttribute("");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // String must not be empty
//         //
//         verifyException("org.jsoup.helper.Validate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      Document document0 = Document.createShell("");
      // Undeclared exception!
//      try { 
        document0.getElementById("");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // String must not be empty
//         //
//         verifyException("org.jsoup.helper.Validate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      Document document0 = Document.createShell("x%gxhnt&0_vm");
      // Undeclared exception!
//      try { 
        document0.firstElementSibling();
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.jsoup.nodes.Element", e);
//      }
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      Element element0 = new Element("wm uzu}#");
      Element element1 = element0.appendElement("wm uzu}#");
      // Undeclared exception!
//      try { 
        element1.cssSelector();
//        fail("Expecting exception: IllegalStateException");
      
//      } catch(IllegalStateException e) {
//         //
//         // Could not parse query 'uzu}#': unexpected token at '}#'
//         //
//         verifyException("org.jsoup.select.QueryParser", e);
//      }
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("Insert position out of bounds.", "Insert position out of bounds.");
      Element element0 = document0.body();
      element0.siblingIndex = (-441);
      // Undeclared exception!
//      try { 
        element0.cssSelector();
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      Document document0 = Parser.parse("org.jsup.odes.Element$", "org.jsup.odes.Element$");
      // Undeclared exception!
//      try { 
        document0.classNames((Set<String>) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Object must not be null
//         //
//         verifyException("org.jsoup.helper.Validate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("frg.jsoup.nodesRElemeJE$1", "");
      // Undeclared exception!
//      try { 
        document0.child((-1472090550));
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      Document document0 = new Document("7");
      document0.appendTo(document0);
      document0.empty();
      // Undeclared exception!
//      try { 
        document0.before((Node) document0);
//        fail("Expecting exception: IndexOutOfBoundsException");
      
//      } catch(IndexOutOfBoundsException e) {
//         //
//         // Index: 0, Size: 0
//         //
//         verifyException("java.util.ArrayList", e);
//      }
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("\"[4&P&7x[", "attributesinglevaluecharssorted");
      // Undeclared exception!
//      try { 
        document0.attr((String) null, true);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Object must not be null
//         //
//         verifyException("org.jsoup.helper.Validate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      Document document0 = Parser.parse("\"[4&P&7x[", "\"[4&P&7x[");
      document0.appendTo(document0);
      // Undeclared exception!
      document0.attr("p;ZuW", "\"[4&P&7x[");
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("org.jsoup.nodes.ElemenE$1", "org.jsoup.nodes.ElemenE$1");
      // Undeclared exception!
//      try { 
        document0.attr((String) null, "id");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.jsoup.parser.ParseSettings", e);
//      }
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      Document document0 = new Document("org.jsoup.select.Elements");
      // Undeclared exception!
//      try { 
        document0.appendText((String) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Object must not be null
//         //
//         verifyException("org.jsoup.helper.Validate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("org.jsup.odes.Element$", "org.jsup.odes.Element$");
      Element element0 = document0.prependChild(document0);
      // Undeclared exception!
      element0.appendElement("org.jsup.odes.Element$");
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      Document document0 = Parser.parse("b", "b");
      // Undeclared exception!
//      try { 
        document0.appendElement((String) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Object must not be null
//         //
//         verifyException("org.jsoup.helper.Validate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      Document document0 = new Document("body");
      document0.setParentNode(document0);
      // Undeclared exception!
//      try { 
        document0.appendChild(document0);
//        fail("Expecting exception: IndexOutOfBoundsException");
      
//      } catch(IndexOutOfBoundsException e) {
//         //
//         // Index: 0, Size: 0
//         //
//         verifyException("java.util.ArrayList", e);
//      }
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      ParseSettings parseSettings0 = ParseSettings.preserveCase;
      Tag tag0 = Tag.valueOf("id", parseSettings0);
      FormElement formElement0 = new FormElement(tag0, "4/\"`;w~hxdhb+f&", (Attributes) null);
      // Undeclared exception!
//      try { 
        formElement0.appendChild((Node) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Object must not be null
//         //
//         verifyException("org.jsoup.helper.Validate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      Document document0 = Parser.parse("\"[4&P&7x[", "\"[4&P&7x[");
      Element element0 = document0.prependChild(document0);
      // Undeclared exception!
      element0.append("s+");
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      Document document0 = new Document("Insert position out of bounds.");
      // Undeclared exception!
//      try { 
        document0.append((String) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Object must not be null
//         //
//         verifyException("org.jsoup.helper.Validate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      Document document0 = Document.createShell("xmp");
      DocumentType documentType0 = new DocumentType("textarea", (String) null, "textarea", (String) null);
      document0.setParentNode(documentType0);
      // Undeclared exception!
//      try { 
        document0.append("xmp");
//        fail("Expecting exception: ClassCastException");
      
//      } catch(ClassCastException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("\"[4&P&7x[", "\"[4&P&7x[");
      document0.prependChild(document0);
      // Undeclared exception!
      document0.after("W^m5V+i)");
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      Document document0 = new Document("SB!");
      // Undeclared exception!
//      try { 
        document0.addClass((String) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Object must not be null
//         //
//         verifyException("org.jsoup.helper.Validate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      CDataNode cDataNode0 = new CDataNode("default");
      Attributes attributes0 = cDataNode0.attributes();
      Element element0 = null;
//      try {
        element0 = new Element((Tag) null, "xhtml", attributes0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Object must not be null
//         //
//         verifyException("org.jsoup.helper.Validate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      Element element0 = null;
//      try {
        element0 = new Element((Tag) null, "]2|^CrpF&R4\"W<++HD");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Object must not be null
//         //
//         verifyException("org.jsoup.helper.Validate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      Element element0 = null;
//      try {
        element0 = new Element((String) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Object must not be null
//         //
//         verifyException("org.jsoup.helper.Validate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("\"[4&P&$x[", "\"[4&P&$x[");
      StringWriter stringWriter0 = new StringWriter();
      document0.html(stringWriter0);
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment(":nth-last-child(540n)", ":nth-last-child(540n)");
      document0.hasClass("Tag name must not be empty.");
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      Document document0 = Parser.parse("I,", "I,");
      document0.prepend("\"4&\"kx[");
      document0.data();
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("wm uzu}#", "wm uzu}#");
      Element element0 = document0.body();
      element0.hasText();
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      Document document0 = Document.createShell("]2|^CrpF&R4\"W<++HD");
      document0.elementSiblingIndex();
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("br", "Tag name must not be empty.");
      Element element0 = document0.body();
      element0.elementSiblingIndex();
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      Document document0 = new Document("04G[z<U&kA#M");
      Document document1 = document0.normalise();
      Node[] nodeArray0 = new Node[7];
      nodeArray0[0] = (Node) document1;
      nodeArray0[1] = (Node) document1;
      nodeArray0[2] = (Node) document1;
      nodeArray0[3] = (Node) document1;
      nodeArray0[4] = (Node) document1;
      nodeArray0[5] = (Node) document0;
      nodeArray0[6] = (Node) document1;
      document1.addChildren(nodeArray0);
      document1.previousElementSibling();
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      Document document0 = Parser.parse("\"[4&P&7x[", "\"[4&P&7x[");
      Element element0 = document0.prependChild(document0);
      element0.nextElementSibling();
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("\"[4&P&7x[", "\"[4&P&7x[");
      Element element0 = document0.prependChild(document0);
      document0.empty();
      element0.nextElementSibling();
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      Document document0 = Parser.parse("\"[4&aP&7x[", "\"[4&aP&7x[");
      XmlDeclaration xmlDeclaration0 = new XmlDeclaration("`z", "                   ", false);
      Element element0 = document0.doClone(xmlDeclaration0);
      // Undeclared exception!
//      try { 
        element0.nextElementSibling();
//        fail("Expecting exception: ClassCastException");
      
//      } catch(ClassCastException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      Document document0 = Parser.parse("\"[4&P&7x[", "\"[4&P&7x[");
      Element element0 = document0.prependChild(document0);
      element0.cssSelector();
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("br", "Tag name must not be empty.");
      Element element0 = document0.body();
      element0.append("br");
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("Insert position out of bounds.", "Insert position out of bounds.");
      document0.attributes();
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      ParseSettings parseSettings0 = new ParseSettings(false, false);
      Tag tag0 = Tag.valueOf("[g#Uwz", parseSettings0);
      CDataNode cDataNode0 = new CDataNode("Children collection to be inserted must not be null.");
      Attributes attributes0 = cDataNode0.attributes();
      Element element0 = new Element(tag0, "VQ\"G6", attributes0);
      element0.attributes();
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      Document document0 = Document.createShell("<%=-!d");
      document0.className();
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed(">TjU&", "-uL1Ueq}YP=\"b");
      document0.ownText();
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("br", "Tag name must not be empty.");
      document0.isBlock();
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      Document document0 = new Document("html");
      Element element0 = document0.createElement("html");
      element0.clone();
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("\"[4&P&$x[", "\"[4&P&$x[");
      // Undeclared exception!
//      try { 
        document0.getElementsMatchingText((Pattern) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.jsoup.select.Evaluator$Matches", e);
//      }
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("I,", "I,");
      // Undeclared exception!
//      try { 
        document0.is((Evaluator) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.jsoup.nodes.Element", e);
//      }
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      Tag tag0 = Tag.valueOf(":ImmediateParent%s");
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = new FormElement(tag0, ":ImmediateParent%s", attributes0);
      formElement0.getElementsByAttributeValueMatching("org.jsoup.nodes.Element$2", (Pattern) null);
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      Document document0 = Parser.parse("\"[4&P&7x[", "\"[4&P&7x[");
      document0.id();
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      Document document0 = Document.createShell(";.xd#[-D");
      document0.classNames();
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("Insert position out of bouTds.", "Insert position out of bouTds.");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      // Undeclared exception!
//      try { 
        document0.outerHtmlHead((Appendable) null, (-2076), document_OutputSettings0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.jsoup.nodes.Node", e);
//      }
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      Document document0 = Document.createShell("br");
      Element element0 = document0.prependElement("br");
      element0.appendElement("small");
      document0.html();
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      Element element0 = new Element("br");
      element0.outerHtml();
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("A", "A");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      document_OutputSettings0.prettyPrint(false);
      Document document1 = document0.outputSettings(document_OutputSettings0);
      document1.html();
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      Tag tag0 = Tag.valueOf("textarea");
      Element element0 = new Element(tag0, "org.jsoup.nodes.Element$2");
      element0.val("Split offset must be not be negative");
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      Tag tag0 = Tag.valueOf("textarea");
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = new FormElement(tag0, "textarea", attributes0);
      formElement0.val();
  }

  @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      Document document0 = Document.createShell("\"[4&P&7x[");
      document0.toggleClass("9.EB}d YaR=)WlW],m_");
      document0.hasClass("L4op");
  }

  @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      Document document0 = Parser.parse("I,", "I,");
      CDataNode cDataNode0 = new CDataNode("I,");
      document0.prependChild(cDataNode0);
      document0.data();
  }

  @Test(timeout = 4000)
  public void test223()  throws Throwable  {
      Document document0 = Parser.parse("Tag name must not be empty.", "ZZ");
      Comment comment0 = new Comment("Tag name must not be empty.");
      document0.prependChild(comment0);
      document0.data();
  }

  @Test(timeout = 4000)
  public void test224()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("br", "br");
      DataNode dataNode0 = new DataNode("jI1O?BZnz G'}?");
      document0.prependChild(dataNode0);
      document0.data();
  }

  @Test(timeout = 4000)
  public void test225()  throws Throwable  {
      Document document0 = new Document("Insert position out of bounds.");
      document0.append("<!");
      document0.hasText();
  }

  @Test(timeout = 4000)
  public void test226()  throws Throwable  {
      Parser parser0 = Parser.htmlParser();
      StringReader stringReader0 = new StringReader("<html>\n <head></head>\n <body>\n  \"[4&amp;P&amp;$x[\n </body>\n</html>");
      Document document0 = parser0.parseInput((Reader) stringReader0, "fcFX:Cl^z=dII^c");
      document0.hasText();
  }

  @Test(timeout = 4000)
  public void test227()  throws Throwable  {
      Document document0 = Document.createShell("\"[4&P&$x[");
      document0.hasText();
  }

  @Test(timeout = 4000)
  public void test228()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("org.jsup.odes.Element$", "org.jsup.odes.Element$");
      Element element0 = document0.prependChild(document0);
      Element.preserveWhitespace(element0);
  }

  @Test(timeout = 4000)
  public void test229()  throws Throwable  {
      Element.preserveWhitespace((Node) null);
  }

  @Test(timeout = 4000)
  public void test230()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("br", "br");
      document0.prependElement("br");
      document0.getElementsMatchingOwnText("br");
  }

  @Test(timeout = 4000)
  public void test231()  throws Throwable  {
      Document document0 = Parser.parse("", "Bnkivg");
      CDataNode cDataNode0 = new CDataNode("_d6j[KC?LE");
      Element element0 = document0.prependChild(cDataNode0);
      element0.getElementsMatchingOwnText("!vvv N%|ej");
  }

  @Test(timeout = 4000)
  public void test232()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("org.jsup.odes.Element$", "org.jsup.odes.Element$");
      document0.title("org.jsup.odes.Element$");
      document0.text();
  }

  @Test(timeout = 4000)
  public void test233()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("F#aK>dq_,K9< B1BH", "area");
      Comment comment0 = new Comment("cite");
      Element element0 = document0.prependChild(comment0);
      Pattern pattern0 = Pattern.compile("IA5 8U=CeFfX5^#6g", 6);
      element0.getElementsMatchingOwnText(pattern0);
  }

  @Test(timeout = 4000)
  public void test234()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("org.jsup.odes.Element$", "org.jsup.odes.Element$");
      document0.append("org.jsup.odes.Element$");
      document0.text();
  }

  @Test(timeout = 4000)
  public void test235()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("org.jsup.o-es.Elem_nt$", "org.jsup.o-es.Elem_nt$");
      document0.prepend("org.jsup.o-es.Elem_nt$");
      document0.text();
  }

  @Test(timeout = 4000)
  public void test236()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("T}<TJu>UEQ", "T}<TJu>UEQ");
      document0.getElementsContainingText(":last-of-type");
  }

  @Test(timeout = 4000)
  public void test237()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("04?G|\"<!kA(#A", "04?G|\"<!kA(#A");
      document0.getElementsContainingText("prompt");
  }

  @Test(timeout = 4000)
  public void test238()  throws Throwable  {
      Document document0 = Document.createShell("wm uzu|#");
      Element element0 = document0.head();
      element0.lastElementSibling();
  }

  @Test(timeout = 4000)
  public void test239()  throws Throwable  {
      Document document0 = Parser.parse("\"[4&P&7x[", "\"[4&P&7x[");
      Element element0 = document0.prependChild(document0);
      document0.empty();
      element0.lastElementSibling();
  }

  @Test(timeout = 4000)
  public void test240()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("org.jsoup.nodes.Element", "org.jsoup.nodes.Element");
      Element element0 = document0.head();
      element0.firstElementSibling();
  }

  @Test(timeout = 4000)
  public void test241()  throws Throwable  {
      Document document0 = Parser.parse("]2|^CtpR4\"W<++HD", "z");
      document0.parentNode = (Node) document0;
      document0.firstElementSibling();
  }

  @Test(timeout = 4000)
  public void test242()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("wm uzu}#", "wm uzu}#");
      Element element0 = document0.body();
      element0.previousElementSiblings();
  }

  @Test(timeout = 4000)
  public void test243()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("org.jsoup.nodes.Element$1", "org.jsoup.nodes.Element$1");
      document0.previousElementSibling();
  }

  @Test(timeout = 4000)
  public void test244()  throws Throwable  {
      Document document0 = Parser.parse("\"[4&P&$x[", "\"[4&P&$x[");
      Element element0 = document0.doClone(document0);
      element0.previousElementSibling();
  }

  @Test(timeout = 4000)
  public void test245()  throws Throwable  {
      Document document0 = Parser.parse("IPFj|op]:u`J*6ckyG", "IPFj|op]:u`J*6ckyG");
      document0.nextElementSibling();
  }

  @Test(timeout = 4000)
  public void test246()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("Insert position out of bounds.", "Insert position out of bounds.");
      Element element0 = document0.head();
      Elements elements0 = element0.nextElementSiblings();
      assertEquals("Insert position out of bounds.", element0.baseUri());
      assertEquals(1, elements0.size());
  }

  @Test(timeout = 4000)
  public void test247()  throws Throwable  {
      Element element0 = new Element("wm uzu}#");
      Elements elements0 = element0.siblingElements();
      assertEquals(0, elements0.size());
  }

  @Test(timeout = 4000)
  public void test248()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("org.jsup.odes.Element$", "org.jsup.odes.Element$");
      Element element0 = document0.head();
      Elements elements0 = element0.siblingElements();
      assertEquals("org.jsup.odes.Element$", element0.baseUri());
      assertEquals(1, elements0.size());
  }

  @Test(timeout = 4000)
  public void test249()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("::6.", "::6.");
      Element element0 = document0.head();
      String string0 = element0.cssSelector();
      assertEquals("::6.", element0.baseUri());
      assertEquals("html > head", string0);
  }

  @Test(timeout = 4000)
  public void test250()  throws Throwable  {
      Document document0 = new Document("");
      document0.addClass("#root");
      String string0 = document0.cssSelector();
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test251()  throws Throwable  {
      Document document0 = Parser.parse("wm uzu|#", "wm uzu|#");
      Node[] nodeArray0 = new Node[4];
      // Undeclared exception!
//      try { 
        document0.insertChildren(1, nodeArray0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Array must not contain any null objects
//         //
//         verifyException("org.jsoup.helper.Validate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test252()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("04?G[z<DU&kA(#M", "QzaG;cX%Hw=");
      Node[] nodeArray0 = new Node[2];
      // Undeclared exception!
//      try { 
        document0.insertChildren((-1188), nodeArray0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Insert position out of bounds.
//         //
//         verifyException("org.jsoup.helper.Validate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test253()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("\"[4&P&$x[", "\"[4&P&$x[");
      Node[] nodeArray0 = new Node[5];
      // Undeclared exception!
//      try { 
        document0.insertChildren(349, nodeArray0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Insert position out of bounds.
//         //
//         verifyException("org.jsoup.helper.Validate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test254()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("org.jsup.odes.Element$", "org.jsup.odes.Element$");
      List<DataNode> list0 = document0.dataNodes();
      assertEquals(0, list0.size());
      assertEquals(1, document0.childNodeSize());
      
      Element element0 = document0.insertChildren(1, (Collection<? extends Node>) list0);
      assertEquals("org.jsup.odes.Element$", element0.baseUri());
  }

  @Test(timeout = 4000)
  public void test255()  throws Throwable  {
      Document document0 = Document.createShell("A_2m2bbF?N:.x'F/");
      List<DataNode> list0 = document0.dataNodes();
      // Undeclared exception!
//      try { 
        document0.insertChildren(8, (Collection<? extends Node>) list0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Insert position out of bounds.
//         //
//         verifyException("org.jsoup.helper.Validate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test256()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("org.jsoup.nodes.Element$1", "org.jsoup.nodes.Element$1");
      document0.append("org.jsoup.nodes.Element$1");
      document0.textNodes();
      assertEquals(2, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test257()  throws Throwable  {
      Document document0 = new Document("xmp");
      Element element0 = document0.append("xmp");
      element0.children();
      assertEquals(1, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test258()  throws Throwable  {
      Document document0 = Document.createShell("]2|^CrpF&R4\"W<++HD");
      Elements elements0 = document0.getElementsByIndexGreaterThan(2242);
      assertEquals(1, document0.childNodeSize());
      assertTrue(elements0.isEmpty());
      assertEquals("]2|^CrpF&R4\"W<++HD", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test259()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("%a%9i/^{=E", "%a%9i/^{=E");
      // Undeclared exception!
//      try { 
        document0.selectFirst("%a%9i/^{=E");
//        fail("Expecting exception: IllegalStateException");
      
//      } catch(IllegalStateException e) {
//         //
//         // Could not parse query '%a%9i/^{=E': unexpected token at '%a%9i/^{=E'
//         //
//         verifyException("org.jsoup.select.QueryParser", e);
//      }
  }

  @Test(timeout = 4000)
  public void test260()  throws Throwable  {
      Document document0 = Document.createShell("]2|^CrpF&R4\"W<++HD");
      document0.getAllElements();
      assertEquals(1, document0.childNodeSize());
      assertEquals("]2|^CrpF&R4\"W<++HD", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test261()  throws Throwable  {
      Document document0 = Parser.parse("\"[4&P&$x[", "\"[4&P&$x[");
      // Undeclared exception!
//      try { 
        document0.before("q!y0yiK*x*0~DuKV");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Object must not be null
//         //
//         verifyException("org.jsoup.helper.Validate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test262()  throws Throwable  {
      Element element0 = new Element("\"[4&P&7x[");
      Elements elements0 = element0.getElementsByAttribute("option[selected]");
      assertEquals(0, elements0.size());
  }

  @Test(timeout = 4000)
  public void test263()  throws Throwable  {
      Document document0 = Document.createShell(";.xd#[-D");
      // Undeclared exception!
//      try { 
        document0.getElementsByAttributeValueNot(";.xd#[-D", "");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // String must not be empty
//         //
//         verifyException("org.jsoup.helper.Validate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test264()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("Insert position out of bounds.", "Insert position out of bounds.");
      // Undeclared exception!
//      try { 
        document0.appendTo((Element) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Object must not be null
//         //
//         verifyException("org.jsoup.helper.Validate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test265()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("br", "br");
      Element element0 = document0.shallowClone();
      assertEquals(1, document0.childNodeSize());
      assertEquals("br", element0.baseUri());
  }

  @Test(timeout = 4000)
  public void test266()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("Insert position out of bounds.", "Insert position out of bounds.");
      // Undeclared exception!
//      try { 
        document0.after((Node) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Object must not be null
//         //
//         verifyException("org.jsoup.helper.Validate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test267()  throws Throwable  {
      Document document0 = new Document("SB!");
      document0.getElementsByAttributeValueContaining("SB!", "SB!");
      assertEquals("SB!", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test268()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("\"[4&P&$x[", "\"[4&P&$x[");
      Elements elements0 = document0.getElementsContainingText("\"[4&P&$x[");
      assertEquals("\"[4&P&$x[", document0.baseUri());
      assertEquals(3, elements0.size());
  }

  @Test(timeout = 4000)
  public void test269()  throws Throwable  {
      Document document0 = Document.createShell("]2|^CrpF&R4\"W<++HD");
      Elements elements0 = document0.getElementsByClass("]2|^CrpF&R4\"W<++HD");
      assertEquals(1, document0.childNodeSize());
      assertTrue(elements0.isEmpty());
      assertEquals("]2|^CrpF&R4\"W<++HD", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test270()  throws Throwable  {
      Document document0 = new Document("Jlu]>l\u0001BVqLse");
      document0.getElementsByAttributeValueEnding("Ul0", "Jlu]>l\u0001BVqLse");
      assertEquals("Jlu]>l\u0001BVqLse", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test271()  throws Throwable  {
      Document document0 = Parser.parse("\"[4&P&$x[", "\"[4&P&$x[");
      document0.is("DoctypeSystemIdentifier_singleQuoted");
      assertEquals(1, document0.childNodeSize());
      assertEquals("\"[4&P&$x[", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test272()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("l", "6&$;VZ");
      Elements elements0 = document0.getElementsByIndexEquals((-8));
      assertEquals("6&$;VZ", document0.baseUri());
      assertTrue(elements0.isEmpty());
      assertEquals(1, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test273()  throws Throwable  {
      Document document0 = Parser.parse("\"[4&P&$x[", "\"[4&P&$x[");
      document0.getElementsByAttributeStarting("mYUIg$MMN");
      assertEquals(1, document0.childNodeSize());
      assertEquals("\"[4&P&$x[", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test274()  throws Throwable  {
      Document document0 = Document.createShell("Zm}*VO~6+MSO7`Azt");
      Elements elements0 = document0.getElementsByIndexLessThan(65535);
      assertEquals(1, document0.childNodeSize());
      assertEquals("Zm}*VO~6+MSO7`Azt", document0.baseUri());
      assertFalse(elements0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test275()  throws Throwable  {
      Document document0 = Parser.parse("q`6#K!klW}rGA@", "q`6#K!klW}rGA@");
      // Undeclared exception!
//      try { 
        document0.after("q`6#K!klW}rGA@");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Object must not be null
//         //
//         verifyException("org.jsoup.helper.Validate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test276()  throws Throwable  {
      Document document0 = Document.createShell("org.jsoup.nodes.Element$2");
      // Undeclared exception!
//      try { 
        document0.select("jU]?X+s");
//        fail("Expecting exception: IllegalStateException");
      
//      } catch(IllegalStateException e) {
//         //
//         // Could not parse query 'jU]?X+s': unexpected token at ']?X+s'
//         //
//         verifyException("org.jsoup.select.QueryParser", e);
//      }
  }

  @Test(timeout = 4000)
  public void test277()  throws Throwable  {
      Document document0 = Parser.parse("Insert position out of bounds.", "Insert position out of bounds.");
      document0.getElementsByAttributeValueStarting("class", "class");
      assertEquals(1, document0.childNodeSize());
      assertEquals("Insert position out of bounds.", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test278()  throws Throwable  {
      Document document0 = Parser.parse("\"[4&P&$x[", "\"[4&P&$x[");
      // Undeclared exception!
//      try { 
        document0.getElementsByAttributeValue("\"[4&P&$x[", (String) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // String must not be empty
//         //
//         verifyException("org.jsoup.helper.Validate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test279()  throws Throwable  {
      Document document0 = Parser.parse("\"[4&P&$x[", "\"[4&P&$x[");
      String string0 = document0.wholeText();
      assertEquals("\"[4&P&$x[", string0);
      assertEquals("\"[4&P&$x[", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test280()  throws Throwable  {
      Document document0 = Document.createShell("zD1_Ho/Lv@Vr");
      // Undeclared exception!
//      try { 
        document0.before((Node) document0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Object must not be null
//         //
//         verifyException("org.jsoup.helper.Validate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test281()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("%a%9i/^{=E", "%a%9i/^{=E");
      Elements elements0 = document0.getElementsContainingOwnText("%a%9i/^{=E");
      assertEquals(1, document0.childNodeSize());
      assertEquals(1, elements0.size());
      assertEquals("%a%9i/^{=E", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test282()  throws Throwable  {
      Document document0 = Parser.parse("T}<TJu>UEQ", "T}<TJu>UEQ");
      document0.dataset();
      assertEquals("T}<TJu>UEQ", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test283()  throws Throwable  {
      Document document0 = Document.createShell("]2|^CrpF&R4\"W<++HD");
      assertEquals(1, document0.childNodeSize());
      
      document0.empty();
      assertEquals("]2|^CrpF&R4\"W<++HD", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test284()  throws Throwable  {
      Document document0 = Parser.parse("", "");
      // Undeclared exception!
//      try { 
        document0.child(66);
//        fail("Expecting exception: IndexOutOfBoundsException");
      
//      } catch(IndexOutOfBoundsException e) {
//         //
//         // Index: 66, Size: 1
//         //
//         verifyException("java.util.ArrayList", e);
//      }
  }

  @Test(timeout = 4000)
  public void test285()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("InseUt position out .f bouTds.", "InseUt position out .f bouTds.");
      document0.previousElementSiblings();
      assertEquals(1, document0.childNodeSize());
      assertEquals("InseUt position out .f bouTds.", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test286()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("Insert position out of bounds.", "Insert position out of bounds.");
      Elements elements0 = document0.getElementsMatchingText("Insert position out of bounds.");
      assertEquals(3, elements0.size());
      assertEquals("Insert position out of bounds.", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test287()  throws Throwable  {
      Element element0 = new Element("org.jsoup.nodes.Element$1");
      // Undeclared exception!
//      try { 
        element0.wrap("org.jsoup.nodes.Element$1");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.jsoup.nodes.Node", e);
//      }
  }

  @Test(timeout = 4000)
  public void test288()  throws Throwable  {
      Document document0 = Parser.parse("\"[4&P&$x[", "\"[4&P&$x[");
      document0.nextElementSiblings();
      assertEquals("\"[4&P&$x[", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test289()  throws Throwable  {
      Document document0 = Document.createShell("]2|^CrpF&4\"W<Y+YD");
      Element element0 = document0.getElementById("]2|^CrpF&4\"W<Y+YD");
      assertEquals(1, document0.childNodeSize());
      assertEquals("]2|^CrpF&4\"W<Y+YD", document0.baseUri());
      assertNull(element0);
  }
}
