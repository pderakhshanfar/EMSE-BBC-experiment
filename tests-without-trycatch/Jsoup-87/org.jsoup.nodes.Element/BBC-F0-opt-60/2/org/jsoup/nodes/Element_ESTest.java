/*
 * This file was automatically generated by EvoSuite
 * Wed Oct 13 23:09:35 GMT 2021
 */

package org.jsoup.nodes;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedWriter;
import java.io.File;
import java.io.PipedReader;
import java.io.PipedWriter;
import java.io.Reader;
import java.io.StringReader;
import java.io.StringWriter;
import java.nio.CharBuffer;
import java.nio.ReadOnlyBufferException;
import java.nio.charset.Charset;
import java.util.Collection;
import java.util.LinkedHashSet;
import java.util.List;
import java.util.Locale;
import java.util.Map;
import java.util.Set;
import java.util.regex.Pattern;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileWriter;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.jsoup.nodes.Attributes;
import org.jsoup.nodes.CDataNode;
import org.jsoup.nodes.Comment;
import org.jsoup.nodes.DataNode;
import org.jsoup.nodes.Document;
import org.jsoup.nodes.DocumentType;
import org.jsoup.nodes.Element;
import org.jsoup.nodes.FormElement;
import org.jsoup.nodes.Node;
import org.jsoup.nodes.PseudoTextElement;
import org.jsoup.nodes.TextNode;
import org.jsoup.parser.ParseSettings;
import org.jsoup.parser.Parser;
import org.jsoup.parser.Tag;
import org.jsoup.select.Elements;
import org.jsoup.select.Evaluator;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Element_ESTest extends Element_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment(">rg.js.up.nodes.El}ent$No:eList", ">rg.js.up.nodes.El}ent$No:eList");
      document0.appendElement("XIw2P6=q-,EC`g2c");
      document0.appendTo(document0);
      document0.previousElementSiblings();
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Document document0 = Document.createShell("");
      Element element0 = document0.head();
      Element element1 = document0.doClone(element0);
      element1.nextElementSibling();
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Tag tag0 = Tag.valueOf("POST");
      Attributes attributes0 = new Attributes();
      PseudoTextElement pseudoTextElement0 = new PseudoTextElement(tag0, "POST", attributes0);
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      pseudoTextElement0.outerHtmlTail((Appendable) null, 0, document_OutputSettings0);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Document document0 = Document.createShell("|Z+");
      MockPrintStream mockPrintStream0 = new MockPrintStream("|Z+");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0, true);
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      document0.outerHtmlHead(mockPrintWriter0, 0, document_OutputSettings0);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Element element0 = new Element("textarea");
      element0.nodelistChanged();
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Document document0 = Parser.parse("option[selected]", "option[selected]");
      document0.ensureChildNodes();
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("/", "/");
      Parser parser0 = Parser.xmlParser();
      Document document1 = document0.parser(parser0);
      document1.wrap("/q2.>4tT2GN%(p");
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("org.wsoup:nodes.Element$NodeList", "org.wsoup:nodes.Element$NodeList");
      Element element0 = document0.head();
      element0.wrap("T@8Ito%^");
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Document document0 = Parser.parse("dr|1HOQgsb5{gSri$w", "dr|1HOQgsb5{gSri$w");
      Element element0 = document0.body();
      element0.wrap("dr|1HOQgsb5{gSri$w");
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("org.jsoup.nodes.Element$NodeList", "org.jsoup.nodes.Element$NodeList");
      Document document1 = Parser.parseBodyFragmentRelaxed("org.jsoup.nodes.Element$NodeList", "/");
      Element element0 = document0.appendTo(document1);
      element0.val("org.jsoup.nodes.Element$NodeList");
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      ParseSettings parseSettings0 = ParseSettings.htmlDefault;
      Tag tag0 = Tag.valueOf("br", parseSettings0);
      Attributes attributes0 = new Attributes();
      PseudoTextElement pseudoTextElement0 = new PseudoTextElement(tag0, "comment", attributes0);
      pseudoTextElement0.tagName("dl");
      pseudoTextElement0.val("Insert position out of bounds.");
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      ParseSettings parseSettings0 = new ParseSettings(true, true);
      Tag tag0 = Tag.valueOf("#", parseSettings0);
      Attributes attributes0 = new Attributes();
      PseudoTextElement pseudoTextElement0 = new PseudoTextElement(tag0, "", attributes0);
      Element element0 = pseudoTextElement0.val(" ");
      element0.val();
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Document document0 = Document.createShell("");
      document0.appendTo(document0);
      document0.toggleClass("t8J$Pu1R>I(Ko}F9&");
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed(")rg.jsoup.nodes.Element$NodeList", "/");
      document0.siblingIndex = (-3242);
      document0.toggleClass("B?hn]Dq_(Of<C");
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("`", "4]_5%6<q4");
      Element element0 = document0.head();
      element0.toggleClass("$4Y");
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      ParseSettings parseSettings0 = ParseSettings.htmlDefault;
      Tag tag0 = Tag.valueOf("caption", parseSettings0);
      CDataNode cDataNode0 = new CDataNode("tag name must not be empty.");
      Attributes attributes0 = cDataNode0.attributes();
      FormElement formElement0 = new FormElement(tag0, "tag name must not be empty.", attributes0);
      formElement0.text("/E");
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("org.jsoup.nodes.Element$NodeList", "org.jsoup.nodes.Element$NodeList");
      Document document1 = Parser.parseBodyFragmentRelaxed("org.jsoup.nodes.Element$NodeList", "/");
      Element element0 = document1.text("X");
      Element element1 = document0.appendTo(element0);
      Element element2 = element1.tagName("X");
      element2.text("/");
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Document document0 = Document.createShell("org.jsoup.nodes.Element$NodeList");
      document0.text();
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("org.jsoup.nodes.Element$NodeList", "id");
      document0.setSiblingIndex((-2049));
      document0.tagName("^Pvc)h 6]v");
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Document document0 = Document.createShell("");
      document0.tagName();
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Parser parser0 = Parser.htmlParser();
      Document document0 = parser0.parseInput("", "br");
      Element element0 = document0.body();
      element0.tag();
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Parser parser0 = Parser.htmlParser();
      Document document0 = parser0.parseInput(":gt(", "V+^ZG4GKRTs");
      document0.tag();
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Document document0 = Document.createShell("org.jsoup.nodes.Element$NodeList");
      Element element0 = document0.body();
      element0.shallowClone();
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("org.jsoup.nodes.Element$NodeList", "org.jsoup.nodes.Element$NodeList");
      document0.selectFirst("br");
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Document document0 = Parser.parse("option[selected]", "option[selected]");
      document0.select("option[selected]");
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("org.jsoup.nodes.Element$NodeList", "id");
      Element element0 = document0.tagName("id");
      element0.select("id");
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("org.jsoup.nodes.Element$NodeList", "id");
      document0.appendTo(document0);
      document0.removeClass("org.jsoup.nodes.Element$NodeList");
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("org.jsoup.nodes.Element$NodeList", "org.jsoup.nodes.Element$NodeList");
      Element element0 = document0.head();
      element0.removeClass("?IM8+3jS#HwfL");
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Document document0 = Parser.parse("ulm2,", "textarea");
      Element element0 = document0.body();
      element0.previousElementSibling();
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Document document0 = Document.createShell("RCDATAEndTagName");
      Element element0 = document0.body();
      element0.prependText("`_><wTW2");
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment(">rg.js.up.nodes.El}ent$No:eList", ">rg.js.up.nodes.El}ent$No:eList");
      Element element0 = document0.appendTo(document0);
      element0.prependText(">rg.js.up.nodes.El}ent$No:eList");
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Element element0 = new Element("br");
      element0.prependElement("html");
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("org.jsoup.nodes.Element$NodeList", "org.jsoup.nodes.Element$NodeList");
      document0.prependElement("textarea");
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("org.jsoup.nodes.Element$NodeList", "id");
      Element element0 = document0.body();
      element0.prependChild(document0);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Document document0 = Parser.parse("|p+", "|p+");
      CDataNode cDataNode0 = new CDataNode("{ipY!");
      document0.prependChild(cDataNode0);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("org.jsoup.nodes.Element$NodeList", "org.jsoup.nodes.Element$NodeList");
      Document document1 = Parser.parseBodyFragmentRelaxed("org.jsoup.nodes.Element$NodeList", "/");
      document0.appendTo(document1);
      document0.prepend("X");
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Document document0 = Document.createShell("");
      Element element0 = document0.head();
      element0.prepend("");
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      ParseSettings parseSettings0 = ParseSettings.preserveCase;
      Tag tag0 = Tag.valueOf("{ZHhqI:J:`J5Q+", parseSettings0);
      Attributes attributes0 = new Attributes();
      Element element0 = new Element(tag0, "{ZHhqI:J:`J5Q+", attributes0);
      element0.parents();
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Document document0 = Document.createShell("");
      Element element0 = document0.head();
      Element element1 = document0.doClone(element0);
      element1.parents();
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Document document0 = Parser.parse("", "");
      document0.parent();
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Document document0 = Document.createShell("RCDATAEndTagName");
      Element element0 = document0.body();
      element0.parent();
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Document document0 = Document.createShell("RCDATAEndTagName");
      Element element0 = document0.shallowClone();
      Document document1 = (Document)document0.doClone(element0);
      document1.parent();
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("org.jsoup.nodes.Element$NodeList", "org.jsoup.nodes.Element$NodeList");
      document0.nodeName();
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Document document0 = Document.createShell("");
      Element element0 = document0.head();
      element0.nextElementSibling();
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("org.jsoup.nodes.Element$NodeList", "org.jsoup.nodes.Element$NodeList");
      Document document1 = (Document)document0.appendTo(document0);
      Tag tag0 = Tag.valueOf("X");
      Element element0 = new Element(tag0, "/");
      document1.after((Node) element0);
      document0.nextElementSibling();
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("org.jsoup.nodes.Element$NodeList", "org.jsoup.nodes.Element$NodeList");
      Element element0 = document0.appendTo(document0);
      element0.lastElementSibling();
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Document document0 = Document.createShell("");
      Element element0 = document0.head();
      element0.lastElementSibling();
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("/", "Wa+");
      Element element0 = document0.head();
      element0.isBlock();
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("*", "W/:w1[");
      Pattern pattern0 = Pattern.compile("", (-2127));
      Evaluator.Matches evaluator_Matches0 = new Evaluator.Matches(pattern0);
      document0.is((Evaluator) evaluator_Matches0);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Document document0 = Document.createShell("");
      document0.is("body");
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("org.jsoup.nodes.Element$NodeList", "id");
      List<Node> list0 = document0.siblingNodes();
      document0.appendTo(document0);
      document0.insertChildren(1, (Collection<? extends Node>) list0);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Parser parser0 = Parser.xmlParser();
      Document document0 = parser0.parseInput("v;7!>X$E*j`", "v;7!>X$E*j`");
      document0.tagName("ul");
      document0.html("1QNnE4BLl5<&(1MxD");
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("org.jsoup.nodes.Element$NodeList", "org.jsoup.nodes.Element$NodeList");
      Document document1 = Parser.parseBodyFragmentRelaxed("org.jsoup.nodes.Element$NodeList", "/");
      Element element0 = document0.appendTo(document1);
      element0.html("/");
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Document document0 = Document.createShell("");
      document0.html("");
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      ParseSettings parseSettings0 = ParseSettings.htmlDefault;
      Tag tag0 = Tag.valueOf("#root", parseSettings0);
      Attributes attributes0 = new Attributes();
      Element element0 = new Element(tag0, "</", attributes0);
      element0.html((MockFileWriter) null);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("-0bb)|q%4*8nxiWA", "");
      document0.html();
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      ParseSettings parseSettings0 = ParseSettings.preserveCase;
      Tag tag0 = Tag.valueOf("@", parseSettings0);
      Attributes attributes0 = new Attributes();
      Element element0 = new Element(tag0, "G)5n^#Oi~8", attributes0);
      element0.html();
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("org.jsoup.nodes.Element$NodeList", "org.jsoup.nodes.Element$NodeList");
      document0.hasAttr("org.jsoup.nodes.Element$NodeList");
      document0.hasAttributes();
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Document document0 = Document.createShell("Z@ y(");
      document0.hasAttributes();
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Document document0 = Document.createShell("");
      document0.getElementsMatchingText("");
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("html", "html");
      Pattern pattern0 = Pattern.compile("\"seTk9ax2USfT?u");
      document0.getElementsMatchingOwnText(pattern0);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("%", "%");
      Pattern pattern0 = Pattern.compile("%", 389);
      document0.getElementsMatchingOwnText(pattern0);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Document document0 = Document.createShell("RCDATAEndTagName");
      document0.getElementsMatchingOwnText("html");
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("org.jsoup.nodes.Element$NodeList", "org.jsoup.nodes.Element$NodeList");
      document0.text("X");
      document0.getElementsContainingText("X");
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("org.jsoup.nodes.Element$NodeList", "id");
      document0.getElementsContainingOwnText("org.jsoup.nodes.Element$NodeList");
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Document document0 = Parser.parse("", "");
      document0.getElementsByTag("              ");
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Tag tag0 = Tag.valueOf("h'T|$ZDC>Zg9+");
      Element element0 = new Element(tag0, "h'T|$ZDC>Zg9+");
      element0.getElementsByTag("h'T|$ZDC>Zg9+");
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Document document0 = Parser.parse("option[selected]", "option[selected]");
      document0.getElementsByIndexLessThan(0);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Document document0 = Document.createShell("</");
      document0.getElementsByIndexGreaterThan((-401));
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("4@g`3hneulo<", "L");
      document0.getElementsByIndexEquals(1);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Document document0 = Document.createShell("");
      document0.getElementsByAttributeValueStarting(" > ", "br");
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed(" > ", "org.jsoup.parser.TreeBuilder");
      document0.getElementsByAttributeValueNot("}o|6mr", "org.jsoup.parser.TreeBuilder");
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("org.jsoup.nodes.Element$NodeList", "org.jsoup.nodes.Element$NodeList");
      document0.getElementsByAttribute("textarea");
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      ParseSettings parseSettings0 = ParseSettings.preserveCase;
      Tag tag0 = Tag.valueOf(">", parseSettings0);
      Attributes attributes0 = new Attributes();
      Attributes attributes1 = attributes0.put("=0^rvvrm^{NO9R9K@b]", true);
      Element element0 = new Element(tag0, ">", attributes1);
      element0.getElementsByAttribute("=0^rvvrm^{NO9R9K@b]");
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("org.jsoup.nodes.Element$NodeList", "org.jsoup.nodes.Element$NodeList");
      Document document1 = Parser.parseBodyFragmentRelaxed("/z]@TA[E492", "/");
      Element element0 = document1.text("X");
      document0.appendTo(element0);
      element0.prepend("/-\"2?e %?7.7Ndg");
      document0.firstElementSibling();
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Document document0 = Document.createShell("");
      Element element0 = document0.head();
      element0.firstElementSibling();
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment(")rg.jsoup.nodes.Element$NodeList", ")rg.jsoup.nodes.Element$NodeList");
      document0.appendTo(document0);
      document0.empty();
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Document document0 = Document.createShell("r[~{bixFn&:");
      document0.setSiblingIndex((-2869));
      document0.empty();
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Document document0 = Document.createShell("#");
      Element element0 = document0.head();
      element0.empty();
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("org.jsoup.nodes.Element$NodeList", "org.jsoup.nodes.Element$NodeList");
      document0.appendTo(document0);
      document0.doClone(document0);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Document document0 = Document.createShell("org.jsoup.nodes.Element$NodeList");
      Element element0 = document0.head();
      element0.doClone((Node) null);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Document document0 = Document.createShell("");
      Element element0 = document0.head();
      element0.clone();
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Document document0 = new Document("%");
      document0.clone();
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("org.jsoup.nodes.Element$NodeList", "org.jsoup.nodes.Element$NodeList");
      document0.clone();
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("`", "4]_5%6<q4");
      Element element0 = document0.appendTo(document0);
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      Set<String> set0 = locale0.getUnicodeLocaleKeys();
      element0.classNames(set0);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      ParseSettings parseSettings0 = new ParseSettings(false, false);
      Tag tag0 = Tag.valueOf("#", parseSettings0);
      Attributes attributes0 = new Attributes();
      PseudoTextElement pseudoTextElement0 = new PseudoTextElement(tag0, "", attributes0);
      Set<String> set0 = pseudoTextElement0.classNames();
      pseudoTextElement0.classNames(set0);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Document document0 = Document.createShell("");
      document0.toggleClass("s8J$Pu1R>I(Ko}F9&");
      document0.classNames();
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Document document0 = Document.createShell("%");
      document0.addClass("j^2zHlU4:,p#</HF");
      document0.className();
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Parser parser0 = Parser.htmlParser();
      Document document0 = parser0.parseInput("$.d7", "$.d7");
      Element element0 = document0.head();
      element0.children();
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      ParseSettings parseSettings0 = new ParseSettings(false, false);
      Tag tag0 = Tag.valueOf("QPmM5Y8\"cT", parseSettings0);
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = new FormElement(tag0, "&`_wR#%j[RS:/61vc\"", attributes0);
      formElement0.childNodeSize();
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("org.jsoup.nodes.Element$NodeList", "org.jsoup.nodes.Element$NodeList");
      document0.childNodeSize();
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("org.jsoup.nodes.Element$NodeList", "org.jsoup.nodes.Element$NodeList");
      document0.appendTo(document0);
      document0.child(1);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("org.jsoup.nodes.Element$NodeList", "org.jsoup.nodes.Element$NodeList");
      Element element0 = document0.head();
      element0.before((Node) document0);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Document document0 = Document.createShell("|4]_}%6<q4");
      Document document1 = (Document)document0.doClone(document0);
      document1.before((Node) document1);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Document document0 = Document.createShell("");
      document0.baseUri();
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      ParseSettings parseSettings0 = ParseSettings.htmlDefault;
      Tag tag0 = Tag.valueOf("J>z j@KmKkH;gL", parseSettings0);
      Attributes attributes0 = new Attributes();
      Attributes attributes1 = attributes0.put("J>z j@KmKkH;gL", "id");
      FormElement formElement0 = new FormElement(tag0, "J>z j@KmKkH;gL", attributes1);
      formElement0.attributes();
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("org.jsoup.nodes.Element$NodeList", "org.jsoup.nodes.Element$NodeList");
      Element element0 = document0.appendTo(document0);
      element0.attr("x", false);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("org.jsoup.nodes.Element$NodeList", "org.jsoup.nodes.Element$NodeList");
      document0.attr("x", false);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Document document0 = Document.createShell("");
      Element element0 = document0.head();
      element0.attr("class", "class");
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment(")rg.jsoup.nodes.Element$NodeList", ")rg.jsoup.nodes.Element$NodeList");
      Document document1 = Parser.parseBodyFragmentRelaxed(")rg.jsoup.nodes.Element$NodeList", "/");
      Element element0 = document0.appendTo(document1);
      Document document2 = (Document)element0.tagName("X");
      document2.attr(":contains(", ")rg.jsoup.nodes.Element$NodeList");
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Document document0 = new Document("");
      document0.attr("class", "class");
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      ParseSettings parseSettings0 = ParseSettings.htmlDefault;
      Tag tag0 = Tag.valueOf("caption", parseSettings0);
      CDataNode cDataNode0 = new CDataNode("tag name must not be empty.");
      Attributes attributes0 = cDataNode0.attributes();
      FormElement formElement0 = new FormElement(tag0, "tag name must not be empty.", attributes0);
      formElement0.appendTo(formElement0);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Document document0 = Document.createShell("");
      document0.appendTo(document0);
      document0.appendText("br");
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed(")rg.jsoup.nodes.Element$NodeList", "/");
      document0.siblingIndex = (-3242);
      document0.appendText("tag name must not be empty.");
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Document document0 = new Document("Dd");
      document0.tagName("Dd");
      document0.appendText("org.jsoup.nodes.Element$NodeList");
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      Document document0 = new Document(":nth-child(%d)");
      document0.appendElement("Dd");
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      Document document0 = Document.createShell("RCDATAEndTagName");
      Element element0 = document0.body();
      element0.appendChild(document0);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("org.jsoup.nodes.Element$NodeList", "org.jsoup.nodes.Element$NodeList");
      Document document1 = Parser.parseBodyFragmentRelaxed("/z]@TA[E492", "/");
      document0.appendTo(document1);
      document0.append("org.jsoup.nodes.Element$NodeList");
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      Document document0 = Document.createShell("6Zr=qm3_u}GAf\"&=M-_");
      Element element0 = document0.head();
      element0.append("Q$2J?fE?sWi/+PC3$~");
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      ParseSettings parseSettings0 = new ParseSettings(true, true);
      Tag tag0 = Tag.valueOf("org.jsoup.select.evaluator$cssnthevaluator", parseSettings0);
      Attributes attributes0 = new Attributes();
      PseudoTextElement pseudoTextElement0 = new PseudoTextElement(tag0, "org.jsoup.select.evaluator$cssnthevaluator", attributes0);
      pseudoTextElement0.append("");
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      Document document0 = Document.createShell("textarea");
      Element element0 = document0.head();
      element0.after((Node) document0);
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      Document document0 = Document.createShell("E>BrlF");
      Element element0 = document0.head();
      element0.after("E>BrlF");
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      ParseSettings parseSettings0 = new ParseSettings(true, true);
      Tag tag0 = Tag.valueOf("org.jsoup.nodes.Element", parseSettings0);
      CDataNode cDataNode0 = new CDataNode("Lm^4K5N).it{+U");
      Attributes attributes0 = cDataNode0.attributes();
      FormElement formElement0 = new FormElement(tag0, "[", attributes0);
      PseudoTextElement pseudoTextElement0 = new PseudoTextElement(tag0, "$v*6/jFgojtA`o", attributes0);
      formElement0.appendTo(pseudoTextElement0);
      formElement0.after("$v*6/jFgojtA`o");
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("org.jsoup.nodes.Element$NodeList", "org.jsoup.nodes.Element$NodeList");
      Document document1 = Parser.parseBodyFragmentRelaxed("org.jsoup.nodes.Element$NodeList", "/");
      Document document2 = (Document)document0.appendTo(document1);
      document2.after("org.jsoup.select.Evaluator$IsFirstOfType");
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("org.jsoup.nodes.Element$NodeList", "org.jsoup.nodes.Element$NodeList");
      document0.appendTo(document0);
      document0.addClass("<{");
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("InColumnGroup", "InColumnGroup");
      Element element0 = document0.head();
      element0.addClass("InColumnGroup");
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("org.jsoup.nodes.Element$NodeList", "org.jsoup.nodes.Element$NodeList");
      Document document1 = (Document)document0.appendTo(document0);
      // Undeclared exception!
      document1.wrap("/rvKK *,EycxHdrcTI");
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("n>ClW``,z", "n>ClW``,z");
      // Undeclared exception!
//      try { 
        document0.wrap("n>ClW``,z");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.jsoup.nodes.Node", e);
//      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      Document document0 = Document.createShell("%");
      document0.appendTo(document0);
      // Undeclared exception!
      document0.val("%");
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      Document document0 = new Document("n'`:#Q");
      // Undeclared exception!
//      try { 
        document0.toggleClass((String) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Object must not be null
//         //
//         verifyException("org.jsoup.helper.Validate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      Document document0 = new Document("#EtW4C/Y:nH4I&R");
      // Undeclared exception!
//      try { 
        document0.text("#EtW4C/Y:nH4I&R");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.jsoup.nodes.Document", e);
//      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("", "");
      // Undeclared exception!
//      try { 
        document0.text((String) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Object must not be null
//         //
//         verifyException("org.jsoup.helper.Validate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      Document document0 = Document.createShell("SY^8jT,aHlAf#]Ej-k");
      document0.childNodes = null;
      // Undeclared exception!
//      try { 
        document0.text();
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.jsoup.nodes.Element", e);
//      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      Document document0 = Document.createShell("");
      document0.appendTo(document0);
      // Undeclared exception!
      document0.tagName("X");
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      Parser parser0 = Parser.xmlParser();
      Parser parser1 = parser0.settings((ParseSettings) null);
      StringReader stringReader0 = new StringReader("94B");
      Document document0 = parser1.parseInput((Reader) stringReader0, "Should not be reachable");
      // Undeclared exception!
//      try { 
        document0.tagName("94B");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.jsoup.parser.Tag", e);
//      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("org.wsoup:nodes.Element$NodeList", "org.wsoup:nodes.Element$NodeList");
      // Undeclared exception!
//      try { 
        document0.tagName((String) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Tag name must not be empty.
//         //
//         verifyException("org.jsoup.helper.Validate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      Document document0 = Document.createShell("");
      // Undeclared exception!
//      try { 
        document0.selectFirst("");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // String must not be empty
//         //
//         verifyException("org.jsoup.helper.Validate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment(")rg.jsoup.nodes.Element$NodeList", ")rg.jsoup.nodes.Element$NodeList");
      // Undeclared exception!
//      try { 
        document0.select(")rg.jsoup.nodes.Element$NodeList )rg.jsoup.nodes.Element$NodeListtag name must not be empty.");
//        fail("Expecting exception: IllegalStateException");
      
//      } catch(IllegalStateException e) {
//         //
//         // Could not parse query ')rg.jsoup.nodes.Element$NodeList )rg.jsoup.nodes.Element$NodeListtag name must not be empty.': unexpected token at ')rg.jsoup.nodes.Element$NodeList )rg.jsoup.nodes.Element$NodeListtag name must not be empty.'
//         //
//         verifyException("org.jsoup.select.QueryParser", e);
//      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      Document document0 = Document.createShell("");
      // Undeclared exception!
//      try { 
        document0.select("");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // String must not be empty
//         //
//         verifyException("org.jsoup.helper.Validate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("4]_Y%6<84", "4]_Y%6<84");
      CDataNode cDataNode0 = new CDataNode("");
      document0.parentNode = (Node) cDataNode0;
      // Undeclared exception!
//      try { 
        document0.previousElementSiblings();
//        fail("Expecting exception: ClassCastException");
      
//      } catch(ClassCastException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      Document document0 = Document.createShell("Tag name must not be empty.");
      // Undeclared exception!
//      try { 
        document0.prependText((String) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Object must not be null
//         //
//         verifyException("org.jsoup.helper.Validate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      Document document0 = Document.createShell("");
      document0.appendChild(document0);
      // Undeclared exception!
      document0.prependElement("#root");
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      Document document0 = Parser.parse("*P|XB*xuRRi\"m", "*P|XB*xuRRi\"m");
      // Undeclared exception!
//      try { 
        document0.prependElement("");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // String must not be empty
//         //
//         verifyException("org.jsoup.helper.Validate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("_*EWhhN{(=9G*5pV", "tag name must not be empty.");
      // Undeclared exception!
//      try { 
        document0.prependChild((Node) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Object must not be null
//         //
//         verifyException("org.jsoup.helper.Validate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      Document document0 = Document.createShell("4]_5%6<q4");
      document0.appendTo(document0);
      // Undeclared exception!
      document0.prepend("4]_5%6<q4");
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      Document document0 = new Document("org.jsoup.select.Evaluator$IsFirstChild");
      // Undeclared exception!
//      try { 
        document0.prepend((String) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Object must not be null
//         //
//         verifyException("org.jsoup.helper.Validate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      Document document0 = Document.createShell("=j,/EzA");
      MockPrintStream mockPrintStream0 = new MockPrintStream("=j,/EzA");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.indentAmount(30);
      // Undeclared exception!
      document0.outerHtmlTail(mockPrintStream0, 8217, document_OutputSettings1);
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      Document document0 = Parser.parse("java.lang.string@0000000008", "java.lang.string@0000000008");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      File file0 = MockFile.createTempFile("java.lang.string@0000000008", " >");
      MockPrintStream mockPrintStream0 = new MockPrintStream(file0);
      // Undeclared exception!
//      try { 
        document0.outerHtmlTail(mockPrintStream0, (-1), document_OutputSettings0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // width must be > 0
//         //
//         verifyException("org.jsoup.internal.StringUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      Document document0 = Document.createShell("4]_5%6<q4");
      StringWriter stringWriter0 = new StringWriter(24);
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      document_OutputSettings0.indentAmount(24);
      // Undeclared exception!
      document0.outerHtmlHead(stringWriter0, 870, document_OutputSettings0);
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      Document document0 = Parser.parse("o9mk,&wj/&7[!j", "org.jsoup.nodes.Element$NodeList");
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) "o9mk,&wj/&7[!j");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      // Undeclared exception!
//      try { 
        document0.outerHtmlHead(charBuffer0, 2743, document_OutputSettings0);
//        fail("Expecting exception: ReadOnlyBufferException");
      
//      } catch(ReadOnlyBufferException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.nio.StringCharBuffer", e);
//      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      Document document0 = Document.createShell("java.lang.string@0000000076");
      MockPrintStream mockPrintStream0 = new MockPrintStream(" 4N;wR");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      // Undeclared exception!
//      try { 
        document0.outerHtmlHead(mockPrintStream0, (-1433506051), document_OutputSettings0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // width must be > 0
//         //
//         verifyException("org.jsoup.internal.StringUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("body", "body");
      // Undeclared exception!
//      try { 
        document0.lastElementSibling();
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.jsoup.nodes.Element", e);
//      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("tag name must not be empty.", "_*EWhhN{(=9G*5pV");
      Element element0 = document0.appendTo(document0);
      Evaluator.MatchText evaluator_MatchText0 = new Evaluator.MatchText();
      // Undeclared exception!
      element0.is((Evaluator) evaluator_MatchText0);
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("SS%h!Vt_", "a(Wz; ZqqEi");
      // Undeclared exception!
//      try { 
        document0.is((Evaluator) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.jsoup.nodes.Element", e);
//      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("org.jsoup.nodes.Element$NodeList", "org.jsoup.nodes.Element$NodeList");
      Node[] nodeArray0 = new Node[6];
      nodeArray0[0] = (Node) document0;
      nodeArray0[1] = (Node) document0;
      nodeArray0[2] = (Node) document0;
      nodeArray0[3] = (Node) document0;
      nodeArray0[4] = (Node) document0;
      nodeArray0[5] = (Node) document0;
      // Undeclared exception!
//      try { 
        document0.insertChildren(1, nodeArray0);
//        fail("Expecting exception: IndexOutOfBoundsException");
      
//      } catch(IndexOutOfBoundsException e) {
//         //
//         // Index: 0, Size: 0
//         //
//         verifyException("java.util.ArrayList", e);
//      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      Document document0 = Document.createShell("");
      Pattern pattern0 = Pattern.compile("");
      Elements elements0 = document0.getElementsMatchingText(pattern0);
      // Undeclared exception!
//      try { 
        document0.insertChildren(1, (Collection<? extends Node>) elements0);
//        fail("Expecting exception: IndexOutOfBoundsException");
      
//      } catch(IndexOutOfBoundsException e) {
//         //
//         // Index: 1, Size: 0
//         //
//         verifyException("java.util.ArrayList", e);
//      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      Document document0 = Parser.parse("", "Should not be reachable");
      PipedReader pipedReader0 = new PipedReader();
      PipedWriter pipedWriter0 = new PipedWriter(pipedReader0);
      document0.setParentNode(document0);
      BufferedWriter bufferedWriter0 = new BufferedWriter(pipedWriter0, 3332);
      // Undeclared exception!
      document0.html(bufferedWriter0);
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment(" ", "hw4Ix%TjpJ;");
      // Undeclared exception!
//      try { 
        document0.html((Appendable) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.jsoup.nodes.Node", e);
//      }
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      Document document0 = Document.createShell("");
      document0.appendTo(document0);
      // Undeclared exception!
      document0.html();
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("org.jsoup.nodes.Element$NodeList", "org.jsoup.nodes.Element$NodeList");
      // Undeclared exception!
//      try { 
        document0.hasClass((String) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.jsoup.nodes.Element", e);
//      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("org.jsoup.nodes.Element$NodeList", "org.jsoup.nodes.Element$NodeList");
      // Undeclared exception!
//      try { 
        document0.getElementsMatchingText((Pattern) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.jsoup.select.Evaluator$Matches", e);
//      }
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      Document document0 = Document.createShell("");
      // Undeclared exception!
//      try { 
        document0.getElementsMatchingText((String) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      Document document0 = Document.createShell("");
      // Undeclared exception!
//      try { 
        document0.getElementsMatchingText("s8J$Pu1R>I(Ko}F9&");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Pattern syntax error: s8J$Pu1R>I(Ko}F9&
//         //
//         verifyException("org.jsoup.nodes.Element", e);
//      }
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed(" > ", "org.jsoup.parser.TreeBuilder");
      // Undeclared exception!
//      try { 
        document0.getElementsMatchingOwnText((String) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      Document document0 = Document.createShell(",?B,;`<");
      // Undeclared exception!
//      try { 
        document0.getElementsMatchingOwnText(")hHr)");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Pattern syntax error: )hHr)
//         //
//         verifyException("org.jsoup.nodes.Element", e);
//      }
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("org.jsoup.nodes.Element$NodeList", "id");
      List<Node> list0 = document0.childNodesCopy();
      document0.childNodes = list0;
      // Undeclared exception!
//      try { 
        document0.getElementsContainingOwnText("org.jsoup.nodes.Element$NodeList");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.jsoup.select.NodeTraversor", e);
//      }
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      Tag tag0 = Tag.valueOf("isDj!gmp]");
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = new FormElement(tag0, ":root", attributes0);
      // Undeclared exception!
//      try { 
        formElement0.getElementsByTag((String) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // String must not be empty
//         //
//         verifyException("org.jsoup.helper.Validate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      Document document0 = Parser.parse("i/K.6SbmlT(Urm2", "*{%+vD7hq,bg+");
      // Undeclared exception!
//      try { 
        document0.getElementsByClass("");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // String must not be empty
//         //
//         verifyException("org.jsoup.helper.Validate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("-0bb)|q%4*8nxiWA", "");
      // Undeclared exception!
//      try { 
        document0.getElementsByAttributeValueNot("", "org.jsoup.select.Evaluator$IsFirstChild");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // String must not be empty
//         //
//         verifyException("org.jsoup.helper.Validate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      Document document0 = Document.createShell("");
      // Undeclared exception!
//      try { 
        document0.getElementsByAttributeValueMatching("", (String) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      Document document0 = Document.createShell("");
      // Undeclared exception!
//      try { 
        document0.getElementsByAttributeValueMatching("STOP", "s8J$Pu1R>I(Ko}F9&");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Pattern syntax error: s8J$Pu1R>I(Ko}F9&
//         //
//         verifyException("org.jsoup.nodes.Element", e);
//      }
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("org.jsoup.nodes.Element$NodeList", "org.jsoup.nodes.Element$NodeList");
      // Undeclared exception!
//      try { 
        document0.getElementsByAttributeValueEnding((String) null, ".");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // String must not be empty
//         //
//         verifyException("org.jsoup.helper.Validate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      Document document0 = Parser.parse("", "");
      // Undeclared exception!
//      try { 
        document0.getElementsByAttributeValueContaining("", "");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // String must not be empty
//         //
//         verifyException("org.jsoup.helper.Validate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("", "");
      // Undeclared exception!
//      try { 
        document0.getElementsByAttributeValue("", "");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // String must not be empty
//         //
//         verifyException("org.jsoup.helper.Validate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      Document document0 = Parser.parse("option[selected]", "option[selected]");
      // Undeclared exception!
//      try { 
        document0.getElementsByAttributeStarting("");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // String must not be empty
//         //
//         verifyException("org.jsoup.helper.Validate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("org.jsoup.nodes.Element$NodeList", "id");
      // Undeclared exception!
//      try { 
        document0.getElementById("");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // String must not be empty
//         //
//         verifyException("org.jsoup.helper.Validate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      Document document0 = Parser.parse("#", "#");
      // Undeclared exception!
//      try { 
        document0.firstElementSibling();
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.jsoup.nodes.Element", e);
//      }
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      Document document0 = Document.createShell("SY^8jT,aHlAf#]Ej-k");
      document0.childNodes = null;
      // Undeclared exception!
//      try { 
        document0.data();
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.jsoup.nodes.Element", e);
//      }
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      Document document0 = Document.createShell("Should not be reachable");
      DataNode dataNode0 = new DataNode("Should not be reachable");
      document0.setParentNode(dataNode0);
      // Undeclared exception!
//      try { 
        document0.cssSelector();
//        fail("Expecting exception: ClassCastException");
      
//      } catch(ClassCastException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      Document document0 = Document.createShell("org.jsoup.nodes.Element$NodeList");
      // Undeclared exception!
//      try { 
        document0.classNames((Set<String>) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Object must not be null
//         //
//         verifyException("org.jsoup.helper.Validate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("org.jsoup.nodes.Element$NodeList", "org.jsoup.nodes.Element$NodeList");
      // Undeclared exception!
//      try { 
        document0.child(14);
//        fail("Expecting exception: IndexOutOfBoundsException");
      
//      } catch(IndexOutOfBoundsException e) {
//         //
//         // Index: 14, Size: 1
//         //
//         verifyException("java.util.ArrayList", e);
//      }
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("org.jsoup.nodes.Element$NodeList", "org.jsoup.nodes.Element$NodeList");
      // Undeclared exception!
//      try { 
        document0.child((-3435));
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      Document document0 = Document.createShell("muted");
      DocumentType documentType0 = new DocumentType(":nth-child(%d)", "muted", "muted", "$oAP2^GXq", "$oAP2^GXq");
      Document document1 = (Document)document0.doClone(documentType0);
      // Undeclared exception!
//      try { 
        document1.before((Node) documentType0);
//        fail("Expecting exception: UnsupportedOperationException");
      
//      } catch(UnsupportedOperationException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.util.AbstractList", e);
//      }
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      Document document0 = Document.createShell("%");
      document0.appendTo(document0);
      // Undeclared exception!
      document0.before("%");
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment(":has(", ":has(");
      Node[] nodeArray0 = new Node[4];
      nodeArray0[0] = (Node) document0;
      nodeArray0[1] = (Node) document0;
      nodeArray0[2] = (Node) document0;
      nodeArray0[3] = (Node) document0;
      document0.addChildren(nodeArray0);
      // Undeclared exception!
      document0.attr(":has(", (String) null);
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("org.jsoup.nodes.Element$NodeList", "org.jsoup.nodes.Element$NodeList");
      // Undeclared exception!
//      try { 
        document0.attr((String) null, "X");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.jsoup.parser.ParseSettings", e);
//      }
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("org.wsoup:nodes.Element$NodeList", "org.wsoup:nodes.Element$NodeList");
      DataNode dataNode0 = new DataNode("org.wsoup:nodes.Element$NodeList", "=~cqHm`Y#EhVaW");
      document0.setParentNode(dataNode0);
      // Undeclared exception!
//      try { 
        document0.appendTo(document0);
//        fail("Expecting exception: UnsupportedOperationException");
      
//      } catch(UnsupportedOperationException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.util.AbstractList", e);
//      }
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      Document document0 = Document.createShell("");
      Element element0 = document0.head();
      Element element1 = document0.doClone(element0);
      // Undeclared exception!
//      try { 
        element1.appendTo(element1);
//        fail("Expecting exception: IndexOutOfBoundsException");
      
//      } catch(IndexOutOfBoundsException e) {
//         //
//         // Index: 0, Size: 0
//         //
//         verifyException("java.util.ArrayList", e);
//      }
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("org.jsoup.nodes.Element$NodeList", "org.jsoup.nodes.Element$NodeList");
      // Undeclared exception!
//      try { 
        document0.appendTo((Element) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Object must not be null
//         //
//         verifyException("org.jsoup.helper.Validate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("org.jsoup.nodes.Element$NodeList", "org.jsoup.nodes.Element$NodeList");
      // Undeclared exception!
//      try { 
        document0.appendText((String) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Object must not be null
//         //
//         verifyException("org.jsoup.helper.Validate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("org.jsoup.nodes.Element$NodeList", "id");
      document0.appendTo(document0);
      // Undeclared exception!
      document0.appendElement("org.jsoup.nodes.Element$NodeList");
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      Document document0 = Document.createShell("href");
      // Undeclared exception!
//      try { 
        document0.appendElement("");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // String must not be empty
//         //
//         verifyException("org.jsoup.helper.Validate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      Document document0 = Document.createShell(" />");
      // Undeclared exception!
//      try { 
        document0.appendChild((Node) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Object must not be null
//         //
//         verifyException("org.jsoup.helper.Validate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      Document document0 = Document.createShell("");
      document0.reparentChild(document0);
      // Undeclared exception!
      document0.append("textarea");
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      Document document0 = Document.createShell("");
      // Undeclared exception!
//      try { 
        document0.append((String) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Object must not be null
//         //
//         verifyException("org.jsoup.helper.Validate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("org.jsoup.nodes.Element$NodeList", "org.jsoup.nodes.Element$NodeList");
      Document document1 = (Document)document0.appendTo(document0);
      // Undeclared exception!
//      try { 
        document1.after((Node) document1);
//        fail("Expecting exception: IndexOutOfBoundsException");
      
//      } catch(IndexOutOfBoundsException e) {
//         //
//         // Index: 2, Size: 1
//         //
//         verifyException("java.util.ArrayList", e);
//      }
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("org.jsoup.nodes.Element$NodeList", "id");
      Document document1 = (Document)document0.appendTo(document0);
      // Undeclared exception!
      document1.after("Pit^av,D");
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("org.jsoup.nodes.Element$NodeList", "org.jsoup.nodes.Element$NodeList");
      // Undeclared exception!
//      try { 
        document0.addClass((String) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Object must not be null
//         //
//         verifyException("org.jsoup.helper.Validate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      CDataNode cDataNode0 = new CDataNode("org.jsoup.nodes.Element$2");
      Attributes attributes0 = cDataNode0.attributes();
      Element element0 = null;
//      try {
        element0 = new Element((Tag) null, "org.jsoup.nodes.Element$2", attributes0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Object must not be null
//         //
//         verifyException("org.jsoup.helper.Validate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      Tag tag0 = Tag.valueOf("`zp|fdMt;#JJ");
      Element element0 = null;
//      try {
        element0 = new Element(tag0, (String) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Object must not be null
//         //
//         verifyException("org.jsoup.helper.Validate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      Element element0 = null;
//      try {
        element0 = new Element("");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // String must not be empty
//         //
//         verifyException("org.jsoup.helper.Validate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      Document document0 = Parser.parse("", "Should not be reachable");
      PipedReader pipedReader0 = new PipedReader();
      PipedWriter pipedWriter0 = new PipedWriter(pipedReader0);
      BufferedWriter bufferedWriter0 = new BufferedWriter(pipedWriter0, 3332);
      document0.html(bufferedWriter0);
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      Document document0 = Document.createShell("SY^8jT,aHlAf#]Ej-k");
      document0.val();
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      Document document0 = Document.createShell("O9mk,&WJ/&7[!J");
      document0.hasClass("O9mk,&WJ/&7[!J");
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      Document document0 = Parser.parse("href", "</");
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      linkedHashSet0.add("head");
      document0.classNames((Set<String>) linkedHashSet0);
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      Document document0 = Parser.parse("java.lang.string@0000000008", "java.lang.string@0000000008");
      Element element0 = document0.body();
      element0.data();
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      Document document0 = Document.createShell("");
      document0.text("");
      Element element0 = document0.body();
      element0.hasText();
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("org.jsoup.nodes.Element$NodeList", "org.jsoup.nodes.Element$NodeList");
      Element element0 = document0.body();
      element0.hasText();
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      Document document0 = Document.createShell("");
      document0.elementSiblingIndex();
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("org.jsoup.nodes.Element$NodeList", "org.jsoup.nodes.Element$NodeList");
      Element element0 = document0.appendTo(document0);
      element0.elementSiblingIndex();
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("Insert position out of bounds.", "Insert position out of bounds.");
      Element element0 = document0.head();
      document0.appendTo(element0);
      document0.previousElementSibling();
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("org.jsoup.nodes.Element$NodeList", "org.jsoup.nodes.Element$NodeList");
      document0.appendTo(document0);
      document0.previousElementSibling();
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("org.jsoup.nodes.Element$NodeList", "org.jsoup.nodes.Element$NodeList");
      Document document1 = Parser.parseBodyFragmentRelaxed("org.jsoup.nodes.Element$NodeList", "/");
      Document document2 = (Document)document0.appendTo(document1);
      document2.after((Node) document1);
      document0.nextElementSibling();
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("org.jsoup.nodes.Element$NodeList", "org.jsoup.nodes.Element$NodeList");
      Element element0 = document0.appendTo(document0);
      element0.cssSelector();
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      ParseSettings parseSettings0 = ParseSettings.htmlDefault;
      Tag tag0 = Tag.valueOf("J>z j@KmKkH;gL", parseSettings0);
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = new FormElement(tag0, "J>z j@KmKkH;gL", attributes0);
      formElement0.attributes();
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      ParseSettings parseSettings0 = ParseSettings.preserveCase;
      Tag tag0 = Tag.valueOf("@", parseSettings0);
      Attributes attributes0 = new Attributes();
      Element element0 = new Element(tag0, "G)5n^#Oi~8", attributes0);
      element0.className();
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      Document document0 = Document.createShell("");
      document0.ownText();
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("/", "Wa+");
      document0.isBlock();
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      Document document0 = Parser.parse("|p+", "|p+");
      document0.baseUri();
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("#text", "head");
      Pattern pattern0 = Pattern.compile("head", 3213227);
      document0.getElementsByAttributeValueMatching((String) null, pattern0);
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("n>ClW``,z", "n>ClW``,z");
      document0.id();
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      Document document0 = Parser.parse("", "");
      document0.clone();
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      Document document0 = new Document("java.lang.string@0000000085 id");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      document_OutputSettings0.prettyPrint(false);
      document0.outputSettings(document_OutputSettings0);
      document0.outerHtml();
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("_*EWhhN{(=9G*5pV", "_*EWhhN{(=9G*5pV");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      document_OutputSettings0.prettyPrint(false);
      // Undeclared exception!
//      try { 
        document0.outerHtmlTail((Appendable) null, (-2088), document_OutputSettings0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.jsoup.nodes.Element", e);
//      }
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("_*EWhhN{(=9G*5pV", "tag name must not be empty.");
      PipedWriter pipedWriter0 = new PipedWriter();
      // Undeclared exception!
//      try { 
        document0.html(pipedWriter0);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // java.io.IOException: Pipe not connected
//         //
//         verifyException("org.jsoup.nodes.Node$OuterHtmlVisitor", e);
//      }
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("org.jsoup.nodes.Element$NodeList", "org.jsoup.nodes.Element$NodeList");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.prettyPrint(false);
      // Undeclared exception!
//      try { 
        document0.outerHtmlHead((Appendable) null, 25, document_OutputSettings1);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.jsoup.nodes.Element", e);
//      }
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      Tag tag0 = Tag.valueOf("textarea");
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = new FormElement(tag0, "", attributes0);
      formElement0.val();
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      Document document0 = Document.createShell("");
      Element element0 = document0.toggleClass("s8J$Pu1R>I(Ko}F9&");
      element0.addClass("s8J$Pu1R>I(Ko}F9&");
      element0.toggleClass("s8J$Pu1R>I(Ko}F9&");
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      Document document0 = Document.createShell("");
      Element element0 = document0.toggleClass("s8J$Pu1R>I(Ko}F9&");
      element0.addClass("s8J$Pu1R>I(Ko}F9&");
      document0.hasClass("s8J$Pu1R>I(Ko}F9&");
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      Document document0 = Document.createShell("");
      document0.toggleClass("s8J$Pu1R>I(Ko}F9&");
      document0.addClass("");
      document0.hasClass("");
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("id", "4]_5%6<q4");
      document0.toggleClass("4]_5%6<q4");
      document0.addClass("Insert position out of bounds.");
      document0.hasClass("id");
  }

  @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("_*EWhhN{(=9*5pV", "_*EWhhN{(=9*5pV");
      document0.toggleClass("Insert position out of bounds.");
      document0.addClass("Insert position out of bounds.");
      document0.hasClass("Insert position out of bounds.");
  }

  @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("_*EWhh%{(=9G*5pV", "tag name must not be empty.");
      document0.addClass("#OH(l5+");
      document0.hasClass("tag name must not be empty.");
  }

  @Test(timeout = 4000)
  public void test223()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("org.jsoup.nodes.Element$NodeList", "org.jsoup.nodes.Element$NodeList");
      Element element0 = document0.addClass("X");
      element0.hasClass("Insert position out of bounds.");
  }

  @Test(timeout = 4000)
  public void test224()  throws Throwable  {
      Document document0 = Document.createShell("O9mk,&WJ/&7[!J");
      CDataNode cDataNode0 = new CDataNode("O9mk,&WJ/&7[!J");
      document0.appendChild(cDataNode0);
      document0.data();
  }

  @Test(timeout = 4000)
  public void test225()  throws Throwable  {
      Document document0 = Document.createShell("");
      document0.text("");
      document0.hasText();
  }

  @Test(timeout = 4000)
  public void test226()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("org.jsoup.nodes.Element$NodeList", "org.jsoup.nodes.Element$NodeList");
      document0.hasText();
  }

  @Test(timeout = 4000)
  public void test227()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("%", "%");
      Element element0 = document0.doClone(document0);
      document0.appendTo(element0);
      Pattern pattern0 = Pattern.compile("html");
      document0.getElementsMatchingText(pattern0);
  }

  @Test(timeout = 4000)
  public void test228()  throws Throwable  {
      Element.preserveWhitespace((Node) null);
  }

  @Test(timeout = 4000)
  public void test229()  throws Throwable  {
      Element element0 = new Element("textarea");
      Element element1 = element0.appendText("textarea");
      element1.text();
  }

  @Test(timeout = 4000)
  public void test230()  throws Throwable  {
      Parser parser0 = Parser.xmlParser();
      Document document0 = parser0.parseInput("4]_5%6<q4", "USF_");
      Charset charset0 = document0.charset();
      document0.charset(charset0);
      document0.getElementsContainingOwnText("0?\"f$tT&DqH~V");
  }

  @Test(timeout = 4000)
  public void test231()  throws Throwable  {
      Document document0 = Document.createShell("");
      document0.text("s8J$Pu1R>I(Ko}F9&");
      document0.wholeText();
  }

  @Test(timeout = 4000)
  public void test232()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("%", "%");
      Node[] nodeArray0 = new Node[1];
      TextNode textNode0 = new TextNode("%");
      nodeArray0[0] = (Node) textNode0;
      document0.insertChildren(0, nodeArray0);
      Pattern pattern0 = Pattern.compile("html");
      document0.getElementsMatchingText(pattern0);
  }

  @Test(timeout = 4000)
  public void test233()  throws Throwable  {
      Document document0 = new Document("org.jsoup.nodes.Element$NodeList");
      Document document1 = Parser.parseBodyFragmentRelaxed("org.jsoup.nodes.Element$NodeList", "/");
      Element element0 = document1.text("X");
      document0.appendTo(element0);
      Pattern pattern0 = Pattern.compile("#root");
      element0.getElementsMatchingText(pattern0);
  }

  @Test(timeout = 4000)
  public void test234()  throws Throwable  {
      Document document0 = Document.createShell("Tag name must not be empty.");
      Element element0 = document0.append("org.jsoup.nodes.Element$NodeList");
      element0.getElementsMatchingText("org.jsoup.nodes.Element$NodeList");
  }

  @Test(timeout = 4000)
  public void test235()  throws Throwable  {
      Document document0 = Document.createShell("java.lang.string@0000000076");
      document0.getElementById("java.lang.string@0000000076");
  }

  @Test(timeout = 4000)
  public void test236()  throws Throwable  {
      Document document0 = Document.createShell("");
      Element element0 = document0.doClone(document0);
      element0.lastElementSibling();
  }

  @Test(timeout = 4000)
  public void test237()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("org.jsoup.nodes.Element$NodeList", "org.jsoup.nodes.Element$NodeList");
      document0.reparentChild(document0);
      document0.firstElementSibling();
  }

  @Test(timeout = 4000)
  public void test238()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("org.jsoup.nodes.Element$NodeList", "org.jsoup.nodes.Element$NodeList");
      document0.previousElementSibling();
  }

  @Test(timeout = 4000)
  public void test239()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("org.jsoup.nodes.Element$NodeList", "id");
      Document document1 = Parser.parseBodyFragmentRelaxed("org.jsoup.nodes.Element$NodeList", "org.jsoup.nodes.Element$NodeList");
      document1.appendTo(document0);
      document0.appendElement("5");
      document1.nextElementSiblings();
      assertEquals(1, document1.siblingIndex());
  }

  @Test(timeout = 4000)
  public void test240()  throws Throwable  {
      Document document0 = Document.createShell("6Zr=qm3_u}GAf\"&=M-_");
      document0.nextElementSibling();
      assertEquals(1, document0.childNodeSize());
      assertEquals("6Zr=qm3_u}GAf\"&=M-_", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test241()  throws Throwable  {
      Document document0 = Document.createShell("RCDATAEndTagName");
      Element element0 = document0.head();
      Elements elements0 = element0.siblingElements();
      assertEquals(1, elements0.size());
      assertEquals("RCDATAEndTagName", element0.baseUri());
  }

  @Test(timeout = 4000)
  public void test242()  throws Throwable  {
      Document document0 = Document.createShell("O9mk,&WJ/&7[!J");
      document0.siblingElements();
      assertEquals(1, document0.childNodeSize());
      assertEquals("O9mk,&WJ/&7[!J", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test243()  throws Throwable  {
      Document document0 = Document.createShell(":p");
      CDataNode cDataNode0 = new CDataNode("'z:Lx8h^`");
      Element element0 = document0.doClone(cDataNode0);
      // Undeclared exception!
//      try { 
        element0.siblingElements();
//        fail("Expecting exception: ClassCastException");
      
//      } catch(ClassCastException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test244()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("org.wsoup:nodes.Element$NodeList", "org.wsoup:nodes.Element$NodeList");
      Element element0 = document0.head();
      assertEquals(0, element0.siblingIndex());
      
      element0.before("org.wsoup:nodes.Element$NodeList");
      String string0 = element0.cssSelector();
      assertEquals("html > head:nth-child(3)", string0);
  }

  @Test(timeout = 4000)
  public void test245()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("org.wsoup:nodes.Element$NodeList", "org.wsoup:nodes.Element$NodeList");
      Element element0 = document0.head();
      String string0 = element0.cssSelector();
      assertEquals("html > head", string0);
      assertEquals("org.wsoup:nodes.Element$NodeList", element0.baseUri());
  }

  @Test(timeout = 4000)
  public void test246()  throws Throwable  {
      Document document0 = Document.createShell("");
      document0.toggleClass("s8J$Pu1R>I(Ko}F9&");
      document0.cssSelector();
      assertEquals(1, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test247()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("%", "%");
      Node[] nodeArray0 = new Node[1];
      // Undeclared exception!
//      try { 
        document0.insertChildren(0, nodeArray0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Array must not contain any null objects
//         //
//         verifyException("org.jsoup.helper.Validate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test248()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("org.jsoup.nodes.Element$NodeList", "org.jsoup.nodes.Element$NodeList");
      Node[] nodeArray0 = new Node[8];
      // Undeclared exception!
//      try { 
        document0.insertChildren((-1433506051), nodeArray0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Insert position out of bounds.
//         //
//         verifyException("org.jsoup.helper.Validate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test249()  throws Throwable  {
      Document document0 = Parser.parse("href", "</");
      Node[] nodeArray0 = new Node[3];
      // Undeclared exception!
//      try { 
        document0.insertChildren(1165, nodeArray0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Insert position out of bounds.
//         //
//         verifyException("org.jsoup.helper.Validate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test250()  throws Throwable  {
      Document document0 = Document.createShell("RCDATAEndTagName");
      List<TextNode> list0 = document0.textNodes();
      // Undeclared exception!
//      try { 
        document0.insertChildren(1723, (Collection<? extends Node>) list0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Insert position out of bounds.
//         //
//         verifyException("org.jsoup.helper.Validate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test251()  throws Throwable  {
      Document document0 = Document.createShell("href");
      List<TextNode> list0 = document0.textNodes();
      // Undeclared exception!
//      try { 
        document0.insertChildren((-1147), (Collection<? extends Node>) list0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Insert position out of bounds.
//         //
//         verifyException("org.jsoup.helper.Validate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test252()  throws Throwable  {
      LinkedHashSet<Comment> linkedHashSet0 = new LinkedHashSet<Comment>();
      Document document0 = Parser.parseBodyFragment("_*EWhh%{(=9G*5pV", "_*EWhh%{(=9G*5pV");
      Element element0 = document0.insertChildren(0, (Collection<? extends Node>) linkedHashSet0);
      assertEquals("_*EWhh%{(=9G*5pV", element0.baseUri());
      assertEquals(1, element0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test253()  throws Throwable  {
      Document document0 = Document.createShell("Tag name must not be empty.");
      List<DataNode> list0 = document0.dataNodes();
      assertEquals(1, document0.childNodeSize());
      assertEquals("Tag name must not be empty.", document0.baseUri());
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test254()  throws Throwable  {
      Document document0 = Document.createShell("RCDATAEndTagName");
      Element element0 = document0.append("#g!i0Q-q+5z NL_W6u");
      element0.textNodes();
      assertEquals(2, document0.childNodeSize());
      assertEquals("RCDATAEndTagName", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test255()  throws Throwable  {
      Document document0 = Document.createShell("%");
      Document document1 = (Document)document0.doClone(document0);
      document1.before("V>>+");
      document1.previousElementSiblings();
      assertEquals(2, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test256()  throws Throwable  {
      ParseSettings parseSettings0 = new ParseSettings(true, true);
      Tag tag0 = Tag.valueOf("_", parseSettings0);
      CDataNode cDataNode0 = new CDataNode("id");
      Attributes attributes0 = cDataNode0.attributes();
      Element element0 = new Element(tag0, "id", attributes0);
      Elements elements0 = element0.getElementsByIndexGreaterThan(1419);
      assertEquals(0, elements0.size());
      assertEquals("id", element0.baseUri());
  }

  @Test(timeout = 4000)
  public void test257()  throws Throwable  {
      Document document0 = Parser.parse("|p+", "|p+");
      // Undeclared exception!
//      try { 
        document0.selectFirst("|p+");
//        fail("Expecting exception: IllegalStateException");
      
//      } catch(IllegalStateException e) {
//         //
//         // Could not parse query '|p+': unexpected token at '|p+'
//         //
//         verifyException("org.jsoup.select.QueryParser", e);
//      }
  }

  @Test(timeout = 4000)
  public void test258()  throws Throwable  {
      Element element0 = new Element("textarea");
      // Undeclared exception!
//      try { 
        element0.is("|Q/U^Imw^mE@@6dX");
//        fail("Expecting exception: IllegalStateException");
      
//      } catch(IllegalStateException e) {
//         //
//         // Could not parse query '|Q/U^Imw^mE@@6dX': unexpected token at '|Q/U^Imw^mE@@6dX'
//         //
//         verifyException("org.jsoup.select.QueryParser", e);
//      }
  }

  @Test(timeout = 4000)
  public void test259()  throws Throwable  {
      Document document0 = Document.createShell("muted");
      document0.getAllElements();
      assertEquals(1, document0.childNodeSize());
      assertEquals("muted", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test260()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("org.jsoup.nodes.Element$NodeList", "id");
      Element element0 = document0.removeClass("org.jsoup.nodes.Element$NodeList");
      assertEquals("id", element0.baseUri());
      assertEquals(1, element0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test261()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("org.wsoup:nodes.Element$NodeList", "org.wsoup:nodes.Element$NodeList");
      // Undeclared exception!
//      try { 
        document0.before("org.wsoup:nodes.Element$NodeList");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Object must not be null
//         //
//         verifyException("org.jsoup.helper.Validate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test262()  throws Throwable  {
      Document document0 = Document.createShell("href");
      // Undeclared exception!
//      try { 
        document0.getElementsByAttribute("");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // String must not be empty
//         //
//         verifyException("org.jsoup.helper.Validate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test263()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("|4]_}%6<q4", "|4]_}%6<q4");
      Elements elements0 = document0.getElementsByAttributeValueNot("|4]_}%6<q4", " ");
      assertEquals("|4]_}%6<q4", document0.baseUri());
      assertEquals(0, elements0.size());
  }

  @Test(timeout = 4000)
  public void test264()  throws Throwable  {
      Element element0 = new Element("3ugX><?dm!(*b");
      element0.doSetBaseUri("FmTk~<");
      assertEquals("FmTk~<", element0.baseUri());
  }

  @Test(timeout = 4000)
  public void test265()  throws Throwable  {
      Document document0 = Document.createShell("");
      // Undeclared exception!
//      try { 
        document0.after((Node) document0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Object must not be null
//         //
//         verifyException("org.jsoup.helper.Validate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test266()  throws Throwable  {
      Document document0 = Document.createShell("href");
      document0.getElementsByAttributeValueContaining("#G|{%_`e", "EZ0bz$OsOpq");
      assertEquals(1, document0.childNodeSize());
      assertEquals("href", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test267()  throws Throwable  {
      Element element0 = new Element("3ugX><?dm!(*b");
      Elements elements0 = element0.getElementsContainingText("3ugX><?dm!(*b");
      assertTrue(elements0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test268()  throws Throwable  {
      Document document0 = Parser.parse("", "");
      Elements elements0 = document0.getElementsByClass("7HL<L3&Lp{");
      assertEquals(0, elements0.size());
  }

  @Test(timeout = 4000)
  public void test269()  throws Throwable  {
      Tag tag0 = Tag.valueOf("isDj!gmp]");
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = new FormElement(tag0, ":root", attributes0);
      formElement0.getElementsByAttributeValueEnding("r>,Ne", "br");
      assertEquals(":root", formElement0.baseUri());
  }

  @Test(timeout = 4000)
  public void test270()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("tag name must not be empty.", "_*EWhhN{(=9G*5pV");
      Evaluator.MatchText evaluator_MatchText0 = new Evaluator.MatchText();
      document0.is((Evaluator) evaluator_MatchText0);
      assertEquals("_*EWhhN{(=9G*5pV", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test271()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment(")rg.jsoup.nodes.Element$NodeList", ")rg.jsoup.nodes.Element$NodeList");
      document0.getElementsByAttributeValueMatching(")rg.jsoup.nodes.Element$NodeList", "dl");
      assertEquals(")rg.jsoup.nodes.Element$NodeList", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test272()  throws Throwable  {
      Document document0 = Document.createShell("/");
      // Undeclared exception!
//      try { 
        document0.wrap("");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // String must not be empty
//         //
//         verifyException("org.jsoup.helper.Validate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test273()  throws Throwable  {
      Document document0 = Parser.parse("#", "#");
      Elements elements0 = document0.getElementsMatchingOwnText("#");
      assertEquals(1, elements0.size());
      assertEquals("#", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test274()  throws Throwable  {
      Document document0 = Document.createShell("Tag name must not be empty.");
      Elements elements0 = document0.getElementsByIndexEquals(10);
      assertEquals(1, document0.childNodeSize());
      assertEquals(0, elements0.size());
      assertEquals("Tag name must not be empty.", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test275()  throws Throwable  {
      ParseSettings parseSettings0 = ParseSettings.preserveCase;
      Tag tag0 = Tag.valueOf("c", parseSettings0);
      FormElement formElement0 = new FormElement(tag0, "textarea", (Attributes) null);
      formElement0.getElementsByAttributeStarting("t>c");
      assertEquals("textarea", formElement0.baseUri());
  }

  @Test(timeout = 4000)
  public void test276()  throws Throwable  {
      Parser parser0 = Parser.xmlParser();
      Document document0 = parser0.parseInput("U;", "f%`v[");
      Document document1 = document0.normalise();
      document1.append("textarea");
      document0.getElementsMatchingText("ug >Vmk_IF");
      assertEquals(2, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test277()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("4]_Y%6<84", "4]_Y%6<84");
      Elements elements0 = document0.getElementsByIndexLessThan(969);
      assertEquals("4]_Y%6<84", document0.baseUri());
      assertFalse(elements0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test278()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("org.jsoup.nodes.Element$NodeList", "id");
      // Undeclared exception!
//      try { 
        document0.after("Pit^av,D");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Object must not be null
//         //
//         verifyException("org.jsoup.helper.Validate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test279()  throws Throwable  {
      Document document0 = Parser.parse("SY^8jT,aHlAf#]Ej-k", "SelfClosingStartTag");
      // Undeclared exception!
//      try { 
        document0.getElementsMatchingOwnText((Pattern) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.jsoup.select.Evaluator$MatchesOwn", e);
//      }
  }

  @Test(timeout = 4000)
  public void test280()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("_*EWhhN{(=9G*5pV", "_*EWhhN{(=9G*5pV");
      Charset charset0 = Charset.defaultCharset();
      document0.charset(charset0);
      String string0 = document0.outerHtml();
      assertEquals("_*EWhhN{(=9G*5pV", document0.baseUri());
      assertEquals("<html>\n <head>\n  <meta charset=\"US-ASCII\">\n </head>\n <body>\n  _*EWhhN{(=9G*5pV\n </body>\n</html>", string0);
  }

  @Test(timeout = 4000)
  public void test281()  throws Throwable  {
      Document document0 = Document.createShell("");
      // Undeclared exception!
//      try { 
        document0.getElementsByAttributeValueStarting("e", "");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // String must not be empty
//         //
//         verifyException("org.jsoup.helper.Validate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test282()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("#text", "head");
      document0.getElementsByAttributeValue("#text", "QOE8BAT?!|");
      assertEquals(1, document0.childNodeSize());
      assertEquals("head", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test283()  throws Throwable  {
      ParseSettings parseSettings0 = ParseSettings.preserveCase;
      Tag tag0 = Tag.valueOf("@", parseSettings0);
      Attributes attributes0 = new Attributes();
      Element element0 = new Element(tag0, "G)5n^#Oi~8", attributes0);
      Element element1 = element0.attr("", false);
      assertEquals(0, attributes0.size());
      assertEquals("G)5n^#Oi~8", element1.baseUri());
  }

  @Test(timeout = 4000)
  public void test284()  throws Throwable  {
      Document document0 = Document.createShell("");
      document0.wholeText();
      assertEquals(1, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test285()  throws Throwable  {
      Document document0 = Document.createShell("|4]_}%6<q4");
      // Undeclared exception!
//      try { 
        document0.before((Node) document0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Object must not be null
//         //
//         verifyException("org.jsoup.helper.Validate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test286()  throws Throwable  {
      Document document0 = Document.createShell("org.jsoup.nodes.Element$NodeList");
      document0.addClass("Gr3");
      document0.hasClass("Gr3");
      assertEquals(1, document0.childNodeSize());
      assertEquals("org.jsoup.nodes.Element$NodeList", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test287()  throws Throwable  {
      Element element0 = new Element("3ugX><?dm!(*b");
      Map<String, String> map0 = element0.dataset();
      assertTrue(map0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test288()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment(">rg.js.up.nodes.El}ent$No:eList", ">rg.js.up.nodes.El}ent$No:eList");
      document0.prependText(">rg.js.up.nodes.El}ent$No:eList");
      assertEquals(2, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test289()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("org.jsoup.nodes.Element$NodeLis", "org.jsoup.nodes.Element$NodeLis");
      Element element0 = document0.child(0);
      assertNotNull(element0);
      assertEquals("org.jsoup.nodes.Element$NodeLis", element0.baseUri());
      assertEquals(1, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test290()  throws Throwable  {
      Document document0 = Document.createShell("");
      document0.previousElementSiblings();
      assertEquals(1, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test291()  throws Throwable  {
      Document document0 = Document.createShell("href");
      Elements elements0 = document0.children();
      assertEquals("href", document0.baseUri());
      assertEquals(1, elements0.size());
  }

  @Test(timeout = 4000)
  public void test292()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("org.jsoup.nodes.Element$NodeList", "id");
      document0.nextElementSiblings();
  }
}
