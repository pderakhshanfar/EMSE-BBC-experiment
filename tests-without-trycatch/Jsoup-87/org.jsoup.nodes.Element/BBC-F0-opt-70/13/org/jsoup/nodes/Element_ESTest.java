/*
 * This file was automatically generated by EvoSuite
 * Wed Oct 20 15:55:18 GMT 2021
 */

package org.jsoup.nodes;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedOutputStream;
import java.io.CharArrayWriter;
import java.io.PipedOutputStream;
import java.io.PipedWriter;
import java.io.StringWriter;
import java.nio.CharBuffer;
import java.nio.ReadOnlyBufferException;
import java.nio.charset.Charset;
import java.util.Collection;
import java.util.List;
import java.util.Locale;
import java.util.Set;
import java.util.regex.Pattern;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileWriter;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.jsoup.nodes.Attributes;
import org.jsoup.nodes.CDataNode;
import org.jsoup.nodes.Comment;
import org.jsoup.nodes.DataNode;
import org.jsoup.nodes.Document;
import org.jsoup.nodes.Element;
import org.jsoup.nodes.FormElement;
import org.jsoup.nodes.Node;
import org.jsoup.nodes.PseudoTextElement;
import org.jsoup.nodes.TextNode;
import org.jsoup.nodes.XmlDeclaration;
import org.jsoup.parser.ParseSettings;
import org.jsoup.parser.Parser;
import org.jsoup.parser.Tag;
import org.jsoup.select.Elements;
import org.jsoup.select.Evaluator;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Element_ESTest extends Element_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("Cq_R XI.y9cgW|[qY", "Cq_R XI.y9cgW|[qY");
      document0.toggleClass("<html>\n <head></head>\n <body>\n  Cq_R XI.y9cgW|[qY\n </body>\n</html>");
      Element element0 = document0.toggleClass("ca HV5o(\"f");
      element0.hasClass("ca HV5o(\"f");
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("Tag name must not be empty.", "Tag name must not be empty.");
      Document document1 = new Document("Tag name must not be empty.");
      Element element0 = document1.appendTo(document0);
      document0.html(":nth-child(%d)");
      element0.nextElementSibling();
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Document document0 = new Document("amp=12;1&gt=1q;3&lt=1o;2&quot=y;0&");
      document0.normalise();
      Node[] nodeArray0 = new Node[2];
      // Undeclared exception!
//      try { 
        document0.insertChildren(0, nodeArray0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Array must not contain any null objects
//         //
//         verifyException("org.jsoup.helper.Validate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Document document0 = new Document("amp=12;1&gt=1q;3&lt=1o;2&quot=y;0&");
      Document document1 = document0.normalise();
      Node[] nodeArray0 = new Node[2];
      // Undeclared exception!
//      try { 
        document1.insertChildren((-1722320336), nodeArray0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Insert position out of bounds.
//         //
//         verifyException("org.jsoup.helper.Validate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      ParseSettings parseSettings0 = ParseSettings.htmlDefault;
      Tag tag0 = Tag.valueOf("}EG/Z%DV", parseSettings0);
      FormElement formElement0 = new FormElement(tag0, "]HL><Vq", (Attributes) null);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(pipedOutputStream0, 1);
      MockPrintStream mockPrintStream0 = new MockPrintStream(bufferedOutputStream0);
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      formElement0.outerHtmlTail(mockPrintStream0, (-154), document_OutputSettings0);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Tag tag0 = Tag.valueOf(")");
      FormElement formElement0 = new FormElement(tag0, "", (Attributes) null);
      formElement0.nodelistChanged();
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Document document0 = Document.createShell("c?>q=05DU;svx>Y");
      document0.ensureChildNodes();
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Element element0 = new Element("BiM'S@sF':");
      Document document0 = Document.createShell("BiM'S@sF':");
      element0.appendTo(document0);
      element0.wrap("org.jsoup.parser.Token$EOF");
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Element element0 = new Element("i)xvGs,e");
      element0.setSiblingIndex((-653));
      element0.val("i)xvGs,e");
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      ParseSettings parseSettings0 = new ParseSettings(true, true);
      Tag tag0 = Tag.valueOf("html", parseSettings0);
      CDataNode cDataNode0 = new CDataNode("[e!2?t.mq:^!=e!2?t.mq:^]");
      Attributes attributes0 = cDataNode0.attributes();
      FormElement formElement0 = new FormElement(tag0, "[e!2?t.mq:^!=e!2?t.mq:^]", attributes0);
      formElement0.val("[e!2?t.mq:^!=e!2?t.mq:^]");
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Tag tag0 = Tag.valueOf("/-~");
      FormElement formElement0 = new FormElement(tag0, "/-~", (Attributes) null);
      Document document0 = Parser.parseBodyFragmentRelaxed("x.8c_a~kv", "x.8c_a~kv");
      formElement0.appendTo(document0);
      formElement0.val("/-~");
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Tag tag0 = Tag.valueOf("Bu1O%c!");
      FormElement formElement0 = new FormElement(tag0, "9Q)=/fu", (Attributes) null);
      Element element0 = formElement0.val("9Q)=/fu");
      element0.val();
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      ParseSettings parseSettings0 = new ParseSettings(true, true);
      Tag tag0 = Tag.valueOf("html", parseSettings0);
      CDataNode cDataNode0 = new CDataNode("[e!2?t.mq:^!=e!2?t.mq:^]");
      Attributes attributes0 = cDataNode0.attributes();
      FormElement formElement0 = new FormElement(tag0, "[e!2?t.mq:^!=e!2?t.mq:^]", attributes0);
      formElement0.toggleClass("fieldset");
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("Tag name must not be empty.", "Tag name must not be empty.");
      Element element0 = document0.appendTo(document0);
      element0.toggleClass("El=b;!H");
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Document document0 = Document.createShell("amp=12;1&gt=1q;3&lt=1o;2&quot=y;0&");
      Element element0 = document0.appendElement("amp=12;1&gt=1q;3&lt=1o;2&quot=y;0&");
      element0.text("amp=12;1&gt=1q;3&lt=1o;2&quot=y;0&");
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed(";_#1uc>o{EQ{\"Sz", ";_#1uc>o{EQ{\"Sz");
      Element element0 = document0.head();
      element0.text("html > head");
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed(";_#1uc>o{EQ{\"Sz", ";_#1uc>o{EQ{\"Sz");
      document0.text("html > head");
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      ParseSettings parseSettings0 = new ParseSettings(true, false);
      Tag tag0 = Tag.valueOf("meta[charset]", parseSettings0);
      Attributes attributes0 = new Attributes();
      PseudoTextElement pseudoTextElement0 = new PseudoTextElement(tag0, "meta[charset]", attributes0);
      pseudoTextElement0.text();
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment(",CEJ2SH", "Tag name must not be empty.");
      Document document1 = document0.clone();
      document1.appendChild(document0);
      document0.tagName("org.jsoup.nodes.Element$2");
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed(";_#1uc>o{EQ{\"Sz", ";_#1uc>o{EQ{\"Sz");
      Element element0 = document0.head();
      element0.tagName("caption");
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("Cq_R XI.y9cgW|[qY", "Cq_R XI.y9cgW|[qY");
      document0.tagName();
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment(":nth-child(%d)", ":nth-child(%d)");
      Element element0 = document0.head();
      element0.tag();
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Element element0 = new Element("replacementChar");
      element0.tag();
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("p*afPN%Vj2*A8z|J", "p*afPN%Vj2*A8z|J");
      Element element0 = document0.head();
      element0.shallowClone();
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Document document0 = Document.createShell("c?>q=05DU;svx>Y");
      document0.selectFirst("oz");
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Tag tag0 = Tag.valueOf("form");
      Attributes attributes0 = new Attributes();
      PseudoTextElement pseudoTextElement0 = new PseudoTextElement(tag0, ",CEJ2SH", attributes0);
      pseudoTextElement0.prependElement("V`e7B+.E");
      pseudoTextElement0.selectFirst("form");
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment(",CEJ2SH", "Tag name must not be empty.");
      document0.select("html");
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed(";{_#1uc>lQ{\"J8+z", ";{_#1uc>lQ{\"J8+z");
      Element element0 = document0.head();
      element0.removeClass("textarea");
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("Cq_R XI.y9cgW|[qY", "Cq_R XI.y9cgW|[qY");
      document0.prependElement("String must not be empty");
      document0.appendTo(document0);
      document0.previousElementSibling();
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Tag tag0 = Tag.valueOf("/-~");
      FormElement formElement0 = new FormElement(tag0, "inbody", (Attributes) null);
      Element element0 = formElement0.appendElement("inbody");
      formElement0.prependElement("[\"qX");
      element0.previousElementSibling();
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Document document0 = Parser.parse("aVp=11&gt=1q;3&lt=1o;2quo=;0&", "aVp=11&gt=1q;3&lt=1o;2quo=;0&");
      Element element0 = document0.appendTo(document0);
      element0.prependText("aVp=11>=1q;3<=1o;2quo=;0&");
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("children collection to be inserted must not be null.", "children collection to be inserted must not be null.");
      document0.siblingIndex = (-1514);
      document0.prependText("bim's@sf':");
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("}EG/Z%DV", "");
      Element element0 = document0.head();
      element0.prependText("}EG/Z%DV");
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Document document0 = Parser.parse("e!2?t.mq:^", "3dsx>0Q");
      document0.prependElement("td");
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Parser parser0 = Parser.htmlParser();
      Document document0 = parser0.parseInput(")H\"l=FhAl", ")H\"l=FhAl");
      Element element0 = document0.body();
      element0.prependChild(document0);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Document document0 = Parser.parse("aVp=11&gm=1;3&l=1o;]quo=;0&", "aVp=11&gm=1;3&l=1o;]quo=;0&");
      TextNode textNode0 = new TextNode("+)9h3qrd^7o4{f", "i/>GLO9U+8");
      document0.prependChild(textNode0);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      ParseSettings parseSettings0 = ParseSettings.htmlDefault;
      Tag tag0 = Tag.valueOf("ijSj,", parseSettings0);
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = new FormElement(tag0, "ijSj,", attributes0);
      Parser parser0 = Parser.xmlParser();
      Document document0 = parser0.parseInput("Hy1d6}6|x_G[L5zb'HQ", "ibGCA*n<s");
      formElement0.appendTo(document0);
      formElement0.prepend("ijSj,");
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Document document0 = Parser.parse("", "");
      Element element0 = document0.head();
      element0.prepend("");
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Document document0 = Parser.parse("aVp=11&gm=1;3&l=1o;]quo=;0&", "aVp=11&gm=1;3&l=1o;]quo=;0&");
      document0.parents();
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Document document0 = Parser.parse("e!2?t.mq:^", "3dsx>0Q");
      Element element0 = document0.head();
      element0.parents();
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      ParseSettings parseSettings0 = ParseSettings.htmlDefault;
      Tag tag0 = Tag.valueOf("}EG/Z%DV", parseSettings0);
      FormElement formElement0 = new FormElement(tag0, "]HL><Vq", (Attributes) null);
      formElement0.parent();
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Document document0 = Parser.parse("aVp=11&gm=1;3&l=1o;]quo=;0&", "aVp=11&gm=1;3&l=1o;]quo=;0&");
      document0.appendTo(document0);
      document0.parent();
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed(";{_#1uc>lQ{\"J8+z", ";{_#1uc>lQ{\"J8+z");
      Element element0 = document0.head();
      element0.parent();
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("Cq_R XI.y9cgW|[qY", "Cq_R XI.y9cgW|[qY");
      document0.appendText("Cq_R XI.y9cgW|[qY");
      document0.ownText();
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Document document0 = Parser.parse("aVp=11&gt=1q;3&lt=1o;2quo=;0&", "aVp=11&gt=1q;3&lt=1o;2quo=;0&");
      document0.nodeName();
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Document document0 = Parser.parse("e!2?t.mq:^", "3dsx>0Q");
      Element element0 = document0.prependElement("'7(V'8yyc*v");
      element0.nextElementSiblings();
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Parser parser0 = Parser.htmlParser();
      Document document0 = parser0.parseInput("#", "org.jsoup.select.Evaluator$IsLastOfType");
      Element element0 = document0.head();
      element0.nextElementSibling();
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Document document0 = Parser.parse("aVp=11&gt=1q;3&lt=1o;2quot=;0&", "aVp=11&gt=1q;3&lt=1o;2quot=;0&");
      Element element0 = document0.appendTo(document0);
      element0.lastElementSibling();
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("/-~", ":fp*}'P*");
      Element element0 = document0.head();
      element0.lastElementSibling();
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Document document0 = new Document("org.jsoup.nodes.Element$2");
      Evaluator.AllElements evaluator_AllElements0 = new Evaluator.AllElements();
      document0.is((Evaluator) evaluator_AllElements0);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("Tag name must not be empty.", "Tag name must not be empty.");
      Evaluator.Tag evaluator_Tag0 = new Evaluator.Tag("T+&E\"y;#;wUPv");
      document0.is((Evaluator) evaluator_Tag0);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      ParseSettings parseSettings0 = ParseSettings.htmlDefault;
      Tag tag0 = Tag.valueOf("*", parseSettings0);
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = new FormElement(tag0, "*", attributes0);
      formElement0.is("*");
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment(";{_#1uc>o{EQ{\"J+z", ";{_#1uc>o{EQ{\"J+z");
      Elements elements0 = document0.getElementsByIndexGreaterThan((-758));
      document0.prepend("Nal;~:l");
      document0.insertChildren(1, (Collection<? extends Node>) elements0);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      ParseSettings parseSettings0 = new ParseSettings(true, false);
      Tag tag0 = Tag.valueOf("}b`/ZV", parseSettings0);
      CDataNode cDataNode0 = new CDataNode("ScriptDataDoubleEscaped");
      Attributes attributes0 = cDataNode0.attributes();
      FormElement formElement0 = new FormElement(tag0, "bem5u2}lM><)", attributes0);
      formElement0.html((StringWriter) null);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed(";_#1uc>o{EQ{\"Sz", ";_#1uc>o{EQ{\"Sz");
      Element element0 = document0.head();
      element0.html();
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Tag tag0 = Tag.valueOf(" -~");
      FormElement formElement0 = new FormElement(tag0, "9>PQ)=/fu", (Attributes) null);
      formElement0.val("e,k]}:oQP Ooqpb");
      formElement0.hasAttributes();
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("children collection to be inserted must not be null.", "children collection to be inserted must not be null.");
      document0.hasAttributes();
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Tag tag0 = Tag.valueOf("form");
      Attributes attributes0 = new Attributes();
      PseudoTextElement pseudoTextElement0 = new PseudoTextElement(tag0, ",CEJ2SH", attributes0);
      Pattern pattern0 = Pattern.compile("`|V3m&9Q4Vy", (-1621));
      pseudoTextElement0.getElementsMatchingText(pattern0);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment(",CEJ2SH", "Tag name must not be empty.");
      Pattern pattern0 = Pattern.compile("", 1097);
      document0.getElementsMatchingOwnText(pattern0);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("^", "^");
      Element element0 = document0.shallowClone();
      element0.appendChild(document0);
      document0.prependText("bw9MzE;W8Po");
      element0.getElementsMatchingOwnText("bw9MzE;W8Po");
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("Tag name must not be empty.", "Tag name must not be empty.");
      document0.html(":nth-child(%d)");
      document0.getElementsContainingOwnText(":nth-child(%d)");
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Document document0 = Parser.parse("e!2?t.mq:^", "3dsx>0Q");
      document0.getElementsByTag("textarea");
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("p*afPN%Vj2*A8z|J", "p*afPN%Vj2*A8z|J");
      document0.getElementsByTag("#root");
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Document document0 = Parser.parse("TagOpen", "html");
      Element element0 = document0.createElement("html");
      element0.getElementsByIndexLessThan(46);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Document document0 = new Document("[sb08,NDzZ>zo93&");
      document0.normalise();
      Elements elements0 = document0.getElementsByIndexGreaterThan(0);
      document0.insertChildren((-1), (Collection<? extends Node>) elements0);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Document document0 = new Document("=E>j:d]b Q");
      document0.getElementsByIndexEquals(0);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("aVp=11&gm=1;3&l=1o;]quo=;0&", "aVp=11&gm=1;3&l=1o;]quo=;0&");
      document0.getElementsByAttributeValueNot("o o/u%dv", "      ");
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Document document0 = Parser.parse("e!2?t.mq:^", "3dsx>0Q");
      document0.getElementsByAttributeValueNot("[e!2?t.mq:^!=e!2?t.mq:^]", "i%olKNcuM46csoy4}");
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("p*afPN%Vj2*A8z|J", "p*afPN%Vj2*A8z|J");
      document0.getElementsByAttributeValueMatching("yD%V60k|06Bn'j", "p*afPN%Vj2*A8z|J");
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("CommentStart", "tag name must not be empty.");
      document0.getElementsByAttributeStarting("tag name must not be empty.");
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Document document0 = new Document("");
      document0.getElementsByAttribute("<html>\n <head></head>\n <body>\n  ,EJ2SH\n <body>\n</html>");
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Tag tag0 = Tag.valueOf("form");
      Attributes attributes0 = new Attributes();
      PseudoTextElement pseudoTextElement0 = new PseudoTextElement(tag0, ",CEJ2SH", attributes0);
      pseudoTextElement0.empty();
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment(",CEJ2SH", "Tag name must not be empty.");
      document0.appendChild(document0);
      document0.empty();
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Document document0 = Parser.parse("aVp=11&gm=1;3&l=1o;]quo=;0&", "aVp=11&gm=1;3&l=1o;]quo=;0&");
      Document document1 = (Document)document0.appendTo(document0);
      document1.doClone(document0);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Document document0 = Parser.parse("/-~", "/-~");
      document0.doClone((Node) null);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Parser parser0 = Parser.xmlParser();
      Document document0 = parser0.parseInput("", "%ED$gdzG");
      document0.doClone(document0);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Parser parser0 = Parser.htmlParser();
      Document document0 = parser0.parseInput("#", "org.jsoup.select.Evaluator$IsLastOfType");
      Element element0 = document0.head();
      element0.clone();
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Parser parser0 = Parser.htmlParser();
      Document document0 = parser0.parseInput("#", "org.jsoup.select.Evaluator$IsLastOfType");
      document0.clone();
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Parser parser0 = Parser.htmlParser();
      Document document0 = parser0.parseInput(")H\"l=FhAl", ")H\"l=FhAl");
      Element element0 = document0.body();
      Locale locale0 = Locale.US;
      Set<String> set0 = locale0.getUnicodeLocaleKeys();
      element0.classNames(set0);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Tag tag0 = Tag.valueOf("/-~");
      FormElement formElement0 = new FormElement(tag0, "/-~", (Attributes) null);
      Element element0 = formElement0.appendElement("/-~");
      Parser parser0 = Parser.xmlParser();
      Document document0 = parser0.parseInput(".QGWB!", "/-~");
      Charset charset0 = document0.charset();
      Set<String> set0 = charset0.aliases();
      element0.classNames(set0);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Tag tag0 = Tag.valueOf("/-~");
      FormElement formElement0 = new FormElement(tag0, "/-~", (Attributes) null);
      Parser parser0 = Parser.xmlParser();
      Document document0 = parser0.parseInput(".QGWB!", "/-~");
      Charset charset0 = document0.charset();
      Set<String> set0 = charset0.aliases();
      formElement0.classNames(set0);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("/-~", "/-~");
      document0.toggleClass("");
      document0.className();
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Document document0 = new Document("aVp=11&gt=1q;3&lt=1o;2quot=;0&");
      document0.children();
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Document document0 = Parser.parse("e!2?t.mq:^", "3dsx>0Q");
      Element element0 = document0.prependElement("'7(V'8yyc*v");
      element0.childNodeSize();
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("Cq_R XI.y9cgW|[qY", "Cq_R XI.y9cgW|[qY");
      document0.childNodeSize();
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Document document0 = Parser.parse("/-~", "/-~");
      Document document1 = new Document("");
      Document document2 = (Document)document0.appendTo(document1);
      document1.html("ZvITYa#^");
      document2.before((Node) document1);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Document document0 = Parser.parse("head", "head");
      Document document1 = new Document("head");
      Document document2 = (Document)document1.appendTo(document0);
      document2.before((Node) document0);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Tag tag0 = Tag.valueOf("/-~");
      FormElement formElement0 = new FormElement(tag0, "inbody", (Attributes) null);
      Element element0 = formElement0.appendElement("inbody");
      element0.before("Cv/5");
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed(";{_#1uc>o{EQ{\"J+z", ";{_#1uc>o{EQ{\"J+z");
      Element element0 = document0.body();
      element0.before("ScriptDataDoubleEscaped");
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("children collection to be inserted must not be null.", "children collection to be inserted must not be null.");
      document0.baseUri();
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Document document0 = Document.createShell("");
      document0.baseUri();
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Element element0 = new Element("i)xvGs,e");
      element0.val("i)xvGs,e");
      element0.attributes();
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment(",CEJ2SH", "Tag name must not be empty.");
      Element element0 = document0.appendChild(document0);
      element0.attr("A-[;FAozV7;Ww5k$*|", true);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Document document0 = Parser.parse("e!2?t.mq:^", "3dsx>0Q");
      Element element0 = document0.head();
      element0.attr("+(", true);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment(",CEJ2SH", "Tag name must not be empty.");
      document0.attr("GkH-&1UwcO*", true);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Document document0 = Parser.parse("/-~", "/-~");
      Document document1 = Parser.parse("[>J", "[>J");
      document1.appendChild(document0);
      document0.attr("org.jsoup.nodes.Element$2", "</");
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Document document0 = Document.createShell("*-NO-n{p");
      Element element0 = document0.head();
      element0.attr("           ", ",CEJ2SH");
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Document document0 = Parser.parse("/-~", "/-~");
      document0.attr("org.jsoup.nodes.Element$2", "</");
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Document document0 = Parser.parse("Y=3Ld[[]n^yr>HV", "Y=3Ld[[]n^yr>HV");
      document0.appendTo(document0);
      Element element0 = document0.previousElementSibling();
      element0.appendTo(document0);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Document document0 = Parser.parse("?eL,5/noK:GA(", "rueped");
      Element element0 = document0.body();
      element0.appendText("EndTag");
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment(",CEJ2SH", "Tag name must not be empty.");
      document0.appendElement("html");
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Document document0 = Parser.parse("e!2?t.mq:^", "3dsx>0Q");
      Element element0 = document0.head();
      element0.appendChild(document0);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("", "}EG/Z%DV");
      Document document1 = Document.createShell("}EG/Z%DV");
      Element element0 = document0.appendTo(document1);
      element0.append("}EG/Z%DV");
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Document document0 = Parser.parse("aVp=11&gm=1;3&l=1o;]quo=;0&", "aVp=11&gm=1;3&l=1o;]quo=;0&");
      document0.setSiblingIndex((-1999));
      document0.append("java.lang.string@0000000138 @ekiffhs s o/u%dv");
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Document document0 = Parser.parse("aVp=11&gt=1q;3&lt=1o;2quo=;0&", "aVp=11&gt=1q;3&lt=1o;2quo=;0&");
      Document document1 = new Document("aVp=11&gt=1q;3&lt=1o;2quo=;0&");
      Element element0 = document0.appendTo(document1);
      element0.append("iYd");
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      Document document0 = new Document("<html>\n <head></head>\n <body></body>\n</html>");
      document0.append("");
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      Element element0 = new Element("/-~");
      Comment comment0 = new Comment((String) null);
      Document document0 = new Document("org.jsoup.nodes.Element$2");
      element0.appendTo(document0);
      element0.after((Node) comment0);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      Document document0 = Document.createShell("amp=12;1&gt=1q;3&lt=1o;2&quot=y;0&");
      Element element0 = document0.body();
      element0.after("");
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      Tag tag0 = Tag.valueOf("/-~");
      FormElement formElement0 = new FormElement(tag0, "inbody", (Attributes) null);
      Element element0 = formElement0.appendElement("inbody");
      element0.after("/-~");
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      Tag tag0 = Tag.valueOf("/-~");
      FormElement formElement0 = new FormElement(tag0, "inbody", (Attributes) null);
      Element element0 = formElement0.appendElement("inbody");
      element0.prependElement("inbody");
      element0.after("/-~");
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      Document document0 = new Document("amp=12;1&gt=1q;3&lt=1o;2&quot=y;0&");
      Document document1 = document0.normalise();
      Element element0 = document1.appendElement("amp=12;1&gt=1q;3&lt=1o;2&quot=y;0&");
      element0.addClass("amp=12;1&gt=1q;3&lt=1o;2&quot=y;0&");
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("       ", "y8}**PM:b]");
      Element element0 = document0.head();
      element0.addClass("t}^@/|9&-lQV{");
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      Document document0 = new Document("amp=12;1&gt=1q;3&lt=1o;2&quot=y;0&");
      document0.addClass("amp=12;1&gt=1q;3&lt=1o;2&quot=y;0&");
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      Document document0 = Parser.parse("aVp=11&gt=1q;3&lt=1o;2quo=;0&", "aVp=11&gt=1q;3&lt=1o;2quo=;0&");
      document0.appendTo(document0);
      // Undeclared exception!
      document0.wrap("Xq");
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      Document document0 = Document.createShell("body");
      // Undeclared exception!
//      try { 
        document0.wrap((String) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // String must not be empty
//         //
//         verifyException("org.jsoup.helper.Validate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      Document document0 = Parser.parse("id", "id");
      Element element0 = document0.appendTo(document0);
      // Undeclared exception!
      element0.val("a&>mp9;Lh=0W,@");
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      Tag tag0 = Tag.valueOf("v+L:OwB0gk");
      CDataNode cDataNode0 = new CDataNode("v+L:OwB0gk");
      Attributes attributes0 = cDataNode0.attributes();
      Attributes attributes1 = attributes0.clone();
      FormElement formElement0 = new FormElement(tag0, "v+L:OwB0gk", attributes1);
      String[] stringArray0 = new String[0];
      attributes1.vals = stringArray0;
      // Undeclared exception!
//      try { 
        formElement0.val("?N9nvS)YJD$He");
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 1
//         //
//         verifyException("org.jsoup.nodes.Attributes", e);
//      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("Tag name must not be empty.", "Tag name must not be empty.");
      // Undeclared exception!
//      try { 
        document0.toggleClass((String) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Object must not be null
//         //
//         verifyException("org.jsoup.helper.Validate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      Tag tag0 = Tag.valueOf("v+L:OwB0gk");
      CDataNode cDataNode0 = new CDataNode("v+L:OwB0gk");
      Attributes attributes0 = cDataNode0.attributes();
      Attributes attributes1 = attributes0.clone();
      FormElement formElement0 = new FormElement(tag0, "v+L:OwB0gk", attributes1);
      String[] stringArray0 = new String[0];
      attributes1.vals = stringArray0;
      // Undeclared exception!
//      try { 
        formElement0.toggleClass("Wn,^,");
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 1
//         //
//         verifyException("org.jsoup.nodes.Attributes", e);
//      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      Document document0 = new Document("eQJ09t(7tOH#iVK;8");
      // Undeclared exception!
//      try { 
        document0.text("eQJ09t(7tOH#iVK;8");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.jsoup.nodes.Document", e);
//      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      Element element0 = new Element("/-~");
      // Undeclared exception!
//      try { 
        element0.text((String) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Object must not be null
//         //
//         verifyException("org.jsoup.helper.Validate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      Document document0 = Parser.parse("=", "org.jsoup.select.Evaluator$IsOnlyChild");
      Element element0 = document0.body();
      element0.after((Node) document0);
      // Undeclared exception!
      element0.tagName("=");
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      Document document0 = Parser.parse("e!2?t.mq:^", "3dsx>0Q");
      // Undeclared exception!
//      try { 
        document0.tagName("");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Tag name must not be empty.
//         //
//         verifyException("org.jsoup.helper.Validate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      Tag tag0 = Tag.valueOf("/-~");
      FormElement formElement0 = new FormElement(tag0, "inbody", (Attributes) null);
      // Undeclared exception!
//      try { 
        formElement0.selectFirst((String) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // String must not be empty
//         //
//         verifyException("org.jsoup.helper.Validate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      Document document0 = new Document("=E>j:d]b Q");
      // Undeclared exception!
//      try { 
        document0.select("=E>j:d]b Q");
//        fail("Expecting exception: IllegalStateException");
      
//      } catch(IllegalStateException e) {
//         //
//         // Could not parse query '=E>j:d]b Q': unexpected token at '=E>j:d]b Q'
//         //
//         verifyException("org.jsoup.select.QueryParser", e);
//      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("p*afPN%Vj2*A8z|J", "p*afPN%Vj2*A8z|J");
      // Undeclared exception!
//      try { 
        document0.select("");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // String must not be empty
//         //
//         verifyException("org.jsoup.helper.Validate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("", ")");
      // Undeclared exception!
//      try { 
        document0.removeClass((String) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Object must not be null
//         //
//         verifyException("org.jsoup.helper.Validate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("/-~", "/-~");
      // Undeclared exception!
//      try { 
        document0.prependText((String) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Object must not be null
//         //
//         verifyException("org.jsoup.helper.Validate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment(",CEJ2SH", "Tag name must not be empty.");
      document0.appendChild(document0);
      // Undeclared exception!
      document0.prependElement("EndTag");
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment(",CEJ2SH", "Tag name must not be empty.");
      // Undeclared exception!
//      try { 
        document0.prependElement("");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // String must not be empty
//         //
//         verifyException("org.jsoup.helper.Validate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("Tag name must not be empty.", "Tag name must not be empty.");
      Document document1 = new Document("Tag name must not be empty.");
      document1.appendTo(document0);
      document0.html(":nth-child(%d)");
      // Undeclared exception!
//      try { 
        document1.prependChild(document1);
//        fail("Expecting exception: IndexOutOfBoundsException");
      
//      } catch(IndexOutOfBoundsException e) {
//         //
//         // Index: 1, Size: 1
//         //
//         verifyException("java.util.ArrayList", e);
//      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("aVp=11&gm=1;3&l=1o;]quo=;0&", "aVp=11&gm=1;3&l=1o;]quo=;0&");
      Element element0 = document0.appendTo(document0);
      // Undeclared exception!
      element0.prepend("br");
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      Document document0 = new Document(":nth-child(%d)");
      // Undeclared exception!
//      try { 
        document0.prepend((String) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Object must not be null
//         //
//         verifyException("org.jsoup.helper.Validate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      Document document0 = Document.createShell("figure");
      MockPrintStream mockPrintStream0 = new MockPrintStream("figure");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      document_OutputSettings0.indentAmount(8204);
      // Undeclared exception!
      document0.outerHtmlTail(mockPrintStream0, 60, document_OutputSettings0);
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      Document document0 = new Document("*J,Ne,'K{[#*1.");
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) "*J,Ne,'K{[#*1.");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      // Undeclared exception!
//      try { 
        document0.outerHtmlTail(charBuffer0, 2433, document_OutputSettings0);
//        fail("Expecting exception: ReadOnlyBufferException");
      
//      } catch(ReadOnlyBufferException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.nio.CharBuffer", e);
//      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("aVp=11&gm=1;3&l=1o;]quo=;0&", "aVp=11&gm=1;3&l=1o;]quo=;0&");
      MockFile mockFile0 = new MockFile("aVp=11&gm=1;3&l=1o;]quo=;0&");
      MockFileWriter mockFileWriter0 = new MockFileWriter(mockFile0, false);
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      // Undeclared exception!
//      try { 
        document0.outerHtmlTail(mockFileWriter0, (-2070787801), document_OutputSettings0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // width must be > 0
//         //
//         verifyException("org.jsoup.internal.StringUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed(":has", "jv_eAt-xmztB@>-FK");
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) ":has");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      // Undeclared exception!
//      try { 
        document0.outerHtmlHead(charBuffer0, (-18), document_OutputSettings0);
//        fail("Expecting exception: ReadOnlyBufferException");
      
//      } catch(ReadOnlyBufferException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.nio.StringCharBuffer", e);
//      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      Document document0 = Parser.parse("Ta0 name must not be emphD.", "Ta0 name must not be emphD.");
      MockFileWriter mockFileWriter0 = new MockFileWriter("l(tU", true);
      // Undeclared exception!
//      try { 
        document0.outerHtmlHead(mockFileWriter0, 62, (Document.OutputSettings) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.jsoup.nodes.Element", e);
//      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("l", "l");
      StringBuilder stringBuilder0 = new StringBuilder("l");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      // Undeclared exception!
//      try { 
        document0.outerHtmlHead(stringBuilder0, (-292), document_OutputSettings0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // width must be > 0
//         //
//         verifyException("org.jsoup.internal.StringUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      Tag tag0 = Tag.valueOf("}EG/Z%DV");
      Element element0 = new Element(tag0, "}EG/Z%DV", (Attributes) null);
      XmlDeclaration xmlDeclaration0 = new XmlDeclaration("}EG/Z%DV", "}EG/Z%DV", false);
      element0.setParentNode(xmlDeclaration0);
      // Undeclared exception!
//      try { 
        element0.nextElementSibling();
//        fail("Expecting exception: ClassCastException");
      
//      } catch(ClassCastException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      Tag tag0 = Tag.valueOf("5-");
      Element element0 = new Element(tag0, "5-");
      // Undeclared exception!
//      try { 
        element0.lastElementSibling();
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.jsoup.nodes.Element", e);
//      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      Document document0 = Parser.parse("Ta0 name must not be emphD.", "Ta0 name must not be emphD.");
      Element element0 = document0.appendTo(document0);
      Evaluator.IsNthOfType evaluator_IsNthOfType0 = new Evaluator.IsNthOfType((-1110026255), (-1482));
      // Undeclared exception!
      element0.is((Evaluator) evaluator_IsNthOfType0);
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      Tag tag0 = Tag.valueOf("Bu1O%c!");
      FormElement formElement0 = new FormElement(tag0, "9Q)=/fu", (Attributes) null);
      // Undeclared exception!
//      try { 
        formElement0.is("9Q)=/fu");
//        fail("Expecting exception: IllegalStateException");
      
//      } catch(IllegalStateException e) {
//         //
//         // Could not parse query '9Q)=/fu': unexpected token at ')=/fu'
//         //
//         verifyException("org.jsoup.select.QueryParser", e);
//      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      Document document0 = Parser.parse("aVp=11&gm=1;3&l=1o;]quo=;0&", "aVp=11&gm=1;3&l=1o;]quo=;0&");
      Element element0 = document0.appendTo(document0);
      // Undeclared exception!
      element0.is("value");
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      Tag tag0 = Tag.valueOf("v+L:OwB0gk");
      CDataNode cDataNode0 = new CDataNode("v+L:OwB0gk");
      Attributes attributes0 = cDataNode0.attributes();
      FormElement formElement0 = new FormElement(tag0, "v+L:OwB0gk", attributes0);
      Document document0 = new Document("amp=12;1&gt=1q;3&lt=1o;2&quot=y;0&");
      Node[] nodeArray0 = new Node[5];
      nodeArray0[0] = (Node) cDataNode0;
      nodeArray0[1] = (Node) document0;
      nodeArray0[2] = (Node) formElement0;
      nodeArray0[3] = (Node) document0;
      nodeArray0[4] = (Node) formElement0;
      // Undeclared exception!
//      try { 
        formElement0.insertChildren(0, nodeArray0);
//        fail("Expecting exception: IndexOutOfBoundsException");
      
//      } catch(IndexOutOfBoundsException e) {
//         //
//         // Index: 0, Size: 0
//         //
//         verifyException("java.util.ArrayList", e);
//      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      Document document0 = new Document(",CEJ2SH");
      document0.appendTo(document0);
      // Undeclared exception!
      document0.html("#ctv0UJv>");
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      Document document0 = Parser.parse("amp=12;1&gt=1q;3&lt=1o;2&quot=y;0&", "amp=12;1&gt=1q;3&lt=1o;2&quot=y;0&");
      // Undeclared exception!
//      try { 
        document0.html((String) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Object must not be null
//         //
//         verifyException("org.jsoup.helper.Validate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      Document document0 = Parser.parse("aVp=12a1&gt=1q;3&lt=1o;2&quot=y;0&", "aVp=12a1&gt=1q;3&lt=1o;2&quot=y;0&");
      document0.appendTo(document0);
      // Undeclared exception!
      document0.html();
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      Document document0 = Parser.parse("aVp=12a1&gt=1q;3&lt=1o;2&quot=y;0&", "aVp=12a1&gt=1q;3&lt=1o;2&quot=y;0&");
      // Undeclared exception!
//      try { 
        document0.hasClass((String) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.jsoup.nodes.Element", e);
//      }
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      Document document0 = Parser.parse("aVp=11&gt=1q;3&lt=1o;2quot=;0&", "aVp=11&gt=1q;3&lt=1o;2quot=;0&");
      // Undeclared exception!
//      try { 
        document0.getElementsMatchingText((Pattern) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.jsoup.select.Evaluator$Matches", e);
//      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      Parser parser0 = Parser.htmlParser();
      Document document0 = parser0.parseInput("#", "org.jsoup.select.Evaluator$IsLastOfType");
      // Undeclared exception!
//      try { 
        document0.getElementsMatchingText((String) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      Document document0 = Document.createShell(")");
      // Undeclared exception!
//      try { 
        document0.getElementsMatchingText("sgS*${_gqXw)da;");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Pattern syntax error: sgS*${_gqXw)da;
//         //
//         verifyException("org.jsoup.nodes.Element", e);
//      }
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("CommentStart", "tag name must not be empty.");
      // Undeclared exception!
//      try { 
        document0.getElementsMatchingOwnText((Pattern) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.jsoup.select.Evaluator$MatchesOwn", e);
//      }
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment(";{_#1uc>o{EQ{\"J+z", ";{_#1uc>o{EQ{\"J+z");
      TextNode textNode0 = TextNode.createFromEncoded("20\"]?6_q,T[r", (String) null);
      document0.setParentNode(textNode0);
      // Undeclared exception!
//      try { 
        document0.getElementsContainingOwnText(";{_#1uc>o{EQ{\"J+z");
//        fail("Expecting exception: ClassCastException");
      
//      } catch(ClassCastException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment(",CEJ2SH", "Tag name must not be empty.");
      // Undeclared exception!
//      try { 
        document0.getElementsByTag("");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // String must not be empty
//         //
//         verifyException("org.jsoup.helper.Validate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("head", "head");
      Comment comment0 = new Comment("head", "head");
      XmlDeclaration xmlDeclaration0 = comment0.asXmlDeclaration();
      document0.setParentNode(xmlDeclaration0);
      // Undeclared exception!
//      try { 
        document0.getElementsByIndexGreaterThan(2);
//        fail("Expecting exception: ClassCastException");
      
//      } catch(ClassCastException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      Tag tag0 = Tag.valueOf("InBody");
      FormElement formElement0 = new FormElement(tag0, "InBody", (Attributes) null);
      // Undeclared exception!
//      try { 
        formElement0.getElementsByClass("");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // String must not be empty
//         //
//         verifyException("org.jsoup.helper.Validate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      Document document0 = Document.createShell("CommentStart");
      // Undeclared exception!
//      try { 
        document0.getElementsByAttributeValueStarting("", "BiM'S@sF':");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // String must not be empty
//         //
//         verifyException("org.jsoup.helper.Validate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      Tag tag0 = Tag.valueOf("v+L:OwB0gk");
      CDataNode cDataNode0 = new CDataNode("v+L:OwB0gk");
      Attributes attributes0 = cDataNode0.attributes();
      FormElement formElement0 = new FormElement(tag0, "v+L:OwB0gk", attributes0);
      // Undeclared exception!
//      try { 
        formElement0.getElementsByAttributeValueMatching("!!=Be0|z(s>;d'5dTN", (String) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      ParseSettings parseSettings0 = ParseSettings.htmlDefault;
      Tag tag0 = Tag.valueOf(",CEJ2SH", parseSettings0);
      FormElement formElement0 = new FormElement(tag0, "hxzrw*`wm0i#oxh2b}0", (Attributes) null);
      // Undeclared exception!
//      try { 
        formElement0.getElementsByAttributeValueEnding("hxzrw*`wm0i#oxh2b}0", (String) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // String must not be empty
//         //
//         verifyException("org.jsoup.helper.Validate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      Document document0 = Document.createShell(")");
      // Undeclared exception!
//      try { 
        document0.getElementsByAttributeValueContaining("I+6]]]Um9<x?", (String) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // String must not be empty
//         //
//         verifyException("org.jsoup.helper.Validate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      Tag tag0 = Tag.valueOf(")");
      FormElement formElement0 = new FormElement(tag0, "", (Attributes) null);
      // Undeclared exception!
//      try { 
        formElement0.getElementsByAttributeValue("", "org.jsoup.nodes.Element");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // String must not be empty
//         //
//         verifyException("org.jsoup.helper.Validate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment(",CEJ2SH", "Tag name must not be empty.");
      // Undeclared exception!
//      try { 
        document0.getElementById((String) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // String must not be empty
//         //
//         verifyException("org.jsoup.helper.Validate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      Tag tag0 = Tag.valueOf("v+L:OwB0gk");
      CDataNode cDataNode0 = new CDataNode("v+L:OwB0gk");
      Attributes attributes0 = cDataNode0.attributes();
      FormElement formElement0 = new FormElement(tag0, "v+L:OwB0gk", attributes0);
      // Undeclared exception!
//      try { 
        formElement0.firstElementSibling();
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.jsoup.nodes.Element", e);
//      }
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("br", "br");
      Document document1 = document0.normalise();
      List<Node> list0 = Parser.parseXmlFragment("org.jsoup.parser.XmlTreeBuilder", "br");
      document1.childNodes = list0;
      // Undeclared exception!
//      try { 
        document1.empty();
//        fail("Expecting exception: UnsupportedOperationException");
      
//      } catch(UnsupportedOperationException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.util.Collections$UnmodifiableCollection", e);
//      }
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      Tag tag0 = Tag.valueOf("/-~");
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = new FormElement(tag0, "z>#S/e]LTNr$", attributes0);
      PseudoTextElement pseudoTextElement0 = new PseudoTextElement(tag0, "[/-~!=/-~]", attributes0);
      formElement0.appendTo(pseudoTextElement0);
      // Undeclared exception!
//      try { 
        formElement0.cssSelector();
//        fail("Expecting exception: IllegalStateException");
      
//      } catch(IllegalStateException e) {
//         //
//         // Could not parse query '/-': unexpected token at '/-'
//         //
//         verifyException("org.jsoup.select.QueryParser", e);
//      }
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed(";{_#1uc>o{EQ{\"J+z", ";{_#1uc>o{EQ{\"J+z");
      Element element0 = document0.head();
      element0.setSiblingIndex((-1483));
      // Undeclared exception!
//      try { 
        element0.cssSelector();
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      Document document0 = Parser.parse("e!2?t.mq:^", "3dsx>0Q");
      // Undeclared exception!
//      try { 
        document0.classNames((Set<String>) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Object must not be null
//         //
//         verifyException("org.jsoup.helper.Validate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment(",CEJ2SH", "Tag name must not be empty.");
      // Undeclared exception!
//      try { 
        document0.child((-2825));
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed(";_#1uc>o{EQ{\"Sz", ";_#1uc>o{EQ{\"Sz");
      Parser parser0 = Parser.xmlParser();
      Document document1 = parser0.parseInput(";_#1uc>o{EQ{\"Sz", ";_#1uc>o{EQ{\"Sz");
      Element element0 = document0.appendTo(document1);
      document1.html(";_#1uc>o{EQ{\"Sz");
      // Undeclared exception!
//      try { 
        document0.before((Node) element0);
//        fail("Expecting exception: IndexOutOfBoundsException");
      
//      } catch(IndexOutOfBoundsException e) {
//         //
//         // Index: 1, Size: 1
//         //
//         verifyException("java.util.ArrayList", e);
//      }
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      Tag tag0 = Tag.valueOf("/-~");
      FormElement formElement0 = new FormElement(tag0, "/-~", (Attributes) null);
      formElement0.prependChild(formElement0);
      // Undeclared exception!
      formElement0.before("textarea");
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment(",CEJ2SH", "Tag name must not be empty.");
      Element element0 = document0.appendChild(document0);
      // Undeclared exception!
      element0.attr("body", "");
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      Tag tag0 = Tag.valueOf("v+L:OwB0gk");
      CDataNode cDataNode0 = new CDataNode("v+L:OwB0gk");
      Attributes attributes0 = cDataNode0.attributes();
      Attributes attributes1 = attributes0.clone();
      FormElement formElement0 = new FormElement(tag0, "v+L:OwB0gk", attributes1);
      String[] stringArray0 = new String[0];
      attributes1.vals = stringArray0;
      // Undeclared exception!
//      try { 
        formElement0.attr("textarea", "i:*wR$u`88fLp~");
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 1
//         //
//         verifyException("org.jsoup.nodes.Attributes", e);
//      }
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("Tag name must not be empty.", "Tag name must not be empty.");
      Document document1 = Document.createShell("Tag name must not be empty.");
      Element element0 = document1.body();
      document1.setParentNode(element0);
      // Undeclared exception!
//      try { 
        document1.appendTo(document0);
//        fail("Expecting exception: IndexOutOfBoundsException");
      
//      } catch(IndexOutOfBoundsException e) {
//         //
//         // Index: 0, Size: 0
//         //
//         verifyException("java.util.ArrayList", e);
//      }
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      Document document0 = Parser.parse("e!2?t.mq:^", "3dsx>0Q");
      // Undeclared exception!
//      try { 
        document0.appendTo((Element) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Object must not be null
//         //
//         verifyException("org.jsoup.helper.Validate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      Document document0 = Document.createShell("children collection to be inserted must not be null.");
      // Undeclared exception!
//      try { 
        document0.appendText((String) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Object must not be null
//         //
//         verifyException("org.jsoup.helper.Validate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      Document document0 = Parser.parse("aVp=11&gt=1q;3&lt=1o;2quot=;0&", "aVp=11&gt=1q;3&lt=1o;2quot=;0&");
      Element element0 = document0.appendTo(document0);
      // Undeclared exception!
      element0.appendElement((String) null);
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment(",CEJ2SH", ",CEJ2SH");
      // Undeclared exception!
//      try { 
        document0.appendElement("");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // String must not be empty
//         //
//         verifyException("org.jsoup.helper.Validate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      Tag tag0 = Tag.valueOf("/-~");
      FormElement formElement0 = new FormElement(tag0, "9Q)=/fu", (Attributes) null);
      // Undeclared exception!
//      try { 
        formElement0.appendChild((Node) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Object must not be null
//         //
//         verifyException("org.jsoup.helper.Validate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      Document document0 = Document.createShell("B_T/Q>BhtqT6");
      Node[] nodeArray0 = new Node[4];
      nodeArray0[0] = (Node) document0;
      nodeArray0[1] = (Node) document0;
      nodeArray0[2] = (Node) document0;
      nodeArray0[3] = (Node) document0;
      document0.addChildren(nodeArray0);
      // Undeclared exception!
      document0.append("B_T/Q>BhtqT6");
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("p*afPN%Vj2*A8z|J", "p*afPN%Vj2*A8z|J");
      // Undeclared exception!
//      try { 
        document0.append((String) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Object must not be null
//         //
//         verifyException("org.jsoup.helper.Validate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      Document document0 = Parser.parse("?eL,5/noK:GA(", "rueped");
      Element element0 = document0.body();
      // Undeclared exception!
//      try { 
        element0.after((Node) element0);
//        fail("Expecting exception: IndexOutOfBoundsException");
      
//      } catch(IndexOutOfBoundsException e) {
//         //
//         // Index: 2, Size: 1
//         //
//         verifyException("java.util.ArrayList", e);
//      }
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("Tag name must not be empty.", "Tag name must not be empty.");
      Document document1 = (Document)document0.appendTo(document0);
      // Undeclared exception!
      document1.after("zdClm!QArjSk");
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("aVp=11&gm=1;3&l=1o;]quo=;0&", "aVp=11&gm=1;3&l=1o;]quo=;0&");
      // Undeclared exception!
//      try { 
        document0.addClass((String) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Object must not be null
//         //
//         verifyException("org.jsoup.helper.Validate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      ParseSettings parseSettings0 = new ParseSettings(false, false);
      Tag tag0 = Tag.valueOf("\"'K=", parseSettings0);
      Attributes attributes0 = new Attributes();
      Element element0 = null;
//      try {
        element0 = new Element(tag0, (String) null, attributes0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Object must not be null
//         //
//         verifyException("org.jsoup.helper.Validate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      Element element0 = null;
//      try {
        element0 = new Element((Tag) null, "GkH-&VUwcO*");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Object must not be null
//         //
//         verifyException("org.jsoup.helper.Validate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      Element element0 = null;
//      try {
        element0 = new Element((String) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Object must not be null
//         //
//         verifyException("org.jsoup.helper.Validate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("}EG/Z%DV", "");
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      document0.html(charArrayWriter0);
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("Cq_R XIy9cgW|[qY", "Cq_R XIy9cgW|[qY");
      Element element0 = document0.toggleClass("e ");
      element0.hasClass("java.lang.string@0000000038");
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      Document document0 = Document.createShell("amp=12;1&gt=1q;3&lt=1o;2&quot=y;0&");
      document0.hasClass("amp=12;1&gt=1q;3&lt=1o;2&quot=y;0&");
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      Parser parser0 = Parser.xmlParser();
      Document document0 = parser0.parseInput("head", "e!2?t.mq:^");
      document0.data();
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      Document document0 = new Document("<html>\n <head></head>\n <body>\n  *?h 'kRk7\n </body>\n</html>");
      document0.append("<html>\n <head></head>\n <body>\n  *?h 'kRk7\n </body>\n</html>");
      document0.hasText();
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      Tag tag0 = Tag.valueOf("ca HV5o(\"f");
      CDataNode cDataNode0 = new CDataNode("");
      Attributes attributes0 = cDataNode0.attributes();
      FormElement formElement0 = new FormElement(tag0, "zT#}4k',j`", attributes0);
      formElement0.elementSiblingIndex();
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment(",CEJ2SH", "Tag name must not be empty.");
      document0.appendChild(document0);
      document0.elementSiblingIndex();
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      Element element0 = new Element("/-~");
      Document document0 = new Document("org.jsoup.nodes.Element$2");
      Element element1 = element0.appendTo(document0);
      element1.cssSelector();
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      Document document0 = Document.createShell("/-~");
      Element element0 = document0.body();
      element0.html("");
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      Document document0 = Parser.parse("aVp=11&gt=1q;3&lt=1o;2quo=;0&", "aVp=11&gt=1q;3&lt=1o;2quo=;0&");
      document0.removeAttr("u_i.A");
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      Element element0 = new Element("i)xvGs,e");
      element0.attributes();
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("children collection to be inserted must not be null.", "children collection to be inserted must not be null.");
      document0.className();
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("p*afPN%Vj2*A8z|J", "p*afPN%Vj2*A8z|J");
      document0.isBlock();
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("Cq_R XI.y9cgW|[qY", "Cq_R XI.y9cgW|[qY");
      // Undeclared exception!
//      try { 
        document0.prependChild((Node) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Object must not be null
//         //
//         verifyException("org.jsoup.helper.Validate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("~r;b6>_O+", "~r;b6>_O+");
      Pattern pattern0 = Pattern.compile("~r;b6>_O+");
      document0.getElementsMatchingText(pattern0);
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      Document document0 = new Document("amp=12;1&gt=1q;3&lt=1o;2&quot=y;0&");
      // Undeclared exception!
//      try { 
        document0.is((Evaluator) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.jsoup.nodes.Element", e);
//      }
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      Document document0 = Parser.parse("aVp=11&gt=1q;3&lt=1o;2quo=;0&", "aVp=11&gt=1q;3&lt=1o;2quo=;0&");
      document0.select("u_i.A");
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      ParseSettings parseSettings0 = new ParseSettings(true, true);
      Tag tag0 = Tag.valueOf("html", parseSettings0);
      CDataNode cDataNode0 = new CDataNode("[e!2?t.mq:^!=e!2?t.mq:^]");
      Attributes attributes0 = cDataNode0.attributes();
      FormElement formElement0 = new FormElement(tag0, ".APdp)VHK<N&>v|", attributes0);
      formElement0.id();
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      Document document0 = Parser.parse("head", "head");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.prettyPrint(false);
      // Undeclared exception!
//      try { 
        document0.outerHtmlTail((Appendable) null, 6, document_OutputSettings1);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.jsoup.nodes.Element", e);
//      }
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("'", "'");
      document0.html();
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      Document document0 = Document.createShell("/-~");
      document0.title("truespeed");
      document0.html();
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("aVp=11&gm=1;3&l=1o;]quo=;0&", "aVp=11&gm=1;3&l=1o;]quo=;0&");
      PipedWriter pipedWriter0 = new PipedWriter();
      // Undeclared exception!
//      try { 
        document0.html(pipedWriter0);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // java.io.IOException: Pipe not connected
//         //
//         verifyException("org.jsoup.nodes.Node$OuterHtmlVisitor", e);
//      }
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment(",CEJ2SH", "Tag name must not be empty.");
      StringWriter stringWriter0 = new StringWriter();
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      document_OutputSettings0.prettyPrint(false);
      document0.outerHtmlHead(stringWriter0, (-2355), document_OutputSettings0);
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      Tag tag0 = Tag.valueOf("textarea");
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = new FormElement(tag0, "WskD'Z", attributes0);
      formElement0.val("#");
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      Document document0 = Document.createShell("/-~");
      document0.val();
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("Y`3Vf,R-CyB", "8o\"F`0_G!\"?>");
      document0.toggleClass("/-t");
      Element element0 = document0.toggleClass("");
      element0.hasClass("");
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      Document document0 = Document.createShell("aVp=11&gm=1;3&l=1o;]quo=;0&");
      document0.toggleClass("<html>\n <head></head>\n <body></body>\n</html>");
      document0.toggleClass("aVp=11&gm=1;3&l=1o;]quo=;0&");
      document0.hasClass("aVp=11&gm=1;3&l=1o;]quo=;0&");
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      Document document0 = Document.createShell("*?h 'kRk7");
      document0.toggleClass("<html>\n <head></head>\n <body></body>\n</html>");
      Element element0 = document0.toggleClass("org.jsoup.select.Evaluator$AttributeWithValueEnding");
      document0.toggleClass("*?h 'kRk7");
      element0.getElementsByClass("org.jsoup.select.Evaluator$AttributeWithValueEnding");
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment(";{_#1uc>o{EQ{\"J+z", ";{_#1uc>o{EQ{\"J+z");
      document0.toggleClass(";{_#1uc>o{EQ{\"J+z");
      Element element0 = document0.toggleClass("<html>\n <head></head>\n <body>\n  ;{_#1uc&gt;o{EQ{\"J+z\n </body>\n</html>");
      element0.hasClass("!s");
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      Document document0 = Document.createShell("*?h 'kRk7");
      document0.toggleClass("<html>\n <head></head>\n <body></body>\n</html>");
      Element element0 = document0.toggleClass("org.jsoup.select.Evaluator$AttributeWithValueEnding");
      element0.getElementsByClass("org.jsoup.select.Evaluator$AttributeWithValueEnding");
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("'", "'");
      document0.toggleClass("A~U8.[~;NRh<..iG");
      document0.getElementsByClass("A~U8.[~;NRh<..iG");
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      Document document0 = Parser.parse(";{_#1uc>o{EQ{\"J+z", ";{_#1uc>o{EQ{\"J+z");
      document0.toggleClass(";{_#1uc>o{EQ{\"J+z");
      document0.hasClass("avp=11&gt=1;36lt=1o;2quo=+0&");
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed(";{_#1uc>o{EQ{\"J+z", ";{_#1uc>o{EQ{\"J+z");
      document0.data();
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      Document document0 = Parser.parse("aVp=11&gm=1;3&l=1o;]quo=;0&", "aVp=11&gm=1;3&l=1o;]quo=;0&");
      document0.text("");
      document0.hasText();
  }

  @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      Document document0 = Parser.parse("aVp=11&gm=1;3&l=1o;]quo=;0&", "aVp=11&gm=1;3&l=1o;]quo=;0&");
      document0.hasText();
  }

  @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      DataNode dataNode0 = new DataNode("seamless");
      Element.preserveWhitespace(dataNode0);
  }

  @Test(timeout = 4000)
  public void test223()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("'", "'");
      XmlDeclaration xmlDeclaration0 = new XmlDeclaration("<html>\n <head></head>\n <body>\n  '\n </body>\n</html>", false);
      document0.appendChild(xmlDeclaration0);
      document0.ownText();
  }

  @Test(timeout = 4000)
  public void test224()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment(",CEJ2SH", "Tag name must not be empty.");
      document0.wholeText();
  }

  @Test(timeout = 4000)
  public void test225()  throws Throwable  {
      Document document0 = Document.createShell("replacementChar");
      document0.title("Z");
      document0.append("Z");
      document0.getElementsContainingText("Z");
  }

  @Test(timeout = 4000)
  public void test226()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment(",CEJ2SH", "Tag name must not be empty.");
      document0.append("A-[;FAozV7;Ww5k$*|");
      document0.getElementsContainingText("Tag name must not be empty.");
  }

  @Test(timeout = 4000)
  public void test227()  throws Throwable  {
      Document document0 = Parser.parse("*", "*");
      Document document1 = Parser.parseBodyFragment("I(f3", ":not");
      document1.appendChild(document0);
      document1.getElementsMatchingText(":not");
  }

  @Test(timeout = 4000)
  public void test228()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("'", "'");
      XmlDeclaration xmlDeclaration0 = new XmlDeclaration("<html>\n <head></head>\n <body>\n  '\n </body>\n</html>", false);
      document0.appendChild(xmlDeclaration0);
      document0.getElementsMatchingText("HU#nz>* C'gs*y,=j");
  }

  @Test(timeout = 4000)
  public void test229()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed(";_#1uc>o{EQ{\"Sz", ";_#1uc>o{EQ{\"Sz");
      Parser parser0 = Parser.xmlParser();
      Document document1 = parser0.parseInput(";_#1uc>o{EQ{\"Sz", ";_#1uc>o{EQ{\"Sz");
      document0.appendTo(document1);
      document1.html(";_#1uc>o{EQ{\"Sz");
      document0.previousElementSibling();
  }

  @Test(timeout = 4000)
  public void test230()  throws Throwable  {
      Document document0 = Document.createShell("*-NO-n{p");
      Element element0 = document0.head();
      element0.lastElementSibling();
  }

  @Test(timeout = 4000)
  public void test231()  throws Throwable  {
      Tag tag0 = Tag.valueOf("/-~");
      FormElement formElement0 = new FormElement(tag0, "inbody", (Attributes) null);
      Element element0 = formElement0.appendElement("inbody");
      element0.lastElementSibling();
  }

  @Test(timeout = 4000)
  public void test232()  throws Throwable  {
      Document document0 = Parser.parse("h~=\nY0sK{+O;S&*k:", "h~=\nY0sK{+O;S&*k:");
      Element element0 = document0.body();
      element0.firstElementSibling();
  }

  @Test(timeout = 4000)
  public void test233()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment(",CEJ2SH", "Tag name must not be empty.");
      Element element0 = document0.doClone(document0);
      element0.firstElementSibling();
  }

  @Test(timeout = 4000)
  public void test234()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment(",CEJ2SH", "Tag name must not be empty.");
      document0.appendChild(document0);
      document0.previousElementSiblings();
  }

  @Test(timeout = 4000)
  public void test235()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("aVp=11&gm=1;3&l=1o;]quo=;0&", "aVp=11&gm=1;3&l=1o;]quo=;0&");
      Element element0 = document0.appendTo(document0);
      Element element1 = document0.previousElementSibling();
      element1.doClone(element0);
  }

  @Test(timeout = 4000)
  public void test236()  throws Throwable  {
      Document document0 = Parser.parse(";{_#1uc>o{EQ{\"J+z", ";{_#1uc>o{EQ{\"J+z");
      document0.previousElementSibling();
  }

  @Test(timeout = 4000)
  public void test237()  throws Throwable  {
      Document document0 = Document.createShell("}EG/Z%DV");
      Element element0 = document0.head();
      element0.nextElementSibling();
  }

  @Test(timeout = 4000)
  public void test238()  throws Throwable  {
      Document document0 = new Document("amp=12;1&gt=1q;3&lt=1o;2&quot=y;0&");
      document0.nextElementSibling();
  }

  @Test(timeout = 4000)
  public void test239()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment(",CEJ2SH", "Tag name must not be empty.");
      Element element0 = document0.appendChild(document0);
      Elements elements0 = element0.nextElementSiblings();
      assertEquals("Tag name must not be empty.", element0.baseUri());
      assertTrue(elements0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test240()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed(";_#1uc>o{EQ{\"Sz", ";_#1uc>o{EQ{\"Sz");
      document0.siblingElements();
      assertEquals(";_#1uc>o{EQ{\"Sz", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test241()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment(",CEJ2SH", "Tag name must not be empty.");
      document0.appendChild(document0);
      document0.siblingElements();
      assertEquals(1, document0.siblingIndex());
  }

  @Test(timeout = 4000)
  public void test242()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment(",CEJ2SH", "Tag name must not be empty.");
      document0.addClass("J`c8^>");
      document0.cssSelector();
      assertEquals("Tag name must not be empty.", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test243()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("Tag name must not be empty.", "Tag name must not be empty.");
      Node[] nodeArray0 = new Node[7];
      // Undeclared exception!
//      try { 
        document0.insertChildren(8211, nodeArray0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Insert position out of bounds.
//         //
//         verifyException("org.jsoup.helper.Validate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test244()  throws Throwable  {
      Document document0 = new Document("}b`/ZV");
      Node[] nodeArray0 = new Node[0];
      Element element0 = document0.insertChildren(0, nodeArray0);
      assertEquals("}b`/ZV", element0.baseUri());
  }

  @Test(timeout = 4000)
  public void test245()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("L,", "L,");
      Elements elements0 = document0.getElementsByIndexGreaterThan(2517);
      // Undeclared exception!
//      try { 
        document0.insertChildren(2517, (Collection<? extends Node>) elements0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Insert position out of bounds.
//         //
//         verifyException("org.jsoup.helper.Validate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test246()  throws Throwable  {
      Document document0 = Document.createShell("aVp=11&gm=1;3&l=1o;]quo=;0&");
      Tag tag0 = Tag.valueOf("aVp=11&gm=1;3&l=1o;]quo=;0&");
      FormElement formElement0 = new FormElement(tag0, "#root", (Attributes) null);
      Elements elements0 = document0.getElementsByClass("d");
      // Undeclared exception!
//      try { 
        formElement0.insertChildren((-127), (Collection<? extends Node>) elements0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Insert position out of bounds.
//         //
//         verifyException("org.jsoup.helper.Validate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test247()  throws Throwable  {
      Document document0 = new Document("amp=12;1&gt=1q;3&lt=1o;2&quot=y;0&");
      Elements elements0 = document0.getElementsByIndexGreaterThan(0);
      Element element0 = document0.insertChildren(0, (Collection<? extends Node>) elements0);
      assertEquals(0, element0.childNodeSize());
      assertEquals("amp=12;1&gt=1q;3&lt=1o;2&quot=y;0&", element0.baseUri());
  }

  @Test(timeout = 4000)
  public void test248()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("children collection to be inserted must not be null.", "children collection to be inserted must not be null.");
      List<DataNode> list0 = document0.dataNodes();
      assertEquals(1, document0.childNodeSize());
      assertEquals("children collection to be inserted must not be null.", document0.baseUri());
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test249()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("br", "br");
      assertEquals(1, document0.childNodeSize());
      
      Document document1 = document0.normalise();
      List<Node> list0 = Parser.parseXmlFragment("org.jsoup.parser.XmlTreeBuilder", "br");
      document1.childNodes = list0;
      List<TextNode> list1 = document1.textNodes();
      assertEquals("br", document1.baseUri());
      assertFalse(list1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test250()  throws Throwable  {
      Document document0 = Document.createShell("/-~");
      List<TextNode> list0 = document0.textNodes();
      assertEquals(1, document0.childNodeSize());
      assertEquals("/-~", document0.baseUri());
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test251()  throws Throwable  {
      Document document0 = Parser.parse("xmp", "hO^l$IO1*@={b");
      // Undeclared exception!
//      try { 
        document0.selectFirst("=2oK;LG_.t4LgX5((");
//        fail("Expecting exception: IllegalStateException");
      
//      } catch(IllegalStateException e) {
//         //
//         // Could not parse query '=2oK;LG_.t4LgX5((': unexpected token at '=2oK;LG_.t4LgX5(('
//         //
//         verifyException("org.jsoup.select.QueryParser", e);
//      }
  }

  @Test(timeout = 4000)
  public void test252()  throws Throwable  {
      Tag tag0 = Tag.valueOf(")");
      FormElement formElement0 = new FormElement(tag0, "", (Attributes) null);
      Elements elements0 = formElement0.getAllElements();
      assertFalse(elements0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test253()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed(";{_#1uc>lQ{\"J8+z", ";{_#1uc>lQ{\"J8+z");
      Element element0 = document0.removeClass("textarea");
      assertEquals(";{_#1uc>lQ{\"J8+z", element0.baseUri());
  }

  @Test(timeout = 4000)
  public void test254()  throws Throwable  {
      Document document0 = Document.createShell("*-NO-n{p");
      // Undeclared exception!
//      try { 
        document0.before(".");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Object must not be null
//         //
//         verifyException("org.jsoup.helper.Validate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test255()  throws Throwable  {
      Tag tag0 = Tag.valueOf("/-~");
      FormElement formElement0 = new FormElement(tag0, "/-~", (Attributes) null);
      // Undeclared exception!
//      try { 
        formElement0.getElementsByAttribute("");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // String must not be empty
//         //
//         verifyException("org.jsoup.helper.Validate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test256()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment(",CEJ2SH", "Tag name must not be empty.");
      // Undeclared exception!
//      try { 
        document0.getElementsByAttributeValueNot((String) null, (String) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // String must not be empty
//         //
//         verifyException("org.jsoup.helper.Validate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test257()  throws Throwable  {
      Document document0 = Parser.parse("aVp=11&gm=1;3&l=1o;]quo=;0&", "aVp=11&gm=1;3&l=1o;]quo=;0&");
      Document document1 = (Document)document0.appendTo(document0);
      Element element0 = document1.body();
      String string0 = element0.text();
      assertEquals("aVp=11&gm=1;3&l=1o;]quo=;0&", string0);
      assertEquals("aVp=11&gm=1;3&l=1o;]quo=;0&", element0.baseUri());
  }

  @Test(timeout = 4000)
  public void test258()  throws Throwable  {
      Tag tag0 = Tag.valueOf("/-~");
      FormElement formElement0 = new FormElement(tag0, "/-~", (Attributes) null);
      formElement0.doSetBaseUri("/-~");
      assertEquals("/-~", formElement0.baseUri());
  }

  @Test(timeout = 4000)
  public void test259()  throws Throwable  {
      Document document0 = Parser.parse("?eL,5/noK:GA(", "rueped");
      // Undeclared exception!
//      try { 
        document0.after((Node) document0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Object must not be null
//         //
//         verifyException("org.jsoup.helper.Validate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test260()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("", "}EG/Z%DV");
      document0.getElementsByAttributeValueContaining("}EG/Z%DV", "}EG/Z%DV");
      assertEquals("}EG/Z%DV", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test261()  throws Throwable  {
      Document document0 = Parser.parse("", " N.1");
      Pattern pattern0 = Pattern.compile("j2n-6", 1346);
      document0.getElementsByAttributeValueMatching((String) null, pattern0);
      assertEquals(" N.1", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test262()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("cjI't$jm", "value");
      document0.getElementsByAttributeValueEnding("Pattern syntax error: ", "cjI't$jm");
      Element element0 = document0.doClone(document0);
      assertEquals(1, document0.childNodeSize());
      assertTrue(element0.hasParent());
      assertEquals("value", element0.baseUri());
  }

  @Test(timeout = 4000)
  public void test263()  throws Throwable  {
      Document document0 = Parser.parse("aVp=11&gm=1;3&l=1o;]quo=;0&", "aVp=11&gm=1;3&l=1o;]quo=;0&");
      document0.is("value");
      assertEquals("aVp=11&gm=1;3&l=1o;]quo=;0&", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test264()  throws Throwable  {
      Document document0 = Document.createShell("G&RcOop/mC.`");
      // Undeclared exception!
//      try { 
        document0.getElementsByAttributeValueMatching("G&RcOop/mC.`", "A\u0002HPC6GkQ*b{,[");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Pattern syntax error: A\u0002HPC6GkQ*b{,[
//         //
//         verifyException("org.jsoup.nodes.Element", e);
//      }
  }

  @Test(timeout = 4000)
  public void test265()  throws Throwable  {
      Document document0 = Parser.parse("aVp=11&gt=1q;3&lt=1o;2quo=;0&", "aVp=11&gt=1q;3&lt=1o;2quo=;0&");
      // Undeclared exception!
//      try { 
        document0.wrap("Xq");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.jsoup.nodes.Node", e);
//      }
  }

  @Test(timeout = 4000)
  public void test266()  throws Throwable  {
      Tag tag0 = Tag.valueOf("Bu1O%c!");
      FormElement formElement0 = new FormElement(tag0, "9Q)=/fu", (Attributes) null);
      Elements elements0 = formElement0.getElementsMatchingOwnText("e,k]}:oQP Ooqpb");
      assertEquals("9Q)=/fu", formElement0.baseUri());
      assertTrue(elements0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test267()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment(",CEJ2SH", "Tag name must not be empty.");
      Elements elements0 = document0.getElementsByIndexEquals(1114111);
      assertEquals("Tag name must not be empty.", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals(0, elements0.size());
  }

  @Test(timeout = 4000)
  public void test268()  throws Throwable  {
      Document document0 = new Document("}b`/ZV");
      // Undeclared exception!
//      try { 
        document0.getElementsByAttributeStarting((String) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // String must not be empty
//         //
//         verifyException("org.jsoup.helper.Validate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test269()  throws Throwable  {
      Document document0 = Parser.parse("TagOpen", "html");
      Elements elements0 = document0.getElementsByIndexLessThan(46);
      assertEquals(3, elements0.size());
      assertEquals("html", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test270()  throws Throwable  {
      Tag tag0 = Tag.valueOf("/-~");
      FormElement formElement0 = new FormElement(tag0, "inbody", (Attributes) null);
      // Undeclared exception!
//      try { 
        formElement0.after("/-~");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Object must not be null
//         //
//         verifyException("org.jsoup.helper.Validate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test271()  throws Throwable  {
      Document document0 = Parser.parse("[\"qX", "[\"qX");
      Pattern pattern0 = Pattern.compile("-~", 990);
      document0.getElementsMatchingOwnText(pattern0);
      assertEquals("[\"qX", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test272()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed(";_#1uc>o{EQ{\"Sz", ";_#1uc>o{EQ{\"Sz");
      Element element0 = document0.head();
      String string0 = element0.cssSelector();
      assertEquals(";_#1uc>o{EQ{\"Sz", element0.baseUri());
      assertEquals("html > head", string0);
  }

  @Test(timeout = 4000)
  public void test273()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment(":nth-child(%d)", ":nth-child(%d)");
      document0.getElementsByAttributeValueStarting(":nth-child(%d)", ":nth-child(%d)");
      assertEquals(1, document0.childNodeSize());
      assertEquals(":nth-child(%d)", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test274()  throws Throwable  {
      Document document0 = Document.createShell("amp=12;1&gt=1q;3&lt=1o;2&quot=y;0&");
      document0.getElementsByAttributeValue("amp=12;1&gt=1q;3&lt=1o;2&quot=y;0&", "amp=12;1&gt=1q;3&lt=1o;2&quot=y;0&");
      assertEquals(1, document0.childNodeSize());
      assertEquals("amp=12;1&gt=1q;3&lt=1o;2&quot=y;0&", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test275()  throws Throwable  {
      Document document0 = Parser.parse("aVp=11&gm=1;3&l=1o;]quo=;0&", "aVp=11&gm=1;3&l=1o;]quo=;0&");
      // Undeclared exception!
//      try { 
        document0.attr((String) null, true);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Object must not be null
//         //
//         verifyException("org.jsoup.helper.Validate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test276()  throws Throwable  {
      Tag tag0 = Tag.valueOf("/-~");
      FormElement formElement0 = new FormElement(tag0, "inbody", (Attributes) null);
      formElement0.wholeText();
      assertEquals("inbody", formElement0.baseUri());
  }

  @Test(timeout = 4000)
  public void test277()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed(";_#1uc>o{EQ{\"Sz", ";_#1uc>o{EQ{\"Sz");
      // Undeclared exception!
//      try { 
        document0.before((Node) document0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Object must not be null
//         //
//         verifyException("org.jsoup.helper.Validate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test278()  throws Throwable  {
      Document document0 = Parser.parse("[\"qX", "[\"qX");
      Element element0 = document0.addClass("[\"qX");
      Set<String> set0 = element0.classNames();
      assertEquals("[\"qX", element0.baseUri());
      assertFalse(set0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test279()  throws Throwable  {
      Element element0 = new Element("i)xvGs,e");
      Elements elements0 = element0.getElementsContainingOwnText("i)xvGs,e");
      assertTrue(elements0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test280()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("'", "'");
      document0.dataset();
      assertEquals("'", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test281()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("cjI't$jm", "value");
      Element element0 = document0.tagName("value");
      assertEquals(1, element0.childNodeSize());
      assertEquals("value", element0.baseUri());
  }

  @Test(timeout = 4000)
  public void test282()  throws Throwable  {
      Document document0 = Parser.parse("TagOpen", "html");
      // Undeclared exception!
//      try { 
        document0.child(46);
//        fail("Expecting exception: IndexOutOfBoundsException");
      
//      } catch(IndexOutOfBoundsException e) {
//         //
//         // Index: 46, Size: 1
//         //
//         verifyException("java.util.ArrayList", e);
//      }
  }

  @Test(timeout = 4000)
  public void test283()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment(",CEJ2SH", "Tag name must not be empty.");
      document0.previousElementSiblings();
      assertEquals("Tag name must not be empty.", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test284()  throws Throwable  {
      Document document0 = new Document("}b`/ZV");
      document0.normalise();
      Node[] nodeArray0 = new Node[1];
      nodeArray0[0] = (Node) document0;
      document0.insertChildren(1, nodeArray0);
      assertEquals(2, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test285()  throws Throwable  {
      Document document0 = Parser.parse("aVp=11&gm=1;3&l=1o;]quo=;0&", "aVp=11&gm=1;3&l=1o;]quo=;0&");
      Elements elements0 = document0.getElementsMatchingText("aVp=11&gm=1;3&l=1o;]quo=;0&");
      assertEquals(3, elements0.size());
      assertEquals("aVp=11&gm=1;3&l=1o;]quo=;0&", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test286()  throws Throwable  {
      Document document0 = Document.createShell("org.jsoup.nodes.Element$NodeList");
      document0.classNames();
      assertEquals(1, document0.childNodeSize());
      assertEquals("org.jsoup.nodes.Element$NodeList", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test287()  throws Throwable  {
      Document document0 = Parser.parse("", " N.1");
      Elements elements0 = document0.children();
      assertEquals(" N.1", document0.baseUri());
      assertEquals(1, elements0.size());
  }

  @Test(timeout = 4000)
  public void test288()  throws Throwable  {
      Document document0 = new Document("*-NO-n{p");
      Element element0 = document0.getElementById("*-NO-n{p");
      assertEquals("*-NO-n{p", document0.baseUri());
      assertNull(element0);
  }
}
