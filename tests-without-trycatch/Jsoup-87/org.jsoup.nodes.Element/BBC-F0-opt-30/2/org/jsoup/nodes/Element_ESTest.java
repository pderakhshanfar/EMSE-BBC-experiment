/*
 * This file was automatically generated by EvoSuite
 * Wed Oct 13 23:06:28 GMT 2021
 */

package org.jsoup.nodes;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.CharArrayWriter;
import java.io.PipedWriter;
import java.io.Reader;
import java.io.StringReader;
import java.io.StringWriter;
import java.nio.CharBuffer;
import java.nio.ReadOnlyBufferException;
import java.nio.charset.Charset;
import java.util.Collection;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.Set;
import java.util.regex.Pattern;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockFileWriter;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.jsoup.nodes.Attribute;
import org.jsoup.nodes.Attributes;
import org.jsoup.nodes.CDataNode;
import org.jsoup.nodes.Comment;
import org.jsoup.nodes.DataNode;
import org.jsoup.nodes.Document;
import org.jsoup.nodes.DocumentType;
import org.jsoup.nodes.Element;
import org.jsoup.nodes.FormElement;
import org.jsoup.nodes.Node;
import org.jsoup.nodes.PseudoTextElement;
import org.jsoup.nodes.TextNode;
import org.jsoup.parser.ParseSettings;
import org.jsoup.parser.Parser;
import org.jsoup.parser.Tag;
import org.jsoup.select.Elements;
import org.jsoup.select.Evaluator;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Element_ESTest extends Element_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("valu(e", "valu(e");
      Element element0 = document0.addClass("valu(e");
      element0.toggleClass("valu(e");
      document0.hasClass("tl6{1],%p");
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Document document0 = Parser.parse("6ZY}Tg%s<Ww", "6ZY}Tg%s<Ww");
      LinkedList<DocumentType> linkedList0 = new LinkedList<DocumentType>();
      document0.insertChildren(0, (Collection<? extends Node>) linkedList0);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("", "");
      StringBuilder stringBuilder0 = new StringBuilder((CharSequence) "e:84T_~)-");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      document0.outerHtmlTail(stringBuilder0, 2535, document_OutputSettings0);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Document document0 = Document.createShell("");
      StringBuffer stringBuffer0 = new StringBuffer();
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      document0.outerHtmlHead(stringBuffer0, 243, document_OutputSettings0);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Document document0 = Parser.parse("checked", "checked");
      document0.nodelistChanged();
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      ParseSettings parseSettings0 = ParseSettings.htmlDefault;
      Tag tag0 = Tag.valueOf("r2RGseii", parseSettings0);
      Element element0 = new Element(tag0, "er/W'9}wO!^");
      element0.ensureChildNodes();
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Document document0 = new Document(":contains(");
      Element element0 = document0.appendElement("~ ");
      element0.wrap("8n^N-Qd;`@Vk!");
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("t<xtarea", "t<xtarea");
      Element element0 = document0.head();
      element0.wrap("t<xtarea");
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Element element0 = new Element("TI");
      element0.wholeText();
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("_cF {le", "_cF {le");
      document0.setSiblingIndex((-519));
      document0.val("RahUh6(S}L");
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("textarea", "textarea");
      Element element0 = document0.body();
      element0.val("org.jsoup.UncheckedIOException");
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Tag tag0 = Tag.valueOf("w-QRTF5-");
      CDataNode cDataNode0 = new CDataNode("AxZ");
      Attributes attributes0 = cDataNode0.attributes();
      Element element0 = new Element(tag0, "[{1(-IO&?\"3e|jh?", attributes0);
      Element element1 = element0.val("I");
      element1.val();
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Document document0 = Parser.parse("_c`J{;", "_c`J{;");
      document0.siblingIndex = (-17);
      document0.toggleClass("_c`J{;");
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Document document0 = Document.createShell("r}+:!N?LY~N]p!m;tm[");
      document0.appendChild(document0);
      document0.toggleClass("--!");
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("S", "2W5J2;J Izc&!H~");
      document0.empty();
      document0.toggleClass("S");
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Document document0 = Document.createShell("r}+:!N?LY~N]p!m;tm[");
      document0.appendChild(document0);
      Element element0 = document0.firstElementSibling();
      element0.text("org.jsoup.parser.ParseSettings");
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Document document0 = Document.createShell("r}+:!N?LY~N]p!m;tm[");
      document0.appendChild(document0);
      document0.text("org.jsoup.parser.ParseSettings");
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Document document0 = Parser.parse("", "");
      document0.text();
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("06E8<+OW3f", "06E8<+OW3f");
      document0.tagName("title");
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("06E8<+OW3f", "06E8<+OW3f");
      Document document1 = Parser.parse("06E8<+OW3f", "class");
      document0.appendTo(document1);
      document0.tagName("E`ez{ T)rH");
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Element element0 = new Element("l32?J");
      element0.tagName(">8QUW");
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("#F+#GD[C<ttj|e", "^j@X}{sB2");
      document0.tagName();
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Document document0 = Parser.parse("_cJ;", "area");
      Element element0 = document0.prependElement("area");
      element0.tag();
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("06E8<+OW3f", "06E8<+OW3f");
      document0.appendChild(document0);
      Element element0 = document0.previousElementSibling();
      element0.tag();
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Document document0 = Parser.parse("_cJ;", "area");
      document0.tag();
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("[{1(-IO&?\"3e|jh?", "[{1(-IO&?\"3e|jh?");
      Element element0 = document0.body();
      element0.shallowClone();
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("06E8<+OW3f", "06E8<+OW3f");
      document0.prependText("");
      document0.selectFirst("html");
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("06E8<+OW3f", "06E8<+OW3f");
      document0.selectFirst("html");
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Document document0 = Parser.parse("_cJ;", "area");
      document0.prependElement("track");
      document0.select("track");
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("06E8<+OW3f", "06E8<+OW3f");
      Element element0 = document0.appendTo(document0);
      element0.removeClass("-1+bD]J#ku");
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("t<xtarea", "t<xtarea");
      Element element0 = document0.head();
      element0.removeClass("t<xtarea");
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Document document0 = Document.createShell("gI");
      Element element0 = document0.body();
      element0.previousElementSibling();
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      ParseSettings parseSettings0 = new ParseSettings(true, true);
      Tag tag0 = Tag.valueOf("textarea", parseSettings0);
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = new FormElement(tag0, "textarea", attributes0);
      Element.preserveWhitespace(formElement0);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Document document0 = Document.createShell("r}+:!N?LY~N]p!m;tm[");
      Element element0 = document0.appendChild(document0);
      Element element1 = element0.firstElementSibling();
      element1.prependText("r}+:!N?LY~N]p!m;tm[");
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Document document0 = Document.createShell("r}+:!N?LY~N]p!m;tm[");
      document0.appendChild(document0);
      document0.prependText("r}+:!N?LY~N]p!m;tm[");
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Document document0 = Parser.parse("figcaption", "figcaption");
      document0.prependElement("figcaption");
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Document document0 = Parser.parse("}S", "}S");
      Element element0 = document0.appendElement("}S");
      element0.prependChild(document0);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Document document0 = Parser.parse("textarea", "textarea");
      Element element0 = document0.head();
      element0.prependChild(document0);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      CDataNode cDataNode0 = new CDataNode("8H1(k-IG&?\"3q$e|j<w");
      Attributes attributes0 = cDataNode0.attributes();
      ParseSettings parseSettings0 = ParseSettings.htmlDefault;
      Tag tag0 = Tag.valueOf("8H1(k-IG&?\"3q$e|j<w", parseSettings0);
      FormElement formElement0 = new FormElement(tag0, "8H1(k-IG&?\"3q$e|j<w", attributes0);
      formElement0.prependChild(cDataNode0);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment(" />", "s");
      Element element0 = document0.head();
      element0.prepend("s");
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Document document0 = Parser.parse("Cpb,]MklBh[8*FU<", "</");
      Document document1 = Parser.parseBodyFragmentRelaxed("%Jd )f?,E;yk{h0", "</");
      document0.appendChild(document1);
      document1.prepend("%Jd )f?,E;yk{h0");
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Tag tag0 = Tag.valueOf("S+| s:TC0");
      Element element0 = new Element(tag0, "");
      element0.prepend("");
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Document document0 = Parser.parse("Cpb,]MklBh[8*FU<", "</");
      document0.parents();
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Document document0 = Parser.parse("[{1(-IO&?\"3e|jh?", "[{1(-IO&?\"3e|jh?");
      Element element0 = document0.body();
      element0.parents();
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Document document0 = Parser.parse("#root", "#root");
      document0.siblingIndex = (-2217);
      Element element0 = document0.prependElement("#root");
      element0.parent();
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Document document0 = Document.createShell("K(r:82mv");
      Element element0 = document0.head();
      element0.parent();
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Document document0 = Document.createShell("h'-5{z^@&kf^.kg7k");
      document0.appendChild(document0);
      document0.empty();
      document0.parent();
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("06E8<+OW3f", "06E8<+OW3f");
      document0.append("4td0=<-L2;-]l}Iq:$");
      document0.ownText();
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Tag tag0 = Tag.valueOf("z0wX]6A=A3B");
      Element element0 = new Element(tag0, "*T60!q+QI'y0%Qer7~J");
      element0.nodeName();
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Document document0 = Document.createShell("r}+:!N?LY~N]p!m;tm[");
      Element element0 = document0.appendChild(document0);
      element0.lastElementSibling();
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("r}+:!N?LY~N]p!m;tm[", "r}+:!N?LY~N]p!m;tm[");
      document0.appendChild(document0);
      Element element0 = document0.firstElementSibling();
      element0.isBlock();
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("06E8<+OW3f", "06E8<+OW3f");
      Evaluator.IsNthChild evaluator_IsNthChild0 = new Evaluator.IsNthChild(0, 0);
      document0.is((Evaluator) evaluator_IsNthChild0);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Document document0 = Parser.parse("_cJ;", "area");
      Element element0 = document0.prependElement("track");
      element0.is("track");
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("06E8<+OW3f", "06E8<+OW3f");
      document0.appendChild(document0);
      Node[] nodeArray0 = new Node[0];
      document0.insertChildren(1, nodeArray0);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Document document0 = Parser.parse("_c`J{;", "_c`J{;");
      document0.parentNode = (Node) document0;
      LinkedList<Comment> linkedList0 = new LinkedList<Comment>();
      document0.insertChildren(1, (Collection<? extends Node>) linkedList0);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      ParseSettings parseSettings0 = ParseSettings.htmlDefault;
      Tag tag0 = Tag.valueOf("=extarea", parseSettings0);
      FormElement formElement0 = new FormElement(tag0, "=8tM0;[cE.^eq69", attributes0);
      LinkedList<FormElement> linkedList0 = new LinkedList<FormElement>();
      formElement0.insertChildren((-1), (Collection<? extends Node>) linkedList0);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Document document0 = Parser.parse("B#'", "head");
      Element element0 = document0.appendElement("'Be9sM");
      element0.html(": ");
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Document document0 = Document.createShell("");
      StringWriter stringWriter0 = new StringWriter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0, true);
      document0.html(mockPrintWriter0);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("S", "org.jsoup.select.CombiningEvaluator$And");
      document0.html();
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Parser parser0 = Parser.xmlParser();
      Document document0 = parser0.parseInput("", "Ww+E");
      document0.html();
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("limitedQuirks", "hW=7Bh [)G1O_?S y");
      document0.getElementsByAttributeValueContaining("limitedQuirks", "limitedQuirks");
      document0.hasAttributes();
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Document document0 = new Document(";Pj\"rRjLFCR(O3?jv");
      document0.hasAttributes();
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      ParseSettings parseSettings0 = new ParseSettings(false, false);
      Tag tag0 = Tag.valueOf("head", parseSettings0);
      Element element0 = new Element(tag0, "head");
      Pattern pattern0 = Pattern.compile("");
      element0.getElementsMatchingText(pattern0);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Document document0 = Document.createShell("!s2LC==Y~KhlS*{Q}2F");
      document0.getElementsMatchingText("1g5z#;\"@Yl");
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("limitedQuirks", "hW=7Bh [)G1O_?S y");
      document0.text("hW=7Bh [)G1O_?S y");
      Pattern pattern0 = Pattern.compile("limitedQuirks", 1);
      document0.getElementsMatchingOwnText(pattern0);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Document document0 = Document.createShell("!s2LC==Y~KhlS*{Q}2F");
      document0.getElementsMatchingOwnText(",G1h!KF#r*xVRf");
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Parser parser0 = Parser.xmlParser();
      Document document0 = parser0.parseInput("", "Ww+E");
      document0.getElementsMatchingOwnText("");
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("limitedQuirks", "wpx");
      document0.getElementsContainingOwnText("");
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Parser parser0 = Parser.xmlParser();
      Document document0 = parser0.parseInput("21tmxb", "8klPs6f[8G\"G{");
      document0.getElementsByTag("7eRw(k]w4nS`d0 s[5");
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Document document0 = Parser.parse("_cJ;", "area");
      document0.prependElement("area");
      document0.getElementsByTag("area");
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      ParseSettings parseSettings0 = ParseSettings.htmlDefault;
      Tag tag0 = Tag.valueOf("r2RGseii", parseSettings0);
      Element element0 = new Element(tag0, "er/W'9}wO!^");
      element0.getElementsByIndexLessThan(66);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("06E8<+OW3f", "06E8<+OW3f");
      document0.getElementsByIndexGreaterThan((-875));
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      ParseSettings parseSettings0 = ParseSettings.htmlDefault;
      Tag tag0 = Tag.valueOf("r2RGseii", parseSettings0);
      Element element0 = new Element(tag0, "er/W'9}wO!^");
      element0.getElementsByIndexEquals(66);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      CDataNode cDataNode0 = new CDataNode("8H1(k-IG&?\"3q$e|j<w");
      Attributes attributes0 = cDataNode0.attributes();
      Attributes attributes1 = attributes0.put("8H1(k-IG&?\"3q$e|j<w", "8H1(k-IG&?\"3q$e|j<w");
      ParseSettings parseSettings0 = ParseSettings.htmlDefault;
      Tag tag0 = Tag.valueOf("8H1(k-IG&?\"3q$e|j<w", parseSettings0);
      FormElement formElement0 = new FormElement(tag0, "8H1(k-IG&?\"3q$e|j<w", attributes1);
      formElement0.getElementsByAttributeValueNot("8H1(k-IG&?\"3q$e|j<w", "8H1(k-IG&?\"3q$e|j<w");
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Document document0 = Parser.parse("Cpb,]MklBh[8*FU<", "</");
      document0.getElementsByAttributeValueNot("%Jd )f?,E;yk{h0", "%Jd )f?,E;yk{h0");
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      ParseSettings parseSettings0 = ParseSettings.htmlDefault;
      Tag tag0 = Tag.valueOf("w-QRTF5-", parseSettings0);
      Attributes attributes0 = new Attributes();
      Attribute attribute0 = new Attribute("w-QRTF5-", "w-QRTF5-", attributes0);
      Attributes attributes1 = attributes0.put(attribute0);
      FormElement formElement0 = new FormElement(tag0, "w-QRTF5-", attributes1);
      Pattern pattern0 = Pattern.compile("w-QRTF5-");
      formElement0.getElementsByAttributeValueMatching("w-QRTF5-", pattern0);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Element element0 = new Element("TI");
      element0.getElementsByAttributeValueMatching((String) null, "");
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      ParseSettings parseSettings0 = ParseSettings.htmlDefault;
      Tag tag0 = Tag.valueOf("w-QRTF5-", parseSettings0);
      Attributes attributes0 = new Attributes();
      Attribute attribute0 = Attribute.createFromEncoded("v]K/3C", "org.jsoup.nodes.element$2");
      Attributes attributes1 = attributes0.put(attribute0);
      FormElement formElement0 = new FormElement(tag0, "w-QRTF5-", attributes1);
      formElement0.getElementsByAttributeValueEnding("v]K/3C", "org.jsoup.nodes.element$2");
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      CDataNode cDataNode0 = new CDataNode("06E8<+OW3f");
      Attributes attributes0 = cDataNode0.attributes();
      Attribute attribute0 = Attribute.createFromEncoded("Kun3Jx`J", "Kun3Jx`J");
      Attributes attributes1 = attributes0.put(attribute0);
      ParseSettings parseSettings0 = ParseSettings.htmlDefault;
      Tag tag0 = Tag.valueOf("Kun3Jx`J", parseSettings0);
      FormElement formElement0 = new FormElement(tag0, "G?Af8fr`1q)q'/KjtA", attributes1);
      formElement0.getElementsByAttributeStarting("Kun3Jx`J");
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("compact", "compact");
      document0.getElementsByAttribute("org.jsoup.parser.TokeniserState");
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      CDataNode cDataNode0 = new CDataNode("8H1(k-IG&?\"3q$e|j<w");
      Attributes attributes0 = cDataNode0.attributes();
      Attributes attributes1 = attributes0.put("8H1(k-IG&?\"3q$e|j<w", "8H1(k-IG&?\"3q$e|j<w");
      ParseSettings parseSettings0 = ParseSettings.htmlDefault;
      Tag tag0 = Tag.valueOf("8H1(k-IG&?\"3q$e|j<w", parseSettings0);
      FormElement formElement0 = new FormElement(tag0, "8H1(k-IG&?\"3q$e|j<w", attributes1);
      formElement0.getElementsByAttribute("8H1(k-IG&?\"3q$e|j<w");
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("textarea", "textarea");
      Element element0 = document0.body();
      Node[] nodeArray0 = new Node[8];
      nodeArray0[0] = (Node) element0;
      nodeArray0[1] = (Node) document0;
      nodeArray0[2] = (Node) element0;
      nodeArray0[3] = (Node) element0;
      nodeArray0[4] = (Node) element0;
      nodeArray0[5] = (Node) element0;
      nodeArray0[6] = (Node) element0;
      nodeArray0[7] = (Node) document0;
      element0.addChildren(nodeArray0);
      document0.firstElementSibling();
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Document document0 = Parser.parse("_cJ;", "area");
      Element element0 = document0.prependElement("area");
      element0.firstElementSibling();
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Document document0 = Document.createShell("h'-5{z^@&zkf^.kg7k");
      Element element0 = document0.appendChild(document0);
      document0.doClone(element0);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Document document0 = Document.createShell("PDe2#9>'MOc8CnEy\"");
      document0.doClone((Node) null);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("pC,c!~k?oJ7Fwg2?", ": ");
      Element element0 = document0.head();
      element0.doClone(document0);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Document document0 = Document.createShell("textarea");
      Element element0 = document0.body();
      element0.clone();
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment(":DDN9fwB", ":DDN9fwB");
      document0.appendChild(document0);
      Set<String> set0 = document0.classNames();
      document0.classNames(set0);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment(":DDN9fwB", ":DDN9fwB");
      Element element0 = document0.head();
      Set<String> set0 = element0.classNames();
      element0.classNames(set0);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("06E8<+OW3f", "06E8<+OW3f");
      Element element0 = document0.addClass("06E8<+OW3f");
      element0.classNames();
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("[{1(-IO&?\"3e|jh?", "[{1(-IO&?\"3e|jh?");
      document0.addClass("[{1(-IO&?\"3e|jh?");
      document0.className();
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("allowfullscreen", "V s@c>.-i`hdUS>");
      Element element0 = document0.head();
      element0.children();
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("org.jsoup.parser.ParseErrorList", "N#4ZlpC%hP\"");
      Element element0 = document0.createElement("org.jsoup.parser.ParseErrorList");
      element0.childNodeSize();
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("06E8<+OW3f", "06E8<+OW3f");
      document0.childNodeSize();
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("[{1(-IO&?\"3e|jh?", "[{1(-IO&?\"3e|jh?");
      Element element0 = document0.body();
      Element element1 = element0.empty();
      element1.before((Node) document0);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Document document0 = Parser.parse("_c`J{;", "area");
      Element element0 = document0.prependElement("area");
      element0.before("JgFTL|=;");
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Document document0 = Parser.parse("Could not parse nth-index '%s': unexpected format", "Could not parse nth-index '%s': unexpected format");
      Element element0 = document0.head();
      element0.before("org.jsoup.nodes.Element$1");
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("OjQ[ #0^c(^c*nbw", "tSGg1kAN`V[~:p+yn");
      Element element0 = document0.body();
      element0.before("/'O^!q)]");
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("S", "org.jsoup.select.CombiningEvaluator$And");
      document0.baseUri();
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Element element0 = new Element(">~#P-[GYZP");
      element0.baseUri();
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("S", "2W5J2;J Izc&!H~");
      Element element0 = document0.toggleClass("S");
      element0.attributes();
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Document document0 = Parser.parse("06E8<+OW3f", "06E8<+OW3f");
      Element element0 = document0.body();
      element0.attr("", true);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      ParseSettings parseSettings0 = ParseSettings.htmlDefault;
      Tag tag0 = Tag.valueOf("w-QRTF5-", parseSettings0);
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = new FormElement(tag0, "w-QRTF5-", attributes0);
      formElement0.attr(">i2(3Mv(P|YFm*pm=z", true);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Document document0 = new Document("2c.]~@BY?N.g/(m&");
      document0.siblingIndex = (-1093552557);
      document0.attr("", "0");
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Document document0 = Parser.parse(" T<4j={]6.(", "");
      Element element0 = document0.body();
      element0.attr("", "");
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      Document document0 = Parser.parse("_c`J{;", "aOea");
      Element element0 = document0.createElement("tr");
      Element element1 = element0.appendTo(document0);
      element1.lastElementSibling();
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      Document document0 = new Document("2c.]~@BY?N.g/(m&");
      document0.siblingIndex = (-1093552557);
      document0.appendText("\"b~vhm)");
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      ParseSettings parseSettings0 = new ParseSettings(true, false);
      Tag tag0 = Tag.valueOf("figcaption", parseSettings0);
      Element element0 = new Element(tag0, "#root");
      element0.appendText("`.1j\"z54>2I>8");
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      Document document0 = Parser.parse("", "");
      document0.appendChild(document0);
      document0.appendText("head");
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("06E8<+OW3f", "06E8<+OW3f");
      document0.appendElement("html");
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      Document document0 = Parser.parse("Could not parse nth-index '%s': unexpected format", "Could not parse nth-index '%s': unexpected format");
      Element element0 = document0.head();
      element0.appendChild(document0);
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("#F+#GD[C<ttj|e", "^j@X}{sB2");
      Document document1 = document0.clone();
      document0.appendTo(document1);
      document0.append("^j@X}{sB2");
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("", "Z/*mngWe'8OwJjl,{");
      Element element0 = document0.head();
      element0.append(" />");
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      CDataNode cDataNode0 = new CDataNode("06E8<+OW3f");
      Attributes attributes0 = cDataNode0.attributes();
      ParseSettings parseSettings0 = ParseSettings.htmlDefault;
      Tag tag0 = Tag.valueOf("Kun3Jx`J", parseSettings0);
      FormElement formElement0 = new FormElement(tag0, "G?Af8fr`1q)q'/KjtA", attributes0);
      formElement0.append("");
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      Document document0 = Parser.parse("_cJ;", "area");
      Element element0 = document0.prependElement("track");
      element0.after((Node) document0);
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      Document document0 = Document.createShell(":contains(");
      Element element0 = document0.appendElement("~ ");
      element0.after((Node) document0);
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("textarea", "textarea");
      Element element0 = document0.body();
      element0.after((Node) document0);
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      Document document0 = new Document("area");
      Element element0 = document0.prependElement("area");
      element0.after("9G7.G/k0Zq *Y}RU");
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("06E8<+OW3f", "06E8<+OW3f");
      Document document1 = Parser.parse("06E8<+OW3f", "class");
      document0.appendTo(document1);
      document0.after("06E8<+OW3f");
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("_c`J;", "_c`J;");
      document0.siblingIndex = (-755);
      document0.addClass("_c`J;");
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      Document document0 = Parser.parse("_c`J{;", "_c`J{;");
      Element element0 = document0.body();
      element0.addClass("o(");
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      Element element0 = new Element("TI");
      element0.addClass("TZA'VT5;;4)@J 915");
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("06E8<+OW3f", "06E8<+OW3f");
      document0.appendChild(document0);
      // Undeclared exception!
      document0.wrap("[a-zA-Z_:][-a-zA-Z0-9_:.]*");
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      Document document0 = Parser.parse("", "");
      // Undeclared exception!
//      try { 
        document0.wrap("");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // String must not be empty
//         //
//         verifyException("org.jsoup.helper.Validate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("limitedQuirks", "hW=7Bh [)G1O_?S y");
      Node[] nodeArray0 = new Node[7];
      nodeArray0[0] = (Node) document0;
      nodeArray0[1] = (Node) document0;
      nodeArray0[2] = (Node) document0;
      nodeArray0[3] = (Node) document0;
      nodeArray0[4] = (Node) document0;
      nodeArray0[5] = (Node) document0;
      nodeArray0[6] = (Node) document0;
      document0.addChildren(nodeArray0);
      // Undeclared exception!
      document0.val("hW=7Bh [)G1O_?S y");
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      Document document0 = Parser.parse("sCp!]8IIIrIUD", "sCp!]8IIIrIUD");
      // Undeclared exception!
//      try { 
        document0.toggleClass((String) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Object must not be null
//         //
//         verifyException("org.jsoup.helper.Validate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      Document document0 = new Document("area");
      // Undeclared exception!
//      try { 
        document0.text("_c`J{;");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.jsoup.nodes.Document", e);
//      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      Document document0 = Parser.parse("sCp!]8IIIrIUD", "sCp!]8IIIrIUD");
      // Undeclared exception!
//      try { 
        document0.text((String) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Object must not be null
//         //
//         verifyException("org.jsoup.helper.Validate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      Document document0 = Document.createShell("AfterAfterFrameset");
      Element element0 = document0.appendChild(document0);
      // Undeclared exception!
      element0.tagName("ovhe0i+vg)");
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("06E8<+OW3f", "06E8<+OW3f");
      // Undeclared exception!
//      try { 
        document0.tagName((String) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Tag name must not be empty.
//         //
//         verifyException("org.jsoup.helper.Validate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("Y&o", "Y&o");
      document0.empty();
      document0.reparentChild(document0);
      // Undeclared exception!
//      try { 
        document0.siblingElements();
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Illegal Capacity: -1
//         //
//         verifyException("java.util.ArrayList", e);
//      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      CDataNode cDataNode0 = new CDataNode("Tag name must not be empty.");
      Parser parser0 = Parser.htmlParser();
      Document document0 = parser0.parseInput("AxZ", "fib)jR%T");
      document0.parentNode = (Node) cDataNode0;
      // Undeclared exception!
//      try { 
        document0.siblingElements();
//        fail("Expecting exception: ClassCastException");
      
//      } catch(ClassCastException e) {
//         //
//         // org.jsoup.nodes.CDataNode cannot be cast to org.jsoup.nodes.Element
//         //
//         verifyException("org.jsoup.nodes.Element", e);
//      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("EDd@]PwhqBXLk", "EDd@]PwhqBXLk");
      // Undeclared exception!
//      try { 
        document0.selectFirst("c;,'#&=..");
//        fail("Expecting exception: IllegalStateException");
      
//      } catch(IllegalStateException e) {
//         //
//         // Could not parse query 'c;,'#&=..': unexpected token at ';,'#&=..'
//         //
//         verifyException("org.jsoup.select.QueryParser", e);
//      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      Document document0 = Document.createShell("");
      // Undeclared exception!
//      try { 
        document0.selectFirst("");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // String must not be empty
//         //
//         verifyException("org.jsoup.helper.Validate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("06E8<+OW3f", "06E8<+OW3f");
      // Undeclared exception!
//      try { 
        document0.select("7is[1+n3`tN");
//        fail("Expecting exception: IllegalStateException");
      
//      } catch(IllegalStateException e) {
//         //
//         // Did not find balanced marker at '1+n3`tN'
//         //
//         verifyException("org.jsoup.select.QueryParser", e);
//      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("org.jsoup.parser.ParseErrorList", "N#4ZlpC%hP\"");
      // Undeclared exception!
//      try { 
        document0.select("");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // String must not be empty
//         //
//         verifyException("org.jsoup.helper.Validate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("06E8<+OW3f", "06E8<+OW3f");
      // Undeclared exception!
//      try { 
        document0.prependText((String) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Object must not be null
//         //
//         verifyException("org.jsoup.helper.Validate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      Document document0 = Document.createShell("r}+:!N?LY~N]p!m;tm[");
      Element element0 = document0.appendChild(document0);
      // Undeclared exception!
      element0.prependElement("r}+:!N?LY~N]p!m;tm[");
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("S", "2W5J2;J Izc&!H~");
      // Undeclared exception!
//      try { 
        document0.prependElement("");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // String must not be empty
//         //
//         verifyException("org.jsoup.helper.Validate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      Tag tag0 = Tag.valueOf("S+| sGT=0[");
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = new FormElement(tag0, "S+| sGT=0[", attributes0);
      Element element0 = formElement0.appendTo(formElement0);
      // Undeclared exception!
      element0.prepend("");
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      Document document0 = Parser.parse("[{1(-I&?\"3e|jh?", "[{1(-I&?\"3e|jh?");
      StringBuilder stringBuilder0 = new StringBuilder(181);
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.indentAmount(181);
      // Undeclared exception!
      document0.outerHtmlTail(stringBuilder0, 181, document_OutputSettings1);
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("replacePmentStr", "replacePmentStr");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(");.kyin", true);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0, true);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0);
      // Undeclared exception!
//      try { 
        document0.outerHtmlTail(mockPrintWriter0, 26, (Document.OutputSettings) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.jsoup.nodes.Element", e);
//      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("t<xtarea", "t<xtarea");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(")Fw30}Zh-XTEBYW");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.indentAmount(381);
      // Undeclared exception!
      document0.outerHtmlHead(mockPrintWriter0, 381, document_OutputSettings1);
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      Document document0 = Parser.parse("org.jsoup.select.Evaluator$IsEmpty", "label");
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) "org.jsoup.select.Evaluator$IsEmpty");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      // Undeclared exception!
//      try { 
        document0.outerHtmlHead(charBuffer0, 2340, document_OutputSettings0);
//        fail("Expecting exception: ReadOnlyBufferException");
      
//      } catch(ReadOnlyBufferException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.nio.StringCharBuffer", e);
//      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("06E8<+OW3f", "06E8<+OW3f");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      // Undeclared exception!
//      try { 
        document0.outerHtmlHead((Appendable) null, 1031, document_OutputSettings0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("replacePmentStr", "replacePmentStr");
      MockFile mockFile0 = new MockFile("replacePmentStr");
      MockFileWriter mockFileWriter0 = new MockFileWriter(mockFile0);
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      // Undeclared exception!
//      try { 
        document0.outerHtmlHead(mockFileWriter0, (-123), document_OutputSettings0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // width must be > 0
//         //
//         verifyException("org.jsoup.internal.StringUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      Document document0 = Document.createShell("r}+:!N?LY~N]p!m;tm[");
      // Undeclared exception!
//      try { 
        document0.lastElementSibling();
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.jsoup.nodes.Element", e);
//      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("#F+#GD[C<ttj|e", "#F+#GD[C<ttj|e");
      Element element0 = document0.appendChild(document0);
      Evaluator.IsEmpty evaluator_IsEmpty0 = new Evaluator.IsEmpty();
      // Undeclared exception!
      element0.is((Evaluator) evaluator_IsEmpty0);
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      Tag tag0 = Tag.valueOf("body");
      Element element0 = new Element(tag0, "i #>%nzYM|<s2taOSt");
      // Undeclared exception!
//      try { 
        element0.is((Evaluator) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.jsoup.nodes.Element", e);
//      }
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      Document document0 = new Document("06E8<+OW3f");
      document0.attr("", "");
      Evaluator.AttributeStarting evaluator_AttributeStarting0 = new Evaluator.AttributeStarting("#root");
      // Undeclared exception!
//      try { 
        document0.is((Evaluator) evaluator_AttributeStarting0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // String must not be empty
//         //
//         verifyException("org.jsoup.helper.Validate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      Document document0 = Document.createShell("!s2LC==Y~KhlS*{Q}2F");
      // Undeclared exception!
//      try { 
        document0.is("Q]SSpni8Q?t8y?");
//        fail("Expecting exception: IllegalStateException");
      
//      } catch(IllegalStateException e) {
//         //
//         // Could not parse query 'Q]SSpni8Q?t8y?': unexpected token at ']SSpni8Q?t8y?'
//         //
//         verifyException("org.jsoup.select.QueryParser", e);
//      }
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      Document document0 = Document.createShell("AfterAfterFrameset");
      Element element0 = document0.appendChild(document0);
      // Undeclared exception!
      element0.is("AfterAfterFrameset");
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      Document document0 = Parser.parse("sCp!]8IIIrIUD", "sCp!]8IIIrIUD");
      Node[] nodeArray0 = new Node[6];
      nodeArray0[0] = (Node) document0;
      nodeArray0[1] = (Node) document0;
      nodeArray0[2] = (Node) document0;
      nodeArray0[3] = (Node) document0;
      nodeArray0[4] = (Node) document0;
      nodeArray0[5] = (Node) document0;
      // Undeclared exception!
//      try { 
        document0.insertChildren(0, nodeArray0);
//        fail("Expecting exception: IndexOutOfBoundsException");
      
//      } catch(IndexOutOfBoundsException e) {
//         //
//         // Index: 0, Size: 0
//         //
//         verifyException("java.util.ArrayList", e);
//      }
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      Document document0 = Parser.parse("_c`J;", "_c`J;");
      LinkedList<Comment> linkedList0 = new LinkedList<Comment>();
      Comment comment0 = new Comment("_c`J;", "h5");
      linkedList0.add(comment0);
      linkedList0.add(comment0);
      // Undeclared exception!
//      try { 
        document0.insertChildren(1, (Collection<? extends Node>) linkedList0);
//        fail("Expecting exception: IndexOutOfBoundsException");
      
//      } catch(IndexOutOfBoundsException e) {
//         //
//         // Index: 1, Size: 0
//         //
//         verifyException("java.util.ArrayList", e);
//      }
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      Document document0 = Document.createShell("r}+:!N?LY~N]p!m;tm[");
      Element element0 = document0.appendChild(document0);
      // Undeclared exception!
      element0.html(".");
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("#root", "textarea");
      Element element0 = document0.createElement("textarea");
      List<Node> list0 = document0.childNodes();
      element0.childNodes = list0;
      // Undeclared exception!
//      try { 
        element0.html("y");
//        fail("Expecting exception: UnsupportedOperationException");
      
//      } catch(UnsupportedOperationException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.util.Collections$UnmodifiableCollection", e);
//      }
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("org.jsoup.nodes.Element$1", "ILgxBZcuTwp}&\r");
      PipedWriter pipedWriter0 = new PipedWriter();
      // Undeclared exception!
//      try { 
        document0.html(pipedWriter0);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // java.io.IOException: Pipe not connected
//         //
//         verifyException("org.jsoup.nodes.Node$OuterHtmlVisitor", e);
//      }
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("nk%QgK?>=?", "d4xb&g-e&zs");
      Element element0 = document0.prependChild(document0);
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      // Undeclared exception!
      element0.html(charArrayWriter0);
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      Document document0 = Document.createShell("r}+:!N?LY~N]p!m;tm[");
      document0.appendChild(document0);
      // Undeclared exception!
      document0.html();
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("9", "XS");
      // Undeclared exception!
//      try { 
        document0.hasClass((String) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.jsoup.nodes.Element", e);
//      }
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      Tag tag0 = Tag.valueOf("S+| s:TC0");
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = new FormElement(tag0, "S+| s:TC0", attributes0);
      // Undeclared exception!
//      try { 
        formElement0.getElementsMatchingText((Pattern) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.jsoup.select.Evaluator$Matches", e);
//      }
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("06E8<+OW3f", "06E8<+OW3f");
      // Undeclared exception!
//      try { 
        document0.getElementsMatchingText((String) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      Document document0 = Document.createShell("");
      // Undeclared exception!
//      try { 
        document0.getElementsMatchingText("ah1)q.v=");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Pattern syntax error: ah1)q.v=
//         //
//         verifyException("org.jsoup.nodes.Element", e);
//      }
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      Document document0 = Parser.parse("", "");
      // Undeclared exception!
//      try { 
        document0.getElementsMatchingOwnText((Pattern) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.jsoup.select.Evaluator$MatchesOwn", e);
//      }
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      Document document0 = Document.createShell("");
      // Undeclared exception!
//      try { 
        document0.getElementsMatchingOwnText("a)TCiD`#HBSx=m");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Pattern syntax error: a)TCiD`#HBSx=m
//         //
//         verifyException("org.jsoup.nodes.Element", e);
//      }
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      ParseSettings parseSettings0 = ParseSettings.htmlDefault;
      Tag tag0 = Tag.valueOf("P{^{3", parseSettings0);
      Element element0 = new Element(tag0, "P{^{3", (Attributes) null);
      element0.childNodes = null;
      // Undeclared exception!
//      try { 
        element0.getElementsContainingText("@z");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.jsoup.nodes.Element", e);
//      }
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("#root", "#root");
      document0.setSiblingIndex((-655));
      document0.reparentChild(document0);
      // Undeclared exception!
//      try { 
        document0.getElementsContainingText("#root");
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      Document document0 = new Document(":contains(");
      Element element0 = document0.appendElement("~ ");
      List<Node> list0 = Parser.parseXmlFragment(":contains(", "jahg75fr|foh>");
      element0.childNodes = list0;
      // Undeclared exception!
//      try { 
        document0.getElementsContainingOwnText(":contains(");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.jsoup.select.NodeTraversor", e);
//      }
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      Parser parser0 = Parser.htmlParser();
      StringReader stringReader0 = new StringReader("");
      Document document0 = parser0.parseInput((Reader) stringReader0, "");
      // Undeclared exception!
//      try { 
        document0.getElementsByTag("");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // String must not be empty
//         //
//         verifyException("org.jsoup.helper.Validate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      Document document0 = Document.createShell("r}+:!N?LY~N]p!m;tm[");
      // Undeclared exception!
//      try { 
        document0.getElementsByClass((String) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // String must not be empty
//         //
//         verifyException("org.jsoup.helper.Validate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      Document document0 = Parser.parse("", "");
      // Undeclared exception!
//      try { 
        document0.getElementsByAttributeValueStarting("cite", "");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // String must not be empty
//         //
//         verifyException("org.jsoup.helper.Validate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      Document document0 = Document.createShell("textarea");
      // Undeclared exception!
//      try { 
        document0.getElementsByAttributeValueNot("G*Oqo//*T02-DCv", "");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // String must not be empty
//         //
//         verifyException("org.jsoup.helper.Validate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("S", "2W5J2;J Izc&!H~");
      // Undeclared exception!
//      try { 
        document0.getElementsByAttributeValueMatching("2W5J2;J Izc&!H~", "-{qz.\"1q6*zwxou");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Pattern syntax error: -{qz.\"1q6*zwxou
//         //
//         verifyException("org.jsoup.nodes.Element", e);
//      }
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("06E8<+OW3f", "06E8<+OW3f");
      // Undeclared exception!
//      try { 
        document0.getElementsByAttributeValueEnding("", "s+");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // String must not be empty
//         //
//         verifyException("org.jsoup.helper.Validate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      Parser parser0 = Parser.xmlParser();
      Document document0 = parser0.parseInput("", "Ww+E");
      // Undeclared exception!
//      try { 
        document0.getElementsByAttributeValueContaining("", "Ww+E");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // String must not be empty
//         //
//         verifyException("org.jsoup.helper.Validate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      Document document0 = Parser.parse("#root", "#root");
      document0.childNodes = null;
      // Undeclared exception!
//      try { 
        document0.getElementsByAttributeValue("t|`yfpwji1%+&fxga", "#root");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      Document document0 = Document.createShell("!s2LC==Y~KhlS*{Q}2F");
      // Undeclared exception!
//      try { 
        document0.getElementsByAttributeStarting("");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // String must not be empty
//         //
//         verifyException("org.jsoup.helper.Validate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      Document document0 = Parser.parse("", "");
      // Undeclared exception!
//      try { 
        document0.getElementById((String) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // String must not be empty
//         //
//         verifyException("org.jsoup.helper.Validate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      Document document0 = Document.createShell("r}+:!N?LY~N]p!m;tm[");
      // Undeclared exception!
//      try { 
        document0.firstElementSibling();
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.jsoup.nodes.Element", e);
//      }
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("%}u", "%}u");
      document0.childNodes = null;
      // Undeclared exception!
//      try { 
        document0.dataNodes();
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.jsoup.nodes.Element", e);
//      }
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      Document document0 = Parser.parse("_cJ;", "_cJ;");
      Element element0 = document0.prependElement("_cJ;");
      Element element1 = element0.prependElement("_cJ;");
      // Undeclared exception!
//      try { 
        element1.cssSelector();
//        fail("Expecting exception: IllegalStateException");
      
//      } catch(IllegalStateException e) {
//         //
//         // Could not parse query '_cj;': unexpected token at '_cj;'
//         //
//         verifyException("org.jsoup.select.QueryParser", e);
//      }
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("[{1(-IO&?\"3e|jh?", "[{1(-IO&?\"3e|jh?");
      Element element0 = document0.body();
      element0.setSiblingIndex((-2445));
      // Undeclared exception!
//      try { 
        element0.cssSelector();
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      Document document0 = Parser.parse("area", "hji@;-u g7r6yd!p");
      // Undeclared exception!
//      try { 
        document0.classNames((Set<String>) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Object must not be null
//         //
//         verifyException("org.jsoup.helper.Validate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      Document document0 = new Document("");
      // Undeclared exception!
//      try { 
        document0.child((-1002));
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      Document document0 = Document.createShell("Children collection to be inserted must not be null.");
      document0.appendChild(document0);
      // Undeclared exception!
      document0.before("[{1(k-i&?\"3e|jh?");
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      Document document0 = Document.createShell("r}+:!N?LY~N]p!m;tm[");
      Element element0 = document0.appendChild(document0);
      // Undeclared exception!
      element0.attr("PEv}Qb/sv0>*].PN", "r}+:!N?LY~N]p!m;tm[");
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("r}+:!N?LY~N]p!m;tm[", "r}+:!N?LY~N]p!m;tm[");
      // Undeclared exception!
//      try { 
        document0.attr((String) null, "&$.='cyZ");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.jsoup.parser.ParseSettings", e);
//      }
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("", "");
      DataNode dataNode0 = new DataNode("QUjziCWZN`#<2NR`k,");
      Element element0 = document0.doClone(dataNode0);
      // Undeclared exception!
//      try { 
        element0.appendTo(document0);
//        fail("Expecting exception: UnsupportedOperationException");
      
//      } catch(UnsupportedOperationException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.util.AbstractList", e);
//      }
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("sHNF ", "Tag name must not be empty.");
      Element element0 = new Element("Tag name must not be empty.");
      Element element1 = document0.doClone(element0);
      // Undeclared exception!
//      try { 
        element1.appendTo(document0);
//        fail("Expecting exception: IndexOutOfBoundsException");
      
//      } catch(IndexOutOfBoundsException e) {
//         //
//         // Index: 0, Size: 0
//         //
//         verifyException("java.util.ArrayList", e);
//      }
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("`S]$q1l_R,5", "->_!");
      // Undeclared exception!
//      try { 
        document0.appendTo((Element) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Object must not be null
//         //
//         verifyException("org.jsoup.helper.Validate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("O<-gT.wY>C7al", "S");
      // Undeclared exception!
//      try { 
        document0.appendText((String) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Object must not be null
//         //
//         verifyException("org.jsoup.helper.Validate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      Document document0 = Parser.parse("[{1(-I&?\"3e|jh?", "[{1(-I&?\"3e|jh?");
      document0.appendChild(document0);
      // Undeclared exception!
      document0.appendElement("s+");
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      Document document0 = new Document("RGljIlbM");
      // Undeclared exception!
//      try { 
        document0.appendElement((String) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Object must not be null
//         //
//         verifyException("org.jsoup.helper.Validate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("texbZtaea", "texbZtaea");
      List<Node> list0 = Parser.parseXmlFragment("Z", "E'@7Vw.G8");
      document0.childNodes = list0;
      // Undeclared exception!
//      try { 
        document0.appendChild(document0);
//        fail("Expecting exception: UnsupportedOperationException");
      
//      } catch(UnsupportedOperationException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.util.Collections$UnmodifiableCollection", e);
//      }
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("3h^}p&!XY7]%z{", "org.jsoup.nodes.Element");
      document0.reparentChild(document0);
      document0.empty();
      // Undeclared exception!
//      try { 
        document0.appendChild(document0);
//        fail("Expecting exception: IndexOutOfBoundsException");
      
//      } catch(IndexOutOfBoundsException e) {
//         //
//         // Index: 0, Size: 0
//         //
//         verifyException("java.util.ArrayList", e);
//      }
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      Document document0 = Document.createShell("r}+:!N?LY~N]p!m;tm[");
      // Undeclared exception!
//      try { 
        document0.appendChild((Node) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Object must not be null
//         //
//         verifyException("org.jsoup.helper.Validate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("r}+:!N?LY~N]p!m;tm[", "r}+:!N?LY~N]p!m;tm[");
      Element element0 = document0.appendChild(document0);
      // Undeclared exception!
      element0.append("}ow|]:D%&]kD_F");
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("S", ">0S=1m?iN ?9Z");
      // Undeclared exception!
//      try { 
        document0.append((String) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Object must not be null
//         //
//         verifyException("org.jsoup.helper.Validate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("[{1(-I&?\"3e|jh?", "[{1(-I&?\"3e|jh?");
      Element element0 = document0.appendChild(document0);
      // Undeclared exception!
//      try { 
        document0.after((Node) element0);
//        fail("Expecting exception: IndexOutOfBoundsException");
      
//      } catch(IndexOutOfBoundsException e) {
//         //
//         // Index: 2, Size: 1
//         //
//         verifyException("java.util.ArrayList", e);
//      }
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      Document document0 = Parser.parse("sCp!]8IIIrIUD", "sCp!]8IIIrIUD");
      document0.appendChild(document0);
      // Undeclared exception!
      document0.after("RCDATAEndTagOpen");
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("shuS][|EP@Y:Z", "shuS][|EP@Y:Z");
      Document document1 = Parser.parse("B;J ", "shuS][|EP@Y:Z");
      Element element0 = document0.appendChild(document1);
      element0.html("");
      // Undeclared exception!
//      try { 
        document1.after("");
//        fail("Expecting exception: IndexOutOfBoundsException");
      
//      } catch(IndexOutOfBoundsException e) {
//         //
//         // Index: 2, Size: 0
//         //
//         verifyException("java.util.ArrayList", e);
//      }
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      Document document0 = Document.createShell("r}+:!N?LY~N]p!m;tm[");
      // Undeclared exception!
//      try { 
        document0.addClass((String) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Object must not be null
//         //
//         verifyException("org.jsoup.helper.Validate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      Tag tag0 = Tag.valueOf("qdi kxxnw[&&{");
      Attributes attributes0 = new Attributes();
      Element element0 = null;
//      try {
        element0 = new Element(tag0, (String) null, attributes0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Object must not be null
//         //
//         verifyException("org.jsoup.helper.Validate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      Element element0 = null;
//      try {
        element0 = new Element((Tag) null, (String) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Object must not be null
//         //
//         verifyException("org.jsoup.helper.Validate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      Element element0 = null;
//      try {
        element0 = new Element("");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // String must not be empty
//         //
//         verifyException("org.jsoup.helper.Validate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      Document document0 = Parser.parse("_cJ;", "area");
      Element element0 = document0.prependElement("area");
      element0.html((MockPrintWriter) null);
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      Document document0 = Parser.parse("#root", "#root");
      document0.hasClass("#root");
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      Document document0 = Document.createShell("!s2LC==Y~KhlS*{Q}2F");
      Charset charset0 = Charset.defaultCharset();
      Set<String> set0 = charset0.aliases();
      document0.classNames(set0);
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      Parser parser0 = Parser.xmlParser();
      Document document0 = parser0.parseInput("sCp!]8IIIrIUD", "br");
      document0.data();
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("P1{^{3", "P1{^{3");
      document0.data();
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("Pk53/6", "S");
      document0.hasText();
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      Document document0 = Parser.parse("sCp!]8IIIrIUD", "sCp!]8IIIrIUD");
      document0.elementSiblingIndex();
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      Document document0 = new Document("sCp!]8IIIrIUD");
      document0.appendChild(document0);
      document0.previousElementSibling();
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      Document document0 = Document.createShell("r}+:!N?LY~N]p!m;tm[");
      document0.appendChild(document0);
      Element element0 = document0.previousElementSibling();
      element0.toggleClass("--!");
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      Document document0 = Parser.parse("_c`J{;", "_c`J{;");
      Element element0 = document0.head();
      element0.nextElementSibling();
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      Document document0 = Parser.parse("_c`J{;", "_c`J{;");
      Element element0 = document0.body();
      element0.nextElementSibling();
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("06E8<+OW3f", "06E8<+OW3f");
      Element element0 = document0.appendChild(document0);
      element0.cssSelector();
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      Document document0 = Document.createShell("r}+:!N?LY~N]p!m;tm[");
      Element element0 = document0.appendChild(document0);
      document0.firstElementSibling();
      element0.elementSiblingIndex();
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("06E8<+OW3f", "06E8<+OW3f");
      Element element0 = document0.head();
      element0.html("#root");
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("[%s]", "0Lwa34{[sD;#$UbFZ");
      document0.clearAttributes();
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("S", "2W5J2;J Izc&!H~");
      document0.getElementsByClass("S");
      document0.attributes();
  }

  @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("[{1(-I&?\"3e|jh?", "[{1(-I&?\"3e|jh?");
      document0.children();
  }

  @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("[{1(-IO&?\"3e|jh?", "[{1(-IO&?\"3e|jh?");
      document0.className();
  }

  @Test(timeout = 4000)
  public void test223()  throws Throwable  {
      Document document0 = Parser.parse("#root", "#root");
      document0.parent();
  }

  @Test(timeout = 4000)
  public void test224()  throws Throwable  {
      Tag tag0 = Tag.valueOf("|");
      CDataNode cDataNode0 = new CDataNode("|");
      Attributes attributes0 = cDataNode0.attributes();
      Element element0 = new Element(tag0, "|", attributes0);
      element0.ownText();
  }

  @Test(timeout = 4000)
  public void test225()  throws Throwable  {
      Document document0 = Parser.parse("", "");
      document0.isBlock();
  }

  @Test(timeout = 4000)
  public void test226()  throws Throwable  {
      Tag tag0 = Tag.valueOf("title");
      Attributes attributes0 = new Attributes();
      PseudoTextElement pseudoTextElement0 = new PseudoTextElement(tag0, "body", attributes0);
      Evaluator.IsRoot evaluator_IsRoot0 = new Evaluator.IsRoot();
      pseudoTextElement0.is((Evaluator) evaluator_IsRoot0);
  }

  @Test(timeout = 4000)
  public void test227()  throws Throwable  {
      Document document0 = Parser.parse("_c`J{;", "area");
      document0.select("8");
  }

  @Test(timeout = 4000)
  public void test228()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("S", "2W5J2;J Izc&!H~");
      document0.id();
  }

  @Test(timeout = 4000)
  public void test229()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("area", "_cJ;");
      Element element0 = document0.prependElement("area");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.outline(true);
      document0.outputSettings(document_OutputSettings1);
      element0.prependElement("area");
      element0.append("area");
      document0.outerHtml();
  }

  @Test(timeout = 4000)
  public void test230()  throws Throwable  {
      Parser parser0 = Parser.xmlParser();
      Document document0 = parser0.parseInput("w-QRTF5-", ":%s(%d)");
      document0.prependElement("track");
      document0.outerHtml();
  }

  @Test(timeout = 4000)
  public void test231()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("area", "_cJ;");
      Element element0 = document0.prependElement("area");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.outline(true);
      document0.outputSettings(document_OutputSettings1);
      element0.prependElement("area");
      document0.outerHtml();
  }

  @Test(timeout = 4000)
  public void test232()  throws Throwable  {
      Document document0 = Parser.parse("_cJ;", "area");
      Element element0 = document0.prependElement("area");
      element0.prependElement("track");
      document0.outerHtml();
  }

  @Test(timeout = 4000)
  public void test233()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("_c`J;", "_c`J;");
      // Undeclared exception!
//      try { 
        document0.html((StringBuilder) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test234()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("Object must not be null", "Object must not be null");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      document_OutputSettings0.prettyPrint(false);
      Document document1 = document0.outputSettings(document_OutputSettings0);
      document1.outerHtml();
  }

  @Test(timeout = 4000)
  public void test235()  throws Throwable  {
      ParseSettings parseSettings0 = new ParseSettings(true, true);
      Tag tag0 = Tag.valueOf("textarea", parseSettings0);
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = new FormElement(tag0, "sC9\"'oi_.", attributes0);
      formElement0.val("textarea");
  }

  @Test(timeout = 4000)
  public void test236()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      ParseSettings parseSettings0 = ParseSettings.htmlDefault;
      Tag tag0 = Tag.valueOf("textarea", parseSettings0);
      FormElement formElement0 = new FormElement(tag0, "=8tM0;[cE.^eq69", attributes0);
      formElement0.val();
  }

  @Test(timeout = 4000)
  public void test237()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("9", "XS");
      document0.addClass("A80T{Dz^c\"%U c-");
      document0.toggleClass("l<lfk^jqi+bp'?^x");
      document0.toggleClass("l<lfk^jqi+bp'?^x");
  }

  @Test(timeout = 4000)
  public void test238()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("valu(e", "valu(e");
      Element element0 = document0.addClass("valu(e");
      element0.toggleClass("valu(e");
      document0.toggleClass("Pattern syntax error: ");
      document0.hasClass("valu(e");
  }

  @Test(timeout = 4000)
  public void test239()  throws Throwable  {
      Document document0 = Parser.parse("Pattern syntax error: ", "Pattern syntax error: ");
      document0.toggleClass("Pattern syntax error: ");
      document0.toggleClass("Pattern syntax error: ");
      document0.hasClass("B:BbK$N");
  }

  @Test(timeout = 4000)
  public void test240()  throws Throwable  {
      Document document0 = Parser.parse("061<UE8<+OW3f", "061<UE8<+OW3f");
      document0.toggleClass("4I8htK");
      document0.toggleClass(" > ");
      document0.hasClass("head");
  }

  @Test(timeout = 4000)
  public void test241()  throws Throwable  {
      Document document0 = Document.createShell("061<-E8<+OW3f");
      document0.addClass("xs");
      document0.toggleClass("GET");
      document0.hasClass("GET");
  }

  @Test(timeout = 4000)
  public void test242()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("#F+#GD[C<ttj|e", "^j@X}{sB2");
      document0.addClass("*fU6$i");
      document0.hasClass("Insert position out of bounds.");
  }

  @Test(timeout = 4000)
  public void test243()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("t<xtarea", "t<xtarea");
      document0.removeClass("t<xtarea");
      document0.clone();
  }

  @Test(timeout = 4000)
  public void test244()  throws Throwable  {
      Document document0 = Document.createShell("{v]KsdPRl*b");
      Node[] nodeArray0 = new Node[9];
      nodeArray0[0] = (Node) document0;
      nodeArray0[1] = (Node) document0;
      nodeArray0[2] = (Node) document0;
      nodeArray0[3] = (Node) document0;
      DocumentType documentType0 = new DocumentType("{v]KsdPRl*b", " *Eb", "'($", " *Eb", "battern");
      nodeArray0[4] = (Node) documentType0;
      nodeArray0[5] = (Node) document0;
      TextNode textNode0 = TextNode.createFromEncoded(" *Eb", "'($");
      nodeArray0[6] = (Node) textNode0;
      nodeArray0[7] = (Node) document0;
      nodeArray0[8] = (Node) document0;
      document0.addChildren(nodeArray0);
      document0.hasText();
  }

  @Test(timeout = 4000)
  public void test245()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("limitedQuirks", "wpx");
      document0.html("                    ");
      document0.hasText();
  }

  @Test(timeout = 4000)
  public void test246()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("#root", "#root");
      document0.reparentChild(document0);
      document0.getElementsContainingText("#root");
  }

  @Test(timeout = 4000)
  public void test247()  throws Throwable  {
      Element.preserveWhitespace((Node) null);
  }

  @Test(timeout = 4000)
  public void test248()  throws Throwable  {
      Document document0 = Document.createShell("");
      Element element0 = document0.prependText("iCziZ cjzLx87");
      Pattern pattern0 = Pattern.compile("xp:C!v@jo$z", (-284));
      element0.append(" > ");
      document0.getElementsMatchingText(pattern0);
  }

  @Test(timeout = 4000)
  public void test249()  throws Throwable  {
      Document document0 = Parser.parse("_c`J{;", "_c`J{;");
      CDataNode cDataNode0 = new CDataNode(":nth-child(%d)");
      document0.appendChild(cDataNode0);
      document0.getElementsContainingText(":nth-child(%d)");
  }

  @Test(timeout = 4000)
  public void test250()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("06E8<+OW3f", "06E8<+OW3f");
      document0.prependText("#`t{M!JjpRpzh:bf<s");
      document0.text();
  }

  @Test(timeout = 4000)
  public void test251()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("06E8<+OW3f", "06E8<+OW3f");
      document0.title("org.jsoup.nodes.Element$NodeList");
      Pattern pattern0 = Pattern.compile("06E8<+OW3f", (-1653));
      document0.getElementsMatchingText(pattern0);
  }

  @Test(timeout = 4000)
  public void test252()  throws Throwable  {
      Document document0 = Parser.parse("_J", "_J");
      document0.appendElement("~y E3$'{^FhDWL6Y");
      document0.getElementsContainingText("_J");
  }

  @Test(timeout = 4000)
  public void test253()  throws Throwable  {
      Document document0 = Document.createShell("h'-5{z^@&kf^.kg7k");
      DataNode dataNode0 = new DataNode("br", "7y)Pw!rs)J;IG6D");
      Element element0 = document0.appendChild(dataNode0);
      element0.getElementsContainingText("km");
  }

  @Test(timeout = 4000)
  public void test254()  throws Throwable  {
      Document document0 = Document.createShell("r}+:!N?LY~N]p!m;tm[");
      document0.getElementById(">-R");
  }

  @Test(timeout = 4000)
  public void test255()  throws Throwable  {
      Document document0 = Parser.parse("sCp!]8IIIrIUD", "sCp!]8IIIrIUD");
      Element element0 = document0.createElement("default");
      Element element1 = document0.appendTo(element0);
      element1.lastElementSibling();
  }

  @Test(timeout = 4000)
  public void test256()  throws Throwable  {
      Document document0 = Document.createShell("r}+:!N?LY~N]p!m;tm[");
      document0.appendChild(document0);
      document0.empty();
      document0.firstElementSibling();
  }

  @Test(timeout = 4000)
  public void test257()  throws Throwable  {
      Document document0 = Document.createShell("AfterAfterFrameset");
      document0.appendChild(document0);
      document0.previousElementSiblings();
  }

  @Test(timeout = 4000)
  public void test258()  throws Throwable  {
      Tag tag0 = Tag.valueOf("O<-gT.wY>C7al");
      FormElement formElement0 = new FormElement(tag0, "org.jsoup.nodes.Element$1", (Attributes) null);
      formElement0.previousElementSibling();
  }

  @Test(timeout = 4000)
  public void test259()  throws Throwable  {
      Document document0 = Document.createShell("r}+:!N?LY~N]p!m;tm[");
      document0.appendChild(document0);
      Element element0 = document0.firstElementSibling();
      element0.nextElementSiblings();
      assertEquals(1, document0.siblingIndex());
      assertEquals("r}+:!N?LY~N]p!m;tm[", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test260()  throws Throwable  {
      ParseSettings parseSettings0 = ParseSettings.htmlDefault;
      Tag tag0 = Tag.valueOf("r2RGseii", parseSettings0);
      Element element0 = new Element(tag0, "er/W'9}wO!^");
      element0.nextElementSibling();
      assertEquals("er/W'9}wO!^", element0.baseUri());
  }

  @Test(timeout = 4000)
  public void test261()  throws Throwable  {
      Document document0 = new Document("h'-5{z^@&kf^.kg7k");
      document0.reparentChild(document0);
      document0.nextElementSiblings();
      assertEquals("h'-5{z^@&kf^.kg7k", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test262()  throws Throwable  {
      Document document0 = Document.createShell("r}+:!N?LY~N]p!m;tm[");
      document0.appendChild(document0);
      document0.siblingElements();
      assertEquals(1, document0.siblingIndex());
  }

  @Test(timeout = 4000)
  public void test263()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("06E8<+OW3f", "06E8<+OW3f");
      document0.siblingElements();
      assertEquals("06E8<+OW3f", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test264()  throws Throwable  {
      Document document0 = Document.createShell("]#:kroot");
      Element element0 = document0.body();
      element0.after("'>`Lx;mv;|fG");
      String string0 = element0.cssSelector();
      assertEquals("]#:kroot", element0.baseUri());
      assertEquals("html > body:nth-child(2)", string0);
  }

  @Test(timeout = 4000)
  public void test265()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("S", "2W5J2;J Izc&!H~");
      document0.toggleClass("S");
      document0.cssSelector();
      assertEquals("2W5J2;J Izc&!H~", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test266()  throws Throwable  {
      Document document0 = Parser.parse("", "");
      Node[] nodeArray0 = new Node[2];
      // Undeclared exception!
//      try { 
        document0.insertChildren(13, nodeArray0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Insert position out of bounds.
//         //
//         verifyException("org.jsoup.helper.Validate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test267()  throws Throwable  {
      Document document0 = Document.createShell("1");
      Node[] nodeArray0 = new Node[4];
      // Undeclared exception!
//      try { 
        document0.insertChildren((-2262), nodeArray0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Insert position out of bounds.
//         //
//         verifyException("org.jsoup.helper.Validate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test268()  throws Throwable  {
      Document document0 = Parser.parse("_c`J;", "_c`J;");
      Node[] nodeArray0 = new Node[0];
      Element element0 = document0.insertChildren(1, nodeArray0);
      assertEquals("_c`J;", element0.baseUri());
  }

  @Test(timeout = 4000)
  public void test269()  throws Throwable  {
      Document document0 = Document.createShell("!s2LC==Y~KhlS*{Q}2F");
      LinkedHashSet<Document> linkedHashSet0 = new LinkedHashSet<Document>();
      // Undeclared exception!
//      try { 
        document0.insertChildren(21, (Collection<? extends Node>) linkedHashSet0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Insert position out of bounds.
//         //
//         verifyException("org.jsoup.helper.Validate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test270()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("S", ">0S=1m?iN ?9Z");
      LinkedHashSet<Document> linkedHashSet0 = new LinkedHashSet<Document>();
      // Undeclared exception!
//      try { 
        document0.insertChildren((-695), (Collection<? extends Node>) linkedHashSet0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Insert position out of bounds.
//         //
//         verifyException("org.jsoup.helper.Validate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test271()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("P\"}4iRI]7-", "P\"}4iRI]7-");
      DataNode dataNode0 = DataNode.createFromEncoded("&B'A8K6Q ?P!}", "[%fIe");
      document0.appendChild(dataNode0);
      List<DataNode> list0 = document0.dataNodes();
      assertEquals("P\"}4iRI]7-", document0.baseUri());
      assertEquals(1, list0.size());
      assertTrue(list0.contains(dataNode0));
  }

  @Test(timeout = 4000)
  public void test272()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("S", "2W5J2;J Izc&!H~");
      document0.appendText("2W5J2;J Izc&!H~");
      document0.textNodes();
      assertEquals(2, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test273()  throws Throwable  {
      Document document0 = new Document("#root");
      document0.reparentChild(document0);
      TextNode textNode0 = new TextNode("html", "html");
      document0.before((Node) textNode0);
      document0.previousElementSiblings();
      assertEquals("#root", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test274()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("06E8<+OW3f", "06E8<+OW3f");
      Elements elements0 = document0.getElementsByIndexGreaterThan(1);
      assertEquals("06E8<+OW3f", document0.baseUri());
      assertEquals(0, elements0.size());
  }

  @Test(timeout = 4000)
  public void test275()  throws Throwable  {
      Document document0 = Parser.parse("Tz(OhRGYSRKv", "!s2LC==Y~KhlS*{Q}2F");
      document0.selectFirst("InColumnGroup");
      assertEquals("!s2LC==Y~KhlS*{Q}2F", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test276()  throws Throwable  {
      Parser parser0 = Parser.xmlParser();
      Document document0 = parser0.parseInput("P*I)", "kH0G");
      Elements elements0 = document0.getElementsMatchingText("I");
      assertEquals("kH0G", document0.baseUri());
      assertEquals(1, elements0.size());
  }

  @Test(timeout = 4000)
  public void test277()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("replacePmentStr", "value");
      document0.getAllElements();
      assertEquals("value", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test278()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("%}u", "%}u");
      // Undeclared exception!
//      try { 
        document0.removeClass((String) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Object must not be null
//         //
//         verifyException("org.jsoup.helper.Validate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test279()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("OjQ[ #0^c(^c*nbw", "tSGg1kAN`V[~:p+yn");
      // Undeclared exception!
//      try { 
        document0.before("/'O^!q)]");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Object must not be null
//         //
//         verifyException("org.jsoup.helper.Validate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test280()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("", "");
      // Undeclared exception!
//      try { 
        document0.getElementsByAttribute("");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // String must not be empty
//         //
//         verifyException("org.jsoup.helper.Validate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test281()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("P1{^{3", "P1{^{3");
      // Undeclared exception!
//      try { 
        document0.getElementsByAttributeValueNot("\"", "\"");
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test282()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("[{1(-IO&?\"3e|jh?", "[{1(-IO&?\"3e|jh?");
      Element element0 = document0.shallowClone();
      assertEquals("[{1(-IO&?\"3e|jh?", element0.baseUri());
  }

  @Test(timeout = 4000)
  public void test283()  throws Throwable  {
      ParseSettings parseSettings0 = ParseSettings.htmlDefault;
      Tag tag0 = Tag.valueOf("r2RGseii", parseSettings0);
      Element element0 = new Element(tag0, "er/W'9}wO!^");
      element0.doSetBaseUri("n<zGYD@B|N");
      assertEquals("n<zGYD@B|N", element0.baseUri());
  }

  @Test(timeout = 4000)
  public void test284()  throws Throwable  {
      Document document0 = Document.createShell(":contains(");
      // Undeclared exception!
//      try { 
        document0.after((Node) document0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Object must not be null
//         //
//         verifyException("org.jsoup.helper.Validate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test285()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("_c`J;", "_c`J;");
      Pattern pattern0 = Pattern.compile("_c`J;", 1182);
      document0.getElementsByAttributeValueMatching("_c`J;", pattern0);
      assertEquals("_c`J;", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test286()  throws Throwable  {
      Document document0 = new Document(":contains(");
      document0.getElementsByAttributeValueEnding("{_v@ Z/J", "Z");
      assertEquals(":contains(", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test287()  throws Throwable  {
      Document document0 = Document.createShell("AfterAfterFrameset");
      document0.is("AfterAfterFrameset");
      assertEquals("AfterAfterFrameset", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test288()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("[%s]", "0Lwa34{[sD;#$UbFZ");
      // Undeclared exception!
//      try { 
        document0.getElementsByAttributeValueMatching("s+", (String) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test289()  throws Throwable  {
      Element element0 = new Element("i~l|BAz");
      // Undeclared exception!
//      try { 
        element0.getElementsMatchingOwnText((String) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test290()  throws Throwable  {
      Document document0 = Parser.parse("}S", "}S");
      Elements elements0 = document0.getElementsByIndexEquals(1);
      assertEquals("}S", document0.baseUri());
      assertEquals(1, elements0.size());
  }

  @Test(timeout = 4000)
  public void test291()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("compact", "compact");
      document0.getElementsByAttributeStarting("7");
      assertEquals("compact", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test292()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("limitedQuirks", "hW=7Bh [)G1O_?S y");
      Elements elements0 = document0.getElementsByIndexLessThan(2622);
      assertEquals(3, elements0.size());
      assertEquals("hW=7Bh [)G1O_?S y", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test293()  throws Throwable  {
      Document document0 = Document.createShell("]#:kroot");
      // Undeclared exception!
//      try { 
        document0.after("'>`Lx;mv;|fG");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Object must not be null
//         //
//         verifyException("org.jsoup.helper.Validate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test294()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("S", "2W5J2;J Izc&!H~");
      Pattern pattern0 = Pattern.compile("#root", 870);
      document0.getElementsMatchingOwnText(pattern0);
      assertEquals(1, document0.childNodeSize());
      assertEquals("2W5J2;J Izc&!H~", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test295()  throws Throwable  {
      Document document0 = Parser.parse("h'-5{z^@&kf^.kg7k", "h'-5{z^@&kf^.kg7k");
      // Undeclared exception!
//      try { 
        document0.prepend((String) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Object must not be null
//         //
//         verifyException("org.jsoup.helper.Validate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test296()  throws Throwable  {
      Document document0 = Document.createShell("]#:kroot");
      Element element0 = document0.body();
      String string0 = element0.cssSelector();
      assertEquals("]#:kroot", element0.baseUri());
      assertEquals("html > body", string0);
      assertEquals(1, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test297()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("replacePmentStr", "value");
      document0.getElementsByAttributeValueStarting("A@boR", "A@boR");
      assertEquals(1, document0.childNodeSize());
      assertEquals("value", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test298()  throws Throwable  {
      Document document0 = Parser.parse("#root", "#root");
      document0.getElementsByAttributeValue("t|`yfpwji1%+&fxga", "#root");
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test299()  throws Throwable  {
      Document document0 = Document.createShell("r}+:!N?LY~N]p!m;tm[");
      // Undeclared exception!
//      try { 
        document0.attr((String) null, false);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Object must not be null
//         //
//         verifyException("org.jsoup.helper.Validate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test300()  throws Throwable  {
      Document document0 = Parser.parse("_cJ;", "area");
      String string0 = document0.wholeText();
      assertEquals("_cJ;", string0);
      assertEquals("area", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test301()  throws Throwable  {
      Document document0 = new Document("#root");
      TextNode textNode0 = new TextNode("html", "html");
      // Undeclared exception!
//      try { 
        document0.before((Node) textNode0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Object must not be null
//         //
//         verifyException("org.jsoup.helper.Validate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test302()  throws Throwable  {
      Document document0 = Document.createShell("061<-E8<+OW3f");
      document0.addClass("xs");
      document0.hasClass("GET");
      assertEquals(1, document0.childNodeSize());
      assertEquals("061<-E8<+OW3f", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test303()  throws Throwable  {
      Tag tag0 = Tag.valueOf("S+| s:TC0");
      Element element0 = new Element(tag0, "");
      Elements elements0 = element0.getElementsContainingOwnText("I");
      assertTrue(elements0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test304()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("EDd@]PwhqBXLk", "EDd@]PwhqBXLk");
      document0.dataset();
      assertEquals(1, document0.childNodeSize());
      assertEquals("EDd@]PwhqBXLk", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test305()  throws Throwable  {
      Element element0 = new Element("#root");
      // Undeclared exception!
//      try { 
        element0.html((String) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Object must not be null
//         //
//         verifyException("org.jsoup.helper.Validate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test306()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("S", ">0S=1m?iN ?9Z");
      // Undeclared exception!
//      try { 
        document0.child(510);
//        fail("Expecting exception: IndexOutOfBoundsException");
      
//      } catch(IndexOutOfBoundsException e) {
//         //
//         // Index: 510, Size: 1
//         //
//         verifyException("java.util.ArrayList", e);
//      }
  }

  @Test(timeout = 4000)
  public void test307()  throws Throwable  {
      Document document0 = Document.createShell("AfterAfterFrameset");
      document0.previousElementSiblings();
      assertEquals("AfterAfterFrameset", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test308()  throws Throwable  {
      Document document0 = Parser.parse("_cJ;", "_cJ;");
      // Undeclared exception!
//      try { 
        document0.prependChild((Node) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Object must not be null
//         //
//         verifyException("org.jsoup.helper.Validate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test309()  throws Throwable  {
      Document document0 = Parser.parse("sCp!]8IIIrIUD", "sCp!]8IIIrIUD");
      // Undeclared exception!
//      try { 
        document0.wrap("sCp!]8IIIrIUD");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.jsoup.nodes.Node", e);
//      }
  }
}
