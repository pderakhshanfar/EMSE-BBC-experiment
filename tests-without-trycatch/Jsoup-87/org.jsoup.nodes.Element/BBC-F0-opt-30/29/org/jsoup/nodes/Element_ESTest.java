/*
 * This file was automatically generated by EvoSuite
 * Fri Oct 22 21:28:45 GMT 2021
 */

package org.jsoup.nodes;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedWriter;
import java.io.CharArrayWriter;
import java.io.PipedWriter;
import java.io.StringWriter;
import java.nio.charset.Charset;
import java.util.Collection;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.Map;
import java.util.Set;
import java.util.regex.Pattern;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileWriter;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.jsoup.nodes.Attribute;
import org.jsoup.nodes.Attributes;
import org.jsoup.nodes.CDataNode;
import org.jsoup.nodes.Comment;
import org.jsoup.nodes.DataNode;
import org.jsoup.nodes.Document;
import org.jsoup.nodes.DocumentType;
import org.jsoup.nodes.Element;
import org.jsoup.nodes.FormElement;
import org.jsoup.nodes.Node;
import org.jsoup.nodes.PseudoTextElement;
import org.jsoup.nodes.TextNode;
import org.jsoup.parser.ParseErrorList;
import org.jsoup.parser.ParseSettings;
import org.jsoup.parser.Parser;
import org.jsoup.parser.Tag;
import org.jsoup.select.Elements;
import org.jsoup.select.Evaluator;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Element_ESTest extends Element_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Document document0 = new Document("Queue not long enough to consume sequence");
      Element element0 = document0.addClass("Queue not long enough to consume sequence");
      document0.addClass("Queue not long enough to consume sequence");
      element0.hasClass("Queue not long enough to consume sequence");
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Parser parser0 = Parser.xmlParser();
      Document document0 = parser0.parseInput("dz5ue&_<e7:_4", "tag name must not be empty.");
      document0.addClass("64IcOpQTw;:,7)dqL");
      Element element0 = document0.addClass("tag name must not be empty.");
      element0.hasClass("bdi");
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("t4:.]IK3O921'y", "org.jsoup.nodes.Element$1");
      document0.getElementsByAttributeValueMatching("org.jsoup.nodes.Element$1", "@+UN]Ab^Iog@'+8O");
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Document document0 = Document.createShell("p");
      Document document1 = new Document("");
      Element element0 = document0.doClone(document1);
      element0.nextElementSibling();
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("3H7QKgGY_oCV2!Om", "");
      document0.siblingIndex = 3;
      Node[] nodeArray0 = new Node[9];
      // Undeclared exception!
//      try { 
        document0.insertChildren(0, nodeArray0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Array must not contain any null objects
//         //
//         verifyException("org.jsoup.helper.Validate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Document document0 = new Document("eSk80>o");
      Node[] nodeArray0 = new Node[4];
      // Undeclared exception!
//      try { 
        document0.insertChildren(0, nodeArray0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Array must not contain any null objects
//         //
//         verifyException("org.jsoup.helper.Validate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed(".", ".");
      LinkedList<PseudoTextElement> linkedList0 = new LinkedList<PseudoTextElement>();
      document0.insertChildren(1, (Collection<? extends Node>) linkedList0);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Document document0 = Document.createShell("(DV3U");
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "(DV3U");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      document0.outerHtmlTail(stringBuffer0, 1710, document_OutputSettings0);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      ParseSettings parseSettings0 = new ParseSettings(true, true);
      Tag tag0 = Tag.valueOf("X", parseSettings0);
      CDataNode cDataNode0 = new CDataNode("org.jsoup.nodes.Element$1");
      Attributes attributes0 = cDataNode0.attributes();
      FormElement formElement0 = new FormElement(tag0, "X", attributes0);
      MockFile mockFile0 = new MockFile("org.jsoup.nodes.Element$1", "Insert position out of bounds.");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      formElement0.outerHtmlHead(mockPrintStream0, 27, document_OutputSettings0);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Document document0 = Document.createShell("");
      document0.nodelistChanged();
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Parser parser0 = Parser.htmlParser();
      Document document0 = parser0.parseInput(";zOqW!l4K6'7Lp", ";zOqW!l4K6'7Lp");
      document0.ensureChildNodes();
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Document document0 = Document.createShell("");
      document0.doSetBaseUri("#root");
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Parser parser0 = Parser.xmlParser();
      Document document0 = parser0.parseInput("8z#qzrAmzb0G>EgpW6G", "body");
      document0.wrap("uVz$j8op]yL4n");
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Document document0 = Parser.parse("tag name must not be empty. queue not long enough to consume sequence", "tag name must not be empty. queue not long enough to consume sequence");
      Element element0 = document0.body();
      element0.wrap("<html>\n <head></head>\n <body>\n  tag name must not be empty. queue not long enough to consume sequence\n </body>\n</html>");
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Parser parser0 = Parser.htmlParser();
      Document document0 = parser0.parseInput("", "SB3MGYB");
      Element element0 = document0.body();
      element0.val("");
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Document document0 = new Document("?>nt");
      document0.val("Tag name must not be empty.");
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("aXFM~wF]-\"$HISqU5P", "head");
      Element element0 = document0.appendTo(document0);
      element0.toggleClass("(uka");
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Document document0 = Document.createShell(":nth-child(%d)");
      Element element0 = document0.head();
      element0.toggleClass("action");
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Document document0 = new Document("h");
      document0.toggleClass("Tnpxd9i?Jmn8");
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("`", "");
      document0.appendChild(document0);
      document0.text("x5");
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("3-A:>dLH(Y", "3-A:>dLH(Y");
      document0.setSiblingIndex((-1000));
      document0.text("3-A:>dLH(Y");
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Document document0 = Parser.parse("#root", "#root");
      Element element0 = document0.head();
      element0.text("org.jsoup.nodes.Element");
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Document document0 = Parser.parse("java.lang.string@0000000039", "java.lang.string@0000000039");
      Element element0 = document0.prependElement("rp");
      element0.text("java.lang.string@0000000039");
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("", "`");
      document0.text();
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment(":nth-child(%d)", "action");
      document0.tagName("head");
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("p", "p");
      Element element0 = document0.body();
      element0.tagName("html > body");
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("Queue not long enough to consume sequence", "Queue not long enough to consume sequence");
      Element element0 = document0.createElement("oojF[=");
      element0.tagName("j(TAwyC&T'eNBWPciTw");
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Tag tag0 = Tag.valueOf("BogusComment");
      CDataNode cDataNode0 = new CDataNode((String) null);
      Attributes attributes0 = cDataNode0.attributes();
      FormElement formElement0 = new FormElement(tag0, "option", attributes0);
      formElement0.tagName();
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("y;m}", "y;m}");
      document0.tag();
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Document document0 = Parser.parse("Queue not long enough to consume sequence", "Queue not long enough to consume sequence");
      Element element0 = document0.head();
      element0.shallowClone();
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("`", "");
      document0.selectFirst("sup");
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Document document0 = Parser.parse("Could not determine a form action URL for submit. Ensure you set a base URI when parsing.", ":root");
      Element element0 = document0.createElement("marqu");
      document0.appendChild(element0);
      document0.selectFirst("marqu");
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Document document0 = Parser.parse("Could not determine a form action URL for submit. Ensure you set a base URI when parsing.", ":root");
      document0.selectFirst(":root");
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Document document0 = Document.createShell("");
      Element element0 = document0.body();
      element0.removeClass("");
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Document document0 = new Document("h");
      Document document1 = Parser.parseBodyFragmentRelaxed(".", ".");
      document1.appendChild(document0);
      document0.previousElementSiblings();
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Document document0 = new Document("Could not determine a form action URL for submit. Ensure you set a base URI when parsing.");
      Document document1 = document0.normalise();
      Element element0 = document1.head();
      element0.prependText("Qbl]b/1=v!Y");
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("Queue not long enough to consume sequence", "Queue not long enough to consume sequence");
      document0.appendTo(document0);
      document0.prependText("Must be false");
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Document document0 = Parser.parse("a\u0001th", "");
      document0.prependElement("p");
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Element element0 = new Element("2.");
      Document document0 = Parser.parseBodyFragmentRelaxed("2.", "2.");
      Element element1 = document0.appendChild(element0);
      Element element2 = element0.previousElementSibling();
      element2.prependChild(element1);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Document document0 = new Document("meta");
      Element element0 = document0.shallowClone();
      document0.prependChild(element0);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("h", "h");
      Element element0 = document0.head();
      element0.prepend("muted");
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Element element0 = new Element("2.");
      Document document0 = Parser.parseBodyFragmentRelaxed("2.", "2.");
      document0.appendChild(element0);
      element0.prepend("2.");
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Document document0 = Parser.parse("", " />");
      document0.parents();
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("t4:.]IK3O921'y", "org.jsoup.nodes.Element$1");
      Element element0 = document0.body();
      element0.parents();
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Element element0 = new Element("2.");
      Document document0 = Parser.parse("2.", "2.");
      Element element1 = document0.appendChild(element0);
      element1.appendTo(element0);
      document0.parent();
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Parser parser0 = Parser.htmlParser();
      Document document0 = parser0.parseInput("select", "select");
      Element element0 = document0.body();
      element0.parent();
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Document document0 = new Document("java.lang.string@0000000039");
      Document document1 = (Document)document0.addClass("u\"1[");
      document1.parentNode = (Node) document0;
      document1.parent();
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Element element0 = new Element("2.");
      Document document0 = Parser.parse("2.", "2.");
      document0.appendTo(element0);
      document0.parent();
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("eSk80>o", "eSk80>o");
      ParseErrorList parseErrorList0 = ParseErrorList.tracking(3);
      List<Node> list0 = Parser.parseFragment("eSk80>o", (Element) document0, "org.jsoup.nodes.Element", parseErrorList0);
      document0.childNodes = list0;
      document0.ownText();
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("y;m}", "y;m}");
      document0.nodeName();
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Document document0 = new Document("^Up");
      Document document1 = document0.normalise();
      Element element0 = document1.head();
      element0.nextElementSibling();
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Document document0 = Parser.parse("Could not determine a form action URL for submit. Ensure you set a base URI when parsing.", ":root");
      document0.appendTo(document0);
      document0.lastElementSibling();
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Document document0 = new Document("^Up");
      Document document1 = document0.normalise();
      Element element0 = document1.head();
      element0.isBlock();
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Tag tag0 = Tag.valueOf("head");
      Element element0 = new Element(tag0, "head");
      Evaluator.TagEndsWith evaluator_TagEndsWith0 = new Evaluator.TagEndsWith("head");
      element0.is((Evaluator) evaluator_TagEndsWith0);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Document document0 = Document.createShell("T;;R(UNx5vREkNDV-=");
      Element element0 = document0.head();
      element0.is("html > head");
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("", "time");
      CDataNode cDataNode0 = new CDataNode("");
      Node[] nodeArray0 = new Node[3];
      nodeArray0[0] = (Node) document0;
      nodeArray0[1] = (Node) cDataNode0;
      nodeArray0[2] = (Node) document0;
      document0.insertChildren(0, nodeArray0);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Document document0 = Parser.parse("#root", "#root");
      Element element0 = document0.createElement("Queue not long enough to consume sequence");
      document0.appendChild(element0);
      element0.html("#root");
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment(":nth-child(%d)", "action");
      Element element0 = document0.head();
      element0.html("Could not determine a form action URL for submit. Ensure you set a base URI when parsing.");
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("", "`");
      document0.html("");
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Document document0 = Document.createShell("");
      document0.html();
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Element element0 = new Element("2.");
      element0.html();
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      Tag tag0 = Tag.valueOf(".^AQ&VuLNh0");
      FormElement formElement0 = new FormElement(tag0, "b.kody", attributes0);
      formElement0.hasAttributes();
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Parser parser0 = Parser.htmlParser();
      Document document0 = parser0.parseInput(";zOqW!l4K6'7Lp", "3H7QKgGY_oCV2!Om");
      document0.hasAttributes();
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment(":nth-child(%d)", "action");
      Pattern pattern0 = Pattern.compile("", (-1436010313));
      document0.getElementsMatchingText(pattern0);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      Tag tag0 = Tag.valueOf(".^AQ&VuLNh0");
      FormElement formElement0 = new FormElement(tag0, "body", attributes0);
      Pattern pattern0 = Pattern.compile("T>3quZ'G?e", 0);
      formElement0.getElementsMatchingOwnText(pattern0);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Document document0 = Parser.parse("Could not determine a form action URL for submit. Ensure you set a base URI when parsing.", ":root");
      Pattern pattern0 = Pattern.compile("");
      document0.getElementsMatchingOwnText(pattern0);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Parser parser0 = Parser.htmlParser();
      Document document0 = parser0.parseInput(";zOqW!l4K6'7Lp", ";zOqW!l4K6'7Lp");
      document0.getElementsMatchingOwnText(";zOqW!l4K6'7Lp");
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Element element0 = new Element("QM#jW4=^)BDQpC/~:");
      element0.getElementsContainingText("QM#jW4=^)BDQpC/~:");
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("Queue not long enough to consume sequence", "Queue not long enough to consume sequence");
      document0.getElementsByTag("MeC L0NC+WS;qL");
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Element element0 = new Element("Tag name must not be empty.");
      element0.getElementsByTag("Tag name must not be empty.");
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Document document0 = Parser.parse("", " />");
      document0.getElementsByIndexLessThan(0);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("t4:.]IK3O921'y", "org.jsoup.nodes.Element$1");
      document0.getElementsByIndexGreaterThan(1);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Element element0 = new Element("a3kC");
      element0.getElementsByIndexEquals((-1324));
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Document document0 = Parser.parse("+}Eb(FAo`)l", "+}Eb(FAo`)l");
      document0.getElementsByAttributeStarting("+}Eb(FAo`)l");
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Tag tag0 = Tag.valueOf("class");
      Attributes attributes0 = new Attributes();
      Attribute attribute0 = Attribute.createFromEncoded("LjgGsGJ'cb", "tag name must not be empty. tag name must not be empty.");
      Attributes attributes1 = attributes0.put(attribute0);
      FormElement formElement0 = new FormElement(tag0, "class", attributes1);
      formElement0.getElementsByAttributeStarting("LjgGsGJ'cb");
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Tag tag0 = Tag.valueOf("class");
      Attributes attributes0 = new Attributes();
      Attribute attribute0 = Attribute.createFromEncoded("LjgGsGJ'cb", "tag name must not be empty. tag name must not be empty.");
      Attributes attributes1 = attributes0.put(attribute0);
      FormElement formElement0 = new FormElement(tag0, "class", attributes1);
      formElement0.getElementsByAttribute("LjgGsGJ'cb");
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Document document0 = Document.createShell("");
      Element element0 = document0.body();
      element0.firstElementSibling();
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Document document0 = Document.createShell("tRg zame must not be emptyw quede not long enough to consume sequence");
      Element element0 = document0.body();
      element0.empty();
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Document document0 = Parser.parse("Queue not long enough to consume sequence", "Queue not long enough to consume sequence");
      Element element0 = document0.appendChild(document0);
      element0.empty();
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Document document0 = Parser.parse("S!ve!Q6E", "Queue not long enough to consume sequence");
      Element element0 = document0.head();
      Element element1 = element0.nextElementSibling();
      element1.doClone(element0);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment(":nth-child(%d)", "action");
      Element element0 = document0.head();
      element0.doClone((Node) null);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("t4:.]IK3O921'y", "org.jsoup.nodes.Element$1");
      Element element0 = document0.body();
      element0.clone();
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Document document0 = Document.createShell("p");
      document0.clone();
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Document document0 = Document.createShell("tag name must not be empty. queue not long enough to consume sequence");
      Element element0 = document0.body();
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      element0.classNames(set0);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Document document0 = new Document("h");
      document0.addClass("org.jsoup.nodes.Element$NodeList");
      document0.classNames();
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Document document0 = new Document("Queue not long enough to consume sequence");
      document0.addClass("Queue not long enough to consume sequence");
      document0.className();
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment(":nth-child(%d)", ",D@L");
      document0.children();
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      Tag tag0 = Tag.valueOf(".^AQ&VuLNh0");
      FormElement formElement0 = new FormElement(tag0, "body", attributes0);
      formElement0.childNodeSize();
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Document document0 = Parser.parse("java.lang.string@0000000039", "java.lang.string@0000000039");
      document0.childNodeSize();
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("2.", "2.");
      Element element0 = document0.head();
      element0.before((Node) document0);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Document document0 = Document.createShell("p");
      Document document1 = (Document)document0.appendTo(document0);
      document1.before((Node) document0);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Document document0 = Parser.parse("2.", "2.");
      Element element0 = document0.head();
      element0.before("2w,\"RQ#7ZHjy@$.]@Wf");
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Element element0 = new Element("id");
      Document document0 = new Document("id");
      element0.prependElement("rp");
      document0.appendChild(element0);
      element0.before("=CWV");
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Document document0 = Document.createShell("b(#rsXW>JmUug<");
      document0.baseUri();
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Element element0 = new Element("QM#jW4=^)BDQpC/~:");
      element0.baseUri();
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Tag tag0 = Tag.valueOf("3H7QKgGY_oCV2!Om");
      CDataNode cDataNode0 = new CDataNode("3H7QKgGY_oCV2!Om");
      Attributes attributes0 = cDataNode0.attributes();
      FormElement formElement0 = new FormElement(tag0, "b.kody", attributes0);
      formElement0.attributes();
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Document document0 = Parser.parse("2.", "2.");
      Element element0 = document0.createElement("body");
      element0.attr("ITAK", true);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Document document0 = Parser.parse("Queue not long enough to consume sequence", "Queue not long enough to consume sequence");
      document0.appendChild(document0);
      document0.attr("br", false);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("8N{S!-8~Z@TZ^", "t");
      Element element0 = document0.head();
      element0.attr("[iuqk7V~8fF(nO:7<zS", "MVeaY'");
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("p", "p");
      Element element0 = document0.body();
      element0.appendTo(document0);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Document document0 = new Document("h");
      Document document1 = new Document("h");
      document0.appendTo(document1);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Element element0 = new Element("2.");
      Document document0 = Parser.parse("2.", "2.");
      document0.appendChild(element0);
      element0.appendText("could not determine a form action url for submit. ensure you set a base uri when parsing.");
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Document document0 = Parser.parse("(DV3U", "(DV3U");
      Element element0 = document0.head();
      element0.appendText("DELETE");
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Element element0 = new Element("id");
      element0.appendElement("html");
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Document document0 = Parser.parse("2.", "2.");
      document0.appendElement("2.");
      document0.appendChild(document0);
      document0.previousElementSibling();
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      Element element0 = new Element("td");
      element0.appendChild(element0);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      Document document0 = new Document("");
      document0.append("");
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("CZU=2[/qNKERm}", "CZU=2[/qNKERm}");
      Element element0 = document0.prependElement("compact");
      element0.after((Node) document0);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment(":nth-child(%d)", "action");
      Element element0 = document0.head();
      element0.after((Node) document0);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("2.", "2.");
      Element element0 = new Element("id");
      document0.appendChild(element0);
      element0.after("");
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      Document document0 = Document.createShell("p");
      Document document1 = (Document)document0.doClone(document0);
      document1.after("9sN*,(?rHwinRgV14");
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      Document document0 = Parser.parse("Could not determine a form action URL for submit. Ensure you set a base URI when parsing.", ":root");
      Element element0 = document0.appendTo(document0);
      element0.addClass("Could not determine a form action URL for submit. Ensure you set a base URI when parsing.");
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      Document document0 = Document.createShell("Could not determine a form action URL for submit. Esure you set a base URI when parsing.");
      Element element0 = document0.head();
      element0.addClass("m?q_pX$+6fv");
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      Document document0 = Parser.parse("Could not determine a form action URL for submit. Ensure you set a base URI when parsing.", ":root");
      document0.appendChild(document0);
      // Undeclared exception!
      document0.wrap("br");
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("Y&|v^mQzARf", "Y&|v^mQzARf");
      // Undeclared exception!
//      try { 
        document0.wrap("");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // String must not be empty
//         //
//         verifyException("org.jsoup.helper.Validate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("uue ot long enough to consume sequence", "uue ot long enough to consume sequence");
      document0.appendTo(document0);
      // Undeclared exception!
      document0.val("Tag name must not be empty.");
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      Document document0 = Parser.parse("Could not determine a form action URL for submit. Ensure you set a base URI when parsing.", ":root");
      // Undeclared exception!
//      try { 
        document0.toggleClass((String) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Object must not be null
//         //
//         verifyException("org.jsoup.helper.Validate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      Document document0 = new Document("Queue not long enough to consume sequence");
      // Undeclared exception!
//      try { 
        document0.text("Queue not long enough to consume sequence");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.jsoup.nodes.Document", e);
//      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("java.lang.string@0000000039", "java.lang.string@0000000039");
      // Undeclared exception!
//      try { 
        document0.text((String) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Object must not be null
//         //
//         verifyException("org.jsoup.helper.Validate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      Document document0 = Document.createShell("p");
      document0.appendTo(document0);
      // Undeclared exception!
      document0.tagName("html");
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      Document document0 = Parser.parse("a\u0001th", "");
      // Undeclared exception!
//      try { 
        document0.tagName("");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Tag name must not be empty.
//         //
//         verifyException("org.jsoup.helper.Validate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("", "`");
      // Undeclared exception!
//      try { 
        document0.selectFirst(" />");
//        fail("Expecting exception: IllegalStateException");
      
//      } catch(IllegalStateException e) {
//         //
//         // Could not parse query ' />': unexpected token at '/>'
//         //
//         verifyException("org.jsoup.select.QueryParser", e);
//      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      Document document0 = Parser.parse("Could not determine a form action URL for submit. Ensure you set a base URI when parsing.", ":root");
      document0.html("p&S_;?{L~EA~/XHQ%N");
      // Undeclared exception!
//      try { 
        document0.selectFirst(":root");
//        fail("Expecting exception: IndexOutOfBoundsException");
      
//      } catch(IndexOutOfBoundsException e) {
//         //
//         // Index: 0, Size: 0
//         //
//         verifyException("java.util.ArrayList", e);
//      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      Document document0 = Parser.parse("$U(", "Queue not long enough to consume sequence");
      // Undeclared exception!
//      try { 
        document0.selectFirst((String) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // String must not be empty
//         //
//         verifyException("org.jsoup.helper.Validate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      Element element0 = new Element("a3kC");
      // Undeclared exception!
//      try { 
        element0.select("^WKr=Y");
//        fail("Expecting exception: IllegalStateException");
      
//      } catch(IllegalStateException e) {
//         //
//         // Could not parse query '^WKr=Y': unexpected token at '^WKr=Y'
//         //
//         verifyException("org.jsoup.select.QueryParser", e);
//      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      Document document0 = Parser.parse("", " />");
      // Undeclared exception!
//      try { 
        document0.select("");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // String must not be empty
//         //
//         verifyException("org.jsoup.helper.Validate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      Tag tag0 = Tag.valueOf(":root");
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = new FormElement(tag0, "textarea", attributes0);
      // Undeclared exception!
//      try { 
        formElement0.removeClass((String) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Object must not be null
//         //
//         verifyException("org.jsoup.helper.Validate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      Document document0 = Parser.parse("Could not determine a form action URL for submit. Ensure you set a base URI when parsing.", ":root");
      List<Node> list0 = document0.childNodes();
      document0.childNodes = list0;
      // Undeclared exception!
//      try { 
        document0.prependText("br");
//        fail("Expecting exception: UnsupportedOperationException");
      
//      } catch(UnsupportedOperationException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.util.Collections$UnmodifiableList", e);
//      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("Queue not long enough to consume sequence", "Queue not long enough to consume sequence");
      // Undeclared exception!
//      try { 
        document0.prependText((String) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Object must not be null
//         //
//         verifyException("org.jsoup.helper.Validate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      Parser parser0 = Parser.htmlParser();
      Document document0 = parser0.parseInput(";zOqW!l4K6'7Lp", ";zOqW!l4K6'7Lp");
      // Undeclared exception!
//      try { 
        document0.prependElement("");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // String must not be empty
//         //
//         verifyException("org.jsoup.helper.Validate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      Parser parser0 = Parser.xmlParser();
      Document document0 = parser0.parseInput(")ZzSs", "eof");
      List<Node> list0 = parser0.parseFragmentInput(".", document0, "wV|I");
      Element element0 = document0.prependText("d&fw)m}w?[y6me");
      element0.childNodes = list0;
      // Undeclared exception!
//      try { 
        document0.prependChild(document0);
//        fail("Expecting exception: UnsupportedOperationException");
      
//      } catch(UnsupportedOperationException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.util.Collections$UnmodifiableList", e);
//      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      Document document0 = Document.createShell("p");
      Element element0 = document0.appendChild(document0);
      // Undeclared exception!
      element0.prepend("t;");
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      Document document0 = Document.createShell("org.jsoup.nodes.Element$NodeList");
      // Undeclared exception!
//      try { 
        document0.prepend((String) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Object must not be null
//         //
//         verifyException("org.jsoup.helper.Validate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      Document document0 = new Document("java.lang.string@0000000036 tag name must bdi be empty.");
      CDataNode cDataNode0 = new CDataNode("java.lang.string@0000000036 tag name must bdi be empty.");
      document0.parentNode = (Node) cDataNode0;
      // Undeclared exception!
//      try { 
        document0.parents();
//        fail("Expecting exception: ClassCastException");
      
//      } catch(ClassCastException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      Document document0 = Document.createShell("org.jsoup.select.Evaluator$ContainsData");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      MockFileWriter mockFileWriter0 = new MockFileWriter("org.jsoup.select.Evaluator$ContainsData");
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.indentAmount(23);
      // Undeclared exception!
      document0.outerHtmlTail(mockFileWriter0, 1415, document_OutputSettings1);
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      Document document0 = Parser.parse("Queue not long enough to consume sequence", "Queue not long enough to consume sequence");
      // Undeclared exception!
//      try { 
        document0.outerHtmlTail((Appendable) null, 24, (Document.OutputSettings) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.jsoup.nodes.Element", e);
//      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      Document document0 = Document.createShell("L+");
      MockFileWriter mockFileWriter0 = new MockFileWriter("2.", true);
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      document_OutputSettings0.indentAmount(914);
      // Undeclared exception!
      document0.outerHtmlHead(mockFileWriter0, 914, document_OutputSettings0);
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      Parser parser0 = Parser.htmlParser();
      Document document0 = parser0.parseInput(";zOqW!l4K6'7Lp", ";zOqW!l4K6'7Lp");
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(2062);
      // Undeclared exception!
//      try { 
        document0.outerHtmlHead(charArrayWriter0, 2062, (Document.OutputSettings) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.jsoup.nodes.Element", e);
//      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("2.", "2.");
      StringBuffer stringBuffer0 = new StringBuffer(15);
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      // Undeclared exception!
//      try { 
        document0.outerHtmlHead(stringBuffer0, (-86), document_OutputSettings0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // width must be > 0
//         //
//         verifyException("org.jsoup.internal.StringUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      Document document0 = Parser.parse("", " />");
      // Undeclared exception!
//      try { 
        document0.lastElementSibling();
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.jsoup.nodes.Element", e);
//      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("Queue not long enough to consume sequence", "Queue not long enough to consume sequence");
      document0.appendTo(document0);
      Evaluator.ContainsText evaluator_ContainsText0 = new Evaluator.ContainsText("fMiMx+0%");
      // Undeclared exception!
      document0.is((Evaluator) evaluator_ContainsText0);
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("Queue not long enough to consume sequence", "Queue not long enough to consume sequence");
      Evaluator.Matches evaluator_Matches0 = new Evaluator.Matches((Pattern) null);
      // Undeclared exception!
//      try { 
        document0.is((Evaluator) evaluator_Matches0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.jsoup.select.Evaluator$Matches", e);
//      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      Document document0 = new Document("6NF47[8U");
      CDataNode cDataNode0 = new CDataNode("6NF47[8U");
      Element element0 = document0.doClone(cDataNode0);
      Evaluator.IsNthLastChild evaluator_IsNthLastChild0 = new Evaluator.IsNthLastChild(917, 26);
      // Undeclared exception!
//      try { 
        element0.is((Evaluator) evaluator_IsNthLastChild0);
//        fail("Expecting exception: ClassCastException");
      
//      } catch(ClassCastException e) {
//         //
//         // org.jsoup.nodes.CDataNode cannot be cast to org.jsoup.nodes.Element
//         //
//         verifyException("org.jsoup.nodes.Element", e);
//      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      Parser parser0 = Parser.htmlParser();
      Document document0 = parser0.parseInput(";zOqW!l4K6'7Lp", ";zOqW!l4K6'7Lp");
      // Undeclared exception!
//      try { 
        document0.is(";zOqW!l4K6'7Lp");
//        fail("Expecting exception: IllegalStateException");
      
//      } catch(IllegalStateException e) {
//         //
//         // Could not parse query ';zOqW!l4K6'7Lp': unexpected token at ';zOqW!l4K6'7Lp'
//         //
//         verifyException("org.jsoup.select.QueryParser", e);
//      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("UA}W{|B2*lXp", "");
      CDataNode cDataNode0 = new CDataNode(":containsData(%s)");
      Node[] nodeArray0 = new Node[5];
      nodeArray0[0] = (Node) cDataNode0;
      nodeArray0[1] = (Node) cDataNode0;
      cDataNode0.reparentChild(nodeArray0[0]);
      nodeArray0[2] = (Node) cDataNode0;
      nodeArray0[3] = (Node) cDataNode0;
      nodeArray0[4] = (Node) document0;
      // Undeclared exception!
//      try { 
        document0.insertChildren(0, nodeArray0);
//        fail("Expecting exception: UnsupportedOperationException");
      
//      } catch(UnsupportedOperationException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.util.AbstractList", e);
//      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("UA}W{|B2*lXp", "");
      CDataNode cDataNode0 = new CDataNode(":containsData(%s)");
      Node[] nodeArray0 = new Node[5];
      nodeArray0[0] = (Node) cDataNode0;
      nodeArray0[1] = (Node) cDataNode0;
      nodeArray0[2] = (Node) cDataNode0;
      nodeArray0[3] = (Node) cDataNode0;
      nodeArray0[4] = (Node) document0;
      // Undeclared exception!
//      try { 
        document0.insertChildren(0, nodeArray0);
//        fail("Expecting exception: IndexOutOfBoundsException");
      
//      } catch(IndexOutOfBoundsException e) {
//         //
//         // Index: 0, Size: 0
//         //
//         verifyException("java.util.ArrayList", e);
//      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      Document document0 = new Document("#root");
      document0.appendChild(document0);
      // Undeclared exception!
      document0.html("textarea");
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      Parser parser0 = Parser.htmlParser();
      Document document0 = parser0.parseInput(";zOqW!l4K6'7Lp", ";zOqW!l4K6'7Lp");
      PipedWriter pipedWriter0 = new PipedWriter();
      // Undeclared exception!
//      try { 
        document0.html(pipedWriter0);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // java.io.IOException: Pipe not connected
//         //
//         verifyException("org.jsoup.nodes.Node$OuterHtmlVisitor", e);
//      }
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      Document document0 = Parser.parse("Queue not long enough to consume sequence", "Queue not long enough to consume sequence");
      document0.appendChild(document0);
      StringWriter stringWriter0 = new StringWriter();
      // Undeclared exception!
      document0.html((Appendable) stringWriter0);
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      Document document0 = Parser.parse("Could not determine a form action URL for submit. Ensure you set a base URI when parsing.", ":root");
      Element element0 = document0.appendTo(document0);
      // Undeclared exception!
      element0.html();
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      Document document0 = Parser.parse("2.", "ET8+Xps/76PR!hjqI}");
      document0.childNodes = null;
      // Undeclared exception!
//      try { 
        document0.html();
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed(".", ".");
      // Undeclared exception!
//      try { 
        document0.hasClass((String) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.jsoup.nodes.Element", e);
//      }
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("3H7QKgGY_oCV2!Om", "");
      // Undeclared exception!
//      try { 
        document0.getElementsMatchingText((Pattern) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.jsoup.select.Evaluator$Matches", e);
//      }
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      Document document0 = Document.createShell(":root");
      // Undeclared exception!
//      try { 
        document0.getElementsMatchingText((String) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      Element element0 = new Element("Tag name must not be empty.");
      // Undeclared exception!
//      try { 
        element0.getElementsMatchingText("~)m{");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Pattern syntax error: ~)m{
//         //
//         verifyException("org.jsoup.nodes.Element", e);
//      }
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      ParseSettings parseSettings0 = ParseSettings.htmlDefault;
      Tag tag0 = Tag.valueOf("|cl>k#&-wpj", parseSettings0);
      CDataNode cDataNode0 = new CDataNode("|cl>k#&-wpj");
      Attributes attributes0 = cDataNode0.attributes();
      FormElement formElement0 = new FormElement(tag0, "C{xk-a", attributes0);
      formElement0.childNodes = null;
      // Undeclared exception!
//      try { 
        formElement0.getElementsMatchingOwnText("org.jsoup.nodes.Element$2");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.jsoup.nodes.Element", e);
//      }
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("CZU=2[/qNKERm}", "CZU=2[/qNKERm}");
      // Undeclared exception!
//      try { 
        document0.getElementsMatchingOwnText("#:6CX(IK?L7f{A@8m");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Pattern syntax error: #:6CX(IK?L7f{A@8m
//         //
//         verifyException("org.jsoup.nodes.Element", e);
//      }
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      Document document0 = Parser.parse("java.lang.7tring@0000000039", "java.lang.7tring@0000000039");
      Element element0 = document0.prependElement("rp");
      element0.childNodes = null;
      // Undeclared exception!
//      try { 
        document0.getElementsContainingOwnText("s+");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.jsoup.nodes.Element", e);
//      }
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      Document document0 = Document.createShell("6NF47[8U");
      // Undeclared exception!
//      try { 
        document0.getElementsByTag((String) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // String must not be empty
//         //
//         verifyException("org.jsoup.helper.Validate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      Document document0 = Parser.parse("Could not determine a form action URL for submit. Ensure you set a base URI when parsing.", ":root");
      // Undeclared exception!
//      try { 
        document0.getElementsByClass((String) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // String must not be empty
//         //
//         verifyException("org.jsoup.helper.Validate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("eSk80>o", "eSk80>o");
      // Undeclared exception!
//      try { 
        document0.getElementsByAttributeValueStarting((String) null, (String) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // String must not be empty
//         //
//         verifyException("org.jsoup.helper.Validate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      Document document0 = Document.createShell("org.jsoup.nodes.Element$2");
      // Undeclared exception!
//      try { 
        document0.getElementsByAttributeValueNot("+` vDwsNnZoc", (String) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // String must not be empty
//         //
//         verifyException("org.jsoup.helper.Validate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      Parser parser0 = Parser.htmlParser();
      Document document0 = parser0.parseInput("z,fx]t1)xO_}uU~SFa", " > ");
      // Undeclared exception!
//      try { 
        document0.getElementsByAttributeValueMatching((String) null, (String) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      Document document0 = Parser.parse("Could not determine a form action URL for submit. 7nsure you s[t a base URI when parsing.", ":root");
      // Undeclared exception!
//      try { 
        document0.getElementsByAttributeValueMatching("+OY[:(,O@eb\"X5x/93A", "p&S_;?{L~EA~/XHQ%N");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Pattern syntax error: p&S_;?{L~EA~/XHQ%N
//         //
//         verifyException("org.jsoup.nodes.Element", e);
//      }
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      Document document0 = new Document("vSR? 2");
      // Undeclared exception!
//      try { 
        document0.getElementsByAttributeValueEnding("", "");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // String must not be empty
//         //
//         verifyException("org.jsoup.helper.Validate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      Tag tag0 = Tag.valueOf("head");
      Element element0 = new Element(tag0, "head");
      // Undeclared exception!
//      try { 
        element0.getElementsByAttributeValueContaining((String) null, "");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // String must not be empty
//         //
//         verifyException("org.jsoup.helper.Validate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      Document document0 = Parser.parse("Queue not long enough to consume sequence", "Queue not long enough to consume sequence");
      document0.childNodes = null;
      // Undeclared exception!
//      try { 
        document0.getElementsByAttributeValue("java.lang.string@0000000098", "java.lang.string@0000000098");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.jsoup.nodes.Element", e);
//      }
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      Document document0 = Parser.parse("", " />");
      // Undeclared exception!
//      try { 
        document0.getElementsByAttributeValue("0GhRf^ ox", (String) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // String must not be empty
//         //
//         verifyException("org.jsoup.helper.Validate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment(":nth-child(%d)", "action");
      // Undeclared exception!
//      try { 
        document0.getElementsByAttribute("");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // String must not be empty
//         //
//         verifyException("org.jsoup.helper.Validate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      Document document0 = new Document("^Up");
      // Undeclared exception!
//      try { 
        document0.getElementById("");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // String must not be empty
//         //
//         verifyException("org.jsoup.helper.Validate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      Document document0 = Document.createShell("E+Y&P-|?%AtaSn=");
      // Undeclared exception!
//      try { 
        document0.firstElementSibling();
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.jsoup.nodes.Element", e);
//      }
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("8", "=Fs#d?");
      TextNode textNode0 = new TextNode("8", "8");
      document0.setParentNode(textNode0);
      // Undeclared exception!
//      try { 
        document0.firstElementSibling();
//        fail("Expecting exception: ClassCastException");
      
//      } catch(ClassCastException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      ParseSettings parseSettings0 = ParseSettings.htmlDefault;
      Tag tag0 = Tag.valueOf("|cl>k#&-wpj", parseSettings0);
      CDataNode cDataNode0 = new CDataNode("|cl>k#&-wpj");
      Attributes attributes0 = cDataNode0.attributes();
      FormElement formElement0 = new FormElement(tag0, "C{xk-a", attributes0);
      formElement0.childNodes = null;
      // Undeclared exception!
//      try { 
        formElement0.dataNodes();
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.jsoup.nodes.Element", e);
//      }
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("Queue not long enough to consume sequence", "Queue not long enough to consume sequence");
      Element element0 = document0.createElement("Queue not long enough to consume sequence");
      Element element1 = document0.addClass("Queue not long enough to consume sequence");
      document0.appendTo(element0);
      // Undeclared exception!
//      try { 
        element1.cssSelector();
//        fail("Expecting exception: IllegalStateException");
      
//      } catch(IllegalStateException e) {
//         //
//         // Could not parse query '#root.java.lang.String@0000000099': unexpected token at '@0000000099'
//         //
//         verifyException("org.jsoup.select.QueryParser", e);
//      }
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      Document document0 = Parser.parse("2.", "2.");
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      linkedHashSet0.add((String) null);
      // Undeclared exception!
//      try { 
        document0.classNames((Set<String>) linkedHashSet0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.evosuite.runtime.System", e);
//      }
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed(":%s(%d)", ":%s(%d)");
      // Undeclared exception!
//      try { 
        document0.classNames((Set<String>) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Object must not be null
//         //
//         verifyException("org.jsoup.helper.Validate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      Document document0 = Parser.parse("#root", "#root");
      // Undeclared exception!
//      try { 
        document0.child((-1500));
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      Document document0 = Parser.parse("Could not determine a form action URL for submit. Ensure you set a base URI when parsing.", ":root");
      document0.appendTo(document0);
      // Undeclared exception!
      document0.before("Pattern syntax error: ");
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("Queue not long enough to consume sequence", "Queue not long enough to consume sequence");
      // Undeclared exception!
//      try { 
        document0.attr((String) null, false);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Object must not be null
//         //
//         verifyException("org.jsoup.helper.Validate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      Document document0 = Document.createShell("ut4O/");
      document0.appendChild(document0);
      // Undeclared exception!
      document0.attr("org.jsoup.select.Evaluator$AttributeWithValueNot", "");
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      Document document0 = Parser.parse("Could not determine a form action URL for submit. Ensure you set a base URI when parsing.", ":root");
      // Undeclared exception!
//      try { 
        document0.attr((String) null, ":root");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.jsoup.parser.ParseSettings", e);
//      }
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("Mgc&.M%L.WFd%[", "0%])");
      Comment comment0 = new Comment("a )2M.a7qs}cFA", "Mgc&.M%L.WFd%[");
      Element element0 = document0.doClone(comment0);
      // Undeclared exception!
//      try { 
        element0.appendTo(document0);
//        fail("Expecting exception: UnsupportedOperationException");
      
//      } catch(UnsupportedOperationException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.util.AbstractList", e);
//      }
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      Document document0 = Parser.parse(":nth-child(%d)", ":nth-child(%d)");
      // Undeclared exception!
//      try { 
        document0.appendTo((Element) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Object must not be null
//         //
//         verifyException("org.jsoup.helper.Validate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      Document document0 = Document.createShell("");
      document0.appendChild(document0);
      // Undeclared exception!
      document0.appendElement("<html>\n <head></head>\n <body></body>\n</html>");
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      Parser parser0 = Parser.htmlParser();
      Document document0 = parser0.parseInput("9;G+GB-,lFc+6", "!I|*j>x>dw:]}");
      // Undeclared exception!
//      try { 
        document0.appendElement((String) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Object must not be null
//         //
//         verifyException("org.jsoup.helper.Validate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("2.", "2.");
      List<Node> list0 = document0.childNodes();
      document0.childNodes = list0;
      // Undeclared exception!
//      try { 
        document0.appendChild(document0);
//        fail("Expecting exception: UnsupportedOperationException");
      
//      } catch(UnsupportedOperationException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.util.Collections$UnmodifiableCollection", e);
//      }
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      Document document0 = new Document("TagName");
      CDataNode cDataNode0 = new CDataNode("'xntHd'IozAVeU]");
      Node node0 = cDataNode0.doClone(document0);
      // Undeclared exception!
//      try { 
        document0.appendChild(node0);
//        fail("Expecting exception: IndexOutOfBoundsException");
      
//      } catch(IndexOutOfBoundsException e) {
//         //
//         // Index: 0, Size: 0
//         //
//         verifyException("java.util.ArrayList", e);
//      }
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("3H7QKgGY_oCV2!Om", "");
      // Undeclared exception!
//      try { 
        document0.appendChild((Node) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Object must not be null
//         //
//         verifyException("org.jsoup.helper.Validate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      Parser parser0 = Parser.htmlParser();
      Document document0 = parser0.parseInput(";zOqW!l4K6'7Lp", ";zOqW!l4K6'7Lp");
      Element element0 = document0.appendChild(document0);
      // Undeclared exception!
      element0.append("");
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      Document document0 = Parser.parse("Could not determine a form action URL for submit. Ensure you set a base URI when parsing.", ":root");
      // Undeclared exception!
//      try { 
        document0.append((String) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Object must not be null
//         //
//         verifyException("org.jsoup.helper.Validate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      Document document0 = Parser.parse("Queue not long enough to consume sequence", "Queue not long enough to consume sequence");
      document0.appendChild(document0);
      // Undeclared exception!
//      try { 
        document0.after((Node) document0);
//        fail("Expecting exception: IndexOutOfBoundsException");
      
//      } catch(IndexOutOfBoundsException e) {
//         //
//         // Index: 2, Size: 1
//         //
//         verifyException("java.util.ArrayList", e);
//      }
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      Element element0 = new Element("2.");
      Document document0 = Parser.parseBodyFragmentRelaxed("2.", "2.");
      Document document1 = (Document)document0.appendChild(element0);
      element0.prependChild(document1);
      // Undeclared exception!
      document1.after("2.");
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      Document document0 = Parser.parse("br", "CZ0!H-dJ-o3r]OUmGnA");
      // Undeclared exception!
//      try { 
        document0.addClass((String) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Object must not be null
//         //
//         verifyException("org.jsoup.helper.Validate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      Tag tag0 = Tag.valueOf(":root");
      Attributes attributes0 = new Attributes();
      Element element0 = null;
//      try {
        element0 = new Element(tag0, (String) null, attributes0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Object must not be null
//         //
//         verifyException("org.jsoup.helper.Validate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      Element element0 = null;
//      try {
        element0 = new Element((Tag) null, "org.jsoup.nodes.Element");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Object must not be null
//         //
//         verifyException("org.jsoup.helper.Validate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      Element element0 = null;
//      try {
        element0 = new Element("");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // String must not be empty
//         //
//         verifyException("org.jsoup.helper.Validate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      Document document0 = Document.createShell("");
      StringWriter stringWriter0 = new StringWriter(0);
      BufferedWriter bufferedWriter0 = new BufferedWriter(stringWriter0);
      document0.html(bufferedWriter0);
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      Document document0 = Parser.parse("</", "</");
      document0.hasClass("</");
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      Document document0 = Document.createShell("p");
      Charset charset0 = document0.charset();
      Set<String> set0 = charset0.aliases();
      document0.classNames(set0);
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      Document document0 = Parser.parse("#root", "#root");
      document0.prependText("head");
      document0.data();
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      Document document0 = Document.createShell("(DV3U");
      document0.hasText();
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      Document document0 = Parser.parse("Could not determine a form action URL for submit. Ensure you set a base URI when parsing.", ":root");
      document0.prependText("body");
      document0.hasText();
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      Parser parser0 = Parser.htmlParser();
      Document document0 = parser0.parseInput(";zOqW!l4K6'7Lp", "3H7QKgGY_oCV2!Om");
      document0.elementSiblingIndex();
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("Queue not long enough to consume sequence", "Queue not long enough to consume sequence");
      Element element0 = document0.appendTo(document0);
      element0.elementSiblingIndex();
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      Document document0 = Parser.parse("Could not determine a form action URL for submit. Ensure you set a base URI when parsing.", ":root");
      Element element0 = document0.createElement("Could not determine a form action URL for submit. Ensure you set a base URI when parsing.");
      document0.appendTo(element0);
      document0.previousElementSibling();
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      Element element0 = new Element("2.");
      Document document0 = Parser.parse("2.", "2.");
      document0.appendChild(element0);
      element0.cssSelector();
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      Document document0 = Document.createShell("");
      Element element0 = document0.body();
      element0.append("H3!;)iz|UXk");
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      Document document0 = Document.createShell("p");
      document0.clearAttributes();
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      Element element0 = new Element("a3kC");
      element0.attributes();
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      Element element0 = new Element("a3kC");
      element0.children();
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      Document document0 = Document.createShell("action");
      document0.className();
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      Document document0 = Document.createShell("b(#rsXW>JmUug<");
      document0.parent();
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      Document document0 = Parser.parse("2.", "2.");
      // Undeclared exception!
//      try { 
        document0.getElementsMatchingOwnText((Pattern) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.jsoup.select.Evaluator$MatchesOwn", e);
//      }
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("eSk80>o", "eSk80>o");
      document0.ownText();
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("8N{S!-8~Z@TZ^", "t");
      document0.attr("[iuqk7V~8fF(nO:7<zS", "MVeaY'");
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment(":nth-child(%d)", "action");
      document0.isBlock();
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      Document document0 = Parser.parse("(DV3U", "(DV3U");
      document0.empty();
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("Queue not long enough to consume sequence", "Queue not long enough to consume sequence");
      // Undeclared exception!
//      try { 
        document0.prependChild((Node) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Object must not be null
//         //
//         verifyException("org.jsoup.helper.Validate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment(":nth-child(%d)", "action");
      Pattern pattern0 = Pattern.compile("body", (-4286));
      document0.getElementsMatchingText(pattern0);
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      Document document0 = new Document("h");
      Evaluator.ContainsText evaluator_ContainsText0 = new Evaluator.ContainsText("Y&|v^mQzARf");
      document0.is((Evaluator) evaluator_ContainsText0);
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      Document document0 = Parser.parse("Queue not long enough to consume sequence", "Queue not long enough to consume sequence");
      Pattern pattern0 = Pattern.compile("2.");
      document0.getElementsByAttributeValueMatching("T3Cq>Zdr", pattern0);
  }

  @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      Document document0 = Document.createShell("java.lang.string@0000000039");
      document0.select("rp");
  }

  @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      Document document0 = Document.createShell("");
      document0.id();
  }

  @Test(timeout = 4000)
  public void test223()  throws Throwable  {
      Document document0 = Document.createShell("tRg zame must not be emptyw quede not long enough to consume sequence");
      document0.classNames();
  }

  @Test(timeout = 4000)
  public void test224()  throws Throwable  {
      Parser parser0 = Parser.xmlParser();
      Document document0 = parser0.parseInput("java.lang.string@0000000039", "#");
      Element element0 = document0.createElement("rp");
      Element element1 = element0.text("#root");
      element1.toString();
  }

  @Test(timeout = 4000)
  public void test225()  throws Throwable  {
      Document document0 = Parser.parse("java.lang.string@0000000039", "java.lang.string@0000000039");
      document0.prependElement("rp");
      document0.toString();
  }

  @Test(timeout = 4000)
  public void test226()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("org.jsoup.select.CobiningEvaluator$And", "org.jsoup.select.CobiningEvaluator$And");
      // Undeclared exception!
//      try { 
        document0.html((StringWriter) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test227()  throws Throwable  {
      Document document0 = Parser.parse("java.lang.string@0000000039", "Rz]zuU");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      document_OutputSettings0.prettyPrint(false);
      document0.outputSettings(document_OutputSettings0);
      document0.toString();
  }

  @Test(timeout = 4000)
  public void test228()  throws Throwable  {
      Document document0 = Document.createShell("s+");
      document0.val();
  }

  @Test(timeout = 4000)
  public void test229()  throws Throwable  {
      Document document0 = Document.createShell("6NF47[8U");
      Element element0 = document0.addClass("6NF47[8U");
      document0.addClass("java.lang.string@0000000038");
      element0.hasClass("java.lang.string@0000000038");
  }

  @Test(timeout = 4000)
  public void test230()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("2.", "2.");
      document0.addClass("marquee");
      Element element0 = document0.addClass(" > ");
      element0.hasClass("2.");
  }

  @Test(timeout = 4000)
  public void test231()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("2.", "2.");
      document0.addClass("marquee");
      document0.hasClass("2.");
  }

  @Test(timeout = 4000)
  public void test232()  throws Throwable  {
      Document document0 = Document.createShell("6NF47[8U");
      document0.addClass("6NF47[8U");
      Element element0 = document0.addClass("java.lang.string@0000000038");
      element0.hasClass("java.lang.string@0000000047");
  }

  @Test(timeout = 4000)
  public void test233()  throws Throwable  {
      Document document0 = Parser.parse("Queue not long enough to consume sequence", "Queue not long enough to consume sequence");
      document0.addClass("Queue not long enough to consume sequence");
      document0.hasClass("Queue not long enough to consume sequence");
  }

  @Test(timeout = 4000)
  public void test234()  throws Throwable  {
      Parser parser0 = Parser.xmlParser();
      Document document0 = parser0.parseInput(" ", ".");
      document0.hasText();
  }

  @Test(timeout = 4000)
  public void test235()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("Queue not long enough to consume sequence", "Queue not long enough to consume sequence");
      document0.hasText();
  }

  @Test(timeout = 4000)
  public void test236()  throws Throwable  {
      Document document0 = Parser.parse("Queue not long enough to consume sequence", "Queue not long enough to consume sequence");
      Element element0 = document0.appendChild(document0);
      Element.preserveWhitespace(element0);
  }

  @Test(timeout = 4000)
  public void test237()  throws Throwable  {
      TextNode textNode0 = TextNode.createFromEncoded("option");
      Element.preserveWhitespace(textNode0);
  }

  @Test(timeout = 4000)
  public void test238()  throws Throwable  {
      Document document0 = Parser.parse("$U(", "Queue not long enough to consume sequence");
      CDataNode cDataNode0 = new CDataNode("Queue not long enough to consume sequence");
      document0.appendChild(cDataNode0);
      document0.getElementsContainingOwnText("$U(");
  }

  @Test(timeout = 4000)
  public void test239()  throws Throwable  {
      Document document0 = Document.createShell("E+Y&P-|?%AtaSn=");
      DataNode dataNode0 = DataNode.createFromEncoded("E+Y&P-|?%AtaSn=", "org.jsoup.nodes.Element$1");
      document0.appendChild(dataNode0);
      document0.getElementsContainingOwnText("#root");
  }

  @Test(timeout = 4000)
  public void test240()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("CZU=2[/qNKERm}", "CZU=2[/qNKERm}");
      document0.wholeText();
  }

  @Test(timeout = 4000)
  public void test241()  throws Throwable  {
      Document document0 = Document.createShell("hZAF$>@PgUJj'L");
      document0.append("S7_HZa.{r@g");
      document0.text();
  }

  @Test(timeout = 4000)
  public void test242()  throws Throwable  {
      Document document0 = Parser.parse("Could not determine a form action URL for submit. Ensure you set a base URI when parsing.", ":root");
      Document document1 = Parser.parseBodyFragmentRelaxed(":root", "-`m$@b[");
      Element element0 = document1.appendChild(document0);
      element0.text();
  }

  @Test(timeout = 4000)
  public void test243()  throws Throwable  {
      Element element0 = new Element("2.");
      Document document0 = Parser.parseBodyFragmentRelaxed("2.", "2.");
      Element element1 = document0.appendChild(element0);
      element1.getElementsMatchingText("2.");
  }

  @Test(timeout = 4000)
  public void test244()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("Queue not long enough to consume sequence", "Queue not long enough to consume sequence");
      DocumentType documentType0 = new DocumentType("Queue not long enough to consume sequence", "Queue not long enough to consume sequence", "Queue not long enough to consume sequence", "Queue not long enough to consume sequence");
      document0.appendChild(documentType0);
      document0.getElementsMatchingText(".");
  }

  @Test(timeout = 4000)
  public void test245()  throws Throwable  {
      Document document0 = Document.createShell("p");
      Element element0 = document0.doClone(document0);
      element0.nextElementSibling();
  }

  @Test(timeout = 4000)
  public void test246()  throws Throwable  {
      Document document0 = Document.createShell("p");
      Element element0 = document0.head();
      element0.lastElementSibling();
  }

  @Test(timeout = 4000)
  public void test247()  throws Throwable  {
      Document document0 = Parser.parse("Could not determine a form action URL for submit. Ensure you set a base URI when parsing.", ":root");
      Element element0 = document0.createElement("Could not determine a form action URL for submit. Ensure you set a base URI when parsing.");
      document0.appendTo(element0);
      document0.lastElementSibling();
  }

  @Test(timeout = 4000)
  public void test248()  throws Throwable  {
      Element element0 = new Element("2.");
      Document document0 = Parser.parseBodyFragmentRelaxed(".", ".");
      document0.appendChild(element0);
      element0.firstElementSibling();
  }

  @Test(timeout = 4000)
  public void test249()  throws Throwable  {
      Document document0 = Document.createShell("");
      Element element0 = document0.doClone(document0);
      element0.firstElementSibling();
  }

  @Test(timeout = 4000)
  public void test250()  throws Throwable  {
      Document document0 = new Document("h");
      document0.appendChild(document0);
      document0.previousElementSiblings();
  }

  @Test(timeout = 4000)
  public void test251()  throws Throwable  {
      Document document0 = Parser.parse("Queue not long enough to consume sequence", "Queue not long enough to consume sequence");
      document0.previousElementSibling();
  }

  @Test(timeout = 4000)
  public void test252()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("Queue not long enough to consume sequence", "Queue not long enough to consume sequence");
      document0.nextElementSibling();
  }

  @Test(timeout = 4000)
  public void test253()  throws Throwable  {
      Document document0 = Parser.parse("java.lang.string@0000000039", "java.lang.string@0000000039");
      Element element0 = document0.prependElement("rp");
      Elements elements0 = element0.nextElementSiblings();
      assertFalse(elements0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test254()  throws Throwable  {
      Document document0 = Parser.parse("Could not determine a form action URL for submit. Ensure you set a base URI when parsing.", ":root");
      document0.siblingElements();
      assertEquals(":root", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test255()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("Queue not long enough to consume sequence", "Queue not long enough to consume sequence");
      Element element0 = document0.appendTo(document0);
      Elements elements0 = element0.siblingElements();
      assertFalse(elements0.isEmpty());
      assertEquals("Queue not long enough to consume sequence", element0.baseUri());
  }

  @Test(timeout = 4000)
  public void test256()  throws Throwable  {
      Document document0 = Parser.parse("Queue not long enough to consume sequence", "Queue not long enough to consume sequence");
      document0.addClass("Queue not long enough to consume sequence");
      document0.cssSelector();
      assertEquals("Queue not long enough to consume sequence", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test257()  throws Throwable  {
      Document document0 = Parser.parse("XD/^q-dMrlPs", "XD/^q-dMrlPs");
      Node[] nodeArray0 = new Node[4];
      // Undeclared exception!
//      try { 
        document0.insertChildren(2990, nodeArray0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Insert position out of bounds.
//         //
//         verifyException("org.jsoup.helper.Validate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test258()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("", "map");
      Node[] nodeArray0 = new Node[4];
      // Undeclared exception!
//      try { 
        document0.insertChildren((-1290), nodeArray0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Insert position out of bounds.
//         //
//         verifyException("org.jsoup.helper.Validate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test259()  throws Throwable  {
      Tag tag0 = Tag.valueOf("class");
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = new FormElement(tag0, "class", attributes0);
      List<TextNode> list0 = formElement0.textNodes();
      // Undeclared exception!
//      try { 
        formElement0.insertChildren(66, (Collection<? extends Node>) list0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Insert position out of bounds.
//         //
//         verifyException("org.jsoup.helper.Validate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test260()  throws Throwable  {
      Document document0 = Parser.parse("Could not determine a form action URL for submit. Ensure you set a base URI when parsing.", ":root");
      Elements elements0 = document0.previousElementSiblings();
      // Undeclared exception!
//      try { 
        document0.insertChildren((-2093822380), (Collection<? extends Node>) elements0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Insert position out of bounds.
//         //
//         verifyException("org.jsoup.helper.Validate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test261()  throws Throwable  {
      Document document0 = Document.createShell("Could not determine a form action URL for submit. Ensure you set a base URI when parsing.");
      LinkedHashSet<FormElement> linkedHashSet0 = new LinkedHashSet<FormElement>();
      Element element0 = document0.insertChildren(0, (Collection<? extends Node>) linkedHashSet0);
      assertEquals("Could not determine a form action URL for submit. Ensure you set a base URI when parsing.", element0.baseUri());
  }

  @Test(timeout = 4000)
  public void test262()  throws Throwable  {
      Document document0 = Document.createShell("java.lang.string@0000000039");
      List<DataNode> list0 = document0.dataNodes();
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test263()  throws Throwable  {
      Document document0 = Parser.parse("Could not determine a form action URL for submit. Ensure you set a base URI when parsing.", ":root");
      Element element0 = document0.prependText("br");
      List<TextNode> list0 = element0.textNodes();
      assertEquals(":root", element0.baseUri());
      assertEquals(1, list0.size());
  }

  @Test(timeout = 4000)
  public void test264()  throws Throwable  {
      Element element0 = new Element("a3kC");
      Elements elements0 = element0.getElementsByIndexGreaterThan((-1324));
      assertEquals(1, elements0.size());
  }

  @Test(timeout = 4000)
  public void test265()  throws Throwable  {
      Element element0 = new Element("a3kC");
      Element element1 = element0.selectFirst("a3kC");
      assertEquals(0, element1.siblingIndex());
  }

  @Test(timeout = 4000)
  public void test266()  throws Throwable  {
      Document document0 = Document.createShell("E+Y&P-|?%AtaSn=");
      document0.getAllElements();
      assertEquals("E+Y&P-|?%AtaSn=", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test267()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("uue ot long enough to consume sequence", "uue ot long enough to consume sequence");
      Element element0 = document0.removeClass("");
      assertEquals("uue ot long enough to consume sequence", element0.baseUri());
  }

  @Test(timeout = 4000)
  public void test268()  throws Throwable  {
      Element element0 = new Element("id");
      // Undeclared exception!
//      try { 
        element0.before("=CWV");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Object must not be null
//         //
//         verifyException("org.jsoup.helper.Validate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test269()  throws Throwable  {
      Document document0 = Parser.parse("Queue not long enough to consume sequence", "Queue not long enough to consume sequence");
      document0.getElementsByAttribute("Queue not long enough to consume sequence");
      assertEquals("Queue not long enough to consume sequence", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test270()  throws Throwable  {
      Document document0 = Document.createShell("4;u%941vf}+DKUWpu");
      Elements elements0 = document0.getElementsByAttributeValueNot("bowtf~wmpybp", "bowtf~wmpybp");
      assertEquals(1, document0.childNodeSize());
      
      document0.insertChildren((-2), (Collection<? extends Node>) elements0);
      document0.addClass("body");
      assertEquals("4;u%941vf}+DKUWpu", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test271()  throws Throwable  {
      Element element0 = new Element("a3kC");
      Element element1 = element0.clone();
      assertNotSame(element1, element0);
  }

  @Test(timeout = 4000)
  public void test272()  throws Throwable  {
      Document document0 = Parser.parse("Queue not long enough to consume sequence", "Queue not long enough to consume sequence");
      // Undeclared exception!
//      try { 
        document0.after((Node) document0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Object must not be null
//         //
//         verifyException("org.jsoup.helper.Validate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test273()  throws Throwable  {
      Tag tag0 = Tag.valueOf("2vtf");
      CDataNode cDataNode0 = new CDataNode("2vtf");
      Attributes attributes0 = cDataNode0.attributes();
      Element element0 = new Element(tag0, "U.\"H48,wwKD", attributes0);
      element0.getElementsByAttributeValueContaining("2vtf", "U.\"H48,wwKD");
      assertEquals("U.\"H48,wwKD", element0.baseUri());
  }

  @Test(timeout = 4000)
  public void test274()  throws Throwable  {
      ParseSettings parseSettings0 = ParseSettings.preserveCase;
      Tag tag0 = Tag.valueOf("kLd5zu$&c", parseSettings0);
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = new FormElement(tag0, "kLd5zu$&c", attributes0);
      formElement0.getElementsContainingText((String) null);
      assertEquals("kLd5zu$&c", formElement0.baseUri());
  }

  @Test(timeout = 4000)
  public void test275()  throws Throwable  {
      Parser parser0 = Parser.htmlParser();
      Document document0 = parser0.parseInput(";zOqW!l4K6'7Lp", ";zOqW!l4K6'7Lp");
      Elements elements0 = document0.getElementsByClass("mid%ZKL=e{");
      assertEquals(0, elements0.size());
      assertEquals(";zOqW!l4K6'7Lp", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test276()  throws Throwable  {
      Document document0 = Parser.parse("Could not determine a form action URL for submit. Ensure you set a base URI when parsing.", ":root");
      document0.getElementsByAttributeValueEnding("-`m$@b[", "Kn-/,6d;=G^`0");
      assertEquals(":root", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test277()  throws Throwable  {
      Document document0 = Document.createShell("T;;R(UNx5vREkNDV-=");
      document0.is("html > head");
      assertEquals("T;;R(UNx5vREkNDV-=", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test278()  throws Throwable  {
      Document document0 = Document.createShell("s+");
      document0.val("W1(U&NNE");
      String string0 = document0.val();
      assertEquals("W1(U&NNE", string0);
      assertEquals(1, document0.childNodeSize());
      assertEquals("s+", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test279()  throws Throwable  {
      Document document0 = Parser.parse("</", "</");
      Elements elements0 = document0.getElementsByIndexEquals(1);
      assertEquals("</", document0.baseUri());
      assertEquals(1, elements0.size());
  }

  @Test(timeout = 4000)
  public void test280()  throws Throwable  {
      Document document0 = Document.createShell("!gMv:");
      // Undeclared exception!
//      try { 
        document0.getElementsByAttributeStarting("");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // String must not be empty
//         //
//         verifyException("org.jsoup.helper.Validate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test281()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("8", "=Fs#d?");
      Elements elements0 = document0.getElementsByIndexLessThan(96);
      assertEquals("=Fs#d?", document0.baseUri());
      assertEquals(3, elements0.size());
  }

  @Test(timeout = 4000)
  public void test282()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("2.", "2.");
      // Undeclared exception!
//      try { 
        document0.after("");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Object must not be null
//         //
//         verifyException("org.jsoup.helper.Validate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test283()  throws Throwable  {
      Document document0 = Document.createShell("p");
      Elements elements0 = document0.getElementsMatchingOwnText("='/^,^u1A");
      assertTrue(elements0.isEmpty());
      assertEquals("p", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test284()  throws Throwable  {
      Element element0 = new Element("2.");
      element0.prepend("2.");
      assertEquals(1, element0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test285()  throws Throwable  {
      Document document0 = Document.createShell("T;;R(UNx5vREkNDV-=");
      Element element0 = document0.head();
      String string0 = element0.cssSelector();
      assertEquals("html > head", string0);
      assertEquals("T;;R(UNx5vREkNDV-=", element0.baseUri());
  }

  @Test(timeout = 4000)
  public void test286()  throws Throwable  {
      Document document0 = Parser.parse("Could not determine a form action URL for submit. Ensure you set a base URI when parsing.", ":root");
      document0.getElementsByAttributeValueStarting("Could not determine a form action URL for submit. Ensure you set a base URI when parsing.", "#");
      assertEquals(":root", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test287()  throws Throwable  {
      Document document0 = Parser.parse("Queue not long enough to consume sequence", "Queue not long enough to consume sequence");
      document0.getElementsByAttributeValue("java.lang.string@0000000098", "java.lang.string@0000000098");
      assertEquals("Queue not long enough to consume sequence", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test288()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("Queue not long enough to consume sequence", "Queue not long enough to consume sequence");
      // Undeclared exception!
//      try { 
        document0.html((String) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Object must not be null
//         //
//         verifyException("org.jsoup.helper.Validate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test289()  throws Throwable  {
      Document document0 = Document.createShell("");
      document0.wholeText();
      assertEquals(1, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test290()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("2.", "2.");
      // Undeclared exception!
//      try { 
        document0.before((Node) document0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Object must not be null
//         //
//         verifyException("org.jsoup.helper.Validate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test291()  throws Throwable  {
      Document document0 = Document.createShell("6NF47[8U");
      Element element0 = document0.addClass("6NF47[8U");
      boolean boolean0 = element0.hasClass("java.lang.string@0000000047");
      assertFalse(boolean0);
      assertEquals(1, element0.childNodeSize());
      assertEquals("6NF47[8U", element0.baseUri());
  }

  @Test(timeout = 4000)
  public void test292()  throws Throwable  {
      Document document0 = Parser.parse("java.lang.string@0000000039", "java.lang.string@0000000039");
      Map<String, String> map0 = document0.dataset();
      assertEquals(0, map0.size());
  }

  @Test(timeout = 4000)
  public void test293()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("K~ZQ|2HEp<$F", "K~ZQ|2HEp<$F");
      document0.title("K~ZQ|2HEp<$F");
      Elements elements0 = document0.getElementsMatchingText("=");
      assertEquals("K~ZQ|2HEp<$F", document0.baseUri());
      assertEquals(0, elements0.size());
      assertEquals(1, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test294()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("bgsound", "bgsound");
      // Undeclared exception!
//      try { 
        document0.child(3396);
//        fail("Expecting exception: IndexOutOfBoundsException");
      
//      } catch(IndexOutOfBoundsException e) {
//         //
//         // Index: 3396, Size: 1
//         //
//         verifyException("java.util.ArrayList", e);
//      }
  }

  @Test(timeout = 4000)
  public void test295()  throws Throwable  {
      Document document0 = Document.createShell("java.lang.string@0000000039");
      document0.prependElement("rp");
      document0.select("rp");
      assertEquals(2, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test296()  throws Throwable  {
      Document document0 = Parser.parse("(DV3U", "(DV3U");
      document0.appendText("DELETE");
      assertEquals(2, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test297()  throws Throwable  {
      Document document0 = Parser.parse("tag name must not be empty. queue not long enough to consume sequence", "tag name must not be empty. queue not long enough to consume sequence");
      // Undeclared exception!
//      try { 
        document0.wrap("<html>\n <head></head>\n <body>\n  tag name must not be empty. queue not long enough to consume sequence\n </body>\n</html>");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.jsoup.nodes.Node", e);
//      }
  }

  @Test(timeout = 4000)
  public void test298()  throws Throwable  {
      Document document0 = Parser.parse("java.lang.string@0000000039", "java.lang.string@0000000039");
      document0.nextElementSiblings();
      assertEquals(1, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test299()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("java.lang.string@0000000039", "java.lang.string@0000000039");
      document0.getElementById("java.lang.string@0000000039");
  }
}
