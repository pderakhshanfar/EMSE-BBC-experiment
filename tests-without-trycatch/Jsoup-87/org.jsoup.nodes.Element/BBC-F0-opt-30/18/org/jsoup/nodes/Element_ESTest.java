/*
 * This file was automatically generated by EvoSuite
 * Wed Oct 20 16:08:01 GMT 2021
 */

package org.jsoup.nodes;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedWriter;
import java.io.ByteArrayOutputStream;
import java.io.CharArrayWriter;
import java.io.DataOutputStream;
import java.io.FileDescriptor;
import java.io.IOException;
import java.io.PipedWriter;
import java.io.Reader;
import java.io.StringReader;
import java.io.StringWriter;
import java.nio.BufferOverflowException;
import java.nio.CharBuffer;
import java.nio.ReadOnlyBufferException;
import java.nio.charset.Charset;
import java.util.Collection;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.Set;
import java.util.regex.Pattern;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.jsoup.nodes.Attribute;
import org.jsoup.nodes.Attributes;
import org.jsoup.nodes.CDataNode;
import org.jsoup.nodes.Comment;
import org.jsoup.nodes.DataNode;
import org.jsoup.nodes.Document;
import org.jsoup.nodes.DocumentType;
import org.jsoup.nodes.Element;
import org.jsoup.nodes.FormElement;
import org.jsoup.nodes.Node;
import org.jsoup.nodes.PseudoTextElement;
import org.jsoup.nodes.TextNode;
import org.jsoup.nodes.XmlDeclaration;
import org.jsoup.parser.ParseSettings;
import org.jsoup.parser.Parser;
import org.jsoup.parser.Tag;
import org.jsoup.select.Elements;
import org.jsoup.select.Evaluator;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Element_ESTest extends Element_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Document document0 = new Document(" > ");
      document0.setParentNode(document0);
      document0.nextElementSiblings();
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Tag tag0 = Tag.valueOf("s15tnh1^:ctf}q");
      Attributes attributes0 = new Attributes();
      Element element0 = new Element(tag0, "textarea", attributes0);
      Elements elements0 = element0.getElementsContainingText("s15tnh1^:ctf}q");
      element0.insertChildren(0, (Collection<? extends Node>) elements0);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("-!c?Z]d`", "-!c?Z]d`");
      StringBuilder stringBuilder0 = new StringBuilder((CharSequence) "qx/Y");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      document0.outerHtmlTail(stringBuilder0, 32, document_OutputSettings0);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("K(:?I|o}.JJR^t7th", "jU");
      document0.nodelistChanged();
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Document document0 = Document.createShell("5GLe`VAT&g(a:d");
      Parser parser0 = Parser.xmlParser();
      Document document1 = document0.parser(parser0);
      document1.wrap("]ZXq}k5g| M1");
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("d?bQyM~7wq6", "s+");
      Element element0 = document0.head();
      element0.wrap("d?bQyM~7wq6");
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("3GZ:?'5.-q", "3GZ:?'5.-q");
      Element element0 = document0.body();
      CDataNode cDataNode0 = new CDataNode("3GZ:?'5.-q");
      Element element1 = element0.before((Node) cDataNode0);
      element1.wrap("M=Kl");
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Document document0 = Document.createShell("A%#=QT");
      document0.wholeText();
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Parser parser0 = Parser.htmlParser();
      Document document0 = parser0.parseInput("", "");
      Document document1 = document0.clone();
      Element element0 = document1.appendTo(document0);
      element0.val("6_`sa)8s'gF");
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("ve{kslm", "ve{kslm");
      document0.setSiblingIndex((-1097));
      document0.val("ve{kslm");
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Document document0 = Parser.parse("type", "type");
      Element element0 = document0.head();
      element0.val("W=S$VNENkg<");
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Document document0 = Document.createShell("E");
      document0.val("E");
      document0.val();
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("og.jsoup.nodeskAttribuXes$1", "og.jsoup.nodeskAttribuXes$1");
      document0.setSiblingIndex((-2170));
      document0.toggleClass("og.jsoup.nodeskAttribuXes$1");
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Tag tag0 = Tag.valueOf("style");
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = new FormElement(tag0, "VyNi23u2J}%7.~6[", attributes0);
      formElement0.toggleClass("xTrGu.u@Q~");
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Parser parser0 = Parser.htmlParser();
      Document document0 = parser0.parseInput("", "");
      Document document1 = new Document("");
      Element element0 = document1.appendTo(document0);
      element0.toggleClass("Aqt#=QT");
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed(" />", " />");
      Element element0 = document0.body();
      element0.text(" />");
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Document document0 = Document.createShell("option");
      document0.text();
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("ve{kslm", "ve{kslm");
      document0.setSiblingIndex((-1097));
      document0.tagName("ve{kslm");
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Parser parser0 = Parser.htmlParser();
      Document document0 = parser0.parseInput("", "");
      document0.tagName("body");
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Document document0 = Document.createShell("/");
      Element element0 = document0.appendElement("/>");
      element0.tagName("#");
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Parser parser0 = Parser.xmlParser();
      Document document0 = parser0.parseInput("style", "%KpsG");
      document0.tagName();
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("K[", "K[");
      Element element0 = document0.appendElement("br");
      element0.tag();
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Tag tag0 = Tag.valueOf("textarea");
      Element element0 = new Element(tag0, "textarea");
      element0.tag();
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed(" > ", " > ");
      Element element0 = document0.head();
      element0.tag();
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Document document0 = Document.createShell("opin");
      document0.tag();
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("E", "E");
      Element element0 = document0.head();
      element0.shallowClone();
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("K(:?I|o}.JJR^t7th", "jU");
      document0.selectFirst("body");
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("E", "E");
      Element element0 = document0.prependElement("E");
      element0.selectFirst("E");
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("#=QT", "#=QT");
      document0.select("style");
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Tag tag0 = Tag.valueOf("r");
      Element element0 = new Element(tag0, "r");
      element0.select("r");
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("E", "E");
      Element element0 = document0.head();
      CDataNode cDataNode0 = new CDataNode("E");
      element0.before((Node) cDataNode0);
      element0.removeClass("E");
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Document document0 = new Document("j$Hu-d9NvwCMpNuiz");
      Element element0 = document0.createElement("j$Hu-d9NvwCMpNuiz");
      Element element1 = element0.text("j$Hu-d9NvwCMpNuiz");
      element1.siblingIndex = (-1063);
      element0.removeClass("java.lang.string@0000000076 cp367 csascii iso-ir-6 ascii iso_646.irv:1983 ansi_x3.4-1986 option default iso_646.irv:1991 iso646-us ibm367 646 us");
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed(" > ", " > ");
      Element element0 = document0.head();
      element0.removeClass("html > head");
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("^", "`.\"aw}&l|>fD51");
      document0.appendChild(document0);
      document0.previousElementSiblings();
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Document document0 = Document.createShell("tetare#a");
      document0.appendElement("tetare#a");
      document0.appendChild(document0);
      document0.previousElementSibling();
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Document document0 = Document.createShell("opin");
      document0.siblingIndex = (-1040);
      document0.prependText("opin");
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("title", "f7Hl}");
      Element element0 = document0.head();
      element0.prependText("title");
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("`.\"aw}&l||fD5$", "`.\"aw}&l||fD5$");
      Element element0 = document0.appendChild(document0);
      element0.prependText("`.\"aw}&l||fD5$");
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed(" > ", " > ");
      document0.prependElement("head");
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      DataNode dataNode0 = DataNode.createFromEncoded("jjV+", "jjV+");
      Parser parser0 = Parser.xmlParser();
      Document document0 = parser0.parseInput("details", "textarea");
      Element element0 = document0.appendTo(document0);
      element0.prependChild(dataNode0);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Tag tag0 = Tag.valueOf("style");
      Attributes attributes0 = new Attributes();
      Document document0 = Parser.parseBodyFragmentRelaxed("details", "details");
      PseudoTextElement pseudoTextElement0 = new PseudoTextElement(tag0, "6aA-#l=}E|j", attributes0);
      pseudoTextElement0.prependChild(document0);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("", "");
      Element element0 = document0.body();
      element0.prepend("");
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed(":nth-child(%d)", "&<R-*Ti");
      document0.parents();
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("E", "E");
      Element element0 = document0.head();
      CDataNode cDataNode0 = new CDataNode("E");
      Element element1 = element0.before((Node) cDataNode0);
      element1.parents();
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("A%#=QT", "A%#=QT");
      document0.parent();
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("Hh:&r*/zggF[", "Hh:&r*/zggF[");
      Element element0 = document0.head();
      document0.prepend("Hh:&r*/zggF[");
      element0.parent();
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("Aqt#=QT", "Aqt#=QT");
      Document document1 = new Document("rH9hxORJ^A");
      document1.reparentChild(document0);
      document0.parent();
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Document document0 = new Document(":nth-child(");
      document0.prependText("br");
      document0.ownText();
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Document document0 = new Document(":nth-child(");
      document0.nodeName();
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Document document0 = Parser.parse("", "");
      Element element0 = document0.head();
      element0.nextElementSibling();
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("option", "option");
      Element element0 = document0.head();
      element0.lastElementSibling();
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Parser parser0 = Parser.htmlParser();
      Document document0 = parser0.parseInput("", "");
      Document document1 = new Document("");
      Element element0 = document1.appendTo(document0);
      element0.lastElementSibling();
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("title", "f7Hl}");
      Element element0 = document0.head();
      element0.isBlock();
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Tag tag0 = Tag.valueOf("VyNi23u2J}%7.~6[");
      PseudoTextElement pseudoTextElement0 = new PseudoTextElement(tag0, "Mf", (Attributes) null);
      Evaluator.IsRoot evaluator_IsRoot0 = new Evaluator.IsRoot();
      pseudoTextElement0.is((Evaluator) evaluator_IsRoot0);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Document document0 = new Document(":nth-child(");
      Evaluator.Id evaluator_Id0 = new Evaluator.Id("r#@*");
      document0.is((Evaluator) evaluator_Id0);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Document document0 = Parser.parse("K[", "K[");
      Element element0 = document0.appendElement("br");
      element0.is("br");
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("G(hb!ad!di=(DA", "G(hb!ad!di=(DA");
      document0.siblingIndex = 119;
      Elements elements0 = document0.getElementsMatchingText("]j^");
      document0.insertChildren((-1), (Collection<? extends Node>) elements0);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("-!c?Z]kd`", "-!c?Z]kd`");
      document0.setSiblingIndex((-414));
      LinkedList<XmlDeclaration> linkedList0 = new LinkedList<XmlDeclaration>();
      document0.insertChildren((-1), (Collection<? extends Node>) linkedList0);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Document document0 = Parser.parse("", "");
      Element element0 = document0.head();
      LinkedList<Comment> linkedList0 = new LinkedList<Comment>();
      element0.insertChildren((-1), (Collection<? extends Node>) linkedList0);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Document document0 = new Document("org.jsoup.nodes.Element");
      Document document1 = document0.normalise();
      Document document2 = new Document("-!c?z]d`");
      document1.appendChild(document2);
      document2.html("org.jsoup.nodes.Element");
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed(" > ", " > ");
      Element element0 = document0.head();
      element0.html("html > head");
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("Aqt#=QT", "Aqt#=QT");
      document0.html("");
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Tag tag0 = Tag.valueOf("style");
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = new FormElement(tag0, "VyNi23u2J}%7.~6[", attributes0);
      formElement0.html((BufferedWriter) null);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Parser parser0 = Parser.htmlParser();
      Document document0 = parser0.parseInput("", "");
      document0.html();
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Document document0 = new Document("Cv7Rxptn");
      document0.html();
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Tag tag0 = Tag.valueOf("style");
      CDataNode cDataNode0 = new CDataNode("style");
      Attributes attributes0 = cDataNode0.attributes();
      FormElement formElement0 = new FormElement(tag0, "VyNi23u2J}%7.~6[", attributes0);
      formElement0.hasAttributes();
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("", "L");
      document0.hasAttributes();
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Document document0 = new Document(":nth-child(");
      Pattern pattern0 = Pattern.compile("");
      document0.getElementsMatchingText(pattern0);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("#=QT", "#=QT");
      Pattern pattern0 = Pattern.compile("details", 124);
      document0.getElementsMatchingOwnText(pattern0);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Document document0 = Document.createShell("head");
      Element element0 = document0.text("head");
      Pattern pattern0 = Pattern.compile("head", (-1417));
      element0.getElementsMatchingOwnText(pattern0);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Document document0 = Parser.parse("Y", "Y");
      document0.getElementsMatchingOwnText("org.jsoup.nodes.Element$1");
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("Aqt#=QT", "Aqt#=QT");
      document0.getElementsContainingText("Aqt#=QT");
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("M},;t(YYj-", "{uR]OuCce%I<4%");
      document0.getElementsByTag("legend");
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Element element0 = new Element("[%s=%s]");
      element0.getElementsByTag("[%s=%s]");
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment(" hG1", "%S$Q@SN'=vKo0*9G\"l$");
      document0.getElementsByIndexLessThan(60);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Tag tag0 = Tag.valueOf("#root");
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = new FormElement(tag0, "BeforeDoctypeSystemIdentifier", attributes0);
      formElement0.getElementsByIndexGreaterThan(55);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Parser parser0 = Parser.xmlParser();
      StringReader stringReader0 = new StringReader("org.jsoup.UncheckedIOException");
      Document document0 = parser0.parseInput((Reader) stringReader0, "org.jsoup.UncheckedIOException");
      document0.getElementsByIndexEquals(0);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      Set<String> set0 = charset0.aliases();
      Document document0 = Document.createShell("</");
      document0.classNames(set0);
      document0.getElementsByClass("cp367");
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("Hh:&r*/zggF[", "Hh:&r*/zggF[");
      document0.getElementsByAttributeValueNot("N\u0000]N8_};Ql", "Hh:&r*/zggF[");
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("Aqt#=QT", "Aqt#=QT");
      document0.getElementsByAttributeValueMatching("org.jsoup.nodes.Element$1", "link");
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("TagOpen", "4P}'Ag%qP.0");
      document0.attr("TagOpen", "TagOpen");
      document0.getElementsByAttributeValueContaining("TagOpen", "TagOpen");
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("STOP", "STOP");
      document0.getElementsByAttributeValue("STOP", "Pc]s.{V");
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("E", "E");
      Element element0 = document0.head();
      CDataNode cDataNode0 = new CDataNode("E");
      element0.before((Node) cDataNode0);
      element0.firstElementSibling();
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("E", "E");
      Element element0 = document0.prependElement("E");
      element0.firstElementSibling();
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("E", "E");
      Element element0 = document0.head();
      element0.prependElement("E");
      element0.firstElementSibling();
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Document document0 = new Document("Cv7Rxptn");
      Tag tag0 = Tag.valueOf("Cv7Rxptn");
      Element element0 = new Element(tag0, "Y?,;", (Attributes) null);
      Element element1 = document0.appendChild(element0);
      document0.appendChild(document0);
      element1.empty();
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Document document0 = Parser.parse("", "");
      Element element0 = document0.head();
      element0.empty();
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("E", "E");
      Element element0 = document0.head();
      CDataNode cDataNode0 = new CDataNode("E");
      Element element1 = element0.before((Node) cDataNode0);
      element0.doClone(element1);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Document document0 = new Document("j$Hu-d9NvwCMpNuiz");
      Element element0 = document0.createElement("j$Hu-d9NvwCMpNuiz");
      Element element1 = element0.text("j$Hu-d9NvwCMpNuiz");
      element1.siblingIndex = (-1063);
      element1.doClone(element0);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("E", "E");
      Element element0 = document0.head();
      element0.doClone(element0);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Document document0 = new Document("org.jsoup.nodes.Element");
      document0.doClone((Node) null);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Document document0 = Document.createShell("&lt;");
      Element element0 = document0.head();
      element0.clone();
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Document document0 = new Document("s-*+[agi:d$P.0.6");
      document0.clone();
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("E", "E");
      document0.clone();
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("", "");
      Element element0 = document0.body();
      Charset charset0 = document0.charset();
      Set<String> set0 = charset0.aliases();
      element0.classNames(set0);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Document document0 = Document.createShell("nth-child");
      document0.setSiblingIndex((-1433506051));
      Charset charset0 = document0.charset();
      Set<String> set0 = charset0.aliases();
      document0.classNames(set0);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Document document0 = Document.createShell("$jvI'N'`R.T8Te~@:D6");
      document0.toggleClass("$jvI'N'`R.T8Te~@:D6");
      document0.classNames();
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("", "`.\"aw}&l||fD5$");
      Charset charset0 = Charset.defaultCharset();
      Set<String> set0 = charset0.aliases();
      Element element0 = document0.classNames(set0);
      element0.className();
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("E", "E");
      document0.children();
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Tag tag0 = Tag.valueOf("VyNi23u2J}%7.~6[");
      PseudoTextElement pseudoTextElement0 = new PseudoTextElement(tag0, "Mf", (Attributes) null);
      pseudoTextElement0.childNodeSize();
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Document document0 = new Document(":nth-child(");
      document0.normalise();
      document0.childNodeSize();
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("sh", "`.\"aw}&l||fD5$");
      Document document1 = (Document)document0.appendChild(document0);
      Element element0 = document0.previousElementSibling();
      document1.before((Node) element0);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Document document0 = Parser.parse("<%Us wUN@6qO", "<%Us wUN@6qO");
      Element element0 = document0.body();
      element0.before("<%Us wUN@6qO");
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Document document0 = new Document(":nth-child(");
      document0.baseUri();
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Parser parser0 = Parser.htmlParser();
      Document document0 = parser0.parseInput("", "");
      document0.baseUri();
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("Y", "Y");
      document0.attributes();
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      Tag tag0 = Tag.valueOf("style");
      Attributes attributes0 = new Attributes();
      Attribute attribute0 = new Attribute("style", "style", attributes0);
      attributes0.put(attribute0);
      FormElement formElement0 = new FormElement(tag0, "style", attributes0);
      formElement0.attributes();
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      Parser parser0 = Parser.xmlParser();
      Document document0 = parser0.parseInput("details", "textarea");
      Element element0 = document0.appendTo(document0);
      element0.attr("#root", true);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      Tag tag0 = Tag.valueOf("style");
      Attributes attributes0 = new Attributes();
      PseudoTextElement pseudoTextElement0 = new PseudoTextElement(tag0, "6aA-#l=}E|j", attributes0);
      pseudoTextElement0.attr("#7o qq#rQecq:&\"~G", true);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("E", "E");
      Element element0 = document0.body();
      CDataNode cDataNode0 = new CDataNode("E");
      Element element1 = element0.before((Node) cDataNode0);
      element1.attr("Kn", "E");
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      Document document0 = new Document("s-*+[agi:d$P.0.6");
      document0.attr("s-*+[agi:d$P.0.6", "s-*+[agi:d$P.0.6");
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      Tag tag0 = Tag.valueOf("style");
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = new FormElement(tag0, "style", attributes0);
      formElement0.appendTo(formElement0);
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("E", "E");
      document0.setSiblingIndex(1332);
      document0.appendText("op3ion");
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("E", "E");
      Element element0 = document0.head();
      element0.appendText("#root");
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("5ClSC/J~>B", "TDfIeL");
      document0.appendElement("noscript");
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed(" > ", " > ");
      Element element0 = document0.head();
      element0.appendChild(document0);
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("Y", "Y");
      Element element0 = document0.body();
      element0.append("9");
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed(" > ", " > ");
      Element element0 = document0.head();
      element0.append("");
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("-!c?Z]d`", "-!c?Z]d`");
      Element element0 = document0.appendElement("em");
      element0.after((Node) document0);
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("E", "E");
      Element element0 = document0.head();
      CDataNode cDataNode0 = new CDataNode("E");
      element0.prependElement("E");
      element0.after((Node) cDataNode0);
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("E", "E");
      Element element0 = document0.head();
      CDataNode cDataNode0 = new CDataNode("E");
      element0.before((Node) cDataNode0);
      element0.after("E");
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      Document document0 = new Document("s-*+[agi:d$P.0.6");
      Document document1 = Parser.parseBodyFragment("y", "$.(K1(r^O%u[Fb5>");
      Document document2 = (Document)document1.appendTo(document0);
      document2.after("y");
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      Document document0 = new Document("org.jsoup.nodes.Element");
      Document document1 = document0.normalise();
      document1.appendChild(document0);
      document1.addClass("org.jsoup.nodes.Element");
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("E", "E");
      Node[] nodeArray0 = new Node[1];
      nodeArray0[0] = (Node) document0;
      document0.insertChildren((-1), nodeArray0);
      // Undeclared exception!
      document0.wrap("E");
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      Document document0 = new Document(":nth-child(");
      // Undeclared exception!
//      try { 
        document0.wrap("");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // String must not be empty
//         //
//         verifyException("org.jsoup.helper.Validate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      Document document0 = new Document(":nth-child(");
      document0.setParentNode(document0);
      // Undeclared exception!
      document0.val("html");
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      Tag tag0 = Tag.valueOf("style");
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = new FormElement(tag0, "VyNi23u2J}%7.~6[", attributes0);
      // Undeclared exception!
//      try { 
        formElement0.toggleClass((String) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Object must not be null
//         //
//         verifyException("org.jsoup.helper.Validate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      Document document0 = new Document("br");
      // Undeclared exception!
//      try { 
        document0.text("");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.jsoup.nodes.Document", e);
//      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("E", "E");
      // Undeclared exception!
//      try { 
        document0.text((String) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Object must not be null
//         //
//         verifyException("org.jsoup.helper.Validate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      Document document0 = Document.createShell("`.\"aw}&l||fD5$");
      document0.prependText("+qYt^LOc");
      TextNode textNode0 = TextNode.createFromEncoded("oy5+oCcrO$UZn&MX");
      document0.setParentNode(textNode0);
      // Undeclared exception!
//      try { 
        document0.text();
//        fail("Expecting exception: ClassCastException");
      
//      } catch(ClassCastException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("E", "E");
      Element element0 = document0.head();
      element0.before((Node) document0);
      // Undeclared exception!
      document0.tagName("p>rDLBtQ");
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed(" />", " />");
      // Undeclared exception!
//      try { 
        document0.tagName((String) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Tag name must not be empty.
//         //
//         verifyException("org.jsoup.helper.Validate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      Document document0 = new Document(":nth-child(");
      document0.setParentNode(document0);
      // Undeclared exception!
//      try { 
        document0.siblingElements();
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Illegal Capacity: -1
//         //
//         verifyException("java.util.ArrayList", e);
//      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      Document document0 = Parser.parse("Aqt#=QT", "QFO2F0#j  '");
      // Undeclared exception!
//      try { 
        document0.selectFirst(".Jc+DF=l,k#=jnW*)3!");
//        fail("Expecting exception: IllegalStateException");
      
//      } catch(IllegalStateException e) {
//         //
//         // Could not parse query 'DF=l': unexpected token at '=l'
//         //
//         verifyException("org.jsoup.select.QueryParser", e);
//      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      ParseSettings parseSettings0 = ParseSettings.preserveCase;
      Tag tag0 = Tag.valueOf("Index must be numeric", parseSettings0);
      Attributes attributes0 = new Attributes();
      PseudoTextElement pseudoTextElement0 = new PseudoTextElement(tag0, "f+b,4`ZHR,Ye%", attributes0);
      // Undeclared exception!
//      try { 
        pseudoTextElement0.selectFirst("");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // String must not be empty
//         //
//         verifyException("org.jsoup.helper.Validate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("_C;U/lmkE", "2Iw'_3O");
      // Undeclared exception!
//      try { 
        document0.select("");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // String must not be empty
//         //
//         verifyException("org.jsoup.helper.Validate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      Element element0 = new Element("4^khts");
      // Undeclared exception!
//      try { 
        element0.removeClass((String) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Object must not be null
//         //
//         verifyException("org.jsoup.helper.Validate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed(":nth-child(%d)", "&<R-*Ti");
      TextNode textNode0 = new TextNode("![n&Hzad]Sm.8u6");
      document0.setParentNode(textNode0);
      // Undeclared exception!
//      try { 
        document0.previousElementSibling();
//        fail("Expecting exception: ClassCastException");
      
//      } catch(ClassCastException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      Document document0 = Document.createShell("option");
      DataNode dataNode0 = new DataNode("option");
      document0.setParentNode(dataNode0);
      // Undeclared exception!
//      try { 
        Element.preserveWhitespace(document0);
//        fail("Expecting exception: ClassCastException");
      
//      } catch(ClassCastException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      Document document0 = new Document("");
      List<Node> list0 = Parser.parseXmlFragment("Split offset must not be greater than current text length", "textarea");
      document0.childNodes = list0;
      // Undeclared exception!
//      try { 
        document0.prependText("`#/&fg}zk#}i");
//        fail("Expecting exception: UnsupportedOperationException");
      
//      } catch(UnsupportedOperationException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.util.Collections$UnmodifiableList", e);
//      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      Document document0 = new Document(":nth-child(");
      // Undeclared exception!
//      try { 
        document0.prependText((String) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Object must not be null
//         //
//         verifyException("org.jsoup.helper.Validate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      Document document0 = Parser.parse("org.jsoup.select.Evaluator$Class", "org.jsoup.select.Evaluator$Class");
      Node[] nodeArray0 = new Node[5];
      nodeArray0[0] = (Node) document0;
      nodeArray0[1] = (Node) document0;
      nodeArray0[2] = (Node) document0;
      XmlDeclaration xmlDeclaration0 = new XmlDeclaration("org.jsoup.select.Evaluator$Class", "org.jsoup.helper.ChangeNotifyingArrayList", false);
      nodeArray0[3] = (Node) xmlDeclaration0;
      nodeArray0[4] = (Node) document0;
      document0.addChildren(nodeArray0);
      // Undeclared exception!
      document0.prependElement("");
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      Parser parser0 = Parser.xmlParser();
      Parser parser1 = parser0.settings((ParseSettings) null);
      StringReader stringReader0 = new StringReader("tetare#a");
      Document document0 = parser1.parseInput((Reader) stringReader0, "tetare#a");
      // Undeclared exception!
//      try { 
        document0.prependElement("_#U3w%m#rYw. ");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.jsoup.parser.Tag", e);
//      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      Document document0 = new Document("s-*+[agi:d$P.0.6");
      // Undeclared exception!
//      try { 
        document0.prependElement("");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // String must not be empty
//         //
//         verifyException("org.jsoup.helper.Validate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("Aqt#=QT", "Aqt#=QT");
      Element element0 = document0.appendTo(document0);
      document0.reparentChild(element0);
      // Undeclared exception!
//      try { 
        document0.prependChild(element0);
//        fail("Expecting exception: IndexOutOfBoundsException");
      
//      } catch(IndexOutOfBoundsException e) {
//         //
//         // Index: 1, Size: 1
//         //
//         verifyException("java.util.ArrayList", e);
//      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      Tag tag0 = Tag.valueOf("v=WdIO<r?:7caHUZ(4O");
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = new FormElement(tag0, "quirks", attributes0);
      // Undeclared exception!
//      try { 
        formElement0.prependChild((Node) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Object must not be null
//         //
//         verifyException("org.jsoup.helper.Validate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      Document document0 = new Document(" />");
      document0.setParentNode(document0);
      // Undeclared exception!
      document0.prepend("X$$5T!<Zm,");
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("option", "option");
      // Undeclared exception!
//      try { 
        document0.prepend((String) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Object must not be null
//         //
//         verifyException("org.jsoup.helper.Validate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      Tag tag0 = Tag.valueOf("option");
      Element element0 = new Element(tag0, "option");
      TextNode textNode0 = TextNode.createFromEncoded("0");
      Element element1 = element0.doClone(textNode0);
      // Undeclared exception!
//      try { 
        element1.prepend("g'CZ+G)6OoJXnM+t>");
//        fail("Expecting exception: ClassCastException");
      
//      } catch(ClassCastException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("K[", "K[");
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) "K[");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      // Undeclared exception!
//      try { 
        document0.outerHtmlTail(charBuffer0, (-3124), document_OutputSettings0);
//        fail("Expecting exception: ReadOnlyBufferException");
      
//      } catch(ReadOnlyBufferException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.nio.StringCharBuffer", e);
//      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("\"", "\"");
      // Undeclared exception!
//      try { 
        document0.outerHtmlTail((Appendable) null, 25, (Document.OutputSettings) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.jsoup.nodes.Element", e);
//      }
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("E", "E");
      StringBuilder stringBuilder0 = new StringBuilder();
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      // Undeclared exception!
//      try { 
        document0.outerHtmlTail(stringBuilder0, (-168), document_OutputSettings0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // width must be > 0
//         //
//         verifyException("org.jsoup.internal.StringUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed(" > ", " > ");
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(fileDescriptor0);
      DataOutputStream dataOutputStream0 = new DataOutputStream(mockFileOutputStream0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(dataOutputStream0);
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      document_OutputSettings0.indentAmount(122);
      // Undeclared exception!
      document0.outerHtmlHead(mockPrintWriter0, 122, document_OutputSettings0);
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      Document document0 = new Document("Wk3*>2!1G");
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) "Wk3*>2!1G");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      // Undeclared exception!
//      try { 
        document0.outerHtmlHead(charBuffer0, 2147483645, document_OutputSettings0);
//        fail("Expecting exception: ReadOnlyBufferException");
      
//      } catch(ReadOnlyBufferException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.nio.StringCharBuffer", e);
//      }
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("^", "`.\"aw}&l||fD5$");
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream0);
      // Undeclared exception!
//      try { 
        document0.outerHtmlHead(mockPrintWriter0, (-383), (Document.OutputSettings) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.jsoup.nodes.Element", e);
//      }
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      Parser parser0 = Parser.htmlParser();
      Document document0 = parser0.parseInput(":&[n-Jo1", ",CS!?H");
      MockFile mockFile0 = new MockFile("Pattern syntax error: ");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      // Undeclared exception!
//      try { 
        document0.outerHtmlHead(mockPrintWriter0, (-813), document_OutputSettings0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // width must be > 0
//         //
//         verifyException("org.jsoup.internal.StringUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      Document document0 = new Document("S0");
      PipedWriter pipedWriter0 = new PipedWriter();
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
//      try { 
        document0.outerHtmlHead(pipedWriter0, 1856, document_OutputSettings0);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Pipe not connected
//         //
//         verifyException("java.io.PipedWriter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("A%#=QT", "A%#=QT");
      DataNode dataNode0 = DataNode.createFromEncoded("[`}eF%x~d*kfBi6H", "textarea");
      Element element0 = document0.doClone(dataNode0);
      // Undeclared exception!
//      try { 
        element0.nextElementSiblings();
//        fail("Expecting exception: ClassCastException");
      
//      } catch(ClassCastException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      Document document0 = Parser.parse("`", "");
      CDataNode cDataNode0 = new CDataNode("Pattern syntax error: ");
      document0.setParentNode(cDataNode0);
      // Undeclared exception!
//      try { 
        document0.nextElementSibling();
//        fail("Expecting exception: ClassCastException");
      
//      } catch(ClassCastException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("UN?]jbM", "nullChar");
      // Undeclared exception!
//      try { 
        document0.lastElementSibling();
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.jsoup.nodes.Element", e);
//      }
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("org.jsoup.nodes.Element", "}_4gRuJ1/zZhU");
      // Undeclared exception!
//      try { 
        document0.is("");
//        fail("Expecting exception: IllegalStateException");
      
//      } catch(IllegalStateException e) {
//         //
//         // Could not parse query '': unexpected token at ''
//         //
//         verifyException("org.jsoup.select.QueryParser", e);
//      }
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment(" />", " />");
      document0.setParentNode(document0);
      // Undeclared exception!
      document0.is("Character");
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("org.jsoup.nodes.Element", "}_4gRuJ1/zZhU");
      Node[] nodeArray0 = new Node[9];
      nodeArray0[0] = (Node) document0;
      nodeArray0[1] = (Node) document0;
      nodeArray0[2] = (Node) document0;
      nodeArray0[3] = (Node) document0;
      nodeArray0[4] = (Node) document0;
      nodeArray0[5] = (Node) document0;
      nodeArray0[6] = (Node) document0;
      nodeArray0[7] = (Node) document0;
      nodeArray0[8] = (Node) document0;
      // Undeclared exception!
//      try { 
        document0.insertChildren(0, nodeArray0);
//        fail("Expecting exception: IndexOutOfBoundsException");
      
//      } catch(IndexOutOfBoundsException e) {
//         //
//         // Index: 0, Size: 0
//         //
//         verifyException("java.util.ArrayList", e);
//      }
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("[-yMGMhc-yKG_hhT", "{E:r`uRSRov2|b%fVa");
      List<Node> list0 = document0.ensureChildNodes();
      // Undeclared exception!
//      try { 
        document0.insertChildren((-1), (Collection<? extends Node>) list0);
//        fail("Expecting exception: IndexOutOfBoundsException");
      
//      } catch(IndexOutOfBoundsException e) {
//         //
//         // Index: 1, Size: 0
//         //
//         verifyException("java.util.ArrayList", e);
//      }
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      Document document0 = new Document(":nth-child(");
      document0.setParentNode(document0);
      // Undeclared exception!
      document0.html("html");
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("A%#=QT", "A%#=QT");
      // Undeclared exception!
//      try { 
        document0.html((String) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Object must not be null
//         //
//         verifyException("org.jsoup.helper.Validate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed(" > ", " > ");
      CDataNode cDataNode0 = new CDataNode("type");
      document0.setParentNode(cDataNode0);
      // Undeclared exception!
//      try { 
        document0.html("html");
//        fail("Expecting exception: ClassCastException");
      
//      } catch(ClassCastException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      Document document0 = Document.createShell("$jvI'N'`R.T8Te~@:D6");
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) "$jvI'N'`R.T8Te~@:D6");
      // Undeclared exception!
//      try { 
        document0.html((Appendable) charBuffer0);
//        fail("Expecting exception: ReadOnlyBufferException");
      
//      } catch(ReadOnlyBufferException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.nio.StringCharBuffer", e);
//      }
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("option", "option");
      char[] charArray0 = new char[7];
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      // Undeclared exception!
//      try { 
        document0.html(charBuffer0);
//        fail("Expecting exception: BufferOverflowException");
      
//      } catch(BufferOverflowException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.nio.Buffer", e);
//      }
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("A%#=QT", "A%#=QT");
      // Undeclared exception!
//      try { 
        document0.html((CharArrayWriter) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("`.\"aw}&l||fD5$", "`.\"aw}&l||fD5$");
      Element element0 = document0.appendChild(document0);
      // Undeclared exception!
      element0.html();
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      Document document0 = new Document("s-*+[agi:d$P.0.6");
      // Undeclared exception!
//      try { 
        document0.hasClass((String) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.jsoup.nodes.Element", e);
//      }
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      Document document0 = Document.createShell("$jvI'N'`R.T8Te~@:D6");
      // Undeclared exception!
//      try { 
        document0.getElementsMatchingText((Pattern) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.jsoup.select.Evaluator$Matches", e);
//      }
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      Document document0 = Parser.parse("!-+Rks@rj]", "!-+Rks@rj]");
      TextNode textNode0 = TextNode.createFromEncoded("xtis-\";hvJWld+&");
      document0.setParentNode(textNode0);
      Pattern pattern0 = Pattern.compile("!-+Rks@rj]");
      // Undeclared exception!
//      try { 
        document0.getElementsMatchingText(pattern0);
//        fail("Expecting exception: ClassCastException");
      
//      } catch(ClassCastException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      Document document0 = Parser.parse("Vr]", "Vr]");
      Element element0 = document0.appendElement("Vr]");
      element0.siblingIndex = (-1);
      document0.getElementsMatchingText("Vr]");
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      Parser parser0 = Parser.xmlParser();
      Document document0 = parser0.parseInput("option", "details");
      // Undeclared exception!
//      try { 
        document0.getElementsMatchingText((String) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("Y", "Y");
      // Undeclared exception!
//      try { 
        document0.getElementsMatchingText("8w6r!@&c0#<{o})(");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Pattern syntax error: 8w6r!@&c0#<{o})(
//         //
//         verifyException("org.jsoup.nodes.Element", e);
//      }
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      Document document0 = Parser.parse(" L/b>", " L/b>");
      Comment comment0 = new Comment(" L/b>", "\"gj2/7tv]=;w;g");
      document0.setParentNode(comment0);
      // Undeclared exception!
//      try { 
        document0.getElementsMatchingText(" L/b>");
//        fail("Expecting exception: ClassCastException");
      
//      } catch(ClassCastException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      Document document0 = Document.createShell("nth-child");
      document0.setParentNode(document0);
      document0.setSiblingIndex((-1433506051));
      // Undeclared exception!
//      try { 
        document0.getElementsMatchingText("#root");
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("Aqt#=QT", "Aqt#=QT");
      // Undeclared exception!
//      try { 
        document0.getElementsMatchingOwnText((String) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      Document document0 = new Document("s-*+[agi:d$P.0.6");
      // Undeclared exception!
//      try { 
        document0.getElementsMatchingOwnText("s-*+[agi:d$P.0.6");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Pattern syntax error: s-*+[agi:d$P.0.6
//         //
//         verifyException("org.jsoup.nodes.Element", e);
//      }
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      Document document0 = new Document(":nth-child(");
      Parser parser0 = Parser.xmlParser();
      Document document1 = document0.parser(parser0);
      document1.childNodes = null;
      // Undeclared exception!
//      try { 
        document1.getElementsContainingOwnText("?U<");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.jsoup.nodes.Element", e);
//      }
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("opin", "opin");
      XmlDeclaration xmlDeclaration0 = new XmlDeclaration("opin", true);
      document0.setParentNode(xmlDeclaration0);
      // Undeclared exception!
//      try { 
        document0.getElementsContainingOwnText("");
//        fail("Expecting exception: ClassCastException");
      
//      } catch(ClassCastException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      Document document0 = Parser.parse("-!c?Z]dg`", "-!c?Z]dg`");
      Element element0 = document0.appendElement("em");
      element0.setSiblingIndex((-1861));
      // Undeclared exception!
//      try { 
        document0.getElementsContainingOwnText("em");
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      Document document0 = Document.createShell("5GLe`VAT&g(a:d");
      // Undeclared exception!
//      try { 
        document0.getElementsByTag("");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // String must not be empty
//         //
//         verifyException("org.jsoup.helper.Validate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("E", "E");
      document0.childNodes = null;
      // Undeclared exception!
//      try { 
        document0.getElementsByIndexLessThan((-1874));
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      Tag tag0 = Tag.valueOf("style");
      Attributes attributes0 = new Attributes();
      CDataNode cDataNode0 = new CDataNode("style");
      FormElement formElement0 = new FormElement(tag0, "style", attributes0);
      formElement0.setParentNode(cDataNode0);
      // Undeclared exception!
//      try { 
        formElement0.getElementsByIndexGreaterThan(1);
//        fail("Expecting exception: ClassCastException");
      
//      } catch(ClassCastException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("646", "646");
      Comment comment0 = new Comment("x;z+X*}4Ke-", "id");
      document0.setParentNode(comment0);
      // Undeclared exception!
//      try { 
        document0.getElementsByIndexEquals(4274);
//        fail("Expecting exception: ClassCastException");
      
//      } catch(ClassCastException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("Y", "Y");
      // Undeclared exception!
//      try { 
        document0.getElementsByClass((String) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // String must not be empty
//         //
//         verifyException("org.jsoup.helper.Validate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      Document document0 = Document.createShell("nth-child");
      document0.setParentNode(document0);
      document0.setSiblingIndex((-1433506051));
      // Undeclared exception!
//      try { 
        document0.getElementsByClass("s");
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      Document document0 = new Document("");
      // Undeclared exception!
//      try { 
        document0.getElementsByAttributeValueStarting((String) null, "");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // String must not be empty
//         //
//         verifyException("org.jsoup.helper.Validate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      Document document0 = Document.createShell("/a>");
      document0.setSiblingIndex((-16578899));
      document0.setParentNode(document0);
      // Undeclared exception!
//      try { 
        document0.getElementsByAttributeValueStarting("?[L", "ul");
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      Parser parser0 = Parser.htmlParser();
      Document document0 = parser0.parseInput("", "");
      // Undeclared exception!
//      try { 
        document0.getElementsByAttributeValueNot("", "");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // String must not be empty
//         //
//         verifyException("org.jsoup.helper.Validate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      Parser parser0 = Parser.htmlParser();
      Document document0 = parser0.parseInput("", "");
      // Undeclared exception!
//      try { 
        document0.getElementsByAttributeValueMatching("cq<`-J{P(O_kw@k$-|", "T@_ #c4iqWZqFg(7");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Pattern syntax error: T@_ #c4iqWZqFg(7
//         //
//         verifyException("org.jsoup.nodes.Element", e);
//      }
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      ParseSettings parseSettings0 = ParseSettings.preserveCase;
      Tag tag0 = Tag.valueOf("s+", parseSettings0);
      Attributes attributes0 = new Attributes();
      PseudoTextElement pseudoTextElement0 = new PseudoTextElement(tag0, "s+", attributes0);
      // Undeclared exception!
//      try { 
        pseudoTextElement0.getElementsByAttributeValueEnding("s+", "'");
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      Document document0 = Document.createShell("#root");
      // Undeclared exception!
//      try { 
        document0.getElementsByAttributeValueEnding("ZKrn=$\"TC", (String) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // String must not be empty
//         //
//         verifyException("org.jsoup.helper.Validate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment(" L/b>", " L/b>");
      // Undeclared exception!
//      try { 
        document0.getElementsByAttributeValueContaining("#", "\"");
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      Document document0 = new Document("j$Hu-d9NvwCMpNuiz");
      // Undeclared exception!
//      try { 
        document0.getElementsByAttributeValueContaining("java.lang.string@0000000076 cp367 csascii iso-ir-6 ascii iso_646.irv:1983 ansi_x3.4-1986 option default iso_646.irv:1991 iso646-us ibm367 646 us", "");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // String must not be empty
//         //
//         verifyException("org.jsoup.helper.Validate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("<!DOCTYPE", "");
      // Undeclared exception!
//      try { 
        document0.getElementsByAttributeStarting("");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // String must not be empty
//         //
//         verifyException("org.jsoup.helper.Validate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      Document document0 = Parser.parse("", "");
      // Undeclared exception!
//      try { 
        document0.getElementsByAttribute("");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // String must not be empty
//         //
//         verifyException("org.jsoup.helper.Validate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("", "");
      // Undeclared exception!
//      try { 
        document0.getElementById("");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // String must not be empty
//         //
//         verifyException("org.jsoup.helper.Validate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("v2G*o@f)e7l/Ja7:`", "v2G*o@f)e7l/Ja7:`");
      // Undeclared exception!
//      try { 
        document0.firstElementSibling();
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.jsoup.nodes.Element", e);
//      }
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      ParseSettings parseSettings0 = new ParseSettings(false, false);
      Tag tag0 = Tag.valueOf("textarea", parseSettings0);
      Attributes attributes0 = new Attributes();
      PseudoTextElement pseudoTextElement0 = new PseudoTextElement(tag0, "{8-lG.", attributes0);
      XmlDeclaration xmlDeclaration0 = new XmlDeclaration("             ", false);
      Element element0 = pseudoTextElement0.doClone(xmlDeclaration0);
      // Undeclared exception!
//      try { 
        element0.elementSiblingIndex();
//        fail("Expecting exception: ClassCastException");
      
//      } catch(ClassCastException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("Y", "Y");
      Element element0 = document0.head();
      Element element1 = element0.addClass("Y");
      // Undeclared exception!
//      try { 
        element1.cssSelector();
//        fail("Expecting exception: IllegalStateException");
      
//      } catch(IllegalStateException e) {
//         //
//         // Could not parse query 'head.java.lang.String@0000000052': unexpected token at '@0000000052'
//         //
//         verifyException("org.jsoup.select.QueryParser", e);
//      }
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      Tag tag0 = Tag.valueOf("option");
      Element element0 = new Element(tag0, "option");
      TextNode textNode0 = TextNode.createFromEncoded("0");
      Element element1 = element0.doClone(textNode0);
      // Undeclared exception!
//      try { 
        element1.cssSelector();
//        fail("Expecting exception: ClassCastException");
      
//      } catch(ClassCastException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("K[", "K[");
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      linkedHashSet0.add((String) null);
      // Undeclared exception!
//      try { 
        document0.classNames((Set<String>) linkedHashSet0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.evosuite.runtime.System", e);
//      }
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("E", "E");
      // Undeclared exception!
//      try { 
        document0.classNames((Set<String>) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Object must not be null
//         //
//         verifyException("org.jsoup.helper.Validate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      Set<String> set0 = charset0.aliases();
      ParseSettings parseSettings0 = ParseSettings.htmlDefault;
      Tag tag0 = Tag.valueOf(" />", parseSettings0);
      Attributes attributes0 = new Attributes();
      Attributes attributes1 = attributes0.clone();
      String[] stringArray0 = new String[4];
      attributes1.keys = stringArray0;
      FormElement formElement0 = new FormElement(tag0, " />", attributes1);
      // Undeclared exception!
//      try { 
        formElement0.classNames(set0);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 0
//         //
//         verifyException("org.jsoup.nodes.Attributes", e);
//      }
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("option", "option");
      // Undeclared exception!
//      try { 
        document0.child(26);
//        fail("Expecting exception: IndexOutOfBoundsException");
      
//      } catch(IndexOutOfBoundsException e) {
//         //
//         // Index: 26, Size: 1
//         //
//         verifyException("java.util.ArrayList", e);
//      }
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      Document document0 = Parser.parse("Children collection to be inserted must not be null.", "W^kb");
      // Undeclared exception!
//      try { 
        document0.child((-1245));
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("td}\"x) 3@rx8cxfo", "td}\"x) 3@rx8cxfo");
      TextNode textNode0 = TextNode.createFromEncoded("td}\"x) 3@rx8cxfo", "vD)!zM=k)");
      document0.setParentNode(textNode0);
      // Undeclared exception!
//      try { 
        document0.before((Node) textNode0);
//        fail("Expecting exception: UnsupportedOperationException");
      
//      } catch(UnsupportedOperationException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.util.AbstractList", e);
//      }
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("E", "E");
      Element element0 = document0.head();
      CDataNode cDataNode0 = new CDataNode("E");
      cDataNode0.parentNode = (Node) element0;
      // Undeclared exception!
//      try { 
        element0.before((Node) cDataNode0);
//        fail("Expecting exception: IndexOutOfBoundsException");
      
//      } catch(IndexOutOfBoundsException e) {
//         //
//         // Index: 0, Size: 0
//         //
//         verifyException("java.util.ArrayList", e);
//      }
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      Document document0 = new Document("org.jsoup.nodes.FormElement");
      document0.prependChild(document0);
      // Undeclared exception!
      document0.before("org.jsoup.nodes.FormElement");
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      Tag tag0 = Tag.valueOf("y$|C<R@+Lg&+|");
      CDataNode cDataNode0 = new CDataNode("textarea");
      Attributes attributes0 = cDataNode0.attributes();
      FormElement formElement0 = new FormElement(tag0, "YbAB:Wwc= jY", attributes0);
      // Undeclared exception!
//      try { 
        formElement0.attr((String) null, true);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Object must not be null
//         //
//         verifyException("org.jsoup.helper.Validate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("5/uj$*-fh_s=", "5/uj$*-fh_s=");
      Node[] nodeArray0 = new Node[2];
      nodeArray0[0] = (Node) document0;
      nodeArray0[1] = (Node) document0;
      document0.addChildren(nodeArray0);
      // Undeclared exception!
      document0.attr("5/uj$*-fh_s=", "5/uj$*-fh_s=");
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("Zw&R&A", "Zw&R&A");
      Document document1 = new Document("Zw&R&A");
      document0.setParentNode(document1);
      // Undeclared exception!
//      try { 
        document0.appendTo(document1);
//        fail("Expecting exception: IndexOutOfBoundsException");
      
//      } catch(IndexOutOfBoundsException e) {
//         //
//         // Index: 0, Size: 0
//         //
//         verifyException("java.util.ArrayList", e);
//      }
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      Parser parser0 = Parser.xmlParser();
      Document document0 = parser0.parseInput("style", "%KpsG");
      // Undeclared exception!
//      try { 
        document0.appendTo((Element) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Object must not be null
//         //
//         verifyException("org.jsoup.helper.Validate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("-!c?Z]d`", "-!c?Z]d`");
      // Undeclared exception!
//      try { 
        document0.appendText((String) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Object must not be null
//         //
//         verifyException("org.jsoup.helper.Validate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      Document document0 = new Document(":nth-child(");
      document0.setParentNode(document0);
      // Undeclared exception!
      document0.appendElement("");
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      Document document0 = Parser.parse("K[", "K[");
      List<Node> list0 = Parser.parseXmlFragment("K[", "br");
      document0.childNodes = list0;
      // Undeclared exception!
//      try { 
        document0.appendElement("br");
//        fail("Expecting exception: UnsupportedOperationException");
      
//      } catch(UnsupportedOperationException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.util.Collections$UnmodifiableCollection", e);
//      }
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      Document document0 = Document.createShell("                    ");
      // Undeclared exception!
//      try { 
        document0.appendElement("                    ");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // String must not be empty
//         //
//         verifyException("org.jsoup.helper.Validate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("noresize", "-!cg?Z]d`");
      Tag tag0 = Tag.valueOf("noresize");
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = new FormElement(tag0, "-!cg?Z]d`", attributes0);
      document0.setParentNode(formElement0);
      // Undeclared exception!
//      try { 
        formElement0.appendChild(document0);
//        fail("Expecting exception: IndexOutOfBoundsException");
      
//      } catch(IndexOutOfBoundsException e) {
//         //
//         // Index: 0, Size: 0
//         //
//         verifyException("java.util.ArrayList", e);
//      }
  }

  @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      Tag tag0 = Tag.valueOf("E");
      Element element0 = new Element(tag0, "E");
      // Undeclared exception!
//      try { 
        element0.appendChild((Node) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Object must not be null
//         //
//         verifyException("org.jsoup.helper.Validate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test223()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("/a>", "/a>");
      document0.setParentNode(document0);
      // Undeclared exception!
      document0.append("/a>");
  }

  @Test(timeout = 4000)
  public void test224()  throws Throwable  {
      Document document0 = new Document(">=g@:>(6To>QsnG3Gu");
      // Undeclared exception!
//      try { 
        document0.append((String) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Object must not be null
//         //
//         verifyException("org.jsoup.helper.Validate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test225()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("p'/b>", "p'/b>");
      document0.setParentNode(document0);
      // Undeclared exception!
//      try { 
        document0.after((Node) document0);
//        fail("Expecting exception: IndexOutOfBoundsException");
      
//      } catch(IndexOutOfBoundsException e) {
//         //
//         // Index: 1, Size: 0
//         //
//         verifyException("java.util.ArrayList", e);
//      }
  }

  @Test(timeout = 4000)
  public void test226()  throws Throwable  {
      Document document0 = new Document(":nth-child(");
      document0.setParentNode(document0);
      // Undeclared exception!
      document0.after("");
  }

  @Test(timeout = 4000)
  public void test227()  throws Throwable  {
      Tag tag0 = Tag.valueOf("option");
      Element element0 = new Element(tag0, "option");
      DataNode dataNode0 = new DataNode("jjV+");
      Element element1 = element0.doClone(dataNode0);
      // Undeclared exception!
//      try { 
        element1.after("jjV+");
//        fail("Expecting exception: ClassCastException");
      
//      } catch(ClassCastException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test228()  throws Throwable  {
      CDataNode cDataNode0 = new CDataNode("E");
      Attributes attributes0 = cDataNode0.attributes();
      Element element0 = null;
//      try {
        element0 = new Element((Tag) null, "E", attributes0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Object must not be null
//         //
//         verifyException("org.jsoup.helper.Validate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test229()  throws Throwable  {
      Tag tag0 = Tag.valueOf("VyNi23u2J}%7.~6[");
      Element element0 = null;
//      try {
        element0 = new Element(tag0, (String) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Object must not be null
//         //
//         verifyException("org.jsoup.helper.Validate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test230()  throws Throwable  {
      Element element0 = null;
//      try {
        element0 = new Element("");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // String must not be empty
//         //
//         verifyException("org.jsoup.helper.Validate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test231()  throws Throwable  {
      Document document0 = new Document("org.jsoup.nodes.Element");
      StringWriter stringWriter0 = new StringWriter(1162);
      document0.html(stringWriter0);
  }

  @Test(timeout = 4000)
  public void test232()  throws Throwable  {
      Document document0 = Parser.parse("", "");
      Charset charset0 = Charset.defaultCharset();
      Set<String> set0 = charset0.aliases();
      Element element0 = document0.classNames(set0);
      element0.hasClass("m;0zWT(sm0eWe0");
  }

  @Test(timeout = 4000)
  public void test233()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("E", "E");
      Charset charset0 = Charset.defaultCharset();
      Set<String> set0 = charset0.aliases();
      Element element0 = document0.classNames(set0);
      element0.hasClass("java.lang.string@0000000071 cp367 default iso-ir-6 ascii iso_646.irv:1983 ansi_x3.4-1986 ascii7 default iso_646.irv:1991 iso646-us ibm367 646 us");
  }

  @Test(timeout = 4000)
  public void test234()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("\"", "\"");
      document0.hasClass("children collection to be inserted must not be null.");
  }

  @Test(timeout = 4000)
  public void test235()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("textarea", "org.jsoup.select.Evaluator$IndexGreaterThan");
      Charset charset0 = document0.charset();
      Set<String> set0 = charset0.aliases();
      document0.classNames(set0);
      document0.hasClass("java.lang.string@0000000071 cp367 default iso-ir-6 ascii is_646.irv:1983 ansix3.4-1986 ascii7 default iso_646.irv:1991 iso646-us ibm367 646 us");
  }

  @Test(timeout = 4000)
  public void test236()  throws Throwable  {
      Document document0 = Document.createShell("&lt;");
      Locale locale0 = Locale.ROOT;
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      document0.classNames(set0);
  }

  @Test(timeout = 4000)
  public void test237()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("5ClSC/J~>B", "TDfIeL");
      document0.prependText("5ClSC/J~>B");
      document0.data();
  }

  @Test(timeout = 4000)
  public void test238()  throws Throwable  {
      Document document0 = new Document(":nth-child(");
      Element element0 = document0.prependText(":nth-child(");
      element0.hasText();
  }

  @Test(timeout = 4000)
  public void test239()  throws Throwable  {
      Tag tag0 = Tag.valueOf("op3ion");
      Element element0 = new Element(tag0, "op3ion");
      element0.elementSiblingIndex();
  }

  @Test(timeout = 4000)
  public void test240()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("E", "E");
      Element element0 = document0.appendElement("E");
      element0.elementSiblingIndex();
  }

  @Test(timeout = 4000)
  public void test241()  throws Throwable  {
      Document document0 = Document.createShell("nth-child");
      document0.setParentNode(document0);
      document0.nextElementSibling();
  }

  @Test(timeout = 4000)
  public void test242()  throws Throwable  {
      Document document0 = new Document("org.jsoup.nodes.FormElement");
      document0.prependChild(document0);
      document0.cssSelector();
  }

  @Test(timeout = 4000)
  public void test243()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("V", "V");
      Element element0 = document0.body();
      Element element1 = element0.appendElement("\"kw]f[g{;");
      element1.before("V");
  }

  @Test(timeout = 4000)
  public void test244()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("STOP", "STOP");
      document0.addClass("STOP");
      document0.clearAttributes();
  }

  @Test(timeout = 4000)
  public void test245()  throws Throwable  {
      Document document0 = new Document("j$Hu-d9NvwCMpNuiz");
      document0.className();
  }

  @Test(timeout = 4000)
  public void test246()  throws Throwable  {
      Parser parser0 = Parser.htmlParser();
      Document document0 = parser0.parseInput("", "");
      // Undeclared exception!
//      try { 
        document0.getElementsMatchingOwnText((Pattern) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.jsoup.select.Evaluator$MatchesOwn", e);
//      }
  }

  @Test(timeout = 4000)
  public void test247()  throws Throwable  {
      Document document0 = new Document("org.jsoup.nodes.Element");
      document0.ownText();
  }

  @Test(timeout = 4000)
  public void test248()  throws Throwable  {
      Tag tag0 = Tag.valueOf("ovtioh");
      Element element0 = new Element(tag0, "ovtioh");
      // Undeclared exception!
//      try { 
        element0.attr((String) null, "math");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.jsoup.parser.ParseSettings", e);
//      }
  }

  @Test(timeout = 4000)
  public void test249()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("Aqt#=QT", "Aqt#=QT");
      document0.isBlock();
  }

  @Test(timeout = 4000)
  public void test250()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("5ClSC/J~>B", "TDfIeL");
      document0.empty();
  }

  @Test(timeout = 4000)
  public void test251()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("head", "head");
      Element element0 = document0.createElement("head");
      Node[] nodeArray0 = new Node[2];
      nodeArray0[0] = (Node) document0;
      nodeArray0[1] = (Node) element0;
      element0.insertChildren(0, nodeArray0);
  }

  @Test(timeout = 4000)
  public void test252()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("K[", "K[");
      Pattern pattern0 = Pattern.compile("optgroup");
      document0.getElementsMatchingText(pattern0);
  }

  @Test(timeout = 4000)
  public void test253()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("E", "E");
      // Undeclared exception!
//      try { 
        document0.is((Evaluator) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.jsoup.nodes.Element", e);
//      }
  }

  @Test(timeout = 4000)
  public void test254()  throws Throwable  {
      Document document0 = new Document("Aqt#=QT");
      // Undeclared exception!
//      try { 
        document0.select("Aqt#=QT");
//        fail("Expecting exception: IllegalStateException");
      
//      } catch(IllegalStateException e) {
//         //
//         // String must not be empty
//         //
//         verifyException("org.jsoup.select.QueryParser", e);
//      }
  }

  @Test(timeout = 4000)
  public void test255()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("K[", "K[");
      document0.id();
  }

  @Test(timeout = 4000)
  public void test256()  throws Throwable  {
      Document document0 = Parser.parse("K[", "K[");
      document0.classNames();
  }

  @Test(timeout = 4000)
  public void test257()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("td}\"x) 3@rx8cxfo", "td}\"x) 3@rx8cxfo");
      document0.title("td}\"x) 3@rx8cxfo");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      document_OutputSettings0.outline(true);
      document0.outputSettings(document_OutputSettings0);
      document0.outerHtml();
  }

  @Test(timeout = 4000)
  public void test258()  throws Throwable  {
      Tag tag0 = Tag.valueOf("br");
      Element element0 = new Element(tag0, "");
      StringBuffer stringBuffer0 = new StringBuffer();
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Document.OutputSettings.Syntax document_OutputSettings_Syntax0 = Document.OutputSettings.Syntax.xml;
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.syntax(document_OutputSettings_Syntax0);
      element0.outerHtmlHead(stringBuffer0, 0, document_OutputSettings1);
  }

  @Test(timeout = 4000)
  public void test259()  throws Throwable  {
      Document document0 = Parser.parse("", "");
      PipedWriter pipedWriter0 = new PipedWriter();
      // Undeclared exception!
//      try { 
        document0.html(pipedWriter0);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // java.io.IOException: Pipe not connected
//         //
//         verifyException("org.jsoup.nodes.Node$OuterHtmlVisitor", e);
//      }
  }

  @Test(timeout = 4000)
  public void test260()  throws Throwable  {
      Tag tag0 = Tag.valueOf("option");
      Element element0 = new Element(tag0, "option");
      element0.appendElement("option");
      element0.outerHtml();
  }

  @Test(timeout = 4000)
  public void test261()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("`.\"aw}&l||fD5$", "`.\"aw}&l||fD5$");
      document0.appendElement("br");
      document0.outerHtml();
  }

  @Test(timeout = 4000)
  public void test262()  throws Throwable  {
      Document document0 = Parser.parse("java.lang.string@0000000079 cp367 csascii iso-ir-6 ascii iso_646.irv:1983 ansi_x3.4-1986 ascii7 default iso_646.irv:1991 iso646-us ibm367  /> us", "ywl");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.prettyPrint(false);
      Document document1 = document0.outputSettings(document_OutputSettings1);
      document1.outerHtml();
  }

  @Test(timeout = 4000)
  public void test263()  throws Throwable  {
      Document document0 = new Document("textarea");
      document0.tagName("textarea");
      // Undeclared exception!
//      try { 
        document0.val("bd~zu6brE1Gs< F");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.jsoup.nodes.Document", e);
//      }
  }

  @Test(timeout = 4000)
  public void test264()  throws Throwable  {
      Document document0 = Document.createShell("                    ");
      document0.tagName("textarea");
      document0.val();
  }

  @Test(timeout = 4000)
  public void test265()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("E", "E");
      Charset charset0 = document0.charset();
      Set<String> set0 = charset0.aliases();
      document0.classNames(set0);
      document0.hasClass("Mc8w");
  }

  @Test(timeout = 4000)
  public void test266()  throws Throwable  {
      Parser parser0 = Parser.xmlParser();
      StringReader stringReader0 = new StringReader("tetare#a");
      Document document0 = parser0.parseInput((Reader) stringReader0, "tetare#a");
      Charset charset0 = Charset.defaultCharset();
      Set<String> set0 = charset0.aliases();
      document0.classNames(set0);
      document0.getElementsByClass("p)D3d>tO");
  }

  @Test(timeout = 4000)
  public void test267()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("Y", "Y");
      document0.addClass("Y");
      document0.getElementsByClass("Y");
  }

  @Test(timeout = 4000)
  public void test268()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("oOpo?", "oOpo?");
      Charset charset0 = Charset.defaultCharset();
      Set<String> set0 = charset0.aliases();
      document0.classNames(set0);
      document0.hasClass("iso_646.irv:1983");
  }

  @Test(timeout = 4000)
  public void test269()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("K[", "K[");
      CDataNode cDataNode0 = new CDataNode("java.lang.string@0000000110 cp367 csascii iso-ir-6 ascii td}\"x) 3@rx8cxfo ansi_x3.4-1986 ascii7 default iso_646.irv:1991 iso646-us ibm367 646 us");
      document0.prependChild(cDataNode0);
      document0.data();
  }

  @Test(timeout = 4000)
  public void test270()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("td}\"x) 3@rx8cxfo", "td}\"x) 3@rx8cxfo");
      DataNode dataNode0 = DataNode.createFromEncoded("td}\"x) 3@rx8cxfo", "&66L?;z2M`Q");
      Element element0 = document0.prependChild(dataNode0);
      element0.data();
  }

  @Test(timeout = 4000)
  public void test271()  throws Throwable  {
      Document document0 = new Document(" > ");
      Element element0 = document0.prependText("");
      element0.hasText();
  }

  @Test(timeout = 4000)
  public void test272()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("G(hb!ad!di=(DA", "G(hb!ad!di=(DA");
      document0.hasText();
  }

  @Test(timeout = 4000)
  public void test273()  throws Throwable  {
      Document document0 = Parser.parse("", "");
      document0.hasText();
  }

  @Test(timeout = 4000)
  public void test274()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("/a>", "/a>");
      document0.setParentNode(document0);
      document0.text();
  }

  @Test(timeout = 4000)
  public void test275()  throws Throwable  {
      CDataNode cDataNode0 = new CDataNode("attributesinglevaluecharssorted");
      Element.preserveWhitespace(cDataNode0);
  }

  @Test(timeout = 4000)
  public void test276()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("K[", "K[");
      document0.appendElement("br");
      document0.getElementsContainingOwnText("br");
  }

  @Test(timeout = 4000)
  public void test277()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("", "");
      Element element0 = document0.body();
      CDataNode cDataNode0 = new CDataNode("");
      element0.before((Node) cDataNode0);
      document0.getElementsMatchingText("");
  }

  @Test(timeout = 4000)
  public void test278()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("E", "E");
      document0.title("E");
      document0.getElementsContainingOwnText("E");
  }

  @Test(timeout = 4000)
  public void test279()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed(" />", " />");
      DataNode dataNode0 = DataNode.createFromEncoded("d^20=kqca4q*&", "8L*/ai");
      document0.appendChild(dataNode0);
      document0.getElementsContainingOwnText("8L*/ai");
  }

  @Test(timeout = 4000)
  public void test280()  throws Throwable  {
      Document document0 = Document.createShell("`.\"aw}&l||fD5$");
      document0.prependText("`.\"aw}&l||fD5$");
      Element element0 = document0.append("`.\"aw}&l||fD5$");
      element0.getElementsMatchingText("wf=CW");
  }

  @Test(timeout = 4000)
  public void test281()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("K[", "K[");
      document0.appendElement("br");
      document0.text();
  }

  @Test(timeout = 4000)
  public void test282()  throws Throwable  {
      DataNode dataNode0 = DataNode.createFromEncoded("jjV+", "jjV+");
      Parser parser0 = Parser.xmlParser();
      Document document0 = parser0.parseInput("details", "textarea");
      document0.prependChild(dataNode0);
      document0.text();
  }

  @Test(timeout = 4000)
  public void test283()  throws Throwable  {
      Document document0 = new Document("s-*+[agi:d$P.0.6");
      document0.appendTo(document0);
      document0.lastElementSibling();
  }

  @Test(timeout = 4000)
  public void test284()  throws Throwable  {
      Document document0 = Document.createShell("nth-child");
      document0.setParentNode(document0);
      document0.firstElementSibling();
  }

  @Test(timeout = 4000)
  public void test285()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("<!doctype", "option");
      CDataNode cDataNode0 = new CDataNode("zY%DL!cjh^J|H)1Y8");
      document0.setParentNode(cDataNode0);
      // Undeclared exception!
//      try { 
        document0.previousElementSiblings();
//        fail("Expecting exception: ClassCastException");
      
//      } catch(ClassCastException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test286()  throws Throwable  {
      Document document0 = Document.createShell("/a>");
      document0.setParentNode(document0);
      document0.previousElementSibling();
  }

  @Test(timeout = 4000)
  public void test287()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("G(hb!ad!di=(DA", "G(hb!ad!di=(DA");
      document0.previousElementSibling();
  }

  @Test(timeout = 4000)
  public void test288()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("", "");
      Element element0 = document0.head();
      Elements elements0 = element0.nextElementSiblings();
      assertEquals(1, elements0.size());
      assertEquals(0, element0.siblingIndex());
  }

  @Test(timeout = 4000)
  public void test289()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("u?d!#", "");
      Element element0 = document0.nextElementSibling();
      assertNull(element0);
  }

  @Test(timeout = 4000)
  public void test290()  throws Throwable  {
      Document document0 = Parser.parse("s-*+[agi:d$P.0.6", "s-*+[agi:d$P.0.6");
      document0.siblingElements();
      assertEquals("s-*+[agi:d$P.0.6", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test291()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed(" > ", " > ");
      document0.appendChild(document0);
      Elements elements0 = document0.siblingElements();
      assertEquals(" > ", document0.baseUri());
      assertFalse(elements0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test292()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment(" L/b>", " L/b>");
      Element element0 = document0.head();
      element0.after("_j0a");
      String string0 = element0.cssSelector();
      assertEquals("html > head:nth-child(1)", string0);
      assertEquals(" L/b>", element0.baseUri());
  }

  @Test(timeout = 4000)
  public void test293()  throws Throwable  {
      Document document0 = new Document("org.jsoup.nodes.FormElement");
      document0.addClass("org.jsoup.nodes.FormElement");
      document0.cssSelector();
      assertEquals("org.jsoup.nodes.FormElement", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test294()  throws Throwable  {
      Parser parser0 = Parser.htmlParser();
      Document document0 = parser0.parseInput("E", "E");
      Node[] nodeArray0 = new Node[9];
      // Undeclared exception!
//      try { 
        document0.insertChildren(1208, nodeArray0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Insert position out of bounds.
//         //
//         verifyException("org.jsoup.helper.Validate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test295()  throws Throwable  {
      Parser parser0 = Parser.htmlParser();
      Document document0 = parser0.parseInput("", "");
      Node[] nodeArray0 = new Node[7];
      // Undeclared exception!
//      try { 
        document0.insertChildren((-1436010313), nodeArray0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Insert position out of bounds.
//         //
//         verifyException("org.jsoup.helper.Validate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test296()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("E", "E");
      List<DataNode> list0 = document0.dataNodes();
      // Undeclared exception!
//      try { 
        document0.insertChildren((-1644953643), (Collection<? extends Node>) list0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Insert position out of bounds.
//         //
//         verifyException("org.jsoup.helper.Validate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test297()  throws Throwable  {
      Document document0 = Document.createShell("opin");
      LinkedList<XmlDeclaration> linkedList0 = new LinkedList<XmlDeclaration>();
      Element element0 = document0.insertChildren((-2), (Collection<? extends Node>) linkedList0);
      assertEquals(1, element0.childNodeSize());
      assertEquals("opin", element0.baseUri());
  }

  @Test(timeout = 4000)
  public void test298()  throws Throwable  {
      Document document0 = new Document(":nth-child(");
      LinkedList<DocumentType> linkedList0 = new LinkedList<DocumentType>();
      // Undeclared exception!
//      try { 
        document0.insertChildren(2, (Collection<? extends Node>) linkedList0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Insert position out of bounds.
//         //
//         verifyException("org.jsoup.helper.Validate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test299()  throws Throwable  {
      Document document0 = Document.createShell(" L/b>");
      DataNode dataNode0 = new DataNode("]TlLq`s3$6S }k", " lEnK`%HSU");
      document0.prependChild(dataNode0);
      document0.dataNodes();
      assertEquals(2, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test300()  throws Throwable  {
      Parser parser0 = Parser.xmlParser();
      Document document0 = parser0.parseInput("E[+3[u^4", "E[+3[u^4");
      List<TextNode> list0 = document0.textNodes();
      assertEquals("E[+3[u^4", document0.baseUri());
      assertEquals(1, list0.size());
  }

  @Test(timeout = 4000)
  public void test301()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("Insert position out of bounds.", "mf");
      List<TextNode> list0 = document0.textNodes();
      assertTrue(list0.isEmpty());
      assertEquals("mf", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test302()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("E", "E");
      Element element0 = document0.head();
      CDataNode cDataNode0 = new CDataNode("E");
      Element element1 = element0.before((Node) cDataNode0);
      element1.nextElementSibling();
      assertEquals(1, element0.siblingIndex());
      assertEquals(1, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test303()  throws Throwable  {
      Document document0 = Parser.parse("type", "type");
      Elements elements0 = document0.getElementsByIndexGreaterThan((-1953631118));
      assertEquals("type", document0.baseUri());
      assertEquals(4, elements0.size());
  }

  @Test(timeout = 4000)
  public void test304()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("attributeNameCharsSorted", "attributeNameCharsSorted");
      document0.selectFirst("attributeNameCharsSorted");
      assertEquals(1, document0.childNodeSize());
      assertEquals("attributeNameCharsSorted", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test305()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("Hh:&r*/zggF[", "Hh:&r*/zggF[");
      document0.getAllElements();
      assertEquals(1, document0.childNodeSize());
      assertEquals("Hh:&r*/zggF[", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test306()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("V", "V");
      // Undeclared exception!
//      try { 
        document0.before("V");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Object must not be null
//         //
//         verifyException("org.jsoup.helper.Validate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test307()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("K[", "K[");
      document0.getElementsByAttribute("org.jsoup.nodes.Attributes$Dataset");
      assertEquals("K[", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test308()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("td}\"x) 3@rx8cxfo", "td}\"x) 3@rx8cxfo");
      Elements elements0 = document0.getElementsByAttributeValueNot("java.lang.string@0000000106", " ");
      assertEquals(1, document0.childNodeSize());
      assertEquals(0, elements0.size());
      assertEquals("td}\"x) 3@rx8cxfo", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test309()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("E", "E");
      Element element0 = document0.shallowClone();
      assertEquals(1, document0.childNodeSize());
      assertEquals("E", element0.baseUri());
  }

  @Test(timeout = 4000)
  public void test310()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("UN?]jbM", "nullChar");
      assertEquals("nullChar", document0.baseUri());
      
      document0.doSetBaseUri((String) null);
      assertEquals(1, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test311()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("p'/b>", "p'/b>");
      // Undeclared exception!
//      try { 
        document0.after((Node) document0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Object must not be null
//         //
//         verifyException("org.jsoup.helper.Validate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test312()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("V", "V");
      document0.getElementsByAttributeValueContaining("\"kw]f[g{;", "V");
      assertEquals("V", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test313()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("g:~9D4,", "textarea");
      Pattern pattern0 = Pattern.compile("");
      document0.getElementsByAttributeValueMatching("textarea", pattern0);
      assertEquals(1, document0.childNodeSize());
      assertEquals("textarea", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test314()  throws Throwable  {
      Document document0 = Parser.parse("type", "type");
      document0.getElementsByAttributeValueEnding("t?Of5E>*huS", "L\",");
      assertEquals("type", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test315()  throws Throwable  {
      Document document0 = Parser.parse("K[", "K[");
      document0.is("br");
      assertEquals("K[", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test316()  throws Throwable  {
      Document document0 = new Document("s-*+[agi:d$P.0.6");
      // Undeclared exception!
//      try { 
        document0.getElementsByAttributeValueMatching("br", (String) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test317()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("E", "E");
      // Undeclared exception!
//      try { 
        document0.wrap("E");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.jsoup.nodes.Node", e);
//      }
  }

  @Test(timeout = 4000)
  public void test318()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("646", "646");
      Elements elements0 = document0.getElementsByIndexEquals(4274);
      assertEquals("646", document0.baseUri());
      assertTrue(elements0.isEmpty());
      assertEquals(1, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test319()  throws Throwable  {
      Document document0 = Document.createShell("e9");
      document0.getElementsByAttributeStarting("e9");
      assertEquals("e9", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test320()  throws Throwable  {
      Document document0 = new Document(":nth-child(");
      document0.normalise();
      document0.setParentNode(document0);
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      // Undeclared exception!
      document0.html(charArrayWriter0);
  }

  @Test(timeout = 4000)
  public void test321()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("E", "E");
      Elements elements0 = document0.getElementsByIndexLessThan((-1874));
      assertEquals(1, document0.childNodeSize());
      assertEquals("E", document0.baseUri());
      assertEquals(0, elements0.size());
  }

  @Test(timeout = 4000)
  public void test322()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment(" L/b>", " L/b>");
      // Undeclared exception!
//      try { 
        document0.after("_j0a");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Object must not be null
//         //
//         verifyException("org.jsoup.helper.Validate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test323()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("option", "BogusDoctype");
      Elements elements0 = document0.getElementsMatchingOwnText("option");
      assertEquals(1, elements0.size());
      assertEquals("BogusDoctype", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test324()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment(" L/b>", " L/b>");
      Element element0 = document0.head();
      String string0 = element0.cssSelector();
      assertEquals(" L/b>", element0.baseUri());
      assertEquals("html > head", string0);
  }

  @Test(timeout = 4000)
  public void test325()  throws Throwable  {
      Document document0 = Document.createShell("/a>");
      document0.getElementsByAttributeValueStarting("?[L", "ul");
      assertEquals("/a>", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test326()  throws Throwable  {
      Document document0 = Document.createShell("J");
      // Undeclared exception!
//      try { 
        document0.getElementsByAttributeValue("", "J");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // String must not be empty
//         //
//         verifyException("org.jsoup.helper.Validate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test327()  throws Throwable  {
      Parser parser0 = Parser.xmlParser();
      Document document0 = parser0.parseInput("style", "%KpsG");
      document0.wholeText();
      assertEquals("%KpsG", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test328()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("E", "E");
      // Undeclared exception!
//      try { 
        document0.before((Node) document0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Object must not be null
//         //
//         verifyException("org.jsoup.helper.Validate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test329()  throws Throwable  {
      Element element0 = new Element("option");
      Node[] nodeArray0 = new Node[1];
      nodeArray0[0] = (Node) element0;
      Element element1 = element0.insertChildren(0, nodeArray0);
      assertEquals("", element1.baseUri());
  }

  @Test(timeout = 4000)
  public void test330()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("G(hb!ad!di=(DA", "G(hb!ad!di=(DA");
      // Undeclared exception!
//      try { 
        document0.addClass((String) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Object must not be null
//         //
//         verifyException("org.jsoup.helper.Validate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test331()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("E", "E");
      document0.dataset();
      assertEquals("E", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test332()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("attributeNameCharsSorted", "attributeNameCharsSorted");
      document0.tagName("attributeNameCharsSorted");
      Element element0 = document0.selectFirst("attributeNameCharsSorted");
      assertEquals("attributeNameCharsSorted", element0.baseUri());
      assertEquals(1, element0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test333()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("UN?]jbM", "textarea");
      Element element0 = document0.child(0);
      assertEquals("textarea", element0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertNotNull(element0);
  }

  @Test(timeout = 4000)
  public void test334()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("<!doctype", "option");
      document0.previousElementSiblings();
      assertEquals("option", document0.baseUri());
      assertEquals(2, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test335()  throws Throwable  {
      Document document0 = new Document("s-*+[agi:d$P.0.6");
      document0.children();
      assertEquals("s-*+[agi:d$P.0.6", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test336()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("u?d!#", "");
      document0.getElementById("u?d!#");
  }
}
