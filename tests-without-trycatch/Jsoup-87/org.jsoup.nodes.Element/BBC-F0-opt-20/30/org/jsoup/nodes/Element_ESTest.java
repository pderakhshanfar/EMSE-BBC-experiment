/*
 * This file was automatically generated by EvoSuite
 * Fri Oct 22 21:29:30 GMT 2021
 */

package org.jsoup.nodes;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedWriter;
import java.io.IOException;
import java.io.PipedReader;
import java.io.PipedWriter;
import java.io.StringWriter;
import java.nio.CharBuffer;
import java.nio.ReadOnlyBufferException;
import java.nio.charset.Charset;
import java.util.Collection;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.Set;
import java.util.regex.Pattern;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.jsoup.nodes.Attribute;
import org.jsoup.nodes.Attributes;
import org.jsoup.nodes.CDataNode;
import org.jsoup.nodes.Comment;
import org.jsoup.nodes.DataNode;
import org.jsoup.nodes.Document;
import org.jsoup.nodes.DocumentType;
import org.jsoup.nodes.Element;
import org.jsoup.nodes.FormElement;
import org.jsoup.nodes.Node;
import org.jsoup.nodes.PseudoTextElement;
import org.jsoup.nodes.TextNode;
import org.jsoup.nodes.XmlDeclaration;
import org.jsoup.parser.ParseSettings;
import org.jsoup.parser.Parser;
import org.jsoup.parser.Tag;
import org.jsoup.select.Elements;
import org.jsoup.select.Evaluator;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Element_ESTest extends Element_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("pre", "pre");
      document0.toggleClass("pre");
      document0.addClass("br");
      document0.hasClass("org.jsoup.nodes.Entities$1");
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("M3Dvy6O5RwB", "M3Dvy6O5RwB");
      document0.toggleClass("M3Dvy6O5RwB");
      document0.addClass("Pattern syntax error: ");
      document0.hasClass("M3Dvy6O5RwB");
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Document document0 = new Document("6jCsKLjHCjooZ_");
      document0.setParentNode(document0);
      document0.nextElementSibling();
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment(")lm2vciz8,q&gkk", ")LM2VCIZ8,q&gKK");
      Elements elements0 = document0.getElementsByAttributeValue(")LM2VCIZ8,q&gKK", ")LM2VCIZ8,q&gKK");
      document0.insertChildren(1, (Collection<? extends Node>) elements0);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Document document0 = Parser.parse("B(Zoj@q\"%([)v#x", "B(Zoj@q\"%([)v#x");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      StringBuilder stringBuilder0 = new StringBuilder(0);
      document0.outerHtmlTail(stringBuilder0, 32, document_OutputSettings0);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Document document0 = Document.createShell(")LM2VCIZ8,q&gKK");
      document0.nodelistChanged();
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("O", "O");
      document0.ensureChildNodes();
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Tag tag0 = Tag.valueOf("id");
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = new FormElement(tag0, "G?(Ga, 9duI0<)7[.", attributes0);
      formElement0.doSetBaseUri(":parent%s");
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Parser parser0 = Parser.xmlParser();
      Document document0 = parser0.parseInput("+vP*B(x9C>B-Am6wFy0", " > ");
      document0.wrap("+vP*B(x9C>B-Am6wFy0");
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("M3Dvy6O5RwB", "M3Dvy6O5RwB");
      Element element0 = document0.head();
      element0.wrap("M3Dvy6O5RwB");
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("M-", "M-");
      Element element0 = document0.body();
      element0.wrap("+*)aqSyp|e^pF|TRqZ");
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Document document0 = Document.createShell(")LM2VCIZ8,q&gKK");
      document0.wholeText();
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Document document0 = new Document("7");
      document0.setSiblingIndex((-4390));
      document0.val("]Df");
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Document document0 = new Document("p");
      document0.tagName("p");
      document0.val("d7xh^2Nr}4a3VY(:L|,");
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Document document0 = Parser.parse("FE_yZ6.AuG", "8E");
      Element element0 = document0.appendElement(")lm2vciz8,q&gkk");
      element0.val("8E");
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Document document0 = new Document("Ky6@\"UGD");
      document0.setSiblingIndex((-724));
      document0.toggleClass("");
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Document document0 = Parser.parse(")LM2VCIZ8,q&gKK", ")LM2VCIZ8,q&gKK");
      Element element0 = document0.body();
      element0.toggleClass("Insert position out of bounds.");
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Element element0 = new Element("-]D V}9lj6M`UY");
      Element element1 = element0.prependElement("titl{");
      Element element2 = element1.before((Node) element0);
      element2.text("gFvT/");
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Tag tag0 = Tag.valueOf("html");
      Attributes attributes0 = new Attributes();
      PseudoTextElement pseudoTextElement0 = new PseudoTextElement(tag0, "html", attributes0);
      pseudoTextElement0.setSiblingIndex((-1095));
      pseudoTextElement0.text(" />");
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("pre", "pre");
      document0.tagName("pre");
      document0.text("pre");
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Document document0 = Document.createShell("pre");
      document0.text();
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Document document0 = new Document("7");
      document0.setSiblingIndex((-4390));
      document0.tagName("JX%_7.caIeYU");
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Document document0 = Parser.parse("</", "noresize");
      Element element0 = document0.body();
      element0.tagName("ScriptDataEscapedLessthanSign");
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("SKIP_CHILDREN", "SKIP_CHILDREN");
      document0.tagName();
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("pre", "pre");
      Element element0 = document0.appendElement("title");
      element0.tag();
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("pre", "pre");
      Element element0 = document0.body();
      element0.tag();
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("Children collection to be inserted must not be null.", "Children collection to be inserted must not be null.");
      document0.tag();
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("pre", "li");
      Element element0 = document0.body();
      element0.shallowClone();
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("jkyo6qz=", "jkyo6qz=");
      document0.tagName("Orogrkss");
      document0.selectFirst("Orogrkss");
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("cq", "cq");
      Element element0 = document0.appendElement("cq");
      element0.selectFirst("cq");
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("Q_iN{?", ")LM2VCIy8,q&gKK");
      document0.title(")LM2VCIy8,q&gKK");
      document0.selectFirst("head");
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Document document0 = new Document("7");
      document0.select("7");
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Document document0 = new Document("p");
      document0.tagName("p");
      document0.select("p");
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("pre", "pre");
      Element element0 = document0.body();
      element0.removeClass("pre");
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("BeforeAttributeValue", "BeforeAttributeValue");
      document0.siblingIndex = (-1110026255);
      document0.removeClass("BeforeAttributeValue");
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("pre", "V[_L*J;pls<ca;&o");
      Element element0 = document0.head();
      element0.removeClass("Tag name must not be empty.");
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("gF", "gF");
      Element element0 = document0.appendElement("gF");
      element0.previousElementSibling();
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("c,r", "c,r");
      Element element0 = document0.tagName("title");
      Element.preserveWhitespace(element0);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed(")lm2vciz8,q&gkk", ")lm2vciz8,q&gkk");
      Element element0 = document0.body();
      element0.prependText(")lm2vciz8,q&gkk");
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Document document0 = Document.createShell("");
      Element element0 = document0.body();
      element0.prependChild(document0);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      ParseSettings parseSettings0 = ParseSettings.preserveCase;
      Tag tag0 = Tag.valueOf("F$on|Zb?", parseSettings0);
      CDataNode cDataNode0 = new CDataNode("br");
      Attributes attributes0 = cDataNode0.attributes();
      FormElement formElement0 = new FormElement(tag0, "O@95", attributes0);
      formElement0.siblingIndex = (-1);
      formElement0.prepend("br");
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Document document0 = Document.createShell("textarea");
      Element element0 = document0.body();
      element0.prepend("textarea");
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Element element0 = new Element("User agent must not be null");
      element0.prepend("");
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed(" ", " ");
      document0.parents();
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Document document0 = Parser.parse("?X>tg<", "?x&[NSQ");
      Element element0 = document0.body();
      element0.parents();
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("p%Y^q;&X~", "p%Y^q;&X~");
      document0.appendChild(document0);
      document0.parent();
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("insert position out of bounds.", "insert position out of bounds.");
      Element element0 = document0.body();
      element0.parent();
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Element element0 = new Element("OG::");
      Tag tag0 = Tag.valueOf("titl{");
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = new FormElement(tag0, "titl{", attributes0);
      Element element1 = element0.appendTo(formElement0);
      formElement0.html("");
      element1.parent();
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Document document0 = Parser.parse("i;4G6E\"6pz#", "i;4G6E\"6pz#");
      document0.html("#root");
      document0.ownText();
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Document document0 = Document.createShell("u-N>");
      document0.nodeName();
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("", "Z>x55?:BldB|");
      Element element0 = document0.head();
      element0.nextElementSiblings();
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("SKIP_CHILDREN", "SKIP_CHILDREN");
      Element element0 = document0.head();
      element0.nextElementSibling();
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Document document0 = Document.createShell(")LM2VCIZ8,q&gKK");
      document0.prependChild(document0);
      document0.lastElementSibling();
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("p", "``bZt=?2iqi");
      Element element0 = document0.appendElement("p");
      element0.isBlock();
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Tag tag0 = Tag.valueOf("n");
      Attributes attributes0 = new Attributes();
      PseudoTextElement pseudoTextElement0 = new PseudoTextElement(tag0, "n", attributes0);
      Evaluator.IsEmpty evaluator_IsEmpty0 = new Evaluator.IsEmpty();
      pseudoTextElement0.is((Evaluator) evaluator_IsEmpty0);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Document document0 = Document.createShell("");
      Evaluator.Class evaluator_Class0 = new Evaluator.Class("!/<NtSur%G");
      document0.is((Evaluator) evaluator_Class0);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("gF", "gF");
      Element element0 = document0.appendElement("gF");
      element0.is("gF");
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Document document0 = new Document("html");
      Node[] nodeArray0 = new Node[0];
      document0.insertChildren(0, nodeArray0);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Document document0 = Parser.parse(")LM2VCIZ8,q&gKK", ")LM2VCIZ8,q&gKK");
      LinkedList<Node> linkedList0 = new LinkedList<Node>();
      linkedList0.add((Node) document0);
      document0.insertChildren(0, (Collection<? extends Node>) linkedList0);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Tag tag0 = Tag.valueOf("em");
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = new FormElement(tag0, "lg@\"", attributes0);
      Elements elements0 = formElement0.getElementsMatchingOwnText("org.jsoup.nodes.Element$2");
      formElement0.insertChildren(0, (Collection<? extends Node>) elements0);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Document document0 = Parser.parse(")LM2VCIZ8,q&gKK", ")LM2VCIZ8,q&gKK");
      Document document1 = Parser.parse("fUraAk(hj?", "fUraAk(hj?");
      Element element0 = document1.appendTo(document0);
      element0.html("$?_Q)C0");
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      ParseSettings parseSettings0 = ParseSettings.preserveCase;
      Tag tag0 = Tag.valueOf("F$on|Zb?", parseSettings0);
      CDataNode cDataNode0 = new CDataNode("br");
      Attributes attributes0 = cDataNode0.attributes();
      FormElement formElement0 = new FormElement(tag0, "O@95", attributes0);
      formElement0.siblingIndex = (-1);
      formElement0.html("C`L}^;>;~");
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Tag tag0 = Tag.valueOf("title");
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = new FormElement(tag0, "", attributes0);
      formElement0.html("Pattern syntax error: ");
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Document document0 = new Document("t&\"");
      document0.html((CharBuffer) null);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Document document0 = new Document("p");
      document0.html();
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Element element0 = new Element("E:b&fH)DE8kk'");
      element0.hasAttributes();
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Tag tag0 = Tag.valueOf("org.jsoup.select.Evaluator$Tag");
      PseudoTextElement pseudoTextElement0 = new PseudoTextElement(tag0, "org.jsoup.select.Evaluator$Tag", (Attributes) null);
      pseudoTextElement0.hasAttributes();
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      ParseSettings parseSettings0 = ParseSettings.htmlDefault;
      Tag tag0 = Tag.valueOf("id", parseSettings0);
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = new FormElement(tag0, "id", attributes0);
      Pattern pattern0 = Pattern.compile("id");
      formElement0.getElementsMatchingText(pattern0);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Document document0 = Document.createShell("P");
      document0.getElementsMatchingText("");
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Document document0 = Parser.parse("i;4G6E\"6pz#", "i;4G6E\"6pz#");
      document0.getElementsMatchingOwnText("i;4G6E\"6pz#");
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Tag tag0 = Tag.valueOf("id");
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = new FormElement(tag0, "G?(Ga, 9duI0<)7[.", attributes0);
      formElement0.getElementsContainingText("G?(Ga, 9duI0<)7[.");
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Tag tag0 = Tag.valueOf("gxt~");
      Element element0 = new Element(tag0, "");
      element0.getElementsContainingOwnText("");
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Document document0 = Parser.parse(")LM2VCIZ8,q&gKK", ")LM2VCIZ8,q&gKK");
      document0.getElementsByTag(")LM2VCIZ8,q&gKK");
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      ParseSettings parseSettings0 = ParseSettings.htmlDefault;
      Tag tag0 = Tag.valueOf(")lm2vciz8,q&gkk", parseSettings0);
      Element element0 = new Element(tag0, ")lm2vciz8,q&gkk");
      element0.getElementsByTag(")lm2vciz8,q&gkk");
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Document document0 = Parser.parse("LM2VCZ8,\\&gKK", "LM2VCZ8,\\&gKK");
      document0.getElementsByIndexLessThan(2917);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Element element0 = new Element("#");
      element0.getElementsByIndexGreaterThan(2007);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Document document0 = Parser.parse("B(Zoj@q\"%([)v#x", "B(Zoj@q\"%([)v#x");
      document0.getElementsByIndexEquals(2147483645);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Document document0 = Document.createShell(")LM2VCIZ8,q&gKK");
      document0.getElementsByClass(")LM2VCIZ8,q&gKK");
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Document document0 = Parser.parse("L(2VCZ8,\\&gKK", "L(2VCZ8,\\&gKK");
      document0.getElementsByAttributeValueContaining("L(2VCZ8,\\&gKK", " ");
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Tag tag0 = Tag.valueOf("d5,!c&d ");
      CDataNode cDataNode0 = new CDataNode("d5,!c&d ");
      Attributes attributes0 = cDataNode0.attributes();
      Attribute attribute0 = new Attribute("d5,!c&d ", "");
      Attributes attributes1 = attributes0.put(attribute0);
      Element element0 = new Element(tag0, "d5,!c&d ", attributes1);
      element0.getElementsByAttributeStarting("d5,!c&d ");
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("textarea", "textarea");
      document0.getElementsByAttribute("!dS[<V1`0ar{)d5dJ");
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Element element0 = new Element(" />");
      element0.addClass(" />");
      element0.getElementsByAttribute("class");
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Parser parser0 = Parser.htmlParser();
      Document document0 = parser0.parseInput("A'", "o 4RMUSQA)]*?_{G");
      Element element0 = document0.prependElement("A'");
      element0.firstElementSibling();
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Document document0 = Parser.parse(")LM2VCIZ8,q&gKK", ")LM2VCIZ8,q&gKK");
      Element element0 = document0.appendElement(".");
      element0.firstElementSibling();
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("textarea", "textarea");
      Element element0 = document0.appendTo(document0);
      element0.empty();
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Tag tag0 = Tag.valueOf("html");
      Attributes attributes0 = new Attributes();
      PseudoTextElement pseudoTextElement0 = new PseudoTextElement(tag0, "html", attributes0);
      pseudoTextElement0.setSiblingIndex((-1095));
      pseudoTextElement0.empty();
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("M3Dvy6O5RwB", "M3Dvy6O5RwB");
      Element element0 = document0.head();
      element0.empty();
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("$$CCa].r", "mr):");
      document0.appendTo(document0);
      document0.elementSiblingIndex();
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Document document0 = Parser.parse(")LM2VCIZ8,q&gKK", ")LM2VCIZ8,q&gKK");
      Document document1 = Parser.parse("fUraAk(hj?", "Insert position out of bounds.");
      Node[] nodeArray0 = new Node[3];
      nodeArray0[0] = (Node) document0;
      nodeArray0[1] = (Node) document0;
      nodeArray0[2] = (Node) document1;
      Document document2 = (Document)document0.insertChildren(0, nodeArray0);
      document2.doClone(nodeArray0[2]);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Document document0 = Document.createShell(")LM2VCIZ8,q&gKK");
      Element element0 = document0.head();
      element0.doClone(document0);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Document document0 = Parser.parse("L(2VCZ8,\\&gKK", "L(2VCZ8,\\&gKK");
      document0.doClone((Node) null);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Document document0 = Parser.parse("M3Dvy6O5RwB", "M3Dvy6O5RwB");
      Element element0 = document0.appendElement("ul");
      element0.clone();
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Document document0 = Document.createShell("disabled");
      document0.clone();
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      ParseSettings parseSettings0 = ParseSettings.preserveCase;
      Tag tag0 = Tag.valueOf("F$on|Zb?", parseSettings0);
      CDataNode cDataNode0 = new CDataNode("br");
      Attributes attributes0 = cDataNode0.attributes();
      FormElement formElement0 = new FormElement(tag0, "O@95", attributes0);
      formElement0.siblingIndex = (-1);
      Locale locale0 = Locale.KOREA;
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      formElement0.classNames(set0);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("vl;JT0MG$", "SKIP_CILDREN");
      Element element0 = document0.body();
      Set<String> set0 = document0.classNames();
      element0.classNames(set0);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Element element0 = new Element("Insert position out of bounds.");
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      element0.classNames((Set<String>) linkedHashSet0);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Document document0 = Document.createShell(")LM2VCIZ8,q&gKK");
      Element element0 = document0.addClass(")LM2VCIZ8,q&gKK");
      element0.classNames();
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Document document0 = Document.createShell("pre");
      document0.toggleClass("pre");
      document0.className();
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Element element0 = new Element("-]D V}9lj6M`UY");
      element0.prependElement("titl{");
      element0.children();
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Document document0 = new Document("Children collection to be inserted must not be null.");
      document0.childNodeSize();
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Document document0 = Parser.parse("?X>tg<", "?x&[NSQ");
      document0.childNodeSize();
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("vl;JT0MG$", "SKIP_CILDREN");
      document0.setParentNode(document0);
      document0.before((Node) document0);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("cq", "cq");
      Element element0 = document0.appendElement("cq");
      element0.before((Node) document0);
      element0.previousElementSiblings();
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Document document0 = new Document("Children collection to be inserted must not be null.");
      Document document1 = document0.clone();
      document0.setParentNode(document1);
      document0.before("");
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Document document0 = Document.createShell(")LM2VCIZ8,q&gKK");
      Element element0 = document0.body();
      element0.before("#%s");
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("Children collection to be inserted must not be null.", "Children collection to be inserted must not be null.");
      ParseSettings parseSettings0 = new ParseSettings(false, false);
      Tag tag0 = Tag.valueOf("p", parseSettings0);
      CDataNode cDataNode0 = new CDataNode("Children collection to be inserted must not be null.");
      Attributes attributes0 = cDataNode0.attributes();
      FormElement formElement0 = new FormElement(tag0, "", attributes0);
      document0.appendTo(formElement0);
      document0.before("p");
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("pre", "li");
      document0.baseUri();
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      Tag tag0 = Tag.valueOf("F`9");
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = new FormElement(tag0, "F`9", attributes0);
      formElement0.addClass("2/");
      formElement0.attributes();
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      Document document0 = Parser.parse(")LM2VCIZ8,q&gKK", ")LM2VCIZ8,q&gKK");
      Document document1 = Parser.parse("fUraAk(hj?", "Insert position out of bounds.");
      Node[] nodeArray0 = new Node[3];
      nodeArray0[0] = (Node) document0;
      nodeArray0[1] = (Node) document0;
      nodeArray0[2] = (Node) document1;
      Element element0 = document0.insertChildren(0, nodeArray0);
      element0.attr("V_xl,C3f", false);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("M3Dvy6O5RwB", "M3Dvy6O5RwB");
      Element element0 = document0.head();
      element0.attr("M3Dvy6O5RwB", true);
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      Document document0 = new Document("Ky6@\"UGD");
      document0.setSiblingIndex((-724));
      document0.attr("java.lang.string@0000000118", "java.lang.string@0000000118");
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("textarea", "textarea");
      Element element0 = document0.body();
      element0.attr("", "");
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      Document document0 = new Document("Ky6@\"UGD");
      document0.attr("java.lang.string@0000000118", "java.lang.string@0000000118");
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      Element element0 = new Element("mO::");
      Tag tag0 = Tag.valueOf("title");
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = new FormElement(tag0, "", attributes0);
      formElement0.appendTo(element0);
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      Document document0 = Parser.parse(")LM2VCIZ8,q&gKK", ")LM2VCIZ8,q&gKK");
      Element element0 = document0.body();
      element0.appendText("");
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      Document document0 = new Document("#");
      document0.appendElement("org.jsoup.nodes.Element$2");
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("#", "pre");
      Element element0 = document0.body();
      element0.append("{2");
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      Element element0 = new Element("#");
      element0.append("");
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      Document document0 = new Document("255j*6{lo_huM)'3(");
      Document document1 = document0.clone();
      document0.appendTo(document1);
      document0.after((Node) document1);
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("pre", "pre");
      Element element0 = document0.body();
      element0.after((Node) document0);
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("dfp`&/{y?ni6", "7");
      Element element0 = new Element("typemustmatch");
      Element element1 = document0.appendTo(element0);
      element1.after("typemustmatch");
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("M3Dvy6O5RwB", "M3Dvy6O5RwB");
      Element element0 = document0.head();
      element0.after("html > head");
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("SKIP_CHILDREN", "SKIP_CHILDREN");
      document0.setSiblingIndex((-1235));
      document0.addClass(":root");
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("vl;JT0MG$", "SKIP_CILDREN");
      Element element0 = document0.body();
      element0.addClass("<html>\n <head></head>\n <body>\n  vl;JT0MG$\n </body>\n</html>");
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      Document document0 = new Document("6OjCsKLjHDCjoo:Z_");
      document0.setParentNode(document0);
      // Undeclared exception!
      document0.wrap("&#xa0;");
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("mr", "mr");
      // Undeclared exception!
//      try { 
        document0.wrap((String) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // String must not be empty
//         //
//         verifyException("org.jsoup.helper.Validate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      Document document0 = new Document("p");
      XmlDeclaration xmlDeclaration0 = new XmlDeclaration("p", ":b", true);
      Document document1 = (Document)document0.doClone(xmlDeclaration0);
      // Undeclared exception!
//      try { 
        document1.wrap("Data map must not be null");
//        fail("Expecting exception: ClassCastException");
      
//      } catch(ClassCastException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("pre", "pre");
      document0.setParentNode(document0);
      // Undeclared exception!
      document0.val("");
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("textarea", "Jr");
      Parser parser0 = Parser.xmlParser();
      parser0.settings((ParseSettings) null);
      document0.parser(parser0);
      // Undeclared exception!
//      try { 
        document0.val((String) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.jsoup.nodes.Node", e);
//      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      Document document0 = Document.createShell("");
      // Undeclared exception!
//      try { 
        document0.toggleClass((String) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Object must not be null
//         //
//         verifyException("org.jsoup.helper.Validate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      Document document0 = new Document("Children collection to be inserted must not be null.");
      // Undeclared exception!
//      try { 
        document0.text("8_eJGOjJ2S");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.jsoup.nodes.Document", e);
//      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("Insert position out of bounds.", "Insert position out of bounds.");
      // Undeclared exception!
//      try { 
        document0.text((String) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Object must not be null
//         //
//         verifyException("org.jsoup.helper.Validate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("pre", "pre");
      Element element0 = document0.body();
      List<Node> list0 = document0.childNodesCopy();
      element0.childNodes = list0;
      // Undeclared exception!
//      try { 
        document0.text();
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.jsoup.select.NodeTraversor", e);
//      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("pre", ".");
      TextNode textNode0 = TextNode.createFromEncoded("jwpv6BZ%_U1WfAp", " />");
      document0.setParentNode(textNode0);
      // Undeclared exception!
//      try { 
        document0.text();
//        fail("Expecting exception: ClassCastException");
      
//      } catch(ClassCastException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("pre", "pre");
      document0.setParentNode(document0);
      // Undeclared exception!
      document0.tagName("pre");
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      Element element0 = new Element("org.jsoup.select.Evaluator$TagEndsWith");
      // Undeclared exception!
//      try { 
        element0.tagName("");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Tag name must not be empty.
//         //
//         verifyException("org.jsoup.helper.Validate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      Document document0 = Parser.parse("i;4G6E\"6pz#", "i;4G6E\"6pz#");
      // Undeclared exception!
//      try { 
        document0.selectFirst("4m$K:v.H,Nzq~'\"%)x'");
//        fail("Expecting exception: IllegalStateException");
      
//      } catch(IllegalStateException e) {
//         //
//         // Could not parse query '4m$K:v.H,Nzq~'\"%)x'': unexpected token at '$K:v.H,Nzq~'\"%)x''
//         //
//         verifyException("org.jsoup.select.QueryParser", e);
//      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      Document document0 = new Document("255j*6{lo_huM)'3(");
      // Undeclared exception!
//      try { 
        document0.selectFirst("");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // String must not be empty
//         //
//         verifyException("org.jsoup.helper.Validate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      Document document0 = new Document("Children collection to be inserted must not be null.");
      // Undeclared exception!
//      try { 
        document0.select("Children collection to be inserted must not be null.");
//        fail("Expecting exception: IllegalStateException");
      
//      } catch(IllegalStateException e) {
//         //
//         // String must not be empty
//         //
//         verifyException("org.jsoup.select.QueryParser", e);
//      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("SKIP_CHILDREN", "SKIP_CHILDREN");
      // Undeclared exception!
//      try { 
        document0.select((String) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // String must not be empty
//         //
//         verifyException("org.jsoup.helper.Validate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      Parser parser0 = Parser.xmlParser();
      Document document0 = parser0.parseInput("org.jsoup.nodes.Element", "org.jsoup.nodes.Element");
      // Undeclared exception!
//      try { 
        document0.removeClass((String) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Object must not be null
//         //
//         verifyException("org.jsoup.helper.Validate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      Document document0 = Document.createShell("");
      Comment comment0 = new Comment(";PVN{oaa )yk'", "");
      document0.setParentNode(comment0);
      // Undeclared exception!
//      try { 
        document0.previousElementSiblings();
//        fail("Expecting exception: ClassCastException");
      
//      } catch(ClassCastException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      Document document0 = Document.createShell(")LM2VCIZ8,q&gKK");
      DataNode dataNode0 = DataNode.createFromEncoded("br", "br");
      document0.setParentNode(dataNode0);
      // Undeclared exception!
//      try { 
        Element.preserveWhitespace(document0);
//        fail("Expecting exception: ClassCastException");
      
//      } catch(ClassCastException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      Document document0 = new Document("#");
      // Undeclared exception!
//      try { 
        document0.prependText((String) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Object must not be null
//         //
//         verifyException("org.jsoup.helper.Validate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      Document document0 = Parser.parse(")LM2VCIZ8,q&gKK", ")LM2VCIZ8,q&gKK");
      Document document1 = Parser.parse("fUraAk(hj?", "Insert position out of bounds.");
      Node[] nodeArray0 = new Node[3];
      nodeArray0[0] = (Node) document0;
      nodeArray0[1] = (Node) document0;
      nodeArray0[2] = (Node) document1;
      Element element0 = document0.insertChildren(0, nodeArray0);
      // Undeclared exception!
      element0.prependElement(")LM2VCIZ8,q&gKK");
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      Element element0 = new Element("l?A}i");
      // Undeclared exception!
//      try { 
        element0.prependElement((String) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Object must not be null
//         //
//         verifyException("org.jsoup.helper.Validate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      Element element0 = new Element("SKIP_CHILDREN");
      CDataNode cDataNode0 = new CDataNode("br");
      Node node0 = cDataNode0.doClone(element0);
      // Undeclared exception!
//      try { 
        element0.prependChild(node0);
//        fail("Expecting exception: IndexOutOfBoundsException");
      
//      } catch(IndexOutOfBoundsException e) {
//         //
//         // Index: 0, Size: 0
//         //
//         verifyException("java.util.ArrayList", e);
//      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("RCDATAEndTagName", "RCDATAEndTagName");
      // Undeclared exception!
//      try { 
        document0.prependChild((Node) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Object must not be null
//         //
//         verifyException("org.jsoup.helper.Validate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      Document document0 = Document.createShell("");
      Element element0 = document0.appendTo(document0);
      // Undeclared exception!
      element0.prepend("Xs(q3$Q|BCqj*-W+");
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      Document document0 = Document.createShell("textarea");
      CDataNode cDataNode0 = new CDataNode("");
      Element element0 = document0.doClone(cDataNode0);
      // Undeclared exception!
//      try { 
        element0.prepend("");
//        fail("Expecting exception: ClassCastException");
      
//      } catch(ClassCastException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      Parser parser0 = Parser.htmlParser();
      Document document0 = parser0.parseInput("", "");
      XmlDeclaration xmlDeclaration0 = new XmlDeclaration("n3H=cW=newr", "n3H=cW=newr", true);
      document0.setParentNode(xmlDeclaration0);
      // Undeclared exception!
//      try { 
        document0.parent();
//        fail("Expecting exception: ClassCastException");
      
//      } catch(ClassCastException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("cq", "cq");
      document0.childNodes = null;
      // Undeclared exception!
//      try { 
        document0.ownText();
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.jsoup.nodes.Element", e);
//      }
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("java.lang.string@0000000118", "java.lang.string@0000000118");
      char[] charArray0 = new char[2];
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.indentAmount(17);
      // Undeclared exception!
      document0.outerHtmlTail(charBuffer0, 3247, document_OutputSettings1);
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("p", "T&FHiQx3(f");
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) "T&FHiQx3(f");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      // Undeclared exception!
//      try { 
        document0.outerHtmlTail(charBuffer0, (-3516), document_OutputSettings0);
//        fail("Expecting exception: ReadOnlyBufferException");
      
//      } catch(ReadOnlyBufferException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.nio.StringCharBuffer", e);
//      }
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      Document document0 = Document.createShell("");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      // Undeclared exception!
//      try { 
        document0.outerHtmlTail((Appendable) null, 278, document_OutputSettings0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.jsoup.nodes.Node", e);
//      }
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("(-#%v>Cj[", "(-#%v>Cj[");
      StringWriter stringWriter0 = new StringWriter(62);
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      // Undeclared exception!
//      try { 
        document0.outerHtmlTail(stringWriter0, (-1112), document_OutputSettings0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // width must be > 0
//         //
//         verifyException("org.jsoup.internal.StringUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      Document document0 = Document.createShell("P");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      PipedWriter pipedWriter0 = new PipedWriter();
//      try { 
        document0.outerHtmlTail(pipedWriter0, 6, document_OutputSettings0);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Pipe not connected
//         //
//         verifyException("java.io.PipedWriter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("jkyo6qz=", "jkyo6qz=");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      PipedReader pipedReader0 = new PipedReader(2403);
      PipedWriter pipedWriter0 = new PipedWriter(pipedReader0);
      // Undeclared exception!
      document0.outerHtmlHead(pipedWriter0, 30000, document_OutputSettings0);
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("?0o", "?0o");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) "?0o");
      // Undeclared exception!
//      try { 
        document0.outerHtmlHead(charBuffer0, (-556), document_OutputSettings0);
//        fail("Expecting exception: ReadOnlyBufferException");
      
//      } catch(ReadOnlyBufferException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.nio.StringCharBuffer", e);
//      }
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      Document document0 = Document.createShell("P");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      PipedReader pipedReader0 = new PipedReader();
      PipedWriter pipedWriter0 = new PipedWriter(pipedReader0);
      // Undeclared exception!
      document0.outerHtmlHead(pipedWriter0, 2147483645, document_OutputSettings0);
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      Document document0 = Parser.parse(")LM2VCIZ8,q&gKK", ")LM2VCIZ8,q&gKK");
      MockFile mockFile0 = new MockFile("[R");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0, true);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0, true);
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      // Undeclared exception!
//      try { 
        document0.outerHtmlHead(mockPrintStream0, (-382), document_OutputSettings0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // width must be > 0
//         //
//         verifyException("org.jsoup.internal.StringUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("jyo6qz=", "jyo6qz=");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      PipedWriter pipedWriter0 = new PipedWriter();
//      try { 
        document0.outerHtmlHead(pipedWriter0, 2403, document_OutputSettings0);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Pipe not connected
//         //
//         verifyException("java.io.PipedWriter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      Document document0 = Parser.parse(")LM2VCIZ8,q&gKK", ")LM2VCIZ8,q&gKK");
      CDataNode cDataNode0 = new CDataNode("body");
      document0.setParentNode(cDataNode0);
      // Undeclared exception!
//      try { 
        document0.nextElementSibling();
//        fail("Expecting exception: ClassCastException");
      
//      } catch(ClassCastException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      Document document0 = Document.createShell(")LM2VCIZ8,q&gKK");
      // Undeclared exception!
//      try { 
        document0.lastElementSibling();
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.jsoup.nodes.Element", e);
//      }
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      Document document0 = Parser.parse("titl{", "titl{");
      CDataNode cDataNode0 = new CDataNode("titl{");
      document0.setParentNode(cDataNode0);
      // Undeclared exception!
//      try { 
        document0.lastElementSibling();
//        fail("Expecting exception: ClassCastException");
      
//      } catch(ClassCastException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      Element element0 = new Element("value");
      // Undeclared exception!
//      try { 
        element0.is((Evaluator) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.jsoup.nodes.Element", e);
//      }
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      Document document0 = Parser.parse("B(Zoj@q\"%([)v#x", "B(Zoj@q\"%([)v#x");
      // Undeclared exception!
//      try { 
        document0.is("Insert position out of bounds.");
//        fail("Expecting exception: IllegalStateException");
      
//      } catch(IllegalStateException e) {
//         //
//         // String must not be empty
//         //
//         verifyException("org.jsoup.select.QueryParser", e);
//      }
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      Document document0 = Parser.parse("c,r", "c,r");
      document0.setParentNode(document0);
      // Undeclared exception!
      document0.is("c,r");
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      Document document0 = new Document("]rG):");
      CDataNode cDataNode0 = new CDataNode("tn1`DM!oqj[ 2");
      document0.setParentNode(cDataNode0);
      // Undeclared exception!
//      try { 
        document0.is("z");
//        fail("Expecting exception: ClassCastException");
      
//      } catch(ClassCastException e) {
//         //
//         // org.jsoup.nodes.CDataNode cannot be cast to org.jsoup.nodes.Element
//         //
//         verifyException("org.jsoup.nodes.Element", e);
//      }
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("pre", "pre");
      Node[] nodeArray0 = new Node[2];
      nodeArray0[0] = (Node) document0;
      nodeArray0[1] = (Node) document0;
      // Undeclared exception!
//      try { 
        document0.insertChildren(1, nodeArray0);
//        fail("Expecting exception: IndexOutOfBoundsException");
      
//      } catch(IndexOutOfBoundsException e) {
//         //
//         // Index: 1, Size: 0
//         //
//         verifyException("java.util.ArrayList", e);
//      }
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      Document document0 = Document.createShell("java.lang.string@0000000118");
      Element element0 = document0.toggleClass("java.lang.string@0000000118");
      element0.childNodes = null;
      LinkedList<DataNode> linkedList0 = new LinkedList<DataNode>();
      // Undeclared exception!
//      try { 
        document0.insertChildren((int) (byte) (-28), (Collection<? extends Node>) linkedList0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("vl;JT0MG$", "SKIP_CILDREN");
      document0.setParentNode(document0);
      // Undeclared exception!
      document0.html("vl;JT0MG$");
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      Document document0 = new Document(" />");
      Element element0 = document0.toggleClass("s+");
      List<Node> list0 = document0.childNodes();
      element0.childNodes = list0;
      // Undeclared exception!
//      try { 
        document0.html("s+");
//        fail("Expecting exception: UnsupportedOperationException");
      
//      } catch(UnsupportedOperationException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.util.Collections$UnmodifiableCollection", e);
//      }
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("pre", "pre");
      // Undeclared exception!
//      try { 
        document0.html((String) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Object must not be null
//         //
//         verifyException("org.jsoup.helper.Validate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      Document document0 = Parser.parse("java.lang.string@0000000118", "sp;;6%vglbq*d0");
      TextNode textNode0 = new TextNode("java.lang.string@0000000118");
      document0.setParentNode(textNode0);
      // Undeclared exception!
//      try { 
        document0.html("org.jsoup.select.Evaluator$MatchesOwn");
//        fail("Expecting exception: ClassCastException");
      
//      } catch(ClassCastException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      Document document0 = Document.createShell("");
      Element element0 = document0.prependChild(document0);
      // Undeclared exception!
      element0.html((BufferedWriter) null);
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("$$CCa].r", "");
      // Undeclared exception!
//      try { 
        document0.html((BufferedWriter) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.jsoup.nodes.Node", e);
//      }
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      Document document0 = Parser.parse(")LM2VCIZ8,q&gKK", ")LM2VCIZ8,q&gKK");
      Document document1 = Parser.parse("fUraAk(hj?", "Insert position out of bounds.");
      Node[] nodeArray0 = new Node[3];
      nodeArray0[0] = (Node) document0;
      nodeArray0[1] = (Node) document0;
      nodeArray0[2] = (Node) document1;
      document0.insertChildren(0, nodeArray0);
      // Undeclared exception!
      document0.html();
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("", "value");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.indentAmount(2147483645);
      Document document1 = document0.outputSettings(document_OutputSettings1);
      // Undeclared exception!
      document1.html();
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("M3Dvy6O5RwB", "M3Dvy6O5RwB");
      DocumentType documentType0 = new DocumentType("M3Dvy6O5RwB", "M3Dvy6O5RwB", ":Dg@}-~>gzD", "R)h'W9J]@R.R)P;Jz");
      document0.parentNode = (Node) documentType0;
      // Undeclared exception!
//      try { 
        document0.html();
//        fail("Expecting exception: ClassCastException");
      
//      } catch(ClassCastException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("pre", "pre");
      // Undeclared exception!
//      try { 
        document0.hasClass((String) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.jsoup.nodes.Element", e);
//      }
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      Element element0 = new Element("html");
      // Undeclared exception!
//      try { 
        element0.getElementsMatchingText((Pattern) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.jsoup.select.Evaluator$Matches", e);
//      }
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      Element element0 = new Element("#");
      // Undeclared exception!
//      try { 
        element0.getElementsMatchingText((String) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      Tag tag0 = Tag.valueOf("gxt~");
      Element element0 = new Element(tag0, "");
      // Undeclared exception!
//      try { 
        element0.getElementsMatchingText(";WvY*X})Ho");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Pattern syntax error: ;WvY*X})Ho
//         //
//         verifyException("org.jsoup.nodes.Element", e);
//      }
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      Document document0 = Parser.parse("LM2VCZ8,\\&gKK", "LM2VCZ8,\\&gKK");
      DataNode dataNode0 = new DataNode("value", "L%_3)!.");
      document0.setParentNode(dataNode0);
      // Undeclared exception!
//      try { 
        document0.getElementsMatchingText("LM2VCZ8,\\&gKK");
//        fail("Expecting exception: ClassCastException");
      
//      } catch(ClassCastException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("", "");
      // Undeclared exception!
//      try { 
        document0.getElementsMatchingOwnText((Pattern) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.jsoup.select.Evaluator$MatchesOwn", e);
//      }
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      Document document0 = Parser.parse("cq", "cq");
      Element element0 = document0.appendElement("cq");
      element0.siblingIndex = (-80773204);
      Pattern pattern0 = Pattern.compile("cq", 1);
      // Undeclared exception!
//      try { 
        element0.getElementsMatchingOwnText(pattern0);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      Document document0 = Parser.parse("B(Zoj@q\"%([)v#x", "B(Zoj@q\"%([)v#x");
      // Undeclared exception!
//      try { 
        document0.getElementsMatchingOwnText((String) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("SKIP_CHILDREN", "SKIP_CHILDREN");
      // Undeclared exception!
//      try { 
        document0.getElementsMatchingOwnText("Z{sc;bt");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Pattern syntax error: Z{sc;bt
//         //
//         verifyException("org.jsoup.nodes.Element", e);
//      }
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      Document document0 = Document.createShell(")LM2VCIZ8,q&gKK");
      // Undeclared exception!
//      try { 
        document0.getElementsByTag("");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // String must not be empty
//         //
//         verifyException("org.jsoup.helper.Validate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      Document document0 = Parser.parse("i;4G6E\"6pz#", "i;4G6E\"6pz#");
      Comment comment0 = new Comment("i;4G6E\"6pz#", "i;4G6E\"6pz#");
      document0.setParentNode(comment0);
      // Undeclared exception!
//      try { 
        document0.getElementsByIndexGreaterThan((-1047));
//        fail("Expecting exception: ClassCastException");
      
//      } catch(ClassCastException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      Document document0 = Document.createShell("java.lang.string@0000000118");
      CDataNode cDataNode0 = new CDataNode("java.lang.string@0000000118");
      document0.setParentNode(cDataNode0);
      // Undeclared exception!
//      try { 
        document0.getElementsByIndexEquals(1);
//        fail("Expecting exception: ClassCastException");
      
//      } catch(ClassCastException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      Document document0 = Document.createShell(")LM2VCIZ8,q&gKK");
      // Undeclared exception!
//      try { 
        document0.getElementsByAttributeValueStarting((String) null, "Y");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // String must not be empty
//         //
//         verifyException("org.jsoup.helper.Validate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      Tag tag0 = Tag.valueOf("U}f>`y");
      CDataNode cDataNode0 = new CDataNode("U}f>`y");
      Attributes attributes0 = cDataNode0.attributes();
      Element element0 = new Element(tag0, "br", attributes0);
      // Undeclared exception!
//      try { 
        element0.getElementsByAttributeValueNot("", "'");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // String must not be empty
//         //
//         verifyException("org.jsoup.helper.Validate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("pre", "pre");
      Document document1 = document0.normalise();
      document0.setParentNode(document1);
      Pattern pattern0 = Pattern.compile("pre");
      document1.siblingIndex = (-1646);
      // Undeclared exception!
//      try { 
        document0.getElementsByAttributeValueMatching("pre", pattern0);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("z!l", "_?}");
      // Undeclared exception!
//      try { 
        document0.getElementsByAttributeValueMatching("#document", (String) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      Document document0 = Document.createShell("");
      // Undeclared exception!
//      try { 
        document0.getElementsByAttributeValueMatching("", "Xs(q3$Q|BCqj*-W+");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Pattern syntax error: Xs(q3$Q|BCqj*-W+
//         //
//         verifyException("org.jsoup.nodes.Element", e);
//      }
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment(")lm2vciz8,q&gkk", "textarea");
      // Undeclared exception!
//      try { 
        document0.getElementsByAttributeValueEnding("br", "");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // String must not be empty
//         //
//         verifyException("org.jsoup.helper.Validate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("cq", "cq");
      Element element0 = document0.appendElement("cq");
      element0.setSiblingIndex((-335));
      // Undeclared exception!
//      try { 
        element0.getElementsByAttributeValueEnding("cq", "cq");
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      Document document0 = new Document(".|GX<~");
      // Undeclared exception!
//      try { 
        document0.getElementsByAttributeValue("9v9 uwdsn/", "\"");
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("pre", "pre");
      // Undeclared exception!
//      try { 
        document0.getElementsByAttributeValue("", "pre");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // String must not be empty
//         //
//         verifyException("org.jsoup.helper.Validate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("SKIP_CHILDREN", "SKIP_CHILDREN");
      Element element0 = document0.attr("", "");
      // Undeclared exception!
//      try { 
        element0.getElementsByAttributeStarting("org.jsoup.nodes.Attributes$Dataset$EntrySet");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // String must not be empty
//         //
//         verifyException("org.jsoup.helper.Validate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("textarea", "textarea");
      // Undeclared exception!
//      try { 
        document0.getElementById("");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // String must not be empty
//         //
//         verifyException("org.jsoup.helper.Validate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      Tag tag0 = Tag.valueOf("org.jsoup.select.Evaluator$TagEndsWith");
      Element element0 = new Element(tag0, "");
      // Undeclared exception!
//      try { 
        element0.firstElementSibling();
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.jsoup.nodes.Element", e);
//      }
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      Document document0 = Parser.parse("1[5qvH<qdyRCRqR:", "1[5qvH<qdyRCRqR:");
      DocumentType documentType0 = new DocumentType("1[5qvH<qdyRCRqR:", ">X]", "1[5qvH<qdyRCRqR:", ">X]");
      document0.setParentNode(documentType0);
      // Undeclared exception!
//      try { 
        document0.elementSiblingIndex();
//        fail("Expecting exception: ClassCastException");
      
//      } catch(ClassCastException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      Document document0 = Parser.parse("ih.&h\rxrd+", ".RU$y{k..LXaNp8/Te");
      document0.childNodes = null;
      // Undeclared exception!
//      try { 
        document0.data();
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.jsoup.nodes.Element", e);
//      }
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      Element element0 = new Element(" />");
      element0.appendTo(element0);
      // Undeclared exception!
//      try { 
        element0.cssSelector();
//        fail("Expecting exception: IllegalStateException");
      
//      } catch(IllegalStateException e) {
//         //
//         // Could not parse query '/': unexpected token at '/'
//         //
//         verifyException("org.jsoup.select.QueryParser", e);
//      }
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      Document document0 = Parser.parse(".PwX<~", ".PwX<~");
      XmlDeclaration xmlDeclaration0 = new XmlDeclaration("#w", false);
      document0.setParentNode(xmlDeclaration0);
      // Undeclared exception!
//      try { 
        document0.cssSelector();
//        fail("Expecting exception: ClassCastException");
      
//      } catch(ClassCastException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("pre", "pre");
      // Undeclared exception!
//      try { 
        document0.classNames((Set<String>) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Object must not be null
//         //
//         verifyException("org.jsoup.helper.Validate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      Document document0 = new Document("#");
      // Undeclared exception!
//      try { 
        document0.child(1260);
//        fail("Expecting exception: IndexOutOfBoundsException");
      
//      } catch(IndexOutOfBoundsException e) {
//         //
//         // Index: 1260, Size: 0
//         //
//         verifyException("java.util.ArrayList", e);
//      }
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      Element element0 = new Element("ylks&s?,cSk5'");
      // Undeclared exception!
//      try { 
        element0.child((-1890));
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      Document document0 = new Document("a5e");
      document0.setParentNode(document0);
      // Undeclared exception!
      document0.before("I!Ad|J.B(DUQY]3");
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      ParseSettings parseSettings0 = ParseSettings.htmlDefault;
      Tag tag0 = Tag.valueOf(")lm2vciz8,q&gkk", parseSettings0);
      Element element0 = new Element(tag0, ")lm2vciz8,q&gkk");
      // Undeclared exception!
//      try { 
        element0.attr((String) null, false);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Object must not be null
//         //
//         verifyException("org.jsoup.helper.Validate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      Document document0 = Parser.parse(")LM2VCIZ8,q&gKK", ")LM2VCIZ8,q&gKK");
      Document document1 = Parser.parse("fUraAk(hj?", "Insert position out of bounds.");
      Node[] nodeArray0 = new Node[3];
      nodeArray0[0] = (Node) document0;
      nodeArray0[1] = (Node) document0;
      nodeArray0[2] = (Node) document1;
      document0.insertChildren(0, nodeArray0);
      // Undeclared exception!
      document0.attr("#", "H6` p");
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      Document document0 = new Document("RWpD1t ");
      // Undeclared exception!
//      try { 
        document0.attr((String) null, (String) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.jsoup.parser.ParseSettings", e);
//      }
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      Document document0 = Parser.parse("y48~t=8", "br");
      Element element0 = document0.createElement("br");
      List<Node> list0 = Parser.parseFragment("java.lang.string@0000000118 p", (Element) document0, "1MeZLor2]$-Sp}+");
      element0.childNodes = list0;
      // Undeclared exception!
//      try { 
        document0.appendTo(element0);
//        fail("Expecting exception: UnsupportedOperationException");
      
//      } catch(UnsupportedOperationException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.util.Collections$UnmodifiableCollection", e);
//      }
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      Document document0 = new Document("a5e");
      document0.setParentNode(document0);
      CDataNode cDataNode0 = new CDataNode("a5e");
      Attributes attributes0 = cDataNode0.attributes();
      Tag tag0 = Tag.valueOf("a5e");
      FormElement formElement0 = new FormElement(tag0, "org.jsoup.nodes.Element", attributes0);
      // Undeclared exception!
//      try { 
        document0.appendTo(formElement0);
//        fail("Expecting exception: IndexOutOfBoundsException");
      
//      } catch(IndexOutOfBoundsException e) {
//         //
//         // Index: 0, Size: 0
//         //
//         verifyException("java.util.ArrayList", e);
//      }
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      ParseSettings parseSettings0 = ParseSettings.htmlDefault;
      Tag tag0 = Tag.valueOf("cB", parseSettings0);
      Attributes attributes0 = new Attributes();
      Element element0 = new Element(tag0, "#", attributes0);
      // Undeclared exception!
//      try { 
        element0.appendTo((Element) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Object must not be null
//         //
//         verifyException("org.jsoup.helper.Validate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      Document document0 = Parser.parse("", "");
      // Undeclared exception!
//      try { 
        document0.appendText((String) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Object must not be null
//         //
//         verifyException("org.jsoup.helper.Validate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("pre", "pre");
      document0.setParentNode(document0);
      // Undeclared exception!
      document0.appendElement("2eL760Da5Ypgd#l.?d");
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("cq", "cq");
      document0.childNodes = null;
      // Undeclared exception!
//      try { 
        document0.appendElement("cq");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      Document document0 = Document.createShell(")LM2VCIZ8,q&gKK");
      // Undeclared exception!
//      try { 
        document0.appendElement("");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // String must not be empty
//         //
//         verifyException("org.jsoup.helper.Validate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("", "");
      Element element0 = document0.body();
      element0.setSiblingIndex(1497);
      // Undeclared exception!
//      try { 
        document0.appendChild(element0);
//        fail("Expecting exception: IndexOutOfBoundsException");
      
//      } catch(IndexOutOfBoundsException e) {
//         //
//         // Index: 1497, Size: 2
//         //
//         verifyException("java.util.ArrayList", e);
//      }
  }

  @Test(timeout = 4000)
  public void test223()  throws Throwable  {
      Document document0 = Parser.parse(")LM2VCIZ8,q&gKK", ")LM2VCIZ8,q&gKK");
      // Undeclared exception!
//      try { 
        document0.appendChild((Node) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Object must not be null
//         //
//         verifyException("org.jsoup.helper.Validate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test224()  throws Throwable  {
      Document document0 = Parser.parse(")LM2VCIZ8,q&gKK", ")LM2VCIZ8,q&gKK");
      Document document1 = Parser.parse("fUraAk(hj?", "Insert position out of bounds.");
      Node[] nodeArray0 = new Node[3];
      nodeArray0[0] = (Node) document0;
      nodeArray0[1] = (Node) document0;
      nodeArray0[2] = (Node) document1;
      Element element0 = document0.insertChildren(0, nodeArray0);
      // Undeclared exception!
      element0.append("#root");
  }

  @Test(timeout = 4000)
  public void test225()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("xvo-D5JfnZJS]Vme58", "#root");
      Parser parser0 = Parser.htmlParser();
      List<Node> list0 = parser0.parseFragmentInput("", document0, "xvo-D5JfnZJS]Vme58");
      document0.childNodes = list0;
      // Undeclared exception!
//      try { 
        document0.append("xvo-D5JfnZJS]Vme58");
//        fail("Expecting exception: UnsupportedOperationException");
      
//      } catch(UnsupportedOperationException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.util.Collections$UnmodifiableCollection", e);
//      }
  }

  @Test(timeout = 4000)
  public void test226()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("pre", "");
      // Undeclared exception!
//      try { 
        document0.append((String) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Object must not be null
//         //
//         verifyException("org.jsoup.helper.Validate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test227()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("pre", "pre");
      Element element0 = document0.body();
      element0.before((Node) document0);
      // Undeclared exception!
//      try { 
        element0.after((Node) document0);
//        fail("Expecting exception: IndexOutOfBoundsException");
      
//      } catch(IndexOutOfBoundsException e) {
//         //
//         // Index: 3, Size: 2
//         //
//         verifyException("java.util.ArrayList", e);
//      }
  }

  @Test(timeout = 4000)
  public void test228()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("pre", "pre");
      document0.setParentNode(document0);
      // Undeclared exception!
      document0.after("head");
  }

  @Test(timeout = 4000)
  public void test229()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("cq", "cq");
      Element element0 = document0.appendElement("cq");
      Element element1 = document0.doClone(element0);
      // Undeclared exception!
//      try { 
        element1.after("Pattern syntax error: ");
//        fail("Expecting exception: IndexOutOfBoundsException");
      
//      } catch(IndexOutOfBoundsException e) {
//         //
//         // Index: 1, Size: 0
//         //
//         verifyException("java.util.ArrayList", e);
//      }
  }

  @Test(timeout = 4000)
  public void test230()  throws Throwable  {
      Document document0 = Document.createShell("@D_ms@n*'|JBi_H<u");
      // Undeclared exception!
//      try { 
        document0.addClass((String) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Object must not be null
//         //
//         verifyException("org.jsoup.helper.Validate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test231()  throws Throwable  {
      ParseSettings parseSettings0 = ParseSettings.preserveCase;
      Tag tag0 = Tag.valueOf("286\"~.", parseSettings0);
      CDataNode cDataNode0 = new CDataNode("|Vt6Y!FF{!W[R7U1@\"");
      Attributes attributes0 = cDataNode0.attributes();
      Element element0 = null;
//      try {
        element0 = new Element(tag0, (String) null, attributes0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Object must not be null
//         //
//         verifyException("org.jsoup.helper.Validate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test232()  throws Throwable  {
      Element element0 = null;
//      try {
        element0 = new Element((Tag) null, "");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Object must not be null
//         //
//         verifyException("org.jsoup.helper.Validate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test233()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("pre", "pre");
      MockPrintStream mockPrintStream0 = new MockPrintStream("rp");
      document0.html(mockPrintStream0);
  }

  @Test(timeout = 4000)
  public void test234()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("pre", "li");
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      linkedHashSet0.add("pre");
      document0.classNames((Set<String>) linkedHashSet0);
  }

  @Test(timeout = 4000)
  public void test235()  throws Throwable  {
      Document document0 = Parser.parse(")LM2VCIZ8,q&gKK", ")LM2VCIZ8,q&gKK");
      Element element0 = document0.body();
      element0.data();
  }

  @Test(timeout = 4000)
  public void test236()  throws Throwable  {
      Document document0 = new Document("mr):");
      Element element0 = document0.html(".itl{");
      element0.hasText();
  }

  @Test(timeout = 4000)
  public void test237()  throws Throwable  {
      Document document0 = Parser.parse("pre", "pre");
      document0.setParentNode(document0);
      document0.text();
  }

  @Test(timeout = 4000)
  public void test238()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("Insert position out of bounds.", "Insert position out of bounds.");
      document0.elementSiblingIndex();
  }

  @Test(timeout = 4000)
  public void test239()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("pre", "pre");
      document0.setParentNode(document0);
      document0.previousElementSibling();
  }

  @Test(timeout = 4000)
  public void test240()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("pre", "pre");
      Element element0 = document0.body();
      element0.previousElementSibling();
  }

  @Test(timeout = 4000)
  public void test241()  throws Throwable  {
      Document document0 = Parser.parse(")LM2VCIZ8,q&gKK", ")LM2VCIZ8,q&gKK");
      Document document1 = Parser.parse("fUraAk(hj?", "Insert position out of bounds.");
      Node[] nodeArray0 = new Node[3];
      nodeArray0[0] = (Node) document0;
      nodeArray0[1] = (Node) document0;
      nodeArray0[2] = (Node) document1;
      Element element0 = document0.insertChildren(0, nodeArray0);
      element0.cssSelector();
  }

  @Test(timeout = 4000)
  public void test242()  throws Throwable  {
      Document document0 = new Document("RWpD1t ");
      Tag tag0 = Tag.valueOf(".itl{");
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = new FormElement(tag0, ".itl{", attributes0);
      document0.appendTo(formElement0);
      document0.html(".itl{");
  }

  @Test(timeout = 4000)
  public void test243()  throws Throwable  {
      Document document0 = Document.createShell("");
      document0.attributes();
      document0.attributes();
  }

  @Test(timeout = 4000)
  public void test244()  throws Throwable  {
      Document document0 = new Document("7");
      document0.children();
  }

  @Test(timeout = 4000)
  public void test245()  throws Throwable  {
      Document document0 = Parser.parse(")LM2VCIZ8,q&gKK", ")LM2VCIZ8,q&gKK");
      document0.className();
  }

  @Test(timeout = 4000)
  public void test246()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("cq", "cq");
      document0.parent();
  }

  @Test(timeout = 4000)
  public void test247()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("p", "``bZt=?2iqi");
      document0.isBlock();
  }

  @Test(timeout = 4000)
  public void test248()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("M3Dvy6O5RwB", "M3Dvy6O5RwB");
      document0.shallowClone();
  }

  @Test(timeout = 4000)
  public void test249()  throws Throwable  {
      Document document0 = new Document("");
      document0.baseUri();
  }

  @Test(timeout = 4000)
  public void test250()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("pre", "pre");
      Pattern pattern0 = Pattern.compile("pre");
      document0.getElementsMatchingText(pattern0);
  }

  @Test(timeout = 4000)
  public void test251()  throws Throwable  {
      Document document0 = new Document("cq");
      Evaluator.IsRoot evaluator_IsRoot0 = new Evaluator.IsRoot();
      // Undeclared exception!
//      try { 
        document0.is((Evaluator) evaluator_IsRoot0);
//        fail("Expecting exception: IndexOutOfBoundsException");
      
//      } catch(IndexOutOfBoundsException e) {
//         //
//         // Index: 0, Size: 0
//         //
//         verifyException("java.util.ArrayList", e);
//      }
  }

  @Test(timeout = 4000)
  public void test252()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("pre", "");
      Pattern pattern0 = Pattern.compile("");
      document0.getElementsByAttributeValueMatching("pre", pattern0);
  }

  @Test(timeout = 4000)
  public void test253()  throws Throwable  {
      Document document0 = Document.createShell("");
      document0.id();
  }

  @Test(timeout = 4000)
  public void test254()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("k>aR-iIQ", "k>aR-iIQ");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.prettyPrint(false);
      Document document1 = document0.outputSettings(document_OutputSettings1);
      document1.html();
  }

  @Test(timeout = 4000)
  public void test255()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("k>aR-iIQ", "k>aR-iIQ");
      Charset charset0 = Charset.defaultCharset();
      document0.charset(charset0);
      document0.html();
  }

  @Test(timeout = 4000)
  public void test256()  throws Throwable  {
      Document document0 = Document.createShell("P");
      Element element0 = document0.tagName("P");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      PipedReader pipedReader0 = new PipedReader();
      PipedWriter pipedWriter0 = new PipedWriter(pipedReader0);
      Document document1 = (Document)document0.appendChild(element0);
      document1.outerHtmlHead(pipedWriter0, 9, document_OutputSettings0);
  }

  @Test(timeout = 4000)
  public void test257()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("jkyo6qz=", "jkyo6qz=");
      document0.tagName("progress");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      // Undeclared exception!
//      try { 
        document0.outerHtmlHead((Appendable) null, 2403, document_OutputSettings0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.jsoup.nodes.Element", e);
//      }
  }

  @Test(timeout = 4000)
  public void test258()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment(")lm2vciz8,q&gkk", ")LM2VCIZ8,q&gKK");
      document0.title(")LM2VCIZ8,q&gKK");
      document0.outerHtml();
  }

  @Test(timeout = 4000)
  public void test259()  throws Throwable  {
      Document document0 = Parser.parse("{q}vJ=b&m", "ohy+U7,k@KN[|.oc07X");
      PipedWriter pipedWriter0 = new PipedWriter();
      // Undeclared exception!
//      try { 
        document0.html(pipedWriter0);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // java.io.IOException: Pipe not connected
//         //
//         verifyException("org.jsoup.nodes.Node$OuterHtmlVisitor", e);
//      }
  }

  @Test(timeout = 4000)
  public void test260()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("p", "p");
      document0.tagName("textarea");
      document0.val("#");
  }

  @Test(timeout = 4000)
  public void test261()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment(",Hs6sJ1tbjxl1", ",Hs6sJ1tbjxl1");
      document0.tagName("textarea");
      document0.val();
  }

  @Test(timeout = 4000)
  public void test262()  throws Throwable  {
      Document document0 = Document.createShell("java.lang.string@0000000118");
      document0.val();
  }

  @Test(timeout = 4000)
  public void test263()  throws Throwable  {
      Tag tag0 = Tag.valueOf("class");
      Attributes attributes0 = new Attributes();
      Attribute attribute0 = Attribute.createFromEncoded("class", "class");
      Attributes attributes1 = attributes0.put(attribute0);
      FormElement formElement0 = new FormElement(tag0, "class", attributes1);
      formElement0.toggleClass("class");
  }

  @Test(timeout = 4000)
  public void test264()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("pre", "pre");
      document0.toggleClass("pre");
      document0.addClass("org.jsoup.nodes.Attributes");
      document0.hasClass("org.jsoup.nodes.Entities$1");
  }

  @Test(timeout = 4000)
  public void test265()  throws Throwable  {
      ParseSettings parseSettings0 = ParseSettings.htmlDefault;
      Tag.valueOf("Insert positionout of bunds.", parseSettings0);
      Attributes attributes0 = new Attributes();
      attributes0.iterator();
      Document document0 = new Document("code");
      Element element0 = document0.toggleClass("java.lang.string@0000000018");
      Element element1 = element0.toggleClass("4oD?8lE=");
      element1.hasClass("java.lang.string@0000000018");
  }

  @Test(timeout = 4000)
  public void test266()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("e;_3x)/+w-}t\"oWy2", "e;_3x)/+w-}t\"oWy2");
      document0.addClass("e;_3x)/+w-}t\"oWy2");
      Element element0 = document0.addClass("     ");
      element0.hasClass("     ");
  }

  @Test(timeout = 4000)
  public void test267()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("p", "T&FHiQx3(f");
      Element element0 = document0.toggleClass("sq p<jxzqok0");
      element0.toggleClass("sq p<jxzqok0");
      element0.hasClass("wb");
  }

  @Test(timeout = 4000)
  public void test268()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("p", "T&FHiQx3(f");
      Element element0 = document0.toggleClass("sq p<jxzqok0");
      element0.hasClass("wb");
  }

  @Test(timeout = 4000)
  public void test269()  throws Throwable  {
      Document document0 = Parser.parse("B(Zoj@q\"%([)v#x", "B(Zoj@q\"%([)v#x");
      document0.toggleClass("Unexpected characters returned for ");
      document0.hasClass("Unexpected characters returned for ");
  }

  @Test(timeout = 4000)
  public void test270()  throws Throwable  {
      Document document0 = new Document("rG):");
      document0.toggleClass("rG):");
      document0.hasClass("Tag name must not be empty.");
  }

  @Test(timeout = 4000)
  public void test271()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("BeforeAttributeValue", "BeforeAttributeValue");
      document0.hasClass("BeforeAttributeValue");
  }

  @Test(timeout = 4000)
  public void test272()  throws Throwable  {
      Document document0 = Document.createShell("disabled");
      CDataNode cDataNode0 = new CDataNode((String) null);
      Element element0 = document0.prependChild(cDataNode0);
      element0.data();
  }

  @Test(timeout = 4000)
  public void test273()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("java.lang.string@0000000118", "java.lang.string@0000000118");
      DataNode dataNode0 = new DataNode(" ", "java.lang.string@0000000118");
      document0.appendChild(dataNode0);
      document0.data();
  }

  @Test(timeout = 4000)
  public void test274()  throws Throwable  {
      Document document0 = Parser.parse("L(2VCZ8,\\&gKK", "L(2VCZ8,\\&gKK");
      document0.hasText();
  }

  @Test(timeout = 4000)
  public void test275()  throws Throwable  {
      Comment comment0 = new Comment("i;4G6E\"6pz#", "i;4G6E\"6pz#");
      Element.preserveWhitespace(comment0);
  }

  @Test(timeout = 4000)
  public void test276()  throws Throwable  {
      Document document0 = Document.createShell("java.lang.string@0000000118");
      document0.appendElement("br");
      document0.ownText();
  }

  @Test(timeout = 4000)
  public void test277()  throws Throwable  {
      Document document0 = Parser.parse("i;4G6E\"6pz#", "i;4G6E\"6pz#");
      document0.tagName("textarea");
      Pattern pattern0 = Pattern.compile("#", (-1625949435));
      document0.getElementsMatchingOwnText(pattern0);
  }

  @Test(timeout = 4000)
  public void test278()  throws Throwable  {
      Document document0 = Parser.parse("B(Zoj@q\"%([)v#x", "B(Zoj@q\"%([)v#x");
      DataNode dataNode0 = DataNode.createFromEncoded("sNU@-|", (String) null);
      document0.prependChild(dataNode0);
      Pattern pattern0 = Pattern.compile(">YwY%\"O.fFLfVb{g}]", (-2));
      document0.getElementsMatchingOwnText(pattern0);
  }

  @Test(timeout = 4000)
  public void test279()  throws Throwable  {
      Document document0 = Document.createShell("pre");
      CDataNode cDataNode0 = new CDataNode("bb]v@L");
      document0.prependChild(cDataNode0);
      document0.append("5gugVWU%DXvRP,rA*8");
      document0.text();
  }

  @Test(timeout = 4000)
  public void test280()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("z!l", "_?}");
      document0.append("D&gIH5L~Se|x:I^Q");
      document0.text();
  }

  @Test(timeout = 4000)
  public void test281()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("cq", "cq");
      document0.appendElement("cq");
      document0.text();
  }

  @Test(timeout = 4000)
  public void test282()  throws Throwable  {
      Document document0 = Parser.parse("i-(w<@.~H;W?;zA+P-", ":nth-child(");
      document0.appendElement("br");
      document0.text();
  }

  @Test(timeout = 4000)
  public void test283()  throws Throwable  {
      DataNode dataNode0 = DataNode.createFromEncoded("X", "z!l");
      Document document0 = Parser.parseBodyFragmentRelaxed("z!l", "Z_47xw$fMt_},[FS$");
      document0.prependChild(dataNode0);
      document0.text();
  }

  @Test(timeout = 4000)
  public void test284()  throws Throwable  {
      Document document0 = Parser.parse("LM2VCZ8,\\&gKK", "LM2VCZ8,\\&gKK");
      Element element0 = document0.appendElement(".");
      element0.lastElementSibling();
  }

  @Test(timeout = 4000)
  public void test285()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("pre", "pre");
      document0.setParentNode(document0);
      document0.lastElementSibling();
  }

  @Test(timeout = 4000)
  public void test286()  throws Throwable  {
      Document document0 = Document.createShell("pre");
      document0.setParentNode(document0);
      document0.firstElementSibling();
  }

  @Test(timeout = 4000)
  public void test287()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("dfp`&/{y?ni6", "7");
      Element element0 = document0.appendTo(document0);
      Elements elements0 = element0.nextElementSiblings();
      assertEquals("7", element0.baseUri());
      assertTrue(elements0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test288()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("SKIP_CHILDREN", "SKIP_CHILDREN");
      document0.previousElementSibling();
      assertEquals("SKIP_CHILDREN", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test289()  throws Throwable  {
      Document document0 = Parser.parse("c,r", "c,r");
      document0.appendElement("c,r");
      document0.setParentNode(document0);
      Element element0 = document0.nextElementSibling();
      assertNotNull(element0);
      assertEquals("c,r", element0.baseUri());
      assertEquals(1, element0.siblingIndex());
  }

  @Test(timeout = 4000)
  public void test290()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("$$CCa].r", "");
      Element element0 = document0.nextElementSibling();
      assertNull(element0);
  }

  @Test(timeout = 4000)
  public void test291()  throws Throwable  {
      Document document0 = Parser.parse(")LM2VCIZ8,q&gKK", ")LM2VCIZ8,q&gKK");
      Element element0 = document0.appendElement(".");
      Elements elements0 = element0.siblingElements();
      assertEquals(")LM2VCIZ8,q&gKK", element0.baseUri());
      assertEquals(1, elements0.size());
  }

  @Test(timeout = 4000)
  public void test292()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("jkyo6qz=", "jkyo6qz=");
      document0.siblingElements();
      assertEquals(1, document0.childNodeSize());
      assertEquals("jkyo6qz=", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test293()  throws Throwable  {
      Document document0 = new Document("6jCsKLjHCjooZ_");
      document0.setParentNode(document0);
      // Undeclared exception!
//      try { 
        document0.siblingElements();
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Illegal Capacity: -1
//         //
//         verifyException("java.util.ArrayList", e);
//      }
  }

  @Test(timeout = 4000)
  public void test294()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("M3Dvy6O5RwB", "M3Dvy6O5RwB");
      Element element0 = document0.body();
      element0.after("M3Dvy6O5RwB");
      String string0 = element0.cssSelector();
      assertEquals("M3Dvy6O5RwB", element0.baseUri());
      assertEquals("html > body:nth-child(2)", string0);
  }

  @Test(timeout = 4000)
  public void test295()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("M3Dvy6O5RwB", "M3Dvy6O5RwB");
      Element element0 = document0.head();
      String string0 = element0.cssSelector();
      assertEquals("M3Dvy6O5RwB", element0.baseUri());
      assertEquals("html > head", string0);
  }

  @Test(timeout = 4000)
  public void test296()  throws Throwable  {
      Element element0 = new Element(" />");
      element0.addClass(" />");
      String string0 = element0.cssSelector();
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test297()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("pre", "");
      Node[] nodeArray0 = new Node[11];
      // Undeclared exception!
//      try { 
        document0.insertChildren(6, nodeArray0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Insert position out of bounds.
//         //
//         verifyException("org.jsoup.helper.Validate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test298()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("$$CCa].r", "");
      Node[] nodeArray0 = new Node[8];
      // Undeclared exception!
//      try { 
        document0.insertChildren((-2013755314), nodeArray0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Insert position out of bounds.
//         //
//         verifyException("org.jsoup.helper.Validate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test299()  throws Throwable  {
      Document document0 = Document.createShell("");
      Pattern pattern0 = Pattern.compile("uJ", 6);
      Elements elements0 = document0.getElementsMatchingOwnText(pattern0);
      // Undeclared exception!
//      try { 
        document0.insertChildren(6, (Collection<? extends Node>) elements0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Insert position out of bounds.
//         //
//         verifyException("org.jsoup.helper.Validate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test300()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("textarea", "textarea");
      LinkedHashSet<Element> linkedHashSet0 = new LinkedHashSet<Element>();
      // Undeclared exception!
//      try { 
        document0.insertChildren((-2316), (Collection<? extends Node>) linkedHashSet0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Insert position out of bounds.
//         //
//         verifyException("org.jsoup.helper.Validate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test301()  throws Throwable  {
      Document document0 = Parser.parse("disabled", "disabled");
      Node[] nodeArray0 = new Node[8];
      nodeArray0[0] = (Node) document0;
      nodeArray0[1] = (Node) document0;
      nodeArray0[2] = (Node) document0;
      DataNode dataNode0 = new DataNode("disabled", "ju~?wGg|g|.");
      nodeArray0[3] = (Node) dataNode0;
      nodeArray0[4] = (Node) document0;
      nodeArray0[5] = (Node) document0;
      nodeArray0[6] = (Node) document0;
      nodeArray0[7] = (Node) document0;
      document0.addChildren(nodeArray0);
      List<DataNode> list0 = document0.dataNodes();
      assertEquals("disabled", document0.baseUri());
      assertEquals(1, list0.size());
  }

  @Test(timeout = 4000)
  public void test302()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("pre", "pre");
      Element element0 = document0.body();
      List<TextNode> list0 = element0.textNodes();
      assertFalse(list0.isEmpty());
      assertEquals("pre", element0.baseUri());
  }

  @Test(timeout = 4000)
  public void test303()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment(",Hs6sJ1tbjxl1", ",Hs6sJ1tbjxl1");
      List<TextNode> list0 = document0.textNodes();
      assertEquals(1, document0.childNodeSize());
      assertTrue(list0.isEmpty());
      assertEquals(",Hs6sJ1tbjxl1", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test304()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("M-", "M-");
      Element element0 = document0.body();
      Element element1 = element0.appendElement("BV<4Ry1dMi7=}j1gy");
      Elements elements0 = element1.previousElementSiblings();
      assertEquals("M-", element1.baseUri());
      assertEquals(0, elements0.size());
  }

  @Test(timeout = 4000)
  public void test305()  throws Throwable  {
      Tag tag0 = Tag.valueOf("oUm&&M-QW85.UVY$o");
      CDataNode cDataNode0 = new CDataNode("oUm&&M-QW85.UVY$o");
      Attributes attributes0 = cDataNode0.attributes();
      Element element0 = new Element(tag0, "+Z0K~k],Cl2&j", attributes0);
      Elements elements0 = element0.getElementsByIndexGreaterThan((-944));
      assertFalse(elements0.isEmpty());
      assertEquals("+Z0K~k],Cl2&j", element0.baseUri());
  }

  @Test(timeout = 4000)
  public void test306()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("cq", "cq");
      document0.selectFirst("cq");
      assertEquals("cq", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test307()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("body", "body");
      document0.getAllElements();
      assertEquals("body", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test308()  throws Throwable  {
      Document document0 = new Document("a5e");
      // Undeclared exception!
//      try { 
        document0.before("I!Ad|J.B(DUQY]3");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Object must not be null
//         //
//         verifyException("org.jsoup.helper.Validate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test309()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("pre", "pre");
      // Undeclared exception!
//      try { 
        document0.getElementsByAttribute((String) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // String must not be empty
//         //
//         verifyException("org.jsoup.helper.Validate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test310()  throws Throwable  {
      Document document0 = Parser.parse("n>[4`MQ:2", "");
      Elements elements0 = document0.getElementsByAttributeValueNot("datalist", "datalist");
      assertFalse(elements0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test311()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("pre", "pre");
      // Undeclared exception!
//      try { 
        document0.after((Node) document0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Object must not be null
//         //
//         verifyException("org.jsoup.helper.Validate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test312()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("textarea", "textarea");
      // Undeclared exception!
//      try { 
        document0.getElementsByAttributeValueContaining("", "");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // String must not be empty
//         //
//         verifyException("org.jsoup.helper.Validate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test313()  throws Throwable  {
      Document document0 = new Document(":matchesOwn(");
      document0.getElementsContainingText("");
      assertEquals(":matchesOwn(", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test314()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("textarea", "textarea");
      // Undeclared exception!
//      try { 
        document0.getElementsByClass("");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // String must not be empty
//         //
//         verifyException("org.jsoup.helper.Validate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test315()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("cq", "cq");
      document0.getElementsByAttributeValueEnding("cq", "cq");
      assertEquals("cq", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test316()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("gF", "gF");
      document0.is("gF");
      assertEquals("gF", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test317()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("z!l", "_?}");
      document0.getElementsByAttributeValueMatching("9sHMJ&MrN", "vF99~x");
      assertEquals("_?}", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test318()  throws Throwable  {
      Document document0 = Document.createShell("java.lang.string@0000000118");
      Elements elements0 = document0.getElementsByIndexEquals(1);
      assertEquals(1, document0.childNodeSize());
      assertEquals(1, elements0.size());
  }

  @Test(timeout = 4000)
  public void test319()  throws Throwable  {
      ParseSettings parseSettings0 = ParseSettings.htmlDefault;
      Tag tag0 = Tag.valueOf(")lm2vciz8,q&gkk", parseSettings0);
      Element element0 = new Element(tag0, ")lm2vciz8,q&gkk");
      element0.getElementsByAttributeStarting("br");
      assertEquals(")lm2vciz8,q&gkk", element0.baseUri());
  }

  @Test(timeout = 4000)
  public void test320()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("textarea", "textarea");
      Element element0 = document0.prependElement("body");
      assertEquals(0, element0.siblingIndex());
      assertTrue(element0.hasParent());
      assertEquals("textarea", element0.baseUri());
  }

  @Test(timeout = 4000)
  public void test321()  throws Throwable  {
      Document document0 = Parser.parse(")LM2VCIZ8,q&gKK", ")LM2VCIZ8,q&gKK");
      Elements elements0 = document0.getElementsByIndexLessThan((-523));
      assertEquals(")LM2VCIZ8,q&gKK", document0.baseUri());
      assertTrue(elements0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test322()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("M3Dvy6O5RwB", "M3Dvy6O5RwB");
      // Undeclared exception!
//      try { 
        document0.after("html > head");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Object must not be null
//         //
//         verifyException("org.jsoup.helper.Validate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test323()  throws Throwable  {
      Document document0 = new Document("p");
      // Undeclared exception!
//      try { 
        document0.prepend((String) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Object must not be null
//         //
//         verifyException("org.jsoup.helper.Validate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test324()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("pre", "pre");
      document0.getElementsByAttributeValueStarting("#root", "DqsQ${Vn");
      assertEquals("pre", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test325()  throws Throwable  {
      Document document0 = Parser.parse("{q}vJ=b&m", "ohy+U7,k@KN[|.oc07X");
      Element element0 = document0.attr("DQ", false);
      assertEquals("ohy+U7,k@KN[|.oc07X", element0.baseUri());
  }

  @Test(timeout = 4000)
  public void test326()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed(" ", " ");
      Element element0 = document0.html(" ");
      boolean boolean0 = element0.hasText();
      assertFalse(boolean0);
      assertEquals(" ", element0.baseUri());
      assertEquals(1, element0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test327()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("jkyo6qz=", "jkyo6qz=");
      document0.wholeText();
      assertEquals("jkyo6qz=", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test328()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("cq", "cq");
      // Undeclared exception!
//      try { 
        document0.before((Node) document0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Object must not be null
//         //
//         verifyException("org.jsoup.helper.Validate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test329()  throws Throwable  {
      Element element0 = null;
//      try {
        element0 = new Element((String) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Object must not be null
//         //
//         verifyException("org.jsoup.helper.Validate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test330()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("p", "T&FHiQx3(f");
      Elements elements0 = document0.getElementsContainingOwnText("T&FHiQx3(f");
      assertEquals("T&FHiQx3(f", document0.baseUri());
      assertTrue(elements0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test331()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("e;_3x)/+w-}t\"oWy2", "e;_3x)/+w-}t\"oWy2");
      document0.dataset();
      assertEquals(1, document0.childNodeSize());
      assertEquals("e;_3x)/+w-}t\"oWy2", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test332()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("", "");
      document0.title("");
      boolean boolean0 = document0.hasText();
      assertFalse(boolean0);
      assertEquals(1, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test333()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("O", "O");
      Element element0 = document0.child(0);
      assertEquals("O", element0.baseUri());
      assertNotNull(element0);
      assertEquals(1, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test334()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("cq", "cq");
      document0.previousElementSiblings();
      assertEquals(1, document0.childNodeSize());
      assertEquals("cq", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test335()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed(")lm2vciz8,q&gkk", ")lm2vciz8,q&gkk");
      document0.prependText(")lm2vciz8,q&gkk");
      assertEquals(2, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test336()  throws Throwable  {
      Document document0 = Parser.parse("LM2VCZ8,\\&gKK", "LM2VCZ8,\\&gKK");
      Elements elements0 = document0.getElementsMatchingText("LM2VCZ8,\\&gKK");
      assertEquals("LM2VCZ8,\\&gKK", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertTrue(elements0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test337()  throws Throwable  {
      Tag tag0 = Tag.valueOf("id");
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = new FormElement(tag0, "G?(Ga, 9duI0<)7[.", attributes0);
      formElement0.appendText("9@cnKVA");
      assertEquals(1, formElement0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test338()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("M3Dvy6O5RwB", "M3Dvy6O5RwB");
      // Undeclared exception!
//      try { 
        document0.wrap("M3Dvy6O5RwB");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.jsoup.nodes.Node", e);
//      }
  }

  @Test(timeout = 4000)
  public void test339()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed(")lm2vciz8,q&gkk", ")lm2vciz8,q&gkk");
      document0.getElementById("org.jsoup.safety.Cleaner$CleaningVisitor");
  }
}
