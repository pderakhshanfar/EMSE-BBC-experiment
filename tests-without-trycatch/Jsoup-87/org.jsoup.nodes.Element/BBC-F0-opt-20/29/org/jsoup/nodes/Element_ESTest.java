/*
 * This file was automatically generated by EvoSuite
 * Fri Oct 22 21:28:19 GMT 2021
 */

package org.jsoup.nodes;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedWriter;
import java.io.CharArrayWriter;
import java.io.IOException;
import java.io.OutputStreamWriter;
import java.io.PipedReader;
import java.io.PipedWriter;
import java.io.Reader;
import java.io.StringReader;
import java.io.StringWriter;
import java.nio.BufferOverflowException;
import java.nio.CharBuffer;
import java.nio.ReadOnlyBufferException;
import java.nio.charset.Charset;
import java.util.Collection;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.Set;
import java.util.regex.Pattern;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFileWriter;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.jsoup.nodes.Attributes;
import org.jsoup.nodes.CDataNode;
import org.jsoup.nodes.Comment;
import org.jsoup.nodes.DataNode;
import org.jsoup.nodes.Document;
import org.jsoup.nodes.DocumentType;
import org.jsoup.nodes.Element;
import org.jsoup.nodes.FormElement;
import org.jsoup.nodes.Node;
import org.jsoup.nodes.PseudoTextElement;
import org.jsoup.nodes.TextNode;
import org.jsoup.nodes.XmlDeclaration;
import org.jsoup.parser.ParseErrorList;
import org.jsoup.parser.ParseSettings;
import org.jsoup.parser.Parser;
import org.jsoup.parser.Tag;
import org.jsoup.select.Elements;
import org.jsoup.select.Evaluator;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Element_ESTest extends Element_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment(":@x^%Y6C&+", ":@x^%Y6C&+");
      document0.appendElement("br");
      document0.outerHtml();
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Document document0 = Parser.parse("org.jsoup.select.StructuralEvaluator$Root", "org.jsoup.select.StructuralEvaluator$Root");
      Element element0 = document0.toggleClass("org.jsoup.select.StructuralEvaluator$Root");
      Element element1 = element0.addClass("aet{hdy)/`pvfs9x");
      element1.hasClass("org.jsoup.select.StructuralEvaluator$Root");
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("br", "org.jsoup.nodes.Element$1");
      Element element0 = document0.head();
      element0.before("kG8M'tT')J%@v");
      element0.previousElementSiblings();
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      ParseSettings parseSettings0 = ParseSettings.preserveCase;
      Tag tag0 = Tag.valueOf("4.4<)j>P{", parseSettings0);
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = new FormElement(tag0, "4.4<)j>P{", attributes0);
      PseudoTextElement pseudoTextElement0 = new PseudoTextElement(tag0, "4.4<)j>P{", attributes0);
      pseudoTextElement0.reparentChild(formElement0);
      formElement0.nextElementSiblings();
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Tag tag0 = Tag.valueOf("!$Oy\"J\"D3");
      CDataNode cDataNode0 = new CDataNode("!$Oy\"J\"D3");
      Attributes attributes0 = cDataNode0.attributes();
      Element element0 = new Element(tag0, "", attributes0);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Parser parser0 = Parser.htmlParser();
      Document document0 = parser0.parseInput(",", ",");
      document0.nodelistChanged();
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("umZx>7^brcH,G>;r", "umZx>7^brcH,G>;r");
      document0.ensureChildNodes();
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Element element0 = new Element("xp_T");
      element0.doSetBaseUri("xp_T");
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("umZx>7^brcH,G>;r", "umZx>7^brcH,G>;r");
      document0.getElementsMatchingText("umZx>7^brcH,G>;r");
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Document document0 = Document.createShell(";4&orotR$)&J`Q");
      document0.getElementsByAttributeValueMatching("xp_T", "");
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Parser parser0 = Parser.xmlParser();
      Document document0 = parser0.parseInput("id", "BH mrLZNHHV9");
      document0.wrap("id");
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("|uNGsZ@mb0RKm%Huu", "|uNGsZ@mb0RKm%Huu");
      Element element0 = document0.head();
      element0.wrap("|uNGsZ@mb0RKm%Huu");
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Tag tag0 = Tag.valueOf("disabled");
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = new FormElement(tag0, "disabled", attributes0);
      formElement0.wholeText();
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("Children collection to be inserted must not be null.", "org.jsoup.select.StructuralEvaluator$Has");
      document0.siblingIndex = (-1956);
      document0.val("48jf%~<");
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      ParseSettings parseSettings0 = ParseSettings.htmlDefault;
      Tag tag0 = Tag.valueOf("fieldset", parseSettings0);
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = new FormElement(tag0, "fieldset", attributes0);
      formElement0.val("fieldset");
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("YR0iG{]?7>jI/wg2>", "YR0iG{]?7>jI/wg2>");
      Attributes attributes0 = new Attributes();
      ParseSettings parseSettings0 = ParseSettings.htmlDefault;
      Tag tag0 = Tag.valueOf("YR0iG{]?7>jI/wg2>", parseSettings0);
      FormElement formElement0 = new FormElement(tag0, "org.jsoup.parser.Token$EndTag", attributes0);
      formElement0.appendTo(document0);
      formElement0.val("PAxMCfXk");
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Tag tag0 = Tag.valueOf("Q*i~B#9}");
      FormElement formElement0 = new FormElement(tag0, ",-aRY", (Attributes) null);
      formElement0.val("?)Z&?b)}kJ");
      formElement0.val();
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("", "");
      Element element0 = document0.body();
      element0.toggleClass("");
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("", "title");
      Element element0 = document0.createElement("title");
      element0.toggleClass("org.jsoup.parser.Token$Comment");
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("body", "body");
      Element element0 = document0.head();
      element0.text("^e;Q<=x_.ZPdHd4y");
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("$:@xl^xY66&w", "$:@xl^xY66&w");
      Element element0 = document0.appendElement("$:@xl^xY66&w");
      element0.text("nth-child");
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("$:@xl^xY66&w", "$:@xl^xY66&w");
      document0.text("nth-child");
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Document document0 = Document.createShell("r");
      Element element0 = document0.body();
      element0.tagName("r");
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Document document0 = Parser.parse("W~=", "lIuNBZ;O@TRdK");
      document0.tagName();
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      ParseSettings parseSettings0 = ParseSettings.htmlDefault;
      Tag tag0 = Tag.valueOf("fieldset", parseSettings0);
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = new FormElement(tag0, "fieldset", attributes0);
      formElement0.tag();
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Document document0 = new Document("br");
      Element element0 = document0.appendElement("br");
      element0.tag();
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Document document0 = Document.createShell(";4&orotR$)&J`Q");
      document0.tag();
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Document document0 = Document.createShell(",");
      Element element0 = document0.head();
      element0.shallowClone();
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Tag tag0 = Tag.valueOf("disabled");
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = new FormElement(tag0, "disabled", attributes0);
      formElement0.selectFirst("disabled");
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("br", "br");
      Element element0 = document0.appendElement("br");
      element0.selectFirst("br");
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment(":d~Q\"27_\"qKoOU7", ":d~Q\"27_\"qKoOU7");
      document0.selectFirst("html");
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("Nh@{W+!(~eLyd#J", "xp_T");
      document0.select("br");
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment(",", ",");
      document0.select("*");
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("5Jo0%#!e>-$'MHM;", "");
      Element element0 = document0.body();
      element0.removeClass("5Jo0%#!e>-$'MHM;");
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("6k", "org.jsoup.parser.Token$EOF");
      Parser parser0 = Parser.xmlParser();
      Document document1 = document0.parser(parser0);
      document1.siblingIndex = (-487);
      document0.removeClass("6k");
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Parser parser0 = Parser.htmlParser();
      Document document0 = parser0.parseInput("Did not find balanced marker at '", "body");
      Element element0 = document0.head();
      element0.removeClass("V-ieZ3");
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("java.lang.string@0000000095", "java.lang.string@0000000095");
      Element element0 = document0.body();
      element0.previousElementSibling();
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("Children collection to be inserted must not be null.", "org.jsoup.select.StructuralEvaluator$Has");
      document0.siblingIndex = (-1956);
      document0.prependText("Children collection to be inserted must not be null.");
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("Q*i~B#9}", ".");
      Element element0 = document0.body();
      element0.prependText("Q*i~B#9}");
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("head", "head");
      document0.prependElement("head");
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("org.jsoup.nodes.Element$1", "org.jsoup.nodes.Element$1");
      Element element0 = document0.body();
      element0.prependChild(document0);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("org.jsoup.nodes.Element$1", "org.jsoup.nodes.Element$1");
      document0.prependChild(document0);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("xjbvbj^s`", ".");
      Element element0 = document0.body();
      element0.prepend("5f|kh/BSwDl$");
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Tag tag0 = Tag.valueOf("\"$cS|7y");
      CDataNode cDataNode0 = new CDataNode("\"$cS|7y");
      Attributes attributes0 = cDataNode0.attributes();
      PseudoTextElement pseudoTextElement0 = new PseudoTextElement(tag0, "\"$cS|7y", attributes0);
      pseudoTextElement0.prepend("");
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("be", "U=$VE$N&'gRxI!");
      document0.parents();
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("qui>*s", "qui>*s");
      Element element0 = document0.body();
      element0.parents();
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Document document0 = Document.createShell(";4&orotR$)&J`Q");
      document0.parent();
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Document document0 = Parser.parse("PUBLIC", "PUBLIC");
      Element element0 = new Element("PUBLIC");
      Element element1 = document0.appendTo(element0);
      element1.parent();
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("qui>*is", "qui>*is");
      Element element0 = document0.body();
      element0.parent();
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Parser parser0 = Parser.xmlParser();
      Document document0 = parser0.parseInput("textarea", "textarea");
      document0.ownText();
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Document document0 = Document.createShell("yI)p1");
      document0.nodeName();
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Parser parser0 = Parser.htmlParser();
      Document document0 = parser0.parseInput("Did not find balanced marker at '", "body");
      Element element0 = document0.head();
      element0.nextElementSibling();
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("|uNGsZ@m0RKm%Huu", "|uNGsZ@m0RKm%Huu");
      Element element0 = document0.appendElement("Ft");
      element0.lastElementSibling();
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("PAxMCfXk", "PAxMCfXk");
      Element element0 = document0.body();
      element0.isBlock();
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Element element0 = new Element("<html>\n <head></head>\n <body>\n  YR0iG{]?7&gt;jI/wg2&gt;\n </body>\n</html>");
      Evaluator.IsRoot evaluator_IsRoot0 = new Evaluator.IsRoot();
      element0.is((Evaluator) evaluator_IsRoot0);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Tag tag0 = Tag.valueOf("rt");
      CDataNode cDataNode0 = new CDataNode("rt");
      Attributes attributes0 = cDataNode0.attributes();
      FormElement formElement0 = new FormElement(tag0, "rt", attributes0);
      formElement0.is("rt");
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      ParseSettings parseSettings0 = new ParseSettings(false, true);
      Tag tag0 = Tag.valueOf("IvxD|WJvxDH$o0%^kb~", parseSettings0);
      Element element0 = new Element(tag0, "");
      Node[] nodeArray0 = new Node[0];
      element0.insertChildren((-1), nodeArray0);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Document document0 = Parser.parse("java.lang.string@0000000095", "java.lang.string@0000000095");
      Node[] nodeArray0 = new Node[2];
      nodeArray0[0] = (Node) document0;
      nodeArray0[1] = (Node) document0;
      document0.insertChildren(0, nodeArray0);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("/odk", "?4cU_Oi31>.");
      Element element0 = document0.body();
      Elements elements0 = element0.nextElementSiblings();
      element0.insertChildren(0, (Collection<? extends Node>) elements0);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      ParseSettings parseSettings0 = ParseSettings.preserveCase;
      Tag tag0 = Tag.valueOf("Unexpected count of entities loaded", parseSettings0);
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = new FormElement(tag0, "Unexpected count of entities loaded", attributes0);
      LinkedHashSet<PseudoTextElement> linkedHashSet0 = new LinkedHashSet<PseudoTextElement>();
      formElement0.insertChildren(0, (Collection<? extends Node>) linkedHashSet0);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("|uNGsZ@m0RKm%Huu", "|uNGsZ@m0RKm%Huu");
      document0.siblingIndex = (-3069);
      document0.html("|uNGsZ@m0RKm%Huu");
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("value", "value");
      Element element0 = document0.body();
      element0.html("value");
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Parser parser0 = Parser.htmlParser();
      Document document0 = parser0.parseInput("Did not find balanced marker at '", "$ody");
      document0.html("");
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      ParseSettings parseSettings0 = ParseSettings.preserveCase;
      Tag tag0 = Tag.valueOf("4.4<)j>P{", parseSettings0);
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = new FormElement(tag0, "4.4<)j>P{", attributes0);
      formElement0.html((BufferedWriter) null);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Document document0 = new Document("8h#");
      document0.html();
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      ParseSettings parseSettings0 = ParseSettings.preserveCase;
      Tag tag0 = Tag.valueOf("Unexpected count of entities loaded", parseSettings0);
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = new FormElement(tag0, "Unexpected count of entities loaded", attributes0);
      formElement0.hasAttributes();
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Document document0 = new Document(";4&orotR$)&J`Q");
      document0.hasAttributes();
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("Toy/h_YJEVDaA<33y4", "Toy/h_YJEVDaA<33y4");
      Pattern pattern0 = Pattern.compile("Toy/h_YJEVDaA<33y4", (-1327));
      document0.getElementsMatchingText(pattern0);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("textarea", "textarea");
      document0.getElementsMatchingText("textarea");
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment(":@x^%Y6C&+", ":@x^%Y6C&+");
      Pattern pattern0 = Pattern.compile("html", 550);
      document0.getElementsMatchingOwnText(pattern0);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("html > head", "Did not find balanced marker at '");
      Pattern pattern0 = Pattern.compile("html > head", 0);
      document0.getElementsMatchingOwnText(pattern0);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Document document0 = Document.createShell(",");
      document0.getElementsContainingText("uxy0y^C");
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Parser parser0 = Parser.htmlParser();
      Document document0 = parser0.parseInput("", "");
      document0.getElementsByTag("#root");
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("YR0iG{]?7>jI/wg2>", "|");
      document0.getElementsByIndexLessThan(1057);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Document document0 = Document.createShell("br");
      document0.getElementsByIndexGreaterThan(3928);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      ParseSettings parseSettings0 = ParseSettings.preserveCase;
      Tag tag0 = Tag.valueOf("Unexpected count of entities loaded", parseSettings0);
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = new FormElement(tag0, "Unexpected count of entities loaded", attributes0);
      formElement0.getElementsByIndexEquals(0);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("YR0iG{]?7>jI/wg2>", "|");
      Element element0 = document0.toggleClass("|");
      Element element1 = element0.addClass("s+");
      element1.getElementsByClass("s+");
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Parser parser0 = Parser.htmlParser();
      Document document0 = parser0.parseInput("Did not find balanced marker at '", "body");
      document0.getElementsByAttributeValueContaining("D&|(Fe<iM85", "Did not find balanced marker at '");
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Document document0 = Document.createShell("x`.E>PrA9-j e3N cZB");
      document0.attr("x`.E>PrA9-j e3N cZB", "x`.E>PrA9-j e3N cZB");
      document0.getElementsByAttributeValueContaining("x`.E>PrA9-j e3N cZB", "x`.E>PrA9-j e3N cZB");
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      ParseSettings parseSettings0 = ParseSettings.preserveCase;
      Tag tag0 = Tag.valueOf("xp_T", parseSettings0);
      Attributes attributes0 = new Attributes();
      attributes0.put("#root", "_Y=ySxxP}f@1BP3");
      PseudoTextElement pseudoTextElement0 = new PseudoTextElement(tag0, "#root", attributes0);
      pseudoTextElement0.getElementsByAttributeStarting("#root");
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Document document0 = Parser.parse("OC1k$@l`\">7>lo", "OC1k$@l`\">7>lo");
      document0.getElementsByAttribute("OC1k$@l`\">7>lo");
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("java.lang.string@0000000095", "java.lang.string@0000000095");
      Element element0 = document0.appendElement("java.lang.string@0000000095");
      document0.prependElement("java.lang.string@0000000095");
      element0.firstElementSibling();
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("qui>*s", "qui>*s");
      Element element0 = document0.body();
      element0.empty();
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Tag tag0 = Tag.valueOf("Q*i~B#9}");
      FormElement formElement0 = new FormElement(tag0, "#%s", (Attributes) null);
      Document document0 = Document.createShell("Q*i~B#9}");
      formElement0.appendTo(document0);
      formElement0.elementSiblingIndex();
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("head", "head");
      Element element0 = document0.body();
      element0.doClone(document0);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("|uNGsZ@m0RKm%Huu", "|uNGsZ@m0RKm%Huu");
      document0.doClone((Node) null);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("4.4<)j>P{", "j");
      Element element0 = document0.head();
      element0.clone();
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("YR0iG{]?7>jI/wg2>", "|");
      Element element0 = document0.shallowClone();
      element0.clone();
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Parser parser0 = Parser.htmlParser();
      Document document0 = parser0.parseInput(",", "");
      document0.clone();
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Document document0 = Parser.parse("Did not find balanced marker at '", "body");
      Element element0 = document0.body();
      Locale locale0 = Locale.US;
      Set<String> set0 = locale0.getUnicodeLocaleKeys();
      element0.classNames(set0);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment(":%s(nd2n%Jd)", "apGb<j{/f");
      Element element0 = document0.appendElement("M{");
      Set<String> set0 = element0.classNames();
      element0.classNames(set0);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Document document0 = Document.createShell("br");
      Element element0 = document0.toggleClass("W,M-m/l1@EV8cLA}");
      element0.classNames();
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("YR0iG{]?7>jI/wg2>", "|");
      Element element0 = document0.toggleClass("|");
      element0.className();
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment(":%s(nd2n%Jd)", "apGb<j{/f");
      Element element0 = document0.appendElement("M{");
      element0.children();
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Element element0 = new Element("be");
      element0.childNodeSize();
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("br", "org.jsoup.nodes.Element$1");
      document0.childNodeSize();
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Document document0 = new Document("Ft");
      document0.appendElement("Z}");
      document0.child(0);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("8p[&s[o", "8p[&s[o");
      Element element0 = new Element("8p[&s[o");
      Element element1 = document0.appendTo(element0);
      document0.before((Node) element1);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("8p[&s[o", "8p[&s[o");
      document0.appendTo(document0);
      document0.before((Node) document0);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("head", "head");
      Element element0 = document0.body();
      Element element1 = element0.firstElementSibling();
      element1.before((Node) document0);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("embed", "embed");
      Tag tag0 = Tag.valueOf("embed");
      CDataNode cDataNode0 = new CDataNode("]");
      Attributes attributes0 = cDataNode0.attributes();
      PseudoTextElement pseudoTextElement0 = new PseudoTextElement(tag0, "#root", attributes0);
      Element element0 = document0.doClone(pseudoTextElement0);
      element0.before("*',");
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("qui>*is", "qui>*is");
      document0.baseUri();
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Document document0 = Document.createShell("");
      document0.baseUri();
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Document document0 = Document.createShell("y}4b&8zk Td7NVi7q>g");
      document0.toggleClass("C;Q?Pk6s}cne}~h??c");
      document0.attributes();
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("Children collection to be inserted must not be null.", "org.jsoup.select.StructuralEvaluator$Has");
      document0.siblingIndex = (-1956);
      document0.attr("article", true);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      ParseSettings parseSettings0 = ParseSettings.preserveCase;
      Tag tag0 = Tag.valueOf("body", parseSettings0);
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = new FormElement(tag0, "", attributes0);
      formElement0.attr("org.jsoup.nodes.Element", true);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment(":%s(nd2n%Jd)", ":%s(nd2n%Jd)");
      Element element0 = document0.appendElement("M{");
      element0.attr("G-naE6<;(\"1&", true);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      Parser parser0 = Parser.htmlParser();
      Document document0 = parser0.parseInput("", "");
      Element element0 = document0.body();
      element0.attr("", "M>J):v!U6;<x7k&:");
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("5Jo0%#!e>-$'MHM;", "");
      Element element0 = document0.body();
      element0.appendTo(document0);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("", "");
      document0.siblingIndex = (-1063);
      document0.appendText("]#Co`6xjP)");
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      Parser parser0 = Parser.htmlParser();
      Document document0 = parser0.parseInput("Did not find balanced marker at '", "body");
      Element element0 = document0.head();
      element0.appendText("&%&");
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment(":@x^%Y6C&+", ":@x^%Y6C&+");
      Element element0 = document0.appendElement("Zib4xW.iO_");
      element0.appendText("Zib4xW.iO_");
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("", "body");
      document0.appendElement("body");
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("quirks", "quirks");
      Element element0 = document0.body();
      element0.appendChild(document0);
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("5Jo0%#!e>-$'MHM;", "");
      Element element0 = document0.body();
      element0.append("$-D#ta}[{P\f");
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      Tag tag0 = Tag.valueOf("\"$cS|7y");
      CDataNode cDataNode0 = new CDataNode("\"$cS|7y");
      Attributes attributes0 = cDataNode0.attributes();
      PseudoTextElement pseudoTextElement0 = new PseudoTextElement(tag0, "\"$cS|7y", attributes0);
      pseudoTextElement0.append("");
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      Document document0 = Document.createShell(":%s(nd2n%+d)");
      Document document1 = Document.createShell(":%s(nd2n%+d)");
      document1.parentNode = (Node) document1;
      document1.after((Node) document0);
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      Parser parser0 = Parser.htmlParser();
      Document document0 = parser0.parseInput("Did not find balanced marker at '", "$ody");
      Element element0 = document0.head();
      element0.after((Node) document0);
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("|uNGsZ@m0RKm%Huu", "|uNGsZ@m0RKm%Huu");
      Element element0 = document0.body();
      element0.after((Node) document0);
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      Parser parser0 = Parser.htmlParser();
      Document document0 = parser0.parseInput("Did not find balanced marker at '", "body");
      Element element0 = document0.head();
      element0.after("body");
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("r", "r");
      Element element0 = document0.appendElement("r");
      Element element1 = element0.after(":has(");
      Elements elements0 = document0.getElementsMatchingOwnText("r");
      element1.insertChildren(0, (Collection<? extends Node>) elements0);
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      Parser parser0 = Parser.htmlParser();
      Document document0 = parser0.parseInput(",", "");
      Element element0 = document0.body();
      element0.after("extare2");
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("quirks", "quirks");
      Element element0 = document0.body();
      element0.addClass("y17{i#,`L9BY{n~$HT");
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment(":%s(nd2n%+d)", ":%s(nd2n%+d)");
      Element element0 = document0.prepend(":%s(nd2n%+d)");
      element0.parentNode = (Node) document0;
      // Undeclared exception!
      document0.wrap("lnpsl[ebN8OhSL?NR<P");
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      Document document0 = Document.createShell("");
      // Undeclared exception!
//      try { 
        document0.wrap("");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // String must not be empty
//         //
//         verifyException("org.jsoup.helper.Validate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("ZyX&nCn;W|F9<R$/(9", "Da;");
      TextNode textNode0 = new TextNode("Da;");
      Document document1 = (Document)document0.doClone(textNode0);
      // Undeclared exception!
//      try { 
        document1.wrap("Da;");
//        fail("Expecting exception: ClassCastException");
      
//      } catch(ClassCastException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      ParseSettings parseSettings0 = ParseSettings.preserveCase;
      Tag tag0 = Tag.valueOf("4.4<)j>P{", parseSettings0);
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = new FormElement(tag0, "4.4<)j>P{", attributes0);
      PseudoTextElement pseudoTextElement0 = new PseudoTextElement(tag0, "4.4<)j>P{", attributes0);
      formElement0.appendTo(pseudoTextElement0);
      pseudoTextElement0.parentNode = (Node) pseudoTextElement0;
      // Undeclared exception!
      formElement0.val("org.jsoup.nodes.LeafNode");
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      ParseSettings parseSettings0 = ParseSettings.htmlDefault;
      Tag tag0 = Tag.valueOf("publicId", parseSettings0);
      Attributes attributes0 = new Attributes();
      attributes0.keys = null;
      FormElement formElement0 = new FormElement(tag0, "publicId", attributes0);
      // Undeclared exception!
//      try { 
        formElement0.val("publicId");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.jsoup.nodes.Attributes", e);
//      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      ParseSettings parseSettings0 = ParseSettings.htmlDefault;
      Tag tag0 = Tag.valueOf(",n_gKT&c", parseSettings0);
      Attributes attributes0 = new Attributes();
      String[] stringArray0 = new String[2];
      attributes0.keys = stringArray0;
      FormElement formElement0 = new FormElement(tag0, ",n_gKT&c", attributes0);
      // Undeclared exception!
//      try { 
        formElement0.val(",n_gKT&c");
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 0
//         //
//         verifyException("org.jsoup.nodes.Attributes", e);
//      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      Parser parser0 = Parser.htmlParser();
      Document document0 = parser0.parseInput("Did not find balanced marker at '", "body");
      // Undeclared exception!
//      try { 
        document0.toggleClass((String) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Object must not be null
//         //
//         verifyException("org.jsoup.helper.Validate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      Document document0 = new Document("class");
      // Undeclared exception!
//      try { 
        document0.text("head");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.jsoup.nodes.Document", e);
//      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("<teIL-D>+?$lD9i", "<teIL-D>+?$lD9i");
      // Undeclared exception!
//      try { 
        document0.text((String) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Object must not be null
//         //
//         verifyException("org.jsoup.helper.Validate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("h*yeh~T$u", "h*yeh~T$u");
      document0.childNodes = null;
      // Undeclared exception!
//      try { 
        document0.text();
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("Ft", "Ft");
      DataNode dataNode0 = new DataNode("BUD`SV<V7S)4Nv_k/A");
      document0.setParentNode(dataNode0);
      // Undeclared exception!
//      try { 
        document0.text();
//        fail("Expecting exception: ClassCastException");
      
//      } catch(ClassCastException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("PAxMCfXk", "PAxMCfXk");
      Element element0 = document0.body();
      element0.setSiblingIndex((-106));
      // Undeclared exception!
//      try { 
        element0.text();
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      Document document0 = Document.createShell(":%s(nd2n%+d)");
      Element element0 = document0.prepend(":%s(nd2n%+d)");
      element0.parentNode = (Node) document0;
      // Undeclared exception!
      document0.tagName("<html>\n <head></head>\n <body></body>\n</html>");
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      Document document0 = Parser.parse("textarea", "textarea");
      // Undeclared exception!
//      try { 
        document0.tagName((String) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Tag name must not be empty.
//         //
//         verifyException("org.jsoup.helper.Validate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("ava.la:g.striAg@00000095", "ava.la:g.striAg@00000095");
      Element element0 = document0.empty();
      document0.parentNode = (Node) document0;
      // Undeclared exception!
//      try { 
        element0.siblingElements();
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Illegal Capacity: -1
//         //
//         verifyException("java.util.ArrayList", e);
//      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      CDataNode cDataNode0 = new CDataNode("");
      Attributes attributes0 = cDataNode0.attributes();
      ParseSettings parseSettings0 = ParseSettings.htmlDefault;
      Tag tag0 = Tag.valueOf("wUAigK!", parseSettings0);
      FormElement formElement0 = new FormElement(tag0, "nA_G'{=!G-l=9u()", attributes0);
      // Undeclared exception!
//      try { 
        formElement0.selectFirst("ug]fq{k");
//        fail("Expecting exception: IllegalStateException");
      
//      } catch(IllegalStateException e) {
//         //
//         // Could not parse query 'ug]fq{k': unexpected token at ']fq{k'
//         //
//         verifyException("org.jsoup.select.QueryParser", e);
//      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      ParseSettings parseSettings0 = ParseSettings.preserveCase;
      Tag tag0 = Tag.valueOf(" > ", parseSettings0);
      CDataNode cDataNode0 = new CDataNode("7xg");
      Attributes attributes0 = cDataNode0.attributes();
      FormElement formElement0 = new FormElement(tag0, " > ", attributes0);
      // Undeclared exception!
//      try { 
        formElement0.selectFirst("");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // String must not be empty
//         //
//         verifyException("org.jsoup.helper.Validate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("org.jsoup.nodes.Element", "org.jsoup.nodes.Element");
      // Undeclared exception!
//      try { 
        document0.select("F&g2QLSLjc|px9]5");
//        fail("Expecting exception: IllegalStateException");
      
//      } catch(IllegalStateException e) {
//         //
//         // Could not parse query 'F&g2QLSLjc|px9]5': unexpected token at '&g2QLSLjc|px9]5'
//         //
//         verifyException("org.jsoup.select.QueryParser", e);
//      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      Tag tag0 = Tag.valueOf("Q*i~B#9}");
      FormElement formElement0 = new FormElement(tag0, ",-aRY", (Attributes) null);
      // Undeclared exception!
//      try { 
        formElement0.removeClass((String) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Object must not be null
//         //
//         verifyException("org.jsoup.helper.Validate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("%s(%c", "%s(%c");
      document0.childNodes = null;
      document0.parentNode = (Node) document0;
      // Undeclared exception!
//      try { 
        document0.previousElementSiblings();
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.jsoup.nodes.Element", e);
//      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("h3", "UFB?");
      XmlDeclaration xmlDeclaration0 = new XmlDeclaration("h3", true);
      document0.parentNode = (Node) xmlDeclaration0;
      // Undeclared exception!
//      try { 
        document0.previousElementSiblings();
//        fail("Expecting exception: ClassCastException");
      
//      } catch(ClassCastException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      Document document0 = new Document("disabled");
      CDataNode cDataNode0 = new CDataNode("org.jsoup.nodes.Element$NodeList");
      Element element0 = document0.doClone(cDataNode0);
      // Undeclared exception!
//      try { 
        element0.previousElementSibling();
//        fail("Expecting exception: ClassCastException");
      
//      } catch(ClassCastException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("ForeignContent", "ForeignContent");
      List<Node> list0 = Parser.parseXmlFragment("5#A-? vx6`s8H", "");
      document0.childNodes = list0;
      // Undeclared exception!
//      try { 
        document0.prependText("5#A-? vx6`s8H");
//        fail("Expecting exception: UnsupportedOperationException");
      
//      } catch(UnsupportedOperationException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.util.Collections$UnmodifiableList", e);
//      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("-qui>*u", "-qui>*u");
      // Undeclared exception!
//      try { 
        document0.prependText((String) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Object must not be null
//         //
//         verifyException("org.jsoup.helper.Validate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      Document document0 = Parser.parse("Tag nam uEt not bq empty.", "Tag nam uEt not bq empty.");
      document0.parentNode = (Node) document0;
      // Undeclared exception!
      document0.prependElement("");
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      Document document0 = Document.createShell("}VSpS^7");
      List<Node> list0 = document0.childNodes();
      document0.childNodes = list0;
      // Undeclared exception!
//      try { 
        document0.prependElement("$g}v6L}O&&s5");
//        fail("Expecting exception: UnsupportedOperationException");
      
//      } catch(UnsupportedOperationException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.util.Collections$UnmodifiableList", e);
//      }
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      Tag tag0 = Tag.valueOf("tag name m0st not e emptyv");
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = new FormElement(tag0, "tag name m0st not e emptyv", attributes0);
      formElement0.childNodes = null;
      // Undeclared exception!
//      try { 
        formElement0.prependElement("java.lang.string@0000000084 cp367 csascii iso-ir-6 ascii iso_646.irv:1983 ansi_x3.4-1986 ascii7 default iso_646.irv:1991 iso646-us ibm367 646 us");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.jsoup.nodes.Node", e);
//      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      Parser parser0 = Parser.htmlParser();
      Document document0 = parser0.parseInput("YR0iG{]?7>jI/wg2>", "|");
      // Undeclared exception!
//      try { 
        document0.prependElement((String) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Object must not be null
//         //
//         verifyException("org.jsoup.helper.Validate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("textarea", "textarea");
      CDataNode cDataNode0 = new CDataNode("textarea");
      Element element0 = document0.doClone(cDataNode0);
      // Undeclared exception!
//      try { 
        document0.prependChild(element0);
//        fail("Expecting exception: UnsupportedOperationException");
      
//      } catch(UnsupportedOperationException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.util.AbstractList", e);
//      }
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      ParseSettings parseSettings0 = ParseSettings.preserveCase;
      Tag tag0 = Tag.valueOf("4.4<)j>P{", parseSettings0);
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = new FormElement(tag0, "4.4<)j>P{", attributes0);
      PseudoTextElement pseudoTextElement0 = new PseudoTextElement(tag0, "4.4<)j>P{", attributes0);
      pseudoTextElement0.reparentChild(formElement0);
      // Undeclared exception!
//      try { 
        pseudoTextElement0.prependChild(formElement0);
//        fail("Expecting exception: IndexOutOfBoundsException");
      
//      } catch(IndexOutOfBoundsException e) {
//         //
//         // Index: 0, Size: 0
//         //
//         verifyException("java.util.ArrayList", e);
//      }
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      Document document0 = Document.createShell(")h{Ye]64NIxtF`0Lu");
      // Undeclared exception!
//      try { 
        document0.prependChild((Node) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Object must not be null
//         //
//         verifyException("org.jsoup.helper.Validate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      Document document0 = Document.createShell(":%s(nd2n%Jd)");
      CDataNode cDataNode0 = new CDataNode(":%s(nd2n%Jd)");
      Node node0 = cDataNode0.doClone(document0);
      document0.setParentNode(node0);
      // Undeclared exception!
      document0.prepend(":%s(nd2n%Jd)");
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      Document document0 = new Document("F&g2QLSLjc|px9]5");
      // Undeclared exception!
//      try { 
        document0.prepend((String) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Object must not be null
//         //
//         verifyException("org.jsoup.helper.Validate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      Document document0 = Parser.parse("org.jsoupsafety.cleanr$cleainvisitor", "org.jsoupsafety.cleanr$cleainvisitor");
      CharBuffer charBuffer0 = CharBuffer.allocate(142);
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.indentAmount(142);
      // Undeclared exception!
      document0.outerHtmlTail(charBuffer0, 142, document_OutputSettings1);
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      ParseSettings parseSettings0 = ParseSettings.htmlDefault;
      Tag tag0 = Tag.valueOf("B=", parseSettings0);
      Element element0 = new Element(tag0, ">M(34,rf");
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) ">M(34,rf");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      // Undeclared exception!
//      try { 
        element0.outerHtmlTail(charBuffer0, (-194), document_OutputSettings0);
//        fail("Expecting exception: ReadOnlyBufferException");
      
//      } catch(ReadOnlyBufferException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.nio.CharBuffer", e);
//      }
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment(":@xl^%Y6C&+", ":@xl^%Y6C&+");
      CharBuffer charBuffer0 = CharBuffer.allocate(11);
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      // Undeclared exception!
//      try { 
        document0.outerHtmlTail(charBuffer0, 11, document_OutputSettings0);
//        fail("Expecting exception: BufferOverflowException");
      
//      } catch(BufferOverflowException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.nio.CharBuffer", e);
//      }
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("progress", "|uNGsZ@mb0RKm%Huu");
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(charArrayWriter0);
      // Undeclared exception!
//      try { 
        document0.outerHtmlTail(mockPrintWriter0, (-1539), (Document.OutputSettings) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.jsoup.nodes.Element", e);
//      }
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      Parser parser0 = Parser.xmlParser();
      StringReader stringReader0 = new StringReader("-x6?0/McUf*");
      Document document0 = parser0.parseInput((Reader) stringReader0, "-x6?0/McUf*");
      StringBuilder stringBuilder0 = new StringBuilder(58);
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      // Undeclared exception!
//      try { 
        document0.outerHtmlTail(stringBuilder0, (-2210), document_OutputSettings0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // width must be > 0
//         //
//         verifyException("org.jsoup.internal.StringUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      Document document0 = new Document("disabled");
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.indentAmount(3088);
      // Undeclared exception!
      document0.outerHtmlHead(charArrayWriter0, 3088, document_OutputSettings1);
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      ParseSettings parseSettings0 = ParseSettings.htmlDefault;
      Tag tag0 = Tag.valueOf("texHarer", parseSettings0);
      FormElement formElement0 = new FormElement(tag0, "extare2", attributes0);
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) "extare2");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      // Undeclared exception!
//      try { 
        formElement0.outerHtmlHead(charBuffer0, 551, document_OutputSettings0);
//        fail("Expecting exception: ReadOnlyBufferException");
      
//      } catch(ReadOnlyBufferException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.nio.StringCharBuffer", e);
//      }
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      Document document0 = Parser.parse("bV", "bV");
      char[] charArray0 = new char[9];
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      // Undeclared exception!
//      try { 
        document0.outerHtmlHead(charBuffer0, 129, document_OutputSettings0);
//        fail("Expecting exception: BufferOverflowException");
      
//      } catch(BufferOverflowException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.nio.CharBuffer", e);
//      }
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("org.jsoup.nodes.Element", "yG\"T");
      StringWriter stringWriter0 = new StringWriter();
      // Undeclared exception!
//      try { 
        document0.outerHtmlHead(stringWriter0, 2518, (Document.OutputSettings) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.jsoup.nodes.Element", e);
//      }
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      Document document0 = Document.createShell("tag name must not be empty. xbwu.x1!");
      char[] charArray0 = new char[6];
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      // Undeclared exception!
//      try { 
        document0.outerHtmlHead(charBuffer0, (-1937), document_OutputSettings0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // width must be > 0
//         //
//         verifyException("org.jsoup.internal.StringUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("Fn t", "Fn t");
      PipedWriter pipedWriter0 = new PipedWriter();
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
//      try { 
        document0.outerHtmlHead(pipedWriter0, 4, document_OutputSettings0);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Pipe not connected
//         //
//         verifyException("java.io.PipedWriter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      Element element0 = new Element("xp_T");
      // Undeclared exception!
//      try { 
        element0.lastElementSibling();
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.jsoup.nodes.Element", e);
//      }
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("ava.la:g.srAg@000005", "ava.la:g.srAg@000005");
      document0.parentNode = (Node) document0;
      Evaluator.Class evaluator_Class0 = new Evaluator.Class("ava.la:g.srAg@000005");
      // Undeclared exception!
      document0.is((Evaluator) evaluator_Class0);
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      Document document0 = Parser.parse("org.jsoup.select.StructuralEvaluator$Root", "org.jsoup.select.StructuralEvaluator$Root");
      // Undeclared exception!
//      try { 
        document0.is((Evaluator) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.jsoup.nodes.Element", e);
//      }
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      Parser parser0 = Parser.htmlParser();
      Document document0 = parser0.parseInput("x&9", "-7F4MCvT\tyxb");
      // Undeclared exception!
//      try { 
        document0.is("-7F4MCvT\tyxb");
//        fail("Expecting exception: IllegalStateException");
      
//      } catch(IllegalStateException e) {
//         //
//         // Could not parse query '-7F4MCvT\tyxb': unexpected token at '-7F4MCvT\tyxb'
//         //
//         verifyException("org.jsoup.select.QueryParser", e);
//      }
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      Document document0 = Document.createShell(":%s(nd2n%Jd)");
      Element element0 = document0.appendChild(document0);
      // Undeclared exception!
      element0.is("ul");
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      Document document0 = new Document("xmlns:");
      Node[] nodeArray0 = new Node[5];
      document0.childNodes = null;
      // Undeclared exception!
//      try { 
        document0.insertChildren(32768, nodeArray0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("|uNGsZ@mb0RKm%Huu", "|uNGsZ@mb0RKm%Huu");
      Node[] nodeArray0 = new Node[4];
      nodeArray0[0] = (Node) document0;
      nodeArray0[1] = (Node) document0;
      nodeArray0[2] = (Node) document0;
      nodeArray0[3] = (Node) document0;
      // Undeclared exception!
//      try { 
        document0.insertChildren((-1), nodeArray0);
//        fail("Expecting exception: IndexOutOfBoundsException");
      
//      } catch(IndexOutOfBoundsException e) {
//         //
//         // Index: 0, Size: 0
//         //
//         verifyException("java.util.ArrayList", e);
//      }
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("Ft", "Ft");
      Elements elements0 = document0.getAllElements();
      // Undeclared exception!
//      try { 
        document0.insertChildren(1, (Collection<? extends Node>) elements0);
//        fail("Expecting exception: IndexOutOfBoundsException");
      
//      } catch(IndexOutOfBoundsException e) {
//         //
//         // Index: 1, Size: 0
//         //
//         verifyException("java.util.ArrayList", e);
//      }
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      Document document0 = Document.createShell(":%s(nd2n%Jd)");
      Element element0 = document0.prepend(":%s(nd2n%Jd)");
      element0.parentNode = (Node) document0;
      // Undeclared exception!
      document0.html("org.jsoup.nodes.Element$1");
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      Document document0 = Parser.parse("W~=", "lIuNBZ;O@TRdK");
      // Undeclared exception!
//      try { 
        document0.html((String) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Object must not be null
//         //
//         verifyException("org.jsoup.helper.Validate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      Document document0 = Document.createShell("texHarPD");
      CDataNode cDataNode0 = new CDataNode("texHarPD");
      document0.parentNode = (Node) cDataNode0;
      // Undeclared exception!
//      try { 
        document0.html("texHarPD");
//        fail("Expecting exception: ClassCastException");
      
//      } catch(ClassCastException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("Children collection to be inserted must not be null.", "org.jsoup.select.StructuralEvaluator$Has");
      PipedWriter pipedWriter0 = new PipedWriter();
      // Undeclared exception!
//      try { 
        document0.html(pipedWriter0);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // java.io.IOException: Pipe not connected
//         //
//         verifyException("org.jsoup.nodes.Node$OuterHtmlVisitor", e);
//      }
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("Tag name must not be empty.", "Tag name must not be empty.");
      document0.parentNode = (Node) document0;
      // Undeclared exception!
      document0.html((PipedWriter) null);
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("Ft", "Insert position out of bounds.");
      char[] charArray0 = new char[7];
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      // Undeclared exception!
//      try { 
        document0.html(charBuffer0);
//        fail("Expecting exception: BufferOverflowException");
      
//      } catch(BufferOverflowException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.nio.Buffer", e);
//      }
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      Document document0 = Parser.parse("#root", "2=G2:lAAx");
      // Undeclared exception!
//      try { 
        document0.html((CharArrayWriter) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.jsoup.nodes.Node", e);
//      }
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      Parser parser0 = Parser.xmlParser();
      Document document0 = parser0.parseInput("Tag name must not be empty.", "J&NUuK");
      CDataNode cDataNode0 = new CDataNode("Tag name must not be empty.");
      document0.setParentNode(cDataNode0);
      MockFileWriter mockFileWriter0 = new MockFileWriter("Tag name must not be empty.");
      // Undeclared exception!
//      try { 
        document0.html((OutputStreamWriter) mockFileWriter0);
//        fail("Expecting exception: ClassCastException");
      
//      } catch(ClassCastException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      Document document0 = new Document("W|s(nY%M8)");
      Element element0 = document0.prepend("W|s(nY%M8)");
      element0.parentNode = (Node) document0;
      // Undeclared exception!
      element0.html();
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      Document document0 = Parser.parse("base", "base");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.charset((Charset) null);
      document0.outputSettings(document_OutputSettings1);
      // Undeclared exception!
//      try { 
        document0.html();
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.jsoup.nodes.Document$OutputSettings", e);
//      }
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("qui>*s", "qui>*s");
      // Undeclared exception!
//      try { 
        document0.hasClass((String) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.jsoup.nodes.Element", e);
//      }
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      Parser parser0 = Parser.htmlParser();
      Document document0 = parser0.parseInput("Did not find balanced marker at '", "body");
      // Undeclared exception!
//      try { 
        document0.getElementsMatchingText((Pattern) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.jsoup.select.Evaluator$Matches", e);
//      }
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      Document document0 = Parser.parse("Did not find balanced marker at '", "body");
      // Undeclared exception!
//      try { 
        document0.getElementsMatchingText((String) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      Document document0 = new Document("i");
      // Undeclared exception!
//      try { 
        document0.getElementsMatchingOwnText((String) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("org.jsoup.nodes.Element", "org.jsoup.nodes.Element");
      // Undeclared exception!
//      try { 
        document0.getElementsMatchingOwnText(",(6YNc-oD^{S{d");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Pattern syntax error: ,(6YNc-oD^{S{d
//         //
//         verifyException("org.jsoup.nodes.Element", e);
//      }
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      Document document0 = Parser.parse("aca.la:g.striAg@00000095", "aca.la:g.striAg@00000095");
      XmlDeclaration xmlDeclaration0 = new XmlDeclaration("yr0ig{]?7>ji/wg2>", false);
      document0.parentNode = (Node) xmlDeclaration0;
      // Undeclared exception!
//      try { 
        document0.getElementsMatchingOwnText("class");
//        fail("Expecting exception: ClassCastException");
      
//      } catch(ClassCastException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("|uNGsZ@m0RKm%Huu", "|uNGsZ@m0RKm%Huu");
      Element element0 = document0.appendElement("br");
      element0.siblingIndex = (-1145);
      // Undeclared exception!
//      try { 
        document0.getElementsMatchingOwnText("br");
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      Document document0 = Parser.parse("bV", "bV");
      Element element0 = document0.appendElement("bV");
      element0.setSiblingIndex((-1013));
      // Undeclared exception!
//      try { 
        document0.getElementsContainingText("bV");
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("org.jsoup.select.StructuralEvaluator$Root", "");
      // Undeclared exception!
//      try { 
        document0.getElementsByTag("");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // String must not be empty
//         //
//         verifyException("org.jsoup.helper.Validate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      Document document0 = Document.createShell(":%s(nd2n%Jd)");
      CDataNode cDataNode0 = new CDataNode(":%s(nd2n%Jd)");
      document0.setParentNode(cDataNode0);
      // Undeclared exception!
//      try { 
        document0.getElementsByIndexEquals((-1201));
//        fail("Expecting exception: ClassCastException");
      
//      } catch(ClassCastException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      Document document0 = Parser.parse("java.lang.string@0000000032", "java.lang.string@0000000032");
      List<Node> list0 = document0.childNodesCopy();
      document0.childNodes = list0;
      // Undeclared exception!
//      try { 
        document0.getElementsByClass("GOd9hwdkCKormnUTK");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      Tag tag0 = Tag.valueOf("Q*i~B#9}");
      FormElement formElement0 = new FormElement(tag0, "#%s", (Attributes) null);
      // Undeclared exception!
//      try { 
        formElement0.getElementsByClass((String) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // String must not be empty
//         //
//         verifyException("org.jsoup.helper.Validate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("YR0iG{]?7>jI/wg2>", "YR0iG{]?7>jI/wg2>");
      // Undeclared exception!
//      try { 
        document0.getElementsByAttributeValueStarting((String) null, (String) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // String must not be empty
//         //
//         verifyException("org.jsoup.helper.Validate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      ParseSettings parseSettings0 = ParseSettings.preserveCase;
      Tag tag0 = Tag.valueOf("Unexpected count of entities loaded", parseSettings0);
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = new FormElement(tag0, "Unexpected count of entities loaded", attributes0);
      // Undeclared exception!
//      try { 
        formElement0.getElementsByAttributeValueNot("Unexpected count of entities loaded", (String) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // String must not be empty
//         //
//         verifyException("org.jsoup.helper.Validate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      Document document0 = new Document("fi");
      // Undeclared exception!
//      try { 
        document0.getElementsByAttributeValueMatching("fi", (String) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      Document document0 = new Document("fi");
      // Undeclared exception!
//      try { 
        document0.getElementsByAttributeValueEnding("Y<OK1i!+CkYB<]GUC6", (String) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // String must not be empty
//         //
//         verifyException("org.jsoup.helper.Validate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("|uNGsZwm0RKm%Huu", "|uNGsZwm0RKm%Huu");
      document0.childNodes = null;
      // Undeclared exception!
//      try { 
        document0.getElementsByAttributeValueContaining("*@)!hJ*t^w$", "qytMOc}'#G");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      Parser parser0 = Parser.htmlParser();
      Document document0 = parser0.parseInput(",", ",");
      // Undeclared exception!
//      try { 
        document0.getElementsByAttributeValue("", ",");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // String must not be empty
//         //
//         verifyException("org.jsoup.helper.Validate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("V", "V");
      Element element0 = document0.appendElement("V");
      element0.siblingIndex = (-2944);
      // Undeclared exception!
//      try { 
        element0.getElementsByAttributeValue("V", "UTF-");
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      Element element0 = new Element("HJ+)y<");
      // Undeclared exception!
//      try { 
        element0.getElementsByAttributeStarting("");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // String must not be empty
//         //
//         verifyException("org.jsoup.helper.Validate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("4hrT1Om]3f", "");
      Element element0 = document0.body();
      element0.parentNode = (Node) document0;
      // Undeclared exception!
//      try { 
        document0.getElementById("tHare");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("xp_T", "xp_T");
      // Undeclared exception!
//      try { 
        document0.getElementById((String) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // String must not be empty
//         //
//         verifyException("org.jsoup.helper.Validate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("xp_T", "xp_T");
      // Undeclared exception!
//      try { 
        document0.firstElementSibling();
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.jsoup.nodes.Element", e);
//      }
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      ParseSettings parseSettings0 = ParseSettings.htmlDefault;
      Tag tag0 = Tag.valueOf("m%zijA", parseSettings0);
      CDataNode cDataNode0 = new CDataNode("x ]");
      Attributes attributes0 = cDataNode0.attributes();
      PseudoTextElement pseudoTextElement0 = new PseudoTextElement(tag0, "m%zijA", attributes0);
      Element element0 = pseudoTextElement0.doClone(cDataNode0);
      // Undeclared exception!
//      try { 
        element0.firstElementSibling();
//        fail("Expecting exception: ClassCastException");
      
//      } catch(ClassCastException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("--oZ.;uM'9Yc", "--oZ.;uM'9Yc");
      document0.childNodes = null;
      // Undeclared exception!
//      try { 
        document0.empty();
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.jsoup.nodes.Element", e);
//      }
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("|uNGsZwm0RKm%Huu", "|uNGsZwm0RKm%Huu");
      DataNode dataNode0 = new DataNode((String) null);
      document0.parentNode = (Node) dataNode0;
      // Undeclared exception!
//      try { 
        document0.elementSiblingIndex();
//        fail("Expecting exception: ClassCastException");
      
//      } catch(ClassCastException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      ParseSettings parseSettings0 = ParseSettings.preserveCase;
      Tag tag0 = Tag.valueOf("4.4<)j>P{", parseSettings0);
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = new FormElement(tag0, "4.4<)j>P{", attributes0);
      PseudoTextElement pseudoTextElement0 = new PseudoTextElement(tag0, "4.4<)j>P{", attributes0);
      formElement0.appendTo(pseudoTextElement0);
      // Undeclared exception!
//      try { 
        formElement0.cssSelector();
//        fail("Expecting exception: IllegalStateException");
      
//      } catch(IllegalStateException e) {
//         //
//         // Could not parse query '4.4<)j': unexpected token at '<)j'
//         //
//         verifyException("org.jsoup.select.QueryParser", e);
//      }
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("publicId", "publicId");
      CDataNode cDataNode0 = new CDataNode("B/i<BGSR(#JLA");
      document0.parentNode = (Node) cDataNode0;
      // Undeclared exception!
//      try { 
        document0.cssSelector();
//        fail("Expecting exception: ClassCastException");
      
//      } catch(ClassCastException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      Document document0 = Parser.parse("Did not find balanced marker at '", "body");
      Element element0 = document0.head();
      element0.setSiblingIndex((-221));
      // Undeclared exception!
//      try { 
        element0.cssSelector();
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      Document document0 = Parser.parse("xp_T", "5B_K]AB-rSo~Xj'99");
      // Undeclared exception!
//      try { 
        document0.classNames((Set<String>) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Object must not be null
//         //
//         verifyException("org.jsoup.helper.Validate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      Document document0 = new Document("fi");
      // Undeclared exception!
//      try { 
        document0.child((-2400));
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      Document document0 = new Document("org.jsoup.nodes.Attributes");
      document0.parentNode = (Node) document0;
      // Undeclared exception!
//      try { 
        document0.before((Node) document0);
//        fail("Expecting exception: IndexOutOfBoundsException");
      
//      } catch(IndexOutOfBoundsException e) {
//         //
//         // Index: 0, Size: 0
//         //
//         verifyException("java.util.ArrayList", e);
//      }
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("embed", "embed");
      document0.appendTo(document0);
      // Undeclared exception!
      document0.before("*',");
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("h3", "UFB?");
      DocumentType documentType0 = new DocumentType("h3", "UFB?", "GR0F0!\"f", "h3", "Yi+k");
      document0.setParentNode(documentType0);
      // Undeclared exception!
//      try { 
        document0.before("textarea");
//        fail("Expecting exception: ClassCastException");
      
//      } catch(ClassCastException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("k2?44'}kg5", "U~U");
      // Undeclared exception!
//      try { 
        document0.attr((String) null, false);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Object must not be null
//         //
//         verifyException("org.jsoup.helper.Validate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      Document document0 = Document.createShell(":%s(nd2n%+d)");
      Element element0 = document0.prepend(":%s(nd2n%+d)");
      element0.parentNode = (Node) document0;
      // Undeclared exception!
      document0.attr((String) null, ":%s(nd2n%+d)");
  }

  @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("G^6?RJzM2apQ^|", "G^6?RJzM2apQ^|");
      // Undeclared exception!
//      try { 
        document0.attr((String) null, "E<\"B`c]1B");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.jsoup.parser.ParseSettings", e);
//      }
  }

  @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("embed", "embed");
      Tag tag0 = Tag.valueOf("embed");
      CDataNode cDataNode0 = new CDataNode("]");
      Attributes attributes0 = cDataNode0.attributes();
      PseudoTextElement pseudoTextElement0 = new PseudoTextElement(tag0, "?4cU_Oi31>.", attributes0);
      Element element0 = document0.doClone(pseudoTextElement0);
      // Undeclared exception!
//      try { 
        element0.appendTo(document0);
//        fail("Expecting exception: IndexOutOfBoundsException");
      
//      } catch(IndexOutOfBoundsException e) {
//         //
//         // Index: 0, Size: 0
//         //
//         verifyException("java.util.ArrayList", e);
//      }
  }

  @Test(timeout = 4000)
  public void test223()  throws Throwable  {
      Tag tag0 = Tag.valueOf("x&9");
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = new FormElement(tag0, "#root", attributes0);
      // Undeclared exception!
//      try { 
        formElement0.appendTo((Element) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Object must not be null
//         //
//         verifyException("org.jsoup.helper.Validate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test224()  throws Throwable  {
      Document document0 = new Document("2@rtoj'<!%aoc");
      // Undeclared exception!
//      try { 
        document0.appendText((String) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Object must not be null
//         //
//         verifyException("org.jsoup.helper.Validate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test225()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment(":%s(nd2n%+d)", ":%s(nd2n%+d)");
      Element element0 = document0.prepend(":%s(nd2n%+d)");
      element0.parentNode = (Node) document0;
      // Undeclared exception!
      element0.appendElement("org.jsoup.select.StructuralEvaluator$Root");
  }

  @Test(timeout = 4000)
  public void test226()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("Ft", "Ft");
      ParseErrorList parseErrorList0 = ParseErrorList.tracking((-1847));
      List<Node> list0 = Parser.parseFragment("disabled", (Element) document0, "disabled", parseErrorList0);
      document0.childNodes = list0;
      // Undeclared exception!
//      try { 
        document0.appendElement("Ft");
//        fail("Expecting exception: UnsupportedOperationException");
      
//      } catch(UnsupportedOperationException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.util.Collections$UnmodifiableCollection", e);
//      }
  }

  @Test(timeout = 4000)
  public void test227()  throws Throwable  {
      Document document0 = Document.createShell("UI%<9#");
      Parser parser0 = Parser.xmlParser();
      Parser parser1 = parser0.settings((ParseSettings) null);
      Document document1 = document0.parser(parser1);
      // Undeclared exception!
//      try { 
        document1.appendElement("n{z~RU|_t~w/V59[;q6");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.jsoup.parser.Tag", e);
//      }
  }

  @Test(timeout = 4000)
  public void test228()  throws Throwable  {
      Document document0 = Parser.parse("Did not find balanced marker at '", "body");
      // Undeclared exception!
//      try { 
        document0.appendElement("");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // String must not be empty
//         //
//         verifyException("org.jsoup.helper.Validate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test229()  throws Throwable  {
      Element element0 = new Element("EbfIO@h}|.^A@&");
      Tag tag0 = Tag.valueOf("!$/U.u30");
      Attributes attributes0 = new Attributes();
      PseudoTextElement pseudoTextElement0 = new PseudoTextElement(tag0, "col", attributes0);
      pseudoTextElement0.reparentChild(pseudoTextElement0);
      // Undeclared exception!
//      try { 
        element0.appendChild(pseudoTextElement0);
//        fail("Expecting exception: IndexOutOfBoundsException");
      
//      } catch(IndexOutOfBoundsException e) {
//         //
//         // Index: 0, Size: 0
//         //
//         verifyException("java.util.ArrayList", e);
//      }
  }

  @Test(timeout = 4000)
  public void test230()  throws Throwable  {
      Tag tag0 = Tag.valueOf("`3tCstz+d<`l)%8|c9");
      Element element0 = new Element(tag0, "`3tCstz+d<`l)%8|c9");
      // Undeclared exception!
//      try { 
        element0.appendChild((Node) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Object must not be null
//         //
//         verifyException("org.jsoup.helper.Validate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test231()  throws Throwable  {
      Document document0 = new Document("%s(nn%Jc)");
      Element element0 = document0.prepend("%s(nn%Jc)");
      element0.parentNode = (Node) document0;
      // Undeclared exception!
      element0.append("Tag name must not be empty.");
  }

  @Test(timeout = 4000)
  public void test232()  throws Throwable  {
      Document document0 = Document.createShell("y}4b&8zk Td7NVi7q>g");
      Element element0 = document0.removeClass("y}4b&8zk Td7NVi7q>g");
      Parser parser0 = Parser.xmlParser();
      List<Node> list0 = parser0.parseFragmentInput("y}4b&8zk Td7NVi7q>g", document0, "y");
      element0.childNodes = list0;
      // Undeclared exception!
//      try { 
        element0.append("YR0iG{]?7>jI/wg2>");
//        fail("Expecting exception: UnsupportedOperationException");
      
//      } catch(UnsupportedOperationException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.util.Collections$UnmodifiableCollection", e);
//      }
  }

  @Test(timeout = 4000)
  public void test233()  throws Throwable  {
      Tag tag0 = Tag.valueOf("4.4<)j>P{");
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = new FormElement(tag0, "4.4<)j>P{", attributes0);
      PseudoTextElement pseudoTextElement0 = new PseudoTextElement(tag0, "4.4<)j>P{", attributes0);
      pseudoTextElement0.reparentChild(formElement0);
      // Undeclared exception!
//      try { 
        formElement0.after((Node) pseudoTextElement0);
//        fail("Expecting exception: IndexOutOfBoundsException");
      
//      } catch(IndexOutOfBoundsException e) {
//         //
//         // Index: 1, Size: 0
//         //
//         verifyException("java.util.ArrayList", e);
//      }
  }

  @Test(timeout = 4000)
  public void test234()  throws Throwable  {
      Document document0 = new Document("%s(nn%Jc)");
      Element element0 = document0.prepend("%s(nn%Jc)");
      element0.parentNode = (Node) document0;
      // Undeclared exception!
      document0.after("%s(nn%Jc)");
  }

  @Test(timeout = 4000)
  public void test235()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("br", "br");
      Element element0 = document0.appendElement("br");
      element0.setSiblingIndex(4);
      // Undeclared exception!
//      try { 
        element0.after("br");
//        fail("Expecting exception: IndexOutOfBoundsException");
      
//      } catch(IndexOutOfBoundsException e) {
//         //
//         // Index: 5, Size: 2
//         //
//         verifyException("java.util.ArrayList", e);
//      }
  }

  @Test(timeout = 4000)
  public void test236()  throws Throwable  {
      Document document0 = new Document("body");
      // Undeclared exception!
//      try { 
        document0.addClass((String) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Object must not be null
//         //
//         verifyException("org.jsoup.helper.Validate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test237()  throws Throwable  {
      CDataNode cDataNode0 = new CDataNode("#]UJr");
      Attributes attributes0 = cDataNode0.attributes();
      Element element0 = null;
//      try {
        element0 = new Element((Tag) null, "i#*]`", attributes0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Object must not be null
//         //
//         verifyException("org.jsoup.helper.Validate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test238()  throws Throwable  {
      Element element0 = null;
//      try {
        element0 = new Element((Tag) null, "/1gb;?");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Object must not be null
//         //
//         verifyException("org.jsoup.helper.Validate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test239()  throws Throwable  {
      Element element0 = null;
//      try {
        element0 = new Element("");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // String must not be empty
//         //
//         verifyException("org.jsoup.helper.Validate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test240()  throws Throwable  {
      Document document0 = Parser.parse("W~=", "lIuBZ;O@TRdK");
      PipedReader pipedReader0 = new PipedReader();
      PipedWriter pipedWriter0 = new PipedWriter(pipedReader0);
      document0.html(pipedWriter0);
  }

  @Test(timeout = 4000)
  public void test241()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("YR0iG{]?7>jI/wg2>", "|");
      Element element0 = document0.toggleClass("|");
      element0.hasClass("body");
  }

  @Test(timeout = 4000)
  public void test242()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("", ",");
      Locale locale0 = Locale.US;
      Set<String> set0 = locale0.getUnicodeLocaleKeys();
      document0.classNames(set0);
  }

  @Test(timeout = 4000)
  public void test243()  throws Throwable  {
      Parser parser0 = Parser.xmlParser();
      Document document0 = parser0.parseInput("d.*y0lDkY} tT(6pa", "org.jsoup.nodes.LeafNode");
      document0.data();
  }

  @Test(timeout = 4000)
  public void test244()  throws Throwable  {
      Document document0 = Document.createShell("");
      Element element0 = document0.appendText("");
      element0.hasText();
  }

  @Test(timeout = 4000)
  public void test245()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment(":d~Q\"27_\"qKoOU7", ":d~Q\"27_\"qKoOU7");
      document0.elementSiblingIndex();
  }

  @Test(timeout = 4000)
  public void test246()  throws Throwable  {
      Document document0 = Parser.parse("PUBLIC", "PUBLIC");
      Element element0 = new Element("PUBLIC");
      document0.appendTo(element0);
      document0.previousElementSibling();
  }

  @Test(timeout = 4000)
  public void test247()  throws Throwable  {
      Document document0 = Document.createShell("java.lang.string@0000000095");
      Element element0 = document0.head();
      element0.nextElementSibling();
  }

  @Test(timeout = 4000)
  public void test248()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("qui>*s", "qui>*s");
      Element element0 = document0.body();
      element0.nextElementSibling();
  }

  @Test(timeout = 4000)
  public void test249()  throws Throwable  {
      Document document0 = Parser.parse("PUBLIC", "PUBLIC");
      document0.appendTo(document0);
      document0.cssSelector();
  }

  @Test(timeout = 4000)
  public void test250()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("YR0iG{]?7>jI/wg2>", "YR0iG{]?7>jI/wg2>");
      document0.clearAttributes();
  }

  @Test(timeout = 4000)
  public void test251()  throws Throwable  {
      Document document0 = new Document("disabled");
      document0.hasClass("disabled");
      document0.attributes();
  }

  @Test(timeout = 4000)
  public void test252()  throws Throwable  {
      Document document0 = Document.createShell("java.lang.string@0000000095");
      document0.children();
  }

  @Test(timeout = 4000)
  public void test253()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("h*yeh~T$u", "h*yeh~T$u");
      document0.className();
  }

  @Test(timeout = 4000)
  public void test254()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("$:@xl^xY66&w", "$:@xl^xY66&w");
      // Undeclared exception!
//      try { 
        document0.getElementsMatchingOwnText((Pattern) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.jsoup.select.Evaluator$MatchesOwn", e);
//      }
  }

  @Test(timeout = 4000)
  public void test255()  throws Throwable  {
      Parser parser0 = Parser.htmlParser();
      Document document0 = parser0.parseInput("x&9", "-7FiMCvTyxb");
      document0.ownText();
  }

  @Test(timeout = 4000)
  public void test256()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("PAxMCfXk", "PAxMCfXk");
      document0.isBlock();
  }

  @Test(timeout = 4000)
  public void test257()  throws Throwable  {
      Parser parser0 = Parser.htmlParser();
      Document document0 = parser0.parseInput(",", "");
      Evaluator.MatchText evaluator_MatchText0 = new Evaluator.MatchText();
      document0.is((Evaluator) evaluator_MatchText0);
  }

  @Test(timeout = 4000)
  public void test258()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("org.jsoup.nodes.Element", "xp_T");
      Pattern pattern0 = Pattern.compile("xp_T");
      document0.getElementsByAttributeValueMatching("xp_T", pattern0);
  }

  @Test(timeout = 4000)
  public void test259()  throws Throwable  {
      Document document0 = Document.createShell(";UStpiA~");
      // Undeclared exception!
//      try { 
        document0.append((String) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Object must not be null
//         //
//         verifyException("org.jsoup.helper.Validate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test260()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("Children collection to be inserted must not be null.", "org.jsoup.select.StructuralEvaluator$Has");
      // Undeclared exception!
//      try { 
        document0.select("");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // String must not be empty
//         //
//         verifyException("org.jsoup.helper.Validate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test261()  throws Throwable  {
      Document document0 = Document.createShell("textarea");
      document0.id();
  }

  @Test(timeout = 4000)
  public void test262()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("head", "head");
      document0.cssSelector();
      document0.doClone(document0);
  }

  @Test(timeout = 4000)
  public void test263()  throws Throwable  {
      Document document0 = Document.createShell("9d&e4a_kw{qv8.v|k2");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      document_OutputSettings0.prettyPrint(false);
      Document document1 = document0.outputSettings(document_OutputSettings0);
      document1.toString();
  }

  @Test(timeout = 4000)
  public void test264()  throws Throwable  {
      Parser parser0 = Parser.htmlParser();
      Document document0 = parser0.parseInput("x&9", "x&9");
      StringBuilder stringBuilder0 = new StringBuilder(1);
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.prettyPrint(false);
      document0.outerHtmlTail(stringBuilder0, (-1049), document_OutputSettings1);
  }

  @Test(timeout = 4000)
  public void test265()  throws Throwable  {
      Document document0 = Document.createShell(":%s(nd2n%+d)");
      document0.html();
  }

  @Test(timeout = 4000)
  public void test266()  throws Throwable  {
      Tag tag0 = Tag.valueOf("br");
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = new FormElement(tag0, "br", attributes0);
      formElement0.prependElement("br");
      formElement0.outerHtml();
  }

  @Test(timeout = 4000)
  public void test267()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("Tag name must no be empty.", "Tag name must no be empty.");
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) "Tag name must no be empty.");
      // Undeclared exception!
//      try { 
        document0.html(charBuffer0);
//        fail("Expecting exception: ReadOnlyBufferException");
      
//      } catch(ReadOnlyBufferException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.nio.StringCharBuffer", e);
//      }
  }

  @Test(timeout = 4000)
  public void test268()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("Ft", "Ft");
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(2);
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.prettyPrint(false);
      document0.outerHtmlHead(charArrayWriter0, 2, document_OutputSettings1);
  }

  @Test(timeout = 4000)
  public void test269()  throws Throwable  {
      Tag tag0 = Tag.valueOf("textarea");
      FormElement formElement0 = new FormElement(tag0, "|", (Attributes) null);
      // Undeclared exception!
//      try { 
        formElement0.val((String) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Object must not be null
//         //
//         verifyException("org.jsoup.helper.Validate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test270()  throws Throwable  {
      ParseSettings parseSettings0 = ParseSettings.preserveCase;
      Tag tag0 = Tag.valueOf("textarea", parseSettings0);
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = new FormElement(tag0, ",", attributes0);
      formElement0.val();
  }

  @Test(timeout = 4000)
  public void test271()  throws Throwable  {
      Document document0 = Parser.parse("org.jsoup.select.StructuralEvaluator$Root", "org.jsoup.select.StructuralEvaluator$Root");
      document0.toggleClass("org.jsoup.select.StructuralEvaluator$Root");
      document0.addClass("org.jsoup.select.StructuralEvaluator$Root");
      document0.hasClass("org.jsoup.select.StructuralEvaluator$Root");
  }

  @Test(timeout = 4000)
  public void test272()  throws Throwable  {
      Document document0 = Parser.parse("Ag_+q", ":nth-child(%d)");
      Element element0 = document0.toggleClass("org.jsoup.select.Evaluator$AttributeWithValue");
      document0.addClass(" ");
      element0.hasClass("}z<J/sc7,r8O");
  }

  @Test(timeout = 4000)
  public void test273()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("cd~n~g27[\"kKoOU7", "cd~n~g27[\"kKoOU7");
      Charset charset0 = Charset.defaultCharset();
      Set<String> set0 = charset0.aliases();
      Element element0 = document0.classNames(set0);
      element0.hasClass("ascii");
  }

  @Test(timeout = 4000)
  public void test274()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("YR0iG{]?7>jI/wg2>", "|");
      Element element0 = document0.toggleClass("|");
      element0.getElementsByClass("YR0iG{]?7>jI/wg2>");
  }

  @Test(timeout = 4000)
  public void test275()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment(":@x^%Y6C&+", ":@x^%Y6C&+");
      Element element0 = document0.addClass("8OTSE6^>0");
      element0.hasClass("kag name must not be empty.");
  }

  @Test(timeout = 4000)
  public void test276()  throws Throwable  {
      Document document0 = Parser.parse("AeT{HdY)/`pvfS9X", "AeT{HdY)/`pvfS9X");
      Element element0 = document0.addClass("AeT{HdY)/`pvfS9X");
      element0.hasClass("org.jsoup.select.StructuralEvaluator$Root");
  }

  @Test(timeout = 4000)
  public void test277()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("<![CDATA[", "<![CDATA[");
      document0.data();
  }

  @Test(timeout = 4000)
  public void test278()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("BUD`SV<V7S)4Nv_k/A", "BUD`SV<V7S)4Nv_k/A");
      Comment comment0 = new Comment((String) null, (String) null);
      document0.prependChild(comment0);
      document0.data();
  }

  @Test(timeout = 4000)
  public void test279()  throws Throwable  {
      ParseSettings parseSettings0 = ParseSettings.htmlDefault;
      Tag tag0 = Tag.valueOf("texHareD", parseSettings0);
      FormElement formElement0 = new FormElement(tag0, "texHareD", (Attributes) null);
      DataNode dataNode0 = DataNode.createFromEncoded("texHareD", "l40I?");
      formElement0.appendChild(dataNode0);
      formElement0.data();
  }

  @Test(timeout = 4000)
  public void test280()  throws Throwable  {
      Parser parser0 = Parser.htmlParser();
      Document document0 = parser0.parseInput("x&9", "-7FiMCvTyxb");
      document0.hasText();
  }

  @Test(timeout = 4000)
  public void test281()  throws Throwable  {
      Document document0 = Document.createShell("zQYSp");
      XmlDeclaration xmlDeclaration0 = new XmlDeclaration("wvtHoCu%L_4ArUd#U", true);
      document0.prependChild(xmlDeclaration0);
      document0.hasText();
  }

  @Test(timeout = 4000)
  public void test282()  throws Throwable  {
      Parser parser0 = Parser.xmlParser();
      Document document0 = parser0.parseInput("x&9", "html");
      document0.hasText();
  }

  @Test(timeout = 4000)
  public void test283()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("Tag name must not be empty.", "Tag name must not be empty.");
      document0.parentNode = (Node) document0;
      document0.getElementsMatchingOwnText("Tag name must not be empty.");
  }

  @Test(timeout = 4000)
  public void test284()  throws Throwable  {
      CDataNode cDataNode0 = new CDataNode("xp_T");
      Element.preserveWhitespace(cDataNode0);
  }

  @Test(timeout = 4000)
  public void test285()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("br", "br");
      document0.prependElement("br");
      document0.appendElement("br");
      document0.getElementsMatchingOwnText("br");
  }

  @Test(timeout = 4000)
  public void test286()  throws Throwable  {
      Document document0 = Document.createShell("org.jsoup.select.Evaluator$IsFirstChild");
      LinkedList<CDataNode> linkedList0 = new LinkedList<CDataNode>();
      CDataNode cDataNode0 = new CDataNode("org.jsoup.select.Evaluator$IsFirstChild");
      linkedList0.push(cDataNode0);
      document0.insertChildren(0, (Collection<? extends Node>) linkedList0);
      document0.text();
  }

  @Test(timeout = 4000)
  public void test287()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("xp_T", "xp_T");
      document0.title(":J%:");
      document0.getElementsMatchingOwnText("EFg1suL~hqHWy");
  }

  @Test(timeout = 4000)
  public void test288()  throws Throwable  {
      Tag tag0 = Tag.valueOf("H!Xi8 '8Mqo");
      Element element0 = new Element(tag0, "H!Xi8 '8Mqo");
      DocumentType documentType0 = new DocumentType("H!Xi8 '8Mqo", "J|0V`!leBVMFg<4", "H!Xi8 '8Mqo", "H!Xi8 '8Mqo");
      Element element1 = element0.appendChild(documentType0);
      element1.getElementsContainingOwnText(":%s(nd2n%jd)");
  }

  @Test(timeout = 4000)
  public void test289()  throws Throwable  {
      Document document0 = Document.createShell("");
      document0.appendText("");
      document0.prepend("=X4y");
      Pattern pattern0 = Pattern.compile("y17{i#,`L9BY{n~$HT", (-1327));
      document0.getElementsMatchingText(pattern0);
  }

  @Test(timeout = 4000)
  public void test290()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment(":@x^%Y6C&+", ":@x^%Y6C&+");
      document0.appendElement("br");
      document0.text();
  }

  @Test(timeout = 4000)
  public void test291()  throws Throwable  {
      Document document0 = Parser.parse("bV", "bV");
      document0.appendElement("bV");
      document0.getElementsContainingText("bV");
  }

  @Test(timeout = 4000)
  public void test292()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("</^}rogj';*sbT=", "</^}rogj';*sbT=");
      document0.text();
  }

  @Test(timeout = 4000)
  public void test293()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("|uNGsZ@m0RKm%Huu", "|uNGsZ@m0RKm%Huu");
      document0.getElementById("iNGq]yST7)Ald7W");
  }

  @Test(timeout = 4000)
  public void test294()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("ava.la:g.striAg@00000095", "ava.la:g.striAg@00000095");
      document0.parentNode = (Node) document0;
      document0.previousElementSiblings();
  }

  @Test(timeout = 4000)
  public void test295()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("5Jo0%#!e>-$'MHM;", "");
      Element element0 = document0.body();
      element0.lastElementSibling();
  }

  @Test(timeout = 4000)
  public void test296()  throws Throwable  {
      ParseSettings parseSettings0 = ParseSettings.preserveCase;
      Tag tag0 = Tag.valueOf("4.4<)j>P{", parseSettings0);
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = new FormElement(tag0, "4.4<)j>P{", attributes0);
      PseudoTextElement pseudoTextElement0 = new PseudoTextElement(tag0, "4.4<)j>P{", attributes0);
      Element element0 = formElement0.appendTo(pseudoTextElement0);
      element0.lastElementSibling();
  }

  @Test(timeout = 4000)
  public void test297()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment(":@x^%Y6C&+", ":@x^%Y6C&+");
      Element element0 = document0.appendElement("br");
      element0.firstElementSibling();
  }

  @Test(timeout = 4000)
  public void test298()  throws Throwable  {
      ParseSettings parseSettings0 = ParseSettings.preserveCase;
      Tag tag0 = Tag.valueOf("x&9", parseSettings0);
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = new FormElement(tag0, "org.jsoup.nodes.FormElement", attributes0);
      PseudoTextElement pseudoTextElement0 = new PseudoTextElement(tag0, "Did not find balanced marker at '", attributes0);
      Element element0 = formElement0.appendTo(pseudoTextElement0);
      element0.firstElementSibling();
  }

  @Test(timeout = 4000)
  public void test299()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("BUD`SV<V7S)4Nv_k/A", "BUD`SV<V7S)4Nv_k/A");
      document0.previousElementSibling();
  }

  @Test(timeout = 4000)
  public void test300()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("qui>*s", "qui>*s");
      Element element0 = document0.body();
      element0.before((Node) document0);
      document0.nextElementSiblings();
      assertTrue(document0.hasParent());
  }

  @Test(timeout = 4000)
  public void test301()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("java.lang.string@0000000095", "java.lang.string@0000000095");
      document0.nextElementSibling();
      assertEquals(1, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test302()  throws Throwable  {
      Tag tag0 = Tag.valueOf("Q*i~B#9}");
      FormElement formElement0 = new FormElement(tag0, "#%s", (Attributes) null);
      Document document0 = new Document("KCFc~=dDi  ");
      Element element0 = formElement0.appendTo(document0);
      element0.siblingElements();
      assertEquals(1, document0.childNodeSize());
      assertEquals(0, formElement0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test303()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("xp_T", "xp_T");
      document0.siblingElements();
      assertEquals("xp_T", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test304()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("ava.la:g.striAg@00000095", "ava.la:g.striAg@00000095");
      document0.parentNode = (Node) document0;
      Elements elements0 = document0.siblingElements();
      assertEquals(1, elements0.size());
  }

  @Test(timeout = 4000)
  public void test305()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("org.jsoup.nodes.Element$1", "org.jsoup.nodes.Element$1");
      Element element0 = document0.body();
      element0.wrap("Tag name must not be empty.");
      element0.cssSelector();
      assertEquals(0, element0.siblingIndex());
  }

  @Test(timeout = 4000)
  public void test306()  throws Throwable  {
      Document document0 = Document.createShell("br");
      document0.addClass("rd~:R0IpCu^}");
      document0.cssSelector();
      assertEquals(1, document0.childNodeSize());
      assertEquals("br", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test307()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment(";4&orotR$)&J`Q", "h]");
      Node[] nodeArray0 = new Node[2];
      // Undeclared exception!
//      try { 
        document0.insertChildren(60, nodeArray0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Insert position out of bounds.
//         //
//         verifyException("org.jsoup.helper.Validate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test308()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("xp_T", "xp_T");
      Node[] nodeArray0 = new Node[1];
      // Undeclared exception!
//      try { 
        document0.insertChildren((-1110026255), nodeArray0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Insert position out of bounds.
//         //
//         verifyException("org.jsoup.helper.Validate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test309()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("", ",");
      Elements elements0 = document0.nextElementSiblings();
      // Undeclared exception!
//      try { 
        document0.insertChildren(2553, (Collection<? extends Node>) elements0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Insert position out of bounds.
//         //
//         verifyException("org.jsoup.helper.Validate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test310()  throws Throwable  {
      Document document0 = Parser.parse("Did not find balanced marker at '", "body");
      LinkedHashSet<Comment> linkedHashSet0 = new LinkedHashSet<Comment>(14, 14);
      // Undeclared exception!
//      try { 
        document0.insertChildren((-659), (Collection<? extends Node>) linkedHashSet0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Insert position out of bounds.
//         //
//         verifyException("org.jsoup.helper.Validate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test311()  throws Throwable  {
      Document document0 = Parser.parse("++p", "++p");
      DataNode dataNode0 = DataNode.createFromEncoded(" />", " />");
      document0.appendChild(dataNode0);
      List<DataNode> list0 = document0.dataNodes();
      assertTrue(list0.contains(dataNode0));
      assertEquals(1, list0.size());
      assertEquals("++p", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test312()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("?4cU_Oi31>.", "?4cU_Oi31>.");
      Element element0 = document0.body();
      List<TextNode> list0 = element0.textNodes();
      assertEquals(1, list0.size());
      assertEquals("?4cU_Oi31>.", element0.baseUri());
  }

  @Test(timeout = 4000)
  public void test313()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("?4cU_Oi31>.", "?4cU_Oi31>.");
      List<TextNode> list0 = document0.textNodes();
      assertEquals("?4cU_Oi31>.", document0.baseUri());
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test314()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("org.jsoup.nodes.Element", "org.jsoup.nodes.Element");
      Elements elements0 = document0.getElementsByIndexGreaterThan((-461));
      assertEquals("org.jsoup.nodes.Element", document0.baseUri());
      assertEquals(4, elements0.size());
  }

  @Test(timeout = 4000)
  public void test315()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("br", "br");
      document0.selectFirst("br");
      assertEquals("br", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test316()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("", "49ZAA[u+m0V");
      document0.getElementsByTag("org.jsoup.nodes.Element$2");
      assertEquals(1, document0.childNodeSize());
      assertEquals("49ZAA[u+m0V", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test317()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("|uNGsZ@m0RKm%Huu", "|uNGsZ@m0RKm%Huu");
      // Undeclared exception!
//      try { 
        document0.before("*B|\"+{|>A&");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Object must not be null
//         //
//         verifyException("org.jsoup.helper.Validate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test318()  throws Throwable  {
      Document document0 = Parser.parse("", "");
      // Undeclared exception!
//      try { 
        document0.getElementsByAttribute("");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // String must not be empty
//         //
//         verifyException("org.jsoup.helper.Validate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test319()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("<teIL-D>+?$lD9i", "<teIL-D>+?$lD9i");
      document0.getElementsByAttributeValueNot("<teIL-D>+?$lD9i", "Children collection to be inserted must not be null.");
      assertEquals("<teIL-D>+?$lD9i", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test320()  throws Throwable  {
      Document document0 = Parser.parse("PUBLIC", "PUBLIC");
      document0.appendTo(document0);
      Element element0 = document0.previousElementSibling();
      assertEquals("PUBLIC", element0.baseUri());
      assertNotNull(element0);
  }

  @Test(timeout = 4000)
  public void test321()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("YR0iG{]?7>jI/wg2>", "|");
      Element element0 = document0.shallowClone();
      Element element1 = element0.addClass("s+");
      assertEquals(1, document0.childNodeSize());
      assertEquals("|", element1.baseUri());
  }

  @Test(timeout = 4000)
  public void test322()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("|uNGsZ@m0RKm%Huu", "|uNGsZ@m0RKm%Huu");
      // Undeclared exception!
//      try { 
        document0.after((Node) document0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Object must not be null
//         //
//         verifyException("org.jsoup.helper.Validate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test323()  throws Throwable  {
      Document document0 = Parser.parse("", "|rSTy}|");
      // Undeclared exception!
//      try { 
        document0.getElementsByAttributeValueContaining("%>Q~{Ym3G)1", "");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // String must not be empty
//         //
//         verifyException("org.jsoup.helper.Validate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test324()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment(":d~Q\"27_\"qKoOU7", ":d~Q\"27_\"qKoOU7");
      document0.getElementsByAttributeValueEnding(":d~Q\"27_\"qKoOU7", "=ip_eMy<?");
      assertEquals(":d~Q\"27_\"qKoOU7", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test325()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("quirkthss", "quirkthss");
      document0.is("nth-child");
      assertEquals("quirkthss", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test326()  throws Throwable  {
      Parser parser0 = Parser.htmlParser();
      Document document0 = parser0.parseInput(",", "");
      Element element0 = document0.attr("", "M>J):v!U6;<x7k&:");
      Elements elements0 = element0.getElementsByAttributeValueMatching("", "");
      assertEquals(1, elements0.size());
  }

  @Test(timeout = 4000)
  public void test327()  throws Throwable  {
      Document document0 = Document.createShell(":%s(nd2n%+d)");
      Elements elements0 = document0.getElementsByIndexEquals((-18));
      assertEquals(1, document0.childNodeSize());
      assertEquals(0, elements0.size());
      assertEquals(":%s(nd2n%+d)", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test328()  throws Throwable  {
      Document document0 = new Document("fi");
      document0.getElementsByAttributeStarting("br");
      assertEquals("fi", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test329()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("org.jsoup.select.Evaluator$Attribute", "org.jsoup.select.Evaluator$Attribute");
      Elements elements0 = document0.getElementsByIndexLessThan((-4062));
      assertEquals("org.jsoup.select.Evaluator$Attribute", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals(0, elements0.size());
  }

  @Test(timeout = 4000)
  public void test330()  throws Throwable  {
      Document document0 = new Document("%s(nn%Jc)");
      // Undeclared exception!
//      try { 
        document0.after("%s(nn%Jc)");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Object must not be null
//         //
//         verifyException("org.jsoup.helper.Validate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test331()  throws Throwable  {
      Document document0 = Document.createShell("BZ/#lt!K5:|Q");
      Element element0 = document0.prepend("BZ/#lt!K5:|Q");
      Element element1 = element0.child(0);
      assertEquals(2, document0.childNodeSize());
      assertEquals(1, element1.siblingIndex());
  }

  @Test(timeout = 4000)
  public void test332()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("org.jsoup.select.StructuralEvaluator$Root", "org.jsoup.select.StructuralEvaluator$Root");
      Element element0 = document0.body();
      assertNotNull(element0);
      
      String string0 = element0.cssSelector();
      assertEquals("org.jsoup.select.StructuralEvaluator$Root", element0.baseUri());
      assertEquals(1, element0.siblingIndex());
      assertEquals("html > body", string0);
  }

  @Test(timeout = 4000)
  public void test333()  throws Throwable  {
      Document document0 = Parser.parse("AeT{HdY)/`pvfS9X", "AeT{HdY)/`pvfS9X");
      document0.getElementsByAttributeValueStarting("Tag cannot be self closing; not a void tag", "org.jsoup.select.StructuralEvaluator$Root");
      assertEquals("AeT{HdY)/`pvfS9X", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test334()  throws Throwable  {
      Document document0 = Parser.parse("xp_T", "5B_K]AB-rSo~Xj'99");
      document0.getElementsByAttributeValue("xp_T", "#root");
      assertEquals(1, document0.childNodeSize());
      assertEquals("5B_K]AB-rSo~Xj'99", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test335()  throws Throwable  {
      Parser parser0 = Parser.htmlParser();
      Document document0 = parser0.parseInput("audio", "audio");
      String string0 = document0.wholeText();
      assertEquals("audio", string0);
      assertEquals("audio", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test336()  throws Throwable  {
      Document document0 = new Document("org.jsoup.nodes.Attributes");
      // Undeclared exception!
//      try { 
        document0.before((Node) document0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Object must not be null
//         //
//         verifyException("org.jsoup.helper.Validate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test337()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("xp_T", "xp_T");
      Elements elements0 = document0.getElementsContainingOwnText("xp_T");
      assertEquals("xp_T", document0.baseUri());
      assertEquals(1, elements0.size());
  }

  @Test(timeout = 4000)
  public void test338()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("br", "br");
      document0.dataset();
      assertEquals(1, document0.childNodeSize());
      assertEquals("br", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test339()  throws Throwable  {
      Parser parser0 = Parser.htmlParser();
      Document document0 = parser0.parseInput("audio", "audio");
      Element element0 = document0.tagName("audio");
      assertEquals("audio", element0.baseUri());
      assertEquals(1, element0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test340()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("org.jsoup.nodes.Element", "org.jsoup.nodes.Element");
      document0.prependText("@Qb:@");
      assertEquals(2, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test341()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("xp_T", "xp_T");
      // Undeclared exception!
//      try { 
        document0.child(1153);
//        fail("Expecting exception: IndexOutOfBoundsException");
      
//      } catch(IndexOutOfBoundsException e) {
//         //
//         // Index: 1153, Size: 1
//         //
//         verifyException("java.util.ArrayList", e);
//      }
  }

  @Test(timeout = 4000)
  public void test342()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("org.jsoup.nodes.Element$1", "org.jsoup.nodes.Element$1");
      // Undeclared exception!
//      try { 
        document0.wrap("Tag name must not be empty.");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.jsoup.nodes.Node", e);
//      }
  }
}
