/*
 * This file was automatically generated by EvoSuite
 * Fri Oct 22 21:04:36 GMT 2021
 */

package org.jsoup.nodes;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.ByteArrayOutputStream;
import java.io.CharArrayWriter;
import java.io.IOException;
import java.io.PipedWriter;
import java.nio.BufferOverflowException;
import java.nio.ByteBuffer;
import java.nio.CharBuffer;
import java.nio.charset.Charset;
import java.util.Collection;
import java.util.LinkedHashSet;
import java.util.List;
import java.util.Locale;
import java.util.Set;
import java.util.UnknownFormatConversionException;
import java.util.regex.Pattern;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.jsoup.nodes.Attribute;
import org.jsoup.nodes.Attributes;
import org.jsoup.nodes.CDataNode;
import org.jsoup.nodes.Comment;
import org.jsoup.nodes.DataNode;
import org.jsoup.nodes.Document;
import org.jsoup.nodes.DocumentType;
import org.jsoup.nodes.Element;
import org.jsoup.nodes.FormElement;
import org.jsoup.nodes.Node;
import org.jsoup.nodes.PseudoTextElement;
import org.jsoup.nodes.TextNode;
import org.jsoup.nodes.XmlDeclaration;
import org.jsoup.parser.ParseErrorList;
import org.jsoup.parser.ParseSettings;
import org.jsoup.parser.Parser;
import org.jsoup.parser.Tag;
import org.jsoup.select.Elements;
import org.jsoup.select.Evaluator;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Element_ESTest extends Element_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Parser parser0 = Parser.htmlParser();
      Document document0 = parser0.parseInput("Zlass", "Zlass");
      document0.toggleClass("Zlass");
      document0.addClass("User gent must nDt be null");
      document0.hasClass(" > ");
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Document document0 = Document.createShell("");
      Element element0 = document0.head();
      Element element1 = document0.doClone(element0);
      element1.nextElementSiblings();
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("M?HU80ZY", "M?HU80ZY");
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(192);
      MockPrintStream mockPrintStream0 = new MockPrintStream(byteArrayOutputStream0, true);
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.prettyPrint(false);
      document0.outerHtmlTail(mockPrintStream0, (-828), document_OutputSettings1);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Tag tag0 = Tag.valueOf("Zlass");
      CDataNode cDataNode0 = new CDataNode("Zlass");
      Attributes attributes0 = cDataNode0.attributes();
      Element element0 = new Element(tag0, "Zlass", attributes0);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Tag tag0 = Tag.valueOf("class");
      Element element0 = new Element(tag0, "basefont");
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Document document0 = Document.createShell("");
      document0.nodelistChanged();
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Document document0 = Parser.parse("basefont", "basefont");
      Parser parser0 = Parser.xmlParser();
      Document document1 = document0.parser(parser0);
      document1.wrap("class");
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Tag tag0 = Tag.valueOf("class");
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = new FormElement(tag0, "class", attributes0);
      Element element0 = formElement0.prependElement("basefont");
      element0.wrap("<class>\n <basefont>\n</class>");
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Document document0 = Parser.parse("s+", "s+");
      Element element0 = document0.body();
      element0.wrap("s+");
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Document document0 = Document.createShell("");
      document0.wholeText();
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("class", "$pNLL=x");
      Document document1 = Parser.parseBodyFragment("@G);]", "value");
      document0.appendTo(document1);
      document0.val("@G);]");
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("H^", "H^");
      document0.siblingIndex = (-651);
      document0.val("gb<PYiCHA");
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("class", "class");
      Element element0 = document0.head();
      element0.val("ML=I}?~Wt");
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Tag tag0 = Tag.valueOf("clJ`as-s");
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = new FormElement(tag0, "clJ`as-s", attributes0);
      formElement0.val("clJ`as-s");
      formElement0.val();
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("cas", "cas");
      document0.appendTo(document0);
      document0.toggleClass("*f");
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Document document0 = Document.createShell("M?HU80ZY");
      document0.setSiblingIndex((-928));
      document0.toggleClass("M?HU80ZY");
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment(":nth-child(%d)", "ZsfAv<~@k;bT");
      Element element0 = document0.head();
      element0.toggleClass("textarea");
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("p6A, T;0^ZUhNY\"ART", "p6A, T;0^ZUhNY\"ART");
      Element element0 = document0.head();
      element0.text("p6A, T;0^ZUhNY\"ART");
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("Zlass", "Zlass");
      document0.appendTo(document0);
      document0.text("Zlass");
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("Zlass", "Zlass");
      document0.text("Zlass");
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Document document0 = Document.createShell("SYSTEM");
      document0.text();
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("H^", "H^");
      document0.setSiblingIndex((-2556));
      document0.tagName("org.jsoup.nodes.Element$NodeList");
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("Zlass", "Zlass");
      Document document1 = Parser.parseBodyFragmentRelaxed("Zlass", "Zlass");
      document0.appendTo(document1);
      document0.tagName("Zlass");
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("H^", "H^");
      document0.tagName("org.jsoup.nodes.Element$NodeList");
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Document document0 = Parser.parse("8T|v\"%4u<U\"=fN", "8T|v\"%4u<U\"=fN");
      document0.tagName();
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Tag tag0 = Tag.valueOf("class");
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = new FormElement(tag0, "class", attributes0);
      formElement0.tag();
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Tag tag0 = Tag.valueOf("clJ`ass");
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = new FormElement(tag0, "clJ`ass", attributes0);
      Element element0 = formElement0.prependElement("basefont");
      element0.tag();
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("clJ`ass", "clJ`ass");
      Element element0 = document0.head();
      element0.tag();
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Document document0 = Document.createShell("%");
      Element element0 = document0.head();
      element0.shallowClone();
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("textarea", "textarea");
      Element element0 = document0.head();
      element0.selectFirst("html");
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Element element0 = new Element("bbsefont");
      element0.selectFirst("bbsefont");
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Document document0 = Parser.parse("iW WTO", "iW WTO");
      Element element0 = document0.appendElement("S4");
      element0.selectFirst("S4");
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Parser parser0 = Parser.htmlParser();
      Document document0 = parser0.parseInput("Zlass", "Zlass");
      document0.select("User gent must nDt be null");
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Tag tag0 = Tag.valueOf("class");
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = new FormElement(tag0, "class", attributes0);
      formElement0.prependElement("basefont");
      formElement0.select("basefont");
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Document document0 = Document.createShell("");
      Element element0 = document0.appendTo(document0);
      element0.removeClass("43/hgSg+0");
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("cmhL14Mrba+", "cmhL14Mrba+");
      Element element0 = document0.head();
      element0.removeClass("blockquote");
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Document document0 = Document.createShell(".");
      document0.removeClass(".");
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Parser parser0 = Parser.htmlParser();
      Document document0 = parser0.parseInput("Zlass", "Zlass");
      document0.appendElement("Children collection to be inserted must not be null.");
      document0.appendTo(document0);
      document0.previousElementSibling();
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Document document0 = Parser.parse("bbsefont", "bbsefont");
      document0.siblingIndex = (-1985);
      document0.prependText("n`#?$RgFwO1BfGQBk");
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("t[>dg4,@,WkT!Be4hc", "class");
      Element element0 = document0.body();
      element0.prependText("org.jsoup.nodes.Element$2");
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Tag tag0 = Tag.valueOf("clJ`ass");
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = new FormElement(tag0, "clJ`ass", attributes0);
      Element element0 = formElement0.prependElement("basefont");
      element0.prependText("basefont");
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Tag tag0 = Tag.valueOf("class");
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = new FormElement(tag0, "class", attributes0);
      formElement0.prependElement("body");
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("Zlass", "Zlass");
      document0.appendTo(document0);
      Comment comment0 = new Comment("J", "g:`s$");
      document0.prependChild(comment0);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Document document0 = new Document("kagPH/z~/O39*`4Tvg");
      ParseSettings parseSettings0 = ParseSettings.preserveCase;
      Tag tag0 = Tag.valueOf("body", parseSettings0);
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = new FormElement(tag0, "(5u:>C(JTl(8Jz!", attributes0);
      formElement0.prependChild(document0);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("Zlass", "Zlass");
      Document document1 = Parser.parseBodyFragmentRelaxed("Zlass", "Zlass");
      document0.appendTo(document1);
      document0.prepend("option[selected]");
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("s+", "s+");
      document0.setSiblingIndex((-1969));
      document0.prepend("}\"");
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("h-L66%j\"H:U>6i", "head");
      Element element0 = document0.head();
      element0.prepend("vR04");
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Document document0 = new Document("java.lang.string@0000000011");
      document0.prepend("");
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("", "[evc \"xyN");
      document0.parents();
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Tag tag0 = Tag.valueOf("class");
      Attributes attributes0 = new Attributes();
      Document document0 = Parser.parse("basefont", "basefont");
      FormElement formElement0 = new FormElement(tag0, "class", attributes0);
      document0.appendTo(formElement0);
      document0.parents();
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Tag tag0 = Tag.valueOf("dfn");
      FormElement formElement0 = new FormElement(tag0, "dfn", (Attributes) null);
      Element element0 = formElement0.prependElement("dfn");
      element0.parent();
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("clJ`ass", "clJ`ass");
      Element element0 = document0.head();
      document0.setParentNode(element0);
      document0.parent();
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("clJ`ass", "clJ`ass");
      document0.prependText("basefont");
      document0.ownText();
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Document document0 = Document.createShell("");
      document0.nodeName();
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("class", "class");
      document0.prependChild(document0);
      document0.nextElementSibling();
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Document document0 = Document.createShell("org.jsoup.parser.token$character");
      Element element0 = document0.body();
      element0.lastElementSibling();
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("class", "$pNLL=x");
      Element element0 = document0.appendTo(document0);
      element0.lastElementSibling();
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Document document0 = Document.createShell("%");
      Element element0 = document0.head();
      element0.isBlock();
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Evaluator.IndexGreaterThan evaluator_IndexGreaterThan0 = new Evaluator.IndexGreaterThan((-3723));
      Document document0 = Parser.parseBodyFragment("org.jsoup.select.Evaluator$IsNthChild", "org.jsoup.select.Evaluator$IsNthChild");
      document0.is((Evaluator) evaluator_IndexGreaterThan0);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("$9R", "Tag name must not be empty.");
      Pattern pattern0 = Pattern.compile("Tag name must not be empty.");
      Evaluator.AttributeWithValueMatching evaluator_AttributeWithValueMatching0 = new Evaluator.AttributeWithValueMatching("$9R", pattern0);
      document0.is((Evaluator) evaluator_AttributeWithValueMatching0);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Element element0 = new Element("basefont");
      element0.is("basefont");
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("Zlass", "Zlass");
      Node[] nodeArray0 = new Node[2];
      nodeArray0[0] = (Node) document0;
      nodeArray0[1] = (Node) document0;
      document0.insertChildren((-2), nodeArray0);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("<", "<");
      document0.setParentNode(document0);
      LinkedHashSet<PseudoTextElement> linkedHashSet0 = new LinkedHashSet<PseudoTextElement>();
      document0.insertChildren(0, (Collection<? extends Node>) linkedHashSet0);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("Zlass", "Zlass");
      Tag tag0 = Tag.valueOf("Zlass");
      CDataNode cDataNode0 = new CDataNode("Zlass");
      Attributes attributes0 = cDataNode0.attributes();
      FormElement formElement0 = new FormElement(tag0, "Zlass", attributes0);
      Elements elements0 = document0.previousElementSiblings();
      formElement0.insertChildren((-1), (Collection<? extends Node>) elements0);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("org.jsoup.select.valator$IsLastChild", "*tZ/JvR(");
      Document document1 = Parser.parseBodyFragmentRelaxed("org.jsoup.select.valator$IsLastChild", "org.jsoup.select.valator$IsLastChild");
      Element element0 = document0.appendTo(document1);
      element0.html("</");
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Parser parser0 = Parser.htmlParser();
      Document document0 = parser0.parseInput("]i0!QK=(}3,t", " > ");
      document0.html("");
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Tag tag0 = Tag.valueOf("class");
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      CDataNode cDataNode0 = new CDataNode("LE'&ozT<\"jB^LKi");
      Attributes attributes0 = cDataNode0.attributes();
      FormElement formElement0 = new FormElement(tag0, "id", attributes0);
      formElement0.html(charArrayWriter0);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Tag tag0 = Tag.valueOf("cla's");
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = new FormElement(tag0, "cla's", attributes0);
      formElement0.html();
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Document document0 = Document.createShell("");
      document0.getElementsByAttributeStarting("nCKSH>U@u5");
      document0.hasAttributes();
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Document document0 = Parser.parse("basefont", "basefont");
      document0.hasAttributes();
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Document document0 = Parser.parse("basefont", "basefont");
      Pattern pattern0 = Pattern.compile("basefont");
      document0.getElementsMatchingText(pattern0);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Document document0 = new Document("K?HU80rZY");
      CDataNode cDataNode0 = new CDataNode("K?HU80rZY");
      Element element0 = document0.appendChild(cDataNode0);
      element0.getElementsMatchingText("K?HU80rZY");
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Document document0 = Parser.parse("basefont", "basefont");
      document0.text("J");
      Pattern pattern0 = Pattern.compile("J", 1165);
      document0.getElementsMatchingOwnText(pattern0);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Document document0 = Document.createShell("org.jsoup.parser.token$character");
      document0.appendText("org.jsoup.parser.token$character");
      document0.getElementsContainingText("org.jsoup.parser.token$character");
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Document document0 = Parser.parse("B[Nz3rNfRKW", "org.jsoup.nodes.Element");
      document0.getElementsContainingOwnText("B[Nz3rNfRKW");
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Document document0 = new Document("#root");
      document0.getElementsByTag("#root");
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Document document0 = Parser.parse("basefont", "basefont");
      document0.getElementsByIndexLessThan(13);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Element element0 = new Element("~l-!LxoY(v4xK");
      element0.getElementsByIndexGreaterThan((-3956));
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Element element0 = new Element("bbsefont");
      element0.getElementsByIndexEquals((-1482));
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Tag tag0 = Tag.valueOf("class");
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = new FormElement(tag0, "class", attributes0);
      formElement0.getElementsByClass(")9*+Js|=S?:?xZD:x");
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Document document0 = Parser.parse("basefont", "basefont");
      document0.getElementsByAttributeValueNot("<html>\n <head></head>\n <body>\n  basefont\n </body>\n</html>", "                 ");
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("Zlass", "Zlass");
      document0.getElementsByAttributeValueEnding("d6", "java.lang.string@0000000076");
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Parser parser0 = Parser.htmlParser();
      Document document0 = parser0.parseInput("qg,E![BC-) ", "8");
      document0.getElementsByAttributeValueContaining("8", "qg,E![BC-) ");
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("\"L", "\"L");
      document0.getElementsByAttributeValue("\"L", "html");
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Tag tag0 = Tag.valueOf("#9DSB[(7g5{OQK");
      Attributes attributes0 = new Attributes();
      Attributes attributes1 = attributes0.put("m", ".u'ZY-ZmFTq$~:g");
      FormElement formElement0 = new FormElement(tag0, ".u'ZY-ZmFTq$~:g", attributes1);
      formElement0.getElementsByAttributeStarting("m");
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Document document0 = Parser.parse("GnuW%E", " sH7<>l");
      document0.addClass(" sH7<>l");
      document0.getElementsByAttribute("class");
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("org.jsoup.nodes.cdatanode", "org.jsoup.nodes.cdatanode");
      Element element0 = document0.prependElement("DBMOjn*VHr*");
      element0.firstElementSibling();
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("k", "k");
      List<Node> list0 = document0.childNodesCopy();
      Document document1 = document0.normalise();
      document1.childNodes = list0;
      document1.ensureChildNodes();
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Tag tag0 = Tag.valueOf("dfn");
      FormElement formElement0 = new FormElement(tag0, "W17(X|2g&S%Tly2CGV", (Attributes) null);
      Element element0 = formElement0.prependElement("dfn");
      CDataNode cDataNode0 = new CDataNode("R");
      formElement0.prependChild(cDataNode0);
      element0.empty();
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Document document0 = Parser.parse("java.lang.string@0000000112", "java.lang.string@0000000112");
      Element element0 = document0.head();
      element0.empty();
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Document document0 = Parser.parse("basefont", "basefont");
      Element element0 = document0.body();
      CDataNode cDataNode0 = new CDataNode("class");
      element0.doClone(cDataNode0);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Document document0 = Parser.parse("z(fa%]J{", "dfn");
      document0.doClone((Node) null);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("org.jsoup.nodes.cdatanode", "org.jsoup.nodes.cdatanode");
      Element element0 = document0.prependElement("DBMOjn*VHr*");
      element0.doClone(document0);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Document document0 = Parser.parse("8T|v\"%4u<U\"=fN", "8T|v\"%4u<U\"=fN");
      Element element0 = document0.head();
      element0.clone();
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Element element0 = new Element("~OM:\"asMoH_=;E }Z2@");
      Element element1 = new Element("~OM:\"asMoH_=;E }Z2@");
      Element element2 = element0.appendChild(element1);
      element2.clone();
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Element element0 = new Element("bbsefont");
      element0.siblingIndex = (-1482);
      Locale locale0 = Locale.ITALIAN;
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      element0.classNames(set0);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Document document0 = Parser.parse("basefont", "basefont");
      Element element0 = document0.body();
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      element0.classNames((Set<String>) linkedHashSet0);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Document document0 = Document.createShell("org.jsoup.parser.token$character");
      document0.toggleClass("Bhe'H<*");
      document0.className();
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Tag tag0 = Tag.valueOf("class");
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = new FormElement(tag0, "class", attributes0);
      formElement0.children();
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Tag tag0 = Tag.valueOf("class");
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = new FormElement(tag0, "class", attributes0);
      formElement0.childNodeSize();
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("class", "class");
      document0.childNodeSize();
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Document document0 = Parser.parse("8T|v\"%4u<U\"=fN", "8T|v\"%4u<U\"=fN");
      document0.child(0);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Document document0 = Parser.parse("basefont", "basefont");
      document0.reparentChild(document0);
      document0.before((Node) document0);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Document document0 = Document.createShell("");
      Element element0 = document0.doClone(document0);
      element0.before("baseon");
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("Zlass", "Zlass");
      Document document1 = Parser.parseBodyFragment("value", "SiSVp=;$p\"})T]rR");
      document0.appendTo(document1);
      document0.before("_XsRML'TO$\"/Sr7#Sb]");
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      Tag tag0 = Tag.valueOf("html");
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = new FormElement(tag0, "html", attributes0);
      formElement0.baseUri();
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("class", "$pNLL=x");
      document0.toggleClass("@G);]");
      document0.attributes();
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("class", "$pNLL=x");
      Element element0 = document0.appendTo(document0);
      element0.attr("class", false);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      Document document0 = Document.createShell("allowfullscreen");
      document0.siblingIndex = (-1);
      document0.attr("=D)!_eJPh`Em~'", true);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("lGGs", "lGGs");
      Element element0 = document0.head();
      element0.attr("lGGs", true);
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      Document document0 = Parser.parse("basefont", "basefont");
      Element element0 = document0.body();
      element0.attr("N\\vfqv!ovH#V/'~", "N\\vfqv!ovH#V/'~");
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      Tag tag0 = Tag.valueOf("class");
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = new FormElement(tag0, "class", attributes0);
      formElement0.attr(";<${Dv)dT%nESimu[", "id");
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("3s-{'7", "class");
      Element element0 = document0.head();
      element0.appendTo(document0);
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("class", "class");
      Element element0 = document0.head();
      element0.appendText("dfn");
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("Zlass", "Zlass");
      document0.appendTo(document0);
      document0.appendText("java.lang.string@0000000084");
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("class", "$pNLL=x");
      document0.appendTo(document0);
      Element element0 = document0.previousElementSibling();
      element0.appendChild(document0);
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      Tag tag0 = Tag.valueOf("clashs");
      Attributes attributes0 = new Attributes();
      Document document0 = Parser.parse("basefont", "basefont");
      FormElement formElement0 = new FormElement(tag0, "clashs", attributes0);
      formElement0.appendTo(document0);
      formElement0.append("");
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      Element element0 = new Element(")..(7d,h5W$l{18SL");
      element0.siblingIndex = (-110);
      element0.append(")..(7d,h5W$l{18SL");
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("class", "class");
      Element element0 = document0.head();
      element0.append("class");
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("class", "class");
      Element element0 = document0.head();
      element0.after((Node) document0);
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      Document document0 = Parser.parse("MOHU8&Z", "MOHU8&Z");
      Element element0 = document0.appendElement(" />");
      element0.after((Node) document0);
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      Document document0 = Document.createShell("org.jsoup.parser.token$character");
      Tag tag0 = Tag.valueOf("org.jsoup.parser.token$character");
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = new FormElement(tag0, "org.jsoup.parser.token$character", attributes0);
      Element element0 = formElement0.prependChild(document0);
      document0.after((Node) element0);
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      Tag tag0 = Tag.valueOf("*la-shs");
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = new FormElement(tag0, "*la-shs", attributes0);
      Element element0 = formElement0.prependElement("basefont");
      formElement0.prependElement("r#$\"/@u");
      element0.after("{2$#XL%");
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("class", "$pNLL=x");
      Document document1 = Parser.parseBodyFragment("@G);]", "value");
      document0.appendTo(document1);
      Element element0 = document0.previousElementSibling();
      element0.after("L?a%8NF");
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("Insert position out of bounds.", "O&]mT:}#iuZ_}6><");
      document0.appendTo(document0);
      document0.addClass("Insert position out of bounds.");
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      Tag tag0 = Tag.valueOf("clJ`as-s");
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = new FormElement(tag0, "clJ`as-s", attributes0);
      formElement0.setSiblingIndex((-150107793));
      formElement0.addClass("basefont");
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("class", "$pNLL=x");
      document0.appendTo(document0);
      // Undeclared exception!
      document0.wrap("RCDATAEndTagOpen");
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      Parser parser0 = Parser.htmlParser();
      Document document0 = parser0.parseInput("java.lang.string@0000000008", "java.lang.string@0000000008");
      Element element0 = document0.head();
      element0.setSiblingIndex(27);
      // Undeclared exception!
//      try { 
        element0.wrap("java.lang.string@0000000008");
//        fail("Expecting exception: IndexOutOfBoundsException");
      
//      } catch(IndexOutOfBoundsException e) {
//         //
//         // Index: 27, Size: 2
//         //
//         verifyException("java.util.ArrayList", e);
//      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      Parser parser0 = Parser.htmlParser();
      Document document0 = parser0.parseInput("qg,E![BC-) ", "@%Sg,");
      // Undeclared exception!
//      try { 
        document0.wrap((String) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // String must not be empty
//         //
//         verifyException("org.jsoup.helper.Validate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("class", "class");
      document0.setParentNode(document0);
      // Undeclared exception!
      document0.val("class");
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("textarea", "US-ASCII");
      Parser parser0 = Parser.xmlParser();
      Parser parser1 = parser0.settings((ParseSettings) null);
      Document document1 = document0.parser(parser1);
      // Undeclared exception!
//      try { 
        document1.val("US-ASCII");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.jsoup.nodes.Node", e);
//      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      Document document0 = Parser.parse("8T|v\"%4u<U\"=fN", "8T|v\"%4u<U\"=fN");
      // Undeclared exception!
//      try { 
        document0.toggleClass((String) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Object must not be null
//         //
//         verifyException("org.jsoup.helper.Validate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      Document document0 = new Document("");
      // Undeclared exception!
//      try { 
        document0.text("P^Yd(F8.q");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.jsoup.nodes.Document", e);
//      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      Tag tag0 = Tag.valueOf("class");
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = new FormElement(tag0, "class", attributes0);
      // Undeclared exception!
//      try { 
        formElement0.text((String) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Object must not be null
//         //
//         verifyException("org.jsoup.helper.Validate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("java.lang.string@0000000038", "java.lang.string@0000000038");
      Element element0 = document0.appendElement("id");
      element0.childNodes = null;
      // Undeclared exception!
//      try { 
        document0.text();
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("</", "</");
      TextNode textNode0 = new TextNode("tfoot");
      document0.setParentNode(textNode0);
      // Undeclared exception!
//      try { 
        document0.text();
//        fail("Expecting exception: ClassCastException");
      
//      } catch(ClassCastException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("</", "</");
      document0.setSiblingIndex((-4745));
      document0.setParentNode(document0);
      // Undeclared exception!
//      try { 
        document0.text();
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      Document document0 = Parser.parse("basefont", "basefont");
      document0.appendTo(document0);
      // Undeclared exception!
      document0.tagName("w_BiPRb/$C");
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("Zlass", "Zlass");
      // Undeclared exception!
//      try { 
        document0.tagName((String) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Tag name must not be empty.
//         //
//         verifyException("org.jsoup.helper.Validate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      Document document0 = Document.createShell(".");
      // Undeclared exception!
//      try { 
        document0.selectFirst(".");
//        fail("Expecting exception: IllegalStateException");
      
//      } catch(IllegalStateException e) {
//         //
//         // String must not be empty
//         //
//         verifyException("org.jsoup.select.QueryParser", e);
//      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      Tag tag0 = Tag.valueOf(".");
      FormElement formElement0 = new FormElement(tag0, "br", attributes0);
      // Undeclared exception!
//      try { 
        formElement0.selectFirst((String) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // String must not be empty
//         //
//         verifyException("org.jsoup.helper.Validate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      Document document0 = Document.createShell("");
      // Undeclared exception!
//      try { 
        document0.select("(ZM$vvdDJ!\"3|");
//        fail("Expecting exception: IllegalStateException");
      
//      } catch(IllegalStateException e) {
//         //
//         // Could not parse query '(ZM$vvdDJ!\"3|': unexpected token at '(ZM$vvdDJ!\"3|'
//         //
//         verifyException("org.jsoup.select.QueryParser", e);
//      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("data", "bBo[|");
      // Undeclared exception!
//      try { 
        document0.select("");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // String must not be empty
//         //
//         verifyException("org.jsoup.helper.Validate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      Parser parser0 = Parser.htmlParser();
      Document document0 = parser0.parseInput("qg,E![BC-) ", "8");
      // Undeclared exception!
//      try { 
        document0.removeClass((String) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Object must not be null
//         //
//         verifyException("org.jsoup.helper.Validate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      Document document0 = Parser.parse("Zlass", "Zlass");
      CDataNode cDataNode0 = new CDataNode("Zlass");
      document0.setParentNode(cDataNode0);
      // Undeclared exception!
//      try { 
        document0.previousElementSibling();
//        fail("Expecting exception: ClassCastException");
      
//      } catch(ClassCastException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      Document document0 = Parser.parse("9AbHkHp0CX0s", "textarea");
      CDataNode cDataNode0 = new CDataNode("9AbHkHp0CX0s");
      document0.setParentNode(cDataNode0);
      // Undeclared exception!
//      try { 
        Element.preserveWhitespace(document0);
//        fail("Expecting exception: ClassCastException");
      
//      } catch(ClassCastException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("Zlass", "Zlass");
      // Undeclared exception!
//      try { 
        document0.prependText((String) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Object must not be null
//         //
//         verifyException("org.jsoup.helper.Validate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      Tag tag0 = Tag.valueOf("class");
      Attributes attributes0 = new Attributes();
      Document document0 = Parser.parse("basefont", "basefont");
      FormElement formElement0 = new FormElement(tag0, "class", attributes0);
      Node[] nodeArray0 = new Node[4];
      nodeArray0[0] = (Node) document0;
      nodeArray0[1] = (Node) formElement0;
      nodeArray0[2] = (Node) document0;
      nodeArray0[3] = (Node) document0;
      formElement0.addChildren(nodeArray0);
      // Undeclared exception!
      formElement0.prependElement("basefont");
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      Tag tag0 = Tag.valueOf("dG%W_o5@\"S#3Nz}~");
      FormElement formElement0 = new FormElement(tag0, "dG%W_o5@\"S#3Nz}~", (Attributes) null);
      // Undeclared exception!
//      try { 
        formElement0.prependElement("                 ");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // String must not be empty
//         //
//         verifyException("org.jsoup.helper.Validate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      Tag tag0 = Tag.valueOf("2M 9kh5:oh l6");
      CDataNode cDataNode0 = new CDataNode("aH0jQ^j\"a#");
      Attributes attributes0 = cDataNode0.attributes();
      Comment comment0 = new Comment("hM5g8$'4c,BM)$kPw%S");
      cDataNode0.setParentNode(comment0);
      FormElement formElement0 = new FormElement(tag0, "daf!Zy'8", attributes0);
      // Undeclared exception!
//      try { 
        formElement0.prependChild(cDataNode0);
//        fail("Expecting exception: UnsupportedOperationException");
      
//      } catch(UnsupportedOperationException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.util.AbstractList", e);
//      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      Element element0 = new Element("bbsefont");
      CDataNode cDataNode0 = new CDataNode("Ie}Tt>3;hYcmsISu>");
      Node node0 = cDataNode0.doClone(element0);
      // Undeclared exception!
//      try { 
        element0.prependChild(node0);
//        fail("Expecting exception: IndexOutOfBoundsException");
      
//      } catch(IndexOutOfBoundsException e) {
//         //
//         // Index: 0, Size: 0
//         //
//         verifyException("java.util.ArrayList", e);
//      }
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      Tag tag0 = Tag.valueOf(";ozoPp");
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = new FormElement(tag0, ";ozoPp", attributes0);
      // Undeclared exception!
//      try { 
        formElement0.prependChild((Node) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Object must not be null
//         //
//         verifyException("org.jsoup.helper.Validate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("class", "class");
      document0.setParentNode(document0);
      // Undeclared exception!
      document0.prepend("");
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      Tag tag0 = Tag.valueOf("zj#ghrdzn`_y");
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = new FormElement(tag0, "zj#ghrdzn`_y", attributes0);
      // Undeclared exception!
//      try { 
        formElement0.prepend((String) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Object must not be null
//         //
//         verifyException("org.jsoup.helper.Validate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("*+j)n'Bal[tE$kqH&", "*+j)n'Bal[tE$kqH&");
      CDataNode cDataNode0 = new CDataNode("");
      Element element0 = document0.doClone(cDataNode0);
      // Undeclared exception!
//      try { 
        element0.prepend("");
//        fail("Expecting exception: ClassCastException");
      
//      } catch(ClassCastException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("org.jsoup.parser.token$character", "|QPndfn");
      TextNode textNode0 = TextNode.createFromEncoded("vlass");
      document0.setParentNode(textNode0);
      // Undeclared exception!
//      try { 
        document0.parents();
//        fail("Expecting exception: ClassCastException");
      
//      } catch(ClassCastException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      Document document0 = Document.createShell("[.");
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.indentAmount(1593);
      // Undeclared exception!
      document0.outerHtmlTail(charArrayWriter0, 1593, document_OutputSettings1);
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      Tag tag0 = Tag.valueOf("*la-shs");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      FormElement formElement0 = new FormElement(tag0, "dfn", (Attributes) null);
      char[] charArray0 = new char[4];
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      // Undeclared exception!
//      try { 
        formElement0.outerHtmlTail(charBuffer0, 0, document_OutputSettings0);
//        fail("Expecting exception: BufferOverflowException");
      
//      } catch(BufferOverflowException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.nio.CharBuffer", e);
//      }
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      Tag tag0 = Tag.valueOf("class");
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = new FormElement(tag0, "class", attributes0);
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      // Undeclared exception!
//      try { 
        formElement0.outerHtmlTail((Appendable) null, 15, document_OutputSettings0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.jsoup.nodes.Element", e);
//      }
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      Tag tag0 = Tag.valueOf("class");
      Attributes attributes0 = new Attributes();
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      FormElement formElement0 = new FormElement(tag0, "class", attributes0);
      formElement0.prependElement("basefont");
      StringBuffer stringBuffer0 = new StringBuffer("<class>\n <basefont>\n</class>");
      // Undeclared exception!
//      try { 
        formElement0.outerHtmlTail(stringBuffer0, (-1841414303), document_OutputSettings0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // width must be > 0
//         //
//         verifyException("org.jsoup.internal.StringUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("o/me", "</");
      PipedWriter pipedWriter0 = new PipedWriter();
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
//      try { 
        document0.outerHtmlTail(pipedWriter0, 24, document_OutputSettings0);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Pipe not connected
//         //
//         verifyException("java.io.PipedWriter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      Tag tag0 = Tag.valueOf("zj#ghrdzn`_y");
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = new FormElement(tag0, "zj#ghrdzn`_y", attributes0);
      StringBuffer stringBuffer0 = new StringBuffer();
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.indentAmount(4986);
      // Undeclared exception!
      formElement0.outerHtmlHead(stringBuffer0, 4986, document_OutputSettings1);
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      Document document0 = Parser.parse("basefont", "basefont");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Charset charset0 = document0.charset();
      ByteBuffer byteBuffer0 = ByteBuffer.allocateDirect(3);
      charset0.decode(byteBuffer0);
      CharBuffer charBuffer0 = charset0.decode(byteBuffer0);
      // Undeclared exception!
//      try { 
        document0.outerHtmlHead(charBuffer0, (-150142072), document_OutputSettings0);
//        fail("Expecting exception: BufferOverflowException");
      
//      } catch(BufferOverflowException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.nio.Buffer", e);
//      }
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      Parser parser0 = Parser.htmlParser();
      Document document0 = parser0.parseInput("]i0!QK=(}3,t", " > ");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      // Undeclared exception!
//      try { 
        document0.outerHtmlHead((Appendable) null, (-1869), document_OutputSettings0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      Document document0 = Parser.parse("basefont", "basefont");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Charset charset0 = document0.charset();
      ByteBuffer byteBuffer0 = ByteBuffer.allocateDirect(3);
      CharBuffer charBuffer0 = charset0.decode(byteBuffer0);
      // Undeclared exception!
//      try { 
        document0.outerHtmlHead(charBuffer0, (-150142072), document_OutputSettings0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // width must be > 0
//         //
//         verifyException("org.jsoup.internal.StringUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("class", "class");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      PipedWriter pipedWriter0 = new PipedWriter();
//      try { 
        document0.outerHtmlHead(pipedWriter0, 32, document_OutputSettings0);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Pipe not connected
//         //
//         verifyException("java.io.PipedWriter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("body", "");
      DataNode dataNode0 = new DataNode("", "");
      Element element0 = document0.doClone(dataNode0);
      // Undeclared exception!
//      try { 
        element0.nextElementSiblings();
//        fail("Expecting exception: ClassCastException");
      
//      } catch(ClassCastException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment(":%s(%dn%+d)", "Tag name must not be empty.");
      // Undeclared exception!
//      try { 
        document0.lastElementSibling();
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.jsoup.nodes.Element", e);
//      }
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("b<X", "b<X");
      XmlDeclaration xmlDeclaration0 = new XmlDeclaration("{ '<=tf=-", false);
      Element element0 = document0.doClone(xmlDeclaration0);
      // Undeclared exception!
//      try { 
        element0.lastElementSibling();
//        fail("Expecting exception: ClassCastException");
      
//      } catch(ClassCastException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      Document document0 = Document.createShell(":nth-child(%d)");
      Evaluator.IsRoot evaluator_IsRoot0 = new Evaluator.IsRoot();
      document0.reparentChild(document0);
      // Undeclared exception!
      document0.is((Evaluator) evaluator_IsRoot0);
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      Document document0 = Document.createShell("");
      // Undeclared exception!
//      try { 
        document0.is("");
//        fail("Expecting exception: IllegalStateException");
      
//      } catch(IllegalStateException e) {
//         //
//         // Could not parse query '': unexpected token at ''
//         //
//         verifyException("org.jsoup.select.QueryParser", e);
//      }
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("", "");
      document0.appendTo(document0);
      // Undeclared exception!
      document0.is("allowfullscreen");
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      Document document0 = Parser.parse("org.jsoup.internal.StringUtil", "org.jsoup.internal.StringUtil");
      DocumentType documentType0 = new DocumentType("org.jsoup.internal.StringUtil", "org.jsoup.internal.StringUtil", "org.jsoup.internal.StringUtil");
      document0.parentNode = (Node) documentType0;
      // Undeclared exception!
//      try { 
        document0.is("L7qA6f");
//        fail("Expecting exception: ClassCastException");
      
//      } catch(ClassCastException e) {
//         //
//         // org.jsoup.nodes.DocumentType cannot be cast to org.jsoup.nodes.Element
//         //
//         verifyException("org.jsoup.nodes.Element", e);
//      }
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      Document document0 = Parser.parse("8T|v\"%4u<U\"=fN", "8T|v\"%4u<U\"=fN");
      Node[] nodeArray0 = new Node[4];
      nodeArray0[0] = (Node) document0;
      nodeArray0[1] = (Node) document0;
      nodeArray0[2] = (Node) document0;
      nodeArray0[3] = (Node) document0;
      // Undeclared exception!
//      try { 
        document0.insertChildren(1, nodeArray0);
//        fail("Expecting exception: IndexOutOfBoundsException");
      
//      } catch(IndexOutOfBoundsException e) {
//         //
//         // Index: 0, Size: 0
//         //
//         verifyException("java.util.ArrayList", e);
//      }
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("", "[evc \"xyN");
      document0.appendTo(document0);
      // Undeclared exception!
      document0.html("#root");
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      Document document0 = Document.createShell(".");
      // Undeclared exception!
//      try { 
        document0.html((String) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Object must not be null
//         //
//         verifyException("org.jsoup.helper.Validate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("Zlass", "Zlass");
      PipedWriter pipedWriter0 = new PipedWriter();
      // Undeclared exception!
//      try { 
        document0.html(pipedWriter0);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // java.io.IOException: Pipe not connected
//         //
//         verifyException("org.jsoup.nodes.Node$OuterHtmlVisitor", e);
//      }
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      Parser parser0 = Parser.htmlParser();
      Document document0 = parser0.parseInput("Zlass", "Zlass");
      char[] charArray0 = new char[8];
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      // Undeclared exception!
//      try { 
        document0.html(charBuffer0);
//        fail("Expecting exception: BufferOverflowException");
      
//      } catch(BufferOverflowException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.nio.CharBuffer", e);
//      }
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("M#wF|A[", "M#wF|A[");
      document0.appendTo(document0);
      // Undeclared exception!
      document0.html();
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("AJsx'*N6", "AJsx'*N6");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      document_OutputSettings0.charset((Charset) null);
      Document document1 = document0.outputSettings(document_OutputSettings0);
      // Undeclared exception!
//      try { 
        document1.html();
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.jsoup.nodes.Document$OutputSettings", e);
//      }
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      Document document0 = Document.createShell(".");
      // Undeclared exception!
//      try { 
        document0.hasClass((String) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.jsoup.nodes.Element", e);
//      }
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      Document document0 = Document.createShell("");
      // Undeclared exception!
//      try { 
        document0.getElementsMatchingText((Pattern) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.jsoup.select.Evaluator$Matches", e);
//      }
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      Document document0 = Document.createShell("");
      // Undeclared exception!
//      try { 
        document0.getElementsMatchingText((String) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      Tag tag0 = Tag.valueOf("class");
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = new FormElement(tag0, "class", attributes0);
      // Undeclared exception!
//      try { 
        formElement0.getElementsMatchingText("8C~=(JG5SG!\"@Al5=");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Pattern syntax error: 8C~=(JG5SG!\"@Al5=
//         //
//         verifyException("org.jsoup.nodes.Element", e);
//      }
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      Document document0 = new Document("K?HU80rZY");
      CDataNode cDataNode0 = new CDataNode("K?HU80rZY");
      cDataNode0.value = (Object) document0;
      Element element0 = document0.appendChild(cDataNode0);
      // Undeclared exception!
//      try { 
        element0.getElementsMatchingText("K?HU80rZY");
//        fail("Expecting exception: ClassCastException");
      
//      } catch(ClassCastException e) {
//         //
//         // org.jsoup.nodes.Document cannot be cast to java.lang.String
//         //
//         verifyException("org.jsoup.nodes.LeafNode", e);
//      }
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment(";7", ";7");
      // Undeclared exception!
//      try { 
        document0.getElementsMatchingOwnText((Pattern) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.jsoup.select.Evaluator$MatchesOwn", e);
//      }
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      Document document0 = Document.createShell("");
      // Undeclared exception!
//      try { 
        document0.getElementsMatchingOwnText((String) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("org.jsoup.nodes.Element$2", "]0#root");
      // Undeclared exception!
//      try { 
        document0.getElementsMatchingOwnText("yM!A|$~c%W9(z_g:o");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Pattern syntax error: yM!A|$~c%W9(z_g:o
//         //
//         verifyException("org.jsoup.nodes.Element", e);
//      }
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("org.jsoup.parser.token$character", "|ndfn");
      TextNode textNode0 = TextNode.createFromEncoded("vlass");
      document0.setParentNode(textNode0);
      // Undeclared exception!
//      try { 
        document0.getElementsMatchingOwnText("org.jsoup.select.Elements");
//        fail("Expecting exception: ClassCastException");
      
//      } catch(ClassCastException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment(" />", " />");
      Element element0 = document0.appendElement("java.lang.string@0000000011");
      element0.siblingIndex = (-3002);
      // Undeclared exception!
//      try { 
        document0.getElementsMatchingOwnText(" />");
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      Tag tag0 = Tag.valueOf("cl`as-s");
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = new FormElement(tag0, "cl`as-s", attributes0);
      Element element0 = formElement0.prependElement("basefont");
      element0.childNodes = null;
      // Undeclared exception!
//      try { 
        formElement0.getElementsContainingText("");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("org.jsoup.parser.token$character", "|ndfn");
      TextNode textNode0 = TextNode.createFromEncoded("vlass");
      document0.setParentNode(textNode0);
      // Undeclared exception!
//      try { 
        document0.getElementsContainingOwnText("|ndfn");
//        fail("Expecting exception: ClassCastException");
      
//      } catch(ClassCastException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      Document document0 = Document.createShell("");
      // Undeclared exception!
//      try { 
        document0.getElementsByTag((String) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // String must not be empty
//         //
//         verifyException("org.jsoup.helper.Validate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      Document document0 = Document.createShell("K?HU80rZY");
      DataNode dataNode0 = new DataNode("K?HU80rZY", "K?HU80rZY");
      Element element0 = document0.doClone(dataNode0);
      // Undeclared exception!
//      try { 
        element0.getElementsByIndexGreaterThan(19);
//        fail("Expecting exception: ClassCastException");
      
//      } catch(ClassCastException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("$9R", "Tag name must not be empty.");
      Element element0 = document0.head();
      element0.parentNode = (Node) document0;
      // Undeclared exception!
//      try { 
        document0.getElementsByIndexEquals(27);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("</", "~L?rM");
      Comment comment0 = new Comment("</");
      document0.parentNode = (Node) comment0;
      // Undeclared exception!
//      try { 
        document0.getElementsByIndexEquals(224);
//        fail("Expecting exception: ClassCastException");
      
//      } catch(ClassCastException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("(q\"Pe=o", "(q\"Pe=o");
      // Undeclared exception!
//      try { 
        document0.getElementsByAttributeValueStarting("M", "");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // String must not be empty
//         //
//         verifyException("org.jsoup.helper.Validate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("br", "");
      // Undeclared exception!
//      try { 
        document0.getElementsByAttributeValueNot("VuS@R^", "");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // String must not be empty
//         //
//         verifyException("org.jsoup.helper.Validate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("class", "$pNLL=x");
      // Undeclared exception!
//      try { 
        document0.getElementsByAttributeValueMatching("$pNLL=x", (String) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      Document document0 = Parser.parse("body", "s+");
      // Undeclared exception!
//      try { 
        document0.getElementsByAttributeValueMatching("body", "(N7V;5l");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Pattern syntax error: (N7V;5l
//         //
//         verifyException("org.jsoup.nodes.Element", e);
//      }
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("\"L", "\"L");
      // Undeclared exception!
//      try { 
        document0.getElementsByAttributeValueContaining("", "");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // String must not be empty
//         //
//         verifyException("org.jsoup.helper.Validate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("Data key must not be empty", "Data key must not be empty");
      List<Node> list0 = document0.childNodesCopy();
      document0.childNodes = list0;
      // Undeclared exception!
//      try { 
        document0.getElementsByAttributeValue("^=", "26d7_\"/r|'MA");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      Document document0 = Document.createShell("");
      // Undeclared exception!
//      try { 
        document0.getElementsByAttributeStarting("");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // String must not be empty
//         //
//         verifyException("org.jsoup.helper.Validate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("AfterDoctypeSystemKeyword", "^+IM_0v*W5.N=Pzp/t9");
      // Undeclared exception!
//      try { 
        document0.getElementsByAttribute((String) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // String must not be empty
//         //
//         verifyException("org.jsoup.helper.Validate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("DW.KFdKxA#Zd/a,)dzD", "textarea");
      // Undeclared exception!
//      try { 
        document0.getElementById("");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // String must not be empty
//         //
//         verifyException("org.jsoup.helper.Validate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("M?HU80ZY", "M?HU80ZY");
      Element element0 = document0.appendElement(" />");
      element0.setSiblingIndex((-201));
      // Undeclared exception!
//      try { 
        element0.getAllElements();
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      Document document0 = Document.createShell("org.jsoup.parser.token$character");
      // Undeclared exception!
//      try { 
        document0.firstElementSibling();
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.jsoup.nodes.Element", e);
//      }
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("Zlass", "Zlass");
      document0.childNodes = null;
      // Undeclared exception!
//      try { 
        document0.dataNodes();
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.jsoup.nodes.Element", e);
//      }
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      Document document0 = Document.createShell("deflat");
      document0.childNodes = null;
      // Undeclared exception!
//      try { 
        document0.data();
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.jsoup.nodes.Element", e);
//      }
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("org.jsoup.nodes.Element$2", "#root");
      Element element0 = document0.head();
      element0.addClass("org.jsoup.nodes.Element$2");
      // Undeclared exception!
//      try { 
        element0.cssSelector();
//        fail("Expecting exception: IllegalStateException");
      
//      } catch(IllegalStateException e) {
//         //
//         // Could not parse query 'head.java.lang.String@0000000088': unexpected token at '@0000000088'
//         //
//         verifyException("org.jsoup.select.QueryParser", e);
//      }
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      Document document0 = Document.createShell("K?HU80rZY");
      DataNode dataNode0 = new DataNode("K?HU80rZY", "K?HU80rZY");
      Element element0 = document0.doClone(dataNode0);
      // Undeclared exception!
//      try { 
        element0.cssSelector();
//        fail("Expecting exception: ClassCastException");
      
//      } catch(ClassCastException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      Tag tag0 = Tag.valueOf("class");
      Attributes attributes0 = new Attributes();
      Attribute attribute0 = new Attribute("class", "class");
      Attributes attributes1 = attributes0.put(attribute0);
      attributes1.keys = null;
      FormElement formElement0 = new FormElement(tag0, "class", attributes1);
      Locale locale0 = Locale.UK;
      Set<String> set0 = locale0.getUnicodeLocaleKeys();
      // Undeclared exception!
//      try { 
        formElement0.classNames(set0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.jsoup.nodes.Attributes", e);
//      }
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      Tag tag0 = Tag.valueOf("class");
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = new FormElement(tag0, "class", attributes0);
      // Undeclared exception!
//      try { 
        formElement0.classNames((Set<String>) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Object must not be null
//         //
//         verifyException("org.jsoup.helper.Validate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("Zlass", "Zlass");
      document0.childNodes = null;
      // Undeclared exception!
//      try { 
        document0.child(46);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      Tag tag0 = Tag.valueOf("class");
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = new FormElement(tag0, "Kp3o{", attributes0);
      // Undeclared exception!
//      try { 
        formElement0.child((-1436010313));
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("w],D+=}lwZ/ETF", "w],D+=}lwZ/ETF");
      DocumentType documentType0 = new DocumentType("w],D+=}lwZ/ETF", "noscript", "w],D+=}lwZ/ETF", "GP]U.Qy9D[;fQ<I");
      Element element0 = document0.doClone(documentType0);
      // Undeclared exception!
//      try { 
        element0.before((Node) documentType0);
//        fail("Expecting exception: UnsupportedOperationException");
      
//      } catch(UnsupportedOperationException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.util.AbstractList", e);
//      }
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("clJ`ass", "clJ`ass");
      document0.setParentNode(document0);
      // Undeclared exception!
      document0.before("html > head > #root");
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      Tag tag0 = Tag.valueOf("dfn");
      FormElement formElement0 = new FormElement(tag0, "W17(X|2g&S%ly2CGV", (Attributes) null);
      // Undeclared exception!
//      try { 
        formElement0.attr((String) null, true);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Object must not be null
//         //
//         verifyException("org.jsoup.helper.Validate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      Document document0 = Parser.parse("basefont", "basefont");
      document0.reparentChild(document0);
      // Undeclared exception!
      document0.attr(":containsOwn", "Pattern syntax error: ");
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      Tag tag0 = Tag.valueOf("clashs");
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = new FormElement(tag0, "clashs", attributes0);
      CDataNode cDataNode0 = new CDataNode("clashs");
      formElement0.setParentNode(cDataNode0);
      Document document0 = Parser.parseBodyFragment("YN`|`{3r Pvyq", "clashs");
      // Undeclared exception!
//      try { 
        formElement0.appendTo(document0);
//        fail("Expecting exception: UnsupportedOperationException");
      
//      } catch(UnsupportedOperationException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.util.AbstractList", e);
//      }
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      Tag tag0 = Tag.valueOf("class");
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = new FormElement(tag0, "class", attributes0);
      Document document0 = Parser.parse("org.jsoup.nodes.Document$OutputSettings$Syntax", "org.jsoup.nodes.Document$OutputSettings$Syntax");
      Element element0 = document0.doClone(formElement0);
      // Undeclared exception!
//      try { 
        element0.appendTo(document0);
//        fail("Expecting exception: IndexOutOfBoundsException");
      
//      } catch(IndexOutOfBoundsException e) {
//         //
//         // Index: 0, Size: 0
//         //
//         verifyException("java.util.ArrayList", e);
//      }
  }

  @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      Document document0 = Parser.parse("basefont", "basefont");
      // Undeclared exception!
//      try { 
        document0.appendTo((Element) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Object must not be null
//         //
//         verifyException("org.jsoup.helper.Validate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("R'^", "R'^");
      Parser parser0 = Parser.xmlParser();
      ParseErrorList parseErrorList0 = parser0.getErrors();
      List<Node> list0 = Parser.parseFragment("2-<v", (Element) document0, "2-<v", parseErrorList0);
      document0.childNodes = list0;
      // Undeclared exception!
//      try { 
        document0.appendText("2-<v");
//        fail("Expecting exception: UnsupportedOperationException");
      
//      } catch(UnsupportedOperationException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.util.Collections$UnmodifiableCollection", e);
//      }
  }

  @Test(timeout = 4000)
  public void test223()  throws Throwable  {
      Parser parser0 = Parser.xmlParser();
      Document document0 = parser0.parseInput("bqlhw}", "");
      // Undeclared exception!
//      try { 
        document0.appendText((String) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Object must not be null
//         //
//         verifyException("org.jsoup.helper.Validate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test224()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("clJ`ass", "clJ`ass");
      document0.setParentNode(document0);
      // Undeclared exception!
      document0.appendElement("#root");
  }

  @Test(timeout = 4000)
  public void test225()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("Zlass", "Zlass");
      List<Node> list0 = Parser.parseFragment("value", (Element) document0, "/*7cj*!iQQmFp");
      document0.childNodes = list0;
      // Undeclared exception!
//      try { 
        document0.appendElement("value");
//        fail("Expecting exception: UnsupportedOperationException");
      
//      } catch(UnsupportedOperationException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.util.Collections$UnmodifiableCollection", e);
//      }
  }

  @Test(timeout = 4000)
  public void test226()  throws Throwable  {
      Document document0 = Document.createShell("Zlass");
      Parser parser0 = Parser.xmlParser();
      Parser parser1 = parser0.settings((ParseSettings) null);
      Document document1 = document0.parser(parser1);
      // Undeclared exception!
//      try { 
        document1.appendElement("Pattern syntax error: ");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.jsoup.parser.Tag", e);
//      }
  }

  @Test(timeout = 4000)
  public void test227()  throws Throwable  {
      Document document0 = Parser.parse("baseon", "baseon");
      // Undeclared exception!
//      try { 
        document0.appendElement((String) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Object must not be null
//         //
//         verifyException("org.jsoup.helper.Validate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test228()  throws Throwable  {
      Document document0 = new Document("K?HU80rZY");
      CDataNode cDataNode0 = new CDataNode("K?HU80rZY");
      List<Node> list0 = document0.childNodes();
      document0.childNodes = list0;
      // Undeclared exception!
//      try { 
        document0.appendChild(cDataNode0);
//        fail("Expecting exception: UnsupportedOperationException");
      
//      } catch(UnsupportedOperationException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.util.Collections$UnmodifiableCollection", e);
//      }
  }

  @Test(timeout = 4000)
  public void test229()  throws Throwable  {
      Document document0 = new Document("K?HU80rZY");
      CDataNode cDataNode0 = new CDataNode("K?HU80rZY");
      cDataNode0.setParentNode(document0);
      // Undeclared exception!
//      try { 
        document0.appendChild(cDataNode0);
//        fail("Expecting exception: IndexOutOfBoundsException");
      
//      } catch(IndexOutOfBoundsException e) {
//         //
//         // Index: 0, Size: 0
//         //
//         verifyException("java.util.ArrayList", e);
//      }
  }

  @Test(timeout = 4000)
  public void test230()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("clJ`ass", "clJ`ass");
      // Undeclared exception!
//      try { 
        document0.appendChild((Node) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Object must not be null
//         //
//         verifyException("org.jsoup.helper.Validate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test231()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("class", "class");
      Element element0 = document0.head();
      element0.before((Node) document0);
      // Undeclared exception!
      document0.append("class");
  }

  @Test(timeout = 4000)
  public void test232()  throws Throwable  {
      Tag tag0 = Tag.valueOf("class");
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = new FormElement(tag0, "class", attributes0);
      // Undeclared exception!
//      try { 
        formElement0.append((String) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Object must not be null
//         //
//         verifyException("org.jsoup.helper.Validate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test233()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("basefont", "basefont");
      Parser parser0 = Parser.xmlParser();
      Document document1 = document0.parser(parser0);
      DataNode dataNode0 = new DataNode("class", "basefont");
      document1.parentNode = (Node) dataNode0;
      // Undeclared exception!
//      try { 
        document1.append("class");
//        fail("Expecting exception: ClassCastException");
      
//      } catch(ClassCastException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test234()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("tr`bTVg{@", "ge4_G7eRA{0F%ReJpqs");
      Element element0 = document0.appendTo(document0);
      // Undeclared exception!
//      try { 
        document0.after((Node) element0);
//        fail("Expecting exception: IndexOutOfBoundsException");
      
//      } catch(IndexOutOfBoundsException e) {
//         //
//         // Index: 2, Size: 1
//         //
//         verifyException("java.util.ArrayList", e);
//      }
  }

  @Test(timeout = 4000)
  public void test235()  throws Throwable  {
      Document document0 = Parser.parse("baseon", "baseon");
      document0.appendTo(document0);
      // Undeclared exception!
      document0.after("Q'2UYFWv5 oP)?a+");
  }

  @Test(timeout = 4000)
  public void test236()  throws Throwable  {
      Document document0 = Document.createShell("s>");
      TextNode textNode0 = new TextNode(":containsData(", (String) null);
      document0.setParentNode(textNode0);
      // Undeclared exception!
//      try { 
        document0.after("org.jsoup.select.Collector$FirstFinder");
//        fail("Expecting exception: ClassCastException");
      
//      } catch(ClassCastException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test237()  throws Throwable  {
      Element element0 = new Element("~l-!LxoY(v4xK");
      // Undeclared exception!
//      try { 
        element0.addClass((String) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Object must not be null
//         //
//         verifyException("org.jsoup.helper.Validate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test238()  throws Throwable  {
      Tag tag0 = Tag.valueOf("kagPH/z~/O39*`4Tvg");
      CDataNode cDataNode0 = new CDataNode("org.jsoup.nodes.Attribute");
      Attributes attributes0 = cDataNode0.attributes();
      Element element0 = null;
//      try {
        element0 = new Element(tag0, (String) null, attributes0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Object must not be null
//         //
//         verifyException("org.jsoup.helper.Validate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test239()  throws Throwable  {
      Tag tag0 = Tag.valueOf("class");
      Element element0 = null;
//      try {
        element0 = new Element(tag0, (String) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Object must not be null
//         //
//         verifyException("org.jsoup.helper.Validate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test240()  throws Throwable  {
      Element element0 = null;
//      try {
        element0 = new Element((String) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Object must not be null
//         //
//         verifyException("org.jsoup.helper.Validate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test241()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("8vb+&a*3-!Bt`rN", "8vb+&a*3-!Bt`rN");
      // Undeclared exception!
//      try { 
        document0.html((MockPrintStream) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test242()  throws Throwable  {
      Document document0 = new Document("Zlass");
      document0.html((CharArrayWriter) null);
  }

  @Test(timeout = 4000)
  public void test243()  throws Throwable  {
      Document document0 = Parser.parse("#}5&&M(v/", "~");
      document0.toggleClass("#}5&&M(v/");
      document0.toggleClass("~");
      document0.hasClass("~");
  }

  @Test(timeout = 4000)
  public void test244()  throws Throwable  {
      Document document0 = Document.createShell("org.jsoup.parser.token$character");
      Element element0 = document0.toggleClass("org.jsoup.parser.token$character");
      Set<String> set0 = element0.classNames();
      element0.classNames(set0);
  }

  @Test(timeout = 4000)
  public void test245()  throws Throwable  {
      Parser parser0 = Parser.xmlParser();
      Document document0 = parser0.parseInput("\"dPOu;", "SKIP_CHILDREN");
      document0.data();
  }

  @Test(timeout = 4000)
  public void test246()  throws Throwable  {
      Document document0 = new Document("K?HU80rZY");
      CDataNode cDataNode0 = new CDataNode("K?HU80rZY");
      document0.appendChild(cDataNode0);
      document0.hasText();
  }

  @Test(timeout = 4000)
  public void test247()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("8T|v\"%4u<U\"=fN", "8T|v\"%4u<U\"=fN");
      document0.elementSiblingIndex();
  }

  @Test(timeout = 4000)
  public void test248()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("iW WTO", "iW WTO");
      Element element0 = document0.appendElement("hR");
      element0.elementSiblingIndex();
  }

  @Test(timeout = 4000)
  public void test249()  throws Throwable  {
      Tag tag0 = Tag.valueOf("class");
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = new FormElement(tag0, "class", attributes0);
      Document document0 = Parser.parse("basefont", "basefont");
      document0.appendTo(formElement0);
      document0.nextElementSibling();
  }

  @Test(timeout = 4000)
  public void test250()  throws Throwable  {
      Tag tag0 = Tag.valueOf("class");
      Attributes attributes0 = new Attributes();
      Document document0 = Parser.parse("basefont", "basefont");
      FormElement formElement0 = new FormElement(tag0, "class", attributes0);
      Element element0 = formElement0.prependElement("basefont");
      element0.before((Node) document0);
      document0.nextElementSibling();
  }

  @Test(timeout = 4000)
  public void test251()  throws Throwable  {
      Tag tag0 = Tag.valueOf("class");
      Attributes attributes0 = new Attributes();
      Document document0 = Parser.parse("basefont", "basefont");
      FormElement formElement0 = new FormElement(tag0, "class", attributes0);
      formElement0.appendTo(document0);
      formElement0.cssSelector();
  }

  @Test(timeout = 4000)
  public void test252()  throws Throwable  {
      Document document0 = Document.createShell("");
      Element element0 = document0.head();
      element0.html("#root");
  }

  @Test(timeout = 4000)
  public void test253()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("class", "$pNLL=x");
      document0.attributes();
  }

  @Test(timeout = 4000)
  public void test254()  throws Throwable  {
      Document document0 = Document.createShell(".");
      document0.children();
  }

  @Test(timeout = 4000)
  public void test255()  throws Throwable  {
      Document document0 = Document.createShell("org.jsoup.parser.token$character");
      document0.className();
  }

  @Test(timeout = 4000)
  public void test256()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("s+", "s+");
      document0.parent();
  }

  @Test(timeout = 4000)
  public void test257()  throws Throwable  {
      Document document0 = Parser.parse("basefont", "basefont");
      Pattern pattern0 = Pattern.compile("J", 1165);
      document0.getElementsMatchingOwnText(pattern0);
  }

  @Test(timeout = 4000)
  public void test258()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("org.jsoup.nodes.Element$2", "]0#root");
      document0.ownText();
  }

  @Test(timeout = 4000)
  public void test259()  throws Throwable  {
      Document document0 = Document.createShell("");
      // Undeclared exception!
//      try { 
        document0.attr((String) null, ";&=BY>Tp5won[$Lz");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.jsoup.parser.ParseSettings", e);
//      }
  }

  @Test(timeout = 4000)
  public void test260()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("Tag name must not be empty.", "Tag name must not be empty.");
      document0.isBlock();
  }

  @Test(timeout = 4000)
  public void test261()  throws Throwable  {
      Document document0 = Parser.parse("java.lang.string@0000000112", "java.lang.string@0000000112");
      document0.empty();
  }

  @Test(timeout = 4000)
  public void test262()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("p6A, T;0^ZUhNY\"ART", "p6A, T;0^ZUhNY\"ART");
      Pattern pattern0 = Pattern.compile("MYiIJGI]", (-1843224310));
      document0.getElementsMatchingText(pattern0);
  }

  @Test(timeout = 4000)
  public void test263()  throws Throwable  {
      Document document0 = new Document("kagPH/z~/O39*`4Tvg");
      // Undeclared exception!
//      try { 
        document0.is((Evaluator) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.jsoup.nodes.Element", e);
//      }
  }

  @Test(timeout = 4000)
  public void test264()  throws Throwable  {
      Document document0 = Parser.parse("8T|v\"%4u<U\"=fN", "8T|v\"%4u<U\"=fN");
      Pattern pattern0 = Pattern.compile("");
      document0.getElementsByAttributeValueMatching("class", pattern0);
  }

  @Test(timeout = 4000)
  public void test265()  throws Throwable  {
      Document document0 = Parser.parse("GnuW%E", " sH7<>l");
      document0.id();
  }

  @Test(timeout = 4000)
  public void test266()  throws Throwable  {
      Document document0 = Parser.parse("basefont", "basefont");
      document0.classNames();
  }

  @Test(timeout = 4000)
  public void test267()  throws Throwable  {
      Document document0 = Document.createShell("zOj^gRfp!\"");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      document_OutputSettings0.outline(true);
      Document document1 = document0.outputSettings(document_OutputSettings0);
      document1.title("zOj^gRfp!\"");
      document0.html();
  }

  @Test(timeout = 4000)
  public void test268()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("iW WTO", "iW WTO");
      Element element0 = document0.appendElement("hR");
      element0.outerHtml();
  }

  @Test(timeout = 4000)
  public void test269()  throws Throwable  {
      Tag tag0 = Tag.valueOf("dfn");
      FormElement formElement0 = new FormElement(tag0, "DA.;O%7,ri2,/)k", (Attributes) null);
      MockPrintStream mockPrintStream0 = new MockPrintStream("3wPMze{cqc3a");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.outline(true);
      formElement0.outerHtmlHead(mockPrintStream0, 11, document_OutputSettings1);
  }

  @Test(timeout = 4000)
  public void test270()  throws Throwable  {
      Document document0 = Document.createShell("zOj^gRfp!\"");
      document0.title("zOj^gRfp!\"");
      document0.html();
  }

  @Test(timeout = 4000)
  public void test271()  throws Throwable  {
      Tag tag0 = Tag.valueOf("dfn");
      FormElement formElement0 = new FormElement(tag0, "dfn", (Attributes) null);
      formElement0.prependElement("dfn");
      formElement0.toString();
  }

  @Test(timeout = 4000)
  public void test272()  throws Throwable  {
      Document document0 = Parser.parse(";-C8", "*+j)n'Bal[tE$.IkqH&");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      document_OutputSettings0.prettyPrint(false);
      Document document1 = document0.outputSettings(document_OutputSettings0);
      document1.html();
  }

  @Test(timeout = 4000)
  public void test273()  throws Throwable  {
      Tag tag0 = Tag.valueOf("textarea");
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = new FormElement(tag0, "textarea", attributes0);
      formElement0.val("ncqGw*_9|Bs]o");
  }

  @Test(timeout = 4000)
  public void test274()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      Tag tag0 = Tag.valueOf(")x#c'Az@nE&I");
      FormElement formElement0 = new FormElement(tag0, "bsefont", attributes0);
      Element element0 = formElement0.prependElement("textarea");
      element0.val();
  }

  @Test(timeout = 4000)
  public void test275()  throws Throwable  {
      Parser parser0 = Parser.htmlParser();
      Document document0 = parser0.parseInput("java.lang.string@0000000038", "java.lang.string@0000000038");
      Element element0 = document0.toggleClass("java.lang.string@0000000038");
      element0.addClass("java.lang.string@0000000038");
      element0.toggleClass("java.lang.string@0000000038");
  }

  @Test(timeout = 4000)
  public void test276()  throws Throwable  {
      Document document0 = Parser.parse("#}5&&M(v/", "~");
      document0.toggleClass("#}5&&M(v/");
      Element element0 = document0.toggleClass("~");
      element0.getElementsByClass("~");
  }

  @Test(timeout = 4000)
  public void test277()  throws Throwable  {
      Parser parser0 = Parser.htmlParser();
      Document document0 = parser0.parseInput("H^", "H^");
      document0.toggleClass("H^");
      document0.toggleClass("java.lang.string@0000000038 unexpected count of entities loaded");
      document0.hasClass("java.lang.string@0000000038");
  }

  @Test(timeout = 4000)
  public void test278()  throws Throwable  {
      Parser parser0 = Parser.htmlParser();
      Document document0 = parser0.parseInput("|XA9I;cW;1| ,7", "|XA9I;cW;1| ,7");
      document0.toggleClass("Zlass");
      document0.toggleClass(" \"");
      document0.hasClass("!1rO^s~@T");
  }

  @Test(timeout = 4000)
  public void test279()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("</", "</");
      document0.toggleClass("</");
      document0.addClass("");
      document0.hasClass("3GUH6AeX6c'&/jAF%");
  }

  @Test(timeout = 4000)
  public void test280()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("</", "</");
      document0.toggleClass("</");
      document0.hasClass("3GUH6AeX6c'&/jAF%");
  }

  @Test(timeout = 4000)
  public void test281()  throws Throwable  {
      Document document0 = Document.createShell("org.jsoup.parser.token$character");
      Element element0 = document0.toggleClass("Bhe'H<*");
      element0.hasClass("org.jsoup.parser.token$character");
  }

  @Test(timeout = 4000)
  public void test282()  throws Throwable  {
      Document document0 = Document.createShell("M?HU80ZY");
      Element element0 = document0.toggleClass("M?HU80ZY");
      element0.hasClass("User agent must not be null");
  }

  @Test(timeout = 4000)
  public void test283()  throws Throwable  {
      Document document0 = Parser.parse("bbsefont", "bbsefont");
      document0.hasClass("bbsefont");
  }

  @Test(timeout = 4000)
  public void test284()  throws Throwable  {
      Document document0 = new Document("K?HU80rZY");
      CDataNode cDataNode0 = new CDataNode("K?HU80rZY");
      Element element0 = document0.appendChild(cDataNode0);
      element0.data();
  }

  @Test(timeout = 4000)
  public void test285()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("Zlass", "Zlass");
      DataNode dataNode0 = new DataNode("ddfJRp(7xuyqB+U42", "Zlass");
      document0.appendChild(dataNode0);
      document0.data();
  }

  @Test(timeout = 4000)
  public void test286()  throws Throwable  {
      Document document0 = new Document("kagPH/z~/O39*`4Tvg");
      DataNode dataNode0 = new DataNode("kagPH/z~/O39*`4Tvg", "kagPH/z~/O39*`4Tvg");
      Element element0 = document0.appendChild(dataNode0);
      element0.hasText();
  }

  @Test(timeout = 4000)
  public void test287()  throws Throwable  {
      Document document0 = new Document("clJ`ass");
      CDataNode cDataNode0 = new CDataNode((String) null);
      Element element0 = document0.appendChild(cDataNode0);
      element0.hasText();
  }

  @Test(timeout = 4000)
  public void test288()  throws Throwable  {
      Document document0 = Document.createShell("");
      document0.hasText();
  }

  @Test(timeout = 4000)
  public void test289()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("</", "</");
      document0.setParentNode(document0);
      document0.text();
  }

  @Test(timeout = 4000)
  public void test290()  throws Throwable  {
      Element.preserveWhitespace((Node) null);
  }

  @Test(timeout = 4000)
  public void test291()  throws Throwable  {
      Document document0 = new Document("i-Xu");
      document0.appendElement("br");
      document0.getElementsMatchingOwnText("hR");
  }

  @Test(timeout = 4000)
  public void test292()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("Zlass", "Zlass");
      document0.title("java.lang.string@0000000076");
      document0.text();
  }

  @Test(timeout = 4000)
  public void test293()  throws Throwable  {
      Document document0 = Document.createShell(".");
      Comment comment0 = new Comment(".");
      Node[] nodeArray0 = new Node[2];
      nodeArray0[0] = (Node) comment0;
      nodeArray0[1] = (Node) comment0;
      document0.insertChildren(0, nodeArray0);
      document0.getElementsMatchingOwnText(".");
  }

  @Test(timeout = 4000)
  public void test294()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("br", "br");
      document0.appendElement("br");
      document0.text();
  }

  @Test(timeout = 4000)
  public void test295()  throws Throwable  {
      Document document0 = Document.createShell("s+");
      Element element0 = document0.head();
      element0.before("#>l7a8t^c(@#_");
      document0.getElementsMatchingText("html > head:nth-child(3)");
  }

  @Test(timeout = 4000)
  public void test296()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("class", "class");
      Element element0 = document0.append("<html>\n <head></head>\n <body>\n  class\n  <#root>\n   <html>\n    <head></head>\n    <body>\n     class\n    </body>\n   </html>\n  </#root>\n </body>\n</html>");
      element0.getElementsContainingText("D43li}*V/yS:^IYyy");
  }

  @Test(timeout = 4000)
  public void test297()  throws Throwable  {
      Document document0 = Parser.parse("8T|v\"%4u<U\"=fN", "8T|v\"%4u<U\"=fN");
      document0.getElementById("*la-shs");
  }

  @Test(timeout = 4000)
  public void test298()  throws Throwable  {
      Tag tag0 = Tag.valueOf("class");
      Attributes attributes0 = new Attributes();
      Document document0 = Parser.parse("basefont", "basefont");
      FormElement formElement0 = new FormElement(tag0, "class", attributes0);
      document0.appendTo(formElement0);
      document0.lastElementSibling();
  }

  @Test(timeout = 4000)
  public void test299()  throws Throwable  {
      Document document0 = Parser.parse("z(fa%]J{", "dfn");
      document0.appendChild(document0);
      document0.firstElementSibling();
  }

  @Test(timeout = 4000)
  public void test300()  throws Throwable  {
      Tag tag0 = Tag.valueOf("class");
      Attributes attributes0 = new Attributes();
      Document document0 = Parser.parseBodyFragmentRelaxed("basefont", "basefont");
      FormElement formElement0 = new FormElement(tag0, "class", attributes0);
      Element element0 = formElement0.prependElement("basefont");
      Element element1 = document0.appendTo(element0);
      element1.firstElementSibling();
  }

  @Test(timeout = 4000)
  public void test301()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("6", "input");
      Element element0 = document0.appendTo(document0);
      element0.previousElementSiblings();
  }

  @Test(timeout = 4000)
  public void test302()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("H^", "H^");
      document0.setParentNode(document0);
      document0.previousElementSibling();
  }

  @Test(timeout = 4000)
  public void test303()  throws Throwable  {
      Document document0 = Parser.parse("basefont", "basefont");
      document0.previousElementSibling();
  }

  @Test(timeout = 4000)
  public void test304()  throws Throwable  {
      Document document0 = Parser.parse("8T|v\"%4u<U\"=fN", "8T|v\"%4u<U\"=fN");
      Element element0 = document0.head();
      Elements elements0 = element0.nextElementSiblings();
      assertEquals("8T|v\"%4u<U\"=fN", element0.baseUri());
      assertEquals(1, elements0.size());
  }

  @Test(timeout = 4000)
  public void test305()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("k", "k");
      document0.nextElementSibling();
      assertEquals(1, document0.childNodeSize());
      assertEquals("k", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test306()  throws Throwable  {
      Document document0 = Document.createShell(".");
      document0.siblingElements();
      assertEquals(1, document0.childNodeSize());
      assertEquals(".", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test307()  throws Throwable  {
      Tag tag0 = Tag.valueOf("class");
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = new FormElement(tag0, "class", attributes0);
      Document document0 = Parser.parse("baseon", "baseon");
      formElement0.appendTo(document0);
      formElement0.siblingElements();
      assertEquals(1, formElement0.siblingIndex());
  }

  @Test(timeout = 4000)
  public void test308()  throws Throwable  {
      Document document0 = Document.createShell("s+");
      Element element0 = document0.head();
      assertEquals(0, element0.siblingIndex());
      
      element0.before("#>l7a8t^c(@#_");
      String string0 = element0.cssSelector();
      assertEquals("html > head:nth-child(3)", string0);
  }

  @Test(timeout = 4000)
  public void test309()  throws Throwable  {
      Document document0 = Document.createShell("s+");
      Element element0 = document0.head();
      String string0 = element0.cssSelector();
      assertEquals("s+", element0.baseUri());
      assertEquals("html > head", string0);
  }

  @Test(timeout = 4000)
  public void test310()  throws Throwable  {
      Document document0 = Document.createShell("");
      document0.addClass("");
      document0.cssSelector();
      assertEquals(1, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test311()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("select", "*N(Hz%i;");
      Node[] nodeArray0 = new Node[3];
      // Undeclared exception!
//      try { 
        document0.insertChildren(5998, nodeArray0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Insert position out of bounds.
//         //
//         verifyException("org.jsoup.helper.Validate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test312()  throws Throwable  {
      Tag tag0 = Tag.valueOf("html");
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = new FormElement(tag0, "html", attributes0);
      Node[] nodeArray0 = new Node[1];
      // Undeclared exception!
//      try { 
        formElement0.insertChildren((-1370), nodeArray0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Insert position out of bounds.
//         //
//         verifyException("org.jsoup.helper.Validate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test313()  throws Throwable  {
      Tag tag0 = Tag.valueOf("class");
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = new FormElement(tag0, "class", attributes0);
      Elements elements0 = formElement0.nextElementSiblings();
      // Undeclared exception!
//      try { 
        formElement0.insertChildren(59, (Collection<? extends Node>) elements0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Insert position out of bounds.
//         //
//         verifyException("org.jsoup.helper.Validate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test314()  throws Throwable  {
      Element element0 = new Element("~l-!LxoY(v4xK");
      List<DataNode> list0 = element0.dataNodes();
      // Undeclared exception!
//      try { 
        element0.insertChildren((-2290), (Collection<? extends Node>) list0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Insert position out of bounds.
//         //
//         verifyException("org.jsoup.helper.Validate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test315()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("Zlass", "Zlass");
      Elements elements0 = document0.previousElementSiblings();
      Element element0 = document0.insertChildren((-1), (Collection<? extends Node>) elements0);
      assertEquals("Zlass", element0.baseUri());
      assertEquals(1, element0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test316()  throws Throwable  {
      Parser parser0 = Parser.htmlParser();
      Document document0 = parser0.parseInput("]i0!QK=(}3,t", " > ");
      List<DataNode> list0 = document0.dataNodes();
      Element element0 = document0.insertChildren(0, (Collection<? extends Node>) list0);
      assertEquals(0, list0.size());
      assertEquals(" > ", element0.baseUri());
  }

  @Test(timeout = 4000)
  public void test317()  throws Throwable  {
      Document document0 = new Document("c/QtAhS7&1~u5r");
      document0.prepend("c/QtAhS7&1~u5r");
      document0.textNodes();
      assertEquals(1, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test318()  throws Throwable  {
      Document document0 = Document.createShell("s>");
      List<TextNode> list0 = document0.textNodes();
      assertEquals("s>", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test319()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("H^", "H^");
      Elements elements0 = document0.getElementsByIndexGreaterThan(1409);
      assertEquals("H^", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals(0, elements0.size());
  }

  @Test(timeout = 4000)
  public void test320()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("textarea", "textarea");
      Element element0 = document0.selectFirst("html");
      assertEquals("textarea", element0.baseUri());
  }

  @Test(timeout = 4000)
  public void test321()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("7N.(rR-HGB7iH", "7N.(rR-HGB7iH");
      document0.getElementsByTag("z_n$rl");
      assertEquals(1, document0.childNodeSize());
      assertEquals("7N.(rR-HGB7iH", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test322()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("M?HU80ZY", "M?HU80ZY");
      document0.getAllElements();
      assertEquals("M?HU80ZY", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test323()  throws Throwable  {
      Document document0 = Document.createShell("s+");
      // Undeclared exception!
//      try { 
        document0.before("#>l7a8t^c(@#_");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Object must not be null
//         //
//         verifyException("org.jsoup.helper.Validate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test324()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("8T|v\"%4u<U\"=fN", "8T|v\"%4u<U\"=fN");
      document0.getElementsByAttribute(",A,");
      assertEquals(1, document0.childNodeSize());
      assertEquals("8T|v\"%4u<U\"=fN", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test325()  throws Throwable  {
      Document document0 = Parser.parse("8T|v\"%4u<U\"=fN", "8T|v\"%4u<U\"=fN");
      document0.getElementsByAttributeValueNot("8T|v\"%4u<U\"=fN", ",A,");
      assertEquals("8T|v\"%4u<U\"=fN", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test326()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("s+", "s+");
      document0.appendTo(document0);
      document0.parent();
      assertEquals(1, document0.siblingIndex());
  }

  @Test(timeout = 4000)
  public void test327()  throws Throwable  {
      Parser parser0 = Parser.htmlParser();
      Document document0 = parser0.parseInput("Zlass", "Zlass");
      Element element0 = document0.shallowClone();
      assertEquals("Zlass", element0.baseUri());
  }

  @Test(timeout = 4000)
  public void test328()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("select", "*N(Hz%i;");
      assertEquals("*N(Hz%i;", document0.baseUri());
      
      document0.doSetBaseUri("");
      assertEquals(1, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test329()  throws Throwable  {
      Document document0 = Parser.parse("MOHU8&Z", "MOHU8&Z");
      // Undeclared exception!
//      try { 
        document0.after((Node) document0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Object must not be null
//         //
//         verifyException("org.jsoup.helper.Validate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test330()  throws Throwable  {
      Document document0 = Parser.parse("bbsefont", "bbsefont");
      // Undeclared exception!
//      try { 
        document0.getElementsByAttributeValueContaining("\"", "\"");
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test331()  throws Throwable  {
      Document document0 = new Document("kagPH/z~/O39*`4Tvg");
      // Undeclared exception!
//      try { 
        document0.getElementsByClass((String) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // String must not be empty
//         //
//         verifyException("org.jsoup.helper.Validate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test332()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment(";7", ";7");
      // Undeclared exception!
//      try { 
        document0.getElementsByAttributeValueEnding("", "");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // String must not be empty
//         //
//         verifyException("org.jsoup.helper.Validate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test333()  throws Throwable  {
      Document document0 = Parser.parse("org.jsoup.internal.StringUtil", "org.jsoup.internal.StringUtil");
      document0.is("L7qA6f");
      assertEquals("org.jsoup.internal.StringUtil", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test334()  throws Throwable  {
      Document document0 = Document.createShell("org.jsoup.parser.token$character");
      document0.getElementsByAttributeValueMatching("org.jsoup.parser.token$character", "org.jsoup.parser.token$character");
      assertEquals(1, document0.childNodeSize());
      assertEquals("org.jsoup.parser.token$character", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test335()  throws Throwable  {
      Document document0 = Parser.parse(".", "bZ?,nl~11*bBvR[");
      Elements elements0 = document0.getElementsByIndexEquals(0);
      assertEquals(3, elements0.size());
      assertEquals("bZ?,nl~11*bBvR[", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test336()  throws Throwable  {
      Document document0 = Parser.parse("8T|v\"%4u<U\"=fN", "8T|v\"%4u<U\"=fN");
      Elements elements0 = document0.getElementsByIndexLessThan((-1));
      assertEquals("8T|v\"%4u<U\"=fN", document0.baseUri());
      assertTrue(elements0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test337()  throws Throwable  {
      Document document0 = Document.createShell("s>");
      // Undeclared exception!
//      try { 
        document0.after("org.jsoup.select.Collector$FirstFinder");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Object must not be null
//         //
//         verifyException("org.jsoup.helper.Validate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test338()  throws Throwable  {
      Document document0 = Parser.parse("iW WTO", "iW WTO");
      Elements elements0 = document0.getElementsMatchingOwnText("iW WTO");
      assertEquals(1, elements0.size());
      assertEquals("iW WTO", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test339()  throws Throwable  {
      Document document0 = Document.createShell("[,UZxVQ%#6>Fj");
      // Undeclared exception!
//      try { 
        document0.select("[,UZxVQ%#6>Fj");
//        fail("Expecting exception: UnknownFormatConversionException");
      
//      } catch(UnknownFormatConversionException e) {
//         //
//         // Conversion = '#'
//         //
//         verifyException("java.util.Formatter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test340()  throws Throwable  {
      Tag tag0 = Tag.valueOf("class");
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = new FormElement(tag0, "class", attributes0);
      formElement0.getElementsByAttributeValueStarting("Tag name must not be empty.", "Tag name must not be empty.");
      assertEquals("class", formElement0.baseUri());
  }

  @Test(timeout = 4000)
  public void test341()  throws Throwable  {
      Document document0 = Document.createShell("Tag name must not be empty.");
      // Undeclared exception!
//      try { 
        document0.getElementsByAttributeValue("Tag name must not be empty.", "");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // String must not be empty
//         //
//         verifyException("org.jsoup.helper.Validate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test342()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("br", "br");
      document0.wholeText();
      assertEquals("br", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test343()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("class", "class");
      // Undeclared exception!
//      try { 
        document0.before((Node) document0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Object must not be null
//         //
//         verifyException("org.jsoup.helper.Validate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test344()  throws Throwable  {
      Element element0 = new Element("bbsefont");
      String string0 = element0.baseUri();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test345()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("lhrK|%Lk", "Ulj:@|roQnNt2jm200");
      Elements elements0 = document0.getElementsContainingOwnText("Ulj:@|roQnNt2jm200");
      assertEquals("Ulj:@|roQnNt2jm200", document0.baseUri());
      assertTrue(elements0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test346()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment(";7", ";7");
      document0.dataset();
      assertEquals(1, document0.childNodeSize());
      assertEquals(";7", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test347()  throws Throwable  {
      Document document0 = Document.createShell("");
      Element element0 = document0.text("checkbox");
      boolean boolean0 = element0.hasText();
      assertTrue(boolean0);
      assertEquals(1, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test348()  throws Throwable  {
      Document document0 = new Document("java.lang.string@0000000038");
      Element element0 = document0.tagName("footer");
      assertEquals("footer", element0.tagName());
  }

  @Test(timeout = 4000)
  public void test349()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("</", "</");
      // Undeclared exception!
//      try { 
        document0.child(19);
//        fail("Expecting exception: IndexOutOfBoundsException");
      
//      } catch(IndexOutOfBoundsException e) {
//         //
//         // Index: 19, Size: 1
//         //
//         verifyException("java.util.ArrayList", e);
//      }
  }

  @Test(timeout = 4000)
  public void test350()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment(" ", "<");
      Element element0 = document0.appendText("<");
      String string0 = element0.text();
      assertEquals(2, document0.childNodeSize());
      assertEquals("<", string0);
  }

  @Test(timeout = 4000)
  public void test351()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("5G@*zT", "class");
      // Undeclared exception!
//      try { 
        document0.wrap("02{J5)BdUd?");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.jsoup.nodes.Node", e);
//      }
  }
}
