/*
 * This file was automatically generated by EvoSuite
 * Fri Oct 22 21:53:30 GMT 2021
 */

package org.jsoup.parser;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.Reader;
import java.io.StringReader;
import java.nio.CharBuffer;
import java.util.ArrayList;
import java.util.List;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.jsoup.nodes.Attributes;
import org.jsoup.nodes.CDataNode;
import org.jsoup.nodes.Document;
import org.jsoup.nodes.Element;
import org.jsoup.nodes.FormElement;
import org.jsoup.nodes.Node;
import org.jsoup.nodes.PseudoTextElement;
import org.jsoup.parser.CharacterReader;
import org.jsoup.parser.HtmlTreeBuilder;
import org.jsoup.parser.HtmlTreeBuilderState;
import org.jsoup.parser.ParseErrorList;
import org.jsoup.parser.ParseSettings;
import org.jsoup.parser.Parser;
import org.jsoup.parser.Tag;
import org.jsoup.parser.Token;
import org.jsoup.parser.Tokeniser;
import org.jsoup.parser.XmlTreeBuilder;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class HtmlTreeBuilder_ESTest extends HtmlTreeBuilder_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      StringReader stringReader0 = new StringReader("{A)5_ck3w");
      Parser parser0 = Parser.xmlParser();
      Document document0 = htmlTreeBuilder0.parse(stringReader0, "{A)5_ck3w", parser0);
      htmlTreeBuilder0.pushActiveFormattingElements(document0);
      htmlTreeBuilder0.pushActiveFormattingElements(document0);
      Element element0 = htmlTreeBuilder0.getActiveFormattingElement("{A)5_ck3w");
      assertNull(element0);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      StringReader stringReader0 = new StringReader("stle");
      Parser parser0 = Parser.xmlParser();
      Document document0 = htmlTreeBuilder0.parse(stringReader0, "stle", parser0);
      htmlTreeBuilder0.pushActiveFormattingElements(document0);
      htmlTreeBuilder0.pushActiveFormattingElements(document0);
      htmlTreeBuilder0.removeFromActiveFormattingElements(document0);
      assertEquals(1, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      StringReader stringReader0 = new StringReader("stle");
      Parser parser0 = Parser.xmlParser();
      Document document0 = htmlTreeBuilder0.parse(stringReader0, "stle", parser0);
      Document document1 = htmlTreeBuilder0.parse(stringReader0, "stle", parser0);
      htmlTreeBuilder0.pushActiveFormattingElements(document1);
      htmlTreeBuilder0.pushActiveFormattingElements(document0);
      htmlTreeBuilder0.reconstructFormattingElements();
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      StringReader stringReader0 = new StringReader("Je8UB~Ag`d-Lb|44Z6r^");
      Parser parser0 = Parser.xmlParser();
      Document document0 = htmlTreeBuilder0.parse(stringReader0, "Je8UB~Ag`d-Lb|44Z6r^", parser0);
      htmlTreeBuilder0.pushActiveFormattingElements(document0);
      htmlTreeBuilder0.pushActiveFormattingElements(document0);
      htmlTreeBuilder0.clearFormattingElementsToLastMarker();
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Parser parser0 = Parser.xmlParser();
      htmlTreeBuilder0.parseFragment("EOF", (Element) null, "AfterAfterFrameset", parser0);
      Token.Comment token_Comment0 = new Token.Comment();
      htmlTreeBuilder0.insert(token_Comment0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      StringReader stringReader0 = new StringReader("style");
      Parser parser0 = Parser.xmlParser();
      htmlTreeBuilder0.parse(stringReader0, "style", parser0);
      HtmlTreeBuilderState htmlTreeBuilderState0 = HtmlTreeBuilderState.InSelectInTable;
      htmlTreeBuilder0.error(htmlTreeBuilderState0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      HtmlTreeBuilderState htmlTreeBuilderState0 = HtmlTreeBuilderState.Text;
      htmlTreeBuilder0.transition(htmlTreeBuilderState0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      htmlTreeBuilder0.setFormElement((FormElement) null);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      htmlTreeBuilder0.newPendingTableCharacters();
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      htmlTreeBuilder0.markInsertionMode();
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      htmlTreeBuilder0.generateImpliedEndTags();
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      StringReader stringReader0 = new StringReader("select");
      Parser parser0 = Parser.xmlParser();
      Document document0 = htmlTreeBuilder0.parse(stringReader0, "&J''r/bo4:", parser0);
      htmlTreeBuilder0.push(document0);
      htmlTreeBuilder0.replaceOnStack(document0, document0);
      assertEquals(1, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Document document0 = Document.createShell("mY*7g:");
      Parser parser0 = Parser.htmlParser();
      htmlTreeBuilder0.parseFragment("mY*7g:", document0, "?FgYB4y?x6,o>Ts[6!*", parser0);
      htmlTreeBuilder0.insertMarkerToFormattingElements();
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Parser parser0 = Parser.xmlParser();
      htmlTreeBuilder0.parseFragment("EOF", (Element) null, "AfterAfterFrameset", parser0);
      htmlTreeBuilder0.clearStackToTableRowContext();
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      StringReader stringReader0 = new StringReader("style");
      Parser parser0 = Parser.htmlParser();
      htmlTreeBuilder0.parse(stringReader0, "style", parser0);
      String string0 = htmlTreeBuilder0.toString();
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Parser parser0 = Parser.htmlParser();
      StringReader stringReader0 = new StringReader("");
      htmlTreeBuilder0.parse(stringReader0, "", parser0);
      htmlTreeBuilder0.state();
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      StringReader stringReader0 = new StringReader("`9");
      Parser parser0 = Parser.xmlParser();
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Document document0 = htmlTreeBuilder0.parse(stringReader0, "`9", parser0);
      Element element0 = document0.body();
      htmlTreeBuilder0.pushActiveFormattingElements(element0);
      Element element1 = htmlTreeBuilder0.removeLastFormattingElement();
      assertEquals(1, element1.siblingIndex());
      assertNotNull(element1);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      StringReader stringReader0 = new StringReader("stle");
      Parser parser0 = Parser.xmlParser();
      Document document0 = htmlTreeBuilder0.parse(stringReader0, "stle", parser0);
      htmlTreeBuilder0.pushActiveFormattingElements(document0);
      htmlTreeBuilder0.reconstructFormattingElements();
      Element element0 = htmlTreeBuilder0.removeLastFormattingElement();
      assertNotNull(element0);
      assertEquals(1, element0.siblingIndex());
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      StringReader stringReader0 = new StringReader("Vsty'e");
      Parser parser0 = Parser.htmlParser();
      Document document0 = htmlTreeBuilder0.parse(stringReader0, "", parser0);
      htmlTreeBuilder0.pushActiveFormattingElements(document0);
      htmlTreeBuilder0.reconstructFormattingElements();
      Element element0 = htmlTreeBuilder0.lastFormattingElement();
      boolean boolean0 = htmlTreeBuilder0.removeFromStack(element0);
      assertEquals(1, element0.siblingIndex());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      StringReader stringReader0 = new StringReader("stle");
      Parser parser0 = Parser.xmlParser();
      htmlTreeBuilder0.parse(stringReader0, "stle", parser0);
      Token.EOF token_EOF0 = new Token.EOF();
      Token.TokenType token_TokenType0 = Token.TokenType.Doctype;
      token_EOF0.type = token_TokenType0;
      HtmlTreeBuilderState htmlTreeBuilderState0 = HtmlTreeBuilderState.InRow;
      boolean boolean0 = htmlTreeBuilder0.process(token_EOF0, htmlTreeBuilderState0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      StringReader stringReader0 = new StringReader("stle");
      Parser parser0 = Parser.xmlParser();
      htmlTreeBuilder0.parse(stringReader0, "stle", parser0);
      Token.Doctype token_Doctype0 = new Token.Doctype();
      boolean boolean0 = htmlTreeBuilder0.process(token_Doctype0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      StringReader stringReader0 = new StringReader("%9j+f:(");
      Parser parser0 = Parser.htmlParser();
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      htmlTreeBuilder0.parse(stringReader0, "%9j+f:(", parser0);
      htmlTreeBuilder0.push((Element) null);
      Element element0 = htmlTreeBuilder0.pop();
      assertNull(element0);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      StringReader stringReader0 = new StringReader("stle");
      Parser parser0 = Parser.xmlParser();
      Document document0 = htmlTreeBuilder0.parse(stringReader0, "stle", parser0);
      htmlTreeBuilder0.push(document0);
      Element element0 = htmlTreeBuilder0.pop();
      assertEquals(1, element0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      StringReader stringReader0 = new StringReader("stle");
      Parser parser0 = Parser.xmlParser();
      Document document0 = htmlTreeBuilder0.parse(stringReader0, "stle", parser0);
      htmlTreeBuilder0.pushActiveFormattingElements(document0);
      htmlTreeBuilder0.reconstructFormattingElements();
      Element element0 = htmlTreeBuilder0.pop();
      assertEquals(1, element0.siblingIndex());
      assertFalse(element0.isBlock());
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      StringReader stringReader0 = new StringReader("stle");
      Parser parser0 = Parser.xmlParser();
      htmlTreeBuilder0.parse(stringReader0, "stle", parser0);
      Element element0 = htmlTreeBuilder0.pop();
      assertEquals(1, element0.siblingIndex());
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      htmlTreeBuilder0.originalState();
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      StringReader stringReader0 = new StringReader("stle");
      Parser parser0 = Parser.xmlParser();
      Document document0 = htmlTreeBuilder0.parse(stringReader0, "stle", parser0);
      htmlTreeBuilder0.push(document0);
      htmlTreeBuilder0.onStack(document0);
      assertEquals(1, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Parser parser0 = Parser.xmlParser();
      Document document0 = parser0.parseInput("wctwv", "wctwv");
      List<Node> list0 = htmlTreeBuilder0.parseFragment("Character", document0, "missing semicolon", parser0);
      assertEquals(1, list0.size());
      
      boolean boolean0 = htmlTreeBuilder0.onStack(document0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      StringReader stringReader0 = new StringReader("style");
      Parser parser0 = Parser.htmlParser();
      htmlTreeBuilder0.parse(stringReader0, "style", parser0);
      Element element0 = htmlTreeBuilder0.lastFormattingElement();
      assertNull(element0);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      StringReader stringReader0 = new StringReader(".Y2");
      Parser parser0 = Parser.htmlParser();
      htmlTreeBuilder0.parse(stringReader0, ">na\"h", parser0);
      Element element0 = htmlTreeBuilder0.insertStartTag("plaintext");
      htmlTreeBuilder0.pushActiveFormattingElements(element0);
      Element element1 = htmlTreeBuilder0.lastFormattingElement();
      assertNotNull(element1);
      assertEquals(1, element1.siblingIndex());
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      XmlTreeBuilder xmlTreeBuilder0 = new XmlTreeBuilder();
      Document document0 = xmlTreeBuilder0.parse("Phf", "Phf");
      boolean boolean0 = htmlTreeBuilder0.isSpecial(document0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      StringReader stringReader0 = new StringReader("style");
      Parser parser0 = Parser.htmlParser();
      Document document0 = htmlTreeBuilder0.parse(stringReader0, "style", parser0);
      boolean boolean0 = htmlTreeBuilder0.isInActiveFormattingElements(document0);
      assertEquals(1, document0.childNodeSize());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Parser parser0 = new Parser(htmlTreeBuilder0);
      List<Node> list0 = htmlTreeBuilder0.parseFragment("details", (Element) null, "details", parser0);
      assertEquals(1, list0.size());
      
      boolean boolean0 = htmlTreeBuilder0.isFragmentParsing();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      boolean boolean0 = htmlTreeBuilder0.isFosterInserts();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Attributes attributes0 = new Attributes();
      StringReader stringReader0 = new StringReader("foot");
      Parser parser0 = Parser.xmlParser();
      htmlTreeBuilder0.parse(stringReader0, "foot", parser0);
      htmlTreeBuilder0.insertStartTag("qz!,Mu/jH");
      Token.StartTag token_StartTag0 = new Token.StartTag();
      Token.StartTag token_StartTag1 = token_StartTag0.nameAttr("qz!,Mu/jH", attributes0);
      FormElement formElement0 = htmlTreeBuilder0.insertForm(token_StartTag1, false);
      assertEquals(0, formElement0.siblingIndex());
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      StringReader stringReader0 = new StringReader("listing");
      Parser parser0 = Parser.htmlParser();
      htmlTreeBuilder0.parse(stringReader0, "listing", parser0);
      htmlTreeBuilder0.insertStartTag("BNy!Lx");
      Token.StartTag token_StartTag0 = new Token.StartTag();
      Attributes attributes0 = new Attributes();
      Token.StartTag token_StartTag1 = token_StartTag0.nameAttr("VV~5Oo^j5KZ+*`f", attributes0);
      Element element0 = htmlTreeBuilder0.insertEmpty(token_StartTag1);
      assertEquals(0, element0.siblingIndex());
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      StringReader stringReader0 = new StringReader("%?");
      Parser parser0 = Parser.xmlParser();
      htmlTreeBuilder0.parse(stringReader0, "dfn", parser0);
      Token.StartTag token_StartTag0 = new Token.StartTag();
      CDataNode cDataNode0 = new CDataNode("&m?Hk(}3&mg\"g?");
      Attributes attributes0 = cDataNode0.attributes();
      Token.StartTag token_StartTag1 = token_StartTag0.nameAttr("tfoot", attributes0);
      Element element0 = htmlTreeBuilder0.insertEmpty(token_StartTag1);
      assertEquals(1, element0.siblingIndex());
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      StringReader stringReader0 = new StringReader("%?");
      Parser parser0 = Parser.xmlParser();
      htmlTreeBuilder0.parse(stringReader0, "%?", parser0);
      Token.StartTag token_StartTag0 = new Token.StartTag();
      token_StartTag0.name("?bH?gKuI5Mi-8");
      htmlTreeBuilder0.insertStartTag("s=_bL;4[5;c");
      Element element0 = htmlTreeBuilder0.insert(token_StartTag0);
      assertEquals(0, element0.siblingIndex());
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      StringReader stringReader0 = new StringReader("%?");
      Parser parser0 = Parser.xmlParser();
      htmlTreeBuilder0.parse(stringReader0, "%?", parser0);
      Token.StartTag token_StartTag0 = new Token.StartTag();
      token_StartTag0.name("?bH?gKuI5Mi-8");
      Element element0 = htmlTreeBuilder0.insert(token_StartTag0);
      assertEquals(1, element0.siblingIndex());
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      StringReader stringReader0 = new StringReader("style");
      Parser parser0 = Parser.htmlParser();
      htmlTreeBuilder0.parse(stringReader0, "style", parser0);
      Token.StartTag token_StartTag0 = new Token.StartTag();
      CDataNode cDataNode0 = new CDataNode("|S;PU})ol");
      Attributes attributes0 = cDataNode0.attributes();
      Token.StartTag token_StartTag1 = token_StartTag0.nameAttr("style", attributes0);
      Element element0 = htmlTreeBuilder0.insert(token_StartTag1);
      assertEquals(1, element0.siblingIndex());
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      StringReader stringReader0 = new StringReader("stle");
      Parser parser0 = Parser.xmlParser();
      htmlTreeBuilder0.parse(stringReader0, "stle", parser0);
      Element element0 = htmlTreeBuilder0.insertStartTag("stle");
      assertEquals(1, element0.siblingIndex());
      
      boolean boolean0 = htmlTreeBuilder0.inTableScope("stle");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      StringReader stringReader0 = new StringReader("stle");
      Parser parser0 = Parser.xmlParser();
      htmlTreeBuilder0.parse(stringReader0, "stle", parser0);
      Element element0 = htmlTreeBuilder0.insertStartTag("object");
      assertEquals(1, element0.siblingIndex());
      
      String[] stringArray0 = new String[9];
      stringArray0[4] = "object";
      boolean boolean0 = htmlTreeBuilder0.inScope(stringArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Parser parser0 = new Parser(htmlTreeBuilder0);
      Document document0 = parser0.parseInput("/t?fnQCS$2\"2zZ[*N1r", "/t?fnQCS$2\"2zZ[*N1r");
      assertEquals(1, document0.childNodeSize());
      
      String[] stringArray0 = new String[0];
      boolean boolean0 = htmlTreeBuilder0.inScope(stringArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      StringReader stringReader0 = new StringReader("stle");
      Parser parser0 = Parser.xmlParser();
      htmlTreeBuilder0.parse(stringReader0, "stle", parser0);
      Element element0 = htmlTreeBuilder0.insertStartTag("object");
      assertEquals(1, element0.siblingIndex());
      
      String[] stringArray0 = new String[0];
      boolean boolean0 = htmlTreeBuilder0.inScope("object", stringArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      StringReader stringReader0 = new StringReader("Q=>dtI");
      Parser parser0 = Parser.htmlParser();
      htmlTreeBuilder0.parse(stringReader0, "Q=>dtI", parser0);
      Element element0 = htmlTreeBuilder0.insertStartTag("listing");
      assertEquals(1, element0.siblingIndex());
      
      boolean boolean0 = htmlTreeBuilder0.inScope("listing");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      StringReader stringReader0 = new StringReader("style");
      Parser parser0 = Parser.htmlParser();
      Document document0 = htmlTreeBuilder0.parse(stringReader0, "style", parser0);
      assertEquals(1, document0.childNodeSize());
      
      boolean boolean0 = htmlTreeBuilder0.inScope("qR\u0006o6SNfbp{w");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      StringReader stringReader0 = new StringReader("E");
      Parser parser0 = Parser.htmlParser();
      htmlTreeBuilder0.parse(stringReader0, "E", parser0);
      Element element0 = htmlTreeBuilder0.insertStartTag("script");
      assertEquals(1, element0.siblingIndex());
      
      boolean boolean0 = htmlTreeBuilder0.inListItemScope("script");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      StringReader stringReader0 = new StringReader("stle");
      Parser parser0 = Parser.xmlParser();
      htmlTreeBuilder0.parse(stringReader0, "stle", parser0);
      boolean boolean0 = htmlTreeBuilder0.inListItemScope("h6");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      StringReader stringReader0 = new StringReader("style");
      Parser parser0 = Parser.htmlParser();
      Document document0 = htmlTreeBuilder0.parse(stringReader0, "style", parser0);
      assertEquals(1, document0.childNodeSize());
      
      boolean boolean0 = htmlTreeBuilder0.inButtonScope("body");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Parser parser0 = Parser.htmlParser();
      Document document0 = Parser.parseBodyFragmentRelaxed("DOh", "DOh");
      List<Node> list0 = htmlTreeBuilder0.parseFragment("Kwt91},lm.sk[y]e%", document0, "Kwt91},lm.sk[y]e%", parser0);
      assertEquals(1, list0.size());
      
      boolean boolean0 = htmlTreeBuilder0.inButtonScope("DOh");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      ArrayList<Element> arrayList0 = htmlTreeBuilder0.getStack();
      assertNull(arrayList0);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      StringReader stringReader0 = new StringReader("styX");
      Parser parser0 = Parser.htmlParser();
      Document document0 = htmlTreeBuilder0.parse(stringReader0, "styX", parser0);
      assertEquals(1, document0.childNodeSize());
      
      htmlTreeBuilder0.popStackToBefore("w+,aj()O+TK)");
      ArrayList<Element> arrayList0 = htmlTreeBuilder0.getStack();
      assertTrue(arrayList0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      StringReader stringReader0 = new StringReader("style");
      Parser parser0 = Parser.htmlParser();
      htmlTreeBuilder0.parse(stringReader0, "style", parser0);
      ArrayList<Element> arrayList0 = htmlTreeBuilder0.getStack();
      assertEquals(2, arrayList0.size());
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      List<String> list0 = htmlTreeBuilder0.getPendingTableCharacters();
      assertNull(list0);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      StringReader stringReader0 = new StringReader("style");
      Parser parser0 = Parser.htmlParser();
      htmlTreeBuilder0.parse(stringReader0, "style", parser0);
      List<String> list0 = htmlTreeBuilder0.getPendingTableCharacters();
      assertFalse(list0.contains("style"));
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      StringReader stringReader0 = new StringReader("styX");
      Parser parser0 = Parser.htmlParser();
      htmlTreeBuilder0.parse(stringReader0, "styX", parser0);
      Element element0 = htmlTreeBuilder0.getHeadElement();
      assertEquals(0, element0.siblingIndex());
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      StringReader stringReader0 = new StringReader("stle");
      Parser parser0 = Parser.xmlParser();
      Document document0 = htmlTreeBuilder0.parse(stringReader0, "stle", parser0);
      htmlTreeBuilder0.setHeadElement(document0);
      Element element0 = htmlTreeBuilder0.getHeadElement();
      assertEquals(1, element0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      StringReader stringReader0 = new StringReader("%9j+f:(");
      Parser parser0 = Parser.htmlParser();
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      htmlTreeBuilder0.parse(stringReader0, "%9j+f:(", parser0);
      Element element0 = htmlTreeBuilder0.getFromStack("fvrm");
      assertNull(element0);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      StringReader stringReader0 = new StringReader("");
      Parser parser0 = Parser.xmlParser();
      htmlTreeBuilder0.parse(stringReader0, "", parser0);
      Element element0 = htmlTreeBuilder0.getFromStack("html");
      assertEquals(2, element0.childNodeSize());
      assertNotNull(element0);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      StringReader stringReader0 = new StringReader("Q=>dtI");
      Parser parser0 = Parser.htmlParser();
      htmlTreeBuilder0.parse(stringReader0, "Q=>dtI", parser0);
      htmlTreeBuilder0.insertStartTag("listing");
      Element element0 = htmlTreeBuilder0.getFromStack("listing");
      assertNotNull(element0);
      assertEquals(1, element0.siblingIndex());
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      FormElement formElement0 = htmlTreeBuilder0.getFormElement();
      assertNull(formElement0);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      StringReader stringReader0 = new StringReader("style");
      Parser parser0 = Parser.htmlParser();
      htmlTreeBuilder0.parse(stringReader0, "style", parser0);
      Token.StartTag token_StartTag0 = new Token.StartTag();
      CDataNode cDataNode0 = new CDataNode("org.jsoup.select.Evaluator$TagEndsWith");
      Attributes attributes0 = cDataNode0.attributes();
      Token.StartTag token_StartTag1 = token_StartTag0.nameAttr("style", attributes0);
      htmlTreeBuilder0.insertForm(token_StartTag1, false);
      FormElement formElement0 = htmlTreeBuilder0.getFormElement();
      assertEquals(1, formElement0.siblingIndex());
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      StringReader stringReader0 = new StringReader("stle");
      Parser parser0 = Parser.xmlParser();
      Document document0 = htmlTreeBuilder0.parse(stringReader0, "stle", parser0);
      htmlTreeBuilder0.insertInFosterParent(document0);
      assertEquals(2, document0.siblingIndex());
      
      Document document1 = htmlTreeBuilder0.getDocument();
      assertEquals(2, document1.siblingIndex());
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      StringReader stringReader0 = new StringReader("qcqprt");
      Parser parser0 = Parser.xmlParser();
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      htmlTreeBuilder0.initialiseParse(stringReader0, "qcqprt", parser0);
      Document document0 = htmlTreeBuilder0.getDocument();
      assertFalse(document0.hasParent());
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Parser parser0 = Parser.xmlParser();
      List<Node> list0 = htmlTreeBuilder0.parseFragment("EOF", (Element) null, "AfterAfterFrameset", parser0);
      assertEquals(1, list0.size());
      
      String string0 = htmlTreeBuilder0.getBaseUri();
      assertEquals("AfterAfterFrameset", string0);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      StringReader stringReader0 = new StringReader("0b5");
      Parser parser0 = Parser.xmlParser();
      htmlTreeBuilder0.parse(stringReader0, "", parser0);
      String string0 = htmlTreeBuilder0.getBaseUri();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      StringReader stringReader0 = new StringReader("e9");
      Parser parser0 = Parser.xmlParser();
      htmlTreeBuilder0.parse(stringReader0, "e9", parser0);
      Element element0 = htmlTreeBuilder0.insertStartTag("qrkq");
      htmlTreeBuilder0.pushActiveFormattingElements(element0);
      Element element1 = htmlTreeBuilder0.getActiveFormattingElement("qrkq");
      assertEquals(1, element1.siblingIndex());
      assertNotNull(element1);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      StringReader stringReader0 = new StringReader("geAv");
      Parser parser0 = Parser.htmlParser();
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Document document0 = htmlTreeBuilder0.parse(stringReader0, "geAv", parser0);
      Element element0 = document0.body();
      htmlTreeBuilder0.pushActiveFormattingElements(element0);
      Element element1 = htmlTreeBuilder0.getActiveFormattingElement("body");
      assertNotNull(element1);
      assertEquals(1, element1.siblingIndex());
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      htmlTreeBuilder0.framesetOk(true);
      boolean boolean0 = htmlTreeBuilder0.framesetOk();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      boolean boolean0 = htmlTreeBuilder0.framesetOk();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      StringReader stringReader0 = new StringReader("stle");
      Parser parser0 = Parser.xmlParser();
      Document document0 = htmlTreeBuilder0.parse(stringReader0, "stle", parser0);
      htmlTreeBuilder0.push(document0);
      htmlTreeBuilder0.insertOnStackAfter(document0, document0);
      Element element0 = htmlTreeBuilder0.aboveOnStack(document0);
      assertEquals(1, element0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      StringReader stringReader0 = new StringReader("stle");
      Parser parser0 = Parser.xmlParser();
      Document document0 = htmlTreeBuilder0.parse(stringReader0, "stle", parser0);
      htmlTreeBuilder0.push(document0);
      Element element0 = htmlTreeBuilder0.aboveOnStack(document0);
      assertEquals(1, element0.siblingIndex());
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      StringReader stringReader0 = new StringReader("stle");
      Parser parser0 = Parser.xmlParser();
      Document document0 = htmlTreeBuilder0.parse(stringReader0, "stle", parser0);
      htmlTreeBuilder0.insertInFosterParent(document0);
      // Undeclared exception!
      htmlTreeBuilder0.toString();
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      // Undeclared exception!
//      try { 
        htmlTreeBuilder0.resetInsertionMode();
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.jsoup.parser.HtmlTreeBuilder", e);
//      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Document document0 = Parser.parseBodyFragmentRelaxed("#document", "jg :Y<iK%IUZ]a");
      // Undeclared exception!
//      try { 
        htmlTreeBuilder0.replaceOnStack((Element) null, document0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.jsoup.parser.HtmlTreeBuilder", e);
//      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Document document0 = new Document("");
      // Undeclared exception!
//      try { 
        htmlTreeBuilder0.replaceActiveFormattingElement(document0, document0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.jsoup.parser.HtmlTreeBuilder", e);
//      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      // Undeclared exception!
//      try { 
        htmlTreeBuilder0.removeLastFormattingElement();
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.jsoup.parser.HtmlTreeBuilder", e);
//      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      // Undeclared exception!
//      try { 
        htmlTreeBuilder0.removeFromStack((Element) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.jsoup.parser.HtmlTreeBuilder", e);
//      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      // Undeclared exception!
//      try { 
        htmlTreeBuilder0.removeFromActiveFormattingElements((Element) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.jsoup.parser.HtmlTreeBuilder", e);
//      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      // Undeclared exception!
//      try { 
        htmlTreeBuilder0.reconstructFormattingElements();
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.jsoup.parser.HtmlTreeBuilder", e);
//      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      // Undeclared exception!
//      try { 
        htmlTreeBuilder0.pushActiveFormattingElements((Element) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.jsoup.parser.HtmlTreeBuilder", e);
//      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      HtmlTreeBuilderState htmlTreeBuilderState0 = HtmlTreeBuilderState.AfterAfterBody;
      // Undeclared exception!
//      try { 
        htmlTreeBuilder0.process((Token) null, htmlTreeBuilderState0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.jsoup.parser.HtmlTreeBuilderState$21", e);
//      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      StringReader stringReader0 = new StringReader("Q+");
      Parser parser0 = Parser.xmlParser();
      htmlTreeBuilder0.parse(stringReader0, "Q+", parser0);
      htmlTreeBuilder0.popStackToBefore("Q+");
      Token.StartTag token_StartTag0 = new Token.StartTag();
      Attributes attributes0 = new Attributes();
      Token.StartTag token_StartTag1 = token_StartTag0.nameAttr("Q+", attributes0);
      HtmlTreeBuilderState htmlTreeBuilderState0 = HtmlTreeBuilderState.AfterHead;
      // Undeclared exception!
//      try { 
        htmlTreeBuilder0.process(token_StartTag1, htmlTreeBuilderState0);
//        fail("Expecting exception: IndexOutOfBoundsException");
      
//      } catch(IndexOutOfBoundsException e) {
//         //
//         // Index: 1, Size: 0
//         //
//         verifyException("java.util.ArrayList", e);
//      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Token.CData token_CData0 = new Token.CData("style");
      HtmlTreeBuilderState htmlTreeBuilderState0 = HtmlTreeBuilderState.BeforeHtml;
      // Undeclared exception!
//      try { 
        htmlTreeBuilder0.process(token_CData0, htmlTreeBuilderState0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Object must not be null
//         //
//         verifyException("org.jsoup.helper.Validate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Token.EOF token_EOF0 = new Token.EOF();
      Token.TokenType token_TokenType0 = Token.TokenType.StartTag;
      token_EOF0.type = token_TokenType0;
      HtmlTreeBuilderState htmlTreeBuilderState0 = HtmlTreeBuilderState.InRow;
      // Undeclared exception!
//      try { 
        htmlTreeBuilder0.process(token_EOF0, htmlTreeBuilderState0);
//        fail("Expecting exception: ClassCastException");
      
//      } catch(ClassCastException e) {
//         //
//         // org.jsoup.parser.Token$EOF cannot be cast to org.jsoup.parser.Token$StartTag
//         //
//         verifyException("org.jsoup.parser.Token", e);
//      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Token.StartTag token_StartTag0 = new Token.StartTag();
      // Undeclared exception!
//      try { 
        htmlTreeBuilder0.process(token_StartTag0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.jsoup.parser.HtmlTreeBuilder", e);
//      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      StringReader stringReader0 = new StringReader("style");
      Parser parser0 = Parser.htmlParser();
      htmlTreeBuilder0.parse(stringReader0, "style", parser0);
      CharacterReader characterReader0 = new CharacterReader("");
      ParseErrorList parseErrorList0 = parser0.getErrors();
      Tokeniser tokeniser0 = new Tokeniser(characterReader0, parseErrorList0);
      Token.Comment token_Comment0 = tokeniser0.commentPending;
      Token token0 = token_Comment0.reset();
      Token.TokenType token_TokenType0 = Token.TokenType.Character;
      token0.type = token_TokenType0;
      // Undeclared exception!
//      try { 
        htmlTreeBuilder0.process(token0);
//        fail("Expecting exception: ClassCastException");
      
//      } catch(ClassCastException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      String[] stringArray0 = new String[2];
      // Undeclared exception!
//      try { 
        htmlTreeBuilder0.popStackToClose(stringArray0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.jsoup.parser.HtmlTreeBuilder", e);
//      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      // Undeclared exception!
//      try { 
        htmlTreeBuilder0.popStackToClose("article");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.jsoup.parser.HtmlTreeBuilder", e);
//      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      // Undeclared exception!
//      try { 
        htmlTreeBuilder0.popStackToBefore("}rWL SzhqM6");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.jsoup.parser.HtmlTreeBuilder", e);
//      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      // Undeclared exception!
//      try { 
        htmlTreeBuilder0.pop();
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.jsoup.parser.HtmlTreeBuilder", e);
//      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      StringReader stringReader0 = new StringReader("defer");
      Parser parser0 = Parser.htmlParser();
      htmlTreeBuilder0.parse(stringReader0, "4", parser0);
      htmlTreeBuilder0.popStackToClose("tbody");
      // Undeclared exception!
//      try { 
        htmlTreeBuilder0.pop();
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      StringReader stringReader0 = new StringReader("stle");
      Parser parser0 = Parser.xmlParser();
      Document document0 = htmlTreeBuilder0.parse(stringReader0, "stle", parser0);
      htmlTreeBuilder0.insertInFosterParent(document0);
      // Undeclared exception!
      htmlTreeBuilder0.parseFragment("org.jsoup.nodes.XmlDeclaration", document0, "org.jsoup.nodes.XmlDeclaration", parser0);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Parser parser0 = Parser.htmlParser();
      // Undeclared exception!
//      try { 
        htmlTreeBuilder0.parseFragment("/", (Element) null, (String) null, parser0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // BaseURI must not be null
//         //
//         verifyException("org.jsoup.helper.Validate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      // Undeclared exception!
//      try { 
        htmlTreeBuilder0.onStack((Element) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      // Undeclared exception!
//      try { 
        htmlTreeBuilder0.maybeSetBaseUri((Element) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.jsoup.parser.HtmlTreeBuilder", e);
//      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      // Undeclared exception!
//      try { 
        htmlTreeBuilder0.lastFormattingElement();
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.jsoup.parser.HtmlTreeBuilder", e);
//      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      // Undeclared exception!
//      try { 
        htmlTreeBuilder0.isSpecial((Element) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.jsoup.parser.HtmlTreeBuilder", e);
//      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      // Undeclared exception!
//      try { 
        htmlTreeBuilder0.insertStartTag("aih{*");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      // Undeclared exception!
//      try { 
        htmlTreeBuilder0.insertStartTag("style");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Object must not be null
//         //
//         verifyException("org.jsoup.helper.Validate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Document document0 = new Document("");
      Attributes attributes0 = new Attributes();
      Tag tag0 = Tag.valueOf("plaintext");
      FormElement formElement0 = new FormElement(tag0, "", attributes0);
      // Undeclared exception!
//      try { 
        htmlTreeBuilder0.insertOnStackAfter(formElement0, document0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.jsoup.parser.HtmlTreeBuilder", e);
//      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      // Undeclared exception!
//      try { 
        htmlTreeBuilder0.insertInFosterParent((Node) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.jsoup.parser.HtmlTreeBuilder", e);
//      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      StringReader stringReader0 = new StringReader("styX");
      Parser parser0 = Parser.htmlParser();
      Document document0 = htmlTreeBuilder0.parse(stringReader0, "styX", parser0);
      htmlTreeBuilder0.popStackToClose("styX");
      // Undeclared exception!
//      try { 
        htmlTreeBuilder0.insertInFosterParent(document0);
//        fail("Expecting exception: IndexOutOfBoundsException");
      
//      } catch(IndexOutOfBoundsException e) {
//         //
//         // Index: 0, Size: 0
//         //
//         verifyException("java.util.ArrayList", e);
//      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      StringReader stringReader0 = new StringReader("stle");
      Parser parser0 = Parser.xmlParser();
      htmlTreeBuilder0.parse(stringReader0, "stle", parser0);
      // Undeclared exception!
//      try { 
        htmlTreeBuilder0.insertInFosterParent((Node) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Object must not be null
//         //
//         verifyException("org.jsoup.helper.Validate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      // Undeclared exception!
//      try { 
        htmlTreeBuilder0.insertForm((Token.StartTag) null, false);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.jsoup.parser.HtmlTreeBuilder", e);
//      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Token.StartTag token_StartTag0 = new Token.StartTag();
      // Undeclared exception!
//      try { 
        htmlTreeBuilder0.insertForm(token_StartTag0, false);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Must be false
//         //
//         verifyException("org.jsoup.helper.Validate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Token.StartTag token_StartTag0 = new Token.StartTag();
      Attributes attributes0 = new Attributes();
      Token.StartTag token_StartTag1 = token_StartTag0.nameAttr("EOF", attributes0);
      // Undeclared exception!
//      try { 
        htmlTreeBuilder0.insertEmpty(token_StartTag1);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Token.StartTag token_StartTag0 = new Token.StartTag();
      // Undeclared exception!
//      try { 
        htmlTreeBuilder0.insertEmpty(token_StartTag0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Must be false
//         //
//         verifyException("org.jsoup.helper.Validate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      CharacterReader characterReader0 = new CharacterReader("*");
      Parser parser0 = new Parser(htmlTreeBuilder0);
      ParseErrorList parseErrorList0 = parser0.getErrors();
      Tokeniser tokeniser0 = new Tokeniser(characterReader0, parseErrorList0);
      Token.StartTag token_StartTag0 = tokeniser0.startPending;
      Attributes attributes0 = new Attributes();
      Token.StartTag token_StartTag1 = token_StartTag0.nameAttr("*", attributes0);
      // Undeclared exception!
//      try { 
        htmlTreeBuilder0.insert(token_StartTag1);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Token.Character token_Character0 = new Token.Character();
      // Undeclared exception!
//      try { 
        htmlTreeBuilder0.insert(token_Character0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      // Undeclared exception!
//      try { 
        htmlTreeBuilder0.insert((Element) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Parser parser0 = new Parser(htmlTreeBuilder0);
      htmlTreeBuilder0.parseFragment("details", (Element) null, "details", parser0);
      // Undeclared exception!
//      try { 
        htmlTreeBuilder0.insert((Element) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Object must not be null
//         //
//         verifyException("org.jsoup.helper.Validate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      StringReader stringReader0 = new StringReader("O+eGm- swp=$");
      Parser parser0 = Parser.xmlParser();
      stringReader0.close();
      // Undeclared exception!
//      try { 
        htmlTreeBuilder0.initialiseParse(stringReader0, "form", parser0);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // java.io.IOException: Stream closed
//         //
//         verifyException("org.jsoup.parser.CharacterReader", e);
//      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      StringReader stringReader0 = new StringReader("9N8%^y_?,b");
      // Undeclared exception!
//      try { 
        htmlTreeBuilder0.initialiseParse(stringReader0, "9N8%^y_?,b", (Parser) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      Parser parser0 = Parser.htmlParser();
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      // Undeclared exception!
//      try { 
        htmlTreeBuilder0.initialiseParse((Reader) null, "@FwY9>T)Q$CrM C@6-", parser0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // String input must not be null
//         //
//         verifyException("org.jsoup.helper.Validate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      // Undeclared exception!
//      try { 
        htmlTreeBuilder0.inScope("#root", (String[]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.jsoup.parser.HtmlTreeBuilder", e);
//      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      // Undeclared exception!
//      try { 
        htmlTreeBuilder0.inScope("<!5+-");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.jsoup.parser.HtmlTreeBuilder", e);
//      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      // Undeclared exception!
//      try { 
        htmlTreeBuilder0.inButtonScope("menu");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.jsoup.parser.HtmlTreeBuilder", e);
//      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      // Undeclared exception!
//      try { 
        htmlTreeBuilder0.getFromStack("^t");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.jsoup.parser.HtmlTreeBuilder", e);
//      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      // Undeclared exception!
//      try { 
        htmlTreeBuilder0.getActiveFormattingElement("select");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.jsoup.parser.HtmlTreeBuilder", e);
//      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      // Undeclared exception!
//      try { 
        htmlTreeBuilder0.generateImpliedEndTags("|U%vIu9Xa");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      HtmlTreeBuilderState htmlTreeBuilderState0 = HtmlTreeBuilderState.AfterFrameset;
      // Undeclared exception!
//      try { 
        htmlTreeBuilder0.error(htmlTreeBuilderState0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.jsoup.parser.HtmlTreeBuilder", e);
//      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      // Undeclared exception!
//      try { 
        htmlTreeBuilder0.clearFormattingElementsToLastMarker();
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Tag tag0 = Tag.valueOf("&ra|A'@");
      Attributes attributes0 = new Attributes();
      PseudoTextElement pseudoTextElement0 = new PseudoTextElement(tag0, "tc*Ioo", attributes0);
      // Undeclared exception!
//      try { 
        htmlTreeBuilder0.aboveOnStack(pseudoTextElement0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      StringReader stringReader0 = new StringReader("{A)5_ck3w");
      Parser parser0 = Parser.xmlParser();
      Document document0 = htmlTreeBuilder0.parse(stringReader0, "{A)5_ck3w", parser0);
      htmlTreeBuilder0.popStackToBefore("6] KFC]Eow");
      htmlTreeBuilder0.push(document0);
      // Undeclared exception!
//      try { 
        htmlTreeBuilder0.aboveOnStack(document0);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // -1
//         //
//         verifyException("java.util.ArrayList", e);
//      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      StringReader stringReader0 = new StringReader(".Y2");
      Parser parser0 = Parser.htmlParser();
      Document document0 = htmlTreeBuilder0.parse(stringReader0, ">na\"h", parser0);
      htmlTreeBuilder0.pushActiveFormattingElements(document0);
      Element element0 = htmlTreeBuilder0.lastFormattingElement();
      assertNotNull(element0);
      assertEquals(1, element0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      StringReader stringReader0 = new StringReader("Je8UB~Ag`d-Lb|4Z6r^");
      Parser parser0 = Parser.xmlParser();
      htmlTreeBuilder0.parse(stringReader0, "Je8UB~Ag`d-Lb|4Z6r^", parser0);
      Tokeniser tokeniser0 = htmlTreeBuilder0.tokeniser;
      Token.StartTag token_StartTag0 = tokeniser0.startPending;
      Attributes attributes0 = new Attributes();
      Token.StartTag token_StartTag1 = token_StartTag0.nameAttr("input", attributes0);
      Element element0 = htmlTreeBuilder0.insertEmpty(token_StartTag1);
      assertEquals(1, element0.siblingIndex());
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      StringReader stringReader0 = new StringReader("qZ");
      Parser parser0 = Parser.htmlParser();
      Document document0 = htmlTreeBuilder0.parse(stringReader0, "qZ", parser0);
      htmlTreeBuilder0.setFosterInserts(true);
      htmlTreeBuilder0.insert(document0);
      assertEquals(2, document0.siblingIndex());
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Parser parser0 = Parser.xmlParser();
      Parser parser1 = parser0.settings((ParseSettings) null);
      // Undeclared exception!
//      try { 
        htmlTreeBuilder0.parseFragment("", (Element) null, "plaintext", parser1);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.jsoup.parser.HtmlTreeBuilder", e);
//      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      StringReader stringReader0 = new StringReader("`9");
      Parser parser0 = Parser.xmlParser();
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      char[] charArray0 = new char[4];
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      stringReader0.read(charBuffer0);
      htmlTreeBuilder0.parse(stringReader0, "`9", parser0);
      htmlTreeBuilder0.insertStartTag("style");
      Token.Character token_Character0 = new Token.Character();
      htmlTreeBuilder0.insert(token_Character0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      StringReader stringReader0 = new StringReader("vYU(2vEvr(Vrjo-h");
      Parser parser0 = Parser.xmlParser();
      parser0.parseInput((Reader) stringReader0, "vYU(2vEvr(Vrjo-h");
      htmlTreeBuilder0.parse(stringReader0, "T,!6iP", parser0);
      htmlTreeBuilder0.insertStartTag("script");
      Token.Character token_Character0 = new Token.Character();
      htmlTreeBuilder0.insert(token_Character0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      StringReader stringReader0 = new StringReader("g");
      Parser parser0 = Parser.xmlParser();
      htmlTreeBuilder0.parse(stringReader0, "g", parser0);
      htmlTreeBuilder0.pushActiveFormattingElements((Element) null);
      Element element0 = htmlTreeBuilder0.getActiveFormattingElement("header");
      assertNull(element0);
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      StringReader stringReader0 = new StringReader("tbody");
      Parser parser0 = Parser.xmlParser();
      htmlTreeBuilder0.parse(stringReader0, "tbody", parser0);
      ParseSettings parseSettings0 = ParseSettings.preserveCase;
      Tag tag0 = Tag.valueOf("tbody", parseSettings0);
      Attributes attributes0 = new Attributes();
      PseudoTextElement pseudoTextElement0 = new PseudoTextElement(tag0, "tbody", attributes0);
      htmlTreeBuilder0.pushActiveFormattingElements(pseudoTextElement0);
      Element element0 = htmlTreeBuilder0.getActiveFormattingElement("tbody");
      assertEquals("tbody", element0.baseUri());
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Tag tag0 = Tag.valueOf("comment");
      Attributes attributes0 = new Attributes();
      PseudoTextElement pseudoTextElement0 = new PseudoTextElement(tag0, "comment", attributes0);
      XmlTreeBuilder xmlTreeBuilder0 = new XmlTreeBuilder();
      Parser parser0 = new Parser(xmlTreeBuilder0);
      htmlTreeBuilder0.parseFragment("nohref", pseudoTextElement0, "[%s=%s]", parser0);
      Element element0 = htmlTreeBuilder0.getActiveFormattingElement((String) null);
      assertNull(element0);
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      StringReader stringReader0 = new StringReader("body");
      Parser parser0 = Parser.xmlParser();
      Document document0 = htmlTreeBuilder0.parse(stringReader0, "Gjle", parser0);
      htmlTreeBuilder0.pushActiveFormattingElements(document0);
      htmlTreeBuilder0.reconstructFormattingElements();
      htmlTreeBuilder0.removeFromActiveFormattingElements(document0);
      assertEquals(1, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      StringReader stringReader0 = new StringReader("stX");
      Parser parser0 = Parser.htmlParser();
      htmlTreeBuilder0.parse(stringReader0, "stX", parser0);
      htmlTreeBuilder0.pushActiveFormattingElements((Element) null);
      htmlTreeBuilder0.clearFormattingElementsToLastMarker();
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      StringReader stringReader0 = new StringReader("listing");
      Parser parser0 = Parser.htmlParser();
      Document document0 = htmlTreeBuilder0.parse(stringReader0, "listing", parser0);
      Element element0 = htmlTreeBuilder0.insertStartTag("BNy!Lx");
      htmlTreeBuilder0.pushActiveFormattingElements(element0);
      htmlTreeBuilder0.pushActiveFormattingElements(document0);
      htmlTreeBuilder0.reconstructFormattingElements();
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      StringReader stringReader0 = new StringReader("tstyle");
      Parser parser0 = Parser.htmlParser();
      Document document0 = htmlTreeBuilder0.parse(stringReader0, "tstyle", parser0);
      htmlTreeBuilder0.pushActiveFormattingElements(document0);
      htmlTreeBuilder0.reconstructFormattingElements();
      htmlTreeBuilder0.reconstructFormattingElements();
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      StringReader stringReader0 = new StringReader("Q=>dtI");
      Parser parser0 = Parser.htmlParser();
      Document document0 = htmlTreeBuilder0.parse(stringReader0, "Q=>dtI", parser0);
      htmlTreeBuilder0.pushActiveFormattingElements(document0);
      htmlTreeBuilder0.pushActiveFormattingElements(document0);
      htmlTreeBuilder0.pushActiveFormattingElements(document0);
      htmlTreeBuilder0.pushActiveFormattingElements(document0);
      assertEquals(1, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      StringReader stringReader0 = new StringReader("stle");
      Parser parser0 = Parser.xmlParser();
      Document document0 = htmlTreeBuilder0.parse(stringReader0, "stle", parser0);
      htmlTreeBuilder0.pushActiveFormattingElements((Element) null);
      htmlTreeBuilder0.pushActiveFormattingElements(document0);
      htmlTreeBuilder0.reconstructFormattingElements();
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      StringReader stringReader0 = new StringReader("style");
      Parser parser0 = Parser.htmlParser();
      Document document0 = htmlTreeBuilder0.parse(stringReader0, "style", parser0);
      htmlTreeBuilder0.pushActiveFormattingElements(document0);
      Element element0 = htmlTreeBuilder0.removeLastFormattingElement();
      assertEquals(1, element0.childNodeSize());
      assertNotNull(element0);
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Tag tag0 = Tag.valueOf("comment");
      Attributes attributes0 = new Attributes();
      PseudoTextElement pseudoTextElement0 = new PseudoTextElement(tag0, "comment", attributes0);
      XmlTreeBuilder xmlTreeBuilder0 = new XmlTreeBuilder();
      Parser parser0 = new Parser(xmlTreeBuilder0);
      htmlTreeBuilder0.parseFragment("nohref", pseudoTextElement0, "[%s=%s]", parser0);
      Element element0 = htmlTreeBuilder0.removeLastFormattingElement();
      assertNull(element0);
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      StringReader stringReader0 = new StringReader("qZ");
      Parser parser0 = Parser.htmlParser();
      htmlTreeBuilder0.parse(stringReader0, "qZ", parser0);
      htmlTreeBuilder0.insertStartTag("li");
      htmlTreeBuilder0.generateImpliedEndTags("qZ");
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Document document0 = Parser.parseBodyFragment("qcq", "9lE~+f;_QKKbXw4");
      Parser parser0 = Parser.xmlParser();
      htmlTreeBuilder0.parseFragment("qcq", document0, "textarea", parser0);
      htmlTreeBuilder0.generateImpliedEndTags("textarea");
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      StringReader stringReader0 = new StringReader("qcqprt");
      Parser parser0 = Parser.xmlParser();
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      htmlTreeBuilder0.parse(stringReader0, "qcqprt", parser0);
      Element element0 = htmlTreeBuilder0.insertStartTag("optgroup");
      assertEquals(1, element0.siblingIndex());
      
      boolean boolean0 = htmlTreeBuilder0.inSelectScope("<>|Pc/-oM#(&6A*f3o");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Parser parser0 = Parser.htmlParser();
      StringReader stringReader0 = new StringReader("");
      Document document0 = htmlTreeBuilder0.parse(stringReader0, "", parser0);
      assertEquals(1, document0.childNodeSize());
      
      boolean boolean0 = htmlTreeBuilder0.inSelectScope("body");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Document document0 = Parser.parseBodyFragment("qcq", "9lE~+f;_QKKbXw4");
      Parser parser0 = Parser.xmlParser();
      htmlTreeBuilder0.parseFragment("qcq", document0, "textarea", parser0);
      boolean boolean0 = htmlTreeBuilder0.inSelectScope("4;ri");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      StringReader stringReader0 = new StringReader("Q=>dtI");
      Parser parser0 = Parser.htmlParser();
      Document document0 = htmlTreeBuilder0.parse(stringReader0, "Q=>dtI", parser0);
      Element element0 = htmlTreeBuilder0.insertStartTag("listing");
      htmlTreeBuilder0.insertOnStackAfter(element0, document0);
      htmlTreeBuilder0.insertOnStackAfter(document0, element0);
      assertEquals(1, element0.siblingIndex());
      
      String[] stringArray0 = new String[9];
      stringArray0[4] = "listing";
      boolean boolean0 = htmlTreeBuilder0.inScope("", stringArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      StringReader stringReader0 = new StringReader("style");
      Parser parser0 = Parser.htmlParser();
      htmlTreeBuilder0.parse(stringReader0, "style", parser0);
      boolean boolean0 = htmlTreeBuilder0.inTableScope("style");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      StringReader stringReader0 = new StringReader("style");
      Parser parser0 = Parser.xmlParser();
      htmlTreeBuilder0.parse(stringReader0, "style", parser0);
      htmlTreeBuilder0.popStackToBefore("seamless");
      boolean boolean0 = htmlTreeBuilder0.inTableScope(",{eKo_lSqjv");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      Tag tag0 = Tag.valueOf("html");
      Attributes attributes0 = new Attributes();
      PseudoTextElement pseudoTextElement0 = new PseudoTextElement(tag0, "style", attributes0);
      ParseErrorList parseErrorList0 = new ParseErrorList(100, 100);
      List<Node> list0 = Parser.parseFragment("DeFQ}@h", (Element) pseudoTextElement0, "s|D,", parseErrorList0);
      assertEquals(2, list0.size());
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      Tag tag0 = Tag.valueOf("frameset");
      PseudoTextElement pseudoTextElement0 = new PseudoTextElement(tag0, "MJ4zv#>b9<", attributes0);
      ParseErrorList parseErrorList0 = ParseErrorList.noTracking();
      List<Node> list0 = Parser.parseFragment("", (Element) pseudoTextElement0, "", parseErrorList0);
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      Tag tag0 = Tag.valueOf("head");
      Attributes attributes0 = new Attributes();
      PseudoTextElement pseudoTextElement0 = new PseudoTextElement(tag0, "$kBRzEv<xTqJP", attributes0);
      ParseErrorList parseErrorList0 = new ParseErrorList(48, (-506));
      List<Node> list0 = Parser.parseFragment("article", (Element) pseudoTextElement0, "tYfoot", parseErrorList0);
      assertEquals(1, list0.size());
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      XmlTreeBuilder xmlTreeBuilder0 = new XmlTreeBuilder();
      ParseSettings parseSettings0 = xmlTreeBuilder0.defaultSettings();
      Tag tag0 = Tag.valueOf("table", parseSettings0);
      PseudoTextElement pseudoTextElement0 = new PseudoTextElement(tag0, "tc*Ioo", attributes0);
      ParseErrorList parseErrorList0 = ParseErrorList.noTracking();
      List<Node> list0 = Parser.parseFragment("$v7}f@!D_i&85RO'|{:", (Element) pseudoTextElement0, "x<t9", parseErrorList0);
      assertEquals(1, list0.size());
      assertTrue(parseErrorList0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      Tag tag0 = Tag.valueOf("colgroup");
      Attributes attributes0 = new Attributes();
      PseudoTextElement pseudoTextElement0 = new PseudoTextElement(tag0, "dir", attributes0);
      ParseErrorList parseErrorList0 = ParseErrorList.noTracking();
      List<Node> list0 = Parser.parseFragment("colgroup", (Element) pseudoTextElement0, "colgroup", parseErrorList0);
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      XmlTreeBuilder xmlTreeBuilder0 = new XmlTreeBuilder();
      Attributes attributes0 = new Attributes();
      ParseSettings parseSettings0 = xmlTreeBuilder0.defaultSettings();
      Tag tag0 = Tag.valueOf("caption", parseSettings0);
      PseudoTextElement pseudoTextElement0 = new PseudoTextElement(tag0, "caption", attributes0);
      ParseErrorList parseErrorList0 = new ParseErrorList(1114111, (-1010136971));
      List<Node> list0 = Parser.parseFragment("caption", (Element) pseudoTextElement0, "Character", parseErrorList0);
      assertEquals(1, list0.size());
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      Tag tag0 = Tag.valueOf("tfoot");
      Attributes attributes0 = new Attributes();
      PseudoTextElement pseudoTextElement0 = new PseudoTextElement(tag0, "article", attributes0);
      ParseErrorList parseErrorList0 = new ParseErrorList(32, 100);
      Parser.parseFragment("tfoot", (Element) pseudoTextElement0, "tfoot", parseErrorList0);
      assertEquals(2, parseErrorList0.size());
      assertFalse(parseErrorList0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      ParseSettings parseSettings0 = ParseSettings.htmlDefault;
      Tag tag0 = Tag.valueOf("thead", parseSettings0);
      PseudoTextElement pseudoTextElement0 = new PseudoTextElement(tag0, "nav", attributes0);
      ParseErrorList parseErrorList0 = new ParseErrorList(100, (-1721991012));
      List<Node> list0 = Parser.parseFragment("", (Element) pseudoTextElement0, "`6;VmhjR04W.=B)", parseErrorList0);
      assertTrue(parseErrorList0.isEmpty());
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      Tag tag0 = Tag.valueOf("tr");
      PseudoTextElement pseudoTextElement0 = new PseudoTextElement(tag0, "comment", attributes0);
      ParseErrorList parseErrorList0 = ParseErrorList.noTracking();
      List<Node> list0 = Parser.parseFragment("wC", (Element) pseudoTextElement0, "'", parseErrorList0);
      assertEquals(1, list0.size());
      assertTrue(parseErrorList0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      StringReader stringReader0 = new StringReader("th");
      Parser parser0 = Parser.htmlParser();
      htmlTreeBuilder0.parse(stringReader0, "th", parser0);
      htmlTreeBuilder0.insertStartTag("th");
      htmlTreeBuilder0.resetInsertionMode();
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      Tag tag0 = Tag.valueOf("th");
      PseudoTextElement pseudoTextElement0 = new PseudoTextElement(tag0, "style", attributes0);
      ParseErrorList parseErrorList0 = new ParseErrorList(100, 207);
      List<Node> list0 = Parser.parseFragment("$kBRzEv<xTqJP", (Element) pseudoTextElement0, "$kBRzEv<xTqJP", parseErrorList0);
      assertFalse(parseErrorList0.isEmpty());
      assertEquals(1, list0.size());
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Attributes attributes0 = new Attributes();
      ParseSettings parseSettings0 = htmlTreeBuilder0.defaultSettings();
      Tag tag0 = Tag.valueOf("td", parseSettings0);
      PseudoTextElement pseudoTextElement0 = new PseudoTextElement(tag0, "td", attributes0);
      ParseErrorList parseErrorList0 = new ParseErrorList(100, 100);
      List<Node> list0 = Parser.parseFragment("xgZ!d!0n", (Element) pseudoTextElement0, "td", parseErrorList0);
      assertEquals(1, list0.size());
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      ParseSettings parseSettings0 = htmlTreeBuilder0.defaultSettings();
      Attributes attributes0 = new Attributes();
      Tag tag0 = Tag.valueOf("select", parseSettings0);
      PseudoTextElement pseudoTextElement0 = new PseudoTextElement(tag0, "th", attributes0);
      Parser parser0 = Parser.xmlParser();
      ParseErrorList parseErrorList0 = parser0.getErrors();
      List<Node> list0 = Parser.parseFragment("figcaption", (Element) pseudoTextElement0, "th", parseErrorList0);
      assertEquals(1, list0.size());
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      StringReader stringReader0 = new StringReader("Je8UB~Ag`d-Lb|4Z6r^");
      Parser parser0 = Parser.xmlParser();
      Document document0 = htmlTreeBuilder0.parse(stringReader0, "Je8UB~Ag`d-Lb|4Z6r^", parser0);
      htmlTreeBuilder0.pushActiveFormattingElements(document0);
      htmlTreeBuilder0.replaceActiveFormattingElement(document0, (Element) null);
      assertEquals(1, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Parser parser0 = new Parser(htmlTreeBuilder0);
      StringReader stringReader0 = new StringReader("details");
      Document document0 = htmlTreeBuilder0.parse(stringReader0, "h6", parser0);
      // Undeclared exception!
//      try { 
        htmlTreeBuilder0.insertOnStackAfter(document0, document0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Must be true
//         //
//         verifyException("org.jsoup.helper.Validate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      StringReader stringReader0 = new StringReader("Q=>dtI");
      Parser parser0 = Parser.htmlParser();
      Document document0 = htmlTreeBuilder0.parse(stringReader0, "Q=>dtI", parser0);
      Element element0 = htmlTreeBuilder0.insertStartTag("listing");
      htmlTreeBuilder0.insertOnStackAfter(element0, document0);
      htmlTreeBuilder0.insertStartTag("Q=>dtI");
      htmlTreeBuilder0.aboveOnStack(document0);
      assertEquals(2, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      StringReader stringReader0 = new StringReader("style");
      Parser parser0 = Parser.htmlParser();
      Document document0 = htmlTreeBuilder0.parse(stringReader0, "style", parser0);
      // Undeclared exception!
//      try { 
        htmlTreeBuilder0.aboveOnStack(document0);
//        fail("Expecting exception: AssertionError");
      
//      } catch(AssertionError e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Parser parser0 = new Parser(htmlTreeBuilder0);
      parser0.parseInput("/t?fnQCS$2\"2zZ[*N1r", "/t?fnQCS$2\"2zZ[*N1r");
      Element element0 = htmlTreeBuilder0.insertStartTag("table");
      element0.unwrap();
      htmlTreeBuilder0.insertInFosterParent(element0);
      assertEquals(1, element0.siblingIndex());
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      StringReader stringReader0 = new StringReader("Fbo7y");
      Parser parser0 = Parser.xmlParser();
      htmlTreeBuilder0.parse(stringReader0, "Fbo7y", parser0);
      htmlTreeBuilder0.insertStartTag("table");
      htmlTreeBuilder0.clearStackToTableContext();
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      StringReader stringReader0 = new StringReader("tbody");
      Parser parser0 = Parser.xmlParser();
      htmlTreeBuilder0.parse(stringReader0, "tbody", parser0);
      htmlTreeBuilder0.clearStackToTableBodyContext();
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      StringReader stringReader0 = new StringReader("{A)5_ck3w");
      Parser parser0 = Parser.xmlParser();
      htmlTreeBuilder0.parse(stringReader0, "{A)5_ck3w", parser0);
      htmlTreeBuilder0.popStackToBefore("6] KFC]Eow");
      htmlTreeBuilder0.clearStackToTableContext();
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      StringReader stringReader0 = new StringReader("stle");
      Parser parser0 = Parser.xmlParser();
      htmlTreeBuilder0.parse(stringReader0, "stle", parser0);
      htmlTreeBuilder0.popStackToBefore("body");
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      StringReader stringReader0 = new StringReader("T+>");
      Parser parser0 = Parser.htmlParser();
      htmlTreeBuilder0.parse(stringReader0, "T+>", parser0);
      htmlTreeBuilder0.popStackToBefore("T+>");
      // Undeclared exception!
//      try { 
        htmlTreeBuilder0.inSelectScope("T+>");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Should not be reachable
//         //
//         verifyException("org.jsoup.helper.Validate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      StringReader stringReader0 = new StringReader("html");
      Parser parser0 = Parser.htmlParser();
      htmlTreeBuilder0.parse(stringReader0, "html", parser0);
      String[] stringArray0 = new String[7];
      stringArray0[0] = "Vsty'e";
      stringArray0[1] = "html";
      stringArray0[3] = "html";
      htmlTreeBuilder0.popStackToClose(stringArray0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      StringReader stringReader0 = new StringReader("stle");
      Parser parser0 = Parser.xmlParser();
      htmlTreeBuilder0.parse(stringReader0, "stle", parser0);
      String[] stringArray0 = new String[0];
      htmlTreeBuilder0.popStackToClose(stringArray0);
      assertEquals(0, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      StringReader stringReader0 = new StringReader("frameset");
      Parser parser0 = Parser.xmlParser();
      htmlTreeBuilder0.parse(stringReader0, "frameset", parser0);
      htmlTreeBuilder0.popStackToClose("'Y(9Mhq4~");
      htmlTreeBuilder0.resetInsertionMode();
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      StringReader stringReader0 = new StringReader("body");
      Parser parser0 = Parser.xmlParser();
      Document document0 = htmlTreeBuilder0.parse(stringReader0, "Gjle", parser0);
      boolean boolean0 = htmlTreeBuilder0.removeFromStack(document0);
      assertEquals(1, document0.childNodeSize());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Parser parser0 = new Parser(htmlTreeBuilder0);
      parser0.parseInput("/t?fnQCS$2\"2zZ[*N1r", "/t?fnQCS$2\"2zZ[*N1r");
      Element element0 = htmlTreeBuilder0.insertStartTag("table");
      htmlTreeBuilder0.insertInFosterParent(element0);
      assertEquals(1, element0.siblingIndex());
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      StringReader stringReader0 = new StringReader("style");
      Parser parser0 = Parser.htmlParser();
      htmlTreeBuilder0.parse(stringReader0, "style", parser0);
      CharacterReader characterReader0 = new CharacterReader("");
      ParseErrorList parseErrorList0 = parser0.getErrors();
      Tokeniser tokeniser0 = new Tokeniser(characterReader0, parseErrorList0);
      Token.Comment token_Comment0 = tokeniser0.commentPending;
      boolean boolean0 = htmlTreeBuilder0.process(token_Comment0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      ParseSettings parseSettings0 = htmlTreeBuilder0.defaultSettings();
      Attributes attributes0 = new Attributes();
      Tag tag0 = Tag.valueOf("T3t!$`T1UUr&", parseSettings0);
      PseudoTextElement pseudoTextElement0 = new PseudoTextElement(tag0, "T3t!$`T1UUr&", attributes0);
      Parser parser0 = Parser.xmlParser();
      ParseErrorList parseErrorList0 = parser0.getErrors();
      List<Node> list0 = Parser.parseFragment("<![CDATA[", (Element) pseudoTextElement0, "frameset", parseErrorList0);
      assertEquals(1, list0.size());
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Token.StartTag token_StartTag0 = new Token.StartTag();
      token_StartTag0.selfClosing = true;
      // Undeclared exception!
//      try { 
        htmlTreeBuilder0.insert(token_StartTag0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Must be false
//         //
//         verifyException("org.jsoup.helper.Validate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Document document0 = Parser.parseBodyFragmentRelaxed("EOF", "EOF");
      htmlTreeBuilder0.maybeSetBaseUri(document0);
      assertEquals(1, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Attributes attributes0 = new Attributes();
      Parser parser0 = new Parser(htmlTreeBuilder0);
      Tag tag0 = Tag.valueOf("-.%`HWyHk[H-mxw");
      FormElement formElement0 = new FormElement(tag0, "-.%`HWyHk[H-mxw", attributes0);
      htmlTreeBuilder0.parseFragment("f|ZJ4hXA>V*", formElement0, "script", parser0);
      FormElement formElement1 = htmlTreeBuilder0.getFormElement();
      assertFalse(formElement1.hasParent());
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Attributes attributes0 = new Attributes();
      ParseSettings parseSettings0 = htmlTreeBuilder0.defaultSettings();
      Tag tag0 = Tag.valueOf("plaintext", parseSettings0);
      PseudoTextElement pseudoTextElement0 = new PseudoTextElement(tag0, "style", attributes0);
      ParseErrorList parseErrorList0 = new ParseErrorList(4, 100);
      List<Node> list0 = Parser.parseFragment("plaintext", (Element) pseudoTextElement0, "xgZ!d!0n", parseErrorList0);
      assertEquals(1, list0.size());
      assertEquals(0, parseErrorList0.size());
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      ParseSettings parseSettings0 = htmlTreeBuilder0.defaultSettings();
      Attributes attributes0 = new Attributes();
      Tag tag0 = Tag.valueOf("noscript", parseSettings0);
      PseudoTextElement pseudoTextElement0 = new PseudoTextElement(tag0, "th", attributes0);
      ParseErrorList parseErrorList0 = new ParseErrorList(34, 1261);
      List<Node> list0 = Parser.parseFragment("noscript", (Element) pseudoTextElement0, "8'X#Sr", parseErrorList0);
      assertEquals(1, list0.size());
      assertTrue(parseErrorList0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      Tag tag0 = Tag.valueOf("script");
      Attributes attributes0 = new Attributes();
      PseudoTextElement pseudoTextElement0 = new PseudoTextElement(tag0, "script", attributes0);
      ParseErrorList parseErrorList0 = ParseErrorList.noTracking();
      List<Node> list0 = Parser.parseFragment("D%jSg9R\"ZArp9fN'", (Element) pseudoTextElement0, "p|rop", parseErrorList0);
      assertEquals(1, list0.size());
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Attributes attributes0 = new Attributes();
      ParseSettings parseSettings0 = htmlTreeBuilder0.defaultSettings();
      Tag tag0 = Tag.valueOf("style", parseSettings0);
      PseudoTextElement pseudoTextElement0 = new PseudoTextElement(tag0, "style", attributes0);
      ParseErrorList parseErrorList0 = new ParseErrorList(4, 100);
      List<Node> list0 = Parser.parseFragment("style", (Element) pseudoTextElement0, "xgZ!d!0n", parseErrorList0);
      assertEquals(1, list0.size());
      assertTrue(parseErrorList0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      Tag tag0 = Tag.valueOf("textarea");
      PseudoTextElement pseudoTextElement0 = new PseudoTextElement(tag0, "z", attributes0);
      ParseErrorList parseErrorList0 = new ParseErrorList(1891, 100);
      List<Node> list0 = Parser.parseFragment("textarea", (Element) pseudoTextElement0, "textarea", parseErrorList0);
      assertEquals(1, list0.size());
      assertTrue(parseErrorList0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      // Undeclared exception!
//      try { 
        htmlTreeBuilder0.clearStackToTableContext();
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.jsoup.parser.HtmlTreeBuilder", e);
//      }
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      // Undeclared exception!
//      try { 
        htmlTreeBuilder0.inTableScope("qZ");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.jsoup.parser.HtmlTreeBuilder", e);
//      }
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      // Undeclared exception!
//      try { 
        htmlTreeBuilder0.insert((Token.Comment) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.jsoup.parser.HtmlTreeBuilder", e);
//      }
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Tag tag0 = Tag.valueOf("tfoot");
      Attributes attributes0 = new Attributes();
      PseudoTextElement pseudoTextElement0 = new PseudoTextElement(tag0, "tfoot", attributes0);
      boolean boolean0 = htmlTreeBuilder0.isSpecial(pseudoTextElement0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      // Undeclared exception!
//      try { 
        htmlTreeBuilder0.push((Element) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.jsoup.parser.HtmlTreeBuilder", e);
//      }
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      StringReader stringReader0 = new StringReader("Je8UB~Ag`d-Lb|4Z6r^");
      Parser parser0 = Parser.xmlParser();
      Document document0 = htmlTreeBuilder0.parse(stringReader0, "Je8UB~Ag`d-Lb|4Z6r^", parser0);
      // Undeclared exception!
//      try { 
        htmlTreeBuilder0.replaceActiveFormattingElement(document0, (Element) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Must be true
//         //
//         verifyException("org.jsoup.helper.Validate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      boolean boolean0 = htmlTreeBuilder0.isFragmentParsing();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Document document0 = Parser.parseBodyFragment("qcq", "9lE~+f;_QKKbXw4");
      // Undeclared exception!
//      try { 
        htmlTreeBuilder0.isInActiveFormattingElements(document0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      StringReader stringReader0 = new StringReader("stle");
      Parser parser0 = Parser.xmlParser();
      Document document0 = htmlTreeBuilder0.parse(stringReader0, "stle", parser0);
      htmlTreeBuilder0.pushActiveFormattingElements(document0);
      htmlTreeBuilder0.reconstructFormattingElements();
      htmlTreeBuilder0.resetInsertionMode();
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      String string0 = htmlTreeBuilder0.getBaseUri();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Document document0 = htmlTreeBuilder0.getDocument();
      assertNull(document0);
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      String[] stringArray0 = new String[0];
      // Undeclared exception!
//      try { 
        htmlTreeBuilder0.inScope(stringArray0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.jsoup.parser.HtmlTreeBuilder", e);
//      }
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      htmlTreeBuilder0.state();
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      // Undeclared exception!
//      try { 
        htmlTreeBuilder0.clearStackToTableRowContext();
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.jsoup.parser.HtmlTreeBuilder", e);
//      }
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      // Undeclared exception!
//      try { 
        htmlTreeBuilder0.insertMarkerToFormattingElements();
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.jsoup.parser.HtmlTreeBuilder", e);
//      }
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      ParseSettings parseSettings0 = htmlTreeBuilder0.defaultSettings();
      Attributes attributes0 = new Attributes();
      Tag tag0 = Tag.valueOf("tbody", parseSettings0);
      PseudoTextElement pseudoTextElement0 = new PseudoTextElement(tag0, "", attributes0);
      ParseErrorList parseErrorList0 = new ParseErrorList(32, 24);
      Parser.parseFragment("Pyqusn,NV7$Bi%N]|/", (Element) pseudoTextElement0, "tbody", parseErrorList0);
      assertEquals(2, parseErrorList0.size());
      assertFalse(parseErrorList0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      StringReader stringReader0 = new StringReader("aZbC");
      Parser parser0 = Parser.xmlParser();
      htmlTreeBuilder0.parse(stringReader0, "aZbC", parser0);
      Tokeniser tokeniser0 = htmlTreeBuilder0.tokeniser;
      Token.EndTag token_EndTag0 = tokeniser0.endPending;
      HtmlTreeBuilderState htmlTreeBuilderState0 = HtmlTreeBuilderState.ForeignContent;
      htmlTreeBuilder0.process(token_EndTag0, htmlTreeBuilderState0);
      // Undeclared exception!
//      try { 
        htmlTreeBuilder0.toString();
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Must be false
//         //
//         verifyException("org.jsoup.helper.Validate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      // Undeclared exception!
//      try { 
        htmlTreeBuilder0.toString();
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      // Undeclared exception!
//      try { 
        htmlTreeBuilder0.inListItemScope("listing");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.jsoup.parser.HtmlTreeBuilder", e);
//      }
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      // Undeclared exception!
//      try { 
        htmlTreeBuilder0.clearStackToTableBodyContext();
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.jsoup.parser.HtmlTreeBuilder", e);
//      }
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Element element0 = htmlTreeBuilder0.getHeadElement();
      assertNull(element0);
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      StringReader stringReader0 = new StringReader("p");
      Parser parser0 = Parser.xmlParser();
      Document document0 = htmlTreeBuilder0.parse(stringReader0, "1X", parser0);
      // Undeclared exception!
//      try { 
        htmlTreeBuilder0.replaceOnStack(document0, document0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Must be true
//         //
//         verifyException("org.jsoup.helper.Validate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Parser parser0 = new Parser(htmlTreeBuilder0);
      parser0.parseInput("X", "X");
      boolean boolean0 = htmlTreeBuilder0.processStartTag("isindex");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      StringReader stringReader0 = new StringReader("Q=>dtI");
      Parser parser0 = Parser.htmlParser();
      Document document0 = htmlTreeBuilder0.parse(stringReader0, "EhhwP#up%mk`R+", parser0);
      htmlTreeBuilder0.pushActiveFormattingElements(document0);
      htmlTreeBuilder0.isInActiveFormattingElements(document0);
  }
}
