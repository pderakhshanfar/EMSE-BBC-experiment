/*
 * This file was automatically generated by EvoSuite
 * Fri Oct 22 20:13:24 GMT 2021
 */

package org.apache.commons.compress.archivers.zip;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.DataInputStream;
import java.io.File;
import java.io.FileDescriptor;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.PushbackInputStream;
import java.io.SequenceInputStream;
import java.io.UnsupportedEncodingException;
import java.nio.channels.ClosedChannelException;
import java.nio.channels.FileChannel;
import java.nio.channels.NonWritableChannelException;
import java.nio.channels.SeekableByteChannel;
import java.nio.charset.IllegalCharsetNameException;
import java.nio.file.InvalidPathException;
import java.nio.file.OpenOption;
import java.nio.file.Path;
import java.nio.file.StandardOpenOption;
import java.util.Enumeration;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;
import java.util.zip.ZipException;
import org.apache.commons.compress.archivers.ArchiveEntry;
import org.apache.commons.compress.archivers.ar.ArArchiveEntry;
import org.apache.commons.compress.archivers.jar.JarArchiveEntry;
import org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry;
import org.apache.commons.compress.archivers.zip.GeneralPurposeBit;
import org.apache.commons.compress.archivers.zip.ResourceAlignmentExtraField;
import org.apache.commons.compress.archivers.zip.UnicodePathExtraField;
import org.apache.commons.compress.archivers.zip.UnsupportedZipFeatureException;
import org.apache.commons.compress.archivers.zip.X000A_NTFS;
import org.apache.commons.compress.archivers.zip.Zip64Mode;
import org.apache.commons.compress.archivers.zip.Zip64RequiredException;
import org.apache.commons.compress.archivers.zip.ZipArchiveEntry;
import org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileInputStream;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class ZipArchiveOutputStream_ESTest extends ZipArchiveOutputStream_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
//        try {
          File file0 = MockFile.createTempFile("7]y>5QMB<e]", "7]y>5QMB<e]");
          ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(file0);
          JarArchiveEntry jarArchiveEntry0 = new JarArchiveEntry("7]y>5QMB<e]");
          jarArchiveEntry0.setSize(4294967295L);
          zipArchiveOutputStream0.putArchiveEntry(jarArchiveEntry0);
          zipArchiveOutputStream0.writeCentralFileHeader(jarArchiveEntry0);
          assertEquals(8, jarArchiveEntry0.getMethod());
//        } catch(Throwable t) {
//            // Need to catch declared exceptions
//        }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      MockFile mockFile0 = new MockFile("A");
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(mockFile0);
      JarArchiveEntry jarArchiveEntry0 = new JarArchiveEntry("A");
      jarArchiveEntry0.setUnixMode(8);
      zipArchiveOutputStream0.putArchiveEntry(jarArchiveEntry0);
      zipArchiveOutputStream0.writeCentralFileHeader(jarArchiveEntry0);
      assertEquals(78L, mockFile0.length());
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      MockFile mockFile0 = new MockFile(" Access:[", " Access:[");
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(mockFile0);
      JarArchiveEntry jarArchiveEntry0 = new JarArchiveEntry(" Access:[");
      jarArchiveEntry0.setSize(4294967295L);
      // Undeclared exception!
//      try { 
        zipArchiveOutputStream0.writeCentralFileHeader(jarArchiveEntry0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream$EntryMetaData", e);
//      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      MockFile mockFile0 = new MockFile("@a&2V;WDYDr>a2uZS", "@a&2V;WDYDr>a2uZS");
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(mockFile0);
      zipArchiveOutputStream0.setLevel(8);
      zipArchiveOutputStream0.setLevel((-1));
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      MockFile mockFile0 = new MockFile("GROUP_EXEC");
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(mockFile0);
      zipArchiveOutputStream0.setLevel(9);
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      File file0 = MockFile.createTempFile("bad CRC cesum for entry ", "bad CRC cesum for entry ");
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(file0);
      JarArchiveEntry jarArchiveEntry0 = new JarArchiveEntry("bad CRC cesum for entry ");
      X000A_NTFS x000A_NTFS0 = new X000A_NTFS();
      jarArchiveEntry0.addAsFirstExtraField(x000A_NTFS0);
      zipArchiveOutputStream0.putArchiveEntry(jarArchiveEntry0);
      assertEquals(8, jarArchiveEntry0.getMethod());
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      File file0 = MockFile.createTempFile("bad CRC checksum for entry ", "bad CRC checksum for entry ");
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(file0);
      JarArchiveEntry jarArchiveEntry0 = new JarArchiveEntry("bad CRC checksum for entry ");
      zipArchiveOutputStream0.setMethod(0);
      zipArchiveOutputStream0.putArchiveEntry(jarArchiveEntry0);
      zipArchiveOutputStream0.putArchiveEntry(jarArchiveEntry0);
      ZipArchiveOutputStream zipArchiveOutputStream1 = new ZipArchiveOutputStream(zipArchiveOutputStream0);
      zipArchiveOutputStream1.putArchiveEntry(jarArchiveEntry0);
      zipArchiveOutputStream0.putArchiveEntry(jarArchiveEntry0);
//      try { 
        zipArchiveOutputStream1.putArchiveEntry(jarArchiveEntry0);
//        fail("Expecting exception: ZipException");
      
//      } catch(ZipException e) {
//         //
//         // bad CRC checksum for entry bad CRC checksum for entry : fee71094 instead of 0
//         //
//         verifyException("org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream", e);
//      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      File file0 = MockFile.createTempFile("*35l", (String) null);
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(file0);
      JarArchiveEntry jarArchiveEntry0 = new JarArchiveEntry("No current entry");
      zipArchiveOutputStream0.setMethod(12);
      zipArchiveOutputStream0.putArchiveEntry(jarArchiveEntry0);
      zipArchiveOutputStream0.putArchiveEntry(jarArchiveEntry0);
      assertEquals(0L, jarArchiveEntry0.getSize());
      assertEquals(0L, jarArchiveEntry0.getCompressedSize());
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      File file0 = MockFile.createTempFile("not encodeable", "always");
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(file0);
      byte[] byteArray0 = new byte[1];
      zipArchiveOutputStream0.writeOut(byteArray0);
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      MockFile mockFile0 = new MockFile("bad CRC checksum for entry ", "AsNeeded");
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(mockFile0);
      JarArchiveEntry jarArchiveEntry0 = new JarArchiveEntry("bad CRC checksum for entry ");
      zipArchiveOutputStream0.writeDataDescriptor(jarArchiveEntry0);
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertEquals(0L, mockFile0.length());
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      File file0 = MockFile.createTempFile("bad CRC checksum for entry ", "bad CRC checksum for entry ");
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(file0);
      zipArchiveOutputStream0.writeCentralDirectoryEnd();
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      MockFile mockFile0 = new MockFile("oG'<=lWX-HI}GN<");
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(mockFile0);
      JarArchiveEntry jarArchiveEntry0 = new JarArchiveEntry("oG'<=lWX-HI}GN<");
      zipArchiveOutputStream0.putArchiveEntry(jarArchiveEntry0);
      byte[] byteArray0 = new byte[3];
      zipArchiveOutputStream0.write(byteArray0, (int) (byte)0, 3);
      assertEquals(45L, mockFile0.length());
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      File file0 = MockFile.createTempFile("EnddF2U5", "EnddF2U5");
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(file0);
      byte[] byteArray0 = new byte[9];
      zipArchiveOutputStream0.writeOut(byteArray0, (byte)7, (byte)2);
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      File file0 = MockFile.createTempFile("always", "always");
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(file0);
      JarArchiveEntry jarArchiveEntry0 = new JarArchiveEntry("always");
      zipArchiveOutputStream0.putArchiveEntry(jarArchiveEntry0);
      zipArchiveOutputStream0.writeLocalFileHeader(jarArchiveEntry0);
      assertEquals(8, jarArchiveEntry0.getMethod());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      MockFile mockFile0 = new MockFile("=`]D nSF_kb8aw4z", "=`]D nSF_kb8aw4z");
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(mockFile0);
      zipArchiveOutputStream0.setEncoding((String) null);
      String string0 = zipArchiveOutputStream0.getEncoding();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      MockFile mockFile0 = new MockFile("@a&2V;WDYDr>a2uZS", "@a&2V;WDYDr>a2uZS");
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(mockFile0);
      JarArchiveEntry jarArchiveEntry0 = new JarArchiveEntry("This archive has already been finished");
      zipArchiveOutputStream0.putArchiveEntry(jarArchiveEntry0);
      zipArchiveOutputStream0.createArchiveEntry(mockFile0, "fGKk-O");
      assertEquals(68L, mockFile0.length());
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream((SeekableByteChannel) null);
      MockFile mockFile0 = new MockFile("");
      ArchiveEntry archiveEntry0 = zipArchiveOutputStream0.createArchiveEntry(mockFile0, "");
      assertEquals("/", archiveEntry0.getName());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      File file0 = MockFile.createTempFile("not encodeable", "always");
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(file0);
      byte[] byteArray0 = new byte[7];
      // Undeclared exception!
//      try { 
        zipArchiveOutputStream0.writeOut(byteArray0, (-1474), 2318);
//        fail("Expecting exception: IndexOutOfBoundsException");
      
//      } catch(IndexOutOfBoundsException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.nio.ByteBuffer", e);
//      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      File file0 = MockFile.createTempFile("bad CRC cesum for entry ", "bad CRC cesum for entry ");
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(file0);
      ZipArchiveOutputStream zipArchiveOutputStream1 = new ZipArchiveOutputStream(zipArchiveOutputStream0);
      byte[] byteArray0 = new byte[7];
      // Undeclared exception!
//      try { 
        zipArchiveOutputStream1.writeOut(byteArray0, (-1073741822), (byte)50);
//        fail("Expecting exception: IllegalStateException");
      
//      } catch(IllegalStateException e) {
//         //
//         // No current entry
//         //
//         verifyException("org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream", e);
//      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      MockFile mockFile0 = new MockFile("oG'<=lWX-HI}GN<");
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(mockFile0);
      byte[] byteArray0 = new byte[3];
      // Undeclared exception!
//      try { 
        zipArchiveOutputStream0.writeOut(byteArray0, (-1), 2482);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      File file0 = MockFile.createTempFile("always", "always");
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(file0);
      FileChannel fileChannel0 = mockFileInputStream0.getChannel();
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(fileChannel0);
      byte[] byteArray0 = new byte[8];
      // Undeclared exception!
//      try { 
        zipArchiveOutputStream0.writeOut(byteArray0);
//        fail("Expecting exception: NonWritableChannelException");
      
//      } catch(NonWritableChannelException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.evosuite.runtime.mock.java.io.EvoFileChannel", e);
//      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      File file0 = MockFile.createTempFile(", fileAccessMode=", ", fileAccessMode=");
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(file0);
      zipArchiveOutputStream0.close();
      byte[] byteArray0 = new byte[6];
//      try { 
        zipArchiveOutputStream0.writeOut(byteArray0);
//        fail("Expecting exception: ClosedChannelException");
      
//      } catch(ClosedChannelException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream((SeekableByteChannel) null);
      byte[] byteArray0 = new byte[8];
      // Undeclared exception!
//      try { 
        zipArchiveOutputStream0.writeOut(byteArray0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      MockFile mockFile0 = new MockFile("bad CRC checksum for entry ");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0, true);
      FileChannel fileChannel0 = mockFileOutputStream0.getChannel();
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(fileChannel0);
      ZipArchiveOutputStream zipArchiveOutputStream1 = new ZipArchiveOutputStream(zipArchiveOutputStream0);
      byte[] byteArray0 = new byte[9];
      // Undeclared exception!
//      try { 
        zipArchiveOutputStream1.writeOut(byteArray0);
//        fail("Expecting exception: IllegalStateException");
      
//      } catch(IllegalStateException e) {
//         //
//         // No current entry
//         //
//         verifyException("org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream", e);
//      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(pipedOutputStream0);
      byte[] byteArray0 = new byte[9];
//      try { 
        zipArchiveOutputStream0.writeOut(byteArray0);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Pipe not connected
//         //
//         verifyException("java.io.PipedOutputStream", e);
//      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      File file0 = MockFile.createTempFile("bad CRC checksum for entry ", "bad CRC checksum for entry ");
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(file0);
      JarArchiveEntry jarArchiveEntry0 = new JarArchiveEntry("bad CRC checksum for entry ");
      zipArchiveOutputStream0.putArchiveEntry(jarArchiveEntry0);
      zipArchiveOutputStream0.destroy();
//      try { 
        zipArchiveOutputStream0.writeLocalFileHeader(jarArchiveEntry0);
//        fail("Expecting exception: ClosedChannelException");
      
//      } catch(ClosedChannelException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      MockFile mockFile0 = new MockFile("-");
      JarArchiveEntry jarArchiveEntry0 = new JarArchiveEntry("5ma~{2hl");
      ResourceAlignmentExtraField resourceAlignmentExtraField0 = new ResourceAlignmentExtraField();
      jarArchiveEntry0.addExtraField(resourceAlignmentExtraField0);
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(mockFile0);
      // Undeclared exception!
//      try { 
        zipArchiveOutputStream0.writeLocalFileHeader(jarArchiveEntry0);
//        fail("Expecting exception: NegativeArraySizeException");
      
//      } catch(NegativeArraySizeException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.compress.archivers.zip.ExtraFieldUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      File file0 = MockFile.createTempFile("bad CRC checksum for entry ", "bad CRC checksum for entry ");
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(file0);
      JarArchiveEntry jarArchiveEntry0 = new JarArchiveEntry("bad CRC checksum for entry ");
      zipArchiveOutputStream0.putArchiveEntry(jarArchiveEntry0);
      ZipArchiveOutputStream zipArchiveOutputStream1 = new ZipArchiveOutputStream(zipArchiveOutputStream0);
      zipArchiveOutputStream1.putArchiveEntry(jarArchiveEntry0);
      Enumeration<MockFileInputStream> enumeration0 = (Enumeration<MockFileInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      DataInputStream dataInputStream0 = new DataInputStream(sequenceInputStream0);
      zipArchiveOutputStream0.addRawArchiveEntry(jarArchiveEntry0, dataInputStream0);
      // Undeclared exception!
//      try { 
        zipArchiveOutputStream1.writeLocalFileHeader(jarArchiveEntry0);
//        fail("Expecting exception: IllegalStateException");
      
//      } catch(IllegalStateException e) {
//         //
//         // No current entry
//         //
//         verifyException("org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream", e);
//      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      File file0 = MockFile.createTempFile(", fileAccessMode=", ", fileAccessMode=");
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(file0);
      ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry("always");
      zipArchiveOutputStream0.setEncoding("always");
//      try { 
        zipArchiveOutputStream0.writeLocalFileHeader(zipArchiveEntry0);
//        fail("Expecting exception: UnsupportedEncodingException");
      
//      } catch(UnsupportedEncodingException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream((OutputStream) null);
      // Undeclared exception!
//      try { 
        zipArchiveOutputStream0.writeDataDescriptor((ZipArchiveEntry) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream", e);
//      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      File file0 = MockFile.createTempFile("always", "always");
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(file0);
      JarArchiveEntry jarArchiveEntry0 = new JarArchiveEntry("always");
      zipArchiveOutputStream0.putArchiveEntry(jarArchiveEntry0);
      zipArchiveOutputStream0.setEncoding("always");
//      try { 
        zipArchiveOutputStream0.writeCentralFileHeader(jarArchiveEntry0);
//        fail("Expecting exception: UnsupportedEncodingException");
      
//      } catch(UnsupportedEncodingException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      MockFile mockFile0 = new MockFile("[DWrRvJ6$4\"6[:");
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(mockFile0);
      JarArchiveEntry jarArchiveEntry0 = new JarArchiveEntry("mTa8!:Ws*09n ~");
      zipArchiveOutputStream0.putArchiveEntry(jarArchiveEntry0);
      FileSystemHandling.shouldAllThrowIOExceptions();
//      try { 
        zipArchiveOutputStream0.writeCentralFileHeader(jarArchiveEntry0);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Simulated IOException
//         //
//         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
//      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      MockFile mockFile0 = new MockFile("Cp437");
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(mockFile0);
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream("Cp437");
      FileChannel fileChannel0 = mockFileInputStream0.getChannel();
      ZipArchiveOutputStream zipArchiveOutputStream1 = new ZipArchiveOutputStream(fileChannel0);
      // Undeclared exception!
//      try { 
        zipArchiveOutputStream1.writeCentralDirectoryEnd();
//        fail("Expecting exception: NonWritableChannelException");
      
//      } catch(NonWritableChannelException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.evosuite.runtime.mock.java.io.EvoFileChannel", e);
//      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      File file0 = MockFile.createTempFile(", fileAccessMode=", ", fileAccessMode=");
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(file0);
      zipArchiveOutputStream0.close();
//      try { 
        zipArchiveOutputStream0.writeCentralDirectoryEnd();
//        fail("Expecting exception: ClosedChannelException");
      
//      } catch(ClosedChannelException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream((SeekableByteChannel) null);
      // Undeclared exception!
//      try { 
        zipArchiveOutputStream0.writeCentralDirectoryEnd();
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      File file0 = MockFile.createTempFile("Cp437", "B@");
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(file0);
      ZipArchiveOutputStream zipArchiveOutputStream1 = new ZipArchiveOutputStream(zipArchiveOutputStream0);
      // Undeclared exception!
//      try { 
        zipArchiveOutputStream1.writeCentralDirectoryEnd();
//        fail("Expecting exception: IllegalStateException");
      
//      } catch(IllegalStateException e) {
//         //
//         // No current entry
//         //
//         verifyException("org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream", e);
//      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      MockFile mockFile0 = new MockFile("bad CRC checksum for entry ", "AsNeeded");
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(mockFile0);
      zipArchiveOutputStream0.setEncoding("AsNeeded");
//      try { 
        zipArchiveOutputStream0.writeCentralDirectoryEnd();
//        fail("Expecting exception: UnsupportedEncodingException");
      
//      } catch(UnsupportedEncodingException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      MockFile mockFile0 = new MockFile("@a&2V;WDYDr>a2uZS", "@a&2V;WDYDr>a2uZS");
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(mockFile0);
//      try { 
        zipArchiveOutputStream0.writeCentralDirectoryEnd();
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Error in writing to file
//         //
//         verifyException("org.evosuite.runtime.mock.java.io.NativeMockedIO", e);
//      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      MockFile mockFile0 = new MockFile("oG'<=lWX-HI}GN<");
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(mockFile0);
      JarArchiveEntry jarArchiveEntry0 = new JarArchiveEntry("oG'<=lWX-HI}GN<");
      zipArchiveOutputStream0.setMethod(3);
      zipArchiveOutputStream0.putArchiveEntry(jarArchiveEntry0);
      byte[] byteArray0 = new byte[8];
//      try { 
        zipArchiveOutputStream0.write(byteArray0, 22, 2407);
//        fail("Expecting exception: UnsupportedZipFeatureException");
      
//      } catch(UnsupportedZipFeatureException e) {
//         //
//         // unsupported feature method 'EXPANDING_LEVEL_2' used in entry oG'<=lWX-HI}GN<
//         //
//         verifyException("org.apache.commons.compress.archivers.zip.ZipUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      MockFile mockFile0 = new MockFile("@a&2V;WDYD8r>a2uZS");
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(mockFile0);
      JarArchiveEntry jarArchiveEntry0 = new JarArchiveEntry("@a&2V;WDYD8r>a2uZS");
      zipArchiveOutputStream0.putArchiveEntry(jarArchiveEntry0);
      byte[] byteArray0 = new byte[4];
      // Undeclared exception!
//      try { 
        zipArchiveOutputStream0.write(byteArray0, (int) (byte)44, (int) (byte)42);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.util.zip.CRC32", e);
//      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      MockFile mockFile0 = new MockFile("Un7,o2X}");
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(mockFile0);
      // Undeclared exception!
//      try { 
        zipArchiveOutputStream0.setEncoding("bad CRC checksum for entry ");
//        fail("Expecting exception: IllegalCharsetNameException");
      
//      } catch(IllegalCharsetNameException e) {
//         //
//         // bad CRC checksum for entry 
//         //
//         verifyException("java.nio.charset.Charset", e);
//      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      MockFile mockFile0 = new MockFile("@a&2V;WDYD8r>a2uZS", "@a&2V;WDYD8r>a2uZS");
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(mockFile0);
      JarArchiveEntry jarArchiveEntry0 = new JarArchiveEntry("@a&2V;WDYD8r>a2uZS");
      zipArchiveOutputStream0.setMethod(2337);
      zipArchiveOutputStream0.putArchiveEntry(jarArchiveEntry0);
//      try { 
        zipArchiveOutputStream0.putArchiveEntry(jarArchiveEntry0);
//        fail("Expecting exception: UnsupportedZipFeatureException");
      
//      } catch(UnsupportedZipFeatureException e) {
//         //
//         // unsupported feature compression method used in entry @a&2V;WDYD8r>a2uZS
//         //
//         verifyException("org.apache.commons.compress.archivers.zip.ZipUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry("@a&2V;WDYD8r>a2uZS");
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      FileChannel fileChannel0 = mockFileInputStream0.getChannel();
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(fileChannel0);
      // Undeclared exception!
//      try { 
        zipArchiveOutputStream0.putArchiveEntry(zipArchiveEntry0);
//        fail("Expecting exception: NonWritableChannelException");
      
//      } catch(NonWritableChannelException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.evosuite.runtime.mock.java.io.EvoFileChannel", e);
//      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      File file0 = MockFile.createTempFile("bad CRC checksum for entry ", "bad CRC checksum for entry ");
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(file0);
      JarArchiveEntry jarArchiveEntry0 = new JarArchiveEntry("bad CRC checksum for entry ");
      zipArchiveOutputStream0.destroy();
//      try { 
        zipArchiveOutputStream0.putArchiveEntry(jarArchiveEntry0);
//        fail("Expecting exception: ClosedChannelException");
      
//      } catch(ClosedChannelException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      MockFile mockFile0 = new MockFile("@a&2V;WDYDr>a2uZS", "@a&2V;WDYDr>a2uZS");
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(mockFile0);
      ZipArchiveOutputStream zipArchiveOutputStream1 = new ZipArchiveOutputStream(zipArchiveOutputStream0);
      ArchiveEntry archiveEntry0 = zipArchiveOutputStream0.createArchiveEntry(mockFile0, "");
      // Undeclared exception!
//      try { 
        zipArchiveOutputStream1.putArchiveEntry(archiveEntry0);
//        fail("Expecting exception: IllegalStateException");
      
//      } catch(IllegalStateException e) {
//         //
//         // No current entry
//         //
//         verifyException("org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream", e);
//      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      MockFile mockFile0 = new MockFile("always");
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(mockFile0);
      ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry("always");
      zipArchiveOutputStream0.setMethod((-5070));
      // Undeclared exception!
//      try { 
        zipArchiveOutputStream0.putArchiveEntry(zipArchiveEntry0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // ZIP compression method can not be negative: -5070
//         //
//         verifyException("org.apache.commons.compress.archivers.zip.ZipArchiveEntry", e);
//      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      MockFile mockFile0 = new MockFile("never");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0);
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(mockFileOutputStream0);
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(bufferedOutputStream0);
      ArArchiveEntry arArchiveEntry0 = new ArArchiveEntry(mockFile0, "xHVZ|$.L&T_c{)) /9");
      // Undeclared exception!
//      try { 
        zipArchiveOutputStream0.putArchiveEntry(arArchiveEntry0);
//        fail("Expecting exception: ClassCastException");
      
//      } catch(ClassCastException e) {
//         //
//         // org.apache.commons.compress.archivers.ar.ArArchiveEntry cannot be cast to org.apache.commons.compress.archivers.zip.ZipArchiveEntry
//         //
//         verifyException("org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream", e);
//      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      MockFile mockFile0 = new MockFile("S\"rokO0_@5yo5", "S\"rokO0_@5yo5");
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(mockFile0);
      zipArchiveOutputStream0.setEncoding("user.name");
      JarArchiveEntry jarArchiveEntry0 = new JarArchiveEntry("This archive has already been finished");
//      try { 
        zipArchiveOutputStream0.putArchiveEntry(jarArchiveEntry0);
//        fail("Expecting exception: UnsupportedEncodingException");
      
//      } catch(UnsupportedEncodingException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      File file0 = MockFile.createTempFile("bad CRC cesum for entry ", "bad CRC cesum for entry ");
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(file0);
      FileChannel fileChannel0 = mockFileInputStream0.getChannel();
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(fileChannel0);
      // Undeclared exception!
//      try { 
        zipArchiveOutputStream0.finish();
//        fail("Expecting exception: NonWritableChannelException");
      
//      } catch(NonWritableChannelException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.evosuite.runtime.mock.java.io.EvoFileChannel", e);
//      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream((SeekableByteChannel) null);
      // Undeclared exception!
//      try { 
        zipArchiveOutputStream0.finish();
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      MockFile mockFile0 = new MockFile("5#}hF");
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(mockFile0);
      ZipArchiveOutputStream zipArchiveOutputStream1 = new ZipArchiveOutputStream(zipArchiveOutputStream0);
      // Undeclared exception!
//      try { 
        zipArchiveOutputStream1.finish();
//        fail("Expecting exception: IllegalStateException");
      
//      } catch(IllegalStateException e) {
//         //
//         // No current entry
//         //
//         verifyException("org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream", e);
//      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      File file0 = MockFile.createTempFile(", fileAccessMode=", ", fileAccessMode=");
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(file0);
      zipArchiveOutputStream0.setEncoding("always");
//      try { 
        zipArchiveOutputStream0.finish();
//        fail("Expecting exception: UnsupportedEncodingException");
      
//      } catch(UnsupportedEncodingException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      MockFile mockFile0 = new MockFile("GROUP_EXEC");
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(mockFile0);
      ZipArchiveOutputStream zipArchiveOutputStream1 = new ZipArchiveOutputStream(zipArchiveOutputStream0);
//      try { 
        zipArchiveOutputStream1.destroy();
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Error in writing to file
//         //
//         verifyException("org.evosuite.runtime.mock.java.io.NativeMockedIO", e);
//      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      MockFile mockFile0 = new MockFile("never");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0);
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(mockFileOutputStream0);
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(bufferedOutputStream0);
      zipArchiveOutputStream0.close();
      // Undeclared exception!
//      try { 
        zipArchiveOutputStream0.deflate();
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Deflater has been closed
//         //
//         verifyException("java.util.zip.Deflater", e);
//      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(65535);
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(byteArrayOutputStream0);
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(bufferedOutputStream0);
      MockFile mockFile0 = new MockFile("?byI~V-eZ,}q;*");
      // Undeclared exception!
//      try { 
        zipArchiveOutputStream0.createArchiveEntry(mockFile0, (String) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // name
//         //
//         verifyException("java.util.Objects", e);
//      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      MockFile mockFile0 = new MockFile(" Modify:[", " Modify:[");
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(mockFile0);
      JarArchiveEntry jarArchiveEntry0 = new JarArchiveEntry(" Modify:[");
      zipArchiveOutputStream0.setMethod(3);
      zipArchiveOutputStream0.putArchiveEntry(jarArchiveEntry0);
//      try { 
        zipArchiveOutputStream0.closeArchiveEntry();
//        fail("Expecting exception: UnsupportedZipFeatureException");
      
//      } catch(UnsupportedZipFeatureException e) {
//         //
//         // unsupported feature method 'EXPANDING_LEVEL_2' used in entry  Modify:[
//         //
//         verifyException("org.apache.commons.compress.archivers.zip.ZipUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      File file0 = MockFile.createTempFile("bad CRC checksum for entry ", "bad CRC checksum for entry ");
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(file0);
      JarArchiveEntry jarArchiveEntry0 = new JarArchiveEntry("bad CRC checksum for entry ");
      zipArchiveOutputStream0.putArchiveEntry(jarArchiveEntry0);
      ZipArchiveOutputStream zipArchiveOutputStream1 = new ZipArchiveOutputStream(zipArchiveOutputStream0);
      zipArchiveOutputStream1.putArchiveEntry(jarArchiveEntry0);
      zipArchiveOutputStream0.closeArchiveEntry();
      // Undeclared exception!
//      try { 
        zipArchiveOutputStream1.closeArchiveEntry();
//        fail("Expecting exception: IllegalStateException");
      
//      } catch(IllegalStateException e) {
//         //
//         // No current entry
//         //
//         verifyException("org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream", e);
//      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      FileChannel fileChannel0 = mockFileInputStream0.getChannel();
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(fileChannel0);
      // Undeclared exception!
//      try { 
        zipArchiveOutputStream0.close();
//        fail("Expecting exception: NonWritableChannelException");
      
//      } catch(NonWritableChannelException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.evosuite.runtime.mock.java.io.EvoFileChannel", e);
//      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      File file0 = MockFile.createTempFile("<HY", "{NUL}");
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(file0);
      zipArchiveOutputStream0.destroy();
//      try { 
        zipArchiveOutputStream0.close();
//        fail("Expecting exception: ClosedChannelException");
      
//      } catch(ClosedChannelException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      File file0 = MockFile.createTempFile("EnddF2U5", "R.)QyKXEgFe");
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(file0);
      ZipArchiveOutputStream zipArchiveOutputStream1 = new ZipArchiveOutputStream(zipArchiveOutputStream0);
      // Undeclared exception!
//      try { 
        zipArchiveOutputStream1.close();
//        fail("Expecting exception: IllegalStateException");
      
//      } catch(IllegalStateException e) {
//         //
//         // No current entry
//         //
//         verifyException("org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream", e);
//      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      MockFile mockFile0 = new MockFile("@a&2V;WDYDr>a2uZS", "@a&2V;WDYDr>a2uZS");
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(mockFile0);
//      try { 
        zipArchiveOutputStream0.close();
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Error in writing to file
//         //
//         verifyException("org.evosuite.runtime.mock.java.io.NativeMockedIO", e);
//      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      MockFile mockFile0 = new MockFile(",B-4");
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(mockFile0);
      JarArchiveEntry jarArchiveEntry0 = new JarArchiveEntry(",B-4");
      jarArchiveEntry0.setGeneralPurposeBit((GeneralPurposeBit) null);
      // Undeclared exception!
//      try { 
        zipArchiveOutputStream0.canWriteEntryData(jarArchiveEntry0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.compress.archivers.zip.ZipUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      JarArchiveEntry jarArchiveEntry0 = new JarArchiveEntry("");
      MockPrintStream mockPrintStream0 = new MockPrintStream("always");
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(mockPrintStream0);
      jarArchiveEntry0.setMethod(30);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
//      try { 
        zipArchiveOutputStream0.addRawArchiveEntry(jarArchiveEntry0, pipedInputStream0);
//        fail("Expecting exception: UnsupportedZipFeatureException");
      
//      } catch(UnsupportedZipFeatureException e) {
//         //
//         // unsupported feature compression method used in entry 
//         //
//         verifyException("org.apache.commons.compress.archivers.zip.ZipUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      File file0 = MockFile.createTempFile("bad CRC checksum for entry ", "bad CRC checksum for entry ");
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(file0);
      JarArchiveEntry jarArchiveEntry0 = new JarArchiveEntry("bad CRC checksum for entry ");
      UnicodePathExtraField unicodePathExtraField0 = new UnicodePathExtraField();
      jarArchiveEntry0.addAsFirstExtraField(unicodePathExtraField0);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(pipedInputStream0);
//      try { 
        zipArchiveOutputStream0.addRawArchiveEntry(jarArchiveEntry0, bufferedInputStream0);
//        fail("Expecting exception: ZipException");
      
//      } catch(ZipException e) {
//         //
//         // UniCode path extra data must have at least 5 bytes.
//         //
//         verifyException("org.apache.commons.compress.archivers.zip.AbstractUnicodeExtraField", e);
//      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      File file0 = MockFile.createTempFile("bad CRC checksum for entry ", "bad CRC checksum for entry ");
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(file0);
      ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
      zipArchiveOutputStream0.putArchiveEntry(zipArchiveEntry0);
      Path path0 = file0.toPath();
      OpenOption[] openOptionArray0 = new OpenOption[1];
      StandardOpenOption standardOpenOption0 = StandardOpenOption.TRUNCATE_EXISTING;
      openOptionArray0[0] = (OpenOption) standardOpenOption0;
      FileChannel fileChannel0 = FileChannel.open(path0, openOptionArray0);
      ZipArchiveOutputStream zipArchiveOutputStream1 = new ZipArchiveOutputStream(fileChannel0);
      // Undeclared exception!
//      try { 
        zipArchiveOutputStream1.addRawArchiveEntry(zipArchiveEntry0, (InputStream) null);
//        fail("Expecting exception: NonWritableChannelException");
      
//      } catch(NonWritableChannelException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      File file0 = MockFile.createTempFile("GmJM3a;&Q", "GmJM3a;&Q");
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(file0);
      JarArchiveEntry jarArchiveEntry0 = new JarArchiveEntry("GmJM3a;&Q");
      zipArchiveOutputStream0.putArchiveEntry(jarArchiveEntry0);
      zipArchiveOutputStream0.destroy();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(file0);
//      try { 
        zipArchiveOutputStream0.addRawArchiveEntry(jarArchiveEntry0, mockFileInputStream0);
//        fail("Expecting exception: ClosedChannelException");
      
//      } catch(ClosedChannelException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      MockFile mockFile0 = new MockFile("@a&2V;WDYDr>a2uZS", "@a&2V;WDYDr>a2uZS");
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(mockFile0);
      JarArchiveEntry jarArchiveEntry0 = new JarArchiveEntry("This archive has already been finished");
      zipArchiveOutputStream0.putArchiveEntry(jarArchiveEntry0);
      DataInputStream dataInputStream0 = new DataInputStream((InputStream) null);
      // Undeclared exception!
//      try { 
        zipArchiveOutputStream0.addRawArchiveEntry(jarArchiveEntry0, dataInputStream0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.io.DataInputStream", e);
//      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      File file0 = MockFile.createTempFile(">OW?=w9t@H<\"S\"`", ">OW?=w9t@H<\"S\"`");
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(file0);
      JarArchiveEntry jarArchiveEntry0 = new JarArchiveEntry(">OW?=w9t@H<\"S\"`");
      zipArchiveOutputStream0.putArchiveEntry(jarArchiveEntry0);
      ResourceAlignmentExtraField resourceAlignmentExtraField0 = new ResourceAlignmentExtraField();
      jarArchiveEntry0.addExtraField(resourceAlignmentExtraField0);
      byte[] byteArray0 = new byte[6];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      // Undeclared exception!
//      try { 
        zipArchiveOutputStream0.addRawArchiveEntry(jarArchiveEntry0, byteArrayInputStream0);
//        fail("Expecting exception: NegativeArraySizeException");
      
//      } catch(NegativeArraySizeException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.compress.archivers.zip.ExtraFieldUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      MockFile mockFile0 = new MockFile("always", "bad CRC checksum for entry ");
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(mockFile0);
      JarArchiveEntry jarArchiveEntry0 = new JarArchiveEntry("This archive contains unclosed entries.");
      ZipArchiveOutputStream zipArchiveOutputStream1 = new ZipArchiveOutputStream((SeekableByteChannel) null);
      zipArchiveOutputStream0.putArchiveEntry(jarArchiveEntry0);
      ZipArchiveOutputStream zipArchiveOutputStream2 = new ZipArchiveOutputStream(zipArchiveOutputStream1);
      // Undeclared exception!
//      try { 
        zipArchiveOutputStream2.addRawArchiveEntry(jarArchiveEntry0, (InputStream) null);
//        fail("Expecting exception: IllegalStateException");
      
//      } catch(IllegalStateException e) {
//         //
//         // No current entry
//         //
//         verifyException("org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream", e);
//      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      MockFile mockFile0 = new MockFile("@a&2V;WDYDr>a2uZS", "@a&2V;WDYDr>a2uZS");
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(mockFile0);
      ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry("This archive has already been finished");
      byte[] byteArray0 = new byte[2];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 0, (-2049));
      // Undeclared exception!
//      try { 
        zipArchiveOutputStream0.addRawArchiveEntry(zipArchiveEntry0, byteArrayInputStream0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // ZIP compression method can not be negative: -1
//         //
//         verifyException("org.apache.commons.compress.archivers.zip.ZipArchiveEntry", e);
//      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      File file0 = MockFile.createTempFile("bad CRC cesum for entry ", "bad CRC cesum for entry ");
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(file0);
      JarArchiveEntry jarArchiveEntry0 = new JarArchiveEntry("bad CRC cesum for entry ");
      zipArchiveOutputStream0.putArchiveEntry(jarArchiveEntry0);
      byte[] byteArray0 = new byte[1];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte) (-89), 22);
      // Undeclared exception!
//      try { 
        zipArchiveOutputStream0.addRawArchiveEntry(jarArchiveEntry0, byteArrayInputStream0);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.io.ByteArrayInputStream", e);
//      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      MockFile mockFile0 = new MockFile("1", "1");
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(mockFile0);
      ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry("1");
      zipArchiveOutputStream0.putArchiveEntry(zipArchiveEntry0);
      zipArchiveOutputStream0.setEncoding("1");
      byte[] byteArray0 = new byte[5];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(byteArrayInputStream0);
//      try { 
        zipArchiveOutputStream0.addRawArchiveEntry(zipArchiveEntry0, pushbackInputStream0);
//        fail("Expecting exception: UnsupportedEncodingException");
      
//      } catch(UnsupportedEncodingException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      MockFile mockFile0 = new MockFile("A");
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(mockFile0);
      JarArchiveEntry jarArchiveEntry0 = new JarArchiveEntry("A");
      zipArchiveOutputStream0.putArchiveEntry(jarArchiveEntry0);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream((InputStream) null);
//      try { 
        zipArchiveOutputStream0.addRawArchiveEntry(jarArchiveEntry0, bufferedInputStream0);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Stream closed
//         //
//         verifyException("java.io.BufferedInputStream", e);
//      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      File file0 = MockFile.createTempFile(" Modify:[", " \u0000");
      ZipArchiveOutputStream zipArchiveOutputStream0 = null;
//      try {
        zipArchiveOutputStream0 = new ZipArchiveOutputStream(file0);
//        fail("Expecting exception: InvalidPathException");
      
//      } catch(InvalidPathException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      ZipArchiveOutputStream zipArchiveOutputStream0 = null;
//      try {
        zipArchiveOutputStream0 = new ZipArchiveOutputStream((File) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream", e);
//      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      MockFile mockFile0 = new MockFile("", "");
      ZipArchiveOutputStream zipArchiveOutputStream0 = null;
//      try {
        zipArchiveOutputStream0 = new ZipArchiveOutputStream(mockFile0);
//        fail("Expecting exception: FileNotFoundException");
      
//      } catch(Throwable e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.evosuite.runtime.mock.java.io.MockFileOutputStream", e);
//      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      MockFile mockFile0 = new MockFile("CdUz]yom Y/<Q~kM");
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(mockFile0);
      JarArchiveEntry jarArchiveEntry0 = new JarArchiveEntry("CdUz]yom Y/<Q~kM");
      Zip64Mode zip64Mode0 = Zip64Mode.Always;
      zipArchiveOutputStream0.setUseZip64(zip64Mode0);
      zipArchiveOutputStream0.putArchiveEntry(jarArchiveEntry0);
      zipArchiveOutputStream0.closeArchiveEntry();
      zipArchiveOutputStream0.writeCentralFileHeader(jarArchiveEntry0);
      assertEquals(0L, jarArchiveEntry0.getCrc());
      assertEquals(2L, jarArchiveEntry0.getCompressedSize());
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      File file0 = MockFile.createTempFile("Cu;hW{qNo(5Z^RTnu", "9");
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(file0);
      ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry("");
      zipArchiveOutputStream0.putArchiveEntry(zipArchiveEntry0);
      // Undeclared exception!
//      try { 
        zipArchiveOutputStream0.write((byte[]) null, 907, (-275));
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.util.zip.CRC32", e);
//      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      File file0 = MockFile.createTempFile("always", "always");
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(file0);
      JarArchiveEntry jarArchiveEntry0 = new JarArchiveEntry("always");
      zipArchiveOutputStream0.putArchiveEntry(jarArchiveEntry0);
      boolean boolean0 = zipArchiveOutputStream0.canWriteEntryData(jarArchiveEntry0);
      assertEquals(8, jarArchiveEntry0.getMethod());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      MockFile mockFile0 = new MockFile("GROUP_EXEC");
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(mockFile0);
      zipArchiveOutputStream0.destroy();
//      try { 
        zipArchiveOutputStream0.writeOut((byte[]) null, 9, (-1));
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.evosuite.runtime.mock.java.io.MockFileOutputStream", e);
//      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      File file0 = MockFile.createTempFile(", fileAccessMode=", ", fileAccessMode=");
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(file0);
      zipArchiveOutputStream0.finish();
//      try { 
        zipArchiveOutputStream0.createArchiveEntry(file0, "always");
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Stream has already been finished
//         //
//         verifyException("org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream", e);
//      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      MockFile mockFile0 = new MockFile(" Modify:[", " Modify:[");
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(mockFile0);
      zipArchiveOutputStream0.setUseLanguageEncodingFlag(false);
      JarArchiveEntry jarArchiveEntry0 = new JarArchiveEntry(" Modify:[");
      zipArchiveOutputStream0.putArchiveEntry(jarArchiveEntry0);
      assertEquals(8, jarArchiveEntry0.getMethod());
      assertEquals(39L, mockFile0.length());
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream((OutputStream) null);
      Zip64Mode zip64Mode0 = Zip64Mode.Never;
      zipArchiveOutputStream0.setUseZip64(zip64Mode0);
      zipArchiveOutputStream0.writeZip64CentralDirectory();
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      MockFile mockFile0 = new MockFile(" Access:[");
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(mockFile0);
      JarArchiveEntry jarArchiveEntry0 = new JarArchiveEntry(" Access:[");
      jarArchiveEntry0.setSize(4294967323L);
      zipArchiveOutputStream0.putArchiveEntry(jarArchiveEntry0);
      zipArchiveOutputStream0.writeCentralFileHeader(jarArchiveEntry0);
      assertEquals(8, jarArchiveEntry0.getMethod());
      assertEquals(134L, mockFile0.length());
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      File file0 = MockFile.createTempFile("always", "always");
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(file0);
      JarArchiveEntry jarArchiveEntry0 = new JarArchiveEntry("always");
      zipArchiveOutputStream0.putArchiveEntry(jarArchiveEntry0);
      jarArchiveEntry0.setComment("always");
      zipArchiveOutputStream0.writeCentralFileHeader(jarArchiveEntry0);
      assertEquals(8, jarArchiveEntry0.getMethod());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      File file0 = MockFile.createTempFile("GmJM3aB&Q", "GmJM3aB&Q");
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(file0);
      JarArchiveEntry jarArchiveEntry0 = new JarArchiveEntry("GmJM3aB&Q");
      zipArchiveOutputStream0.putArchiveEntry(jarArchiveEntry0);
      zipArchiveOutputStream0.closeArchiveEntry();
      Zip64Mode zip64Mode0 = Zip64Mode.Always;
      zipArchiveOutputStream0.setUseZip64(zip64Mode0);
      zipArchiveOutputStream0.finish();
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      MockFile mockFile0 = new MockFile(" Access:[", " Access:[");
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(mockFile0);
      JarArchiveEntry jarArchiveEntry0 = new JarArchiveEntry(" Access:[");
      jarArchiveEntry0.setSize(9151314442816847872L);
      // Undeclared exception!
//      try { 
        zipArchiveOutputStream0.writeCentralFileHeader(jarArchiveEntry0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream$EntryMetaData", e);
//      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      MockFile mockFile0 = new MockFile("Cp437");
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(mockFile0);
      ZipArchiveOutputStream.UnicodeExtraFieldPolicy zipArchiveOutputStream_UnicodeExtraFieldPolicy0 = ZipArchiveOutputStream.UnicodeExtraFieldPolicy.ALWAYS;
      zipArchiveOutputStream0.setCreateUnicodeExtraFields(zipArchiveOutputStream_UnicodeExtraFieldPolicy0);
      JarArchiveEntry jarArchiveEntry0 = new JarArchiveEntry("Cp437");
      jarArchiveEntry0.setComment("jB*x");
      // Undeclared exception!
//      try { 
        zipArchiveOutputStream0.writeLocalFileHeader(jarArchiveEntry0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream$CurrentEntry", e);
//      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream((OutputStream) null);
      zipArchiveOutputStream0.setCreateUnicodeExtraFields((ZipArchiveOutputStream.UnicodeExtraFieldPolicy) null);
      JarArchiveEntry jarArchiveEntry0 = new JarArchiveEntry("bad CRC checksum for entry ");
      jarArchiveEntry0.setComment("");
      // Undeclared exception!
//      try { 
        zipArchiveOutputStream0.putArchiveEntry(jarArchiveEntry0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.compress.archivers.zip.StreamCompressor$OutputStreamCompressor", e);
//      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream((OutputStream) null);
      zipArchiveOutputStream0.setCreateUnicodeExtraFields((ZipArchiveOutputStream.UnicodeExtraFieldPolicy) null);
      JarArchiveEntry jarArchiveEntry0 = new JarArchiveEntry("bad CRC checksum for entry ");
      jarArchiveEntry0.setComment("bad CRC checksum for entry ");
      // Undeclared exception!
//      try { 
        zipArchiveOutputStream0.putArchiveEntry(jarArchiveEntry0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.compress.archivers.zip.StreamCompressor$OutputStreamCompressor", e);
//      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      MockFile mockFile0 = new MockFile("@a&2V;WDYDr>a2uZS", "@a&2V;WDYDr>a2uZS");
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(mockFile0);
      ZipArchiveOutputStream.UnicodeExtraFieldPolicy zipArchiveOutputStream_UnicodeExtraFieldPolicy0 = ZipArchiveOutputStream.UnicodeExtraFieldPolicy.ALWAYS;
      zipArchiveOutputStream0.setCreateUnicodeExtraFields(zipArchiveOutputStream_UnicodeExtraFieldPolicy0);
      ZipArchiveEntry zipArchiveEntry0 = (ZipArchiveEntry)zipArchiveOutputStream0.createArchiveEntry(mockFile0, "");
      zipArchiveOutputStream0.putArchiveEntry(zipArchiveEntry0);
      assertEquals(39L, mockFile0.length());
      assertEquals(8, zipArchiveEntry0.getMethod());
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream((OutputStream) null);
      JarArchiveEntry jarArchiveEntry0 = new JarArchiveEntry("org.apache.commons.compress.archivers.zip.ZipEncodingHelper");
      ResourceAlignmentExtraField resourceAlignmentExtraField0 = new ResourceAlignmentExtraField(0);
      jarArchiveEntry0.addExtraField(resourceAlignmentExtraField0);
      // Undeclared exception!
//      try { 
        zipArchiveOutputStream0.putArchiveEntry(jarArchiveEntry0);
//        fail("Expecting exception: NegativeArraySizeException");
      
//      } catch(NegativeArraySizeException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.compress.archivers.zip.ExtraFieldUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      MockFile mockFile0 = new MockFile("|iL");
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(mockFile0);
      JarArchiveEntry jarArchiveEntry0 = new JarArchiveEntry("|iL");
      ResourceAlignmentExtraField resourceAlignmentExtraField0 = new ResourceAlignmentExtraField(0, true, 3);
      jarArchiveEntry0.addExtraField(resourceAlignmentExtraField0);
      zipArchiveOutputStream0.putArchiveEntry(jarArchiveEntry0);
      assertEquals(8, jarArchiveEntry0.getMethod());
      assertEquals(33L, mockFile0.length());
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      File file0 = MockFile.createTempFile("bad CRC cesum for entry ", "bad CRC cesum for entry ");
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(file0);
      JarArchiveEntry jarArchiveEntry0 = new JarArchiveEntry("bad CRC cesum for entry ");
      jarArchiveEntry0.setAlignment(2048);
      zipArchiveOutputStream0.putArchiveEntry(jarArchiveEntry0);
      assertEquals(8, jarArchiveEntry0.getMethod());
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      MockFile mockFile0 = new MockFile("=`]D nSF_kb8aw4z", "=`]D nSF_kb8aw4z");
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(mockFile0);
      JarArchiveEntry jarArchiveEntry0 = new JarArchiveEntry("=`]D nSF_kb8aw4z");
      ResourceAlignmentExtraField resourceAlignmentExtraField0 = new ResourceAlignmentExtraField(12, true);
      jarArchiveEntry0.addExtraField(resourceAlignmentExtraField0);
      zipArchiveOutputStream0.putArchiveEntry(jarArchiveEntry0);
      assertEquals(8, jarArchiveEntry0.getMethod());
      assertEquals(64L, mockFile0.length());
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      MockFile mockFile0 = new MockFile("p;A)[EK&v9K@IUuj", "never");
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(mockFile0);
      zipArchiveOutputStream0.flush();
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      File file0 = MockFile.createTempFile(", fileAccessMode=", ", fileAccessMode=");
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(file0);
      zipArchiveOutputStream0.flush();
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      File file0 = MockFile.createTempFile(", fileAccessMode=", ", fileAccessMode=");
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(file0);
      zipArchiveOutputStream0.close();
      zipArchiveOutputStream0.close();
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      MockFile mockFile0 = new MockFile("G-Q`yh'[gI");
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(mockFile0);
      ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
      zipArchiveOutputStream0.putArchiveEntry(zipArchiveEntry0);
      byte[] byteArray0 = new byte[1];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(byteArrayInputStream0);
      zipArchiveOutputStream0.addRawArchiveEntry(zipArchiveEntry0, bufferedInputStream0);
      assertEquals(0L, zipArchiveEntry0.getCrc());
      assertEquals(95L, mockFile0.length());
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream((OutputStream) null);
      byte[] byteArray0 = new byte[1];
      // Undeclared exception!
//      try { 
        zipArchiveOutputStream0.write(byteArray0, 12, 15);
//        fail("Expecting exception: IllegalStateException");
      
//      } catch(IllegalStateException e) {
//         //
//         // No current entry
//         //
//         verifyException("org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream", e);
//      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      File file0 = MockFile.createTempFile("bad CRC checksum for entry ", "bad CRC checksum for entry ");
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(file0);
      JarArchiveEntry jarArchiveEntry0 = new JarArchiveEntry("bad CRC checksum for entry ");
      zipArchiveOutputStream0.setMethod(1);
      zipArchiveOutputStream0.putArchiveEntry(jarArchiveEntry0);
      boolean boolean0 = zipArchiveOutputStream0.canWriteEntryData(jarArchiveEntry0);
      assertEquals(1, jarArchiveEntry0.getMethod());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      MockFile mockFile0 = new MockFile("$:aR<8f#{KoDwA", "$:aR<8f#{KoDwA");
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(mockFile0);
      zipArchiveOutputStream0.setMethod(6);
      JarArchiveEntry jarArchiveEntry0 = new JarArchiveEntry("$:aR<8f#{KoDwA");
      zipArchiveOutputStream0.putArchiveEntry(jarArchiveEntry0);
      boolean boolean0 = zipArchiveOutputStream0.canWriteEntryData(jarArchiveEntry0);
      assertEquals(6, jarArchiveEntry0.getMethod());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      MockFile mockFile0 = new MockFile("$:aR<8f#{KoDwA", "$:aR<8f#{KoDwA");
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(mockFile0);
      JarArchiveEntry jarArchiveEntry0 = new JarArchiveEntry("$:aR<8f#{KoDwA");
      boolean boolean0 = zipArchiveOutputStream0.canWriteEntryData(jarArchiveEntry0);
      assertFalse(boolean0);
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      File file0 = MockFile.createTempFile("EnddF2U5", "R.)QyKXEgFe");
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(file0);
      SevenZArchiveEntry sevenZArchiveEntry0 = new SevenZArchiveEntry();
      boolean boolean0 = zipArchiveOutputStream0.canWriteEntryData(sevenZArchiveEntry0);
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream((OutputStream) null);
      zipArchiveOutputStream0.setLevel((-1));
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream((OutputStream) null);
      // Undeclared exception!
//      try { 
        zipArchiveOutputStream0.setLevel(24);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Invalid compression level: 24
//         //
//         verifyException("org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream", e);
//      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      MockFile mockFile0 = new MockFile("p;A)[EK&v9K@IUuj", "never");
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(mockFile0);
      // Undeclared exception!
//      try { 
        zipArchiveOutputStream0.setLevel((-1474));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Invalid compression level: -1474
//         //
//         verifyException("org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream", e);
//      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      MockFile mockFile0 = new MockFile("$:aR<8f# dDwA", "$:aR<8f# dDwA");
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(mockFile0);
      JarArchiveEntry jarArchiveEntry0 = new JarArchiveEntry("$:aR<8f# dDwA");
      jarArchiveEntry0.setCompressedSize(9151314442816847872L);
//      try { 
        zipArchiveOutputStream0.putArchiveEntry(jarArchiveEntry0);
//        fail("Expecting exception: Zip64RequiredException");
      
//      } catch(Zip64RequiredException e) {
//         //
//         // $:aR<8f# dDwA's size exceeds the limit of 4GByte.
//         //
//         verifyException("org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream", e);
//      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream((OutputStream) null);
      zipArchiveOutputStream0.setMethod(0);
      MockFile mockFile0 = new MockFile("N{!a2Ck|RQRiI");
      ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(mockFile0, "");
//      try { 
        zipArchiveOutputStream0.putArchiveEntry(zipArchiveEntry0);
//        fail("Expecting exception: ZipException");
      
//      } catch(ZipException e) {
//         //
//         // crc checksum is required for STORED method when not writing to a file
//         //
//         verifyException("org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream", e);
//      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      MockFile mockFile0 = new MockFile("bad CRC checksum for entry ", "always");
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(mockFile0);
      ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry("always");
      zipArchiveOutputStream0.setMethod(0);
//      try { 
        zipArchiveOutputStream0.putArchiveEntry(zipArchiveEntry0);
//        fail("Expecting exception: ZipException");
      
//      } catch(ZipException e) {
//         //
//         // uncompressed size is required for STORED method when not writing to a file
//         //
//         verifyException("org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream", e);
//      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      MockFile mockFile0 = new MockFile("A");
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(mockFile0);
      JarArchiveEntry jarArchiveEntry0 = new JarArchiveEntry("A");
      zipArchiveOutputStream0.setLevel(8);
      zipArchiveOutputStream0.putArchiveEntry(jarArchiveEntry0);
      assertEquals(8, jarArchiveEntry0.getMethod());
      assertEquals(31L, mockFile0.length());
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      File file0 = MockFile.createTempFile("7]y>5QMB<e]", "7]y>5QMB<e]");
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(file0);
      JarArchiveEntry jarArchiveEntry0 = new JarArchiveEntry("7]y>5QMB<e]");
      zipArchiveOutputStream0.setMethod(0);
      jarArchiveEntry0.setSize(4294967295L);
      zipArchiveOutputStream0.putArchiveEntry(jarArchiveEntry0);
      assertEquals(0, jarArchiveEntry0.getMethod());
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      File file0 = MockFile.createTempFile("GmJM3aB&Q", "GmJM3aB&Q");
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(file0);
      JarArchiveEntry jarArchiveEntry0 = new JarArchiveEntry("GmJM3aB&Q");
      zipArchiveOutputStream0.putArchiveEntry(jarArchiveEntry0);
      zipArchiveOutputStream0.closeArchiveEntry();
      Zip64Mode zip64Mode0 = Zip64Mode.Always;
      zipArchiveOutputStream0.setUseZip64(zip64Mode0);
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(file0);
      zipArchiveOutputStream0.addRawArchiveEntry(jarArchiveEntry0, mockFileInputStream0);
      assertEquals(0L, jarArchiveEntry0.getCrc());
      assertEquals(2L, jarArchiveEntry0.getCompressedSize());
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      File file0 = MockFile.createTempFile(", fileAccessMode=", ", fileAccessMode=");
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(file0);
      ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry("always");
      zipArchiveOutputStream0.close();
//      try { 
        zipArchiveOutputStream0.putArchiveEntry(zipArchiveEntry0);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Stream has already been finished
//         //
//         verifyException("org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream", e);
//      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      File file0 = MockFile.createTempFile("Cu;hW{qNo(5Z^RTnu", "Cu;hW{qNo(5Z^RTnu");
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(file0);
      ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry("always");
      zipArchiveOutputStream0.putArchiveEntry(zipArchiveEntry0);
      zipArchiveOutputStream0.writeCentralFileHeader(zipArchiveEntry0);
      zipArchiveOutputStream0.closeArchiveEntry();
      assertEquals(0, zipArchiveOutputStream0.getCount());
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      File file0 = MockFile.createTempFile("7]y>5QMB<e]", "7]y>5QMB<e]");
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(file0);
      Zip64Mode zip64Mode0 = Zip64Mode.Never;
      zipArchiveOutputStream0.setUseZip64(zip64Mode0);
      JarArchiveEntry jarArchiveEntry0 = new JarArchiveEntry("7]y>5QMB<e]");
      zipArchiveOutputStream0.putArchiveEntry(jarArchiveEntry0);
      zipArchiveOutputStream0.putArchiveEntry(jarArchiveEntry0);
      assertEquals(8, jarArchiveEntry0.getMethod());
      assertEquals(2L, jarArchiveEntry0.getCompressedSize());
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      File file0 = MockFile.createTempFile("GmJM3aB&Q", "GmJM3aB&Q");
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(file0);
      JarArchiveEntry jarArchiveEntry0 = new JarArchiveEntry("GmJM3aB&Q");
      zipArchiveOutputStream0.putArchiveEntry(jarArchiveEntry0);
      Zip64Mode zip64Mode0 = Zip64Mode.Always;
      zipArchiveOutputStream0.setUseZip64(zip64Mode0);
      zipArchiveOutputStream0.putArchiveEntry(jarArchiveEntry0);
      assertEquals(0L, jarArchiveEntry0.getCrc());
      assertEquals(0L, jarArchiveEntry0.getSize());
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      File file0 = MockFile.createTempFile("baH CRC cecsum for entry ", "baH CRC cecsum for entry ");
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(file0);
      JarArchiveEntry jarArchiveEntry0 = new JarArchiveEntry("baH CRC cecsum for entry ");
      zipArchiveOutputStream0.setMethod(0);
      zipArchiveOutputStream0.putArchiveEntry(jarArchiveEntry0);
      zipArchiveOutputStream0.putArchiveEntry(jarArchiveEntry0);
      ZipArchiveOutputStream zipArchiveOutputStream1 = new ZipArchiveOutputStream(zipArchiveOutputStream0);
      zipArchiveOutputStream1.putArchiveEntry(jarArchiveEntry0);
      zipArchiveOutputStream1.writeCentralFileHeader(jarArchiveEntry0);
//      try { 
        zipArchiveOutputStream1.closeArchiveEntry();
//        fail("Expecting exception: ZipException");
      
//      } catch(ZipException e) {
//         //
//         // bad size for entry baH CRC cecsum for entry : 0 instead of 71
//         //
//         verifyException("org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream", e);
//      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      JarArchiveEntry jarArchiveEntry0 = new JarArchiveEntry("F");
      MockPrintStream mockPrintStream0 = new MockPrintStream("q56cLmM?$EsO$;w");
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(mockPrintStream0);
      zipArchiveOutputStream0.setMethod(1);
      zipArchiveOutputStream0.putArchiveEntry(jarArchiveEntry0);
//      try { 
        zipArchiveOutputStream0.putArchiveEntry(jarArchiveEntry0);
//        fail("Expecting exception: ZipException");
      
//      } catch(ZipException e) {
//         //
//         // bad CRC checksum for entry F: ffffffffffffffff instead of 0
//         //
//         verifyException("org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream", e);
//      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      File file0 = MockFile.createTempFile("baH CRC cecsum for entry ", "baH CRC cecsum for entry ");
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(file0);
      JarArchiveEntry jarArchiveEntry0 = new JarArchiveEntry("baH CRC cecsum for entry ");
      zipArchiveOutputStream0.setMethod(0);
      zipArchiveOutputStream0.putArchiveEntry(jarArchiveEntry0);
      zipArchiveOutputStream0.putArchiveEntry(jarArchiveEntry0);
      ZipArchiveOutputStream zipArchiveOutputStream1 = new ZipArchiveOutputStream(zipArchiveOutputStream0);
      zipArchiveOutputStream1.putArchiveEntry(jarArchiveEntry0);
      zipArchiveOutputStream1.putArchiveEntry(jarArchiveEntry0);
      assertEquals(0L, jarArchiveEntry0.getCompressedSize());
      assertEquals(110L, zipArchiveOutputStream0.getBytesWritten());
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      MockFile mockFile0 = new MockFile("@a&2V;WDYDr>a2uZS", "@a&2V;WDYDr>a2uZS");
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(mockFile0);
//      try { 
        zipArchiveOutputStream0.closeArchiveEntry();
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // No current entry to close
//         //
//         verifyException("org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream", e);
//      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      File file0 = MockFile.createTempFile("<HY", "{NUL}");
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(file0);
      zipArchiveOutputStream0.finished = true;
//      try { 
        zipArchiveOutputStream0.closeArchiveEntry();
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Stream has already been finished
//         //
//         verifyException("org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream", e);
//      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      File file0 = MockFile.createTempFile("GmJM3aB&Q", "GmJM3aB&Q");
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(file0);
      JarArchiveEntry jarArchiveEntry0 = new JarArchiveEntry("GmJM3aB&Q");
      zipArchiveOutputStream0.putArchiveEntry(jarArchiveEntry0);
      zipArchiveOutputStream0.closeArchiveEntry();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(file0);
      zipArchiveOutputStream0.addRawArchiveEntry(jarArchiveEntry0, mockFileInputStream0);
      assertEquals(0L, jarArchiveEntry0.getSize());
      assertEquals(2L, jarArchiveEntry0.getCompressedSize());
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      MockFile mockFile0 = new MockFile("=`]D nSF_kb8aw4z", "=`]D nSF_kb8aw4z");
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(mockFile0);
      JarArchiveEntry jarArchiveEntry0 = new JarArchiveEntry("=`]D nSF_kb8aw4z");
      zipArchiveOutputStream0.putArchiveEntry(jarArchiveEntry0);
      zipArchiveOutputStream0.closeArchiveEntry();
//      try { 
        zipArchiveOutputStream0.finish();
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Error in writing to file
//         //
//         verifyException("org.evosuite.runtime.mock.java.io.NativeMockedIO", e);
//      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      File file0 = MockFile.createTempFile("Cu;hW{qNo(5Z^RTnu", "Cu;hW{qNo(5Z^RTnu");
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(file0);
      ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry("Cu;hW{qNo(5Z^RTnu");
      zipArchiveOutputStream0.putArchiveEntry(zipArchiveEntry0);
//      try { 
        zipArchiveOutputStream0.finish();
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // This archive contains unclosed entries.
//         //
//         verifyException("org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream", e);
//      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      File file0 = MockFile.createTempFile(", fileAccessMode=", ", fileAccessMode=");
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(file0);
      zipArchiveOutputStream0.close();
//      try { 
        zipArchiveOutputStream0.finish();
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // This archive has already been finished
//         //
//         verifyException("org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream", e);
//      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      MockFile mockFile0 = new MockFile("GROUP_EXEC");
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(mockFile0);
      zipArchiveOutputStream0.setEncoding("GROUP_EXEC");
      zipArchiveOutputStream0.setUseLanguageEncodingFlag(true);
      assertEquals("GROUP_EXEC", zipArchiveOutputStream0.getEncoding());
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      MockFile mockFile0 = new MockFile("GROUP_EXEC");
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(mockFile0);
      zipArchiveOutputStream0.setUseLanguageEncodingFlag(true);
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      MockFile mockFile0 = new MockFile("Cp437", "Cp437");
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(mockFile0);
      zipArchiveOutputStream0.setEncoding("UTF8");
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      File file0 = MockFile.createTempFile(", fileAccessMode=", ", fileAccessMode=");
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(file0);
      zipArchiveOutputStream0.setEncoding("always");
//      try { 
        zipArchiveOutputStream0.close();
//        fail("Expecting exception: UnsupportedEncodingException");
      
//      } catch(UnsupportedEncodingException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      MockFile mockFile0 = new MockFile(" Modify:[", " Modify:[");
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(mockFile0);
      zipArchiveOutputStream0.setUseLanguageEncodingFlag(false);
      zipArchiveOutputStream0.setEncoding((String) null);
      assertNull(zipArchiveOutputStream0.getEncoding());
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      File file0 = MockFile.createTempFile(", fileAccessMode=", ", fileAccessMode=");
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(file0);
      boolean boolean0 = zipArchiveOutputStream0.isSeekable();
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      ZipArchiveOutputStream.UnicodeExtraFieldPolicy zipArchiveOutputStream_UnicodeExtraFieldPolicy0 = ZipArchiveOutputStream.UnicodeExtraFieldPolicy.NEVER;
      String string0 = zipArchiveOutputStream_UnicodeExtraFieldPolicy0.toString();
      assertEquals("never", string0);
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      File file0 = MockFile.createTempFile("GmJM3aB&Q", "GmJM3aB&Q");
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(file0);
      zipArchiveOutputStream0.setComment("bad CRC checksum for entry ");
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      MockFile mockFile0 = new MockFile("GROUP_EXEC");
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(mockFile0);
      // Undeclared exception!
//      try { 
        zipArchiveOutputStream0.writeOut((byte[]) null, 9, (-1));
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream((SeekableByteChannel) null);
      // Undeclared exception!
//      try { 
        zipArchiveOutputStream0.close();
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      MockFile mockFile0 = new MockFile("never");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0);
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(mockFileOutputStream0);
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(bufferedOutputStream0);
      zipArchiveOutputStream0.deflate();
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      MockFile mockFile0 = new MockFile("never");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0);
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(mockFileOutputStream0);
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(bufferedOutputStream0);
      zipArchiveOutputStream0.setFallbackToUTF8(true);
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
  }
}
