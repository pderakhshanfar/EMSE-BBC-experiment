/*
 * This file was automatically generated by EvoSuite
 * Wed Oct 20 14:48:09 GMT 2021
 */

package org.apache.commons.compress.archivers.zip;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedInputStream;
import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.File;
import java.io.FileDescriptor;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.InputStream;
import java.io.ObjectInputStream;
import java.io.OutputStream;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.PushbackInputStream;
import java.io.SequenceInputStream;
import java.io.UnsupportedEncodingException;
import java.net.ProtocolFamily;
import java.net.SocketOption;
import java.net.StandardProtocolFamily;
import java.nio.channels.ClosedChannelException;
import java.nio.channels.DatagramChannel;
import java.nio.channels.FileChannel;
import java.nio.channels.NonWritableChannelException;
import java.nio.channels.SeekableByteChannel;
import java.nio.charset.IllegalCharsetNameException;
import java.nio.file.InvalidPathException;
import java.nio.file.OpenOption;
import java.nio.file.Path;
import java.nio.file.StandardOpenOption;
import java.nio.file.attribute.FileTime;
import java.util.Enumeration;
import java.util.Locale;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;
import java.util.jar.JarEntry;
import java.util.zip.ZipEntry;
import java.util.zip.ZipException;
import org.apache.commons.compress.archivers.ArchiveEntry;
import org.apache.commons.compress.archivers.dump.DumpArchiveEntry;
import org.apache.commons.compress.archivers.jar.JarArchiveEntry;
import org.apache.commons.compress.archivers.zip.JarMarker;
import org.apache.commons.compress.archivers.zip.ResourceAlignmentExtraField;
import org.apache.commons.compress.archivers.zip.UnicodeCommentExtraField;
import org.apache.commons.compress.archivers.zip.UnsupportedZipFeatureException;
import org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField;
import org.apache.commons.compress.archivers.zip.Zip64Mode;
import org.apache.commons.compress.archivers.zip.Zip64RequiredException;
import org.apache.commons.compress.archivers.zip.ZipArchiveEntry;
import org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream;
import org.apache.commons.compress.archivers.zip.ZipEightByteInteger;
import org.apache.commons.compress.archivers.zip.ZipExtraField;
import org.apache.commons.compress.archivers.zip.ZipLong;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileInputStream;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class ZipArchiveOutputStream_ESTest extends ZipArchiveOutputStream_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
//        try {
          File file0 = MockFile.createTempFile("not ecodable", "not ecodable");
          assertEquals("/tmp/not ecodable0not ecodable", file0.toString());
          assertTrue(file0.isAbsolute());
          assertEquals(1392409281320L, file0.lastModified());
          assertEquals("not ecodable0not ecodable", file0.getName());
          assertEquals(0L, file0.getTotalSpace());
          assertTrue(file0.isFile());
          assertEquals("/tmp", file0.getParent());
          assertTrue(file0.canRead());
          assertTrue(file0.exists());
          assertEquals(0L, file0.getUsableSpace());
          assertFalse(file0.isHidden());
          assertFalse(file0.isDirectory());
          assertTrue(file0.canWrite());
          assertTrue(file0.canExecute());
          assertEquals(0L, file0.getFreeSpace());
          assertEquals(0L, file0.length());
          assertNotNull(file0);
          
          ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(file0);
          assertEquals("/tmp/not ecodable0not ecodable", file0.toString());
          assertTrue(file0.isAbsolute());
          assertEquals(1392409281320L, file0.lastModified());
          assertEquals("not ecodable0not ecodable", file0.getName());
          assertEquals(0L, file0.getTotalSpace());
          assertTrue(file0.isFile());
          assertEquals("/tmp", file0.getParent());
          assertTrue(file0.canRead());
          assertTrue(file0.exists());
          assertEquals(0L, file0.getUsableSpace());
          assertFalse(file0.isHidden());
          assertFalse(file0.isDirectory());
          assertTrue(file0.canWrite());
          assertTrue(file0.canExecute());
          assertEquals(0L, file0.getFreeSpace());
          assertEquals(0L, file0.length());
          assertTrue(zipArchiveOutputStream0.isSeekable());
          assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
          assertEquals(0, zipArchiveOutputStream0.getCount());
          assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
          assertNotNull(zipArchiveOutputStream0);
          assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
          assertEquals(8, ZipArchiveOutputStream.DEFLATED);
          assertEquals(0, ZipArchiveOutputStream.STORED);
          assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
          
          ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
          assertEquals("", zipArchiveEntry0.getName());
          assertFalse(zipArchiveEntry0.isDirectory());
          assertFalse(zipArchiveEntry0.isUnixSymlink());
          assertEquals("", zipArchiveEntry0.toString());
          assertEquals(0, zipArchiveEntry0.getPlatform());
          assertFalse(zipArchiveEntry0.isStreamContiguous());
          assertEquals(0, zipArchiveEntry0.getVersionRequired());
          assertEquals((-1), zipArchiveEntry0.getMethod());
          assertEquals((-1L), zipArchiveEntry0.getCompressedSize());
          assertEquals((-1L), zipArchiveEntry0.getSize());
          assertEquals(0, zipArchiveEntry0.getUnixMode());
          assertEquals(0, zipArchiveEntry0.getVersionMadeBy());
          assertEquals((-1L), zipArchiveEntry0.getDataOffset());
          assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
          assertEquals(0, zipArchiveEntry0.getRawFlag());
          assertEquals((-1L), zipArchiveEntry0.getCrc());
          assertNull(zipArchiveEntry0.getComment());
          assertEquals(0, zipArchiveEntry0.getInternalAttributes());
          assertNotNull(zipArchiveEntry0);
          assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
          assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
          assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
          
          zipArchiveOutputStream0.putArchiveEntry(zipArchiveEntry0);
          assertEquals("/tmp/not ecodable0not ecodable", file0.toString());
          assertTrue(file0.isAbsolute());
          assertEquals(1392409281320L, file0.lastModified());
          assertEquals("not ecodable0not ecodable", file0.getName());
          assertEquals(0L, file0.getTotalSpace());
          assertTrue(file0.isFile());
          assertEquals("/tmp", file0.getParent());
          assertTrue(file0.canRead());
          assertTrue(file0.exists());
          assertEquals(0L, file0.getUsableSpace());
          assertFalse(file0.isHidden());
          assertFalse(file0.isDirectory());
          assertTrue(file0.canWrite());
          assertTrue(file0.canExecute());
          assertEquals(0L, file0.getFreeSpace());
          assertEquals(0L, file0.length());
          assertTrue(zipArchiveOutputStream0.isSeekable());
          assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
          assertEquals(0, zipArchiveOutputStream0.getCount());
          assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
          assertEquals(8, zipArchiveEntry0.getMethod());
          assertEquals("", zipArchiveEntry0.getName());
          assertFalse(zipArchiveEntry0.isDirectory());
          assertFalse(zipArchiveEntry0.isUnixSymlink());
          assertEquals("", zipArchiveEntry0.toString());
          assertEquals(0, zipArchiveEntry0.getPlatform());
          assertFalse(zipArchiveEntry0.isStreamContiguous());
          assertEquals(0, zipArchiveEntry0.getVersionRequired());
          assertEquals((-1L), zipArchiveEntry0.getCompressedSize());
          assertEquals((-1L), zipArchiveEntry0.getSize());
          assertEquals(0, zipArchiveEntry0.getUnixMode());
          assertEquals(0, zipArchiveEntry0.getVersionMadeBy());
          assertEquals((-1L), zipArchiveEntry0.getDataOffset());
          assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
          assertEquals(0, zipArchiveEntry0.getRawFlag());
          assertEquals((-1L), zipArchiveEntry0.getCrc());
          assertNull(zipArchiveEntry0.getComment());
          assertEquals(0, zipArchiveEntry0.getInternalAttributes());
          assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
          assertEquals(8, ZipArchiveOutputStream.DEFLATED);
          assertEquals(0, ZipArchiveOutputStream.STORED);
          assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
          assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
          assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
          assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
          
          zipArchiveOutputStream0.putArchiveEntry(zipArchiveEntry0);
          assertEquals("/tmp/not ecodable0not ecodable", file0.toString());
          assertTrue(file0.isAbsolute());
          assertEquals(1392409281320L, file0.lastModified());
          assertEquals("not ecodable0not ecodable", file0.getName());
          assertEquals(0L, file0.getTotalSpace());
          assertTrue(file0.isFile());
          assertEquals("/tmp", file0.getParent());
          assertTrue(file0.canRead());
          assertTrue(file0.exists());
          assertEquals(0L, file0.getUsableSpace());
          assertFalse(file0.isHidden());
          assertFalse(file0.isDirectory());
          assertTrue(file0.canWrite());
          assertTrue(file0.canExecute());
          assertEquals(0L, file0.getFreeSpace());
          assertEquals(0L, file0.length());
          assertTrue(zipArchiveOutputStream0.isSeekable());
          assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
          assertEquals(0, zipArchiveOutputStream0.getCount());
          assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
          assertEquals(8, zipArchiveEntry0.getMethod());
          assertEquals("", zipArchiveEntry0.getName());
          assertFalse(zipArchiveEntry0.isDirectory());
          assertFalse(zipArchiveEntry0.isUnixSymlink());
          assertEquals("", zipArchiveEntry0.toString());
          assertEquals(0, zipArchiveEntry0.getPlatform());
          assertFalse(zipArchiveEntry0.isStreamContiguous());
          assertEquals(0, zipArchiveEntry0.getVersionRequired());
          assertEquals(2L, zipArchiveEntry0.getCompressedSize());
          assertEquals(0L, zipArchiveEntry0.getSize());
          assertEquals(0, zipArchiveEntry0.getUnixMode());
          assertEquals(0, zipArchiveEntry0.getVersionMadeBy());
          assertEquals((-1L), zipArchiveEntry0.getDataOffset());
          assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
          assertEquals(0, zipArchiveEntry0.getRawFlag());
          assertEquals(0L, zipArchiveEntry0.getCrc());
          assertNull(zipArchiveEntry0.getComment());
          assertEquals(0, zipArchiveEntry0.getInternalAttributes());
          assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
          assertEquals(8, ZipArchiveOutputStream.DEFLATED);
          assertEquals(0, ZipArchiveOutputStream.STORED);
          assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
          assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
          assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
          assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
          
          zipArchiveOutputStream0.putArchiveEntry(zipArchiveEntry0);
          assertEquals("/tmp/not ecodable0not ecodable", file0.toString());
          assertTrue(file0.isAbsolute());
          assertEquals(1392409281320L, file0.lastModified());
          assertEquals("not ecodable0not ecodable", file0.getName());
          assertEquals(0L, file0.getTotalSpace());
          assertTrue(file0.isFile());
          assertEquals("/tmp", file0.getParent());
          assertTrue(file0.canRead());
          assertTrue(file0.exists());
          assertEquals(0L, file0.getUsableSpace());
          assertFalse(file0.isHidden());
          assertFalse(file0.isDirectory());
          assertTrue(file0.canWrite());
          assertTrue(file0.canExecute());
          assertEquals(0L, file0.getFreeSpace());
          assertEquals(0L, file0.length());
          assertTrue(zipArchiveOutputStream0.isSeekable());
          assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
          assertEquals(0, zipArchiveOutputStream0.getCount());
          assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
          assertEquals(8, zipArchiveEntry0.getMethod());
          assertEquals("", zipArchiveEntry0.getName());
          assertFalse(zipArchiveEntry0.isDirectory());
          assertFalse(zipArchiveEntry0.isUnixSymlink());
          assertEquals("", zipArchiveEntry0.toString());
          assertEquals(0, zipArchiveEntry0.getPlatform());
          assertFalse(zipArchiveEntry0.isStreamContiguous());
          assertEquals(0, zipArchiveEntry0.getVersionRequired());
          assertEquals(2L, zipArchiveEntry0.getCompressedSize());
          assertEquals(0L, zipArchiveEntry0.getSize());
          assertEquals(0, zipArchiveEntry0.getUnixMode());
          assertEquals(0, zipArchiveEntry0.getVersionMadeBy());
          assertEquals((-1L), zipArchiveEntry0.getDataOffset());
          assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
          assertEquals(0, zipArchiveEntry0.getRawFlag());
          assertEquals(0L, zipArchiveEntry0.getCrc());
          assertNull(zipArchiveEntry0.getComment());
          assertEquals(0, zipArchiveEntry0.getInternalAttributes());
          assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
          assertEquals(8, ZipArchiveOutputStream.DEFLATED);
          assertEquals(0, ZipArchiveOutputStream.STORED);
          assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
          assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
          assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
          assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
          
          zipArchiveOutputStream0.putArchiveEntry(zipArchiveEntry0);
          assertEquals("/tmp/not ecodable0not ecodable", file0.toString());
          assertTrue(file0.isAbsolute());
          assertEquals(1392409281320L, file0.lastModified());
          assertEquals("not ecodable0not ecodable", file0.getName());
          assertEquals(0L, file0.getTotalSpace());
          assertTrue(file0.isFile());
          assertEquals("/tmp", file0.getParent());
          assertTrue(file0.canRead());
          assertTrue(file0.exists());
          assertEquals(0L, file0.getUsableSpace());
          assertFalse(file0.isHidden());
          assertFalse(file0.isDirectory());
          assertTrue(file0.canWrite());
          assertTrue(file0.canExecute());
          assertEquals(0L, file0.getFreeSpace());
          assertEquals(0L, file0.length());
          assertTrue(zipArchiveOutputStream0.isSeekable());
          assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
          assertEquals(0, zipArchiveOutputStream0.getCount());
          assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
          assertEquals(8, zipArchiveEntry0.getMethod());
          assertEquals("", zipArchiveEntry0.getName());
          assertFalse(zipArchiveEntry0.isDirectory());
          assertFalse(zipArchiveEntry0.isUnixSymlink());
          assertEquals("", zipArchiveEntry0.toString());
          assertEquals(0, zipArchiveEntry0.getPlatform());
          assertFalse(zipArchiveEntry0.isStreamContiguous());
          assertEquals(0, zipArchiveEntry0.getVersionRequired());
          assertEquals(2L, zipArchiveEntry0.getCompressedSize());
          assertEquals(0L, zipArchiveEntry0.getSize());
          assertEquals(0, zipArchiveEntry0.getUnixMode());
          assertEquals(0, zipArchiveEntry0.getVersionMadeBy());
          assertEquals((-1L), zipArchiveEntry0.getDataOffset());
          assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
          assertEquals(0, zipArchiveEntry0.getRawFlag());
          assertEquals(0L, zipArchiveEntry0.getCrc());
          assertNull(zipArchiveEntry0.getComment());
          assertEquals(0, zipArchiveEntry0.getInternalAttributes());
          assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
          assertEquals(8, ZipArchiveOutputStream.DEFLATED);
          assertEquals(0, ZipArchiveOutputStream.STORED);
          assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
          assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
          assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
          assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
          
          zipArchiveOutputStream0.putArchiveEntry(zipArchiveEntry0);
          assertEquals("/tmp/not ecodable0not ecodable", file0.toString());
          assertTrue(file0.isAbsolute());
          assertEquals(1392409281320L, file0.lastModified());
          assertEquals("not ecodable0not ecodable", file0.getName());
          assertEquals(0L, file0.getTotalSpace());
          assertTrue(file0.isFile());
          assertEquals("/tmp", file0.getParent());
          assertTrue(file0.canRead());
          assertTrue(file0.exists());
          assertEquals(0L, file0.getUsableSpace());
          assertFalse(file0.isHidden());
          assertFalse(file0.isDirectory());
          assertTrue(file0.canWrite());
          assertTrue(file0.canExecute());
          assertEquals(0L, file0.getFreeSpace());
          assertEquals(0L, file0.length());
          assertTrue(zipArchiveOutputStream0.isSeekable());
          assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
          assertEquals(0, zipArchiveOutputStream0.getCount());
          assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
          assertEquals(8, zipArchiveEntry0.getMethod());
          assertEquals("", zipArchiveEntry0.getName());
          assertFalse(zipArchiveEntry0.isDirectory());
          assertFalse(zipArchiveEntry0.isUnixSymlink());
          assertEquals("", zipArchiveEntry0.toString());
          assertEquals(0, zipArchiveEntry0.getPlatform());
          assertFalse(zipArchiveEntry0.isStreamContiguous());
          assertEquals(0, zipArchiveEntry0.getVersionRequired());
          assertEquals(2L, zipArchiveEntry0.getCompressedSize());
          assertEquals(0L, zipArchiveEntry0.getSize());
          assertEquals(0, zipArchiveEntry0.getUnixMode());
          assertEquals(0, zipArchiveEntry0.getVersionMadeBy());
          assertEquals((-1L), zipArchiveEntry0.getDataOffset());
          assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
          assertEquals(0, zipArchiveEntry0.getRawFlag());
          assertEquals(0L, zipArchiveEntry0.getCrc());
          assertNull(zipArchiveEntry0.getComment());
          assertEquals(0, zipArchiveEntry0.getInternalAttributes());
          assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
          assertEquals(8, ZipArchiveOutputStream.DEFLATED);
          assertEquals(0, ZipArchiveOutputStream.STORED);
          assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
          assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
          assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
          assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
          
          zipArchiveOutputStream0.putArchiveEntry(zipArchiveEntry0);
          assertEquals("/tmp/not ecodable0not ecodable", file0.toString());
          assertTrue(file0.isAbsolute());
          assertEquals(1392409281320L, file0.lastModified());
          assertEquals("not ecodable0not ecodable", file0.getName());
          assertEquals(0L, file0.getTotalSpace());
          assertTrue(file0.isFile());
          assertEquals("/tmp", file0.getParent());
          assertTrue(file0.canRead());
          assertTrue(file0.exists());
          assertEquals(0L, file0.getUsableSpace());
          assertFalse(file0.isHidden());
          assertFalse(file0.isDirectory());
          assertTrue(file0.canWrite());
          assertTrue(file0.canExecute());
          assertEquals(0L, file0.getFreeSpace());
          assertEquals(0L, file0.length());
          assertTrue(zipArchiveOutputStream0.isSeekable());
          assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
          assertEquals(0, zipArchiveOutputStream0.getCount());
          assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
          assertEquals(8, zipArchiveEntry0.getMethod());
          assertEquals("", zipArchiveEntry0.getName());
          assertFalse(zipArchiveEntry0.isDirectory());
          assertFalse(zipArchiveEntry0.isUnixSymlink());
          assertEquals("", zipArchiveEntry0.toString());
          assertEquals(0, zipArchiveEntry0.getPlatform());
          assertFalse(zipArchiveEntry0.isStreamContiguous());
          assertEquals(0, zipArchiveEntry0.getVersionRequired());
          assertEquals(2L, zipArchiveEntry0.getCompressedSize());
          assertEquals(0L, zipArchiveEntry0.getSize());
          assertEquals(0, zipArchiveEntry0.getUnixMode());
          assertEquals(0, zipArchiveEntry0.getVersionMadeBy());
          assertEquals((-1L), zipArchiveEntry0.getDataOffset());
          assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
          assertEquals(0, zipArchiveEntry0.getRawFlag());
          assertEquals(0L, zipArchiveEntry0.getCrc());
          assertNull(zipArchiveEntry0.getComment());
          assertEquals(0, zipArchiveEntry0.getInternalAttributes());
          assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
          assertEquals(8, ZipArchiveOutputStream.DEFLATED);
          assertEquals(0, ZipArchiveOutputStream.STORED);
          assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
          assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
          assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
          assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
          
          zipArchiveOutputStream0.putArchiveEntry(zipArchiveEntry0);
          assertEquals("/tmp/not ecodable0not ecodable", file0.toString());
          assertTrue(file0.isAbsolute());
          assertEquals(1392409281320L, file0.lastModified());
          assertEquals("not ecodable0not ecodable", file0.getName());
          assertEquals(0L, file0.getTotalSpace());
          assertTrue(file0.isFile());
          assertEquals("/tmp", file0.getParent());
          assertTrue(file0.canRead());
          assertTrue(file0.exists());
          assertEquals(0L, file0.getUsableSpace());
          assertFalse(file0.isHidden());
          assertFalse(file0.isDirectory());
          assertTrue(file0.canWrite());
          assertTrue(file0.canExecute());
          assertEquals(0L, file0.getFreeSpace());
          assertEquals(0L, file0.length());
          assertTrue(zipArchiveOutputStream0.isSeekable());
          assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
          assertEquals(0, zipArchiveOutputStream0.getCount());
          assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
          assertEquals(8, zipArchiveEntry0.getMethod());
          assertEquals("", zipArchiveEntry0.getName());
          assertFalse(zipArchiveEntry0.isDirectory());
          assertFalse(zipArchiveEntry0.isUnixSymlink());
          assertEquals("", zipArchiveEntry0.toString());
          assertEquals(0, zipArchiveEntry0.getPlatform());
          assertFalse(zipArchiveEntry0.isStreamContiguous());
          assertEquals(0, zipArchiveEntry0.getVersionRequired());
          assertEquals(2L, zipArchiveEntry0.getCompressedSize());
          assertEquals(0L, zipArchiveEntry0.getSize());
          assertEquals(0, zipArchiveEntry0.getUnixMode());
          assertEquals(0, zipArchiveEntry0.getVersionMadeBy());
          assertEquals((-1L), zipArchiveEntry0.getDataOffset());
          assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
          assertEquals(0, zipArchiveEntry0.getRawFlag());
          assertEquals(0L, zipArchiveEntry0.getCrc());
          assertNull(zipArchiveEntry0.getComment());
          assertEquals(0, zipArchiveEntry0.getInternalAttributes());
          assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
          assertEquals(8, ZipArchiveOutputStream.DEFLATED);
          assertEquals(0, ZipArchiveOutputStream.STORED);
          assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
          assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
          assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
          assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
          
          zipArchiveOutputStream0.putArchiveEntry(zipArchiveEntry0);
          assertEquals("/tmp/not ecodable0not ecodable", file0.toString());
          assertTrue(file0.isAbsolute());
          assertEquals(1392409281320L, file0.lastModified());
          assertEquals("not ecodable0not ecodable", file0.getName());
          assertEquals(0L, file0.getTotalSpace());
          assertTrue(file0.isFile());
          assertEquals("/tmp", file0.getParent());
          assertTrue(file0.canRead());
          assertTrue(file0.exists());
          assertEquals(0L, file0.getUsableSpace());
          assertFalse(file0.isHidden());
          assertFalse(file0.isDirectory());
          assertTrue(file0.canWrite());
          assertTrue(file0.canExecute());
          assertEquals(0L, file0.getFreeSpace());
          assertEquals(0L, file0.length());
          assertTrue(zipArchiveOutputStream0.isSeekable());
          assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
          assertEquals(0, zipArchiveOutputStream0.getCount());
          assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
          assertEquals(8, zipArchiveEntry0.getMethod());
          assertEquals("", zipArchiveEntry0.getName());
          assertFalse(zipArchiveEntry0.isDirectory());
          assertFalse(zipArchiveEntry0.isUnixSymlink());
          assertEquals("", zipArchiveEntry0.toString());
          assertEquals(0, zipArchiveEntry0.getPlatform());
          assertFalse(zipArchiveEntry0.isStreamContiguous());
          assertEquals(0, zipArchiveEntry0.getVersionRequired());
          assertEquals(2L, zipArchiveEntry0.getCompressedSize());
          assertEquals(0L, zipArchiveEntry0.getSize());
          assertEquals(0, zipArchiveEntry0.getUnixMode());
          assertEquals(0, zipArchiveEntry0.getVersionMadeBy());
          assertEquals((-1L), zipArchiveEntry0.getDataOffset());
          assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
          assertEquals(0, zipArchiveEntry0.getRawFlag());
          assertEquals(0L, zipArchiveEntry0.getCrc());
          assertNull(zipArchiveEntry0.getComment());
          assertEquals(0, zipArchiveEntry0.getInternalAttributes());
          assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
          assertEquals(8, ZipArchiveOutputStream.DEFLATED);
          assertEquals(0, ZipArchiveOutputStream.STORED);
          assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
          assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
          assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
          assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
          
          zipArchiveOutputStream0.putArchiveEntry(zipArchiveEntry0);
          assertEquals("/tmp/not ecodable0not ecodable", file0.toString());
          assertTrue(file0.isAbsolute());
          assertEquals(1392409281320L, file0.lastModified());
          assertEquals("not ecodable0not ecodable", file0.getName());
          assertEquals(0L, file0.getTotalSpace());
          assertTrue(file0.isFile());
          assertEquals("/tmp", file0.getParent());
          assertTrue(file0.canRead());
          assertTrue(file0.exists());
          assertEquals(0L, file0.getUsableSpace());
          assertFalse(file0.isHidden());
          assertFalse(file0.isDirectory());
          assertTrue(file0.canWrite());
          assertTrue(file0.canExecute());
          assertEquals(0L, file0.getFreeSpace());
          assertEquals(0L, file0.length());
          assertTrue(zipArchiveOutputStream0.isSeekable());
          assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
          assertEquals(0, zipArchiveOutputStream0.getCount());
          assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
          assertEquals(8, zipArchiveEntry0.getMethod());
          assertEquals("", zipArchiveEntry0.getName());
          assertFalse(zipArchiveEntry0.isDirectory());
          assertFalse(zipArchiveEntry0.isUnixSymlink());
          assertEquals("", zipArchiveEntry0.toString());
          assertEquals(0, zipArchiveEntry0.getPlatform());
          assertFalse(zipArchiveEntry0.isStreamContiguous());
          assertEquals(0, zipArchiveEntry0.getVersionRequired());
          assertEquals(2L, zipArchiveEntry0.getCompressedSize());
          assertEquals(0L, zipArchiveEntry0.getSize());
          assertEquals(0, zipArchiveEntry0.getUnixMode());
          assertEquals(0, zipArchiveEntry0.getVersionMadeBy());
          assertEquals((-1L), zipArchiveEntry0.getDataOffset());
          assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
          assertEquals(0, zipArchiveEntry0.getRawFlag());
          assertEquals(0L, zipArchiveEntry0.getCrc());
          assertNull(zipArchiveEntry0.getComment());
          assertEquals(0, zipArchiveEntry0.getInternalAttributes());
          assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
          assertEquals(8, ZipArchiveOutputStream.DEFLATED);
          assertEquals(0, ZipArchiveOutputStream.STORED);
          assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
          assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
          assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
          assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
          
          zipArchiveOutputStream0.putArchiveEntry(zipArchiveEntry0);
          assertEquals("/tmp/not ecodable0not ecodable", file0.toString());
          assertTrue(file0.isAbsolute());
          assertEquals(1392409281320L, file0.lastModified());
          assertEquals("not ecodable0not ecodable", file0.getName());
          assertEquals(0L, file0.getTotalSpace());
          assertTrue(file0.isFile());
          assertEquals("/tmp", file0.getParent());
          assertTrue(file0.canRead());
          assertTrue(file0.exists());
          assertEquals(0L, file0.getUsableSpace());
          assertFalse(file0.isHidden());
          assertFalse(file0.isDirectory());
          assertTrue(file0.canWrite());
          assertTrue(file0.canExecute());
          assertEquals(0L, file0.getFreeSpace());
          assertEquals(0L, file0.length());
          assertTrue(zipArchiveOutputStream0.isSeekable());
          assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
          assertEquals(0, zipArchiveOutputStream0.getCount());
          assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
          assertEquals(8, zipArchiveEntry0.getMethod());
          assertEquals("", zipArchiveEntry0.getName());
          assertFalse(zipArchiveEntry0.isDirectory());
          assertFalse(zipArchiveEntry0.isUnixSymlink());
          assertEquals("", zipArchiveEntry0.toString());
          assertEquals(0, zipArchiveEntry0.getPlatform());
          assertFalse(zipArchiveEntry0.isStreamContiguous());
          assertEquals(0, zipArchiveEntry0.getVersionRequired());
          assertEquals(2L, zipArchiveEntry0.getCompressedSize());
          assertEquals(0L, zipArchiveEntry0.getSize());
          assertEquals(0, zipArchiveEntry0.getUnixMode());
          assertEquals(0, zipArchiveEntry0.getVersionMadeBy());
          assertEquals((-1L), zipArchiveEntry0.getDataOffset());
          assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
          assertEquals(0, zipArchiveEntry0.getRawFlag());
          assertEquals(0L, zipArchiveEntry0.getCrc());
          assertNull(zipArchiveEntry0.getComment());
          assertEquals(0, zipArchiveEntry0.getInternalAttributes());
          assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
          assertEquals(8, ZipArchiveOutputStream.DEFLATED);
          assertEquals(0, ZipArchiveOutputStream.STORED);
          assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
          assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
          assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
          assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
          
          zipArchiveOutputStream0.putArchiveEntry(zipArchiveEntry0);
          assertEquals("/tmp/not ecodable0not ecodable", file0.toString());
          assertTrue(file0.isAbsolute());
          assertEquals(1392409281320L, file0.lastModified());
          assertEquals("not ecodable0not ecodable", file0.getName());
          assertEquals(0L, file0.getTotalSpace());
          assertTrue(file0.isFile());
          assertEquals("/tmp", file0.getParent());
          assertTrue(file0.canRead());
          assertTrue(file0.exists());
          assertEquals(0L, file0.getUsableSpace());
          assertFalse(file0.isHidden());
          assertFalse(file0.isDirectory());
          assertTrue(file0.canWrite());
          assertTrue(file0.canExecute());
          assertEquals(0L, file0.getFreeSpace());
          assertEquals(0L, file0.length());
          assertTrue(zipArchiveOutputStream0.isSeekable());
          assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
          assertEquals(0, zipArchiveOutputStream0.getCount());
          assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
          assertEquals(8, zipArchiveEntry0.getMethod());
          assertEquals("", zipArchiveEntry0.getName());
          assertFalse(zipArchiveEntry0.isDirectory());
          assertFalse(zipArchiveEntry0.isUnixSymlink());
          assertEquals("", zipArchiveEntry0.toString());
          assertEquals(0, zipArchiveEntry0.getPlatform());
          assertFalse(zipArchiveEntry0.isStreamContiguous());
          assertEquals(0, zipArchiveEntry0.getVersionRequired());
          assertEquals(2L, zipArchiveEntry0.getCompressedSize());
          assertEquals(0L, zipArchiveEntry0.getSize());
          assertEquals(0, zipArchiveEntry0.getUnixMode());
          assertEquals(0, zipArchiveEntry0.getVersionMadeBy());
          assertEquals((-1L), zipArchiveEntry0.getDataOffset());
          assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
          assertEquals(0, zipArchiveEntry0.getRawFlag());
          assertEquals(0L, zipArchiveEntry0.getCrc());
          assertNull(zipArchiveEntry0.getComment());
          assertEquals(0, zipArchiveEntry0.getInternalAttributes());
          assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
          assertEquals(8, ZipArchiveOutputStream.DEFLATED);
          assertEquals(0, ZipArchiveOutputStream.STORED);
          assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
          assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
          assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
          assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
          
          zipArchiveOutputStream0.putArchiveEntry(zipArchiveEntry0);
          assertEquals("/tmp/not ecodable0not ecodable", file0.toString());
          assertTrue(file0.isAbsolute());
          assertEquals(1392409281320L, file0.lastModified());
          assertEquals("not ecodable0not ecodable", file0.getName());
          assertEquals(0L, file0.getTotalSpace());
          assertTrue(file0.isFile());
          assertEquals("/tmp", file0.getParent());
          assertTrue(file0.canRead());
          assertTrue(file0.exists());
          assertEquals(0L, file0.getUsableSpace());
          assertFalse(file0.isHidden());
          assertFalse(file0.isDirectory());
          assertTrue(file0.canWrite());
          assertTrue(file0.canExecute());
          assertEquals(0L, file0.getFreeSpace());
          assertEquals(0L, file0.length());
          assertTrue(zipArchiveOutputStream0.isSeekable());
          assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
          assertEquals(0, zipArchiveOutputStream0.getCount());
          assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
          assertEquals(8, zipArchiveEntry0.getMethod());
          assertEquals("", zipArchiveEntry0.getName());
          assertFalse(zipArchiveEntry0.isDirectory());
          assertFalse(zipArchiveEntry0.isUnixSymlink());
          assertEquals("", zipArchiveEntry0.toString());
          assertEquals(0, zipArchiveEntry0.getPlatform());
          assertFalse(zipArchiveEntry0.isStreamContiguous());
          assertEquals(0, zipArchiveEntry0.getVersionRequired());
          assertEquals(2L, zipArchiveEntry0.getCompressedSize());
          assertEquals(0L, zipArchiveEntry0.getSize());
          assertEquals(0, zipArchiveEntry0.getUnixMode());
          assertEquals(0, zipArchiveEntry0.getVersionMadeBy());
          assertEquals((-1L), zipArchiveEntry0.getDataOffset());
          assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
          assertEquals(0, zipArchiveEntry0.getRawFlag());
          assertEquals(0L, zipArchiveEntry0.getCrc());
          assertNull(zipArchiveEntry0.getComment());
          assertEquals(0, zipArchiveEntry0.getInternalAttributes());
          assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
          assertEquals(8, ZipArchiveOutputStream.DEFLATED);
          assertEquals(0, ZipArchiveOutputStream.STORED);
          assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
          assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
          assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
          assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
          
          zipArchiveOutputStream0.putArchiveEntry(zipArchiveEntry0);
          assertEquals("/tmp/not ecodable0not ecodable", file0.toString());
          assertTrue(file0.isAbsolute());
          assertEquals(1392409281320L, file0.lastModified());
          assertEquals("not ecodable0not ecodable", file0.getName());
          assertEquals(0L, file0.getTotalSpace());
          assertTrue(file0.isFile());
          assertEquals("/tmp", file0.getParent());
          assertTrue(file0.canRead());
          assertTrue(file0.exists());
          assertEquals(0L, file0.getUsableSpace());
          assertFalse(file0.isHidden());
          assertFalse(file0.isDirectory());
          assertTrue(file0.canWrite());
          assertTrue(file0.canExecute());
          assertEquals(0L, file0.getFreeSpace());
          assertEquals(0L, file0.length());
          assertTrue(zipArchiveOutputStream0.isSeekable());
          assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
          assertEquals(0, zipArchiveOutputStream0.getCount());
          assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
          assertEquals(8, zipArchiveEntry0.getMethod());
          assertEquals("", zipArchiveEntry0.getName());
          assertFalse(zipArchiveEntry0.isDirectory());
          assertFalse(zipArchiveEntry0.isUnixSymlink());
          assertEquals("", zipArchiveEntry0.toString());
          assertEquals(0, zipArchiveEntry0.getPlatform());
          assertFalse(zipArchiveEntry0.isStreamContiguous());
          assertEquals(0, zipArchiveEntry0.getVersionRequired());
          assertEquals(2L, zipArchiveEntry0.getCompressedSize());
          assertEquals(0L, zipArchiveEntry0.getSize());
          assertEquals(0, zipArchiveEntry0.getUnixMode());
          assertEquals(0, zipArchiveEntry0.getVersionMadeBy());
          assertEquals((-1L), zipArchiveEntry0.getDataOffset());
          assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
          assertEquals(0, zipArchiveEntry0.getRawFlag());
          assertEquals(0L, zipArchiveEntry0.getCrc());
          assertNull(zipArchiveEntry0.getComment());
          assertEquals(0, zipArchiveEntry0.getInternalAttributes());
          assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
          assertEquals(8, ZipArchiveOutputStream.DEFLATED);
          assertEquals(0, ZipArchiveOutputStream.STORED);
          assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
          assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
          assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
          assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
          
          zipArchiveOutputStream0.putArchiveEntry(zipArchiveEntry0);
          assertEquals("/tmp/not ecodable0not ecodable", file0.toString());
          assertTrue(file0.isAbsolute());
          assertEquals(1392409281320L, file0.lastModified());
          assertEquals("not ecodable0not ecodable", file0.getName());
          assertEquals(0L, file0.getTotalSpace());
          assertTrue(file0.isFile());
          assertEquals("/tmp", file0.getParent());
          assertTrue(file0.canRead());
          assertTrue(file0.exists());
          assertEquals(0L, file0.getUsableSpace());
          assertFalse(file0.isHidden());
          assertFalse(file0.isDirectory());
          assertTrue(file0.canWrite());
          assertTrue(file0.canExecute());
          assertEquals(0L, file0.getFreeSpace());
          assertEquals(0L, file0.length());
          assertTrue(zipArchiveOutputStream0.isSeekable());
          assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
          assertEquals(0, zipArchiveOutputStream0.getCount());
          assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
          assertEquals(8, zipArchiveEntry0.getMethod());
          assertEquals("", zipArchiveEntry0.getName());
          assertFalse(zipArchiveEntry0.isDirectory());
          assertFalse(zipArchiveEntry0.isUnixSymlink());
          assertEquals("", zipArchiveEntry0.toString());
          assertEquals(0, zipArchiveEntry0.getPlatform());
          assertFalse(zipArchiveEntry0.isStreamContiguous());
          assertEquals(0, zipArchiveEntry0.getVersionRequired());
          assertEquals(2L, zipArchiveEntry0.getCompressedSize());
          assertEquals(0L, zipArchiveEntry0.getSize());
          assertEquals(0, zipArchiveEntry0.getUnixMode());
          assertEquals(0, zipArchiveEntry0.getVersionMadeBy());
          assertEquals((-1L), zipArchiveEntry0.getDataOffset());
          assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
          assertEquals(0, zipArchiveEntry0.getRawFlag());
          assertEquals(0L, zipArchiveEntry0.getCrc());
          assertNull(zipArchiveEntry0.getComment());
          assertEquals(0, zipArchiveEntry0.getInternalAttributes());
          assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
          assertEquals(8, ZipArchiveOutputStream.DEFLATED);
          assertEquals(0, ZipArchiveOutputStream.STORED);
          assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
          assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
          assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
          assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
          
          zipArchiveOutputStream0.putArchiveEntry(zipArchiveEntry0);
          assertEquals("/tmp/not ecodable0not ecodable", file0.toString());
          assertTrue(file0.isAbsolute());
          assertEquals(1392409281320L, file0.lastModified());
          assertEquals("not ecodable0not ecodable", file0.getName());
          assertEquals(0L, file0.getTotalSpace());
          assertTrue(file0.isFile());
          assertEquals("/tmp", file0.getParent());
          assertTrue(file0.canRead());
          assertTrue(file0.exists());
          assertEquals(0L, file0.getUsableSpace());
          assertFalse(file0.isHidden());
          assertFalse(file0.isDirectory());
          assertTrue(file0.canWrite());
          assertTrue(file0.canExecute());
          assertEquals(0L, file0.getFreeSpace());
          assertEquals(0L, file0.length());
          assertTrue(zipArchiveOutputStream0.isSeekable());
          assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
          assertEquals(0, zipArchiveOutputStream0.getCount());
          assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
          assertEquals(8, zipArchiveEntry0.getMethod());
          assertEquals("", zipArchiveEntry0.getName());
          assertFalse(zipArchiveEntry0.isDirectory());
          assertFalse(zipArchiveEntry0.isUnixSymlink());
          assertEquals("", zipArchiveEntry0.toString());
          assertEquals(0, zipArchiveEntry0.getPlatform());
          assertFalse(zipArchiveEntry0.isStreamContiguous());
          assertEquals(0, zipArchiveEntry0.getVersionRequired());
          assertEquals(2L, zipArchiveEntry0.getCompressedSize());
          assertEquals(0L, zipArchiveEntry0.getSize());
          assertEquals(0, zipArchiveEntry0.getUnixMode());
          assertEquals(0, zipArchiveEntry0.getVersionMadeBy());
          assertEquals((-1L), zipArchiveEntry0.getDataOffset());
          assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
          assertEquals(0, zipArchiveEntry0.getRawFlag());
          assertEquals(0L, zipArchiveEntry0.getCrc());
          assertNull(zipArchiveEntry0.getComment());
          assertEquals(0, zipArchiveEntry0.getInternalAttributes());
          assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
          assertEquals(8, ZipArchiveOutputStream.DEFLATED);
          assertEquals(0, ZipArchiveOutputStream.STORED);
          assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
          assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
          assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
          assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
          
          PipedInputStream pipedInputStream0 = new PipedInputStream();
          assertEquals(0, pipedInputStream0.available());
          assertNotNull(pipedInputStream0);
          
          PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
          assertEquals(0, pipedInputStream0.available());
          assertNotNull(pipedOutputStream0);
          
          ZipArchiveOutputStream zipArchiveOutputStream1 = new ZipArchiveOutputStream(pipedOutputStream0);
          assertFalse(zipArchiveOutputStream1.equals((Object)zipArchiveOutputStream0));
          assertEquals(0, pipedInputStream0.available());
          assertEquals(0, zipArchiveOutputStream1.getCount());
          assertEquals(0L, zipArchiveOutputStream1.getBytesWritten());
          assertFalse(zipArchiveOutputStream1.isSeekable());
          assertEquals("UTF8", zipArchiveOutputStream1.getEncoding());
          assertNotNull(zipArchiveOutputStream1);
          assertEquals(0, ZipArchiveOutputStream.STORED);
          assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
          assertEquals(8, ZipArchiveOutputStream.DEFLATED);
          assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
          
          DataInputStream dataInputStream0 = new DataInputStream(pipedInputStream0);
          assertEquals(0, pipedInputStream0.available());
          assertNotNull(dataInputStream0);
          
          // Undeclared exception!
          zipArchiveOutputStream1.addRawArchiveEntry(zipArchiveEntry0, dataInputStream0);
//        } catch(Throwable t) {
//            // Need to catch declared exceptions
//        }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      MockFile mockFile0 = new MockFile("org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream", "0x000A Zip Extra Field:");
      assertNotNull(mockFile0);
      
      ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
      assertEquals((-1L), zipArchiveEntry0.getCrc());
      assertEquals(0, zipArchiveEntry0.getRawFlag());
      assertEquals(0, zipArchiveEntry0.getVersionRequired());
      assertEquals((-1L), zipArchiveEntry0.getDataOffset());
      assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
      assertEquals(0, zipArchiveEntry0.getVersionMadeBy());
      assertEquals(0, zipArchiveEntry0.getUnixMode());
      assertEquals(0, zipArchiveEntry0.getPlatform());
      assertEquals(0, zipArchiveEntry0.getInternalAttributes());
      assertFalse(zipArchiveEntry0.isStreamContiguous());
      assertNull(zipArchiveEntry0.getComment());
      assertEquals((-1), zipArchiveEntry0.getMethod());
      assertFalse(zipArchiveEntry0.isUnixSymlink());
      assertEquals("", zipArchiveEntry0.toString());
      assertEquals((-1L), zipArchiveEntry0.getCompressedSize());
      assertEquals("", zipArchiveEntry0.getName());
      assertFalse(zipArchiveEntry0.isDirectory());
      assertEquals((-1L), zipArchiveEntry0.getSize());
      assertNotNull(zipArchiveEntry0);
      assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      
      zipArchiveEntry0.setCompressedSize(4294967295L);
      assertEquals((-1L), zipArchiveEntry0.getCrc());
      assertEquals(0, zipArchiveEntry0.getRawFlag());
      assertEquals(0, zipArchiveEntry0.getVersionRequired());
      assertEquals((-1L), zipArchiveEntry0.getDataOffset());
      assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
      assertEquals(0, zipArchiveEntry0.getVersionMadeBy());
      assertEquals(0, zipArchiveEntry0.getUnixMode());
      assertEquals(0, zipArchiveEntry0.getPlatform());
      assertEquals(0, zipArchiveEntry0.getInternalAttributes());
      assertFalse(zipArchiveEntry0.isStreamContiguous());
      assertNull(zipArchiveEntry0.getComment());
      assertEquals((-1), zipArchiveEntry0.getMethod());
      assertFalse(zipArchiveEntry0.isUnixSymlink());
      assertEquals(4294967295L, zipArchiveEntry0.getCompressedSize());
      assertEquals("", zipArchiveEntry0.toString());
      assertEquals("", zipArchiveEntry0.getName());
      assertFalse(zipArchiveEntry0.isDirectory());
      assertEquals((-1L), zipArchiveEntry0.getSize());
      assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      
      zipArchiveEntry0.setSize(4294967294L);
      assertEquals((-1L), zipArchiveEntry0.getCrc());
      assertEquals(0, zipArchiveEntry0.getRawFlag());
      assertEquals(0, zipArchiveEntry0.getVersionRequired());
      assertEquals((-1L), zipArchiveEntry0.getDataOffset());
      assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
      assertEquals(0, zipArchiveEntry0.getVersionMadeBy());
      assertEquals(0, zipArchiveEntry0.getUnixMode());
      assertEquals(0, zipArchiveEntry0.getPlatform());
      assertEquals(0, zipArchiveEntry0.getInternalAttributes());
      assertFalse(zipArchiveEntry0.isStreamContiguous());
      assertNull(zipArchiveEntry0.getComment());
      assertEquals((-1), zipArchiveEntry0.getMethod());
      assertFalse(zipArchiveEntry0.isUnixSymlink());
      assertEquals(4294967295L, zipArchiveEntry0.getCompressedSize());
      assertEquals("", zipArchiveEntry0.toString());
      assertEquals("", zipArchiveEntry0.getName());
      assertEquals(4294967294L, zipArchiveEntry0.getSize());
      assertFalse(zipArchiveEntry0.isDirectory());
      assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(mockFile0);
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.isAbsolute());
      assertEquals("/experiment/org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream/0x000A Zip Extra Field:", mockFile0.toString());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.canWrite());
      assertTrue(mockFile0.isFile());
      assertEquals("0x000A Zip Extra Field:", mockFile0.getName());
      assertTrue(mockFile0.canExecute());
      assertEquals("/experiment/org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream", mockFile0.getParent());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertFalse(zipArchiveOutputStream0.isSeekable());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertNotNull(zipArchiveOutputStream0);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      
      zipArchiveOutputStream0.putArchiveEntry(zipArchiveEntry0);
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.isAbsolute());
      assertEquals("/experiment/org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream/0x000A Zip Extra Field:", mockFile0.toString());
      assertEquals(50L, mockFile0.length());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.canWrite());
      assertTrue(mockFile0.isFile());
      assertEquals("0x000A Zip Extra Field:", mockFile0.getName());
      assertTrue(mockFile0.canExecute());
      assertEquals("/experiment/org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream", mockFile0.getParent());
      assertEquals((-1L), zipArchiveEntry0.getCrc());
      assertEquals(0, zipArchiveEntry0.getRawFlag());
      assertEquals(0, zipArchiveEntry0.getVersionRequired());
      assertEquals((-1L), zipArchiveEntry0.getDataOffset());
      assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
      assertEquals(0, zipArchiveEntry0.getVersionMadeBy());
      assertEquals(0, zipArchiveEntry0.getUnixMode());
      assertEquals(0, zipArchiveEntry0.getPlatform());
      assertEquals(0, zipArchiveEntry0.getInternalAttributes());
      assertFalse(zipArchiveEntry0.isStreamContiguous());
      assertNull(zipArchiveEntry0.getComment());
      assertFalse(zipArchiveEntry0.isUnixSymlink());
      assertEquals(4294967295L, zipArchiveEntry0.getCompressedSize());
      assertEquals("", zipArchiveEntry0.toString());
      assertEquals("", zipArchiveEntry0.getName());
      assertEquals(4294967294L, zipArchiveEntry0.getSize());
      assertFalse(zipArchiveEntry0.isDirectory());
      assertEquals(8, zipArchiveEntry0.getMethod());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertFalse(zipArchiveOutputStream0.isSeekable());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      
      JarArchiveEntry jarArchiveEntry0 = new JarArchiveEntry(zipArchiveEntry0);
      assertEquals((-1L), zipArchiveEntry0.getCrc());
      assertEquals(0, zipArchiveEntry0.getRawFlag());
      assertEquals(0, zipArchiveEntry0.getVersionRequired());
      assertEquals((-1L), zipArchiveEntry0.getDataOffset());
      assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
      assertEquals(0, zipArchiveEntry0.getVersionMadeBy());
      assertEquals(0, zipArchiveEntry0.getUnixMode());
      assertEquals(0, zipArchiveEntry0.getPlatform());
      assertEquals(0, zipArchiveEntry0.getInternalAttributes());
      assertFalse(zipArchiveEntry0.isStreamContiguous());
      assertNull(zipArchiveEntry0.getComment());
      assertFalse(zipArchiveEntry0.isUnixSymlink());
      assertEquals(4294967295L, zipArchiveEntry0.getCompressedSize());
      assertEquals("", zipArchiveEntry0.toString());
      assertEquals("", zipArchiveEntry0.getName());
      assertEquals(4294967294L, zipArchiveEntry0.getSize());
      assertFalse(zipArchiveEntry0.isDirectory());
      assertEquals(8, zipArchiveEntry0.getMethod());
      assertEquals(0, jarArchiveEntry0.getVersionMadeBy());
      assertEquals(0, jarArchiveEntry0.getPlatform());
      assertEquals(0, jarArchiveEntry0.getInternalAttributes());
      assertFalse(jarArchiveEntry0.isStreamContiguous());
      assertFalse(jarArchiveEntry0.isUnixSymlink());
      assertNull(jarArchiveEntry0.getComment());
      assertEquals("", jarArchiveEntry0.toString());
      assertEquals((-1L), jarArchiveEntry0.getDataOffset());
      assertEquals(0, jarArchiveEntry0.getVersionRequired());
      assertEquals(4294967295L, jarArchiveEntry0.getCompressedSize());
      assertFalse(jarArchiveEntry0.isDirectory());
      assertEquals((-1L), jarArchiveEntry0.getCrc());
      assertEquals(0, jarArchiveEntry0.getUnixMode());
      assertEquals(8, jarArchiveEntry0.getMethod());
      assertEquals(4294967294L, jarArchiveEntry0.getSize());
      assertEquals(0, jarArchiveEntry0.getRawFlag());
      assertEquals("", jarArchiveEntry0.getName());
      assertEquals(0L, jarArchiveEntry0.getExternalAttributes());
      assertNotNull(jarArchiveEntry0);
      assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(mockFile0);
      assertNotNull(mockFileInputStream0);
      
      zipArchiveOutputStream0.addRawArchiveEntry(jarArchiveEntry0, mockFileInputStream0);
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.isAbsolute());
      assertEquals("/experiment/org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream/0x000A Zip Extra Field:", mockFile0.toString());
      assertEquals(8151L, mockFile0.length());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.canWrite());
      assertTrue(mockFile0.isFile());
      assertEquals("0x000A Zip Extra Field:", mockFile0.getName());
      assertTrue(mockFile0.canExecute());
      assertEquals("/experiment/org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream", mockFile0.getParent());
      assertEquals(0L, zipArchiveEntry0.getCrc());
      assertEquals(0, zipArchiveEntry0.getRawFlag());
      assertEquals(0, zipArchiveEntry0.getVersionRequired());
      assertEquals((-1L), zipArchiveEntry0.getDataOffset());
      assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
      assertEquals(0, zipArchiveEntry0.getVersionMadeBy());
      assertEquals(0, zipArchiveEntry0.getUnixMode());
      assertEquals(0, zipArchiveEntry0.getPlatform());
      assertEquals(0, zipArchiveEntry0.getInternalAttributes());
      assertFalse(zipArchiveEntry0.isStreamContiguous());
      assertNull(zipArchiveEntry0.getComment());
      assertFalse(zipArchiveEntry0.isUnixSymlink());
      assertEquals("", zipArchiveEntry0.toString());
      assertEquals("", zipArchiveEntry0.getName());
      assertEquals(2L, zipArchiveEntry0.getCompressedSize());
      assertFalse(zipArchiveEntry0.isDirectory());
      assertEquals(0L, zipArchiveEntry0.getSize());
      assertEquals(8, zipArchiveEntry0.getMethod());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertFalse(zipArchiveOutputStream0.isSeekable());
      assertEquals(8001, zipArchiveOutputStream0.getCount());
      assertEquals(8001L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals(0, jarArchiveEntry0.getVersionMadeBy());
      assertEquals(0, jarArchiveEntry0.getPlatform());
      assertEquals(0, jarArchiveEntry0.getInternalAttributes());
      assertFalse(jarArchiveEntry0.isStreamContiguous());
      assertFalse(jarArchiveEntry0.isUnixSymlink());
      assertNull(jarArchiveEntry0.getComment());
      assertEquals("", jarArchiveEntry0.toString());
      assertEquals((-1L), jarArchiveEntry0.getDataOffset());
      assertEquals(0, jarArchiveEntry0.getVersionRequired());
      assertEquals(4294967295L, jarArchiveEntry0.getCompressedSize());
      assertFalse(jarArchiveEntry0.isDirectory());
      assertEquals((-1L), jarArchiveEntry0.getCrc());
      assertEquals(0, jarArchiveEntry0.getUnixMode());
      assertEquals(8, jarArchiveEntry0.getMethod());
      assertEquals(4294967294L, jarArchiveEntry0.getSize());
      assertEquals(0, jarArchiveEntry0.getRawFlag());
      assertEquals("", jarArchiveEntry0.getName());
      assertEquals(0L, jarArchiveEntry0.getExternalAttributes());
      assertEquals(23, mockFileInputStream0.available());
      assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      
//      try { 
        zipArchiveOutputStream0.finish();
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Error in writing to file
//         //
//         verifyException("org.evosuite.runtime.mock.java.io.NativeMockedIO", e);
//      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      MockFile mockFile0 = new MockFile("86*>(iZ,:;46(=", "86*>(iZ,:;46(=");
      assertNotNull(mockFile0);
      
      ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
      assertEquals((-1L), zipArchiveEntry0.getCrc());
      assertEquals((-1L), zipArchiveEntry0.getCompressedSize());
      assertEquals(0, zipArchiveEntry0.getUnixMode());
      assertEquals((-1L), zipArchiveEntry0.getDataOffset());
      assertFalse(zipArchiveEntry0.isUnixSymlink());
      assertFalse(zipArchiveEntry0.isDirectory());
      assertEquals((-1L), zipArchiveEntry0.getSize());
      assertFalse(zipArchiveEntry0.isStreamContiguous());
      assertEquals("", zipArchiveEntry0.toString());
      assertNull(zipArchiveEntry0.getComment());
      assertEquals((-1), zipArchiveEntry0.getMethod());
      assertEquals(0, zipArchiveEntry0.getPlatform());
      assertEquals(0, zipArchiveEntry0.getInternalAttributes());
      assertEquals("", zipArchiveEntry0.getName());
      assertEquals(0, zipArchiveEntry0.getVersionMadeBy());
      assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
      assertEquals(0, zipArchiveEntry0.getRawFlag());
      assertEquals(0, zipArchiveEntry0.getVersionRequired());
      assertNotNull(zipArchiveEntry0);
      assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      
      zipArchiveEntry0.setCompressedSize(4294967307L);
      assertEquals((-1L), zipArchiveEntry0.getCrc());
      assertEquals(0, zipArchiveEntry0.getUnixMode());
      assertEquals((-1L), zipArchiveEntry0.getDataOffset());
      assertFalse(zipArchiveEntry0.isUnixSymlink());
      assertFalse(zipArchiveEntry0.isDirectory());
      assertEquals((-1L), zipArchiveEntry0.getSize());
      assertFalse(zipArchiveEntry0.isStreamContiguous());
      assertEquals(4294967307L, zipArchiveEntry0.getCompressedSize());
      assertEquals("", zipArchiveEntry0.toString());
      assertNull(zipArchiveEntry0.getComment());
      assertEquals((-1), zipArchiveEntry0.getMethod());
      assertEquals(0, zipArchiveEntry0.getPlatform());
      assertEquals(0, zipArchiveEntry0.getInternalAttributes());
      assertEquals("", zipArchiveEntry0.getName());
      assertEquals(0, zipArchiveEntry0.getVersionMadeBy());
      assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
      assertEquals(0, zipArchiveEntry0.getRawFlag());
      assertEquals(0, zipArchiveEntry0.getVersionRequired());
      assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(mockFile0);
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.canWrite());
      assertEquals("86*>(iZ,:;46(=", mockFile0.getName());
      assertEquals("/experiment/86*>(iZ,:;46(=", mockFile0.getParent());
      assertTrue(mockFile0.canExecute());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.exists());
      assertTrue(mockFile0.isAbsolute());
      assertEquals("/experiment/86*>(iZ,:;46(=/86*>(iZ,:;46(=", mockFile0.toString());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.isFile());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertFalse(zipArchiveOutputStream0.isSeekable());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertNotNull(zipArchiveOutputStream0);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      
      zipArchiveEntry0.setCrc(8);
      assertEquals(0, zipArchiveEntry0.getUnixMode());
      assertEquals((-1L), zipArchiveEntry0.getDataOffset());
      assertFalse(zipArchiveEntry0.isUnixSymlink());
      assertEquals(8L, zipArchiveEntry0.getCrc());
      assertFalse(zipArchiveEntry0.isDirectory());
      assertEquals((-1L), zipArchiveEntry0.getSize());
      assertFalse(zipArchiveEntry0.isStreamContiguous());
      assertEquals(4294967307L, zipArchiveEntry0.getCompressedSize());
      assertEquals("", zipArchiveEntry0.toString());
      assertNull(zipArchiveEntry0.getComment());
      assertEquals((-1), zipArchiveEntry0.getMethod());
      assertEquals(0, zipArchiveEntry0.getPlatform());
      assertEquals(0, zipArchiveEntry0.getInternalAttributes());
      assertEquals("", zipArchiveEntry0.getName());
      assertEquals(0, zipArchiveEntry0.getVersionMadeBy());
      assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
      assertEquals(0, zipArchiveEntry0.getRawFlag());
      assertEquals(0, zipArchiveEntry0.getVersionRequired());
      assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      
//      try { 
        zipArchiveOutputStream0.putArchiveEntry(zipArchiveEntry0);
//        fail("Expecting exception: Zip64RequiredException");
      
//      } catch(Zip64RequiredException e) {
//         //
//         // 's size exceeds the limit of 4GByte.
//         //
//         verifyException("org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream", e);
//      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      MockFile mockFile0 = new MockFile("86*>(iZ,:;46(=");
      assertNotNull(mockFile0);
      
      JarArchiveEntry jarArchiveEntry0 = new JarArchiveEntry("86*>(iZ,:;46(=");
      assertEquals("86*>(iZ,:;46(=", jarArchiveEntry0.getName());
      assertEquals("86*>(iZ,:;46(=", jarArchiveEntry0.toString());
      assertEquals(0, jarArchiveEntry0.getVersionMadeBy());
      assertFalse(jarArchiveEntry0.isStreamContiguous());
      assertEquals((-1L), jarArchiveEntry0.getSize());
      assertEquals((-1L), jarArchiveEntry0.getCrc());
      assertFalse(jarArchiveEntry0.isUnixSymlink());
      assertEquals(0, jarArchiveEntry0.getInternalAttributes());
      assertEquals((-1L), jarArchiveEntry0.getDataOffset());
      assertNull(jarArchiveEntry0.getComment());
      assertEquals((-1L), jarArchiveEntry0.getCompressedSize());
      assertFalse(jarArchiveEntry0.isDirectory());
      assertEquals(0, jarArchiveEntry0.getUnixMode());
      assertEquals(0, jarArchiveEntry0.getPlatform());
      assertEquals(0, jarArchiveEntry0.getRawFlag());
      assertEquals(0L, jarArchiveEntry0.getExternalAttributes());
      assertEquals((-1), jarArchiveEntry0.getMethod());
      assertEquals(0, jarArchiveEntry0.getVersionRequired());
      assertNotNull(jarArchiveEntry0);
      assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(mockFile0);
      assertFalse(mockFile0.isDirectory());
      assertEquals("86*>(iZ,:;46(=", mockFile0.toString());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertNull(mockFile0.getParent());
      assertTrue(mockFile0.canRead());
      assertEquals("86*>(iZ,:;46(=", mockFile0.getName());
      assertTrue(mockFile0.isFile());
      assertTrue(mockFile0.canWrite());
      assertTrue(mockFile0.canExecute());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(zipArchiveOutputStream0.isSeekable());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertNotNull(zipArchiveOutputStream0);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      
      jarArchiveEntry0.setCompressedSize(4294967295L);
      assertEquals("86*>(iZ,:;46(=", jarArchiveEntry0.getName());
      assertEquals("86*>(iZ,:;46(=", jarArchiveEntry0.toString());
      assertEquals(0, jarArchiveEntry0.getVersionMadeBy());
      assertFalse(jarArchiveEntry0.isStreamContiguous());
      assertEquals((-1L), jarArchiveEntry0.getSize());
      assertEquals((-1L), jarArchiveEntry0.getCrc());
      assertFalse(jarArchiveEntry0.isUnixSymlink());
      assertEquals(0, jarArchiveEntry0.getInternalAttributes());
      assertEquals((-1L), jarArchiveEntry0.getDataOffset());
      assertNull(jarArchiveEntry0.getComment());
      assertEquals(4294967295L, jarArchiveEntry0.getCompressedSize());
      assertFalse(jarArchiveEntry0.isDirectory());
      assertEquals(0, jarArchiveEntry0.getUnixMode());
      assertEquals(0, jarArchiveEntry0.getPlatform());
      assertEquals(0, jarArchiveEntry0.getRawFlag());
      assertEquals(0L, jarArchiveEntry0.getExternalAttributes());
      assertEquals((-1), jarArchiveEntry0.getMethod());
      assertEquals(0, jarArchiveEntry0.getVersionRequired());
      assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      
      jarArchiveEntry0.setSize(4294967295L);
      assertEquals("86*>(iZ,:;46(=", jarArchiveEntry0.getName());
      assertEquals("86*>(iZ,:;46(=", jarArchiveEntry0.toString());
      assertEquals(0, jarArchiveEntry0.getVersionMadeBy());
      assertFalse(jarArchiveEntry0.isStreamContiguous());
      assertEquals(4294967295L, jarArchiveEntry0.getSize());
      assertEquals((-1L), jarArchiveEntry0.getCrc());
      assertFalse(jarArchiveEntry0.isUnixSymlink());
      assertEquals(0, jarArchiveEntry0.getInternalAttributes());
      assertEquals((-1L), jarArchiveEntry0.getDataOffset());
      assertNull(jarArchiveEntry0.getComment());
      assertEquals(4294967295L, jarArchiveEntry0.getCompressedSize());
      assertFalse(jarArchiveEntry0.isDirectory());
      assertEquals(0, jarArchiveEntry0.getUnixMode());
      assertEquals(0, jarArchiveEntry0.getPlatform());
      assertEquals(0, jarArchiveEntry0.getRawFlag());
      assertEquals(0L, jarArchiveEntry0.getExternalAttributes());
      assertEquals((-1), jarArchiveEntry0.getMethod());
      assertEquals(0, jarArchiveEntry0.getVersionRequired());
      assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      
      mockFile0.deleteOnExit();
      assertFalse(mockFile0.isDirectory());
      assertEquals("86*>(iZ,:;46(=", mockFile0.toString());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertNull(mockFile0.getParent());
      assertTrue(mockFile0.canRead());
      assertEquals("86*>(iZ,:;46(=", mockFile0.getName());
      assertTrue(mockFile0.isFile());
      assertTrue(mockFile0.canWrite());
      assertTrue(mockFile0.canExecute());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getFreeSpace());
      
      zipArchiveOutputStream0.putArchiveEntry(jarArchiveEntry0);
      assertFalse(mockFile0.isDirectory());
      assertEquals("86*>(iZ,:;46(=", mockFile0.toString());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertNull(mockFile0.getParent());
      assertTrue(mockFile0.canRead());
      assertEquals("86*>(iZ,:;46(=", mockFile0.getName());
      assertTrue(mockFile0.isFile());
      assertTrue(mockFile0.canWrite());
      assertTrue(mockFile0.canExecute());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(64L, mockFile0.length());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals("86*>(iZ,:;46(=", jarArchiveEntry0.getName());
      assertEquals("86*>(iZ,:;46(=", jarArchiveEntry0.toString());
      assertEquals(0, jarArchiveEntry0.getVersionMadeBy());
      assertFalse(jarArchiveEntry0.isStreamContiguous());
      assertEquals(4294967295L, jarArchiveEntry0.getSize());
      assertEquals((-1L), jarArchiveEntry0.getCrc());
      assertFalse(jarArchiveEntry0.isUnixSymlink());
      assertEquals(0, jarArchiveEntry0.getInternalAttributes());
      assertEquals((-1L), jarArchiveEntry0.getDataOffset());
      assertNull(jarArchiveEntry0.getComment());
      assertEquals(4294967295L, jarArchiveEntry0.getCompressedSize());
      assertFalse(jarArchiveEntry0.isDirectory());
      assertEquals(8, jarArchiveEntry0.getMethod());
      assertEquals(0, jarArchiveEntry0.getUnixMode());
      assertEquals(0, jarArchiveEntry0.getPlatform());
      assertEquals(0, jarArchiveEntry0.getRawFlag());
      assertEquals(0L, jarArchiveEntry0.getExternalAttributes());
      assertEquals(0, jarArchiveEntry0.getVersionRequired());
      assertFalse(zipArchiveOutputStream0.isSeekable());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      
      zipArchiveOutputStream0.writeDataDescriptor(jarArchiveEntry0);
      assertFalse(mockFile0.isDirectory());
      assertEquals("86*>(iZ,:;46(=", mockFile0.toString());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertNull(mockFile0.getParent());
      assertTrue(mockFile0.canRead());
      assertEquals("86*>(iZ,:;46(=", mockFile0.getName());
      assertTrue(mockFile0.isFile());
      assertTrue(mockFile0.canWrite());
      assertTrue(mockFile0.canExecute());
      assertEquals(88L, mockFile0.length());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals("86*>(iZ,:;46(=", jarArchiveEntry0.getName());
      assertEquals("86*>(iZ,:;46(=", jarArchiveEntry0.toString());
      assertEquals(0, jarArchiveEntry0.getVersionMadeBy());
      assertFalse(jarArchiveEntry0.isStreamContiguous());
      assertEquals(4294967295L, jarArchiveEntry0.getSize());
      assertEquals((-1L), jarArchiveEntry0.getCrc());
      assertFalse(jarArchiveEntry0.isUnixSymlink());
      assertEquals(0, jarArchiveEntry0.getInternalAttributes());
      assertEquals((-1L), jarArchiveEntry0.getDataOffset());
      assertNull(jarArchiveEntry0.getComment());
      assertEquals(4294967295L, jarArchiveEntry0.getCompressedSize());
      assertFalse(jarArchiveEntry0.isDirectory());
      assertEquals(8, jarArchiveEntry0.getMethod());
      assertEquals(0, jarArchiveEntry0.getUnixMode());
      assertEquals(0, jarArchiveEntry0.getPlatform());
      assertEquals(0, jarArchiveEntry0.getRawFlag());
      assertEquals(0L, jarArchiveEntry0.getExternalAttributes());
      assertEquals(0, jarArchiveEntry0.getVersionRequired());
      assertFalse(zipArchiveOutputStream0.isSeekable());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      
      JarArchiveEntry jarArchiveEntry1 = new JarArchiveEntry((ZipArchiveEntry) jarArchiveEntry0);
      assertTrue(jarArchiveEntry1.equals((Object)jarArchiveEntry0));
      assertEquals("86*>(iZ,:;46(=", jarArchiveEntry0.getName());
      assertEquals("86*>(iZ,:;46(=", jarArchiveEntry0.toString());
      assertEquals(0, jarArchiveEntry0.getVersionMadeBy());
      assertFalse(jarArchiveEntry0.isStreamContiguous());
      assertEquals(4294967295L, jarArchiveEntry0.getSize());
      assertEquals((-1L), jarArchiveEntry0.getCrc());
      assertFalse(jarArchiveEntry0.isUnixSymlink());
      assertEquals(0, jarArchiveEntry0.getInternalAttributes());
      assertEquals((-1L), jarArchiveEntry0.getDataOffset());
      assertNull(jarArchiveEntry0.getComment());
      assertEquals(4294967295L, jarArchiveEntry0.getCompressedSize());
      assertFalse(jarArchiveEntry0.isDirectory());
      assertEquals(8, jarArchiveEntry0.getMethod());
      assertEquals(0, jarArchiveEntry0.getUnixMode());
      assertEquals(0, jarArchiveEntry0.getPlatform());
      assertEquals(0, jarArchiveEntry0.getRawFlag());
      assertEquals(0L, jarArchiveEntry0.getExternalAttributes());
      assertEquals(0, jarArchiveEntry0.getVersionRequired());
      assertEquals(4294967295L, jarArchiveEntry1.getCompressedSize());
      assertEquals(0, jarArchiveEntry1.getInternalAttributes());
      assertFalse(jarArchiveEntry1.isUnixSymlink());
      assertEquals(0, jarArchiveEntry1.getVersionRequired());
      assertEquals(0, jarArchiveEntry1.getUnixMode());
      assertEquals(0, jarArchiveEntry1.getVersionMadeBy());
      assertEquals(0, jarArchiveEntry1.getRawFlag());
      assertEquals(0, jarArchiveEntry1.getPlatform());
      assertEquals(0L, jarArchiveEntry1.getExternalAttributes());
      assertEquals((-1L), jarArchiveEntry1.getDataOffset());
      assertEquals("86*>(iZ,:;46(=", jarArchiveEntry1.toString());
      assertEquals((-1L), jarArchiveEntry1.getCrc());
      assertNull(jarArchiveEntry1.getComment());
      assertEquals(4294967295L, jarArchiveEntry1.getSize());
      assertFalse(jarArchiveEntry1.isStreamContiguous());
      assertEquals(8, jarArchiveEntry1.getMethod());
      assertFalse(jarArchiveEntry1.isDirectory());
      assertEquals("86*>(iZ,:;46(=", jarArchiveEntry1.getName());
      assertNotNull(jarArchiveEntry1);
      assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(mockFile0);
      assertNotNull(mockFileInputStream0);
      
      boolean boolean0 = mockFileInputStream0.markSupported();
      assertFalse(mockFile0.isDirectory());
      assertEquals("86*>(iZ,:;46(=", mockFile0.toString());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertNull(mockFile0.getParent());
      assertTrue(mockFile0.canRead());
      assertEquals("86*>(iZ,:;46(=", mockFile0.getName());
      assertTrue(mockFile0.isFile());
      assertTrue(mockFile0.canWrite());
      assertTrue(mockFile0.canExecute());
      assertEquals(88L, mockFile0.length());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(88, mockFileInputStream0.available());
      assertFalse(boolean0);
      
      ZipArchiveOutputStream zipArchiveOutputStream1 = new ZipArchiveOutputStream(zipArchiveOutputStream0);
      assertFalse(zipArchiveOutputStream1.equals((Object)zipArchiveOutputStream0));
      assertFalse(mockFile0.isDirectory());
      assertEquals("86*>(iZ,:;46(=", mockFile0.toString());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertNull(mockFile0.getParent());
      assertTrue(mockFile0.canRead());
      assertEquals("86*>(iZ,:;46(=", mockFile0.getName());
      assertTrue(mockFile0.isFile());
      assertTrue(mockFile0.canWrite());
      assertTrue(mockFile0.canExecute());
      assertEquals(88L, mockFile0.length());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(zipArchiveOutputStream0.isSeekable());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals(0L, zipArchiveOutputStream1.getBytesWritten());
      assertEquals(0, zipArchiveOutputStream1.getCount());
      assertFalse(zipArchiveOutputStream1.isSeekable());
      assertEquals("UTF8", zipArchiveOutputStream1.getEncoding());
      assertNotNull(zipArchiveOutputStream1);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      
      zipArchiveOutputStream1.addRawArchiveEntry(jarArchiveEntry1, mockFileInputStream0);
      assertTrue(jarArchiveEntry0.equals((Object)jarArchiveEntry1));
      assertFalse(zipArchiveOutputStream0.equals((Object)zipArchiveOutputStream1));
      assertTrue(jarArchiveEntry1.equals((Object)jarArchiveEntry0));
      assertFalse(zipArchiveOutputStream1.equals((Object)zipArchiveOutputStream0));
      assertFalse(mockFile0.isDirectory());
      assertEquals("86*>(iZ,:;46(=", mockFile0.toString());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertNull(mockFile0.getParent());
      assertTrue(mockFile0.canRead());
      assertEquals("86*>(iZ,:;46(=", mockFile0.getName());
      assertTrue(mockFile0.isFile());
      assertTrue(mockFile0.canWrite());
      assertTrue(mockFile0.canExecute());
      assertEquals(88L, mockFile0.length());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals("86*>(iZ,:;46(=", jarArchiveEntry0.getName());
      assertEquals("86*>(iZ,:;46(=", jarArchiveEntry0.toString());
      assertEquals(0, jarArchiveEntry0.getVersionMadeBy());
      assertFalse(jarArchiveEntry0.isStreamContiguous());
      assertEquals(4294967295L, jarArchiveEntry0.getSize());
      assertEquals((-1L), jarArchiveEntry0.getCrc());
      assertFalse(jarArchiveEntry0.isUnixSymlink());
      assertEquals(0, jarArchiveEntry0.getInternalAttributes());
      assertEquals((-1L), jarArchiveEntry0.getDataOffset());
      assertNull(jarArchiveEntry0.getComment());
      assertEquals(4294967295L, jarArchiveEntry0.getCompressedSize());
      assertFalse(jarArchiveEntry0.isDirectory());
      assertEquals(8, jarArchiveEntry0.getMethod());
      assertEquals(0, jarArchiveEntry0.getUnixMode());
      assertEquals(0, jarArchiveEntry0.getPlatform());
      assertEquals(0, jarArchiveEntry0.getRawFlag());
      assertEquals(0L, jarArchiveEntry0.getExternalAttributes());
      assertEquals(0, jarArchiveEntry0.getVersionRequired());
      assertFalse(zipArchiveOutputStream0.isSeekable());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals(4294967295L, jarArchiveEntry1.getCompressedSize());
      assertEquals(0, jarArchiveEntry1.getInternalAttributes());
      assertFalse(jarArchiveEntry1.isUnixSymlink());
      assertEquals(0, jarArchiveEntry1.getVersionRequired());
      assertEquals(0, jarArchiveEntry1.getUnixMode());
      assertEquals(0, jarArchiveEntry1.getVersionMadeBy());
      assertEquals(0, jarArchiveEntry1.getRawFlag());
      assertEquals(0, jarArchiveEntry1.getPlatform());
      assertEquals(0L, jarArchiveEntry1.getExternalAttributes());
      assertEquals((-1L), jarArchiveEntry1.getDataOffset());
      assertEquals("86*>(iZ,:;46(=", jarArchiveEntry1.toString());
      assertEquals((-1L), jarArchiveEntry1.getCrc());
      assertNull(jarArchiveEntry1.getComment());
      assertEquals(4294967295L, jarArchiveEntry1.getSize());
      assertFalse(jarArchiveEntry1.isStreamContiguous());
      assertEquals(8, jarArchiveEntry1.getMethod());
      assertFalse(jarArchiveEntry1.isDirectory());
      assertEquals("86*>(iZ,:;46(=", jarArchiveEntry1.getName());
      assertEquals((-2), mockFileInputStream0.available());
      assertFalse(zipArchiveOutputStream1.isSeekable());
      assertEquals(88L, zipArchiveOutputStream1.getBytesWritten());
      assertEquals(88, zipArchiveOutputStream1.getCount());
      assertEquals("UTF8", zipArchiveOutputStream1.getEncoding());
      assertNotSame(jarArchiveEntry0, jarArchiveEntry1);
      assertNotSame(zipArchiveOutputStream0, zipArchiveOutputStream1);
      assertNotSame(jarArchiveEntry1, jarArchiveEntry0);
      assertNotSame(zipArchiveOutputStream1, zipArchiveOutputStream0);
      assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      
//      try { 
        zipArchiveOutputStream1.close();
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // This archive contains unclosed entries.
//         //
//         verifyException("org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream", e);
//      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      MockFile mockFile0 = new MockFile("86*>(iZ,:;46(=", "86*>(iZ,:;46(=");
      assertNotNull(mockFile0);
      
      JarArchiveEntry jarArchiveEntry0 = new JarArchiveEntry("86*>(iZ,:;46(=");
      assertEquals((-1L), jarArchiveEntry0.getSize());
      assertEquals(0, jarArchiveEntry0.getUnixMode());
      assertEquals(0, jarArchiveEntry0.getVersionMadeBy());
      assertEquals(0L, jarArchiveEntry0.getExternalAttributes());
      assertEquals((-1L), jarArchiveEntry0.getDataOffset());
      assertEquals(0, jarArchiveEntry0.getRawFlag());
      assertEquals((-1L), jarArchiveEntry0.getCrc());
      assertEquals(0, jarArchiveEntry0.getVersionRequired());
      assertEquals("86*>(iZ,:;46(=", jarArchiveEntry0.getName());
      assertEquals((-1), jarArchiveEntry0.getMethod());
      assertEquals((-1L), jarArchiveEntry0.getCompressedSize());
      assertFalse(jarArchiveEntry0.isDirectory());
      assertFalse(jarArchiveEntry0.isUnixSymlink());
      assertEquals(0, jarArchiveEntry0.getPlatform());
      assertFalse(jarArchiveEntry0.isStreamContiguous());
      assertNull(jarArchiveEntry0.getComment());
      assertEquals("86*>(iZ,:;46(=", jarArchiveEntry0.toString());
      assertEquals(0, jarArchiveEntry0.getInternalAttributes());
      assertNotNull(jarArchiveEntry0);
      assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(mockFile0);
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.canExecute());
      assertEquals("/experiment/86*>(iZ,:;46(=", mockFile0.getParent());
      assertTrue(mockFile0.isAbsolute());
      assertEquals("86*>(iZ,:;46(=", mockFile0.getName());
      assertTrue(mockFile0.canWrite());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isDirectory());
      assertEquals("/experiment/86*>(iZ,:;46(=/86*>(iZ,:;46(=", mockFile0.toString());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.isFile());
      assertTrue(mockFile0.canRead());
      assertFalse(zipArchiveOutputStream0.isSeekable());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertNotNull(zipArchiveOutputStream0);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      
      jarArchiveEntry0.setSize(4294967282L);
      assertEquals(0, jarArchiveEntry0.getUnixMode());
      assertEquals(0, jarArchiveEntry0.getVersionMadeBy());
      assertEquals(0L, jarArchiveEntry0.getExternalAttributes());
      assertEquals((-1L), jarArchiveEntry0.getDataOffset());
      assertEquals(0, jarArchiveEntry0.getRawFlag());
      assertEquals((-1L), jarArchiveEntry0.getCrc());
      assertEquals(0, jarArchiveEntry0.getVersionRequired());
      assertEquals("86*>(iZ,:;46(=", jarArchiveEntry0.getName());
      assertEquals((-1), jarArchiveEntry0.getMethod());
      assertEquals((-1L), jarArchiveEntry0.getCompressedSize());
      assertFalse(jarArchiveEntry0.isDirectory());
      assertFalse(jarArchiveEntry0.isUnixSymlink());
      assertEquals(0, jarArchiveEntry0.getPlatform());
      assertEquals(4294967282L, jarArchiveEntry0.getSize());
      assertFalse(jarArchiveEntry0.isStreamContiguous());
      assertNull(jarArchiveEntry0.getComment());
      assertEquals("86*>(iZ,:;46(=", jarArchiveEntry0.toString());
      assertEquals(0, jarArchiveEntry0.getInternalAttributes());
      assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      
      zipArchiveOutputStream0.putArchiveEntry(jarArchiveEntry0);
      assertEquals(44L, mockFile0.length());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.canExecute());
      assertEquals("/experiment/86*>(iZ,:;46(=", mockFile0.getParent());
      assertTrue(mockFile0.isAbsolute());
      assertEquals("86*>(iZ,:;46(=", mockFile0.getName());
      assertTrue(mockFile0.canWrite());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isDirectory());
      assertEquals("/experiment/86*>(iZ,:;46(=/86*>(iZ,:;46(=", mockFile0.toString());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.isFile());
      assertTrue(mockFile0.canRead());
      assertEquals(0, jarArchiveEntry0.getUnixMode());
      assertEquals(0, jarArchiveEntry0.getVersionMadeBy());
      assertEquals(0L, jarArchiveEntry0.getExternalAttributes());
      assertEquals((-1L), jarArchiveEntry0.getDataOffset());
      assertEquals(0, jarArchiveEntry0.getRawFlag());
      assertEquals((-1L), jarArchiveEntry0.getCrc());
      assertEquals(0, jarArchiveEntry0.getVersionRequired());
      assertEquals("86*>(iZ,:;46(=", jarArchiveEntry0.getName());
      assertEquals((-1L), jarArchiveEntry0.getCompressedSize());
      assertEquals(8, jarArchiveEntry0.getMethod());
      assertFalse(jarArchiveEntry0.isDirectory());
      assertFalse(jarArchiveEntry0.isUnixSymlink());
      assertEquals(0, jarArchiveEntry0.getPlatform());
      assertEquals(4294967282L, jarArchiveEntry0.getSize());
      assertFalse(jarArchiveEntry0.isStreamContiguous());
      assertNull(jarArchiveEntry0.getComment());
      assertEquals("86*>(iZ,:;46(=", jarArchiveEntry0.toString());
      assertEquals(0, jarArchiveEntry0.getInternalAttributes());
      assertFalse(zipArchiveOutputStream0.isSeekable());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      
      zipArchiveOutputStream0.writeDataDescriptor(jarArchiveEntry0);
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.canExecute());
      assertEquals("/experiment/86*>(iZ,:;46(=", mockFile0.getParent());
      assertTrue(mockFile0.isAbsolute());
      assertEquals("86*>(iZ,:;46(=", mockFile0.getName());
      assertTrue(mockFile0.canWrite());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isDirectory());
      assertEquals(60L, mockFile0.length());
      assertEquals("/experiment/86*>(iZ,:;46(=/86*>(iZ,:;46(=", mockFile0.toString());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.isFile());
      assertTrue(mockFile0.canRead());
      assertEquals(0, jarArchiveEntry0.getUnixMode());
      assertEquals(0, jarArchiveEntry0.getVersionMadeBy());
      assertEquals(0L, jarArchiveEntry0.getExternalAttributes());
      assertEquals((-1L), jarArchiveEntry0.getDataOffset());
      assertEquals(0, jarArchiveEntry0.getRawFlag());
      assertEquals((-1L), jarArchiveEntry0.getCrc());
      assertEquals(0, jarArchiveEntry0.getVersionRequired());
      assertEquals("86*>(iZ,:;46(=", jarArchiveEntry0.getName());
      assertEquals((-1L), jarArchiveEntry0.getCompressedSize());
      assertEquals(8, jarArchiveEntry0.getMethod());
      assertFalse(jarArchiveEntry0.isDirectory());
      assertFalse(jarArchiveEntry0.isUnixSymlink());
      assertEquals(0, jarArchiveEntry0.getPlatform());
      assertEquals(4294967282L, jarArchiveEntry0.getSize());
      assertFalse(jarArchiveEntry0.isStreamContiguous());
      assertNull(jarArchiveEntry0.getComment());
      assertEquals("86*>(iZ,:;46(=", jarArchiveEntry0.toString());
      assertEquals(0, jarArchiveEntry0.getInternalAttributes());
      assertFalse(zipArchiveOutputStream0.isSeekable());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
//      try { 
        zipArchiveOutputStream0.writeDataDescriptor(jarArchiveEntry0);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Simulated IOException
//         //
//         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
//      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      File file0 = MockFile.createTempFile("not ecodable", "not ecodable");
      assertTrue(file0.canWrite());
      assertTrue(file0.isFile());
      assertTrue(file0.canExecute());
      assertTrue(file0.canRead());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals("not ecodable0not ecodable", file0.getName());
      assertTrue(file0.exists());
      assertEquals("/tmp/not ecodable0not ecodable", file0.toString());
      assertEquals(0L, file0.length());
      assertEquals(0L, file0.getFreeSpace());
      assertFalse(file0.isDirectory());
      assertTrue(file0.isAbsolute());
      assertEquals("/tmp", file0.getParent());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      assertNotNull(file0);
      
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(file0);
      assertTrue(file0.canWrite());
      assertTrue(file0.isFile());
      assertTrue(file0.canExecute());
      assertTrue(file0.canRead());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals("not ecodable0not ecodable", file0.getName());
      assertTrue(file0.exists());
      assertEquals("/tmp/not ecodable0not ecodable", file0.toString());
      assertEquals(0L, file0.length());
      assertEquals(0L, file0.getFreeSpace());
      assertFalse(file0.isDirectory());
      assertTrue(file0.isAbsolute());
      assertEquals("/tmp", file0.getParent());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertTrue(zipArchiveOutputStream0.isSeekable());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertNotNull(zipArchiveOutputStream0);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      
      ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
      assertEquals("", zipArchiveEntry0.getName());
      assertFalse(zipArchiveEntry0.isDirectory());
      assertFalse(zipArchiveEntry0.isUnixSymlink());
      assertFalse(zipArchiveEntry0.isStreamContiguous());
      assertEquals("", zipArchiveEntry0.toString());
      assertEquals(0, zipArchiveEntry0.getVersionRequired());
      assertEquals((-1), zipArchiveEntry0.getMethod());
      assertEquals((-1L), zipArchiveEntry0.getCrc());
      assertEquals((-1L), zipArchiveEntry0.getCompressedSize());
      assertEquals((-1L), zipArchiveEntry0.getSize());
      assertEquals(0, zipArchiveEntry0.getVersionMadeBy());
      assertEquals((-1L), zipArchiveEntry0.getDataOffset());
      assertEquals(0, zipArchiveEntry0.getRawFlag());
      assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
      assertNull(zipArchiveEntry0.getComment());
      assertEquals(0, zipArchiveEntry0.getPlatform());
      assertEquals(0, zipArchiveEntry0.getInternalAttributes());
      assertEquals(0, zipArchiveEntry0.getUnixMode());
      assertNotNull(zipArchiveEntry0);
      assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      
      zipArchiveEntry0.setCompressedSize(4294967300L);
      assertEquals("", zipArchiveEntry0.getName());
      assertFalse(zipArchiveEntry0.isDirectory());
      assertFalse(zipArchiveEntry0.isUnixSymlink());
      assertFalse(zipArchiveEntry0.isStreamContiguous());
      assertEquals("", zipArchiveEntry0.toString());
      assertEquals(0, zipArchiveEntry0.getVersionRequired());
      assertEquals((-1), zipArchiveEntry0.getMethod());
      assertEquals((-1L), zipArchiveEntry0.getCrc());
      assertEquals(4294967300L, zipArchiveEntry0.getCompressedSize());
      assertEquals((-1L), zipArchiveEntry0.getSize());
      assertEquals(0, zipArchiveEntry0.getVersionMadeBy());
      assertEquals((-1L), zipArchiveEntry0.getDataOffset());
      assertEquals(0, zipArchiveEntry0.getRawFlag());
      assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
      assertNull(zipArchiveEntry0.getComment());
      assertEquals(0, zipArchiveEntry0.getPlatform());
      assertEquals(0, zipArchiveEntry0.getInternalAttributes());
      assertEquals(0, zipArchiveEntry0.getUnixMode());
      assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      
      zipArchiveEntry0.setSize(2048);
      assertEquals("", zipArchiveEntry0.getName());
      assertFalse(zipArchiveEntry0.isDirectory());
      assertFalse(zipArchiveEntry0.isUnixSymlink());
      assertFalse(zipArchiveEntry0.isStreamContiguous());
      assertEquals("", zipArchiveEntry0.toString());
      assertEquals(0, zipArchiveEntry0.getVersionRequired());
      assertEquals((-1), zipArchiveEntry0.getMethod());
      assertEquals((-1L), zipArchiveEntry0.getCrc());
      assertEquals(4294967300L, zipArchiveEntry0.getCompressedSize());
      assertEquals(2048L, zipArchiveEntry0.getSize());
      assertEquals(0, zipArchiveEntry0.getVersionMadeBy());
      assertEquals((-1L), zipArchiveEntry0.getDataOffset());
      assertEquals(0, zipArchiveEntry0.getRawFlag());
      assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
      assertNull(zipArchiveEntry0.getComment());
      assertEquals(0, zipArchiveEntry0.getPlatform());
      assertEquals(0, zipArchiveEntry0.getInternalAttributes());
      assertEquals(0, zipArchiveEntry0.getUnixMode());
      assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      
      zipArchiveOutputStream0.putArchiveEntry(zipArchiveEntry0);
      assertTrue(file0.canWrite());
      assertTrue(file0.isFile());
      assertTrue(file0.canExecute());
      assertTrue(file0.canRead());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals("not ecodable0not ecodable", file0.getName());
      assertTrue(file0.exists());
      assertEquals("/tmp/not ecodable0not ecodable", file0.toString());
      assertEquals(0L, file0.length());
      assertEquals(0L, file0.getFreeSpace());
      assertFalse(file0.isDirectory());
      assertTrue(file0.isAbsolute());
      assertEquals("/tmp", file0.getParent());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertTrue(zipArchiveOutputStream0.isSeekable());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals(8, zipArchiveEntry0.getMethod());
      assertEquals("", zipArchiveEntry0.getName());
      assertFalse(zipArchiveEntry0.isDirectory());
      assertFalse(zipArchiveEntry0.isUnixSymlink());
      assertFalse(zipArchiveEntry0.isStreamContiguous());
      assertEquals("", zipArchiveEntry0.toString());
      assertEquals(0, zipArchiveEntry0.getVersionRequired());
      assertEquals((-1L), zipArchiveEntry0.getCrc());
      assertEquals(4294967300L, zipArchiveEntry0.getCompressedSize());
      assertEquals(2048L, zipArchiveEntry0.getSize());
      assertEquals(0, zipArchiveEntry0.getVersionMadeBy());
      assertEquals((-1L), zipArchiveEntry0.getDataOffset());
      assertEquals(0, zipArchiveEntry0.getRawFlag());
      assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
      assertNull(zipArchiveEntry0.getComment());
      assertEquals(0, zipArchiveEntry0.getPlatform());
      assertEquals(0, zipArchiveEntry0.getInternalAttributes());
      assertEquals(0, zipArchiveEntry0.getUnixMode());
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      
      zipArchiveOutputStream0.writeDataDescriptor(zipArchiveEntry0);
      assertTrue(file0.canWrite());
      assertTrue(file0.isFile());
      assertTrue(file0.canExecute());
      assertTrue(file0.canRead());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals("not ecodable0not ecodable", file0.getName());
      assertTrue(file0.exists());
      assertEquals("/tmp/not ecodable0not ecodable", file0.toString());
      assertEquals(0L, file0.length());
      assertEquals(0L, file0.getFreeSpace());
      assertFalse(file0.isDirectory());
      assertTrue(file0.isAbsolute());
      assertEquals("/tmp", file0.getParent());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertTrue(zipArchiveOutputStream0.isSeekable());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals(8, zipArchiveEntry0.getMethod());
      assertEquals("", zipArchiveEntry0.getName());
      assertFalse(zipArchiveEntry0.isDirectory());
      assertFalse(zipArchiveEntry0.isUnixSymlink());
      assertFalse(zipArchiveEntry0.isStreamContiguous());
      assertEquals("", zipArchiveEntry0.toString());
      assertEquals(0, zipArchiveEntry0.getVersionRequired());
      assertEquals((-1L), zipArchiveEntry0.getCrc());
      assertEquals(4294967300L, zipArchiveEntry0.getCompressedSize());
      assertEquals(2048L, zipArchiveEntry0.getSize());
      assertEquals(0, zipArchiveEntry0.getVersionMadeBy());
      assertEquals((-1L), zipArchiveEntry0.getDataOffset());
      assertEquals(0, zipArchiveEntry0.getRawFlag());
      assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
      assertNull(zipArchiveEntry0.getComment());
      assertEquals(0, zipArchiveEntry0.getPlatform());
      assertEquals(0, zipArchiveEntry0.getInternalAttributes());
      assertEquals(0, zipArchiveEntry0.getUnixMode());
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      
      zipArchiveOutputStream0.destroy();
      assertTrue(file0.canWrite());
      assertTrue(file0.isFile());
      assertTrue(file0.canExecute());
      assertTrue(file0.canRead());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals("not ecodable0not ecodable", file0.getName());
      assertTrue(file0.exists());
      assertEquals("/tmp/not ecodable0not ecodable", file0.toString());
      assertEquals(0L, file0.length());
      assertEquals(0L, file0.getFreeSpace());
      assertFalse(file0.isDirectory());
      assertTrue(file0.isAbsolute());
      assertEquals("/tmp", file0.getParent());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertTrue(zipArchiveOutputStream0.isSeekable());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      
      JarArchiveEntry jarArchiveEntry0 = new JarArchiveEntry(zipArchiveEntry0);
      assertEquals(8, zipArchiveEntry0.getMethod());
      assertEquals("", zipArchiveEntry0.getName());
      assertFalse(zipArchiveEntry0.isDirectory());
      assertFalse(zipArchiveEntry0.isUnixSymlink());
      assertFalse(zipArchiveEntry0.isStreamContiguous());
      assertEquals("", zipArchiveEntry0.toString());
      assertEquals(0, zipArchiveEntry0.getVersionRequired());
      assertEquals((-1L), zipArchiveEntry0.getCrc());
      assertEquals(4294967300L, zipArchiveEntry0.getCompressedSize());
      assertEquals(2048L, zipArchiveEntry0.getSize());
      assertEquals(0, zipArchiveEntry0.getVersionMadeBy());
      assertEquals((-1L), zipArchiveEntry0.getDataOffset());
      assertEquals(0, zipArchiveEntry0.getRawFlag());
      assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
      assertNull(zipArchiveEntry0.getComment());
      assertEquals(0, zipArchiveEntry0.getPlatform());
      assertEquals(0, zipArchiveEntry0.getInternalAttributes());
      assertEquals(0, zipArchiveEntry0.getUnixMode());
      assertEquals(2048L, jarArchiveEntry0.getSize());
      assertEquals((-1L), jarArchiveEntry0.getDataOffset());
      assertEquals(0L, jarArchiveEntry0.getExternalAttributes());
      assertNull(jarArchiveEntry0.getComment());
      assertEquals(4294967300L, jarArchiveEntry0.getCompressedSize());
      assertEquals((-1L), jarArchiveEntry0.getCrc());
      assertFalse(jarArchiveEntry0.isDirectory());
      assertFalse(jarArchiveEntry0.isUnixSymlink());
      assertEquals(8, jarArchiveEntry0.getMethod());
      assertEquals("", jarArchiveEntry0.getName());
      assertFalse(jarArchiveEntry0.isStreamContiguous());
      assertEquals(0, jarArchiveEntry0.getVersionRequired());
      assertEquals("", jarArchiveEntry0.toString());
      assertEquals(0, jarArchiveEntry0.getRawFlag());
      assertEquals(0, jarArchiveEntry0.getInternalAttributes());
      assertEquals(0, jarArchiveEntry0.getUnixMode());
      assertEquals(0, jarArchiveEntry0.getPlatform());
      assertEquals(0, jarArchiveEntry0.getVersionMadeBy());
      assertNotNull(jarArchiveEntry0);
      assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(file0);
      assertNotNull(mockFileInputStream0);
      
//      try { 
        zipArchiveOutputStream0.addRawArchiveEntry(jarArchiveEntry0, mockFileInputStream0);
//        fail("Expecting exception: ClosedChannelException");
      
//      } catch(ClosedChannelException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      MockFile mockFile0 = new MockFile("86*>(iZ,:;46(=");
      assertNotNull(mockFile0);
      
      JarArchiveEntry jarArchiveEntry0 = new JarArchiveEntry("86*>(iZ,:;46(=");
      assertFalse(jarArchiveEntry0.isDirectory());
      assertFalse(jarArchiveEntry0.isUnixSymlink());
      assertEquals((-1L), jarArchiveEntry0.getCompressedSize());
      assertEquals(0, jarArchiveEntry0.getInternalAttributes());
      assertEquals((-1L), jarArchiveEntry0.getSize());
      assertNull(jarArchiveEntry0.getComment());
      assertEquals((-1L), jarArchiveEntry0.getCrc());
      assertFalse(jarArchiveEntry0.isStreamContiguous());
      assertEquals("86*>(iZ,:;46(=", jarArchiveEntry0.getName());
      assertEquals(0L, jarArchiveEntry0.getExternalAttributes());
      assertEquals((-1L), jarArchiveEntry0.getDataOffset());
      assertEquals("86*>(iZ,:;46(=", jarArchiveEntry0.toString());
      assertEquals(0, jarArchiveEntry0.getRawFlag());
      assertEquals(0, jarArchiveEntry0.getPlatform());
      assertEquals(0, jarArchiveEntry0.getUnixMode());
      assertEquals(0, jarArchiveEntry0.getVersionMadeBy());
      assertEquals((-1), jarArchiveEntry0.getMethod());
      assertEquals(0, jarArchiveEntry0.getVersionRequired());
      assertNotNull(jarArchiveEntry0);
      assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(mockFile0);
      assertEquals("86*>(iZ,:;46(=", mockFile0.toString());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertNull(mockFile0.getParent());
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.isFile());
      assertTrue(mockFile0.canRead());
      assertEquals("86*>(iZ,:;46(=", mockFile0.getName());
      assertTrue(mockFile0.canWrite());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertFalse(zipArchiveOutputStream0.isSeekable());
      assertNotNull(zipArchiveOutputStream0);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      
      jarArchiveEntry0.setSize(4294967296L);
      assertFalse(jarArchiveEntry0.isDirectory());
      assertFalse(jarArchiveEntry0.isUnixSymlink());
      assertEquals((-1L), jarArchiveEntry0.getCompressedSize());
      assertEquals(0, jarArchiveEntry0.getInternalAttributes());
      assertEquals(4294967296L, jarArchiveEntry0.getSize());
      assertNull(jarArchiveEntry0.getComment());
      assertEquals((-1L), jarArchiveEntry0.getCrc());
      assertFalse(jarArchiveEntry0.isStreamContiguous());
      assertEquals("86*>(iZ,:;46(=", jarArchiveEntry0.getName());
      assertEquals(0L, jarArchiveEntry0.getExternalAttributes());
      assertEquals((-1L), jarArchiveEntry0.getDataOffset());
      assertEquals("86*>(iZ,:;46(=", jarArchiveEntry0.toString());
      assertEquals(0, jarArchiveEntry0.getRawFlag());
      assertEquals(0, jarArchiveEntry0.getPlatform());
      assertEquals(0, jarArchiveEntry0.getUnixMode());
      assertEquals(0, jarArchiveEntry0.getVersionMadeBy());
      assertEquals((-1), jarArchiveEntry0.getMethod());
      assertEquals(0, jarArchiveEntry0.getVersionRequired());
      assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      
      zipArchiveOutputStream0.putArchiveEntry(jarArchiveEntry0);
      assertEquals("86*>(iZ,:;46(=", mockFile0.toString());
      assertEquals(64L, mockFile0.length());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertNull(mockFile0.getParent());
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.isFile());
      assertTrue(mockFile0.canRead());
      assertEquals("86*>(iZ,:;46(=", mockFile0.getName());
      assertTrue(mockFile0.canWrite());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertFalse(jarArchiveEntry0.isDirectory());
      assertEquals(8, jarArchiveEntry0.getMethod());
      assertFalse(jarArchiveEntry0.isUnixSymlink());
      assertEquals((-1L), jarArchiveEntry0.getCompressedSize());
      assertEquals(0, jarArchiveEntry0.getInternalAttributes());
      assertEquals(4294967296L, jarArchiveEntry0.getSize());
      assertNull(jarArchiveEntry0.getComment());
      assertEquals((-1L), jarArchiveEntry0.getCrc());
      assertFalse(jarArchiveEntry0.isStreamContiguous());
      assertEquals("86*>(iZ,:;46(=", jarArchiveEntry0.getName());
      assertEquals(0L, jarArchiveEntry0.getExternalAttributes());
      assertEquals((-1L), jarArchiveEntry0.getDataOffset());
      assertEquals("86*>(iZ,:;46(=", jarArchiveEntry0.toString());
      assertEquals(0, jarArchiveEntry0.getRawFlag());
      assertEquals(0, jarArchiveEntry0.getPlatform());
      assertEquals(0, jarArchiveEntry0.getUnixMode());
      assertEquals(0, jarArchiveEntry0.getVersionMadeBy());
      assertEquals(0, jarArchiveEntry0.getVersionRequired());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertFalse(zipArchiveOutputStream0.isSeekable());
      assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(mockFile0);
      assertNotNull(mockFileInputStream0);
      
      ZipArchiveOutputStream zipArchiveOutputStream1 = new ZipArchiveOutputStream(zipArchiveOutputStream0);
      assertFalse(zipArchiveOutputStream1.equals((Object)zipArchiveOutputStream0));
      assertEquals("86*>(iZ,:;46(=", mockFile0.toString());
      assertEquals(64L, mockFile0.length());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertNull(mockFile0.getParent());
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.isFile());
      assertTrue(mockFile0.canRead());
      assertEquals("86*>(iZ,:;46(=", mockFile0.getName());
      assertTrue(mockFile0.canWrite());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertFalse(zipArchiveOutputStream0.isSeekable());
      assertEquals("UTF8", zipArchiveOutputStream1.getEncoding());
      assertFalse(zipArchiveOutputStream1.isSeekable());
      assertEquals(0L, zipArchiveOutputStream1.getBytesWritten());
      assertEquals(0, zipArchiveOutputStream1.getCount());
      assertNotNull(zipArchiveOutputStream1);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      
      zipArchiveOutputStream1.addRawArchiveEntry(jarArchiveEntry0, mockFileInputStream0);
      assertFalse(zipArchiveOutputStream0.equals((Object)zipArchiveOutputStream1));
      assertFalse(zipArchiveOutputStream1.equals((Object)zipArchiveOutputStream0));
      assertEquals("86*>(iZ,:;46(=", mockFile0.toString());
      assertEquals(64L, mockFile0.length());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertNull(mockFile0.getParent());
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.isFile());
      assertTrue(mockFile0.canRead());
      assertEquals("86*>(iZ,:;46(=", mockFile0.getName());
      assertTrue(mockFile0.canWrite());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertFalse(jarArchiveEntry0.isDirectory());
      assertEquals(8, jarArchiveEntry0.getMethod());
      assertFalse(jarArchiveEntry0.isUnixSymlink());
      assertEquals((-1L), jarArchiveEntry0.getCompressedSize());
      assertEquals(0, jarArchiveEntry0.getInternalAttributes());
      assertEquals(4294967296L, jarArchiveEntry0.getSize());
      assertNull(jarArchiveEntry0.getComment());
      assertEquals((-1L), jarArchiveEntry0.getCrc());
      assertFalse(jarArchiveEntry0.isStreamContiguous());
      assertEquals("86*>(iZ,:;46(=", jarArchiveEntry0.getName());
      assertEquals(0L, jarArchiveEntry0.getExternalAttributes());
      assertEquals((-1L), jarArchiveEntry0.getDataOffset());
      assertEquals("86*>(iZ,:;46(=", jarArchiveEntry0.toString());
      assertEquals(0, jarArchiveEntry0.getRawFlag());
      assertEquals(0, jarArchiveEntry0.getPlatform());
      assertEquals(0, jarArchiveEntry0.getUnixMode());
      assertEquals(0, jarArchiveEntry0.getVersionMadeBy());
      assertEquals(0, jarArchiveEntry0.getVersionRequired());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertFalse(zipArchiveOutputStream0.isSeekable());
      assertEquals((-2), mockFileInputStream0.available());
      assertEquals("UTF8", zipArchiveOutputStream1.getEncoding());
      assertFalse(zipArchiveOutputStream1.isSeekable());
      assertEquals(64L, zipArchiveOutputStream1.getBytesWritten());
      assertEquals(64, zipArchiveOutputStream1.getCount());
      assertNotSame(zipArchiveOutputStream0, zipArchiveOutputStream1);
      assertNotSame(zipArchiveOutputStream1, zipArchiveOutputStream0);
      assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      
      zipArchiveOutputStream1.putArchiveEntry(jarArchiveEntry0);
      assertFalse(zipArchiveOutputStream0.equals((Object)zipArchiveOutputStream1));
      assertFalse(zipArchiveOutputStream1.equals((Object)zipArchiveOutputStream0));
      assertEquals("86*>(iZ,:;46(=", mockFile0.toString());
      assertEquals(64L, mockFile0.length());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertNull(mockFile0.getParent());
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.isFile());
      assertTrue(mockFile0.canRead());
      assertEquals("86*>(iZ,:;46(=", mockFile0.getName());
      assertTrue(mockFile0.canWrite());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertFalse(jarArchiveEntry0.isDirectory());
      assertEquals(8, jarArchiveEntry0.getMethod());
      assertFalse(jarArchiveEntry0.isUnixSymlink());
      assertEquals((-1L), jarArchiveEntry0.getCompressedSize());
      assertEquals(0, jarArchiveEntry0.getInternalAttributes());
      assertEquals(4294967296L, jarArchiveEntry0.getSize());
      assertNull(jarArchiveEntry0.getComment());
      assertEquals((-1L), jarArchiveEntry0.getCrc());
      assertFalse(jarArchiveEntry0.isStreamContiguous());
      assertEquals("86*>(iZ,:;46(=", jarArchiveEntry0.getName());
      assertEquals(0L, jarArchiveEntry0.getExternalAttributes());
      assertEquals((-1L), jarArchiveEntry0.getDataOffset());
      assertEquals("86*>(iZ,:;46(=", jarArchiveEntry0.toString());
      assertEquals(0, jarArchiveEntry0.getRawFlag());
      assertEquals(0, jarArchiveEntry0.getPlatform());
      assertEquals(0, jarArchiveEntry0.getUnixMode());
      assertEquals(0, jarArchiveEntry0.getVersionMadeBy());
      assertEquals(0, jarArchiveEntry0.getVersionRequired());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertFalse(zipArchiveOutputStream0.isSeekable());
      assertEquals("UTF8", zipArchiveOutputStream1.getEncoding());
      assertFalse(zipArchiveOutputStream1.isSeekable());
      assertEquals(64L, zipArchiveOutputStream1.getBytesWritten());
      assertEquals(64, zipArchiveOutputStream1.getCount());
      assertNotSame(zipArchiveOutputStream0, zipArchiveOutputStream1);
      assertNotSame(zipArchiveOutputStream1, zipArchiveOutputStream0);
      assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      
      System.setCurrentTimeMillis(3);
      zipArchiveOutputStream1.writeCentralDirectoryEnd();
      assertFalse(zipArchiveOutputStream0.equals((Object)zipArchiveOutputStream1));
      assertFalse(zipArchiveOutputStream1.equals((Object)zipArchiveOutputStream0));
      assertEquals("86*>(iZ,:;46(=", mockFile0.toString());
      assertEquals(64L, mockFile0.length());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertNull(mockFile0.getParent());
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.isFile());
      assertTrue(mockFile0.canRead());
      assertEquals("86*>(iZ,:;46(=", mockFile0.getName());
      assertTrue(mockFile0.canWrite());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertFalse(zipArchiveOutputStream0.isSeekable());
      assertEquals("UTF8", zipArchiveOutputStream1.getEncoding());
      assertFalse(zipArchiveOutputStream1.isSeekable());
      assertEquals(64L, zipArchiveOutputStream1.getBytesWritten());
      assertEquals(64, zipArchiveOutputStream1.getCount());
      assertNotSame(zipArchiveOutputStream0, zipArchiveOutputStream1);
      assertNotSame(zipArchiveOutputStream1, zipArchiveOutputStream0);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      File file0 = MockFile.createTempFile("not ecodable", "not ecodable");
      assertFalse(file0.isDirectory());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals("/tmp/not ecodable0not ecodable", file0.toString());
      assertEquals(0L, file0.length());
      assertEquals(0L, file0.getFreeSpace());
      assertTrue(file0.canExecute());
      assertTrue(file0.isFile());
      assertTrue(file0.isAbsolute());
      assertEquals("/tmp", file0.getParent());
      assertTrue(file0.canRead());
      assertTrue(file0.canWrite());
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isHidden());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals("not ecodable0not ecodable", file0.getName());
      assertTrue(file0.exists());
      assertNotNull(file0);
      
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(file0);
      assertFalse(file0.isDirectory());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals("/tmp/not ecodable0not ecodable", file0.toString());
      assertEquals(0L, file0.length());
      assertEquals(0L, file0.getFreeSpace());
      assertTrue(file0.canExecute());
      assertTrue(file0.isFile());
      assertTrue(file0.isAbsolute());
      assertEquals("/tmp", file0.getParent());
      assertTrue(file0.canRead());
      assertTrue(file0.canWrite());
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isHidden());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals("not ecodable0not ecodable", file0.getName());
      assertTrue(file0.exists());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertTrue(zipArchiveOutputStream0.isSeekable());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertNotNull(zipArchiveOutputStream0);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      
      ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
      assertEquals(0, zipArchiveEntry0.getVersionRequired());
      assertEquals((-1L), zipArchiveEntry0.getCrc());
      assertEquals("", zipArchiveEntry0.toString());
      assertFalse(zipArchiveEntry0.isDirectory());
      assertEquals(0, zipArchiveEntry0.getRawFlag());
      assertEquals(0, zipArchiveEntry0.getUnixMode());
      assertEquals((-1L), zipArchiveEntry0.getDataOffset());
      assertEquals(0, zipArchiveEntry0.getVersionMadeBy());
      assertFalse(zipArchiveEntry0.isUnixSymlink());
      assertEquals(0, zipArchiveEntry0.getInternalAttributes());
      assertNull(zipArchiveEntry0.getComment());
      assertEquals((-1), zipArchiveEntry0.getMethod());
      assertEquals(0, zipArchiveEntry0.getPlatform());
      assertFalse(zipArchiveEntry0.isStreamContiguous());
      assertEquals((-1L), zipArchiveEntry0.getSize());
      assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
      assertEquals((-1L), zipArchiveEntry0.getCompressedSize());
      assertEquals("", zipArchiveEntry0.getName());
      assertNotNull(zipArchiveEntry0);
      assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      
      zipArchiveEntry0.setCompressedSize(4294967300L);
      assertEquals(0, zipArchiveEntry0.getVersionRequired());
      assertEquals((-1L), zipArchiveEntry0.getCrc());
      assertEquals("", zipArchiveEntry0.toString());
      assertFalse(zipArchiveEntry0.isDirectory());
      assertEquals(4294967300L, zipArchiveEntry0.getCompressedSize());
      assertEquals(0, zipArchiveEntry0.getRawFlag());
      assertEquals(0, zipArchiveEntry0.getUnixMode());
      assertEquals((-1L), zipArchiveEntry0.getDataOffset());
      assertEquals(0, zipArchiveEntry0.getVersionMadeBy());
      assertFalse(zipArchiveEntry0.isUnixSymlink());
      assertEquals(0, zipArchiveEntry0.getInternalAttributes());
      assertNull(zipArchiveEntry0.getComment());
      assertEquals((-1), zipArchiveEntry0.getMethod());
      assertEquals(0, zipArchiveEntry0.getPlatform());
      assertFalse(zipArchiveEntry0.isStreamContiguous());
      assertEquals((-1L), zipArchiveEntry0.getSize());
      assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
      assertEquals("", zipArchiveEntry0.getName());
      assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      
      zipArchiveEntry0.setSize(2048);
      assertEquals(0, zipArchiveEntry0.getVersionRequired());
      assertEquals((-1L), zipArchiveEntry0.getCrc());
      assertEquals("", zipArchiveEntry0.toString());
      assertFalse(zipArchiveEntry0.isDirectory());
      assertEquals(4294967300L, zipArchiveEntry0.getCompressedSize());
      assertEquals(0, zipArchiveEntry0.getRawFlag());
      assertEquals(0, zipArchiveEntry0.getUnixMode());
      assertEquals((-1L), zipArchiveEntry0.getDataOffset());
      assertEquals(0, zipArchiveEntry0.getVersionMadeBy());
      assertFalse(zipArchiveEntry0.isUnixSymlink());
      assertEquals(0, zipArchiveEntry0.getInternalAttributes());
      assertNull(zipArchiveEntry0.getComment());
      assertEquals((-1), zipArchiveEntry0.getMethod());
      assertEquals(0, zipArchiveEntry0.getPlatform());
      assertFalse(zipArchiveEntry0.isStreamContiguous());
      assertEquals(2048L, zipArchiveEntry0.getSize());
      assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
      assertEquals("", zipArchiveEntry0.getName());
      assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      
      zipArchiveOutputStream0.putArchiveEntry(zipArchiveEntry0);
      assertFalse(file0.isDirectory());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals("/tmp/not ecodable0not ecodable", file0.toString());
      assertEquals(0L, file0.length());
      assertEquals(0L, file0.getFreeSpace());
      assertTrue(file0.canExecute());
      assertTrue(file0.isFile());
      assertTrue(file0.isAbsolute());
      assertEquals("/tmp", file0.getParent());
      assertTrue(file0.canRead());
      assertTrue(file0.canWrite());
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isHidden());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals("not ecodable0not ecodable", file0.getName());
      assertTrue(file0.exists());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertTrue(zipArchiveOutputStream0.isSeekable());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertEquals(0, zipArchiveEntry0.getVersionRequired());
      assertEquals((-1L), zipArchiveEntry0.getCrc());
      assertEquals("", zipArchiveEntry0.toString());
      assertFalse(zipArchiveEntry0.isDirectory());
      assertEquals(4294967300L, zipArchiveEntry0.getCompressedSize());
      assertEquals(0, zipArchiveEntry0.getRawFlag());
      assertEquals(0, zipArchiveEntry0.getUnixMode());
      assertEquals((-1L), zipArchiveEntry0.getDataOffset());
      assertEquals(0, zipArchiveEntry0.getVersionMadeBy());
      assertFalse(zipArchiveEntry0.isUnixSymlink());
      assertEquals(0, zipArchiveEntry0.getInternalAttributes());
      assertNull(zipArchiveEntry0.getComment());
      assertEquals(0, zipArchiveEntry0.getPlatform());
      assertFalse(zipArchiveEntry0.isStreamContiguous());
      assertEquals(2048L, zipArchiveEntry0.getSize());
      assertEquals(8, zipArchiveEntry0.getMethod());
      assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
      assertEquals("", zipArchiveEntry0.getName());
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      
      zipArchiveOutputStream0.writeDataDescriptor(zipArchiveEntry0);
      assertFalse(file0.isDirectory());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals("/tmp/not ecodable0not ecodable", file0.toString());
      assertEquals(0L, file0.length());
      assertEquals(0L, file0.getFreeSpace());
      assertTrue(file0.canExecute());
      assertTrue(file0.isFile());
      assertTrue(file0.isAbsolute());
      assertEquals("/tmp", file0.getParent());
      assertTrue(file0.canRead());
      assertTrue(file0.canWrite());
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isHidden());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals("not ecodable0not ecodable", file0.getName());
      assertTrue(file0.exists());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertTrue(zipArchiveOutputStream0.isSeekable());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertEquals(0, zipArchiveEntry0.getVersionRequired());
      assertEquals((-1L), zipArchiveEntry0.getCrc());
      assertEquals("", zipArchiveEntry0.toString());
      assertFalse(zipArchiveEntry0.isDirectory());
      assertEquals(4294967300L, zipArchiveEntry0.getCompressedSize());
      assertEquals(0, zipArchiveEntry0.getRawFlag());
      assertEquals(0, zipArchiveEntry0.getUnixMode());
      assertEquals((-1L), zipArchiveEntry0.getDataOffset());
      assertEquals(0, zipArchiveEntry0.getVersionMadeBy());
      assertFalse(zipArchiveEntry0.isUnixSymlink());
      assertEquals(0, zipArchiveEntry0.getInternalAttributes());
      assertNull(zipArchiveEntry0.getComment());
      assertEquals(0, zipArchiveEntry0.getPlatform());
      assertFalse(zipArchiveEntry0.isStreamContiguous());
      assertEquals(2048L, zipArchiveEntry0.getSize());
      assertEquals(8, zipArchiveEntry0.getMethod());
      assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
      assertEquals("", zipArchiveEntry0.getName());
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      
      JarArchiveEntry jarArchiveEntry0 = new JarArchiveEntry(zipArchiveEntry0);
      assertEquals(0, zipArchiveEntry0.getVersionRequired());
      assertEquals((-1L), zipArchiveEntry0.getCrc());
      assertEquals("", zipArchiveEntry0.toString());
      assertFalse(zipArchiveEntry0.isDirectory());
      assertEquals(4294967300L, zipArchiveEntry0.getCompressedSize());
      assertEquals(0, zipArchiveEntry0.getRawFlag());
      assertEquals(0, zipArchiveEntry0.getUnixMode());
      assertEquals((-1L), zipArchiveEntry0.getDataOffset());
      assertEquals(0, zipArchiveEntry0.getVersionMadeBy());
      assertFalse(zipArchiveEntry0.isUnixSymlink());
      assertEquals(0, zipArchiveEntry0.getInternalAttributes());
      assertNull(zipArchiveEntry0.getComment());
      assertEquals(0, zipArchiveEntry0.getPlatform());
      assertFalse(zipArchiveEntry0.isStreamContiguous());
      assertEquals(2048L, zipArchiveEntry0.getSize());
      assertEquals(8, zipArchiveEntry0.getMethod());
      assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
      assertEquals("", zipArchiveEntry0.getName());
      assertEquals(8, jarArchiveEntry0.getMethod());
      assertFalse(jarArchiveEntry0.isUnixSymlink());
      assertEquals(0, jarArchiveEntry0.getInternalAttributes());
      assertEquals("", jarArchiveEntry0.getName());
      assertNull(jarArchiveEntry0.getComment());
      assertEquals((-1L), jarArchiveEntry0.getCrc());
      assertEquals("", jarArchiveEntry0.toString());
      assertFalse(jarArchiveEntry0.isDirectory());
      assertEquals(4294967300L, jarArchiveEntry0.getCompressedSize());
      assertFalse(jarArchiveEntry0.isStreamContiguous());
      assertEquals(2048L, jarArchiveEntry0.getSize());
      assertEquals(0, jarArchiveEntry0.getUnixMode());
      assertEquals(0, jarArchiveEntry0.getVersionMadeBy());
      assertEquals((-1L), jarArchiveEntry0.getDataOffset());
      assertEquals(0L, jarArchiveEntry0.getExternalAttributes());
      assertEquals(0, jarArchiveEntry0.getVersionRequired());
      assertEquals(0, jarArchiveEntry0.getPlatform());
      assertEquals(0, jarArchiveEntry0.getRawFlag());
      assertNotNull(jarArchiveEntry0);
      assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(file0);
      assertNotNull(mockFileInputStream0);
      
      zipArchiveOutputStream0.addRawArchiveEntry(jarArchiveEntry0, mockFileInputStream0);
      assertFalse(file0.isDirectory());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals("/tmp/not ecodable0not ecodable", file0.toString());
      assertEquals(0L, file0.length());
      assertEquals(0L, file0.getFreeSpace());
      assertTrue(file0.canExecute());
      assertTrue(file0.isFile());
      assertTrue(file0.isAbsolute());
      assertEquals("/tmp", file0.getParent());
      assertTrue(file0.canRead());
      assertTrue(file0.canWrite());
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isHidden());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals("not ecodable0not ecodable", file0.getName());
      assertTrue(file0.exists());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertTrue(zipArchiveOutputStream0.isSeekable());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertEquals(0, zipArchiveEntry0.getVersionRequired());
      assertEquals(2L, zipArchiveEntry0.getCompressedSize());
      assertEquals(0L, zipArchiveEntry0.getCrc());
      assertEquals("", zipArchiveEntry0.toString());
      assertFalse(zipArchiveEntry0.isDirectory());
      assertEquals(0, zipArchiveEntry0.getRawFlag());
      assertEquals(0, zipArchiveEntry0.getUnixMode());
      assertEquals((-1L), zipArchiveEntry0.getDataOffset());
      assertEquals(0, zipArchiveEntry0.getVersionMadeBy());
      assertFalse(zipArchiveEntry0.isUnixSymlink());
      assertEquals(0, zipArchiveEntry0.getInternalAttributes());
      assertNull(zipArchiveEntry0.getComment());
      assertEquals(0, zipArchiveEntry0.getPlatform());
      assertFalse(zipArchiveEntry0.isStreamContiguous());
      assertEquals(0L, zipArchiveEntry0.getSize());
      assertEquals(8, zipArchiveEntry0.getMethod());
      assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
      assertEquals("", zipArchiveEntry0.getName());
      assertEquals(8, jarArchiveEntry0.getMethod());
      assertFalse(jarArchiveEntry0.isUnixSymlink());
      assertEquals(0, jarArchiveEntry0.getInternalAttributes());
      assertEquals("", jarArchiveEntry0.getName());
      assertNull(jarArchiveEntry0.getComment());
      assertEquals((-1L), jarArchiveEntry0.getCrc());
      assertEquals("", jarArchiveEntry0.toString());
      assertFalse(jarArchiveEntry0.isDirectory());
      assertEquals(4294967300L, jarArchiveEntry0.getCompressedSize());
      assertFalse(jarArchiveEntry0.isStreamContiguous());
      assertEquals(2048L, jarArchiveEntry0.getSize());
      assertEquals(0, jarArchiveEntry0.getUnixMode());
      assertEquals(0, jarArchiveEntry0.getVersionMadeBy());
      assertEquals((-1L), jarArchiveEntry0.getDataOffset());
      assertEquals(0L, jarArchiveEntry0.getExternalAttributes());
      assertEquals(0, jarArchiveEntry0.getVersionRequired());
      assertEquals(0, jarArchiveEntry0.getPlatform());
      assertEquals(0, jarArchiveEntry0.getRawFlag());
      assertEquals((-1), mockFileInputStream0.available());
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      
      zipArchiveOutputStream0.close();
      assertFalse(file0.isDirectory());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals("/tmp/not ecodable0not ecodable", file0.toString());
      assertEquals(0L, file0.length());
      assertEquals(0L, file0.getFreeSpace());
      assertTrue(file0.canExecute());
      assertTrue(file0.isFile());
      assertTrue(file0.isAbsolute());
      assertEquals("/tmp", file0.getParent());
      assertTrue(file0.canRead());
      assertTrue(file0.canWrite());
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isHidden());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals("not ecodable0not ecodable", file0.getName());
      assertTrue(file0.exists());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertTrue(zipArchiveOutputStream0.isSeekable());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(0, ZipArchiveOutputStream.STORED);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      File file0 = MockFile.createTempFile("not ecodable", "not ecodable");
      assertTrue(file0.isAbsolute());
      assertTrue(file0.isFile());
      assertTrue(file0.canRead());
      assertTrue(file0.canWrite());
      assertEquals(0L, file0.length());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(0L, file0.getTotalSpace());
      assertTrue(file0.canExecute());
      assertEquals("/tmp/not ecodable0not ecodable", file0.toString());
      assertFalse(file0.isDirectory());
      assertTrue(file0.exists());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals("not ecodable0not ecodable", file0.getName());
      assertFalse(file0.isHidden());
      assertEquals("/tmp", file0.getParent());
      assertNotNull(file0);
      
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(file0);
      assertTrue(file0.isAbsolute());
      assertTrue(file0.isFile());
      assertTrue(file0.canRead());
      assertTrue(file0.canWrite());
      assertEquals(0L, file0.length());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(0L, file0.getTotalSpace());
      assertTrue(file0.canExecute());
      assertEquals("/tmp/not ecodable0not ecodable", file0.toString());
      assertFalse(file0.isDirectory());
      assertTrue(file0.exists());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals("not ecodable0not ecodable", file0.getName());
      assertFalse(file0.isHidden());
      assertEquals("/tmp", file0.getParent());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertTrue(zipArchiveOutputStream0.isSeekable());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertNotNull(zipArchiveOutputStream0);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      
      ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
      assertEquals((-1), zipArchiveEntry0.getMethod());
      assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
      assertNull(zipArchiveEntry0.getComment());
      assertEquals((-1L), zipArchiveEntry0.getSize());
      assertEquals(0, zipArchiveEntry0.getPlatform());
      assertFalse(zipArchiveEntry0.isStreamContiguous());
      assertEquals(0, zipArchiveEntry0.getUnixMode());
      assertEquals(0, zipArchiveEntry0.getVersionMadeBy());
      assertEquals((-1L), zipArchiveEntry0.getDataOffset());
      assertFalse(zipArchiveEntry0.isUnixSymlink());
      assertEquals(0, zipArchiveEntry0.getInternalAttributes());
      assertEquals((-1L), zipArchiveEntry0.getCompressedSize());
      assertEquals(0, zipArchiveEntry0.getVersionRequired());
      assertEquals("", zipArchiveEntry0.toString());
      assertFalse(zipArchiveEntry0.isDirectory());
      assertEquals((-1L), zipArchiveEntry0.getCrc());
      assertEquals(0, zipArchiveEntry0.getRawFlag());
      assertEquals("", zipArchiveEntry0.getName());
      assertNotNull(zipArchiveEntry0);
      assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      
      zipArchiveEntry0.setCompressedSize(4294967300L);
      assertEquals((-1), zipArchiveEntry0.getMethod());
      assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
      assertNull(zipArchiveEntry0.getComment());
      assertEquals((-1L), zipArchiveEntry0.getSize());
      assertEquals(0, zipArchiveEntry0.getPlatform());
      assertFalse(zipArchiveEntry0.isStreamContiguous());
      assertEquals(0, zipArchiveEntry0.getUnixMode());
      assertEquals(0, zipArchiveEntry0.getVersionMadeBy());
      assertEquals((-1L), zipArchiveEntry0.getDataOffset());
      assertFalse(zipArchiveEntry0.isUnixSymlink());
      assertEquals(0, zipArchiveEntry0.getInternalAttributes());
      assertEquals(0, zipArchiveEntry0.getVersionRequired());
      assertEquals("", zipArchiveEntry0.toString());
      assertFalse(zipArchiveEntry0.isDirectory());
      assertEquals(4294967300L, zipArchiveEntry0.getCompressedSize());
      assertEquals((-1L), zipArchiveEntry0.getCrc());
      assertEquals(0, zipArchiveEntry0.getRawFlag());
      assertEquals("", zipArchiveEntry0.getName());
      assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      
      zipArchiveOutputStream0.putArchiveEntry(zipArchiveEntry0);
      assertTrue(file0.isAbsolute());
      assertTrue(file0.isFile());
      assertTrue(file0.canRead());
      assertTrue(file0.canWrite());
      assertEquals(0L, file0.length());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(0L, file0.getTotalSpace());
      assertTrue(file0.canExecute());
      assertEquals("/tmp/not ecodable0not ecodable", file0.toString());
      assertFalse(file0.isDirectory());
      assertTrue(file0.exists());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals("not ecodable0not ecodable", file0.getName());
      assertFalse(file0.isHidden());
      assertEquals("/tmp", file0.getParent());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertTrue(zipArchiveOutputStream0.isSeekable());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
      assertNull(zipArchiveEntry0.getComment());
      assertEquals((-1L), zipArchiveEntry0.getSize());
      assertEquals(0, zipArchiveEntry0.getPlatform());
      assertFalse(zipArchiveEntry0.isStreamContiguous());
      assertEquals(0, zipArchiveEntry0.getUnixMode());
      assertEquals(0, zipArchiveEntry0.getVersionMadeBy());
      assertEquals((-1L), zipArchiveEntry0.getDataOffset());
      assertFalse(zipArchiveEntry0.isUnixSymlink());
      assertEquals(0, zipArchiveEntry0.getInternalAttributes());
      assertEquals(0, zipArchiveEntry0.getVersionRequired());
      assertEquals("", zipArchiveEntry0.toString());
      assertFalse(zipArchiveEntry0.isDirectory());
      assertEquals(4294967300L, zipArchiveEntry0.getCompressedSize());
      assertEquals(8, zipArchiveEntry0.getMethod());
      assertEquals((-1L), zipArchiveEntry0.getCrc());
      assertEquals(0, zipArchiveEntry0.getRawFlag());
      assertEquals("", zipArchiveEntry0.getName());
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      
      zipArchiveOutputStream0.putArchiveEntry(zipArchiveEntry0);
      assertTrue(file0.isAbsolute());
      assertTrue(file0.isFile());
      assertTrue(file0.canRead());
      assertTrue(file0.canWrite());
      assertEquals(0L, file0.length());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(0L, file0.getTotalSpace());
      assertTrue(file0.canExecute());
      assertEquals("/tmp/not ecodable0not ecodable", file0.toString());
      assertFalse(file0.isDirectory());
      assertTrue(file0.exists());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals("not ecodable0not ecodable", file0.getName());
      assertFalse(file0.isHidden());
      assertEquals("/tmp", file0.getParent());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertTrue(zipArchiveOutputStream0.isSeekable());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
      assertNull(zipArchiveEntry0.getComment());
      assertEquals(0L, zipArchiveEntry0.getSize());
      assertEquals(0, zipArchiveEntry0.getPlatform());
      assertFalse(zipArchiveEntry0.isStreamContiguous());
      assertEquals(0, zipArchiveEntry0.getUnixMode());
      assertEquals(0, zipArchiveEntry0.getVersionMadeBy());
      assertEquals((-1L), zipArchiveEntry0.getDataOffset());
      assertFalse(zipArchiveEntry0.isUnixSymlink());
      assertEquals(0, zipArchiveEntry0.getInternalAttributes());
      assertEquals(0, zipArchiveEntry0.getVersionRequired());
      assertEquals(2L, zipArchiveEntry0.getCompressedSize());
      assertEquals("", zipArchiveEntry0.toString());
      assertFalse(zipArchiveEntry0.isDirectory());
      assertEquals(8, zipArchiveEntry0.getMethod());
      assertEquals(0L, zipArchiveEntry0.getCrc());
      assertEquals(0, zipArchiveEntry0.getRawFlag());
      assertEquals("", zipArchiveEntry0.getName());
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      
      zipArchiveOutputStream0.putArchiveEntry(zipArchiveEntry0);
      assertTrue(file0.isAbsolute());
      assertTrue(file0.isFile());
      assertTrue(file0.canRead());
      assertTrue(file0.canWrite());
      assertEquals(0L, file0.length());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(0L, file0.getTotalSpace());
      assertTrue(file0.canExecute());
      assertEquals("/tmp/not ecodable0not ecodable", file0.toString());
      assertFalse(file0.isDirectory());
      assertTrue(file0.exists());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals("not ecodable0not ecodable", file0.getName());
      assertFalse(file0.isHidden());
      assertEquals("/tmp", file0.getParent());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertTrue(zipArchiveOutputStream0.isSeekable());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
      assertNull(zipArchiveEntry0.getComment());
      assertEquals(0L, zipArchiveEntry0.getSize());
      assertEquals(0, zipArchiveEntry0.getPlatform());
      assertFalse(zipArchiveEntry0.isStreamContiguous());
      assertEquals(0, zipArchiveEntry0.getUnixMode());
      assertEquals(0, zipArchiveEntry0.getVersionMadeBy());
      assertEquals((-1L), zipArchiveEntry0.getDataOffset());
      assertFalse(zipArchiveEntry0.isUnixSymlink());
      assertEquals(0, zipArchiveEntry0.getInternalAttributes());
      assertEquals(0, zipArchiveEntry0.getVersionRequired());
      assertEquals(2L, zipArchiveEntry0.getCompressedSize());
      assertEquals("", zipArchiveEntry0.toString());
      assertFalse(zipArchiveEntry0.isDirectory());
      assertEquals(8, zipArchiveEntry0.getMethod());
      assertEquals(0L, zipArchiveEntry0.getCrc());
      assertEquals(0, zipArchiveEntry0.getRawFlag());
      assertEquals("", zipArchiveEntry0.getName());
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      
      ZipArchiveOutputStream zipArchiveOutputStream1 = new ZipArchiveOutputStream(file0);
      assertFalse(zipArchiveOutputStream1.equals((Object)zipArchiveOutputStream0));
      assertTrue(file0.isAbsolute());
      assertTrue(file0.isFile());
      assertTrue(file0.canRead());
      assertTrue(file0.canWrite());
      assertEquals(0L, file0.length());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(0L, file0.getTotalSpace());
      assertTrue(file0.canExecute());
      assertEquals("/tmp/not ecodable0not ecodable", file0.toString());
      assertFalse(file0.isDirectory());
      assertTrue(file0.exists());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals("not ecodable0not ecodable", file0.getName());
      assertFalse(file0.isHidden());
      assertEquals("/tmp", file0.getParent());
      assertEquals("UTF8", zipArchiveOutputStream1.getEncoding());
      assertTrue(zipArchiveOutputStream1.isSeekable());
      assertEquals(0, zipArchiveOutputStream1.getCount());
      assertEquals(0L, zipArchiveOutputStream1.getBytesWritten());
      assertNotNull(zipArchiveOutputStream1);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      
      Zip64Mode zip64Mode0 = Zip64Mode.Always;
      boolean boolean0 = file0.setReadable(false);
      assertTrue(file0.isAbsolute());
      assertTrue(file0.isFile());
      assertTrue(file0.canWrite());
      assertEquals(0L, file0.length());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(0L, file0.getTotalSpace());
      assertTrue(file0.canExecute());
      assertEquals("/tmp/not ecodable0not ecodable", file0.toString());
      assertFalse(file0.isDirectory());
      assertTrue(file0.exists());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals("not ecodable0not ecodable", file0.getName());
      assertFalse(file0.isHidden());
      assertEquals("/tmp", file0.getParent());
      assertFalse(file0.canRead());
      assertTrue(boolean0);
      
      zipArchiveOutputStream0.setUseZip64(zip64Mode0);
      assertFalse(zipArchiveOutputStream0.equals((Object)zipArchiveOutputStream1));
      assertTrue(file0.isAbsolute());
      assertTrue(file0.isFile());
      assertTrue(file0.canWrite());
      assertEquals(0L, file0.length());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(0L, file0.getTotalSpace());
      assertTrue(file0.canExecute());
      assertEquals("/tmp/not ecodable0not ecodable", file0.toString());
      assertFalse(file0.isDirectory());
      assertTrue(file0.exists());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals("not ecodable0not ecodable", file0.getName());
      assertFalse(file0.isHidden());
      assertEquals("/tmp", file0.getParent());
      assertFalse(file0.canRead());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertTrue(zipArchiveOutputStream0.isSeekable());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertNotSame(zipArchiveOutputStream0, zipArchiveOutputStream1);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      
      zipArchiveOutputStream1.putArchiveEntry(zipArchiveEntry0);
      assertFalse(zipArchiveOutputStream1.equals((Object)zipArchiveOutputStream0));
      assertTrue(file0.isAbsolute());
      assertTrue(file0.isFile());
      assertTrue(file0.canWrite());
      assertEquals(0L, file0.length());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(0L, file0.getTotalSpace());
      assertTrue(file0.canExecute());
      assertEquals("/tmp/not ecodable0not ecodable", file0.toString());
      assertFalse(file0.isDirectory());
      assertTrue(file0.exists());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals("not ecodable0not ecodable", file0.getName());
      assertFalse(file0.isHidden());
      assertEquals("/tmp", file0.getParent());
      assertFalse(file0.canRead());
      assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
      assertNull(zipArchiveEntry0.getComment());
      assertEquals(0L, zipArchiveEntry0.getSize());
      assertEquals(0, zipArchiveEntry0.getPlatform());
      assertFalse(zipArchiveEntry0.isStreamContiguous());
      assertEquals(0, zipArchiveEntry0.getUnixMode());
      assertEquals(0, zipArchiveEntry0.getVersionMadeBy());
      assertEquals((-1L), zipArchiveEntry0.getDataOffset());
      assertFalse(zipArchiveEntry0.isUnixSymlink());
      assertEquals(0, zipArchiveEntry0.getInternalAttributes());
      assertEquals(0, zipArchiveEntry0.getVersionRequired());
      assertEquals(2L, zipArchiveEntry0.getCompressedSize());
      assertEquals("", zipArchiveEntry0.toString());
      assertFalse(zipArchiveEntry0.isDirectory());
      assertEquals(8, zipArchiveEntry0.getMethod());
      assertEquals(0L, zipArchiveEntry0.getCrc());
      assertEquals(0, zipArchiveEntry0.getRawFlag());
      assertEquals("", zipArchiveEntry0.getName());
      assertEquals("UTF8", zipArchiveOutputStream1.getEncoding());
      assertTrue(zipArchiveOutputStream1.isSeekable());
      assertEquals(0, zipArchiveOutputStream1.getCount());
      assertEquals(0L, zipArchiveOutputStream1.getBytesWritten());
      assertNotSame(zipArchiveOutputStream1, zipArchiveOutputStream0);
      assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      
      zipArchiveOutputStream1.putArchiveEntry(zipArchiveEntry0);
      assertFalse(zipArchiveOutputStream1.equals((Object)zipArchiveOutputStream0));
      assertTrue(file0.isAbsolute());
      assertTrue(file0.isFile());
      assertTrue(file0.canWrite());
      assertEquals(0L, file0.length());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(0L, file0.getTotalSpace());
      assertTrue(file0.canExecute());
      assertEquals("/tmp/not ecodable0not ecodable", file0.toString());
      assertFalse(file0.isDirectory());
      assertTrue(file0.exists());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals("not ecodable0not ecodable", file0.getName());
      assertFalse(file0.isHidden());
      assertEquals("/tmp", file0.getParent());
      assertFalse(file0.canRead());
      assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
      assertNull(zipArchiveEntry0.getComment());
      assertEquals(0L, zipArchiveEntry0.getSize());
      assertEquals(0, zipArchiveEntry0.getPlatform());
      assertFalse(zipArchiveEntry0.isStreamContiguous());
      assertEquals(0, zipArchiveEntry0.getUnixMode());
      assertEquals(0, zipArchiveEntry0.getVersionMadeBy());
      assertEquals((-1L), zipArchiveEntry0.getDataOffset());
      assertFalse(zipArchiveEntry0.isUnixSymlink());
      assertEquals(0, zipArchiveEntry0.getInternalAttributes());
      assertEquals(0, zipArchiveEntry0.getVersionRequired());
      assertEquals(2L, zipArchiveEntry0.getCompressedSize());
      assertEquals("", zipArchiveEntry0.toString());
      assertFalse(zipArchiveEntry0.isDirectory());
      assertEquals(8, zipArchiveEntry0.getMethod());
      assertEquals(0L, zipArchiveEntry0.getCrc());
      assertEquals(0, zipArchiveEntry0.getRawFlag());
      assertEquals("", zipArchiveEntry0.getName());
      assertEquals("UTF8", zipArchiveOutputStream1.getEncoding());
      assertTrue(zipArchiveOutputStream1.isSeekable());
      assertEquals(0, zipArchiveOutputStream1.getCount());
      assertEquals(0L, zipArchiveOutputStream1.getBytesWritten());
      assertNotSame(zipArchiveOutputStream1, zipArchiveOutputStream0);
      assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      
      // Undeclared exception!
//      try { 
        zipArchiveOutputStream0.setLevel((-1058));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Invalid compression level: -1058
//         //
//         verifyException("org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream", e);
//      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      MockFile mockFile0 = new MockFile("6*>(iZ,:;46(=", "6*>(iZ,:;46(=");
      assertNotNull(mockFile0);
      
      JarArchiveEntry jarArchiveEntry0 = new JarArchiveEntry("6*>(iZ,:;46(=");
      assertEquals((-1L), jarArchiveEntry0.getSize());
      assertEquals(0, jarArchiveEntry0.getVersionMadeBy());
      assertEquals("6*>(iZ,:;46(=", jarArchiveEntry0.toString());
      assertEquals(0, jarArchiveEntry0.getUnixMode());
      assertEquals((-1L), jarArchiveEntry0.getDataOffset());
      assertEquals(0L, jarArchiveEntry0.getExternalAttributes());
      assertEquals("6*>(iZ,:;46(=", jarArchiveEntry0.getName());
      assertEquals(0, jarArchiveEntry0.getRawFlag());
      assertEquals((-1L), jarArchiveEntry0.getCrc());
      assertNull(jarArchiveEntry0.getComment());
      assertEquals(0, jarArchiveEntry0.getInternalAttributes());
      assertFalse(jarArchiveEntry0.isUnixSymlink());
      assertFalse(jarArchiveEntry0.isDirectory());
      assertEquals(0, jarArchiveEntry0.getPlatform());
      assertFalse(jarArchiveEntry0.isStreamContiguous());
      assertEquals((-1), jarArchiveEntry0.getMethod());
      assertEquals(0, jarArchiveEntry0.getVersionRequired());
      assertEquals((-1L), jarArchiveEntry0.getCompressedSize());
      assertNotNull(jarArchiveEntry0);
      assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(mockFile0);
      assertEquals("/experiment/6*>(iZ,:;46(=", mockFile0.getParent());
      assertEquals("/experiment/6*>(iZ,:;46(=/6*>(iZ,:;46(=", mockFile0.toString());
      assertTrue(mockFile0.exists());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.isFile());
      assertEquals("6*>(iZ,:;46(=", mockFile0.getName());
      assertTrue(mockFile0.isAbsolute());
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.canRead());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.canWrite());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertFalse(zipArchiveOutputStream0.isSeekable());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertNotNull(zipArchiveOutputStream0);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "]hBym;-7M&\")NQ");
      assertFalse(boolean0);
      
      jarArchiveEntry0.setSize(4294967295L);
      assertEquals(0, jarArchiveEntry0.getVersionMadeBy());
      assertEquals("6*>(iZ,:;46(=", jarArchiveEntry0.toString());
      assertEquals(0, jarArchiveEntry0.getUnixMode());
      assertEquals((-1L), jarArchiveEntry0.getDataOffset());
      assertEquals(4294967295L, jarArchiveEntry0.getSize());
      assertEquals(0L, jarArchiveEntry0.getExternalAttributes());
      assertEquals("6*>(iZ,:;46(=", jarArchiveEntry0.getName());
      assertEquals(0, jarArchiveEntry0.getRawFlag());
      assertEquals((-1L), jarArchiveEntry0.getCrc());
      assertNull(jarArchiveEntry0.getComment());
      assertEquals(0, jarArchiveEntry0.getInternalAttributes());
      assertFalse(jarArchiveEntry0.isUnixSymlink());
      assertFalse(jarArchiveEntry0.isDirectory());
      assertEquals(0, jarArchiveEntry0.getPlatform());
      assertFalse(jarArchiveEntry0.isStreamContiguous());
      assertEquals((-1), jarArchiveEntry0.getMethod());
      assertEquals(0, jarArchiveEntry0.getVersionRequired());
      assertEquals((-1L), jarArchiveEntry0.getCompressedSize());
      assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      
      zipArchiveOutputStream0.putArchiveEntry(jarArchiveEntry0);
      assertEquals("/experiment/6*>(iZ,:;46(=", mockFile0.getParent());
      assertEquals("/experiment/6*>(iZ,:;46(=/6*>(iZ,:;46(=", mockFile0.toString());
      assertTrue(mockFile0.exists());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.isFile());
      assertEquals("6*>(iZ,:;46(=", mockFile0.getName());
      assertTrue(mockFile0.isAbsolute());
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.canRead());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(63L, mockFile0.length());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.canWrite());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0, jarArchiveEntry0.getVersionMadeBy());
      assertEquals("6*>(iZ,:;46(=", jarArchiveEntry0.toString());
      assertEquals(0, jarArchiveEntry0.getUnixMode());
      assertEquals((-1L), jarArchiveEntry0.getDataOffset());
      assertEquals(4294967295L, jarArchiveEntry0.getSize());
      assertEquals(0L, jarArchiveEntry0.getExternalAttributes());
      assertEquals("6*>(iZ,:;46(=", jarArchiveEntry0.getName());
      assertEquals(0, jarArchiveEntry0.getRawFlag());
      assertEquals((-1L), jarArchiveEntry0.getCrc());
      assertNull(jarArchiveEntry0.getComment());
      assertEquals(0, jarArchiveEntry0.getInternalAttributes());
      assertFalse(jarArchiveEntry0.isUnixSymlink());
      assertFalse(jarArchiveEntry0.isDirectory());
      assertEquals(8, jarArchiveEntry0.getMethod());
      assertEquals(0, jarArchiveEntry0.getPlatform());
      assertFalse(jarArchiveEntry0.isStreamContiguous());
      assertEquals(0, jarArchiveEntry0.getVersionRequired());
      assertEquals((-1L), jarArchiveEntry0.getCompressedSize());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertFalse(zipArchiveOutputStream0.isSeekable());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      
      zipArchiveOutputStream0.writeCentralFileHeader(jarArchiveEntry0);
      assertEquals("/experiment/6*>(iZ,:;46(=", mockFile0.getParent());
      assertEquals("/experiment/6*>(iZ,:;46(=/6*>(iZ,:;46(=", mockFile0.toString());
      assertTrue(mockFile0.exists());
      assertEquals(142L, mockFile0.length());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.isFile());
      assertEquals("6*>(iZ,:;46(=", mockFile0.getName());
      assertTrue(mockFile0.isAbsolute());
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.canRead());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.canWrite());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0, jarArchiveEntry0.getVersionMadeBy());
      assertEquals("6*>(iZ,:;46(=", jarArchiveEntry0.toString());
      assertEquals(0, jarArchiveEntry0.getUnixMode());
      assertEquals((-1L), jarArchiveEntry0.getDataOffset());
      assertEquals(4294967295L, jarArchiveEntry0.getSize());
      assertEquals(0L, jarArchiveEntry0.getExternalAttributes());
      assertEquals("6*>(iZ,:;46(=", jarArchiveEntry0.getName());
      assertEquals(0, jarArchiveEntry0.getRawFlag());
      assertEquals((-1L), jarArchiveEntry0.getCrc());
      assertNull(jarArchiveEntry0.getComment());
      assertEquals(0, jarArchiveEntry0.getInternalAttributes());
      assertFalse(jarArchiveEntry0.isUnixSymlink());
      assertFalse(jarArchiveEntry0.isDirectory());
      assertEquals(8, jarArchiveEntry0.getMethod());
      assertEquals(0, jarArchiveEntry0.getPlatform());
      assertFalse(jarArchiveEntry0.isStreamContiguous());
      assertEquals(0, jarArchiveEntry0.getVersionRequired());
      assertEquals((-1L), jarArchiveEntry0.getCompressedSize());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertFalse(zipArchiveOutputStream0.isSeekable());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      JarArchiveEntry jarArchiveEntry0 = new JarArchiveEntry("86*>(iZ,:;46(=");
      assertEquals(0, jarArchiveEntry0.getVersionMadeBy());
      assertEquals((-1L), jarArchiveEntry0.getCrc());
      assertEquals(0, jarArchiveEntry0.getRawFlag());
      assertEquals(0, jarArchiveEntry0.getUnixMode());
      assertEquals((-1L), jarArchiveEntry0.getSize());
      assertEquals("86*>(iZ,:;46(=", jarArchiveEntry0.getName());
      assertEquals("86*>(iZ,:;46(=", jarArchiveEntry0.toString());
      assertNull(jarArchiveEntry0.getComment());
      assertEquals(0, jarArchiveEntry0.getInternalAttributes());
      assertFalse(jarArchiveEntry0.isUnixSymlink());
      assertEquals((-1L), jarArchiveEntry0.getDataOffset());
      assertFalse(jarArchiveEntry0.isStreamContiguous());
      assertFalse(jarArchiveEntry0.isDirectory());
      assertEquals(0, jarArchiveEntry0.getPlatform());
      assertEquals(0, jarArchiveEntry0.getVersionRequired());
      assertEquals((-1), jarArchiveEntry0.getMethod());
      assertEquals((-1L), jarArchiveEntry0.getCompressedSize());
      assertEquals(0L, jarArchiveEntry0.getExternalAttributes());
      assertNotNull(jarArchiveEntry0);
      assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      
      MockFile mockFile0 = new MockFile("86*>(iZ,:;46(=", " method doesn'tGsupport options of'type ");
      assertNotNull(mockFile0);
      
      MockFile mockFile1 = new MockFile(mockFile0, "86*>(iZ,:;46(=");
      assertFalse(mockFile1.equals((Object)mockFile0));
      assertNotNull(mockFile1);
      
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(mockFile1);
      assertFalse(mockFile0.equals((Object)mockFile1));
      assertFalse(mockFile1.equals((Object)mockFile0));
      assertTrue(mockFile0.isAbsolute());
      assertEquals("/experiment/86*>(iZ,:;46(=", mockFile0.getParent());
      assertFalse(mockFile0.isFile());
      assertTrue(mockFile0.canExecute());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.exists());
      assertEquals(" method doesn'tGsupport options of'type ", mockFile0.getName());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals("/experiment/86*>(iZ,:;46(=/ method doesn'tGsupport options of'type ", mockFile0.toString());
      assertTrue(mockFile0.canWrite());
      assertEquals("/experiment/86*>(iZ,:;46(=/ method doesn'tGsupport options of'type /86*>(iZ,:;46(=", mockFile1.toString());
      assertEquals(0L, mockFile1.length());
      assertTrue(mockFile1.canWrite());
      assertEquals("86*>(iZ,:;46(=", mockFile1.getName());
      assertFalse(mockFile1.isDirectory());
      assertEquals(0L, mockFile1.getFreeSpace());
      assertTrue(mockFile1.canExecute());
      assertTrue(mockFile1.canRead());
      assertTrue(mockFile1.isAbsolute());
      assertEquals("/experiment/86*>(iZ,:;46(=/ method doesn'tGsupport options of'type ", mockFile1.getParent());
      assertFalse(mockFile1.isHidden());
      assertEquals(0L, mockFile1.getUsableSpace());
      assertEquals(0L, mockFile1.getTotalSpace());
      assertEquals(1392409281320L, mockFile1.lastModified());
      assertTrue(mockFile1.exists());
      assertTrue(mockFile1.isFile());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertFalse(zipArchiveOutputStream0.isSeekable());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertNotNull(zipArchiveOutputStream0);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      
      zipArchiveOutputStream0.setFallbackToUTF8(true);
      assertFalse(mockFile0.equals((Object)mockFile1));
      assertFalse(mockFile1.equals((Object)mockFile0));
      assertTrue(mockFile0.isAbsolute());
      assertEquals("/experiment/86*>(iZ,:;46(=", mockFile0.getParent());
      assertFalse(mockFile0.isFile());
      assertTrue(mockFile0.canExecute());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.exists());
      assertEquals(" method doesn'tGsupport options of'type ", mockFile0.getName());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals("/experiment/86*>(iZ,:;46(=/ method doesn'tGsupport options of'type ", mockFile0.toString());
      assertTrue(mockFile0.canWrite());
      assertEquals("/experiment/86*>(iZ,:;46(=/ method doesn'tGsupport options of'type /86*>(iZ,:;46(=", mockFile1.toString());
      assertEquals(0L, mockFile1.length());
      assertTrue(mockFile1.canWrite());
      assertEquals("86*>(iZ,:;46(=", mockFile1.getName());
      assertFalse(mockFile1.isDirectory());
      assertEquals(0L, mockFile1.getFreeSpace());
      assertTrue(mockFile1.canExecute());
      assertTrue(mockFile1.canRead());
      assertTrue(mockFile1.isAbsolute());
      assertEquals("/experiment/86*>(iZ,:;46(=/ method doesn'tGsupport options of'type ", mockFile1.getParent());
      assertFalse(mockFile1.isHidden());
      assertEquals(0L, mockFile1.getUsableSpace());
      assertEquals(0L, mockFile1.getTotalSpace());
      assertEquals(1392409281320L, mockFile1.lastModified());
      assertTrue(mockFile1.exists());
      assertTrue(mockFile1.isFile());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertFalse(zipArchiveOutputStream0.isSeekable());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertNotSame(mockFile0, mockFile1);
      assertNotSame(mockFile1, mockFile0);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      
      jarArchiveEntry0.setSize(2048);
      assertEquals(0, jarArchiveEntry0.getVersionMadeBy());
      assertEquals((-1L), jarArchiveEntry0.getCrc());
      assertEquals(0, jarArchiveEntry0.getRawFlag());
      assertEquals(0, jarArchiveEntry0.getUnixMode());
      assertEquals(2048L, jarArchiveEntry0.getSize());
      assertEquals("86*>(iZ,:;46(=", jarArchiveEntry0.getName());
      assertEquals("86*>(iZ,:;46(=", jarArchiveEntry0.toString());
      assertNull(jarArchiveEntry0.getComment());
      assertEquals(0, jarArchiveEntry0.getInternalAttributes());
      assertFalse(jarArchiveEntry0.isUnixSymlink());
      assertEquals((-1L), jarArchiveEntry0.getDataOffset());
      assertFalse(jarArchiveEntry0.isStreamContiguous());
      assertFalse(jarArchiveEntry0.isDirectory());
      assertEquals(0, jarArchiveEntry0.getPlatform());
      assertEquals(0, jarArchiveEntry0.getVersionRequired());
      assertEquals((-1), jarArchiveEntry0.getMethod());
      assertEquals((-1L), jarArchiveEntry0.getCompressedSize());
      assertEquals(0L, jarArchiveEntry0.getExternalAttributes());
      assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      
      zipArchiveOutputStream0.putArchiveEntry(jarArchiveEntry0);
      assertFalse(mockFile0.equals((Object)mockFile1));
      assertFalse(mockFile1.equals((Object)mockFile0));
      assertEquals(0, jarArchiveEntry0.getVersionMadeBy());
      assertEquals((-1L), jarArchiveEntry0.getCrc());
      assertEquals(0, jarArchiveEntry0.getRawFlag());
      assertEquals(0, jarArchiveEntry0.getUnixMode());
      assertEquals(2048L, jarArchiveEntry0.getSize());
      assertEquals("86*>(iZ,:;46(=", jarArchiveEntry0.getName());
      assertEquals("86*>(iZ,:;46(=", jarArchiveEntry0.toString());
      assertNull(jarArchiveEntry0.getComment());
      assertEquals(0, jarArchiveEntry0.getInternalAttributes());
      assertFalse(jarArchiveEntry0.isUnixSymlink());
      assertEquals((-1L), jarArchiveEntry0.getDataOffset());
      assertFalse(jarArchiveEntry0.isStreamContiguous());
      assertEquals(8, jarArchiveEntry0.getMethod());
      assertFalse(jarArchiveEntry0.isDirectory());
      assertEquals(0, jarArchiveEntry0.getPlatform());
      assertEquals(0, jarArchiveEntry0.getVersionRequired());
      assertEquals((-1L), jarArchiveEntry0.getCompressedSize());
      assertEquals(0L, jarArchiveEntry0.getExternalAttributes());
      assertTrue(mockFile0.isAbsolute());
      assertEquals("/experiment/86*>(iZ,:;46(=", mockFile0.getParent());
      assertFalse(mockFile0.isFile());
      assertTrue(mockFile0.canExecute());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.exists());
      assertEquals(" method doesn'tGsupport options of'type ", mockFile0.getName());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals("/experiment/86*>(iZ,:;46(=/ method doesn'tGsupport options of'type ", mockFile0.toString());
      assertTrue(mockFile0.canWrite());
      assertEquals("/experiment/86*>(iZ,:;46(=/ method doesn'tGsupport options of'type /86*>(iZ,:;46(=", mockFile1.toString());
      assertTrue(mockFile1.canWrite());
      assertEquals("86*>(iZ,:;46(=", mockFile1.getName());
      assertFalse(mockFile1.isDirectory());
      assertEquals(0L, mockFile1.getFreeSpace());
      assertTrue(mockFile1.canExecute());
      assertTrue(mockFile1.canRead());
      assertTrue(mockFile1.isAbsolute());
      assertEquals("/experiment/86*>(iZ,:;46(=/ method doesn'tGsupport options of'type ", mockFile1.getParent());
      assertFalse(mockFile1.isHidden());
      assertEquals(0L, mockFile1.getUsableSpace());
      assertEquals(0L, mockFile1.getTotalSpace());
      assertEquals(1392409281320L, mockFile1.lastModified());
      assertTrue(mockFile1.exists());
      assertTrue(mockFile1.isFile());
      assertEquals(44L, mockFile1.length());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertFalse(zipArchiveOutputStream0.isSeekable());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertNotSame(mockFile0, mockFile1);
      assertNotSame(mockFile1, mockFile0);
      assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      
      zipArchiveOutputStream0.writeDataDescriptor(jarArchiveEntry0);
      assertFalse(mockFile0.equals((Object)mockFile1));
      assertFalse(mockFile1.equals((Object)mockFile0));
      assertEquals(0, jarArchiveEntry0.getVersionMadeBy());
      assertEquals((-1L), jarArchiveEntry0.getCrc());
      assertEquals(0, jarArchiveEntry0.getRawFlag());
      assertEquals(0, jarArchiveEntry0.getUnixMode());
      assertEquals(2048L, jarArchiveEntry0.getSize());
      assertEquals("86*>(iZ,:;46(=", jarArchiveEntry0.getName());
      assertEquals("86*>(iZ,:;46(=", jarArchiveEntry0.toString());
      assertNull(jarArchiveEntry0.getComment());
      assertEquals(0, jarArchiveEntry0.getInternalAttributes());
      assertFalse(jarArchiveEntry0.isUnixSymlink());
      assertEquals((-1L), jarArchiveEntry0.getDataOffset());
      assertFalse(jarArchiveEntry0.isStreamContiguous());
      assertEquals(8, jarArchiveEntry0.getMethod());
      assertFalse(jarArchiveEntry0.isDirectory());
      assertEquals(0, jarArchiveEntry0.getPlatform());
      assertEquals(0, jarArchiveEntry0.getVersionRequired());
      assertEquals((-1L), jarArchiveEntry0.getCompressedSize());
      assertEquals(0L, jarArchiveEntry0.getExternalAttributes());
      assertTrue(mockFile0.isAbsolute());
      assertEquals("/experiment/86*>(iZ,:;46(=", mockFile0.getParent());
      assertFalse(mockFile0.isFile());
      assertTrue(mockFile0.canExecute());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.exists());
      assertEquals(" method doesn'tGsupport options of'type ", mockFile0.getName());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals("/experiment/86*>(iZ,:;46(=/ method doesn'tGsupport options of'type ", mockFile0.toString());
      assertTrue(mockFile0.canWrite());
      assertEquals("/experiment/86*>(iZ,:;46(=/ method doesn'tGsupport options of'type /86*>(iZ,:;46(=", mockFile1.toString());
      assertTrue(mockFile1.canWrite());
      assertEquals("86*>(iZ,:;46(=", mockFile1.getName());
      assertFalse(mockFile1.isDirectory());
      assertEquals(60L, mockFile1.length());
      assertEquals(0L, mockFile1.getFreeSpace());
      assertTrue(mockFile1.canExecute());
      assertTrue(mockFile1.canRead());
      assertTrue(mockFile1.isAbsolute());
      assertEquals("/experiment/86*>(iZ,:;46(=/ method doesn'tGsupport options of'type ", mockFile1.getParent());
      assertFalse(mockFile1.isHidden());
      assertEquals(0L, mockFile1.getUsableSpace());
      assertEquals(0L, mockFile1.getTotalSpace());
      assertEquals(1392409281320L, mockFile1.lastModified());
      assertTrue(mockFile1.exists());
      assertTrue(mockFile1.isFile());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertFalse(zipArchiveOutputStream0.isSeekable());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertNotSame(mockFile0, mockFile1);
      assertNotSame(mockFile1, mockFile0);
      assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      
      zipArchiveOutputStream0.setEncoding("37u5gMX");
      assertFalse(mockFile0.equals((Object)mockFile1));
      assertFalse(mockFile1.equals((Object)mockFile0));
      assertTrue(mockFile0.isAbsolute());
      assertEquals("/experiment/86*>(iZ,:;46(=", mockFile0.getParent());
      assertFalse(mockFile0.isFile());
      assertTrue(mockFile0.canExecute());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.exists());
      assertEquals(" method doesn'tGsupport options of'type ", mockFile0.getName());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals("/experiment/86*>(iZ,:;46(=/ method doesn'tGsupport options of'type ", mockFile0.toString());
      assertTrue(mockFile0.canWrite());
      assertEquals("/experiment/86*>(iZ,:;46(=/ method doesn'tGsupport options of'type /86*>(iZ,:;46(=", mockFile1.toString());
      assertTrue(mockFile1.canWrite());
      assertEquals("86*>(iZ,:;46(=", mockFile1.getName());
      assertFalse(mockFile1.isDirectory());
      assertEquals(60L, mockFile1.length());
      assertEquals(0L, mockFile1.getFreeSpace());
      assertTrue(mockFile1.canExecute());
      assertTrue(mockFile1.canRead());
      assertTrue(mockFile1.isAbsolute());
      assertEquals("/experiment/86*>(iZ,:;46(=/ method doesn'tGsupport options of'type ", mockFile1.getParent());
      assertFalse(mockFile1.isHidden());
      assertEquals(0L, mockFile1.getUsableSpace());
      assertEquals(0L, mockFile1.getTotalSpace());
      assertEquals(1392409281320L, mockFile1.lastModified());
      assertTrue(mockFile1.exists());
      assertTrue(mockFile1.isFile());
      assertFalse(zipArchiveOutputStream0.isSeekable());
      assertEquals("37u5gMX", zipArchiveOutputStream0.getEncoding());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertNotSame(mockFile0, mockFile1);
      assertNotSame(mockFile1, mockFile0);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      
      JarArchiveEntry jarArchiveEntry1 = new JarArchiveEntry((ZipArchiveEntry) jarArchiveEntry0);
      assertTrue(jarArchiveEntry1.equals((Object)jarArchiveEntry0));
      assertEquals(0, jarArchiveEntry0.getVersionMadeBy());
      assertEquals((-1L), jarArchiveEntry0.getCrc());
      assertEquals(0, jarArchiveEntry0.getRawFlag());
      assertEquals(0, jarArchiveEntry0.getUnixMode());
      assertEquals(2048L, jarArchiveEntry0.getSize());
      assertEquals("86*>(iZ,:;46(=", jarArchiveEntry0.getName());
      assertEquals("86*>(iZ,:;46(=", jarArchiveEntry0.toString());
      assertNull(jarArchiveEntry0.getComment());
      assertEquals(0, jarArchiveEntry0.getInternalAttributes());
      assertFalse(jarArchiveEntry0.isUnixSymlink());
      assertEquals((-1L), jarArchiveEntry0.getDataOffset());
      assertFalse(jarArchiveEntry0.isStreamContiguous());
      assertEquals(8, jarArchiveEntry0.getMethod());
      assertFalse(jarArchiveEntry0.isDirectory());
      assertEquals(0, jarArchiveEntry0.getPlatform());
      assertEquals(0, jarArchiveEntry0.getVersionRequired());
      assertEquals((-1L), jarArchiveEntry0.getCompressedSize());
      assertEquals(0L, jarArchiveEntry0.getExternalAttributes());
      assertEquals(0L, jarArchiveEntry1.getExternalAttributes());
      assertEquals(2048L, jarArchiveEntry1.getSize());
      assertEquals((-1L), jarArchiveEntry1.getDataOffset());
      assertEquals("86*>(iZ,:;46(=", jarArchiveEntry1.getName());
      assertNull(jarArchiveEntry1.getComment());
      assertEquals((-1L), jarArchiveEntry1.getCrc());
      assertEquals((-1L), jarArchiveEntry1.getCompressedSize());
      assertEquals(8, jarArchiveEntry1.getMethod());
      assertFalse(jarArchiveEntry1.isUnixSymlink());
      assertFalse(jarArchiveEntry1.isDirectory());
      assertEquals(0, jarArchiveEntry1.getVersionRequired());
      assertFalse(jarArchiveEntry1.isStreamContiguous());
      assertEquals(0, jarArchiveEntry1.getRawFlag());
      assertEquals(0, jarArchiveEntry1.getInternalAttributes());
      assertEquals(0, jarArchiveEntry1.getUnixMode());
      assertEquals(0, jarArchiveEntry1.getPlatform());
      assertEquals(0, jarArchiveEntry1.getVersionMadeBy());
      assertEquals("86*>(iZ,:;46(=", jarArchiveEntry1.toString());
      assertNotNull(jarArchiveEntry1);
      assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(mockFile1);
      assertFalse(mockFile0.equals((Object)mockFile1));
      assertFalse(mockFile1.equals((Object)mockFile0));
      assertNotNull(mockFileInputStream0);
      
//      try { 
        zipArchiveOutputStream0.addRawArchiveEntry(jarArchiveEntry0, mockFileInputStream0);
//        fail("Expecting exception: UnsupportedEncodingException");
      
//      } catch(UnsupportedEncodingException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      MockFile mockFile0 = new MockFile("86*>(iZ,:;46(=", "86*>(iZ,:;46(=");
      assertNotNull(mockFile0);
      
      JarArchiveEntry jarArchiveEntry0 = new JarArchiveEntry("86*>(iZ,:;46(=");
      assertEquals("86*>(iZ,:;46(=", jarArchiveEntry0.getName());
      assertEquals((-1), jarArchiveEntry0.getMethod());
      assertEquals(0L, jarArchiveEntry0.getExternalAttributes());
      assertEquals("86*>(iZ,:;46(=", jarArchiveEntry0.toString());
      assertFalse(jarArchiveEntry0.isStreamContiguous());
      assertEquals(0, jarArchiveEntry0.getInternalAttributes());
      assertEquals((-1L), jarArchiveEntry0.getSize());
      assertFalse(jarArchiveEntry0.isDirectory());
      assertEquals((-1L), jarArchiveEntry0.getDataOffset());
      assertEquals((-1L), jarArchiveEntry0.getCrc());
      assertNull(jarArchiveEntry0.getComment());
      assertFalse(jarArchiveEntry0.isUnixSymlink());
      assertEquals((-1L), jarArchiveEntry0.getCompressedSize());
      assertEquals(0, jarArchiveEntry0.getUnixMode());
      assertEquals(0, jarArchiveEntry0.getRawFlag());
      assertEquals(0, jarArchiveEntry0.getVersionMadeBy());
      assertEquals(0, jarArchiveEntry0.getPlatform());
      assertEquals(0, jarArchiveEntry0.getVersionRequired());
      assertNotNull(jarArchiveEntry0);
      assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(mockFile0);
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertFalse(mockFile0.isDirectory());
      assertEquals("/experiment/86*>(iZ,:;46(=/86*>(iZ,:;46(=", mockFile0.toString());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.canExecute());
      assertEquals("/experiment/86*>(iZ,:;46(=", mockFile0.getParent());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.canWrite());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.isFile());
      assertTrue(mockFile0.isAbsolute());
      assertEquals("86*>(iZ,:;46(=", mockFile0.getName());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertFalse(zipArchiveOutputStream0.isSeekable());
      assertNotNull(zipArchiveOutputStream0);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0, false);
      assertNotNull(mockFileOutputStream0);
      
      FileChannel fileChannel0 = mockFileOutputStream0.getChannel();
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertFalse(mockFile0.isDirectory());
      assertEquals("/experiment/86*>(iZ,:;46(=/86*>(iZ,:;46(=", mockFile0.toString());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.canExecute());
      assertEquals("/experiment/86*>(iZ,:;46(=", mockFile0.getParent());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.canWrite());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.isFile());
      assertTrue(mockFile0.isAbsolute());
      assertEquals("86*>(iZ,:;46(=", mockFile0.getName());
      assertTrue(fileChannel0.isOpen());
      assertEquals(0L, fileChannel0.size());
      assertEquals(0L, fileChannel0.position());
      assertNotNull(fileChannel0);
      
      FileChannel fileChannel1 = fileChannel0.position(71776119061217239L);
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertFalse(mockFile0.isDirectory());
      assertEquals("/experiment/86*>(iZ,:;46(=/86*>(iZ,:;46(=", mockFile0.toString());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.canExecute());
      assertEquals("/experiment/86*>(iZ,:;46(=", mockFile0.getParent());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.canWrite());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.isFile());
      assertTrue(mockFile0.isAbsolute());
      assertEquals("86*>(iZ,:;46(=", mockFile0.getName());
      assertTrue(fileChannel0.isOpen());
      assertEquals(0L, fileChannel0.size());
      assertEquals((-41L), fileChannel0.position());
      assertTrue(fileChannel1.isOpen());
      assertEquals(0L, fileChannel1.size());
      assertEquals((-41L), fileChannel1.position());
      assertNotNull(fileChannel1);
      assertSame(fileChannel0, fileChannel1);
      assertSame(fileChannel1, fileChannel0);
      
      ZipArchiveOutputStream zipArchiveOutputStream1 = new ZipArchiveOutputStream(fileChannel1);
      assertFalse(zipArchiveOutputStream1.equals((Object)zipArchiveOutputStream0));
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertFalse(mockFile0.isDirectory());
      assertEquals("/experiment/86*>(iZ,:;46(=/86*>(iZ,:;46(=", mockFile0.toString());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.canExecute());
      assertEquals("/experiment/86*>(iZ,:;46(=", mockFile0.getParent());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.canWrite());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.isFile());
      assertTrue(mockFile0.isAbsolute());
      assertEquals("86*>(iZ,:;46(=", mockFile0.getName());
      assertTrue(fileChannel0.isOpen());
      assertEquals(0L, fileChannel0.size());
      assertEquals((-41L), fileChannel0.position());
      assertTrue(fileChannel1.isOpen());
      assertEquals(0L, fileChannel1.size());
      assertEquals((-41L), fileChannel1.position());
      assertTrue(zipArchiveOutputStream1.isSeekable());
      assertEquals("UTF8", zipArchiveOutputStream1.getEncoding());
      assertEquals(0, zipArchiveOutputStream1.getCount());
      assertEquals(0L, zipArchiveOutputStream1.getBytesWritten());
      assertNotNull(zipArchiveOutputStream1);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      
      // Undeclared exception!
//      try { 
        zipArchiveOutputStream1.putArchiveEntry(jarArchiveEntry0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Position in the file cannot be negative
//         //
//         verifyException("org.evosuite.runtime.vfs.VFile", e);
//      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      File file0 = MockFile.createTempFile("86*>(iZ,:;46(=", "86*>(iZ,:;46(=");
      assertTrue(file0.canRead());
      assertTrue(file0.isAbsolute());
      assertTrue(file0.isFile());
      assertTrue(file0.canWrite());
      assertEquals("/tmp/86*>(iZ,:;46(=086*>(iZ,:;46(=", file0.toString());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals("/tmp", file0.getParent());
      assertFalse(file0.isDirectory());
      assertEquals("86*>(iZ,:;46(=086*>(iZ,:;46(=", file0.getName());
      assertEquals(0L, file0.length());
      assertEquals(0L, file0.getFreeSpace());
      assertTrue(file0.exists());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(1392409281320L, file0.lastModified());
      assertTrue(file0.canExecute());
      assertNotNull(file0);
      
      JarArchiveEntry jarArchiveEntry0 = new JarArchiveEntry("86*>(iZ,:;46(=");
      assertFalse(jarArchiveEntry0.isStreamContiguous());
      assertEquals(0, jarArchiveEntry0.getInternalAttributes());
      assertFalse(jarArchiveEntry0.isDirectory());
      assertEquals(0, jarArchiveEntry0.getPlatform());
      assertEquals("86*>(iZ,:;46(=", jarArchiveEntry0.getName());
      assertFalse(jarArchiveEntry0.isUnixSymlink());
      assertNull(jarArchiveEntry0.getComment());
      assertEquals((-1L), jarArchiveEntry0.getDataOffset());
      assertEquals("86*>(iZ,:;46(=", jarArchiveEntry0.toString());
      assertEquals(0, jarArchiveEntry0.getUnixMode());
      assertEquals(0, jarArchiveEntry0.getRawFlag());
      assertEquals((-1L), jarArchiveEntry0.getCrc());
      assertEquals(0, jarArchiveEntry0.getVersionMadeBy());
      assertEquals((-1L), jarArchiveEntry0.getSize());
      assertEquals((-1L), jarArchiveEntry0.getCompressedSize());
      assertEquals(0, jarArchiveEntry0.getVersionRequired());
      assertEquals((-1), jarArchiveEntry0.getMethod());
      assertEquals(0L, jarArchiveEntry0.getExternalAttributes());
      assertNotNull(jarArchiveEntry0);
      assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(file0);
      assertTrue(file0.canRead());
      assertTrue(file0.isAbsolute());
      assertTrue(file0.isFile());
      assertTrue(file0.canWrite());
      assertEquals("/tmp/86*>(iZ,:;46(=086*>(iZ,:;46(=", file0.toString());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals("/tmp", file0.getParent());
      assertFalse(file0.isDirectory());
      assertEquals("86*>(iZ,:;46(=086*>(iZ,:;46(=", file0.getName());
      assertEquals(0L, file0.length());
      assertEquals(0L, file0.getFreeSpace());
      assertTrue(file0.exists());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(1392409281320L, file0.lastModified());
      assertTrue(file0.canExecute());
      assertTrue(zipArchiveOutputStream0.isSeekable());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertNotNull(zipArchiveOutputStream0);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      
      ZipArchiveOutputStream.UnicodeExtraFieldPolicy zipArchiveOutputStream_UnicodeExtraFieldPolicy0 = ZipArchiveOutputStream.UnicodeExtraFieldPolicy.NOT_ENCODEABLE;
      assertEquals("not encodeable", zipArchiveOutputStream_UnicodeExtraFieldPolicy0.toString());
      assertNotNull(zipArchiveOutputStream_UnicodeExtraFieldPolicy0);
      
      zipArchiveOutputStream0.setCreateUnicodeExtraFields(zipArchiveOutputStream_UnicodeExtraFieldPolicy0);
      assertTrue(file0.canRead());
      assertTrue(file0.isAbsolute());
      assertTrue(file0.isFile());
      assertTrue(file0.canWrite());
      assertEquals("/tmp/86*>(iZ,:;46(=086*>(iZ,:;46(=", file0.toString());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals("/tmp", file0.getParent());
      assertFalse(file0.isDirectory());
      assertEquals("86*>(iZ,:;46(=086*>(iZ,:;46(=", file0.getName());
      assertEquals(0L, file0.length());
      assertEquals(0L, file0.getFreeSpace());
      assertTrue(file0.exists());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(1392409281320L, file0.lastModified());
      assertTrue(file0.canExecute());
      assertTrue(zipArchiveOutputStream0.isSeekable());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertEquals("not encodeable", zipArchiveOutputStream_UnicodeExtraFieldPolicy0.toString());
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      
      zipArchiveOutputStream0.setMethod(12);
      assertTrue(file0.canRead());
      assertTrue(file0.isAbsolute());
      assertTrue(file0.isFile());
      assertTrue(file0.canWrite());
      assertEquals("/tmp/86*>(iZ,:;46(=086*>(iZ,:;46(=", file0.toString());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals("/tmp", file0.getParent());
      assertFalse(file0.isDirectory());
      assertEquals("86*>(iZ,:;46(=086*>(iZ,:;46(=", file0.getName());
      assertEquals(0L, file0.length());
      assertEquals(0L, file0.getFreeSpace());
      assertTrue(file0.exists());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(1392409281320L, file0.lastModified());
      assertTrue(file0.canExecute());
      assertTrue(zipArchiveOutputStream0.isSeekable());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      
      zipArchiveOutputStream0.putArchiveEntry(jarArchiveEntry0);
      assertTrue(file0.canRead());
      assertTrue(file0.isAbsolute());
      assertTrue(file0.isFile());
      assertTrue(file0.canWrite());
      assertEquals("/tmp/86*>(iZ,:;46(=086*>(iZ,:;46(=", file0.toString());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals("/tmp", file0.getParent());
      assertFalse(file0.isDirectory());
      assertEquals("86*>(iZ,:;46(=086*>(iZ,:;46(=", file0.getName());
      assertEquals(0L, file0.length());
      assertEquals(0L, file0.getFreeSpace());
      assertTrue(file0.exists());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(1392409281320L, file0.lastModified());
      assertTrue(file0.canExecute());
      assertFalse(jarArchiveEntry0.isStreamContiguous());
      assertEquals(0, jarArchiveEntry0.getInternalAttributes());
      assertFalse(jarArchiveEntry0.isDirectory());
      assertEquals(0, jarArchiveEntry0.getPlatform());
      assertEquals("86*>(iZ,:;46(=", jarArchiveEntry0.getName());
      assertEquals(12, jarArchiveEntry0.getMethod());
      assertFalse(jarArchiveEntry0.isUnixSymlink());
      assertNull(jarArchiveEntry0.getComment());
      assertEquals((-1L), jarArchiveEntry0.getDataOffset());
      assertEquals("86*>(iZ,:;46(=", jarArchiveEntry0.toString());
      assertEquals(0, jarArchiveEntry0.getUnixMode());
      assertEquals(0, jarArchiveEntry0.getRawFlag());
      assertEquals((-1L), jarArchiveEntry0.getCrc());
      assertEquals(0, jarArchiveEntry0.getVersionMadeBy());
      assertEquals((-1L), jarArchiveEntry0.getSize());
      assertEquals((-1L), jarArchiveEntry0.getCompressedSize());
      assertEquals(0, jarArchiveEntry0.getVersionRequired());
      assertEquals(0L, jarArchiveEntry0.getExternalAttributes());
      assertTrue(zipArchiveOutputStream0.isSeekable());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      
      zipArchiveOutputStream0.putArchiveEntry(jarArchiveEntry0);
      assertTrue(file0.canRead());
      assertTrue(file0.isAbsolute());
      assertTrue(file0.isFile());
      assertTrue(file0.canWrite());
      assertEquals("/tmp/86*>(iZ,:;46(=086*>(iZ,:;46(=", file0.toString());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals("/tmp", file0.getParent());
      assertFalse(file0.isDirectory());
      assertEquals("86*>(iZ,:;46(=086*>(iZ,:;46(=", file0.getName());
      assertEquals(0L, file0.length());
      assertEquals(0L, file0.getFreeSpace());
      assertTrue(file0.exists());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(1392409281320L, file0.lastModified());
      assertTrue(file0.canExecute());
      assertFalse(jarArchiveEntry0.isStreamContiguous());
      assertEquals(0, jarArchiveEntry0.getInternalAttributes());
      assertFalse(jarArchiveEntry0.isDirectory());
      assertEquals(0, jarArchiveEntry0.getPlatform());
      assertEquals("86*>(iZ,:;46(=", jarArchiveEntry0.getName());
      assertEquals(12, jarArchiveEntry0.getMethod());
      assertFalse(jarArchiveEntry0.isUnixSymlink());
      assertNull(jarArchiveEntry0.getComment());
      assertEquals((-1L), jarArchiveEntry0.getDataOffset());
      assertEquals("86*>(iZ,:;46(=", jarArchiveEntry0.toString());
      assertEquals(0, jarArchiveEntry0.getUnixMode());
      assertEquals(0, jarArchiveEntry0.getRawFlag());
      assertEquals(0L, jarArchiveEntry0.getCrc());
      assertEquals(0, jarArchiveEntry0.getVersionMadeBy());
      assertEquals(0L, jarArchiveEntry0.getSize());
      assertEquals(0L, jarArchiveEntry0.getCompressedSize());
      assertEquals(0, jarArchiveEntry0.getVersionRequired());
      assertEquals(0L, jarArchiveEntry0.getExternalAttributes());
      assertTrue(zipArchiveOutputStream0.isSeekable());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      JarArchiveEntry jarArchiveEntry0 = new JarArchiveEntry("86*>iZ,:;46=");
      assertEquals(0, jarArchiveEntry0.getRawFlag());
      assertEquals(0, jarArchiveEntry0.getUnixMode());
      assertEquals((-1L), jarArchiveEntry0.getCrc());
      assertEquals((-1L), jarArchiveEntry0.getDataOffset());
      assertEquals(0, jarArchiveEntry0.getVersionRequired());
      assertEquals((-1L), jarArchiveEntry0.getCompressedSize());
      assertEquals(0L, jarArchiveEntry0.getExternalAttributes());
      assertFalse(jarArchiveEntry0.isDirectory());
      assertEquals((-1L), jarArchiveEntry0.getSize());
      assertEquals("86*>iZ,:;46=", jarArchiveEntry0.getName());
      assertEquals(0, jarArchiveEntry0.getInternalAttributes());
      assertEquals(0, jarArchiveEntry0.getPlatform());
      assertFalse(jarArchiveEntry0.isStreamContiguous());
      assertNull(jarArchiveEntry0.getComment());
      assertEquals((-1), jarArchiveEntry0.getMethod());
      assertEquals("86*>iZ,:;46=", jarArchiveEntry0.toString());
      assertFalse(jarArchiveEntry0.isUnixSymlink());
      assertEquals(0, jarArchiveEntry0.getVersionMadeBy());
      assertNotNull(jarArchiveEntry0);
      assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      
      MockFile mockFile0 = new MockFile("86*>iZ,:;46=");
      assertNotNull(mockFile0);
      
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(mockFile0);
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals("86*>iZ,:;46=", mockFile0.toString());
      assertTrue(mockFile0.canWrite());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.isFile());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.exists());
      assertEquals("86*>iZ,:;46=", mockFile0.getName());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertNull(mockFile0.getParent());
      assertTrue(mockFile0.canExecute());
      assertFalse(mockFile0.isDirectory());
      assertFalse(mockFile0.isAbsolute());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertFalse(zipArchiveOutputStream0.isSeekable());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertNotNull(zipArchiveOutputStream0);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      
      Zip64Mode zip64Mode0 = Zip64Mode.Always;
      zipArchiveOutputStream0.setUseZip64(zip64Mode0);
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals("86*>iZ,:;46=", mockFile0.toString());
      assertTrue(mockFile0.canWrite());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.isFile());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.exists());
      assertEquals("86*>iZ,:;46=", mockFile0.getName());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertNull(mockFile0.getParent());
      assertTrue(mockFile0.canExecute());
      assertFalse(mockFile0.isDirectory());
      assertFalse(mockFile0.isAbsolute());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertFalse(zipArchiveOutputStream0.isSeekable());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      
      zipArchiveOutputStream0.putArchiveEntry(jarArchiveEntry0);
      assertEquals(0, jarArchiveEntry0.getRawFlag());
      assertEquals(0, jarArchiveEntry0.getUnixMode());
      assertEquals((-1L), jarArchiveEntry0.getCrc());
      assertEquals((-1L), jarArchiveEntry0.getDataOffset());
      assertEquals(0, jarArchiveEntry0.getVersionRequired());
      assertEquals((-1L), jarArchiveEntry0.getCompressedSize());
      assertEquals(0L, jarArchiveEntry0.getExternalAttributes());
      assertFalse(jarArchiveEntry0.isDirectory());
      assertEquals((-1L), jarArchiveEntry0.getSize());
      assertEquals(8, jarArchiveEntry0.getMethod());
      assertEquals("86*>iZ,:;46=", jarArchiveEntry0.getName());
      assertEquals(0, jarArchiveEntry0.getInternalAttributes());
      assertEquals(0, jarArchiveEntry0.getPlatform());
      assertFalse(jarArchiveEntry0.isStreamContiguous());
      assertNull(jarArchiveEntry0.getComment());
      assertEquals("86*>iZ,:;46=", jarArchiveEntry0.toString());
      assertFalse(jarArchiveEntry0.isUnixSymlink());
      assertEquals(0, jarArchiveEntry0.getVersionMadeBy());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals("86*>iZ,:;46=", mockFile0.toString());
      assertTrue(mockFile0.canWrite());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.isFile());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.exists());
      assertEquals("86*>iZ,:;46=", mockFile0.getName());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertNull(mockFile0.getParent());
      assertTrue(mockFile0.canExecute());
      assertFalse(mockFile0.isDirectory());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(62L, mockFile0.length());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertFalse(zipArchiveOutputStream0.isSeekable());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      
      zipArchiveOutputStream0.putArchiveEntry(jarArchiveEntry0);
      assertEquals(0, jarArchiveEntry0.getRawFlag());
      assertEquals(0, jarArchiveEntry0.getUnixMode());
      assertEquals(0L, jarArchiveEntry0.getCrc());
      assertEquals((-1L), jarArchiveEntry0.getDataOffset());
      assertEquals(0, jarArchiveEntry0.getVersionRequired());
      assertEquals(0L, jarArchiveEntry0.getExternalAttributes());
      assertFalse(jarArchiveEntry0.isDirectory());
      assertEquals(0L, jarArchiveEntry0.getSize());
      assertEquals(8, jarArchiveEntry0.getMethod());
      assertEquals(2L, jarArchiveEntry0.getCompressedSize());
      assertEquals("86*>iZ,:;46=", jarArchiveEntry0.getName());
      assertEquals(0, jarArchiveEntry0.getInternalAttributes());
      assertEquals(0, jarArchiveEntry0.getPlatform());
      assertFalse(jarArchiveEntry0.isStreamContiguous());
      assertNull(jarArchiveEntry0.getComment());
      assertEquals("86*>iZ,:;46=", jarArchiveEntry0.toString());
      assertFalse(jarArchiveEntry0.isUnixSymlink());
      assertEquals(0, jarArchiveEntry0.getVersionMadeBy());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals("86*>iZ,:;46=", mockFile0.toString());
      assertTrue(mockFile0.canWrite());
      assertEquals(150L, mockFile0.length());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.isFile());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.exists());
      assertEquals("86*>iZ,:;46=", mockFile0.getName());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertNull(mockFile0.getParent());
      assertTrue(mockFile0.canExecute());
      assertFalse(mockFile0.isDirectory());
      assertFalse(mockFile0.isAbsolute());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertFalse(zipArchiveOutputStream0.isSeekable());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)43;
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte) (-1);
      byteArray0[3] = (byte) (-105);
      byteArray0[4] = (byte)75;
      byteArray0[5] = (byte)36;
      byteArray0[6] = (byte) (-61);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertEquals(7, byteArrayInputStream0.available());
      assertNotNull(byteArrayInputStream0);
      assertEquals(7, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)43, (byte) (-1), (byte) (-1), (byte) (-105), (byte)75, (byte)36, (byte) (-61)}, byteArray0);
      
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(byteArrayInputStream0);
      assertEquals(7, byteArrayInputStream0.available());
      assertNotNull(pushbackInputStream0);
      assertEquals(7, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)43, (byte) (-1), (byte) (-1), (byte) (-105), (byte)75, (byte)36, (byte) (-61)}, byteArray0);
      
      zipArchiveOutputStream0.addRawArchiveEntry(jarArchiveEntry0, pushbackInputStream0);
      assertEquals(0, jarArchiveEntry0.getRawFlag());
      assertEquals(0, jarArchiveEntry0.getUnixMode());
      assertEquals(0L, jarArchiveEntry0.getCrc());
      assertEquals((-1L), jarArchiveEntry0.getDataOffset());
      assertEquals(0, jarArchiveEntry0.getVersionRequired());
      assertEquals(0L, jarArchiveEntry0.getExternalAttributes());
      assertFalse(jarArchiveEntry0.isDirectory());
      assertEquals(0L, jarArchiveEntry0.getSize());
      assertEquals(8, jarArchiveEntry0.getMethod());
      assertEquals(2L, jarArchiveEntry0.getCompressedSize());
      assertEquals("86*>iZ,:;46=", jarArchiveEntry0.getName());
      assertEquals(0, jarArchiveEntry0.getInternalAttributes());
      assertEquals(0, jarArchiveEntry0.getPlatform());
      assertFalse(jarArchiveEntry0.isStreamContiguous());
      assertNull(jarArchiveEntry0.getComment());
      assertEquals("86*>iZ,:;46=", jarArchiveEntry0.toString());
      assertFalse(jarArchiveEntry0.isUnixSymlink());
      assertEquals(0, jarArchiveEntry0.getVersionMadeBy());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals("86*>iZ,:;46=", mockFile0.toString());
      assertTrue(mockFile0.canWrite());
      assertEquals(245L, mockFile0.length());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.isFile());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.exists());
      assertEquals("86*>iZ,:;46=", mockFile0.getName());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertNull(mockFile0.getParent());
      assertTrue(mockFile0.canExecute());
      assertFalse(mockFile0.isDirectory());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(7, zipArchiveOutputStream0.getCount());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertEquals(7L, zipArchiveOutputStream0.getBytesWritten());
      assertFalse(zipArchiveOutputStream0.isSeekable());
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(7, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)43, (byte) (-1), (byte) (-1), (byte) (-105), (byte)75, (byte)36, (byte) (-61)}, byteArray0);
      assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      
      zipArchiveOutputStream0.writeCentralFileHeader(jarArchiveEntry0);
      assertEquals(0, jarArchiveEntry0.getRawFlag());
      assertEquals(0, jarArchiveEntry0.getUnixMode());
      assertEquals(0L, jarArchiveEntry0.getCrc());
      assertEquals((-1L), jarArchiveEntry0.getDataOffset());
      assertEquals(0, jarArchiveEntry0.getVersionRequired());
      assertEquals(0L, jarArchiveEntry0.getExternalAttributes());
      assertFalse(jarArchiveEntry0.isDirectory());
      assertEquals(0L, jarArchiveEntry0.getSize());
      assertEquals(8, jarArchiveEntry0.getMethod());
      assertEquals(2L, jarArchiveEntry0.getCompressedSize());
      assertEquals("86*>iZ,:;46=", jarArchiveEntry0.getName());
      assertEquals(0, jarArchiveEntry0.getInternalAttributes());
      assertEquals(0, jarArchiveEntry0.getPlatform());
      assertFalse(jarArchiveEntry0.isStreamContiguous());
      assertNull(jarArchiveEntry0.getComment());
      assertEquals("86*>iZ,:;46=", jarArchiveEntry0.toString());
      assertFalse(jarArchiveEntry0.isUnixSymlink());
      assertEquals(0, jarArchiveEntry0.getVersionMadeBy());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals("86*>iZ,:;46=", mockFile0.toString());
      assertTrue(mockFile0.canWrite());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.canRead());
      assertEquals(331L, mockFile0.length());
      assertTrue(mockFile0.isFile());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.exists());
      assertEquals("86*>iZ,:;46=", mockFile0.getName());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertNull(mockFile0.getParent());
      assertTrue(mockFile0.canExecute());
      assertFalse(mockFile0.isDirectory());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(7, zipArchiveOutputStream0.getCount());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertEquals(7L, zipArchiveOutputStream0.getBytesWritten());
      assertFalse(zipArchiveOutputStream0.isSeekable());
      assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(0, ZipArchiveOutputStream.STORED);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      JarArchiveEntry jarArchiveEntry0 = new JarArchiveEntry("K@<[LT~&.8W\"0\"P$");
      assertEquals(0, jarArchiveEntry0.getInternalAttributes());
      assertEquals(0, jarArchiveEntry0.getPlatform());
      assertFalse(jarArchiveEntry0.isUnixSymlink());
      assertFalse(jarArchiveEntry0.isDirectory());
      assertEquals((-1L), jarArchiveEntry0.getDataOffset());
      assertEquals((-1L), jarArchiveEntry0.getSize());
      assertNull(jarArchiveEntry0.getComment());
      assertFalse(jarArchiveEntry0.isStreamContiguous());
      assertEquals(0, jarArchiveEntry0.getRawFlag());
      assertEquals((-1L), jarArchiveEntry0.getCrc());
      assertEquals(0, jarArchiveEntry0.getUnixMode());
      assertEquals("K@<[LT~&.8W\"0\"P$", jarArchiveEntry0.toString());
      assertEquals("K@<[LT~&.8W\"0\"P$", jarArchiveEntry0.getName());
      assertEquals(0, jarArchiveEntry0.getVersionMadeBy());
      assertEquals((-1L), jarArchiveEntry0.getCompressedSize());
      assertEquals(0L, jarArchiveEntry0.getExternalAttributes());
      assertEquals((-1), jarArchiveEntry0.getMethod());
      assertEquals(0, jarArchiveEntry0.getVersionRequired());
      assertNotNull(jarArchiveEntry0);
      assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      
      jarArchiveEntry0.setComment("K@<[LT~&.8W\"0\"P$");
      assertEquals(0, jarArchiveEntry0.getInternalAttributes());
      assertEquals(0, jarArchiveEntry0.getPlatform());
      assertFalse(jarArchiveEntry0.isUnixSymlink());
      assertFalse(jarArchiveEntry0.isDirectory());
      assertEquals((-1L), jarArchiveEntry0.getDataOffset());
      assertEquals((-1L), jarArchiveEntry0.getSize());
      assertFalse(jarArchiveEntry0.isStreamContiguous());
      assertEquals(0, jarArchiveEntry0.getRawFlag());
      assertEquals((-1L), jarArchiveEntry0.getCrc());
      assertEquals(0, jarArchiveEntry0.getUnixMode());
      assertEquals("K@<[LT~&.8W\"0\"P$", jarArchiveEntry0.toString());
      assertEquals("K@<[LT~&.8W\"0\"P$", jarArchiveEntry0.getName());
      assertEquals(0, jarArchiveEntry0.getVersionMadeBy());
      assertEquals((-1L), jarArchiveEntry0.getCompressedSize());
      assertEquals("K@<[LT~&.8W\"0\"P$", jarArchiveEntry0.getComment());
      assertEquals(0L, jarArchiveEntry0.getExternalAttributes());
      assertEquals((-1), jarArchiveEntry0.getMethod());
      assertEquals(0, jarArchiveEntry0.getVersionRequired());
      assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      
      ZipArchiveOutputStream.UnicodeExtraFieldPolicy zipArchiveOutputStream_UnicodeExtraFieldPolicy0 = ZipArchiveOutputStream.UnicodeExtraFieldPolicy.NOT_ENCODEABLE;
      assertEquals("not encodeable", zipArchiveOutputStream_UnicodeExtraFieldPolicy0.toString());
      assertNotNull(zipArchiveOutputStream_UnicodeExtraFieldPolicy0);
      
      MockFile mockFile0 = new MockFile("K@<[LT~&.8W\"0\"P$");
      assertNotNull(mockFile0);
      
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(mockFile0);
      assertTrue(mockFile0.isFile());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.canExecute());
      assertEquals("K@<[LT~&.8W\"0\"P$", mockFile0.toString());
      assertFalse(mockFile0.isAbsolute());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.canWrite());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals("K@<[LT~&.8W\"0\"P$", mockFile0.getName());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.exists());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertFalse(zipArchiveOutputStream0.isSeekable());
      assertNotNull(zipArchiveOutputStream0);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      
      ZipArchiveOutputStream.UnicodeExtraFieldPolicy zipArchiveOutputStream_UnicodeExtraFieldPolicy1 = ZipArchiveOutputStream.UnicodeExtraFieldPolicy.ALWAYS;
      assertFalse(zipArchiveOutputStream_UnicodeExtraFieldPolicy1.equals((Object)zipArchiveOutputStream_UnicodeExtraFieldPolicy0));
      assertEquals("always", zipArchiveOutputStream_UnicodeExtraFieldPolicy1.toString());
      assertNotNull(zipArchiveOutputStream_UnicodeExtraFieldPolicy1);
      assertNotSame(zipArchiveOutputStream_UnicodeExtraFieldPolicy1, zipArchiveOutputStream_UnicodeExtraFieldPolicy0);
      
      zipArchiveOutputStream0.setCreateUnicodeExtraFields(zipArchiveOutputStream_UnicodeExtraFieldPolicy1);
      assertFalse(zipArchiveOutputStream_UnicodeExtraFieldPolicy1.equals((Object)zipArchiveOutputStream_UnicodeExtraFieldPolicy0));
      assertTrue(mockFile0.isFile());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.canExecute());
      assertEquals("K@<[LT~&.8W\"0\"P$", mockFile0.toString());
      assertFalse(mockFile0.isAbsolute());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.canWrite());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals("K@<[LT~&.8W\"0\"P$", mockFile0.getName());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.exists());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertFalse(zipArchiveOutputStream0.isSeekable());
      assertEquals("always", zipArchiveOutputStream_UnicodeExtraFieldPolicy1.toString());
      assertNotSame(zipArchiveOutputStream_UnicodeExtraFieldPolicy1, zipArchiveOutputStream_UnicodeExtraFieldPolicy0);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      
      zipArchiveOutputStream0.putArchiveEntry(jarArchiveEntry0);
      assertEquals(0, jarArchiveEntry0.getInternalAttributes());
      assertEquals(0, jarArchiveEntry0.getPlatform());
      assertFalse(jarArchiveEntry0.isUnixSymlink());
      assertFalse(jarArchiveEntry0.isDirectory());
      assertEquals(8, jarArchiveEntry0.getMethod());
      assertEquals((-1L), jarArchiveEntry0.getDataOffset());
      assertEquals((-1L), jarArchiveEntry0.getSize());
      assertFalse(jarArchiveEntry0.isStreamContiguous());
      assertEquals(0, jarArchiveEntry0.getRawFlag());
      assertEquals((-1L), jarArchiveEntry0.getCrc());
      assertEquals(0, jarArchiveEntry0.getUnixMode());
      assertEquals("K@<[LT~&.8W\"0\"P$", jarArchiveEntry0.toString());
      assertEquals("K@<[LT~&.8W\"0\"P$", jarArchiveEntry0.getName());
      assertEquals(0, jarArchiveEntry0.getVersionMadeBy());
      assertEquals((-1L), jarArchiveEntry0.getCompressedSize());
      assertEquals("K@<[LT~&.8W\"0\"P$", jarArchiveEntry0.getComment());
      assertEquals(0L, jarArchiveEntry0.getExternalAttributes());
      assertEquals(0, jarArchiveEntry0.getVersionRequired());
      assertTrue(mockFile0.isFile());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.canExecute());
      assertEquals("K@<[LT~&.8W\"0\"P$", mockFile0.toString());
      assertFalse(mockFile0.isAbsolute());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.canWrite());
      assertFalse(mockFile0.isDirectory());
      assertEquals(96L, mockFile0.length());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals("K@<[LT~&.8W\"0\"P$", mockFile0.getName());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.exists());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertFalse(zipArchiveOutputStream0.isSeekable());
      assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      
      Zip64Mode zip64Mode0 = Zip64Mode.Always;
      zipArchiveOutputStream0.setUseZip64(zip64Mode0);
      assertTrue(mockFile0.isFile());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.canExecute());
      assertEquals("K@<[LT~&.8W\"0\"P$", mockFile0.toString());
      assertFalse(mockFile0.isAbsolute());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.canWrite());
      assertFalse(mockFile0.isDirectory());
      assertEquals(96L, mockFile0.length());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals("K@<[LT~&.8W\"0\"P$", mockFile0.getName());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.exists());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertFalse(zipArchiveOutputStream0.isSeekable());
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      
      zipArchiveOutputStream0.setEncoding("Z");
      assertTrue(mockFile0.isFile());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.canExecute());
      assertEquals("K@<[LT~&.8W\"0\"P$", mockFile0.toString());
      assertFalse(mockFile0.isAbsolute());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.canWrite());
      assertFalse(mockFile0.isDirectory());
      assertEquals(96L, mockFile0.length());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals("K@<[LT~&.8W\"0\"P$", mockFile0.getName());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.exists());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals("Z", zipArchiveOutputStream0.getEncoding());
      assertFalse(zipArchiveOutputStream0.isSeekable());
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      
//      try { 
        zipArchiveOutputStream0.writeCentralFileHeader(jarArchiveEntry0);
//        fail("Expecting exception: UnsupportedEncodingException");
      
//      } catch(UnsupportedEncodingException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      JarArchiveEntry jarArchiveEntry0 = new JarArchiveEntry("DZRECTO~RY");
      assertEquals(0, jarArchiveEntry0.getRawFlag());
      assertEquals("DZRECTO~RY", jarArchiveEntry0.toString());
      assertEquals(0, jarArchiveEntry0.getUnixMode());
      assertEquals(0, jarArchiveEntry0.getVersionMadeBy());
      assertEquals((-1L), jarArchiveEntry0.getSize());
      assertEquals(0, jarArchiveEntry0.getVersionRequired());
      assertEquals((-1L), jarArchiveEntry0.getCrc());
      assertEquals("DZRECTO~RY", jarArchiveEntry0.getName());
      assertEquals((-1L), jarArchiveEntry0.getDataOffset());
      assertFalse(jarArchiveEntry0.isUnixSymlink());
      assertEquals(0, jarArchiveEntry0.getInternalAttributes());
      assertEquals(0, jarArchiveEntry0.getPlatform());
      assertNull(jarArchiveEntry0.getComment());
      assertFalse(jarArchiveEntry0.isDirectory());
      assertFalse(jarArchiveEntry0.isStreamContiguous());
      assertEquals((-1L), jarArchiveEntry0.getCompressedSize());
      assertEquals(0L, jarArchiveEntry0.getExternalAttributes());
      assertEquals((-1), jarArchiveEntry0.getMethod());
      assertNotNull(jarArchiveEntry0);
      assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      
      MockFile mockFile0 = new MockFile("DZRECTO~RY", "DZRECTO~RY");
      assertNotNull(mockFile0);
      
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(mockFile0);
      assertEquals("DZRECTO~RY", mockFile0.getName());
      assertFalse(mockFile0.isDirectory());
      assertTrue(mockFile0.canWrite());
      assertTrue(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals("/experiment/DZRECTO~RY/DZRECTO~RY", mockFile0.toString());
      assertFalse(mockFile0.isHidden());
      assertEquals("/experiment/DZRECTO~RY", mockFile0.getParent());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.length());
      assertTrue(mockFile0.isFile());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.exists());
      assertTrue(mockFile0.canExecute());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertFalse(zipArchiveOutputStream0.isSeekable());
      assertNotNull(zipArchiveOutputStream0);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      
      zipArchiveOutputStream0.putArchiveEntry(jarArchiveEntry0);
      assertEquals(0, jarArchiveEntry0.getRawFlag());
      assertEquals("DZRECTO~RY", jarArchiveEntry0.toString());
      assertEquals(0, jarArchiveEntry0.getUnixMode());
      assertEquals(0, jarArchiveEntry0.getVersionMadeBy());
      assertEquals((-1L), jarArchiveEntry0.getSize());
      assertEquals(0, jarArchiveEntry0.getVersionRequired());
      assertEquals((-1L), jarArchiveEntry0.getCrc());
      assertEquals("DZRECTO~RY", jarArchiveEntry0.getName());
      assertEquals((-1L), jarArchiveEntry0.getDataOffset());
      assertFalse(jarArchiveEntry0.isUnixSymlink());
      assertEquals(0, jarArchiveEntry0.getInternalAttributes());
      assertEquals(0, jarArchiveEntry0.getPlatform());
      assertEquals(8, jarArchiveEntry0.getMethod());
      assertNull(jarArchiveEntry0.getComment());
      assertFalse(jarArchiveEntry0.isDirectory());
      assertFalse(jarArchiveEntry0.isStreamContiguous());
      assertEquals((-1L), jarArchiveEntry0.getCompressedSize());
      assertEquals(0L, jarArchiveEntry0.getExternalAttributes());
      assertEquals("DZRECTO~RY", mockFile0.getName());
      assertFalse(mockFile0.isDirectory());
      assertTrue(mockFile0.canWrite());
      assertTrue(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals("/experiment/DZRECTO~RY/DZRECTO~RY", mockFile0.toString());
      assertFalse(mockFile0.isHidden());
      assertEquals("/experiment/DZRECTO~RY", mockFile0.getParent());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.isFile());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.exists());
      assertTrue(mockFile0.canExecute());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(40L, mockFile0.length());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertFalse(zipArchiveOutputStream0.isSeekable());
      assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(mockFile0);
      assertNotNull(mockFileInputStream0);
      
      long long0 = mockFileInputStream0.skip(4294967295L);
      assertEquals("DZRECTO~RY", mockFile0.getName());
      assertFalse(mockFile0.isDirectory());
      assertTrue(mockFile0.canWrite());
      assertTrue(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals("/experiment/DZRECTO~RY/DZRECTO~RY", mockFile0.toString());
      assertFalse(mockFile0.isHidden());
      assertEquals("/experiment/DZRECTO~RY", mockFile0.getParent());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.isFile());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.exists());
      assertTrue(mockFile0.canExecute());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(40L, mockFile0.length());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(41, mockFileInputStream0.available());
      assertEquals(4294967295L, long0);
      
      // Undeclared exception!
//      try { 
        zipArchiveOutputStream0.addRawArchiveEntry(jarArchiveEntry0, mockFileInputStream0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Position in the file cannot be negative
//         //
//         verifyException("org.evosuite.runtime.vfs.VFile", e);
//      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      File file0 = MockFile.createTempFile("\"IT9\u0006", "\"IT9\u0006");
      assertEquals("/tmp", file0.getParent());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      assertTrue(file0.canExecute());
      assertTrue(file0.isAbsolute());
      assertEquals(0L, file0.getFreeSpace());
      assertTrue(file0.canWrite());
      assertFalse(file0.isDirectory());
      assertEquals(0L, file0.length());
      assertEquals("\"IT9\u00060\"IT9\u0006", file0.getName());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals("/tmp/\"IT9\u00060\"IT9\u0006", file0.toString());
      assertEquals(1392409281320L, file0.lastModified());
      assertTrue(file0.canRead());
      assertTrue(file0.exists());
      assertTrue(file0.isFile());
      assertNotNull(file0);
      
      ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
      assertEquals((-1), zipArchiveEntry0.getMethod());
      assertNull(zipArchiveEntry0.getComment());
      assertEquals(0, zipArchiveEntry0.getPlatform());
      assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
      assertFalse(zipArchiveEntry0.isStreamContiguous());
      assertFalse(zipArchiveEntry0.isDirectory());
      assertEquals((-1L), zipArchiveEntry0.getSize());
      assertEquals((-1L), zipArchiveEntry0.getCompressedSize());
      assertEquals("", zipArchiveEntry0.getName());
      assertEquals(0, zipArchiveEntry0.getVersionRequired());
      assertEquals((-1L), zipArchiveEntry0.getCrc());
      assertEquals(0, zipArchiveEntry0.getRawFlag());
      assertEquals("", zipArchiveEntry0.toString());
      assertEquals(0, zipArchiveEntry0.getVersionMadeBy());
      assertEquals(0, zipArchiveEntry0.getUnixMode());
      assertEquals((-1L), zipArchiveEntry0.getDataOffset());
      assertFalse(zipArchiveEntry0.isUnixSymlink());
      assertEquals(0, zipArchiveEntry0.getInternalAttributes());
      assertNotNull(zipArchiveEntry0);
      assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(file0);
      assertEquals("/tmp", file0.getParent());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      assertTrue(file0.canExecute());
      assertTrue(file0.isAbsolute());
      assertEquals(0L, file0.getFreeSpace());
      assertTrue(file0.canWrite());
      assertFalse(file0.isDirectory());
      assertEquals(0L, file0.length());
      assertEquals("\"IT9\u00060\"IT9\u0006", file0.getName());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals("/tmp/\"IT9\u00060\"IT9\u0006", file0.toString());
      assertEquals(1392409281320L, file0.lastModified());
      assertTrue(file0.canRead());
      assertTrue(file0.exists());
      assertTrue(file0.isFile());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertTrue(zipArchiveOutputStream0.isSeekable());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertNotNull(zipArchiveOutputStream0);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      
      zipArchiveEntry0.setComment("\"IT9\u0006");
      assertEquals((-1), zipArchiveEntry0.getMethod());
      assertEquals(0, zipArchiveEntry0.getPlatform());
      assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
      assertFalse(zipArchiveEntry0.isStreamContiguous());
      assertFalse(zipArchiveEntry0.isDirectory());
      assertEquals((-1L), zipArchiveEntry0.getSize());
      assertEquals((-1L), zipArchiveEntry0.getCompressedSize());
      assertEquals("", zipArchiveEntry0.getName());
      assertEquals(0, zipArchiveEntry0.getVersionRequired());
      assertEquals((-1L), zipArchiveEntry0.getCrc());
      assertEquals(0, zipArchiveEntry0.getRawFlag());
      assertEquals("", zipArchiveEntry0.toString());
      assertEquals(0, zipArchiveEntry0.getVersionMadeBy());
      assertEquals(0, zipArchiveEntry0.getUnixMode());
      assertEquals((-1L), zipArchiveEntry0.getDataOffset());
      assertFalse(zipArchiveEntry0.isUnixSymlink());
      assertEquals("\"IT9\u0006", zipArchiveEntry0.getComment());
      assertEquals(0, zipArchiveEntry0.getInternalAttributes());
      assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      
      zipArchiveOutputStream0.setMethod(0);
      assertEquals("/tmp", file0.getParent());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      assertTrue(file0.canExecute());
      assertTrue(file0.isAbsolute());
      assertEquals(0L, file0.getFreeSpace());
      assertTrue(file0.canWrite());
      assertFalse(file0.isDirectory());
      assertEquals(0L, file0.length());
      assertEquals("\"IT9\u00060\"IT9\u0006", file0.getName());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals("/tmp/\"IT9\u00060\"IT9\u0006", file0.toString());
      assertEquals(1392409281320L, file0.lastModified());
      assertTrue(file0.canRead());
      assertTrue(file0.exists());
      assertTrue(file0.isFile());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertTrue(zipArchiveOutputStream0.isSeekable());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      
      Zip64Mode zip64Mode0 = Zip64Mode.Always;
      zipArchiveOutputStream0.setUseZip64(zip64Mode0);
      assertEquals("/tmp", file0.getParent());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      assertTrue(file0.canExecute());
      assertTrue(file0.isAbsolute());
      assertEquals(0L, file0.getFreeSpace());
      assertTrue(file0.canWrite());
      assertFalse(file0.isDirectory());
      assertEquals(0L, file0.length());
      assertEquals("\"IT9\u00060\"IT9\u0006", file0.getName());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals("/tmp/\"IT9\u00060\"IT9\u0006", file0.toString());
      assertEquals(1392409281320L, file0.lastModified());
      assertTrue(file0.canRead());
      assertTrue(file0.exists());
      assertTrue(file0.isFile());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertTrue(zipArchiveOutputStream0.isSeekable());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)53;
      byteArray0[1] = (byte)9;
      zipArchiveEntry0.setName("\"IT9\u0006", byteArray0);
      assertEquals((-1), zipArchiveEntry0.getMethod());
      assertEquals(0, zipArchiveEntry0.getPlatform());
      assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
      assertFalse(zipArchiveEntry0.isStreamContiguous());
      assertFalse(zipArchiveEntry0.isDirectory());
      assertEquals((-1L), zipArchiveEntry0.getSize());
      assertEquals((-1L), zipArchiveEntry0.getCompressedSize());
      assertEquals(0, zipArchiveEntry0.getVersionRequired());
      assertEquals("\"IT9\u0006", zipArchiveEntry0.getName());
      assertEquals((-1L), zipArchiveEntry0.getCrc());
      assertEquals(0, zipArchiveEntry0.getRawFlag());
      assertEquals(0, zipArchiveEntry0.getVersionMadeBy());
      assertEquals(0, zipArchiveEntry0.getUnixMode());
      assertEquals("\"IT9\u0006", zipArchiveEntry0.toString());
      assertEquals((-1L), zipArchiveEntry0.getDataOffset());
      assertFalse(zipArchiveEntry0.isUnixSymlink());
      assertEquals("\"IT9\u0006", zipArchiveEntry0.getComment());
      assertEquals(0, zipArchiveEntry0.getInternalAttributes());
      assertEquals(2, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)53, (byte)9}, byteArray0);
      assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      
      zipArchiveOutputStream0.putArchiveEntry(zipArchiveEntry0);
      assertEquals("/tmp", file0.getParent());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      assertTrue(file0.canExecute());
      assertTrue(file0.isAbsolute());
      assertEquals(0L, file0.getFreeSpace());
      assertTrue(file0.canWrite());
      assertFalse(file0.isDirectory());
      assertEquals(0L, file0.length());
      assertEquals("\"IT9\u00060\"IT9\u0006", file0.getName());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals("/tmp/\"IT9\u00060\"IT9\u0006", file0.toString());
      assertEquals(1392409281320L, file0.lastModified());
      assertTrue(file0.canRead());
      assertTrue(file0.exists());
      assertTrue(file0.isFile());
      assertEquals(0, zipArchiveEntry0.getMethod());
      assertEquals(0, zipArchiveEntry0.getPlatform());
      assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
      assertFalse(zipArchiveEntry0.isStreamContiguous());
      assertFalse(zipArchiveEntry0.isDirectory());
      assertEquals((-1L), zipArchiveEntry0.getSize());
      assertEquals((-1L), zipArchiveEntry0.getCompressedSize());
      assertEquals(0, zipArchiveEntry0.getVersionRequired());
      assertEquals("\"IT9\u0006", zipArchiveEntry0.getName());
      assertEquals((-1L), zipArchiveEntry0.getCrc());
      assertEquals(0, zipArchiveEntry0.getRawFlag());
      assertEquals(0, zipArchiveEntry0.getVersionMadeBy());
      assertEquals(0, zipArchiveEntry0.getUnixMode());
      assertEquals("\"IT9\u0006", zipArchiveEntry0.toString());
      assertEquals((-1L), zipArchiveEntry0.getDataOffset());
      assertFalse(zipArchiveEntry0.isUnixSymlink());
      assertEquals("\"IT9\u0006", zipArchiveEntry0.getComment());
      assertEquals(0, zipArchiveEntry0.getInternalAttributes());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertTrue(zipArchiveOutputStream0.isSeekable());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      
      zipArchiveOutputStream0.putArchiveEntry(zipArchiveEntry0);
      assertEquals("/tmp", file0.getParent());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      assertTrue(file0.canExecute());
      assertTrue(file0.isAbsolute());
      assertEquals(0L, file0.getFreeSpace());
      assertTrue(file0.canWrite());
      assertFalse(file0.isDirectory());
      assertEquals(0L, file0.length());
      assertEquals("\"IT9\u00060\"IT9\u0006", file0.getName());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals("/tmp/\"IT9\u00060\"IT9\u0006", file0.toString());
      assertEquals(1392409281320L, file0.lastModified());
      assertTrue(file0.canRead());
      assertTrue(file0.exists());
      assertTrue(file0.isFile());
      assertEquals(0, zipArchiveEntry0.getMethod());
      assertEquals(0, zipArchiveEntry0.getPlatform());
      assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
      assertFalse(zipArchiveEntry0.isStreamContiguous());
      assertFalse(zipArchiveEntry0.isDirectory());
      assertEquals(0L, zipArchiveEntry0.getSize());
      assertEquals(0L, zipArchiveEntry0.getCompressedSize());
      assertEquals(0, zipArchiveEntry0.getVersionRequired());
      assertEquals("\"IT9\u0006", zipArchiveEntry0.getName());
      assertEquals(0L, zipArchiveEntry0.getCrc());
      assertEquals(0, zipArchiveEntry0.getRawFlag());
      assertEquals(0, zipArchiveEntry0.getVersionMadeBy());
      assertEquals(0, zipArchiveEntry0.getUnixMode());
      assertEquals("\"IT9\u0006", zipArchiveEntry0.toString());
      assertEquals((-1L), zipArchiveEntry0.getDataOffset());
      assertFalse(zipArchiveEntry0.isUnixSymlink());
      assertEquals("\"IT9\u0006", zipArchiveEntry0.getComment());
      assertEquals(0, zipArchiveEntry0.getInternalAttributes());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertTrue(zipArchiveOutputStream0.isSeekable());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      
      zipArchiveOutputStream0.closeArchiveEntry();
      assertEquals("/tmp", file0.getParent());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      assertTrue(file0.canExecute());
      assertTrue(file0.isAbsolute());
      assertEquals(0L, file0.getFreeSpace());
      assertTrue(file0.canWrite());
      assertFalse(file0.isDirectory());
      assertEquals(0L, file0.length());
      assertEquals("\"IT9\u00060\"IT9\u0006", file0.getName());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals("/tmp/\"IT9\u00060\"IT9\u0006", file0.toString());
      assertEquals(1392409281320L, file0.lastModified());
      assertTrue(file0.canRead());
      assertTrue(file0.exists());
      assertTrue(file0.isFile());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertTrue(zipArchiveOutputStream0.isSeekable());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      File file0 = MockFile.createTempFile("9[SOzKTTB.j9(", "9[SOzKTTB.j9(");
      assertTrue(file0.canRead());
      assertTrue(file0.isFile());
      assertTrue(file0.canWrite());
      assertTrue(file0.canExecute());
      assertTrue(file0.isAbsolute());
      assertEquals("/tmp", file0.getParent());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals(1392409281320L, file0.lastModified());
      assertTrue(file0.exists());
      assertFalse(file0.isDirectory());
      assertEquals("/tmp/9[SOzKTTB.j9(09[SOzKTTB.j9(", file0.toString());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(0L, file0.length());
      assertEquals("9[SOzKTTB.j9(09[SOzKTTB.j9(", file0.getName());
      assertNotNull(file0);
      
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(file0);
      assertTrue(file0.canRead());
      assertTrue(file0.isFile());
      assertTrue(file0.canWrite());
      assertTrue(file0.canExecute());
      assertTrue(file0.isAbsolute());
      assertEquals("/tmp", file0.getParent());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals(1392409281320L, file0.lastModified());
      assertTrue(file0.exists());
      assertFalse(file0.isDirectory());
      assertEquals("/tmp/9[SOzKTTB.j9(09[SOzKTTB.j9(", file0.toString());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(0L, file0.length());
      assertEquals("9[SOzKTTB.j9(09[SOzKTTB.j9(", file0.getName());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertTrue(zipArchiveOutputStream0.isSeekable());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertNotNull(zipArchiveOutputStream0);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      
      ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry("9[SOzKTTB.j9(");
      assertEquals((-1L), zipArchiveEntry0.getDataOffset());
      assertEquals(0, zipArchiveEntry0.getVersionMadeBy());
      assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
      assertEquals((-1L), zipArchiveEntry0.getSize());
      assertEquals(0, zipArchiveEntry0.getUnixMode());
      assertEquals("9[SOzKTTB.j9(", zipArchiveEntry0.toString());
      assertEquals((-1L), zipArchiveEntry0.getCrc());
      assertNull(zipArchiveEntry0.getComment());
      assertFalse(zipArchiveEntry0.isStreamContiguous());
      assertEquals("9[SOzKTTB.j9(", zipArchiveEntry0.getName());
      assertFalse(zipArchiveEntry0.isDirectory());
      assertFalse(zipArchiveEntry0.isUnixSymlink());
      assertEquals(0, zipArchiveEntry0.getInternalAttributes());
      assertEquals((-1L), zipArchiveEntry0.getCompressedSize());
      assertEquals((-1), zipArchiveEntry0.getMethod());
      assertEquals(0, zipArchiveEntry0.getPlatform());
      assertEquals(0, zipArchiveEntry0.getRawFlag());
      assertEquals(0, zipArchiveEntry0.getVersionRequired());
      assertNotNull(zipArchiveEntry0);
      assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      
      zipArchiveOutputStream0.putArchiveEntry(zipArchiveEntry0);
      assertTrue(file0.canRead());
      assertTrue(file0.isFile());
      assertTrue(file0.canWrite());
      assertTrue(file0.canExecute());
      assertTrue(file0.isAbsolute());
      assertEquals("/tmp", file0.getParent());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals(1392409281320L, file0.lastModified());
      assertTrue(file0.exists());
      assertFalse(file0.isDirectory());
      assertEquals("/tmp/9[SOzKTTB.j9(09[SOzKTTB.j9(", file0.toString());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(0L, file0.length());
      assertEquals("9[SOzKTTB.j9(09[SOzKTTB.j9(", file0.getName());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertTrue(zipArchiveOutputStream0.isSeekable());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals((-1L), zipArchiveEntry0.getDataOffset());
      assertEquals(0, zipArchiveEntry0.getVersionMadeBy());
      assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
      assertEquals((-1L), zipArchiveEntry0.getSize());
      assertEquals(0, zipArchiveEntry0.getUnixMode());
      assertEquals("9[SOzKTTB.j9(", zipArchiveEntry0.toString());
      assertEquals((-1L), zipArchiveEntry0.getCrc());
      assertNull(zipArchiveEntry0.getComment());
      assertFalse(zipArchiveEntry0.isStreamContiguous());
      assertEquals("9[SOzKTTB.j9(", zipArchiveEntry0.getName());
      assertFalse(zipArchiveEntry0.isDirectory());
      assertFalse(zipArchiveEntry0.isUnixSymlink());
      assertEquals(8, zipArchiveEntry0.getMethod());
      assertEquals(0, zipArchiveEntry0.getInternalAttributes());
      assertEquals((-1L), zipArchiveEntry0.getCompressedSize());
      assertEquals(0, zipArchiveEntry0.getPlatform());
      assertEquals(0, zipArchiveEntry0.getRawFlag());
      assertEquals(0, zipArchiveEntry0.getVersionRequired());
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      
      zipArchiveOutputStream0.putArchiveEntry(zipArchiveEntry0);
      assertTrue(file0.canRead());
      assertTrue(file0.isFile());
      assertTrue(file0.canWrite());
      assertTrue(file0.canExecute());
      assertTrue(file0.isAbsolute());
      assertEquals("/tmp", file0.getParent());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals(1392409281320L, file0.lastModified());
      assertTrue(file0.exists());
      assertFalse(file0.isDirectory());
      assertEquals("/tmp/9[SOzKTTB.j9(09[SOzKTTB.j9(", file0.toString());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(0L, file0.length());
      assertEquals("9[SOzKTTB.j9(09[SOzKTTB.j9(", file0.getName());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertTrue(zipArchiveOutputStream0.isSeekable());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals((-1L), zipArchiveEntry0.getDataOffset());
      assertEquals(0, zipArchiveEntry0.getVersionMadeBy());
      assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
      assertEquals(0L, zipArchiveEntry0.getSize());
      assertEquals(0, zipArchiveEntry0.getUnixMode());
      assertEquals("9[SOzKTTB.j9(", zipArchiveEntry0.toString());
      assertEquals(0L, zipArchiveEntry0.getCrc());
      assertNull(zipArchiveEntry0.getComment());
      assertFalse(zipArchiveEntry0.isStreamContiguous());
      assertEquals("9[SOzKTTB.j9(", zipArchiveEntry0.getName());
      assertFalse(zipArchiveEntry0.isDirectory());
      assertFalse(zipArchiveEntry0.isUnixSymlink());
      assertEquals(8, zipArchiveEntry0.getMethod());
      assertEquals(2L, zipArchiveEntry0.getCompressedSize());
      assertEquals(0, zipArchiveEntry0.getInternalAttributes());
      assertEquals(0, zipArchiveEntry0.getPlatform());
      assertEquals(0, zipArchiveEntry0.getRawFlag());
      assertEquals(0, zipArchiveEntry0.getVersionRequired());
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      
      zipArchiveOutputStream0.putArchiveEntry(zipArchiveEntry0);
      assertTrue(file0.canRead());
      assertTrue(file0.isFile());
      assertTrue(file0.canWrite());
      assertTrue(file0.canExecute());
      assertTrue(file0.isAbsolute());
      assertEquals("/tmp", file0.getParent());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals(1392409281320L, file0.lastModified());
      assertTrue(file0.exists());
      assertFalse(file0.isDirectory());
      assertEquals("/tmp/9[SOzKTTB.j9(09[SOzKTTB.j9(", file0.toString());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(0L, file0.length());
      assertEquals("9[SOzKTTB.j9(09[SOzKTTB.j9(", file0.getName());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertTrue(zipArchiveOutputStream0.isSeekable());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals((-1L), zipArchiveEntry0.getDataOffset());
      assertEquals(0, zipArchiveEntry0.getVersionMadeBy());
      assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
      assertEquals(0L, zipArchiveEntry0.getSize());
      assertEquals(0, zipArchiveEntry0.getUnixMode());
      assertEquals("9[SOzKTTB.j9(", zipArchiveEntry0.toString());
      assertEquals(0L, zipArchiveEntry0.getCrc());
      assertNull(zipArchiveEntry0.getComment());
      assertFalse(zipArchiveEntry0.isStreamContiguous());
      assertEquals("9[SOzKTTB.j9(", zipArchiveEntry0.getName());
      assertFalse(zipArchiveEntry0.isDirectory());
      assertFalse(zipArchiveEntry0.isUnixSymlink());
      assertEquals(8, zipArchiveEntry0.getMethod());
      assertEquals(2L, zipArchiveEntry0.getCompressedSize());
      assertEquals(0, zipArchiveEntry0.getInternalAttributes());
      assertEquals(0, zipArchiveEntry0.getPlatform());
      assertEquals(0, zipArchiveEntry0.getRawFlag());
      assertEquals(0, zipArchiveEntry0.getVersionRequired());
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      
      zipArchiveOutputStream0.putArchiveEntry(zipArchiveEntry0);
      assertTrue(file0.canRead());
      assertTrue(file0.isFile());
      assertTrue(file0.canWrite());
      assertTrue(file0.canExecute());
      assertTrue(file0.isAbsolute());
      assertEquals("/tmp", file0.getParent());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals(1392409281320L, file0.lastModified());
      assertTrue(file0.exists());
      assertFalse(file0.isDirectory());
      assertEquals("/tmp/9[SOzKTTB.j9(09[SOzKTTB.j9(", file0.toString());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(0L, file0.length());
      assertEquals("9[SOzKTTB.j9(09[SOzKTTB.j9(", file0.getName());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertTrue(zipArchiveOutputStream0.isSeekable());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals((-1L), zipArchiveEntry0.getDataOffset());
      assertEquals(0, zipArchiveEntry0.getVersionMadeBy());
      assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
      assertEquals(0L, zipArchiveEntry0.getSize());
      assertEquals(0, zipArchiveEntry0.getUnixMode());
      assertEquals("9[SOzKTTB.j9(", zipArchiveEntry0.toString());
      assertEquals(0L, zipArchiveEntry0.getCrc());
      assertNull(zipArchiveEntry0.getComment());
      assertFalse(zipArchiveEntry0.isStreamContiguous());
      assertEquals("9[SOzKTTB.j9(", zipArchiveEntry0.getName());
      assertFalse(zipArchiveEntry0.isDirectory());
      assertFalse(zipArchiveEntry0.isUnixSymlink());
      assertEquals(8, zipArchiveEntry0.getMethod());
      assertEquals(2L, zipArchiveEntry0.getCompressedSize());
      assertEquals(0, zipArchiveEntry0.getInternalAttributes());
      assertEquals(0, zipArchiveEntry0.getPlatform());
      assertEquals(0, zipArchiveEntry0.getRawFlag());
      assertEquals(0, zipArchiveEntry0.getVersionRequired());
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      
      zipArchiveOutputStream0.putArchiveEntry(zipArchiveEntry0);
      assertTrue(file0.canRead());
      assertTrue(file0.isFile());
      assertTrue(file0.canWrite());
      assertTrue(file0.canExecute());
      assertTrue(file0.isAbsolute());
      assertEquals("/tmp", file0.getParent());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals(1392409281320L, file0.lastModified());
      assertTrue(file0.exists());
      assertFalse(file0.isDirectory());
      assertEquals("/tmp/9[SOzKTTB.j9(09[SOzKTTB.j9(", file0.toString());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(0L, file0.length());
      assertEquals("9[SOzKTTB.j9(09[SOzKTTB.j9(", file0.getName());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertTrue(zipArchiveOutputStream0.isSeekable());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals((-1L), zipArchiveEntry0.getDataOffset());
      assertEquals(0, zipArchiveEntry0.getVersionMadeBy());
      assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
      assertEquals(0L, zipArchiveEntry0.getSize());
      assertEquals(0, zipArchiveEntry0.getUnixMode());
      assertEquals("9[SOzKTTB.j9(", zipArchiveEntry0.toString());
      assertEquals(0L, zipArchiveEntry0.getCrc());
      assertNull(zipArchiveEntry0.getComment());
      assertFalse(zipArchiveEntry0.isStreamContiguous());
      assertEquals("9[SOzKTTB.j9(", zipArchiveEntry0.getName());
      assertFalse(zipArchiveEntry0.isDirectory());
      assertFalse(zipArchiveEntry0.isUnixSymlink());
      assertEquals(8, zipArchiveEntry0.getMethod());
      assertEquals(2L, zipArchiveEntry0.getCompressedSize());
      assertEquals(0, zipArchiveEntry0.getInternalAttributes());
      assertEquals(0, zipArchiveEntry0.getPlatform());
      assertEquals(0, zipArchiveEntry0.getRawFlag());
      assertEquals(0, zipArchiveEntry0.getVersionRequired());
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      
      zipArchiveOutputStream0.putArchiveEntry(zipArchiveEntry0);
      assertTrue(file0.canRead());
      assertTrue(file0.isFile());
      assertTrue(file0.canWrite());
      assertTrue(file0.canExecute());
      assertTrue(file0.isAbsolute());
      assertEquals("/tmp", file0.getParent());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals(1392409281320L, file0.lastModified());
      assertTrue(file0.exists());
      assertFalse(file0.isDirectory());
      assertEquals("/tmp/9[SOzKTTB.j9(09[SOzKTTB.j9(", file0.toString());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(0L, file0.length());
      assertEquals("9[SOzKTTB.j9(09[SOzKTTB.j9(", file0.getName());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertTrue(zipArchiveOutputStream0.isSeekable());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals((-1L), zipArchiveEntry0.getDataOffset());
      assertEquals(0, zipArchiveEntry0.getVersionMadeBy());
      assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
      assertEquals(0L, zipArchiveEntry0.getSize());
      assertEquals(0, zipArchiveEntry0.getUnixMode());
      assertEquals("9[SOzKTTB.j9(", zipArchiveEntry0.toString());
      assertEquals(0L, zipArchiveEntry0.getCrc());
      assertNull(zipArchiveEntry0.getComment());
      assertFalse(zipArchiveEntry0.isStreamContiguous());
      assertEquals("9[SOzKTTB.j9(", zipArchiveEntry0.getName());
      assertFalse(zipArchiveEntry0.isDirectory());
      assertFalse(zipArchiveEntry0.isUnixSymlink());
      assertEquals(8, zipArchiveEntry0.getMethod());
      assertEquals(2L, zipArchiveEntry0.getCompressedSize());
      assertEquals(0, zipArchiveEntry0.getInternalAttributes());
      assertEquals(0, zipArchiveEntry0.getPlatform());
      assertEquals(0, zipArchiveEntry0.getRawFlag());
      assertEquals(0, zipArchiveEntry0.getVersionRequired());
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      
      zipArchiveOutputStream0.putArchiveEntry(zipArchiveEntry0);
      assertTrue(file0.canRead());
      assertTrue(file0.isFile());
      assertTrue(file0.canWrite());
      assertTrue(file0.canExecute());
      assertTrue(file0.isAbsolute());
      assertEquals("/tmp", file0.getParent());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals(1392409281320L, file0.lastModified());
      assertTrue(file0.exists());
      assertFalse(file0.isDirectory());
      assertEquals("/tmp/9[SOzKTTB.j9(09[SOzKTTB.j9(", file0.toString());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(0L, file0.length());
      assertEquals("9[SOzKTTB.j9(09[SOzKTTB.j9(", file0.getName());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertTrue(zipArchiveOutputStream0.isSeekable());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals((-1L), zipArchiveEntry0.getDataOffset());
      assertEquals(0, zipArchiveEntry0.getVersionMadeBy());
      assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
      assertEquals(0L, zipArchiveEntry0.getSize());
      assertEquals(0, zipArchiveEntry0.getUnixMode());
      assertEquals("9[SOzKTTB.j9(", zipArchiveEntry0.toString());
      assertEquals(0L, zipArchiveEntry0.getCrc());
      assertNull(zipArchiveEntry0.getComment());
      assertFalse(zipArchiveEntry0.isStreamContiguous());
      assertEquals("9[SOzKTTB.j9(", zipArchiveEntry0.getName());
      assertFalse(zipArchiveEntry0.isDirectory());
      assertFalse(zipArchiveEntry0.isUnixSymlink());
      assertEquals(8, zipArchiveEntry0.getMethod());
      assertEquals(2L, zipArchiveEntry0.getCompressedSize());
      assertEquals(0, zipArchiveEntry0.getInternalAttributes());
      assertEquals(0, zipArchiveEntry0.getPlatform());
      assertEquals(0, zipArchiveEntry0.getRawFlag());
      assertEquals(0, zipArchiveEntry0.getVersionRequired());
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      
      zipArchiveOutputStream0.putArchiveEntry(zipArchiveEntry0);
      assertTrue(file0.canRead());
      assertTrue(file0.isFile());
      assertTrue(file0.canWrite());
      assertTrue(file0.canExecute());
      assertTrue(file0.isAbsolute());
      assertEquals("/tmp", file0.getParent());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals(1392409281320L, file0.lastModified());
      assertTrue(file0.exists());
      assertFalse(file0.isDirectory());
      assertEquals("/tmp/9[SOzKTTB.j9(09[SOzKTTB.j9(", file0.toString());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(0L, file0.length());
      assertEquals("9[SOzKTTB.j9(09[SOzKTTB.j9(", file0.getName());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertTrue(zipArchiveOutputStream0.isSeekable());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals((-1L), zipArchiveEntry0.getDataOffset());
      assertEquals(0, zipArchiveEntry0.getVersionMadeBy());
      assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
      assertEquals(0L, zipArchiveEntry0.getSize());
      assertEquals(0, zipArchiveEntry0.getUnixMode());
      assertEquals("9[SOzKTTB.j9(", zipArchiveEntry0.toString());
      assertEquals(0L, zipArchiveEntry0.getCrc());
      assertNull(zipArchiveEntry0.getComment());
      assertFalse(zipArchiveEntry0.isStreamContiguous());
      assertEquals("9[SOzKTTB.j9(", zipArchiveEntry0.getName());
      assertFalse(zipArchiveEntry0.isDirectory());
      assertFalse(zipArchiveEntry0.isUnixSymlink());
      assertEquals(8, zipArchiveEntry0.getMethod());
      assertEquals(2L, zipArchiveEntry0.getCompressedSize());
      assertEquals(0, zipArchiveEntry0.getInternalAttributes());
      assertEquals(0, zipArchiveEntry0.getPlatform());
      assertEquals(0, zipArchiveEntry0.getRawFlag());
      assertEquals(0, zipArchiveEntry0.getVersionRequired());
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      
      zipArchiveOutputStream0.putArchiveEntry(zipArchiveEntry0);
      assertTrue(file0.canRead());
      assertTrue(file0.isFile());
      assertTrue(file0.canWrite());
      assertTrue(file0.canExecute());
      assertTrue(file0.isAbsolute());
      assertEquals("/tmp", file0.getParent());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals(1392409281320L, file0.lastModified());
      assertTrue(file0.exists());
      assertFalse(file0.isDirectory());
      assertEquals("/tmp/9[SOzKTTB.j9(09[SOzKTTB.j9(", file0.toString());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(0L, file0.length());
      assertEquals("9[SOzKTTB.j9(09[SOzKTTB.j9(", file0.getName());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertTrue(zipArchiveOutputStream0.isSeekable());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals((-1L), zipArchiveEntry0.getDataOffset());
      assertEquals(0, zipArchiveEntry0.getVersionMadeBy());
      assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
      assertEquals(0L, zipArchiveEntry0.getSize());
      assertEquals(0, zipArchiveEntry0.getUnixMode());
      assertEquals("9[SOzKTTB.j9(", zipArchiveEntry0.toString());
      assertEquals(0L, zipArchiveEntry0.getCrc());
      assertNull(zipArchiveEntry0.getComment());
      assertFalse(zipArchiveEntry0.isStreamContiguous());
      assertEquals("9[SOzKTTB.j9(", zipArchiveEntry0.getName());
      assertFalse(zipArchiveEntry0.isDirectory());
      assertFalse(zipArchiveEntry0.isUnixSymlink());
      assertEquals(8, zipArchiveEntry0.getMethod());
      assertEquals(2L, zipArchiveEntry0.getCompressedSize());
      assertEquals(0, zipArchiveEntry0.getInternalAttributes());
      assertEquals(0, zipArchiveEntry0.getPlatform());
      assertEquals(0, zipArchiveEntry0.getRawFlag());
      assertEquals(0, zipArchiveEntry0.getVersionRequired());
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      
      zipArchiveEntry0.setCompressedSize(1392409281320L);
      assertEquals(1392409281320L, zipArchiveEntry0.getCompressedSize());
      assertEquals((-1L), zipArchiveEntry0.getDataOffset());
      assertEquals(0, zipArchiveEntry0.getVersionMadeBy());
      assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
      assertEquals(0L, zipArchiveEntry0.getSize());
      assertEquals(0, zipArchiveEntry0.getUnixMode());
      assertEquals("9[SOzKTTB.j9(", zipArchiveEntry0.toString());
      assertEquals(0L, zipArchiveEntry0.getCrc());
      assertNull(zipArchiveEntry0.getComment());
      assertFalse(zipArchiveEntry0.isStreamContiguous());
      assertEquals("9[SOzKTTB.j9(", zipArchiveEntry0.getName());
      assertFalse(zipArchiveEntry0.isDirectory());
      assertFalse(zipArchiveEntry0.isUnixSymlink());
      assertEquals(8, zipArchiveEntry0.getMethod());
      assertEquals(0, zipArchiveEntry0.getInternalAttributes());
      assertEquals(0, zipArchiveEntry0.getPlatform());
      assertEquals(0, zipArchiveEntry0.getRawFlag());
      assertEquals(0, zipArchiveEntry0.getVersionRequired());
      assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(file0);
      assertNotNull(mockFileInputStream0);
      
      zipArchiveOutputStream0.setComment("never");
      assertTrue(file0.canRead());
      assertTrue(file0.isFile());
      assertTrue(file0.canWrite());
      assertTrue(file0.canExecute());
      assertTrue(file0.isAbsolute());
      assertEquals("/tmp", file0.getParent());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals(1392409281320L, file0.lastModified());
      assertTrue(file0.exists());
      assertFalse(file0.isDirectory());
      assertEquals("/tmp/9[SOzKTTB.j9(09[SOzKTTB.j9(", file0.toString());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(0L, file0.length());
      assertEquals("9[SOzKTTB.j9(09[SOzKTTB.j9(", file0.getName());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertTrue(zipArchiveOutputStream0.isSeekable());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      
      mockFileInputStream0.mark(8);
      assertTrue(file0.canRead());
      assertTrue(file0.isFile());
      assertTrue(file0.canWrite());
      assertTrue(file0.canExecute());
      assertTrue(file0.isAbsolute());
      assertEquals("/tmp", file0.getParent());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals(1392409281320L, file0.lastModified());
      assertTrue(file0.exists());
      assertFalse(file0.isDirectory());
      assertEquals("/tmp/9[SOzKTTB.j9(09[SOzKTTB.j9(", file0.toString());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(0L, file0.length());
      assertEquals("9[SOzKTTB.j9(09[SOzKTTB.j9(", file0.getName());
      assertEquals(0, mockFileInputStream0.available());
      
      zipArchiveOutputStream0.addRawArchiveEntry(zipArchiveEntry0, mockFileInputStream0);
      assertTrue(file0.canRead());
      assertTrue(file0.isFile());
      assertTrue(file0.canWrite());
      assertTrue(file0.canExecute());
      assertTrue(file0.isAbsolute());
      assertEquals("/tmp", file0.getParent());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals(1392409281320L, file0.lastModified());
      assertTrue(file0.exists());
      assertFalse(file0.isDirectory());
      assertEquals("/tmp/9[SOzKTTB.j9(09[SOzKTTB.j9(", file0.toString());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(0L, file0.length());
      assertEquals("9[SOzKTTB.j9(09[SOzKTTB.j9(", file0.getName());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertTrue(zipArchiveOutputStream0.isSeekable());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals((-1L), zipArchiveEntry0.getDataOffset());
      assertEquals(0, zipArchiveEntry0.getVersionMadeBy());
      assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
      assertEquals(0L, zipArchiveEntry0.getSize());
      assertEquals(0, zipArchiveEntry0.getUnixMode());
      assertEquals("9[SOzKTTB.j9(", zipArchiveEntry0.toString());
      assertEquals(0L, zipArchiveEntry0.getCrc());
      assertNull(zipArchiveEntry0.getComment());
      assertFalse(zipArchiveEntry0.isStreamContiguous());
      assertEquals("9[SOzKTTB.j9(", zipArchiveEntry0.getName());
      assertFalse(zipArchiveEntry0.isDirectory());
      assertFalse(zipArchiveEntry0.isUnixSymlink());
      assertEquals(8, zipArchiveEntry0.getMethod());
      assertEquals(2L, zipArchiveEntry0.getCompressedSize());
      assertEquals(0, zipArchiveEntry0.getInternalAttributes());
      assertEquals(0, zipArchiveEntry0.getPlatform());
      assertEquals(0, zipArchiveEntry0.getRawFlag());
      assertEquals(0, zipArchiveEntry0.getVersionRequired());
      assertEquals((-1), mockFileInputStream0.available());
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      
      zipArchiveOutputStream0.close();
      assertTrue(file0.canRead());
      assertTrue(file0.isFile());
      assertTrue(file0.canWrite());
      assertTrue(file0.canExecute());
      assertTrue(file0.isAbsolute());
      assertEquals("/tmp", file0.getParent());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals(1392409281320L, file0.lastModified());
      assertTrue(file0.exists());
      assertFalse(file0.isDirectory());
      assertEquals("/tmp/9[SOzKTTB.j9(09[SOzKTTB.j9(", file0.toString());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(0L, file0.length());
      assertEquals("9[SOzKTTB.j9(09[SOzKTTB.j9(", file0.getName());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertTrue(zipArchiveOutputStream0.isSeekable());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      
//      try { 
        zipArchiveOutputStream0.writeZip64CentralDirectory();
//        fail("Expecting exception: ClosedChannelException");
      
//      } catch(ClosedChannelException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      JarArchiveEntry jarArchiveEntry0 = new JarArchiveEntry("0");
      assertEquals(0, jarArchiveEntry0.getRawFlag());
      assertEquals("0", jarArchiveEntry0.getName());
      assertEquals("0", jarArchiveEntry0.toString());
      assertEquals(0L, jarArchiveEntry0.getExternalAttributes());
      assertEquals((-1L), jarArchiveEntry0.getDataOffset());
      assertEquals((-1L), jarArchiveEntry0.getCompressedSize());
      assertEquals((-1L), jarArchiveEntry0.getCrc());
      assertFalse(jarArchiveEntry0.isDirectory());
      assertEquals((-1L), jarArchiveEntry0.getSize());
      assertEquals(0, jarArchiveEntry0.getInternalAttributes());
      assertFalse(jarArchiveEntry0.isStreamContiguous());
      assertFalse(jarArchiveEntry0.isUnixSymlink());
      assertNull(jarArchiveEntry0.getComment());
      assertEquals((-1), jarArchiveEntry0.getMethod());
      assertEquals(0, jarArchiveEntry0.getVersionRequired());
      assertEquals(0, jarArchiveEntry0.getPlatform());
      assertEquals(0, jarArchiveEntry0.getUnixMode());
      assertEquals(0, jarArchiveEntry0.getVersionMadeBy());
      assertNotNull(jarArchiveEntry0);
      assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      
      jarArchiveEntry0.setComment("0");
      assertEquals(0, jarArchiveEntry0.getRawFlag());
      assertEquals("0", jarArchiveEntry0.getName());
      assertEquals("0", jarArchiveEntry0.toString());
      assertEquals("0", jarArchiveEntry0.getComment());
      assertEquals(0L, jarArchiveEntry0.getExternalAttributes());
      assertEquals((-1L), jarArchiveEntry0.getDataOffset());
      assertEquals((-1L), jarArchiveEntry0.getCompressedSize());
      assertEquals((-1L), jarArchiveEntry0.getCrc());
      assertFalse(jarArchiveEntry0.isDirectory());
      assertEquals((-1L), jarArchiveEntry0.getSize());
      assertEquals(0, jarArchiveEntry0.getInternalAttributes());
      assertFalse(jarArchiveEntry0.isStreamContiguous());
      assertFalse(jarArchiveEntry0.isUnixSymlink());
      assertEquals((-1), jarArchiveEntry0.getMethod());
      assertEquals(0, jarArchiveEntry0.getVersionRequired());
      assertEquals(0, jarArchiveEntry0.getPlatform());
      assertEquals(0, jarArchiveEntry0.getUnixMode());
      assertEquals(0, jarArchiveEntry0.getVersionMadeBy());
      assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      
      MockFile mockFile0 = new MockFile("0", "Invalid compression level: ");
      assertNotNull(mockFile0);
      
      File file0 = MockFile.createTempFile("<#*NAcaI?q", "G01wYxh", (File) mockFile0);
      assertFalse(file0.equals((Object)mockFile0));
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.isDirectory());
      assertEquals("/experiment/0", mockFile0.getParent());
      assertFalse(mockFile0.isFile());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.exists());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.canExecute());
      assertEquals("Invalid compression level: ", mockFile0.getName());
      assertTrue(mockFile0.isAbsolute());
      assertEquals("/experiment/0/Invalid compression level: ", mockFile0.toString());
      assertTrue(mockFile0.canWrite());
      assertEquals("/experiment/0/Invalid compression level: /<#*NAcaI?q0G01wYxh", file0.toString());
      assertEquals(0L, file0.getUsableSpace());
      assertTrue(file0.canWrite());
      assertEquals("/experiment/0/Invalid compression level: ", file0.getParent());
      assertTrue(file0.isAbsolute());
      assertFalse(file0.isDirectory());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(0L, file0.getFreeSpace());
      assertTrue(file0.exists());
      assertEquals(0L, file0.length());
      assertTrue(file0.canRead());
      assertTrue(file0.isFile());
      assertTrue(file0.canExecute());
      assertEquals("<#*NAcaI?q0G01wYxh", file0.getName());
      assertNotNull(file0);
      assertNotSame(mockFile0, file0);
      assertNotSame(file0, mockFile0);
      
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(file0);
      assertFalse(mockFile0.equals((Object)file0));
      assertFalse(file0.equals((Object)mockFile0));
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.isDirectory());
      assertEquals("/experiment/0", mockFile0.getParent());
      assertFalse(mockFile0.isFile());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.exists());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.canExecute());
      assertEquals("Invalid compression level: ", mockFile0.getName());
      assertTrue(mockFile0.isAbsolute());
      assertEquals("/experiment/0/Invalid compression level: ", mockFile0.toString());
      assertTrue(mockFile0.canWrite());
      assertEquals("/experiment/0/Invalid compression level: /<#*NAcaI?q0G01wYxh", file0.toString());
      assertEquals(0L, file0.getUsableSpace());
      assertTrue(file0.canWrite());
      assertEquals("/experiment/0/Invalid compression level: ", file0.getParent());
      assertTrue(file0.isAbsolute());
      assertFalse(file0.isDirectory());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(0L, file0.getFreeSpace());
      assertTrue(file0.exists());
      assertEquals(0L, file0.length());
      assertTrue(file0.canRead());
      assertTrue(file0.isFile());
      assertTrue(file0.canExecute());
      assertEquals("<#*NAcaI?q0G01wYxh", file0.getName());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertFalse(zipArchiveOutputStream0.isSeekable());
      assertNotNull(zipArchiveOutputStream0);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      
      MockFile mockFile1 = new MockFile("");
      assertFalse(mockFile1.equals((Object)mockFile0));
      assertFalse(mockFile1.equals((Object)file0));
      assertNotNull(mockFile1);
      
      boolean boolean0 = mockFile1.setReadOnly();
      assertFalse(mockFile1.equals((Object)mockFile0));
      assertFalse(mockFile1.equals((Object)file0));
      assertNull(mockFile1.getParent());
      assertEquals(0L, mockFile1.getTotalSpace());
      assertTrue(mockFile1.exists());
      assertTrue(mockFile1.isDirectory());
      assertEquals(0L, mockFile1.length());
      assertFalse(mockFile1.isAbsolute());
      assertEquals(1392409281320L, mockFile1.lastModified());
      assertFalse(mockFile1.canExecute());
      assertEquals("", mockFile1.getName());
      assertFalse(mockFile1.isFile());
      assertTrue(mockFile1.canRead());
      assertEquals(0L, mockFile1.getUsableSpace());
      assertEquals("", mockFile1.toString());
      assertFalse(mockFile1.isHidden());
      assertFalse(mockFile1.canWrite());
      assertEquals(0L, mockFile1.getFreeSpace());
      assertNotSame(mockFile1, mockFile0);
      assertNotSame(mockFile1, file0);
      assertTrue(boolean0);
      
      jarArchiveEntry0.setSize(4294967295L);
      assertEquals(0, jarArchiveEntry0.getRawFlag());
      assertEquals("0", jarArchiveEntry0.getName());
      assertEquals("0", jarArchiveEntry0.toString());
      assertEquals("0", jarArchiveEntry0.getComment());
      assertEquals(0L, jarArchiveEntry0.getExternalAttributes());
      assertEquals((-1L), jarArchiveEntry0.getDataOffset());
      assertEquals((-1L), jarArchiveEntry0.getCompressedSize());
      assertEquals((-1L), jarArchiveEntry0.getCrc());
      assertFalse(jarArchiveEntry0.isDirectory());
      assertEquals(4294967295L, jarArchiveEntry0.getSize());
      assertEquals(0, jarArchiveEntry0.getInternalAttributes());
      assertFalse(jarArchiveEntry0.isStreamContiguous());
      assertFalse(jarArchiveEntry0.isUnixSymlink());
      assertEquals((-1), jarArchiveEntry0.getMethod());
      assertEquals(0, jarArchiveEntry0.getVersionRequired());
      assertEquals(0, jarArchiveEntry0.getPlatform());
      assertEquals(0, jarArchiveEntry0.getUnixMode());
      assertEquals(0, jarArchiveEntry0.getVersionMadeBy());
      assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      
      zipArchiveOutputStream0.putArchiveEntry(jarArchiveEntry0);
      assertFalse(mockFile0.equals((Object)mockFile1));
      assertFalse(mockFile0.equals((Object)file0));
      assertFalse(file0.equals((Object)mockFile0));
      assertFalse(file0.equals((Object)mockFile1));
      assertEquals(0, jarArchiveEntry0.getRawFlag());
      assertEquals("0", jarArchiveEntry0.getName());
      assertEquals("0", jarArchiveEntry0.toString());
      assertEquals("0", jarArchiveEntry0.getComment());
      assertEquals(0L, jarArchiveEntry0.getExternalAttributes());
      assertEquals((-1L), jarArchiveEntry0.getDataOffset());
      assertEquals((-1L), jarArchiveEntry0.getCompressedSize());
      assertEquals((-1L), jarArchiveEntry0.getCrc());
      assertFalse(jarArchiveEntry0.isDirectory());
      assertEquals(8, jarArchiveEntry0.getMethod());
      assertEquals(4294967295L, jarArchiveEntry0.getSize());
      assertEquals(0, jarArchiveEntry0.getInternalAttributes());
      assertFalse(jarArchiveEntry0.isStreamContiguous());
      assertFalse(jarArchiveEntry0.isUnixSymlink());
      assertEquals(0, jarArchiveEntry0.getVersionRequired());
      assertEquals(0, jarArchiveEntry0.getPlatform());
      assertEquals(0, jarArchiveEntry0.getUnixMode());
      assertEquals(0, jarArchiveEntry0.getVersionMadeBy());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.isDirectory());
      assertEquals("/experiment/0", mockFile0.getParent());
      assertFalse(mockFile0.isFile());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.exists());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.canExecute());
      assertEquals("Invalid compression level: ", mockFile0.getName());
      assertTrue(mockFile0.isAbsolute());
      assertEquals("/experiment/0/Invalid compression level: ", mockFile0.toString());
      assertTrue(mockFile0.canWrite());
      assertEquals("/experiment/0/Invalid compression level: /<#*NAcaI?q0G01wYxh", file0.toString());
      assertEquals(0L, file0.getUsableSpace());
      assertTrue(file0.canWrite());
      assertEquals("/experiment/0/Invalid compression level: ", file0.getParent());
      assertTrue(file0.isAbsolute());
      assertFalse(file0.isDirectory());
      assertEquals(51L, file0.length());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(0L, file0.getFreeSpace());
      assertTrue(file0.exists());
      assertTrue(file0.canRead());
      assertTrue(file0.isFile());
      assertTrue(file0.canExecute());
      assertEquals("<#*NAcaI?q0G01wYxh", file0.getName());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertFalse(zipArchiveOutputStream0.isSeekable());
      assertNotSame(mockFile0, mockFile1);
      assertNotSame(mockFile0, file0);
      assertNotSame(file0, mockFile0);
      assertNotSame(file0, mockFile1);
      assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(0, ZipArchiveOutputStream.STORED);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      File file0 = MockFile.createTempFile("TD>\"", "TD>\"");
      assertTrue(file0.isFile());
      assertEquals("/tmp", file0.getParent());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      assertTrue(file0.canExecute());
      assertEquals("/tmp/TD>\"0TD>\"", file0.toString());
      assertTrue(file0.isAbsolute());
      assertEquals(0L, file0.getFreeSpace());
      assertTrue(file0.canWrite());
      assertEquals("TD>\"0TD>\"", file0.getName());
      assertFalse(file0.isDirectory());
      assertEquals(0L, file0.length());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(1392409281320L, file0.lastModified());
      assertTrue(file0.canRead());
      assertTrue(file0.exists());
      assertNotNull(file0);
      
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(file0);
      assertTrue(file0.isFile());
      assertEquals("/tmp", file0.getParent());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      assertTrue(file0.canExecute());
      assertEquals("/tmp/TD>\"0TD>\"", file0.toString());
      assertTrue(file0.isAbsolute());
      assertEquals(0L, file0.getFreeSpace());
      assertTrue(file0.canWrite());
      assertEquals("TD>\"0TD>\"", file0.getName());
      assertFalse(file0.isDirectory());
      assertEquals(0L, file0.length());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(1392409281320L, file0.lastModified());
      assertTrue(file0.canRead());
      assertTrue(file0.exists());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertTrue(zipArchiveOutputStream0.isSeekable());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertNotNull(zipArchiveOutputStream0);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      
      ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry("TD>\"");
      assertFalse(zipArchiveEntry0.isDirectory());
      assertFalse(zipArchiveEntry0.isUnixSymlink());
      assertFalse(zipArchiveEntry0.isStreamContiguous());
      assertEquals(0, zipArchiveEntry0.getVersionRequired());
      assertEquals((-1L), zipArchiveEntry0.getCrc());
      assertEquals((-1), zipArchiveEntry0.getMethod());
      assertEquals("TD>\"", zipArchiveEntry0.toString());
      assertEquals((-1L), zipArchiveEntry0.getCompressedSize());
      assertEquals(0, zipArchiveEntry0.getVersionMadeBy());
      assertEquals((-1L), zipArchiveEntry0.getSize());
      assertEquals("TD>\"", zipArchiveEntry0.getName());
      assertEquals((-1L), zipArchiveEntry0.getDataOffset());
      assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
      assertEquals(0, zipArchiveEntry0.getRawFlag());
      assertNull(zipArchiveEntry0.getComment());
      assertEquals(0, zipArchiveEntry0.getPlatform());
      assertEquals(0, zipArchiveEntry0.getUnixMode());
      assertEquals(0, zipArchiveEntry0.getInternalAttributes());
      assertNotNull(zipArchiveEntry0);
      assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      
      zipArchiveOutputStream0.putArchiveEntry(zipArchiveEntry0);
      assertTrue(file0.isFile());
      assertEquals("/tmp", file0.getParent());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      assertTrue(file0.canExecute());
      assertEquals("/tmp/TD>\"0TD>\"", file0.toString());
      assertTrue(file0.isAbsolute());
      assertEquals(0L, file0.getFreeSpace());
      assertTrue(file0.canWrite());
      assertEquals("TD>\"0TD>\"", file0.getName());
      assertFalse(file0.isDirectory());
      assertEquals(0L, file0.length());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(1392409281320L, file0.lastModified());
      assertTrue(file0.canRead());
      assertTrue(file0.exists());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertTrue(zipArchiveOutputStream0.isSeekable());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertFalse(zipArchiveEntry0.isDirectory());
      assertFalse(zipArchiveEntry0.isUnixSymlink());
      assertEquals(8, zipArchiveEntry0.getMethod());
      assertFalse(zipArchiveEntry0.isStreamContiguous());
      assertEquals(0, zipArchiveEntry0.getVersionRequired());
      assertEquals((-1L), zipArchiveEntry0.getCrc());
      assertEquals("TD>\"", zipArchiveEntry0.toString());
      assertEquals((-1L), zipArchiveEntry0.getCompressedSize());
      assertEquals(0, zipArchiveEntry0.getVersionMadeBy());
      assertEquals((-1L), zipArchiveEntry0.getSize());
      assertEquals("TD>\"", zipArchiveEntry0.getName());
      assertEquals((-1L), zipArchiveEntry0.getDataOffset());
      assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
      assertEquals(0, zipArchiveEntry0.getRawFlag());
      assertNull(zipArchiveEntry0.getComment());
      assertEquals(0, zipArchiveEntry0.getPlatform());
      assertEquals(0, zipArchiveEntry0.getUnixMode());
      assertEquals(0, zipArchiveEntry0.getInternalAttributes());
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      
      zipArchiveOutputStream0.closeArchiveEntry();
      assertTrue(file0.isFile());
      assertEquals("/tmp", file0.getParent());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      assertTrue(file0.canExecute());
      assertEquals("/tmp/TD>\"0TD>\"", file0.toString());
      assertTrue(file0.isAbsolute());
      assertEquals(0L, file0.getFreeSpace());
      assertTrue(file0.canWrite());
      assertEquals("TD>\"0TD>\"", file0.getName());
      assertFalse(file0.isDirectory());
      assertEquals(0L, file0.length());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(1392409281320L, file0.lastModified());
      assertTrue(file0.canRead());
      assertTrue(file0.exists());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertTrue(zipArchiveOutputStream0.isSeekable());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      
      zipArchiveOutputStream0.finish();
      assertTrue(file0.isFile());
      assertEquals("/tmp", file0.getParent());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      assertTrue(file0.canExecute());
      assertEquals("/tmp/TD>\"0TD>\"", file0.toString());
      assertTrue(file0.isAbsolute());
      assertEquals(0L, file0.getFreeSpace());
      assertTrue(file0.canWrite());
      assertEquals("TD>\"0TD>\"", file0.getName());
      assertFalse(file0.isDirectory());
      assertEquals(0L, file0.length());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(1392409281320L, file0.lastModified());
      assertTrue(file0.canRead());
      assertTrue(file0.exists());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertTrue(zipArchiveOutputStream0.isSeekable());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      
      zipArchiveOutputStream0.close();
      assertTrue(file0.isFile());
      assertEquals("/tmp", file0.getParent());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      assertTrue(file0.canExecute());
      assertEquals("/tmp/TD>\"0TD>\"", file0.toString());
      assertTrue(file0.isAbsolute());
      assertEquals(0L, file0.getFreeSpace());
      assertTrue(file0.canWrite());
      assertEquals("TD>\"0TD>\"", file0.getName());
      assertFalse(file0.isDirectory());
      assertEquals(0L, file0.length());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(1392409281320L, file0.lastModified());
      assertTrue(file0.canRead());
      assertTrue(file0.exists());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertTrue(zipArchiveOutputStream0.isSeekable());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      
      String string0 = "ZUC";
      // Undeclared exception!
//      try { 
        zipArchiveOutputStream0.deflate();
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Deflater has been closed
//         //
//         verifyException("java.util.zip.Deflater", e);
//      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      String string0 = "Lz^|wF&;`V%Ir6";
      JarArchiveEntry jarArchiveEntry0 = new JarArchiveEntry("Lz^|wF&;`V%Ir6");
      assertEquals("Lz^|wF&;`V%Ir6", jarArchiveEntry0.toString());
      assertEquals((-1L), jarArchiveEntry0.getCompressedSize());
      assertFalse(jarArchiveEntry0.isDirectory());
      assertEquals((-1L), jarArchiveEntry0.getCrc());
      assertEquals(0, jarArchiveEntry0.getInternalAttributes());
      assertFalse(jarArchiveEntry0.isStreamContiguous());
      assertFalse(jarArchiveEntry0.isUnixSymlink());
      assertNull(jarArchiveEntry0.getComment());
      assertEquals((-1L), jarArchiveEntry0.getDataOffset());
      assertEquals((-1L), jarArchiveEntry0.getSize());
      assertEquals(0, jarArchiveEntry0.getVersionMadeBy());
      assertEquals(0, jarArchiveEntry0.getUnixMode());
      assertEquals(0, jarArchiveEntry0.getPlatform());
      assertEquals(0, jarArchiveEntry0.getRawFlag());
      assertEquals((-1), jarArchiveEntry0.getMethod());
      assertEquals(0, jarArchiveEntry0.getVersionRequired());
      assertEquals("Lz^|wF&;`V%Ir6", jarArchiveEntry0.getName());
      assertEquals(0L, jarArchiveEntry0.getExternalAttributes());
      assertNotNull(jarArchiveEntry0);
      assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      
      MockFile mockFile0 = new MockFile("Lz^|wF&;`V%Ir6");
      assertNotNull(mockFile0);
      
      FileTime fileTime0 = jarArchiveEntry0.getLastModifiedTime();
      assertEquals("Lz^|wF&;`V%Ir6", jarArchiveEntry0.toString());
      assertEquals((-1L), jarArchiveEntry0.getCompressedSize());
      assertFalse(jarArchiveEntry0.isDirectory());
      assertEquals((-1L), jarArchiveEntry0.getCrc());
      assertEquals(0, jarArchiveEntry0.getInternalAttributes());
      assertFalse(jarArchiveEntry0.isStreamContiguous());
      assertFalse(jarArchiveEntry0.isUnixSymlink());
      assertNull(jarArchiveEntry0.getComment());
      assertEquals((-1L), jarArchiveEntry0.getDataOffset());
      assertEquals((-1L), jarArchiveEntry0.getSize());
      assertEquals(0, jarArchiveEntry0.getVersionMadeBy());
      assertEquals(0, jarArchiveEntry0.getUnixMode());
      assertEquals(0, jarArchiveEntry0.getPlatform());
      assertEquals(0, jarArchiveEntry0.getRawFlag());
      assertEquals((-1), jarArchiveEntry0.getMethod());
      assertEquals(0, jarArchiveEntry0.getVersionRequired());
      assertEquals("Lz^|wF&;`V%Ir6", jarArchiveEntry0.getName());
      assertEquals(0L, jarArchiveEntry0.getExternalAttributes());
      assertNull(fileTime0);
      assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(mockFile0);
      assertNull(mockFile0.getParent());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals("Lz^|wF&;`V%Ir6", mockFile0.getName());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.canWrite());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals("Lz^|wF&;`V%Ir6", mockFile0.toString());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.isFile());
      assertTrue(mockFile0.exists());
      assertTrue(mockFile0.canRead());
      assertFalse(zipArchiveOutputStream0.isSeekable());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertNotNull(zipArchiveOutputStream0);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      
      jarArchiveEntry0.setSize(8);
      assertEquals("Lz^|wF&;`V%Ir6", jarArchiveEntry0.toString());
      assertEquals((-1L), jarArchiveEntry0.getCompressedSize());
      assertFalse(jarArchiveEntry0.isDirectory());
      assertEquals((-1L), jarArchiveEntry0.getCrc());
      assertEquals(0, jarArchiveEntry0.getInternalAttributes());
      assertFalse(jarArchiveEntry0.isStreamContiguous());
      assertEquals(8L, jarArchiveEntry0.getSize());
      assertFalse(jarArchiveEntry0.isUnixSymlink());
      assertNull(jarArchiveEntry0.getComment());
      assertEquals((-1L), jarArchiveEntry0.getDataOffset());
      assertEquals(0, jarArchiveEntry0.getVersionMadeBy());
      assertEquals(0, jarArchiveEntry0.getUnixMode());
      assertEquals(0, jarArchiveEntry0.getPlatform());
      assertEquals(0, jarArchiveEntry0.getRawFlag());
      assertEquals((-1), jarArchiveEntry0.getMethod());
      assertEquals(0, jarArchiveEntry0.getVersionRequired());
      assertEquals("Lz^|wF&;`V%Ir6", jarArchiveEntry0.getName());
      assertEquals(0L, jarArchiveEntry0.getExternalAttributes());
      assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      
      zipArchiveOutputStream0.setMethod(2180);
      assertNull(mockFile0.getParent());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals("Lz^|wF&;`V%Ir6", mockFile0.getName());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.canWrite());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals("Lz^|wF&;`V%Ir6", mockFile0.toString());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.isFile());
      assertTrue(mockFile0.exists());
      assertTrue(mockFile0.canRead());
      assertFalse(zipArchiveOutputStream0.isSeekable());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      
      zipArchiveOutputStream0.putArchiveEntry(jarArchiveEntry0);
      assertEquals("Lz^|wF&;`V%Ir6", jarArchiveEntry0.toString());
      assertEquals((-1L), jarArchiveEntry0.getCompressedSize());
      assertFalse(jarArchiveEntry0.isDirectory());
      assertEquals((-1L), jarArchiveEntry0.getCrc());
      assertEquals(0, jarArchiveEntry0.getInternalAttributes());
      assertFalse(jarArchiveEntry0.isStreamContiguous());
      assertEquals(8L, jarArchiveEntry0.getSize());
      assertFalse(jarArchiveEntry0.isUnixSymlink());
      assertNull(jarArchiveEntry0.getComment());
      assertEquals((-1L), jarArchiveEntry0.getDataOffset());
      assertEquals(0, jarArchiveEntry0.getVersionMadeBy());
      assertEquals(0, jarArchiveEntry0.getUnixMode());
      assertEquals(0, jarArchiveEntry0.getPlatform());
      assertEquals(0, jarArchiveEntry0.getRawFlag());
      assertEquals(2180, jarArchiveEntry0.getMethod());
      assertEquals(0, jarArchiveEntry0.getVersionRequired());
      assertEquals("Lz^|wF&;`V%Ir6", jarArchiveEntry0.getName());
      assertEquals(0L, jarArchiveEntry0.getExternalAttributes());
      assertNull(mockFile0.getParent());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals("Lz^|wF&;`V%Ir6", mockFile0.getName());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.canWrite());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals("Lz^|wF&;`V%Ir6", mockFile0.toString());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.isFile());
      assertEquals(44L, mockFile0.length());
      assertTrue(mockFile0.exists());
      assertTrue(mockFile0.canRead());
      assertFalse(zipArchiveOutputStream0.isSeekable());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      
//      try { 
        zipArchiveOutputStream0.closeArchiveEntry();
//        fail("Expecting exception: UnsupportedZipFeatureException");
      
//      } catch(UnsupportedZipFeatureException e) {
//         //
//         // unsupported feature compression method used in entry Lz^|wF&;`V%Ir6
//         //
//         verifyException("org.apache.commons.compress.archivers.zip.ZipUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      JarArchiveEntry jarArchiveEntry0 = new JarArchiveEntry("fq09hlgy>F3sW");
      assertEquals(0, jarArchiveEntry0.getUnixMode());
      assertEquals(0, jarArchiveEntry0.getVersionMadeBy());
      assertEquals(0, jarArchiveEntry0.getRawFlag());
      assertEquals((-1L), jarArchiveEntry0.getSize());
      assertEquals("fq09hlgy>F3sW", jarArchiveEntry0.getName());
      assertEquals((-1L), jarArchiveEntry0.getCrc());
      assertEquals("fq09hlgy>F3sW", jarArchiveEntry0.toString());
      assertEquals((-1L), jarArchiveEntry0.getCompressedSize());
      assertEquals((-1), jarArchiveEntry0.getMethod());
      assertEquals(0, jarArchiveEntry0.getVersionRequired());
      assertEquals(0L, jarArchiveEntry0.getExternalAttributes());
      assertFalse(jarArchiveEntry0.isStreamContiguous());
      assertFalse(jarArchiveEntry0.isDirectory());
      assertEquals(0, jarArchiveEntry0.getPlatform());
      assertNull(jarArchiveEntry0.getComment());
      assertEquals((-1L), jarArchiveEntry0.getDataOffset());
      assertEquals(0, jarArchiveEntry0.getInternalAttributes());
      assertFalse(jarArchiveEntry0.isUnixSymlink());
      assertNotNull(jarArchiveEntry0);
      assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      
      MockFile mockFile0 = new MockFile("IBM850", "fq09hlgy>F3sW");
      assertNotNull(mockFile0);
      
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(mockFile0);
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.isFile());
      assertEquals("/experiment/IBM850/fq09hlgy>F3sW", mockFile0.toString());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.exists());
      assertEquals("fq09hlgy>F3sW", mockFile0.getName());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.length());
      assertTrue(mockFile0.isAbsolute());
      assertEquals("/experiment/IBM850", mockFile0.getParent());
      assertTrue(mockFile0.canWrite());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertFalse(zipArchiveOutputStream0.isSeekable());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertNotNull(zipArchiveOutputStream0);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      
      jarArchiveEntry0.setSize(71776119061217270L);
      assertEquals(0, jarArchiveEntry0.getUnixMode());
      assertEquals(0, jarArchiveEntry0.getVersionMadeBy());
      assertEquals(0, jarArchiveEntry0.getRawFlag());
      assertEquals("fq09hlgy>F3sW", jarArchiveEntry0.getName());
      assertEquals((-1L), jarArchiveEntry0.getCrc());
      assertEquals("fq09hlgy>F3sW", jarArchiveEntry0.toString());
      assertEquals((-1L), jarArchiveEntry0.getCompressedSize());
      assertEquals((-1), jarArchiveEntry0.getMethod());
      assertEquals(0, jarArchiveEntry0.getVersionRequired());
      assertEquals(0L, jarArchiveEntry0.getExternalAttributes());
      assertFalse(jarArchiveEntry0.isStreamContiguous());
      assertFalse(jarArchiveEntry0.isDirectory());
      assertEquals(0, jarArchiveEntry0.getPlatform());
      assertNull(jarArchiveEntry0.getComment());
      assertEquals((-1L), jarArchiveEntry0.getDataOffset());
      assertEquals(71776119061217270L, jarArchiveEntry0.getSize());
      assertEquals(0, jarArchiveEntry0.getInternalAttributes());
      assertFalse(jarArchiveEntry0.isUnixSymlink());
      assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      
      zipArchiveOutputStream0.putArchiveEntry(jarArchiveEntry0);
      assertEquals(0, jarArchiveEntry0.getUnixMode());
      assertEquals(0, jarArchiveEntry0.getVersionMadeBy());
      assertEquals(0, jarArchiveEntry0.getRawFlag());
      assertEquals("fq09hlgy>F3sW", jarArchiveEntry0.getName());
      assertEquals((-1L), jarArchiveEntry0.getCrc());
      assertEquals("fq09hlgy>F3sW", jarArchiveEntry0.toString());
      assertEquals((-1L), jarArchiveEntry0.getCompressedSize());
      assertEquals(0, jarArchiveEntry0.getVersionRequired());
      assertEquals(0L, jarArchiveEntry0.getExternalAttributes());
      assertFalse(jarArchiveEntry0.isStreamContiguous());
      assertFalse(jarArchiveEntry0.isDirectory());
      assertEquals(8, jarArchiveEntry0.getMethod());
      assertEquals(0, jarArchiveEntry0.getPlatform());
      assertNull(jarArchiveEntry0.getComment());
      assertEquals((-1L), jarArchiveEntry0.getDataOffset());
      assertEquals(71776119061217270L, jarArchiveEntry0.getSize());
      assertEquals(0, jarArchiveEntry0.getInternalAttributes());
      assertFalse(jarArchiveEntry0.isUnixSymlink());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.isFile());
      assertEquals("/experiment/IBM850/fq09hlgy>F3sW", mockFile0.toString());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.exists());
      assertEquals("fq09hlgy>F3sW", mockFile0.getName());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertFalse(mockFile0.isDirectory());
      assertEquals(63L, mockFile0.length());
      assertTrue(mockFile0.isAbsolute());
      assertEquals("/experiment/IBM850", mockFile0.getParent());
      assertTrue(mockFile0.canWrite());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertFalse(zipArchiveOutputStream0.isSeekable());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      
      byte[] byteArray0 = new byte[0];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 32780, 0);
      assertEquals((-32780), byteArrayInputStream0.available());
      assertNotNull(byteArrayInputStream0);
      assertEquals(0, byteArray0.length);
      assertArrayEquals(new byte[] {}, byteArray0);
      
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(byteArrayInputStream0);
      assertEquals((-32780), byteArrayInputStream0.available());
      assertNotNull(bufferedInputStream0);
      assertEquals(0, byteArray0.length);
      assertArrayEquals(new byte[] {}, byteArray0);
      
      long long0 = bufferedInputStream0.skip((-1));
      assertEquals((-32780), byteArrayInputStream0.available());
      assertEquals(0, byteArray0.length);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0L, long0);
      
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(bufferedInputStream0, byteArrayInputStream0);
      assertEquals((-32780), byteArrayInputStream0.available());
      assertNotNull(sequenceInputStream0);
      assertEquals(0, byteArray0.length);
      assertArrayEquals(new byte[] {}, byteArray0);
      
      zipArchiveOutputStream0.addRawArchiveEntry(jarArchiveEntry0, sequenceInputStream0);
      assertEquals(0, jarArchiveEntry0.getUnixMode());
      assertEquals(0, jarArchiveEntry0.getVersionMadeBy());
      assertEquals(0, jarArchiveEntry0.getRawFlag());
      assertEquals(0L, jarArchiveEntry0.getSize());
      assertEquals("fq09hlgy>F3sW", jarArchiveEntry0.getName());
      assertEquals(0L, jarArchiveEntry0.getCrc());
      assertEquals("fq09hlgy>F3sW", jarArchiveEntry0.toString());
      assertEquals(2L, jarArchiveEntry0.getCompressedSize());
      assertEquals(0, jarArchiveEntry0.getVersionRequired());
      assertEquals(0L, jarArchiveEntry0.getExternalAttributes());
      assertFalse(jarArchiveEntry0.isStreamContiguous());
      assertFalse(jarArchiveEntry0.isDirectory());
      assertEquals(8, jarArchiveEntry0.getMethod());
      assertEquals(0, jarArchiveEntry0.getPlatform());
      assertNull(jarArchiveEntry0.getComment());
      assertEquals((-1L), jarArchiveEntry0.getDataOffset());
      assertEquals(0, jarArchiveEntry0.getInternalAttributes());
      assertFalse(jarArchiveEntry0.isUnixSymlink());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.isFile());
      assertEquals("/experiment/IBM850/fq09hlgy>F3sW", mockFile0.toString());
      assertTrue(mockFile0.canRead());
      assertEquals(176L, mockFile0.length());
      assertTrue(mockFile0.exists());
      assertEquals("fq09hlgy>F3sW", mockFile0.getName());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertFalse(mockFile0.isDirectory());
      assertTrue(mockFile0.isAbsolute());
      assertEquals("/experiment/IBM850", mockFile0.getParent());
      assertTrue(mockFile0.canWrite());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertFalse(zipArchiveOutputStream0.isSeekable());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals((-32780), byteArrayInputStream0.available());
      assertEquals(0, byteArray0.length);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      JarArchiveEntry jarArchiveEntry0 = new JarArchiveEntry("K@<[LT~&.7W\"h\"P`");
      assertNull(jarArchiveEntry0.getComment());
      assertEquals((-1L), jarArchiveEntry0.getDataOffset());
      assertEquals((-1), jarArchiveEntry0.getMethod());
      assertEquals(0L, jarArchiveEntry0.getExternalAttributes());
      assertEquals(0, jarArchiveEntry0.getUnixMode());
      assertEquals(0, jarArchiveEntry0.getRawFlag());
      assertEquals(0, jarArchiveEntry0.getInternalAttributes());
      assertEquals(0, jarArchiveEntry0.getVersionMadeBy());
      assertEquals(0, jarArchiveEntry0.getPlatform());
      assertEquals((-1L), jarArchiveEntry0.getCompressedSize());
      assertEquals(0, jarArchiveEntry0.getVersionRequired());
      assertFalse(jarArchiveEntry0.isUnixSymlink());
      assertEquals("K@<[LT~&.7W\"h\"P`", jarArchiveEntry0.toString());
      assertFalse(jarArchiveEntry0.isStreamContiguous());
      assertEquals((-1L), jarArchiveEntry0.getCrc());
      assertEquals("K@<[LT~&.7W\"h\"P`", jarArchiveEntry0.getName());
      assertEquals((-1L), jarArchiveEntry0.getSize());
      assertFalse(jarArchiveEntry0.isDirectory());
      assertNotNull(jarArchiveEntry0);
      assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      
      MockFile mockFile0 = new MockFile("IBM850", "K@<[LT~&.7W\"h\"P`");
      assertNotNull(mockFile0);
      
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(mockFile0);
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.canWrite());
      assertTrue(mockFile0.isFile());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.canRead());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.length());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isDirectory());
      assertEquals("/experiment/IBM850/K@<[LT~&.7W\"h\"P`", mockFile0.toString());
      assertEquals("/experiment/IBM850", mockFile0.getParent());
      assertTrue(mockFile0.isAbsolute());
      assertEquals("K@<[LT~&.7W\"h\"P`", mockFile0.getName());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertFalse(zipArchiveOutputStream0.isSeekable());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertNotNull(zipArchiveOutputStream0);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      
      mockFile0.deleteOnExit();
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.canWrite());
      assertTrue(mockFile0.isFile());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.canRead());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.length());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isDirectory());
      assertEquals("/experiment/IBM850/K@<[LT~&.7W\"h\"P`", mockFile0.toString());
      assertEquals("/experiment/IBM850", mockFile0.getParent());
      assertTrue(mockFile0.isAbsolute());
      assertEquals("K@<[LT~&.7W\"h\"P`", mockFile0.getName());
      
      jarArchiveEntry0.setSize(71776119061217269L);
      assertEquals(71776119061217269L, jarArchiveEntry0.getSize());
      assertNull(jarArchiveEntry0.getComment());
      assertEquals((-1L), jarArchiveEntry0.getDataOffset());
      assertEquals((-1), jarArchiveEntry0.getMethod());
      assertEquals(0L, jarArchiveEntry0.getExternalAttributes());
      assertEquals(0, jarArchiveEntry0.getUnixMode());
      assertEquals(0, jarArchiveEntry0.getRawFlag());
      assertEquals(0, jarArchiveEntry0.getInternalAttributes());
      assertEquals(0, jarArchiveEntry0.getVersionMadeBy());
      assertEquals(0, jarArchiveEntry0.getPlatform());
      assertEquals((-1L), jarArchiveEntry0.getCompressedSize());
      assertEquals(0, jarArchiveEntry0.getVersionRequired());
      assertFalse(jarArchiveEntry0.isUnixSymlink());
      assertEquals("K@<[LT~&.7W\"h\"P`", jarArchiveEntry0.toString());
      assertFalse(jarArchiveEntry0.isStreamContiguous());
      assertEquals((-1L), jarArchiveEntry0.getCrc());
      assertEquals("K@<[LT~&.7W\"h\"P`", jarArchiveEntry0.getName());
      assertFalse(jarArchiveEntry0.isDirectory());
      assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      
      // Undeclared exception!
//      try { 
        zipArchiveOutputStream0.writeCentralFileHeader(jarArchiveEntry0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream$EntryMetaData", e);
//      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      JarArchiveEntry jarArchiveEntry0 = new JarArchiveEntry("K@<[LT~&.8W\"0\"P$");
      assertEquals((-1L), jarArchiveEntry0.getCompressedSize());
      assertEquals(0, jarArchiveEntry0.getVersionRequired());
      assertFalse(jarArchiveEntry0.isUnixSymlink());
      assertEquals(0, jarArchiveEntry0.getUnixMode());
      assertEquals("K@<[LT~&.8W\"0\"P$", jarArchiveEntry0.toString());
      assertEquals(0, jarArchiveEntry0.getVersionMadeBy());
      assertEquals("K@<[LT~&.8W\"0\"P$", jarArchiveEntry0.getName());
      assertEquals(0, jarArchiveEntry0.getPlatform());
      assertEquals(0, jarArchiveEntry0.getRawFlag());
      assertEquals((-1), jarArchiveEntry0.getMethod());
      assertNull(jarArchiveEntry0.getComment());
      assertEquals((-1L), jarArchiveEntry0.getDataOffset());
      assertEquals(0L, jarArchiveEntry0.getExternalAttributes());
      assertEquals(0, jarArchiveEntry0.getInternalAttributes());
      assertFalse(jarArchiveEntry0.isStreamContiguous());
      assertFalse(jarArchiveEntry0.isDirectory());
      assertEquals((-1L), jarArchiveEntry0.getSize());
      assertEquals((-1L), jarArchiveEntry0.getCrc());
      assertNotNull(jarArchiveEntry0);
      assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      
      MockFile mockFile0 = new MockFile("IBM850", "K@<[LT~&.8W\"0\"P$");
      assertNotNull(mockFile0);
      
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(mockFile0);
      assertEquals("/experiment/IBM850/K@<[LT~&.8W\"0\"P$", mockFile0.toString());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.exists());
      assertEquals("/experiment/IBM850", mockFile0.getParent());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.isAbsolute());
      assertTrue(mockFile0.canExecute());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.canWrite());
      assertTrue(mockFile0.isFile());
      assertTrue(mockFile0.canRead());
      assertEquals("K@<[LT~&.8W\"0\"P$", mockFile0.getName());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertFalse(zipArchiveOutputStream0.isSeekable());
      assertNotNull(zipArchiveOutputStream0);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      jarArchiveEntry0.setSize(2048);
      assertEquals((-1L), jarArchiveEntry0.getCompressedSize());
      assertEquals(0, jarArchiveEntry0.getVersionRequired());
      assertFalse(jarArchiveEntry0.isUnixSymlink());
      assertEquals(0, jarArchiveEntry0.getUnixMode());
      assertEquals("K@<[LT~&.8W\"0\"P$", jarArchiveEntry0.toString());
      assertEquals(0, jarArchiveEntry0.getVersionMadeBy());
      assertEquals("K@<[LT~&.8W\"0\"P$", jarArchiveEntry0.getName());
      assertEquals(0, jarArchiveEntry0.getPlatform());
      assertEquals(0, jarArchiveEntry0.getRawFlag());
      assertEquals((-1), jarArchiveEntry0.getMethod());
      assertNull(jarArchiveEntry0.getComment());
      assertEquals((-1L), jarArchiveEntry0.getDataOffset());
      assertEquals(0L, jarArchiveEntry0.getExternalAttributes());
      assertEquals(0, jarArchiveEntry0.getInternalAttributes());
      assertFalse(jarArchiveEntry0.isStreamContiguous());
      assertFalse(jarArchiveEntry0.isDirectory());
      assertEquals(2048L, jarArchiveEntry0.getSize());
      assertEquals((-1L), jarArchiveEntry0.getCrc());
      assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      
      zipArchiveOutputStream0.putArchiveEntry(jarArchiveEntry0);
      assertEquals((-1L), jarArchiveEntry0.getCompressedSize());
      assertEquals(0, jarArchiveEntry0.getVersionRequired());
      assertFalse(jarArchiveEntry0.isUnixSymlink());
      assertEquals(0, jarArchiveEntry0.getUnixMode());
      assertEquals("K@<[LT~&.8W\"0\"P$", jarArchiveEntry0.toString());
      assertEquals(0, jarArchiveEntry0.getVersionMadeBy());
      assertEquals("K@<[LT~&.8W\"0\"P$", jarArchiveEntry0.getName());
      assertEquals(0, jarArchiveEntry0.getPlatform());
      assertEquals(0, jarArchiveEntry0.getRawFlag());
      assertNull(jarArchiveEntry0.getComment());
      assertEquals((-1L), jarArchiveEntry0.getDataOffset());
      assertEquals(0L, jarArchiveEntry0.getExternalAttributes());
      assertEquals(0, jarArchiveEntry0.getInternalAttributes());
      assertFalse(jarArchiveEntry0.isStreamContiguous());
      assertFalse(jarArchiveEntry0.isDirectory());
      assertEquals(2048L, jarArchiveEntry0.getSize());
      assertEquals(8, jarArchiveEntry0.getMethod());
      assertEquals((-1L), jarArchiveEntry0.getCrc());
      assertEquals("/experiment/IBM850/K@<[LT~&.8W\"0\"P$", mockFile0.toString());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.exists());
      assertEquals("/experiment/IBM850", mockFile0.getParent());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.isAbsolute());
      assertTrue(mockFile0.canExecute());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals(46L, mockFile0.length());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.canWrite());
      assertTrue(mockFile0.isFile());
      assertTrue(mockFile0.canRead());
      assertEquals("K@<[LT~&.8W\"0\"P$", mockFile0.getName());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertFalse(zipArchiveOutputStream0.isSeekable());
      assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      
      boolean boolean1 = mockFile0.setWritable(false, false);
      assertFalse(boolean1 == boolean0);
      assertEquals("/experiment/IBM850/K@<[LT~&.8W\"0\"P$", mockFile0.toString());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.exists());
      assertEquals("/experiment/IBM850", mockFile0.getParent());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertFalse(mockFile0.canWrite());
      assertTrue(mockFile0.isAbsolute());
      assertTrue(mockFile0.canExecute());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals(46L, mockFile0.length());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.isFile());
      assertTrue(mockFile0.canRead());
      assertEquals("K@<[LT~&.8W\"0\"P$", mockFile0.getName());
      assertTrue(boolean1);
      
      System.setCurrentTimeMillis(135L);
//      try { 
        zipArchiveOutputStream0.writeCentralFileHeader(jarArchiveEntry0);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.evosuite.runtime.mock.java.io.NativeMockedIO", e);
//      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      JarArchiveEntry jarArchiveEntry0 = new JarArchiveEntry("Lz^|wF&;`V%Ir6");
      assertEquals((-1L), jarArchiveEntry0.getDataOffset());
      assertEquals(0, jarArchiveEntry0.getVersionMadeBy());
      assertEquals(0, jarArchiveEntry0.getUnixMode());
      assertEquals(0, jarArchiveEntry0.getRawFlag());
      assertEquals((-1L), jarArchiveEntry0.getCrc());
      assertEquals((-1L), jarArchiveEntry0.getSize());
      assertNull(jarArchiveEntry0.getComment());
      assertEquals(0, jarArchiveEntry0.getInternalAttributes());
      assertFalse(jarArchiveEntry0.isUnixSymlink());
      assertEquals("Lz^|wF&;`V%Ir6", jarArchiveEntry0.getName());
      assertFalse(jarArchiveEntry0.isStreamContiguous());
      assertFalse(jarArchiveEntry0.isDirectory());
      assertEquals(0, jarArchiveEntry0.getPlatform());
      assertEquals("Lz^|wF&;`V%Ir6", jarArchiveEntry0.toString());
      assertEquals((-1), jarArchiveEntry0.getMethod());
      assertEquals(0, jarArchiveEntry0.getVersionRequired());
      assertEquals((-1L), jarArchiveEntry0.getCompressedSize());
      assertEquals(0L, jarArchiveEntry0.getExternalAttributes());
      assertNotNull(jarArchiveEntry0);
      assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      
      ZipExtraField[] zipExtraFieldArray0 = new ZipExtraField[4];
      ZipEightByteInteger zipEightByteInteger0 = ZipEightByteInteger.ZERO;
      assertNotNull(zipEightByteInteger0);
      
      Zip64ExtendedInformationExtraField zip64ExtendedInformationExtraField0 = new Zip64ExtendedInformationExtraField(zipEightByteInteger0, zipEightByteInteger0, zipEightByteInteger0, (ZipLong) null);
      assertNotNull(zip64ExtendedInformationExtraField0);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      zipExtraFieldArray0[0] = (ZipExtraField) zip64ExtendedInformationExtraField0;
      JarMarker jarMarker0 = new JarMarker();
      assertNotNull(jarMarker0);
      
      zipExtraFieldArray0[1] = (ZipExtraField) jarMarker0;
      UnicodeCommentExtraField unicodeCommentExtraField0 = new UnicodeCommentExtraField();
      assertEquals(0L, unicodeCommentExtraField0.getNameCRC32());
      assertNotNull(unicodeCommentExtraField0);
      
      zipExtraFieldArray0[2] = (ZipExtraField) unicodeCommentExtraField0;
      ResourceAlignmentExtraField resourceAlignmentExtraField0 = new ResourceAlignmentExtraField(21, true, 21);
      assertTrue(resourceAlignmentExtraField0.allowMethodChange());
      assertEquals((short)21, resourceAlignmentExtraField0.getAlignment());
      assertNotNull(resourceAlignmentExtraField0);
      assertEquals(2, ResourceAlignmentExtraField.BASE_SIZE);
      
      zipExtraFieldArray0[3] = (ZipExtraField) resourceAlignmentExtraField0;
      jarArchiveEntry0.setExtraFields(zipExtraFieldArray0);
      assertEquals((-1L), jarArchiveEntry0.getDataOffset());
      assertEquals(0, jarArchiveEntry0.getVersionMadeBy());
      assertEquals(0, jarArchiveEntry0.getUnixMode());
      assertEquals(0, jarArchiveEntry0.getRawFlag());
      assertEquals((-1L), jarArchiveEntry0.getCrc());
      assertEquals((-1L), jarArchiveEntry0.getSize());
      assertNull(jarArchiveEntry0.getComment());
      assertEquals(0, jarArchiveEntry0.getInternalAttributes());
      assertFalse(jarArchiveEntry0.isUnixSymlink());
      assertEquals("Lz^|wF&;`V%Ir6", jarArchiveEntry0.getName());
      assertFalse(jarArchiveEntry0.isStreamContiguous());
      assertFalse(jarArchiveEntry0.isDirectory());
      assertEquals(0, jarArchiveEntry0.getPlatform());
      assertEquals("Lz^|wF&;`V%Ir6", jarArchiveEntry0.toString());
      assertEquals((-1), jarArchiveEntry0.getMethod());
      assertEquals(0, jarArchiveEntry0.getVersionRequired());
      assertEquals((-1L), jarArchiveEntry0.getCompressedSize());
      assertEquals(0L, jarArchiveEntry0.getExternalAttributes());
      assertEquals(4, zipExtraFieldArray0.length);
      assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      
      MockFile mockFile0 = new MockFile("Lz^|wF&;`V%Ir6");
      assertNotNull(mockFile0);
      
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(mockFile0);
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals("Lz^|wF&;`V%Ir6", mockFile0.toString());
      assertTrue(mockFile0.canWrite());
      assertFalse(mockFile0.isAbsolute());
      assertFalse(mockFile0.isDirectory());
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.canRead());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertNull(mockFile0.getParent());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.isFile());
      assertEquals("Lz^|wF&;`V%Ir6", mockFile0.getName());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertFalse(zipArchiveOutputStream0.isSeekable());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertNotNull(zipArchiveOutputStream0);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      
      zipArchiveOutputStream0.setEncoding((String) null);
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals("Lz^|wF&;`V%Ir6", mockFile0.toString());
      assertTrue(mockFile0.canWrite());
      assertFalse(mockFile0.isAbsolute());
      assertFalse(mockFile0.isDirectory());
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.canRead());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertNull(mockFile0.getParent());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.isFile());
      assertEquals("Lz^|wF&;`V%Ir6", mockFile0.getName());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertNull(zipArchiveOutputStream0.getEncoding());
      assertFalse(zipArchiveOutputStream0.isSeekable());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      
//      try { 
        zipArchiveOutputStream0.putArchiveEntry(jarArchiveEntry0);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Simulated IOException
//         //
//         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
//      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      JarArchiveEntry jarArchiveEntry0 = new JarArchiveEntry("Lz^|F&;`V%Ir6");
      assertEquals(0, jarArchiveEntry0.getRawFlag());
      assertEquals((-1L), jarArchiveEntry0.getCrc());
      assertEquals(0, jarArchiveEntry0.getVersionRequired());
      assertEquals((-1L), jarArchiveEntry0.getDataOffset());
      assertEquals(0L, jarArchiveEntry0.getExternalAttributes());
      assertEquals((-1L), jarArchiveEntry0.getCompressedSize());
      assertFalse(jarArchiveEntry0.isDirectory());
      assertEquals("Lz^|F&;`V%Ir6", jarArchiveEntry0.toString());
      assertEquals((-1L), jarArchiveEntry0.getSize());
      assertEquals(0, jarArchiveEntry0.getPlatform());
      assertFalse(jarArchiveEntry0.isStreamContiguous());
      assertEquals("Lz^|F&;`V%Ir6", jarArchiveEntry0.getName());
      assertEquals(0, jarArchiveEntry0.getInternalAttributes());
      assertEquals((-1), jarArchiveEntry0.getMethod());
      assertNull(jarArchiveEntry0.getComment());
      assertFalse(jarArchiveEntry0.isUnixSymlink());
      assertEquals(0, jarArchiveEntry0.getVersionMadeBy());
      assertEquals(0, jarArchiveEntry0.getUnixMode());
      assertNotNull(jarArchiveEntry0);
      assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      
      MockFile mockFile0 = new MockFile("Lz^|F&;`V%Ir6", "Lz^|F&;`V%Ir6");
      assertNotNull(mockFile0);
      
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(mockFile0);
      assertEquals(0L, mockFile0.length());
      assertTrue(mockFile0.exists());
      assertEquals("/experiment/Lz^|F&;`V%Ir6/Lz^|F&;`V%Ir6", mockFile0.toString());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isDirectory());
      assertTrue(mockFile0.canRead());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.canWrite());
      assertTrue(mockFile0.isFile());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals("/experiment/Lz^|F&;`V%Ir6", mockFile0.getParent());
      assertTrue(mockFile0.canExecute());
      assertEquals("Lz^|F&;`V%Ir6", mockFile0.getName());
      assertTrue(mockFile0.isAbsolute());
      assertFalse(zipArchiveOutputStream0.isSeekable());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertNotNull(zipArchiveOutputStream0);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      
      zipArchiveOutputStream0.writeDataDescriptor(jarArchiveEntry0);
      assertEquals(0, jarArchiveEntry0.getRawFlag());
      assertEquals((-1L), jarArchiveEntry0.getCrc());
      assertEquals(0, jarArchiveEntry0.getVersionRequired());
      assertEquals((-1L), jarArchiveEntry0.getDataOffset());
      assertEquals(0L, jarArchiveEntry0.getExternalAttributes());
      assertEquals((-1L), jarArchiveEntry0.getCompressedSize());
      assertFalse(jarArchiveEntry0.isDirectory());
      assertEquals("Lz^|F&;`V%Ir6", jarArchiveEntry0.toString());
      assertEquals((-1L), jarArchiveEntry0.getSize());
      assertEquals(0, jarArchiveEntry0.getPlatform());
      assertFalse(jarArchiveEntry0.isStreamContiguous());
      assertEquals("Lz^|F&;`V%Ir6", jarArchiveEntry0.getName());
      assertEquals(0, jarArchiveEntry0.getInternalAttributes());
      assertEquals((-1), jarArchiveEntry0.getMethod());
      assertNull(jarArchiveEntry0.getComment());
      assertFalse(jarArchiveEntry0.isUnixSymlink());
      assertEquals(0, jarArchiveEntry0.getVersionMadeBy());
      assertEquals(0, jarArchiveEntry0.getUnixMode());
      assertEquals(0L, mockFile0.length());
      assertTrue(mockFile0.exists());
      assertEquals("/experiment/Lz^|F&;`V%Ir6/Lz^|F&;`V%Ir6", mockFile0.toString());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isDirectory());
      assertTrue(mockFile0.canRead());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.canWrite());
      assertTrue(mockFile0.isFile());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals("/experiment/Lz^|F&;`V%Ir6", mockFile0.getParent());
      assertTrue(mockFile0.canExecute());
      assertEquals("Lz^|F&;`V%Ir6", mockFile0.getName());
      assertTrue(mockFile0.isAbsolute());
      assertFalse(zipArchiveOutputStream0.isSeekable());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      
      zipArchiveOutputStream0.setEncoding((String) null);
      assertEquals(0L, mockFile0.length());
      assertTrue(mockFile0.exists());
      assertEquals("/experiment/Lz^|F&;`V%Ir6/Lz^|F&;`V%Ir6", mockFile0.toString());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isDirectory());
      assertTrue(mockFile0.canRead());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.canWrite());
      assertTrue(mockFile0.isFile());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals("/experiment/Lz^|F&;`V%Ir6", mockFile0.getParent());
      assertTrue(mockFile0.canExecute());
      assertEquals("Lz^|F&;`V%Ir6", mockFile0.getName());
      assertTrue(mockFile0.isAbsolute());
      assertFalse(zipArchiveOutputStream0.isSeekable());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertNull(zipArchiveOutputStream0.getEncoding());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      
      ZipArchiveOutputStream zipArchiveOutputStream1 = new ZipArchiveOutputStream(zipArchiveOutputStream0);
      assertFalse(zipArchiveOutputStream1.equals((Object)zipArchiveOutputStream0));
      assertEquals(0L, mockFile0.length());
      assertTrue(mockFile0.exists());
      assertEquals("/experiment/Lz^|F&;`V%Ir6/Lz^|F&;`V%Ir6", mockFile0.toString());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isDirectory());
      assertTrue(mockFile0.canRead());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.canWrite());
      assertTrue(mockFile0.isFile());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals("/experiment/Lz^|F&;`V%Ir6", mockFile0.getParent());
      assertTrue(mockFile0.canExecute());
      assertEquals("Lz^|F&;`V%Ir6", mockFile0.getName());
      assertTrue(mockFile0.isAbsolute());
      assertFalse(zipArchiveOutputStream0.isSeekable());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertNull(zipArchiveOutputStream0.getEncoding());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertFalse(zipArchiveOutputStream1.isSeekable());
      assertEquals(0, zipArchiveOutputStream1.getCount());
      assertEquals(0L, zipArchiveOutputStream1.getBytesWritten());
      assertEquals("UTF8", zipArchiveOutputStream1.getEncoding());
      assertNotNull(zipArchiveOutputStream1);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      
//      try { 
        zipArchiveOutputStream1.destroy();
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Error in writing to file
//         //
//         verifyException("org.evosuite.runtime.mock.java.io.NativeMockedIO", e);
//      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      JarArchiveEntry jarArchiveEntry0 = new JarArchiveEntry("K@<[LT~&.8W\"0\"P$");
      assertEquals(0, jarArchiveEntry0.getInternalAttributes());
      assertEquals(0, jarArchiveEntry0.getPlatform());
      assertFalse(jarArchiveEntry0.isStreamContiguous());
      assertEquals((-1), jarArchiveEntry0.getMethod());
      assertNull(jarArchiveEntry0.getComment());
      assertFalse(jarArchiveEntry0.isUnixSymlink());
      assertEquals(0, jarArchiveEntry0.getVersionMadeBy());
      assertEquals(0, jarArchiveEntry0.getRawFlag());
      assertEquals(0, jarArchiveEntry0.getUnixMode());
      assertEquals("K@<[LT~&.8W\"0\"P$", jarArchiveEntry0.getName());
      assertEquals((-1L), jarArchiveEntry0.getCrc());
      assertEquals("K@<[LT~&.8W\"0\"P$", jarArchiveEntry0.toString());
      assertEquals((-1L), jarArchiveEntry0.getDataOffset());
      assertEquals(0, jarArchiveEntry0.getVersionRequired());
      assertEquals((-1L), jarArchiveEntry0.getCompressedSize());
      assertEquals(0L, jarArchiveEntry0.getExternalAttributes());
      assertFalse(jarArchiveEntry0.isDirectory());
      assertEquals((-1L), jarArchiveEntry0.getSize());
      assertNotNull(jarArchiveEntry0);
      assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      
      jarArchiveEntry0.setComment("K@<[LT~&.8W\"0\"P$");
      assertEquals(0, jarArchiveEntry0.getInternalAttributes());
      assertEquals(0, jarArchiveEntry0.getPlatform());
      assertFalse(jarArchiveEntry0.isStreamContiguous());
      assertEquals((-1), jarArchiveEntry0.getMethod());
      assertFalse(jarArchiveEntry0.isUnixSymlink());
      assertEquals(0, jarArchiveEntry0.getVersionMadeBy());
      assertEquals(0, jarArchiveEntry0.getRawFlag());
      assertEquals(0, jarArchiveEntry0.getUnixMode());
      assertEquals("K@<[LT~&.8W\"0\"P$", jarArchiveEntry0.getName());
      assertEquals((-1L), jarArchiveEntry0.getCrc());
      assertEquals("K@<[LT~&.8W\"0\"P$", jarArchiveEntry0.toString());
      assertEquals((-1L), jarArchiveEntry0.getDataOffset());
      assertEquals(0, jarArchiveEntry0.getVersionRequired());
      assertEquals((-1L), jarArchiveEntry0.getCompressedSize());
      assertEquals(0L, jarArchiveEntry0.getExternalAttributes());
      assertFalse(jarArchiveEntry0.isDirectory());
      assertEquals("K@<[LT~&.8W\"0\"P$", jarArchiveEntry0.getComment());
      assertEquals((-1L), jarArchiveEntry0.getSize());
      assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      
      ZipArchiveOutputStream.UnicodeExtraFieldPolicy zipArchiveOutputStream_UnicodeExtraFieldPolicy0 = ZipArchiveOutputStream.UnicodeExtraFieldPolicy.NOT_ENCODEABLE;
      assertEquals("not encodeable", zipArchiveOutputStream_UnicodeExtraFieldPolicy0.toString());
      assertNotNull(zipArchiveOutputStream_UnicodeExtraFieldPolicy0);
      
      MockFile mockFile0 = new MockFile("K@<[LT~&.8W\"0\"P$");
      assertNotNull(mockFile0);
      
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(mockFile0);
      assertEquals("K@<[LT~&.8W\"0\"P$", mockFile0.getName());
      assertEquals(0L, mockFile0.length());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isDirectory());
      assertFalse(mockFile0.isHidden());
      assertEquals("K@<[LT~&.8W\"0\"P$", mockFile0.toString());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertNull(mockFile0.getParent());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.canWrite());
      assertTrue(mockFile0.isFile());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertFalse(zipArchiveOutputStream0.isSeekable());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertNotNull(zipArchiveOutputStream0);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      
      ZipArchiveOutputStream.UnicodeExtraFieldPolicy zipArchiveOutputStream_UnicodeExtraFieldPolicy1 = ZipArchiveOutputStream.UnicodeExtraFieldPolicy.ALWAYS;
      assertFalse(zipArchiveOutputStream_UnicodeExtraFieldPolicy1.equals((Object)zipArchiveOutputStream_UnicodeExtraFieldPolicy0));
      assertEquals("always", zipArchiveOutputStream_UnicodeExtraFieldPolicy1.toString());
      assertNotNull(zipArchiveOutputStream_UnicodeExtraFieldPolicy1);
      assertNotSame(zipArchiveOutputStream_UnicodeExtraFieldPolicy1, zipArchiveOutputStream_UnicodeExtraFieldPolicy0);
      
      zipArchiveOutputStream0.setCreateUnicodeExtraFields(zipArchiveOutputStream_UnicodeExtraFieldPolicy1);
      assertFalse(zipArchiveOutputStream_UnicodeExtraFieldPolicy1.equals((Object)zipArchiveOutputStream_UnicodeExtraFieldPolicy0));
      assertEquals("K@<[LT~&.8W\"0\"P$", mockFile0.getName());
      assertEquals(0L, mockFile0.length());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isDirectory());
      assertFalse(mockFile0.isHidden());
      assertEquals("K@<[LT~&.8W\"0\"P$", mockFile0.toString());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertNull(mockFile0.getParent());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.canWrite());
      assertTrue(mockFile0.isFile());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertFalse(zipArchiveOutputStream0.isSeekable());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertEquals("always", zipArchiveOutputStream_UnicodeExtraFieldPolicy1.toString());
      assertNotSame(zipArchiveOutputStream_UnicodeExtraFieldPolicy1, zipArchiveOutputStream_UnicodeExtraFieldPolicy0);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      
      zipArchiveOutputStream0.putArchiveEntry(jarArchiveEntry0);
      assertEquals(0, jarArchiveEntry0.getInternalAttributes());
      assertEquals(0, jarArchiveEntry0.getPlatform());
      assertFalse(jarArchiveEntry0.isStreamContiguous());
      assertFalse(jarArchiveEntry0.isUnixSymlink());
      assertEquals(0, jarArchiveEntry0.getVersionMadeBy());
      assertEquals(0, jarArchiveEntry0.getRawFlag());
      assertEquals(0, jarArchiveEntry0.getUnixMode());
      assertEquals("K@<[LT~&.8W\"0\"P$", jarArchiveEntry0.getName());
      assertEquals((-1L), jarArchiveEntry0.getCrc());
      assertEquals("K@<[LT~&.8W\"0\"P$", jarArchiveEntry0.toString());
      assertEquals((-1L), jarArchiveEntry0.getDataOffset());
      assertEquals(0, jarArchiveEntry0.getVersionRequired());
      assertEquals((-1L), jarArchiveEntry0.getCompressedSize());
      assertEquals(0L, jarArchiveEntry0.getExternalAttributes());
      assertFalse(jarArchiveEntry0.isDirectory());
      assertEquals("K@<[LT~&.8W\"0\"P$", jarArchiveEntry0.getComment());
      assertEquals((-1L), jarArchiveEntry0.getSize());
      assertEquals(8, jarArchiveEntry0.getMethod());
      assertEquals("K@<[LT~&.8W\"0\"P$", mockFile0.getName());
      assertEquals(96L, mockFile0.length());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isDirectory());
      assertFalse(mockFile0.isHidden());
      assertEquals("K@<[LT~&.8W\"0\"P$", mockFile0.toString());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertNull(mockFile0.getParent());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.canWrite());
      assertTrue(mockFile0.isFile());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertFalse(zipArchiveOutputStream0.isSeekable());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      
      zipArchiveOutputStream0.setEncoding("Z");
      assertEquals("K@<[LT~&.8W\"0\"P$", mockFile0.getName());
      assertEquals(96L, mockFile0.length());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isDirectory());
      assertFalse(mockFile0.isHidden());
      assertEquals("K@<[LT~&.8W\"0\"P$", mockFile0.toString());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertNull(mockFile0.getParent());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.canWrite());
      assertTrue(mockFile0.isFile());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertFalse(zipArchiveOutputStream0.isSeekable());
      assertEquals("Z", zipArchiveOutputStream0.getEncoding());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      
//      try { 
        zipArchiveOutputStream0.writeCentralFileHeader(jarArchiveEntry0);
//        fail("Expecting exception: UnsupportedEncodingException");
      
//      } catch(UnsupportedEncodingException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      JarArchiveEntry jarArchiveEntry0 = new JarArchiveEntry("K@<[LT~&.8W\"0\"P$");
      assertEquals(0L, jarArchiveEntry0.getExternalAttributes());
      assertEquals((-1), jarArchiveEntry0.getMethod());
      assertEquals((-1L), jarArchiveEntry0.getDataOffset());
      assertEquals(0, jarArchiveEntry0.getInternalAttributes());
      assertNull(jarArchiveEntry0.getComment());
      assertEquals((-1L), jarArchiveEntry0.getSize());
      assertFalse(jarArchiveEntry0.isDirectory());
      assertEquals((-1L), jarArchiveEntry0.getCrc());
      assertFalse(jarArchiveEntry0.isStreamContiguous());
      assertEquals((-1L), jarArchiveEntry0.getCompressedSize());
      assertFalse(jarArchiveEntry0.isUnixSymlink());
      assertEquals(0, jarArchiveEntry0.getRawFlag());
      assertEquals(0, jarArchiveEntry0.getPlatform());
      assertEquals("K@<[LT~&.8W\"0\"P$", jarArchiveEntry0.toString());
      assertEquals(0, jarArchiveEntry0.getUnixMode());
      assertEquals(0, jarArchiveEntry0.getVersionMadeBy());
      assertEquals("K@<[LT~&.8W\"0\"P$", jarArchiveEntry0.getName());
      assertEquals(0, jarArchiveEntry0.getVersionRequired());
      assertNotNull(jarArchiveEntry0);
      assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      
      MockFile mockFile0 = new MockFile("IBM850", "K@<[LT~&.8W\"0\"P$");
      assertNotNull(mockFile0);
      
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(mockFile0);
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.canWrite());
      assertTrue(mockFile0.isFile());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.canRead());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals("K@<[LT~&.8W\"0\"P$", mockFile0.getName());
      assertEquals(0L, mockFile0.length());
      assertTrue(mockFile0.exists());
      assertEquals("/experiment/IBM850/K@<[LT~&.8W\"0\"P$", mockFile0.toString());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isDirectory());
      assertEquals("/experiment/IBM850", mockFile0.getParent());
      assertTrue(mockFile0.isAbsolute());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertFalse(zipArchiveOutputStream0.isSeekable());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertNotNull(zipArchiveOutputStream0);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      
      jarArchiveEntry0.setSize(71776119061217280L);
      assertEquals(0L, jarArchiveEntry0.getExternalAttributes());
      assertEquals((-1), jarArchiveEntry0.getMethod());
      assertEquals((-1L), jarArchiveEntry0.getDataOffset());
      assertEquals(0, jarArchiveEntry0.getInternalAttributes());
      assertEquals(71776119061217280L, jarArchiveEntry0.getSize());
      assertNull(jarArchiveEntry0.getComment());
      assertFalse(jarArchiveEntry0.isDirectory());
      assertEquals((-1L), jarArchiveEntry0.getCrc());
      assertFalse(jarArchiveEntry0.isStreamContiguous());
      assertEquals((-1L), jarArchiveEntry0.getCompressedSize());
      assertFalse(jarArchiveEntry0.isUnixSymlink());
      assertEquals(0, jarArchiveEntry0.getRawFlag());
      assertEquals(0, jarArchiveEntry0.getPlatform());
      assertEquals("K@<[LT~&.8W\"0\"P$", jarArchiveEntry0.toString());
      assertEquals(0, jarArchiveEntry0.getUnixMode());
      assertEquals(0, jarArchiveEntry0.getVersionMadeBy());
      assertEquals("K@<[LT~&.8W\"0\"P$", jarArchiveEntry0.getName());
      assertEquals(0, jarArchiveEntry0.getVersionRequired());
      assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      
      zipArchiveOutputStream0.putArchiveEntry(jarArchiveEntry0);
      assertEquals(0L, jarArchiveEntry0.getExternalAttributes());
      assertEquals((-1L), jarArchiveEntry0.getDataOffset());
      assertEquals(0, jarArchiveEntry0.getInternalAttributes());
      assertEquals(71776119061217280L, jarArchiveEntry0.getSize());
      assertEquals(8, jarArchiveEntry0.getMethod());
      assertNull(jarArchiveEntry0.getComment());
      assertFalse(jarArchiveEntry0.isDirectory());
      assertEquals((-1L), jarArchiveEntry0.getCrc());
      assertFalse(jarArchiveEntry0.isStreamContiguous());
      assertEquals((-1L), jarArchiveEntry0.getCompressedSize());
      assertFalse(jarArchiveEntry0.isUnixSymlink());
      assertEquals(0, jarArchiveEntry0.getRawFlag());
      assertEquals(0, jarArchiveEntry0.getPlatform());
      assertEquals("K@<[LT~&.8W\"0\"P$", jarArchiveEntry0.toString());
      assertEquals(0, jarArchiveEntry0.getUnixMode());
      assertEquals(0, jarArchiveEntry0.getVersionMadeBy());
      assertEquals("K@<[LT~&.8W\"0\"P$", jarArchiveEntry0.getName());
      assertEquals(0, jarArchiveEntry0.getVersionRequired());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.canWrite());
      assertTrue(mockFile0.isFile());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.canRead());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals("K@<[LT~&.8W\"0\"P$", mockFile0.getName());
      assertTrue(mockFile0.exists());
      assertEquals("/experiment/IBM850/K@<[LT~&.8W\"0\"P$", mockFile0.toString());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isDirectory());
      assertEquals(66L, mockFile0.length());
      assertEquals("/experiment/IBM850", mockFile0.getParent());
      assertTrue(mockFile0.isAbsolute());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertFalse(zipArchiveOutputStream0.isSeekable());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      
      zipArchiveOutputStream0.writeCentralFileHeader(jarArchiveEntry0);
      assertEquals(0L, jarArchiveEntry0.getExternalAttributes());
      assertEquals((-1L), jarArchiveEntry0.getDataOffset());
      assertEquals(0, jarArchiveEntry0.getInternalAttributes());
      assertEquals(71776119061217280L, jarArchiveEntry0.getSize());
      assertEquals(8, jarArchiveEntry0.getMethod());
      assertNull(jarArchiveEntry0.getComment());
      assertFalse(jarArchiveEntry0.isDirectory());
      assertEquals((-1L), jarArchiveEntry0.getCrc());
      assertFalse(jarArchiveEntry0.isStreamContiguous());
      assertEquals((-1L), jarArchiveEntry0.getCompressedSize());
      assertFalse(jarArchiveEntry0.isUnixSymlink());
      assertEquals(0, jarArchiveEntry0.getRawFlag());
      assertEquals(0, jarArchiveEntry0.getPlatform());
      assertEquals("K@<[LT~&.8W\"0\"P$", jarArchiveEntry0.toString());
      assertEquals(0, jarArchiveEntry0.getUnixMode());
      assertEquals(0, jarArchiveEntry0.getVersionMadeBy());
      assertEquals("K@<[LT~&.8W\"0\"P$", jarArchiveEntry0.getName());
      assertEquals(0, jarArchiveEntry0.getVersionRequired());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.canWrite());
      assertTrue(mockFile0.isFile());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals(148L, mockFile0.length());
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.canRead());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals("K@<[LT~&.8W\"0\"P$", mockFile0.getName());
      assertTrue(mockFile0.exists());
      assertEquals("/experiment/IBM850/K@<[LT~&.8W\"0\"P$", mockFile0.toString());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isDirectory());
      assertEquals("/experiment/IBM850", mockFile0.getParent());
      assertTrue(mockFile0.isAbsolute());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertFalse(zipArchiveOutputStream0.isSeekable());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      
//      try { 
        zipArchiveOutputStream0.writeCentralDirectoryEnd();
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Error in writing to file
//         //
//         verifyException("org.evosuite.runtime.mock.java.io.NativeMockedIO", e);
//      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      JarArchiveEntry jarArchiveEntry0 = new JarArchiveEntry("0");
      assertEquals((-1L), jarArchiveEntry0.getCompressedSize());
      assertEquals(0, jarArchiveEntry0.getVersionRequired());
      assertFalse(jarArchiveEntry0.isUnixSymlink());
      assertEquals((-1L), jarArchiveEntry0.getCrc());
      assertFalse(jarArchiveEntry0.isStreamContiguous());
      assertEquals((-1L), jarArchiveEntry0.getSize());
      assertFalse(jarArchiveEntry0.isDirectory());
      assertEquals("0", jarArchiveEntry0.toString());
      assertEquals("0", jarArchiveEntry0.getName());
      assertEquals((-1), jarArchiveEntry0.getMethod());
      assertNull(jarArchiveEntry0.getComment());
      assertEquals(0L, jarArchiveEntry0.getExternalAttributes());
      assertEquals((-1L), jarArchiveEntry0.getDataOffset());
      assertEquals(0, jarArchiveEntry0.getRawFlag());
      assertEquals(0, jarArchiveEntry0.getPlatform());
      assertEquals(0, jarArchiveEntry0.getInternalAttributes());
      assertEquals(0, jarArchiveEntry0.getVersionMadeBy());
      assertEquals(0, jarArchiveEntry0.getUnixMode());
      assertNotNull(jarArchiveEntry0);
      assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      
      jarArchiveEntry0.setComment("");
      assertEquals((-1L), jarArchiveEntry0.getCompressedSize());
      assertEquals(0, jarArchiveEntry0.getVersionRequired());
      assertFalse(jarArchiveEntry0.isUnixSymlink());
      assertEquals((-1L), jarArchiveEntry0.getCrc());
      assertFalse(jarArchiveEntry0.isStreamContiguous());
      assertEquals((-1L), jarArchiveEntry0.getSize());
      assertFalse(jarArchiveEntry0.isDirectory());
      assertEquals("0", jarArchiveEntry0.toString());
      assertEquals("0", jarArchiveEntry0.getName());
      assertEquals((-1), jarArchiveEntry0.getMethod());
      assertEquals("", jarArchiveEntry0.getComment());
      assertEquals(0L, jarArchiveEntry0.getExternalAttributes());
      assertEquals((-1L), jarArchiveEntry0.getDataOffset());
      assertEquals(0, jarArchiveEntry0.getRawFlag());
      assertEquals(0, jarArchiveEntry0.getPlatform());
      assertEquals(0, jarArchiveEntry0.getInternalAttributes());
      assertEquals(0, jarArchiveEntry0.getVersionMadeBy());
      assertEquals(0, jarArchiveEntry0.getUnixMode());
      assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      
      ZipArchiveOutputStream.UnicodeExtraFieldPolicy zipArchiveOutputStream_UnicodeExtraFieldPolicy0 = ZipArchiveOutputStream.UnicodeExtraFieldPolicy.NOT_ENCODEABLE;
      assertEquals("not encodeable", zipArchiveOutputStream_UnicodeExtraFieldPolicy0.toString());
      assertNotNull(zipArchiveOutputStream_UnicodeExtraFieldPolicy0);
      
      MockFile mockFile0 = new MockFile("", ", dateTimeModified=");
      assertNotNull(mockFile0);
      
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(mockFile0);
      assertEquals(", dateTimeModified=", mockFile0.getName());
      assertTrue(mockFile0.canWrite());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals("/, dateTimeModified=", mockFile0.toString());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.isAbsolute());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.exists());
      assertTrue(mockFile0.isFile());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.length());
      assertEquals("/", mockFile0.getParent());
      assertTrue(mockFile0.canExecute());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertFalse(zipArchiveOutputStream0.isSeekable());
      assertNotNull(zipArchiveOutputStream0);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      
      ZipArchiveOutputStream.UnicodeExtraFieldPolicy zipArchiveOutputStream_UnicodeExtraFieldPolicy1 = ZipArchiveOutputStream.UnicodeExtraFieldPolicy.ALWAYS;
      assertFalse(zipArchiveOutputStream_UnicodeExtraFieldPolicy1.equals((Object)zipArchiveOutputStream_UnicodeExtraFieldPolicy0));
      assertEquals("always", zipArchiveOutputStream_UnicodeExtraFieldPolicy1.toString());
      assertNotNull(zipArchiveOutputStream_UnicodeExtraFieldPolicy1);
      assertNotSame(zipArchiveOutputStream_UnicodeExtraFieldPolicy1, zipArchiveOutputStream_UnicodeExtraFieldPolicy0);
      
      zipArchiveOutputStream0.setCreateUnicodeExtraFields(zipArchiveOutputStream_UnicodeExtraFieldPolicy0);
      assertFalse(zipArchiveOutputStream_UnicodeExtraFieldPolicy0.equals((Object)zipArchiveOutputStream_UnicodeExtraFieldPolicy1));
      assertEquals("not encodeable", zipArchiveOutputStream_UnicodeExtraFieldPolicy0.toString());
      assertEquals(", dateTimeModified=", mockFile0.getName());
      assertTrue(mockFile0.canWrite());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals("/, dateTimeModified=", mockFile0.toString());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.isAbsolute());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.exists());
      assertTrue(mockFile0.isFile());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.length());
      assertEquals("/", mockFile0.getParent());
      assertTrue(mockFile0.canExecute());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertFalse(zipArchiveOutputStream0.isSeekable());
      assertNotSame(zipArchiveOutputStream_UnicodeExtraFieldPolicy0, zipArchiveOutputStream_UnicodeExtraFieldPolicy1);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      
      zipArchiveOutputStream0.putArchiveEntry(jarArchiveEntry0);
      assertEquals((-1L), jarArchiveEntry0.getCompressedSize());
      assertEquals(0, jarArchiveEntry0.getVersionRequired());
      assertFalse(jarArchiveEntry0.isUnixSymlink());
      assertEquals((-1L), jarArchiveEntry0.getCrc());
      assertFalse(jarArchiveEntry0.isStreamContiguous());
      assertEquals((-1L), jarArchiveEntry0.getSize());
      assertFalse(jarArchiveEntry0.isDirectory());
      assertEquals(8, jarArchiveEntry0.getMethod());
      assertEquals("0", jarArchiveEntry0.toString());
      assertEquals("0", jarArchiveEntry0.getName());
      assertEquals("", jarArchiveEntry0.getComment());
      assertEquals(0L, jarArchiveEntry0.getExternalAttributes());
      assertEquals((-1L), jarArchiveEntry0.getDataOffset());
      assertEquals(0, jarArchiveEntry0.getRawFlag());
      assertEquals(0, jarArchiveEntry0.getPlatform());
      assertEquals(0, jarArchiveEntry0.getInternalAttributes());
      assertEquals(0, jarArchiveEntry0.getVersionMadeBy());
      assertEquals(0, jarArchiveEntry0.getUnixMode());
      assertEquals(", dateTimeModified=", mockFile0.getName());
      assertTrue(mockFile0.canWrite());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals("/, dateTimeModified=", mockFile0.toString());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.isAbsolute());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.exists());
      assertTrue(mockFile0.isFile());
      assertFalse(mockFile0.isDirectory());
      assertEquals(31L, mockFile0.length());
      assertEquals("/", mockFile0.getParent());
      assertTrue(mockFile0.canExecute());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertFalse(zipArchiveOutputStream0.isSeekable());
      assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      JarArchiveEntry jarArchiveEntry0 = new JarArchiveEntry("K@<[LT~&.8W\"0\"P$");
      assertNull(jarArchiveEntry0.getComment());
      assertEquals((-1), jarArchiveEntry0.getMethod());
      assertFalse(jarArchiveEntry0.isStreamContiguous());
      assertEquals(0, jarArchiveEntry0.getPlatform());
      assertFalse(jarArchiveEntry0.isUnixSymlink());
      assertEquals(0, jarArchiveEntry0.getVersionMadeBy());
      assertEquals((-1L), jarArchiveEntry0.getDataOffset());
      assertEquals(0, jarArchiveEntry0.getInternalAttributes());
      assertEquals(0, jarArchiveEntry0.getVersionRequired());
      assertEquals(0, jarArchiveEntry0.getRawFlag());
      assertEquals(0, jarArchiveEntry0.getUnixMode());
      assertEquals("K@<[LT~&.8W\"0\"P$", jarArchiveEntry0.getName());
      assertEquals((-1L), jarArchiveEntry0.getCrc());
      assertEquals((-1L), jarArchiveEntry0.getSize());
      assertFalse(jarArchiveEntry0.isDirectory());
      assertEquals((-1L), jarArchiveEntry0.getCompressedSize());
      assertEquals(0L, jarArchiveEntry0.getExternalAttributes());
      assertEquals("K@<[LT~&.8W\"0\"P$", jarArchiveEntry0.toString());
      assertNotNull(jarArchiveEntry0);
      assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      
      MockFile mockFile0 = new MockFile("IBM850", "K@<[LT~&.8W\"0\"P$");
      assertNotNull(mockFile0);
      
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(mockFile0);
      assertEquals(0L, mockFile0.length());
      assertTrue(mockFile0.canWrite());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.isAbsolute());
      assertFalse(mockFile0.isHidden());
      assertEquals("/experiment/IBM850", mockFile0.getParent());
      assertTrue(mockFile0.isFile());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.canExecute());
      assertEquals("/experiment/IBM850/K@<[LT~&.8W\"0\"P$", mockFile0.toString());
      assertEquals("K@<[LT~&.8W\"0\"P$", mockFile0.getName());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.exists());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertFalse(zipArchiveOutputStream0.isSeekable());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertNotNull(zipArchiveOutputStream0);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      
      jarArchiveEntry0.setSize(71776119061217280L);
      assertNull(jarArchiveEntry0.getComment());
      assertEquals((-1), jarArchiveEntry0.getMethod());
      assertFalse(jarArchiveEntry0.isStreamContiguous());
      assertEquals(0, jarArchiveEntry0.getPlatform());
      assertFalse(jarArchiveEntry0.isUnixSymlink());
      assertEquals(0, jarArchiveEntry0.getVersionMadeBy());
      assertEquals((-1L), jarArchiveEntry0.getDataOffset());
      assertEquals(0, jarArchiveEntry0.getInternalAttributes());
      assertEquals(0, jarArchiveEntry0.getVersionRequired());
      assertEquals(0, jarArchiveEntry0.getRawFlag());
      assertEquals(0, jarArchiveEntry0.getUnixMode());
      assertEquals("K@<[LT~&.8W\"0\"P$", jarArchiveEntry0.getName());
      assertEquals((-1L), jarArchiveEntry0.getCrc());
      assertFalse(jarArchiveEntry0.isDirectory());
      assertEquals(71776119061217280L, jarArchiveEntry0.getSize());
      assertEquals((-1L), jarArchiveEntry0.getCompressedSize());
      assertEquals(0L, jarArchiveEntry0.getExternalAttributes());
      assertEquals("K@<[LT~&.8W\"0\"P$", jarArchiveEntry0.toString());
      assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      
      zipArchiveOutputStream0.setMethod((-1));
      assertEquals(0L, mockFile0.length());
      assertTrue(mockFile0.canWrite());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.isAbsolute());
      assertFalse(mockFile0.isHidden());
      assertEquals("/experiment/IBM850", mockFile0.getParent());
      assertTrue(mockFile0.isFile());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.canExecute());
      assertEquals("/experiment/IBM850/K@<[LT~&.8W\"0\"P$", mockFile0.toString());
      assertEquals("K@<[LT~&.8W\"0\"P$", mockFile0.getName());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.exists());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertFalse(zipArchiveOutputStream0.isSeekable());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      
      ZipArchiveOutputStream zipArchiveOutputStream1 = new ZipArchiveOutputStream(mockFile0);
      assertFalse(zipArchiveOutputStream1.equals((Object)zipArchiveOutputStream0));
      assertEquals(0L, mockFile0.length());
      assertTrue(mockFile0.canWrite());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.isAbsolute());
      assertFalse(mockFile0.isHidden());
      assertEquals("/experiment/IBM850", mockFile0.getParent());
      assertTrue(mockFile0.isFile());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.canExecute());
      assertEquals("/experiment/IBM850/K@<[LT~&.8W\"0\"P$", mockFile0.toString());
      assertEquals("K@<[LT~&.8W\"0\"P$", mockFile0.getName());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.exists());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0, zipArchiveOutputStream1.getCount());
      assertEquals(0L, zipArchiveOutputStream1.getBytesWritten());
      assertEquals("UTF8", zipArchiveOutputStream1.getEncoding());
      assertFalse(zipArchiveOutputStream1.isSeekable());
      assertNotNull(zipArchiveOutputStream1);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      
      zipArchiveOutputStream1.putArchiveEntry(jarArchiveEntry0);
      assertFalse(zipArchiveOutputStream1.equals((Object)zipArchiveOutputStream0));
      assertNull(jarArchiveEntry0.getComment());
      assertFalse(jarArchiveEntry0.isStreamContiguous());
      assertEquals(0, jarArchiveEntry0.getPlatform());
      assertFalse(jarArchiveEntry0.isUnixSymlink());
      assertEquals(0, jarArchiveEntry0.getVersionMadeBy());
      assertEquals((-1L), jarArchiveEntry0.getDataOffset());
      assertEquals(0, jarArchiveEntry0.getInternalAttributes());
      assertEquals(0, jarArchiveEntry0.getVersionRequired());
      assertEquals(0, jarArchiveEntry0.getRawFlag());
      assertEquals(0, jarArchiveEntry0.getUnixMode());
      assertEquals("K@<[LT~&.8W\"0\"P$", jarArchiveEntry0.getName());
      assertEquals((-1L), jarArchiveEntry0.getCrc());
      assertFalse(jarArchiveEntry0.isDirectory());
      assertEquals(71776119061217280L, jarArchiveEntry0.getSize());
      assertEquals(8, jarArchiveEntry0.getMethod());
      assertEquals((-1L), jarArchiveEntry0.getCompressedSize());
      assertEquals(0L, jarArchiveEntry0.getExternalAttributes());
      assertEquals("K@<[LT~&.8W\"0\"P$", jarArchiveEntry0.toString());
      assertTrue(mockFile0.canWrite());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.isAbsolute());
      assertFalse(mockFile0.isHidden());
      assertEquals("/experiment/IBM850", mockFile0.getParent());
      assertTrue(mockFile0.isFile());
      assertEquals(66L, mockFile0.length());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.canExecute());
      assertEquals("/experiment/IBM850/K@<[LT~&.8W\"0\"P$", mockFile0.toString());
      assertEquals("K@<[LT~&.8W\"0\"P$", mockFile0.getName());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.exists());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0, zipArchiveOutputStream1.getCount());
      assertEquals(0L, zipArchiveOutputStream1.getBytesWritten());
      assertEquals("UTF8", zipArchiveOutputStream1.getEncoding());
      assertFalse(zipArchiveOutputStream1.isSeekable());
      assertNotSame(zipArchiveOutputStream1, zipArchiveOutputStream0);
      assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      File file0 = MockFile.createTempFile("9SOzKT>B.j9(", "9SOzKT>B.j9(");
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      assertTrue(file0.canWrite());
      assertTrue(file0.isFile());
      assertEquals("/tmp", file0.getParent());
      assertTrue(file0.isAbsolute());
      assertEquals("9SOzKT>B.j9(09SOzKT>B.j9(", file0.getName());
      assertEquals(0L, file0.getFreeSpace());
      assertTrue(file0.exists());
      assertFalse(file0.isDirectory());
      assertEquals("/tmp/9SOzKT>B.j9(09SOzKT>B.j9(", file0.toString());
      assertEquals(0L, file0.length());
      assertTrue(file0.canExecute());
      assertTrue(file0.canRead());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(1392409281320L, file0.lastModified());
      assertNotNull(file0);
      
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(file0);
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      assertTrue(file0.canWrite());
      assertTrue(file0.isFile());
      assertEquals("/tmp", file0.getParent());
      assertTrue(file0.isAbsolute());
      assertEquals("9SOzKT>B.j9(09SOzKT>B.j9(", file0.getName());
      assertEquals(0L, file0.getFreeSpace());
      assertTrue(file0.exists());
      assertFalse(file0.isDirectory());
      assertEquals("/tmp/9SOzKT>B.j9(09SOzKT>B.j9(", file0.toString());
      assertEquals(0L, file0.length());
      assertTrue(file0.canExecute());
      assertTrue(file0.canRead());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertTrue(zipArchiveOutputStream0.isSeekable());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertNotNull(zipArchiveOutputStream0);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      
      ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry("9SOzKT>B.j9(");
      assertEquals((-1L), zipArchiveEntry0.getCompressedSize());
      assertEquals(0, zipArchiveEntry0.getVersionRequired());
      assertFalse(zipArchiveEntry0.isDirectory());
      assertEquals("9SOzKT>B.j9(", zipArchiveEntry0.toString());
      assertEquals((-1L), zipArchiveEntry0.getCrc());
      assertEquals(0, zipArchiveEntry0.getRawFlag());
      assertFalse(zipArchiveEntry0.isStreamContiguous());
      assertEquals(0, zipArchiveEntry0.getUnixMode());
      assertEquals(0, zipArchiveEntry0.getVersionMadeBy());
      assertEquals((-1L), zipArchiveEntry0.getDataOffset());
      assertFalse(zipArchiveEntry0.isUnixSymlink());
      assertEquals(0, zipArchiveEntry0.getInternalAttributes());
      assertEquals((-1), zipArchiveEntry0.getMethod());
      assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
      assertNull(zipArchiveEntry0.getComment());
      assertEquals((-1L), zipArchiveEntry0.getSize());
      assertEquals(0, zipArchiveEntry0.getPlatform());
      assertEquals("9SOzKT>B.j9(", zipArchiveEntry0.getName());
      assertNotNull(zipArchiveEntry0);
      assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      
      zipArchiveOutputStream0.putArchiveEntry(zipArchiveEntry0);
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      assertTrue(file0.canWrite());
      assertTrue(file0.isFile());
      assertEquals("/tmp", file0.getParent());
      assertTrue(file0.isAbsolute());
      assertEquals("9SOzKT>B.j9(09SOzKT>B.j9(", file0.getName());
      assertEquals(0L, file0.getFreeSpace());
      assertTrue(file0.exists());
      assertFalse(file0.isDirectory());
      assertEquals("/tmp/9SOzKT>B.j9(09SOzKT>B.j9(", file0.toString());
      assertEquals(0L, file0.length());
      assertTrue(file0.canExecute());
      assertTrue(file0.canRead());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertTrue(zipArchiveOutputStream0.isSeekable());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertEquals((-1L), zipArchiveEntry0.getCompressedSize());
      assertEquals(0, zipArchiveEntry0.getVersionRequired());
      assertFalse(zipArchiveEntry0.isDirectory());
      assertEquals("9SOzKT>B.j9(", zipArchiveEntry0.toString());
      assertEquals(8, zipArchiveEntry0.getMethod());
      assertEquals((-1L), zipArchiveEntry0.getCrc());
      assertEquals(0, zipArchiveEntry0.getRawFlag());
      assertFalse(zipArchiveEntry0.isStreamContiguous());
      assertEquals(0, zipArchiveEntry0.getUnixMode());
      assertEquals(0, zipArchiveEntry0.getVersionMadeBy());
      assertEquals((-1L), zipArchiveEntry0.getDataOffset());
      assertFalse(zipArchiveEntry0.isUnixSymlink());
      assertEquals(0, zipArchiveEntry0.getInternalAttributes());
      assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
      assertNull(zipArchiveEntry0.getComment());
      assertEquals((-1L), zipArchiveEntry0.getSize());
      assertEquals(0, zipArchiveEntry0.getPlatform());
      assertEquals("9SOzKT>B.j9(", zipArchiveEntry0.getName());
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      
      zipArchiveOutputStream0.putArchiveEntry(zipArchiveEntry0);
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      assertTrue(file0.canWrite());
      assertTrue(file0.isFile());
      assertEquals("/tmp", file0.getParent());
      assertTrue(file0.isAbsolute());
      assertEquals("9SOzKT>B.j9(09SOzKT>B.j9(", file0.getName());
      assertEquals(0L, file0.getFreeSpace());
      assertTrue(file0.exists());
      assertFalse(file0.isDirectory());
      assertEquals("/tmp/9SOzKT>B.j9(09SOzKT>B.j9(", file0.toString());
      assertEquals(0L, file0.length());
      assertTrue(file0.canExecute());
      assertTrue(file0.canRead());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertTrue(zipArchiveOutputStream0.isSeekable());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertEquals(0, zipArchiveEntry0.getVersionRequired());
      assertEquals(2L, zipArchiveEntry0.getCompressedSize());
      assertFalse(zipArchiveEntry0.isDirectory());
      assertEquals("9SOzKT>B.j9(", zipArchiveEntry0.toString());
      assertEquals(8, zipArchiveEntry0.getMethod());
      assertEquals(0L, zipArchiveEntry0.getCrc());
      assertEquals(0, zipArchiveEntry0.getRawFlag());
      assertFalse(zipArchiveEntry0.isStreamContiguous());
      assertEquals(0, zipArchiveEntry0.getUnixMode());
      assertEquals(0, zipArchiveEntry0.getVersionMadeBy());
      assertEquals((-1L), zipArchiveEntry0.getDataOffset());
      assertFalse(zipArchiveEntry0.isUnixSymlink());
      assertEquals(0, zipArchiveEntry0.getInternalAttributes());
      assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
      assertNull(zipArchiveEntry0.getComment());
      assertEquals(0L, zipArchiveEntry0.getSize());
      assertEquals(0, zipArchiveEntry0.getPlatform());
      assertEquals("9SOzKT>B.j9(", zipArchiveEntry0.getName());
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      
      zipArchiveOutputStream0.putArchiveEntry(zipArchiveEntry0);
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      assertTrue(file0.canWrite());
      assertTrue(file0.isFile());
      assertEquals("/tmp", file0.getParent());
      assertTrue(file0.isAbsolute());
      assertEquals("9SOzKT>B.j9(09SOzKT>B.j9(", file0.getName());
      assertEquals(0L, file0.getFreeSpace());
      assertTrue(file0.exists());
      assertFalse(file0.isDirectory());
      assertEquals("/tmp/9SOzKT>B.j9(09SOzKT>B.j9(", file0.toString());
      assertEquals(0L, file0.length());
      assertTrue(file0.canExecute());
      assertTrue(file0.canRead());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertTrue(zipArchiveOutputStream0.isSeekable());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertEquals(0, zipArchiveEntry0.getVersionRequired());
      assertEquals(2L, zipArchiveEntry0.getCompressedSize());
      assertFalse(zipArchiveEntry0.isDirectory());
      assertEquals("9SOzKT>B.j9(", zipArchiveEntry0.toString());
      assertEquals(8, zipArchiveEntry0.getMethod());
      assertEquals(0L, zipArchiveEntry0.getCrc());
      assertEquals(0, zipArchiveEntry0.getRawFlag());
      assertFalse(zipArchiveEntry0.isStreamContiguous());
      assertEquals(0, zipArchiveEntry0.getUnixMode());
      assertEquals(0, zipArchiveEntry0.getVersionMadeBy());
      assertEquals((-1L), zipArchiveEntry0.getDataOffset());
      assertFalse(zipArchiveEntry0.isUnixSymlink());
      assertEquals(0, zipArchiveEntry0.getInternalAttributes());
      assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
      assertNull(zipArchiveEntry0.getComment());
      assertEquals(0L, zipArchiveEntry0.getSize());
      assertEquals(0, zipArchiveEntry0.getPlatform());
      assertEquals("9SOzKT>B.j9(", zipArchiveEntry0.getName());
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      
      zipArchiveOutputStream0.putArchiveEntry(zipArchiveEntry0);
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      assertTrue(file0.canWrite());
      assertTrue(file0.isFile());
      assertEquals("/tmp", file0.getParent());
      assertTrue(file0.isAbsolute());
      assertEquals("9SOzKT>B.j9(09SOzKT>B.j9(", file0.getName());
      assertEquals(0L, file0.getFreeSpace());
      assertTrue(file0.exists());
      assertFalse(file0.isDirectory());
      assertEquals("/tmp/9SOzKT>B.j9(09SOzKT>B.j9(", file0.toString());
      assertEquals(0L, file0.length());
      assertTrue(file0.canExecute());
      assertTrue(file0.canRead());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertTrue(zipArchiveOutputStream0.isSeekable());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertEquals(0, zipArchiveEntry0.getVersionRequired());
      assertEquals(2L, zipArchiveEntry0.getCompressedSize());
      assertFalse(zipArchiveEntry0.isDirectory());
      assertEquals("9SOzKT>B.j9(", zipArchiveEntry0.toString());
      assertEquals(8, zipArchiveEntry0.getMethod());
      assertEquals(0L, zipArchiveEntry0.getCrc());
      assertEquals(0, zipArchiveEntry0.getRawFlag());
      assertFalse(zipArchiveEntry0.isStreamContiguous());
      assertEquals(0, zipArchiveEntry0.getUnixMode());
      assertEquals(0, zipArchiveEntry0.getVersionMadeBy());
      assertEquals((-1L), zipArchiveEntry0.getDataOffset());
      assertFalse(zipArchiveEntry0.isUnixSymlink());
      assertEquals(0, zipArchiveEntry0.getInternalAttributes());
      assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
      assertNull(zipArchiveEntry0.getComment());
      assertEquals(0L, zipArchiveEntry0.getSize());
      assertEquals(0, zipArchiveEntry0.getPlatform());
      assertEquals("9SOzKT>B.j9(", zipArchiveEntry0.getName());
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      
      zipArchiveOutputStream0.putArchiveEntry(zipArchiveEntry0);
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      assertTrue(file0.canWrite());
      assertTrue(file0.isFile());
      assertEquals("/tmp", file0.getParent());
      assertTrue(file0.isAbsolute());
      assertEquals("9SOzKT>B.j9(09SOzKT>B.j9(", file0.getName());
      assertEquals(0L, file0.getFreeSpace());
      assertTrue(file0.exists());
      assertFalse(file0.isDirectory());
      assertEquals("/tmp/9SOzKT>B.j9(09SOzKT>B.j9(", file0.toString());
      assertEquals(0L, file0.length());
      assertTrue(file0.canExecute());
      assertTrue(file0.canRead());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertTrue(zipArchiveOutputStream0.isSeekable());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertEquals(0, zipArchiveEntry0.getVersionRequired());
      assertEquals(2L, zipArchiveEntry0.getCompressedSize());
      assertFalse(zipArchiveEntry0.isDirectory());
      assertEquals("9SOzKT>B.j9(", zipArchiveEntry0.toString());
      assertEquals(8, zipArchiveEntry0.getMethod());
      assertEquals(0L, zipArchiveEntry0.getCrc());
      assertEquals(0, zipArchiveEntry0.getRawFlag());
      assertFalse(zipArchiveEntry0.isStreamContiguous());
      assertEquals(0, zipArchiveEntry0.getUnixMode());
      assertEquals(0, zipArchiveEntry0.getVersionMadeBy());
      assertEquals((-1L), zipArchiveEntry0.getDataOffset());
      assertFalse(zipArchiveEntry0.isUnixSymlink());
      assertEquals(0, zipArchiveEntry0.getInternalAttributes());
      assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
      assertNull(zipArchiveEntry0.getComment());
      assertEquals(0L, zipArchiveEntry0.getSize());
      assertEquals(0, zipArchiveEntry0.getPlatform());
      assertEquals("9SOzKT>B.j9(", zipArchiveEntry0.getName());
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      
      zipArchiveOutputStream0.putArchiveEntry(zipArchiveEntry0);
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      assertTrue(file0.canWrite());
      assertTrue(file0.isFile());
      assertEquals("/tmp", file0.getParent());
      assertTrue(file0.isAbsolute());
      assertEquals("9SOzKT>B.j9(09SOzKT>B.j9(", file0.getName());
      assertEquals(0L, file0.getFreeSpace());
      assertTrue(file0.exists());
      assertFalse(file0.isDirectory());
      assertEquals("/tmp/9SOzKT>B.j9(09SOzKT>B.j9(", file0.toString());
      assertEquals(0L, file0.length());
      assertTrue(file0.canExecute());
      assertTrue(file0.canRead());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertTrue(zipArchiveOutputStream0.isSeekable());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertEquals(0, zipArchiveEntry0.getVersionRequired());
      assertEquals(2L, zipArchiveEntry0.getCompressedSize());
      assertFalse(zipArchiveEntry0.isDirectory());
      assertEquals("9SOzKT>B.j9(", zipArchiveEntry0.toString());
      assertEquals(8, zipArchiveEntry0.getMethod());
      assertEquals(0L, zipArchiveEntry0.getCrc());
      assertEquals(0, zipArchiveEntry0.getRawFlag());
      assertFalse(zipArchiveEntry0.isStreamContiguous());
      assertEquals(0, zipArchiveEntry0.getUnixMode());
      assertEquals(0, zipArchiveEntry0.getVersionMadeBy());
      assertEquals((-1L), zipArchiveEntry0.getDataOffset());
      assertFalse(zipArchiveEntry0.isUnixSymlink());
      assertEquals(0, zipArchiveEntry0.getInternalAttributes());
      assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
      assertNull(zipArchiveEntry0.getComment());
      assertEquals(0L, zipArchiveEntry0.getSize());
      assertEquals(0, zipArchiveEntry0.getPlatform());
      assertEquals("9SOzKT>B.j9(", zipArchiveEntry0.getName());
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      
      zipArchiveOutputStream0.putArchiveEntry(zipArchiveEntry0);
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      assertTrue(file0.canWrite());
      assertTrue(file0.isFile());
      assertEquals("/tmp", file0.getParent());
      assertTrue(file0.isAbsolute());
      assertEquals("9SOzKT>B.j9(09SOzKT>B.j9(", file0.getName());
      assertEquals(0L, file0.getFreeSpace());
      assertTrue(file0.exists());
      assertFalse(file0.isDirectory());
      assertEquals("/tmp/9SOzKT>B.j9(09SOzKT>B.j9(", file0.toString());
      assertEquals(0L, file0.length());
      assertTrue(file0.canExecute());
      assertTrue(file0.canRead());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertTrue(zipArchiveOutputStream0.isSeekable());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertEquals(0, zipArchiveEntry0.getVersionRequired());
      assertEquals(2L, zipArchiveEntry0.getCompressedSize());
      assertFalse(zipArchiveEntry0.isDirectory());
      assertEquals("9SOzKT>B.j9(", zipArchiveEntry0.toString());
      assertEquals(8, zipArchiveEntry0.getMethod());
      assertEquals(0L, zipArchiveEntry0.getCrc());
      assertEquals(0, zipArchiveEntry0.getRawFlag());
      assertFalse(zipArchiveEntry0.isStreamContiguous());
      assertEquals(0, zipArchiveEntry0.getUnixMode());
      assertEquals(0, zipArchiveEntry0.getVersionMadeBy());
      assertEquals((-1L), zipArchiveEntry0.getDataOffset());
      assertFalse(zipArchiveEntry0.isUnixSymlink());
      assertEquals(0, zipArchiveEntry0.getInternalAttributes());
      assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
      assertNull(zipArchiveEntry0.getComment());
      assertEquals(0L, zipArchiveEntry0.getSize());
      assertEquals(0, zipArchiveEntry0.getPlatform());
      assertEquals("9SOzKT>B.j9(", zipArchiveEntry0.getName());
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      
      zipArchiveOutputStream0.putArchiveEntry(zipArchiveEntry0);
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      assertTrue(file0.canWrite());
      assertTrue(file0.isFile());
      assertEquals("/tmp", file0.getParent());
      assertTrue(file0.isAbsolute());
      assertEquals("9SOzKT>B.j9(09SOzKT>B.j9(", file0.getName());
      assertEquals(0L, file0.getFreeSpace());
      assertTrue(file0.exists());
      assertFalse(file0.isDirectory());
      assertEquals("/tmp/9SOzKT>B.j9(09SOzKT>B.j9(", file0.toString());
      assertEquals(0L, file0.length());
      assertTrue(file0.canExecute());
      assertTrue(file0.canRead());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertTrue(zipArchiveOutputStream0.isSeekable());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertEquals(0, zipArchiveEntry0.getVersionRequired());
      assertEquals(2L, zipArchiveEntry0.getCompressedSize());
      assertFalse(zipArchiveEntry0.isDirectory());
      assertEquals("9SOzKT>B.j9(", zipArchiveEntry0.toString());
      assertEquals(8, zipArchiveEntry0.getMethod());
      assertEquals(0L, zipArchiveEntry0.getCrc());
      assertEquals(0, zipArchiveEntry0.getRawFlag());
      assertFalse(zipArchiveEntry0.isStreamContiguous());
      assertEquals(0, zipArchiveEntry0.getUnixMode());
      assertEquals(0, zipArchiveEntry0.getVersionMadeBy());
      assertEquals((-1L), zipArchiveEntry0.getDataOffset());
      assertFalse(zipArchiveEntry0.isUnixSymlink());
      assertEquals(0, zipArchiveEntry0.getInternalAttributes());
      assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
      assertNull(zipArchiveEntry0.getComment());
      assertEquals(0L, zipArchiveEntry0.getSize());
      assertEquals(0, zipArchiveEntry0.getPlatform());
      assertEquals("9SOzKT>B.j9(", zipArchiveEntry0.getName());
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      
      zipArchiveOutputStream0.putArchiveEntry(zipArchiveEntry0);
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      assertTrue(file0.canWrite());
      assertTrue(file0.isFile());
      assertEquals("/tmp", file0.getParent());
      assertTrue(file0.isAbsolute());
      assertEquals("9SOzKT>B.j9(09SOzKT>B.j9(", file0.getName());
      assertEquals(0L, file0.getFreeSpace());
      assertTrue(file0.exists());
      assertFalse(file0.isDirectory());
      assertEquals("/tmp/9SOzKT>B.j9(09SOzKT>B.j9(", file0.toString());
      assertEquals(0L, file0.length());
      assertTrue(file0.canExecute());
      assertTrue(file0.canRead());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertTrue(zipArchiveOutputStream0.isSeekable());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertEquals(0, zipArchiveEntry0.getVersionRequired());
      assertEquals(2L, zipArchiveEntry0.getCompressedSize());
      assertFalse(zipArchiveEntry0.isDirectory());
      assertEquals("9SOzKT>B.j9(", zipArchiveEntry0.toString());
      assertEquals(8, zipArchiveEntry0.getMethod());
      assertEquals(0L, zipArchiveEntry0.getCrc());
      assertEquals(0, zipArchiveEntry0.getRawFlag());
      assertFalse(zipArchiveEntry0.isStreamContiguous());
      assertEquals(0, zipArchiveEntry0.getUnixMode());
      assertEquals(0, zipArchiveEntry0.getVersionMadeBy());
      assertEquals((-1L), zipArchiveEntry0.getDataOffset());
      assertFalse(zipArchiveEntry0.isUnixSymlink());
      assertEquals(0, zipArchiveEntry0.getInternalAttributes());
      assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
      assertNull(zipArchiveEntry0.getComment());
      assertEquals(0L, zipArchiveEntry0.getSize());
      assertEquals(0, zipArchiveEntry0.getPlatform());
      assertEquals("9SOzKT>B.j9(", zipArchiveEntry0.getName());
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      
      zipArchiveOutputStream0.writeCentralDirectoryEnd();
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      assertTrue(file0.canWrite());
      assertTrue(file0.isFile());
      assertEquals("/tmp", file0.getParent());
      assertTrue(file0.isAbsolute());
      assertEquals("9SOzKT>B.j9(09SOzKT>B.j9(", file0.getName());
      assertEquals(0L, file0.getFreeSpace());
      assertTrue(file0.exists());
      assertFalse(file0.isDirectory());
      assertEquals("/tmp/9SOzKT>B.j9(09SOzKT>B.j9(", file0.toString());
      assertEquals(0L, file0.length());
      assertTrue(file0.canExecute());
      assertTrue(file0.canRead());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertTrue(zipArchiveOutputStream0.isSeekable());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      
      zipArchiveOutputStream0.writeZip64CentralDirectory();
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      assertTrue(file0.canWrite());
      assertTrue(file0.isFile());
      assertEquals("/tmp", file0.getParent());
      assertTrue(file0.isAbsolute());
      assertEquals("9SOzKT>B.j9(09SOzKT>B.j9(", file0.getName());
      assertEquals(0L, file0.getFreeSpace());
      assertTrue(file0.exists());
      assertFalse(file0.isDirectory());
      assertEquals("/tmp/9SOzKT>B.j9(09SOzKT>B.j9(", file0.toString());
      assertEquals(0L, file0.length());
      assertTrue(file0.canExecute());
      assertTrue(file0.canRead());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertTrue(zipArchiveOutputStream0.isSeekable());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      
      zipArchiveOutputStream0.setEncoding("Nb5");
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      assertTrue(file0.canWrite());
      assertTrue(file0.isFile());
      assertEquals("/tmp", file0.getParent());
      assertTrue(file0.isAbsolute());
      assertEquals("9SOzKT>B.j9(09SOzKT>B.j9(", file0.getName());
      assertEquals(0L, file0.getFreeSpace());
      assertTrue(file0.exists());
      assertFalse(file0.isDirectory());
      assertEquals("/tmp/9SOzKT>B.j9(09SOzKT>B.j9(", file0.toString());
      assertEquals(0L, file0.length());
      assertTrue(file0.canExecute());
      assertTrue(file0.canRead());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertTrue(zipArchiveOutputStream0.isSeekable());
      assertEquals("Nb5", zipArchiveOutputStream0.getEncoding());
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      
      zipArchiveOutputStream0.writeZip64CentralDirectory();
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      assertTrue(file0.canWrite());
      assertTrue(file0.isFile());
      assertEquals("/tmp", file0.getParent());
      assertTrue(file0.isAbsolute());
      assertEquals("9SOzKT>B.j9(09SOzKT>B.j9(", file0.getName());
      assertEquals(0L, file0.getFreeSpace());
      assertTrue(file0.exists());
      assertFalse(file0.isDirectory());
      assertEquals("/tmp/9SOzKT>B.j9(09SOzKT>B.j9(", file0.toString());
      assertEquals(0L, file0.length());
      assertTrue(file0.canExecute());
      assertTrue(file0.canRead());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertTrue(zipArchiveOutputStream0.isSeekable());
      assertEquals("Nb5", zipArchiveOutputStream0.getEncoding());
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      
//      try { 
        zipArchiveOutputStream0.writeCentralDirectoryEnd();
//        fail("Expecting exception: UnsupportedEncodingException");
      
//      } catch(UnsupportedEncodingException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      File file0 = MockFile.createTempFile("TD\"c", "TD\"c");
      assertTrue(file0.canExecute());
      assertTrue(file0.isFile());
      assertTrue(file0.isAbsolute());
      assertTrue(file0.canRead());
      assertTrue(file0.canWrite());
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isHidden());
      assertEquals("/tmp", file0.getParent());
      assertFalse(file0.isDirectory());
      assertEquals(0L, file0.getFreeSpace());
      assertTrue(file0.exists());
      assertEquals("/tmp/TD\"c0TD\"c", file0.toString());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals("TD\"c0TD\"c", file0.getName());
      assertEquals(0L, file0.length());
      assertNotNull(file0);
      
      ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry("6L^|xF;%Vr6");
      assertFalse(zipArchiveEntry0.isUnixSymlink());
      assertFalse(zipArchiveEntry0.isStreamContiguous());
      assertEquals(0, zipArchiveEntry0.getPlatform());
      assertFalse(zipArchiveEntry0.isDirectory());
      assertEquals((-1), zipArchiveEntry0.getMethod());
      assertEquals(0, zipArchiveEntry0.getVersionRequired());
      assertEquals((-1L), zipArchiveEntry0.getCompressedSize());
      assertEquals("6L^|xF;%Vr6", zipArchiveEntry0.toString());
      assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
      assertEquals(0, zipArchiveEntry0.getVersionMadeBy());
      assertEquals((-1L), zipArchiveEntry0.getSize());
      assertEquals(0, zipArchiveEntry0.getRawFlag());
      assertEquals((-1L), zipArchiveEntry0.getCrc());
      assertEquals("6L^|xF;%Vr6", zipArchiveEntry0.getName());
      assertEquals(0, zipArchiveEntry0.getUnixMode());
      assertNull(zipArchiveEntry0.getComment());
      assertEquals(0, zipArchiveEntry0.getInternalAttributes());
      assertEquals((-1L), zipArchiveEntry0.getDataOffset());
      assertNotNull(zipArchiveEntry0);
      assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(file0);
      assertTrue(file0.canExecute());
      assertTrue(file0.isFile());
      assertTrue(file0.isAbsolute());
      assertTrue(file0.canRead());
      assertTrue(file0.canWrite());
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isHidden());
      assertEquals("/tmp", file0.getParent());
      assertFalse(file0.isDirectory());
      assertEquals(0L, file0.getFreeSpace());
      assertTrue(file0.exists());
      assertEquals("/tmp/TD\"c0TD\"c", file0.toString());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals("TD\"c0TD\"c", file0.getName());
      assertEquals(0L, file0.length());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertTrue(zipArchiveOutputStream0.isSeekable());
      assertNotNull(zipArchiveOutputStream0);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      
      zipArchiveOutputStream0.setMethod(1);
      assertTrue(file0.canExecute());
      assertTrue(file0.isFile());
      assertTrue(file0.isAbsolute());
      assertTrue(file0.canRead());
      assertTrue(file0.canWrite());
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isHidden());
      assertEquals("/tmp", file0.getParent());
      assertFalse(file0.isDirectory());
      assertEquals(0L, file0.getFreeSpace());
      assertTrue(file0.exists());
      assertEquals("/tmp/TD\"c0TD\"c", file0.toString());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals("TD\"c0TD\"c", file0.getName());
      assertEquals(0L, file0.length());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertTrue(zipArchiveOutputStream0.isSeekable());
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      
      zipArchiveOutputStream0.putArchiveEntry(zipArchiveEntry0);
      assertTrue(file0.canExecute());
      assertTrue(file0.isFile());
      assertTrue(file0.isAbsolute());
      assertTrue(file0.canRead());
      assertTrue(file0.canWrite());
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isHidden());
      assertEquals("/tmp", file0.getParent());
      assertFalse(file0.isDirectory());
      assertEquals(0L, file0.getFreeSpace());
      assertTrue(file0.exists());
      assertEquals("/tmp/TD\"c0TD\"c", file0.toString());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals("TD\"c0TD\"c", file0.getName());
      assertEquals(0L, file0.length());
      assertFalse(zipArchiveEntry0.isUnixSymlink());
      assertFalse(zipArchiveEntry0.isStreamContiguous());
      assertEquals(0, zipArchiveEntry0.getPlatform());
      assertFalse(zipArchiveEntry0.isDirectory());
      assertEquals(0, zipArchiveEntry0.getVersionRequired());
      assertEquals((-1L), zipArchiveEntry0.getCompressedSize());
      assertEquals(1, zipArchiveEntry0.getMethod());
      assertEquals("6L^|xF;%Vr6", zipArchiveEntry0.toString());
      assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
      assertEquals(0, zipArchiveEntry0.getVersionMadeBy());
      assertEquals((-1L), zipArchiveEntry0.getSize());
      assertEquals(0, zipArchiveEntry0.getRawFlag());
      assertEquals((-1L), zipArchiveEntry0.getCrc());
      assertEquals("6L^|xF;%Vr6", zipArchiveEntry0.getName());
      assertEquals(0, zipArchiveEntry0.getUnixMode());
      assertNull(zipArchiveEntry0.getComment());
      assertEquals(0, zipArchiveEntry0.getInternalAttributes());
      assertEquals((-1L), zipArchiveEntry0.getDataOffset());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertTrue(zipArchiveOutputStream0.isSeekable());
      assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      
      boolean boolean0 = zipArchiveOutputStream0.canWriteEntryData(zipArchiveEntry0);
      assertTrue(file0.canExecute());
      assertTrue(file0.isFile());
      assertTrue(file0.isAbsolute());
      assertTrue(file0.canRead());
      assertTrue(file0.canWrite());
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isHidden());
      assertEquals("/tmp", file0.getParent());
      assertFalse(file0.isDirectory());
      assertEquals(0L, file0.getFreeSpace());
      assertTrue(file0.exists());
      assertEquals("/tmp/TD\"c0TD\"c", file0.toString());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals("TD\"c0TD\"c", file0.getName());
      assertEquals(0L, file0.length());
      assertFalse(zipArchiveEntry0.isUnixSymlink());
      assertFalse(zipArchiveEntry0.isStreamContiguous());
      assertEquals(0, zipArchiveEntry0.getPlatform());
      assertFalse(zipArchiveEntry0.isDirectory());
      assertEquals(0, zipArchiveEntry0.getVersionRequired());
      assertEquals((-1L), zipArchiveEntry0.getCompressedSize());
      assertEquals(1, zipArchiveEntry0.getMethod());
      assertEquals("6L^|xF;%Vr6", zipArchiveEntry0.toString());
      assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
      assertEquals(0, zipArchiveEntry0.getVersionMadeBy());
      assertEquals((-1L), zipArchiveEntry0.getSize());
      assertEquals(0, zipArchiveEntry0.getRawFlag());
      assertEquals((-1L), zipArchiveEntry0.getCrc());
      assertEquals("6L^|xF;%Vr6", zipArchiveEntry0.getName());
      assertEquals(0, zipArchiveEntry0.getUnixMode());
      assertNull(zipArchiveEntry0.getComment());
      assertEquals(0, zipArchiveEntry0.getInternalAttributes());
      assertEquals((-1L), zipArchiveEntry0.getDataOffset());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertTrue(zipArchiveOutputStream0.isSeekable());
      assertFalse(boolean0);
      assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      JarArchiveEntry jarArchiveEntry0 = new JarArchiveEntry("Lz^|?F&;`V%Ir6");
      assertEquals((-1L), jarArchiveEntry0.getCrc());
      assertEquals(0, jarArchiveEntry0.getRawFlag());
      assertEquals(0, jarArchiveEntry0.getUnixMode());
      assertEquals((-1L), jarArchiveEntry0.getCompressedSize());
      assertEquals(0, jarArchiveEntry0.getVersionMadeBy());
      assertEquals(0L, jarArchiveEntry0.getExternalAttributes());
      assertEquals(0, jarArchiveEntry0.getVersionRequired());
      assertEquals("Lz^|?F&;`V%Ir6", jarArchiveEntry0.getName());
      assertEquals((-1), jarArchiveEntry0.getMethod());
      assertNull(jarArchiveEntry0.getComment());
      assertEquals(0, jarArchiveEntry0.getInternalAttributes());
      assertEquals("Lz^|?F&;`V%Ir6", jarArchiveEntry0.toString());
      assertEquals(0, jarArchiveEntry0.getPlatform());
      assertFalse(jarArchiveEntry0.isUnixSymlink());
      assertEquals((-1L), jarArchiveEntry0.getDataOffset());
      assertEquals((-1L), jarArchiveEntry0.getSize());
      assertFalse(jarArchiveEntry0.isDirectory());
      assertFalse(jarArchiveEntry0.isStreamContiguous());
      assertNotNull(jarArchiveEntry0);
      assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      
      MockFile mockFile0 = new MockFile("Lz^|?F&;`V%Ir6", "Lz^|?F&;`V%Ir6");
      assertNotNull(mockFile0);
      
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(mockFile0);
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.canWrite());
      assertEquals(0L, mockFile0.length());
      assertTrue(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isDirectory());
      assertEquals("/experiment/Lz^|?F&;`V%Ir6/Lz^|?F&;`V%Ir6", mockFile0.toString());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals("/experiment/Lz^|?F&;`V%Ir6", mockFile0.getParent());
      assertTrue(mockFile0.isFile());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.exists());
      assertEquals("Lz^|?F&;`V%Ir6", mockFile0.getName());
      assertFalse(zipArchiveOutputStream0.isSeekable());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertNotNull(zipArchiveOutputStream0);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      
      zipArchiveOutputStream0.setMethod(6);
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.canWrite());
      assertEquals(0L, mockFile0.length());
      assertTrue(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isDirectory());
      assertEquals("/experiment/Lz^|?F&;`V%Ir6/Lz^|?F&;`V%Ir6", mockFile0.toString());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals("/experiment/Lz^|?F&;`V%Ir6", mockFile0.getParent());
      assertTrue(mockFile0.isFile());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.exists());
      assertEquals("Lz^|?F&;`V%Ir6", mockFile0.getName());
      assertFalse(zipArchiveOutputStream0.isSeekable());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      
      zipArchiveOutputStream0.putArchiveEntry(jarArchiveEntry0);
      assertEquals((-1L), jarArchiveEntry0.getCrc());
      assertEquals(0, jarArchiveEntry0.getRawFlag());
      assertEquals(0, jarArchiveEntry0.getUnixMode());
      assertEquals((-1L), jarArchiveEntry0.getCompressedSize());
      assertEquals(0, jarArchiveEntry0.getVersionMadeBy());
      assertEquals(0L, jarArchiveEntry0.getExternalAttributes());
      assertEquals(0, jarArchiveEntry0.getVersionRequired());
      assertEquals("Lz^|?F&;`V%Ir6", jarArchiveEntry0.getName());
      assertNull(jarArchiveEntry0.getComment());
      assertEquals(0, jarArchiveEntry0.getInternalAttributes());
      assertEquals("Lz^|?F&;`V%Ir6", jarArchiveEntry0.toString());
      assertEquals(0, jarArchiveEntry0.getPlatform());
      assertEquals(6, jarArchiveEntry0.getMethod());
      assertFalse(jarArchiveEntry0.isUnixSymlink());
      assertEquals((-1L), jarArchiveEntry0.getDataOffset());
      assertEquals((-1L), jarArchiveEntry0.getSize());
      assertFalse(jarArchiveEntry0.isDirectory());
      assertFalse(jarArchiveEntry0.isStreamContiguous());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.canWrite());
      assertTrue(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isDirectory());
      assertEquals("/experiment/Lz^|?F&;`V%Ir6/Lz^|?F&;`V%Ir6", mockFile0.toString());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals("/experiment/Lz^|?F&;`V%Ir6", mockFile0.getParent());
      assertTrue(mockFile0.isFile());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.exists());
      assertEquals("Lz^|?F&;`V%Ir6", mockFile0.getName());
      assertEquals(44L, mockFile0.length());
      assertFalse(zipArchiveOutputStream0.isSeekable());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      
      boolean boolean0 = zipArchiveOutputStream0.canWriteEntryData(jarArchiveEntry0);
      assertEquals((-1L), jarArchiveEntry0.getCrc());
      assertEquals(0, jarArchiveEntry0.getRawFlag());
      assertEquals(0, jarArchiveEntry0.getUnixMode());
      assertEquals((-1L), jarArchiveEntry0.getCompressedSize());
      assertEquals(0, jarArchiveEntry0.getVersionMadeBy());
      assertEquals(0L, jarArchiveEntry0.getExternalAttributes());
      assertEquals(0, jarArchiveEntry0.getVersionRequired());
      assertEquals("Lz^|?F&;`V%Ir6", jarArchiveEntry0.getName());
      assertNull(jarArchiveEntry0.getComment());
      assertEquals(0, jarArchiveEntry0.getInternalAttributes());
      assertEquals("Lz^|?F&;`V%Ir6", jarArchiveEntry0.toString());
      assertEquals(0, jarArchiveEntry0.getPlatform());
      assertEquals(6, jarArchiveEntry0.getMethod());
      assertFalse(jarArchiveEntry0.isUnixSymlink());
      assertEquals((-1L), jarArchiveEntry0.getDataOffset());
      assertEquals((-1L), jarArchiveEntry0.getSize());
      assertFalse(jarArchiveEntry0.isDirectory());
      assertFalse(jarArchiveEntry0.isStreamContiguous());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.canWrite());
      assertTrue(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isDirectory());
      assertEquals("/experiment/Lz^|?F&;`V%Ir6/Lz^|?F&;`V%Ir6", mockFile0.toString());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals("/experiment/Lz^|?F&;`V%Ir6", mockFile0.getParent());
      assertTrue(mockFile0.isFile());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.exists());
      assertEquals("Lz^|?F&;`V%Ir6", mockFile0.getName());
      assertEquals(44L, mockFile0.length());
      assertFalse(zipArchiveOutputStream0.isSeekable());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertFalse(boolean0);
      assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      File file0 = MockFile.createTempFile("XDw,", "XDw,");
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(0L, file0.getFreeSpace());
      assertTrue(file0.exists());
      assertEquals("XDw,0XDw,", file0.getName());
      assertEquals(1392409281320L, file0.lastModified());
      assertTrue(file0.isAbsolute());
      assertTrue(file0.canRead());
      assertTrue(file0.isFile());
      assertEquals("/tmp", file0.getParent());
      assertEquals("/tmp/XDw,0XDw,", file0.toString());
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isHidden());
      assertTrue(file0.canWrite());
      assertFalse(file0.isDirectory());
      assertEquals(0L, file0.length());
      assertTrue(file0.canExecute());
      assertNotNull(file0);
      
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(file0);
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(0L, file0.getFreeSpace());
      assertTrue(file0.exists());
      assertEquals("XDw,0XDw,", file0.getName());
      assertEquals(1392409281320L, file0.lastModified());
      assertTrue(file0.isAbsolute());
      assertTrue(file0.canRead());
      assertTrue(file0.isFile());
      assertEquals("/tmp", file0.getParent());
      assertEquals("/tmp/XDw,0XDw,", file0.toString());
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isHidden());
      assertTrue(file0.canWrite());
      assertFalse(file0.isDirectory());
      assertEquals(0L, file0.length());
      assertTrue(file0.canExecute());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertTrue(zipArchiveOutputStream0.isSeekable());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertNotNull(zipArchiveOutputStream0);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      
      ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry("XDw,");
      assertEquals(0, zipArchiveEntry0.getPlatform());
      assertEquals("XDw,", zipArchiveEntry0.getName());
      assertEquals("XDw,", zipArchiveEntry0.toString());
      assertNull(zipArchiveEntry0.getComment());
      assertEquals((-1), zipArchiveEntry0.getMethod());
      assertEquals(0, zipArchiveEntry0.getInternalAttributes());
      assertFalse(zipArchiveEntry0.isUnixSymlink());
      assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
      assertEquals(0, zipArchiveEntry0.getVersionRequired());
      assertEquals(0, zipArchiveEntry0.getVersionMadeBy());
      assertEquals(0, zipArchiveEntry0.getRawFlag());
      assertEquals(0, zipArchiveEntry0.getUnixMode());
      assertEquals((-1L), zipArchiveEntry0.getCompressedSize());
      assertEquals((-1L), zipArchiveEntry0.getDataOffset());
      assertEquals((-1L), zipArchiveEntry0.getSize());
      assertFalse(zipArchiveEntry0.isStreamContiguous());
      assertFalse(zipArchiveEntry0.isDirectory());
      assertEquals((-1L), zipArchiveEntry0.getCrc());
      assertNotNull(zipArchiveEntry0);
      assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      
      zipArchiveEntry0.setCrc(0);
      assertEquals(0, zipArchiveEntry0.getPlatform());
      assertEquals("XDw,", zipArchiveEntry0.getName());
      assertEquals("XDw,", zipArchiveEntry0.toString());
      assertNull(zipArchiveEntry0.getComment());
      assertEquals((-1), zipArchiveEntry0.getMethod());
      assertEquals(0, zipArchiveEntry0.getInternalAttributes());
      assertFalse(zipArchiveEntry0.isUnixSymlink());
      assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
      assertEquals(0, zipArchiveEntry0.getVersionRequired());
      assertEquals(0, zipArchiveEntry0.getVersionMadeBy());
      assertEquals(0, zipArchiveEntry0.getRawFlag());
      assertEquals(0, zipArchiveEntry0.getUnixMode());
      assertEquals((-1L), zipArchiveEntry0.getCompressedSize());
      assertEquals((-1L), zipArchiveEntry0.getDataOffset());
      assertEquals((-1L), zipArchiveEntry0.getSize());
      assertFalse(zipArchiveEntry0.isStreamContiguous());
      assertFalse(zipArchiveEntry0.isDirectory());
      assertEquals(0L, zipArchiveEntry0.getCrc());
      assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      
      zipArchiveEntry0.setSize(3590L);
      assertEquals(0, zipArchiveEntry0.getPlatform());
      assertEquals("XDw,", zipArchiveEntry0.getName());
      assertEquals("XDw,", zipArchiveEntry0.toString());
      assertNull(zipArchiveEntry0.getComment());
      assertEquals((-1), zipArchiveEntry0.getMethod());
      assertEquals(0, zipArchiveEntry0.getInternalAttributes());
      assertFalse(zipArchiveEntry0.isUnixSymlink());
      assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
      assertEquals(0, zipArchiveEntry0.getVersionRequired());
      assertEquals(0, zipArchiveEntry0.getVersionMadeBy());
      assertEquals(0, zipArchiveEntry0.getRawFlag());
      assertEquals(0, zipArchiveEntry0.getUnixMode());
      assertEquals((-1L), zipArchiveEntry0.getCompressedSize());
      assertEquals((-1L), zipArchiveEntry0.getDataOffset());
      assertEquals(3590L, zipArchiveEntry0.getSize());
      assertFalse(zipArchiveEntry0.isStreamContiguous());
      assertFalse(zipArchiveEntry0.isDirectory());
      assertEquals(0L, zipArchiveEntry0.getCrc());
      assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      
      zipArchiveOutputStream0.setMethod(0);
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(0L, file0.getFreeSpace());
      assertTrue(file0.exists());
      assertEquals("XDw,0XDw,", file0.getName());
      assertEquals(1392409281320L, file0.lastModified());
      assertTrue(file0.isAbsolute());
      assertTrue(file0.canRead());
      assertTrue(file0.isFile());
      assertEquals("/tmp", file0.getParent());
      assertEquals("/tmp/XDw,0XDw,", file0.toString());
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isHidden());
      assertTrue(file0.canWrite());
      assertFalse(file0.isDirectory());
      assertEquals(0L, file0.length());
      assertTrue(file0.canExecute());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertTrue(zipArchiveOutputStream0.isSeekable());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      
      zipArchiveOutputStream0.setMethod(2036);
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(0L, file0.getFreeSpace());
      assertTrue(file0.exists());
      assertEquals("XDw,0XDw,", file0.getName());
      assertEquals(1392409281320L, file0.lastModified());
      assertTrue(file0.isAbsolute());
      assertTrue(file0.canRead());
      assertTrue(file0.isFile());
      assertEquals("/tmp", file0.getParent());
      assertEquals("/tmp/XDw,0XDw,", file0.toString());
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isHidden());
      assertTrue(file0.canWrite());
      assertFalse(file0.isDirectory());
      assertEquals(0L, file0.length());
      assertTrue(file0.canExecute());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertTrue(zipArchiveOutputStream0.isSeekable());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      
      zipArchiveOutputStream0.putArchiveEntry(zipArchiveEntry0);
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(0L, file0.getFreeSpace());
      assertTrue(file0.exists());
      assertEquals("XDw,0XDw,", file0.getName());
      assertEquals(1392409281320L, file0.lastModified());
      assertTrue(file0.isAbsolute());
      assertTrue(file0.canRead());
      assertTrue(file0.isFile());
      assertEquals("/tmp", file0.getParent());
      assertEquals("/tmp/XDw,0XDw,", file0.toString());
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isHidden());
      assertTrue(file0.canWrite());
      assertFalse(file0.isDirectory());
      assertEquals(0L, file0.length());
      assertTrue(file0.canExecute());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertTrue(zipArchiveOutputStream0.isSeekable());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertEquals(0, zipArchiveEntry0.getPlatform());
      assertEquals("XDw,", zipArchiveEntry0.getName());
      assertEquals("XDw,", zipArchiveEntry0.toString());
      assertNull(zipArchiveEntry0.getComment());
      assertEquals(0, zipArchiveEntry0.getInternalAttributes());
      assertFalse(zipArchiveEntry0.isUnixSymlink());
      assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
      assertEquals(0, zipArchiveEntry0.getVersionRequired());
      assertEquals(0, zipArchiveEntry0.getVersionMadeBy());
      assertEquals(0, zipArchiveEntry0.getRawFlag());
      assertEquals(0, zipArchiveEntry0.getUnixMode());
      assertEquals(2036, zipArchiveEntry0.getMethod());
      assertEquals((-1L), zipArchiveEntry0.getCompressedSize());
      assertEquals((-1L), zipArchiveEntry0.getDataOffset());
      assertEquals(3590L, zipArchiveEntry0.getSize());
      assertFalse(zipArchiveEntry0.isStreamContiguous());
      assertFalse(zipArchiveEntry0.isDirectory());
      assertEquals(0L, zipArchiveEntry0.getCrc());
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      
//      try { 
        zipArchiveOutputStream0.addRawArchiveEntry(zipArchiveEntry0, (InputStream) null);
//        fail("Expecting exception: UnsupportedZipFeatureException");
      
//      } catch(UnsupportedZipFeatureException e) {
//         //
//         // unsupported feature compression method used in entry XDw,
//         //
//         verifyException("org.apache.commons.compress.archivers.zip.ZipUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      JarArchiveEntry jarArchiveEntry0 = new JarArchiveEntry("DZRECTO~RY");
      assertEquals((-1), jarArchiveEntry0.getMethod());
      assertNull(jarArchiveEntry0.getComment());
      assertFalse(jarArchiveEntry0.isUnixSymlink());
      assertEquals(0, jarArchiveEntry0.getInternalAttributes());
      assertEquals(0L, jarArchiveEntry0.getExternalAttributes());
      assertEquals(0, jarArchiveEntry0.getVersionMadeBy());
      assertEquals(0, jarArchiveEntry0.getUnixMode());
      assertEquals(0, jarArchiveEntry0.getPlatform());
      assertEquals(0, jarArchiveEntry0.getRawFlag());
      assertEquals("DZRECTO~RY", jarArchiveEntry0.getName());
      assertEquals(0, jarArchiveEntry0.getVersionRequired());
      assertEquals((-1L), jarArchiveEntry0.getCompressedSize());
      assertEquals("DZRECTO~RY", jarArchiveEntry0.toString());
      assertFalse(jarArchiveEntry0.isDirectory());
      assertEquals((-1L), jarArchiveEntry0.getDataOffset());
      assertFalse(jarArchiveEntry0.isStreamContiguous());
      assertEquals((-1L), jarArchiveEntry0.getSize());
      assertEquals((-1L), jarArchiveEntry0.getCrc());
      assertNotNull(jarArchiveEntry0);
      assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      
      MockFile mockFile0 = new MockFile("DZRECTO~RY", "DZRECTO~RY");
      assertNotNull(mockFile0);
      
      jarArchiveEntry0.setCrc(20300L);
      assertEquals((-1), jarArchiveEntry0.getMethod());
      assertNull(jarArchiveEntry0.getComment());
      assertFalse(jarArchiveEntry0.isUnixSymlink());
      assertEquals(0, jarArchiveEntry0.getInternalAttributes());
      assertEquals(0L, jarArchiveEntry0.getExternalAttributes());
      assertEquals(0, jarArchiveEntry0.getVersionMadeBy());
      assertEquals(0, jarArchiveEntry0.getUnixMode());
      assertEquals(0, jarArchiveEntry0.getPlatform());
      assertEquals(0, jarArchiveEntry0.getRawFlag());
      assertEquals("DZRECTO~RY", jarArchiveEntry0.getName());
      assertEquals(0, jarArchiveEntry0.getVersionRequired());
      assertEquals((-1L), jarArchiveEntry0.getCompressedSize());
      assertEquals("DZRECTO~RY", jarArchiveEntry0.toString());
      assertFalse(jarArchiveEntry0.isDirectory());
      assertEquals((-1L), jarArchiveEntry0.getDataOffset());
      assertEquals(20300L, jarArchiveEntry0.getCrc());
      assertFalse(jarArchiveEntry0.isStreamContiguous());
      assertEquals((-1L), jarArchiveEntry0.getSize());
      assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(mockFile0);
      assertEquals("/experiment/DZRECTO~RY", mockFile0.getParent());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(0L, mockFile0.length());
      assertTrue(mockFile0.canExecute());
      assertFalse(mockFile0.isDirectory());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.canWrite());
      assertTrue(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals("/experiment/DZRECTO~RY/DZRECTO~RY", mockFile0.toString());
      assertTrue(mockFile0.isFile());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals("DZRECTO~RY", mockFile0.getName());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.exists());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertFalse(zipArchiveOutputStream0.isSeekable());
      assertNotNull(zipArchiveOutputStream0);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      
      jarArchiveEntry0.setSize(8);
      assertEquals((-1), jarArchiveEntry0.getMethod());
      assertNull(jarArchiveEntry0.getComment());
      assertEquals(8L, jarArchiveEntry0.getSize());
      assertFalse(jarArchiveEntry0.isUnixSymlink());
      assertEquals(0, jarArchiveEntry0.getInternalAttributes());
      assertEquals(0L, jarArchiveEntry0.getExternalAttributes());
      assertEquals(0, jarArchiveEntry0.getVersionMadeBy());
      assertEquals(0, jarArchiveEntry0.getUnixMode());
      assertEquals(0, jarArchiveEntry0.getPlatform());
      assertEquals(0, jarArchiveEntry0.getRawFlag());
      assertEquals("DZRECTO~RY", jarArchiveEntry0.getName());
      assertEquals(0, jarArchiveEntry0.getVersionRequired());
      assertEquals((-1L), jarArchiveEntry0.getCompressedSize());
      assertEquals("DZRECTO~RY", jarArchiveEntry0.toString());
      assertFalse(jarArchiveEntry0.isDirectory());
      assertEquals((-1L), jarArchiveEntry0.getDataOffset());
      assertEquals(20300L, jarArchiveEntry0.getCrc());
      assertFalse(jarArchiveEntry0.isStreamContiguous());
      assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      
      zipArchiveOutputStream0.setMethod(0);
      assertEquals("/experiment/DZRECTO~RY", mockFile0.getParent());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(0L, mockFile0.length());
      assertTrue(mockFile0.canExecute());
      assertFalse(mockFile0.isDirectory());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.canWrite());
      assertTrue(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals("/experiment/DZRECTO~RY/DZRECTO~RY", mockFile0.toString());
      assertTrue(mockFile0.isFile());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals("DZRECTO~RY", mockFile0.getName());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.exists());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertFalse(zipArchiveOutputStream0.isSeekable());
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      
      zipArchiveOutputStream0.putArchiveEntry(jarArchiveEntry0);
      assertEquals(0, jarArchiveEntry0.getMethod());
      assertNull(jarArchiveEntry0.getComment());
      assertEquals(8L, jarArchiveEntry0.getSize());
      assertFalse(jarArchiveEntry0.isUnixSymlink());
      assertEquals(0, jarArchiveEntry0.getInternalAttributes());
      assertEquals(0L, jarArchiveEntry0.getExternalAttributes());
      assertEquals(0, jarArchiveEntry0.getVersionMadeBy());
      assertEquals(0, jarArchiveEntry0.getUnixMode());
      assertEquals(0, jarArchiveEntry0.getPlatform());
      assertEquals(0, jarArchiveEntry0.getRawFlag());
      assertEquals("DZRECTO~RY", jarArchiveEntry0.getName());
      assertEquals(0, jarArchiveEntry0.getVersionRequired());
      assertEquals("DZRECTO~RY", jarArchiveEntry0.toString());
      assertFalse(jarArchiveEntry0.isDirectory());
      assertEquals((-1L), jarArchiveEntry0.getDataOffset());
      assertEquals(20300L, jarArchiveEntry0.getCrc());
      assertFalse(jarArchiveEntry0.isStreamContiguous());
      assertEquals(8L, jarArchiveEntry0.getCompressedSize());
      assertEquals("/experiment/DZRECTO~RY", mockFile0.getParent());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.canExecute());
      assertFalse(mockFile0.isDirectory());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.canWrite());
      assertTrue(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals("/experiment/DZRECTO~RY/DZRECTO~RY", mockFile0.toString());
      assertTrue(mockFile0.isFile());
      assertEquals(40L, mockFile0.length());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals("DZRECTO~RY", mockFile0.getName());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.exists());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertFalse(zipArchiveOutputStream0.isSeekable());
      assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)26;
      byteArray0[1] = (byte)79;
      byteArray0[2] = (byte) (-37);
      byteArray0[3] = (byte) (-65);
      // Undeclared exception!
//      try { 
        zipArchiveOutputStream0.write(byteArray0, 13, (int) (byte)26);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.util.zip.CRC32", e);
//      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      MockFile mockFile0 = new MockFile("TD\"c", "TD\"c");
      assertNotNull(mockFile0);
      
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(mockFile0);
      assertEquals("/experiment/TD\"c/TD\"c", mockFile0.toString());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertEquals("TD\"c", mockFile0.getName());
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.isAbsolute());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.canWrite());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals("/experiment/TD\"c", mockFile0.getParent());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.exists());
      assertTrue(mockFile0.isFile());
      assertFalse(zipArchiveOutputStream0.isSeekable());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertNotNull(zipArchiveOutputStream0);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      
      ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry("TD\"c");
      assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
      assertEquals("TD\"c", zipArchiveEntry0.toString());
      assertEquals((-1), zipArchiveEntry0.getMethod());
      assertEquals((-1L), zipArchiveEntry0.getDataOffset());
      assertNull(zipArchiveEntry0.getComment());
      assertFalse(zipArchiveEntry0.isStreamContiguous());
      assertEquals((-1L), zipArchiveEntry0.getCrc());
      assertEquals((-1L), zipArchiveEntry0.getSize());
      assertEquals((-1L), zipArchiveEntry0.getCompressedSize());
      assertFalse(zipArchiveEntry0.isDirectory());
      assertFalse(zipArchiveEntry0.isUnixSymlink());
      assertEquals(0, zipArchiveEntry0.getVersionRequired());
      assertEquals(0, zipArchiveEntry0.getPlatform());
      assertEquals(0, zipArchiveEntry0.getRawFlag());
      assertEquals(0, zipArchiveEntry0.getInternalAttributes());
      assertEquals(0, zipArchiveEntry0.getVersionMadeBy());
      assertEquals(0, zipArchiveEntry0.getUnixMode());
      assertEquals("TD\"c", zipArchiveEntry0.getName());
      assertNotNull(zipArchiveEntry0);
      assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      
      zipArchiveEntry0.setCrc(0);
      assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
      assertEquals("TD\"c", zipArchiveEntry0.toString());
      assertEquals((-1), zipArchiveEntry0.getMethod());
      assertEquals((-1L), zipArchiveEntry0.getDataOffset());
      assertNull(zipArchiveEntry0.getComment());
      assertFalse(zipArchiveEntry0.isStreamContiguous());
      assertEquals(0L, zipArchiveEntry0.getCrc());
      assertEquals((-1L), zipArchiveEntry0.getSize());
      assertEquals((-1L), zipArchiveEntry0.getCompressedSize());
      assertFalse(zipArchiveEntry0.isDirectory());
      assertFalse(zipArchiveEntry0.isUnixSymlink());
      assertEquals(0, zipArchiveEntry0.getVersionRequired());
      assertEquals(0, zipArchiveEntry0.getPlatform());
      assertEquals(0, zipArchiveEntry0.getRawFlag());
      assertEquals(0, zipArchiveEntry0.getInternalAttributes());
      assertEquals(0, zipArchiveEntry0.getVersionMadeBy());
      assertEquals(0, zipArchiveEntry0.getUnixMode());
      assertEquals("TD\"c", zipArchiveEntry0.getName());
      assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      
      zipArchiveEntry0.setSize(3590L);
      assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
      assertEquals("TD\"c", zipArchiveEntry0.toString());
      assertEquals(3590L, zipArchiveEntry0.getSize());
      assertEquals((-1), zipArchiveEntry0.getMethod());
      assertEquals((-1L), zipArchiveEntry0.getDataOffset());
      assertNull(zipArchiveEntry0.getComment());
      assertFalse(zipArchiveEntry0.isStreamContiguous());
      assertEquals(0L, zipArchiveEntry0.getCrc());
      assertEquals((-1L), zipArchiveEntry0.getCompressedSize());
      assertFalse(zipArchiveEntry0.isDirectory());
      assertFalse(zipArchiveEntry0.isUnixSymlink());
      assertEquals(0, zipArchiveEntry0.getVersionRequired());
      assertEquals(0, zipArchiveEntry0.getPlatform());
      assertEquals(0, zipArchiveEntry0.getRawFlag());
      assertEquals(0, zipArchiveEntry0.getInternalAttributes());
      assertEquals(0, zipArchiveEntry0.getVersionMadeBy());
      assertEquals(0, zipArchiveEntry0.getUnixMode());
      assertEquals("TD\"c", zipArchiveEntry0.getName());
      assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      
      zipArchiveOutputStream0.setMethod(0);
      assertEquals("/experiment/TD\"c/TD\"c", mockFile0.toString());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertEquals("TD\"c", mockFile0.getName());
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.isAbsolute());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.canWrite());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals("/experiment/TD\"c", mockFile0.getParent());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.exists());
      assertTrue(mockFile0.isFile());
      assertFalse(zipArchiveOutputStream0.isSeekable());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      
      zipArchiveOutputStream0.putArchiveEntry(zipArchiveEntry0);
      assertEquals("/experiment/TD\"c/TD\"c", mockFile0.toString());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertEquals("TD\"c", mockFile0.getName());
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.isAbsolute());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.canWrite());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(34L, mockFile0.length());
      assertEquals("/experiment/TD\"c", mockFile0.getParent());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.exists());
      assertTrue(mockFile0.isFile());
      assertFalse(zipArchiveOutputStream0.isSeekable());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
      assertEquals("TD\"c", zipArchiveEntry0.toString());
      assertEquals(3590L, zipArchiveEntry0.getSize());
      assertEquals(0, zipArchiveEntry0.getMethod());
      assertEquals((-1L), zipArchiveEntry0.getDataOffset());
      assertNull(zipArchiveEntry0.getComment());
      assertEquals(3590L, zipArchiveEntry0.getCompressedSize());
      assertFalse(zipArchiveEntry0.isStreamContiguous());
      assertEquals(0L, zipArchiveEntry0.getCrc());
      assertFalse(zipArchiveEntry0.isDirectory());
      assertFalse(zipArchiveEntry0.isUnixSymlink());
      assertEquals(0, zipArchiveEntry0.getVersionRequired());
      assertEquals(0, zipArchiveEntry0.getPlatform());
      assertEquals(0, zipArchiveEntry0.getRawFlag());
      assertEquals(0, zipArchiveEntry0.getInternalAttributes());
      assertEquals(0, zipArchiveEntry0.getVersionMadeBy());
      assertEquals(0, zipArchiveEntry0.getUnixMode());
      assertEquals("TD\"c", zipArchiveEntry0.getName());
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      
//      try { 
        zipArchiveOutputStream0.putArchiveEntry(zipArchiveEntry0);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Error in writing to file
//         //
//         verifyException("org.evosuite.runtime.mock.java.io.NativeMockedIO", e);
//      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      JarArchiveEntry jarArchiveEntry0 = new JarArchiveEntry("6Lz^|?F0`V%r6");
      assertFalse(jarArchiveEntry0.isStreamContiguous());
      assertEquals("6Lz^|?F0`V%r6", jarArchiveEntry0.getName());
      assertFalse(jarArchiveEntry0.isDirectory());
      assertEquals(0, jarArchiveEntry0.getPlatform());
      assertEquals("6Lz^|?F0`V%r6", jarArchiveEntry0.toString());
      assertEquals((-1), jarArchiveEntry0.getMethod());
      assertEquals((-1L), jarArchiveEntry0.getCompressedSize());
      assertEquals(0, jarArchiveEntry0.getVersionRequired());
      assertEquals(0L, jarArchiveEntry0.getExternalAttributes());
      assertEquals(0, jarArchiveEntry0.getUnixMode());
      assertEquals(0, jarArchiveEntry0.getVersionMadeBy());
      assertEquals((-1L), jarArchiveEntry0.getCrc());
      assertEquals(0, jarArchiveEntry0.getRawFlag());
      assertEquals((-1L), jarArchiveEntry0.getSize());
      assertNull(jarArchiveEntry0.getComment());
      assertEquals((-1L), jarArchiveEntry0.getDataOffset());
      assertFalse(jarArchiveEntry0.isUnixSymlink());
      assertEquals(0, jarArchiveEntry0.getInternalAttributes());
      assertNotNull(jarArchiveEntry0);
      assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      
      jarArchiveEntry0.setComment("6Lz^|?F0`V%r6");
      assertFalse(jarArchiveEntry0.isStreamContiguous());
      assertEquals("6Lz^|?F0`V%r6", jarArchiveEntry0.getName());
      assertFalse(jarArchiveEntry0.isDirectory());
      assertEquals(0, jarArchiveEntry0.getPlatform());
      assertEquals("6Lz^|?F0`V%r6", jarArchiveEntry0.toString());
      assertEquals((-1), jarArchiveEntry0.getMethod());
      assertEquals((-1L), jarArchiveEntry0.getCompressedSize());
      assertEquals(0, jarArchiveEntry0.getVersionRequired());
      assertEquals(0L, jarArchiveEntry0.getExternalAttributes());
      assertEquals("6Lz^|?F0`V%r6", jarArchiveEntry0.getComment());
      assertEquals(0, jarArchiveEntry0.getUnixMode());
      assertEquals(0, jarArchiveEntry0.getVersionMadeBy());
      assertEquals((-1L), jarArchiveEntry0.getCrc());
      assertEquals(0, jarArchiveEntry0.getRawFlag());
      assertEquals((-1L), jarArchiveEntry0.getSize());
      assertEquals((-1L), jarArchiveEntry0.getDataOffset());
      assertFalse(jarArchiveEntry0.isUnixSymlink());
      assertEquals(0, jarArchiveEntry0.getInternalAttributes());
      assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      
      ZipArchiveOutputStream.UnicodeExtraFieldPolicy zipArchiveOutputStream_UnicodeExtraFieldPolicy0 = ZipArchiveOutputStream.UnicodeExtraFieldPolicy.NOT_ENCODEABLE;
      assertEquals("not encodeable", zipArchiveOutputStream_UnicodeExtraFieldPolicy0.toString());
      assertNotNull(zipArchiveOutputStream_UnicodeExtraFieldPolicy0);
      
      MockFile mockFile0 = new MockFile("F", "6Lz^|?F0`V%r6");
      assertNotNull(mockFile0);
      
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(mockFile0);
      assertTrue(mockFile0.isAbsolute());
      assertTrue(mockFile0.canExecute());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.canWrite());
      assertEquals("/experiment/F/6Lz^|?F0`V%r6", mockFile0.toString());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.length());
      assertTrue(mockFile0.exists());
      assertEquals("6Lz^|?F0`V%r6", mockFile0.getName());
      assertEquals("/experiment/F", mockFile0.getParent());
      assertTrue(mockFile0.isFile());
      assertTrue(mockFile0.canRead());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertFalse(zipArchiveOutputStream0.isSeekable());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertNotNull(zipArchiveOutputStream0);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      
      ZipArchiveOutputStream.UnicodeExtraFieldPolicy zipArchiveOutputStream_UnicodeExtraFieldPolicy1 = ZipArchiveOutputStream.UnicodeExtraFieldPolicy.ALWAYS;
      assertFalse(zipArchiveOutputStream_UnicodeExtraFieldPolicy1.equals((Object)zipArchiveOutputStream_UnicodeExtraFieldPolicy0));
      assertEquals("always", zipArchiveOutputStream_UnicodeExtraFieldPolicy1.toString());
      assertNotNull(zipArchiveOutputStream_UnicodeExtraFieldPolicy1);
      assertNotSame(zipArchiveOutputStream_UnicodeExtraFieldPolicy1, zipArchiveOutputStream_UnicodeExtraFieldPolicy0);
      
      zipArchiveOutputStream0.setCreateUnicodeExtraFields(zipArchiveOutputStream_UnicodeExtraFieldPolicy1);
      assertFalse(zipArchiveOutputStream_UnicodeExtraFieldPolicy1.equals((Object)zipArchiveOutputStream_UnicodeExtraFieldPolicy0));
      assertTrue(mockFile0.isAbsolute());
      assertTrue(mockFile0.canExecute());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.canWrite());
      assertEquals("/experiment/F/6Lz^|?F0`V%r6", mockFile0.toString());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.length());
      assertTrue(mockFile0.exists());
      assertEquals("6Lz^|?F0`V%r6", mockFile0.getName());
      assertEquals("/experiment/F", mockFile0.getParent());
      assertTrue(mockFile0.isFile());
      assertTrue(mockFile0.canRead());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertFalse(zipArchiveOutputStream0.isSeekable());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals("always", zipArchiveOutputStream_UnicodeExtraFieldPolicy1.toString());
      assertNotSame(zipArchiveOutputStream_UnicodeExtraFieldPolicy1, zipArchiveOutputStream_UnicodeExtraFieldPolicy0);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      
      zipArchiveOutputStream0.putArchiveEntry(jarArchiveEntry0);
      assertFalse(jarArchiveEntry0.isStreamContiguous());
      assertEquals(8, jarArchiveEntry0.getMethod());
      assertEquals("6Lz^|?F0`V%r6", jarArchiveEntry0.getName());
      assertFalse(jarArchiveEntry0.isDirectory());
      assertEquals(0, jarArchiveEntry0.getPlatform());
      assertEquals("6Lz^|?F0`V%r6", jarArchiveEntry0.toString());
      assertEquals((-1L), jarArchiveEntry0.getCompressedSize());
      assertEquals(0, jarArchiveEntry0.getVersionRequired());
      assertEquals(0L, jarArchiveEntry0.getExternalAttributes());
      assertEquals("6Lz^|?F0`V%r6", jarArchiveEntry0.getComment());
      assertEquals(0, jarArchiveEntry0.getUnixMode());
      assertEquals(0, jarArchiveEntry0.getVersionMadeBy());
      assertEquals((-1L), jarArchiveEntry0.getCrc());
      assertEquals(0, jarArchiveEntry0.getRawFlag());
      assertEquals((-1L), jarArchiveEntry0.getSize());
      assertEquals((-1L), jarArchiveEntry0.getDataOffset());
      assertFalse(jarArchiveEntry0.isUnixSymlink());
      assertEquals(0, jarArchiveEntry0.getInternalAttributes());
      assertTrue(mockFile0.isAbsolute());
      assertTrue(mockFile0.canExecute());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.canWrite());
      assertEquals(87L, mockFile0.length());
      assertEquals("/experiment/F/6Lz^|?F0`V%r6", mockFile0.toString());
      assertFalse(mockFile0.isDirectory());
      assertTrue(mockFile0.exists());
      assertEquals("6Lz^|?F0`V%r6", mockFile0.getName());
      assertEquals("/experiment/F", mockFile0.getParent());
      assertTrue(mockFile0.isFile());
      assertTrue(mockFile0.canRead());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertFalse(zipArchiveOutputStream0.isSeekable());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      JarArchiveEntry jarArchiveEntry0 = new JarArchiveEntry("6L^|xF;%Vr6");
      assertFalse(jarArchiveEntry0.isDirectory());
      assertFalse(jarArchiveEntry0.isUnixSymlink());
      assertFalse(jarArchiveEntry0.isStreamContiguous());
      assertEquals(0, jarArchiveEntry0.getVersionRequired());
      assertEquals((-1L), jarArchiveEntry0.getCrc());
      assertEquals((-1), jarArchiveEntry0.getMethod());
      assertEquals((-1L), jarArchiveEntry0.getCompressedSize());
      assertEquals((-1L), jarArchiveEntry0.getDataOffset());
      assertEquals(0, jarArchiveEntry0.getVersionMadeBy());
      assertEquals(0L, jarArchiveEntry0.getExternalAttributes());
      assertEquals((-1L), jarArchiveEntry0.getSize());
      assertEquals("6L^|xF;%Vr6", jarArchiveEntry0.toString());
      assertEquals(0, jarArchiveEntry0.getRawFlag());
      assertNull(jarArchiveEntry0.getComment());
      assertEquals(0, jarArchiveEntry0.getPlatform());
      assertEquals(0, jarArchiveEntry0.getUnixMode());
      assertEquals(0, jarArchiveEntry0.getInternalAttributes());
      assertEquals("6L^|xF;%Vr6", jarArchiveEntry0.getName());
      assertNotNull(jarArchiveEntry0);
      assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      
      MockFile mockFile0 = new MockFile("6L^|xF;%Vr6", "6L^|xF;%Vr6");
      assertNotNull(mockFile0);
      
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(mockFile0);
      assertTrue(mockFile0.isFile());
      assertEquals("/experiment/6L^|xF;%Vr6/6L^|xF;%Vr6", mockFile0.toString());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.canWrite());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.length());
      assertEquals("6L^|xF;%Vr6", mockFile0.getName());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.exists());
      assertEquals("/experiment/6L^|xF;%Vr6", mockFile0.getParent());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertFalse(zipArchiveOutputStream0.isSeekable());
      assertNotNull(zipArchiveOutputStream0);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      
      jarArchiveEntry0.setSize(8);
      assertFalse(jarArchiveEntry0.isDirectory());
      assertFalse(jarArchiveEntry0.isUnixSymlink());
      assertFalse(jarArchiveEntry0.isStreamContiguous());
      assertEquals(0, jarArchiveEntry0.getVersionRequired());
      assertEquals((-1L), jarArchiveEntry0.getCrc());
      assertEquals((-1), jarArchiveEntry0.getMethod());
      assertEquals((-1L), jarArchiveEntry0.getCompressedSize());
      assertEquals((-1L), jarArchiveEntry0.getDataOffset());
      assertEquals(0, jarArchiveEntry0.getVersionMadeBy());
      assertEquals(0L, jarArchiveEntry0.getExternalAttributes());
      assertEquals("6L^|xF;%Vr6", jarArchiveEntry0.toString());
      assertEquals(0, jarArchiveEntry0.getRawFlag());
      assertNull(jarArchiveEntry0.getComment());
      assertEquals(8L, jarArchiveEntry0.getSize());
      assertEquals(0, jarArchiveEntry0.getPlatform());
      assertEquals(0, jarArchiveEntry0.getUnixMode());
      assertEquals(0, jarArchiveEntry0.getInternalAttributes());
      assertEquals("6L^|xF;%Vr6", jarArchiveEntry0.getName());
      assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      
      zipArchiveOutputStream0.setMethod(0);
      assertTrue(mockFile0.isFile());
      assertEquals("/experiment/6L^|xF;%Vr6/6L^|xF;%Vr6", mockFile0.toString());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.canWrite());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.length());
      assertEquals("6L^|xF;%Vr6", mockFile0.getName());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.exists());
      assertEquals("/experiment/6L^|xF;%Vr6", mockFile0.getParent());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertFalse(zipArchiveOutputStream0.isSeekable());
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      
//      try { 
        zipArchiveOutputStream0.putArchiveEntry(jarArchiveEntry0);
//        fail("Expecting exception: ZipException");
      
//      } catch(ZipException e) {
//         //
//         // crc checksum is required for STORED method when not writing to a file
//         //
//         verifyException("org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream", e);
//      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      JarArchiveEntry jarArchiveEntry0 = new JarArchiveEntry("6Lz^|?F0`V%r6");
      assertFalse(jarArchiveEntry0.isUnixSymlink());
      assertFalse(jarArchiveEntry0.isDirectory());
      assertEquals((-1L), jarArchiveEntry0.getCompressedSize());
      assertEquals(0, jarArchiveEntry0.getInternalAttributes());
      assertEquals("6Lz^|?F0`V%r6", jarArchiveEntry0.getName());
      assertNull(jarArchiveEntry0.getComment());
      assertEquals((-1L), jarArchiveEntry0.getCrc());
      assertFalse(jarArchiveEntry0.isStreamContiguous());
      assertEquals(0, jarArchiveEntry0.getVersionMadeBy());
      assertEquals((-1L), jarArchiveEntry0.getDataOffset());
      assertEquals(0L, jarArchiveEntry0.getExternalAttributes());
      assertEquals((-1L), jarArchiveEntry0.getSize());
      assertEquals(0, jarArchiveEntry0.getUnixMode());
      assertEquals((-1), jarArchiveEntry0.getMethod());
      assertEquals("6Lz^|?F0`V%r6", jarArchiveEntry0.toString());
      assertEquals(0, jarArchiveEntry0.getPlatform());
      assertEquals(0, jarArchiveEntry0.getRawFlag());
      assertEquals(0, jarArchiveEntry0.getVersionRequired());
      assertNotNull(jarArchiveEntry0);
      assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      
      MockFile mockFile0 = new MockFile("6Lz^|?F0`V%r6", "6Lz^|?F0`V%r6");
      assertNotNull(mockFile0);
      
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(mockFile0);
      assertEquals("/experiment/6Lz^|?F0`V%r6", mockFile0.getParent());
      assertTrue(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.isFile());
      assertEquals(0L, mockFile0.length());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.exists());
      assertEquals("6Lz^|?F0`V%r6", mockFile0.getName());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.canExecute());
      assertFalse(mockFile0.isDirectory());
      assertTrue(mockFile0.canWrite());
      assertFalse(mockFile0.isHidden());
      assertEquals("/experiment/6Lz^|?F0`V%r6/6Lz^|?F0`V%r6", mockFile0.toString());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(zipArchiveOutputStream0.isSeekable());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertNotNull(zipArchiveOutputStream0);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      
      Zip64Mode zip64Mode0 = Zip64Mode.Always;
      zipArchiveOutputStream0.setUseZip64(zip64Mode0);
      assertEquals("/experiment/6Lz^|?F0`V%r6", mockFile0.getParent());
      assertTrue(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.isFile());
      assertEquals(0L, mockFile0.length());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.exists());
      assertEquals("6Lz^|?F0`V%r6", mockFile0.getName());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.canExecute());
      assertFalse(mockFile0.isDirectory());
      assertTrue(mockFile0.canWrite());
      assertFalse(mockFile0.isHidden());
      assertEquals("/experiment/6Lz^|?F0`V%r6/6Lz^|?F0`V%r6", mockFile0.toString());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(zipArchiveOutputStream0.isSeekable());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      
      zipArchiveOutputStream0.putArchiveEntry(jarArchiveEntry0);
      assertEquals(8, jarArchiveEntry0.getMethod());
      assertFalse(jarArchiveEntry0.isUnixSymlink());
      assertFalse(jarArchiveEntry0.isDirectory());
      assertEquals((-1L), jarArchiveEntry0.getCompressedSize());
      assertEquals(0, jarArchiveEntry0.getInternalAttributes());
      assertEquals("6Lz^|?F0`V%r6", jarArchiveEntry0.getName());
      assertNull(jarArchiveEntry0.getComment());
      assertEquals((-1L), jarArchiveEntry0.getCrc());
      assertFalse(jarArchiveEntry0.isStreamContiguous());
      assertEquals(0, jarArchiveEntry0.getVersionMadeBy());
      assertEquals((-1L), jarArchiveEntry0.getDataOffset());
      assertEquals(0L, jarArchiveEntry0.getExternalAttributes());
      assertEquals((-1L), jarArchiveEntry0.getSize());
      assertEquals(0, jarArchiveEntry0.getUnixMode());
      assertEquals("6Lz^|?F0`V%r6", jarArchiveEntry0.toString());
      assertEquals(0, jarArchiveEntry0.getPlatform());
      assertEquals(0, jarArchiveEntry0.getRawFlag());
      assertEquals(0, jarArchiveEntry0.getVersionRequired());
      assertEquals("/experiment/6Lz^|?F0`V%r6", mockFile0.getParent());
      assertTrue(mockFile0.isAbsolute());
      assertEquals(63L, mockFile0.length());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.isFile());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.exists());
      assertEquals("6Lz^|?F0`V%r6", mockFile0.getName());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.canExecute());
      assertFalse(mockFile0.isDirectory());
      assertTrue(mockFile0.canWrite());
      assertFalse(mockFile0.isHidden());
      assertEquals("/experiment/6Lz^|?F0`V%r6/6Lz^|?F0`V%r6", mockFile0.toString());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(zipArchiveOutputStream0.isSeekable());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(mockFile0);
      assertNotNull(mockFileInputStream0);
      
      boolean boolean0 = mockFileInputStream0.markSupported();
      assertEquals("/experiment/6Lz^|?F0`V%r6", mockFile0.getParent());
      assertTrue(mockFile0.isAbsolute());
      assertEquals(63L, mockFile0.length());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.isFile());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.exists());
      assertEquals("6Lz^|?F0`V%r6", mockFile0.getName());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.canExecute());
      assertFalse(mockFile0.isDirectory());
      assertTrue(mockFile0.canWrite());
      assertFalse(mockFile0.isHidden());
      assertEquals("/experiment/6Lz^|?F0`V%r6/6Lz^|?F0`V%r6", mockFile0.toString());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals(63, mockFileInputStream0.available());
      assertFalse(boolean0);
      
      zipArchiveOutputStream0.addRawArchiveEntry(jarArchiveEntry0, mockFileInputStream0);
      assertEquals(8, jarArchiveEntry0.getMethod());
      assertFalse(jarArchiveEntry0.isUnixSymlink());
      assertFalse(jarArchiveEntry0.isDirectory());
      assertEquals(0, jarArchiveEntry0.getInternalAttributes());
      assertEquals("6Lz^|?F0`V%r6", jarArchiveEntry0.getName());
      assertEquals(2L, jarArchiveEntry0.getCompressedSize());
      assertNull(jarArchiveEntry0.getComment());
      assertEquals(0L, jarArchiveEntry0.getCrc());
      assertFalse(jarArchiveEntry0.isStreamContiguous());
      assertEquals(0, jarArchiveEntry0.getVersionMadeBy());
      assertEquals((-1L), jarArchiveEntry0.getDataOffset());
      assertEquals(0L, jarArchiveEntry0.getExternalAttributes());
      assertEquals(0L, jarArchiveEntry0.getSize());
      assertEquals(0, jarArchiveEntry0.getUnixMode());
      assertEquals("6Lz^|?F0`V%r6", jarArchiveEntry0.toString());
      assertEquals(0, jarArchiveEntry0.getPlatform());
      assertEquals(0, jarArchiveEntry0.getRawFlag());
      assertEquals(0, jarArchiveEntry0.getVersionRequired());
      assertEquals("/experiment/6Lz^|?F0`V%r6", mockFile0.getParent());
      assertTrue(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.isFile());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.exists());
      assertEquals("6Lz^|?F0`V%r6", mockFile0.getName());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.canExecute());
      assertFalse(mockFile0.isDirectory());
      assertEquals(11804L, mockFile0.length());
      assertTrue(mockFile0.canWrite());
      assertFalse(mockFile0.isHidden());
      assertEquals("/experiment/6Lz^|?F0`V%r6/6Lz^|?F0`V%r6", mockFile0.toString());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(zipArchiveOutputStream0.isSeekable());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertEquals(11628L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals(11628, zipArchiveOutputStream0.getCount());
      assertEquals(23, mockFileInputStream0.available());
      assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      
//      try { 
        zipArchiveOutputStream0.finish();
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Error in writing to file
//         //
//         verifyException("org.evosuite.runtime.mock.java.io.NativeMockedIO", e);
//      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      File file0 = MockFile.createTempFile("SOzKTB.j9(", "SOzKTB.j9(");
      assertEquals("/tmp", file0.getParent());
      assertTrue(file0.canExecute());
      assertEquals(0L, file0.length());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals("SOzKTB.j9(0SOzKTB.j9(", file0.getName());
      assertFalse(file0.isDirectory());
      assertTrue(file0.isAbsolute());
      assertTrue(file0.canWrite());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(1392409281320L, file0.lastModified());
      assertTrue(file0.isFile());
      assertTrue(file0.canRead());
      assertTrue(file0.exists());
      assertEquals("/tmp/SOzKTB.j9(0SOzKTB.j9(", file0.toString());
      assertNotNull(file0);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      JarArchiveEntry jarArchiveEntry0 = new JarArchiveEntry("SOzKTB.j9(");
      assertEquals((-1L), jarArchiveEntry0.getSize());
      assertEquals(0, jarArchiveEntry0.getVersionMadeBy());
      assertEquals("SOzKTB.j9(", jarArchiveEntry0.getName());
      assertEquals((-1L), jarArchiveEntry0.getDataOffset());
      assertEquals("SOzKTB.j9(", jarArchiveEntry0.toString());
      assertEquals(0, jarArchiveEntry0.getRawFlag());
      assertEquals(0L, jarArchiveEntry0.getExternalAttributes());
      assertEquals(0, jarArchiveEntry0.getVersionRequired());
      assertEquals(0, jarArchiveEntry0.getPlatform());
      assertEquals(0, jarArchiveEntry0.getUnixMode());
      assertFalse(jarArchiveEntry0.isStreamContiguous());
      assertFalse(jarArchiveEntry0.isDirectory());
      assertFalse(jarArchiveEntry0.isUnixSymlink());
      assertEquals(0, jarArchiveEntry0.getInternalAttributes());
      assertNull(jarArchiveEntry0.getComment());
      assertEquals((-1), jarArchiveEntry0.getMethod());
      assertEquals((-1L), jarArchiveEntry0.getCrc());
      assertEquals((-1L), jarArchiveEntry0.getCompressedSize());
      assertNotNull(jarArchiveEntry0);
      assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      
      jarArchiveEntry0.setComment("SOzKTB.j9(");
      assertEquals((-1L), jarArchiveEntry0.getSize());
      assertEquals(0, jarArchiveEntry0.getVersionMadeBy());
      assertEquals("SOzKTB.j9(", jarArchiveEntry0.getName());
      assertEquals((-1L), jarArchiveEntry0.getDataOffset());
      assertEquals("SOzKTB.j9(", jarArchiveEntry0.toString());
      assertEquals(0, jarArchiveEntry0.getRawFlag());
      assertEquals(0L, jarArchiveEntry0.getExternalAttributes());
      assertEquals(0, jarArchiveEntry0.getVersionRequired());
      assertEquals(0, jarArchiveEntry0.getPlatform());
      assertEquals(0, jarArchiveEntry0.getUnixMode());
      assertFalse(jarArchiveEntry0.isStreamContiguous());
      assertFalse(jarArchiveEntry0.isDirectory());
      assertFalse(jarArchiveEntry0.isUnixSymlink());
      assertEquals(0, jarArchiveEntry0.getInternalAttributes());
      assertEquals((-1), jarArchiveEntry0.getMethod());
      assertEquals("SOzKTB.j9(", jarArchiveEntry0.getComment());
      assertEquals((-1L), jarArchiveEntry0.getCrc());
      assertEquals((-1L), jarArchiveEntry0.getCompressedSize());
      assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      
      ZipArchiveOutputStream.UnicodeExtraFieldPolicy zipArchiveOutputStream_UnicodeExtraFieldPolicy0 = ZipArchiveOutputStream.UnicodeExtraFieldPolicy.NOT_ENCODEABLE;
      assertEquals("not encodeable", zipArchiveOutputStream_UnicodeExtraFieldPolicy0.toString());
      assertNotNull(zipArchiveOutputStream_UnicodeExtraFieldPolicy0);
      
      MockPrintStream mockPrintStream0 = new MockPrintStream("SOzKTB.j9(");
      assertNotNull(mockPrintStream0);
      
      jarArchiveEntry0.setMethod(42);
      assertEquals((-1L), jarArchiveEntry0.getSize());
      assertEquals(0, jarArchiveEntry0.getVersionMadeBy());
      assertEquals("SOzKTB.j9(", jarArchiveEntry0.getName());
      assertEquals((-1L), jarArchiveEntry0.getDataOffset());
      assertEquals("SOzKTB.j9(", jarArchiveEntry0.toString());
      assertEquals(0, jarArchiveEntry0.getRawFlag());
      assertEquals(0L, jarArchiveEntry0.getExternalAttributes());
      assertEquals(0, jarArchiveEntry0.getVersionRequired());
      assertEquals(0, jarArchiveEntry0.getPlatform());
      assertEquals(0, jarArchiveEntry0.getUnixMode());
      assertFalse(jarArchiveEntry0.isStreamContiguous());
      assertFalse(jarArchiveEntry0.isDirectory());
      assertEquals(42, jarArchiveEntry0.getMethod());
      assertFalse(jarArchiveEntry0.isUnixSymlink());
      assertEquals(0, jarArchiveEntry0.getInternalAttributes());
      assertEquals("SOzKTB.j9(", jarArchiveEntry0.getComment());
      assertEquals((-1L), jarArchiveEntry0.getCrc());
      assertEquals((-1L), jarArchiveEntry0.getCompressedSize());
      assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      
      jarArchiveEntry0.setRawFlag(878);
      assertEquals((-1L), jarArchiveEntry0.getSize());
      assertEquals(0, jarArchiveEntry0.getVersionMadeBy());
      assertEquals("SOzKTB.j9(", jarArchiveEntry0.getName());
      assertEquals((-1L), jarArchiveEntry0.getDataOffset());
      assertEquals("SOzKTB.j9(", jarArchiveEntry0.toString());
      assertEquals(0L, jarArchiveEntry0.getExternalAttributes());
      assertEquals(0, jarArchiveEntry0.getVersionRequired());
      assertEquals(0, jarArchiveEntry0.getPlatform());
      assertEquals(0, jarArchiveEntry0.getUnixMode());
      assertFalse(jarArchiveEntry0.isStreamContiguous());
      assertFalse(jarArchiveEntry0.isDirectory());
      assertEquals(42, jarArchiveEntry0.getMethod());
      assertFalse(jarArchiveEntry0.isUnixSymlink());
      assertEquals(0, jarArchiveEntry0.getInternalAttributes());
      assertEquals("SOzKTB.j9(", jarArchiveEntry0.getComment());
      assertEquals((-1L), jarArchiveEntry0.getCrc());
      assertEquals(878, jarArchiveEntry0.getRawFlag());
      assertEquals((-1L), jarArchiveEntry0.getCompressedSize());
      assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(mockPrintStream0);
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertFalse(zipArchiveOutputStream0.isSeekable());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertNotNull(zipArchiveOutputStream0);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      
      zipArchiveOutputStream0.setCreateUnicodeExtraFields(zipArchiveOutputStream_UnicodeExtraFieldPolicy0);
      assertEquals("not encodeable", zipArchiveOutputStream_UnicodeExtraFieldPolicy0.toString());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertFalse(zipArchiveOutputStream0.isSeekable());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      
      zipArchiveOutputStream0.putArchiveEntry(jarArchiveEntry0);
      assertEquals((-1L), jarArchiveEntry0.getSize());
      assertEquals(0, jarArchiveEntry0.getVersionMadeBy());
      assertEquals("SOzKTB.j9(", jarArchiveEntry0.getName());
      assertEquals((-1L), jarArchiveEntry0.getDataOffset());
      assertEquals("SOzKTB.j9(", jarArchiveEntry0.toString());
      assertEquals(0L, jarArchiveEntry0.getExternalAttributes());
      assertEquals(0, jarArchiveEntry0.getVersionRequired());
      assertEquals(0, jarArchiveEntry0.getPlatform());
      assertEquals(0, jarArchiveEntry0.getUnixMode());
      assertFalse(jarArchiveEntry0.isStreamContiguous());
      assertFalse(jarArchiveEntry0.isDirectory());
      assertEquals(42, jarArchiveEntry0.getMethod());
      assertFalse(jarArchiveEntry0.isUnixSymlink());
      assertEquals(0, jarArchiveEntry0.getInternalAttributes());
      assertEquals("SOzKTB.j9(", jarArchiveEntry0.getComment());
      assertEquals((-1L), jarArchiveEntry0.getCrc());
      assertEquals(878, jarArchiveEntry0.getRawFlag());
      assertEquals((-1L), jarArchiveEntry0.getCompressedSize());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertFalse(zipArchiveOutputStream0.isSeekable());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      
      zipArchiveOutputStream0.writeDataDescriptor(jarArchiveEntry0);
      assertEquals((-1L), jarArchiveEntry0.getSize());
      assertEquals(0, jarArchiveEntry0.getVersionMadeBy());
      assertEquals("SOzKTB.j9(", jarArchiveEntry0.getName());
      assertEquals((-1L), jarArchiveEntry0.getDataOffset());
      assertEquals("SOzKTB.j9(", jarArchiveEntry0.toString());
      assertEquals(0L, jarArchiveEntry0.getExternalAttributes());
      assertEquals(0, jarArchiveEntry0.getVersionRequired());
      assertEquals(0, jarArchiveEntry0.getPlatform());
      assertEquals(0, jarArchiveEntry0.getUnixMode());
      assertFalse(jarArchiveEntry0.isStreamContiguous());
      assertFalse(jarArchiveEntry0.isDirectory());
      assertEquals(42, jarArchiveEntry0.getMethod());
      assertFalse(jarArchiveEntry0.isUnixSymlink());
      assertEquals(0, jarArchiveEntry0.getInternalAttributes());
      assertEquals("SOzKTB.j9(", jarArchiveEntry0.getComment());
      assertEquals((-1L), jarArchiveEntry0.getCrc());
      assertEquals(878, jarArchiveEntry0.getRawFlag());
      assertEquals((-1L), jarArchiveEntry0.getCompressedSize());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertFalse(zipArchiveOutputStream0.isSeekable());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      File file0 = MockFile.createTempFile("9SOzKT>B.j9(", "9SOzKT>B.j9(");
      assertEquals(0L, file0.length());
      assertEquals(0L, file0.getFreeSpace());
      assertFalse(file0.isDirectory());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals("/tmp/9SOzKT>B.j9(09SOzKT>B.j9(", file0.toString());
      assertEquals(1392409281320L, file0.lastModified());
      assertTrue(file0.isFile());
      assertTrue(file0.canRead());
      assertTrue(file0.exists());
      assertTrue(file0.canWrite());
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isHidden());
      assertTrue(file0.canExecute());
      assertEquals("/tmp", file0.getParent());
      assertEquals("9SOzKT>B.j9(09SOzKT>B.j9(", file0.getName());
      assertTrue(file0.isAbsolute());
      assertNotNull(file0);
      
      JarArchiveEntry jarArchiveEntry0 = new JarArchiveEntry("archive contains more than 65535 entries.");
      assertEquals(0, jarArchiveEntry0.getVersionRequired());
      assertEquals((-1L), jarArchiveEntry0.getCompressedSize());
      assertFalse(jarArchiveEntry0.isUnixSymlink());
      assertEquals("archive contains more than 65535 entries.", jarArchiveEntry0.getName());
      assertFalse(jarArchiveEntry0.isStreamContiguous());
      assertEquals((-1L), jarArchiveEntry0.getCrc());
      assertFalse(jarArchiveEntry0.isDirectory());
      assertEquals("archive contains more than 65535 entries.", jarArchiveEntry0.toString());
      assertEquals((-1L), jarArchiveEntry0.getSize());
      assertNull(jarArchiveEntry0.getComment());
      assertEquals((-1), jarArchiveEntry0.getMethod());
      assertEquals(0L, jarArchiveEntry0.getExternalAttributes());
      assertEquals((-1L), jarArchiveEntry0.getDataOffset());
      assertEquals(0, jarArchiveEntry0.getRawFlag());
      assertEquals(0, jarArchiveEntry0.getInternalAttributes());
      assertEquals(0, jarArchiveEntry0.getPlatform());
      assertEquals(0, jarArchiveEntry0.getUnixMode());
      assertEquals(0, jarArchiveEntry0.getVersionMadeBy());
      assertNotNull(jarArchiveEntry0);
      assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      
      byte[] byteArray0 = jarArchiveEntry0.getLocalFileDataExtra();
      assertEquals(0, jarArchiveEntry0.getVersionRequired());
      assertEquals((-1L), jarArchiveEntry0.getCompressedSize());
      assertFalse(jarArchiveEntry0.isUnixSymlink());
      assertEquals("archive contains more than 65535 entries.", jarArchiveEntry0.getName());
      assertFalse(jarArchiveEntry0.isStreamContiguous());
      assertEquals((-1L), jarArchiveEntry0.getCrc());
      assertFalse(jarArchiveEntry0.isDirectory());
      assertEquals("archive contains more than 65535 entries.", jarArchiveEntry0.toString());
      assertEquals((-1L), jarArchiveEntry0.getSize());
      assertNull(jarArchiveEntry0.getComment());
      assertEquals((-1), jarArchiveEntry0.getMethod());
      assertEquals(0L, jarArchiveEntry0.getExternalAttributes());
      assertEquals((-1L), jarArchiveEntry0.getDataOffset());
      assertEquals(0, jarArchiveEntry0.getRawFlag());
      assertEquals(0, jarArchiveEntry0.getInternalAttributes());
      assertEquals(0, jarArchiveEntry0.getPlatform());
      assertEquals(0, jarArchiveEntry0.getUnixMode());
      assertEquals(0, jarArchiveEntry0.getVersionMadeBy());
      assertNotNull(byteArray0);
      assertEquals(0, byteArray0.length);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      
      MockFile mockFile0 = new MockFile("iS.", " - ");
      assertFalse(mockFile0.equals((Object)file0));
      assertNotNull(mockFile0);
      
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(file0);
      assertFalse(file0.equals((Object)mockFile0));
      assertEquals(0L, file0.length());
      assertEquals(0L, file0.getFreeSpace());
      assertFalse(file0.isDirectory());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals("/tmp/9SOzKT>B.j9(09SOzKT>B.j9(", file0.toString());
      assertEquals(1392409281320L, file0.lastModified());
      assertTrue(file0.isFile());
      assertTrue(file0.canRead());
      assertTrue(file0.exists());
      assertTrue(file0.canWrite());
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isHidden());
      assertTrue(file0.canExecute());
      assertEquals("/tmp", file0.getParent());
      assertEquals("9SOzKT>B.j9(09SOzKT>B.j9(", file0.getName());
      assertTrue(file0.isAbsolute());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertTrue(zipArchiveOutputStream0.isSeekable());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertNotNull(zipArchiveOutputStream0);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      
      zipArchiveOutputStream0.setEncoding("iS.");
      assertFalse(file0.equals((Object)mockFile0));
      assertEquals(0L, file0.length());
      assertEquals(0L, file0.getFreeSpace());
      assertFalse(file0.isDirectory());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals("/tmp/9SOzKT>B.j9(09SOzKT>B.j9(", file0.toString());
      assertEquals(1392409281320L, file0.lastModified());
      assertTrue(file0.isFile());
      assertTrue(file0.canRead());
      assertTrue(file0.exists());
      assertTrue(file0.canWrite());
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isHidden());
      assertTrue(file0.canExecute());
      assertEquals("/tmp", file0.getParent());
      assertEquals("9SOzKT>B.j9(09SOzKT>B.j9(", file0.getName());
      assertTrue(file0.isAbsolute());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertTrue(zipArchiveOutputStream0.isSeekable());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals("iS.", zipArchiveOutputStream0.getEncoding());
      assertNotSame(file0, mockFile0);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      
//      try { 
        zipArchiveOutputStream0.putArchiveEntry(jarArchiveEntry0);
//        fail("Expecting exception: UnsupportedEncodingException");
      
//      } catch(UnsupportedEncodingException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      File file0 = MockFile.createTempFile("9SOzKT>B.j9(", "9SOzKT>B.j9(");
      assertEquals(0L, file0.length());
      assertEquals(0L, file0.getFreeSpace());
      assertTrue(file0.canWrite());
      assertFalse(file0.isDirectory());
      assertTrue(file0.isAbsolute());
      assertEquals("/tmp/9SOzKT>B.j9(09SOzKT>B.j9(", file0.toString());
      assertTrue(file0.canExecute());
      assertTrue(file0.canRead());
      assertEquals("9SOzKT>B.j9(09SOzKT>B.j9(", file0.getName());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(0L, file0.getTotalSpace());
      assertFalse(file0.isHidden());
      assertTrue(file0.exists());
      assertEquals(0L, file0.getUsableSpace());
      assertTrue(file0.isFile());
      assertEquals("/tmp", file0.getParent());
      assertNotNull(file0);
      
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(file0);
      assertEquals(0L, file0.length());
      assertEquals(0L, file0.getFreeSpace());
      assertTrue(file0.canWrite());
      assertFalse(file0.isDirectory());
      assertTrue(file0.isAbsolute());
      assertEquals("/tmp/9SOzKT>B.j9(09SOzKT>B.j9(", file0.toString());
      assertTrue(file0.canExecute());
      assertTrue(file0.canRead());
      assertEquals("9SOzKT>B.j9(09SOzKT>B.j9(", file0.getName());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(0L, file0.getTotalSpace());
      assertFalse(file0.isHidden());
      assertTrue(file0.exists());
      assertEquals(0L, file0.getUsableSpace());
      assertTrue(file0.isFile());
      assertEquals("/tmp", file0.getParent());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertTrue(zipArchiveOutputStream0.isSeekable());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertNotNull(zipArchiveOutputStream0);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      
      ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry("9SOzKT>B.j9(");
      assertEquals((-1L), zipArchiveEntry0.getCompressedSize());
      assertEquals(0, zipArchiveEntry0.getVersionRequired());
      assertFalse(zipArchiveEntry0.isDirectory());
      assertEquals("9SOzKT>B.j9(", zipArchiveEntry0.toString());
      assertEquals((-1L), zipArchiveEntry0.getCrc());
      assertEquals(0, zipArchiveEntry0.getRawFlag());
      assertEquals("9SOzKT>B.j9(", zipArchiveEntry0.getName());
      assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
      assertEquals((-1), zipArchiveEntry0.getMethod());
      assertNull(zipArchiveEntry0.getComment());
      assertEquals((-1L), zipArchiveEntry0.getSize());
      assertFalse(zipArchiveEntry0.isStreamContiguous());
      assertEquals(0, zipArchiveEntry0.getUnixMode());
      assertEquals(0, zipArchiveEntry0.getPlatform());
      assertEquals(0, zipArchiveEntry0.getVersionMadeBy());
      assertEquals((-1L), zipArchiveEntry0.getDataOffset());
      assertFalse(zipArchiveEntry0.isUnixSymlink());
      assertEquals(0, zipArchiveEntry0.getInternalAttributes());
      assertNotNull(zipArchiveEntry0);
      assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      
      long long0 = zipArchiveEntry0.getTime();
      assertEquals((-1L), zipArchiveEntry0.getCompressedSize());
      assertEquals(0, zipArchiveEntry0.getVersionRequired());
      assertFalse(zipArchiveEntry0.isDirectory());
      assertEquals("9SOzKT>B.j9(", zipArchiveEntry0.toString());
      assertEquals((-1L), zipArchiveEntry0.getCrc());
      assertEquals(0, zipArchiveEntry0.getRawFlag());
      assertEquals("9SOzKT>B.j9(", zipArchiveEntry0.getName());
      assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
      assertEquals((-1), zipArchiveEntry0.getMethod());
      assertNull(zipArchiveEntry0.getComment());
      assertEquals((-1L), zipArchiveEntry0.getSize());
      assertFalse(zipArchiveEntry0.isStreamContiguous());
      assertEquals(0, zipArchiveEntry0.getUnixMode());
      assertEquals(0, zipArchiveEntry0.getPlatform());
      assertEquals(0, zipArchiveEntry0.getVersionMadeBy());
      assertEquals((-1L), zipArchiveEntry0.getDataOffset());
      assertFalse(zipArchiveEntry0.isUnixSymlink());
      assertEquals(0, zipArchiveEntry0.getInternalAttributes());
      assertEquals((-1L), long0);
      assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      
      boolean boolean0 = file0.delete();
      assertEquals(0L, file0.length());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(0L, file0.lastModified());
      assertFalse(file0.isDirectory());
      assertFalse(file0.canWrite());
      assertTrue(file0.isAbsolute());
      assertEquals("/tmp/9SOzKT>B.j9(09SOzKT>B.j9(", file0.toString());
      assertEquals("9SOzKT>B.j9(09SOzKT>B.j9(", file0.getName());
      assertFalse(file0.canExecute());
      assertEquals(0L, file0.getTotalSpace());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      assertTrue(file0.isFile());
      assertEquals("/tmp", file0.getParent());
      assertFalse(file0.canRead());
      assertFalse(file0.exists());
      assertTrue(boolean0);
      
      zipArchiveOutputStream0.putArchiveEntry(zipArchiveEntry0);
      assertEquals(0L, file0.length());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(0L, file0.lastModified());
      assertFalse(file0.isDirectory());
      assertFalse(file0.canWrite());
      assertTrue(file0.isAbsolute());
      assertEquals("/tmp/9SOzKT>B.j9(09SOzKT>B.j9(", file0.toString());
      assertEquals("9SOzKT>B.j9(09SOzKT>B.j9(", file0.getName());
      assertFalse(file0.canExecute());
      assertEquals(0L, file0.getTotalSpace());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      assertTrue(file0.isFile());
      assertEquals("/tmp", file0.getParent());
      assertFalse(file0.canRead());
      assertFalse(file0.exists());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertTrue(zipArchiveOutputStream0.isSeekable());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals((-1L), zipArchiveEntry0.getCompressedSize());
      assertEquals(0, zipArchiveEntry0.getVersionRequired());
      assertEquals(8, zipArchiveEntry0.getMethod());
      assertFalse(zipArchiveEntry0.isDirectory());
      assertEquals("9SOzKT>B.j9(", zipArchiveEntry0.toString());
      assertEquals((-1L), zipArchiveEntry0.getCrc());
      assertEquals(0, zipArchiveEntry0.getRawFlag());
      assertEquals("9SOzKT>B.j9(", zipArchiveEntry0.getName());
      assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
      assertNull(zipArchiveEntry0.getComment());
      assertEquals((-1L), zipArchiveEntry0.getSize());
      assertFalse(zipArchiveEntry0.isStreamContiguous());
      assertEquals(0, zipArchiveEntry0.getUnixMode());
      assertEquals(0, zipArchiveEntry0.getPlatform());
      assertEquals(0, zipArchiveEntry0.getVersionMadeBy());
      assertEquals((-1L), zipArchiveEntry0.getDataOffset());
      assertFalse(zipArchiveEntry0.isUnixSymlink());
      assertEquals(0, zipArchiveEntry0.getInternalAttributes());
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      
      zipArchiveOutputStream0.putArchiveEntry(zipArchiveEntry0);
      assertEquals(0L, file0.length());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(0L, file0.lastModified());
      assertFalse(file0.isDirectory());
      assertFalse(file0.canWrite());
      assertTrue(file0.isAbsolute());
      assertEquals("/tmp/9SOzKT>B.j9(09SOzKT>B.j9(", file0.toString());
      assertEquals("9SOzKT>B.j9(09SOzKT>B.j9(", file0.getName());
      assertFalse(file0.canExecute());
      assertEquals(0L, file0.getTotalSpace());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      assertTrue(file0.isFile());
      assertEquals("/tmp", file0.getParent());
      assertFalse(file0.canRead());
      assertFalse(file0.exists());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertTrue(zipArchiveOutputStream0.isSeekable());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals(0, zipArchiveEntry0.getVersionRequired());
      assertEquals(2L, zipArchiveEntry0.getCompressedSize());
      assertEquals(8, zipArchiveEntry0.getMethod());
      assertFalse(zipArchiveEntry0.isDirectory());
      assertEquals("9SOzKT>B.j9(", zipArchiveEntry0.toString());
      assertEquals(0L, zipArchiveEntry0.getCrc());
      assertEquals(0, zipArchiveEntry0.getRawFlag());
      assertEquals("9SOzKT>B.j9(", zipArchiveEntry0.getName());
      assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
      assertNull(zipArchiveEntry0.getComment());
      assertEquals(0L, zipArchiveEntry0.getSize());
      assertFalse(zipArchiveEntry0.isStreamContiguous());
      assertEquals(0, zipArchiveEntry0.getUnixMode());
      assertEquals(0, zipArchiveEntry0.getPlatform());
      assertEquals(0, zipArchiveEntry0.getVersionMadeBy());
      assertEquals((-1L), zipArchiveEntry0.getDataOffset());
      assertFalse(zipArchiveEntry0.isUnixSymlink());
      assertEquals(0, zipArchiveEntry0.getInternalAttributes());
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      
      zipArchiveOutputStream0.putArchiveEntry(zipArchiveEntry0);
      assertEquals(0L, file0.length());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(0L, file0.lastModified());
      assertFalse(file0.isDirectory());
      assertFalse(file0.canWrite());
      assertTrue(file0.isAbsolute());
      assertEquals("/tmp/9SOzKT>B.j9(09SOzKT>B.j9(", file0.toString());
      assertEquals("9SOzKT>B.j9(09SOzKT>B.j9(", file0.getName());
      assertFalse(file0.canExecute());
      assertEquals(0L, file0.getTotalSpace());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      assertTrue(file0.isFile());
      assertEquals("/tmp", file0.getParent());
      assertFalse(file0.canRead());
      assertFalse(file0.exists());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertTrue(zipArchiveOutputStream0.isSeekable());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals(0, zipArchiveEntry0.getVersionRequired());
      assertEquals(2L, zipArchiveEntry0.getCompressedSize());
      assertEquals(8, zipArchiveEntry0.getMethod());
      assertFalse(zipArchiveEntry0.isDirectory());
      assertEquals("9SOzKT>B.j9(", zipArchiveEntry0.toString());
      assertEquals(0L, zipArchiveEntry0.getCrc());
      assertEquals(0, zipArchiveEntry0.getRawFlag());
      assertEquals("9SOzKT>B.j9(", zipArchiveEntry0.getName());
      assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
      assertNull(zipArchiveEntry0.getComment());
      assertEquals(0L, zipArchiveEntry0.getSize());
      assertFalse(zipArchiveEntry0.isStreamContiguous());
      assertEquals(0, zipArchiveEntry0.getUnixMode());
      assertEquals(0, zipArchiveEntry0.getPlatform());
      assertEquals(0, zipArchiveEntry0.getVersionMadeBy());
      assertEquals((-1L), zipArchiveEntry0.getDataOffset());
      assertFalse(zipArchiveEntry0.isUnixSymlink());
      assertEquals(0, zipArchiveEntry0.getInternalAttributes());
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-29);
      byteArray0[1] = (byte)24;
      byteArray0[2] = (byte) (-29);
      byteArray0[3] = (byte)24;
      byteArray0[4] = (byte)24;
      byteArray0[5] = (byte)24;
      byteArray0[6] = (byte)24;
      byteArray0[7] = (byte)24;
      byteArray0[8] = (byte)24;
      zipArchiveOutputStream0.writeOut(byteArray0);
      assertEquals(0L, file0.length());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(0L, file0.lastModified());
      assertFalse(file0.isDirectory());
      assertFalse(file0.canWrite());
      assertTrue(file0.isAbsolute());
      assertEquals("/tmp/9SOzKT>B.j9(09SOzKT>B.j9(", file0.toString());
      assertEquals("9SOzKT>B.j9(09SOzKT>B.j9(", file0.getName());
      assertFalse(file0.canExecute());
      assertEquals(0L, file0.getTotalSpace());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      assertTrue(file0.isFile());
      assertEquals("/tmp", file0.getParent());
      assertFalse(file0.canRead());
      assertFalse(file0.exists());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertTrue(zipArchiveOutputStream0.isSeekable());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals(9, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-29), (byte)24, (byte) (-29), (byte)24, (byte)24, (byte)24, (byte)24, (byte)24, (byte)24}, byteArray0);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      
      zipArchiveOutputStream0.setMethod((byte) (-29));
      assertEquals(0L, file0.length());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(0L, file0.lastModified());
      assertFalse(file0.isDirectory());
      assertFalse(file0.canWrite());
      assertTrue(file0.isAbsolute());
      assertEquals("/tmp/9SOzKT>B.j9(09SOzKT>B.j9(", file0.toString());
      assertEquals("9SOzKT>B.j9(09SOzKT>B.j9(", file0.getName());
      assertFalse(file0.canExecute());
      assertEquals(0L, file0.getTotalSpace());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      assertTrue(file0.isFile());
      assertEquals("/tmp", file0.getParent());
      assertFalse(file0.canRead());
      assertFalse(file0.exists());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertTrue(zipArchiveOutputStream0.isSeekable());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      
      zipArchiveOutputStream0.putArchiveEntry(zipArchiveEntry0);
      assertEquals(0L, file0.length());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(0L, file0.lastModified());
      assertFalse(file0.isDirectory());
      assertFalse(file0.canWrite());
      assertTrue(file0.isAbsolute());
      assertEquals("/tmp/9SOzKT>B.j9(09SOzKT>B.j9(", file0.toString());
      assertEquals("9SOzKT>B.j9(09SOzKT>B.j9(", file0.getName());
      assertFalse(file0.canExecute());
      assertEquals(0L, file0.getTotalSpace());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      assertTrue(file0.isFile());
      assertEquals("/tmp", file0.getParent());
      assertFalse(file0.canRead());
      assertFalse(file0.exists());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertTrue(zipArchiveOutputStream0.isSeekable());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals(0, zipArchiveEntry0.getVersionRequired());
      assertEquals(2L, zipArchiveEntry0.getCompressedSize());
      assertEquals(8, zipArchiveEntry0.getMethod());
      assertFalse(zipArchiveEntry0.isDirectory());
      assertEquals("9SOzKT>B.j9(", zipArchiveEntry0.toString());
      assertEquals(0L, zipArchiveEntry0.getCrc());
      assertEquals(0, zipArchiveEntry0.getRawFlag());
      assertEquals("9SOzKT>B.j9(", zipArchiveEntry0.getName());
      assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
      assertNull(zipArchiveEntry0.getComment());
      assertEquals(0L, zipArchiveEntry0.getSize());
      assertFalse(zipArchiveEntry0.isStreamContiguous());
      assertEquals(0, zipArchiveEntry0.getUnixMode());
      assertEquals(0, zipArchiveEntry0.getPlatform());
      assertEquals(0, zipArchiveEntry0.getVersionMadeBy());
      assertEquals((-1L), zipArchiveEntry0.getDataOffset());
      assertFalse(zipArchiveEntry0.isUnixSymlink());
      assertEquals(0, zipArchiveEntry0.getInternalAttributes());
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      
      zipArchiveOutputStream0.putArchiveEntry(zipArchiveEntry0);
      assertEquals(0L, file0.length());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(0L, file0.lastModified());
      assertFalse(file0.isDirectory());
      assertFalse(file0.canWrite());
      assertTrue(file0.isAbsolute());
      assertEquals("/tmp/9SOzKT>B.j9(09SOzKT>B.j9(", file0.toString());
      assertEquals("9SOzKT>B.j9(09SOzKT>B.j9(", file0.getName());
      assertFalse(file0.canExecute());
      assertEquals(0L, file0.getTotalSpace());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      assertTrue(file0.isFile());
      assertEquals("/tmp", file0.getParent());
      assertFalse(file0.canRead());
      assertFalse(file0.exists());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertTrue(zipArchiveOutputStream0.isSeekable());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals(0, zipArchiveEntry0.getVersionRequired());
      assertEquals(2L, zipArchiveEntry0.getCompressedSize());
      assertEquals(8, zipArchiveEntry0.getMethod());
      assertFalse(zipArchiveEntry0.isDirectory());
      assertEquals("9SOzKT>B.j9(", zipArchiveEntry0.toString());
      assertEquals(0L, zipArchiveEntry0.getCrc());
      assertEquals(0, zipArchiveEntry0.getRawFlag());
      assertEquals("9SOzKT>B.j9(", zipArchiveEntry0.getName());
      assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
      assertNull(zipArchiveEntry0.getComment());
      assertEquals(0L, zipArchiveEntry0.getSize());
      assertFalse(zipArchiveEntry0.isStreamContiguous());
      assertEquals(0, zipArchiveEntry0.getUnixMode());
      assertEquals(0, zipArchiveEntry0.getPlatform());
      assertEquals(0, zipArchiveEntry0.getVersionMadeBy());
      assertEquals((-1L), zipArchiveEntry0.getDataOffset());
      assertFalse(zipArchiveEntry0.isUnixSymlink());
      assertEquals(0, zipArchiveEntry0.getInternalAttributes());
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      
      zipArchiveEntry0.setCompressedSize((-1620L));
      assertEquals(0, zipArchiveEntry0.getVersionRequired());
      assertEquals(8, zipArchiveEntry0.getMethod());
      assertFalse(zipArchiveEntry0.isDirectory());
      assertEquals("9SOzKT>B.j9(", zipArchiveEntry0.toString());
      assertEquals(0L, zipArchiveEntry0.getCrc());
      assertEquals(0, zipArchiveEntry0.getRawFlag());
      assertEquals("9SOzKT>B.j9(", zipArchiveEntry0.getName());
      assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
      assertEquals((-1620L), zipArchiveEntry0.getCompressedSize());
      assertNull(zipArchiveEntry0.getComment());
      assertEquals(0L, zipArchiveEntry0.getSize());
      assertFalse(zipArchiveEntry0.isStreamContiguous());
      assertEquals(0, zipArchiveEntry0.getUnixMode());
      assertEquals(0, zipArchiveEntry0.getPlatform());
      assertEquals(0, zipArchiveEntry0.getVersionMadeBy());
      assertEquals((-1L), zipArchiveEntry0.getDataOffset());
      assertFalse(zipArchiveEntry0.isUnixSymlink());
      assertEquals(0, zipArchiveEntry0.getInternalAttributes());
      assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      
      Enumeration<PipedInputStream> enumeration0 = (Enumeration<PipedInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      assertNotNull(sequenceInputStream0);
      
      zipArchiveOutputStream0.addRawArchiveEntry(zipArchiveEntry0, sequenceInputStream0);
      assertEquals(0L, file0.length());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(0L, file0.lastModified());
      assertFalse(file0.isDirectory());
      assertFalse(file0.canWrite());
      assertTrue(file0.isAbsolute());
      assertEquals("/tmp/9SOzKT>B.j9(09SOzKT>B.j9(", file0.toString());
      assertEquals("9SOzKT>B.j9(09SOzKT>B.j9(", file0.getName());
      assertFalse(file0.canExecute());
      assertEquals(0L, file0.getTotalSpace());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      assertTrue(file0.isFile());
      assertEquals("/tmp", file0.getParent());
      assertFalse(file0.canRead());
      assertFalse(file0.exists());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertTrue(zipArchiveOutputStream0.isSeekable());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals(0, zipArchiveEntry0.getVersionRequired());
      assertEquals(2L, zipArchiveEntry0.getCompressedSize());
      assertEquals(8, zipArchiveEntry0.getMethod());
      assertFalse(zipArchiveEntry0.isDirectory());
      assertEquals("9SOzKT>B.j9(", zipArchiveEntry0.toString());
      assertEquals(0L, zipArchiveEntry0.getCrc());
      assertEquals(0, zipArchiveEntry0.getRawFlag());
      assertEquals("9SOzKT>B.j9(", zipArchiveEntry0.getName());
      assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
      assertNull(zipArchiveEntry0.getComment());
      assertEquals(0L, zipArchiveEntry0.getSize());
      assertFalse(zipArchiveEntry0.isStreamContiguous());
      assertEquals(0, zipArchiveEntry0.getUnixMode());
      assertEquals(0, zipArchiveEntry0.getPlatform());
      assertEquals(0, zipArchiveEntry0.getVersionMadeBy());
      assertEquals((-1L), zipArchiveEntry0.getDataOffset());
      assertFalse(zipArchiveEntry0.isUnixSymlink());
      assertEquals(0, zipArchiveEntry0.getInternalAttributes());
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      File file0 = MockFile.createTempFile("6Lz^|?F;`V%Ir6", "bad size for entry ");
      assertEquals(0L, file0.length());
      assertEquals(0L, file0.getFreeSpace());
      assertTrue(file0.exists());
      assertFalse(file0.isDirectory());
      assertTrue(file0.isAbsolute());
      assertEquals("/tmp/6Lz^|?F;`V%Ir60bad size for entry ", file0.toString());
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isHidden());
      assertTrue(file0.isFile());
      assertEquals("/tmp", file0.getParent());
      assertTrue(file0.canRead());
      assertTrue(file0.canWrite());
      assertEquals("6Lz^|?F;`V%Ir60bad size for entry ", file0.getName());
      assertTrue(file0.canExecute());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(0L, file0.getTotalSpace());
      assertNotNull(file0);
      
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(file0);
      assertEquals(0L, file0.length());
      assertEquals(0L, file0.getFreeSpace());
      assertTrue(file0.exists());
      assertFalse(file0.isDirectory());
      assertTrue(file0.isAbsolute());
      assertEquals("/tmp/6Lz^|?F;`V%Ir60bad size for entry ", file0.toString());
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isHidden());
      assertTrue(file0.isFile());
      assertEquals("/tmp", file0.getParent());
      assertTrue(file0.canRead());
      assertTrue(file0.canWrite());
      assertEquals("6Lz^|?F;`V%Ir60bad size for entry ", file0.getName());
      assertTrue(file0.canExecute());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertTrue(zipArchiveOutputStream0.isSeekable());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertNotNull(zipArchiveOutputStream0);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      
      ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
      assertEquals(0, zipArchiveEntry0.getPlatform());
      assertNull(zipArchiveEntry0.getComment());
      assertEquals((-1), zipArchiveEntry0.getMethod());
      assertFalse(zipArchiveEntry0.isStreamContiguous());
      assertEquals("", zipArchiveEntry0.toString());
      assertEquals(0, zipArchiveEntry0.getVersionMadeBy());
      assertEquals((-1L), zipArchiveEntry0.getDataOffset());
      assertEquals(0, zipArchiveEntry0.getInternalAttributes());
      assertFalse(zipArchiveEntry0.isUnixSymlink());
      assertEquals((-1L), zipArchiveEntry0.getCrc());
      assertEquals(0, zipArchiveEntry0.getUnixMode());
      assertEquals(0, zipArchiveEntry0.getVersionRequired());
      assertEquals((-1L), zipArchiveEntry0.getSize());
      assertEquals(0, zipArchiveEntry0.getRawFlag());
      assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
      assertFalse(zipArchiveEntry0.isDirectory());
      assertEquals((-1L), zipArchiveEntry0.getCompressedSize());
      assertEquals("", zipArchiveEntry0.getName());
      assertNotNull(zipArchiveEntry0);
      assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      
      zipArchiveOutputStream0.putArchiveEntry(zipArchiveEntry0);
      assertEquals(0L, file0.length());
      assertEquals(0L, file0.getFreeSpace());
      assertTrue(file0.exists());
      assertFalse(file0.isDirectory());
      assertTrue(file0.isAbsolute());
      assertEquals("/tmp/6Lz^|?F;`V%Ir60bad size for entry ", file0.toString());
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isHidden());
      assertTrue(file0.isFile());
      assertEquals("/tmp", file0.getParent());
      assertTrue(file0.canRead());
      assertTrue(file0.canWrite());
      assertEquals("6Lz^|?F;`V%Ir60bad size for entry ", file0.getName());
      assertTrue(file0.canExecute());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertTrue(zipArchiveOutputStream0.isSeekable());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertEquals(0, zipArchiveEntry0.getPlatform());
      assertNull(zipArchiveEntry0.getComment());
      assertFalse(zipArchiveEntry0.isStreamContiguous());
      assertEquals("", zipArchiveEntry0.toString());
      assertEquals(0, zipArchiveEntry0.getVersionMadeBy());
      assertEquals((-1L), zipArchiveEntry0.getDataOffset());
      assertEquals(0, zipArchiveEntry0.getInternalAttributes());
      assertFalse(zipArchiveEntry0.isUnixSymlink());
      assertEquals((-1L), zipArchiveEntry0.getCrc());
      assertEquals(0, zipArchiveEntry0.getUnixMode());
      assertEquals(0, zipArchiveEntry0.getVersionRequired());
      assertEquals((-1L), zipArchiveEntry0.getSize());
      assertEquals(0, zipArchiveEntry0.getRawFlag());
      assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
      assertFalse(zipArchiveEntry0.isDirectory());
      assertEquals(8, zipArchiveEntry0.getMethod());
      assertEquals((-1L), zipArchiveEntry0.getCompressedSize());
      assertEquals("", zipArchiveEntry0.getName());
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      
      ResourceAlignmentExtraField resourceAlignmentExtraField0 = new ResourceAlignmentExtraField();
      assertFalse(resourceAlignmentExtraField0.allowMethodChange());
      assertEquals((short)0, resourceAlignmentExtraField0.getAlignment());
      assertNotNull(resourceAlignmentExtraField0);
      assertEquals(2, ResourceAlignmentExtraField.BASE_SIZE);
      
      zipArchiveEntry0.addExtraField(resourceAlignmentExtraField0);
      assertEquals(0, zipArchiveEntry0.getPlatform());
      assertNull(zipArchiveEntry0.getComment());
      assertFalse(zipArchiveEntry0.isStreamContiguous());
      assertEquals("", zipArchiveEntry0.toString());
      assertEquals(0, zipArchiveEntry0.getVersionMadeBy());
      assertEquals((-1L), zipArchiveEntry0.getDataOffset());
      assertEquals(0, zipArchiveEntry0.getInternalAttributes());
      assertFalse(zipArchiveEntry0.isUnixSymlink());
      assertEquals((-1L), zipArchiveEntry0.getCrc());
      assertEquals(0, zipArchiveEntry0.getUnixMode());
      assertEquals(0, zipArchiveEntry0.getVersionRequired());
      assertEquals((-1L), zipArchiveEntry0.getSize());
      assertEquals(0, zipArchiveEntry0.getRawFlag());
      assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
      assertFalse(zipArchiveEntry0.isDirectory());
      assertEquals(8, zipArchiveEntry0.getMethod());
      assertEquals((-1L), zipArchiveEntry0.getCompressedSize());
      assertEquals("", zipArchiveEntry0.getName());
      assertFalse(resourceAlignmentExtraField0.allowMethodChange());
      assertEquals((short)0, resourceAlignmentExtraField0.getAlignment());
      assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      assertEquals(2, ResourceAlignmentExtraField.BASE_SIZE);
      
      zipArchiveOutputStream0.writeCentralDirectoryEnd();
      assertEquals(0L, file0.length());
      assertEquals(0L, file0.getFreeSpace());
      assertTrue(file0.exists());
      assertFalse(file0.isDirectory());
      assertTrue(file0.isAbsolute());
      assertEquals("/tmp/6Lz^|?F;`V%Ir60bad size for entry ", file0.toString());
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isHidden());
      assertTrue(file0.isFile());
      assertEquals("/tmp", file0.getParent());
      assertTrue(file0.canRead());
      assertTrue(file0.canWrite());
      assertEquals("6Lz^|?F;`V%Ir60bad size for entry ", file0.getName());
      assertTrue(file0.canExecute());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertTrue(zipArchiveOutputStream0.isSeekable());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      
      // Undeclared exception!
//      try { 
        zipArchiveOutputStream0.writeLocalFileHeader(zipArchiveEntry0);
//        fail("Expecting exception: NegativeArraySizeException");
      
//      } catch(NegativeArraySizeException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.compress.archivers.zip.ExtraFieldUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      MockFile mockFile0 = new MockFile("0?F|!c8^+,;1", "0?F|!c8^+,;1");
      assertNotNull(mockFile0);
      
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(mockFile0);
      assertEquals(0L, mockFile0.length());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.exists());
      assertTrue(mockFile0.isFile());
      assertTrue(mockFile0.canExecute());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals("/experiment/0?F|!c8^+,;1/0?F|!c8^+,;1", mockFile0.toString());
      assertEquals("/experiment/0?F|!c8^+,;1", mockFile0.getParent());
      assertTrue(mockFile0.canWrite());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isDirectory());
      assertTrue(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertEquals("0?F|!c8^+,;1", mockFile0.getName());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertFalse(zipArchiveOutputStream0.isSeekable());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertNotNull(zipArchiveOutputStream0);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      
      JarArchiveEntry jarArchiveEntry0 = new JarArchiveEntry("0?F|!c8^+,;1");
      assertEquals((-1L), jarArchiveEntry0.getCompressedSize());
      assertEquals(0, jarArchiveEntry0.getVersionRequired());
      assertEquals("0?F|!c8^+,;1", jarArchiveEntry0.getName());
      assertEquals("0?F|!c8^+,;1", jarArchiveEntry0.toString());
      assertFalse(jarArchiveEntry0.isUnixSymlink());
      assertNull(jarArchiveEntry0.getComment());
      assertEquals((-1L), jarArchiveEntry0.getSize());
      assertFalse(jarArchiveEntry0.isStreamContiguous());
      assertFalse(jarArchiveEntry0.isDirectory());
      assertEquals((-1L), jarArchiveEntry0.getCrc());
      assertEquals(0L, jarArchiveEntry0.getExternalAttributes());
      assertEquals((-1), jarArchiveEntry0.getMethod());
      assertEquals((-1L), jarArchiveEntry0.getDataOffset());
      assertEquals(0, jarArchiveEntry0.getRawFlag());
      assertEquals(0, jarArchiveEntry0.getInternalAttributes());
      assertEquals(0, jarArchiveEntry0.getPlatform());
      assertEquals(0, jarArchiveEntry0.getUnixMode());
      assertEquals(0, jarArchiveEntry0.getVersionMadeBy());
      assertNotNull(jarArchiveEntry0);
      assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      
      ZipArchiveOutputStream.UnicodeExtraFieldPolicy zipArchiveOutputStream_UnicodeExtraFieldPolicy0 = ZipArchiveOutputStream.UnicodeExtraFieldPolicy.ALWAYS;
      assertEquals("always", zipArchiveOutputStream_UnicodeExtraFieldPolicy0.toString());
      assertNotNull(zipArchiveOutputStream_UnicodeExtraFieldPolicy0);
      
      zipArchiveOutputStream0.setCreateUnicodeExtraFields(zipArchiveOutputStream_UnicodeExtraFieldPolicy0);
      assertEquals(0L, mockFile0.length());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.exists());
      assertTrue(mockFile0.isFile());
      assertTrue(mockFile0.canExecute());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals("/experiment/0?F|!c8^+,;1/0?F|!c8^+,;1", mockFile0.toString());
      assertEquals("/experiment/0?F|!c8^+,;1", mockFile0.getParent());
      assertTrue(mockFile0.canWrite());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isDirectory());
      assertTrue(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertEquals("0?F|!c8^+,;1", mockFile0.getName());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertFalse(zipArchiveOutputStream0.isSeekable());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertEquals("always", zipArchiveOutputStream_UnicodeExtraFieldPolicy0.toString());
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)20;
      byteArray0[1] = (byte)63;
      byteArray0[2] = (byte)31;
      byteArray0[3] = (byte)51;
      byteArray0[4] = (byte) (-18);
      byteArray0[5] = (byte)6;
      byteArray0[6] = (byte) (-1);
      byteArray0[7] = (byte)39;
      byteArray0[8] = (byte) (-103);
      jarArchiveEntry0.setExtra(byteArray0);
      assertEquals((-1L), jarArchiveEntry0.getCompressedSize());
      assertEquals(0, jarArchiveEntry0.getVersionRequired());
      assertEquals("0?F|!c8^+,;1", jarArchiveEntry0.getName());
      assertEquals("0?F|!c8^+,;1", jarArchiveEntry0.toString());
      assertFalse(jarArchiveEntry0.isUnixSymlink());
      assertNull(jarArchiveEntry0.getComment());
      assertEquals((-1L), jarArchiveEntry0.getSize());
      assertFalse(jarArchiveEntry0.isStreamContiguous());
      assertFalse(jarArchiveEntry0.isDirectory());
      assertEquals((-1L), jarArchiveEntry0.getCrc());
      assertEquals(0L, jarArchiveEntry0.getExternalAttributes());
      assertEquals((-1), jarArchiveEntry0.getMethod());
      assertEquals((-1L), jarArchiveEntry0.getDataOffset());
      assertEquals(0, jarArchiveEntry0.getRawFlag());
      assertEquals(0, jarArchiveEntry0.getInternalAttributes());
      assertEquals(0, jarArchiveEntry0.getPlatform());
      assertEquals(0, jarArchiveEntry0.getUnixMode());
      assertEquals(0, jarArchiveEntry0.getVersionMadeBy());
      assertEquals(9, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)20, (byte)63, (byte)31, (byte)51, (byte) (-18), (byte)6, (byte) (-1), (byte)39, (byte) (-103)}, byteArray0);
      assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      
      zipArchiveOutputStream0.putArchiveEntry(jarArchiveEntry0);
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.exists());
      assertTrue(mockFile0.isFile());
      assertTrue(mockFile0.canExecute());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(72L, mockFile0.length());
      assertEquals("/experiment/0?F|!c8^+,;1/0?F|!c8^+,;1", mockFile0.toString());
      assertEquals("/experiment/0?F|!c8^+,;1", mockFile0.getParent());
      assertTrue(mockFile0.canWrite());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isDirectory());
      assertTrue(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertEquals("0?F|!c8^+,;1", mockFile0.getName());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertFalse(zipArchiveOutputStream0.isSeekable());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertEquals((-1L), jarArchiveEntry0.getCompressedSize());
      assertEquals(0, jarArchiveEntry0.getVersionRequired());
      assertEquals("0?F|!c8^+,;1", jarArchiveEntry0.getName());
      assertEquals("0?F|!c8^+,;1", jarArchiveEntry0.toString());
      assertFalse(jarArchiveEntry0.isUnixSymlink());
      assertNull(jarArchiveEntry0.getComment());
      assertEquals((-1L), jarArchiveEntry0.getSize());
      assertEquals(8, jarArchiveEntry0.getMethod());
      assertFalse(jarArchiveEntry0.isStreamContiguous());
      assertFalse(jarArchiveEntry0.isDirectory());
      assertEquals((-1L), jarArchiveEntry0.getCrc());
      assertEquals(0L, jarArchiveEntry0.getExternalAttributes());
      assertEquals((-1L), jarArchiveEntry0.getDataOffset());
      assertEquals(0, jarArchiveEntry0.getRawFlag());
      assertEquals(0, jarArchiveEntry0.getInternalAttributes());
      assertEquals(0, jarArchiveEntry0.getPlatform());
      assertEquals(0, jarArchiveEntry0.getUnixMode());
      assertEquals(0, jarArchiveEntry0.getVersionMadeBy());
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      
      Zip64Mode zip64Mode0 = Zip64Mode.Never;
      zipArchiveOutputStream0.setUseZip64(zip64Mode0);
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.exists());
      assertTrue(mockFile0.isFile());
      assertTrue(mockFile0.canExecute());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(72L, mockFile0.length());
      assertEquals("/experiment/0?F|!c8^+,;1/0?F|!c8^+,;1", mockFile0.toString());
      assertEquals("/experiment/0?F|!c8^+,;1", mockFile0.getParent());
      assertTrue(mockFile0.canWrite());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isDirectory());
      assertTrue(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertEquals("0?F|!c8^+,;1", mockFile0.getName());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertFalse(zipArchiveOutputStream0.isSeekable());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      
      zipArchiveOutputStream0.writeLocalFileHeader(jarArchiveEntry0);
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.exists());
      assertTrue(mockFile0.isFile());
      assertTrue(mockFile0.canExecute());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals("/experiment/0?F|!c8^+,;1/0?F|!c8^+,;1", mockFile0.toString());
      assertEquals("/experiment/0?F|!c8^+,;1", mockFile0.getParent());
      assertEquals(144L, mockFile0.length());
      assertTrue(mockFile0.canWrite());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isDirectory());
      assertTrue(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertEquals("0?F|!c8^+,;1", mockFile0.getName());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertFalse(zipArchiveOutputStream0.isSeekable());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertEquals((-1L), jarArchiveEntry0.getCompressedSize());
      assertEquals(0, jarArchiveEntry0.getVersionRequired());
      assertEquals("0?F|!c8^+,;1", jarArchiveEntry0.getName());
      assertEquals("0?F|!c8^+,;1", jarArchiveEntry0.toString());
      assertFalse(jarArchiveEntry0.isUnixSymlink());
      assertNull(jarArchiveEntry0.getComment());
      assertEquals((-1L), jarArchiveEntry0.getSize());
      assertEquals(8, jarArchiveEntry0.getMethod());
      assertFalse(jarArchiveEntry0.isStreamContiguous());
      assertFalse(jarArchiveEntry0.isDirectory());
      assertEquals((-1L), jarArchiveEntry0.getCrc());
      assertEquals(0L, jarArchiveEntry0.getExternalAttributes());
      assertEquals((-1L), jarArchiveEntry0.getDataOffset());
      assertEquals(0, jarArchiveEntry0.getRawFlag());
      assertEquals(0, jarArchiveEntry0.getInternalAttributes());
      assertEquals(0, jarArchiveEntry0.getPlatform());
      assertEquals(0, jarArchiveEntry0.getUnixMode());
      assertEquals(0, jarArchiveEntry0.getVersionMadeBy());
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      
      zipArchiveOutputStream0.closeArchiveEntry();
      assertEquals(162L, mockFile0.length());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.exists());
      assertTrue(mockFile0.isFile());
      assertTrue(mockFile0.canExecute());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals("/experiment/0?F|!c8^+,;1/0?F|!c8^+,;1", mockFile0.toString());
      assertEquals("/experiment/0?F|!c8^+,;1", mockFile0.getParent());
      assertTrue(mockFile0.canWrite());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isDirectory());
      assertTrue(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertEquals("0?F|!c8^+,;1", mockFile0.getName());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertFalse(zipArchiveOutputStream0.isSeekable());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      
//      try { 
        zipArchiveOutputStream0.finish();
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Error in writing to file
//         //
//         verifyException("org.evosuite.runtime.mock.java.io.NativeMockedIO", e);
//      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      File file0 = MockFile.createTempFile("TD\"c", "TD\"c");
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isHidden());
      assertTrue(file0.canWrite());
      assertEquals("/tmp", file0.getParent());
      assertTrue(file0.canExecute());
      assertTrue(file0.isFile());
      assertEquals("TD\"c0TD\"c", file0.getName());
      assertTrue(file0.canRead());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(1392409281320L, file0.lastModified());
      assertTrue(file0.exists());
      assertEquals(0L, file0.getFreeSpace());
      assertFalse(file0.isDirectory());
      assertEquals("/tmp/TD\"c0TD\"c", file0.toString());
      assertEquals(0L, file0.length());
      assertTrue(file0.isAbsolute());
      assertNotNull(file0);
      
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(file0);
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isHidden());
      assertTrue(file0.canWrite());
      assertEquals("/tmp", file0.getParent());
      assertTrue(file0.canExecute());
      assertTrue(file0.isFile());
      assertEquals("TD\"c0TD\"c", file0.getName());
      assertTrue(file0.canRead());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(1392409281320L, file0.lastModified());
      assertTrue(file0.exists());
      assertEquals(0L, file0.getFreeSpace());
      assertFalse(file0.isDirectory());
      assertEquals("/tmp/TD\"c0TD\"c", file0.toString());
      assertEquals(0L, file0.length());
      assertTrue(file0.isAbsolute());
      assertTrue(zipArchiveOutputStream0.isSeekable());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertNotNull(zipArchiveOutputStream0);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      
      ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
      assertFalse(zipArchiveEntry0.isDirectory());
      assertFalse(zipArchiveEntry0.isUnixSymlink());
      assertEquals("", zipArchiveEntry0.getName());
      assertEquals("", zipArchiveEntry0.toString());
      assertFalse(zipArchiveEntry0.isStreamContiguous());
      assertEquals(0, zipArchiveEntry0.getPlatform());
      assertNull(zipArchiveEntry0.getComment());
      assertEquals(0, zipArchiveEntry0.getInternalAttributes());
      assertEquals((-1L), zipArchiveEntry0.getDataOffset());
      assertEquals((-1L), zipArchiveEntry0.getSize());
      assertEquals(0, zipArchiveEntry0.getVersionMadeBy());
      assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
      assertEquals(0, zipArchiveEntry0.getUnixMode());
      assertEquals((-1L), zipArchiveEntry0.getCrc());
      assertEquals(0, zipArchiveEntry0.getRawFlag());
      assertEquals(0, zipArchiveEntry0.getVersionRequired());
      assertEquals((-1), zipArchiveEntry0.getMethod());
      assertEquals((-1L), zipArchiveEntry0.getCompressedSize());
      assertNotNull(zipArchiveEntry0);
      assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      
      zipArchiveEntry0.setCrc(0);
      assertFalse(zipArchiveEntry0.isDirectory());
      assertFalse(zipArchiveEntry0.isUnixSymlink());
      assertEquals("", zipArchiveEntry0.getName());
      assertEquals("", zipArchiveEntry0.toString());
      assertFalse(zipArchiveEntry0.isStreamContiguous());
      assertEquals(0, zipArchiveEntry0.getPlatform());
      assertNull(zipArchiveEntry0.getComment());
      assertEquals(0, zipArchiveEntry0.getInternalAttributes());
      assertEquals((-1L), zipArchiveEntry0.getDataOffset());
      assertEquals((-1L), zipArchiveEntry0.getSize());
      assertEquals(0, zipArchiveEntry0.getVersionMadeBy());
      assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
      assertEquals(0, zipArchiveEntry0.getUnixMode());
      assertEquals(0L, zipArchiveEntry0.getCrc());
      assertEquals(0, zipArchiveEntry0.getRawFlag());
      assertEquals(0, zipArchiveEntry0.getVersionRequired());
      assertEquals((-1), zipArchiveEntry0.getMethod());
      assertEquals((-1L), zipArchiveEntry0.getCompressedSize());
      assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      
      zipArchiveOutputStream0.putArchiveEntry(zipArchiveEntry0);
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isHidden());
      assertTrue(file0.canWrite());
      assertEquals("/tmp", file0.getParent());
      assertTrue(file0.canExecute());
      assertTrue(file0.isFile());
      assertEquals("TD\"c0TD\"c", file0.getName());
      assertTrue(file0.canRead());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(1392409281320L, file0.lastModified());
      assertTrue(file0.exists());
      assertEquals(0L, file0.getFreeSpace());
      assertFalse(file0.isDirectory());
      assertEquals("/tmp/TD\"c0TD\"c", file0.toString());
      assertEquals(0L, file0.length());
      assertTrue(file0.isAbsolute());
      assertTrue(zipArchiveOutputStream0.isSeekable());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertFalse(zipArchiveEntry0.isDirectory());
      assertFalse(zipArchiveEntry0.isUnixSymlink());
      assertEquals(8, zipArchiveEntry0.getMethod());
      assertEquals("", zipArchiveEntry0.getName());
      assertEquals("", zipArchiveEntry0.toString());
      assertFalse(zipArchiveEntry0.isStreamContiguous());
      assertEquals(0, zipArchiveEntry0.getPlatform());
      assertNull(zipArchiveEntry0.getComment());
      assertEquals(0, zipArchiveEntry0.getInternalAttributes());
      assertEquals((-1L), zipArchiveEntry0.getDataOffset());
      assertEquals((-1L), zipArchiveEntry0.getSize());
      assertEquals(0, zipArchiveEntry0.getVersionMadeBy());
      assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
      assertEquals(0, zipArchiveEntry0.getUnixMode());
      assertEquals(0L, zipArchiveEntry0.getCrc());
      assertEquals(0, zipArchiveEntry0.getRawFlag());
      assertEquals(0, zipArchiveEntry0.getVersionRequired());
      assertEquals((-1L), zipArchiveEntry0.getCompressedSize());
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      
      ResourceAlignmentExtraField resourceAlignmentExtraField0 = new ResourceAlignmentExtraField();
      assertEquals((short)0, resourceAlignmentExtraField0.getAlignment());
      assertFalse(resourceAlignmentExtraField0.allowMethodChange());
      assertNotNull(resourceAlignmentExtraField0);
      assertEquals(2, ResourceAlignmentExtraField.BASE_SIZE);
      
      zipArchiveEntry0.addExtraField(resourceAlignmentExtraField0);
      assertFalse(zipArchiveEntry0.isDirectory());
      assertFalse(zipArchiveEntry0.isUnixSymlink());
      assertEquals(8, zipArchiveEntry0.getMethod());
      assertEquals("", zipArchiveEntry0.getName());
      assertEquals("", zipArchiveEntry0.toString());
      assertFalse(zipArchiveEntry0.isStreamContiguous());
      assertEquals(0, zipArchiveEntry0.getPlatform());
      assertNull(zipArchiveEntry0.getComment());
      assertEquals(0, zipArchiveEntry0.getInternalAttributes());
      assertEquals((-1L), zipArchiveEntry0.getDataOffset());
      assertEquals((-1L), zipArchiveEntry0.getSize());
      assertEquals(0, zipArchiveEntry0.getVersionMadeBy());
      assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
      assertEquals(0, zipArchiveEntry0.getUnixMode());
      assertEquals(0L, zipArchiveEntry0.getCrc());
      assertEquals(0, zipArchiveEntry0.getRawFlag());
      assertEquals(0, zipArchiveEntry0.getVersionRequired());
      assertEquals((-1L), zipArchiveEntry0.getCompressedSize());
      assertEquals((short)0, resourceAlignmentExtraField0.getAlignment());
      assertFalse(resourceAlignmentExtraField0.allowMethodChange());
      assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      assertEquals(2, ResourceAlignmentExtraField.BASE_SIZE);
      
      zipArchiveOutputStream0.writeCentralDirectoryEnd();
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isHidden());
      assertTrue(file0.canWrite());
      assertEquals("/tmp", file0.getParent());
      assertTrue(file0.canExecute());
      assertTrue(file0.isFile());
      assertEquals("TD\"c0TD\"c", file0.getName());
      assertTrue(file0.canRead());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(1392409281320L, file0.lastModified());
      assertTrue(file0.exists());
      assertEquals(0L, file0.getFreeSpace());
      assertFalse(file0.isDirectory());
      assertEquals("/tmp/TD\"c0TD\"c", file0.toString());
      assertEquals(0L, file0.length());
      assertTrue(file0.isAbsolute());
      assertTrue(zipArchiveOutputStream0.isSeekable());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      
      // Undeclared exception!
//      try { 
        zipArchiveOutputStream0.putArchiveEntry(zipArchiveEntry0);
//        fail("Expecting exception: NegativeArraySizeException");
      
//      } catch(NegativeArraySizeException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.compress.archivers.zip.ExtraFieldUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      File file0 = MockFile.createTempFile("TD\"c", "TD\"c");
      assertTrue(file0.isAbsolute());
      assertEquals("/tmp/TD\"c0TD\"c", file0.toString());
      assertEquals("/tmp", file0.getParent());
      assertTrue(file0.canExecute());
      assertTrue(file0.exists());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(1392409281320L, file0.lastModified());
      assertTrue(file0.canRead());
      assertTrue(file0.isFile());
      assertEquals("TD\"c0TD\"c", file0.getName());
      assertEquals(0L, file0.getFreeSpace());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals(0L, file0.length());
      assertFalse(file0.isDirectory());
      assertTrue(file0.canWrite());
      assertNotNull(file0);
      
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(file0);
      assertTrue(file0.isAbsolute());
      assertEquals("/tmp/TD\"c0TD\"c", file0.toString());
      assertEquals("/tmp", file0.getParent());
      assertTrue(file0.canExecute());
      assertTrue(file0.exists());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(1392409281320L, file0.lastModified());
      assertTrue(file0.canRead());
      assertTrue(file0.isFile());
      assertEquals("TD\"c0TD\"c", file0.getName());
      assertEquals(0L, file0.getFreeSpace());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals(0L, file0.length());
      assertFalse(file0.isDirectory());
      assertTrue(file0.canWrite());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertTrue(zipArchiveOutputStream0.isSeekable());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertNotNull(zipArchiveOutputStream0);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      
      ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
      assertEquals(0, zipArchiveEntry0.getInternalAttributes());
      assertEquals(0, zipArchiveEntry0.getPlatform());
      assertEquals("", zipArchiveEntry0.getName());
      assertFalse(zipArchiveEntry0.isUnixSymlink());
      assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
      assertEquals((-1), zipArchiveEntry0.getMethod());
      assertEquals(0, zipArchiveEntry0.getVersionRequired());
      assertEquals(0, zipArchiveEntry0.getRawFlag());
      assertEquals((-1L), zipArchiveEntry0.getCrc());
      assertEquals(0, zipArchiveEntry0.getUnixMode());
      assertEquals(0, zipArchiveEntry0.getVersionMadeBy());
      assertEquals((-1L), zipArchiveEntry0.getCompressedSize());
      assertEquals("", zipArchiveEntry0.toString());
      assertFalse(zipArchiveEntry0.isDirectory());
      assertEquals((-1L), zipArchiveEntry0.getDataOffset());
      assertEquals((-1L), zipArchiveEntry0.getSize());
      assertNull(zipArchiveEntry0.getComment());
      assertFalse(zipArchiveEntry0.isStreamContiguous());
      assertNotNull(zipArchiveEntry0);
      assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      
      zipArchiveEntry0.setCrc(0);
      assertEquals(0, zipArchiveEntry0.getInternalAttributes());
      assertEquals(0, zipArchiveEntry0.getPlatform());
      assertEquals("", zipArchiveEntry0.getName());
      assertFalse(zipArchiveEntry0.isUnixSymlink());
      assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
      assertEquals((-1), zipArchiveEntry0.getMethod());
      assertEquals(0, zipArchiveEntry0.getVersionRequired());
      assertEquals(0, zipArchiveEntry0.getRawFlag());
      assertEquals(0L, zipArchiveEntry0.getCrc());
      assertEquals(0, zipArchiveEntry0.getUnixMode());
      assertEquals(0, zipArchiveEntry0.getVersionMadeBy());
      assertEquals((-1L), zipArchiveEntry0.getCompressedSize());
      assertEquals("", zipArchiveEntry0.toString());
      assertFalse(zipArchiveEntry0.isDirectory());
      assertEquals((-1L), zipArchiveEntry0.getDataOffset());
      assertEquals((-1L), zipArchiveEntry0.getSize());
      assertNull(zipArchiveEntry0.getComment());
      assertFalse(zipArchiveEntry0.isStreamContiguous());
      assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      
      zipArchiveOutputStream0.putArchiveEntry(zipArchiveEntry0);
      assertTrue(file0.isAbsolute());
      assertEquals("/tmp/TD\"c0TD\"c", file0.toString());
      assertEquals("/tmp", file0.getParent());
      assertTrue(file0.canExecute());
      assertTrue(file0.exists());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(1392409281320L, file0.lastModified());
      assertTrue(file0.canRead());
      assertTrue(file0.isFile());
      assertEquals("TD\"c0TD\"c", file0.getName());
      assertEquals(0L, file0.getFreeSpace());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals(0L, file0.length());
      assertFalse(file0.isDirectory());
      assertTrue(file0.canWrite());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertTrue(zipArchiveOutputStream0.isSeekable());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertEquals(0, zipArchiveEntry0.getInternalAttributes());
      assertEquals(0, zipArchiveEntry0.getPlatform());
      assertEquals("", zipArchiveEntry0.getName());
      assertFalse(zipArchiveEntry0.isUnixSymlink());
      assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
      assertEquals(0, zipArchiveEntry0.getVersionRequired());
      assertEquals(0, zipArchiveEntry0.getRawFlag());
      assertEquals(0L, zipArchiveEntry0.getCrc());
      assertEquals(0, zipArchiveEntry0.getUnixMode());
      assertEquals(0, zipArchiveEntry0.getVersionMadeBy());
      assertEquals((-1L), zipArchiveEntry0.getCompressedSize());
      assertEquals("", zipArchiveEntry0.toString());
      assertFalse(zipArchiveEntry0.isDirectory());
      assertEquals((-1L), zipArchiveEntry0.getDataOffset());
      assertEquals(8, zipArchiveEntry0.getMethod());
      assertEquals((-1L), zipArchiveEntry0.getSize());
      assertNull(zipArchiveEntry0.getComment());
      assertFalse(zipArchiveEntry0.isStreamContiguous());
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      
      ResourceAlignmentExtraField resourceAlignmentExtraField0 = new ResourceAlignmentExtraField();
      assertEquals((short)0, resourceAlignmentExtraField0.getAlignment());
      assertFalse(resourceAlignmentExtraField0.allowMethodChange());
      assertNotNull(resourceAlignmentExtraField0);
      assertEquals(2, ResourceAlignmentExtraField.BASE_SIZE);
      
      zipArchiveEntry0.addExtraField(resourceAlignmentExtraField0);
      assertEquals(0, zipArchiveEntry0.getInternalAttributes());
      assertEquals(0, zipArchiveEntry0.getPlatform());
      assertEquals("", zipArchiveEntry0.getName());
      assertFalse(zipArchiveEntry0.isUnixSymlink());
      assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
      assertEquals(0, zipArchiveEntry0.getVersionRequired());
      assertEquals(0, zipArchiveEntry0.getRawFlag());
      assertEquals(0L, zipArchiveEntry0.getCrc());
      assertEquals(0, zipArchiveEntry0.getUnixMode());
      assertEquals(0, zipArchiveEntry0.getVersionMadeBy());
      assertEquals((-1L), zipArchiveEntry0.getCompressedSize());
      assertEquals("", zipArchiveEntry0.toString());
      assertFalse(zipArchiveEntry0.isDirectory());
      assertEquals((-1L), zipArchiveEntry0.getDataOffset());
      assertEquals(8, zipArchiveEntry0.getMethod());
      assertEquals((-1L), zipArchiveEntry0.getSize());
      assertNull(zipArchiveEntry0.getComment());
      assertFalse(zipArchiveEntry0.isStreamContiguous());
      assertEquals((short)0, resourceAlignmentExtraField0.getAlignment());
      assertFalse(resourceAlignmentExtraField0.allowMethodChange());
      assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      assertEquals(2, ResourceAlignmentExtraField.BASE_SIZE);
      
      zipArchiveOutputStream0.writeCentralDirectoryEnd();
      assertTrue(file0.isAbsolute());
      assertEquals("/tmp/TD\"c0TD\"c", file0.toString());
      assertEquals("/tmp", file0.getParent());
      assertTrue(file0.canExecute());
      assertTrue(file0.exists());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(1392409281320L, file0.lastModified());
      assertTrue(file0.canRead());
      assertTrue(file0.isFile());
      assertEquals("TD\"c0TD\"c", file0.getName());
      assertEquals(0L, file0.getFreeSpace());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals(0L, file0.length());
      assertFalse(file0.isDirectory());
      assertTrue(file0.canWrite());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertTrue(zipArchiveOutputStream0.isSeekable());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      
      PipedInputStream pipedInputStream0 = new PipedInputStream(8);
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedInputStream0);
      
      // Undeclared exception!
//      try { 
        zipArchiveOutputStream0.addRawArchiveEntry(zipArchiveEntry0, pipedInputStream0);
//        fail("Expecting exception: NegativeArraySizeException");
      
//      } catch(NegativeArraySizeException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.compress.archivers.zip.ExtraFieldUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      JarArchiveEntry jarArchiveEntry0 = new JarArchiveEntry("N9\"&MHO`+{y6Q\"HV2+");
      assertFalse(jarArchiveEntry0.isDirectory());
      assertFalse(jarArchiveEntry0.isUnixSymlink());
      assertEquals((-1L), jarArchiveEntry0.getCompressedSize());
      assertEquals(0, jarArchiveEntry0.getVersionRequired());
      assertEquals((-1L), jarArchiveEntry0.getCrc());
      assertNull(jarArchiveEntry0.getComment());
      assertFalse(jarArchiveEntry0.isStreamContiguous());
      assertEquals((-1L), jarArchiveEntry0.getSize());
      assertEquals("N9\"&MHO`+{y6Q\"HV2+", jarArchiveEntry0.getName());
      assertEquals((-1), jarArchiveEntry0.getMethod());
      assertEquals(0L, jarArchiveEntry0.getExternalAttributes());
      assertEquals((-1L), jarArchiveEntry0.getDataOffset());
      assertEquals(0, jarArchiveEntry0.getRawFlag());
      assertEquals(0, jarArchiveEntry0.getInternalAttributes());
      assertEquals("N9\"&MHO`+{y6Q\"HV2+", jarArchiveEntry0.toString());
      assertEquals(0, jarArchiveEntry0.getUnixMode());
      assertEquals(0, jarArchiveEntry0.getVersionMadeBy());
      assertEquals(0, jarArchiveEntry0.getPlatform());
      assertNotNull(jarArchiveEntry0);
      assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      
      jarArchiveEntry0.setComment("N9\"&MHO`+{y6Q\"HV2+");
      assertFalse(jarArchiveEntry0.isDirectory());
      assertFalse(jarArchiveEntry0.isUnixSymlink());
      assertEquals((-1L), jarArchiveEntry0.getCompressedSize());
      assertEquals(0, jarArchiveEntry0.getVersionRequired());
      assertEquals((-1L), jarArchiveEntry0.getCrc());
      assertFalse(jarArchiveEntry0.isStreamContiguous());
      assertEquals((-1L), jarArchiveEntry0.getSize());
      assertEquals("N9\"&MHO`+{y6Q\"HV2+", jarArchiveEntry0.getName());
      assertEquals((-1), jarArchiveEntry0.getMethod());
      assertEquals(0L, jarArchiveEntry0.getExternalAttributes());
      assertEquals((-1L), jarArchiveEntry0.getDataOffset());
      assertEquals(0, jarArchiveEntry0.getRawFlag());
      assertEquals(0, jarArchiveEntry0.getInternalAttributes());
      assertEquals("N9\"&MHO`+{y6Q\"HV2+", jarArchiveEntry0.toString());
      assertEquals(0, jarArchiveEntry0.getUnixMode());
      assertEquals("N9\"&MHO`+{y6Q\"HV2+", jarArchiveEntry0.getComment());
      assertEquals(0, jarArchiveEntry0.getVersionMadeBy());
      assertEquals(0, jarArchiveEntry0.getPlatform());
      assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      
      MockFile mockFile0 = new MockFile("N9\"&MHO`+{y6Q\"HV2+", "N9\"&MHO`+{y6Q\"HV2+");
      assertNotNull(mockFile0);
      
      ZipArchiveOutputStream.UnicodeExtraFieldPolicy zipArchiveOutputStream_UnicodeExtraFieldPolicy0 = ZipArchiveOutputStream.UnicodeExtraFieldPolicy.NOT_ENCODEABLE;
      assertEquals("not encodeable", zipArchiveOutputStream_UnicodeExtraFieldPolicy0.toString());
      assertNotNull(zipArchiveOutputStream_UnicodeExtraFieldPolicy0);
      
      MockPrintStream mockPrintStream0 = new MockPrintStream("N9\"&MHO`+{y6Q\"HV2+");
      assertNotNull(mockPrintStream0);
      
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(mockPrintStream0);
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertFalse(zipArchiveOutputStream0.isSeekable());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertNotNull(zipArchiveOutputStream0);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      
      zipArchiveOutputStream0.setCreateUnicodeExtraFields(zipArchiveOutputStream_UnicodeExtraFieldPolicy0);
      assertEquals("not encodeable", zipArchiveOutputStream_UnicodeExtraFieldPolicy0.toString());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertFalse(zipArchiveOutputStream0.isSeekable());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      
      zipArchiveOutputStream0.putArchiveEntry(jarArchiveEntry0);
      assertFalse(jarArchiveEntry0.isDirectory());
      assertFalse(jarArchiveEntry0.isUnixSymlink());
      assertEquals((-1L), jarArchiveEntry0.getCompressedSize());
      assertEquals(0, jarArchiveEntry0.getVersionRequired());
      assertEquals((-1L), jarArchiveEntry0.getCrc());
      assertFalse(jarArchiveEntry0.isStreamContiguous());
      assertEquals((-1L), jarArchiveEntry0.getSize());
      assertEquals(8, jarArchiveEntry0.getMethod());
      assertEquals("N9\"&MHO`+{y6Q\"HV2+", jarArchiveEntry0.getName());
      assertEquals(0L, jarArchiveEntry0.getExternalAttributes());
      assertEquals((-1L), jarArchiveEntry0.getDataOffset());
      assertEquals(0, jarArchiveEntry0.getRawFlag());
      assertEquals(0, jarArchiveEntry0.getInternalAttributes());
      assertEquals("N9\"&MHO`+{y6Q\"HV2+", jarArchiveEntry0.toString());
      assertEquals(0, jarArchiveEntry0.getUnixMode());
      assertEquals("N9\"&MHO`+{y6Q\"HV2+", jarArchiveEntry0.getComment());
      assertEquals(0, jarArchiveEntry0.getVersionMadeBy());
      assertEquals(0, jarArchiveEntry0.getPlatform());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertFalse(zipArchiveOutputStream0.isSeekable());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      
      zipArchiveOutputStream0.writeCentralFileHeader(jarArchiveEntry0);
      assertFalse(jarArchiveEntry0.isDirectory());
      assertFalse(jarArchiveEntry0.isUnixSymlink());
      assertEquals((-1L), jarArchiveEntry0.getCompressedSize());
      assertEquals(0, jarArchiveEntry0.getVersionRequired());
      assertEquals((-1L), jarArchiveEntry0.getCrc());
      assertFalse(jarArchiveEntry0.isStreamContiguous());
      assertEquals((-1L), jarArchiveEntry0.getSize());
      assertEquals(8, jarArchiveEntry0.getMethod());
      assertEquals("N9\"&MHO`+{y6Q\"HV2+", jarArchiveEntry0.getName());
      assertEquals(0L, jarArchiveEntry0.getExternalAttributes());
      assertEquals((-1L), jarArchiveEntry0.getDataOffset());
      assertEquals(0, jarArchiveEntry0.getRawFlag());
      assertEquals(0, jarArchiveEntry0.getInternalAttributes());
      assertEquals("N9\"&MHO`+{y6Q\"HV2+", jarArchiveEntry0.toString());
      assertEquals(0, jarArchiveEntry0.getUnixMode());
      assertEquals("N9\"&MHO`+{y6Q\"HV2+", jarArchiveEntry0.getComment());
      assertEquals(0, jarArchiveEntry0.getVersionMadeBy());
      assertEquals(0, jarArchiveEntry0.getPlatform());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertFalse(zipArchiveOutputStream0.isSeekable());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry("6Lz^|?F0`V%Ir6");
      assertEquals(0, zipArchiveEntry0.getVersionRequired());
      assertEquals((-1L), zipArchiveEntry0.getCompressedSize());
      assertFalse(zipArchiveEntry0.isUnixSymlink());
      assertFalse(zipArchiveEntry0.isStreamContiguous());
      assertEquals((-1L), zipArchiveEntry0.getCrc());
      assertFalse(zipArchiveEntry0.isDirectory());
      assertEquals((-1L), zipArchiveEntry0.getSize());
      assertEquals((-1), zipArchiveEntry0.getMethod());
      assertNull(zipArchiveEntry0.getComment());
      assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
      assertEquals(0, zipArchiveEntry0.getInternalAttributes());
      assertEquals((-1L), zipArchiveEntry0.getDataOffset());
      assertEquals("6Lz^|?F0`V%Ir6", zipArchiveEntry0.getName());
      assertEquals(0, zipArchiveEntry0.getVersionMadeBy());
      assertEquals("6Lz^|?F0`V%Ir6", zipArchiveEntry0.toString());
      assertEquals(0, zipArchiveEntry0.getRawFlag());
      assertEquals(0, zipArchiveEntry0.getUnixMode());
      assertEquals(0, zipArchiveEntry0.getPlatform());
      assertNotNull(zipArchiveEntry0);
      assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      
      MockFile mockFile0 = new MockFile("6Lz^|?F0`V%Ir6");
      assertNotNull(mockFile0);
      
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(mockFile0);
      assertEquals("6Lz^|?F0`V%Ir6", mockFile0.toString());
      assertTrue(mockFile0.isFile());
      assertTrue(mockFile0.exists());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.canExecute());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals("6Lz^|?F0`V%Ir6", mockFile0.getName());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.isAbsolute());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.canWrite());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertFalse(zipArchiveOutputStream0.isSeekable());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertNotNull(zipArchiveOutputStream0);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      
      zipArchiveEntry0.setAlignment(8);
      assertEquals(0, zipArchiveEntry0.getVersionRequired());
      assertEquals((-1L), zipArchiveEntry0.getCompressedSize());
      assertFalse(zipArchiveEntry0.isUnixSymlink());
      assertFalse(zipArchiveEntry0.isStreamContiguous());
      assertEquals((-1L), zipArchiveEntry0.getCrc());
      assertFalse(zipArchiveEntry0.isDirectory());
      assertEquals((-1L), zipArchiveEntry0.getSize());
      assertEquals((-1), zipArchiveEntry0.getMethod());
      assertNull(zipArchiveEntry0.getComment());
      assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
      assertEquals(0, zipArchiveEntry0.getInternalAttributes());
      assertEquals((-1L), zipArchiveEntry0.getDataOffset());
      assertEquals("6Lz^|?F0`V%Ir6", zipArchiveEntry0.getName());
      assertEquals(0, zipArchiveEntry0.getVersionMadeBy());
      assertEquals("6Lz^|?F0`V%Ir6", zipArchiveEntry0.toString());
      assertEquals(0, zipArchiveEntry0.getRawFlag());
      assertEquals(0, zipArchiveEntry0.getUnixMode());
      assertEquals(0, zipArchiveEntry0.getPlatform());
      assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      
      zipArchiveEntry0.setCrc(1781L);
      assertEquals(0, zipArchiveEntry0.getVersionRequired());
      assertEquals((-1L), zipArchiveEntry0.getCompressedSize());
      assertFalse(zipArchiveEntry0.isUnixSymlink());
      assertFalse(zipArchiveEntry0.isStreamContiguous());
      assertFalse(zipArchiveEntry0.isDirectory());
      assertEquals((-1L), zipArchiveEntry0.getSize());
      assertEquals((-1), zipArchiveEntry0.getMethod());
      assertNull(zipArchiveEntry0.getComment());
      assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
      assertEquals(0, zipArchiveEntry0.getInternalAttributes());
      assertEquals((-1L), zipArchiveEntry0.getDataOffset());
      assertEquals("6Lz^|?F0`V%Ir6", zipArchiveEntry0.getName());
      assertEquals(0, zipArchiveEntry0.getVersionMadeBy());
      assertEquals("6Lz^|?F0`V%Ir6", zipArchiveEntry0.toString());
      assertEquals(1781L, zipArchiveEntry0.getCrc());
      assertEquals(0, zipArchiveEntry0.getRawFlag());
      assertEquals(0, zipArchiveEntry0.getUnixMode());
      assertEquals(0, zipArchiveEntry0.getPlatform());
      assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      
      zipArchiveOutputStream0.putArchiveEntry(zipArchiveEntry0);
      assertEquals(0, zipArchiveEntry0.getVersionRequired());
      assertEquals((-1L), zipArchiveEntry0.getCompressedSize());
      assertFalse(zipArchiveEntry0.isUnixSymlink());
      assertFalse(zipArchiveEntry0.isStreamContiguous());
      assertFalse(zipArchiveEntry0.isDirectory());
      assertEquals((-1L), zipArchiveEntry0.getSize());
      assertEquals(8, zipArchiveEntry0.getMethod());
      assertNull(zipArchiveEntry0.getComment());
      assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
      assertEquals(0, zipArchiveEntry0.getInternalAttributes());
      assertEquals((-1L), zipArchiveEntry0.getDataOffset());
      assertEquals("6Lz^|?F0`V%Ir6", zipArchiveEntry0.getName());
      assertEquals(0, zipArchiveEntry0.getVersionMadeBy());
      assertEquals("6Lz^|?F0`V%Ir6", zipArchiveEntry0.toString());
      assertEquals(1781L, zipArchiveEntry0.getCrc());
      assertEquals(0, zipArchiveEntry0.getRawFlag());
      assertEquals(0, zipArchiveEntry0.getUnixMode());
      assertEquals(0, zipArchiveEntry0.getPlatform());
      assertEquals("6Lz^|?F0`V%Ir6", mockFile0.toString());
      assertTrue(mockFile0.isFile());
      assertTrue(mockFile0.exists());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.canExecute());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals("6Lz^|?F0`V%Ir6", mockFile0.getName());
      assertFalse(mockFile0.isAbsolute());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.canWrite());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals(56L, mockFile0.length());
      assertFalse(mockFile0.isHidden());
      assertFalse(zipArchiveOutputStream0.isSeekable());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      
      zipArchiveOutputStream0.putArchiveEntry(zipArchiveEntry0);
      assertEquals(0, zipArchiveEntry0.getVersionRequired());
      assertEquals(2L, zipArchiveEntry0.getCompressedSize());
      assertFalse(zipArchiveEntry0.isUnixSymlink());
      assertFalse(zipArchiveEntry0.isStreamContiguous());
      assertEquals(0L, zipArchiveEntry0.getCrc());
      assertFalse(zipArchiveEntry0.isDirectory());
      assertEquals(0L, zipArchiveEntry0.getSize());
      assertEquals(8, zipArchiveEntry0.getMethod());
      assertNull(zipArchiveEntry0.getComment());
      assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
      assertEquals(0, zipArchiveEntry0.getInternalAttributes());
      assertEquals((-1L), zipArchiveEntry0.getDataOffset());
      assertEquals("6Lz^|?F0`V%Ir6", zipArchiveEntry0.getName());
      assertEquals(0, zipArchiveEntry0.getVersionMadeBy());
      assertEquals("6Lz^|?F0`V%Ir6", zipArchiveEntry0.toString());
      assertEquals(0, zipArchiveEntry0.getRawFlag());
      assertEquals(0, zipArchiveEntry0.getUnixMode());
      assertEquals(0, zipArchiveEntry0.getPlatform());
      assertEquals("6Lz^|?F0`V%Ir6", mockFile0.toString());
      assertTrue(mockFile0.isFile());
      assertTrue(mockFile0.exists());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.canExecute());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals("6Lz^|?F0`V%Ir6", mockFile0.getName());
      assertEquals(128L, mockFile0.length());
      assertFalse(mockFile0.isAbsolute());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.canWrite());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertFalse(zipArchiveOutputStream0.isSeekable());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      
      zipArchiveOutputStream0.writeCentralFileHeader(zipArchiveEntry0);
      assertEquals(0, zipArchiveEntry0.getVersionRequired());
      assertEquals(2L, zipArchiveEntry0.getCompressedSize());
      assertFalse(zipArchiveEntry0.isUnixSymlink());
      assertFalse(zipArchiveEntry0.isStreamContiguous());
      assertEquals(0L, zipArchiveEntry0.getCrc());
      assertFalse(zipArchiveEntry0.isDirectory());
      assertEquals(0L, zipArchiveEntry0.getSize());
      assertEquals(8, zipArchiveEntry0.getMethod());
      assertNull(zipArchiveEntry0.getComment());
      assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
      assertEquals(0, zipArchiveEntry0.getInternalAttributes());
      assertEquals((-1L), zipArchiveEntry0.getDataOffset());
      assertEquals("6Lz^|?F0`V%Ir6", zipArchiveEntry0.getName());
      assertEquals(0, zipArchiveEntry0.getVersionMadeBy());
      assertEquals("6Lz^|?F0`V%Ir6", zipArchiveEntry0.toString());
      assertEquals(0, zipArchiveEntry0.getRawFlag());
      assertEquals(0, zipArchiveEntry0.getUnixMode());
      assertEquals(0, zipArchiveEntry0.getPlatform());
      assertEquals("6Lz^|?F0`V%Ir6", mockFile0.toString());
      assertEquals(194L, mockFile0.length());
      assertTrue(mockFile0.isFile());
      assertTrue(mockFile0.exists());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.canExecute());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals("6Lz^|?F0`V%Ir6", mockFile0.getName());
      assertFalse(mockFile0.isAbsolute());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.canWrite());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertFalse(zipArchiveOutputStream0.isSeekable());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      File file0 = MockFile.createTempFile("9SOzK.T>_.j9(", "9SOzK.T>_.j9(");
      assertTrue(file0.isFile());
      assertTrue(file0.isAbsolute());
      assertEquals("/tmp", file0.getParent());
      assertTrue(file0.canRead());
      assertTrue(file0.canWrite());
      assertTrue(file0.canExecute());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals("9SOzK.T>_.j9(09SOzK.T>_.j9(", file0.getName());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals("/tmp/9SOzK.T>_.j9(09SOzK.T>_.j9(", file0.toString());
      assertFalse(file0.isDirectory());
      assertTrue(file0.exists());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(0L, file0.length());
      assertEquals(0L, file0.getFreeSpace());
      assertNotNull(file0);
      
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(file0);
      assertTrue(file0.isFile());
      assertTrue(file0.isAbsolute());
      assertEquals("/tmp", file0.getParent());
      assertTrue(file0.canRead());
      assertTrue(file0.canWrite());
      assertTrue(file0.canExecute());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals("9SOzK.T>_.j9(09SOzK.T>_.j9(", file0.getName());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals("/tmp/9SOzK.T>_.j9(09SOzK.T>_.j9(", file0.toString());
      assertFalse(file0.isDirectory());
      assertTrue(file0.exists());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(0L, file0.length());
      assertEquals(0L, file0.getFreeSpace());
      assertTrue(zipArchiveOutputStream0.isSeekable());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertNotNull(zipArchiveOutputStream0);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      
      zipArchiveOutputStream0.writeCentralDirectoryEnd();
      assertTrue(file0.isFile());
      assertTrue(file0.isAbsolute());
      assertEquals("/tmp", file0.getParent());
      assertTrue(file0.canRead());
      assertTrue(file0.canWrite());
      assertTrue(file0.canExecute());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals("9SOzK.T>_.j9(09SOzK.T>_.j9(", file0.getName());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals("/tmp/9SOzK.T>_.j9(09SOzK.T>_.j9(", file0.toString());
      assertFalse(file0.isDirectory());
      assertTrue(file0.exists());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(0L, file0.length());
      assertEquals(0L, file0.getFreeSpace());
      assertTrue(zipArchiveOutputStream0.isSeekable());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      
      ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
      assertEquals((-1L), zipArchiveEntry0.getDataOffset());
      assertEquals((-1L), zipArchiveEntry0.getSize());
      assertEquals(0, zipArchiveEntry0.getVersionMadeBy());
      assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
      assertNull(zipArchiveEntry0.getComment());
      assertFalse(zipArchiveEntry0.isStreamContiguous());
      assertEquals((-1L), zipArchiveEntry0.getCrc());
      assertFalse(zipArchiveEntry0.isDirectory());
      assertFalse(zipArchiveEntry0.isUnixSymlink());
      assertEquals("", zipArchiveEntry0.getName());
      assertEquals("", zipArchiveEntry0.toString());
      assertEquals((-1L), zipArchiveEntry0.getCompressedSize());
      assertEquals(0, zipArchiveEntry0.getInternalAttributes());
      assertEquals(0, zipArchiveEntry0.getVersionRequired());
      assertEquals((-1), zipArchiveEntry0.getMethod());
      assertEquals(0, zipArchiveEntry0.getUnixMode());
      assertEquals(0, zipArchiveEntry0.getPlatform());
      assertEquals(0, zipArchiveEntry0.getRawFlag());
      assertNotNull(zipArchiveEntry0);
      assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      
      ZipArchiveOutputStream zipArchiveOutputStream1 = new ZipArchiveOutputStream(file0);
      assertFalse(zipArchiveOutputStream1.equals((Object)zipArchiveOutputStream0));
      assertTrue(file0.isFile());
      assertTrue(file0.isAbsolute());
      assertEquals("/tmp", file0.getParent());
      assertTrue(file0.canRead());
      assertTrue(file0.canWrite());
      assertTrue(file0.canExecute());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals("9SOzK.T>_.j9(09SOzK.T>_.j9(", file0.getName());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals("/tmp/9SOzK.T>_.j9(09SOzK.T>_.j9(", file0.toString());
      assertFalse(file0.isDirectory());
      assertTrue(file0.exists());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(0L, file0.length());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals("UTF8", zipArchiveOutputStream1.getEncoding());
      assertTrue(zipArchiveOutputStream1.isSeekable());
      assertEquals(0, zipArchiveOutputStream1.getCount());
      assertEquals(0L, zipArchiveOutputStream1.getBytesWritten());
      assertNotNull(zipArchiveOutputStream1);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      
      zipArchiveOutputStream0.setMethod(0);
      assertFalse(zipArchiveOutputStream0.equals((Object)zipArchiveOutputStream1));
      assertTrue(file0.isFile());
      assertTrue(file0.isAbsolute());
      assertEquals("/tmp", file0.getParent());
      assertTrue(file0.canRead());
      assertTrue(file0.canWrite());
      assertTrue(file0.canExecute());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals("9SOzK.T>_.j9(09SOzK.T>_.j9(", file0.getName());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals("/tmp/9SOzK.T>_.j9(09SOzK.T>_.j9(", file0.toString());
      assertFalse(file0.isDirectory());
      assertTrue(file0.exists());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(0L, file0.length());
      assertEquals(0L, file0.getFreeSpace());
      assertTrue(zipArchiveOutputStream0.isSeekable());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertNotSame(zipArchiveOutputStream0, zipArchiveOutputStream1);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      
      zipArchiveOutputStream0.putArchiveEntry(zipArchiveEntry0);
      assertFalse(zipArchiveOutputStream0.equals((Object)zipArchiveOutputStream1));
      assertTrue(file0.isFile());
      assertTrue(file0.isAbsolute());
      assertEquals("/tmp", file0.getParent());
      assertTrue(file0.canRead());
      assertTrue(file0.canWrite());
      assertTrue(file0.canExecute());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals("9SOzK.T>_.j9(09SOzK.T>_.j9(", file0.getName());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals("/tmp/9SOzK.T>_.j9(09SOzK.T>_.j9(", file0.toString());
      assertFalse(file0.isDirectory());
      assertTrue(file0.exists());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(0L, file0.length());
      assertEquals(0L, file0.getFreeSpace());
      assertTrue(zipArchiveOutputStream0.isSeekable());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertEquals((-1L), zipArchiveEntry0.getDataOffset());
      assertEquals((-1L), zipArchiveEntry0.getSize());
      assertEquals(0, zipArchiveEntry0.getVersionMadeBy());
      assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
      assertNull(zipArchiveEntry0.getComment());
      assertFalse(zipArchiveEntry0.isStreamContiguous());
      assertEquals((-1L), zipArchiveEntry0.getCrc());
      assertFalse(zipArchiveEntry0.isDirectory());
      assertFalse(zipArchiveEntry0.isUnixSymlink());
      assertEquals("", zipArchiveEntry0.getName());
      assertEquals("", zipArchiveEntry0.toString());
      assertEquals((-1L), zipArchiveEntry0.getCompressedSize());
      assertEquals(0, zipArchiveEntry0.getInternalAttributes());
      assertEquals(0, zipArchiveEntry0.getMethod());
      assertEquals(0, zipArchiveEntry0.getVersionRequired());
      assertEquals(0, zipArchiveEntry0.getUnixMode());
      assertEquals(0, zipArchiveEntry0.getPlatform());
      assertEquals(0, zipArchiveEntry0.getRawFlag());
      assertNotSame(zipArchiveOutputStream0, zipArchiveOutputStream1);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      
      zipArchiveOutputStream0.putArchiveEntry(zipArchiveEntry0);
      assertFalse(zipArchiveOutputStream0.equals((Object)zipArchiveOutputStream1));
      assertTrue(file0.isFile());
      assertTrue(file0.isAbsolute());
      assertEquals("/tmp", file0.getParent());
      assertTrue(file0.canRead());
      assertTrue(file0.canWrite());
      assertTrue(file0.canExecute());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals("9SOzK.T>_.j9(09SOzK.T>_.j9(", file0.getName());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals("/tmp/9SOzK.T>_.j9(09SOzK.T>_.j9(", file0.toString());
      assertFalse(file0.isDirectory());
      assertTrue(file0.exists());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(0L, file0.length());
      assertEquals(0L, file0.getFreeSpace());
      assertTrue(zipArchiveOutputStream0.isSeekable());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertEquals((-1L), zipArchiveEntry0.getDataOffset());
      assertEquals(0L, zipArchiveEntry0.getSize());
      assertEquals(0, zipArchiveEntry0.getVersionMadeBy());
      assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
      assertNull(zipArchiveEntry0.getComment());
      assertFalse(zipArchiveEntry0.isStreamContiguous());
      assertEquals(0L, zipArchiveEntry0.getCrc());
      assertFalse(zipArchiveEntry0.isDirectory());
      assertFalse(zipArchiveEntry0.isUnixSymlink());
      assertEquals("", zipArchiveEntry0.getName());
      assertEquals("", zipArchiveEntry0.toString());
      assertEquals(0L, zipArchiveEntry0.getCompressedSize());
      assertEquals(0, zipArchiveEntry0.getInternalAttributes());
      assertEquals(0, zipArchiveEntry0.getMethod());
      assertEquals(0, zipArchiveEntry0.getVersionRequired());
      assertEquals(0, zipArchiveEntry0.getUnixMode());
      assertEquals(0, zipArchiveEntry0.getPlatform());
      assertEquals(0, zipArchiveEntry0.getRawFlag());
      assertNotSame(zipArchiveOutputStream0, zipArchiveOutputStream1);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      MockFile mockFile0 = new MockFile("No current entry");
      assertNotNull(mockFile0);
      
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(mockFile0);
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.isAbsolute());
      assertTrue(mockFile0.isFile());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.exists());
      assertTrue(mockFile0.canExecute());
      assertEquals("No current entry", mockFile0.getName());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertFalse(mockFile0.isDirectory());
      assertTrue(mockFile0.canWrite());
      assertEquals("No current entry", mockFile0.toString());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertNull(mockFile0.getParent());
      assertFalse(mockFile0.isHidden());
      assertFalse(zipArchiveOutputStream0.isSeekable());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertNotNull(zipArchiveOutputStream0);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      
      ZipArchiveEntry zipArchiveEntry0 = null;
      zipArchiveOutputStream0.setComment("");
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.isAbsolute());
      assertTrue(mockFile0.isFile());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.exists());
      assertTrue(mockFile0.canExecute());
      assertEquals("No current entry", mockFile0.getName());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertFalse(mockFile0.isDirectory());
      assertTrue(mockFile0.canWrite());
      assertEquals("No current entry", mockFile0.toString());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertNull(mockFile0.getParent());
      assertFalse(mockFile0.isHidden());
      assertFalse(zipArchiveOutputStream0.isSeekable());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      
      // Undeclared exception!
//      try { 
        zipArchiveOutputStream0.writeDataDescriptor((ZipArchiveEntry) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream", e);
//      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      File file0 = MockFile.createTempFile("TD\"c", "TD\"c");
      assertEquals("/tmp/TD\"c0TD\"c", file0.toString());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(0L, file0.length());
      assertTrue(file0.canExecute());
      assertTrue(file0.isFile());
      assertTrue(file0.canRead());
      assertTrue(file0.exists());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals("TD\"c0TD\"c", file0.getName());
      assertFalse(file0.isHidden());
      assertEquals("/tmp", file0.getParent());
      assertFalse(file0.isDirectory());
      assertTrue(file0.canWrite());
      assertEquals(0L, file0.getFreeSpace());
      assertTrue(file0.isAbsolute());
      assertNotNull(file0);
      
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(file0);
      assertEquals("/tmp/TD\"c0TD\"c", file0.toString());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(0L, file0.length());
      assertTrue(file0.canExecute());
      assertTrue(file0.isFile());
      assertTrue(file0.canRead());
      assertTrue(file0.exists());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals("TD\"c0TD\"c", file0.getName());
      assertFalse(file0.isHidden());
      assertEquals("/tmp", file0.getParent());
      assertFalse(file0.isDirectory());
      assertTrue(file0.canWrite());
      assertEquals(0L, file0.getFreeSpace());
      assertTrue(file0.isAbsolute());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertTrue(zipArchiveOutputStream0.isSeekable());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertNotNull(zipArchiveOutputStream0);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      assertEquals(0, byteArrayOutputStream0.size());
      assertEquals("", byteArrayOutputStream0.toString());
      assertNotNull(byteArrayOutputStream0);
      
      ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
      assertEquals(0, zipArchiveEntry0.getVersionRequired());
      assertEquals((-1L), zipArchiveEntry0.getCompressedSize());
      assertEquals("", zipArchiveEntry0.toString());
      assertEquals((-1L), zipArchiveEntry0.getSize());
      assertFalse(zipArchiveEntry0.isStreamContiguous());
      assertEquals("", zipArchiveEntry0.getName());
      assertEquals((-1L), zipArchiveEntry0.getCrc());
      assertFalse(zipArchiveEntry0.isDirectory());
      assertEquals((-1), zipArchiveEntry0.getMethod());
      assertNull(zipArchiveEntry0.getComment());
      assertEquals(0, zipArchiveEntry0.getInternalAttributes());
      assertEquals((-1L), zipArchiveEntry0.getDataOffset());
      assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
      assertEquals(0, zipArchiveEntry0.getVersionMadeBy());
      assertFalse(zipArchiveEntry0.isUnixSymlink());
      assertEquals(0, zipArchiveEntry0.getRawFlag());
      assertEquals(0, zipArchiveEntry0.getPlatform());
      assertEquals(0, zipArchiveEntry0.getUnixMode());
      assertNotNull(zipArchiveEntry0);
      assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      
      zipArchiveEntry0.setAlignment(2048);
      assertEquals(0, zipArchiveEntry0.getVersionRequired());
      assertEquals((-1L), zipArchiveEntry0.getCompressedSize());
      assertEquals("", zipArchiveEntry0.toString());
      assertEquals((-1L), zipArchiveEntry0.getSize());
      assertFalse(zipArchiveEntry0.isStreamContiguous());
      assertEquals("", zipArchiveEntry0.getName());
      assertEquals((-1L), zipArchiveEntry0.getCrc());
      assertFalse(zipArchiveEntry0.isDirectory());
      assertEquals((-1), zipArchiveEntry0.getMethod());
      assertNull(zipArchiveEntry0.getComment());
      assertEquals(0, zipArchiveEntry0.getInternalAttributes());
      assertEquals((-1L), zipArchiveEntry0.getDataOffset());
      assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
      assertEquals(0, zipArchiveEntry0.getVersionMadeBy());
      assertFalse(zipArchiveEntry0.isUnixSymlink());
      assertEquals(0, zipArchiveEntry0.getRawFlag());
      assertEquals(0, zipArchiveEntry0.getPlatform());
      assertEquals(0, zipArchiveEntry0.getUnixMode());
      assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      
      zipArchiveEntry0.setCrc(0);
      assertEquals(0, zipArchiveEntry0.getVersionRequired());
      assertEquals((-1L), zipArchiveEntry0.getCompressedSize());
      assertEquals("", zipArchiveEntry0.toString());
      assertEquals((-1L), zipArchiveEntry0.getSize());
      assertFalse(zipArchiveEntry0.isStreamContiguous());
      assertEquals("", zipArchiveEntry0.getName());
      assertEquals(0L, zipArchiveEntry0.getCrc());
      assertFalse(zipArchiveEntry0.isDirectory());
      assertEquals((-1), zipArchiveEntry0.getMethod());
      assertNull(zipArchiveEntry0.getComment());
      assertEquals(0, zipArchiveEntry0.getInternalAttributes());
      assertEquals((-1L), zipArchiveEntry0.getDataOffset());
      assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
      assertEquals(0, zipArchiveEntry0.getVersionMadeBy());
      assertFalse(zipArchiveEntry0.isUnixSymlink());
      assertEquals(0, zipArchiveEntry0.getRawFlag());
      assertEquals(0, zipArchiveEntry0.getPlatform());
      assertEquals(0, zipArchiveEntry0.getUnixMode());
      assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      
      zipArchiveOutputStream0.putArchiveEntry(zipArchiveEntry0);
      assertEquals("/tmp/TD\"c0TD\"c", file0.toString());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(0L, file0.length());
      assertTrue(file0.canExecute());
      assertTrue(file0.isFile());
      assertTrue(file0.canRead());
      assertTrue(file0.exists());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals("TD\"c0TD\"c", file0.getName());
      assertFalse(file0.isHidden());
      assertEquals("/tmp", file0.getParent());
      assertFalse(file0.isDirectory());
      assertTrue(file0.canWrite());
      assertEquals(0L, file0.getFreeSpace());
      assertTrue(file0.isAbsolute());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertTrue(zipArchiveOutputStream0.isSeekable());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertEquals(0, zipArchiveEntry0.getVersionRequired());
      assertEquals((-1L), zipArchiveEntry0.getCompressedSize());
      assertEquals("", zipArchiveEntry0.toString());
      assertEquals((-1L), zipArchiveEntry0.getSize());
      assertFalse(zipArchiveEntry0.isStreamContiguous());
      assertEquals("", zipArchiveEntry0.getName());
      assertEquals(0L, zipArchiveEntry0.getCrc());
      assertFalse(zipArchiveEntry0.isDirectory());
      assertEquals(8, zipArchiveEntry0.getMethod());
      assertNull(zipArchiveEntry0.getComment());
      assertEquals(0, zipArchiveEntry0.getInternalAttributes());
      assertEquals((-1L), zipArchiveEntry0.getDataOffset());
      assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
      assertEquals(0, zipArchiveEntry0.getVersionMadeBy());
      assertFalse(zipArchiveEntry0.isUnixSymlink());
      assertEquals(0, zipArchiveEntry0.getRawFlag());
      assertEquals(0, zipArchiveEntry0.getPlatform());
      assertEquals(0, zipArchiveEntry0.getUnixMode());
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      
      zipArchiveOutputStream0.writeCentralDirectoryEnd();
      assertEquals("/tmp/TD\"c0TD\"c", file0.toString());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(0L, file0.length());
      assertTrue(file0.canExecute());
      assertTrue(file0.isFile());
      assertTrue(file0.canRead());
      assertTrue(file0.exists());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals("TD\"c0TD\"c", file0.getName());
      assertFalse(file0.isHidden());
      assertEquals("/tmp", file0.getParent());
      assertFalse(file0.isDirectory());
      assertTrue(file0.canWrite());
      assertEquals(0L, file0.getFreeSpace());
      assertTrue(file0.isAbsolute());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertTrue(zipArchiveOutputStream0.isSeekable());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      
      PipedInputStream pipedInputStream0 = new PipedInputStream(8);
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedInputStream0);
      
      zipArchiveOutputStream0.putArchiveEntry(zipArchiveEntry0);
      assertEquals("/tmp/TD\"c0TD\"c", file0.toString());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(0L, file0.length());
      assertTrue(file0.canExecute());
      assertTrue(file0.isFile());
      assertTrue(file0.canRead());
      assertTrue(file0.exists());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals("TD\"c0TD\"c", file0.getName());
      assertFalse(file0.isHidden());
      assertEquals("/tmp", file0.getParent());
      assertFalse(file0.isDirectory());
      assertTrue(file0.canWrite());
      assertEquals(0L, file0.getFreeSpace());
      assertTrue(file0.isAbsolute());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertTrue(zipArchiveOutputStream0.isSeekable());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertEquals(0, zipArchiveEntry0.getVersionRequired());
      assertEquals("", zipArchiveEntry0.toString());
      assertEquals(0L, zipArchiveEntry0.getSize());
      assertFalse(zipArchiveEntry0.isStreamContiguous());
      assertEquals("", zipArchiveEntry0.getName());
      assertEquals(0L, zipArchiveEntry0.getCrc());
      assertFalse(zipArchiveEntry0.isDirectory());
      assertEquals(8, zipArchiveEntry0.getMethod());
      assertNull(zipArchiveEntry0.getComment());
      assertEquals(0, zipArchiveEntry0.getInternalAttributes());
      assertEquals((-1L), zipArchiveEntry0.getDataOffset());
      assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
      assertEquals(0, zipArchiveEntry0.getVersionMadeBy());
      assertFalse(zipArchiveEntry0.isUnixSymlink());
      assertEquals(24L, zipArchiveEntry0.getCompressedSize());
      assertEquals(0, zipArchiveEntry0.getRawFlag());
      assertEquals(0, zipArchiveEntry0.getPlatform());
      assertEquals(0, zipArchiveEntry0.getUnixMode());
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      
      zipArchiveOutputStream0.writeCentralFileHeader(zipArchiveEntry0);
      assertEquals("/tmp/TD\"c0TD\"c", file0.toString());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(0L, file0.length());
      assertTrue(file0.canExecute());
      assertTrue(file0.isFile());
      assertTrue(file0.canRead());
      assertTrue(file0.exists());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals("TD\"c0TD\"c", file0.getName());
      assertFalse(file0.isHidden());
      assertEquals("/tmp", file0.getParent());
      assertFalse(file0.isDirectory());
      assertTrue(file0.canWrite());
      assertEquals(0L, file0.getFreeSpace());
      assertTrue(file0.isAbsolute());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertTrue(zipArchiveOutputStream0.isSeekable());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertEquals(0, zipArchiveEntry0.getVersionRequired());
      assertEquals("", zipArchiveEntry0.toString());
      assertEquals(0L, zipArchiveEntry0.getSize());
      assertFalse(zipArchiveEntry0.isStreamContiguous());
      assertEquals("", zipArchiveEntry0.getName());
      assertEquals(0L, zipArchiveEntry0.getCrc());
      assertFalse(zipArchiveEntry0.isDirectory());
      assertEquals(8, zipArchiveEntry0.getMethod());
      assertNull(zipArchiveEntry0.getComment());
      assertEquals(0, zipArchiveEntry0.getInternalAttributes());
      assertEquals((-1L), zipArchiveEntry0.getDataOffset());
      assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
      assertEquals(0, zipArchiveEntry0.getVersionMadeBy());
      assertFalse(zipArchiveEntry0.isUnixSymlink());
      assertEquals(24L, zipArchiveEntry0.getCompressedSize());
      assertEquals(0, zipArchiveEntry0.getRawFlag());
      assertEquals(0, zipArchiveEntry0.getPlatform());
      assertEquals(0, zipArchiveEntry0.getUnixMode());
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)124;
      byteArray0[1] = (byte) (-2);
      byteArray0[2] = (byte) (-39);
      byteArray0[3] = (byte) (-33);
      boolean boolean0 = file0.setReadable(true);
      assertEquals("/tmp/TD\"c0TD\"c", file0.toString());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(0L, file0.length());
      assertTrue(file0.canExecute());
      assertTrue(file0.isFile());
      assertTrue(file0.canRead());
      assertTrue(file0.exists());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals("TD\"c0TD\"c", file0.getName());
      assertFalse(file0.isHidden());
      assertEquals("/tmp", file0.getParent());
      assertFalse(file0.isDirectory());
      assertTrue(file0.canWrite());
      assertEquals(0L, file0.getFreeSpace());
      assertTrue(file0.isAbsolute());
      assertTrue(boolean0);
      
      byteArray0[4] = (byte) (-57);
      byteArray0[5] = (byte)25;
      byteArray0[6] = (byte) (-60);
      // Undeclared exception!
//      try { 
        zipArchiveOutputStream0.write(byteArray0, (int) (byte)124, 20);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.util.zip.CRC32", e);
//      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      File file0 = MockFile.createTempFile("TD\"c", "TD\"c");
      assertEquals("TD\"c0TD\"c", file0.getName());
      assertEquals(0L, file0.getUsableSpace());
      assertTrue(file0.exists());
      assertEquals("/tmp", file0.getParent());
      assertEquals(1392409281320L, file0.lastModified());
      assertTrue(file0.canRead());
      assertTrue(file0.isFile());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals("/tmp/TD\"c0TD\"c", file0.toString());
      assertTrue(file0.canExecute());
      assertTrue(file0.canWrite());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.length());
      assertTrue(file0.isAbsolute());
      assertFalse(file0.isDirectory());
      assertEquals(0L, file0.getFreeSpace());
      assertNotNull(file0);
      
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(file0);
      assertEquals("TD\"c0TD\"c", file0.getName());
      assertEquals(0L, file0.getUsableSpace());
      assertTrue(file0.exists());
      assertEquals("/tmp", file0.getParent());
      assertEquals(1392409281320L, file0.lastModified());
      assertTrue(file0.canRead());
      assertTrue(file0.isFile());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals("/tmp/TD\"c0TD\"c", file0.toString());
      assertTrue(file0.canExecute());
      assertTrue(file0.canWrite());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.length());
      assertTrue(file0.isAbsolute());
      assertFalse(file0.isDirectory());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertTrue(zipArchiveOutputStream0.isSeekable());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertNotNull(zipArchiveOutputStream0);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      assertEquals(0, byteArrayOutputStream0.size());
      assertEquals("", byteArrayOutputStream0.toString());
      assertNotNull(byteArrayOutputStream0);
      
      ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
      assertEquals("", zipArchiveEntry0.getName());
      assertFalse(zipArchiveEntry0.isUnixSymlink());
      assertFalse(zipArchiveEntry0.isStreamContiguous());
      assertEquals(0, zipArchiveEntry0.getInternalAttributes());
      assertEquals("", zipArchiveEntry0.toString());
      assertNull(zipArchiveEntry0.getComment());
      assertEquals((-1), zipArchiveEntry0.getMethod());
      assertEquals((-1L), zipArchiveEntry0.getCompressedSize());
      assertEquals((-1L), zipArchiveEntry0.getCrc());
      assertFalse(zipArchiveEntry0.isDirectory());
      assertEquals((-1L), zipArchiveEntry0.getSize());
      assertEquals(0, zipArchiveEntry0.getRawFlag());
      assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
      assertEquals((-1L), zipArchiveEntry0.getDataOffset());
      assertEquals(0, zipArchiveEntry0.getVersionRequired());
      assertEquals(0, zipArchiveEntry0.getPlatform());
      assertEquals(0, zipArchiveEntry0.getUnixMode());
      assertEquals(0, zipArchiveEntry0.getVersionMadeBy());
      assertNotNull(zipArchiveEntry0);
      assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      
      zipArchiveEntry0.setAlignment(2048);
      assertEquals("", zipArchiveEntry0.getName());
      assertFalse(zipArchiveEntry0.isUnixSymlink());
      assertFalse(zipArchiveEntry0.isStreamContiguous());
      assertEquals(0, zipArchiveEntry0.getInternalAttributes());
      assertEquals("", zipArchiveEntry0.toString());
      assertNull(zipArchiveEntry0.getComment());
      assertEquals((-1), zipArchiveEntry0.getMethod());
      assertEquals((-1L), zipArchiveEntry0.getCompressedSize());
      assertEquals((-1L), zipArchiveEntry0.getCrc());
      assertFalse(zipArchiveEntry0.isDirectory());
      assertEquals((-1L), zipArchiveEntry0.getSize());
      assertEquals(0, zipArchiveEntry0.getRawFlag());
      assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
      assertEquals((-1L), zipArchiveEntry0.getDataOffset());
      assertEquals(0, zipArchiveEntry0.getVersionRequired());
      assertEquals(0, zipArchiveEntry0.getPlatform());
      assertEquals(0, zipArchiveEntry0.getUnixMode());
      assertEquals(0, zipArchiveEntry0.getVersionMadeBy());
      assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      
      zipArchiveEntry0.setCrc(0);
      assertEquals("", zipArchiveEntry0.getName());
      assertFalse(zipArchiveEntry0.isUnixSymlink());
      assertFalse(zipArchiveEntry0.isStreamContiguous());
      assertEquals(0, zipArchiveEntry0.getInternalAttributes());
      assertEquals("", zipArchiveEntry0.toString());
      assertNull(zipArchiveEntry0.getComment());
      assertEquals((-1), zipArchiveEntry0.getMethod());
      assertEquals((-1L), zipArchiveEntry0.getCompressedSize());
      assertEquals(0L, zipArchiveEntry0.getCrc());
      assertFalse(zipArchiveEntry0.isDirectory());
      assertEquals((-1L), zipArchiveEntry0.getSize());
      assertEquals(0, zipArchiveEntry0.getRawFlag());
      assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
      assertEquals((-1L), zipArchiveEntry0.getDataOffset());
      assertEquals(0, zipArchiveEntry0.getVersionRequired());
      assertEquals(0, zipArchiveEntry0.getPlatform());
      assertEquals(0, zipArchiveEntry0.getUnixMode());
      assertEquals(0, zipArchiveEntry0.getVersionMadeBy());
      assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      
      zipArchiveOutputStream0.putArchiveEntry(zipArchiveEntry0);
      assertEquals("TD\"c0TD\"c", file0.getName());
      assertEquals(0L, file0.getUsableSpace());
      assertTrue(file0.exists());
      assertEquals("/tmp", file0.getParent());
      assertEquals(1392409281320L, file0.lastModified());
      assertTrue(file0.canRead());
      assertTrue(file0.isFile());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals("/tmp/TD\"c0TD\"c", file0.toString());
      assertTrue(file0.canExecute());
      assertTrue(file0.canWrite());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.length());
      assertTrue(file0.isAbsolute());
      assertFalse(file0.isDirectory());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertTrue(zipArchiveOutputStream0.isSeekable());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals("", zipArchiveEntry0.getName());
      assertFalse(zipArchiveEntry0.isUnixSymlink());
      assertFalse(zipArchiveEntry0.isStreamContiguous());
      assertEquals(0, zipArchiveEntry0.getInternalAttributes());
      assertEquals("", zipArchiveEntry0.toString());
      assertNull(zipArchiveEntry0.getComment());
      assertEquals((-1L), zipArchiveEntry0.getCompressedSize());
      assertEquals(0L, zipArchiveEntry0.getCrc());
      assertFalse(zipArchiveEntry0.isDirectory());
      assertEquals(8, zipArchiveEntry0.getMethod());
      assertEquals((-1L), zipArchiveEntry0.getSize());
      assertEquals(0, zipArchiveEntry0.getRawFlag());
      assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
      assertEquals((-1L), zipArchiveEntry0.getDataOffset());
      assertEquals(0, zipArchiveEntry0.getVersionRequired());
      assertEquals(0, zipArchiveEntry0.getPlatform());
      assertEquals(0, zipArchiveEntry0.getUnixMode());
      assertEquals(0, zipArchiveEntry0.getVersionMadeBy());
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      
      zipArchiveOutputStream0.writeCentralDirectoryEnd();
      assertEquals("TD\"c0TD\"c", file0.getName());
      assertEquals(0L, file0.getUsableSpace());
      assertTrue(file0.exists());
      assertEquals("/tmp", file0.getParent());
      assertEquals(1392409281320L, file0.lastModified());
      assertTrue(file0.canRead());
      assertTrue(file0.isFile());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals("/tmp/TD\"c0TD\"c", file0.toString());
      assertTrue(file0.canExecute());
      assertTrue(file0.canWrite());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.length());
      assertTrue(file0.isAbsolute());
      assertFalse(file0.isDirectory());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertTrue(zipArchiveOutputStream0.isSeekable());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      
      PipedInputStream pipedInputStream0 = new PipedInputStream(8);
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedInputStream0);
      
      ZipArchiveEntry zipArchiveEntry1 = (ZipArchiveEntry)zipArchiveOutputStream0.createArchiveEntry(file0, "TD\"c");
      assertFalse(zipArchiveEntry1.equals((Object)zipArchiveEntry0));
      assertEquals("TD\"c0TD\"c", file0.getName());
      assertEquals(0L, file0.getUsableSpace());
      assertTrue(file0.exists());
      assertEquals("/tmp", file0.getParent());
      assertEquals(1392409281320L, file0.lastModified());
      assertTrue(file0.canRead());
      assertTrue(file0.isFile());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals("/tmp/TD\"c0TD\"c", file0.toString());
      assertTrue(file0.canExecute());
      assertTrue(file0.canWrite());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.length());
      assertTrue(file0.isAbsolute());
      assertFalse(file0.isDirectory());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertTrue(zipArchiveOutputStream0.isSeekable());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals(0, zipArchiveEntry1.getInternalAttributes());
      assertFalse(zipArchiveEntry1.isStreamContiguous());
      assertFalse(zipArchiveEntry1.isDirectory());
      assertEquals(0, zipArchiveEntry1.getPlatform());
      assertEquals(0, zipArchiveEntry1.getVersionRequired());
      assertEquals((-1L), zipArchiveEntry1.getCompressedSize());
      assertEquals((-1), zipArchiveEntry1.getMethod());
      assertEquals("TD\"c", zipArchiveEntry1.toString());
      assertEquals(0L, zipArchiveEntry1.getExternalAttributes());
      assertEquals(0, zipArchiveEntry1.getRawFlag());
      assertEquals((-1L), zipArchiveEntry1.getCrc());
      assertEquals("TD\"c", zipArchiveEntry1.getName());
      assertEquals(0L, zipArchiveEntry1.getSize());
      assertEquals(0, zipArchiveEntry1.getUnixMode());
      assertEquals(0, zipArchiveEntry1.getVersionMadeBy());
      assertNull(zipArchiveEntry1.getComment());
      assertFalse(zipArchiveEntry1.isUnixSymlink());
      assertEquals((-1L), zipArchiveEntry1.getDataOffset());
      assertNotNull(zipArchiveEntry1);
      assertNotSame(zipArchiveEntry1, zipArchiveEntry0);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      
      zipArchiveOutputStream0.writeZip64CentralDirectory();
      assertEquals("TD\"c0TD\"c", file0.getName());
      assertEquals(0L, file0.getUsableSpace());
      assertTrue(file0.exists());
      assertEquals("/tmp", file0.getParent());
      assertEquals(1392409281320L, file0.lastModified());
      assertTrue(file0.canRead());
      assertTrue(file0.isFile());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals("/tmp/TD\"c0TD\"c", file0.toString());
      assertTrue(file0.canExecute());
      assertTrue(file0.canWrite());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.length());
      assertTrue(file0.isAbsolute());
      assertFalse(file0.isDirectory());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertTrue(zipArchiveOutputStream0.isSeekable());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      
//      try { 
        zipArchiveOutputStream0.addRawArchiveEntry(zipArchiveEntry0, pipedInputStream0);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Pipe not connected
//         //
//         verifyException("java.io.PipedInputStream", e);
//      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      File file0 = MockFile.createTempFile("9SOzK.T>_.j9(", "9SOzK.T>_.j9(");
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isHidden());
      assertFalse(file0.isDirectory());
      assertEquals(0L, file0.getFreeSpace());
      assertTrue(file0.canWrite());
      assertTrue(file0.canExecute());
      assertEquals(0L, file0.length());
      assertTrue(file0.isAbsolute());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals("9SOzK.T>_.j9(09SOzK.T>_.j9(", file0.getName());
      assertEquals("/tmp/9SOzK.T>_.j9(09SOzK.T>_.j9(", file0.toString());
      assertEquals("/tmp", file0.getParent());
      assertTrue(file0.canRead());
      assertTrue(file0.exists());
      assertTrue(file0.isFile());
      assertNotNull(file0);
      
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(file0);
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isHidden());
      assertFalse(file0.isDirectory());
      assertEquals(0L, file0.getFreeSpace());
      assertTrue(file0.canWrite());
      assertTrue(file0.canExecute());
      assertEquals(0L, file0.length());
      assertTrue(file0.isAbsolute());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals("9SOzK.T>_.j9(09SOzK.T>_.j9(", file0.getName());
      assertEquals("/tmp/9SOzK.T>_.j9(09SOzK.T>_.j9(", file0.toString());
      assertEquals("/tmp", file0.getParent());
      assertTrue(file0.canRead());
      assertTrue(file0.exists());
      assertTrue(file0.isFile());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertTrue(zipArchiveOutputStream0.isSeekable());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertNotNull(zipArchiveOutputStream0);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      
      zipArchiveOutputStream0.writeCentralDirectoryEnd();
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isHidden());
      assertFalse(file0.isDirectory());
      assertEquals(0L, file0.getFreeSpace());
      assertTrue(file0.canWrite());
      assertTrue(file0.canExecute());
      assertEquals(0L, file0.length());
      assertTrue(file0.isAbsolute());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals("9SOzK.T>_.j9(09SOzK.T>_.j9(", file0.getName());
      assertEquals("/tmp/9SOzK.T>_.j9(09SOzK.T>_.j9(", file0.toString());
      assertEquals("/tmp", file0.getParent());
      assertTrue(file0.canRead());
      assertTrue(file0.exists());
      assertTrue(file0.isFile());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertTrue(zipArchiveOutputStream0.isSeekable());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      
      ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
      assertEquals(0, zipArchiveEntry0.getRawFlag());
      assertEquals((-1L), zipArchiveEntry0.getCrc());
      assertEquals(0, zipArchiveEntry0.getVersionRequired());
      assertEquals("", zipArchiveEntry0.toString());
      assertFalse(zipArchiveEntry0.isDirectory());
      assertEquals("", zipArchiveEntry0.getName());
      assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
      assertEquals((-1L), zipArchiveEntry0.getSize());
      assertEquals((-1L), zipArchiveEntry0.getCompressedSize());
      assertEquals(0, zipArchiveEntry0.getInternalAttributes());
      assertEquals(0, zipArchiveEntry0.getPlatform());
      assertFalse(zipArchiveEntry0.isStreamContiguous());
      assertEquals((-1), zipArchiveEntry0.getMethod());
      assertNull(zipArchiveEntry0.getComment());
      assertEquals((-1L), zipArchiveEntry0.getDataOffset());
      assertFalse(zipArchiveEntry0.isUnixSymlink());
      assertEquals(0, zipArchiveEntry0.getUnixMode());
      assertEquals(0, zipArchiveEntry0.getVersionMadeBy());
      assertNotNull(zipArchiveEntry0);
      assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      
      ZipArchiveOutputStream zipArchiveOutputStream1 = new ZipArchiveOutputStream(file0);
      assertFalse(zipArchiveOutputStream1.equals((Object)zipArchiveOutputStream0));
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isHidden());
      assertFalse(file0.isDirectory());
      assertEquals(0L, file0.getFreeSpace());
      assertTrue(file0.canWrite());
      assertTrue(file0.canExecute());
      assertEquals(0L, file0.length());
      assertTrue(file0.isAbsolute());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals("9SOzK.T>_.j9(09SOzK.T>_.j9(", file0.getName());
      assertEquals("/tmp/9SOzK.T>_.j9(09SOzK.T>_.j9(", file0.toString());
      assertEquals("/tmp", file0.getParent());
      assertTrue(file0.canRead());
      assertTrue(file0.exists());
      assertTrue(file0.isFile());
      assertEquals(0, zipArchiveOutputStream1.getCount());
      assertEquals(0L, zipArchiveOutputStream1.getBytesWritten());
      assertTrue(zipArchiveOutputStream1.isSeekable());
      assertEquals("UTF8", zipArchiveOutputStream1.getEncoding());
      assertNotNull(zipArchiveOutputStream1);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      
      zipArchiveOutputStream0.setMethod(0);
      assertFalse(zipArchiveOutputStream0.equals((Object)zipArchiveOutputStream1));
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isHidden());
      assertFalse(file0.isDirectory());
      assertEquals(0L, file0.getFreeSpace());
      assertTrue(file0.canWrite());
      assertTrue(file0.canExecute());
      assertEquals(0L, file0.length());
      assertTrue(file0.isAbsolute());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals("9SOzK.T>_.j9(09SOzK.T>_.j9(", file0.getName());
      assertEquals("/tmp/9SOzK.T>_.j9(09SOzK.T>_.j9(", file0.toString());
      assertEquals("/tmp", file0.getParent());
      assertTrue(file0.canRead());
      assertTrue(file0.exists());
      assertTrue(file0.isFile());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertTrue(zipArchiveOutputStream0.isSeekable());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertNotSame(zipArchiveOutputStream0, zipArchiveOutputStream1);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      
      zipArchiveOutputStream0.putArchiveEntry(zipArchiveEntry0);
      assertFalse(zipArchiveOutputStream0.equals((Object)zipArchiveOutputStream1));
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isHidden());
      assertFalse(file0.isDirectory());
      assertEquals(0L, file0.getFreeSpace());
      assertTrue(file0.canWrite());
      assertTrue(file0.canExecute());
      assertEquals(0L, file0.length());
      assertTrue(file0.isAbsolute());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals("9SOzK.T>_.j9(09SOzK.T>_.j9(", file0.getName());
      assertEquals("/tmp/9SOzK.T>_.j9(09SOzK.T>_.j9(", file0.toString());
      assertEquals("/tmp", file0.getParent());
      assertTrue(file0.canRead());
      assertTrue(file0.exists());
      assertTrue(file0.isFile());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertTrue(zipArchiveOutputStream0.isSeekable());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertEquals(0, zipArchiveEntry0.getRawFlag());
      assertEquals((-1L), zipArchiveEntry0.getCrc());
      assertEquals(0, zipArchiveEntry0.getVersionRequired());
      assertEquals("", zipArchiveEntry0.toString());
      assertFalse(zipArchiveEntry0.isDirectory());
      assertEquals("", zipArchiveEntry0.getName());
      assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
      assertEquals((-1L), zipArchiveEntry0.getSize());
      assertEquals((-1L), zipArchiveEntry0.getCompressedSize());
      assertEquals(0, zipArchiveEntry0.getMethod());
      assertEquals(0, zipArchiveEntry0.getInternalAttributes());
      assertEquals(0, zipArchiveEntry0.getPlatform());
      assertFalse(zipArchiveEntry0.isStreamContiguous());
      assertNull(zipArchiveEntry0.getComment());
      assertEquals((-1L), zipArchiveEntry0.getDataOffset());
      assertFalse(zipArchiveEntry0.isUnixSymlink());
      assertEquals(0, zipArchiveEntry0.getUnixMode());
      assertEquals(0, zipArchiveEntry0.getVersionMadeBy());
      assertNotSame(zipArchiveOutputStream0, zipArchiveOutputStream1);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      
      zipArchiveOutputStream0.writeCentralFileHeader(zipArchiveEntry0);
      assertFalse(zipArchiveOutputStream0.equals((Object)zipArchiveOutputStream1));
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isHidden());
      assertFalse(file0.isDirectory());
      assertEquals(0L, file0.getFreeSpace());
      assertTrue(file0.canWrite());
      assertTrue(file0.canExecute());
      assertEquals(0L, file0.length());
      assertTrue(file0.isAbsolute());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals("9SOzK.T>_.j9(09SOzK.T>_.j9(", file0.getName());
      assertEquals("/tmp/9SOzK.T>_.j9(09SOzK.T>_.j9(", file0.toString());
      assertEquals("/tmp", file0.getParent());
      assertTrue(file0.canRead());
      assertTrue(file0.exists());
      assertTrue(file0.isFile());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertTrue(zipArchiveOutputStream0.isSeekable());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertEquals(0, zipArchiveEntry0.getRawFlag());
      assertEquals((-1L), zipArchiveEntry0.getCrc());
      assertEquals(0, zipArchiveEntry0.getVersionRequired());
      assertEquals("", zipArchiveEntry0.toString());
      assertFalse(zipArchiveEntry0.isDirectory());
      assertEquals("", zipArchiveEntry0.getName());
      assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
      assertEquals((-1L), zipArchiveEntry0.getSize());
      assertEquals((-1L), zipArchiveEntry0.getCompressedSize());
      assertEquals(0, zipArchiveEntry0.getMethod());
      assertEquals(0, zipArchiveEntry0.getInternalAttributes());
      assertEquals(0, zipArchiveEntry0.getPlatform());
      assertFalse(zipArchiveEntry0.isStreamContiguous());
      assertNull(zipArchiveEntry0.getComment());
      assertEquals((-1L), zipArchiveEntry0.getDataOffset());
      assertFalse(zipArchiveEntry0.isUnixSymlink());
      assertEquals(0, zipArchiveEntry0.getUnixMode());
      assertEquals(0, zipArchiveEntry0.getVersionMadeBy());
      assertNotSame(zipArchiveOutputStream0, zipArchiveOutputStream1);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      File file0 = MockFile.createTempFile("9SOzK.T>_.j9(", "9SOzK.T>_.j9(");
      assertEquals("/tmp", file0.getParent());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      assertTrue(file0.canRead());
      assertEquals("/tmp/9SOzK.T>_.j9(09SOzK.T>_.j9(", file0.toString());
      assertTrue(file0.isFile());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(0L, file0.length());
      assertTrue(file0.exists());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals("9SOzK.T>_.j9(09SOzK.T>_.j9(", file0.getName());
      assertTrue(file0.isAbsolute());
      assertTrue(file0.canExecute());
      assertTrue(file0.canWrite());
      assertEquals(0L, file0.getFreeSpace());
      assertFalse(file0.isDirectory());
      assertNotNull(file0);
      
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(file0);
      assertEquals("/tmp", file0.getParent());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      assertTrue(file0.canRead());
      assertEquals("/tmp/9SOzK.T>_.j9(09SOzK.T>_.j9(", file0.toString());
      assertTrue(file0.isFile());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(0L, file0.length());
      assertTrue(file0.exists());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals("9SOzK.T>_.j9(09SOzK.T>_.j9(", file0.getName());
      assertTrue(file0.isAbsolute());
      assertTrue(file0.canExecute());
      assertTrue(file0.canWrite());
      assertEquals(0L, file0.getFreeSpace());
      assertFalse(file0.isDirectory());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertTrue(zipArchiveOutputStream0.isSeekable());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertNotNull(zipArchiveOutputStream0);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      
      zipArchiveOutputStream0.writeCentralDirectoryEnd();
      assertEquals("/tmp", file0.getParent());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      assertTrue(file0.canRead());
      assertEquals("/tmp/9SOzK.T>_.j9(09SOzK.T>_.j9(", file0.toString());
      assertTrue(file0.isFile());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(0L, file0.length());
      assertTrue(file0.exists());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals("9SOzK.T>_.j9(09SOzK.T>_.j9(", file0.getName());
      assertTrue(file0.isAbsolute());
      assertTrue(file0.canExecute());
      assertTrue(file0.canWrite());
      assertEquals(0L, file0.getFreeSpace());
      assertFalse(file0.isDirectory());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertTrue(zipArchiveOutputStream0.isSeekable());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      
      ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
      assertFalse(zipArchiveEntry0.isStreamContiguous());
      assertEquals(0, zipArchiveEntry0.getPlatform());
      assertFalse(zipArchiveEntry0.isDirectory());
      assertEquals("", zipArchiveEntry0.toString());
      assertNull(zipArchiveEntry0.getComment());
      assertEquals((-1L), zipArchiveEntry0.getDataOffset());
      assertFalse(zipArchiveEntry0.isUnixSymlink());
      assertEquals(0, zipArchiveEntry0.getInternalAttributes());
      assertEquals(0, zipArchiveEntry0.getUnixMode());
      assertEquals(0, zipArchiveEntry0.getVersionMadeBy());
      assertEquals((-1L), zipArchiveEntry0.getSize());
      assertEquals((-1L), zipArchiveEntry0.getCrc());
      assertEquals(0, zipArchiveEntry0.getRawFlag());
      assertEquals((-1L), zipArchiveEntry0.getCompressedSize());
      assertEquals(0, zipArchiveEntry0.getVersionRequired());
      assertEquals((-1), zipArchiveEntry0.getMethod());
      assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
      assertEquals("", zipArchiveEntry0.getName());
      assertNotNull(zipArchiveEntry0);
      assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      
      ZipArchiveOutputStream zipArchiveOutputStream1 = new ZipArchiveOutputStream(file0);
      assertFalse(zipArchiveOutputStream1.equals((Object)zipArchiveOutputStream0));
      assertEquals("/tmp", file0.getParent());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      assertTrue(file0.canRead());
      assertEquals("/tmp/9SOzK.T>_.j9(09SOzK.T>_.j9(", file0.toString());
      assertTrue(file0.isFile());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(0L, file0.length());
      assertTrue(file0.exists());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals("9SOzK.T>_.j9(09SOzK.T>_.j9(", file0.getName());
      assertTrue(file0.isAbsolute());
      assertTrue(file0.canExecute());
      assertTrue(file0.canWrite());
      assertEquals(0L, file0.getFreeSpace());
      assertFalse(file0.isDirectory());
      assertEquals(0, zipArchiveOutputStream1.getCount());
      assertEquals("UTF8", zipArchiveOutputStream1.getEncoding());
      assertTrue(zipArchiveOutputStream1.isSeekable());
      assertEquals(0L, zipArchiveOutputStream1.getBytesWritten());
      assertNotNull(zipArchiveOutputStream1);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      
      zipArchiveOutputStream1.setMethod(3);
      assertFalse(zipArchiveOutputStream1.equals((Object)zipArchiveOutputStream0));
      assertEquals("/tmp", file0.getParent());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      assertTrue(file0.canRead());
      assertEquals("/tmp/9SOzK.T>_.j9(09SOzK.T>_.j9(", file0.toString());
      assertTrue(file0.isFile());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(0L, file0.length());
      assertTrue(file0.exists());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals("9SOzK.T>_.j9(09SOzK.T>_.j9(", file0.getName());
      assertTrue(file0.isAbsolute());
      assertTrue(file0.canExecute());
      assertTrue(file0.canWrite());
      assertEquals(0L, file0.getFreeSpace());
      assertFalse(file0.isDirectory());
      assertEquals(0, zipArchiveOutputStream1.getCount());
      assertEquals("UTF8", zipArchiveOutputStream1.getEncoding());
      assertTrue(zipArchiveOutputStream1.isSeekable());
      assertEquals(0L, zipArchiveOutputStream1.getBytesWritten());
      assertNotSame(zipArchiveOutputStream1, zipArchiveOutputStream0);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      
      byte[] byteArray0 = zipArchiveEntry0.getCentralDirectoryExtra();
      assertFalse(zipArchiveEntry0.isStreamContiguous());
      assertEquals(0, zipArchiveEntry0.getPlatform());
      assertFalse(zipArchiveEntry0.isDirectory());
      assertEquals("", zipArchiveEntry0.toString());
      assertNull(zipArchiveEntry0.getComment());
      assertEquals((-1L), zipArchiveEntry0.getDataOffset());
      assertFalse(zipArchiveEntry0.isUnixSymlink());
      assertEquals(0, zipArchiveEntry0.getInternalAttributes());
      assertEquals(0, zipArchiveEntry0.getUnixMode());
      assertEquals(0, zipArchiveEntry0.getVersionMadeBy());
      assertEquals((-1L), zipArchiveEntry0.getSize());
      assertEquals((-1L), zipArchiveEntry0.getCrc());
      assertEquals(0, zipArchiveEntry0.getRawFlag());
      assertEquals((-1L), zipArchiveEntry0.getCompressedSize());
      assertEquals(0, zipArchiveEntry0.getVersionRequired());
      assertEquals((-1), zipArchiveEntry0.getMethod());
      assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
      assertEquals("", zipArchiveEntry0.getName());
      assertNotNull(byteArray0);
      assertEquals(0, byteArray0.length);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      
      zipArchiveOutputStream1.putArchiveEntry(zipArchiveEntry0);
      assertFalse(zipArchiveOutputStream1.equals((Object)zipArchiveOutputStream0));
      assertEquals("/tmp", file0.getParent());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      assertTrue(file0.canRead());
      assertEquals("/tmp/9SOzK.T>_.j9(09SOzK.T>_.j9(", file0.toString());
      assertTrue(file0.isFile());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(0L, file0.length());
      assertTrue(file0.exists());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals("9SOzK.T>_.j9(09SOzK.T>_.j9(", file0.getName());
      assertTrue(file0.isAbsolute());
      assertTrue(file0.canExecute());
      assertTrue(file0.canWrite());
      assertEquals(0L, file0.getFreeSpace());
      assertFalse(file0.isDirectory());
      assertFalse(zipArchiveEntry0.isStreamContiguous());
      assertEquals(0, zipArchiveEntry0.getPlatform());
      assertFalse(zipArchiveEntry0.isDirectory());
      assertEquals("", zipArchiveEntry0.toString());
      assertNull(zipArchiveEntry0.getComment());
      assertEquals((-1L), zipArchiveEntry0.getDataOffset());
      assertFalse(zipArchiveEntry0.isUnixSymlink());
      assertEquals(0, zipArchiveEntry0.getInternalAttributes());
      assertEquals(0, zipArchiveEntry0.getUnixMode());
      assertEquals(0, zipArchiveEntry0.getVersionMadeBy());
      assertEquals((-1L), zipArchiveEntry0.getSize());
      assertEquals((-1L), zipArchiveEntry0.getCrc());
      assertEquals(0, zipArchiveEntry0.getRawFlag());
      assertEquals((-1L), zipArchiveEntry0.getCompressedSize());
      assertEquals(0, zipArchiveEntry0.getVersionRequired());
      assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
      assertEquals("", zipArchiveEntry0.getName());
      assertEquals(3, zipArchiveEntry0.getMethod());
      assertEquals(0, zipArchiveOutputStream1.getCount());
      assertEquals("UTF8", zipArchiveOutputStream1.getEncoding());
      assertTrue(zipArchiveOutputStream1.isSeekable());
      assertEquals(0L, zipArchiveOutputStream1.getBytesWritten());
      assertNotSame(zipArchiveOutputStream1, zipArchiveOutputStream0);
      assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      
      zipArchiveOutputStream1.writeCentralFileHeader(zipArchiveEntry0);
      assertFalse(zipArchiveOutputStream1.equals((Object)zipArchiveOutputStream0));
      assertEquals("/tmp", file0.getParent());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      assertTrue(file0.canRead());
      assertEquals("/tmp/9SOzK.T>_.j9(09SOzK.T>_.j9(", file0.toString());
      assertTrue(file0.isFile());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(0L, file0.length());
      assertTrue(file0.exists());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals("9SOzK.T>_.j9(09SOzK.T>_.j9(", file0.getName());
      assertTrue(file0.isAbsolute());
      assertTrue(file0.canExecute());
      assertTrue(file0.canWrite());
      assertEquals(0L, file0.getFreeSpace());
      assertFalse(file0.isDirectory());
      assertFalse(zipArchiveEntry0.isStreamContiguous());
      assertEquals(0, zipArchiveEntry0.getPlatform());
      assertFalse(zipArchiveEntry0.isDirectory());
      assertEquals("", zipArchiveEntry0.toString());
      assertNull(zipArchiveEntry0.getComment());
      assertEquals((-1L), zipArchiveEntry0.getDataOffset());
      assertFalse(zipArchiveEntry0.isUnixSymlink());
      assertEquals(0, zipArchiveEntry0.getInternalAttributes());
      assertEquals(0, zipArchiveEntry0.getUnixMode());
      assertEquals(0, zipArchiveEntry0.getVersionMadeBy());
      assertEquals((-1L), zipArchiveEntry0.getSize());
      assertEquals((-1L), zipArchiveEntry0.getCrc());
      assertEquals(0, zipArchiveEntry0.getRawFlag());
      assertEquals((-1L), zipArchiveEntry0.getCompressedSize());
      assertEquals(0, zipArchiveEntry0.getVersionRequired());
      assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
      assertEquals("", zipArchiveEntry0.getName());
      assertEquals(3, zipArchiveEntry0.getMethod());
      assertEquals(0, zipArchiveOutputStream1.getCount());
      assertEquals("UTF8", zipArchiveOutputStream1.getEncoding());
      assertTrue(zipArchiveOutputStream1.isSeekable());
      assertEquals(0L, zipArchiveOutputStream1.getBytesWritten());
      assertNotSame(zipArchiveOutputStream1, zipArchiveOutputStream0);
      assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      
//      try { 
        zipArchiveOutputStream1.write(byteArray0, 3, 8);
//        fail("Expecting exception: UnsupportedZipFeatureException");
      
//      } catch(UnsupportedZipFeatureException e) {
//         //
//         // unsupported feature method 'EXPANDING_LEVEL_2' used in entry 
//         //
//         verifyException("org.apache.commons.compress.archivers.zip.ZipUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry("6Lz^|?F0`V%Ir6");
      assertEquals((-1), zipArchiveEntry0.getMethod());
      assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
      assertEquals((-1L), zipArchiveEntry0.getDataOffset());
      assertNull(zipArchiveEntry0.getComment());
      assertFalse(zipArchiveEntry0.isStreamContiguous());
      assertEquals((-1L), zipArchiveEntry0.getSize());
      assertEquals((-1L), zipArchiveEntry0.getCompressedSize());
      assertFalse(zipArchiveEntry0.isDirectory());
      assertEquals((-1L), zipArchiveEntry0.getCrc());
      assertEquals(0, zipArchiveEntry0.getVersionRequired());
      assertEquals("6Lz^|?F0`V%Ir6", zipArchiveEntry0.toString());
      assertEquals(0, zipArchiveEntry0.getUnixMode());
      assertEquals("6Lz^|?F0`V%Ir6", zipArchiveEntry0.getName());
      assertEquals(0, zipArchiveEntry0.getRawFlag());
      assertEquals(0, zipArchiveEntry0.getInternalAttributes());
      assertEquals(0, zipArchiveEntry0.getVersionMadeBy());
      assertEquals(0, zipArchiveEntry0.getPlatform());
      assertFalse(zipArchiveEntry0.isUnixSymlink());
      assertNotNull(zipArchiveEntry0);
      assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      
      MockFile mockFile0 = new MockFile("6Lz^|?F0`V%Ir6");
      assertNotNull(mockFile0);
      
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(mockFile0);
      assertEquals("6Lz^|?F0`V%Ir6", mockFile0.toString());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.canWrite());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isDirectory());
      assertEquals("6Lz^|?F0`V%Ir6", mockFile0.getName());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertNull(mockFile0.getParent());
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.isFile());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.exists());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertFalse(zipArchiveOutputStream0.isSeekable());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertNotNull(zipArchiveOutputStream0);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      
      zipArchiveOutputStream0.setMethod(0);
      assertEquals("6Lz^|?F0`V%Ir6", mockFile0.toString());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.canWrite());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isDirectory());
      assertEquals("6Lz^|?F0`V%Ir6", mockFile0.getName());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertNull(mockFile0.getParent());
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.isFile());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.exists());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertFalse(zipArchiveOutputStream0.isSeekable());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      
      Path path0 = mockFile0.toPath();
      assertEquals("6Lz^|?F0`V%Ir6", mockFile0.toString());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.canWrite());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isDirectory());
      assertEquals("6Lz^|?F0`V%Ir6", mockFile0.getName());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertNull(mockFile0.getParent());
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.isFile());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.exists());
      assertNotNull(path0);
      
//      try { 
        zipArchiveOutputStream0.putArchiveEntry(zipArchiveEntry0);
//        fail("Expecting exception: ZipException");
      
//      } catch(ZipException e) {
//         //
//         // uncompressed size is required for STORED method when not writing to a file
//         //
//         verifyException("org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream", e);
//      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry("6Lz^|F0`jV%Ir");
      assertEquals(0, zipArchiveEntry0.getRawFlag());
      assertEquals(0, zipArchiveEntry0.getUnixMode());
      assertEquals(0, zipArchiveEntry0.getVersionMadeBy());
      assertEquals("6Lz^|F0`jV%Ir", zipArchiveEntry0.toString());
      assertEquals((-1L), zipArchiveEntry0.getCompressedSize());
      assertEquals((-1L), zipArchiveEntry0.getDataOffset());
      assertNull(zipArchiveEntry0.getComment());
      assertFalse(zipArchiveEntry0.isDirectory());
      assertEquals((-1L), zipArchiveEntry0.getSize());
      assertEquals((-1L), zipArchiveEntry0.getCrc());
      assertFalse(zipArchiveEntry0.isStreamContiguous());
      assertEquals(0, zipArchiveEntry0.getInternalAttributes());
      assertEquals(0, zipArchiveEntry0.getPlatform());
      assertFalse(zipArchiveEntry0.isUnixSymlink());
      assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
      assertEquals((-1), zipArchiveEntry0.getMethod());
      assertEquals(0, zipArchiveEntry0.getVersionRequired());
      assertEquals("6Lz^|F0`jV%Ir", zipArchiveEntry0.getName());
      assertNotNull(zipArchiveEntry0);
      assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      
      MockFile mockFile0 = new MockFile("6Lz^|F0`jV%Ir");
      assertNotNull(mockFile0);
      
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(mockFile0);
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.canWrite());
      assertTrue(mockFile0.isFile());
      assertTrue(mockFile0.canRead());
      assertEquals("6Lz^|F0`jV%Ir", mockFile0.toString());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.exists());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals("6Lz^|F0`jV%Ir", mockFile0.getName());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.canExecute());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertFalse(zipArchiveOutputStream0.isSeekable());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertNotNull(zipArchiveOutputStream0);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      
      zipArchiveOutputStream0.putArchiveEntry(zipArchiveEntry0);
      assertEquals(0, zipArchiveEntry0.getRawFlag());
      assertEquals(0, zipArchiveEntry0.getUnixMode());
      assertEquals(0, zipArchiveEntry0.getVersionMadeBy());
      assertEquals("6Lz^|F0`jV%Ir", zipArchiveEntry0.toString());
      assertEquals((-1L), zipArchiveEntry0.getCompressedSize());
      assertEquals((-1L), zipArchiveEntry0.getDataOffset());
      assertEquals(8, zipArchiveEntry0.getMethod());
      assertNull(zipArchiveEntry0.getComment());
      assertFalse(zipArchiveEntry0.isDirectory());
      assertEquals((-1L), zipArchiveEntry0.getSize());
      assertEquals((-1L), zipArchiveEntry0.getCrc());
      assertFalse(zipArchiveEntry0.isStreamContiguous());
      assertEquals(0, zipArchiveEntry0.getInternalAttributes());
      assertEquals(0, zipArchiveEntry0.getPlatform());
      assertFalse(zipArchiveEntry0.isUnixSymlink());
      assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
      assertEquals(0, zipArchiveEntry0.getVersionRequired());
      assertEquals("6Lz^|F0`jV%Ir", zipArchiveEntry0.getName());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.canWrite());
      assertEquals(43L, mockFile0.length());
      assertTrue(mockFile0.isFile());
      assertTrue(mockFile0.canRead());
      assertEquals("6Lz^|F0`jV%Ir", mockFile0.toString());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.exists());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals("6Lz^|F0`jV%Ir", mockFile0.getName());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.canExecute());
      assertFalse(mockFile0.isDirectory());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertFalse(zipArchiveOutputStream0.isSeekable());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(mockFile0);
      assertNotNull(mockFileInputStream0);
      
      zipArchiveOutputStream0.putArchiveEntry(zipArchiveEntry0);
      assertEquals(0, zipArchiveEntry0.getRawFlag());
      assertEquals(0, zipArchiveEntry0.getUnixMode());
      assertEquals(0, zipArchiveEntry0.getVersionMadeBy());
      assertEquals("6Lz^|F0`jV%Ir", zipArchiveEntry0.toString());
      assertEquals(2L, zipArchiveEntry0.getCompressedSize());
      assertEquals((-1L), zipArchiveEntry0.getDataOffset());
      assertEquals(8, zipArchiveEntry0.getMethod());
      assertNull(zipArchiveEntry0.getComment());
      assertFalse(zipArchiveEntry0.isDirectory());
      assertEquals(0L, zipArchiveEntry0.getSize());
      assertEquals(0L, zipArchiveEntry0.getCrc());
      assertFalse(zipArchiveEntry0.isStreamContiguous());
      assertEquals(0, zipArchiveEntry0.getInternalAttributes());
      assertEquals(0, zipArchiveEntry0.getPlatform());
      assertFalse(zipArchiveEntry0.isUnixSymlink());
      assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
      assertEquals(0, zipArchiveEntry0.getVersionRequired());
      assertEquals("6Lz^|F0`jV%Ir", zipArchiveEntry0.getName());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.canWrite());
      assertTrue(mockFile0.isFile());
      assertTrue(mockFile0.canRead());
      assertEquals(104L, mockFile0.length());
      assertEquals("6Lz^|F0`jV%Ir", mockFile0.toString());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.exists());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals("6Lz^|F0`jV%Ir", mockFile0.getName());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.canExecute());
      assertFalse(mockFile0.isDirectory());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertFalse(zipArchiveOutputStream0.isSeekable());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      
      mockFileInputStream0.mark((-1));
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.canWrite());
      assertTrue(mockFile0.isFile());
      assertTrue(mockFile0.canRead());
      assertEquals(104L, mockFile0.length());
      assertEquals("6Lz^|F0`jV%Ir", mockFile0.toString());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.exists());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals("6Lz^|F0`jV%Ir", mockFile0.getName());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.canExecute());
      assertFalse(mockFile0.isDirectory());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(104, mockFileInputStream0.available());
      
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(mockFileInputStream0);
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.canWrite());
      assertTrue(mockFile0.isFile());
      assertTrue(mockFile0.canRead());
      assertEquals(104L, mockFile0.length());
      assertEquals("6Lz^|F0`jV%Ir", mockFile0.toString());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.exists());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals("6Lz^|F0`jV%Ir", mockFile0.getName());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.canExecute());
      assertFalse(mockFile0.isDirectory());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(104, mockFileInputStream0.available());
      assertNotNull(pushbackInputStream0);
      
      zipArchiveOutputStream0.addRawArchiveEntry(zipArchiveEntry0, pushbackInputStream0);
      assertEquals(0, zipArchiveEntry0.getRawFlag());
      assertEquals(0, zipArchiveEntry0.getUnixMode());
      assertEquals(0, zipArchiveEntry0.getVersionMadeBy());
      assertEquals("6Lz^|F0`jV%Ir", zipArchiveEntry0.toString());
      assertEquals(2L, zipArchiveEntry0.getCompressedSize());
      assertEquals((-1L), zipArchiveEntry0.getDataOffset());
      assertEquals(8, zipArchiveEntry0.getMethod());
      assertNull(zipArchiveEntry0.getComment());
      assertFalse(zipArchiveEntry0.isDirectory());
      assertEquals(0L, zipArchiveEntry0.getSize());
      assertEquals(0L, zipArchiveEntry0.getCrc());
      assertFalse(zipArchiveEntry0.isStreamContiguous());
      assertEquals(0, zipArchiveEntry0.getInternalAttributes());
      assertEquals(0, zipArchiveEntry0.getPlatform());
      assertFalse(zipArchiveEntry0.isUnixSymlink());
      assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
      assertEquals(0, zipArchiveEntry0.getVersionRequired());
      assertEquals("6Lz^|F0`jV%Ir", zipArchiveEntry0.getName());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.canWrite());
      assertTrue(mockFile0.isFile());
      assertTrue(mockFile0.canRead());
      assertEquals("6Lz^|F0`jV%Ir", mockFile0.toString());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.exists());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals("6Lz^|F0`jV%Ir", mockFile0.getName());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.canExecute());
      assertEquals(13860L, mockFile0.length());
      assertFalse(mockFile0.isDirectory());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(13695, zipArchiveOutputStream0.getCount());
      assertEquals(13695L, zipArchiveOutputStream0.getBytesWritten());
      assertFalse(zipArchiveOutputStream0.isSeekable());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertEquals((-1), mockFileInputStream0.available());
      assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      
//      try { 
        zipArchiveOutputStream0.close();
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Error in writing to file
//         //
//         verifyException("org.evosuite.runtime.mock.java.io.NativeMockedIO", e);
//      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, (String) null);
      assertFalse(boolean0);
      
      MockFile mockFile0 = new MockFile("not encodeable", "not encodeable");
      assertNotNull(mockFile0);
      
      Path path0 = mockFile0.toPath();
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.exists());
      assertFalse(mockFile0.canRead());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertEquals("/experiment/not encodeable/not encodeable", mockFile0.toString());
      assertTrue(mockFile0.isFile());
      assertTrue(mockFile0.isAbsolute());
      assertEquals("/experiment/not encodeable", mockFile0.getParent());
      assertFalse(mockFile0.canWrite());
      assertEquals("not encodeable", mockFile0.getName());
      assertEquals(0L, mockFile0.lastModified());
      assertFalse(mockFile0.canExecute());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertNotNull(path0);
      
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(mockFile0);
      assertFalse(mockFile0.isDirectory());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertEquals("/experiment/not encodeable/not encodeable", mockFile0.toString());
      assertTrue(mockFile0.isFile());
      assertTrue(mockFile0.canWrite());
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.isAbsolute());
      assertEquals("/experiment/not encodeable", mockFile0.getParent());
      assertEquals("not encodeable", mockFile0.getName());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertFalse(zipArchiveOutputStream0.isSeekable());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertNotNull(zipArchiveOutputStream0);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      
      boolean boolean1 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "not encodeable");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      Path path1 = mockFile0.toPath();
      assertFalse(mockFile0.isDirectory());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertEquals("/experiment/not encodeable/not encodeable", mockFile0.toString());
      assertTrue(mockFile0.isFile());
      assertTrue(mockFile0.canWrite());
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.isAbsolute());
      assertEquals("/experiment/not encodeable", mockFile0.getParent());
      assertEquals("not encodeable", mockFile0.getName());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertNotNull(path1);
      assertSame(path1, path0);
      
      zipArchiveOutputStream0.finished = true;
      assertFalse(mockFile0.isDirectory());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertEquals("/experiment/not encodeable/not encodeable", mockFile0.toString());
      assertTrue(mockFile0.isFile());
      assertTrue(mockFile0.canWrite());
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.isAbsolute());
      assertEquals("/experiment/not encodeable", mockFile0.getParent());
      assertEquals("not encodeable", mockFile0.getName());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertFalse(zipArchiveOutputStream0.isSeekable());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      
      zipArchiveOutputStream0.close();
      assertFalse(mockFile0.isDirectory());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertEquals("/experiment/not encodeable/not encodeable", mockFile0.toString());
      assertTrue(mockFile0.isFile());
      assertTrue(mockFile0.canWrite());
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.isAbsolute());
      assertEquals("/experiment/not encodeable", mockFile0.getParent());
      assertEquals("not encodeable", mockFile0.getName());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertFalse(zipArchiveOutputStream0.isSeekable());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      
      // Undeclared exception!
//      try { 
        zipArchiveOutputStream0.write((byte[]) null, (-59), (-59));
//        fail("Expecting exception: IllegalStateException");
      
//      } catch(IllegalStateException e) {
//         //
//         // No current entry
//         //
//         verifyException("org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream", e);
//      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      File file0 = MockFile.createTempFile("9SOzK.T>_.j9(", "9SOzK.T>_.j9(");
      assertFalse(file0.isDirectory());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(0L, file0.getUsableSpace());
      assertTrue(file0.exists());
      assertEquals("/tmp/9SOzK.T>_.j9(09SOzK.T>_.j9(", file0.toString());
      assertEquals("/tmp", file0.getParent());
      assertTrue(file0.canExecute());
      assertTrue(file0.isAbsolute());
      assertTrue(file0.canRead());
      assertTrue(file0.isFile());
      assertTrue(file0.canWrite());
      assertFalse(file0.isHidden());
      assertEquals("9SOzK.T>_.j9(09SOzK.T>_.j9(", file0.getName());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(0L, file0.length());
      assertNotNull(file0);
      
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(file0);
      assertFalse(file0.isDirectory());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(0L, file0.getUsableSpace());
      assertTrue(file0.exists());
      assertEquals("/tmp/9SOzK.T>_.j9(09SOzK.T>_.j9(", file0.toString());
      assertEquals("/tmp", file0.getParent());
      assertTrue(file0.canExecute());
      assertTrue(file0.isAbsolute());
      assertTrue(file0.canRead());
      assertTrue(file0.isFile());
      assertTrue(file0.canWrite());
      assertFalse(file0.isHidden());
      assertEquals("9SOzK.T>_.j9(09SOzK.T>_.j9(", file0.getName());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(0L, file0.length());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertTrue(zipArchiveOutputStream0.isSeekable());
      assertNotNull(zipArchiveOutputStream0);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      
      zipArchiveOutputStream0.writeCentralDirectoryEnd();
      assertFalse(file0.isDirectory());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(0L, file0.getUsableSpace());
      assertTrue(file0.exists());
      assertEquals("/tmp/9SOzK.T>_.j9(09SOzK.T>_.j9(", file0.toString());
      assertEquals("/tmp", file0.getParent());
      assertTrue(file0.canExecute());
      assertTrue(file0.isAbsolute());
      assertTrue(file0.canRead());
      assertTrue(file0.isFile());
      assertTrue(file0.canWrite());
      assertFalse(file0.isHidden());
      assertEquals("9SOzK.T>_.j9(09SOzK.T>_.j9(", file0.getName());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(0L, file0.length());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertTrue(zipArchiveOutputStream0.isSeekable());
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      
      ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
      assertEquals((-1), zipArchiveEntry0.getMethod());
      assertNull(zipArchiveEntry0.getComment());
      assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
      assertEquals(0, zipArchiveEntry0.getInternalAttributes());
      assertEquals((-1L), zipArchiveEntry0.getDataOffset());
      assertFalse(zipArchiveEntry0.isStreamContiguous());
      assertEquals("", zipArchiveEntry0.getName());
      assertEquals((-1L), zipArchiveEntry0.getCrc());
      assertFalse(zipArchiveEntry0.isDirectory());
      assertEquals((-1L), zipArchiveEntry0.getSize());
      assertEquals(0, zipArchiveEntry0.getVersionRequired());
      assertEquals((-1L), zipArchiveEntry0.getCompressedSize());
      assertEquals("", zipArchiveEntry0.toString());
      assertFalse(zipArchiveEntry0.isUnixSymlink());
      assertEquals(0, zipArchiveEntry0.getVersionMadeBy());
      assertEquals(0, zipArchiveEntry0.getRawFlag());
      assertEquals(0, zipArchiveEntry0.getUnixMode());
      assertEquals(0, zipArchiveEntry0.getPlatform());
      assertNotNull(zipArchiveEntry0);
      assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      
      ZipArchiveOutputStream zipArchiveOutputStream1 = new ZipArchiveOutputStream(file0);
      assertFalse(zipArchiveOutputStream1.equals((Object)zipArchiveOutputStream0));
      assertFalse(file0.isDirectory());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(0L, file0.getUsableSpace());
      assertTrue(file0.exists());
      assertEquals("/tmp/9SOzK.T>_.j9(09SOzK.T>_.j9(", file0.toString());
      assertEquals("/tmp", file0.getParent());
      assertTrue(file0.canExecute());
      assertTrue(file0.isAbsolute());
      assertTrue(file0.canRead());
      assertTrue(file0.isFile());
      assertTrue(file0.canWrite());
      assertFalse(file0.isHidden());
      assertEquals("9SOzK.T>_.j9(09SOzK.T>_.j9(", file0.getName());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(0L, file0.length());
      assertEquals(0, zipArchiveOutputStream1.getCount());
      assertEquals("UTF8", zipArchiveOutputStream1.getEncoding());
      assertTrue(zipArchiveOutputStream1.isSeekable());
      assertEquals(0L, zipArchiveOutputStream1.getBytesWritten());
      assertNotNull(zipArchiveOutputStream1);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      
      zipArchiveOutputStream1.setMethod(3);
      assertFalse(zipArchiveOutputStream1.equals((Object)zipArchiveOutputStream0));
      assertFalse(file0.isDirectory());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(0L, file0.getUsableSpace());
      assertTrue(file0.exists());
      assertEquals("/tmp/9SOzK.T>_.j9(09SOzK.T>_.j9(", file0.toString());
      assertEquals("/tmp", file0.getParent());
      assertTrue(file0.canExecute());
      assertTrue(file0.isAbsolute());
      assertTrue(file0.canRead());
      assertTrue(file0.isFile());
      assertTrue(file0.canWrite());
      assertFalse(file0.isHidden());
      assertEquals("9SOzK.T>_.j9(09SOzK.T>_.j9(", file0.getName());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(0L, file0.length());
      assertEquals(0, zipArchiveOutputStream1.getCount());
      assertEquals("UTF8", zipArchiveOutputStream1.getEncoding());
      assertTrue(zipArchiveOutputStream1.isSeekable());
      assertEquals(0L, zipArchiveOutputStream1.getBytesWritten());
      assertNotSame(zipArchiveOutputStream1, zipArchiveOutputStream0);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      
      zipArchiveOutputStream1.putArchiveEntry(zipArchiveEntry0);
      assertFalse(zipArchiveOutputStream1.equals((Object)zipArchiveOutputStream0));
      assertFalse(file0.isDirectory());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(0L, file0.getUsableSpace());
      assertTrue(file0.exists());
      assertEquals("/tmp/9SOzK.T>_.j9(09SOzK.T>_.j9(", file0.toString());
      assertEquals("/tmp", file0.getParent());
      assertTrue(file0.canExecute());
      assertTrue(file0.isAbsolute());
      assertTrue(file0.canRead());
      assertTrue(file0.isFile());
      assertTrue(file0.canWrite());
      assertFalse(file0.isHidden());
      assertEquals("9SOzK.T>_.j9(09SOzK.T>_.j9(", file0.getName());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(0L, file0.length());
      assertNull(zipArchiveEntry0.getComment());
      assertEquals(3, zipArchiveEntry0.getMethod());
      assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
      assertEquals(0, zipArchiveEntry0.getInternalAttributes());
      assertEquals((-1L), zipArchiveEntry0.getDataOffset());
      assertFalse(zipArchiveEntry0.isStreamContiguous());
      assertEquals("", zipArchiveEntry0.getName());
      assertEquals((-1L), zipArchiveEntry0.getCrc());
      assertFalse(zipArchiveEntry0.isDirectory());
      assertEquals((-1L), zipArchiveEntry0.getSize());
      assertEquals(0, zipArchiveEntry0.getVersionRequired());
      assertEquals((-1L), zipArchiveEntry0.getCompressedSize());
      assertEquals("", zipArchiveEntry0.toString());
      assertFalse(zipArchiveEntry0.isUnixSymlink());
      assertEquals(0, zipArchiveEntry0.getVersionMadeBy());
      assertEquals(0, zipArchiveEntry0.getRawFlag());
      assertEquals(0, zipArchiveEntry0.getUnixMode());
      assertEquals(0, zipArchiveEntry0.getPlatform());
      assertEquals(0, zipArchiveOutputStream1.getCount());
      assertEquals("UTF8", zipArchiveOutputStream1.getEncoding());
      assertTrue(zipArchiveOutputStream1.isSeekable());
      assertEquals(0L, zipArchiveOutputStream1.getBytesWritten());
      assertNotSame(zipArchiveOutputStream1, zipArchiveOutputStream0);
      assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedInputStream0);
      
      ZipArchiveOutputStream zipArchiveOutputStream2 = new ZipArchiveOutputStream(file0);
      assertFalse(zipArchiveOutputStream2.equals((Object)zipArchiveOutputStream1));
      assertFalse(zipArchiveOutputStream2.equals((Object)zipArchiveOutputStream0));
      assertFalse(file0.isDirectory());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(0L, file0.getUsableSpace());
      assertTrue(file0.exists());
      assertEquals("/tmp/9SOzK.T>_.j9(09SOzK.T>_.j9(", file0.toString());
      assertEquals("/tmp", file0.getParent());
      assertTrue(file0.canExecute());
      assertTrue(file0.isAbsolute());
      assertTrue(file0.canRead());
      assertTrue(file0.isFile());
      assertTrue(file0.canWrite());
      assertFalse(file0.isHidden());
      assertEquals("9SOzK.T>_.j9(09SOzK.T>_.j9(", file0.getName());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(0L, file0.length());
      assertEquals("UTF8", zipArchiveOutputStream2.getEncoding());
      assertTrue(zipArchiveOutputStream2.isSeekable());
      assertEquals(0, zipArchiveOutputStream2.getCount());
      assertEquals(0L, zipArchiveOutputStream2.getBytesWritten());
      assertNotNull(zipArchiveOutputStream2);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      
//      try { 
        zipArchiveOutputStream2.addRawArchiveEntry(zipArchiveEntry0, pipedInputStream0);
//        fail("Expecting exception: UnsupportedZipFeatureException");
      
//      } catch(UnsupportedZipFeatureException e) {
//         //
//         // unsupported feature method 'EXPANDING_LEVEL_2' used in entry 
//         //
//         verifyException("org.apache.commons.compress.archivers.zip.ZipUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      File file0 = MockFile.createTempFile("9SOzK.T>_.j9(", "9SOzK.T>_.j9(");
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(0L, file0.length());
      assertEquals(1392409281320L, file0.lastModified());
      assertTrue(file0.exists());
      assertFalse(file0.isDirectory());
      assertTrue(file0.isAbsolute());
      assertEquals("9SOzK.T>_.j9(09SOzK.T>_.j9(", file0.getName());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      assertTrue(file0.canWrite());
      assertEquals("/tmp", file0.getParent());
      assertTrue(file0.canRead());
      assertTrue(file0.isFile());
      assertEquals("/tmp/9SOzK.T>_.j9(09SOzK.T>_.j9(", file0.toString());
      assertTrue(file0.canExecute());
      assertEquals(0L, file0.getTotalSpace());
      assertNotNull(file0);
      
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(file0);
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(0L, file0.length());
      assertEquals(1392409281320L, file0.lastModified());
      assertTrue(file0.exists());
      assertFalse(file0.isDirectory());
      assertTrue(file0.isAbsolute());
      assertEquals("9SOzK.T>_.j9(09SOzK.T>_.j9(", file0.getName());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      assertTrue(file0.canWrite());
      assertEquals("/tmp", file0.getParent());
      assertTrue(file0.canRead());
      assertTrue(file0.isFile());
      assertEquals("/tmp/9SOzK.T>_.j9(09SOzK.T>_.j9(", file0.toString());
      assertTrue(file0.canExecute());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertTrue(zipArchiveOutputStream0.isSeekable());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertNotNull(zipArchiveOutputStream0);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      
      zipArchiveOutputStream0.setMethod(30);
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(0L, file0.length());
      assertEquals(1392409281320L, file0.lastModified());
      assertTrue(file0.exists());
      assertFalse(file0.isDirectory());
      assertTrue(file0.isAbsolute());
      assertEquals("9SOzK.T>_.j9(09SOzK.T>_.j9(", file0.getName());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      assertTrue(file0.canWrite());
      assertEquals("/tmp", file0.getParent());
      assertTrue(file0.canRead());
      assertTrue(file0.isFile());
      assertEquals("/tmp/9SOzK.T>_.j9(09SOzK.T>_.j9(", file0.toString());
      assertTrue(file0.canExecute());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertTrue(zipArchiveOutputStream0.isSeekable());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      
      File file1 = MockFile.createTempFile("9SOzK.T>_.j9(", "9SOzK.T>_.j9(");
      assertFalse(file1.equals((Object)file0));
      assertTrue(file1.isAbsolute());
      assertEquals("9SOzK.T>_.j9(19SOzK.T>_.j9(", file1.getName());
      assertEquals(0L, file1.getFreeSpace());
      assertTrue(file1.isFile());
      assertEquals(0L, file1.length());
      assertTrue(file1.canRead());
      assertTrue(file1.exists());
      assertEquals(0L, file1.getTotalSpace());
      assertEquals(1392409281320L, file1.lastModified());
      assertTrue(file1.canExecute());
      assertEquals("/tmp/9SOzK.T>_.j9(19SOzK.T>_.j9(", file1.toString());
      assertFalse(file1.isDirectory());
      assertTrue(file1.canWrite());
      assertEquals("/tmp", file1.getParent());
      assertFalse(file1.isHidden());
      assertEquals(0L, file1.getUsableSpace());
      assertNotNull(file1);
      assertNotSame(file1, file0);
      
      ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry("9SOzK.T>_.j9(");
      assertEquals(0, zipArchiveEntry0.getUnixMode());
      assertEquals(0, zipArchiveEntry0.getVersionMadeBy());
      assertEquals(0, zipArchiveEntry0.getRawFlag());
      assertEquals((-1L), zipArchiveEntry0.getSize());
      assertEquals("9SOzK.T>_.j9(", zipArchiveEntry0.getName());
      assertEquals((-1L), zipArchiveEntry0.getCrc());
      assertEquals("9SOzK.T>_.j9(", zipArchiveEntry0.toString());
      assertEquals((-1L), zipArchiveEntry0.getDataOffset());
      assertNull(zipArchiveEntry0.getComment());
      assertFalse(zipArchiveEntry0.isStreamContiguous());
      assertEquals(0, zipArchiveEntry0.getInternalAttributes());
      assertFalse(zipArchiveEntry0.isUnixSymlink());
      assertFalse(zipArchiveEntry0.isDirectory());
      assertEquals(0, zipArchiveEntry0.getPlatform());
      assertEquals((-1L), zipArchiveEntry0.getCompressedSize());
      assertEquals((-1), zipArchiveEntry0.getMethod());
      assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
      assertEquals(0, zipArchiveEntry0.getVersionRequired());
      assertNotNull(zipArchiveEntry0);
      assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      
      zipArchiveOutputStream0.putArchiveEntry(zipArchiveEntry0);
      assertFalse(file0.equals((Object)file1));
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(0L, file0.length());
      assertEquals(1392409281320L, file0.lastModified());
      assertTrue(file0.exists());
      assertFalse(file0.isDirectory());
      assertTrue(file0.isAbsolute());
      assertEquals("9SOzK.T>_.j9(09SOzK.T>_.j9(", file0.getName());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      assertTrue(file0.canWrite());
      assertEquals("/tmp", file0.getParent());
      assertTrue(file0.canRead());
      assertTrue(file0.isFile());
      assertEquals("/tmp/9SOzK.T>_.j9(09SOzK.T>_.j9(", file0.toString());
      assertTrue(file0.canExecute());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertTrue(zipArchiveOutputStream0.isSeekable());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertEquals(0, zipArchiveEntry0.getUnixMode());
      assertEquals(0, zipArchiveEntry0.getVersionMadeBy());
      assertEquals(0, zipArchiveEntry0.getRawFlag());
      assertEquals((-1L), zipArchiveEntry0.getSize());
      assertEquals("9SOzK.T>_.j9(", zipArchiveEntry0.getName());
      assertEquals((-1L), zipArchiveEntry0.getCrc());
      assertEquals("9SOzK.T>_.j9(", zipArchiveEntry0.toString());
      assertEquals((-1L), zipArchiveEntry0.getDataOffset());
      assertNull(zipArchiveEntry0.getComment());
      assertFalse(zipArchiveEntry0.isStreamContiguous());
      assertEquals(0, zipArchiveEntry0.getInternalAttributes());
      assertFalse(zipArchiveEntry0.isUnixSymlink());
      assertFalse(zipArchiveEntry0.isDirectory());
      assertEquals(0, zipArchiveEntry0.getPlatform());
      assertEquals((-1L), zipArchiveEntry0.getCompressedSize());
      assertEquals(30, zipArchiveEntry0.getMethod());
      assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
      assertEquals(0, zipArchiveEntry0.getVersionRequired());
      assertNotSame(file0, file1);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      
//      try { 
        zipArchiveOutputStream0.putArchiveEntry(zipArchiveEntry0);
//        fail("Expecting exception: UnsupportedZipFeatureException");
      
//      } catch(UnsupportedZipFeatureException e) {
//         //
//         // unsupported feature compression method used in entry 9SOzK.T>_.j9(
//         //
//         verifyException("org.apache.commons.compress.archivers.zip.ZipUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry("org.apache.commons.compress.archivers.zip.X0014_X509Certificates");
      assertEquals(0, zipArchiveEntry0.getVersionRequired());
      assertEquals((-1L), zipArchiveEntry0.getCrc());
      assertEquals(0, zipArchiveEntry0.getRawFlag());
      assertEquals((-1L), zipArchiveEntry0.getSize());
      assertFalse(zipArchiveEntry0.isDirectory());
      assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
      assertEquals((-1L), zipArchiveEntry0.getCompressedSize());
      assertEquals((-1), zipArchiveEntry0.getMethod());
      assertEquals("org.apache.commons.compress.archivers.zip.X0014_X509Certificates", zipArchiveEntry0.toString());
      assertNull(zipArchiveEntry0.getComment());
      assertEquals(0, zipArchiveEntry0.getPlatform());
      assertFalse(zipArchiveEntry0.isStreamContiguous());
      assertEquals("org.apache.commons.compress.archivers.zip.X0014_X509Certificates", zipArchiveEntry0.getName());
      assertEquals(0, zipArchiveEntry0.getVersionMadeBy());
      assertFalse(zipArchiveEntry0.isUnixSymlink());
      assertEquals(0, zipArchiveEntry0.getUnixMode());
      assertEquals((-1L), zipArchiveEntry0.getDataOffset());
      assertEquals(0, zipArchiveEntry0.getInternalAttributes());
      assertNotNull(zipArchiveEntry0);
      assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      
      MockFile mockFile0 = new MockFile("", "org.apache.commons.compress.archivers.zip.X0014_X509Certificates");
      assertNotNull(mockFile0);
      
      ZipArchiveOutputStream.UnicodeExtraFieldPolicy zipArchiveOutputStream_UnicodeExtraFieldPolicy0 = ZipArchiveOutputStream.UnicodeExtraFieldPolicy.NOT_ENCODEABLE;
      assertEquals("not encodeable", zipArchiveOutputStream_UnicodeExtraFieldPolicy0.toString());
      assertNotNull(zipArchiveOutputStream_UnicodeExtraFieldPolicy0);
      
      MockPrintStream mockPrintStream0 = new MockPrintStream("org.apache.commons.compress.archivers.zip.X0014_X509Certificates");
      assertNotNull(mockPrintStream0);
      
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(mockPrintStream0);
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertFalse(zipArchiveOutputStream0.isSeekable());
      assertNotNull(zipArchiveOutputStream0);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      
      zipArchiveOutputStream0.setCreateUnicodeExtraFields(zipArchiveOutputStream_UnicodeExtraFieldPolicy0);
      assertEquals("not encodeable", zipArchiveOutputStream_UnicodeExtraFieldPolicy0.toString());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertFalse(zipArchiveOutputStream0.isSeekable());
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      
      ZipArchiveOutputStream zipArchiveOutputStream1 = new ZipArchiveOutputStream(mockPrintStream0);
      assertFalse(zipArchiveOutputStream1.equals((Object)zipArchiveOutputStream0));
      assertEquals(0, zipArchiveOutputStream1.getCount());
      assertEquals(0L, zipArchiveOutputStream1.getBytesWritten());
      assertEquals("UTF8", zipArchiveOutputStream1.getEncoding());
      assertFalse(zipArchiveOutputStream1.isSeekable());
      assertNotNull(zipArchiveOutputStream1);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      
      zipArchiveOutputStream1.putArchiveEntry(zipArchiveEntry0);
      assertFalse(zipArchiveOutputStream1.equals((Object)zipArchiveOutputStream0));
      assertEquals(0, zipArchiveEntry0.getVersionRequired());
      assertEquals((-1L), zipArchiveEntry0.getCrc());
      assertEquals(0, zipArchiveEntry0.getRawFlag());
      assertEquals((-1L), zipArchiveEntry0.getSize());
      assertFalse(zipArchiveEntry0.isDirectory());
      assertEquals(8, zipArchiveEntry0.getMethod());
      assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
      assertEquals((-1L), zipArchiveEntry0.getCompressedSize());
      assertEquals("org.apache.commons.compress.archivers.zip.X0014_X509Certificates", zipArchiveEntry0.toString());
      assertNull(zipArchiveEntry0.getComment());
      assertEquals(0, zipArchiveEntry0.getPlatform());
      assertFalse(zipArchiveEntry0.isStreamContiguous());
      assertEquals("org.apache.commons.compress.archivers.zip.X0014_X509Certificates", zipArchiveEntry0.getName());
      assertEquals(0, zipArchiveEntry0.getVersionMadeBy());
      assertFalse(zipArchiveEntry0.isUnixSymlink());
      assertEquals(0, zipArchiveEntry0.getUnixMode());
      assertEquals((-1L), zipArchiveEntry0.getDataOffset());
      assertEquals(0, zipArchiveEntry0.getInternalAttributes());
      assertEquals(0, zipArchiveOutputStream1.getCount());
      assertEquals(0L, zipArchiveOutputStream1.getBytesWritten());
      assertEquals("UTF8", zipArchiveOutputStream1.getEncoding());
      assertFalse(zipArchiveOutputStream1.isSeekable());
      assertNotSame(zipArchiveOutputStream1, zipArchiveOutputStream0);
      assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      
      boolean boolean0 = zipArchiveOutputStream0.canWriteEntryData(zipArchiveEntry0);
      assertFalse(zipArchiveOutputStream0.equals((Object)zipArchiveOutputStream1));
      assertEquals(0, zipArchiveEntry0.getVersionRequired());
      assertEquals((-1L), zipArchiveEntry0.getCrc());
      assertEquals(0, zipArchiveEntry0.getRawFlag());
      assertEquals((-1L), zipArchiveEntry0.getSize());
      assertFalse(zipArchiveEntry0.isDirectory());
      assertEquals(8, zipArchiveEntry0.getMethod());
      assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
      assertEquals((-1L), zipArchiveEntry0.getCompressedSize());
      assertEquals("org.apache.commons.compress.archivers.zip.X0014_X509Certificates", zipArchiveEntry0.toString());
      assertNull(zipArchiveEntry0.getComment());
      assertEquals(0, zipArchiveEntry0.getPlatform());
      assertFalse(zipArchiveEntry0.isStreamContiguous());
      assertEquals("org.apache.commons.compress.archivers.zip.X0014_X509Certificates", zipArchiveEntry0.getName());
      assertEquals(0, zipArchiveEntry0.getVersionMadeBy());
      assertFalse(zipArchiveEntry0.isUnixSymlink());
      assertEquals(0, zipArchiveEntry0.getUnixMode());
      assertEquals((-1L), zipArchiveEntry0.getDataOffset());
      assertEquals(0, zipArchiveEntry0.getInternalAttributes());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertFalse(zipArchiveOutputStream0.isSeekable());
      assertNotSame(zipArchiveOutputStream0, zipArchiveOutputStream1);
      assertTrue(boolean0);
      assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      
      zipArchiveOutputStream1.setEncoding("org.apache.commons.compress.archivers.zip.X0014_X509Certificates");
      assertFalse(zipArchiveOutputStream1.equals((Object)zipArchiveOutputStream0));
      assertEquals(0, zipArchiveOutputStream1.getCount());
      assertEquals(0L, zipArchiveOutputStream1.getBytesWritten());
      assertFalse(zipArchiveOutputStream1.isSeekable());
      assertEquals("org.apache.commons.compress.archivers.zip.X0014_X509Certificates", zipArchiveOutputStream1.getEncoding());
      assertNotSame(zipArchiveOutputStream1, zipArchiveOutputStream0);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      
//      try { 
        zipArchiveOutputStream1.writeLocalFileHeader(zipArchiveEntry0);
//        fail("Expecting exception: UnsupportedEncodingException");
      
//      } catch(UnsupportedEncodingException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      File file0 = MockFile.createTempFile("UTF8", "UTF8");
      assertFalse(file0.isHidden());
      assertEquals("UTF80UTF8", file0.getName());
      assertTrue(file0.canWrite());
      assertEquals("/tmp", file0.getParent());
      assertTrue(file0.canRead());
      assertTrue(file0.isFile());
      assertTrue(file0.isAbsolute());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals(0L, file0.length());
      assertEquals(0L, file0.getFreeSpace());
      assertTrue(file0.exists());
      assertEquals(1392409281320L, file0.lastModified());
      assertFalse(file0.isDirectory());
      assertEquals("/tmp/UTF80UTF8", file0.toString());
      assertEquals(0L, file0.getTotalSpace());
      assertTrue(file0.canExecute());
      assertNotNull(file0);
      
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(file0);
      assertFalse(file0.isHidden());
      assertEquals("UTF80UTF8", file0.getName());
      assertTrue(file0.canWrite());
      assertEquals("/tmp", file0.getParent());
      assertTrue(file0.canRead());
      assertTrue(file0.isFile());
      assertTrue(file0.isAbsolute());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals(0L, file0.length());
      assertEquals(0L, file0.getFreeSpace());
      assertTrue(file0.exists());
      assertEquals(1392409281320L, file0.lastModified());
      assertFalse(file0.isDirectory());
      assertEquals("/tmp/UTF80UTF8", file0.toString());
      assertEquals(0L, file0.getTotalSpace());
      assertTrue(file0.canExecute());
      assertTrue(zipArchiveOutputStream0.isSeekable());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertNotNull(zipArchiveOutputStream0);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      
      zipArchiveOutputStream0.writeCentralDirectoryEnd();
      assertFalse(file0.isHidden());
      assertEquals("UTF80UTF8", file0.getName());
      assertTrue(file0.canWrite());
      assertEquals("/tmp", file0.getParent());
      assertTrue(file0.canRead());
      assertTrue(file0.isFile());
      assertTrue(file0.isAbsolute());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals(0L, file0.length());
      assertEquals(0L, file0.getFreeSpace());
      assertTrue(file0.exists());
      assertEquals(1392409281320L, file0.lastModified());
      assertFalse(file0.isDirectory());
      assertEquals("/tmp/UTF80UTF8", file0.toString());
      assertEquals(0L, file0.getTotalSpace());
      assertTrue(file0.canExecute());
      assertTrue(zipArchiveOutputStream0.isSeekable());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      
      ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry("UTF8");
      assertEquals(0, zipArchiveEntry0.getRawFlag());
      assertEquals((-1L), zipArchiveEntry0.getCrc());
      assertEquals(0, zipArchiveEntry0.getVersionMadeBy());
      assertEquals((-1L), zipArchiveEntry0.getSize());
      assertEquals("UTF8", zipArchiveEntry0.toString());
      assertEquals(0, zipArchiveEntry0.getUnixMode());
      assertNull(zipArchiveEntry0.getComment());
      assertFalse(zipArchiveEntry0.isUnixSymlink());
      assertEquals((-1L), zipArchiveEntry0.getDataOffset());
      assertEquals(0, zipArchiveEntry0.getInternalAttributes());
      assertEquals(0, zipArchiveEntry0.getPlatform());
      assertFalse(zipArchiveEntry0.isStreamContiguous());
      assertFalse(zipArchiveEntry0.isDirectory());
      assertEquals((-1L), zipArchiveEntry0.getCompressedSize());
      assertEquals((-1), zipArchiveEntry0.getMethod());
      assertEquals(0, zipArchiveEntry0.getVersionRequired());
      assertEquals("UTF8", zipArchiveEntry0.getName());
      assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
      assertNotNull(zipArchiveEntry0);
      assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      
      boolean boolean0 = zipArchiveEntry0.equals(zipArchiveOutputStream0);
      assertFalse(file0.isHidden());
      assertEquals("UTF80UTF8", file0.getName());
      assertTrue(file0.canWrite());
      assertEquals("/tmp", file0.getParent());
      assertTrue(file0.canRead());
      assertTrue(file0.isFile());
      assertTrue(file0.isAbsolute());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals(0L, file0.length());
      assertEquals(0L, file0.getFreeSpace());
      assertTrue(file0.exists());
      assertEquals(1392409281320L, file0.lastModified());
      assertFalse(file0.isDirectory());
      assertEquals("/tmp/UTF80UTF8", file0.toString());
      assertEquals(0L, file0.getTotalSpace());
      assertTrue(file0.canExecute());
      assertTrue(zipArchiveOutputStream0.isSeekable());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertEquals(0, zipArchiveEntry0.getRawFlag());
      assertEquals((-1L), zipArchiveEntry0.getCrc());
      assertEquals(0, zipArchiveEntry0.getVersionMadeBy());
      assertEquals((-1L), zipArchiveEntry0.getSize());
      assertEquals("UTF8", zipArchiveEntry0.toString());
      assertEquals(0, zipArchiveEntry0.getUnixMode());
      assertNull(zipArchiveEntry0.getComment());
      assertFalse(zipArchiveEntry0.isUnixSymlink());
      assertEquals((-1L), zipArchiveEntry0.getDataOffset());
      assertEquals(0, zipArchiveEntry0.getInternalAttributes());
      assertEquals(0, zipArchiveEntry0.getPlatform());
      assertFalse(zipArchiveEntry0.isStreamContiguous());
      assertFalse(zipArchiveEntry0.isDirectory());
      assertEquals((-1L), zipArchiveEntry0.getCompressedSize());
      assertEquals((-1), zipArchiveEntry0.getMethod());
      assertEquals(0, zipArchiveEntry0.getVersionRequired());
      assertEquals("UTF8", zipArchiveEntry0.getName());
      assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
      assertFalse(boolean0);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      
      zipArchiveOutputStream0.putArchiveEntry(zipArchiveEntry0);
      assertFalse(file0.isHidden());
      assertEquals("UTF80UTF8", file0.getName());
      assertTrue(file0.canWrite());
      assertEquals("/tmp", file0.getParent());
      assertTrue(file0.canRead());
      assertTrue(file0.isFile());
      assertTrue(file0.isAbsolute());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals(0L, file0.length());
      assertEquals(0L, file0.getFreeSpace());
      assertTrue(file0.exists());
      assertEquals(1392409281320L, file0.lastModified());
      assertFalse(file0.isDirectory());
      assertEquals("/tmp/UTF80UTF8", file0.toString());
      assertEquals(0L, file0.getTotalSpace());
      assertTrue(file0.canExecute());
      assertTrue(zipArchiveOutputStream0.isSeekable());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertEquals(0, zipArchiveEntry0.getRawFlag());
      assertEquals((-1L), zipArchiveEntry0.getCrc());
      assertEquals(0, zipArchiveEntry0.getVersionMadeBy());
      assertEquals((-1L), zipArchiveEntry0.getSize());
      assertEquals("UTF8", zipArchiveEntry0.toString());
      assertEquals(0, zipArchiveEntry0.getUnixMode());
      assertNull(zipArchiveEntry0.getComment());
      assertFalse(zipArchiveEntry0.isUnixSymlink());
      assertEquals((-1L), zipArchiveEntry0.getDataOffset());
      assertEquals(0, zipArchiveEntry0.getInternalAttributes());
      assertEquals(0, zipArchiveEntry0.getPlatform());
      assertFalse(zipArchiveEntry0.isStreamContiguous());
      assertFalse(zipArchiveEntry0.isDirectory());
      assertEquals(8, zipArchiveEntry0.getMethod());
      assertEquals((-1L), zipArchiveEntry0.getCompressedSize());
      assertEquals(0, zipArchiveEntry0.getVersionRequired());
      assertEquals("UTF8", zipArchiveEntry0.getName());
      assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      
      zipArchiveOutputStream0.setUseLanguageEncodingFlag(false);
      assertFalse(file0.isHidden());
      assertEquals("UTF80UTF8", file0.getName());
      assertTrue(file0.canWrite());
      assertEquals("/tmp", file0.getParent());
      assertTrue(file0.canRead());
      assertTrue(file0.isFile());
      assertTrue(file0.isAbsolute());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals(0L, file0.length());
      assertEquals(0L, file0.getFreeSpace());
      assertTrue(file0.exists());
      assertEquals(1392409281320L, file0.lastModified());
      assertFalse(file0.isDirectory());
      assertEquals("/tmp/UTF80UTF8", file0.toString());
      assertEquals(0L, file0.getTotalSpace());
      assertTrue(file0.canExecute());
      assertTrue(zipArchiveOutputStream0.isSeekable());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      
      boolean boolean1 = zipArchiveOutputStream0.canWriteEntryData(zipArchiveEntry0);
      assertFalse(boolean1 == boolean0);
      assertFalse(file0.isHidden());
      assertEquals("UTF80UTF8", file0.getName());
      assertTrue(file0.canWrite());
      assertEquals("/tmp", file0.getParent());
      assertTrue(file0.canRead());
      assertTrue(file0.isFile());
      assertTrue(file0.isAbsolute());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals(0L, file0.length());
      assertEquals(0L, file0.getFreeSpace());
      assertTrue(file0.exists());
      assertEquals(1392409281320L, file0.lastModified());
      assertFalse(file0.isDirectory());
      assertEquals("/tmp/UTF80UTF8", file0.toString());
      assertEquals(0L, file0.getTotalSpace());
      assertTrue(file0.canExecute());
      assertTrue(zipArchiveOutputStream0.isSeekable());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertEquals(0, zipArchiveEntry0.getRawFlag());
      assertEquals((-1L), zipArchiveEntry0.getCrc());
      assertEquals(0, zipArchiveEntry0.getVersionMadeBy());
      assertEquals((-1L), zipArchiveEntry0.getSize());
      assertEquals("UTF8", zipArchiveEntry0.toString());
      assertEquals(0, zipArchiveEntry0.getUnixMode());
      assertNull(zipArchiveEntry0.getComment());
      assertFalse(zipArchiveEntry0.isUnixSymlink());
      assertEquals((-1L), zipArchiveEntry0.getDataOffset());
      assertEquals(0, zipArchiveEntry0.getInternalAttributes());
      assertEquals(0, zipArchiveEntry0.getPlatform());
      assertFalse(zipArchiveEntry0.isStreamContiguous());
      assertFalse(zipArchiveEntry0.isDirectory());
      assertEquals(8, zipArchiveEntry0.getMethod());
      assertEquals((-1L), zipArchiveEntry0.getCompressedSize());
      assertEquals(0, zipArchiveEntry0.getVersionRequired());
      assertEquals("UTF8", zipArchiveEntry0.getName());
      assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
      assertTrue(boolean1);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      
      UnicodeCommentExtraField unicodeCommentExtraField0 = new UnicodeCommentExtraField();
      assertEquals(0L, unicodeCommentExtraField0.getNameCRC32());
      assertNotNull(unicodeCommentExtraField0);
      
      zipArchiveEntry0.addExtraField(unicodeCommentExtraField0);
      assertEquals(0, zipArchiveEntry0.getRawFlag());
      assertEquals((-1L), zipArchiveEntry0.getCrc());
      assertEquals(0, zipArchiveEntry0.getVersionMadeBy());
      assertEquals((-1L), zipArchiveEntry0.getSize());
      assertEquals("UTF8", zipArchiveEntry0.toString());
      assertEquals(0, zipArchiveEntry0.getUnixMode());
      assertNull(zipArchiveEntry0.getComment());
      assertFalse(zipArchiveEntry0.isUnixSymlink());
      assertEquals((-1L), zipArchiveEntry0.getDataOffset());
      assertEquals(0, zipArchiveEntry0.getInternalAttributes());
      assertEquals(0, zipArchiveEntry0.getPlatform());
      assertFalse(zipArchiveEntry0.isStreamContiguous());
      assertFalse(zipArchiveEntry0.isDirectory());
      assertEquals(8, zipArchiveEntry0.getMethod());
      assertEquals((-1L), zipArchiveEntry0.getCompressedSize());
      assertEquals(0, zipArchiveEntry0.getVersionRequired());
      assertEquals("UTF8", zipArchiveEntry0.getName());
      assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
      assertEquals(0L, unicodeCommentExtraField0.getNameCRC32());
      assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedInputStream0);
      
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(file0);
      assertNotNull(mockFileInputStream0);
      
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(pipedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pushbackInputStream0);
      
//      try { 
        zipArchiveOutputStream0.addRawArchiveEntry(zipArchiveEntry0, mockFileInputStream0);
//        fail("Expecting exception: ZipException");
      
//      } catch(ZipException e) {
//         //
//         // UniCode path extra data must have at least 5 bytes.
//         //
//         verifyException("org.apache.commons.compress.archivers.zip.AbstractUnicodeExtraField", e);
//      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      File file0 = MockFile.createTempFile("UTF8", "UTF8");
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isHidden());
      assertEquals("/tmp", file0.getParent());
      assertEquals("UTF80UTF8", file0.getName());
      assertTrue(file0.canExecute());
      assertTrue(file0.isAbsolute());
      assertFalse(file0.isDirectory());
      assertEquals("/tmp/UTF80UTF8", file0.toString());
      assertEquals(0L, file0.getFreeSpace());
      assertTrue(file0.canWrite());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(0L, file0.length());
      assertTrue(file0.canRead());
      assertTrue(file0.exists());
      assertTrue(file0.isFile());
      assertNotNull(file0);
      
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(file0);
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isHidden());
      assertEquals("/tmp", file0.getParent());
      assertEquals("UTF80UTF8", file0.getName());
      assertTrue(file0.canExecute());
      assertTrue(file0.isAbsolute());
      assertFalse(file0.isDirectory());
      assertEquals("/tmp/UTF80UTF8", file0.toString());
      assertEquals(0L, file0.getFreeSpace());
      assertTrue(file0.canWrite());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(0L, file0.length());
      assertTrue(file0.canRead());
      assertTrue(file0.exists());
      assertTrue(file0.isFile());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertTrue(zipArchiveOutputStream0.isSeekable());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertNotNull(zipArchiveOutputStream0);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      
      zipArchiveOutputStream0.writeCentralDirectoryEnd();
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isHidden());
      assertEquals("/tmp", file0.getParent());
      assertEquals("UTF80UTF8", file0.getName());
      assertTrue(file0.canExecute());
      assertTrue(file0.isAbsolute());
      assertFalse(file0.isDirectory());
      assertEquals("/tmp/UTF80UTF8", file0.toString());
      assertEquals(0L, file0.getFreeSpace());
      assertTrue(file0.canWrite());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(0L, file0.length());
      assertTrue(file0.canRead());
      assertTrue(file0.exists());
      assertTrue(file0.isFile());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertTrue(zipArchiveOutputStream0.isSeekable());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      
      ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry("UTF8");
      assertEquals((-1L), zipArchiveEntry0.getDataOffset());
      assertNull(zipArchiveEntry0.getComment());
      assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
      assertEquals((-1), zipArchiveEntry0.getMethod());
      assertEquals((-1L), zipArchiveEntry0.getCrc());
      assertFalse(zipArchiveEntry0.isStreamContiguous());
      assertEquals("UTF8", zipArchiveEntry0.toString());
      assertFalse(zipArchiveEntry0.isDirectory());
      assertEquals((-1L), zipArchiveEntry0.getSize());
      assertEquals((-1L), zipArchiveEntry0.getCompressedSize());
      assertFalse(zipArchiveEntry0.isUnixSymlink());
      assertEquals(0, zipArchiveEntry0.getVersionRequired());
      assertEquals("UTF8", zipArchiveEntry0.getName());
      assertEquals(0, zipArchiveEntry0.getPlatform());
      assertEquals(0, zipArchiveEntry0.getRawFlag());
      assertEquals(0, zipArchiveEntry0.getInternalAttributes());
      assertEquals(0, zipArchiveEntry0.getUnixMode());
      assertEquals(0, zipArchiveEntry0.getVersionMadeBy());
      assertNotNull(zipArchiveEntry0);
      assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      
      boolean boolean0 = zipArchiveEntry0.equals(zipArchiveOutputStream0);
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isHidden());
      assertEquals("/tmp", file0.getParent());
      assertEquals("UTF80UTF8", file0.getName());
      assertTrue(file0.canExecute());
      assertTrue(file0.isAbsolute());
      assertFalse(file0.isDirectory());
      assertEquals("/tmp/UTF80UTF8", file0.toString());
      assertEquals(0L, file0.getFreeSpace());
      assertTrue(file0.canWrite());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(0L, file0.length());
      assertTrue(file0.canRead());
      assertTrue(file0.exists());
      assertTrue(file0.isFile());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertTrue(zipArchiveOutputStream0.isSeekable());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals((-1L), zipArchiveEntry0.getDataOffset());
      assertNull(zipArchiveEntry0.getComment());
      assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
      assertEquals((-1), zipArchiveEntry0.getMethod());
      assertEquals((-1L), zipArchiveEntry0.getCrc());
      assertFalse(zipArchiveEntry0.isStreamContiguous());
      assertEquals("UTF8", zipArchiveEntry0.toString());
      assertFalse(zipArchiveEntry0.isDirectory());
      assertEquals((-1L), zipArchiveEntry0.getSize());
      assertEquals((-1L), zipArchiveEntry0.getCompressedSize());
      assertFalse(zipArchiveEntry0.isUnixSymlink());
      assertEquals(0, zipArchiveEntry0.getVersionRequired());
      assertEquals("UTF8", zipArchiveEntry0.getName());
      assertEquals(0, zipArchiveEntry0.getPlatform());
      assertEquals(0, zipArchiveEntry0.getRawFlag());
      assertEquals(0, zipArchiveEntry0.getInternalAttributes());
      assertEquals(0, zipArchiveEntry0.getUnixMode());
      assertEquals(0, zipArchiveEntry0.getVersionMadeBy());
      assertFalse(boolean0);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      
      ZipArchiveOutputStream.UnicodeExtraFieldPolicy zipArchiveOutputStream_UnicodeExtraFieldPolicy0 = ZipArchiveOutputStream.UnicodeExtraFieldPolicy.NOT_ENCODEABLE;
      assertEquals("not encodeable", zipArchiveOutputStream_UnicodeExtraFieldPolicy0.toString());
      assertNotNull(zipArchiveOutputStream_UnicodeExtraFieldPolicy0);
      
      zipArchiveOutputStream0.setCreateUnicodeExtraFields(zipArchiveOutputStream_UnicodeExtraFieldPolicy0);
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isHidden());
      assertEquals("/tmp", file0.getParent());
      assertEquals("UTF80UTF8", file0.getName());
      assertTrue(file0.canExecute());
      assertTrue(file0.isAbsolute());
      assertFalse(file0.isDirectory());
      assertEquals("/tmp/UTF80UTF8", file0.toString());
      assertEquals(0L, file0.getFreeSpace());
      assertTrue(file0.canWrite());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(0L, file0.length());
      assertTrue(file0.canRead());
      assertTrue(file0.exists());
      assertTrue(file0.isFile());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertTrue(zipArchiveOutputStream0.isSeekable());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals("not encodeable", zipArchiveOutputStream_UnicodeExtraFieldPolicy0.toString());
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      
      zipArchiveOutputStream0.putArchiveEntry(zipArchiveEntry0);
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isHidden());
      assertEquals("/tmp", file0.getParent());
      assertEquals("UTF80UTF8", file0.getName());
      assertTrue(file0.canExecute());
      assertTrue(file0.isAbsolute());
      assertFalse(file0.isDirectory());
      assertEquals("/tmp/UTF80UTF8", file0.toString());
      assertEquals(0L, file0.getFreeSpace());
      assertTrue(file0.canWrite());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(0L, file0.length());
      assertTrue(file0.canRead());
      assertTrue(file0.exists());
      assertTrue(file0.isFile());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertTrue(zipArchiveOutputStream0.isSeekable());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals((-1L), zipArchiveEntry0.getDataOffset());
      assertNull(zipArchiveEntry0.getComment());
      assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
      assertEquals((-1L), zipArchiveEntry0.getCrc());
      assertFalse(zipArchiveEntry0.isStreamContiguous());
      assertEquals("UTF8", zipArchiveEntry0.toString());
      assertEquals(8, zipArchiveEntry0.getMethod());
      assertFalse(zipArchiveEntry0.isDirectory());
      assertEquals((-1L), zipArchiveEntry0.getSize());
      assertEquals((-1L), zipArchiveEntry0.getCompressedSize());
      assertFalse(zipArchiveEntry0.isUnixSymlink());
      assertEquals(0, zipArchiveEntry0.getVersionRequired());
      assertEquals("UTF8", zipArchiveEntry0.getName());
      assertEquals(0, zipArchiveEntry0.getPlatform());
      assertEquals(0, zipArchiveEntry0.getRawFlag());
      assertEquals(0, zipArchiveEntry0.getInternalAttributes());
      assertEquals(0, zipArchiveEntry0.getUnixMode());
      assertEquals(0, zipArchiveEntry0.getVersionMadeBy());
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      
      ZipArchiveOutputStream zipArchiveOutputStream1 = new ZipArchiveOutputStream(file0);
      assertFalse(zipArchiveOutputStream1.equals((Object)zipArchiveOutputStream0));
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isHidden());
      assertEquals("/tmp", file0.getParent());
      assertEquals("UTF80UTF8", file0.getName());
      assertTrue(file0.canExecute());
      assertTrue(file0.isAbsolute());
      assertFalse(file0.isDirectory());
      assertEquals("/tmp/UTF80UTF8", file0.toString());
      assertEquals(0L, file0.getFreeSpace());
      assertTrue(file0.canWrite());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(0L, file0.length());
      assertTrue(file0.canRead());
      assertTrue(file0.exists());
      assertTrue(file0.isFile());
      assertEquals("UTF8", zipArchiveOutputStream1.getEncoding());
      assertTrue(zipArchiveOutputStream1.isSeekable());
      assertEquals(0, zipArchiveOutputStream1.getCount());
      assertEquals(0L, zipArchiveOutputStream1.getBytesWritten());
      assertNotNull(zipArchiveOutputStream1);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      
      zipArchiveOutputStream1.setMethod((-1));
      assertFalse(zipArchiveOutputStream1.equals((Object)zipArchiveOutputStream0));
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isHidden());
      assertEquals("/tmp", file0.getParent());
      assertEquals("UTF80UTF8", file0.getName());
      assertTrue(file0.canExecute());
      assertTrue(file0.isAbsolute());
      assertFalse(file0.isDirectory());
      assertEquals("/tmp/UTF80UTF8", file0.toString());
      assertEquals(0L, file0.getFreeSpace());
      assertTrue(file0.canWrite());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(0L, file0.length());
      assertTrue(file0.canRead());
      assertTrue(file0.exists());
      assertTrue(file0.isFile());
      assertEquals("UTF8", zipArchiveOutputStream1.getEncoding());
      assertTrue(zipArchiveOutputStream1.isSeekable());
      assertEquals(0, zipArchiveOutputStream1.getCount());
      assertEquals(0L, zipArchiveOutputStream1.getBytesWritten());
      assertNotSame(zipArchiveOutputStream1, zipArchiveOutputStream0);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      
      boolean boolean1 = file0.setReadable(false);
      assertFalse(boolean1 == boolean0);
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isHidden());
      assertEquals("/tmp", file0.getParent());
      assertEquals("UTF80UTF8", file0.getName());
      assertTrue(file0.canExecute());
      assertTrue(file0.isAbsolute());
      assertFalse(file0.isDirectory());
      assertEquals("/tmp/UTF80UTF8", file0.toString());
      assertEquals(0L, file0.getFreeSpace());
      assertTrue(file0.canWrite());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(0L, file0.length());
      assertFalse(file0.canRead());
      assertTrue(file0.exists());
      assertTrue(file0.isFile());
      assertTrue(boolean1);
      
      zipArchiveOutputStream1.setMethod((-5257));
      assertFalse(zipArchiveOutputStream1.equals((Object)zipArchiveOutputStream0));
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isHidden());
      assertEquals("/tmp", file0.getParent());
      assertEquals("UTF80UTF8", file0.getName());
      assertTrue(file0.canExecute());
      assertTrue(file0.isAbsolute());
      assertFalse(file0.isDirectory());
      assertEquals("/tmp/UTF80UTF8", file0.toString());
      assertEquals(0L, file0.getFreeSpace());
      assertTrue(file0.canWrite());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(0L, file0.length());
      assertFalse(file0.canRead());
      assertTrue(file0.exists());
      assertTrue(file0.isFile());
      assertEquals("UTF8", zipArchiveOutputStream1.getEncoding());
      assertTrue(zipArchiveOutputStream1.isSeekable());
      assertEquals(0, zipArchiveOutputStream1.getCount());
      assertEquals(0L, zipArchiveOutputStream1.getBytesWritten());
      assertNotSame(zipArchiveOutputStream1, zipArchiveOutputStream0);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      
      ZipArchiveOutputStream zipArchiveOutputStream2 = new ZipArchiveOutputStream((SeekableByteChannel) null);
      assertFalse(zipArchiveOutputStream2.equals((Object)zipArchiveOutputStream0));
      assertFalse(zipArchiveOutputStream2.equals((Object)zipArchiveOutputStream1));
      assertFalse(zipArchiveOutputStream2.isSeekable());
      assertEquals(0, zipArchiveOutputStream2.getCount());
      assertEquals("UTF8", zipArchiveOutputStream2.getEncoding());
      assertEquals(0L, zipArchiveOutputStream2.getBytesWritten());
      assertNotNull(zipArchiveOutputStream2);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      
      zipArchiveOutputStream0.setEncoding("UTF8");
      assertFalse(zipArchiveOutputStream0.equals((Object)zipArchiveOutputStream2));
      assertFalse(zipArchiveOutputStream0.equals((Object)zipArchiveOutputStream1));
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isHidden());
      assertEquals("/tmp", file0.getParent());
      assertEquals("UTF80UTF8", file0.getName());
      assertTrue(file0.canExecute());
      assertTrue(file0.isAbsolute());
      assertFalse(file0.isDirectory());
      assertEquals("/tmp/UTF80UTF8", file0.toString());
      assertEquals(0L, file0.getFreeSpace());
      assertTrue(file0.canWrite());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(0L, file0.length());
      assertFalse(file0.canRead());
      assertTrue(file0.exists());
      assertTrue(file0.isFile());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertTrue(zipArchiveOutputStream0.isSeekable());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertNotSame(zipArchiveOutputStream0, zipArchiveOutputStream2);
      assertNotSame(zipArchiveOutputStream0, zipArchiveOutputStream1);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(0, ZipArchiveOutputStream.STORED);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      File file0 = MockFile.createTempFile("9SOzK.T>_.j9(", "9SOzK.T>_.j9(");
      assertTrue(file0.exists());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(1392409281320L, file0.lastModified());
      assertTrue(file0.canRead());
      assertEquals("/tmp/9SOzK.T>_.j9(09SOzK.T>_.j9(", file0.toString());
      assertTrue(file0.isFile());
      assertEquals("9SOzK.T>_.j9(09SOzK.T>_.j9(", file0.getName());
      assertEquals("/tmp", file0.getParent());
      assertTrue(file0.canExecute());
      assertEquals(0L, file0.length());
      assertEquals(0L, file0.getFreeSpace());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isDirectory());
      assertTrue(file0.canWrite());
      assertTrue(file0.isAbsolute());
      assertNotNull(file0);
      
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(file0);
      assertTrue(file0.exists());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(1392409281320L, file0.lastModified());
      assertTrue(file0.canRead());
      assertEquals("/tmp/9SOzK.T>_.j9(09SOzK.T>_.j9(", file0.toString());
      assertTrue(file0.isFile());
      assertEquals("9SOzK.T>_.j9(09SOzK.T>_.j9(", file0.getName());
      assertEquals("/tmp", file0.getParent());
      assertTrue(file0.canExecute());
      assertEquals(0L, file0.length());
      assertEquals(0L, file0.getFreeSpace());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isDirectory());
      assertTrue(file0.canWrite());
      assertTrue(file0.isAbsolute());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertTrue(zipArchiveOutputStream0.isSeekable());
      assertNotNull(zipArchiveOutputStream0);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      
      zipArchiveOutputStream0.writeCentralDirectoryEnd();
      assertTrue(file0.exists());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(1392409281320L, file0.lastModified());
      assertTrue(file0.canRead());
      assertEquals("/tmp/9SOzK.T>_.j9(09SOzK.T>_.j9(", file0.toString());
      assertTrue(file0.isFile());
      assertEquals("9SOzK.T>_.j9(09SOzK.T>_.j9(", file0.getName());
      assertEquals("/tmp", file0.getParent());
      assertTrue(file0.canExecute());
      assertEquals(0L, file0.length());
      assertEquals(0L, file0.getFreeSpace());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isDirectory());
      assertTrue(file0.canWrite());
      assertTrue(file0.isAbsolute());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertTrue(zipArchiveOutputStream0.isSeekable());
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      
      ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry("9SOzK.T>_.j9(");
      assertFalse(zipArchiveEntry0.isStreamContiguous());
      assertEquals(0, zipArchiveEntry0.getInternalAttributes());
      assertFalse(zipArchiveEntry0.isDirectory());
      assertEquals(0, zipArchiveEntry0.getPlatform());
      assertEquals("9SOzK.T>_.j9(", zipArchiveEntry0.toString());
      assertNull(zipArchiveEntry0.getComment());
      assertFalse(zipArchiveEntry0.isUnixSymlink());
      assertEquals((-1L), zipArchiveEntry0.getDataOffset());
      assertEquals(0, zipArchiveEntry0.getRawFlag());
      assertEquals("9SOzK.T>_.j9(", zipArchiveEntry0.getName());
      assertEquals((-1L), zipArchiveEntry0.getCrc());
      assertEquals(0, zipArchiveEntry0.getVersionMadeBy());
      assertEquals((-1L), zipArchiveEntry0.getSize());
      assertEquals(0, zipArchiveEntry0.getUnixMode());
      assertEquals(0, zipArchiveEntry0.getVersionRequired());
      assertEquals((-1L), zipArchiveEntry0.getCompressedSize());
      assertEquals((-1), zipArchiveEntry0.getMethod());
      assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
      assertNotNull(zipArchiveEntry0);
      assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      
      boolean boolean0 = zipArchiveEntry0.equals(zipArchiveOutputStream0);
      assertTrue(file0.exists());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(1392409281320L, file0.lastModified());
      assertTrue(file0.canRead());
      assertEquals("/tmp/9SOzK.T>_.j9(09SOzK.T>_.j9(", file0.toString());
      assertTrue(file0.isFile());
      assertEquals("9SOzK.T>_.j9(09SOzK.T>_.j9(", file0.getName());
      assertEquals("/tmp", file0.getParent());
      assertTrue(file0.canExecute());
      assertEquals(0L, file0.length());
      assertEquals(0L, file0.getFreeSpace());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isDirectory());
      assertTrue(file0.canWrite());
      assertTrue(file0.isAbsolute());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertTrue(zipArchiveOutputStream0.isSeekable());
      assertFalse(zipArchiveEntry0.isStreamContiguous());
      assertEquals(0, zipArchiveEntry0.getInternalAttributes());
      assertFalse(zipArchiveEntry0.isDirectory());
      assertEquals(0, zipArchiveEntry0.getPlatform());
      assertEquals("9SOzK.T>_.j9(", zipArchiveEntry0.toString());
      assertNull(zipArchiveEntry0.getComment());
      assertFalse(zipArchiveEntry0.isUnixSymlink());
      assertEquals((-1L), zipArchiveEntry0.getDataOffset());
      assertEquals(0, zipArchiveEntry0.getRawFlag());
      assertEquals("9SOzK.T>_.j9(", zipArchiveEntry0.getName());
      assertEquals((-1L), zipArchiveEntry0.getCrc());
      assertEquals(0, zipArchiveEntry0.getVersionMadeBy());
      assertEquals((-1L), zipArchiveEntry0.getSize());
      assertEquals(0, zipArchiveEntry0.getUnixMode());
      assertEquals(0, zipArchiveEntry0.getVersionRequired());
      assertEquals((-1L), zipArchiveEntry0.getCompressedSize());
      assertEquals((-1), zipArchiveEntry0.getMethod());
      assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
      assertFalse(boolean0);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      
      zipArchiveOutputStream0.putArchiveEntry(zipArchiveEntry0);
      assertTrue(file0.exists());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(1392409281320L, file0.lastModified());
      assertTrue(file0.canRead());
      assertEquals("/tmp/9SOzK.T>_.j9(09SOzK.T>_.j9(", file0.toString());
      assertTrue(file0.isFile());
      assertEquals("9SOzK.T>_.j9(09SOzK.T>_.j9(", file0.getName());
      assertEquals("/tmp", file0.getParent());
      assertTrue(file0.canExecute());
      assertEquals(0L, file0.length());
      assertEquals(0L, file0.getFreeSpace());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isDirectory());
      assertTrue(file0.canWrite());
      assertTrue(file0.isAbsolute());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertTrue(zipArchiveOutputStream0.isSeekable());
      assertFalse(zipArchiveEntry0.isStreamContiguous());
      assertEquals(0, zipArchiveEntry0.getInternalAttributes());
      assertFalse(zipArchiveEntry0.isDirectory());
      assertEquals(0, zipArchiveEntry0.getPlatform());
      assertEquals(8, zipArchiveEntry0.getMethod());
      assertEquals("9SOzK.T>_.j9(", zipArchiveEntry0.toString());
      assertNull(zipArchiveEntry0.getComment());
      assertFalse(zipArchiveEntry0.isUnixSymlink());
      assertEquals((-1L), zipArchiveEntry0.getDataOffset());
      assertEquals(0, zipArchiveEntry0.getRawFlag());
      assertEquals("9SOzK.T>_.j9(", zipArchiveEntry0.getName());
      assertEquals((-1L), zipArchiveEntry0.getCrc());
      assertEquals(0, zipArchiveEntry0.getVersionMadeBy());
      assertEquals((-1L), zipArchiveEntry0.getSize());
      assertEquals(0, zipArchiveEntry0.getUnixMode());
      assertEquals(0, zipArchiveEntry0.getVersionRequired());
      assertEquals((-1L), zipArchiveEntry0.getCompressedSize());
      assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      
      zipArchiveOutputStream0.setUseLanguageEncodingFlag(false);
      assertTrue(file0.exists());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(1392409281320L, file0.lastModified());
      assertTrue(file0.canRead());
      assertEquals("/tmp/9SOzK.T>_.j9(09SOzK.T>_.j9(", file0.toString());
      assertTrue(file0.isFile());
      assertEquals("9SOzK.T>_.j9(09SOzK.T>_.j9(", file0.getName());
      assertEquals("/tmp", file0.getParent());
      assertTrue(file0.canExecute());
      assertEquals(0L, file0.length());
      assertEquals(0L, file0.getFreeSpace());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isDirectory());
      assertTrue(file0.canWrite());
      assertTrue(file0.isAbsolute());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertTrue(zipArchiveOutputStream0.isSeekable());
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      
      boolean boolean1 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      ZipArchiveOutputStream zipArchiveOutputStream1 = new ZipArchiveOutputStream(zipArchiveOutputStream0);
      assertFalse(zipArchiveOutputStream1.equals((Object)zipArchiveOutputStream0));
      assertTrue(file0.exists());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(1392409281320L, file0.lastModified());
      assertTrue(file0.canRead());
      assertEquals("/tmp/9SOzK.T>_.j9(09SOzK.T>_.j9(", file0.toString());
      assertTrue(file0.isFile());
      assertEquals("9SOzK.T>_.j9(09SOzK.T>_.j9(", file0.getName());
      assertEquals("/tmp", file0.getParent());
      assertTrue(file0.canExecute());
      assertEquals(0L, file0.length());
      assertEquals(0L, file0.getFreeSpace());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isDirectory());
      assertTrue(file0.canWrite());
      assertTrue(file0.isAbsolute());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertTrue(zipArchiveOutputStream0.isSeekable());
      assertEquals("UTF8", zipArchiveOutputStream1.getEncoding());
      assertFalse(zipArchiveOutputStream1.isSeekable());
      assertEquals(0, zipArchiveOutputStream1.getCount());
      assertEquals(0L, zipArchiveOutputStream1.getBytesWritten());
      assertNotNull(zipArchiveOutputStream1);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      
      ZipArchiveOutputStream.UnicodeExtraFieldPolicy zipArchiveOutputStream_UnicodeExtraFieldPolicy0 = ZipArchiveOutputStream.UnicodeExtraFieldPolicy.NOT_ENCODEABLE;
      assertEquals("not encodeable", zipArchiveOutputStream_UnicodeExtraFieldPolicy0.toString());
      assertNotNull(zipArchiveOutputStream_UnicodeExtraFieldPolicy0);
      
      zipArchiveOutputStream1.setCreateUnicodeExtraFields(zipArchiveOutputStream_UnicodeExtraFieldPolicy0);
      assertFalse(zipArchiveOutputStream0.equals((Object)zipArchiveOutputStream1));
      assertFalse(zipArchiveOutputStream1.equals((Object)zipArchiveOutputStream0));
      assertTrue(file0.exists());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(1392409281320L, file0.lastModified());
      assertTrue(file0.canRead());
      assertEquals("/tmp/9SOzK.T>_.j9(09SOzK.T>_.j9(", file0.toString());
      assertTrue(file0.isFile());
      assertEquals("9SOzK.T>_.j9(09SOzK.T>_.j9(", file0.getName());
      assertEquals("/tmp", file0.getParent());
      assertTrue(file0.canExecute());
      assertEquals(0L, file0.length());
      assertEquals(0L, file0.getFreeSpace());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isDirectory());
      assertTrue(file0.canWrite());
      assertTrue(file0.isAbsolute());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertTrue(zipArchiveOutputStream0.isSeekable());
      assertEquals("UTF8", zipArchiveOutputStream1.getEncoding());
      assertFalse(zipArchiveOutputStream1.isSeekable());
      assertEquals(0, zipArchiveOutputStream1.getCount());
      assertEquals(0L, zipArchiveOutputStream1.getBytesWritten());
      assertEquals("not encodeable", zipArchiveOutputStream_UnicodeExtraFieldPolicy0.toString());
      assertNotSame(zipArchiveOutputStream0, zipArchiveOutputStream1);
      assertNotSame(zipArchiveOutputStream1, zipArchiveOutputStream0);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      
      zipArchiveOutputStream1.putArchiveEntry(zipArchiveEntry0);
      assertFalse(zipArchiveOutputStream0.equals((Object)zipArchiveOutputStream1));
      assertFalse(zipArchiveOutputStream1.equals((Object)zipArchiveOutputStream0));
      assertTrue(file0.exists());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(1392409281320L, file0.lastModified());
      assertTrue(file0.canRead());
      assertEquals("/tmp/9SOzK.T>_.j9(09SOzK.T>_.j9(", file0.toString());
      assertTrue(file0.isFile());
      assertEquals("9SOzK.T>_.j9(09SOzK.T>_.j9(", file0.getName());
      assertEquals("/tmp", file0.getParent());
      assertTrue(file0.canExecute());
      assertEquals(0L, file0.length());
      assertEquals(0L, file0.getFreeSpace());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isDirectory());
      assertTrue(file0.canWrite());
      assertTrue(file0.isAbsolute());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertTrue(zipArchiveOutputStream0.isSeekable());
      assertFalse(zipArchiveEntry0.isStreamContiguous());
      assertEquals(0, zipArchiveEntry0.getInternalAttributes());
      assertFalse(zipArchiveEntry0.isDirectory());
      assertEquals(0, zipArchiveEntry0.getPlatform());
      assertEquals(8, zipArchiveEntry0.getMethod());
      assertEquals("9SOzK.T>_.j9(", zipArchiveEntry0.toString());
      assertNull(zipArchiveEntry0.getComment());
      assertFalse(zipArchiveEntry0.isUnixSymlink());
      assertEquals((-1L), zipArchiveEntry0.getDataOffset());
      assertEquals(0, zipArchiveEntry0.getRawFlag());
      assertEquals("9SOzK.T>_.j9(", zipArchiveEntry0.getName());
      assertEquals((-1L), zipArchiveEntry0.getCrc());
      assertEquals(0, zipArchiveEntry0.getVersionMadeBy());
      assertEquals((-1L), zipArchiveEntry0.getSize());
      assertEquals(0, zipArchiveEntry0.getUnixMode());
      assertEquals(0, zipArchiveEntry0.getVersionRequired());
      assertEquals((-1L), zipArchiveEntry0.getCompressedSize());
      assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
      assertEquals("UTF8", zipArchiveOutputStream1.getEncoding());
      assertFalse(zipArchiveOutputStream1.isSeekable());
      assertEquals(0, zipArchiveOutputStream1.getCount());
      assertEquals(0L, zipArchiveOutputStream1.getBytesWritten());
      assertNotSame(zipArchiveOutputStream0, zipArchiveOutputStream1);
      assertNotSame(zipArchiveOutputStream1, zipArchiveOutputStream0);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(file0);
      assertNotNull(mockFileInputStream0);
      
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(mockFileInputStream0);
      assertTrue(file0.exists());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(1392409281320L, file0.lastModified());
      assertTrue(file0.canRead());
      assertEquals("/tmp/9SOzK.T>_.j9(09SOzK.T>_.j9(", file0.toString());
      assertTrue(file0.isFile());
      assertEquals("9SOzK.T>_.j9(09SOzK.T>_.j9(", file0.getName());
      assertEquals("/tmp", file0.getParent());
      assertTrue(file0.canExecute());
      assertEquals(0L, file0.length());
      assertEquals(0L, file0.getFreeSpace());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isDirectory());
      assertTrue(file0.canWrite());
      assertTrue(file0.isAbsolute());
      assertNotNull(pushbackInputStream0);
      
      FileChannel fileChannel0 = mockFileInputStream0.getChannel();
      assertTrue(file0.exists());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(1392409281320L, file0.lastModified());
      assertTrue(file0.canRead());
      assertEquals("/tmp/9SOzK.T>_.j9(09SOzK.T>_.j9(", file0.toString());
      assertTrue(file0.isFile());
      assertEquals("9SOzK.T>_.j9(09SOzK.T>_.j9(", file0.getName());
      assertEquals("/tmp", file0.getParent());
      assertTrue(file0.canExecute());
      assertEquals(0L, file0.length());
      assertEquals(0L, file0.getFreeSpace());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isDirectory());
      assertTrue(file0.canWrite());
      assertTrue(file0.isAbsolute());
      assertTrue(fileChannel0.isOpen());
      assertNotNull(fileChannel0);
      
      ZipArchiveOutputStream zipArchiveOutputStream2 = new ZipArchiveOutputStream(fileChannel0);
      assertFalse(zipArchiveOutputStream2.equals((Object)zipArchiveOutputStream0));
      assertFalse(zipArchiveOutputStream2.equals((Object)zipArchiveOutputStream1));
      assertTrue(file0.exists());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(1392409281320L, file0.lastModified());
      assertTrue(file0.canRead());
      assertEquals("/tmp/9SOzK.T>_.j9(09SOzK.T>_.j9(", file0.toString());
      assertTrue(file0.isFile());
      assertEquals("9SOzK.T>_.j9(09SOzK.T>_.j9(", file0.getName());
      assertEquals("/tmp", file0.getParent());
      assertTrue(file0.canExecute());
      assertEquals(0L, file0.length());
      assertEquals(0L, file0.getFreeSpace());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isDirectory());
      assertTrue(file0.canWrite());
      assertTrue(file0.isAbsolute());
      assertTrue(fileChannel0.isOpen());
      assertEquals(0, zipArchiveOutputStream2.getCount());
      assertTrue(zipArchiveOutputStream2.isSeekable());
      assertEquals(0L, zipArchiveOutputStream2.getBytesWritten());
      assertEquals("UTF8", zipArchiveOutputStream2.getEncoding());
      assertNotNull(zipArchiveOutputStream2);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      
      // Undeclared exception!
//      try { 
        zipArchiveOutputStream2.addRawArchiveEntry(zipArchiveEntry0, pushbackInputStream0);
//        fail("Expecting exception: NonWritableChannelException");
      
//      } catch(NonWritableChannelException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.evosuite.runtime.mock.java.io.EvoFileChannel", e);
//      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      File file0 = MockFile.createTempFile("9SOzK.T>_.j9(", "9SOzK.T>_.j9(");
      assertEquals(0L, file0.length());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(0L, file0.getTotalSpace());
      assertFalse(file0.isDirectory());
      assertEquals(1392409281320L, file0.lastModified());
      assertTrue(file0.exists());
      assertEquals("9SOzK.T>_.j9(09SOzK.T>_.j9(", file0.getName());
      assertEquals("/tmp", file0.getParent());
      assertTrue(file0.canWrite());
      assertEquals("/tmp/9SOzK.T>_.j9(09SOzK.T>_.j9(", file0.toString());
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isHidden());
      assertTrue(file0.isFile());
      assertTrue(file0.canRead());
      assertTrue(file0.isAbsolute());
      assertTrue(file0.canExecute());
      assertNotNull(file0);
      
      File file1 = MockFile.createTempFile("9SOzK.T>_.j9(", "9SOzK.T>_.j9(");
      assertFalse(file1.equals((Object)file0));
      assertTrue(file1.isAbsolute());
      assertEquals("9SOzK.T>_.j9(19SOzK.T>_.j9(", file1.getName());
      assertTrue(file1.isFile());
      assertTrue(file1.canRead());
      assertTrue(file1.canWrite());
      assertEquals(0L, file1.getUsableSpace());
      assertFalse(file1.isHidden());
      assertEquals("/tmp/9SOzK.T>_.j9(19SOzK.T>_.j9(", file1.toString());
      assertEquals("/tmp", file1.getParent());
      assertFalse(file1.isDirectory());
      assertTrue(file1.exists());
      assertEquals(0L, file1.getFreeSpace());
      assertEquals(1392409281320L, file1.lastModified());
      assertEquals(0L, file1.length());
      assertEquals(0L, file1.getTotalSpace());
      assertTrue(file1.canExecute());
      assertNotNull(file1);
      assertNotSame(file1, file0);
      
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(file1);
      assertFalse(file1.equals((Object)file0));
      assertTrue(file1.isAbsolute());
      assertEquals("9SOzK.T>_.j9(19SOzK.T>_.j9(", file1.getName());
      assertTrue(file1.isFile());
      assertTrue(file1.canRead());
      assertTrue(file1.canWrite());
      assertEquals(0L, file1.getUsableSpace());
      assertFalse(file1.isHidden());
      assertEquals("/tmp/9SOzK.T>_.j9(19SOzK.T>_.j9(", file1.toString());
      assertEquals("/tmp", file1.getParent());
      assertFalse(file1.isDirectory());
      assertTrue(file1.exists());
      assertEquals(0L, file1.getFreeSpace());
      assertEquals(1392409281320L, file1.lastModified());
      assertEquals(0L, file1.length());
      assertEquals(0L, file1.getTotalSpace());
      assertTrue(file1.canExecute());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertTrue(zipArchiveOutputStream0.isSeekable());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertNotNull(zipArchiveOutputStream0);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      
      zipArchiveOutputStream0.writeCentralDirectoryEnd();
      assertFalse(file1.equals((Object)file0));
      assertTrue(file1.isAbsolute());
      assertEquals("9SOzK.T>_.j9(19SOzK.T>_.j9(", file1.getName());
      assertTrue(file1.isFile());
      assertTrue(file1.canRead());
      assertTrue(file1.canWrite());
      assertEquals(0L, file1.getUsableSpace());
      assertFalse(file1.isHidden());
      assertEquals("/tmp/9SOzK.T>_.j9(19SOzK.T>_.j9(", file1.toString());
      assertEquals("/tmp", file1.getParent());
      assertFalse(file1.isDirectory());
      assertTrue(file1.exists());
      assertEquals(0L, file1.getFreeSpace());
      assertEquals(1392409281320L, file1.lastModified());
      assertEquals(0L, file1.length());
      assertEquals(0L, file1.getTotalSpace());
      assertTrue(file1.canExecute());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertTrue(zipArchiveOutputStream0.isSeekable());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertNotSame(file1, file0);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, false);
      assertFalse(boolean0);
      
      boolean boolean1 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      boolean boolean2 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2);
      
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(8);
      assertEquals(0, byteArrayOutputStream0.size());
      assertEquals("", byteArrayOutputStream0.toString());
      assertNotNull(byteArrayOutputStream0);
      
      ZipArchiveOutputStream zipArchiveOutputStream1 = new ZipArchiveOutputStream(zipArchiveOutputStream0);
      assertFalse(file1.equals((Object)file0));
      assertFalse(zipArchiveOutputStream1.equals((Object)zipArchiveOutputStream0));
      assertTrue(file1.isAbsolute());
      assertEquals("9SOzK.T>_.j9(19SOzK.T>_.j9(", file1.getName());
      assertTrue(file1.isFile());
      assertTrue(file1.canRead());
      assertTrue(file1.canWrite());
      assertEquals(0L, file1.getUsableSpace());
      assertFalse(file1.isHidden());
      assertEquals("/tmp/9SOzK.T>_.j9(19SOzK.T>_.j9(", file1.toString());
      assertEquals("/tmp", file1.getParent());
      assertFalse(file1.isDirectory());
      assertTrue(file1.exists());
      assertEquals(0L, file1.getFreeSpace());
      assertEquals(1392409281320L, file1.lastModified());
      assertEquals(0L, file1.length());
      assertEquals(0L, file1.getTotalSpace());
      assertTrue(file1.canExecute());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertTrue(zipArchiveOutputStream0.isSeekable());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertEquals("UTF8", zipArchiveOutputStream1.getEncoding());
      assertEquals(0L, zipArchiveOutputStream1.getBytesWritten());
      assertFalse(zipArchiveOutputStream1.isSeekable());
      assertEquals(0, zipArchiveOutputStream1.getCount());
      assertNotNull(zipArchiveOutputStream1);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      
      ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry("9SOzK.T>_.j9(");
      assertEquals("9SOzK.T>_.j9(", zipArchiveEntry0.getName());
      assertEquals((-1L), zipArchiveEntry0.getSize());
      assertEquals(0, zipArchiveEntry0.getUnixMode());
      assertEquals(0, zipArchiveEntry0.getVersionMadeBy());
      assertEquals("9SOzK.T>_.j9(", zipArchiveEntry0.toString());
      assertEquals((-1L), zipArchiveEntry0.getDataOffset());
      assertEquals((-1L), zipArchiveEntry0.getCrc());
      assertEquals(0, zipArchiveEntry0.getRawFlag());
      assertNull(zipArchiveEntry0.getComment());
      assertFalse(zipArchiveEntry0.isUnixSymlink());
      assertEquals(0, zipArchiveEntry0.getInternalAttributes());
      assertFalse(zipArchiveEntry0.isDirectory());
      assertEquals(0, zipArchiveEntry0.getPlatform());
      assertFalse(zipArchiveEntry0.isStreamContiguous());
      assertEquals(0, zipArchiveEntry0.getVersionRequired());
      assertEquals((-1), zipArchiveEntry0.getMethod());
      assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
      assertEquals((-1L), zipArchiveEntry0.getCompressedSize());
      assertNotNull(zipArchiveEntry0);
      assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      
      zipArchiveEntry0.setCrc(8);
      assertEquals("9SOzK.T>_.j9(", zipArchiveEntry0.getName());
      assertEquals((-1L), zipArchiveEntry0.getSize());
      assertEquals(0, zipArchiveEntry0.getUnixMode());
      assertEquals(0, zipArchiveEntry0.getVersionMadeBy());
      assertEquals("9SOzK.T>_.j9(", zipArchiveEntry0.toString());
      assertEquals((-1L), zipArchiveEntry0.getDataOffset());
      assertEquals(0, zipArchiveEntry0.getRawFlag());
      assertNull(zipArchiveEntry0.getComment());
      assertEquals(8L, zipArchiveEntry0.getCrc());
      assertFalse(zipArchiveEntry0.isUnixSymlink());
      assertEquals(0, zipArchiveEntry0.getInternalAttributes());
      assertFalse(zipArchiveEntry0.isDirectory());
      assertEquals(0, zipArchiveEntry0.getPlatform());
      assertFalse(zipArchiveEntry0.isStreamContiguous());
      assertEquals(0, zipArchiveEntry0.getVersionRequired());
      assertEquals((-1), zipArchiveEntry0.getMethod());
      assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
      assertEquals((-1L), zipArchiveEntry0.getCompressedSize());
      assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      
      zipArchiveOutputStream0.putArchiveEntry(zipArchiveEntry0);
      assertFalse(file1.equals((Object)file0));
      assertFalse(zipArchiveOutputStream0.equals((Object)zipArchiveOutputStream1));
      assertTrue(file1.isAbsolute());
      assertEquals("9SOzK.T>_.j9(19SOzK.T>_.j9(", file1.getName());
      assertTrue(file1.isFile());
      assertTrue(file1.canRead());
      assertTrue(file1.canWrite());
      assertEquals(0L, file1.getUsableSpace());
      assertFalse(file1.isHidden());
      assertEquals("/tmp/9SOzK.T>_.j9(19SOzK.T>_.j9(", file1.toString());
      assertEquals("/tmp", file1.getParent());
      assertFalse(file1.isDirectory());
      assertTrue(file1.exists());
      assertEquals(0L, file1.getFreeSpace());
      assertEquals(1392409281320L, file1.lastModified());
      assertEquals(0L, file1.length());
      assertEquals(0L, file1.getTotalSpace());
      assertTrue(file1.canExecute());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertTrue(zipArchiveOutputStream0.isSeekable());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertEquals("9SOzK.T>_.j9(", zipArchiveEntry0.getName());
      assertEquals((-1L), zipArchiveEntry0.getSize());
      assertEquals(0, zipArchiveEntry0.getUnixMode());
      assertEquals(0, zipArchiveEntry0.getVersionMadeBy());
      assertEquals("9SOzK.T>_.j9(", zipArchiveEntry0.toString());
      assertEquals((-1L), zipArchiveEntry0.getDataOffset());
      assertEquals(0, zipArchiveEntry0.getRawFlag());
      assertNull(zipArchiveEntry0.getComment());
      assertEquals(8L, zipArchiveEntry0.getCrc());
      assertFalse(zipArchiveEntry0.isUnixSymlink());
      assertEquals(0, zipArchiveEntry0.getInternalAttributes());
      assertEquals(8, zipArchiveEntry0.getMethod());
      assertFalse(zipArchiveEntry0.isDirectory());
      assertEquals(0, zipArchiveEntry0.getPlatform());
      assertFalse(zipArchiveEntry0.isStreamContiguous());
      assertEquals(0, zipArchiveEntry0.getVersionRequired());
      assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
      assertEquals((-1L), zipArchiveEntry0.getCompressedSize());
      assertNotSame(file1, file0);
      assertNotSame(zipArchiveOutputStream0, zipArchiveOutputStream1);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      
      zipArchiveOutputStream1.setMethod(8);
      assertFalse(file1.equals((Object)file0));
      assertFalse(zipArchiveOutputStream0.equals((Object)zipArchiveOutputStream1));
      assertFalse(zipArchiveOutputStream1.equals((Object)zipArchiveOutputStream0));
      assertTrue(file1.isAbsolute());
      assertEquals("9SOzK.T>_.j9(19SOzK.T>_.j9(", file1.getName());
      assertTrue(file1.isFile());
      assertTrue(file1.canRead());
      assertTrue(file1.canWrite());
      assertEquals(0L, file1.getUsableSpace());
      assertFalse(file1.isHidden());
      assertEquals("/tmp/9SOzK.T>_.j9(19SOzK.T>_.j9(", file1.toString());
      assertEquals("/tmp", file1.getParent());
      assertFalse(file1.isDirectory());
      assertTrue(file1.exists());
      assertEquals(0L, file1.getFreeSpace());
      assertEquals(1392409281320L, file1.lastModified());
      assertEquals(0L, file1.length());
      assertEquals(0L, file1.getTotalSpace());
      assertTrue(file1.canExecute());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertTrue(zipArchiveOutputStream0.isSeekable());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertEquals("UTF8", zipArchiveOutputStream1.getEncoding());
      assertEquals(0L, zipArchiveOutputStream1.getBytesWritten());
      assertFalse(zipArchiveOutputStream1.isSeekable());
      assertEquals(0, zipArchiveOutputStream1.getCount());
      assertNotSame(file1, file0);
      assertNotSame(zipArchiveOutputStream0, zipArchiveOutputStream1);
      assertNotSame(zipArchiveOutputStream1, zipArchiveOutputStream0);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      
      zipArchiveOutputStream1.writeCentralDirectoryEnd();
      assertFalse(file1.equals((Object)file0));
      assertFalse(zipArchiveOutputStream0.equals((Object)zipArchiveOutputStream1));
      assertFalse(zipArchiveOutputStream1.equals((Object)zipArchiveOutputStream0));
      assertTrue(file1.isAbsolute());
      assertEquals("9SOzK.T>_.j9(19SOzK.T>_.j9(", file1.getName());
      assertTrue(file1.isFile());
      assertTrue(file1.canRead());
      assertTrue(file1.canWrite());
      assertEquals(0L, file1.getUsableSpace());
      assertFalse(file1.isHidden());
      assertEquals("/tmp/9SOzK.T>_.j9(19SOzK.T>_.j9(", file1.toString());
      assertEquals("/tmp", file1.getParent());
      assertFalse(file1.isDirectory());
      assertTrue(file1.exists());
      assertEquals(0L, file1.getFreeSpace());
      assertEquals(1392409281320L, file1.lastModified());
      assertEquals(0L, file1.length());
      assertEquals(0L, file1.getTotalSpace());
      assertTrue(file1.canExecute());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertTrue(zipArchiveOutputStream0.isSeekable());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertEquals("UTF8", zipArchiveOutputStream1.getEncoding());
      assertEquals(0L, zipArchiveOutputStream1.getBytesWritten());
      assertFalse(zipArchiveOutputStream1.isSeekable());
      assertEquals(0, zipArchiveOutputStream1.getCount());
      assertNotSame(file1, file0);
      assertNotSame(zipArchiveOutputStream0, zipArchiveOutputStream1);
      assertNotSame(zipArchiveOutputStream1, zipArchiveOutputStream0);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedInputStream0);
      
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(pipedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pushbackInputStream0);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)63;
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte)32;
      byteArray0[3] = (byte) (-43);
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)7;
      byteArray0[6] = (byte) (-82);
      byteArray0[7] = (byte) (-86);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte) (-43), 8);
      assertEquals(8, byteArrayInputStream0.available());
      assertNotNull(byteArrayInputStream0);
      assertEquals(8, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)63, (byte) (-1), (byte)32, (byte) (-43), (byte)0, (byte)7, (byte) (-82), (byte) (-86)}, byteArray0);
      
      // Undeclared exception!
//      try { 
        zipArchiveOutputStream1.addRawArchiveEntry(zipArchiveEntry0, byteArrayInputStream0);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.io.ByteArrayInputStream", e);
//      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      File file0 = MockFile.createTempFile("9SOzK.T>_.j9(", "9SOzK.T>_.j9(");
      assertEquals("9SOzK.T>_.j9(09SOzK.T>_.j9(", file0.getName());
      assertEquals(1392409281320L, file0.lastModified());
      assertTrue(file0.isFile());
      assertTrue(file0.isAbsolute());
      assertTrue(file0.canRead());
      assertTrue(file0.canWrite());
      assertTrue(file0.exists());
      assertFalse(file0.isHidden());
      assertEquals("/tmp/9SOzK.T>_.j9(09SOzK.T>_.j9(", file0.toString());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals("/tmp", file0.getParent());
      assertFalse(file0.isDirectory());
      assertEquals(0L, file0.length());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(0L, file0.getTotalSpace());
      assertTrue(file0.canExecute());
      assertNotNull(file0);
      
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(file0);
      assertEquals("9SOzK.T>_.j9(09SOzK.T>_.j9(", file0.getName());
      assertEquals(1392409281320L, file0.lastModified());
      assertTrue(file0.isFile());
      assertTrue(file0.isAbsolute());
      assertTrue(file0.canRead());
      assertTrue(file0.canWrite());
      assertTrue(file0.exists());
      assertFalse(file0.isHidden());
      assertEquals("/tmp/9SOzK.T>_.j9(09SOzK.T>_.j9(", file0.toString());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals("/tmp", file0.getParent());
      assertFalse(file0.isDirectory());
      assertEquals(0L, file0.length());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(0L, file0.getTotalSpace());
      assertTrue(file0.canExecute());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertTrue(zipArchiveOutputStream0.isSeekable());
      assertNotNull(zipArchiveOutputStream0);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      
      zipArchiveOutputStream0.writeCentralDirectoryEnd();
      assertEquals("9SOzK.T>_.j9(09SOzK.T>_.j9(", file0.getName());
      assertEquals(1392409281320L, file0.lastModified());
      assertTrue(file0.isFile());
      assertTrue(file0.isAbsolute());
      assertTrue(file0.canRead());
      assertTrue(file0.canWrite());
      assertTrue(file0.exists());
      assertFalse(file0.isHidden());
      assertEquals("/tmp/9SOzK.T>_.j9(09SOzK.T>_.j9(", file0.toString());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals("/tmp", file0.getParent());
      assertFalse(file0.isDirectory());
      assertEquals(0L, file0.length());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(0L, file0.getTotalSpace());
      assertTrue(file0.canExecute());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertTrue(zipArchiveOutputStream0.isSeekable());
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      
      ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry("9SOzK.T>_.j9(");
      assertEquals((-1), zipArchiveEntry0.getMethod());
      assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
      assertNull(zipArchiveEntry0.getComment());
      assertEquals((-1L), zipArchiveEntry0.getSize());
      assertEquals("9SOzK.T>_.j9(", zipArchiveEntry0.getName());
      assertEquals((-1L), zipArchiveEntry0.getCompressedSize());
      assertEquals(0, zipArchiveEntry0.getVersionRequired());
      assertFalse(zipArchiveEntry0.isDirectory());
      assertEquals((-1L), zipArchiveEntry0.getCrc());
      assertEquals(0, zipArchiveEntry0.getRawFlag());
      assertFalse(zipArchiveEntry0.isStreamContiguous());
      assertEquals(0, zipArchiveEntry0.getUnixMode());
      assertEquals(0, zipArchiveEntry0.getPlatform());
      assertEquals(0, zipArchiveEntry0.getVersionMadeBy());
      assertEquals("9SOzK.T>_.j9(", zipArchiveEntry0.toString());
      assertEquals((-1L), zipArchiveEntry0.getDataOffset());
      assertFalse(zipArchiveEntry0.isUnixSymlink());
      assertEquals(0, zipArchiveEntry0.getInternalAttributes());
      assertNotNull(zipArchiveEntry0);
      assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      
      boolean boolean0 = zipArchiveEntry0.equals(zipArchiveOutputStream0);
      assertEquals("9SOzK.T>_.j9(09SOzK.T>_.j9(", file0.getName());
      assertEquals(1392409281320L, file0.lastModified());
      assertTrue(file0.isFile());
      assertTrue(file0.isAbsolute());
      assertTrue(file0.canRead());
      assertTrue(file0.canWrite());
      assertTrue(file0.exists());
      assertFalse(file0.isHidden());
      assertEquals("/tmp/9SOzK.T>_.j9(09SOzK.T>_.j9(", file0.toString());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals("/tmp", file0.getParent());
      assertFalse(file0.isDirectory());
      assertEquals(0L, file0.length());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(0L, file0.getTotalSpace());
      assertTrue(file0.canExecute());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertTrue(zipArchiveOutputStream0.isSeekable());
      assertEquals((-1), zipArchiveEntry0.getMethod());
      assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
      assertNull(zipArchiveEntry0.getComment());
      assertEquals((-1L), zipArchiveEntry0.getSize());
      assertEquals("9SOzK.T>_.j9(", zipArchiveEntry0.getName());
      assertEquals((-1L), zipArchiveEntry0.getCompressedSize());
      assertEquals(0, zipArchiveEntry0.getVersionRequired());
      assertFalse(zipArchiveEntry0.isDirectory());
      assertEquals((-1L), zipArchiveEntry0.getCrc());
      assertEquals(0, zipArchiveEntry0.getRawFlag());
      assertFalse(zipArchiveEntry0.isStreamContiguous());
      assertEquals(0, zipArchiveEntry0.getUnixMode());
      assertEquals(0, zipArchiveEntry0.getPlatform());
      assertEquals(0, zipArchiveEntry0.getVersionMadeBy());
      assertEquals("9SOzK.T>_.j9(", zipArchiveEntry0.toString());
      assertEquals((-1L), zipArchiveEntry0.getDataOffset());
      assertFalse(zipArchiveEntry0.isUnixSymlink());
      assertEquals(0, zipArchiveEntry0.getInternalAttributes());
      assertFalse(boolean0);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      
      zipArchiveOutputStream0.putArchiveEntry(zipArchiveEntry0);
      assertEquals("9SOzK.T>_.j9(09SOzK.T>_.j9(", file0.getName());
      assertEquals(1392409281320L, file0.lastModified());
      assertTrue(file0.isFile());
      assertTrue(file0.isAbsolute());
      assertTrue(file0.canRead());
      assertTrue(file0.canWrite());
      assertTrue(file0.exists());
      assertFalse(file0.isHidden());
      assertEquals("/tmp/9SOzK.T>_.j9(09SOzK.T>_.j9(", file0.toString());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals("/tmp", file0.getParent());
      assertFalse(file0.isDirectory());
      assertEquals(0L, file0.length());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(0L, file0.getTotalSpace());
      assertTrue(file0.canExecute());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertTrue(zipArchiveOutputStream0.isSeekable());
      assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
      assertNull(zipArchiveEntry0.getComment());
      assertEquals((-1L), zipArchiveEntry0.getSize());
      assertEquals("9SOzK.T>_.j9(", zipArchiveEntry0.getName());
      assertEquals((-1L), zipArchiveEntry0.getCompressedSize());
      assertEquals(0, zipArchiveEntry0.getVersionRequired());
      assertFalse(zipArchiveEntry0.isDirectory());
      assertEquals(8, zipArchiveEntry0.getMethod());
      assertEquals((-1L), zipArchiveEntry0.getCrc());
      assertEquals(0, zipArchiveEntry0.getRawFlag());
      assertFalse(zipArchiveEntry0.isStreamContiguous());
      assertEquals(0, zipArchiveEntry0.getUnixMode());
      assertEquals(0, zipArchiveEntry0.getPlatform());
      assertEquals(0, zipArchiveEntry0.getVersionMadeBy());
      assertEquals("9SOzK.T>_.j9(", zipArchiveEntry0.toString());
      assertEquals((-1L), zipArchiveEntry0.getDataOffset());
      assertFalse(zipArchiveEntry0.isUnixSymlink());
      assertEquals(0, zipArchiveEntry0.getInternalAttributes());
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      
      zipArchiveOutputStream0.setUseLanguageEncodingFlag(false);
      assertEquals("9SOzK.T>_.j9(09SOzK.T>_.j9(", file0.getName());
      assertEquals(1392409281320L, file0.lastModified());
      assertTrue(file0.isFile());
      assertTrue(file0.isAbsolute());
      assertTrue(file0.canRead());
      assertTrue(file0.canWrite());
      assertTrue(file0.exists());
      assertFalse(file0.isHidden());
      assertEquals("/tmp/9SOzK.T>_.j9(09SOzK.T>_.j9(", file0.toString());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals("/tmp", file0.getParent());
      assertFalse(file0.isDirectory());
      assertEquals(0L, file0.length());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(0L, file0.getTotalSpace());
      assertTrue(file0.canExecute());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertTrue(zipArchiveOutputStream0.isSeekable());
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      
      boolean boolean1 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      ZipArchiveOutputStream zipArchiveOutputStream1 = new ZipArchiveOutputStream(zipArchiveOutputStream0);
      assertFalse(zipArchiveOutputStream1.equals((Object)zipArchiveOutputStream0));
      assertEquals("9SOzK.T>_.j9(09SOzK.T>_.j9(", file0.getName());
      assertEquals(1392409281320L, file0.lastModified());
      assertTrue(file0.isFile());
      assertTrue(file0.isAbsolute());
      assertTrue(file0.canRead());
      assertTrue(file0.canWrite());
      assertTrue(file0.exists());
      assertFalse(file0.isHidden());
      assertEquals("/tmp/9SOzK.T>_.j9(09SOzK.T>_.j9(", file0.toString());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals("/tmp", file0.getParent());
      assertFalse(file0.isDirectory());
      assertEquals(0L, file0.length());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(0L, file0.getTotalSpace());
      assertTrue(file0.canExecute());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertTrue(zipArchiveOutputStream0.isSeekable());
      assertFalse(zipArchiveOutputStream1.isSeekable());
      assertEquals(0L, zipArchiveOutputStream1.getBytesWritten());
      assertEquals("UTF8", zipArchiveOutputStream1.getEncoding());
      assertEquals(0, zipArchiveOutputStream1.getCount());
      assertNotNull(zipArchiveOutputStream1);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      
      ZipArchiveOutputStream.UnicodeExtraFieldPolicy zipArchiveOutputStream_UnicodeExtraFieldPolicy0 = ZipArchiveOutputStream.UnicodeExtraFieldPolicy.NOT_ENCODEABLE;
      assertEquals("not encodeable", zipArchiveOutputStream_UnicodeExtraFieldPolicy0.toString());
      assertNotNull(zipArchiveOutputStream_UnicodeExtraFieldPolicy0);
      
      zipArchiveOutputStream1.setCreateUnicodeExtraFields(zipArchiveOutputStream_UnicodeExtraFieldPolicy0);
      assertFalse(zipArchiveOutputStream0.equals((Object)zipArchiveOutputStream1));
      assertFalse(zipArchiveOutputStream1.equals((Object)zipArchiveOutputStream0));
      assertEquals("9SOzK.T>_.j9(09SOzK.T>_.j9(", file0.getName());
      assertEquals(1392409281320L, file0.lastModified());
      assertTrue(file0.isFile());
      assertTrue(file0.isAbsolute());
      assertTrue(file0.canRead());
      assertTrue(file0.canWrite());
      assertTrue(file0.exists());
      assertFalse(file0.isHidden());
      assertEquals("/tmp/9SOzK.T>_.j9(09SOzK.T>_.j9(", file0.toString());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals("/tmp", file0.getParent());
      assertFalse(file0.isDirectory());
      assertEquals(0L, file0.length());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(0L, file0.getTotalSpace());
      assertTrue(file0.canExecute());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertTrue(zipArchiveOutputStream0.isSeekable());
      assertFalse(zipArchiveOutputStream1.isSeekable());
      assertEquals(0L, zipArchiveOutputStream1.getBytesWritten());
      assertEquals("UTF8", zipArchiveOutputStream1.getEncoding());
      assertEquals(0, zipArchiveOutputStream1.getCount());
      assertEquals("not encodeable", zipArchiveOutputStream_UnicodeExtraFieldPolicy0.toString());
      assertNotSame(zipArchiveOutputStream0, zipArchiveOutputStream1);
      assertNotSame(zipArchiveOutputStream1, zipArchiveOutputStream0);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      
      zipArchiveEntry0.setCrc(0);
      assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
      assertNull(zipArchiveEntry0.getComment());
      assertEquals((-1L), zipArchiveEntry0.getSize());
      assertEquals("9SOzK.T>_.j9(", zipArchiveEntry0.getName());
      assertEquals((-1L), zipArchiveEntry0.getCompressedSize());
      assertEquals(0, zipArchiveEntry0.getVersionRequired());
      assertFalse(zipArchiveEntry0.isDirectory());
      assertEquals(8, zipArchiveEntry0.getMethod());
      assertEquals(0L, zipArchiveEntry0.getCrc());
      assertEquals(0, zipArchiveEntry0.getRawFlag());
      assertFalse(zipArchiveEntry0.isStreamContiguous());
      assertEquals(0, zipArchiveEntry0.getUnixMode());
      assertEquals(0, zipArchiveEntry0.getPlatform());
      assertEquals(0, zipArchiveEntry0.getVersionMadeBy());
      assertEquals("9SOzK.T>_.j9(", zipArchiveEntry0.toString());
      assertEquals((-1L), zipArchiveEntry0.getDataOffset());
      assertFalse(zipArchiveEntry0.isUnixSymlink());
      assertEquals(0, zipArchiveEntry0.getInternalAttributes());
      assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      
      zipArchiveOutputStream1.putArchiveEntry(zipArchiveEntry0);
      assertFalse(zipArchiveOutputStream0.equals((Object)zipArchiveOutputStream1));
      assertFalse(zipArchiveOutputStream1.equals((Object)zipArchiveOutputStream0));
      assertEquals("9SOzK.T>_.j9(09SOzK.T>_.j9(", file0.getName());
      assertEquals(1392409281320L, file0.lastModified());
      assertTrue(file0.isFile());
      assertTrue(file0.isAbsolute());
      assertTrue(file0.canRead());
      assertTrue(file0.canWrite());
      assertTrue(file0.exists());
      assertFalse(file0.isHidden());
      assertEquals("/tmp/9SOzK.T>_.j9(09SOzK.T>_.j9(", file0.toString());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals("/tmp", file0.getParent());
      assertFalse(file0.isDirectory());
      assertEquals(0L, file0.length());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(0L, file0.getTotalSpace());
      assertTrue(file0.canExecute());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertTrue(zipArchiveOutputStream0.isSeekable());
      assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
      assertNull(zipArchiveEntry0.getComment());
      assertEquals((-1L), zipArchiveEntry0.getSize());
      assertEquals("9SOzK.T>_.j9(", zipArchiveEntry0.getName());
      assertEquals((-1L), zipArchiveEntry0.getCompressedSize());
      assertEquals(0, zipArchiveEntry0.getVersionRequired());
      assertFalse(zipArchiveEntry0.isDirectory());
      assertEquals(8, zipArchiveEntry0.getMethod());
      assertEquals(0L, zipArchiveEntry0.getCrc());
      assertEquals(0, zipArchiveEntry0.getRawFlag());
      assertFalse(zipArchiveEntry0.isStreamContiguous());
      assertEquals(0, zipArchiveEntry0.getUnixMode());
      assertEquals(0, zipArchiveEntry0.getPlatform());
      assertEquals(0, zipArchiveEntry0.getVersionMadeBy());
      assertEquals("9SOzK.T>_.j9(", zipArchiveEntry0.toString());
      assertEquals((-1L), zipArchiveEntry0.getDataOffset());
      assertFalse(zipArchiveEntry0.isUnixSymlink());
      assertEquals(0, zipArchiveEntry0.getInternalAttributes());
      assertFalse(zipArchiveOutputStream1.isSeekable());
      assertEquals(0L, zipArchiveOutputStream1.getBytesWritten());
      assertEquals("UTF8", zipArchiveOutputStream1.getEncoding());
      assertEquals(0, zipArchiveOutputStream1.getCount());
      assertNotSame(zipArchiveOutputStream0, zipArchiveOutputStream1);
      assertNotSame(zipArchiveOutputStream1, zipArchiveOutputStream0);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      
      zipArchiveOutputStream1.setMethod(5);
      assertFalse(zipArchiveOutputStream0.equals((Object)zipArchiveOutputStream1));
      assertFalse(zipArchiveOutputStream1.equals((Object)zipArchiveOutputStream0));
      assertEquals("9SOzK.T>_.j9(09SOzK.T>_.j9(", file0.getName());
      assertEquals(1392409281320L, file0.lastModified());
      assertTrue(file0.isFile());
      assertTrue(file0.isAbsolute());
      assertTrue(file0.canRead());
      assertTrue(file0.canWrite());
      assertTrue(file0.exists());
      assertFalse(file0.isHidden());
      assertEquals("/tmp/9SOzK.T>_.j9(09SOzK.T>_.j9(", file0.toString());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals("/tmp", file0.getParent());
      assertFalse(file0.isDirectory());
      assertEquals(0L, file0.length());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(0L, file0.getTotalSpace());
      assertTrue(file0.canExecute());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertTrue(zipArchiveOutputStream0.isSeekable());
      assertFalse(zipArchiveOutputStream1.isSeekable());
      assertEquals(0L, zipArchiveOutputStream1.getBytesWritten());
      assertEquals("UTF8", zipArchiveOutputStream1.getEncoding());
      assertEquals(0, zipArchiveOutputStream1.getCount());
      assertNotSame(zipArchiveOutputStream0, zipArchiveOutputStream1);
      assertNotSame(zipArchiveOutputStream1, zipArchiveOutputStream0);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      
      zipArchiveOutputStream1.writeCentralDirectoryEnd();
      assertFalse(zipArchiveOutputStream0.equals((Object)zipArchiveOutputStream1));
      assertFalse(zipArchiveOutputStream1.equals((Object)zipArchiveOutputStream0));
      assertEquals("9SOzK.T>_.j9(09SOzK.T>_.j9(", file0.getName());
      assertEquals(1392409281320L, file0.lastModified());
      assertTrue(file0.isFile());
      assertTrue(file0.isAbsolute());
      assertTrue(file0.canRead());
      assertTrue(file0.canWrite());
      assertTrue(file0.exists());
      assertFalse(file0.isHidden());
      assertEquals("/tmp/9SOzK.T>_.j9(09SOzK.T>_.j9(", file0.toString());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals("/tmp", file0.getParent());
      assertFalse(file0.isDirectory());
      assertEquals(0L, file0.length());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(0L, file0.getTotalSpace());
      assertTrue(file0.canExecute());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertTrue(zipArchiveOutputStream0.isSeekable());
      assertFalse(zipArchiveOutputStream1.isSeekable());
      assertEquals(0L, zipArchiveOutputStream1.getBytesWritten());
      assertEquals("UTF8", zipArchiveOutputStream1.getEncoding());
      assertEquals(0, zipArchiveOutputStream1.getCount());
      assertNotSame(zipArchiveOutputStream0, zipArchiveOutputStream1);
      assertNotSame(zipArchiveOutputStream1, zipArchiveOutputStream0);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedInputStream0);
      
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(pipedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pushbackInputStream0);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)0;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertEquals(1, byteArrayInputStream0.available());
      assertNotNull(byteArrayInputStream0);
      assertEquals(1, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      
      zipArchiveOutputStream0.addRawArchiveEntry(zipArchiveEntry0, byteArrayInputStream0);
      assertFalse(zipArchiveOutputStream0.equals((Object)zipArchiveOutputStream1));
      assertEquals("9SOzK.T>_.j9(09SOzK.T>_.j9(", file0.getName());
      assertEquals(1392409281320L, file0.lastModified());
      assertTrue(file0.isFile());
      assertTrue(file0.isAbsolute());
      assertTrue(file0.canRead());
      assertTrue(file0.canWrite());
      assertTrue(file0.exists());
      assertFalse(file0.isHidden());
      assertEquals("/tmp/9SOzK.T>_.j9(09SOzK.T>_.j9(", file0.toString());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals("/tmp", file0.getParent());
      assertFalse(file0.isDirectory());
      assertEquals(0L, file0.length());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(0L, file0.getTotalSpace());
      assertTrue(file0.canExecute());
      assertEquals(1L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertTrue(zipArchiveOutputStream0.isSeekable());
      assertEquals(1, zipArchiveOutputStream0.getCount());
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
      assertNull(zipArchiveEntry0.getComment());
      assertEquals(53L, zipArchiveEntry0.getCompressedSize());
      assertEquals("9SOzK.T>_.j9(", zipArchiveEntry0.getName());
      assertEquals(85L, zipArchiveEntry0.getSize());
      assertEquals(0, zipArchiveEntry0.getVersionRequired());
      assertFalse(zipArchiveEntry0.isDirectory());
      assertEquals(8, zipArchiveEntry0.getMethod());
      assertEquals(3511839963L, zipArchiveEntry0.getCrc());
      assertEquals(0, zipArchiveEntry0.getRawFlag());
      assertFalse(zipArchiveEntry0.isStreamContiguous());
      assertEquals(0, zipArchiveEntry0.getUnixMode());
      assertEquals(0, zipArchiveEntry0.getPlatform());
      assertEquals(0, zipArchiveEntry0.getVersionMadeBy());
      assertEquals("9SOzK.T>_.j9(", zipArchiveEntry0.toString());
      assertEquals((-1L), zipArchiveEntry0.getDataOffset());
      assertFalse(zipArchiveEntry0.isUnixSymlink());
      assertEquals(0, zipArchiveEntry0.getInternalAttributes());
      assertEquals(1, byteArray0.length);
      assertNotSame(zipArchiveOutputStream0, zipArchiveOutputStream1);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      
      ZipArchiveEntry zipArchiveEntry1 = new ZipArchiveEntry(zipArchiveEntry0);
      assertTrue(zipArchiveEntry1.equals((Object)zipArchiveEntry0));
      assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
      assertNull(zipArchiveEntry0.getComment());
      assertEquals(53L, zipArchiveEntry0.getCompressedSize());
      assertEquals("9SOzK.T>_.j9(", zipArchiveEntry0.getName());
      assertEquals(85L, zipArchiveEntry0.getSize());
      assertEquals(0, zipArchiveEntry0.getVersionRequired());
      assertFalse(zipArchiveEntry0.isDirectory());
      assertEquals(8, zipArchiveEntry0.getMethod());
      assertEquals(3511839963L, zipArchiveEntry0.getCrc());
      assertEquals(0, zipArchiveEntry0.getRawFlag());
      assertFalse(zipArchiveEntry0.isStreamContiguous());
      assertEquals(0, zipArchiveEntry0.getUnixMode());
      assertEquals(0, zipArchiveEntry0.getPlatform());
      assertEquals(0, zipArchiveEntry0.getVersionMadeBy());
      assertEquals("9SOzK.T>_.j9(", zipArchiveEntry0.toString());
      assertEquals((-1L), zipArchiveEntry0.getDataOffset());
      assertFalse(zipArchiveEntry0.isUnixSymlink());
      assertEquals(0, zipArchiveEntry0.getInternalAttributes());
      assertFalse(zipArchiveEntry1.isDirectory());
      assertFalse(zipArchiveEntry1.isUnixSymlink());
      assertEquals(8, zipArchiveEntry1.getMethod());
      assertEquals(0, zipArchiveEntry1.getVersionRequired());
      assertEquals(3511839963L, zipArchiveEntry1.getCrc());
      assertFalse(zipArchiveEntry1.isStreamContiguous());
      assertEquals(85L, zipArchiveEntry1.getSize());
      assertEquals("9SOzK.T>_.j9(", zipArchiveEntry1.getName());
      assertEquals(0L, zipArchiveEntry1.getExternalAttributes());
      assertEquals("9SOzK.T>_.j9(", zipArchiveEntry1.toString());
      assertEquals((-1L), zipArchiveEntry1.getDataOffset());
      assertNull(zipArchiveEntry1.getComment());
      assertEquals(0, zipArchiveEntry1.getPlatform());
      assertEquals(0, zipArchiveEntry1.getRawFlag());
      assertEquals(0, zipArchiveEntry1.getInternalAttributes());
      assertEquals(53L, zipArchiveEntry1.getCompressedSize());
      assertEquals(0, zipArchiveEntry1.getUnixMode());
      assertEquals(0, zipArchiveEntry1.getVersionMadeBy());
      assertNotNull(zipArchiveEntry1);
      assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      
      // Undeclared exception!
//      try { 
        zipArchiveOutputStream1.writeLocalFileHeader(zipArchiveEntry1);
//        fail("Expecting exception: IllegalStateException");
      
//      } catch(IllegalStateException e) {
//         //
//         // No current entry
//         //
//         verifyException("org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream", e);
//      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      File file0 = MockFile.createTempFile("9SOzK.T>_.j9(", "wcsdgq");
      assertEquals(0L, file0.getTotalSpace());
      assertEquals("/tmp/9SOzK.T>_.j9(0wcsdgq", file0.toString());
      assertTrue(file0.isFile());
      assertEquals(1392409281320L, file0.lastModified());
      assertTrue(file0.canRead());
      assertTrue(file0.exists());
      assertEquals("9SOzK.T>_.j9(0wcsdgq", file0.getName());
      assertTrue(file0.canExecute());
      assertEquals("/tmp", file0.getParent());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals(0L, file0.length());
      assertEquals(0L, file0.getFreeSpace());
      assertFalse(file0.isHidden());
      assertFalse(file0.isDirectory());
      assertTrue(file0.canWrite());
      assertTrue(file0.isAbsolute());
      assertNotNull(file0);
      
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(file0);
      assertEquals(0L, file0.getTotalSpace());
      assertEquals("/tmp/9SOzK.T>_.j9(0wcsdgq", file0.toString());
      assertTrue(file0.isFile());
      assertEquals(1392409281320L, file0.lastModified());
      assertTrue(file0.canRead());
      assertTrue(file0.exists());
      assertEquals("9SOzK.T>_.j9(0wcsdgq", file0.getName());
      assertTrue(file0.canExecute());
      assertEquals("/tmp", file0.getParent());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals(0L, file0.length());
      assertEquals(0L, file0.getFreeSpace());
      assertFalse(file0.isHidden());
      assertFalse(file0.isDirectory());
      assertTrue(file0.canWrite());
      assertTrue(file0.isAbsolute());
      assertTrue(zipArchiveOutputStream0.isSeekable());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertNotNull(zipArchiveOutputStream0);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      
      zipArchiveOutputStream0.writeCentralDirectoryEnd();
      assertEquals(0L, file0.getTotalSpace());
      assertEquals("/tmp/9SOzK.T>_.j9(0wcsdgq", file0.toString());
      assertTrue(file0.isFile());
      assertEquals(1392409281320L, file0.lastModified());
      assertTrue(file0.canRead());
      assertTrue(file0.exists());
      assertEquals("9SOzK.T>_.j9(0wcsdgq", file0.getName());
      assertTrue(file0.canExecute());
      assertEquals("/tmp", file0.getParent());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals(0L, file0.length());
      assertEquals(0L, file0.getFreeSpace());
      assertFalse(file0.isHidden());
      assertFalse(file0.isDirectory());
      assertTrue(file0.canWrite());
      assertTrue(file0.isAbsolute());
      assertTrue(zipArchiveOutputStream0.isSeekable());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      
      ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry("wcsdgq");
      assertEquals("wcsdgq", zipArchiveEntry0.getName());
      assertFalse(zipArchiveEntry0.isStreamContiguous());
      assertEquals("wcsdgq", zipArchiveEntry0.toString());
      assertFalse(zipArchiveEntry0.isDirectory());
      assertEquals(0, zipArchiveEntry0.getPlatform());
      assertNull(zipArchiveEntry0.getComment());
      assertEquals(0, zipArchiveEntry0.getInternalAttributes());
      assertEquals((-1L), zipArchiveEntry0.getDataOffset());
      assertFalse(zipArchiveEntry0.isUnixSymlink());
      assertEquals(0, zipArchiveEntry0.getVersionMadeBy());
      assertEquals((-1L), zipArchiveEntry0.getCrc());
      assertEquals(0, zipArchiveEntry0.getRawFlag());
      assertEquals(0, zipArchiveEntry0.getUnixMode());
      assertEquals((-1L), zipArchiveEntry0.getSize());
      assertEquals(0, zipArchiveEntry0.getVersionRequired());
      assertEquals((-1), zipArchiveEntry0.getMethod());
      assertEquals((-1L), zipArchiveEntry0.getCompressedSize());
      assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
      assertNotNull(zipArchiveEntry0);
      assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      
      ZipArchiveOutputStream.UnicodeExtraFieldPolicy zipArchiveOutputStream_UnicodeExtraFieldPolicy0 = ZipArchiveOutputStream.UnicodeExtraFieldPolicy.ALWAYS;
      assertEquals("always", zipArchiveOutputStream_UnicodeExtraFieldPolicy0.toString());
      assertNotNull(zipArchiveOutputStream_UnicodeExtraFieldPolicy0);
      
      zipArchiveOutputStream0.setCreateUnicodeExtraFields(zipArchiveOutputStream_UnicodeExtraFieldPolicy0);
      assertEquals(0L, file0.getTotalSpace());
      assertEquals("/tmp/9SOzK.T>_.j9(0wcsdgq", file0.toString());
      assertTrue(file0.isFile());
      assertEquals(1392409281320L, file0.lastModified());
      assertTrue(file0.canRead());
      assertTrue(file0.exists());
      assertEquals("9SOzK.T>_.j9(0wcsdgq", file0.getName());
      assertTrue(file0.canExecute());
      assertEquals("/tmp", file0.getParent());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals(0L, file0.length());
      assertEquals(0L, file0.getFreeSpace());
      assertFalse(file0.isHidden());
      assertFalse(file0.isDirectory());
      assertTrue(file0.canWrite());
      assertTrue(file0.isAbsolute());
      assertTrue(zipArchiveOutputStream0.isSeekable());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertEquals("always", zipArchiveOutputStream_UnicodeExtraFieldPolicy0.toString());
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      
      zipArchiveOutputStream0.putArchiveEntry(zipArchiveEntry0);
      assertEquals(0L, file0.getTotalSpace());
      assertEquals("/tmp/9SOzK.T>_.j9(0wcsdgq", file0.toString());
      assertTrue(file0.isFile());
      assertEquals(1392409281320L, file0.lastModified());
      assertTrue(file0.canRead());
      assertTrue(file0.exists());
      assertEquals("9SOzK.T>_.j9(0wcsdgq", file0.getName());
      assertTrue(file0.canExecute());
      assertEquals("/tmp", file0.getParent());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals(0L, file0.length());
      assertEquals(0L, file0.getFreeSpace());
      assertFalse(file0.isHidden());
      assertFalse(file0.isDirectory());
      assertTrue(file0.canWrite());
      assertTrue(file0.isAbsolute());
      assertTrue(zipArchiveOutputStream0.isSeekable());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertEquals("wcsdgq", zipArchiveEntry0.getName());
      assertFalse(zipArchiveEntry0.isStreamContiguous());
      assertEquals("wcsdgq", zipArchiveEntry0.toString());
      assertFalse(zipArchiveEntry0.isDirectory());
      assertEquals(8, zipArchiveEntry0.getMethod());
      assertEquals(0, zipArchiveEntry0.getPlatform());
      assertNull(zipArchiveEntry0.getComment());
      assertEquals(0, zipArchiveEntry0.getInternalAttributes());
      assertEquals((-1L), zipArchiveEntry0.getDataOffset());
      assertFalse(zipArchiveEntry0.isUnixSymlink());
      assertEquals(0, zipArchiveEntry0.getVersionMadeBy());
      assertEquals((-1L), zipArchiveEntry0.getCrc());
      assertEquals(0, zipArchiveEntry0.getRawFlag());
      assertEquals(0, zipArchiveEntry0.getUnixMode());
      assertEquals((-1L), zipArchiveEntry0.getSize());
      assertEquals(0, zipArchiveEntry0.getVersionRequired());
      assertEquals((-1L), zipArchiveEntry0.getCompressedSize());
      assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      
      boolean boolean0 = zipArchiveOutputStream0.isSeekable();
      assertEquals(0L, file0.getTotalSpace());
      assertEquals("/tmp/9SOzK.T>_.j9(0wcsdgq", file0.toString());
      assertTrue(file0.isFile());
      assertEquals(1392409281320L, file0.lastModified());
      assertTrue(file0.canRead());
      assertTrue(file0.exists());
      assertEquals("9SOzK.T>_.j9(0wcsdgq", file0.getName());
      assertTrue(file0.canExecute());
      assertEquals("/tmp", file0.getParent());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals(0L, file0.length());
      assertEquals(0L, file0.getFreeSpace());
      assertFalse(file0.isHidden());
      assertFalse(file0.isDirectory());
      assertTrue(file0.canWrite());
      assertTrue(file0.isAbsolute());
      assertTrue(zipArchiveOutputStream0.isSeekable());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertTrue(boolean0);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      
      zipArchiveOutputStream0.putArchiveEntry(zipArchiveEntry0);
      assertEquals(0L, file0.getTotalSpace());
      assertEquals("/tmp/9SOzK.T>_.j9(0wcsdgq", file0.toString());
      assertTrue(file0.isFile());
      assertEquals(1392409281320L, file0.lastModified());
      assertTrue(file0.canRead());
      assertTrue(file0.exists());
      assertEquals("9SOzK.T>_.j9(0wcsdgq", file0.getName());
      assertTrue(file0.canExecute());
      assertEquals("/tmp", file0.getParent());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals(0L, file0.length());
      assertEquals(0L, file0.getFreeSpace());
      assertFalse(file0.isHidden());
      assertFalse(file0.isDirectory());
      assertTrue(file0.canWrite());
      assertTrue(file0.isAbsolute());
      assertTrue(zipArchiveOutputStream0.isSeekable());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertEquals("wcsdgq", zipArchiveEntry0.getName());
      assertFalse(zipArchiveEntry0.isStreamContiguous());
      assertEquals("wcsdgq", zipArchiveEntry0.toString());
      assertFalse(zipArchiveEntry0.isDirectory());
      assertEquals(8, zipArchiveEntry0.getMethod());
      assertEquals(0, zipArchiveEntry0.getPlatform());
      assertNull(zipArchiveEntry0.getComment());
      assertEquals(0, zipArchiveEntry0.getInternalAttributes());
      assertEquals((-1L), zipArchiveEntry0.getDataOffset());
      assertFalse(zipArchiveEntry0.isUnixSymlink());
      assertEquals(0, zipArchiveEntry0.getVersionMadeBy());
      assertEquals(0L, zipArchiveEntry0.getCrc());
      assertEquals(0, zipArchiveEntry0.getRawFlag());
      assertEquals(0, zipArchiveEntry0.getUnixMode());
      assertEquals(0L, zipArchiveEntry0.getSize());
      assertEquals(0, zipArchiveEntry0.getVersionRequired());
      assertEquals(2L, zipArchiveEntry0.getCompressedSize());
      assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      
      zipArchiveOutputStream0.setMethod(0);
      assertEquals(0L, file0.getTotalSpace());
      assertEquals("/tmp/9SOzK.T>_.j9(0wcsdgq", file0.toString());
      assertTrue(file0.isFile());
      assertEquals(1392409281320L, file0.lastModified());
      assertTrue(file0.canRead());
      assertTrue(file0.exists());
      assertEquals("9SOzK.T>_.j9(0wcsdgq", file0.getName());
      assertTrue(file0.canExecute());
      assertEquals("/tmp", file0.getParent());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals(0L, file0.length());
      assertEquals(0L, file0.getFreeSpace());
      assertFalse(file0.isHidden());
      assertFalse(file0.isDirectory());
      assertTrue(file0.canWrite());
      assertTrue(file0.isAbsolute());
      assertTrue(zipArchiveOutputStream0.isSeekable());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(file0);
      assertNotNull(mockFileInputStream0);
      
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(mockFileInputStream0);
      assertEquals(0L, file0.getTotalSpace());
      assertEquals("/tmp/9SOzK.T>_.j9(0wcsdgq", file0.toString());
      assertTrue(file0.isFile());
      assertEquals(1392409281320L, file0.lastModified());
      assertTrue(file0.canRead());
      assertTrue(file0.exists());
      assertEquals("9SOzK.T>_.j9(0wcsdgq", file0.getName());
      assertTrue(file0.canExecute());
      assertEquals("/tmp", file0.getParent());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals(0L, file0.length());
      assertEquals(0L, file0.getFreeSpace());
      assertFalse(file0.isHidden());
      assertFalse(file0.isDirectory());
      assertTrue(file0.canWrite());
      assertTrue(file0.isAbsolute());
      assertEquals(0, mockFileInputStream0.available());
      assertNotNull(pushbackInputStream0);
      
      zipArchiveOutputStream0.addRawArchiveEntry(zipArchiveEntry0, mockFileInputStream0);
      assertEquals(0L, file0.getTotalSpace());
      assertEquals("/tmp/9SOzK.T>_.j9(0wcsdgq", file0.toString());
      assertTrue(file0.isFile());
      assertEquals(1392409281320L, file0.lastModified());
      assertTrue(file0.canRead());
      assertTrue(file0.exists());
      assertEquals("9SOzK.T>_.j9(0wcsdgq", file0.getName());
      assertTrue(file0.canExecute());
      assertEquals("/tmp", file0.getParent());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals(0L, file0.length());
      assertEquals(0L, file0.getFreeSpace());
      assertFalse(file0.isHidden());
      assertFalse(file0.isDirectory());
      assertTrue(file0.canWrite());
      assertTrue(file0.isAbsolute());
      assertTrue(zipArchiveOutputStream0.isSeekable());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertEquals("wcsdgq", zipArchiveEntry0.getName());
      assertFalse(zipArchiveEntry0.isStreamContiguous());
      assertEquals("wcsdgq", zipArchiveEntry0.toString());
      assertFalse(zipArchiveEntry0.isDirectory());
      assertEquals(8, zipArchiveEntry0.getMethod());
      assertEquals(0, zipArchiveEntry0.getPlatform());
      assertNull(zipArchiveEntry0.getComment());
      assertEquals(0, zipArchiveEntry0.getInternalAttributes());
      assertEquals((-1L), zipArchiveEntry0.getDataOffset());
      assertFalse(zipArchiveEntry0.isUnixSymlink());
      assertEquals(0, zipArchiveEntry0.getVersionMadeBy());
      assertEquals(0L, zipArchiveEntry0.getCrc());
      assertEquals(0, zipArchiveEntry0.getRawFlag());
      assertEquals(0, zipArchiveEntry0.getUnixMode());
      assertEquals(0L, zipArchiveEntry0.getSize());
      assertEquals(0, zipArchiveEntry0.getVersionRequired());
      assertEquals(2L, zipArchiveEntry0.getCompressedSize());
      assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
      assertEquals((-1), mockFileInputStream0.available());
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      
      ZipArchiveOutputStream zipArchiveOutputStream1 = new ZipArchiveOutputStream(zipArchiveOutputStream0);
      assertFalse(zipArchiveOutputStream1.equals((Object)zipArchiveOutputStream0));
      assertEquals(0L, file0.getTotalSpace());
      assertEquals("/tmp/9SOzK.T>_.j9(0wcsdgq", file0.toString());
      assertTrue(file0.isFile());
      assertEquals(1392409281320L, file0.lastModified());
      assertTrue(file0.canRead());
      assertTrue(file0.exists());
      assertEquals("9SOzK.T>_.j9(0wcsdgq", file0.getName());
      assertTrue(file0.canExecute());
      assertEquals("/tmp", file0.getParent());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals(0L, file0.length());
      assertEquals(0L, file0.getFreeSpace());
      assertFalse(file0.isHidden());
      assertFalse(file0.isDirectory());
      assertTrue(file0.canWrite());
      assertTrue(file0.isAbsolute());
      assertTrue(zipArchiveOutputStream0.isSeekable());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertEquals(0L, zipArchiveOutputStream1.getBytesWritten());
      assertEquals(0, zipArchiveOutputStream1.getCount());
      assertEquals("UTF8", zipArchiveOutputStream1.getEncoding());
      assertFalse(zipArchiveOutputStream1.isSeekable());
      assertNotNull(zipArchiveOutputStream1);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      
      zipArchiveOutputStream1.setEncoding((String) null);
      assertFalse(zipArchiveOutputStream0.equals((Object)zipArchiveOutputStream1));
      assertFalse(zipArchiveOutputStream1.equals((Object)zipArchiveOutputStream0));
      assertEquals(0L, file0.getTotalSpace());
      assertEquals("/tmp/9SOzK.T>_.j9(0wcsdgq", file0.toString());
      assertTrue(file0.isFile());
      assertEquals(1392409281320L, file0.lastModified());
      assertTrue(file0.canRead());
      assertTrue(file0.exists());
      assertEquals("9SOzK.T>_.j9(0wcsdgq", file0.getName());
      assertTrue(file0.canExecute());
      assertEquals("/tmp", file0.getParent());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals(0L, file0.length());
      assertEquals(0L, file0.getFreeSpace());
      assertFalse(file0.isHidden());
      assertFalse(file0.isDirectory());
      assertTrue(file0.canWrite());
      assertTrue(file0.isAbsolute());
      assertTrue(zipArchiveOutputStream0.isSeekable());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertEquals(0L, zipArchiveOutputStream1.getBytesWritten());
      assertEquals(0, zipArchiveOutputStream1.getCount());
      assertFalse(zipArchiveOutputStream1.isSeekable());
      assertNull(zipArchiveOutputStream1.getEncoding());
      assertNotSame(zipArchiveOutputStream0, zipArchiveOutputStream1);
      assertNotSame(zipArchiveOutputStream1, zipArchiveOutputStream0);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      
      boolean boolean1 = zipArchiveOutputStream1.canWriteEntryData(zipArchiveEntry0);
      assertFalse(zipArchiveOutputStream0.equals((Object)zipArchiveOutputStream1));
      assertFalse(zipArchiveOutputStream1.equals((Object)zipArchiveOutputStream0));
      assertTrue(boolean1 == boolean0);
      assertEquals(0L, file0.getTotalSpace());
      assertEquals("/tmp/9SOzK.T>_.j9(0wcsdgq", file0.toString());
      assertTrue(file0.isFile());
      assertEquals(1392409281320L, file0.lastModified());
      assertTrue(file0.canRead());
      assertTrue(file0.exists());
      assertEquals("9SOzK.T>_.j9(0wcsdgq", file0.getName());
      assertTrue(file0.canExecute());
      assertEquals("/tmp", file0.getParent());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals(0L, file0.length());
      assertEquals(0L, file0.getFreeSpace());
      assertFalse(file0.isHidden());
      assertFalse(file0.isDirectory());
      assertTrue(file0.canWrite());
      assertTrue(file0.isAbsolute());
      assertTrue(zipArchiveOutputStream0.isSeekable());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertEquals("wcsdgq", zipArchiveEntry0.getName());
      assertFalse(zipArchiveEntry0.isStreamContiguous());
      assertEquals("wcsdgq", zipArchiveEntry0.toString());
      assertFalse(zipArchiveEntry0.isDirectory());
      assertEquals(8, zipArchiveEntry0.getMethod());
      assertEquals(0, zipArchiveEntry0.getPlatform());
      assertNull(zipArchiveEntry0.getComment());
      assertEquals(0, zipArchiveEntry0.getInternalAttributes());
      assertEquals((-1L), zipArchiveEntry0.getDataOffset());
      assertFalse(zipArchiveEntry0.isUnixSymlink());
      assertEquals(0, zipArchiveEntry0.getVersionMadeBy());
      assertEquals(0L, zipArchiveEntry0.getCrc());
      assertEquals(0, zipArchiveEntry0.getRawFlag());
      assertEquals(0, zipArchiveEntry0.getUnixMode());
      assertEquals(0L, zipArchiveEntry0.getSize());
      assertEquals(0, zipArchiveEntry0.getVersionRequired());
      assertEquals(2L, zipArchiveEntry0.getCompressedSize());
      assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
      assertEquals(0L, zipArchiveOutputStream1.getBytesWritten());
      assertEquals(0, zipArchiveOutputStream1.getCount());
      assertFalse(zipArchiveOutputStream1.isSeekable());
      assertNull(zipArchiveOutputStream1.getEncoding());
      assertNotSame(zipArchiveOutputStream0, zipArchiveOutputStream1);
      assertNotSame(zipArchiveOutputStream1, zipArchiveOutputStream0);
      assertTrue(boolean1);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      
      // Undeclared exception!
//      try { 
        zipArchiveOutputStream1.writeDataDescriptor(zipArchiveEntry0);
//        fail("Expecting exception: IllegalStateException");
      
//      } catch(IllegalStateException e) {
//         //
//         // No current entry
//         //
//         verifyException("org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream", e);
//      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      File file0 = MockFile.createTempFile("9SOzK.T>_.j9(", "9SOzK.T>_.j9(");
      assertTrue(file0.canRead());
      assertTrue(file0.canExecute());
      assertTrue(file0.isFile());
      assertEquals("/tmp/9SOzK.T>_.j9(09SOzK.T>_.j9(", file0.toString());
      assertTrue(file0.canWrite());
      assertFalse(file0.isHidden());
      assertTrue(file0.isAbsolute());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(0L, file0.length());
      assertFalse(file0.isDirectory());
      assertTrue(file0.exists());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals("9SOzK.T>_.j9(09SOzK.T>_.j9(", file0.getName());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals("/tmp", file0.getParent());
      assertNotNull(file0);
      
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(file0);
      assertTrue(file0.canRead());
      assertTrue(file0.canExecute());
      assertTrue(file0.isFile());
      assertEquals("/tmp/9SOzK.T>_.j9(09SOzK.T>_.j9(", file0.toString());
      assertTrue(file0.canWrite());
      assertFalse(file0.isHidden());
      assertTrue(file0.isAbsolute());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(0L, file0.length());
      assertFalse(file0.isDirectory());
      assertTrue(file0.exists());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals("9SOzK.T>_.j9(09SOzK.T>_.j9(", file0.getName());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals("/tmp", file0.getParent());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertTrue(zipArchiveOutputStream0.isSeekable());
      assertNotNull(zipArchiveOutputStream0);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      
      zipArchiveOutputStream0.writeCentralDirectoryEnd();
      assertTrue(file0.canRead());
      assertTrue(file0.canExecute());
      assertTrue(file0.isFile());
      assertEquals("/tmp/9SOzK.T>_.j9(09SOzK.T>_.j9(", file0.toString());
      assertTrue(file0.canWrite());
      assertFalse(file0.isHidden());
      assertTrue(file0.isAbsolute());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(0L, file0.length());
      assertFalse(file0.isDirectory());
      assertTrue(file0.exists());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals("9SOzK.T>_.j9(09SOzK.T>_.j9(", file0.getName());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals("/tmp", file0.getParent());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertTrue(zipArchiveOutputStream0.isSeekable());
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      
      ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry("9SOzK.T>_.j9(");
      assertEquals((-1), zipArchiveEntry0.getMethod());
      assertNull(zipArchiveEntry0.getComment());
      assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
      assertEquals(0, zipArchiveEntry0.getInternalAttributes());
      assertEquals("9SOzK.T>_.j9(", zipArchiveEntry0.getName());
      assertEquals((-1L), zipArchiveEntry0.getSize());
      assertEquals((-1L), zipArchiveEntry0.getDataOffset());
      assertEquals("9SOzK.T>_.j9(", zipArchiveEntry0.toString());
      assertFalse(zipArchiveEntry0.isDirectory());
      assertFalse(zipArchiveEntry0.isStreamContiguous());
      assertEquals((-1L), zipArchiveEntry0.getCrc());
      assertEquals(0, zipArchiveEntry0.getVersionRequired());
      assertEquals((-1L), zipArchiveEntry0.getCompressedSize());
      assertFalse(zipArchiveEntry0.isUnixSymlink());
      assertEquals(0, zipArchiveEntry0.getVersionMadeBy());
      assertEquals(0, zipArchiveEntry0.getUnixMode());
      assertEquals(0, zipArchiveEntry0.getPlatform());
      assertEquals(0, zipArchiveEntry0.getRawFlag());
      assertNotNull(zipArchiveEntry0);
      assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      
      boolean boolean0 = zipArchiveEntry0.equals(zipArchiveOutputStream0);
      assertTrue(file0.canRead());
      assertTrue(file0.canExecute());
      assertTrue(file0.isFile());
      assertEquals("/tmp/9SOzK.T>_.j9(09SOzK.T>_.j9(", file0.toString());
      assertTrue(file0.canWrite());
      assertFalse(file0.isHidden());
      assertTrue(file0.isAbsolute());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(0L, file0.length());
      assertFalse(file0.isDirectory());
      assertTrue(file0.exists());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals("9SOzK.T>_.j9(09SOzK.T>_.j9(", file0.getName());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals("/tmp", file0.getParent());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertTrue(zipArchiveOutputStream0.isSeekable());
      assertEquals((-1), zipArchiveEntry0.getMethod());
      assertNull(zipArchiveEntry0.getComment());
      assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
      assertEquals(0, zipArchiveEntry0.getInternalAttributes());
      assertEquals("9SOzK.T>_.j9(", zipArchiveEntry0.getName());
      assertEquals((-1L), zipArchiveEntry0.getSize());
      assertEquals((-1L), zipArchiveEntry0.getDataOffset());
      assertEquals("9SOzK.T>_.j9(", zipArchiveEntry0.toString());
      assertFalse(zipArchiveEntry0.isDirectory());
      assertFalse(zipArchiveEntry0.isStreamContiguous());
      assertEquals((-1L), zipArchiveEntry0.getCrc());
      assertEquals(0, zipArchiveEntry0.getVersionRequired());
      assertEquals((-1L), zipArchiveEntry0.getCompressedSize());
      assertFalse(zipArchiveEntry0.isUnixSymlink());
      assertEquals(0, zipArchiveEntry0.getVersionMadeBy());
      assertEquals(0, zipArchiveEntry0.getUnixMode());
      assertEquals(0, zipArchiveEntry0.getPlatform());
      assertEquals(0, zipArchiveEntry0.getRawFlag());
      assertFalse(boolean0);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      
      zipArchiveOutputStream0.putArchiveEntry(zipArchiveEntry0);
      assertTrue(file0.canRead());
      assertTrue(file0.canExecute());
      assertTrue(file0.isFile());
      assertEquals("/tmp/9SOzK.T>_.j9(09SOzK.T>_.j9(", file0.toString());
      assertTrue(file0.canWrite());
      assertFalse(file0.isHidden());
      assertTrue(file0.isAbsolute());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(0L, file0.length());
      assertFalse(file0.isDirectory());
      assertTrue(file0.exists());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals("9SOzK.T>_.j9(09SOzK.T>_.j9(", file0.getName());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals("/tmp", file0.getParent());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertTrue(zipArchiveOutputStream0.isSeekable());
      assertNull(zipArchiveEntry0.getComment());
      assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
      assertEquals(0, zipArchiveEntry0.getInternalAttributes());
      assertEquals("9SOzK.T>_.j9(", zipArchiveEntry0.getName());
      assertEquals((-1L), zipArchiveEntry0.getSize());
      assertEquals(8, zipArchiveEntry0.getMethod());
      assertEquals((-1L), zipArchiveEntry0.getDataOffset());
      assertEquals("9SOzK.T>_.j9(", zipArchiveEntry0.toString());
      assertFalse(zipArchiveEntry0.isDirectory());
      assertFalse(zipArchiveEntry0.isStreamContiguous());
      assertEquals((-1L), zipArchiveEntry0.getCrc());
      assertEquals(0, zipArchiveEntry0.getVersionRequired());
      assertEquals((-1L), zipArchiveEntry0.getCompressedSize());
      assertFalse(zipArchiveEntry0.isUnixSymlink());
      assertEquals(0, zipArchiveEntry0.getVersionMadeBy());
      assertEquals(0, zipArchiveEntry0.getUnixMode());
      assertEquals(0, zipArchiveEntry0.getPlatform());
      assertEquals(0, zipArchiveEntry0.getRawFlag());
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      
      zipArchiveOutputStream0.setUseLanguageEncodingFlag(false);
      assertTrue(file0.canRead());
      assertTrue(file0.canExecute());
      assertTrue(file0.isFile());
      assertEquals("/tmp/9SOzK.T>_.j9(09SOzK.T>_.j9(", file0.toString());
      assertTrue(file0.canWrite());
      assertFalse(file0.isHidden());
      assertTrue(file0.isAbsolute());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(0L, file0.length());
      assertFalse(file0.isDirectory());
      assertTrue(file0.exists());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals("9SOzK.T>_.j9(09SOzK.T>_.j9(", file0.getName());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals("/tmp", file0.getParent());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertTrue(zipArchiveOutputStream0.isSeekable());
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      
      boolean boolean1 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      ZipArchiveOutputStream zipArchiveOutputStream1 = new ZipArchiveOutputStream(zipArchiveOutputStream0);
      assertFalse(zipArchiveOutputStream1.equals((Object)zipArchiveOutputStream0));
      assertTrue(file0.canRead());
      assertTrue(file0.canExecute());
      assertTrue(file0.isFile());
      assertEquals("/tmp/9SOzK.T>_.j9(09SOzK.T>_.j9(", file0.toString());
      assertTrue(file0.canWrite());
      assertFalse(file0.isHidden());
      assertTrue(file0.isAbsolute());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(0L, file0.length());
      assertFalse(file0.isDirectory());
      assertTrue(file0.exists());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals("9SOzK.T>_.j9(09SOzK.T>_.j9(", file0.getName());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals("/tmp", file0.getParent());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertTrue(zipArchiveOutputStream0.isSeekable());
      assertEquals(0L, zipArchiveOutputStream1.getBytesWritten());
      assertEquals(0, zipArchiveOutputStream1.getCount());
      assertFalse(zipArchiveOutputStream1.isSeekable());
      assertEquals("UTF8", zipArchiveOutputStream1.getEncoding());
      assertNotNull(zipArchiveOutputStream1);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      
      ZipArchiveOutputStream.UnicodeExtraFieldPolicy zipArchiveOutputStream_UnicodeExtraFieldPolicy0 = ZipArchiveOutputStream.UnicodeExtraFieldPolicy.NOT_ENCODEABLE;
      assertEquals("not encodeable", zipArchiveOutputStream_UnicodeExtraFieldPolicy0.toString());
      assertNotNull(zipArchiveOutputStream_UnicodeExtraFieldPolicy0);
      
      zipArchiveOutputStream1.setCreateUnicodeExtraFields(zipArchiveOutputStream_UnicodeExtraFieldPolicy0);
      assertFalse(zipArchiveOutputStream0.equals((Object)zipArchiveOutputStream1));
      assertFalse(zipArchiveOutputStream1.equals((Object)zipArchiveOutputStream0));
      assertTrue(file0.canRead());
      assertTrue(file0.canExecute());
      assertTrue(file0.isFile());
      assertEquals("/tmp/9SOzK.T>_.j9(09SOzK.T>_.j9(", file0.toString());
      assertTrue(file0.canWrite());
      assertFalse(file0.isHidden());
      assertTrue(file0.isAbsolute());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(0L, file0.length());
      assertFalse(file0.isDirectory());
      assertTrue(file0.exists());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals("9SOzK.T>_.j9(09SOzK.T>_.j9(", file0.getName());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals("/tmp", file0.getParent());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertTrue(zipArchiveOutputStream0.isSeekable());
      assertEquals(0L, zipArchiveOutputStream1.getBytesWritten());
      assertEquals(0, zipArchiveOutputStream1.getCount());
      assertFalse(zipArchiveOutputStream1.isSeekable());
      assertEquals("UTF8", zipArchiveOutputStream1.getEncoding());
      assertEquals("not encodeable", zipArchiveOutputStream_UnicodeExtraFieldPolicy0.toString());
      assertNotSame(zipArchiveOutputStream0, zipArchiveOutputStream1);
      assertNotSame(zipArchiveOutputStream1, zipArchiveOutputStream0);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      
      zipArchiveOutputStream1.putArchiveEntry(zipArchiveEntry0);
      assertFalse(zipArchiveOutputStream0.equals((Object)zipArchiveOutputStream1));
      assertFalse(zipArchiveOutputStream1.equals((Object)zipArchiveOutputStream0));
      assertTrue(file0.canRead());
      assertTrue(file0.canExecute());
      assertTrue(file0.isFile());
      assertEquals("/tmp/9SOzK.T>_.j9(09SOzK.T>_.j9(", file0.toString());
      assertTrue(file0.canWrite());
      assertFalse(file0.isHidden());
      assertTrue(file0.isAbsolute());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(0L, file0.length());
      assertFalse(file0.isDirectory());
      assertTrue(file0.exists());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals("9SOzK.T>_.j9(09SOzK.T>_.j9(", file0.getName());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals("/tmp", file0.getParent());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertTrue(zipArchiveOutputStream0.isSeekable());
      assertNull(zipArchiveEntry0.getComment());
      assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
      assertEquals(0, zipArchiveEntry0.getInternalAttributes());
      assertEquals("9SOzK.T>_.j9(", zipArchiveEntry0.getName());
      assertEquals((-1L), zipArchiveEntry0.getSize());
      assertEquals(8, zipArchiveEntry0.getMethod());
      assertEquals((-1L), zipArchiveEntry0.getDataOffset());
      assertEquals("9SOzK.T>_.j9(", zipArchiveEntry0.toString());
      assertFalse(zipArchiveEntry0.isDirectory());
      assertFalse(zipArchiveEntry0.isStreamContiguous());
      assertEquals((-1L), zipArchiveEntry0.getCrc());
      assertEquals(0, zipArchiveEntry0.getVersionRequired());
      assertEquals((-1L), zipArchiveEntry0.getCompressedSize());
      assertFalse(zipArchiveEntry0.isUnixSymlink());
      assertEquals(0, zipArchiveEntry0.getVersionMadeBy());
      assertEquals(0, zipArchiveEntry0.getUnixMode());
      assertEquals(0, zipArchiveEntry0.getPlatform());
      assertEquals(0, zipArchiveEntry0.getRawFlag());
      assertEquals(0L, zipArchiveOutputStream1.getBytesWritten());
      assertEquals(0, zipArchiveOutputStream1.getCount());
      assertFalse(zipArchiveOutputStream1.isSeekable());
      assertEquals("UTF8", zipArchiveOutputStream1.getEncoding());
      assertNotSame(zipArchiveOutputStream0, zipArchiveOutputStream1);
      assertNotSame(zipArchiveOutputStream1, zipArchiveOutputStream0);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      
      zipArchiveOutputStream0.setMethod(3);
      assertFalse(zipArchiveOutputStream0.equals((Object)zipArchiveOutputStream1));
      assertTrue(file0.canRead());
      assertTrue(file0.canExecute());
      assertTrue(file0.isFile());
      assertEquals("/tmp/9SOzK.T>_.j9(09SOzK.T>_.j9(", file0.toString());
      assertTrue(file0.canWrite());
      assertFalse(file0.isHidden());
      assertTrue(file0.isAbsolute());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(0L, file0.length());
      assertFalse(file0.isDirectory());
      assertTrue(file0.exists());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals("9SOzK.T>_.j9(09SOzK.T>_.j9(", file0.getName());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals("/tmp", file0.getParent());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertTrue(zipArchiveOutputStream0.isSeekable());
      assertNotSame(zipArchiveOutputStream0, zipArchiveOutputStream1);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      
      zipArchiveOutputStream1.writeCentralFileHeader(zipArchiveEntry0);
      assertFalse(zipArchiveOutputStream0.equals((Object)zipArchiveOutputStream1));
      assertFalse(zipArchiveOutputStream1.equals((Object)zipArchiveOutputStream0));
      assertTrue(file0.canRead());
      assertTrue(file0.canExecute());
      assertTrue(file0.isFile());
      assertEquals("/tmp/9SOzK.T>_.j9(09SOzK.T>_.j9(", file0.toString());
      assertTrue(file0.canWrite());
      assertFalse(file0.isHidden());
      assertTrue(file0.isAbsolute());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(0L, file0.length());
      assertFalse(file0.isDirectory());
      assertTrue(file0.exists());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals("9SOzK.T>_.j9(09SOzK.T>_.j9(", file0.getName());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals("/tmp", file0.getParent());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertTrue(zipArchiveOutputStream0.isSeekable());
      assertNull(zipArchiveEntry0.getComment());
      assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
      assertEquals(0, zipArchiveEntry0.getInternalAttributes());
      assertEquals("9SOzK.T>_.j9(", zipArchiveEntry0.getName());
      assertEquals((-1L), zipArchiveEntry0.getSize());
      assertEquals(8, zipArchiveEntry0.getMethod());
      assertEquals((-1L), zipArchiveEntry0.getDataOffset());
      assertEquals("9SOzK.T>_.j9(", zipArchiveEntry0.toString());
      assertFalse(zipArchiveEntry0.isDirectory());
      assertFalse(zipArchiveEntry0.isStreamContiguous());
      assertEquals((-1L), zipArchiveEntry0.getCrc());
      assertEquals(0, zipArchiveEntry0.getVersionRequired());
      assertEquals((-1L), zipArchiveEntry0.getCompressedSize());
      assertFalse(zipArchiveEntry0.isUnixSymlink());
      assertEquals(0, zipArchiveEntry0.getVersionMadeBy());
      assertEquals(0, zipArchiveEntry0.getUnixMode());
      assertEquals(0, zipArchiveEntry0.getPlatform());
      assertEquals(0, zipArchiveEntry0.getRawFlag());
      assertEquals(0L, zipArchiveOutputStream1.getBytesWritten());
      assertEquals(0, zipArchiveOutputStream1.getCount());
      assertFalse(zipArchiveOutputStream1.isSeekable());
      assertEquals("UTF8", zipArchiveOutputStream1.getEncoding());
      assertNotSame(zipArchiveOutputStream0, zipArchiveOutputStream1);
      assertNotSame(zipArchiveOutputStream1, zipArchiveOutputStream0);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      
      zipArchiveOutputStream1.setMethod((-1));
      assertFalse(zipArchiveOutputStream0.equals((Object)zipArchiveOutputStream1));
      assertFalse(zipArchiveOutputStream1.equals((Object)zipArchiveOutputStream0));
      assertTrue(file0.canRead());
      assertTrue(file0.canExecute());
      assertTrue(file0.isFile());
      assertEquals("/tmp/9SOzK.T>_.j9(09SOzK.T>_.j9(", file0.toString());
      assertTrue(file0.canWrite());
      assertFalse(file0.isHidden());
      assertTrue(file0.isAbsolute());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(0L, file0.length());
      assertFalse(file0.isDirectory());
      assertTrue(file0.exists());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals("9SOzK.T>_.j9(09SOzK.T>_.j9(", file0.getName());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals("/tmp", file0.getParent());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertTrue(zipArchiveOutputStream0.isSeekable());
      assertEquals(0L, zipArchiveOutputStream1.getBytesWritten());
      assertEquals(0, zipArchiveOutputStream1.getCount());
      assertFalse(zipArchiveOutputStream1.isSeekable());
      assertEquals("UTF8", zipArchiveOutputStream1.getEncoding());
      assertNotSame(zipArchiveOutputStream0, zipArchiveOutputStream1);
      assertNotSame(zipArchiveOutputStream1, zipArchiveOutputStream0);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      
      ZipArchiveOutputStream.UnicodeExtraFieldPolicy zipArchiveOutputStream_UnicodeExtraFieldPolicy1 = ZipArchiveOutputStream.UnicodeExtraFieldPolicy.NEVER;
      assertFalse(zipArchiveOutputStream_UnicodeExtraFieldPolicy1.equals((Object)zipArchiveOutputStream_UnicodeExtraFieldPolicy0));
      assertEquals("never", zipArchiveOutputStream_UnicodeExtraFieldPolicy1.toString());
      assertNotNull(zipArchiveOutputStream_UnicodeExtraFieldPolicy1);
      assertNotSame(zipArchiveOutputStream_UnicodeExtraFieldPolicy1, zipArchiveOutputStream_UnicodeExtraFieldPolicy0);
      
      ZipArchiveEntry zipArchiveEntry1 = new ZipArchiveEntry();
      assertFalse(zipArchiveEntry1.equals((Object)zipArchiveEntry0));
      assertNull(zipArchiveEntry1.getComment());
      assertEquals((-1), zipArchiveEntry1.getMethod());
      assertEquals(0, zipArchiveEntry1.getPlatform());
      assertEquals(0, zipArchiveEntry1.getInternalAttributes());
      assertEquals("", zipArchiveEntry1.getName());
      assertEquals(0, zipArchiveEntry1.getVersionMadeBy());
      assertEquals(0L, zipArchiveEntry1.getExternalAttributes());
      assertEquals(0, zipArchiveEntry1.getRawFlag());
      assertEquals(0, zipArchiveEntry1.getVersionRequired());
      assertEquals((-1L), zipArchiveEntry1.getCrc());
      assertEquals((-1L), zipArchiveEntry1.getCompressedSize());
      assertEquals(0, zipArchiveEntry1.getUnixMode());
      assertEquals((-1L), zipArchiveEntry1.getDataOffset());
      assertFalse(zipArchiveEntry1.isUnixSymlink());
      assertFalse(zipArchiveEntry1.isDirectory());
      assertEquals((-1L), zipArchiveEntry1.getSize());
      assertFalse(zipArchiveEntry1.isStreamContiguous());
      assertEquals("", zipArchiveEntry1.toString());
      assertNotNull(zipArchiveEntry1);
      assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      
      zipArchiveOutputStream0.writeCentralDirectoryEnd();
      assertFalse(zipArchiveOutputStream0.equals((Object)zipArchiveOutputStream1));
      assertTrue(file0.canRead());
      assertTrue(file0.canExecute());
      assertTrue(file0.isFile());
      assertEquals("/tmp/9SOzK.T>_.j9(09SOzK.T>_.j9(", file0.toString());
      assertTrue(file0.canWrite());
      assertFalse(file0.isHidden());
      assertTrue(file0.isAbsolute());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(0L, file0.length());
      assertFalse(file0.isDirectory());
      assertTrue(file0.exists());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals("9SOzK.T>_.j9(09SOzK.T>_.j9(", file0.getName());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals("/tmp", file0.getParent());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertTrue(zipArchiveOutputStream0.isSeekable());
      assertNotSame(zipArchiveOutputStream0, zipArchiveOutputStream1);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      
      zipArchiveOutputStream0.setEncoding("org.apache.commons.compress.archivers.zip.StreamCompressor");
      assertFalse(zipArchiveOutputStream0.equals((Object)zipArchiveOutputStream1));
      assertTrue(file0.canRead());
      assertTrue(file0.canExecute());
      assertTrue(file0.isFile());
      assertEquals("/tmp/9SOzK.T>_.j9(09SOzK.T>_.j9(", file0.toString());
      assertTrue(file0.canWrite());
      assertFalse(file0.isHidden());
      assertTrue(file0.isAbsolute());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(0L, file0.length());
      assertFalse(file0.isDirectory());
      assertTrue(file0.exists());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals("9SOzK.T>_.j9(09SOzK.T>_.j9(", file0.getName());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals("/tmp", file0.getParent());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertTrue(zipArchiveOutputStream0.isSeekable());
      assertEquals("org.apache.commons.compress.archivers.zip.StreamCompressor", zipArchiveOutputStream0.getEncoding());
      assertNotSame(zipArchiveOutputStream0, zipArchiveOutputStream1);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      File file0 = MockFile.createTempFile("9SOzK.T>_.j9(", "wcsdgq");
      assertTrue(file0.canExecute());
      assertEquals("/tmp", file0.getParent());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals("/tmp/9SOzK.T>_.j9(0wcsdgq", file0.toString());
      assertEquals(1392409281320L, file0.lastModified());
      assertTrue(file0.isFile());
      assertTrue(file0.canRead());
      assertTrue(file0.exists());
      assertEquals("9SOzK.T>_.j9(0wcsdgq", file0.getName());
      assertTrue(file0.canWrite());
      assertEquals(0L, file0.length());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isDirectory());
      assertFalse(file0.isHidden());
      assertTrue(file0.isAbsolute());
      assertNotNull(file0);
      
      MockPrintStream mockPrintStream0 = new MockPrintStream("9SOzK.T>_.j9(");
      assertNotNull(mockPrintStream0);
      
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(mockPrintStream0);
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertFalse(zipArchiveOutputStream0.isSeekable());
      assertNotNull(zipArchiveOutputStream0);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      
      zipArchiveOutputStream0.writeCentralDirectoryEnd();
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertFalse(zipArchiveOutputStream0.isSeekable());
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      
      ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry("9SOzK.T>_.j9(");
      assertEquals(0, zipArchiveEntry0.getUnixMode());
      assertEquals(0, zipArchiveEntry0.getRawFlag());
      assertEquals(0, zipArchiveEntry0.getVersionMadeBy());
      assertEquals((-1L), zipArchiveEntry0.getSize());
      assertEquals("9SOzK.T>_.j9(", zipArchiveEntry0.toString());
      assertEquals((-1L), zipArchiveEntry0.getDataOffset());
      assertEquals((-1L), zipArchiveEntry0.getCrc());
      assertEquals(0, zipArchiveEntry0.getVersionRequired());
      assertEquals((-1), zipArchiveEntry0.getMethod());
      assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
      assertEquals("9SOzK.T>_.j9(", zipArchiveEntry0.getName());
      assertEquals((-1L), zipArchiveEntry0.getCompressedSize());
      assertFalse(zipArchiveEntry0.isStreamContiguous());
      assertEquals(0, zipArchiveEntry0.getInternalAttributes());
      assertEquals(0, zipArchiveEntry0.getPlatform());
      assertFalse(zipArchiveEntry0.isDirectory());
      assertNull(zipArchiveEntry0.getComment());
      assertFalse(zipArchiveEntry0.isUnixSymlink());
      assertNotNull(zipArchiveEntry0);
      assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      boolean boolean0 = zipArchiveEntry0.equals(object0);
      assertEquals(0, zipArchiveEntry0.getUnixMode());
      assertEquals(0, zipArchiveEntry0.getRawFlag());
      assertEquals(0, zipArchiveEntry0.getVersionMadeBy());
      assertEquals((-1L), zipArchiveEntry0.getSize());
      assertEquals("9SOzK.T>_.j9(", zipArchiveEntry0.toString());
      assertEquals((-1L), zipArchiveEntry0.getDataOffset());
      assertEquals((-1L), zipArchiveEntry0.getCrc());
      assertEquals(0, zipArchiveEntry0.getVersionRequired());
      assertEquals((-1), zipArchiveEntry0.getMethod());
      assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
      assertEquals("9SOzK.T>_.j9(", zipArchiveEntry0.getName());
      assertEquals((-1L), zipArchiveEntry0.getCompressedSize());
      assertFalse(zipArchiveEntry0.isStreamContiguous());
      assertEquals(0, zipArchiveEntry0.getInternalAttributes());
      assertEquals(0, zipArchiveEntry0.getPlatform());
      assertFalse(zipArchiveEntry0.isDirectory());
      assertNull(zipArchiveEntry0.getComment());
      assertFalse(zipArchiveEntry0.isUnixSymlink());
      assertFalse(boolean0);
      assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      
      zipArchiveOutputStream0.putArchiveEntry(zipArchiveEntry0);
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertFalse(zipArchiveOutputStream0.isSeekable());
      assertEquals(0, zipArchiveEntry0.getUnixMode());
      assertEquals(0, zipArchiveEntry0.getRawFlag());
      assertEquals(0, zipArchiveEntry0.getVersionMadeBy());
      assertEquals((-1L), zipArchiveEntry0.getSize());
      assertEquals("9SOzK.T>_.j9(", zipArchiveEntry0.toString());
      assertEquals((-1L), zipArchiveEntry0.getDataOffset());
      assertEquals((-1L), zipArchiveEntry0.getCrc());
      assertEquals(0, zipArchiveEntry0.getVersionRequired());
      assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
      assertEquals("9SOzK.T>_.j9(", zipArchiveEntry0.getName());
      assertEquals((-1L), zipArchiveEntry0.getCompressedSize());
      assertFalse(zipArchiveEntry0.isStreamContiguous());
      assertEquals(0, zipArchiveEntry0.getInternalAttributes());
      assertEquals(0, zipArchiveEntry0.getPlatform());
      assertEquals(8, zipArchiveEntry0.getMethod());
      assertFalse(zipArchiveEntry0.isDirectory());
      assertNull(zipArchiveEntry0.getComment());
      assertFalse(zipArchiveEntry0.isUnixSymlink());
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-19);
      byteArray0[1] = (byte)32;
      byteArray0[2] = (byte) (-1);
      byteArray0[3] = (byte) (-75);
      zipArchiveOutputStream0.writeOut(byteArray0, 2147483646, 5);
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertFalse(zipArchiveOutputStream0.isSeekable());
      assertEquals(4, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-19), (byte)32, (byte) (-1), (byte) (-75)}, byteArray0);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      
      zipArchiveOutputStream0.setUseLanguageEncodingFlag(false);
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertFalse(zipArchiveOutputStream0.isSeekable());
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      
      boolean boolean1 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      ZipArchiveOutputStream zipArchiveOutputStream1 = new ZipArchiveOutputStream(zipArchiveOutputStream0);
      assertFalse(zipArchiveOutputStream1.equals((Object)zipArchiveOutputStream0));
      assertEquals(0, zipArchiveOutputStream1.getCount());
      assertEquals(0L, zipArchiveOutputStream1.getBytesWritten());
      assertEquals("UTF8", zipArchiveOutputStream1.getEncoding());
      assertFalse(zipArchiveOutputStream1.isSeekable());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertFalse(zipArchiveOutputStream0.isSeekable());
      assertNotNull(zipArchiveOutputStream1);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      
      ZipArchiveOutputStream.UnicodeExtraFieldPolicy zipArchiveOutputStream_UnicodeExtraFieldPolicy0 = ZipArchiveOutputStream.UnicodeExtraFieldPolicy.NOT_ENCODEABLE;
      assertEquals("not encodeable", zipArchiveOutputStream_UnicodeExtraFieldPolicy0.toString());
      assertNotNull(zipArchiveOutputStream_UnicodeExtraFieldPolicy0);
      
      zipArchiveOutputStream0.setCreateUnicodeExtraFields(zipArchiveOutputStream_UnicodeExtraFieldPolicy0);
      assertFalse(zipArchiveOutputStream0.equals((Object)zipArchiveOutputStream1));
      assertEquals("not encodeable", zipArchiveOutputStream_UnicodeExtraFieldPolicy0.toString());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertFalse(zipArchiveOutputStream0.isSeekable());
      assertNotSame(zipArchiveOutputStream0, zipArchiveOutputStream1);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      
      zipArchiveOutputStream0.putArchiveEntry(zipArchiveEntry0);
      assertFalse(zipArchiveOutputStream0.equals((Object)zipArchiveOutputStream1));
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertFalse(zipArchiveOutputStream0.isSeekable());
      assertEquals(0, zipArchiveEntry0.getUnixMode());
      assertEquals(0, zipArchiveEntry0.getRawFlag());
      assertEquals(0, zipArchiveEntry0.getVersionMadeBy());
      assertEquals(0L, zipArchiveEntry0.getSize());
      assertEquals("9SOzK.T>_.j9(", zipArchiveEntry0.toString());
      assertEquals((-1L), zipArchiveEntry0.getDataOffset());
      assertEquals(0L, zipArchiveEntry0.getCrc());
      assertEquals(0, zipArchiveEntry0.getVersionRequired());
      assertEquals(2L, zipArchiveEntry0.getCompressedSize());
      assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
      assertEquals("9SOzK.T>_.j9(", zipArchiveEntry0.getName());
      assertFalse(zipArchiveEntry0.isStreamContiguous());
      assertEquals(0, zipArchiveEntry0.getInternalAttributes());
      assertEquals(0, zipArchiveEntry0.getPlatform());
      assertEquals(8, zipArchiveEntry0.getMethod());
      assertFalse(zipArchiveEntry0.isDirectory());
      assertNull(zipArchiveEntry0.getComment());
      assertFalse(zipArchiveEntry0.isUnixSymlink());
      assertNotSame(zipArchiveOutputStream0, zipArchiveOutputStream1);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      
      zipArchiveOutputStream1.setMethod(355);
      assertFalse(zipArchiveOutputStream1.equals((Object)zipArchiveOutputStream0));
      assertFalse(zipArchiveOutputStream0.equals((Object)zipArchiveOutputStream1));
      assertEquals(0, zipArchiveOutputStream1.getCount());
      assertEquals(0L, zipArchiveOutputStream1.getBytesWritten());
      assertEquals("UTF8", zipArchiveOutputStream1.getEncoding());
      assertFalse(zipArchiveOutputStream1.isSeekable());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertFalse(zipArchiveOutputStream0.isSeekable());
      assertNotSame(zipArchiveOutputStream1, zipArchiveOutputStream0);
      assertNotSame(zipArchiveOutputStream0, zipArchiveOutputStream1);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      
      // Undeclared exception!
//      try { 
        zipArchiveOutputStream1.writeCentralFileHeader(zipArchiveEntry0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream$EntryMetaData", e);
//      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/tmp/9SOzK.T>_.j9(09SOzK.T>_.j9(");
      boolean boolean0 = FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      assertTrue(boolean0);
      
      File file0 = MockFile.createTempFile("9SOzK.T>_.j9(", "9SOzK.T>_.j9(");
      assertTrue(file0.canRead());
      assertTrue(file0.isFile());
      assertTrue(file0.canExecute());
      assertEquals("/tmp/9SOzK.T>_.j9(09SOzK.T>_.j9(", file0.toString());
      assertFalse(file0.isHidden());
      assertTrue(file0.canWrite());
      assertTrue(file0.isAbsolute());
      assertEquals("9SOzK.T>_.j9(09SOzK.T>_.j9(", file0.getName());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals("/tmp", file0.getParent());
      assertFalse(file0.isDirectory());
      assertEquals(0L, file0.getFreeSpace());
      assertTrue(file0.exists());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(0L, file0.length());
      assertNotNull(file0);
      
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(file0);
      assertTrue(file0.canRead());
      assertTrue(file0.isFile());
      assertTrue(file0.canExecute());
      assertEquals("/tmp/9SOzK.T>_.j9(09SOzK.T>_.j9(", file0.toString());
      assertFalse(file0.isHidden());
      assertTrue(file0.canWrite());
      assertTrue(file0.isAbsolute());
      assertEquals("9SOzK.T>_.j9(09SOzK.T>_.j9(", file0.getName());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals("/tmp", file0.getParent());
      assertFalse(file0.isDirectory());
      assertEquals(0L, file0.getFreeSpace());
      assertTrue(file0.exists());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(0L, file0.length());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertTrue(zipArchiveOutputStream0.isSeekable());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertNotNull(zipArchiveOutputStream0);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      
      zipArchiveOutputStream0.writeCentralDirectoryEnd();
      assertTrue(file0.canRead());
      assertTrue(file0.isFile());
      assertTrue(file0.canExecute());
      assertEquals("/tmp/9SOzK.T>_.j9(09SOzK.T>_.j9(", file0.toString());
      assertFalse(file0.isHidden());
      assertTrue(file0.canWrite());
      assertTrue(file0.isAbsolute());
      assertEquals("9SOzK.T>_.j9(09SOzK.T>_.j9(", file0.getName());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals("/tmp", file0.getParent());
      assertFalse(file0.isDirectory());
      assertEquals(0L, file0.getFreeSpace());
      assertTrue(file0.exists());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(0L, file0.length());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertTrue(zipArchiveOutputStream0.isSeekable());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      
      ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
      assertEquals("", zipArchiveEntry0.toString());
      assertFalse(zipArchiveEntry0.isUnixSymlink());
      assertFalse(zipArchiveEntry0.isDirectory());
      assertEquals(0, zipArchiveEntry0.getVersionRequired());
      assertFalse(zipArchiveEntry0.isStreamContiguous());
      assertEquals((-1L), zipArchiveEntry0.getCrc());
      assertEquals((-1L), zipArchiveEntry0.getCompressedSize());
      assertEquals("", zipArchiveEntry0.getName());
      assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
      assertEquals((-1L), zipArchiveEntry0.getDataOffset());
      assertEquals((-1L), zipArchiveEntry0.getSize());
      assertEquals((-1), zipArchiveEntry0.getMethod());
      assertNull(zipArchiveEntry0.getComment());
      assertEquals(0, zipArchiveEntry0.getRawFlag());
      assertEquals(0, zipArchiveEntry0.getInternalAttributes());
      assertEquals(0, zipArchiveEntry0.getPlatform());
      assertEquals(0, zipArchiveEntry0.getUnixMode());
      assertEquals(0, zipArchiveEntry0.getVersionMadeBy());
      assertNotNull(zipArchiveEntry0);
      assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      
      Zip64Mode zip64Mode0 = Zip64Mode.Always;
      zipArchiveOutputStream0.setUseZip64(zip64Mode0);
      assertTrue(file0.canRead());
      assertTrue(file0.isFile());
      assertTrue(file0.canExecute());
      assertEquals("/tmp/9SOzK.T>_.j9(09SOzK.T>_.j9(", file0.toString());
      assertFalse(file0.isHidden());
      assertTrue(file0.canWrite());
      assertTrue(file0.isAbsolute());
      assertEquals("9SOzK.T>_.j9(09SOzK.T>_.j9(", file0.getName());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals("/tmp", file0.getParent());
      assertFalse(file0.isDirectory());
      assertEquals(0L, file0.getFreeSpace());
      assertTrue(file0.exists());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(0L, file0.length());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertTrue(zipArchiveOutputStream0.isSeekable());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      
      boolean boolean1 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      boolean boolean2 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2);
      
      ZipArchiveOutputStream zipArchiveOutputStream1 = new ZipArchiveOutputStream(zipArchiveOutputStream0);
      assertFalse(zipArchiveOutputStream1.equals((Object)zipArchiveOutputStream0));
      assertTrue(file0.canRead());
      assertTrue(file0.isFile());
      assertTrue(file0.canExecute());
      assertEquals("/tmp/9SOzK.T>_.j9(09SOzK.T>_.j9(", file0.toString());
      assertFalse(file0.isHidden());
      assertTrue(file0.canWrite());
      assertTrue(file0.isAbsolute());
      assertEquals("9SOzK.T>_.j9(09SOzK.T>_.j9(", file0.getName());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals("/tmp", file0.getParent());
      assertFalse(file0.isDirectory());
      assertEquals(0L, file0.getFreeSpace());
      assertTrue(file0.exists());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(0L, file0.length());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertTrue(zipArchiveOutputStream0.isSeekable());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertEquals(0L, zipArchiveOutputStream1.getBytesWritten());
      assertEquals(0, zipArchiveOutputStream1.getCount());
      assertEquals("UTF8", zipArchiveOutputStream1.getEncoding());
      assertFalse(zipArchiveOutputStream1.isSeekable());
      assertNotNull(zipArchiveOutputStream1);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      
      zipArchiveEntry0.setCrc(1100L);
      assertEquals("", zipArchiveEntry0.toString());
      assertFalse(zipArchiveEntry0.isUnixSymlink());
      assertFalse(zipArchiveEntry0.isDirectory());
      assertEquals(0, zipArchiveEntry0.getVersionRequired());
      assertFalse(zipArchiveEntry0.isStreamContiguous());
      assertEquals((-1L), zipArchiveEntry0.getCompressedSize());
      assertEquals("", zipArchiveEntry0.getName());
      assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
      assertEquals((-1L), zipArchiveEntry0.getDataOffset());
      assertEquals((-1L), zipArchiveEntry0.getSize());
      assertEquals((-1), zipArchiveEntry0.getMethod());
      assertNull(zipArchiveEntry0.getComment());
      assertEquals(0, zipArchiveEntry0.getRawFlag());
      assertEquals(0, zipArchiveEntry0.getInternalAttributes());
      assertEquals(0, zipArchiveEntry0.getPlatform());
      assertEquals(1100L, zipArchiveEntry0.getCrc());
      assertEquals(0, zipArchiveEntry0.getUnixMode());
      assertEquals(0, zipArchiveEntry0.getVersionMadeBy());
      assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      
      zipArchiveOutputStream0.putArchiveEntry(zipArchiveEntry0);
      assertFalse(zipArchiveOutputStream0.equals((Object)zipArchiveOutputStream1));
      assertTrue(file0.canRead());
      assertTrue(file0.isFile());
      assertTrue(file0.canExecute());
      assertEquals("/tmp/9SOzK.T>_.j9(09SOzK.T>_.j9(", file0.toString());
      assertFalse(file0.isHidden());
      assertTrue(file0.canWrite());
      assertTrue(file0.isAbsolute());
      assertEquals("9SOzK.T>_.j9(09SOzK.T>_.j9(", file0.getName());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals("/tmp", file0.getParent());
      assertFalse(file0.isDirectory());
      assertEquals(0L, file0.getFreeSpace());
      assertTrue(file0.exists());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(0L, file0.length());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertTrue(zipArchiveOutputStream0.isSeekable());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertEquals("", zipArchiveEntry0.toString());
      assertEquals(8, zipArchiveEntry0.getMethod());
      assertFalse(zipArchiveEntry0.isUnixSymlink());
      assertFalse(zipArchiveEntry0.isDirectory());
      assertEquals(0, zipArchiveEntry0.getVersionRequired());
      assertFalse(zipArchiveEntry0.isStreamContiguous());
      assertEquals((-1L), zipArchiveEntry0.getCompressedSize());
      assertEquals("", zipArchiveEntry0.getName());
      assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
      assertEquals((-1L), zipArchiveEntry0.getDataOffset());
      assertEquals((-1L), zipArchiveEntry0.getSize());
      assertNull(zipArchiveEntry0.getComment());
      assertEquals(0, zipArchiveEntry0.getRawFlag());
      assertEquals(0, zipArchiveEntry0.getInternalAttributes());
      assertEquals(0, zipArchiveEntry0.getPlatform());
      assertEquals(1100L, zipArchiveEntry0.getCrc());
      assertEquals(0, zipArchiveEntry0.getUnixMode());
      assertEquals(0, zipArchiveEntry0.getVersionMadeBy());
      assertNotSame(zipArchiveOutputStream0, zipArchiveOutputStream1);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      
      zipArchiveOutputStream0.setMethod(102);
      assertFalse(zipArchiveOutputStream0.equals((Object)zipArchiveOutputStream1));
      assertTrue(file0.canRead());
      assertTrue(file0.isFile());
      assertTrue(file0.canExecute());
      assertEquals("/tmp/9SOzK.T>_.j9(09SOzK.T>_.j9(", file0.toString());
      assertFalse(file0.isHidden());
      assertTrue(file0.canWrite());
      assertTrue(file0.isAbsolute());
      assertEquals("9SOzK.T>_.j9(09SOzK.T>_.j9(", file0.getName());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals("/tmp", file0.getParent());
      assertFalse(file0.isDirectory());
      assertEquals(0L, file0.getFreeSpace());
      assertTrue(file0.exists());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(0L, file0.length());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertTrue(zipArchiveOutputStream0.isSeekable());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertNotSame(zipArchiveOutputStream0, zipArchiveOutputStream1);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      
      zipArchiveOutputStream0.writeCentralDirectoryEnd();
      assertFalse(zipArchiveOutputStream0.equals((Object)zipArchiveOutputStream1));
      assertTrue(file0.canRead());
      assertTrue(file0.isFile());
      assertTrue(file0.canExecute());
      assertEquals("/tmp/9SOzK.T>_.j9(09SOzK.T>_.j9(", file0.toString());
      assertFalse(file0.isHidden());
      assertTrue(file0.canWrite());
      assertTrue(file0.isAbsolute());
      assertEquals("9SOzK.T>_.j9(09SOzK.T>_.j9(", file0.getName());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals("/tmp", file0.getParent());
      assertFalse(file0.isDirectory());
      assertEquals(0L, file0.getFreeSpace());
      assertTrue(file0.exists());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(0L, file0.length());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertTrue(zipArchiveOutputStream0.isSeekable());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertNotSame(zipArchiveOutputStream0, zipArchiveOutputStream1);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedInputStream0);
      
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(pipedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pushbackInputStream0);
      
//      try { 
        zipArchiveOutputStream0.addRawArchiveEntry(zipArchiveEntry0, pushbackInputStream0);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Pipe not connected
//         //
//         verifyException("java.io.PipedInputStream", e);
//      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      File file0 = MockFile.createTempFile("9SOzK.T>_.j9(", "9SOzK.T>_.j9(");
      assertEquals("9SOzK.T>_.j9(09SOzK.T>_.j9(", file0.getName());
      assertEquals(1392409281320L, file0.lastModified());
      assertTrue(file0.isAbsolute());
      assertTrue(file0.exists());
      assertEquals(0L, file0.getFreeSpace());
      assertTrue(file0.isFile());
      assertFalse(file0.isDirectory());
      assertTrue(file0.canRead());
      assertEquals(0L, file0.length());
      assertEquals(0L, file0.getTotalSpace());
      assertTrue(file0.canExecute());
      assertTrue(file0.canWrite());
      assertEquals("/tmp/9SOzK.T>_.j9(09SOzK.T>_.j9(", file0.toString());
      assertEquals("/tmp", file0.getParent());
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isHidden());
      assertNotNull(file0);
      
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(file0);
      assertEquals("9SOzK.T>_.j9(09SOzK.T>_.j9(", file0.getName());
      assertEquals(1392409281320L, file0.lastModified());
      assertTrue(file0.isAbsolute());
      assertTrue(file0.exists());
      assertEquals(0L, file0.getFreeSpace());
      assertTrue(file0.isFile());
      assertFalse(file0.isDirectory());
      assertTrue(file0.canRead());
      assertEquals(0L, file0.length());
      assertEquals(0L, file0.getTotalSpace());
      assertTrue(file0.canExecute());
      assertTrue(file0.canWrite());
      assertEquals("/tmp/9SOzK.T>_.j9(09SOzK.T>_.j9(", file0.toString());
      assertEquals("/tmp", file0.getParent());
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isHidden());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertTrue(zipArchiveOutputStream0.isSeekable());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertNotNull(zipArchiveOutputStream0);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      
      zipArchiveOutputStream0.writeCentralDirectoryEnd();
      assertEquals("9SOzK.T>_.j9(09SOzK.T>_.j9(", file0.getName());
      assertEquals(1392409281320L, file0.lastModified());
      assertTrue(file0.isAbsolute());
      assertTrue(file0.exists());
      assertEquals(0L, file0.getFreeSpace());
      assertTrue(file0.isFile());
      assertFalse(file0.isDirectory());
      assertTrue(file0.canRead());
      assertEquals(0L, file0.length());
      assertEquals(0L, file0.getTotalSpace());
      assertTrue(file0.canExecute());
      assertTrue(file0.canWrite());
      assertEquals("/tmp/9SOzK.T>_.j9(09SOzK.T>_.j9(", file0.toString());
      assertEquals("/tmp", file0.getParent());
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isHidden());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertTrue(zipArchiveOutputStream0.isSeekable());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      
      ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
      assertEquals(0, zipArchiveEntry0.getVersionMadeBy());
      assertEquals((-1L), zipArchiveEntry0.getSize());
      assertEquals(0, zipArchiveEntry0.getRawFlag());
      assertEquals(0, zipArchiveEntry0.getUnixMode());
      assertEquals((-1L), zipArchiveEntry0.getCrc());
      assertEquals((-1L), zipArchiveEntry0.getDataOffset());
      assertEquals("", zipArchiveEntry0.toString());
      assertNull(zipArchiveEntry0.getComment());
      assertEquals("", zipArchiveEntry0.getName());
      assertFalse(zipArchiveEntry0.isStreamContiguous());
      assertFalse(zipArchiveEntry0.isDirectory());
      assertFalse(zipArchiveEntry0.isUnixSymlink());
      assertEquals(0, zipArchiveEntry0.getInternalAttributes());
      assertEquals(0, zipArchiveEntry0.getPlatform());
      assertEquals((-1L), zipArchiveEntry0.getCompressedSize());
      assertEquals(0, zipArchiveEntry0.getVersionRequired());
      assertEquals((-1), zipArchiveEntry0.getMethod());
      assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
      assertNotNull(zipArchiveEntry0);
      assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      
      Zip64Mode zip64Mode0 = Zip64Mode.Always;
      zipArchiveOutputStream0.setUseZip64(zip64Mode0);
      assertEquals("9SOzK.T>_.j9(09SOzK.T>_.j9(", file0.getName());
      assertEquals(1392409281320L, file0.lastModified());
      assertTrue(file0.isAbsolute());
      assertTrue(file0.exists());
      assertEquals(0L, file0.getFreeSpace());
      assertTrue(file0.isFile());
      assertFalse(file0.isDirectory());
      assertTrue(file0.canRead());
      assertEquals(0L, file0.length());
      assertEquals(0L, file0.getTotalSpace());
      assertTrue(file0.canExecute());
      assertTrue(file0.canWrite());
      assertEquals("/tmp/9SOzK.T>_.j9(09SOzK.T>_.j9(", file0.toString());
      assertEquals("/tmp", file0.getParent());
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isHidden());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertTrue(zipArchiveOutputStream0.isSeekable());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      zipArchiveOutputStream0.setUseLanguageEncodingFlag(true);
      assertEquals("9SOzK.T>_.j9(09SOzK.T>_.j9(", file0.getName());
      assertEquals(1392409281320L, file0.lastModified());
      assertTrue(file0.isAbsolute());
      assertTrue(file0.exists());
      assertEquals(0L, file0.getFreeSpace());
      assertTrue(file0.isFile());
      assertFalse(file0.isDirectory());
      assertTrue(file0.canRead());
      assertEquals(0L, file0.length());
      assertEquals(0L, file0.getTotalSpace());
      assertTrue(file0.canExecute());
      assertTrue(file0.canWrite());
      assertEquals("/tmp/9SOzK.T>_.j9(09SOzK.T>_.j9(", file0.toString());
      assertEquals("/tmp", file0.getParent());
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isHidden());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertTrue(zipArchiveOutputStream0.isSeekable());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      
      boolean boolean1 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      ZipArchiveOutputStream zipArchiveOutputStream1 = new ZipArchiveOutputStream(zipArchiveOutputStream0);
      assertFalse(zipArchiveOutputStream1.equals((Object)zipArchiveOutputStream0));
      assertEquals("9SOzK.T>_.j9(09SOzK.T>_.j9(", file0.getName());
      assertEquals(1392409281320L, file0.lastModified());
      assertTrue(file0.isAbsolute());
      assertTrue(file0.exists());
      assertEquals(0L, file0.getFreeSpace());
      assertTrue(file0.isFile());
      assertFalse(file0.isDirectory());
      assertTrue(file0.canRead());
      assertEquals(0L, file0.length());
      assertEquals(0L, file0.getTotalSpace());
      assertTrue(file0.canExecute());
      assertTrue(file0.canWrite());
      assertEquals("/tmp/9SOzK.T>_.j9(09SOzK.T>_.j9(", file0.toString());
      assertEquals("/tmp", file0.getParent());
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isHidden());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertTrue(zipArchiveOutputStream0.isSeekable());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertEquals(0, zipArchiveOutputStream1.getCount());
      assertEquals(0L, zipArchiveOutputStream1.getBytesWritten());
      assertFalse(zipArchiveOutputStream1.isSeekable());
      assertEquals("UTF8", zipArchiveOutputStream1.getEncoding());
      assertNotNull(zipArchiveOutputStream1);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      
      zipArchiveOutputStream0.putArchiveEntry(zipArchiveEntry0);
      assertFalse(zipArchiveOutputStream0.equals((Object)zipArchiveOutputStream1));
      assertEquals("9SOzK.T>_.j9(09SOzK.T>_.j9(", file0.getName());
      assertEquals(1392409281320L, file0.lastModified());
      assertTrue(file0.isAbsolute());
      assertTrue(file0.exists());
      assertEquals(0L, file0.getFreeSpace());
      assertTrue(file0.isFile());
      assertFalse(file0.isDirectory());
      assertTrue(file0.canRead());
      assertEquals(0L, file0.length());
      assertEquals(0L, file0.getTotalSpace());
      assertTrue(file0.canExecute());
      assertTrue(file0.canWrite());
      assertEquals("/tmp/9SOzK.T>_.j9(09SOzK.T>_.j9(", file0.toString());
      assertEquals("/tmp", file0.getParent());
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isHidden());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertTrue(zipArchiveOutputStream0.isSeekable());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertEquals(0, zipArchiveEntry0.getVersionMadeBy());
      assertEquals((-1L), zipArchiveEntry0.getSize());
      assertEquals(0, zipArchiveEntry0.getRawFlag());
      assertEquals(0, zipArchiveEntry0.getUnixMode());
      assertEquals((-1L), zipArchiveEntry0.getCrc());
      assertEquals((-1L), zipArchiveEntry0.getDataOffset());
      assertEquals("", zipArchiveEntry0.toString());
      assertNull(zipArchiveEntry0.getComment());
      assertEquals(8, zipArchiveEntry0.getMethod());
      assertEquals("", zipArchiveEntry0.getName());
      assertFalse(zipArchiveEntry0.isStreamContiguous());
      assertFalse(zipArchiveEntry0.isDirectory());
      assertFalse(zipArchiveEntry0.isUnixSymlink());
      assertEquals(0, zipArchiveEntry0.getInternalAttributes());
      assertEquals(0, zipArchiveEntry0.getPlatform());
      assertEquals((-1L), zipArchiveEntry0.getCompressedSize());
      assertEquals(0, zipArchiveEntry0.getVersionRequired());
      assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
      assertNotSame(zipArchiveOutputStream0, zipArchiveOutputStream1);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      
      zipArchiveOutputStream0.setMethod(102);
      assertFalse(zipArchiveOutputStream0.equals((Object)zipArchiveOutputStream1));
      assertEquals("9SOzK.T>_.j9(09SOzK.T>_.j9(", file0.getName());
      assertEquals(1392409281320L, file0.lastModified());
      assertTrue(file0.isAbsolute());
      assertTrue(file0.exists());
      assertEquals(0L, file0.getFreeSpace());
      assertTrue(file0.isFile());
      assertFalse(file0.isDirectory());
      assertTrue(file0.canRead());
      assertEquals(0L, file0.length());
      assertEquals(0L, file0.getTotalSpace());
      assertTrue(file0.canExecute());
      assertTrue(file0.canWrite());
      assertEquals("/tmp/9SOzK.T>_.j9(09SOzK.T>_.j9(", file0.toString());
      assertEquals("/tmp", file0.getParent());
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isHidden());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertTrue(zipArchiveOutputStream0.isSeekable());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertNotSame(zipArchiveOutputStream0, zipArchiveOutputStream1);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      
      zipArchiveOutputStream0.writeCentralDirectoryEnd();
      assertFalse(zipArchiveOutputStream0.equals((Object)zipArchiveOutputStream1));
      assertEquals("9SOzK.T>_.j9(09SOzK.T>_.j9(", file0.getName());
      assertEquals(1392409281320L, file0.lastModified());
      assertTrue(file0.isAbsolute());
      assertTrue(file0.exists());
      assertEquals(0L, file0.getFreeSpace());
      assertTrue(file0.isFile());
      assertFalse(file0.isDirectory());
      assertTrue(file0.canRead());
      assertEquals(0L, file0.length());
      assertEquals(0L, file0.getTotalSpace());
      assertTrue(file0.canExecute());
      assertTrue(file0.canWrite());
      assertEquals("/tmp/9SOzK.T>_.j9(09SOzK.T>_.j9(", file0.toString());
      assertEquals("/tmp", file0.getParent());
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isHidden());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertTrue(zipArchiveOutputStream0.isSeekable());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertNotSame(zipArchiveOutputStream0, zipArchiveOutputStream1);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedInputStream0);
      
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(pipedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pushbackInputStream0);
      
      ZipArchiveOutputStream zipArchiveOutputStream2 = new ZipArchiveOutputStream(zipArchiveOutputStream1);
      assertFalse(zipArchiveOutputStream0.equals((Object)zipArchiveOutputStream1));
      assertFalse(zipArchiveOutputStream1.equals((Object)zipArchiveOutputStream0));
      assertFalse(zipArchiveOutputStream2.equals((Object)zipArchiveOutputStream1));
      assertFalse(zipArchiveOutputStream2.equals((Object)zipArchiveOutputStream0));
      assertEquals("9SOzK.T>_.j9(09SOzK.T>_.j9(", file0.getName());
      assertEquals(1392409281320L, file0.lastModified());
      assertTrue(file0.isAbsolute());
      assertTrue(file0.exists());
      assertEquals(0L, file0.getFreeSpace());
      assertTrue(file0.isFile());
      assertFalse(file0.isDirectory());
      assertTrue(file0.canRead());
      assertEquals(0L, file0.length());
      assertEquals(0L, file0.getTotalSpace());
      assertTrue(file0.canExecute());
      assertTrue(file0.canWrite());
      assertEquals("/tmp/9SOzK.T>_.j9(09SOzK.T>_.j9(", file0.toString());
      assertEquals("/tmp", file0.getParent());
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isHidden());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertTrue(zipArchiveOutputStream0.isSeekable());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertEquals(0, zipArchiveOutputStream1.getCount());
      assertEquals(0L, zipArchiveOutputStream1.getBytesWritten());
      assertFalse(zipArchiveOutputStream1.isSeekable());
      assertEquals("UTF8", zipArchiveOutputStream1.getEncoding());
      assertEquals(0, zipArchiveOutputStream2.getCount());
      assertEquals(0L, zipArchiveOutputStream2.getBytesWritten());
      assertEquals("UTF8", zipArchiveOutputStream2.getEncoding());
      assertFalse(zipArchiveOutputStream2.isSeekable());
      assertNotNull(zipArchiveOutputStream2);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      
      // Undeclared exception!
//      try { 
        zipArchiveOutputStream2.addRawArchiveEntry(zipArchiveEntry0, pushbackInputStream0);
//        fail("Expecting exception: IllegalStateException");
      
//      } catch(IllegalStateException e) {
//         //
//         // No current entry
//         //
//         verifyException("org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream", e);
//      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      String string0 = "9SOzK.T>_.j9(";
      File file0 = MockFile.createTempFile("9SOzK.T>_.j9(", "9SOzK.T>_.j9(");
      assertFalse(file0.isDirectory());
      assertEquals("/tmp", file0.getParent());
      assertTrue(file0.canWrite());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(0L, file0.getUsableSpace());
      assertTrue(file0.isAbsolute());
      assertFalse(file0.isHidden());
      assertEquals("9SOzK.T>_.j9(09SOzK.T>_.j9(", file0.getName());
      assertEquals(0L, file0.length());
      assertTrue(file0.isFile());
      assertTrue(file0.canRead());
      assertTrue(file0.canExecute());
      assertEquals("/tmp/9SOzK.T>_.j9(09SOzK.T>_.j9(", file0.toString());
      assertEquals(0L, file0.getTotalSpace());
      assertTrue(file0.exists());
      assertEquals(1392409281320L, file0.lastModified());
      assertNotNull(file0);
      
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(file0);
      assertFalse(file0.isDirectory());
      assertEquals("/tmp", file0.getParent());
      assertTrue(file0.canWrite());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(0L, file0.getUsableSpace());
      assertTrue(file0.isAbsolute());
      assertFalse(file0.isHidden());
      assertEquals("9SOzK.T>_.j9(09SOzK.T>_.j9(", file0.getName());
      assertEquals(0L, file0.length());
      assertTrue(file0.isFile());
      assertTrue(file0.canRead());
      assertTrue(file0.canExecute());
      assertEquals("/tmp/9SOzK.T>_.j9(09SOzK.T>_.j9(", file0.toString());
      assertEquals(0L, file0.getTotalSpace());
      assertTrue(file0.exists());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertTrue(zipArchiveOutputStream0.isSeekable());
      assertNotNull(zipArchiveOutputStream0);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      
      zipArchiveOutputStream0.writeCentralDirectoryEnd();
      assertFalse(file0.isDirectory());
      assertEquals("/tmp", file0.getParent());
      assertTrue(file0.canWrite());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(0L, file0.getUsableSpace());
      assertTrue(file0.isAbsolute());
      assertFalse(file0.isHidden());
      assertEquals("9SOzK.T>_.j9(09SOzK.T>_.j9(", file0.getName());
      assertEquals(0L, file0.length());
      assertTrue(file0.isFile());
      assertTrue(file0.canRead());
      assertTrue(file0.canExecute());
      assertEquals("/tmp/9SOzK.T>_.j9(09SOzK.T>_.j9(", file0.toString());
      assertEquals(0L, file0.getTotalSpace());
      assertTrue(file0.exists());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertTrue(zipArchiveOutputStream0.isSeekable());
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      
      ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry("9SOzK.T>_.j9(");
      assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
      assertNull(zipArchiveEntry0.getComment());
      assertEquals("9SOzK.T>_.j9(", zipArchiveEntry0.toString());
      assertEquals((-1L), zipArchiveEntry0.getDataOffset());
      assertEquals((-1), zipArchiveEntry0.getMethod());
      assertEquals(0, zipArchiveEntry0.getRawFlag());
      assertEquals(0, zipArchiveEntry0.getInternalAttributes());
      assertFalse(zipArchiveEntry0.isUnixSymlink());
      assertEquals(0, zipArchiveEntry0.getPlatform());
      assertEquals(0, zipArchiveEntry0.getUnixMode());
      assertEquals(0, zipArchiveEntry0.getVersionMadeBy());
      assertEquals(0, zipArchiveEntry0.getVersionRequired());
      assertEquals((-1L), zipArchiveEntry0.getCompressedSize());
      assertEquals((-1L), zipArchiveEntry0.getSize());
      assertEquals("9SOzK.T>_.j9(", zipArchiveEntry0.getName());
      assertFalse(zipArchiveEntry0.isStreamContiguous());
      assertEquals((-1L), zipArchiveEntry0.getCrc());
      assertFalse(zipArchiveEntry0.isDirectory());
      assertNotNull(zipArchiveEntry0);
      assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      zipArchiveOutputStream0.putArchiveEntry(zipArchiveEntry0);
      assertFalse(file0.isDirectory());
      assertEquals("/tmp", file0.getParent());
      assertTrue(file0.canWrite());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(0L, file0.getUsableSpace());
      assertTrue(file0.isAbsolute());
      assertFalse(file0.isHidden());
      assertEquals("9SOzK.T>_.j9(09SOzK.T>_.j9(", file0.getName());
      assertEquals(0L, file0.length());
      assertTrue(file0.isFile());
      assertTrue(file0.canRead());
      assertTrue(file0.canExecute());
      assertEquals("/tmp/9SOzK.T>_.j9(09SOzK.T>_.j9(", file0.toString());
      assertEquals(0L, file0.getTotalSpace());
      assertTrue(file0.exists());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertTrue(zipArchiveOutputStream0.isSeekable());
      assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
      assertNull(zipArchiveEntry0.getComment());
      assertEquals("9SOzK.T>_.j9(", zipArchiveEntry0.toString());
      assertEquals((-1L), zipArchiveEntry0.getDataOffset());
      assertEquals(0, zipArchiveEntry0.getRawFlag());
      assertEquals(0, zipArchiveEntry0.getInternalAttributes());
      assertFalse(zipArchiveEntry0.isUnixSymlink());
      assertEquals(0, zipArchiveEntry0.getPlatform());
      assertEquals(0, zipArchiveEntry0.getUnixMode());
      assertEquals(0, zipArchiveEntry0.getVersionMadeBy());
      assertEquals(0, zipArchiveEntry0.getVersionRequired());
      assertEquals((-1L), zipArchiveEntry0.getCompressedSize());
      assertEquals((-1L), zipArchiveEntry0.getSize());
      assertEquals("9SOzK.T>_.j9(", zipArchiveEntry0.getName());
      assertFalse(zipArchiveEntry0.isStreamContiguous());
      assertEquals((-1L), zipArchiveEntry0.getCrc());
      assertFalse(zipArchiveEntry0.isDirectory());
      assertEquals(8, zipArchiveEntry0.getMethod());
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      
      zipArchiveOutputStream0.setUseLanguageEncodingFlag(true);
      assertFalse(file0.isDirectory());
      assertEquals("/tmp", file0.getParent());
      assertTrue(file0.canWrite());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(0L, file0.getUsableSpace());
      assertTrue(file0.isAbsolute());
      assertFalse(file0.isHidden());
      assertEquals("9SOzK.T>_.j9(09SOzK.T>_.j9(", file0.getName());
      assertEquals(0L, file0.length());
      assertTrue(file0.isFile());
      assertTrue(file0.canRead());
      assertTrue(file0.canExecute());
      assertEquals("/tmp/9SOzK.T>_.j9(09SOzK.T>_.j9(", file0.toString());
      assertEquals(0L, file0.getTotalSpace());
      assertTrue(file0.exists());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertTrue(zipArchiveOutputStream0.isSeekable());
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      
      boolean boolean1 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      ZipArchiveOutputStream zipArchiveOutputStream1 = new ZipArchiveOutputStream(zipArchiveOutputStream0);
      assertFalse(zipArchiveOutputStream1.equals((Object)zipArchiveOutputStream0));
      assertFalse(file0.isDirectory());
      assertEquals("/tmp", file0.getParent());
      assertTrue(file0.canWrite());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(0L, file0.getUsableSpace());
      assertTrue(file0.isAbsolute());
      assertFalse(file0.isHidden());
      assertEquals("9SOzK.T>_.j9(09SOzK.T>_.j9(", file0.getName());
      assertEquals(0L, file0.length());
      assertTrue(file0.isFile());
      assertTrue(file0.canRead());
      assertTrue(file0.canExecute());
      assertEquals("/tmp/9SOzK.T>_.j9(09SOzK.T>_.j9(", file0.toString());
      assertEquals(0L, file0.getTotalSpace());
      assertTrue(file0.exists());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertTrue(zipArchiveOutputStream0.isSeekable());
      assertFalse(zipArchiveOutputStream1.isSeekable());
      assertEquals("UTF8", zipArchiveOutputStream1.getEncoding());
      assertEquals(0L, zipArchiveOutputStream1.getBytesWritten());
      assertEquals(0, zipArchiveOutputStream1.getCount());
      assertNotNull(zipArchiveOutputStream1);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      
      ZipArchiveOutputStream.UnicodeExtraFieldPolicy zipArchiveOutputStream_UnicodeExtraFieldPolicy0 = ZipArchiveOutputStream.UnicodeExtraFieldPolicy.NOT_ENCODEABLE;
      assertEquals("not encodeable", zipArchiveOutputStream_UnicodeExtraFieldPolicy0.toString());
      assertNotNull(zipArchiveOutputStream_UnicodeExtraFieldPolicy0);
      
      zipArchiveOutputStream1.setCreateUnicodeExtraFields(zipArchiveOutputStream_UnicodeExtraFieldPolicy0);
      assertFalse(zipArchiveOutputStream0.equals((Object)zipArchiveOutputStream1));
      assertFalse(zipArchiveOutputStream1.equals((Object)zipArchiveOutputStream0));
      assertFalse(file0.isDirectory());
      assertEquals("/tmp", file0.getParent());
      assertTrue(file0.canWrite());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(0L, file0.getUsableSpace());
      assertTrue(file0.isAbsolute());
      assertFalse(file0.isHidden());
      assertEquals("9SOzK.T>_.j9(09SOzK.T>_.j9(", file0.getName());
      assertEquals(0L, file0.length());
      assertTrue(file0.isFile());
      assertTrue(file0.canRead());
      assertTrue(file0.canExecute());
      assertEquals("/tmp/9SOzK.T>_.j9(09SOzK.T>_.j9(", file0.toString());
      assertEquals(0L, file0.getTotalSpace());
      assertTrue(file0.exists());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertTrue(zipArchiveOutputStream0.isSeekable());
      assertFalse(zipArchiveOutputStream1.isSeekable());
      assertEquals("UTF8", zipArchiveOutputStream1.getEncoding());
      assertEquals(0L, zipArchiveOutputStream1.getBytesWritten());
      assertEquals(0, zipArchiveOutputStream1.getCount());
      assertEquals("not encodeable", zipArchiveOutputStream_UnicodeExtraFieldPolicy0.toString());
      assertNotSame(zipArchiveOutputStream0, zipArchiveOutputStream1);
      assertNotSame(zipArchiveOutputStream1, zipArchiveOutputStream0);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      
      zipArchiveOutputStream1.putArchiveEntry(zipArchiveEntry0);
      assertFalse(zipArchiveOutputStream0.equals((Object)zipArchiveOutputStream1));
      assertFalse(zipArchiveOutputStream1.equals((Object)zipArchiveOutputStream0));
      assertFalse(file0.isDirectory());
      assertEquals("/tmp", file0.getParent());
      assertTrue(file0.canWrite());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(0L, file0.getUsableSpace());
      assertTrue(file0.isAbsolute());
      assertFalse(file0.isHidden());
      assertEquals("9SOzK.T>_.j9(09SOzK.T>_.j9(", file0.getName());
      assertEquals(0L, file0.length());
      assertTrue(file0.isFile());
      assertTrue(file0.canRead());
      assertTrue(file0.canExecute());
      assertEquals("/tmp/9SOzK.T>_.j9(09SOzK.T>_.j9(", file0.toString());
      assertEquals(0L, file0.getTotalSpace());
      assertTrue(file0.exists());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertTrue(zipArchiveOutputStream0.isSeekable());
      assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
      assertNull(zipArchiveEntry0.getComment());
      assertEquals("9SOzK.T>_.j9(", zipArchiveEntry0.toString());
      assertEquals((-1L), zipArchiveEntry0.getDataOffset());
      assertEquals(0, zipArchiveEntry0.getRawFlag());
      assertEquals(0, zipArchiveEntry0.getInternalAttributes());
      assertFalse(zipArchiveEntry0.isUnixSymlink());
      assertEquals(0, zipArchiveEntry0.getPlatform());
      assertEquals(0, zipArchiveEntry0.getUnixMode());
      assertEquals(0, zipArchiveEntry0.getVersionMadeBy());
      assertEquals(0, zipArchiveEntry0.getVersionRequired());
      assertEquals((-1L), zipArchiveEntry0.getCompressedSize());
      assertEquals((-1L), zipArchiveEntry0.getSize());
      assertEquals("9SOzK.T>_.j9(", zipArchiveEntry0.getName());
      assertFalse(zipArchiveEntry0.isStreamContiguous());
      assertEquals((-1L), zipArchiveEntry0.getCrc());
      assertFalse(zipArchiveEntry0.isDirectory());
      assertEquals(8, zipArchiveEntry0.getMethod());
      assertFalse(zipArchiveOutputStream1.isSeekable());
      assertEquals("UTF8", zipArchiveOutputStream1.getEncoding());
      assertEquals(0L, zipArchiveOutputStream1.getBytesWritten());
      assertEquals(0, zipArchiveOutputStream1.getCount());
      assertNotSame(zipArchiveOutputStream0, zipArchiveOutputStream1);
      assertNotSame(zipArchiveOutputStream1, zipArchiveOutputStream0);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      
      zipArchiveOutputStream0.setMethod(3);
      assertFalse(zipArchiveOutputStream0.equals((Object)zipArchiveOutputStream1));
      assertFalse(file0.isDirectory());
      assertEquals("/tmp", file0.getParent());
      assertTrue(file0.canWrite());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(0L, file0.getUsableSpace());
      assertTrue(file0.isAbsolute());
      assertFalse(file0.isHidden());
      assertEquals("9SOzK.T>_.j9(09SOzK.T>_.j9(", file0.getName());
      assertEquals(0L, file0.length());
      assertTrue(file0.isFile());
      assertTrue(file0.canRead());
      assertTrue(file0.canExecute());
      assertEquals("/tmp/9SOzK.T>_.j9(09SOzK.T>_.j9(", file0.toString());
      assertEquals(0L, file0.getTotalSpace());
      assertTrue(file0.exists());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertTrue(zipArchiveOutputStream0.isSeekable());
      assertNotSame(zipArchiveOutputStream0, zipArchiveOutputStream1);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      
      zipArchiveOutputStream1.writeCentralFileHeader(zipArchiveEntry0);
      assertFalse(zipArchiveOutputStream0.equals((Object)zipArchiveOutputStream1));
      assertFalse(zipArchiveOutputStream1.equals((Object)zipArchiveOutputStream0));
      assertFalse(file0.isDirectory());
      assertEquals("/tmp", file0.getParent());
      assertTrue(file0.canWrite());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(0L, file0.getUsableSpace());
      assertTrue(file0.isAbsolute());
      assertFalse(file0.isHidden());
      assertEquals("9SOzK.T>_.j9(09SOzK.T>_.j9(", file0.getName());
      assertEquals(0L, file0.length());
      assertTrue(file0.isFile());
      assertTrue(file0.canRead());
      assertTrue(file0.canExecute());
      assertEquals("/tmp/9SOzK.T>_.j9(09SOzK.T>_.j9(", file0.toString());
      assertEquals(0L, file0.getTotalSpace());
      assertTrue(file0.exists());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertTrue(zipArchiveOutputStream0.isSeekable());
      assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
      assertNull(zipArchiveEntry0.getComment());
      assertEquals("9SOzK.T>_.j9(", zipArchiveEntry0.toString());
      assertEquals((-1L), zipArchiveEntry0.getDataOffset());
      assertEquals(0, zipArchiveEntry0.getRawFlag());
      assertEquals(0, zipArchiveEntry0.getInternalAttributes());
      assertFalse(zipArchiveEntry0.isUnixSymlink());
      assertEquals(0, zipArchiveEntry0.getPlatform());
      assertEquals(0, zipArchiveEntry0.getUnixMode());
      assertEquals(0, zipArchiveEntry0.getVersionMadeBy());
      assertEquals(0, zipArchiveEntry0.getVersionRequired());
      assertEquals((-1L), zipArchiveEntry0.getCompressedSize());
      assertEquals((-1L), zipArchiveEntry0.getSize());
      assertEquals("9SOzK.T>_.j9(", zipArchiveEntry0.getName());
      assertFalse(zipArchiveEntry0.isStreamContiguous());
      assertEquals((-1L), zipArchiveEntry0.getCrc());
      assertFalse(zipArchiveEntry0.isDirectory());
      assertEquals(8, zipArchiveEntry0.getMethod());
      assertFalse(zipArchiveOutputStream1.isSeekable());
      assertEquals("UTF8", zipArchiveOutputStream1.getEncoding());
      assertEquals(0L, zipArchiveOutputStream1.getBytesWritten());
      assertEquals(0, zipArchiveOutputStream1.getCount());
      assertNotSame(zipArchiveOutputStream0, zipArchiveOutputStream1);
      assertNotSame(zipArchiveOutputStream1, zipArchiveOutputStream0);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      
      zipArchiveOutputStream1.setUseLanguageEncodingFlag(true);
      assertFalse(zipArchiveOutputStream0.equals((Object)zipArchiveOutputStream1));
      assertFalse(zipArchiveOutputStream1.equals((Object)zipArchiveOutputStream0));
      assertFalse(file0.isDirectory());
      assertEquals("/tmp", file0.getParent());
      assertTrue(file0.canWrite());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(0L, file0.getUsableSpace());
      assertTrue(file0.isAbsolute());
      assertFalse(file0.isHidden());
      assertEquals("9SOzK.T>_.j9(09SOzK.T>_.j9(", file0.getName());
      assertEquals(0L, file0.length());
      assertTrue(file0.isFile());
      assertTrue(file0.canRead());
      assertTrue(file0.canExecute());
      assertEquals("/tmp/9SOzK.T>_.j9(09SOzK.T>_.j9(", file0.toString());
      assertEquals(0L, file0.getTotalSpace());
      assertTrue(file0.exists());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertTrue(zipArchiveOutputStream0.isSeekable());
      assertFalse(zipArchiveOutputStream1.isSeekable());
      assertEquals("UTF8", zipArchiveOutputStream1.getEncoding());
      assertEquals(0L, zipArchiveOutputStream1.getBytesWritten());
      assertEquals(0, zipArchiveOutputStream1.getCount());
      assertNotSame(zipArchiveOutputStream0, zipArchiveOutputStream1);
      assertNotSame(zipArchiveOutputStream1, zipArchiveOutputStream0);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      
      zipArchiveOutputStream1.putArchiveEntry(zipArchiveEntry0);
      assertFalse(zipArchiveOutputStream0.equals((Object)zipArchiveOutputStream1));
      assertFalse(zipArchiveOutputStream1.equals((Object)zipArchiveOutputStream0));
      assertFalse(file0.isDirectory());
      assertEquals("/tmp", file0.getParent());
      assertTrue(file0.canWrite());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(0L, file0.getUsableSpace());
      assertTrue(file0.isAbsolute());
      assertFalse(file0.isHidden());
      assertEquals("9SOzK.T>_.j9(09SOzK.T>_.j9(", file0.getName());
      assertEquals(0L, file0.length());
      assertTrue(file0.isFile());
      assertTrue(file0.canRead());
      assertTrue(file0.canExecute());
      assertEquals("/tmp/9SOzK.T>_.j9(09SOzK.T>_.j9(", file0.toString());
      assertEquals(0L, file0.getTotalSpace());
      assertTrue(file0.exists());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertTrue(zipArchiveOutputStream0.isSeekable());
      assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
      assertNull(zipArchiveEntry0.getComment());
      assertEquals("9SOzK.T>_.j9(", zipArchiveEntry0.toString());
      assertEquals((-1L), zipArchiveEntry0.getDataOffset());
      assertEquals(0, zipArchiveEntry0.getRawFlag());
      assertEquals(0, zipArchiveEntry0.getInternalAttributes());
      assertFalse(zipArchiveEntry0.isUnixSymlink());
      assertEquals(0, zipArchiveEntry0.getPlatform());
      assertEquals(0, zipArchiveEntry0.getUnixMode());
      assertEquals(0, zipArchiveEntry0.getVersionMadeBy());
      assertEquals(0, zipArchiveEntry0.getVersionRequired());
      assertEquals(65L, zipArchiveEntry0.getCompressedSize());
      assertEquals(0L, zipArchiveEntry0.getSize());
      assertEquals("9SOzK.T>_.j9(", zipArchiveEntry0.getName());
      assertFalse(zipArchiveEntry0.isStreamContiguous());
      assertEquals(0L, zipArchiveEntry0.getCrc());
      assertFalse(zipArchiveEntry0.isDirectory());
      assertEquals(8, zipArchiveEntry0.getMethod());
      assertFalse(zipArchiveOutputStream1.isSeekable());
      assertEquals("UTF8", zipArchiveOutputStream1.getEncoding());
      assertEquals(0L, zipArchiveOutputStream1.getBytesWritten());
      assertEquals(0, zipArchiveOutputStream1.getCount());
      assertNotSame(zipArchiveOutputStream0, zipArchiveOutputStream1);
      assertNotSame(zipArchiveOutputStream1, zipArchiveOutputStream0);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      
      // Undeclared exception!
//      try { 
        zipArchiveOutputStream0.write((byte[]) null, 3, 2048);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.util.zip.CRC32", e);
//      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream((SeekableByteChannel) null);
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertFalse(zipArchiveOutputStream0.isSeekable());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertNotNull(zipArchiveOutputStream0);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      
      zipArchiveOutputStream0.destroy();
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertFalse(zipArchiveOutputStream0.isSeekable());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      
      zipArchiveOutputStream0.setEncoding((String) null);
      assertFalse(zipArchiveOutputStream0.isSeekable());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertNull(zipArchiveOutputStream0.getEncoding());
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      
      // Undeclared exception!
//      try { 
        zipArchiveOutputStream0.finish();
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      File file0 = MockFile.createTempFile("9SOzK.T>_.j9(", "9SOzK.T>_.j9(");
      assertTrue(file0.isAbsolute());
      assertEquals("/tmp/9SOzK.T>_.j9(09SOzK.T>_.j9(", file0.toString());
      assertTrue(file0.canRead());
      assertTrue(file0.isFile());
      assertTrue(file0.canWrite());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(0L, file0.length());
      assertTrue(file0.canExecute());
      assertFalse(file0.isDirectory());
      assertEquals(0L, file0.getFreeSpace());
      assertTrue(file0.exists());
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isHidden());
      assertEquals("9SOzK.T>_.j9(09SOzK.T>_.j9(", file0.getName());
      assertEquals("/tmp", file0.getParent());
      assertNotNull(file0);
      
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(file0);
      assertTrue(file0.isAbsolute());
      assertEquals("/tmp/9SOzK.T>_.j9(09SOzK.T>_.j9(", file0.toString());
      assertTrue(file0.canRead());
      assertTrue(file0.isFile());
      assertTrue(file0.canWrite());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(0L, file0.length());
      assertTrue(file0.canExecute());
      assertFalse(file0.isDirectory());
      assertEquals(0L, file0.getFreeSpace());
      assertTrue(file0.exists());
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isHidden());
      assertEquals("9SOzK.T>_.j9(09SOzK.T>_.j9(", file0.getName());
      assertEquals("/tmp", file0.getParent());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertTrue(zipArchiveOutputStream0.isSeekable());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertNotNull(zipArchiveOutputStream0);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      
      zipArchiveOutputStream0.writeCentralDirectoryEnd();
      assertTrue(file0.isAbsolute());
      assertEquals("/tmp/9SOzK.T>_.j9(09SOzK.T>_.j9(", file0.toString());
      assertTrue(file0.canRead());
      assertTrue(file0.isFile());
      assertTrue(file0.canWrite());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(0L, file0.length());
      assertTrue(file0.canExecute());
      assertFalse(file0.isDirectory());
      assertEquals(0L, file0.getFreeSpace());
      assertTrue(file0.exists());
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isHidden());
      assertEquals("9SOzK.T>_.j9(09SOzK.T>_.j9(", file0.getName());
      assertEquals("/tmp", file0.getParent());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertTrue(zipArchiveOutputStream0.isSeekable());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      
      ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry("9SOzK.T>_.j9(");
      assertEquals((-1L), zipArchiveEntry0.getCrc());
      assertEquals(0, zipArchiveEntry0.getRawFlag());
      assertEquals(0, zipArchiveEntry0.getUnixMode());
      assertEquals(0, zipArchiveEntry0.getVersionMadeBy());
      assertEquals((-1L), zipArchiveEntry0.getCompressedSize());
      assertEquals("9SOzK.T>_.j9(", zipArchiveEntry0.getName());
      assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
      assertEquals((-1), zipArchiveEntry0.getMethod());
      assertEquals(0, zipArchiveEntry0.getVersionRequired());
      assertEquals(0, zipArchiveEntry0.getInternalAttributes());
      assertEquals(0, zipArchiveEntry0.getPlatform());
      assertEquals("9SOzK.T>_.j9(", zipArchiveEntry0.toString());
      assertEquals((-1L), zipArchiveEntry0.getDataOffset());
      assertFalse(zipArchiveEntry0.isUnixSymlink());
      assertFalse(zipArchiveEntry0.isDirectory());
      assertEquals((-1L), zipArchiveEntry0.getSize());
      assertFalse(zipArchiveEntry0.isStreamContiguous());
      assertNull(zipArchiveEntry0.getComment());
      assertNotNull(zipArchiveEntry0);
      assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      
      boolean boolean0 = zipArchiveEntry0.equals(zipArchiveOutputStream0);
      assertTrue(file0.isAbsolute());
      assertEquals("/tmp/9SOzK.T>_.j9(09SOzK.T>_.j9(", file0.toString());
      assertTrue(file0.canRead());
      assertTrue(file0.isFile());
      assertTrue(file0.canWrite());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(0L, file0.length());
      assertTrue(file0.canExecute());
      assertFalse(file0.isDirectory());
      assertEquals(0L, file0.getFreeSpace());
      assertTrue(file0.exists());
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isHidden());
      assertEquals("9SOzK.T>_.j9(09SOzK.T>_.j9(", file0.getName());
      assertEquals("/tmp", file0.getParent());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertTrue(zipArchiveOutputStream0.isSeekable());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertEquals((-1L), zipArchiveEntry0.getCrc());
      assertEquals(0, zipArchiveEntry0.getRawFlag());
      assertEquals(0, zipArchiveEntry0.getUnixMode());
      assertEquals(0, zipArchiveEntry0.getVersionMadeBy());
      assertEquals((-1L), zipArchiveEntry0.getCompressedSize());
      assertEquals("9SOzK.T>_.j9(", zipArchiveEntry0.getName());
      assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
      assertEquals((-1), zipArchiveEntry0.getMethod());
      assertEquals(0, zipArchiveEntry0.getVersionRequired());
      assertEquals(0, zipArchiveEntry0.getInternalAttributes());
      assertEquals(0, zipArchiveEntry0.getPlatform());
      assertEquals("9SOzK.T>_.j9(", zipArchiveEntry0.toString());
      assertEquals((-1L), zipArchiveEntry0.getDataOffset());
      assertFalse(zipArchiveEntry0.isUnixSymlink());
      assertFalse(zipArchiveEntry0.isDirectory());
      assertEquals((-1L), zipArchiveEntry0.getSize());
      assertFalse(zipArchiveEntry0.isStreamContiguous());
      assertNull(zipArchiveEntry0.getComment());
      assertFalse(boolean0);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      
      zipArchiveOutputStream0.putArchiveEntry(zipArchiveEntry0);
      assertTrue(file0.isAbsolute());
      assertEquals("/tmp/9SOzK.T>_.j9(09SOzK.T>_.j9(", file0.toString());
      assertTrue(file0.canRead());
      assertTrue(file0.isFile());
      assertTrue(file0.canWrite());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(0L, file0.length());
      assertTrue(file0.canExecute());
      assertFalse(file0.isDirectory());
      assertEquals(0L, file0.getFreeSpace());
      assertTrue(file0.exists());
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isHidden());
      assertEquals("9SOzK.T>_.j9(09SOzK.T>_.j9(", file0.getName());
      assertEquals("/tmp", file0.getParent());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertTrue(zipArchiveOutputStream0.isSeekable());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertEquals((-1L), zipArchiveEntry0.getCrc());
      assertEquals(0, zipArchiveEntry0.getRawFlag());
      assertEquals(0, zipArchiveEntry0.getUnixMode());
      assertEquals(0, zipArchiveEntry0.getVersionMadeBy());
      assertEquals((-1L), zipArchiveEntry0.getCompressedSize());
      assertEquals("9SOzK.T>_.j9(", zipArchiveEntry0.getName());
      assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
      assertEquals(0, zipArchiveEntry0.getVersionRequired());
      assertEquals(0, zipArchiveEntry0.getInternalAttributes());
      assertEquals(0, zipArchiveEntry0.getPlatform());
      assertEquals("9SOzK.T>_.j9(", zipArchiveEntry0.toString());
      assertEquals((-1L), zipArchiveEntry0.getDataOffset());
      assertEquals(8, zipArchiveEntry0.getMethod());
      assertFalse(zipArchiveEntry0.isUnixSymlink());
      assertFalse(zipArchiveEntry0.isDirectory());
      assertEquals((-1L), zipArchiveEntry0.getSize());
      assertFalse(zipArchiveEntry0.isStreamContiguous());
      assertNull(zipArchiveEntry0.getComment());
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      
      zipArchiveOutputStream0.setUseLanguageEncodingFlag(false);
      assertTrue(file0.isAbsolute());
      assertEquals("/tmp/9SOzK.T>_.j9(09SOzK.T>_.j9(", file0.toString());
      assertTrue(file0.canRead());
      assertTrue(file0.isFile());
      assertTrue(file0.canWrite());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(0L, file0.length());
      assertTrue(file0.canExecute());
      assertFalse(file0.isDirectory());
      assertEquals(0L, file0.getFreeSpace());
      assertTrue(file0.exists());
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isHidden());
      assertEquals("9SOzK.T>_.j9(09SOzK.T>_.j9(", file0.getName());
      assertEquals("/tmp", file0.getParent());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertTrue(zipArchiveOutputStream0.isSeekable());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      
      boolean boolean1 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      ZipArchiveOutputStream zipArchiveOutputStream1 = new ZipArchiveOutputStream(zipArchiveOutputStream0);
      assertFalse(zipArchiveOutputStream1.equals((Object)zipArchiveOutputStream0));
      assertTrue(file0.isAbsolute());
      assertEquals("/tmp/9SOzK.T>_.j9(09SOzK.T>_.j9(", file0.toString());
      assertTrue(file0.canRead());
      assertTrue(file0.isFile());
      assertTrue(file0.canWrite());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(0L, file0.length());
      assertTrue(file0.canExecute());
      assertFalse(file0.isDirectory());
      assertEquals(0L, file0.getFreeSpace());
      assertTrue(file0.exists());
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isHidden());
      assertEquals("9SOzK.T>_.j9(09SOzK.T>_.j9(", file0.getName());
      assertEquals("/tmp", file0.getParent());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertTrue(zipArchiveOutputStream0.isSeekable());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertEquals("UTF8", zipArchiveOutputStream1.getEncoding());
      assertFalse(zipArchiveOutputStream1.isSeekable());
      assertEquals(0, zipArchiveOutputStream1.getCount());
      assertEquals(0L, zipArchiveOutputStream1.getBytesWritten());
      assertNotNull(zipArchiveOutputStream1);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      
      ZipArchiveOutputStream.UnicodeExtraFieldPolicy zipArchiveOutputStream_UnicodeExtraFieldPolicy0 = ZipArchiveOutputStream.UnicodeExtraFieldPolicy.NOT_ENCODEABLE;
      assertEquals("not encodeable", zipArchiveOutputStream_UnicodeExtraFieldPolicy0.toString());
      assertNotNull(zipArchiveOutputStream_UnicodeExtraFieldPolicy0);
      
      zipArchiveOutputStream1.setCreateUnicodeExtraFields(zipArchiveOutputStream_UnicodeExtraFieldPolicy0);
      assertFalse(zipArchiveOutputStream0.equals((Object)zipArchiveOutputStream1));
      assertFalse(zipArchiveOutputStream1.equals((Object)zipArchiveOutputStream0));
      assertTrue(file0.isAbsolute());
      assertEquals("/tmp/9SOzK.T>_.j9(09SOzK.T>_.j9(", file0.toString());
      assertTrue(file0.canRead());
      assertTrue(file0.isFile());
      assertTrue(file0.canWrite());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(0L, file0.length());
      assertTrue(file0.canExecute());
      assertFalse(file0.isDirectory());
      assertEquals(0L, file0.getFreeSpace());
      assertTrue(file0.exists());
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isHidden());
      assertEquals("9SOzK.T>_.j9(09SOzK.T>_.j9(", file0.getName());
      assertEquals("/tmp", file0.getParent());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertTrue(zipArchiveOutputStream0.isSeekable());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertEquals("UTF8", zipArchiveOutputStream1.getEncoding());
      assertFalse(zipArchiveOutputStream1.isSeekable());
      assertEquals(0, zipArchiveOutputStream1.getCount());
      assertEquals(0L, zipArchiveOutputStream1.getBytesWritten());
      assertEquals("not encodeable", zipArchiveOutputStream_UnicodeExtraFieldPolicy0.toString());
      assertNotSame(zipArchiveOutputStream0, zipArchiveOutputStream1);
      assertNotSame(zipArchiveOutputStream1, zipArchiveOutputStream0);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      
      zipArchiveOutputStream1.putArchiveEntry(zipArchiveEntry0);
      assertFalse(zipArchiveOutputStream0.equals((Object)zipArchiveOutputStream1));
      assertFalse(zipArchiveOutputStream1.equals((Object)zipArchiveOutputStream0));
      assertTrue(file0.isAbsolute());
      assertEquals("/tmp/9SOzK.T>_.j9(09SOzK.T>_.j9(", file0.toString());
      assertTrue(file0.canRead());
      assertTrue(file0.isFile());
      assertTrue(file0.canWrite());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(0L, file0.length());
      assertTrue(file0.canExecute());
      assertFalse(file0.isDirectory());
      assertEquals(0L, file0.getFreeSpace());
      assertTrue(file0.exists());
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isHidden());
      assertEquals("9SOzK.T>_.j9(09SOzK.T>_.j9(", file0.getName());
      assertEquals("/tmp", file0.getParent());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertTrue(zipArchiveOutputStream0.isSeekable());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertEquals((-1L), zipArchiveEntry0.getCrc());
      assertEquals(0, zipArchiveEntry0.getRawFlag());
      assertEquals(0, zipArchiveEntry0.getUnixMode());
      assertEquals(0, zipArchiveEntry0.getVersionMadeBy());
      assertEquals((-1L), zipArchiveEntry0.getCompressedSize());
      assertEquals("9SOzK.T>_.j9(", zipArchiveEntry0.getName());
      assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
      assertEquals(0, zipArchiveEntry0.getVersionRequired());
      assertEquals(0, zipArchiveEntry0.getInternalAttributes());
      assertEquals(0, zipArchiveEntry0.getPlatform());
      assertEquals("9SOzK.T>_.j9(", zipArchiveEntry0.toString());
      assertEquals((-1L), zipArchiveEntry0.getDataOffset());
      assertEquals(8, zipArchiveEntry0.getMethod());
      assertFalse(zipArchiveEntry0.isUnixSymlink());
      assertFalse(zipArchiveEntry0.isDirectory());
      assertEquals((-1L), zipArchiveEntry0.getSize());
      assertFalse(zipArchiveEntry0.isStreamContiguous());
      assertNull(zipArchiveEntry0.getComment());
      assertEquals("UTF8", zipArchiveOutputStream1.getEncoding());
      assertFalse(zipArchiveOutputStream1.isSeekable());
      assertEquals(0, zipArchiveOutputStream1.getCount());
      assertEquals(0L, zipArchiveOutputStream1.getBytesWritten());
      assertNotSame(zipArchiveOutputStream0, zipArchiveOutputStream1);
      assertNotSame(zipArchiveOutputStream1, zipArchiveOutputStream0);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      
      zipArchiveOutputStream0.setMethod(3);
      assertFalse(zipArchiveOutputStream0.equals((Object)zipArchiveOutputStream1));
      assertTrue(file0.isAbsolute());
      assertEquals("/tmp/9SOzK.T>_.j9(09SOzK.T>_.j9(", file0.toString());
      assertTrue(file0.canRead());
      assertTrue(file0.isFile());
      assertTrue(file0.canWrite());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(0L, file0.length());
      assertTrue(file0.canExecute());
      assertFalse(file0.isDirectory());
      assertEquals(0L, file0.getFreeSpace());
      assertTrue(file0.exists());
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isHidden());
      assertEquals("9SOzK.T>_.j9(09SOzK.T>_.j9(", file0.getName());
      assertEquals("/tmp", file0.getParent());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertTrue(zipArchiveOutputStream0.isSeekable());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertNotSame(zipArchiveOutputStream0, zipArchiveOutputStream1);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      
      zipArchiveOutputStream1.writeCentralFileHeader(zipArchiveEntry0);
      assertFalse(zipArchiveOutputStream0.equals((Object)zipArchiveOutputStream1));
      assertFalse(zipArchiveOutputStream1.equals((Object)zipArchiveOutputStream0));
      assertTrue(file0.isAbsolute());
      assertEquals("/tmp/9SOzK.T>_.j9(09SOzK.T>_.j9(", file0.toString());
      assertTrue(file0.canRead());
      assertTrue(file0.isFile());
      assertTrue(file0.canWrite());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(0L, file0.length());
      assertTrue(file0.canExecute());
      assertFalse(file0.isDirectory());
      assertEquals(0L, file0.getFreeSpace());
      assertTrue(file0.exists());
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isHidden());
      assertEquals("9SOzK.T>_.j9(09SOzK.T>_.j9(", file0.getName());
      assertEquals("/tmp", file0.getParent());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertTrue(zipArchiveOutputStream0.isSeekable());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertEquals((-1L), zipArchiveEntry0.getCrc());
      assertEquals(0, zipArchiveEntry0.getRawFlag());
      assertEquals(0, zipArchiveEntry0.getUnixMode());
      assertEquals(0, zipArchiveEntry0.getVersionMadeBy());
      assertEquals((-1L), zipArchiveEntry0.getCompressedSize());
      assertEquals("9SOzK.T>_.j9(", zipArchiveEntry0.getName());
      assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
      assertEquals(0, zipArchiveEntry0.getVersionRequired());
      assertEquals(0, zipArchiveEntry0.getInternalAttributes());
      assertEquals(0, zipArchiveEntry0.getPlatform());
      assertEquals("9SOzK.T>_.j9(", zipArchiveEntry0.toString());
      assertEquals((-1L), zipArchiveEntry0.getDataOffset());
      assertEquals(8, zipArchiveEntry0.getMethod());
      assertFalse(zipArchiveEntry0.isUnixSymlink());
      assertFalse(zipArchiveEntry0.isDirectory());
      assertEquals((-1L), zipArchiveEntry0.getSize());
      assertFalse(zipArchiveEntry0.isStreamContiguous());
      assertNull(zipArchiveEntry0.getComment());
      assertEquals("UTF8", zipArchiveOutputStream1.getEncoding());
      assertFalse(zipArchiveOutputStream1.isSeekable());
      assertEquals(0, zipArchiveOutputStream1.getCount());
      assertEquals(0L, zipArchiveOutputStream1.getBytesWritten());
      assertNotSame(zipArchiveOutputStream0, zipArchiveOutputStream1);
      assertNotSame(zipArchiveOutputStream1, zipArchiveOutputStream0);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      
      zipArchiveOutputStream1.setUseLanguageEncodingFlag(false);
      assertFalse(zipArchiveOutputStream0.equals((Object)zipArchiveOutputStream1));
      assertFalse(zipArchiveOutputStream1.equals((Object)zipArchiveOutputStream0));
      assertTrue(file0.isAbsolute());
      assertEquals("/tmp/9SOzK.T>_.j9(09SOzK.T>_.j9(", file0.toString());
      assertTrue(file0.canRead());
      assertTrue(file0.isFile());
      assertTrue(file0.canWrite());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(0L, file0.length());
      assertTrue(file0.canExecute());
      assertFalse(file0.isDirectory());
      assertEquals(0L, file0.getFreeSpace());
      assertTrue(file0.exists());
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isHidden());
      assertEquals("9SOzK.T>_.j9(09SOzK.T>_.j9(", file0.getName());
      assertEquals("/tmp", file0.getParent());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertTrue(zipArchiveOutputStream0.isSeekable());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertEquals("UTF8", zipArchiveOutputStream1.getEncoding());
      assertFalse(zipArchiveOutputStream1.isSeekable());
      assertEquals(0, zipArchiveOutputStream1.getCount());
      assertEquals(0L, zipArchiveOutputStream1.getBytesWritten());
      assertNotSame(zipArchiveOutputStream0, zipArchiveOutputStream1);
      assertNotSame(zipArchiveOutputStream1, zipArchiveOutputStream0);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      
      zipArchiveOutputStream1.putArchiveEntry(zipArchiveEntry0);
      assertFalse(zipArchiveOutputStream0.equals((Object)zipArchiveOutputStream1));
      assertFalse(zipArchiveOutputStream1.equals((Object)zipArchiveOutputStream0));
      assertTrue(file0.isAbsolute());
      assertEquals("/tmp/9SOzK.T>_.j9(09SOzK.T>_.j9(", file0.toString());
      assertTrue(file0.canRead());
      assertTrue(file0.isFile());
      assertTrue(file0.canWrite());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(0L, file0.length());
      assertTrue(file0.canExecute());
      assertFalse(file0.isDirectory());
      assertEquals(0L, file0.getFreeSpace());
      assertTrue(file0.exists());
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isHidden());
      assertEquals("9SOzK.T>_.j9(09SOzK.T>_.j9(", file0.getName());
      assertEquals("/tmp", file0.getParent());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertTrue(zipArchiveOutputStream0.isSeekable());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertEquals(0L, zipArchiveEntry0.getCrc());
      assertEquals(0, zipArchiveEntry0.getRawFlag());
      assertEquals(0, zipArchiveEntry0.getUnixMode());
      assertEquals(0, zipArchiveEntry0.getVersionMadeBy());
      assertEquals(65L, zipArchiveEntry0.getCompressedSize());
      assertEquals("9SOzK.T>_.j9(", zipArchiveEntry0.getName());
      assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
      assertEquals(0, zipArchiveEntry0.getVersionRequired());
      assertEquals(0, zipArchiveEntry0.getInternalAttributes());
      assertEquals(0, zipArchiveEntry0.getPlatform());
      assertEquals("9SOzK.T>_.j9(", zipArchiveEntry0.toString());
      assertEquals((-1L), zipArchiveEntry0.getDataOffset());
      assertEquals(8, zipArchiveEntry0.getMethod());
      assertFalse(zipArchiveEntry0.isUnixSymlink());
      assertFalse(zipArchiveEntry0.isDirectory());
      assertEquals(0L, zipArchiveEntry0.getSize());
      assertFalse(zipArchiveEntry0.isStreamContiguous());
      assertNull(zipArchiveEntry0.getComment());
      assertEquals("UTF8", zipArchiveOutputStream1.getEncoding());
      assertFalse(zipArchiveOutputStream1.isSeekable());
      assertEquals(0, zipArchiveOutputStream1.getCount());
      assertEquals(0L, zipArchiveOutputStream1.getBytesWritten());
      assertNotSame(zipArchiveOutputStream0, zipArchiveOutputStream1);
      assertNotSame(zipArchiveOutputStream1, zipArchiveOutputStream0);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      
      zipArchiveOutputStream1.closeArchiveEntry();
      assertFalse(zipArchiveOutputStream0.equals((Object)zipArchiveOutputStream1));
      assertFalse(zipArchiveOutputStream1.equals((Object)zipArchiveOutputStream0));
      assertTrue(file0.isAbsolute());
      assertEquals("/tmp/9SOzK.T>_.j9(09SOzK.T>_.j9(", file0.toString());
      assertTrue(file0.canRead());
      assertTrue(file0.isFile());
      assertTrue(file0.canWrite());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(0L, file0.length());
      assertTrue(file0.canExecute());
      assertFalse(file0.isDirectory());
      assertEquals(0L, file0.getFreeSpace());
      assertTrue(file0.exists());
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isHidden());
      assertEquals("9SOzK.T>_.j9(09SOzK.T>_.j9(", file0.getName());
      assertEquals("/tmp", file0.getParent());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertTrue(zipArchiveOutputStream0.isSeekable());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertEquals("UTF8", zipArchiveOutputStream1.getEncoding());
      assertFalse(zipArchiveOutputStream1.isSeekable());
      assertEquals(0, zipArchiveOutputStream1.getCount());
      assertEquals(0L, zipArchiveOutputStream1.getBytesWritten());
      assertNotSame(zipArchiveOutputStream0, zipArchiveOutputStream1);
      assertNotSame(zipArchiveOutputStream1, zipArchiveOutputStream0);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      
      zipArchiveOutputStream0.setLevel(0);
      assertFalse(zipArchiveOutputStream0.equals((Object)zipArchiveOutputStream1));
      assertTrue(file0.isAbsolute());
      assertEquals("/tmp/9SOzK.T>_.j9(09SOzK.T>_.j9(", file0.toString());
      assertTrue(file0.canRead());
      assertTrue(file0.isFile());
      assertTrue(file0.canWrite());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(0L, file0.length());
      assertTrue(file0.canExecute());
      assertFalse(file0.isDirectory());
      assertEquals(0L, file0.getFreeSpace());
      assertTrue(file0.exists());
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isHidden());
      assertEquals("9SOzK.T>_.j9(09SOzK.T>_.j9(", file0.getName());
      assertEquals("/tmp", file0.getParent());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertTrue(zipArchiveOutputStream0.isSeekable());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertNotSame(zipArchiveOutputStream0, zipArchiveOutputStream1);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      File file0 = MockFile.createTempFile("9SOzK.T>_.j9(", "9SOzK.T>_.j9(");
      assertFalse(file0.isHidden());
      assertTrue(file0.exists());
      assertEquals("/tmp", file0.getParent());
      assertTrue(file0.isFile());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals("/tmp/9SOzK.T>_.j9(09SOzK.T>_.j9(", file0.toString());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(1392409281320L, file0.lastModified());
      assertTrue(file0.canRead());
      assertTrue(file0.isAbsolute());
      assertEquals("9SOzK.T>_.j9(09SOzK.T>_.j9(", file0.getName());
      assertTrue(file0.canWrite());
      assertFalse(file0.isDirectory());
      assertEquals(0L, file0.getFreeSpace());
      assertTrue(file0.canExecute());
      assertEquals(0L, file0.length());
      assertNotNull(file0);
      
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(file0);
      assertFalse(file0.isHidden());
      assertTrue(file0.exists());
      assertEquals("/tmp", file0.getParent());
      assertTrue(file0.isFile());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals("/tmp/9SOzK.T>_.j9(09SOzK.T>_.j9(", file0.toString());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(1392409281320L, file0.lastModified());
      assertTrue(file0.canRead());
      assertTrue(file0.isAbsolute());
      assertEquals("9SOzK.T>_.j9(09SOzK.T>_.j9(", file0.getName());
      assertTrue(file0.canWrite());
      assertFalse(file0.isDirectory());
      assertEquals(0L, file0.getFreeSpace());
      assertTrue(file0.canExecute());
      assertEquals(0L, file0.length());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertTrue(zipArchiveOutputStream0.isSeekable());
      assertNotNull(zipArchiveOutputStream0);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      
      zipArchiveOutputStream0.writeCentralDirectoryEnd();
      assertFalse(file0.isHidden());
      assertTrue(file0.exists());
      assertEquals("/tmp", file0.getParent());
      assertTrue(file0.isFile());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals("/tmp/9SOzK.T>_.j9(09SOzK.T>_.j9(", file0.toString());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(1392409281320L, file0.lastModified());
      assertTrue(file0.canRead());
      assertTrue(file0.isAbsolute());
      assertEquals("9SOzK.T>_.j9(09SOzK.T>_.j9(", file0.getName());
      assertTrue(file0.canWrite());
      assertFalse(file0.isDirectory());
      assertEquals(0L, file0.getFreeSpace());
      assertTrue(file0.canExecute());
      assertEquals(0L, file0.length());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertTrue(zipArchiveOutputStream0.isSeekable());
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      
      ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry("9SOzK.T>_.j9(");
      assertEquals((-1L), zipArchiveEntry0.getCompressedSize());
      assertFalse(zipArchiveEntry0.isDirectory());
      assertEquals(0, zipArchiveEntry0.getVersionRequired());
      assertEquals(0, zipArchiveEntry0.getUnixMode());
      assertEquals(0, zipArchiveEntry0.getRawFlag());
      assertEquals(0, zipArchiveEntry0.getInternalAttributes());
      assertEquals(0, zipArchiveEntry0.getPlatform());
      assertFalse(zipArchiveEntry0.isUnixSymlink());
      assertEquals(0, zipArchiveEntry0.getVersionMadeBy());
      assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
      assertEquals((-1L), zipArchiveEntry0.getDataOffset());
      assertNull(zipArchiveEntry0.getComment());
      assertEquals("9SOzK.T>_.j9(", zipArchiveEntry0.toString());
      assertEquals((-1), zipArchiveEntry0.getMethod());
      assertFalse(zipArchiveEntry0.isStreamContiguous());
      assertEquals((-1L), zipArchiveEntry0.getCrc());
      assertEquals((-1L), zipArchiveEntry0.getSize());
      assertEquals("9SOzK.T>_.j9(", zipArchiveEntry0.getName());
      assertNotNull(zipArchiveEntry0);
      assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      
      boolean boolean0 = file0.setExecutable(false);
      assertFalse(file0.isHidden());
      assertTrue(file0.exists());
      assertEquals("/tmp", file0.getParent());
      assertTrue(file0.isFile());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals("/tmp/9SOzK.T>_.j9(09SOzK.T>_.j9(", file0.toString());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(1392409281320L, file0.lastModified());
      assertTrue(file0.canRead());
      assertTrue(file0.isAbsolute());
      assertFalse(file0.canExecute());
      assertEquals("9SOzK.T>_.j9(09SOzK.T>_.j9(", file0.getName());
      assertTrue(file0.canWrite());
      assertFalse(file0.isDirectory());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(0L, file0.length());
      assertTrue(boolean0);
      
      boolean boolean1 = zipArchiveOutputStream0.finished;
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/tmp");
      boolean boolean2 = FileSystemHandling.appendDataToFile(evoSuiteFile0, (byte[]) null);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2);
      
      zipArchiveOutputStream0.putArchiveEntry(zipArchiveEntry0);
      assertFalse(file0.isHidden());
      assertTrue(file0.exists());
      assertEquals("/tmp", file0.getParent());
      assertTrue(file0.isFile());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals("/tmp/9SOzK.T>_.j9(09SOzK.T>_.j9(", file0.toString());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(1392409281320L, file0.lastModified());
      assertTrue(file0.canRead());
      assertTrue(file0.isAbsolute());
      assertFalse(file0.canExecute());
      assertEquals("9SOzK.T>_.j9(09SOzK.T>_.j9(", file0.getName());
      assertTrue(file0.canWrite());
      assertFalse(file0.isDirectory());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(0L, file0.length());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertTrue(zipArchiveOutputStream0.isSeekable());
      assertEquals((-1L), zipArchiveEntry0.getCompressedSize());
      assertFalse(zipArchiveEntry0.isDirectory());
      assertEquals(0, zipArchiveEntry0.getVersionRequired());
      assertEquals(0, zipArchiveEntry0.getUnixMode());
      assertEquals(0, zipArchiveEntry0.getRawFlag());
      assertEquals(0, zipArchiveEntry0.getInternalAttributes());
      assertEquals(0, zipArchiveEntry0.getPlatform());
      assertFalse(zipArchiveEntry0.isUnixSymlink());
      assertEquals(0, zipArchiveEntry0.getVersionMadeBy());
      assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
      assertEquals((-1L), zipArchiveEntry0.getDataOffset());
      assertNull(zipArchiveEntry0.getComment());
      assertEquals("9SOzK.T>_.j9(", zipArchiveEntry0.toString());
      assertFalse(zipArchiveEntry0.isStreamContiguous());
      assertEquals((-1L), zipArchiveEntry0.getCrc());
      assertEquals((-1L), zipArchiveEntry0.getSize());
      assertEquals(8, zipArchiveEntry0.getMethod());
      assertEquals("9SOzK.T>_.j9(", zipArchiveEntry0.getName());
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      
      zipArchiveOutputStream0.putArchiveEntry(zipArchiveEntry0);
      assertFalse(file0.isHidden());
      assertTrue(file0.exists());
      assertEquals("/tmp", file0.getParent());
      assertTrue(file0.isFile());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals("/tmp/9SOzK.T>_.j9(09SOzK.T>_.j9(", file0.toString());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(1392409281320L, file0.lastModified());
      assertTrue(file0.canRead());
      assertTrue(file0.isAbsolute());
      assertFalse(file0.canExecute());
      assertEquals("9SOzK.T>_.j9(09SOzK.T>_.j9(", file0.getName());
      assertTrue(file0.canWrite());
      assertFalse(file0.isDirectory());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(0L, file0.length());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertTrue(zipArchiveOutputStream0.isSeekable());
      assertFalse(zipArchiveEntry0.isDirectory());
      assertEquals(0, zipArchiveEntry0.getVersionRequired());
      assertEquals(0, zipArchiveEntry0.getUnixMode());
      assertEquals(0, zipArchiveEntry0.getRawFlag());
      assertEquals(0, zipArchiveEntry0.getInternalAttributes());
      assertEquals(0, zipArchiveEntry0.getPlatform());
      assertFalse(zipArchiveEntry0.isUnixSymlink());
      assertEquals(0, zipArchiveEntry0.getVersionMadeBy());
      assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
      assertEquals((-1L), zipArchiveEntry0.getDataOffset());
      assertNull(zipArchiveEntry0.getComment());
      assertEquals("9SOzK.T>_.j9(", zipArchiveEntry0.toString());
      assertFalse(zipArchiveEntry0.isStreamContiguous());
      assertEquals(0L, zipArchiveEntry0.getCrc());
      assertEquals(0L, zipArchiveEntry0.getSize());
      assertEquals(8, zipArchiveEntry0.getMethod());
      assertEquals(2L, zipArchiveEntry0.getCompressedSize());
      assertEquals("9SOzK.T>_.j9(", zipArchiveEntry0.getName());
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      
      zipArchiveOutputStream0.putArchiveEntry(zipArchiveEntry0);
      assertFalse(file0.isHidden());
      assertTrue(file0.exists());
      assertEquals("/tmp", file0.getParent());
      assertTrue(file0.isFile());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals("/tmp/9SOzK.T>_.j9(09SOzK.T>_.j9(", file0.toString());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(1392409281320L, file0.lastModified());
      assertTrue(file0.canRead());
      assertTrue(file0.isAbsolute());
      assertFalse(file0.canExecute());
      assertEquals("9SOzK.T>_.j9(09SOzK.T>_.j9(", file0.getName());
      assertTrue(file0.canWrite());
      assertFalse(file0.isDirectory());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(0L, file0.length());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertTrue(zipArchiveOutputStream0.isSeekable());
      assertFalse(zipArchiveEntry0.isDirectory());
      assertEquals(0, zipArchiveEntry0.getVersionRequired());
      assertEquals(0, zipArchiveEntry0.getUnixMode());
      assertEquals(0, zipArchiveEntry0.getRawFlag());
      assertEquals(0, zipArchiveEntry0.getInternalAttributes());
      assertEquals(0, zipArchiveEntry0.getPlatform());
      assertFalse(zipArchiveEntry0.isUnixSymlink());
      assertEquals(0, zipArchiveEntry0.getVersionMadeBy());
      assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
      assertEquals((-1L), zipArchiveEntry0.getDataOffset());
      assertNull(zipArchiveEntry0.getComment());
      assertEquals("9SOzK.T>_.j9(", zipArchiveEntry0.toString());
      assertFalse(zipArchiveEntry0.isStreamContiguous());
      assertEquals(0L, zipArchiveEntry0.getCrc());
      assertEquals(0L, zipArchiveEntry0.getSize());
      assertEquals(8, zipArchiveEntry0.getMethod());
      assertEquals(2L, zipArchiveEntry0.getCompressedSize());
      assertEquals("9SOzK.T>_.j9(", zipArchiveEntry0.getName());
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      
      zipArchiveOutputStream0.setUseLanguageEncodingFlag(false);
      assertFalse(file0.isHidden());
      assertTrue(file0.exists());
      assertEquals("/tmp", file0.getParent());
      assertTrue(file0.isFile());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals("/tmp/9SOzK.T>_.j9(09SOzK.T>_.j9(", file0.toString());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(1392409281320L, file0.lastModified());
      assertTrue(file0.canRead());
      assertTrue(file0.isAbsolute());
      assertFalse(file0.canExecute());
      assertEquals("9SOzK.T>_.j9(09SOzK.T>_.j9(", file0.getName());
      assertTrue(file0.canWrite());
      assertFalse(file0.isDirectory());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(0L, file0.length());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertTrue(zipArchiveOutputStream0.isSeekable());
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      
      ZipArchiveEntry zipArchiveEntry1 = (ZipArchiveEntry)zipArchiveOutputStream0.createArchiveEntry(file0, "9SOzK.T>_.j9(");
      assertFalse(zipArchiveEntry1.equals((Object)zipArchiveEntry0));
      assertFalse(file0.isHidden());
      assertTrue(file0.exists());
      assertEquals("/tmp", file0.getParent());
      assertTrue(file0.isFile());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals("/tmp/9SOzK.T>_.j9(09SOzK.T>_.j9(", file0.toString());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(1392409281320L, file0.lastModified());
      assertTrue(file0.canRead());
      assertTrue(file0.isAbsolute());
      assertFalse(file0.canExecute());
      assertEquals("9SOzK.T>_.j9(09SOzK.T>_.j9(", file0.getName());
      assertTrue(file0.canWrite());
      assertFalse(file0.isDirectory());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(0L, file0.length());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertTrue(zipArchiveOutputStream0.isSeekable());
      assertEquals((-1L), zipArchiveEntry1.getCompressedSize());
      assertEquals(0, zipArchiveEntry1.getVersionRequired());
      assertFalse(zipArchiveEntry1.isDirectory());
      assertEquals((-1L), zipArchiveEntry1.getCrc());
      assertEquals(0, zipArchiveEntry1.getRawFlag());
      assertFalse(zipArchiveEntry1.isStreamContiguous());
      assertEquals(0, zipArchiveEntry1.getUnixMode());
      assertEquals(0, zipArchiveEntry1.getPlatform());
      assertEquals(0, zipArchiveEntry1.getVersionMadeBy());
      assertEquals((-1L), zipArchiveEntry1.getDataOffset());
      assertFalse(zipArchiveEntry1.isUnixSymlink());
      assertEquals(0, zipArchiveEntry1.getInternalAttributes());
      assertEquals(0L, zipArchiveEntry1.getExternalAttributes());
      assertEquals("9SOzK.T>_.j9(", zipArchiveEntry1.toString());
      assertEquals((-1), zipArchiveEntry1.getMethod());
      assertNull(zipArchiveEntry1.getComment());
      assertEquals(0L, zipArchiveEntry1.getSize());
      assertEquals("9SOzK.T>_.j9(", zipArchiveEntry1.getName());
      assertNotNull(zipArchiveEntry1);
      assertNotSame(zipArchiveEntry1, zipArchiveEntry0);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      
      zipArchiveOutputStream0.putArchiveEntry(zipArchiveEntry0);
      assertFalse(zipArchiveEntry0.equals((Object)zipArchiveEntry1));
      assertFalse(file0.isHidden());
      assertTrue(file0.exists());
      assertEquals("/tmp", file0.getParent());
      assertTrue(file0.isFile());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals("/tmp/9SOzK.T>_.j9(09SOzK.T>_.j9(", file0.toString());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(1392409281320L, file0.lastModified());
      assertTrue(file0.canRead());
      assertTrue(file0.isAbsolute());
      assertFalse(file0.canExecute());
      assertEquals("9SOzK.T>_.j9(09SOzK.T>_.j9(", file0.getName());
      assertTrue(file0.canWrite());
      assertFalse(file0.isDirectory());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(0L, file0.length());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertTrue(zipArchiveOutputStream0.isSeekable());
      assertFalse(zipArchiveEntry0.isDirectory());
      assertEquals(0, zipArchiveEntry0.getVersionRequired());
      assertEquals(0, zipArchiveEntry0.getUnixMode());
      assertEquals(0, zipArchiveEntry0.getRawFlag());
      assertEquals(0, zipArchiveEntry0.getInternalAttributes());
      assertEquals(0, zipArchiveEntry0.getPlatform());
      assertFalse(zipArchiveEntry0.isUnixSymlink());
      assertEquals(0, zipArchiveEntry0.getVersionMadeBy());
      assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
      assertEquals((-1L), zipArchiveEntry0.getDataOffset());
      assertNull(zipArchiveEntry0.getComment());
      assertEquals("9SOzK.T>_.j9(", zipArchiveEntry0.toString());
      assertFalse(zipArchiveEntry0.isStreamContiguous());
      assertEquals(0L, zipArchiveEntry0.getCrc());
      assertEquals(0L, zipArchiveEntry0.getSize());
      assertEquals(8, zipArchiveEntry0.getMethod());
      assertEquals(2L, zipArchiveEntry0.getCompressedSize());
      assertEquals("9SOzK.T>_.j9(", zipArchiveEntry0.getName());
      assertNotSame(zipArchiveEntry0, zipArchiveEntry1);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      
      ZipArchiveOutputStream zipArchiveOutputStream1 = new ZipArchiveOutputStream(zipArchiveOutputStream0);
      assertFalse(zipArchiveOutputStream1.equals((Object)zipArchiveOutputStream0));
      assertFalse(file0.isHidden());
      assertTrue(file0.exists());
      assertEquals("/tmp", file0.getParent());
      assertTrue(file0.isFile());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals("/tmp/9SOzK.T>_.j9(09SOzK.T>_.j9(", file0.toString());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(1392409281320L, file0.lastModified());
      assertTrue(file0.canRead());
      assertTrue(file0.isAbsolute());
      assertFalse(file0.canExecute());
      assertEquals("9SOzK.T>_.j9(09SOzK.T>_.j9(", file0.getName());
      assertTrue(file0.canWrite());
      assertFalse(file0.isDirectory());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(0L, file0.length());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertTrue(zipArchiveOutputStream0.isSeekable());
      assertEquals("UTF8", zipArchiveOutputStream1.getEncoding());
      assertFalse(zipArchiveOutputStream1.isSeekable());
      assertEquals(0, zipArchiveOutputStream1.getCount());
      assertEquals(0L, zipArchiveOutputStream1.getBytesWritten());
      assertNotNull(zipArchiveOutputStream1);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      
      zipArchiveOutputStream1.putArchiveEntry(zipArchiveEntry0);
      assertFalse(zipArchiveOutputStream0.equals((Object)zipArchiveOutputStream1));
      assertFalse(zipArchiveEntry0.equals((Object)zipArchiveEntry1));
      assertFalse(zipArchiveOutputStream1.equals((Object)zipArchiveOutputStream0));
      assertFalse(file0.isHidden());
      assertTrue(file0.exists());
      assertEquals("/tmp", file0.getParent());
      assertTrue(file0.isFile());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals("/tmp/9SOzK.T>_.j9(09SOzK.T>_.j9(", file0.toString());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(1392409281320L, file0.lastModified());
      assertTrue(file0.canRead());
      assertTrue(file0.isAbsolute());
      assertFalse(file0.canExecute());
      assertEquals("9SOzK.T>_.j9(09SOzK.T>_.j9(", file0.getName());
      assertTrue(file0.canWrite());
      assertFalse(file0.isDirectory());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(0L, file0.length());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertTrue(zipArchiveOutputStream0.isSeekable());
      assertFalse(zipArchiveEntry0.isDirectory());
      assertEquals(0, zipArchiveEntry0.getVersionRequired());
      assertEquals(0, zipArchiveEntry0.getUnixMode());
      assertEquals(0, zipArchiveEntry0.getRawFlag());
      assertEquals(0, zipArchiveEntry0.getInternalAttributes());
      assertEquals(0, zipArchiveEntry0.getPlatform());
      assertFalse(zipArchiveEntry0.isUnixSymlink());
      assertEquals(0, zipArchiveEntry0.getVersionMadeBy());
      assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
      assertEquals((-1L), zipArchiveEntry0.getDataOffset());
      assertNull(zipArchiveEntry0.getComment());
      assertEquals("9SOzK.T>_.j9(", zipArchiveEntry0.toString());
      assertFalse(zipArchiveEntry0.isStreamContiguous());
      assertEquals(0L, zipArchiveEntry0.getCrc());
      assertEquals(0L, zipArchiveEntry0.getSize());
      assertEquals(8, zipArchiveEntry0.getMethod());
      assertEquals(2L, zipArchiveEntry0.getCompressedSize());
      assertEquals("9SOzK.T>_.j9(", zipArchiveEntry0.getName());
      assertEquals("UTF8", zipArchiveOutputStream1.getEncoding());
      assertFalse(zipArchiveOutputStream1.isSeekable());
      assertEquals(0, zipArchiveOutputStream1.getCount());
      assertEquals(0L, zipArchiveOutputStream1.getBytesWritten());
      assertNotSame(zipArchiveOutputStream0, zipArchiveOutputStream1);
      assertNotSame(zipArchiveEntry0, zipArchiveEntry1);
      assertNotSame(zipArchiveOutputStream1, zipArchiveOutputStream0);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      
      zipArchiveOutputStream0.setMethod(8);
      assertFalse(zipArchiveOutputStream0.equals((Object)zipArchiveOutputStream1));
      assertFalse(file0.isHidden());
      assertTrue(file0.exists());
      assertEquals("/tmp", file0.getParent());
      assertTrue(file0.isFile());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals("/tmp/9SOzK.T>_.j9(09SOzK.T>_.j9(", file0.toString());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(1392409281320L, file0.lastModified());
      assertTrue(file0.canRead());
      assertTrue(file0.isAbsolute());
      assertFalse(file0.canExecute());
      assertEquals("9SOzK.T>_.j9(09SOzK.T>_.j9(", file0.getName());
      assertTrue(file0.canWrite());
      assertFalse(file0.isDirectory());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(0L, file0.length());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertTrue(zipArchiveOutputStream0.isSeekable());
      assertNotSame(zipArchiveOutputStream0, zipArchiveOutputStream1);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      
      zipArchiveOutputStream1.writeCentralFileHeader(zipArchiveEntry0);
      assertFalse(zipArchiveOutputStream0.equals((Object)zipArchiveOutputStream1));
      assertFalse(zipArchiveEntry0.equals((Object)zipArchiveEntry1));
      assertFalse(zipArchiveOutputStream1.equals((Object)zipArchiveOutputStream0));
      assertFalse(file0.isHidden());
      assertTrue(file0.exists());
      assertEquals("/tmp", file0.getParent());
      assertTrue(file0.isFile());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals("/tmp/9SOzK.T>_.j9(09SOzK.T>_.j9(", file0.toString());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(1392409281320L, file0.lastModified());
      assertTrue(file0.canRead());
      assertTrue(file0.isAbsolute());
      assertFalse(file0.canExecute());
      assertEquals("9SOzK.T>_.j9(09SOzK.T>_.j9(", file0.getName());
      assertTrue(file0.canWrite());
      assertFalse(file0.isDirectory());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(0L, file0.length());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertTrue(zipArchiveOutputStream0.isSeekable());
      assertFalse(zipArchiveEntry0.isDirectory());
      assertEquals(0, zipArchiveEntry0.getVersionRequired());
      assertEquals(0, zipArchiveEntry0.getUnixMode());
      assertEquals(0, zipArchiveEntry0.getRawFlag());
      assertEquals(0, zipArchiveEntry0.getInternalAttributes());
      assertEquals(0, zipArchiveEntry0.getPlatform());
      assertFalse(zipArchiveEntry0.isUnixSymlink());
      assertEquals(0, zipArchiveEntry0.getVersionMadeBy());
      assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
      assertEquals((-1L), zipArchiveEntry0.getDataOffset());
      assertNull(zipArchiveEntry0.getComment());
      assertEquals("9SOzK.T>_.j9(", zipArchiveEntry0.toString());
      assertFalse(zipArchiveEntry0.isStreamContiguous());
      assertEquals(0L, zipArchiveEntry0.getCrc());
      assertEquals(0L, zipArchiveEntry0.getSize());
      assertEquals(8, zipArchiveEntry0.getMethod());
      assertEquals(2L, zipArchiveEntry0.getCompressedSize());
      assertEquals("9SOzK.T>_.j9(", zipArchiveEntry0.getName());
      assertEquals("UTF8", zipArchiveOutputStream1.getEncoding());
      assertFalse(zipArchiveOutputStream1.isSeekable());
      assertEquals(0, zipArchiveOutputStream1.getCount());
      assertEquals(0L, zipArchiveOutputStream1.getBytesWritten());
      assertNotSame(zipArchiveOutputStream0, zipArchiveOutputStream1);
      assertNotSame(zipArchiveEntry0, zipArchiveEntry1);
      assertNotSame(zipArchiveOutputStream1, zipArchiveOutputStream0);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      
      zipArchiveOutputStream0.writeZip64CentralDirectory();
      assertFalse(zipArchiveOutputStream0.equals((Object)zipArchiveOutputStream1));
      assertFalse(file0.isHidden());
      assertTrue(file0.exists());
      assertEquals("/tmp", file0.getParent());
      assertTrue(file0.isFile());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals("/tmp/9SOzK.T>_.j9(09SOzK.T>_.j9(", file0.toString());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(1392409281320L, file0.lastModified());
      assertTrue(file0.canRead());
      assertTrue(file0.isAbsolute());
      assertFalse(file0.canExecute());
      assertEquals("9SOzK.T>_.j9(09SOzK.T>_.j9(", file0.getName());
      assertTrue(file0.canWrite());
      assertFalse(file0.isDirectory());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(0L, file0.length());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertTrue(zipArchiveOutputStream0.isSeekable());
      assertNotSame(zipArchiveOutputStream0, zipArchiveOutputStream1);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      
      zipArchiveOutputStream1.closeArchiveEntry();
      assertFalse(zipArchiveOutputStream0.equals((Object)zipArchiveOutputStream1));
      assertFalse(zipArchiveOutputStream1.equals((Object)zipArchiveOutputStream0));
      assertFalse(file0.isHidden());
      assertTrue(file0.exists());
      assertEquals("/tmp", file0.getParent());
      assertTrue(file0.isFile());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals("/tmp/9SOzK.T>_.j9(09SOzK.T>_.j9(", file0.toString());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(1392409281320L, file0.lastModified());
      assertTrue(file0.canRead());
      assertTrue(file0.isAbsolute());
      assertFalse(file0.canExecute());
      assertEquals("9SOzK.T>_.j9(09SOzK.T>_.j9(", file0.getName());
      assertTrue(file0.canWrite());
      assertFalse(file0.isDirectory());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(0L, file0.length());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertTrue(zipArchiveOutputStream0.isSeekable());
      assertEquals("UTF8", zipArchiveOutputStream1.getEncoding());
      assertFalse(zipArchiveOutputStream1.isSeekable());
      assertEquals(0, zipArchiveOutputStream1.getCount());
      assertEquals(0L, zipArchiveOutputStream1.getBytesWritten());
      assertNotSame(zipArchiveOutputStream0, zipArchiveOutputStream1);
      assertNotSame(zipArchiveOutputStream1, zipArchiveOutputStream0);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)32;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertEquals(1, byteArrayInputStream0.available());
      assertNotNull(byteArrayInputStream0);
      assertEquals(1, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)32}, byteArray0);
      
      zipArchiveOutputStream1.addRawArchiveEntry(zipArchiveEntry0, byteArrayInputStream0);
      assertFalse(zipArchiveOutputStream0.equals((Object)zipArchiveOutputStream1));
      assertFalse(zipArchiveEntry0.equals((Object)zipArchiveEntry1));
      assertFalse(zipArchiveOutputStream1.equals((Object)zipArchiveOutputStream0));
      assertFalse(file0.isHidden());
      assertTrue(file0.exists());
      assertEquals("/tmp", file0.getParent());
      assertTrue(file0.isFile());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals("/tmp/9SOzK.T>_.j9(09SOzK.T>_.j9(", file0.toString());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(1392409281320L, file0.lastModified());
      assertTrue(file0.canRead());
      assertTrue(file0.isAbsolute());
      assertFalse(file0.canExecute());
      assertEquals("9SOzK.T>_.j9(09SOzK.T>_.j9(", file0.getName());
      assertTrue(file0.canWrite());
      assertFalse(file0.isDirectory());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(0L, file0.length());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertTrue(zipArchiveOutputStream0.isSeekable());
      assertFalse(zipArchiveEntry0.isDirectory());
      assertEquals(61L, zipArchiveEntry0.getCompressedSize());
      assertEquals(0, zipArchiveEntry0.getVersionRequired());
      assertEquals(0, zipArchiveEntry0.getUnixMode());
      assertEquals(0, zipArchiveEntry0.getRawFlag());
      assertEquals(0, zipArchiveEntry0.getInternalAttributes());
      assertEquals(0, zipArchiveEntry0.getPlatform());
      assertFalse(zipArchiveEntry0.isUnixSymlink());
      assertEquals(0, zipArchiveEntry0.getVersionMadeBy());
      assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
      assertEquals((-1L), zipArchiveEntry0.getDataOffset());
      assertNull(zipArchiveEntry0.getComment());
      assertEquals("9SOzK.T>_.j9(", zipArchiveEntry0.toString());
      assertFalse(zipArchiveEntry0.isStreamContiguous());
      assertEquals(0L, zipArchiveEntry0.getCrc());
      assertEquals(0L, zipArchiveEntry0.getSize());
      assertEquals(8, zipArchiveEntry0.getMethod());
      assertEquals("9SOzK.T>_.j9(", zipArchiveEntry0.getName());
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals("UTF8", zipArchiveOutputStream1.getEncoding());
      assertFalse(zipArchiveOutputStream1.isSeekable());
      assertEquals(1, zipArchiveOutputStream1.getCount());
      assertEquals(1L, zipArchiveOutputStream1.getBytesWritten());
      assertEquals(1, byteArray0.length);
      assertNotSame(zipArchiveOutputStream0, zipArchiveOutputStream1);
      assertNotSame(zipArchiveEntry0, zipArchiveEntry1);
      assertNotSame(zipArchiveOutputStream1, zipArchiveOutputStream0);
      assertArrayEquals(new byte[] {(byte)32}, byteArray0);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      
      zipArchiveOutputStream1.writeCentralFileHeader(zipArchiveEntry0);
      assertFalse(zipArchiveOutputStream0.equals((Object)zipArchiveOutputStream1));
      assertFalse(zipArchiveEntry0.equals((Object)zipArchiveEntry1));
      assertFalse(zipArchiveOutputStream1.equals((Object)zipArchiveOutputStream0));
      assertFalse(file0.isHidden());
      assertTrue(file0.exists());
      assertEquals("/tmp", file0.getParent());
      assertTrue(file0.isFile());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals("/tmp/9SOzK.T>_.j9(09SOzK.T>_.j9(", file0.toString());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(1392409281320L, file0.lastModified());
      assertTrue(file0.canRead());
      assertTrue(file0.isAbsolute());
      assertFalse(file0.canExecute());
      assertEquals("9SOzK.T>_.j9(09SOzK.T>_.j9(", file0.getName());
      assertTrue(file0.canWrite());
      assertFalse(file0.isDirectory());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(0L, file0.length());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertTrue(zipArchiveOutputStream0.isSeekable());
      assertFalse(zipArchiveEntry0.isDirectory());
      assertEquals(61L, zipArchiveEntry0.getCompressedSize());
      assertEquals(0, zipArchiveEntry0.getVersionRequired());
      assertEquals(0, zipArchiveEntry0.getUnixMode());
      assertEquals(0, zipArchiveEntry0.getRawFlag());
      assertEquals(0, zipArchiveEntry0.getInternalAttributes());
      assertEquals(0, zipArchiveEntry0.getPlatform());
      assertFalse(zipArchiveEntry0.isUnixSymlink());
      assertEquals(0, zipArchiveEntry0.getVersionMadeBy());
      assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
      assertEquals((-1L), zipArchiveEntry0.getDataOffset());
      assertNull(zipArchiveEntry0.getComment());
      assertEquals("9SOzK.T>_.j9(", zipArchiveEntry0.toString());
      assertFalse(zipArchiveEntry0.isStreamContiguous());
      assertEquals(0L, zipArchiveEntry0.getCrc());
      assertEquals(0L, zipArchiveEntry0.getSize());
      assertEquals(8, zipArchiveEntry0.getMethod());
      assertEquals("9SOzK.T>_.j9(", zipArchiveEntry0.getName());
      assertEquals("UTF8", zipArchiveOutputStream1.getEncoding());
      assertFalse(zipArchiveOutputStream1.isSeekable());
      assertEquals(1, zipArchiveOutputStream1.getCount());
      assertEquals(1L, zipArchiveOutputStream1.getBytesWritten());
      assertNotSame(zipArchiveOutputStream0, zipArchiveOutputStream1);
      assertNotSame(zipArchiveEntry0, zipArchiveEntry1);
      assertNotSame(zipArchiveOutputStream1, zipArchiveOutputStream0);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(0, ZipArchiveOutputStream.STORED);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      File file0 = MockFile.createTempFile("9SOzK.T>_.j9(", "9SOzK.T>_.j9(");
      assertTrue(file0.isAbsolute());
      assertTrue(file0.canExecute());
      assertTrue(file0.canRead());
      assertEquals("/tmp", file0.getParent());
      assertFalse(file0.isHidden());
      assertEquals("9SOzK.T>_.j9(09SOzK.T>_.j9(", file0.getName());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals(0L, file0.length());
      assertTrue(file0.canWrite());
      assertEquals(0L, file0.getFreeSpace());
      assertFalse(file0.isDirectory());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(1392409281320L, file0.lastModified());
      assertTrue(file0.exists());
      assertEquals("/tmp/9SOzK.T>_.j9(09SOzK.T>_.j9(", file0.toString());
      assertTrue(file0.isFile());
      assertNotNull(file0);
      
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(file0);
      assertTrue(file0.isAbsolute());
      assertTrue(file0.canExecute());
      assertTrue(file0.canRead());
      assertEquals("/tmp", file0.getParent());
      assertFalse(file0.isHidden());
      assertEquals("9SOzK.T>_.j9(09SOzK.T>_.j9(", file0.getName());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals(0L, file0.length());
      assertTrue(file0.canWrite());
      assertEquals(0L, file0.getFreeSpace());
      assertFalse(file0.isDirectory());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(1392409281320L, file0.lastModified());
      assertTrue(file0.exists());
      assertEquals("/tmp/9SOzK.T>_.j9(09SOzK.T>_.j9(", file0.toString());
      assertTrue(file0.isFile());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertTrue(zipArchiveOutputStream0.isSeekable());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertNotNull(zipArchiveOutputStream0);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      
      zipArchiveOutputStream0.writeCentralDirectoryEnd();
      assertTrue(file0.isAbsolute());
      assertTrue(file0.canExecute());
      assertTrue(file0.canRead());
      assertEquals("/tmp", file0.getParent());
      assertFalse(file0.isHidden());
      assertEquals("9SOzK.T>_.j9(09SOzK.T>_.j9(", file0.getName());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals(0L, file0.length());
      assertTrue(file0.canWrite());
      assertEquals(0L, file0.getFreeSpace());
      assertFalse(file0.isDirectory());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(1392409281320L, file0.lastModified());
      assertTrue(file0.exists());
      assertEquals("/tmp/9SOzK.T>_.j9(09SOzK.T>_.j9(", file0.toString());
      assertTrue(file0.isFile());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertTrue(zipArchiveOutputStream0.isSeekable());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      
      ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry("9SOzK.T>_.j9(");
      assertEquals(0, zipArchiveEntry0.getVersionMadeBy());
      assertEquals(0, zipArchiveEntry0.getPlatform());
      assertEquals((-1L), zipArchiveEntry0.getSize());
      assertEquals(0, zipArchiveEntry0.getRawFlag());
      assertEquals("9SOzK.T>_.j9(", zipArchiveEntry0.getName());
      assertEquals((-1), zipArchiveEntry0.getMethod());
      assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
      assertEquals(0, zipArchiveEntry0.getVersionRequired());
      assertEquals((-1L), zipArchiveEntry0.getCompressedSize());
      assertFalse(zipArchiveEntry0.isDirectory());
      assertEquals((-1L), zipArchiveEntry0.getCrc());
      assertFalse(zipArchiveEntry0.isStreamContiguous());
      assertEquals(0, zipArchiveEntry0.getUnixMode());
      assertEquals(0, zipArchiveEntry0.getInternalAttributes());
      assertEquals("9SOzK.T>_.j9(", zipArchiveEntry0.toString());
      assertEquals((-1L), zipArchiveEntry0.getDataOffset());
      assertFalse(zipArchiveEntry0.isUnixSymlink());
      assertNull(zipArchiveEntry0.getComment());
      assertNotNull(zipArchiveEntry0);
      assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      
      boolean boolean0 = zipArchiveOutputStream0.finished;
      assertFalse(boolean0);
      
      zipArchiveOutputStream0.putArchiveEntry(zipArchiveEntry0);
      assertTrue(file0.isAbsolute());
      assertTrue(file0.canExecute());
      assertTrue(file0.canRead());
      assertEquals("/tmp", file0.getParent());
      assertFalse(file0.isHidden());
      assertEquals("9SOzK.T>_.j9(09SOzK.T>_.j9(", file0.getName());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals(0L, file0.length());
      assertTrue(file0.canWrite());
      assertEquals(0L, file0.getFreeSpace());
      assertFalse(file0.isDirectory());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(1392409281320L, file0.lastModified());
      assertTrue(file0.exists());
      assertEquals("/tmp/9SOzK.T>_.j9(09SOzK.T>_.j9(", file0.toString());
      assertTrue(file0.isFile());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertTrue(zipArchiveOutputStream0.isSeekable());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertEquals(0, zipArchiveEntry0.getVersionMadeBy());
      assertEquals(0, zipArchiveEntry0.getPlatform());
      assertEquals((-1L), zipArchiveEntry0.getSize());
      assertEquals(0, zipArchiveEntry0.getRawFlag());
      assertEquals("9SOzK.T>_.j9(", zipArchiveEntry0.getName());
      assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
      assertEquals(0, zipArchiveEntry0.getVersionRequired());
      assertEquals((-1L), zipArchiveEntry0.getCompressedSize());
      assertFalse(zipArchiveEntry0.isDirectory());
      assertEquals((-1L), zipArchiveEntry0.getCrc());
      assertEquals(8, zipArchiveEntry0.getMethod());
      assertFalse(zipArchiveEntry0.isStreamContiguous());
      assertEquals(0, zipArchiveEntry0.getUnixMode());
      assertEquals(0, zipArchiveEntry0.getInternalAttributes());
      assertEquals("9SOzK.T>_.j9(", zipArchiveEntry0.toString());
      assertEquals((-1L), zipArchiveEntry0.getDataOffset());
      assertFalse(zipArchiveEntry0.isUnixSymlink());
      assertNull(zipArchiveEntry0.getComment());
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      
      zipArchiveOutputStream0.putArchiveEntry(zipArchiveEntry0);
      assertTrue(file0.isAbsolute());
      assertTrue(file0.canExecute());
      assertTrue(file0.canRead());
      assertEquals("/tmp", file0.getParent());
      assertFalse(file0.isHidden());
      assertEquals("9SOzK.T>_.j9(09SOzK.T>_.j9(", file0.getName());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals(0L, file0.length());
      assertTrue(file0.canWrite());
      assertEquals(0L, file0.getFreeSpace());
      assertFalse(file0.isDirectory());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(1392409281320L, file0.lastModified());
      assertTrue(file0.exists());
      assertEquals("/tmp/9SOzK.T>_.j9(09SOzK.T>_.j9(", file0.toString());
      assertTrue(file0.isFile());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertTrue(zipArchiveOutputStream0.isSeekable());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertEquals(0, zipArchiveEntry0.getVersionMadeBy());
      assertEquals(0, zipArchiveEntry0.getPlatform());
      assertEquals(0L, zipArchiveEntry0.getSize());
      assertEquals(0, zipArchiveEntry0.getRawFlag());
      assertEquals("9SOzK.T>_.j9(", zipArchiveEntry0.getName());
      assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
      assertEquals(2L, zipArchiveEntry0.getCompressedSize());
      assertEquals(0, zipArchiveEntry0.getVersionRequired());
      assertFalse(zipArchiveEntry0.isDirectory());
      assertEquals(0L, zipArchiveEntry0.getCrc());
      assertEquals(8, zipArchiveEntry0.getMethod());
      assertFalse(zipArchiveEntry0.isStreamContiguous());
      assertEquals(0, zipArchiveEntry0.getUnixMode());
      assertEquals(0, zipArchiveEntry0.getInternalAttributes());
      assertEquals("9SOzK.T>_.j9(", zipArchiveEntry0.toString());
      assertEquals((-1L), zipArchiveEntry0.getDataOffset());
      assertFalse(zipArchiveEntry0.isUnixSymlink());
      assertNull(zipArchiveEntry0.getComment());
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      
      boolean boolean1 = zipArchiveOutputStream0.canWriteEntryData(zipArchiveEntry0);
      assertFalse(boolean1 == boolean0);
      assertTrue(file0.isAbsolute());
      assertTrue(file0.canExecute());
      assertTrue(file0.canRead());
      assertEquals("/tmp", file0.getParent());
      assertFalse(file0.isHidden());
      assertEquals("9SOzK.T>_.j9(09SOzK.T>_.j9(", file0.getName());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals(0L, file0.length());
      assertTrue(file0.canWrite());
      assertEquals(0L, file0.getFreeSpace());
      assertFalse(file0.isDirectory());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(1392409281320L, file0.lastModified());
      assertTrue(file0.exists());
      assertEquals("/tmp/9SOzK.T>_.j9(09SOzK.T>_.j9(", file0.toString());
      assertTrue(file0.isFile());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertTrue(zipArchiveOutputStream0.isSeekable());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertEquals(0, zipArchiveEntry0.getVersionMadeBy());
      assertEquals(0, zipArchiveEntry0.getPlatform());
      assertEquals(0L, zipArchiveEntry0.getSize());
      assertEquals(0, zipArchiveEntry0.getRawFlag());
      assertEquals("9SOzK.T>_.j9(", zipArchiveEntry0.getName());
      assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
      assertEquals(2L, zipArchiveEntry0.getCompressedSize());
      assertEquals(0, zipArchiveEntry0.getVersionRequired());
      assertFalse(zipArchiveEntry0.isDirectory());
      assertEquals(0L, zipArchiveEntry0.getCrc());
      assertEquals(8, zipArchiveEntry0.getMethod());
      assertFalse(zipArchiveEntry0.isStreamContiguous());
      assertEquals(0, zipArchiveEntry0.getUnixMode());
      assertEquals(0, zipArchiveEntry0.getInternalAttributes());
      assertEquals("9SOzK.T>_.j9(", zipArchiveEntry0.toString());
      assertEquals((-1L), zipArchiveEntry0.getDataOffset());
      assertFalse(zipArchiveEntry0.isUnixSymlink());
      assertNull(zipArchiveEntry0.getComment());
      assertTrue(boolean1);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      
      byte byte0 = (byte)32;
      byte[] byteArray0 = new byte[4];
      byte byte1 = (byte) (-3);
      byteArray0[0] = (byte) (-3);
      byteArray0[1] = (byte)32;
      byteArray0[2] = (byte)32;
      byteArray0[3] = (byte) (-1);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertEquals(4, byteArrayInputStream0.available());
      assertNotNull(byteArrayInputStream0);
      assertEquals(4, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-3), (byte)32, (byte)32, (byte) (-1)}, byteArray0);
      
      ByteArrayInputStream byteArrayInputStream1 = new ByteArrayInputStream(byteArray0);
      assertFalse(byteArrayInputStream1.equals((Object)byteArrayInputStream0));
      assertEquals(4, byteArrayInputStream1.available());
      assertNotNull(byteArrayInputStream1);
      assertEquals(4, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-3), (byte)32, (byte)32, (byte) (-1)}, byteArray0);
      
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("%sd", true);
      assertNotNull(mockFileOutputStream0);
      
      FileChannel fileChannel0 = mockFileOutputStream0.getChannel();
      assertTrue(fileChannel0.isOpen());
      assertEquals(0L, fileChannel0.size());
      assertEquals(0L, fileChannel0.position());
      assertNotNull(fileChannel0);
      
      ZipArchiveOutputStream zipArchiveOutputStream1 = new ZipArchiveOutputStream(fileChannel0);
      assertFalse(zipArchiveOutputStream1.equals((Object)zipArchiveOutputStream0));
      assertTrue(fileChannel0.isOpen());
      assertEquals(0L, fileChannel0.size());
      assertEquals(0L, fileChannel0.position());
      assertEquals("UTF8", zipArchiveOutputStream1.getEncoding());
      assertEquals(0L, zipArchiveOutputStream1.getBytesWritten());
      assertEquals(0, zipArchiveOutputStream1.getCount());
      assertTrue(zipArchiveOutputStream1.isSeekable());
      assertNotNull(zipArchiveOutputStream1);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      
      zipArchiveOutputStream1.addRawArchiveEntry(zipArchiveEntry0, byteArrayInputStream0);
      assertFalse(zipArchiveOutputStream1.equals((Object)zipArchiveOutputStream0));
      assertFalse(byteArrayInputStream0.equals((Object)byteArrayInputStream1));
      assertTrue(fileChannel0.isOpen());
      assertEquals(47L, fileChannel0.position());
      assertEquals(47L, fileChannel0.size());
      assertEquals("UTF8", zipArchiveOutputStream1.getEncoding());
      assertTrue(zipArchiveOutputStream1.isSeekable());
      assertEquals(4L, zipArchiveOutputStream1.getBytesWritten());
      assertEquals(4, zipArchiveOutputStream1.getCount());
      assertEquals(0, zipArchiveEntry0.getVersionMadeBy());
      assertEquals(0, zipArchiveEntry0.getPlatform());
      assertEquals(0L, zipArchiveEntry0.getSize());
      assertEquals(0, zipArchiveEntry0.getRawFlag());
      assertEquals("9SOzK.T>_.j9(", zipArchiveEntry0.getName());
      assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
      assertEquals(2L, zipArchiveEntry0.getCompressedSize());
      assertEquals(0, zipArchiveEntry0.getVersionRequired());
      assertFalse(zipArchiveEntry0.isDirectory());
      assertEquals(0L, zipArchiveEntry0.getCrc());
      assertEquals(8, zipArchiveEntry0.getMethod());
      assertFalse(zipArchiveEntry0.isStreamContiguous());
      assertEquals(0, zipArchiveEntry0.getUnixMode());
      assertEquals(0, zipArchiveEntry0.getInternalAttributes());
      assertEquals("9SOzK.T>_.j9(", zipArchiveEntry0.toString());
      assertEquals((-1L), zipArchiveEntry0.getDataOffset());
      assertFalse(zipArchiveEntry0.isUnixSymlink());
      assertNull(zipArchiveEntry0.getComment());
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(4, byteArray0.length);
      assertNotSame(zipArchiveOutputStream1, zipArchiveOutputStream0);
      assertNotSame(byteArrayInputStream0, byteArrayInputStream1);
      assertArrayEquals(new byte[] {(byte) (-3), (byte)32, (byte)32, (byte) (-1)}, byteArray0);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      
      long long0 = 3912L;
      long long1 = 935L;
      StandardProtocolFamily standardProtocolFamily0 = StandardProtocolFamily.INET;
      assertEquals(StandardProtocolFamily.INET, standardProtocolFamily0);
      
      DatagramChannel datagramChannel0 = DatagramChannel.open((ProtocolFamily) standardProtocolFamily0);
      assertTrue(datagramChannel0.isBlocking());
      assertTrue(datagramChannel0.isOpen());
      assertFalse(datagramChannel0.isRegistered());
      assertEquals(5, datagramChannel0.validOps());
      assertFalse(datagramChannel0.isConnected());
      assertNotNull(datagramChannel0);
      
      SocketOption<ResourceAlignmentExtraField> socketOption0 = (SocketOption<ResourceAlignmentExtraField>) mock(SocketOption.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(socketOption0).toString();
      ResourceAlignmentExtraField resourceAlignmentExtraField0 = new ResourceAlignmentExtraField((byte)32, false, (-2147483646));
      assertFalse(resourceAlignmentExtraField0.allowMethodChange());
      assertEquals((short)32, resourceAlignmentExtraField0.getAlignment());
      assertNotNull(resourceAlignmentExtraField0);
      assertEquals(2, ResourceAlignmentExtraField.BASE_SIZE);
      
      // Undeclared exception!
//      try { 
        datagramChannel0.setOption(socketOption0, resourceAlignmentExtraField0);
//        fail("Expecting exception: UnsupportedOperationException");
      
//      } catch(UnsupportedOperationException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      File file0 = MockFile.createTempFile("9SOzK.T>_.j9(", "9SOzK.T>_.j9(");
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      assertTrue(file0.canRead());
      assertEquals("/tmp", file0.getParent());
      assertTrue(file0.exists());
      assertTrue(file0.isFile());
      assertEquals("/tmp/9SOzK.T>_.j9(09SOzK.T>_.j9(", file0.toString());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals("9SOzK.T>_.j9(09SOzK.T>_.j9(", file0.getName());
      assertEquals(1392409281320L, file0.lastModified());
      assertTrue(file0.canExecute());
      assertTrue(file0.isAbsolute());
      assertEquals(0L, file0.length());
      assertTrue(file0.canWrite());
      assertEquals(0L, file0.getFreeSpace());
      assertFalse(file0.isDirectory());
      assertNotNull(file0);
      
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(file0);
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      assertTrue(file0.canRead());
      assertEquals("/tmp", file0.getParent());
      assertTrue(file0.exists());
      assertTrue(file0.isFile());
      assertEquals("/tmp/9SOzK.T>_.j9(09SOzK.T>_.j9(", file0.toString());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals("9SOzK.T>_.j9(09SOzK.T>_.j9(", file0.getName());
      assertEquals(1392409281320L, file0.lastModified());
      assertTrue(file0.canExecute());
      assertTrue(file0.isAbsolute());
      assertEquals(0L, file0.length());
      assertTrue(file0.canWrite());
      assertEquals(0L, file0.getFreeSpace());
      assertFalse(file0.isDirectory());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertTrue(zipArchiveOutputStream0.isSeekable());
      assertNotNull(zipArchiveOutputStream0);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      
      zipArchiveOutputStream0.writeCentralDirectoryEnd();
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      assertTrue(file0.canRead());
      assertEquals("/tmp", file0.getParent());
      assertTrue(file0.exists());
      assertTrue(file0.isFile());
      assertEquals("/tmp/9SOzK.T>_.j9(09SOzK.T>_.j9(", file0.toString());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals("9SOzK.T>_.j9(09SOzK.T>_.j9(", file0.getName());
      assertEquals(1392409281320L, file0.lastModified());
      assertTrue(file0.canExecute());
      assertTrue(file0.isAbsolute());
      assertEquals(0L, file0.length());
      assertTrue(file0.canWrite());
      assertEquals(0L, file0.getFreeSpace());
      assertFalse(file0.isDirectory());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertTrue(zipArchiveOutputStream0.isSeekable());
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      
      ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry("9SOzK.T>_.j9(");
      assertFalse(zipArchiveEntry0.isDirectory());
      assertFalse(zipArchiveEntry0.isUnixSymlink());
      assertFalse(zipArchiveEntry0.isStreamContiguous());
      assertEquals(0, zipArchiveEntry0.getVersionRequired());
      assertEquals((-1), zipArchiveEntry0.getMethod());
      assertEquals((-1L), zipArchiveEntry0.getCrc());
      assertEquals((-1L), zipArchiveEntry0.getCompressedSize());
      assertEquals("9SOzK.T>_.j9(", zipArchiveEntry0.getName());
      assertEquals(0, zipArchiveEntry0.getVersionMadeBy());
      assertEquals("9SOzK.T>_.j9(", zipArchiveEntry0.toString());
      assertEquals((-1L), zipArchiveEntry0.getDataOffset());
      assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
      assertEquals((-1L), zipArchiveEntry0.getSize());
      assertEquals(0, zipArchiveEntry0.getRawFlag());
      assertNull(zipArchiveEntry0.getComment());
      assertEquals(0, zipArchiveEntry0.getPlatform());
      assertEquals(0, zipArchiveEntry0.getInternalAttributes());
      assertEquals(0, zipArchiveEntry0.getUnixMode());
      assertNotNull(zipArchiveEntry0);
      assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      
      boolean boolean0 = zipArchiveOutputStream0.finished;
      assertFalse(boolean0);
      
      zipArchiveOutputStream0.putArchiveEntry(zipArchiveEntry0);
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      assertTrue(file0.canRead());
      assertEquals("/tmp", file0.getParent());
      assertTrue(file0.exists());
      assertTrue(file0.isFile());
      assertEquals("/tmp/9SOzK.T>_.j9(09SOzK.T>_.j9(", file0.toString());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals("9SOzK.T>_.j9(09SOzK.T>_.j9(", file0.getName());
      assertEquals(1392409281320L, file0.lastModified());
      assertTrue(file0.canExecute());
      assertTrue(file0.isAbsolute());
      assertEquals(0L, file0.length());
      assertTrue(file0.canWrite());
      assertEquals(0L, file0.getFreeSpace());
      assertFalse(file0.isDirectory());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertTrue(zipArchiveOutputStream0.isSeekable());
      assertEquals(8, zipArchiveEntry0.getMethod());
      assertFalse(zipArchiveEntry0.isDirectory());
      assertFalse(zipArchiveEntry0.isUnixSymlink());
      assertFalse(zipArchiveEntry0.isStreamContiguous());
      assertEquals(0, zipArchiveEntry0.getVersionRequired());
      assertEquals((-1L), zipArchiveEntry0.getCrc());
      assertEquals((-1L), zipArchiveEntry0.getCompressedSize());
      assertEquals("9SOzK.T>_.j9(", zipArchiveEntry0.getName());
      assertEquals(0, zipArchiveEntry0.getVersionMadeBy());
      assertEquals("9SOzK.T>_.j9(", zipArchiveEntry0.toString());
      assertEquals((-1L), zipArchiveEntry0.getDataOffset());
      assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
      assertEquals((-1L), zipArchiveEntry0.getSize());
      assertEquals(0, zipArchiveEntry0.getRawFlag());
      assertNull(zipArchiveEntry0.getComment());
      assertEquals(0, zipArchiveEntry0.getPlatform());
      assertEquals(0, zipArchiveEntry0.getInternalAttributes());
      assertEquals(0, zipArchiveEntry0.getUnixMode());
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      
      zipArchiveOutputStream0.putArchiveEntry(zipArchiveEntry0);
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      assertTrue(file0.canRead());
      assertEquals("/tmp", file0.getParent());
      assertTrue(file0.exists());
      assertTrue(file0.isFile());
      assertEquals("/tmp/9SOzK.T>_.j9(09SOzK.T>_.j9(", file0.toString());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals("9SOzK.T>_.j9(09SOzK.T>_.j9(", file0.getName());
      assertEquals(1392409281320L, file0.lastModified());
      assertTrue(file0.canExecute());
      assertTrue(file0.isAbsolute());
      assertEquals(0L, file0.length());
      assertTrue(file0.canWrite());
      assertEquals(0L, file0.getFreeSpace());
      assertFalse(file0.isDirectory());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertTrue(zipArchiveOutputStream0.isSeekable());
      assertEquals(8, zipArchiveEntry0.getMethod());
      assertFalse(zipArchiveEntry0.isDirectory());
      assertFalse(zipArchiveEntry0.isUnixSymlink());
      assertFalse(zipArchiveEntry0.isStreamContiguous());
      assertEquals(0, zipArchiveEntry0.getVersionRequired());
      assertEquals(0L, zipArchiveEntry0.getCrc());
      assertEquals(2L, zipArchiveEntry0.getCompressedSize());
      assertEquals("9SOzK.T>_.j9(", zipArchiveEntry0.getName());
      assertEquals(0, zipArchiveEntry0.getVersionMadeBy());
      assertEquals("9SOzK.T>_.j9(", zipArchiveEntry0.toString());
      assertEquals((-1L), zipArchiveEntry0.getDataOffset());
      assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
      assertEquals(0L, zipArchiveEntry0.getSize());
      assertEquals(0, zipArchiveEntry0.getRawFlag());
      assertNull(zipArchiveEntry0.getComment());
      assertEquals(0, zipArchiveEntry0.getPlatform());
      assertEquals(0, zipArchiveEntry0.getInternalAttributes());
      assertEquals(0, zipArchiveEntry0.getUnixMode());
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      
      zipArchiveOutputStream0.setUseLanguageEncodingFlag(false);
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      assertTrue(file0.canRead());
      assertEquals("/tmp", file0.getParent());
      assertTrue(file0.exists());
      assertTrue(file0.isFile());
      assertEquals("/tmp/9SOzK.T>_.j9(09SOzK.T>_.j9(", file0.toString());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals("9SOzK.T>_.j9(09SOzK.T>_.j9(", file0.getName());
      assertEquals(1392409281320L, file0.lastModified());
      assertTrue(file0.canExecute());
      assertTrue(file0.isAbsolute());
      assertEquals(0L, file0.length());
      assertTrue(file0.canWrite());
      assertEquals(0L, file0.getFreeSpace());
      assertFalse(file0.isDirectory());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertTrue(zipArchiveOutputStream0.isSeekable());
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      
      zipArchiveOutputStream0.putArchiveEntry(zipArchiveEntry0);
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      assertTrue(file0.canRead());
      assertEquals("/tmp", file0.getParent());
      assertTrue(file0.exists());
      assertTrue(file0.isFile());
      assertEquals("/tmp/9SOzK.T>_.j9(09SOzK.T>_.j9(", file0.toString());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals("9SOzK.T>_.j9(09SOzK.T>_.j9(", file0.getName());
      assertEquals(1392409281320L, file0.lastModified());
      assertTrue(file0.canExecute());
      assertTrue(file0.isAbsolute());
      assertEquals(0L, file0.length());
      assertTrue(file0.canWrite());
      assertEquals(0L, file0.getFreeSpace());
      assertFalse(file0.isDirectory());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertTrue(zipArchiveOutputStream0.isSeekable());
      assertEquals(8, zipArchiveEntry0.getMethod());
      assertFalse(zipArchiveEntry0.isDirectory());
      assertFalse(zipArchiveEntry0.isUnixSymlink());
      assertFalse(zipArchiveEntry0.isStreamContiguous());
      assertEquals(0, zipArchiveEntry0.getVersionRequired());
      assertEquals(0L, zipArchiveEntry0.getCrc());
      assertEquals(2L, zipArchiveEntry0.getCompressedSize());
      assertEquals("9SOzK.T>_.j9(", zipArchiveEntry0.getName());
      assertEquals(0, zipArchiveEntry0.getVersionMadeBy());
      assertEquals("9SOzK.T>_.j9(", zipArchiveEntry0.toString());
      assertEquals((-1L), zipArchiveEntry0.getDataOffset());
      assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
      assertEquals(0L, zipArchiveEntry0.getSize());
      assertEquals(0, zipArchiveEntry0.getRawFlag());
      assertNull(zipArchiveEntry0.getComment());
      assertEquals(0, zipArchiveEntry0.getPlatform());
      assertEquals(0, zipArchiveEntry0.getInternalAttributes());
      assertEquals(0, zipArchiveEntry0.getUnixMode());
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      
      ZipArchiveOutputStream zipArchiveOutputStream1 = new ZipArchiveOutputStream(zipArchiveOutputStream0);
      assertFalse(zipArchiveOutputStream1.equals((Object)zipArchiveOutputStream0));
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      assertTrue(file0.canRead());
      assertEquals("/tmp", file0.getParent());
      assertTrue(file0.exists());
      assertTrue(file0.isFile());
      assertEquals("/tmp/9SOzK.T>_.j9(09SOzK.T>_.j9(", file0.toString());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals("9SOzK.T>_.j9(09SOzK.T>_.j9(", file0.getName());
      assertEquals(1392409281320L, file0.lastModified());
      assertTrue(file0.canExecute());
      assertTrue(file0.isAbsolute());
      assertEquals(0L, file0.length());
      assertTrue(file0.canWrite());
      assertEquals(0L, file0.getFreeSpace());
      assertFalse(file0.isDirectory());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertTrue(zipArchiveOutputStream0.isSeekable());
      assertEquals(0L, zipArchiveOutputStream1.getBytesWritten());
      assertEquals(0, zipArchiveOutputStream1.getCount());
      assertEquals("UTF8", zipArchiveOutputStream1.getEncoding());
      assertFalse(zipArchiveOutputStream1.isSeekable());
      assertNotNull(zipArchiveOutputStream1);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      
      zipArchiveOutputStream1.putArchiveEntry(zipArchiveEntry0);
      assertFalse(zipArchiveOutputStream0.equals((Object)zipArchiveOutputStream1));
      assertFalse(zipArchiveOutputStream1.equals((Object)zipArchiveOutputStream0));
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      assertTrue(file0.canRead());
      assertEquals("/tmp", file0.getParent());
      assertTrue(file0.exists());
      assertTrue(file0.isFile());
      assertEquals("/tmp/9SOzK.T>_.j9(09SOzK.T>_.j9(", file0.toString());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals("9SOzK.T>_.j9(09SOzK.T>_.j9(", file0.getName());
      assertEquals(1392409281320L, file0.lastModified());
      assertTrue(file0.canExecute());
      assertTrue(file0.isAbsolute());
      assertEquals(0L, file0.length());
      assertTrue(file0.canWrite());
      assertEquals(0L, file0.getFreeSpace());
      assertFalse(file0.isDirectory());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertTrue(zipArchiveOutputStream0.isSeekable());
      assertEquals(8, zipArchiveEntry0.getMethod());
      assertFalse(zipArchiveEntry0.isDirectory());
      assertFalse(zipArchiveEntry0.isUnixSymlink());
      assertFalse(zipArchiveEntry0.isStreamContiguous());
      assertEquals(0, zipArchiveEntry0.getVersionRequired());
      assertEquals(0L, zipArchiveEntry0.getCrc());
      assertEquals(2L, zipArchiveEntry0.getCompressedSize());
      assertEquals("9SOzK.T>_.j9(", zipArchiveEntry0.getName());
      assertEquals(0, zipArchiveEntry0.getVersionMadeBy());
      assertEquals("9SOzK.T>_.j9(", zipArchiveEntry0.toString());
      assertEquals((-1L), zipArchiveEntry0.getDataOffset());
      assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
      assertEquals(0L, zipArchiveEntry0.getSize());
      assertEquals(0, zipArchiveEntry0.getRawFlag());
      assertNull(zipArchiveEntry0.getComment());
      assertEquals(0, zipArchiveEntry0.getPlatform());
      assertEquals(0, zipArchiveEntry0.getInternalAttributes());
      assertEquals(0, zipArchiveEntry0.getUnixMode());
      assertEquals(0L, zipArchiveOutputStream1.getBytesWritten());
      assertEquals(0, zipArchiveOutputStream1.getCount());
      assertEquals("UTF8", zipArchiveOutputStream1.getEncoding());
      assertFalse(zipArchiveOutputStream1.isSeekable());
      assertNotSame(zipArchiveOutputStream0, zipArchiveOutputStream1);
      assertNotSame(zipArchiveOutputStream1, zipArchiveOutputStream0);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      
      zipArchiveEntry0.setPlatform(1243);
      assertEquals(8, zipArchiveEntry0.getMethod());
      assertFalse(zipArchiveEntry0.isDirectory());
      assertFalse(zipArchiveEntry0.isUnixSymlink());
      assertFalse(zipArchiveEntry0.isStreamContiguous());
      assertEquals(0, zipArchiveEntry0.getVersionRequired());
      assertEquals(0L, zipArchiveEntry0.getCrc());
      assertEquals(2L, zipArchiveEntry0.getCompressedSize());
      assertEquals("9SOzK.T>_.j9(", zipArchiveEntry0.getName());
      assertEquals(0, zipArchiveEntry0.getVersionMadeBy());
      assertEquals("9SOzK.T>_.j9(", zipArchiveEntry0.toString());
      assertEquals((-1L), zipArchiveEntry0.getDataOffset());
      assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
      assertEquals(0L, zipArchiveEntry0.getSize());
      assertEquals(0, zipArchiveEntry0.getRawFlag());
      assertNull(zipArchiveEntry0.getComment());
      assertEquals(1243, zipArchiveEntry0.getPlatform());
      assertEquals(0, zipArchiveEntry0.getInternalAttributes());
      assertEquals(0, zipArchiveEntry0.getUnixMode());
      assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      
      zipArchiveOutputStream0.setMethod(8);
      assertFalse(zipArchiveOutputStream0.equals((Object)zipArchiveOutputStream1));
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      assertTrue(file0.canRead());
      assertEquals("/tmp", file0.getParent());
      assertTrue(file0.exists());
      assertTrue(file0.isFile());
      assertEquals("/tmp/9SOzK.T>_.j9(09SOzK.T>_.j9(", file0.toString());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals("9SOzK.T>_.j9(09SOzK.T>_.j9(", file0.getName());
      assertEquals(1392409281320L, file0.lastModified());
      assertTrue(file0.canExecute());
      assertTrue(file0.isAbsolute());
      assertEquals(0L, file0.length());
      assertTrue(file0.canWrite());
      assertEquals(0L, file0.getFreeSpace());
      assertFalse(file0.isDirectory());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertTrue(zipArchiveOutputStream0.isSeekable());
      assertNotSame(zipArchiveOutputStream0, zipArchiveOutputStream1);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      
      zipArchiveOutputStream1.writeCentralFileHeader(zipArchiveEntry0);
      assertFalse(zipArchiveOutputStream0.equals((Object)zipArchiveOutputStream1));
      assertFalse(zipArchiveOutputStream1.equals((Object)zipArchiveOutputStream0));
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      assertTrue(file0.canRead());
      assertEquals("/tmp", file0.getParent());
      assertTrue(file0.exists());
      assertTrue(file0.isFile());
      assertEquals("/tmp/9SOzK.T>_.j9(09SOzK.T>_.j9(", file0.toString());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals("9SOzK.T>_.j9(09SOzK.T>_.j9(", file0.getName());
      assertEquals(1392409281320L, file0.lastModified());
      assertTrue(file0.canExecute());
      assertTrue(file0.isAbsolute());
      assertEquals(0L, file0.length());
      assertTrue(file0.canWrite());
      assertEquals(0L, file0.getFreeSpace());
      assertFalse(file0.isDirectory());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertTrue(zipArchiveOutputStream0.isSeekable());
      assertEquals(8, zipArchiveEntry0.getMethod());
      assertFalse(zipArchiveEntry0.isDirectory());
      assertFalse(zipArchiveEntry0.isUnixSymlink());
      assertFalse(zipArchiveEntry0.isStreamContiguous());
      assertEquals(0, zipArchiveEntry0.getVersionRequired());
      assertEquals(0L, zipArchiveEntry0.getCrc());
      assertEquals(2L, zipArchiveEntry0.getCompressedSize());
      assertEquals("9SOzK.T>_.j9(", zipArchiveEntry0.getName());
      assertEquals(0, zipArchiveEntry0.getVersionMadeBy());
      assertEquals("9SOzK.T>_.j9(", zipArchiveEntry0.toString());
      assertEquals((-1L), zipArchiveEntry0.getDataOffset());
      assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
      assertEquals(0L, zipArchiveEntry0.getSize());
      assertEquals(0, zipArchiveEntry0.getRawFlag());
      assertNull(zipArchiveEntry0.getComment());
      assertEquals(1243, zipArchiveEntry0.getPlatform());
      assertEquals(0, zipArchiveEntry0.getInternalAttributes());
      assertEquals(0, zipArchiveEntry0.getUnixMode());
      assertEquals(0L, zipArchiveOutputStream1.getBytesWritten());
      assertEquals(0, zipArchiveOutputStream1.getCount());
      assertEquals("UTF8", zipArchiveOutputStream1.getEncoding());
      assertFalse(zipArchiveOutputStream1.isSeekable());
      assertNotSame(zipArchiveOutputStream0, zipArchiveOutputStream1);
      assertNotSame(zipArchiveOutputStream1, zipArchiveOutputStream0);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      
      zipArchiveOutputStream0.setUseLanguageEncodingFlag(false);
      assertFalse(zipArchiveOutputStream0.equals((Object)zipArchiveOutputStream1));
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      assertTrue(file0.canRead());
      assertEquals("/tmp", file0.getParent());
      assertTrue(file0.exists());
      assertTrue(file0.isFile());
      assertEquals("/tmp/9SOzK.T>_.j9(09SOzK.T>_.j9(", file0.toString());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals("9SOzK.T>_.j9(09SOzK.T>_.j9(", file0.getName());
      assertEquals(1392409281320L, file0.lastModified());
      assertTrue(file0.canExecute());
      assertTrue(file0.isAbsolute());
      assertEquals(0L, file0.length());
      assertTrue(file0.canWrite());
      assertEquals(0L, file0.getFreeSpace());
      assertFalse(file0.isDirectory());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertTrue(zipArchiveOutputStream0.isSeekable());
      assertNotSame(zipArchiveOutputStream0, zipArchiveOutputStream1);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      
      ZipArchiveOutputStream.UnicodeExtraFieldPolicy zipArchiveOutputStream_UnicodeExtraFieldPolicy0 = ZipArchiveOutputStream.UnicodeExtraFieldPolicy.NEVER;
      assertEquals("never", zipArchiveOutputStream_UnicodeExtraFieldPolicy0.toString());
      assertNotNull(zipArchiveOutputStream_UnicodeExtraFieldPolicy0);
      
      InputStream inputStream0 = null;
      ObjectInputStream objectInputStream0 = null;
//      try {
        objectInputStream0 = new ObjectInputStream((InputStream) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.io.ObjectInputStream$PeekInputStream", e);
//      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      File file0 = MockFile.createTempFile("9SOzK.T>_.j9(", "9SOzK.T>_.j9(");
      assertFalse(file0.isDirectory());
      assertEquals(0L, file0.getFreeSpace());
      assertTrue(file0.exists());
      assertEquals("9SOzK.T>_.j9(09SOzK.T>_.j9(", file0.getName());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      assertTrue(file0.canRead());
      assertEquals("/tmp", file0.getParent());
      assertTrue(file0.isAbsolute());
      assertEquals("/tmp/9SOzK.T>_.j9(09SOzK.T>_.j9(", file0.toString());
      assertTrue(file0.isFile());
      assertTrue(file0.canWrite());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(0L, file0.length());
      assertTrue(file0.canExecute());
      assertNotNull(file0);
      
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(file0);
      assertFalse(file0.isDirectory());
      assertEquals(0L, file0.getFreeSpace());
      assertTrue(file0.exists());
      assertEquals("9SOzK.T>_.j9(09SOzK.T>_.j9(", file0.getName());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      assertTrue(file0.canRead());
      assertEquals("/tmp", file0.getParent());
      assertTrue(file0.isAbsolute());
      assertEquals("/tmp/9SOzK.T>_.j9(09SOzK.T>_.j9(", file0.toString());
      assertTrue(file0.isFile());
      assertTrue(file0.canWrite());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(0L, file0.length());
      assertTrue(file0.canExecute());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertTrue(zipArchiveOutputStream0.isSeekable());
      assertNotNull(zipArchiveOutputStream0);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      
      zipArchiveOutputStream0.writeCentralDirectoryEnd();
      assertFalse(file0.isDirectory());
      assertEquals(0L, file0.getFreeSpace());
      assertTrue(file0.exists());
      assertEquals("9SOzK.T>_.j9(09SOzK.T>_.j9(", file0.getName());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      assertTrue(file0.canRead());
      assertEquals("/tmp", file0.getParent());
      assertTrue(file0.isAbsolute());
      assertEquals("/tmp/9SOzK.T>_.j9(09SOzK.T>_.j9(", file0.toString());
      assertTrue(file0.isFile());
      assertTrue(file0.canWrite());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(0L, file0.length());
      assertTrue(file0.canExecute());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertTrue(zipArchiveOutputStream0.isSeekable());
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      
      ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry("9SOzK.T>_.j9(");
      assertEquals((-1L), zipArchiveEntry0.getCompressedSize());
      assertFalse(zipArchiveEntry0.isUnixSymlink());
      assertEquals(0, zipArchiveEntry0.getInternalAttributes());
      assertEquals(0, zipArchiveEntry0.getPlatform());
      assertEquals(0, zipArchiveEntry0.getUnixMode());
      assertEquals(0, zipArchiveEntry0.getVersionRequired());
      assertEquals(0, zipArchiveEntry0.getVersionMadeBy());
      assertEquals(0, zipArchiveEntry0.getRawFlag());
      assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
      assertEquals("9SOzK.T>_.j9(", zipArchiveEntry0.toString());
      assertEquals((-1L), zipArchiveEntry0.getDataOffset());
      assertEquals((-1), zipArchiveEntry0.getMethod());
      assertEquals("9SOzK.T>_.j9(", zipArchiveEntry0.getName());
      assertNull(zipArchiveEntry0.getComment());
      assertEquals((-1L), zipArchiveEntry0.getSize());
      assertFalse(zipArchiveEntry0.isStreamContiguous());
      assertFalse(zipArchiveEntry0.isDirectory());
      assertEquals((-1L), zipArchiveEntry0.getCrc());
      assertNotNull(zipArchiveEntry0);
      assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      
      boolean boolean0 = zipArchiveOutputStream0.finished;
      assertFalse(boolean0);
      
      zipArchiveOutputStream0.putArchiveEntry(zipArchiveEntry0);
      assertFalse(file0.isDirectory());
      assertEquals(0L, file0.getFreeSpace());
      assertTrue(file0.exists());
      assertEquals("9SOzK.T>_.j9(09SOzK.T>_.j9(", file0.getName());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      assertTrue(file0.canRead());
      assertEquals("/tmp", file0.getParent());
      assertTrue(file0.isAbsolute());
      assertEquals("/tmp/9SOzK.T>_.j9(09SOzK.T>_.j9(", file0.toString());
      assertTrue(file0.isFile());
      assertTrue(file0.canWrite());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(0L, file0.length());
      assertTrue(file0.canExecute());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertTrue(zipArchiveOutputStream0.isSeekable());
      assertEquals((-1L), zipArchiveEntry0.getCompressedSize());
      assertFalse(zipArchiveEntry0.isUnixSymlink());
      assertEquals(0, zipArchiveEntry0.getInternalAttributes());
      assertEquals(0, zipArchiveEntry0.getPlatform());
      assertEquals(0, zipArchiveEntry0.getUnixMode());
      assertEquals(0, zipArchiveEntry0.getVersionRequired());
      assertEquals(0, zipArchiveEntry0.getVersionMadeBy());
      assertEquals(0, zipArchiveEntry0.getRawFlag());
      assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
      assertEquals("9SOzK.T>_.j9(", zipArchiveEntry0.toString());
      assertEquals((-1L), zipArchiveEntry0.getDataOffset());
      assertEquals("9SOzK.T>_.j9(", zipArchiveEntry0.getName());
      assertNull(zipArchiveEntry0.getComment());
      assertEquals((-1L), zipArchiveEntry0.getSize());
      assertEquals(8, zipArchiveEntry0.getMethod());
      assertFalse(zipArchiveEntry0.isStreamContiguous());
      assertFalse(zipArchiveEntry0.isDirectory());
      assertEquals((-1L), zipArchiveEntry0.getCrc());
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      
      zipArchiveOutputStream0.putArchiveEntry(zipArchiveEntry0);
      assertFalse(file0.isDirectory());
      assertEquals(0L, file0.getFreeSpace());
      assertTrue(file0.exists());
      assertEquals("9SOzK.T>_.j9(09SOzK.T>_.j9(", file0.getName());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      assertTrue(file0.canRead());
      assertEquals("/tmp", file0.getParent());
      assertTrue(file0.isAbsolute());
      assertEquals("/tmp/9SOzK.T>_.j9(09SOzK.T>_.j9(", file0.toString());
      assertTrue(file0.isFile());
      assertTrue(file0.canWrite());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(0L, file0.length());
      assertTrue(file0.canExecute());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertTrue(zipArchiveOutputStream0.isSeekable());
      assertEquals(2L, zipArchiveEntry0.getCompressedSize());
      assertFalse(zipArchiveEntry0.isUnixSymlink());
      assertEquals(0, zipArchiveEntry0.getInternalAttributes());
      assertEquals(0, zipArchiveEntry0.getPlatform());
      assertEquals(0, zipArchiveEntry0.getUnixMode());
      assertEquals(0, zipArchiveEntry0.getVersionRequired());
      assertEquals(0, zipArchiveEntry0.getVersionMadeBy());
      assertEquals(0, zipArchiveEntry0.getRawFlag());
      assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
      assertEquals("9SOzK.T>_.j9(", zipArchiveEntry0.toString());
      assertEquals((-1L), zipArchiveEntry0.getDataOffset());
      assertEquals("9SOzK.T>_.j9(", zipArchiveEntry0.getName());
      assertNull(zipArchiveEntry0.getComment());
      assertEquals(0L, zipArchiveEntry0.getSize());
      assertEquals(8, zipArchiveEntry0.getMethod());
      assertFalse(zipArchiveEntry0.isStreamContiguous());
      assertFalse(zipArchiveEntry0.isDirectory());
      assertEquals(0L, zipArchiveEntry0.getCrc());
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      
      boolean boolean1 = zipArchiveOutputStream0.canWriteEntryData(zipArchiveEntry0);
      assertFalse(boolean1 == boolean0);
      assertFalse(file0.isDirectory());
      assertEquals(0L, file0.getFreeSpace());
      assertTrue(file0.exists());
      assertEquals("9SOzK.T>_.j9(09SOzK.T>_.j9(", file0.getName());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      assertTrue(file0.canRead());
      assertEquals("/tmp", file0.getParent());
      assertTrue(file0.isAbsolute());
      assertEquals("/tmp/9SOzK.T>_.j9(09SOzK.T>_.j9(", file0.toString());
      assertTrue(file0.isFile());
      assertTrue(file0.canWrite());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(0L, file0.length());
      assertTrue(file0.canExecute());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertTrue(zipArchiveOutputStream0.isSeekable());
      assertEquals(2L, zipArchiveEntry0.getCompressedSize());
      assertFalse(zipArchiveEntry0.isUnixSymlink());
      assertEquals(0, zipArchiveEntry0.getInternalAttributes());
      assertEquals(0, zipArchiveEntry0.getPlatform());
      assertEquals(0, zipArchiveEntry0.getUnixMode());
      assertEquals(0, zipArchiveEntry0.getVersionRequired());
      assertEquals(0, zipArchiveEntry0.getVersionMadeBy());
      assertEquals(0, zipArchiveEntry0.getRawFlag());
      assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
      assertEquals("9SOzK.T>_.j9(", zipArchiveEntry0.toString());
      assertEquals((-1L), zipArchiveEntry0.getDataOffset());
      assertEquals("9SOzK.T>_.j9(", zipArchiveEntry0.getName());
      assertNull(zipArchiveEntry0.getComment());
      assertEquals(0L, zipArchiveEntry0.getSize());
      assertEquals(8, zipArchiveEntry0.getMethod());
      assertFalse(zipArchiveEntry0.isStreamContiguous());
      assertFalse(zipArchiveEntry0.isDirectory());
      assertEquals(0L, zipArchiveEntry0.getCrc());
      assertTrue(boolean1);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-3);
      byteArray0[1] = (byte)32;
      byteArray0[2] = (byte)32;
      byteArray0[3] = (byte) (-1);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertEquals(4, byteArrayInputStream0.available());
      assertNotNull(byteArrayInputStream0);
      assertEquals(4, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-3), (byte)32, (byte)32, (byte) (-1)}, byteArray0);
      
      boolean boolean2 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2);
      
      zipArchiveOutputStream0.addRawArchiveEntry(zipArchiveEntry0, byteArrayInputStream0);
      assertFalse(file0.isDirectory());
      assertEquals(0L, file0.getFreeSpace());
      assertTrue(file0.exists());
      assertEquals("9SOzK.T>_.j9(09SOzK.T>_.j9(", file0.getName());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      assertTrue(file0.canRead());
      assertEquals("/tmp", file0.getParent());
      assertTrue(file0.isAbsolute());
      assertEquals("/tmp/9SOzK.T>_.j9(09SOzK.T>_.j9(", file0.toString());
      assertTrue(file0.isFile());
      assertTrue(file0.canWrite());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(0L, file0.length());
      assertTrue(file0.canExecute());
      assertEquals(4, zipArchiveOutputStream0.getCount());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertEquals(4L, zipArchiveOutputStream0.getBytesWritten());
      assertTrue(zipArchiveOutputStream0.isSeekable());
      assertEquals(2L, zipArchiveEntry0.getCompressedSize());
      assertFalse(zipArchiveEntry0.isUnixSymlink());
      assertEquals(0, zipArchiveEntry0.getInternalAttributes());
      assertEquals(0, zipArchiveEntry0.getPlatform());
      assertEquals(0, zipArchiveEntry0.getUnixMode());
      assertEquals(0, zipArchiveEntry0.getVersionRequired());
      assertEquals(0, zipArchiveEntry0.getVersionMadeBy());
      assertEquals(0, zipArchiveEntry0.getRawFlag());
      assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
      assertEquals("9SOzK.T>_.j9(", zipArchiveEntry0.toString());
      assertEquals((-1L), zipArchiveEntry0.getDataOffset());
      assertEquals("9SOzK.T>_.j9(", zipArchiveEntry0.getName());
      assertNull(zipArchiveEntry0.getComment());
      assertEquals(0L, zipArchiveEntry0.getSize());
      assertEquals(8, zipArchiveEntry0.getMethod());
      assertFalse(zipArchiveEntry0.isStreamContiguous());
      assertFalse(zipArchiveEntry0.isDirectory());
      assertEquals(0L, zipArchiveEntry0.getCrc());
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(4, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-3), (byte)32, (byte)32, (byte) (-1)}, byteArray0);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      
      // Undeclared exception!
//      try { 
        zipArchiveOutputStream0.writeOut(byteArray0, (-1941), (byte)32);
//        fail("Expecting exception: IndexOutOfBoundsException");
      
//      } catch(IndexOutOfBoundsException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.nio.ByteBuffer", e);
//      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      File file0 = MockFile.createTempFile("9OzK.T>_j9(", "9OzK.T>_j9(");
      assertTrue(file0.canExecute());
      assertTrue(file0.canRead());
      assertTrue(file0.isAbsolute());
      assertEquals("/tmp", file0.getParent());
      assertTrue(file0.canWrite());
      assertTrue(file0.isFile());
      assertEquals("9OzK.T>_j9(09OzK.T>_j9(", file0.getName());
      assertEquals("/tmp/9OzK.T>_j9(09OzK.T>_j9(", file0.toString());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals(0L, file0.getFreeSpace());
      assertFalse(file0.isDirectory());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(0L, file0.length());
      assertTrue(file0.exists());
      assertNotNull(file0);
      
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(file0);
      assertTrue(file0.canExecute());
      assertTrue(file0.canRead());
      assertTrue(file0.isAbsolute());
      assertEquals("/tmp", file0.getParent());
      assertTrue(file0.canWrite());
      assertTrue(file0.isFile());
      assertEquals("9OzK.T>_j9(09OzK.T>_j9(", file0.getName());
      assertEquals("/tmp/9OzK.T>_j9(09OzK.T>_j9(", file0.toString());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals(0L, file0.getFreeSpace());
      assertFalse(file0.isDirectory());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(0L, file0.length());
      assertTrue(file0.exists());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertTrue(zipArchiveOutputStream0.isSeekable());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertNotNull(zipArchiveOutputStream0);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      
      zipArchiveOutputStream0.writeCentralDirectoryEnd();
      assertTrue(file0.canExecute());
      assertTrue(file0.canRead());
      assertTrue(file0.isAbsolute());
      assertEquals("/tmp", file0.getParent());
      assertTrue(file0.canWrite());
      assertTrue(file0.isFile());
      assertEquals("9OzK.T>_j9(09OzK.T>_j9(", file0.getName());
      assertEquals("/tmp/9OzK.T>_j9(09OzK.T>_j9(", file0.toString());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals(0L, file0.getFreeSpace());
      assertFalse(file0.isDirectory());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(0L, file0.length());
      assertTrue(file0.exists());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertTrue(zipArchiveOutputStream0.isSeekable());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      
      zipArchiveOutputStream0.destroy();
      assertTrue(file0.canExecute());
      assertTrue(file0.canRead());
      assertTrue(file0.isAbsolute());
      assertEquals("/tmp", file0.getParent());
      assertTrue(file0.canWrite());
      assertTrue(file0.isFile());
      assertEquals("9OzK.T>_j9(09OzK.T>_j9(", file0.getName());
      assertEquals("/tmp/9OzK.T>_j9(09OzK.T>_j9(", file0.toString());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals(0L, file0.getFreeSpace());
      assertFalse(file0.isDirectory());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(0L, file0.length());
      assertTrue(file0.exists());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertTrue(zipArchiveOutputStream0.isSeekable());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      
      ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry("9OzK.T>_j9(");
      assertEquals((-1), zipArchiveEntry0.getMethod());
      assertEquals("9OzK.T>_j9(", zipArchiveEntry0.toString());
      assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
      assertEquals((-1L), zipArchiveEntry0.getDataOffset());
      assertNull(zipArchiveEntry0.getComment());
      assertEquals(0, zipArchiveEntry0.getVersionMadeBy());
      assertFalse(zipArchiveEntry0.isUnixSymlink());
      assertEquals(0, zipArchiveEntry0.getRawFlag());
      assertEquals(0, zipArchiveEntry0.getInternalAttributes());
      assertEquals(0, zipArchiveEntry0.getPlatform());
      assertEquals(0, zipArchiveEntry0.getUnixMode());
      assertEquals(0, zipArchiveEntry0.getVersionRequired());
      assertEquals((-1L), zipArchiveEntry0.getCrc());
      assertEquals((-1L), zipArchiveEntry0.getSize());
      assertFalse(zipArchiveEntry0.isStreamContiguous());
      assertFalse(zipArchiveEntry0.isDirectory());
      assertEquals("9OzK.T>_j9(", zipArchiveEntry0.getName());
      assertEquals((-1L), zipArchiveEntry0.getCompressedSize());
      assertNotNull(zipArchiveEntry0);
      assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      
      boolean boolean0 = zipArchiveEntry0.equals(zipArchiveOutputStream0);
      assertTrue(file0.canExecute());
      assertTrue(file0.canRead());
      assertTrue(file0.isAbsolute());
      assertEquals("/tmp", file0.getParent());
      assertTrue(file0.canWrite());
      assertTrue(file0.isFile());
      assertEquals("9OzK.T>_j9(09OzK.T>_j9(", file0.getName());
      assertEquals("/tmp/9OzK.T>_j9(09OzK.T>_j9(", file0.toString());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals(0L, file0.getFreeSpace());
      assertFalse(file0.isDirectory());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(0L, file0.length());
      assertTrue(file0.exists());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertTrue(zipArchiveOutputStream0.isSeekable());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals((-1), zipArchiveEntry0.getMethod());
      assertEquals("9OzK.T>_j9(", zipArchiveEntry0.toString());
      assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
      assertEquals((-1L), zipArchiveEntry0.getDataOffset());
      assertNull(zipArchiveEntry0.getComment());
      assertEquals(0, zipArchiveEntry0.getVersionMadeBy());
      assertFalse(zipArchiveEntry0.isUnixSymlink());
      assertEquals(0, zipArchiveEntry0.getRawFlag());
      assertEquals(0, zipArchiveEntry0.getInternalAttributes());
      assertEquals(0, zipArchiveEntry0.getPlatform());
      assertEquals(0, zipArchiveEntry0.getUnixMode());
      assertEquals(0, zipArchiveEntry0.getVersionRequired());
      assertEquals((-1L), zipArchiveEntry0.getCrc());
      assertEquals((-1L), zipArchiveEntry0.getSize());
      assertFalse(zipArchiveEntry0.isStreamContiguous());
      assertFalse(zipArchiveEntry0.isDirectory());
      assertEquals("9OzK.T>_j9(", zipArchiveEntry0.getName());
      assertEquals((-1L), zipArchiveEntry0.getCompressedSize());
      assertFalse(boolean0);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      
//      try { 
        zipArchiveOutputStream0.putArchiveEntry(zipArchiveEntry0);
//        fail("Expecting exception: ClosedChannelException");
      
//      } catch(ClosedChannelException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      File file0 = MockFile.createTempFile("9SOzK.T>_.j9(", "9SOzK.T>_.j9(");
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isHidden());
      assertEquals("/tmp/9SOzK.T>_.j9(09SOzK.T>_.j9(", file0.toString());
      assertEquals("/tmp", file0.getParent());
      assertTrue(file0.canRead());
      assertTrue(file0.exists());
      assertTrue(file0.isFile());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(1392409281320L, file0.lastModified());
      assertTrue(file0.isAbsolute());
      assertEquals("9SOzK.T>_.j9(09SOzK.T>_.j9(", file0.getName());
      assertTrue(file0.canWrite());
      assertEquals(0L, file0.getFreeSpace());
      assertFalse(file0.isDirectory());
      assertTrue(file0.canExecute());
      assertEquals(0L, file0.length());
      assertNotNull(file0);
      
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(file0);
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isHidden());
      assertEquals("/tmp/9SOzK.T>_.j9(09SOzK.T>_.j9(", file0.toString());
      assertEquals("/tmp", file0.getParent());
      assertTrue(file0.canRead());
      assertTrue(file0.exists());
      assertTrue(file0.isFile());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(1392409281320L, file0.lastModified());
      assertTrue(file0.isAbsolute());
      assertEquals("9SOzK.T>_.j9(09SOzK.T>_.j9(", file0.getName());
      assertTrue(file0.canWrite());
      assertEquals(0L, file0.getFreeSpace());
      assertFalse(file0.isDirectory());
      assertTrue(file0.canExecute());
      assertEquals(0L, file0.length());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertTrue(zipArchiveOutputStream0.isSeekable());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertNotNull(zipArchiveOutputStream0);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      
      zipArchiveOutputStream0.writeCentralDirectoryEnd();
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isHidden());
      assertEquals("/tmp/9SOzK.T>_.j9(09SOzK.T>_.j9(", file0.toString());
      assertEquals("/tmp", file0.getParent());
      assertTrue(file0.canRead());
      assertTrue(file0.exists());
      assertTrue(file0.isFile());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(1392409281320L, file0.lastModified());
      assertTrue(file0.isAbsolute());
      assertEquals("9SOzK.T>_.j9(09SOzK.T>_.j9(", file0.getName());
      assertTrue(file0.canWrite());
      assertEquals(0L, file0.getFreeSpace());
      assertFalse(file0.isDirectory());
      assertTrue(file0.canExecute());
      assertEquals(0L, file0.length());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertTrue(zipArchiveOutputStream0.isSeekable());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      
      MockFile mockFile0 = new MockFile("", "");
      assertFalse(mockFile0.equals((Object)file0));
      assertNotNull(mockFile0);
      
      ZipArchiveOutputStream zipArchiveOutputStream1 = new ZipArchiveOutputStream(file0);
      assertFalse(file0.equals((Object)mockFile0));
      assertFalse(zipArchiveOutputStream1.equals((Object)zipArchiveOutputStream0));
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isHidden());
      assertEquals("/tmp/9SOzK.T>_.j9(09SOzK.T>_.j9(", file0.toString());
      assertEquals("/tmp", file0.getParent());
      assertTrue(file0.canRead());
      assertTrue(file0.exists());
      assertTrue(file0.isFile());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(1392409281320L, file0.lastModified());
      assertTrue(file0.isAbsolute());
      assertEquals("9SOzK.T>_.j9(09SOzK.T>_.j9(", file0.getName());
      assertTrue(file0.canWrite());
      assertEquals(0L, file0.getFreeSpace());
      assertFalse(file0.isDirectory());
      assertTrue(file0.canExecute());
      assertEquals(0L, file0.length());
      assertEquals(0, zipArchiveOutputStream1.getCount());
      assertTrue(zipArchiveOutputStream1.isSeekable());
      assertEquals("UTF8", zipArchiveOutputStream1.getEncoding());
      assertEquals(0L, zipArchiveOutputStream1.getBytesWritten());
      assertNotNull(zipArchiveOutputStream1);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      
      ZipArchiveOutputStream zipArchiveOutputStream2 = new ZipArchiveOutputStream(zipArchiveOutputStream1);
      assertFalse(file0.equals((Object)mockFile0));
      assertFalse(zipArchiveOutputStream1.equals((Object)zipArchiveOutputStream0));
      assertFalse(zipArchiveOutputStream2.equals((Object)zipArchiveOutputStream0));
      assertFalse(zipArchiveOutputStream2.equals((Object)zipArchiveOutputStream1));
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isHidden());
      assertEquals("/tmp/9SOzK.T>_.j9(09SOzK.T>_.j9(", file0.toString());
      assertEquals("/tmp", file0.getParent());
      assertTrue(file0.canRead());
      assertTrue(file0.exists());
      assertTrue(file0.isFile());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(1392409281320L, file0.lastModified());
      assertTrue(file0.isAbsolute());
      assertEquals("9SOzK.T>_.j9(09SOzK.T>_.j9(", file0.getName());
      assertTrue(file0.canWrite());
      assertEquals(0L, file0.getFreeSpace());
      assertFalse(file0.isDirectory());
      assertTrue(file0.canExecute());
      assertEquals(0L, file0.length());
      assertEquals(0, zipArchiveOutputStream1.getCount());
      assertTrue(zipArchiveOutputStream1.isSeekable());
      assertEquals("UTF8", zipArchiveOutputStream1.getEncoding());
      assertEquals(0L, zipArchiveOutputStream1.getBytesWritten());
      assertEquals("UTF8", zipArchiveOutputStream2.getEncoding());
      assertEquals(0L, zipArchiveOutputStream2.getBytesWritten());
      assertEquals(0, zipArchiveOutputStream2.getCount());
      assertFalse(zipArchiveOutputStream2.isSeekable());
      assertNotNull(zipArchiveOutputStream2);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      
      // Undeclared exception!
//      try { 
        zipArchiveOutputStream2.close();
//        fail("Expecting exception: IllegalStateException");
      
//      } catch(IllegalStateException e) {
//         //
//         // No current entry
//         //
//         verifyException("org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream", e);
//      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry("6Lz^|?F0`%Ir");
      assertEquals(0, zipArchiveEntry0.getPlatform());
      assertFalse(zipArchiveEntry0.isStreamContiguous());
      assertEquals(0, zipArchiveEntry0.getInternalAttributes());
      assertEquals("6Lz^|?F0`%Ir", zipArchiveEntry0.toString());
      assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
      assertEquals((-1L), zipArchiveEntry0.getCompressedSize());
      assertEquals("6Lz^|?F0`%Ir", zipArchiveEntry0.getName());
      assertEquals(0, zipArchiveEntry0.getVersionRequired());
      assertEquals((-1), zipArchiveEntry0.getMethod());
      assertEquals((-1L), zipArchiveEntry0.getCrc());
      assertEquals(0, zipArchiveEntry0.getRawFlag());
      assertEquals(0, zipArchiveEntry0.getVersionMadeBy());
      assertEquals((-1L), zipArchiveEntry0.getSize());
      assertEquals(0, zipArchiveEntry0.getUnixMode());
      assertFalse(zipArchiveEntry0.isDirectory());
      assertFalse(zipArchiveEntry0.isUnixSymlink());
      assertEquals((-1L), zipArchiveEntry0.getDataOffset());
      assertNull(zipArchiveEntry0.getComment());
      assertNotNull(zipArchiveEntry0);
      assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      
      MockFile mockFile0 = new MockFile("6Lz^|?F0`%Ir");
      assertNotNull(mockFile0);
      
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(mockFile0);
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals("6Lz^|?F0`%Ir", mockFile0.getName());
      assertTrue(mockFile0.canExecute());
      assertFalse(mockFile0.isDirectory());
      assertTrue(mockFile0.canWrite());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.exists());
      assertEquals("6Lz^|?F0`%Ir", mockFile0.toString());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.isAbsolute());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.isFile());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertFalse(zipArchiveOutputStream0.isSeekable());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertNotNull(zipArchiveOutputStream0);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      
      zipArchiveOutputStream0.putArchiveEntry(zipArchiveEntry0);
      assertEquals(0, zipArchiveEntry0.getPlatform());
      assertFalse(zipArchiveEntry0.isStreamContiguous());
      assertEquals(0, zipArchiveEntry0.getInternalAttributes());
      assertEquals(8, zipArchiveEntry0.getMethod());
      assertEquals("6Lz^|?F0`%Ir", zipArchiveEntry0.toString());
      assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
      assertEquals((-1L), zipArchiveEntry0.getCompressedSize());
      assertEquals("6Lz^|?F0`%Ir", zipArchiveEntry0.getName());
      assertEquals(0, zipArchiveEntry0.getVersionRequired());
      assertEquals((-1L), zipArchiveEntry0.getCrc());
      assertEquals(0, zipArchiveEntry0.getRawFlag());
      assertEquals(0, zipArchiveEntry0.getVersionMadeBy());
      assertEquals((-1L), zipArchiveEntry0.getSize());
      assertEquals(0, zipArchiveEntry0.getUnixMode());
      assertFalse(zipArchiveEntry0.isDirectory());
      assertFalse(zipArchiveEntry0.isUnixSymlink());
      assertEquals((-1L), zipArchiveEntry0.getDataOffset());
      assertNull(zipArchiveEntry0.getComment());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals("6Lz^|?F0`%Ir", mockFile0.getName());
      assertTrue(mockFile0.canExecute());
      assertFalse(mockFile0.isDirectory());
      assertTrue(mockFile0.canWrite());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.exists());
      assertEquals("6Lz^|?F0`%Ir", mockFile0.toString());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertFalse(mockFile0.isAbsolute());
      assertTrue(mockFile0.canRead());
      assertEquals(42L, mockFile0.length());
      assertTrue(mockFile0.isFile());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertFalse(zipArchiveOutputStream0.isSeekable());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      
      ZipArchiveOutputStream zipArchiveOutputStream1 = new ZipArchiveOutputStream(zipArchiveOutputStream0);
      assertFalse(zipArchiveOutputStream1.equals((Object)zipArchiveOutputStream0));
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals("6Lz^|?F0`%Ir", mockFile0.getName());
      assertTrue(mockFile0.canExecute());
      assertFalse(mockFile0.isDirectory());
      assertTrue(mockFile0.canWrite());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.exists());
      assertEquals("6Lz^|?F0`%Ir", mockFile0.toString());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertFalse(mockFile0.isAbsolute());
      assertTrue(mockFile0.canRead());
      assertEquals(42L, mockFile0.length());
      assertTrue(mockFile0.isFile());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertFalse(zipArchiveOutputStream0.isSeekable());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertEquals(0, zipArchiveOutputStream1.getCount());
      assertEquals(0L, zipArchiveOutputStream1.getBytesWritten());
      assertEquals("UTF8", zipArchiveOutputStream1.getEncoding());
      assertFalse(zipArchiveOutputStream1.isSeekable());
      assertNotNull(zipArchiveOutputStream1);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      
      zipArchiveOutputStream1.setUseLanguageEncodingFlag(true);
      assertFalse(zipArchiveOutputStream0.equals((Object)zipArchiveOutputStream1));
      assertFalse(zipArchiveOutputStream1.equals((Object)zipArchiveOutputStream0));
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals("6Lz^|?F0`%Ir", mockFile0.getName());
      assertTrue(mockFile0.canExecute());
      assertFalse(mockFile0.isDirectory());
      assertTrue(mockFile0.canWrite());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.exists());
      assertEquals("6Lz^|?F0`%Ir", mockFile0.toString());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertFalse(mockFile0.isAbsolute());
      assertTrue(mockFile0.canRead());
      assertEquals(42L, mockFile0.length());
      assertTrue(mockFile0.isFile());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertFalse(zipArchiveOutputStream0.isSeekable());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertEquals(0, zipArchiveOutputStream1.getCount());
      assertEquals(0L, zipArchiveOutputStream1.getBytesWritten());
      assertEquals("UTF8", zipArchiveOutputStream1.getEncoding());
      assertFalse(zipArchiveOutputStream1.isSeekable());
      assertNotSame(zipArchiveOutputStream0, zipArchiveOutputStream1);
      assertNotSame(zipArchiveOutputStream1, zipArchiveOutputStream0);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      
      ZipArchiveOutputStream.UnicodeExtraFieldPolicy zipArchiveOutputStream_UnicodeExtraFieldPolicy0 = ZipArchiveOutputStream.UnicodeExtraFieldPolicy.NEVER;
      assertEquals("never", zipArchiveOutputStream_UnicodeExtraFieldPolicy0.toString());
      assertNotNull(zipArchiveOutputStream_UnicodeExtraFieldPolicy0);
      
      zipArchiveOutputStream1.setCreateUnicodeExtraFields(zipArchiveOutputStream_UnicodeExtraFieldPolicy0);
      assertFalse(zipArchiveOutputStream0.equals((Object)zipArchiveOutputStream1));
      assertFalse(zipArchiveOutputStream1.equals((Object)zipArchiveOutputStream0));
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals("6Lz^|?F0`%Ir", mockFile0.getName());
      assertTrue(mockFile0.canExecute());
      assertFalse(mockFile0.isDirectory());
      assertTrue(mockFile0.canWrite());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.exists());
      assertEquals("6Lz^|?F0`%Ir", mockFile0.toString());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertFalse(mockFile0.isAbsolute());
      assertTrue(mockFile0.canRead());
      assertEquals(42L, mockFile0.length());
      assertTrue(mockFile0.isFile());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertFalse(zipArchiveOutputStream0.isSeekable());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertEquals(0, zipArchiveOutputStream1.getCount());
      assertEquals(0L, zipArchiveOutputStream1.getBytesWritten());
      assertEquals("UTF8", zipArchiveOutputStream1.getEncoding());
      assertFalse(zipArchiveOutputStream1.isSeekable());
      assertEquals("never", zipArchiveOutputStream_UnicodeExtraFieldPolicy0.toString());
      assertNotSame(zipArchiveOutputStream0, zipArchiveOutputStream1);
      assertNotSame(zipArchiveOutputStream1, zipArchiveOutputStream0);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      assertEquals("", byteArrayOutputStream0.toString());
      assertEquals(0, byteArrayOutputStream0.size());
      assertNotNull(byteArrayOutputStream0);
      
      ByteArrayOutputStream byteArrayOutputStream1 = new ByteArrayOutputStream();
      assertFalse(byteArrayOutputStream1.equals((Object)byteArrayOutputStream0));
      assertEquals("", byteArrayOutputStream1.toString());
      assertEquals(0, byteArrayOutputStream1.size());
      assertNotNull(byteArrayOutputStream1);
      
      ZipArchiveOutputStream zipArchiveOutputStream2 = new ZipArchiveOutputStream(byteArrayOutputStream1);
      assertFalse(byteArrayOutputStream1.equals((Object)byteArrayOutputStream0));
      assertFalse(zipArchiveOutputStream2.equals((Object)zipArchiveOutputStream1));
      assertFalse(zipArchiveOutputStream2.equals((Object)zipArchiveOutputStream0));
      assertEquals("", byteArrayOutputStream1.toString());
      assertEquals(0, byteArrayOutputStream1.size());
      assertFalse(zipArchiveOutputStream2.isSeekable());
      assertEquals(0, zipArchiveOutputStream2.getCount());
      assertEquals(0L, zipArchiveOutputStream2.getBytesWritten());
      assertEquals("UTF8", zipArchiveOutputStream2.getEncoding());
      assertNotNull(zipArchiveOutputStream2);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      
      boolean boolean0 = zipArchiveOutputStream2.canWriteEntryData(zipArchiveEntry0);
      assertFalse(byteArrayOutputStream1.equals((Object)byteArrayOutputStream0));
      assertFalse(zipArchiveOutputStream2.equals((Object)zipArchiveOutputStream1));
      assertFalse(zipArchiveOutputStream2.equals((Object)zipArchiveOutputStream0));
      assertEquals(0, zipArchiveEntry0.getPlatform());
      assertFalse(zipArchiveEntry0.isStreamContiguous());
      assertEquals(0, zipArchiveEntry0.getInternalAttributes());
      assertEquals(8, zipArchiveEntry0.getMethod());
      assertEquals("6Lz^|?F0`%Ir", zipArchiveEntry0.toString());
      assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
      assertEquals((-1L), zipArchiveEntry0.getCompressedSize());
      assertEquals("6Lz^|?F0`%Ir", zipArchiveEntry0.getName());
      assertEquals(0, zipArchiveEntry0.getVersionRequired());
      assertEquals((-1L), zipArchiveEntry0.getCrc());
      assertEquals(0, zipArchiveEntry0.getRawFlag());
      assertEquals(0, zipArchiveEntry0.getVersionMadeBy());
      assertEquals((-1L), zipArchiveEntry0.getSize());
      assertEquals(0, zipArchiveEntry0.getUnixMode());
      assertFalse(zipArchiveEntry0.isDirectory());
      assertFalse(zipArchiveEntry0.isUnixSymlink());
      assertEquals((-1L), zipArchiveEntry0.getDataOffset());
      assertNull(zipArchiveEntry0.getComment());
      assertEquals("", byteArrayOutputStream1.toString());
      assertEquals(0, byteArrayOutputStream1.size());
      assertFalse(zipArchiveOutputStream2.isSeekable());
      assertEquals(0, zipArchiveOutputStream2.getCount());
      assertEquals(0L, zipArchiveOutputStream2.getBytesWritten());
      assertEquals("UTF8", zipArchiveOutputStream2.getEncoding());
      assertNotSame(byteArrayOutputStream1, byteArrayOutputStream0);
      assertNotSame(zipArchiveOutputStream2, zipArchiveOutputStream1);
      assertNotSame(zipArchiveOutputStream2, zipArchiveOutputStream0);
      assertTrue(boolean0);
      assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      
      ZipArchiveEntry zipArchiveEntry1 = (ZipArchiveEntry)zipArchiveOutputStream1.createArchiveEntry(mockFile0, "*`Z+=");
      assertFalse(zipArchiveOutputStream0.equals((Object)zipArchiveOutputStream2));
      assertFalse(zipArchiveOutputStream0.equals((Object)zipArchiveOutputStream1));
      assertFalse(zipArchiveOutputStream1.equals((Object)zipArchiveOutputStream0));
      assertFalse(zipArchiveOutputStream1.equals((Object)zipArchiveOutputStream2));
      assertFalse(zipArchiveEntry1.equals((Object)zipArchiveEntry0));
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals("6Lz^|?F0`%Ir", mockFile0.getName());
      assertTrue(mockFile0.canExecute());
      assertFalse(mockFile0.isDirectory());
      assertTrue(mockFile0.canWrite());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.exists());
      assertEquals("6Lz^|?F0`%Ir", mockFile0.toString());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertFalse(mockFile0.isAbsolute());
      assertTrue(mockFile0.canRead());
      assertEquals(42L, mockFile0.length());
      assertTrue(mockFile0.isFile());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertFalse(zipArchiveOutputStream0.isSeekable());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertEquals(0, zipArchiveOutputStream1.getCount());
      assertEquals(0L, zipArchiveOutputStream1.getBytesWritten());
      assertEquals("UTF8", zipArchiveOutputStream1.getEncoding());
      assertFalse(zipArchiveOutputStream1.isSeekable());
      assertEquals("*`Z+=", zipArchiveEntry1.toString());
      assertEquals(42L, zipArchiveEntry1.getSize());
      assertEquals(0L, zipArchiveEntry1.getExternalAttributes());
      assertEquals("*`Z+=", zipArchiveEntry1.getName());
      assertEquals((-1L), zipArchiveEntry1.getDataOffset());
      assertNull(zipArchiveEntry1.getComment());
      assertEquals((-1), zipArchiveEntry1.getMethod());
      assertFalse(zipArchiveEntry1.isStreamContiguous());
      assertEquals((-1L), zipArchiveEntry1.getCrc());
      assertFalse(zipArchiveEntry1.isDirectory());
      assertEquals(0, zipArchiveEntry1.getVersionRequired());
      assertEquals((-1L), zipArchiveEntry1.getCompressedSize());
      assertFalse(zipArchiveEntry1.isUnixSymlink());
      assertEquals(0, zipArchiveEntry1.getRawFlag());
      assertEquals(0, zipArchiveEntry1.getInternalAttributes());
      assertEquals(0, zipArchiveEntry1.getPlatform());
      assertEquals(0, zipArchiveEntry1.getUnixMode());
      assertEquals(0, zipArchiveEntry1.getVersionMadeBy());
      assertNotNull(zipArchiveEntry1);
      assertNotSame(zipArchiveOutputStream0, zipArchiveOutputStream2);
      assertNotSame(zipArchiveOutputStream0, zipArchiveOutputStream1);
      assertNotSame(zipArchiveOutputStream1, zipArchiveOutputStream0);
      assertNotSame(zipArchiveOutputStream1, zipArchiveOutputStream2);
      assertNotSame(zipArchiveEntry1, zipArchiveEntry0);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      
      boolean boolean1 = zipArchiveOutputStream0.canWriteEntryData(zipArchiveEntry0);
      assertFalse(zipArchiveEntry0.equals((Object)zipArchiveEntry1));
      assertFalse(zipArchiveOutputStream0.equals((Object)zipArchiveOutputStream2));
      assertFalse(zipArchiveOutputStream0.equals((Object)zipArchiveOutputStream1));
      assertTrue(boolean1 == boolean0);
      assertEquals(0, zipArchiveEntry0.getPlatform());
      assertFalse(zipArchiveEntry0.isStreamContiguous());
      assertEquals(0, zipArchiveEntry0.getInternalAttributes());
      assertEquals(8, zipArchiveEntry0.getMethod());
      assertEquals("6Lz^|?F0`%Ir", zipArchiveEntry0.toString());
      assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
      assertEquals((-1L), zipArchiveEntry0.getCompressedSize());
      assertEquals("6Lz^|?F0`%Ir", zipArchiveEntry0.getName());
      assertEquals(0, zipArchiveEntry0.getVersionRequired());
      assertEquals((-1L), zipArchiveEntry0.getCrc());
      assertEquals(0, zipArchiveEntry0.getRawFlag());
      assertEquals(0, zipArchiveEntry0.getVersionMadeBy());
      assertEquals((-1L), zipArchiveEntry0.getSize());
      assertEquals(0, zipArchiveEntry0.getUnixMode());
      assertFalse(zipArchiveEntry0.isDirectory());
      assertFalse(zipArchiveEntry0.isUnixSymlink());
      assertEquals((-1L), zipArchiveEntry0.getDataOffset());
      assertNull(zipArchiveEntry0.getComment());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals("6Lz^|?F0`%Ir", mockFile0.getName());
      assertTrue(mockFile0.canExecute());
      assertFalse(mockFile0.isDirectory());
      assertTrue(mockFile0.canWrite());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.exists());
      assertEquals("6Lz^|?F0`%Ir", mockFile0.toString());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertFalse(mockFile0.isAbsolute());
      assertTrue(mockFile0.canRead());
      assertEquals(42L, mockFile0.length());
      assertTrue(mockFile0.isFile());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertFalse(zipArchiveOutputStream0.isSeekable());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertNotSame(zipArchiveEntry0, zipArchiveEntry1);
      assertNotSame(zipArchiveOutputStream0, zipArchiveOutputStream2);
      assertNotSame(zipArchiveOutputStream0, zipArchiveOutputStream1);
      assertTrue(boolean1);
      assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-57);
      byteArray0[1] = (byte)57;
      byteArray0[2] = (byte)88;
      byteArray0[3] = (byte)69;
      byteArray0[4] = (byte) (-1);
      byteArray0[5] = (byte)32;
      byteArray0[6] = (byte) (-18);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertEquals(7, byteArrayInputStream0.available());
      assertNotNull(byteArrayInputStream0);
      assertEquals(7, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-57), (byte)57, (byte)88, (byte)69, (byte) (-1), (byte)32, (byte) (-18)}, byteArray0);
      
      zipArchiveOutputStream0.addRawArchiveEntry(zipArchiveEntry0, byteArrayInputStream0);
      assertFalse(zipArchiveEntry0.equals((Object)zipArchiveEntry1));
      assertFalse(zipArchiveOutputStream0.equals((Object)zipArchiveOutputStream2));
      assertFalse(zipArchiveOutputStream0.equals((Object)zipArchiveOutputStream1));
      assertEquals(0, zipArchiveEntry0.getPlatform());
      assertFalse(zipArchiveEntry0.isStreamContiguous());
      assertEquals(0, zipArchiveEntry0.getInternalAttributes());
      assertEquals(8, zipArchiveEntry0.getMethod());
      assertEquals("6Lz^|?F0`%Ir", zipArchiveEntry0.toString());
      assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
      assertEquals("6Lz^|?F0`%Ir", zipArchiveEntry0.getName());
      assertEquals(0, zipArchiveEntry0.getVersionRequired());
      assertEquals(0L, zipArchiveEntry0.getCrc());
      assertEquals(0, zipArchiveEntry0.getRawFlag());
      assertEquals(0, zipArchiveEntry0.getVersionMadeBy());
      assertEquals(0L, zipArchiveEntry0.getSize());
      assertEquals(0, zipArchiveEntry0.getUnixMode());
      assertEquals(2L, zipArchiveEntry0.getCompressedSize());
      assertFalse(zipArchiveEntry0.isDirectory());
      assertFalse(zipArchiveEntry0.isUnixSymlink());
      assertEquals((-1L), zipArchiveEntry0.getDataOffset());
      assertNull(zipArchiveEntry0.getComment());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals("6Lz^|?F0`%Ir", mockFile0.getName());
      assertTrue(mockFile0.canExecute());
      assertFalse(mockFile0.isDirectory());
      assertEquals(125L, mockFile0.length());
      assertTrue(mockFile0.canWrite());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.exists());
      assertEquals("6Lz^|?F0`%Ir", mockFile0.toString());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertFalse(mockFile0.isAbsolute());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.isFile());
      assertEquals(7, zipArchiveOutputStream0.getCount());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertFalse(zipArchiveOutputStream0.isSeekable());
      assertEquals(7L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(7, byteArray0.length);
      assertNotSame(zipArchiveEntry0, zipArchiveEntry1);
      assertNotSame(zipArchiveOutputStream0, zipArchiveOutputStream2);
      assertNotSame(zipArchiveOutputStream0, zipArchiveOutputStream1);
      assertArrayEquals(new byte[] {(byte) (-57), (byte)57, (byte)88, (byte)69, (byte) (-1), (byte)32, (byte) (-18)}, byteArray0);
      assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      
      // Undeclared exception!
//      try { 
        zipArchiveOutputStream1.writeOut(byteArray0, (-1), 2827);
//        fail("Expecting exception: IllegalStateException");
      
//      } catch(IllegalStateException e) {
//         //
//         // No current entry
//         //
//         verifyException("org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream", e);
//      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      MockFile mockFile0 = new MockFile("IhV&e}Q:)", "0x");
      assertNotNull(mockFile0);
      
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0, true);
      assertNotNull(mockFileOutputStream0);
      
      FileChannel fileChannel0 = mockFileOutputStream0.getChannel();
      assertTrue(mockFile0.isAbsolute());
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.canRead());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals("/experiment/IhV&e}Q:)", mockFile0.getParent());
      assertTrue(mockFile0.isFile());
      assertEquals("/experiment/IhV&e}Q:)/0x", mockFile0.toString());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.canWrite());
      assertFalse(mockFile0.isDirectory());
      assertEquals("0x", mockFile0.getName());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, fileChannel0.position());
      assertTrue(fileChannel0.isOpen());
      assertEquals(0L, fileChannel0.size());
      assertNotNull(fileChannel0);
      
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(fileChannel0);
      assertTrue(mockFile0.isAbsolute());
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.canRead());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals("/experiment/IhV&e}Q:)", mockFile0.getParent());
      assertTrue(mockFile0.isFile());
      assertEquals("/experiment/IhV&e}Q:)/0x", mockFile0.toString());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.canWrite());
      assertFalse(mockFile0.isDirectory());
      assertEquals("0x", mockFile0.getName());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, fileChannel0.position());
      assertTrue(fileChannel0.isOpen());
      assertEquals(0L, fileChannel0.size());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertTrue(zipArchiveOutputStream0.isSeekable());
      assertNotNull(zipArchiveOutputStream0);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      
      zipArchiveOutputStream0.flush();
      assertTrue(mockFile0.isAbsolute());
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.canRead());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals("/experiment/IhV&e}Q:)", mockFile0.getParent());
      assertTrue(mockFile0.isFile());
      assertEquals("/experiment/IhV&e}Q:)/0x", mockFile0.toString());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.canWrite());
      assertFalse(mockFile0.isDirectory());
      assertEquals("0x", mockFile0.getName());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, fileChannel0.position());
      assertTrue(fileChannel0.isOpen());
      assertEquals(0L, fileChannel0.size());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertTrue(zipArchiveOutputStream0.isSeekable());
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      
      byte[] byteArray0 = new byte[3];
      mockFileOutputStream0.write(byteArray0, 0, 740);
      assertTrue(mockFile0.isAbsolute());
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.canRead());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals("/experiment/IhV&e}Q:)", mockFile0.getParent());
      assertTrue(mockFile0.isFile());
      assertEquals("/experiment/IhV&e}Q:)/0x", mockFile0.toString());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.canWrite());
      assertEquals(3L, mockFile0.length());
      assertFalse(mockFile0.isDirectory());
      assertEquals("0x", mockFile0.getName());
      assertEquals(3, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0}, byteArray0);
      
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      assertFalse(boolean0);
      
      zipArchiveOutputStream0.setEncoding((String) null);
      assertTrue(mockFile0.isAbsolute());
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.canRead());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals("/experiment/IhV&e}Q:)", mockFile0.getParent());
      assertTrue(mockFile0.isFile());
      assertEquals("/experiment/IhV&e}Q:)/0x", mockFile0.toString());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.canWrite());
      assertEquals(3L, mockFile0.length());
      assertFalse(mockFile0.isDirectory());
      assertEquals("0x", mockFile0.getName());
      assertEquals(3L, fileChannel0.position());
      assertEquals(3L, fileChannel0.size());
      assertTrue(fileChannel0.isOpen());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertNull(zipArchiveOutputStream0.getEncoding());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertTrue(zipArchiveOutputStream0.isSeekable());
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      
      zipArchiveOutputStream0.setUseLanguageEncodingFlag(true);
      assertTrue(mockFile0.isAbsolute());
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.canRead());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals("/experiment/IhV&e}Q:)", mockFile0.getParent());
      assertTrue(mockFile0.isFile());
      assertEquals("/experiment/IhV&e}Q:)/0x", mockFile0.toString());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.canWrite());
      assertEquals(3L, mockFile0.length());
      assertFalse(mockFile0.isDirectory());
      assertEquals("0x", mockFile0.getName());
      assertEquals(3L, fileChannel0.position());
      assertEquals(3L, fileChannel0.size());
      assertTrue(fileChannel0.isOpen());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertNull(zipArchiveOutputStream0.getEncoding());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertTrue(zipArchiveOutputStream0.isSeekable());
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      
      ZipArchiveOutputStream.UnicodeExtraFieldPolicy zipArchiveOutputStream_UnicodeExtraFieldPolicy0 = ZipArchiveOutputStream.UnicodeExtraFieldPolicy.NEVER;
      assertEquals("never", zipArchiveOutputStream_UnicodeExtraFieldPolicy0.toString());
      assertNotNull(zipArchiveOutputStream_UnicodeExtraFieldPolicy0);
      
      ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
      assertEquals(0, zipArchiveEntry0.getUnixMode());
      assertEquals(0, zipArchiveEntry0.getVersionMadeBy());
      assertEquals(0, zipArchiveEntry0.getRawFlag());
      assertEquals((-1L), zipArchiveEntry0.getSize());
      assertEquals((-1L), zipArchiveEntry0.getCrc());
      assertEquals("", zipArchiveEntry0.toString());
      assertNull(zipArchiveEntry0.getComment());
      assertEquals((-1L), zipArchiveEntry0.getDataOffset());
      assertEquals(0, zipArchiveEntry0.getInternalAttributes());
      assertFalse(zipArchiveEntry0.isUnixSymlink());
      assertFalse(zipArchiveEntry0.isStreamContiguous());
      assertFalse(zipArchiveEntry0.isDirectory());
      assertEquals(0, zipArchiveEntry0.getPlatform());
      assertEquals((-1L), zipArchiveEntry0.getCompressedSize());
      assertEquals((-1), zipArchiveEntry0.getMethod());
      assertEquals(0, zipArchiveEntry0.getVersionRequired());
      assertEquals("", zipArchiveEntry0.getName());
      assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
      assertNotNull(zipArchiveEntry0);
      assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      
      zipArchiveOutputStream0.writeCentralDirectoryEnd();
      assertTrue(mockFile0.isAbsolute());
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.canRead());
      assertEquals(25L, mockFile0.length());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals("/experiment/IhV&e}Q:)", mockFile0.getParent());
      assertTrue(mockFile0.isFile());
      assertEquals("/experiment/IhV&e}Q:)/0x", mockFile0.toString());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.canWrite());
      assertFalse(mockFile0.isDirectory());
      assertEquals("0x", mockFile0.getName());
      assertEquals(25L, fileChannel0.size());
      assertEquals(25L, fileChannel0.position());
      assertTrue(fileChannel0.isOpen());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertNull(zipArchiveOutputStream0.getEncoding());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertTrue(zipArchiveOutputStream0.isSeekable());
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      
      zipArchiveOutputStream0.finish();
      assertTrue(mockFile0.isAbsolute());
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.canRead());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(47L, mockFile0.length());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals("/experiment/IhV&e}Q:)", mockFile0.getParent());
      assertTrue(mockFile0.isFile());
      assertEquals("/experiment/IhV&e}Q:)/0x", mockFile0.toString());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.canWrite());
      assertFalse(mockFile0.isDirectory());
      assertEquals("0x", mockFile0.getName());
      assertEquals(47L, fileChannel0.position());
      assertEquals(47L, fileChannel0.size());
      assertTrue(fileChannel0.isOpen());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertNull(zipArchiveOutputStream0.getEncoding());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertTrue(zipArchiveOutputStream0.isSeekable());
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      SeekableByteChannel seekableByteChannel0 = null;
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream((SeekableByteChannel) null);
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertFalse(zipArchiveOutputStream0.isSeekable());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertNotNull(zipArchiveOutputStream0);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      
      ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry("6Lz^|?F0`V%Ir6");
      assertEquals(0, zipArchiveEntry0.getVersionRequired());
      assertEquals((-1L), zipArchiveEntry0.getCrc());
      assertEquals((-1L), zipArchiveEntry0.getCompressedSize());
      assertEquals(0, zipArchiveEntry0.getUnixMode());
      assertEquals(0, zipArchiveEntry0.getVersionMadeBy());
      assertEquals("6Lz^|?F0`V%Ir6", zipArchiveEntry0.toString());
      assertEquals(0, zipArchiveEntry0.getRawFlag());
      assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
      assertEquals((-1), zipArchiveEntry0.getMethod());
      assertEquals(0, zipArchiveEntry0.getPlatform());
      assertEquals((-1L), zipArchiveEntry0.getSize());
      assertFalse(zipArchiveEntry0.isStreamContiguous());
      assertFalse(zipArchiveEntry0.isDirectory());
      assertEquals("6Lz^|?F0`V%Ir6", zipArchiveEntry0.getName());
      assertFalse(zipArchiveEntry0.isUnixSymlink());
      assertEquals(0, zipArchiveEntry0.getInternalAttributes());
      assertEquals((-1L), zipArchiveEntry0.getDataOffset());
      assertNull(zipArchiveEntry0.getComment());
      assertNotNull(zipArchiveEntry0);
      assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      
      MockFile mockFile0 = new MockFile("crc checksum is required for STORED method when not writing to a file");
      assertNotNull(mockFile0);
      
      ZipArchiveOutputStream zipArchiveOutputStream1 = new ZipArchiveOutputStream(mockFile0);
      assertFalse(zipArchiveOutputStream1.equals((Object)zipArchiveOutputStream0));
      assertFalse(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.canExecute());
      assertNull(mockFile0.getParent());
      assertEquals("crc checksum is required for STORED method when not writing to a file", mockFile0.toString());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.exists());
      assertTrue(mockFile0.isFile());
      assertEquals("crc checksum is required for STORED method when not writing to a file", mockFile0.getName());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.canWrite());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, zipArchiveOutputStream1.getBytesWritten());
      assertEquals(0, zipArchiveOutputStream1.getCount());
      assertFalse(zipArchiveOutputStream1.isSeekable());
      assertEquals("UTF8", zipArchiveOutputStream1.getEncoding());
      assertNotNull(zipArchiveOutputStream1);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      
      zipArchiveOutputStream1.putArchiveEntry(zipArchiveEntry0);
      assertFalse(zipArchiveOutputStream1.equals((Object)zipArchiveOutputStream0));
      assertEquals(0, zipArchiveEntry0.getVersionRequired());
      assertEquals((-1L), zipArchiveEntry0.getCrc());
      assertEquals((-1L), zipArchiveEntry0.getCompressedSize());
      assertEquals(0, zipArchiveEntry0.getUnixMode());
      assertEquals(0, zipArchiveEntry0.getVersionMadeBy());
      assertEquals("6Lz^|?F0`V%Ir6", zipArchiveEntry0.toString());
      assertEquals(0, zipArchiveEntry0.getRawFlag());
      assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
      assertEquals(0, zipArchiveEntry0.getPlatform());
      assertEquals((-1L), zipArchiveEntry0.getSize());
      assertEquals(8, zipArchiveEntry0.getMethod());
      assertFalse(zipArchiveEntry0.isStreamContiguous());
      assertFalse(zipArchiveEntry0.isDirectory());
      assertEquals("6Lz^|?F0`V%Ir6", zipArchiveEntry0.getName());
      assertFalse(zipArchiveEntry0.isUnixSymlink());
      assertEquals(0, zipArchiveEntry0.getInternalAttributes());
      assertEquals((-1L), zipArchiveEntry0.getDataOffset());
      assertNull(zipArchiveEntry0.getComment());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.canExecute());
      assertNull(mockFile0.getParent());
      assertEquals("crc checksum is required for STORED method when not writing to a file", mockFile0.toString());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.exists());
      assertEquals(44L, mockFile0.length());
      assertTrue(mockFile0.isFile());
      assertEquals("crc checksum is required for STORED method when not writing to a file", mockFile0.getName());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.canWrite());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, zipArchiveOutputStream1.getBytesWritten());
      assertEquals(0, zipArchiveOutputStream1.getCount());
      assertFalse(zipArchiveOutputStream1.isSeekable());
      assertEquals("UTF8", zipArchiveOutputStream1.getEncoding());
      assertNotSame(zipArchiveOutputStream1, zipArchiveOutputStream0);
      assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      
      ZipArchiveOutputStream zipArchiveOutputStream2 = new ZipArchiveOutputStream(zipArchiveOutputStream0);
      assertFalse(zipArchiveOutputStream0.equals((Object)zipArchiveOutputStream1));
      assertFalse(zipArchiveOutputStream2.equals((Object)zipArchiveOutputStream0));
      assertFalse(zipArchiveOutputStream2.equals((Object)zipArchiveOutputStream1));
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertFalse(zipArchiveOutputStream0.isSeekable());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals(0, zipArchiveOutputStream2.getCount());
      assertEquals(0L, zipArchiveOutputStream2.getBytesWritten());
      assertEquals("UTF8", zipArchiveOutputStream2.getEncoding());
      assertFalse(zipArchiveOutputStream2.isSeekable());
      assertNotNull(zipArchiveOutputStream2);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      
      zipArchiveOutputStream1.putArchiveEntry(zipArchiveEntry0);
      assertFalse(zipArchiveOutputStream1.equals((Object)zipArchiveOutputStream0));
      assertFalse(zipArchiveOutputStream1.equals((Object)zipArchiveOutputStream2));
      assertEquals(0, zipArchiveEntry0.getVersionRequired());
      assertEquals(0L, zipArchiveEntry0.getCrc());
      assertEquals(0, zipArchiveEntry0.getUnixMode());
      assertEquals(2L, zipArchiveEntry0.getCompressedSize());
      assertEquals(0, zipArchiveEntry0.getVersionMadeBy());
      assertEquals("6Lz^|?F0`V%Ir6", zipArchiveEntry0.toString());
      assertEquals(0, zipArchiveEntry0.getRawFlag());
      assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
      assertEquals(0, zipArchiveEntry0.getPlatform());
      assertEquals(0L, zipArchiveEntry0.getSize());
      assertEquals(8, zipArchiveEntry0.getMethod());
      assertFalse(zipArchiveEntry0.isStreamContiguous());
      assertFalse(zipArchiveEntry0.isDirectory());
      assertEquals("6Lz^|?F0`V%Ir6", zipArchiveEntry0.getName());
      assertFalse(zipArchiveEntry0.isUnixSymlink());
      assertEquals(0, zipArchiveEntry0.getInternalAttributes());
      assertEquals((-1L), zipArchiveEntry0.getDataOffset());
      assertNull(zipArchiveEntry0.getComment());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.canExecute());
      assertNull(mockFile0.getParent());
      assertEquals("crc checksum is required for STORED method when not writing to a file", mockFile0.toString());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.exists());
      assertTrue(mockFile0.isFile());
      assertEquals("crc checksum is required for STORED method when not writing to a file", mockFile0.getName());
      assertEquals(106L, mockFile0.length());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.canWrite());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, zipArchiveOutputStream1.getBytesWritten());
      assertEquals(0, zipArchiveOutputStream1.getCount());
      assertFalse(zipArchiveOutputStream1.isSeekable());
      assertEquals("UTF8", zipArchiveOutputStream1.getEncoding());
      assertNotSame(zipArchiveOutputStream1, zipArchiveOutputStream0);
      assertNotSame(zipArchiveOutputStream1, zipArchiveOutputStream2);
      assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      
      zipArchiveOutputStream2.setMethod(0);
      assertFalse(zipArchiveOutputStream0.equals((Object)zipArchiveOutputStream2));
      assertFalse(zipArchiveOutputStream0.equals((Object)zipArchiveOutputStream1));
      assertFalse(zipArchiveOutputStream2.equals((Object)zipArchiveOutputStream0));
      assertFalse(zipArchiveOutputStream2.equals((Object)zipArchiveOutputStream1));
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertFalse(zipArchiveOutputStream0.isSeekable());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals(0, zipArchiveOutputStream2.getCount());
      assertEquals(0L, zipArchiveOutputStream2.getBytesWritten());
      assertEquals("UTF8", zipArchiveOutputStream2.getEncoding());
      assertFalse(zipArchiveOutputStream2.isSeekable());
      assertNotSame(zipArchiveOutputStream0, zipArchiveOutputStream2);
      assertNotSame(zipArchiveOutputStream0, zipArchiveOutputStream1);
      assertNotSame(zipArchiveOutputStream2, zipArchiveOutputStream0);
      assertNotSame(zipArchiveOutputStream2, zipArchiveOutputStream1);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      
      ZipArchiveEntry zipArchiveEntry1 = (ZipArchiveEntry)zipArchiveOutputStream1.createArchiveEntry(mockFile0, "6Lz^|?F0`V%Ir6");
      assertFalse(zipArchiveOutputStream1.equals((Object)zipArchiveOutputStream0));
      assertFalse(zipArchiveOutputStream1.equals((Object)zipArchiveOutputStream2));
      assertFalse(zipArchiveEntry1.equals((Object)zipArchiveEntry0));
      assertFalse(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.canExecute());
      assertNull(mockFile0.getParent());
      assertEquals("crc checksum is required for STORED method when not writing to a file", mockFile0.toString());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.exists());
      assertTrue(mockFile0.isFile());
      assertEquals("crc checksum is required for STORED method when not writing to a file", mockFile0.getName());
      assertEquals(106L, mockFile0.length());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.canWrite());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, zipArchiveOutputStream1.getBytesWritten());
      assertEquals(0, zipArchiveOutputStream1.getCount());
      assertFalse(zipArchiveOutputStream1.isSeekable());
      assertEquals("UTF8", zipArchiveOutputStream1.getEncoding());
      assertEquals(0, zipArchiveEntry1.getRawFlag());
      assertEquals(0, zipArchiveEntry1.getUnixMode());
      assertEquals((-1L), zipArchiveEntry1.getCrc());
      assertEquals(0, zipArchiveEntry1.getVersionMadeBy());
      assertEquals((-1L), zipArchiveEntry1.getCompressedSize());
      assertEquals(0L, zipArchiveEntry1.getExternalAttributes());
      assertEquals("6Lz^|?F0`V%Ir6", zipArchiveEntry1.toString());
      assertEquals((-1), zipArchiveEntry1.getMethod());
      assertEquals(0, zipArchiveEntry1.getVersionRequired());
      assertEquals(0, zipArchiveEntry1.getInternalAttributes());
      assertFalse(zipArchiveEntry1.isStreamContiguous());
      assertEquals(106L, zipArchiveEntry1.getSize());
      assertEquals(0, zipArchiveEntry1.getPlatform());
      assertEquals("6Lz^|?F0`V%Ir6", zipArchiveEntry1.getName());
      assertFalse(zipArchiveEntry1.isDirectory());
      assertFalse(zipArchiveEntry1.isUnixSymlink());
      assertNull(zipArchiveEntry1.getComment());
      assertEquals((-1L), zipArchiveEntry1.getDataOffset());
      assertNotNull(zipArchiveEntry1);
      assertNotSame(zipArchiveOutputStream1, zipArchiveOutputStream0);
      assertNotSame(zipArchiveOutputStream1, zipArchiveOutputStream2);
      assertNotSame(zipArchiveEntry1, zipArchiveEntry0);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      
      // Undeclared exception!
//      try { 
        zipArchiveOutputStream0.writeCentralDirectoryEnd();
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      String string0 = "9SOzK.T>_.j9(";
      File file0 = MockFile.createTempFile("9SOzK.T>_.j9(", "9SOzK.T>_.j9(");
      assertFalse(file0.isDirectory());
      assertEquals(0L, file0.length());
      assertEquals("9SOzK.T>_.j9(09SOzK.T>_.j9(", file0.getName());
      assertEquals(0L, file0.getFreeSpace());
      assertTrue(file0.canWrite());
      assertTrue(file0.isAbsolute());
      assertTrue(file0.isFile());
      assertEquals("/tmp", file0.getParent());
      assertEquals("/tmp/9SOzK.T>_.j9(09SOzK.T>_.j9(", file0.toString());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      assertTrue(file0.canExecute());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(1392409281320L, file0.lastModified());
      assertTrue(file0.canRead());
      assertTrue(file0.exists());
      assertNotNull(file0);
      
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(file0);
      assertNotNull(mockFileInputStream0);
      
      FileChannel fileChannel0 = mockFileInputStream0.getChannel();
      assertFalse(file0.isDirectory());
      assertEquals(0L, file0.length());
      assertEquals("9SOzK.T>_.j9(09SOzK.T>_.j9(", file0.getName());
      assertEquals(0L, file0.getFreeSpace());
      assertTrue(file0.canWrite());
      assertTrue(file0.isAbsolute());
      assertTrue(file0.isFile());
      assertEquals("/tmp", file0.getParent());
      assertEquals("/tmp/9SOzK.T>_.j9(09SOzK.T>_.j9(", file0.toString());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      assertTrue(file0.canExecute());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(1392409281320L, file0.lastModified());
      assertTrue(file0.canRead());
      assertTrue(file0.exists());
      assertEquals(0, mockFileInputStream0.available());
      assertTrue(fileChannel0.isOpen());
      assertEquals(0L, fileChannel0.position());
      assertEquals(0L, fileChannel0.size());
      assertNotNull(fileChannel0);
      
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(fileChannel0);
      assertFalse(file0.isDirectory());
      assertEquals(0L, file0.length());
      assertEquals("9SOzK.T>_.j9(09SOzK.T>_.j9(", file0.getName());
      assertEquals(0L, file0.getFreeSpace());
      assertTrue(file0.canWrite());
      assertTrue(file0.isAbsolute());
      assertTrue(file0.isFile());
      assertEquals("/tmp", file0.getParent());
      assertEquals("/tmp/9SOzK.T>_.j9(09SOzK.T>_.j9(", file0.toString());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      assertTrue(file0.canExecute());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(1392409281320L, file0.lastModified());
      assertTrue(file0.canRead());
      assertTrue(file0.exists());
      assertEquals(0, mockFileInputStream0.available());
      assertTrue(fileChannel0.isOpen());
      assertEquals(0L, fileChannel0.position());
      assertEquals(0L, fileChannel0.size());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertTrue(zipArchiveOutputStream0.isSeekable());
      assertNotNull(zipArchiveOutputStream0);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      
      // Undeclared exception!
//      try { 
        zipArchiveOutputStream0.writeCentralDirectoryEnd();
//        fail("Expecting exception: NonWritableChannelException");
      
//      } catch(NonWritableChannelException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.evosuite.runtime.mock.java.io.EvoFileChannel", e);
//      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      String string0 = "9SOzK.T>_.j9(";
      File file0 = MockFile.createTempFile("9SOzK.T>_.j9(", " \u0000");
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(0L, file0.length());
      assertEquals("9SOzK.T>_.j9(0 \u0000", file0.getName());
      assertFalse(file0.isDirectory());
      assertEquals(0L, file0.getFreeSpace());
      assertTrue(file0.exists());
      assertTrue(file0.canExecute());
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isHidden());
      assertEquals("/tmp/9SOzK.T>_.j9(0 \u0000", file0.toString());
      assertTrue(file0.canRead());
      assertTrue(file0.isFile());
      assertTrue(file0.canWrite());
      assertTrue(file0.isAbsolute());
      assertEquals("/tmp", file0.getParent());
      assertNotNull(file0);
      
      ZipArchiveOutputStream zipArchiveOutputStream0 = null;
//      try {
        zipArchiveOutputStream0 = new ZipArchiveOutputStream(file0);
//        fail("Expecting exception: InvalidPathException");
      
//      } catch(InvalidPathException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      File file0 = MockFile.createTempFile("9SOzK.T>_.j9(", "wcsdgq");
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(0L, file0.length());
      assertEquals("9SOzK.T>_.j9(0wcsdgq", file0.getName());
      assertTrue(file0.canExecute());
      assertTrue(file0.isFile());
      assertEquals("/tmp/9SOzK.T>_.j9(0wcsdgq", file0.toString());
      assertTrue(file0.canRead());
      assertTrue(file0.exists());
      assertEquals(1392409281320L, file0.lastModified());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals("/tmp", file0.getParent());
      assertTrue(file0.isAbsolute());
      assertFalse(file0.isDirectory());
      assertTrue(file0.canWrite());
      assertNotNull(file0);
      
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(file0);
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(0L, file0.length());
      assertEquals("9SOzK.T>_.j9(0wcsdgq", file0.getName());
      assertTrue(file0.canExecute());
      assertTrue(file0.isFile());
      assertEquals("/tmp/9SOzK.T>_.j9(0wcsdgq", file0.toString());
      assertTrue(file0.canRead());
      assertTrue(file0.exists());
      assertEquals(1392409281320L, file0.lastModified());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals("/tmp", file0.getParent());
      assertTrue(file0.isAbsolute());
      assertFalse(file0.isDirectory());
      assertTrue(file0.canWrite());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertTrue(zipArchiveOutputStream0.isSeekable());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertNotNull(zipArchiveOutputStream0);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      
      zipArchiveOutputStream0.writeCentralDirectoryEnd();
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(0L, file0.length());
      assertEquals("9SOzK.T>_.j9(0wcsdgq", file0.getName());
      assertTrue(file0.canExecute());
      assertTrue(file0.isFile());
      assertEquals("/tmp/9SOzK.T>_.j9(0wcsdgq", file0.toString());
      assertTrue(file0.canRead());
      assertTrue(file0.exists());
      assertEquals(1392409281320L, file0.lastModified());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals("/tmp", file0.getParent());
      assertTrue(file0.isAbsolute());
      assertFalse(file0.isDirectory());
      assertTrue(file0.canWrite());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertTrue(zipArchiveOutputStream0.isSeekable());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      
      file0.deleteOnExit();
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(0L, file0.length());
      assertEquals("9SOzK.T>_.j9(0wcsdgq", file0.getName());
      assertTrue(file0.canExecute());
      assertTrue(file0.isFile());
      assertEquals("/tmp/9SOzK.T>_.j9(0wcsdgq", file0.toString());
      assertTrue(file0.canRead());
      assertTrue(file0.exists());
      assertEquals(1392409281320L, file0.lastModified());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals("/tmp", file0.getParent());
      assertTrue(file0.isAbsolute());
      assertFalse(file0.isDirectory());
      assertTrue(file0.canWrite());
      
      ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry("wcsdgq");
      assertEquals((-1L), zipArchiveEntry0.getCompressedSize());
      assertFalse(zipArchiveEntry0.isDirectory());
      assertFalse(zipArchiveEntry0.isStreamContiguous());
      assertEquals((-1L), zipArchiveEntry0.getSize());
      assertEquals((-1L), zipArchiveEntry0.getCrc());
      assertEquals(0, zipArchiveEntry0.getInternalAttributes());
      assertEquals("wcsdgq", zipArchiveEntry0.getName());
      assertFalse(zipArchiveEntry0.isUnixSymlink());
      assertEquals((-1L), zipArchiveEntry0.getDataOffset());
      assertNull(zipArchiveEntry0.getComment());
      assertEquals(0, zipArchiveEntry0.getVersionMadeBy());
      assertEquals(0, zipArchiveEntry0.getUnixMode());
      assertEquals(0, zipArchiveEntry0.getPlatform());
      assertEquals(0, zipArchiveEntry0.getRawFlag());
      assertEquals("wcsdgq", zipArchiveEntry0.toString());
      assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
      assertEquals(0, zipArchiveEntry0.getVersionRequired());
      assertEquals((-1), zipArchiveEntry0.getMethod());
      assertNotNull(zipArchiveEntry0);
      assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      
      zipArchiveOutputStream0.setLevel(3);
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(0L, file0.length());
      assertEquals("9SOzK.T>_.j9(0wcsdgq", file0.getName());
      assertTrue(file0.canExecute());
      assertTrue(file0.isFile());
      assertEquals("/tmp/9SOzK.T>_.j9(0wcsdgq", file0.toString());
      assertTrue(file0.canRead());
      assertTrue(file0.exists());
      assertEquals(1392409281320L, file0.lastModified());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals("/tmp", file0.getParent());
      assertTrue(file0.isAbsolute());
      assertFalse(file0.isDirectory());
      assertTrue(file0.canWrite());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertTrue(zipArchiveOutputStream0.isSeekable());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      
      ZipArchiveOutputStream.UnicodeExtraFieldPolicy zipArchiveOutputStream_UnicodeExtraFieldPolicy0 = ZipArchiveOutputStream.UnicodeExtraFieldPolicy.ALWAYS;
      assertEquals("always", zipArchiveOutputStream_UnicodeExtraFieldPolicy0.toString());
      assertNotNull(zipArchiveOutputStream_UnicodeExtraFieldPolicy0);
      
      zipArchiveOutputStream0.setCreateUnicodeExtraFields(zipArchiveOutputStream_UnicodeExtraFieldPolicy0);
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(0L, file0.length());
      assertEquals("9SOzK.T>_.j9(0wcsdgq", file0.getName());
      assertTrue(file0.canExecute());
      assertTrue(file0.isFile());
      assertEquals("/tmp/9SOzK.T>_.j9(0wcsdgq", file0.toString());
      assertTrue(file0.canRead());
      assertTrue(file0.exists());
      assertEquals(1392409281320L, file0.lastModified());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals("/tmp", file0.getParent());
      assertTrue(file0.isAbsolute());
      assertFalse(file0.isDirectory());
      assertTrue(file0.canWrite());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertTrue(zipArchiveOutputStream0.isSeekable());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals("always", zipArchiveOutputStream_UnicodeExtraFieldPolicy0.toString());
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      
      zipArchiveOutputStream0.putArchiveEntry(zipArchiveEntry0);
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(0L, file0.length());
      assertEquals("9SOzK.T>_.j9(0wcsdgq", file0.getName());
      assertTrue(file0.canExecute());
      assertTrue(file0.isFile());
      assertEquals("/tmp/9SOzK.T>_.j9(0wcsdgq", file0.toString());
      assertTrue(file0.canRead());
      assertTrue(file0.exists());
      assertEquals(1392409281320L, file0.lastModified());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals("/tmp", file0.getParent());
      assertTrue(file0.isAbsolute());
      assertFalse(file0.isDirectory());
      assertTrue(file0.canWrite());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertTrue(zipArchiveOutputStream0.isSeekable());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals((-1L), zipArchiveEntry0.getCompressedSize());
      assertFalse(zipArchiveEntry0.isDirectory());
      assertEquals(8, zipArchiveEntry0.getMethod());
      assertFalse(zipArchiveEntry0.isStreamContiguous());
      assertEquals((-1L), zipArchiveEntry0.getSize());
      assertEquals((-1L), zipArchiveEntry0.getCrc());
      assertEquals(0, zipArchiveEntry0.getInternalAttributes());
      assertEquals("wcsdgq", zipArchiveEntry0.getName());
      assertFalse(zipArchiveEntry0.isUnixSymlink());
      assertEquals((-1L), zipArchiveEntry0.getDataOffset());
      assertNull(zipArchiveEntry0.getComment());
      assertEquals(0, zipArchiveEntry0.getVersionMadeBy());
      assertEquals(0, zipArchiveEntry0.getUnixMode());
      assertEquals(0, zipArchiveEntry0.getPlatform());
      assertEquals(0, zipArchiveEntry0.getRawFlag());
      assertEquals("wcsdgq", zipArchiveEntry0.toString());
      assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
      assertEquals(0, zipArchiveEntry0.getVersionRequired());
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      
      zipArchiveOutputStream0.setUseLanguageEncodingFlag(true);
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(0L, file0.length());
      assertEquals("9SOzK.T>_.j9(0wcsdgq", file0.getName());
      assertTrue(file0.canExecute());
      assertTrue(file0.isFile());
      assertEquals("/tmp/9SOzK.T>_.j9(0wcsdgq", file0.toString());
      assertTrue(file0.canRead());
      assertTrue(file0.exists());
      assertEquals(1392409281320L, file0.lastModified());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals("/tmp", file0.getParent());
      assertTrue(file0.isAbsolute());
      assertFalse(file0.isDirectory());
      assertTrue(file0.canWrite());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertTrue(zipArchiveOutputStream0.isSeekable());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      
      boolean boolean0 = zipArchiveOutputStream0.isSeekable();
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(0L, file0.length());
      assertEquals("9SOzK.T>_.j9(0wcsdgq", file0.getName());
      assertTrue(file0.canExecute());
      assertTrue(file0.isFile());
      assertEquals("/tmp/9SOzK.T>_.j9(0wcsdgq", file0.toString());
      assertTrue(file0.canRead());
      assertTrue(file0.exists());
      assertEquals(1392409281320L, file0.lastModified());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals("/tmp", file0.getParent());
      assertTrue(file0.isAbsolute());
      assertFalse(file0.isDirectory());
      assertTrue(file0.canWrite());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertTrue(zipArchiveOutputStream0.isSeekable());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertTrue(boolean0);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      
      zipArchiveOutputStream0.putArchiveEntry(zipArchiveEntry0);
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(0L, file0.length());
      assertEquals("9SOzK.T>_.j9(0wcsdgq", file0.getName());
      assertTrue(file0.canExecute());
      assertTrue(file0.isFile());
      assertEquals("/tmp/9SOzK.T>_.j9(0wcsdgq", file0.toString());
      assertTrue(file0.canRead());
      assertTrue(file0.exists());
      assertEquals(1392409281320L, file0.lastModified());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals("/tmp", file0.getParent());
      assertTrue(file0.isAbsolute());
      assertFalse(file0.isDirectory());
      assertTrue(file0.canWrite());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertTrue(zipArchiveOutputStream0.isSeekable());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertFalse(zipArchiveEntry0.isDirectory());
      assertEquals(8, zipArchiveEntry0.getMethod());
      assertEquals(2L, zipArchiveEntry0.getCompressedSize());
      assertFalse(zipArchiveEntry0.isStreamContiguous());
      assertEquals(0L, zipArchiveEntry0.getSize());
      assertEquals(0L, zipArchiveEntry0.getCrc());
      assertEquals(0, zipArchiveEntry0.getInternalAttributes());
      assertEquals("wcsdgq", zipArchiveEntry0.getName());
      assertFalse(zipArchiveEntry0.isUnixSymlink());
      assertEquals((-1L), zipArchiveEntry0.getDataOffset());
      assertNull(zipArchiveEntry0.getComment());
      assertEquals(0, zipArchiveEntry0.getVersionMadeBy());
      assertEquals(0, zipArchiveEntry0.getUnixMode());
      assertEquals(0, zipArchiveEntry0.getPlatform());
      assertEquals(0, zipArchiveEntry0.getRawFlag());
      assertEquals("wcsdgq", zipArchiveEntry0.toString());
      assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
      assertEquals(0, zipArchiveEntry0.getVersionRequired());
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      
      zipArchiveOutputStream0.setMethod(0);
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(0L, file0.length());
      assertEquals("9SOzK.T>_.j9(0wcsdgq", file0.getName());
      assertTrue(file0.canExecute());
      assertTrue(file0.isFile());
      assertEquals("/tmp/9SOzK.T>_.j9(0wcsdgq", file0.toString());
      assertTrue(file0.canRead());
      assertTrue(file0.exists());
      assertEquals(1392409281320L, file0.lastModified());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals("/tmp", file0.getParent());
      assertTrue(file0.isAbsolute());
      assertFalse(file0.isDirectory());
      assertTrue(file0.canWrite());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertTrue(zipArchiveOutputStream0.isSeekable());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      
      zipArchiveOutputStream0.putArchiveEntry(zipArchiveEntry0);
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(0L, file0.length());
      assertEquals("9SOzK.T>_.j9(0wcsdgq", file0.getName());
      assertTrue(file0.canExecute());
      assertTrue(file0.isFile());
      assertEquals("/tmp/9SOzK.T>_.j9(0wcsdgq", file0.toString());
      assertTrue(file0.canRead());
      assertTrue(file0.exists());
      assertEquals(1392409281320L, file0.lastModified());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals("/tmp", file0.getParent());
      assertTrue(file0.isAbsolute());
      assertFalse(file0.isDirectory());
      assertTrue(file0.canWrite());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertTrue(zipArchiveOutputStream0.isSeekable());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertFalse(zipArchiveEntry0.isDirectory());
      assertEquals(8, zipArchiveEntry0.getMethod());
      assertEquals(2L, zipArchiveEntry0.getCompressedSize());
      assertFalse(zipArchiveEntry0.isStreamContiguous());
      assertEquals(0L, zipArchiveEntry0.getSize());
      assertEquals(0L, zipArchiveEntry0.getCrc());
      assertEquals(0, zipArchiveEntry0.getInternalAttributes());
      assertEquals("wcsdgq", zipArchiveEntry0.getName());
      assertFalse(zipArchiveEntry0.isUnixSymlink());
      assertEquals((-1L), zipArchiveEntry0.getDataOffset());
      assertNull(zipArchiveEntry0.getComment());
      assertEquals(0, zipArchiveEntry0.getVersionMadeBy());
      assertEquals(0, zipArchiveEntry0.getUnixMode());
      assertEquals(0, zipArchiveEntry0.getPlatform());
      assertEquals(0, zipArchiveEntry0.getRawFlag());
      assertEquals("wcsdgq", zipArchiveEntry0.toString());
      assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
      assertEquals(0, zipArchiveEntry0.getVersionRequired());
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte) (-11);
      // Undeclared exception!
//      try { 
        zipArchiveOutputStream0.writeOut(byteArray0, 55, (byte) (-11));
//        fail("Expecting exception: IndexOutOfBoundsException");
      
//      } catch(IndexOutOfBoundsException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.nio.ByteBuffer", e);
//      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      File file0 = MockFile.createTempFile("9SOzK.T>_.j9(", "not encodeable");
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(1392409281320L, file0.lastModified());
      assertTrue(file0.canExecute());
      assertTrue(file0.isFile());
      assertEquals("/tmp", file0.getParent());
      assertTrue(file0.canRead());
      assertTrue(file0.exists());
      assertEquals("/tmp/9SOzK.T>_.j9(0not encodeable", file0.toString());
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isHidden());
      assertEquals("9SOzK.T>_.j9(0not encodeable", file0.getName());
      assertFalse(file0.isDirectory());
      assertEquals(0L, file0.length());
      assertTrue(file0.isAbsolute());
      assertTrue(file0.canWrite());
      assertEquals(0L, file0.getFreeSpace());
      assertNotNull(file0);
      
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(file0);
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(1392409281320L, file0.lastModified());
      assertTrue(file0.canExecute());
      assertTrue(file0.isFile());
      assertEquals("/tmp", file0.getParent());
      assertTrue(file0.canRead());
      assertTrue(file0.exists());
      assertEquals("/tmp/9SOzK.T>_.j9(0not encodeable", file0.toString());
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isHidden());
      assertEquals("9SOzK.T>_.j9(0not encodeable", file0.getName());
      assertFalse(file0.isDirectory());
      assertEquals(0L, file0.length());
      assertTrue(file0.isAbsolute());
      assertTrue(file0.canWrite());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertTrue(zipArchiveOutputStream0.isSeekable());
      assertNotNull(zipArchiveOutputStream0);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      
      zipArchiveOutputStream0.writeCentralDirectoryEnd();
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(1392409281320L, file0.lastModified());
      assertTrue(file0.canExecute());
      assertTrue(file0.isFile());
      assertEquals("/tmp", file0.getParent());
      assertTrue(file0.canRead());
      assertTrue(file0.exists());
      assertEquals("/tmp/9SOzK.T>_.j9(0not encodeable", file0.toString());
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isHidden());
      assertEquals("9SOzK.T>_.j9(0not encodeable", file0.getName());
      assertFalse(file0.isDirectory());
      assertEquals(0L, file0.length());
      assertTrue(file0.isAbsolute());
      assertTrue(file0.canWrite());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertTrue(zipArchiveOutputStream0.isSeekable());
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      
      ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
      assertEquals(0, zipArchiveEntry0.getVersionMadeBy());
      assertEquals((-1L), zipArchiveEntry0.getSize());
      assertEquals((-1L), zipArchiveEntry0.getDataOffset());
      assertEquals(0, zipArchiveEntry0.getUnixMode());
      assertEquals((-1), zipArchiveEntry0.getMethod());
      assertEquals(0, zipArchiveEntry0.getRawFlag());
      assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
      assertEquals(0, zipArchiveEntry0.getVersionRequired());
      assertEquals("", zipArchiveEntry0.getName());
      assertFalse(zipArchiveEntry0.isDirectory());
      assertFalse(zipArchiveEntry0.isUnixSymlink());
      assertEquals(0, zipArchiveEntry0.getInternalAttributes());
      assertEquals(0, zipArchiveEntry0.getPlatform());
      assertEquals((-1L), zipArchiveEntry0.getCompressedSize());
      assertEquals((-1L), zipArchiveEntry0.getCrc());
      assertFalse(zipArchiveEntry0.isStreamContiguous());
      assertEquals("", zipArchiveEntry0.toString());
      assertNull(zipArchiveEntry0.getComment());
      assertNotNull(zipArchiveEntry0);
      assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      
      Zip64Mode zip64Mode0 = Zip64Mode.Always;
      zipArchiveOutputStream0.setUseZip64(zip64Mode0);
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(1392409281320L, file0.lastModified());
      assertTrue(file0.canExecute());
      assertTrue(file0.isFile());
      assertEquals("/tmp", file0.getParent());
      assertTrue(file0.canRead());
      assertTrue(file0.exists());
      assertEquals("/tmp/9SOzK.T>_.j9(0not encodeable", file0.toString());
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isHidden());
      assertEquals("9SOzK.T>_.j9(0not encodeable", file0.getName());
      assertFalse(file0.isDirectory());
      assertEquals(0L, file0.length());
      assertTrue(file0.isAbsolute());
      assertTrue(file0.canWrite());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertTrue(zipArchiveOutputStream0.isSeekable());
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      
      boolean boolean0 = zipArchiveOutputStream0.isSeekable();
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(1392409281320L, file0.lastModified());
      assertTrue(file0.canExecute());
      assertTrue(file0.isFile());
      assertEquals("/tmp", file0.getParent());
      assertTrue(file0.canRead());
      assertTrue(file0.exists());
      assertEquals("/tmp/9SOzK.T>_.j9(0not encodeable", file0.toString());
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isHidden());
      assertEquals("9SOzK.T>_.j9(0not encodeable", file0.getName());
      assertFalse(file0.isDirectory());
      assertEquals(0L, file0.length());
      assertTrue(file0.isAbsolute());
      assertTrue(file0.canWrite());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertTrue(zipArchiveOutputStream0.isSeekable());
      assertTrue(boolean0);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      
      zipArchiveOutputStream0.putArchiveEntry(zipArchiveEntry0);
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(1392409281320L, file0.lastModified());
      assertTrue(file0.canExecute());
      assertTrue(file0.isFile());
      assertEquals("/tmp", file0.getParent());
      assertTrue(file0.canRead());
      assertTrue(file0.exists());
      assertEquals("/tmp/9SOzK.T>_.j9(0not encodeable", file0.toString());
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isHidden());
      assertEquals("9SOzK.T>_.j9(0not encodeable", file0.getName());
      assertFalse(file0.isDirectory());
      assertEquals(0L, file0.length());
      assertTrue(file0.isAbsolute());
      assertTrue(file0.canWrite());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertTrue(zipArchiveOutputStream0.isSeekable());
      assertEquals(0, zipArchiveEntry0.getVersionMadeBy());
      assertEquals((-1L), zipArchiveEntry0.getSize());
      assertEquals((-1L), zipArchiveEntry0.getDataOffset());
      assertEquals(0, zipArchiveEntry0.getUnixMode());
      assertEquals(0, zipArchiveEntry0.getRawFlag());
      assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
      assertEquals(0, zipArchiveEntry0.getVersionRequired());
      assertEquals(8, zipArchiveEntry0.getMethod());
      assertEquals("", zipArchiveEntry0.getName());
      assertFalse(zipArchiveEntry0.isDirectory());
      assertFalse(zipArchiveEntry0.isUnixSymlink());
      assertEquals(0, zipArchiveEntry0.getInternalAttributes());
      assertEquals(0, zipArchiveEntry0.getPlatform());
      assertEquals((-1L), zipArchiveEntry0.getCompressedSize());
      assertEquals((-1L), zipArchiveEntry0.getCrc());
      assertFalse(zipArchiveEntry0.isStreamContiguous());
      assertEquals("", zipArchiveEntry0.toString());
      assertNull(zipArchiveEntry0.getComment());
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      
      zipArchiveOutputStream0.setUseLanguageEncodingFlag(true);
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(1392409281320L, file0.lastModified());
      assertTrue(file0.canExecute());
      assertTrue(file0.isFile());
      assertEquals("/tmp", file0.getParent());
      assertTrue(file0.canRead());
      assertTrue(file0.exists());
      assertEquals("/tmp/9SOzK.T>_.j9(0not encodeable", file0.toString());
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isHidden());
      assertEquals("9SOzK.T>_.j9(0not encodeable", file0.getName());
      assertFalse(file0.isDirectory());
      assertEquals(0L, file0.length());
      assertTrue(file0.isAbsolute());
      assertTrue(file0.canWrite());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertTrue(zipArchiveOutputStream0.isSeekable());
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      
      boolean boolean1 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      ZipArchiveOutputStream zipArchiveOutputStream1 = new ZipArchiveOutputStream(zipArchiveOutputStream0);
      assertFalse(zipArchiveOutputStream1.equals((Object)zipArchiveOutputStream0));
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(1392409281320L, file0.lastModified());
      assertTrue(file0.canExecute());
      assertTrue(file0.isFile());
      assertEquals("/tmp", file0.getParent());
      assertTrue(file0.canRead());
      assertTrue(file0.exists());
      assertEquals("/tmp/9SOzK.T>_.j9(0not encodeable", file0.toString());
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isHidden());
      assertEquals("9SOzK.T>_.j9(0not encodeable", file0.getName());
      assertFalse(file0.isDirectory());
      assertEquals(0L, file0.length());
      assertTrue(file0.isAbsolute());
      assertTrue(file0.canWrite());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertTrue(zipArchiveOutputStream0.isSeekable());
      assertEquals(0L, zipArchiveOutputStream1.getBytesWritten());
      assertEquals(0, zipArchiveOutputStream1.getCount());
      assertFalse(zipArchiveOutputStream1.isSeekable());
      assertEquals("UTF8", zipArchiveOutputStream1.getEncoding());
      assertNotNull(zipArchiveOutputStream1);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      
      zipArchiveOutputStream0.putArchiveEntry(zipArchiveEntry0);
      assertFalse(zipArchiveOutputStream0.equals((Object)zipArchiveOutputStream1));
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(1392409281320L, file0.lastModified());
      assertTrue(file0.canExecute());
      assertTrue(file0.isFile());
      assertEquals("/tmp", file0.getParent());
      assertTrue(file0.canRead());
      assertTrue(file0.exists());
      assertEquals("/tmp/9SOzK.T>_.j9(0not encodeable", file0.toString());
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isHidden());
      assertEquals("9SOzK.T>_.j9(0not encodeable", file0.getName());
      assertFalse(file0.isDirectory());
      assertEquals(0L, file0.length());
      assertTrue(file0.isAbsolute());
      assertTrue(file0.canWrite());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertTrue(zipArchiveOutputStream0.isSeekable());
      assertEquals(0, zipArchiveEntry0.getVersionMadeBy());
      assertEquals(0L, zipArchiveEntry0.getSize());
      assertEquals((-1L), zipArchiveEntry0.getDataOffset());
      assertEquals(0, zipArchiveEntry0.getUnixMode());
      assertEquals(0, zipArchiveEntry0.getRawFlag());
      assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
      assertEquals(0, zipArchiveEntry0.getVersionRequired());
      assertEquals(8, zipArchiveEntry0.getMethod());
      assertEquals("", zipArchiveEntry0.getName());
      assertFalse(zipArchiveEntry0.isDirectory());
      assertFalse(zipArchiveEntry0.isUnixSymlink());
      assertEquals(0, zipArchiveEntry0.getInternalAttributes());
      assertEquals(0, zipArchiveEntry0.getPlatform());
      assertEquals(2L, zipArchiveEntry0.getCompressedSize());
      assertEquals(0L, zipArchiveEntry0.getCrc());
      assertFalse(zipArchiveEntry0.isStreamContiguous());
      assertEquals("", zipArchiveEntry0.toString());
      assertNull(zipArchiveEntry0.getComment());
      assertNotSame(zipArchiveOutputStream0, zipArchiveOutputStream1);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      
      zipArchiveOutputStream0.setMethod(0);
      assertFalse(zipArchiveOutputStream0.equals((Object)zipArchiveOutputStream1));
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(1392409281320L, file0.lastModified());
      assertTrue(file0.canExecute());
      assertTrue(file0.isFile());
      assertEquals("/tmp", file0.getParent());
      assertTrue(file0.canRead());
      assertTrue(file0.exists());
      assertEquals("/tmp/9SOzK.T>_.j9(0not encodeable", file0.toString());
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isHidden());
      assertEquals("9SOzK.T>_.j9(0not encodeable", file0.getName());
      assertFalse(file0.isDirectory());
      assertEquals(0L, file0.length());
      assertTrue(file0.isAbsolute());
      assertTrue(file0.canWrite());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertTrue(zipArchiveOutputStream0.isSeekable());
      assertNotSame(zipArchiveOutputStream0, zipArchiveOutputStream1);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      
      zipArchiveOutputStream0.writeCentralDirectoryEnd();
      assertFalse(zipArchiveOutputStream0.equals((Object)zipArchiveOutputStream1));
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(1392409281320L, file0.lastModified());
      assertTrue(file0.canExecute());
      assertTrue(file0.isFile());
      assertEquals("/tmp", file0.getParent());
      assertTrue(file0.canRead());
      assertTrue(file0.exists());
      assertEquals("/tmp/9SOzK.T>_.j9(0not encodeable", file0.toString());
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isHidden());
      assertEquals("9SOzK.T>_.j9(0not encodeable", file0.getName());
      assertFalse(file0.isDirectory());
      assertEquals(0L, file0.length());
      assertTrue(file0.isAbsolute());
      assertTrue(file0.canWrite());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertTrue(zipArchiveOutputStream0.isSeekable());
      assertNotSame(zipArchiveOutputStream0, zipArchiveOutputStream1);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedInputStream0);
      
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(pipedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pushbackInputStream0);
      
//      try { 
        zipArchiveOutputStream0.addRawArchiveEntry(zipArchiveEntry0, pipedInputStream0);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Pipe not connected
//         //
//         verifyException("java.io.PipedInputStream", e);
//      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      File file0 = MockFile.createTempFile("9SOzK.T>_.j9(", "9SOzK.T>_.j9(");
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.length());
      assertFalse(file0.isDirectory());
      assertTrue(file0.canWrite());
      assertEquals(0L, file0.getFreeSpace());
      assertTrue(file0.isAbsolute());
      assertEquals("/tmp", file0.getParent());
      assertEquals("9SOzK.T>_.j9(09SOzK.T>_.j9(", file0.getName());
      assertTrue(file0.canExecute());
      assertEquals(0L, file0.getTotalSpace());
      assertTrue(file0.exists());
      assertEquals(1392409281320L, file0.lastModified());
      assertTrue(file0.isFile());
      assertTrue(file0.canRead());
      assertEquals("/tmp/9SOzK.T>_.j9(09SOzK.T>_.j9(", file0.toString());
      assertNotNull(file0);
      
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(file0);
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.length());
      assertFalse(file0.isDirectory());
      assertTrue(file0.canWrite());
      assertEquals(0L, file0.getFreeSpace());
      assertTrue(file0.isAbsolute());
      assertEquals("/tmp", file0.getParent());
      assertEquals("9SOzK.T>_.j9(09SOzK.T>_.j9(", file0.getName());
      assertTrue(file0.canExecute());
      assertEquals(0L, file0.getTotalSpace());
      assertTrue(file0.exists());
      assertEquals(1392409281320L, file0.lastModified());
      assertTrue(file0.isFile());
      assertTrue(file0.canRead());
      assertEquals("/tmp/9SOzK.T>_.j9(09SOzK.T>_.j9(", file0.toString());
      assertTrue(zipArchiveOutputStream0.isSeekable());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertNotNull(zipArchiveOutputStream0);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      
      zipArchiveOutputStream0.writeCentralDirectoryEnd();
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.length());
      assertFalse(file0.isDirectory());
      assertTrue(file0.canWrite());
      assertEquals(0L, file0.getFreeSpace());
      assertTrue(file0.isAbsolute());
      assertEquals("/tmp", file0.getParent());
      assertEquals("9SOzK.T>_.j9(09SOzK.T>_.j9(", file0.getName());
      assertTrue(file0.canExecute());
      assertEquals(0L, file0.getTotalSpace());
      assertTrue(file0.exists());
      assertEquals(1392409281320L, file0.lastModified());
      assertTrue(file0.isFile());
      assertTrue(file0.canRead());
      assertEquals("/tmp/9SOzK.T>_.j9(09SOzK.T>_.j9(", file0.toString());
      assertTrue(zipArchiveOutputStream0.isSeekable());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      
      ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry("9SOzK.T>_.j9(");
      assertEquals((-1L), zipArchiveEntry0.getCrc());
      assertEquals(0, zipArchiveEntry0.getVersionRequired());
      assertFalse(zipArchiveEntry0.isUnixSymlink());
      assertEquals(0, zipArchiveEntry0.getUnixMode());
      assertEquals(0, zipArchiveEntry0.getRawFlag());
      assertEquals(0, zipArchiveEntry0.getVersionMadeBy());
      assertEquals(0, zipArchiveEntry0.getPlatform());
      assertNull(zipArchiveEntry0.getComment());
      assertEquals(0, zipArchiveEntry0.getInternalAttributes());
      assertEquals((-1), zipArchiveEntry0.getMethod());
      assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
      assertFalse(zipArchiveEntry0.isDirectory());
      assertEquals("9SOzK.T>_.j9(", zipArchiveEntry0.toString());
      assertEquals((-1L), zipArchiveEntry0.getDataOffset());
      assertEquals("9SOzK.T>_.j9(", zipArchiveEntry0.getName());
      assertEquals((-1L), zipArchiveEntry0.getCompressedSize());
      assertFalse(zipArchiveEntry0.isStreamContiguous());
      assertEquals((-1L), zipArchiveEntry0.getSize());
      assertNotNull(zipArchiveEntry0);
      assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      
      boolean boolean0 = zipArchiveEntry0.equals(zipArchiveOutputStream0);
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.length());
      assertFalse(file0.isDirectory());
      assertTrue(file0.canWrite());
      assertEquals(0L, file0.getFreeSpace());
      assertTrue(file0.isAbsolute());
      assertEquals("/tmp", file0.getParent());
      assertEquals("9SOzK.T>_.j9(09SOzK.T>_.j9(", file0.getName());
      assertTrue(file0.canExecute());
      assertEquals(0L, file0.getTotalSpace());
      assertTrue(file0.exists());
      assertEquals(1392409281320L, file0.lastModified());
      assertTrue(file0.isFile());
      assertTrue(file0.canRead());
      assertEquals("/tmp/9SOzK.T>_.j9(09SOzK.T>_.j9(", file0.toString());
      assertTrue(zipArchiveOutputStream0.isSeekable());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertEquals((-1L), zipArchiveEntry0.getCrc());
      assertEquals(0, zipArchiveEntry0.getVersionRequired());
      assertFalse(zipArchiveEntry0.isUnixSymlink());
      assertEquals(0, zipArchiveEntry0.getUnixMode());
      assertEquals(0, zipArchiveEntry0.getRawFlag());
      assertEquals(0, zipArchiveEntry0.getVersionMadeBy());
      assertEquals(0, zipArchiveEntry0.getPlatform());
      assertNull(zipArchiveEntry0.getComment());
      assertEquals(0, zipArchiveEntry0.getInternalAttributes());
      assertEquals((-1), zipArchiveEntry0.getMethod());
      assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
      assertFalse(zipArchiveEntry0.isDirectory());
      assertEquals("9SOzK.T>_.j9(", zipArchiveEntry0.toString());
      assertEquals((-1L), zipArchiveEntry0.getDataOffset());
      assertEquals("9SOzK.T>_.j9(", zipArchiveEntry0.getName());
      assertEquals((-1L), zipArchiveEntry0.getCompressedSize());
      assertFalse(zipArchiveEntry0.isStreamContiguous());
      assertEquals((-1L), zipArchiveEntry0.getSize());
      assertFalse(boolean0);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      
      zipArchiveOutputStream0.putArchiveEntry(zipArchiveEntry0);
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.length());
      assertFalse(file0.isDirectory());
      assertTrue(file0.canWrite());
      assertEquals(0L, file0.getFreeSpace());
      assertTrue(file0.isAbsolute());
      assertEquals("/tmp", file0.getParent());
      assertEquals("9SOzK.T>_.j9(09SOzK.T>_.j9(", file0.getName());
      assertTrue(file0.canExecute());
      assertEquals(0L, file0.getTotalSpace());
      assertTrue(file0.exists());
      assertEquals(1392409281320L, file0.lastModified());
      assertTrue(file0.isFile());
      assertTrue(file0.canRead());
      assertEquals("/tmp/9SOzK.T>_.j9(09SOzK.T>_.j9(", file0.toString());
      assertTrue(zipArchiveOutputStream0.isSeekable());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertEquals((-1L), zipArchiveEntry0.getCrc());
      assertEquals(0, zipArchiveEntry0.getVersionRequired());
      assertFalse(zipArchiveEntry0.isUnixSymlink());
      assertEquals(0, zipArchiveEntry0.getUnixMode());
      assertEquals(0, zipArchiveEntry0.getRawFlag());
      assertEquals(0, zipArchiveEntry0.getVersionMadeBy());
      assertEquals(0, zipArchiveEntry0.getPlatform());
      assertNull(zipArchiveEntry0.getComment());
      assertEquals(0, zipArchiveEntry0.getInternalAttributes());
      assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
      assertFalse(zipArchiveEntry0.isDirectory());
      assertEquals("9SOzK.T>_.j9(", zipArchiveEntry0.toString());
      assertEquals((-1L), zipArchiveEntry0.getDataOffset());
      assertEquals("9SOzK.T>_.j9(", zipArchiveEntry0.getName());
      assertEquals((-1L), zipArchiveEntry0.getCompressedSize());
      assertFalse(zipArchiveEntry0.isStreamContiguous());
      assertEquals((-1L), zipArchiveEntry0.getSize());
      assertEquals(8, zipArchiveEntry0.getMethod());
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      
      zipArchiveOutputStream0.setUseLanguageEncodingFlag(false);
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.length());
      assertFalse(file0.isDirectory());
      assertTrue(file0.canWrite());
      assertEquals(0L, file0.getFreeSpace());
      assertTrue(file0.isAbsolute());
      assertEquals("/tmp", file0.getParent());
      assertEquals("9SOzK.T>_.j9(09SOzK.T>_.j9(", file0.getName());
      assertTrue(file0.canExecute());
      assertEquals(0L, file0.getTotalSpace());
      assertTrue(file0.exists());
      assertEquals(1392409281320L, file0.lastModified());
      assertTrue(file0.isFile());
      assertTrue(file0.canRead());
      assertEquals("/tmp/9SOzK.T>_.j9(09SOzK.T>_.j9(", file0.toString());
      assertTrue(zipArchiveOutputStream0.isSeekable());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      
      boolean boolean1 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      ZipArchiveOutputStream zipArchiveOutputStream1 = new ZipArchiveOutputStream(zipArchiveOutputStream0);
      assertFalse(zipArchiveOutputStream1.equals((Object)zipArchiveOutputStream0));
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.length());
      assertFalse(file0.isDirectory());
      assertTrue(file0.canWrite());
      assertEquals(0L, file0.getFreeSpace());
      assertTrue(file0.isAbsolute());
      assertEquals("/tmp", file0.getParent());
      assertEquals("9SOzK.T>_.j9(09SOzK.T>_.j9(", file0.getName());
      assertTrue(file0.canExecute());
      assertEquals(0L, file0.getTotalSpace());
      assertTrue(file0.exists());
      assertEquals(1392409281320L, file0.lastModified());
      assertTrue(file0.isFile());
      assertTrue(file0.canRead());
      assertEquals("/tmp/9SOzK.T>_.j9(09SOzK.T>_.j9(", file0.toString());
      assertTrue(zipArchiveOutputStream0.isSeekable());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertFalse(zipArchiveOutputStream1.isSeekable());
      assertEquals(0L, zipArchiveOutputStream1.getBytesWritten());
      assertEquals("UTF8", zipArchiveOutputStream1.getEncoding());
      assertEquals(0, zipArchiveOutputStream1.getCount());
      assertNotNull(zipArchiveOutputStream1);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      
      zipArchiveOutputStream1.putArchiveEntry(zipArchiveEntry0);
      assertFalse(zipArchiveOutputStream0.equals((Object)zipArchiveOutputStream1));
      assertFalse(zipArchiveOutputStream1.equals((Object)zipArchiveOutputStream0));
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.length());
      assertFalse(file0.isDirectory());
      assertTrue(file0.canWrite());
      assertEquals(0L, file0.getFreeSpace());
      assertTrue(file0.isAbsolute());
      assertEquals("/tmp", file0.getParent());
      assertEquals("9SOzK.T>_.j9(09SOzK.T>_.j9(", file0.getName());
      assertTrue(file0.canExecute());
      assertEquals(0L, file0.getTotalSpace());
      assertTrue(file0.exists());
      assertEquals(1392409281320L, file0.lastModified());
      assertTrue(file0.isFile());
      assertTrue(file0.canRead());
      assertEquals("/tmp/9SOzK.T>_.j9(09SOzK.T>_.j9(", file0.toString());
      assertTrue(zipArchiveOutputStream0.isSeekable());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertEquals((-1L), zipArchiveEntry0.getCrc());
      assertEquals(0, zipArchiveEntry0.getVersionRequired());
      assertFalse(zipArchiveEntry0.isUnixSymlink());
      assertEquals(0, zipArchiveEntry0.getUnixMode());
      assertEquals(0, zipArchiveEntry0.getRawFlag());
      assertEquals(0, zipArchiveEntry0.getVersionMadeBy());
      assertEquals(0, zipArchiveEntry0.getPlatform());
      assertNull(zipArchiveEntry0.getComment());
      assertEquals(0, zipArchiveEntry0.getInternalAttributes());
      assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
      assertFalse(zipArchiveEntry0.isDirectory());
      assertEquals("9SOzK.T>_.j9(", zipArchiveEntry0.toString());
      assertEquals((-1L), zipArchiveEntry0.getDataOffset());
      assertEquals("9SOzK.T>_.j9(", zipArchiveEntry0.getName());
      assertEquals((-1L), zipArchiveEntry0.getCompressedSize());
      assertFalse(zipArchiveEntry0.isStreamContiguous());
      assertEquals((-1L), zipArchiveEntry0.getSize());
      assertEquals(8, zipArchiveEntry0.getMethod());
      assertFalse(zipArchiveOutputStream1.isSeekable());
      assertEquals(0L, zipArchiveOutputStream1.getBytesWritten());
      assertEquals("UTF8", zipArchiveOutputStream1.getEncoding());
      assertEquals(0, zipArchiveOutputStream1.getCount());
      assertNotSame(zipArchiveOutputStream0, zipArchiveOutputStream1);
      assertNotSame(zipArchiveOutputStream1, zipArchiveOutputStream0);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      
      zipArchiveOutputStream0.setMethod(3);
      assertFalse(zipArchiveOutputStream0.equals((Object)zipArchiveOutputStream1));
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.length());
      assertFalse(file0.isDirectory());
      assertTrue(file0.canWrite());
      assertEquals(0L, file0.getFreeSpace());
      assertTrue(file0.isAbsolute());
      assertEquals("/tmp", file0.getParent());
      assertEquals("9SOzK.T>_.j9(09SOzK.T>_.j9(", file0.getName());
      assertTrue(file0.canExecute());
      assertEquals(0L, file0.getTotalSpace());
      assertTrue(file0.exists());
      assertEquals(1392409281320L, file0.lastModified());
      assertTrue(file0.isFile());
      assertTrue(file0.canRead());
      assertEquals("/tmp/9SOzK.T>_.j9(09SOzK.T>_.j9(", file0.toString());
      assertTrue(zipArchiveOutputStream0.isSeekable());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertNotSame(zipArchiveOutputStream0, zipArchiveOutputStream1);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      
      zipArchiveOutputStream1.writeCentralFileHeader(zipArchiveEntry0);
      assertFalse(zipArchiveOutputStream0.equals((Object)zipArchiveOutputStream1));
      assertFalse(zipArchiveOutputStream1.equals((Object)zipArchiveOutputStream0));
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.length());
      assertFalse(file0.isDirectory());
      assertTrue(file0.canWrite());
      assertEquals(0L, file0.getFreeSpace());
      assertTrue(file0.isAbsolute());
      assertEquals("/tmp", file0.getParent());
      assertEquals("9SOzK.T>_.j9(09SOzK.T>_.j9(", file0.getName());
      assertTrue(file0.canExecute());
      assertEquals(0L, file0.getTotalSpace());
      assertTrue(file0.exists());
      assertEquals(1392409281320L, file0.lastModified());
      assertTrue(file0.isFile());
      assertTrue(file0.canRead());
      assertEquals("/tmp/9SOzK.T>_.j9(09SOzK.T>_.j9(", file0.toString());
      assertTrue(zipArchiveOutputStream0.isSeekable());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertEquals((-1L), zipArchiveEntry0.getCrc());
      assertEquals(0, zipArchiveEntry0.getVersionRequired());
      assertFalse(zipArchiveEntry0.isUnixSymlink());
      assertEquals(0, zipArchiveEntry0.getUnixMode());
      assertEquals(0, zipArchiveEntry0.getRawFlag());
      assertEquals(0, zipArchiveEntry0.getVersionMadeBy());
      assertEquals(0, zipArchiveEntry0.getPlatform());
      assertNull(zipArchiveEntry0.getComment());
      assertEquals(0, zipArchiveEntry0.getInternalAttributes());
      assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
      assertFalse(zipArchiveEntry0.isDirectory());
      assertEquals("9SOzK.T>_.j9(", zipArchiveEntry0.toString());
      assertEquals((-1L), zipArchiveEntry0.getDataOffset());
      assertEquals("9SOzK.T>_.j9(", zipArchiveEntry0.getName());
      assertEquals((-1L), zipArchiveEntry0.getCompressedSize());
      assertFalse(zipArchiveEntry0.isStreamContiguous());
      assertEquals((-1L), zipArchiveEntry0.getSize());
      assertEquals(8, zipArchiveEntry0.getMethod());
      assertFalse(zipArchiveOutputStream1.isSeekable());
      assertEquals(0L, zipArchiveOutputStream1.getBytesWritten());
      assertEquals("UTF8", zipArchiveOutputStream1.getEncoding());
      assertEquals(0, zipArchiveOutputStream1.getCount());
      assertNotSame(zipArchiveOutputStream0, zipArchiveOutputStream1);
      assertNotSame(zipArchiveOutputStream1, zipArchiveOutputStream0);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      
      zipArchiveOutputStream1.setUseLanguageEncodingFlag(false);
      assertFalse(zipArchiveOutputStream0.equals((Object)zipArchiveOutputStream1));
      assertFalse(zipArchiveOutputStream1.equals((Object)zipArchiveOutputStream0));
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.length());
      assertFalse(file0.isDirectory());
      assertTrue(file0.canWrite());
      assertEquals(0L, file0.getFreeSpace());
      assertTrue(file0.isAbsolute());
      assertEquals("/tmp", file0.getParent());
      assertEquals("9SOzK.T>_.j9(09SOzK.T>_.j9(", file0.getName());
      assertTrue(file0.canExecute());
      assertEquals(0L, file0.getTotalSpace());
      assertTrue(file0.exists());
      assertEquals(1392409281320L, file0.lastModified());
      assertTrue(file0.isFile());
      assertTrue(file0.canRead());
      assertEquals("/tmp/9SOzK.T>_.j9(09SOzK.T>_.j9(", file0.toString());
      assertTrue(zipArchiveOutputStream0.isSeekable());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertFalse(zipArchiveOutputStream1.isSeekable());
      assertEquals(0L, zipArchiveOutputStream1.getBytesWritten());
      assertEquals("UTF8", zipArchiveOutputStream1.getEncoding());
      assertEquals(0, zipArchiveOutputStream1.getCount());
      assertNotSame(zipArchiveOutputStream0, zipArchiveOutputStream1);
      assertNotSame(zipArchiveOutputStream1, zipArchiveOutputStream0);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      
      zipArchiveOutputStream1.putArchiveEntry(zipArchiveEntry0);
      assertFalse(zipArchiveOutputStream0.equals((Object)zipArchiveOutputStream1));
      assertFalse(zipArchiveOutputStream1.equals((Object)zipArchiveOutputStream0));
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.length());
      assertFalse(file0.isDirectory());
      assertTrue(file0.canWrite());
      assertEquals(0L, file0.getFreeSpace());
      assertTrue(file0.isAbsolute());
      assertEquals("/tmp", file0.getParent());
      assertEquals("9SOzK.T>_.j9(09SOzK.T>_.j9(", file0.getName());
      assertTrue(file0.canExecute());
      assertEquals(0L, file0.getTotalSpace());
      assertTrue(file0.exists());
      assertEquals(1392409281320L, file0.lastModified());
      assertTrue(file0.isFile());
      assertTrue(file0.canRead());
      assertEquals("/tmp/9SOzK.T>_.j9(09SOzK.T>_.j9(", file0.toString());
      assertTrue(zipArchiveOutputStream0.isSeekable());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertEquals(0L, zipArchiveEntry0.getCrc());
      assertEquals(0, zipArchiveEntry0.getVersionRequired());
      assertFalse(zipArchiveEntry0.isUnixSymlink());
      assertEquals(0, zipArchiveEntry0.getUnixMode());
      assertEquals(0, zipArchiveEntry0.getRawFlag());
      assertEquals(0, zipArchiveEntry0.getVersionMadeBy());
      assertEquals(0, zipArchiveEntry0.getPlatform());
      assertNull(zipArchiveEntry0.getComment());
      assertEquals(0, zipArchiveEntry0.getInternalAttributes());
      assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
      assertFalse(zipArchiveEntry0.isDirectory());
      assertEquals("9SOzK.T>_.j9(", zipArchiveEntry0.toString());
      assertEquals((-1L), zipArchiveEntry0.getDataOffset());
      assertEquals("9SOzK.T>_.j9(", zipArchiveEntry0.getName());
      assertFalse(zipArchiveEntry0.isStreamContiguous());
      assertEquals(65L, zipArchiveEntry0.getCompressedSize());
      assertEquals(0L, zipArchiveEntry0.getSize());
      assertEquals(8, zipArchiveEntry0.getMethod());
      assertFalse(zipArchiveOutputStream1.isSeekable());
      assertEquals(0L, zipArchiveOutputStream1.getBytesWritten());
      assertEquals("UTF8", zipArchiveOutputStream1.getEncoding());
      assertEquals(0, zipArchiveOutputStream1.getCount());
      assertNotSame(zipArchiveOutputStream0, zipArchiveOutputStream1);
      assertNotSame(zipArchiveOutputStream1, zipArchiveOutputStream0);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      
      // Undeclared exception!
//      try { 
        zipArchiveOutputStream0.addRawArchiveEntry(zipArchiveEntry0, (InputStream) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream", e);
//      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      File file0 = MockFile.createTempFile("9SOzK.T>_.j9(", "not encodeable");
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isHidden());
      assertTrue(file0.canWrite());
      assertTrue(file0.isFile());
      assertTrue(file0.canRead());
      assertEquals("/tmp/9SOzK.T>_.j9(0not encodeable", file0.toString());
      assertEquals("9SOzK.T>_.j9(0not encodeable", file0.getName());
      assertEquals("/tmp", file0.getParent());
      assertTrue(file0.exists());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(1392409281320L, file0.lastModified());
      assertTrue(file0.isAbsolute());
      assertTrue(file0.canExecute());
      assertFalse(file0.isDirectory());
      assertEquals(0L, file0.length());
      assertNotNull(file0);
      
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(file0);
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isHidden());
      assertTrue(file0.canWrite());
      assertTrue(file0.isFile());
      assertTrue(file0.canRead());
      assertEquals("/tmp/9SOzK.T>_.j9(0not encodeable", file0.toString());
      assertEquals("9SOzK.T>_.j9(0not encodeable", file0.getName());
      assertEquals("/tmp", file0.getParent());
      assertTrue(file0.exists());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(1392409281320L, file0.lastModified());
      assertTrue(file0.isAbsolute());
      assertTrue(file0.canExecute());
      assertFalse(file0.isDirectory());
      assertEquals(0L, file0.length());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertTrue(zipArchiveOutputStream0.isSeekable());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertNotNull(zipArchiveOutputStream0);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      
      zipArchiveOutputStream0.writeCentralDirectoryEnd();
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isHidden());
      assertTrue(file0.canWrite());
      assertTrue(file0.isFile());
      assertTrue(file0.canRead());
      assertEquals("/tmp/9SOzK.T>_.j9(0not encodeable", file0.toString());
      assertEquals("9SOzK.T>_.j9(0not encodeable", file0.getName());
      assertEquals("/tmp", file0.getParent());
      assertTrue(file0.exists());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(1392409281320L, file0.lastModified());
      assertTrue(file0.isAbsolute());
      assertTrue(file0.canExecute());
      assertFalse(file0.isDirectory());
      assertEquals(0L, file0.length());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertTrue(zipArchiveOutputStream0.isSeekable());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      
      ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
      assertFalse(zipArchiveEntry0.isDirectory());
      assertFalse(zipArchiveEntry0.isUnixSymlink());
      assertEquals("", zipArchiveEntry0.toString());
      assertFalse(zipArchiveEntry0.isStreamContiguous());
      assertEquals(0, zipArchiveEntry0.getVersionRequired());
      assertNull(zipArchiveEntry0.getComment());
      assertEquals(0, zipArchiveEntry0.getPlatform());
      assertEquals(0, zipArchiveEntry0.getUnixMode());
      assertEquals(0, zipArchiveEntry0.getInternalAttributes());
      assertEquals((-1L), zipArchiveEntry0.getDataOffset());
      assertEquals(0, zipArchiveEntry0.getVersionMadeBy());
      assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
      assertEquals((-1L), zipArchiveEntry0.getSize());
      assertEquals(0, zipArchiveEntry0.getRawFlag());
      assertEquals((-1L), zipArchiveEntry0.getCrc());
      assertEquals((-1), zipArchiveEntry0.getMethod());
      assertEquals((-1L), zipArchiveEntry0.getCompressedSize());
      assertEquals("", zipArchiveEntry0.getName());
      assertNotNull(zipArchiveEntry0);
      assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      
      Zip64Mode zip64Mode0 = Zip64Mode.Always;
      zipArchiveOutputStream0.setUseZip64(zip64Mode0);
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isHidden());
      assertTrue(file0.canWrite());
      assertTrue(file0.isFile());
      assertTrue(file0.canRead());
      assertEquals("/tmp/9SOzK.T>_.j9(0not encodeable", file0.toString());
      assertEquals("9SOzK.T>_.j9(0not encodeable", file0.getName());
      assertEquals("/tmp", file0.getParent());
      assertTrue(file0.exists());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(1392409281320L, file0.lastModified());
      assertTrue(file0.isAbsolute());
      assertTrue(file0.canExecute());
      assertFalse(file0.isDirectory());
      assertEquals(0L, file0.length());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertTrue(zipArchiveOutputStream0.isSeekable());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      
      boolean boolean0 = zipArchiveOutputStream0.isSeekable();
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isHidden());
      assertTrue(file0.canWrite());
      assertTrue(file0.isFile());
      assertTrue(file0.canRead());
      assertEquals("/tmp/9SOzK.T>_.j9(0not encodeable", file0.toString());
      assertEquals("9SOzK.T>_.j9(0not encodeable", file0.getName());
      assertEquals("/tmp", file0.getParent());
      assertTrue(file0.exists());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(1392409281320L, file0.lastModified());
      assertTrue(file0.isAbsolute());
      assertTrue(file0.canExecute());
      assertFalse(file0.isDirectory());
      assertEquals(0L, file0.length());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertTrue(zipArchiveOutputStream0.isSeekable());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertTrue(boolean0);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      
      zipArchiveOutputStream0.putArchiveEntry(zipArchiveEntry0);
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isHidden());
      assertTrue(file0.canWrite());
      assertTrue(file0.isFile());
      assertTrue(file0.canRead());
      assertEquals("/tmp/9SOzK.T>_.j9(0not encodeable", file0.toString());
      assertEquals("9SOzK.T>_.j9(0not encodeable", file0.getName());
      assertEquals("/tmp", file0.getParent());
      assertTrue(file0.exists());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(1392409281320L, file0.lastModified());
      assertTrue(file0.isAbsolute());
      assertTrue(file0.canExecute());
      assertFalse(file0.isDirectory());
      assertEquals(0L, file0.length());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertTrue(zipArchiveOutputStream0.isSeekable());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertFalse(zipArchiveEntry0.isDirectory());
      assertFalse(zipArchiveEntry0.isUnixSymlink());
      assertEquals("", zipArchiveEntry0.toString());
      assertEquals(8, zipArchiveEntry0.getMethod());
      assertFalse(zipArchiveEntry0.isStreamContiguous());
      assertEquals(0, zipArchiveEntry0.getVersionRequired());
      assertNull(zipArchiveEntry0.getComment());
      assertEquals(0, zipArchiveEntry0.getPlatform());
      assertEquals(0, zipArchiveEntry0.getUnixMode());
      assertEquals(0, zipArchiveEntry0.getInternalAttributes());
      assertEquals((-1L), zipArchiveEntry0.getDataOffset());
      assertEquals(0, zipArchiveEntry0.getVersionMadeBy());
      assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
      assertEquals((-1L), zipArchiveEntry0.getSize());
      assertEquals(0, zipArchiveEntry0.getRawFlag());
      assertEquals((-1L), zipArchiveEntry0.getCrc());
      assertEquals((-1L), zipArchiveEntry0.getCompressedSize());
      assertEquals("", zipArchiveEntry0.getName());
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      
      zipArchiveOutputStream0.setMethod(2131922172);
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isHidden());
      assertTrue(file0.canWrite());
      assertTrue(file0.isFile());
      assertTrue(file0.canRead());
      assertEquals("/tmp/9SOzK.T>_.j9(0not encodeable", file0.toString());
      assertEquals("9SOzK.T>_.j9(0not encodeable", file0.getName());
      assertEquals("/tmp", file0.getParent());
      assertTrue(file0.exists());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(1392409281320L, file0.lastModified());
      assertTrue(file0.isAbsolute());
      assertTrue(file0.canExecute());
      assertFalse(file0.isDirectory());
      assertEquals(0L, file0.length());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertTrue(zipArchiveOutputStream0.isSeekable());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      
      zipArchiveOutputStream0.writeCentralFileHeader(zipArchiveEntry0);
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isHidden());
      assertTrue(file0.canWrite());
      assertTrue(file0.isFile());
      assertTrue(file0.canRead());
      assertEquals("/tmp/9SOzK.T>_.j9(0not encodeable", file0.toString());
      assertEquals("9SOzK.T>_.j9(0not encodeable", file0.getName());
      assertEquals("/tmp", file0.getParent());
      assertTrue(file0.exists());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(1392409281320L, file0.lastModified());
      assertTrue(file0.isAbsolute());
      assertTrue(file0.canExecute());
      assertFalse(file0.isDirectory());
      assertEquals(0L, file0.length());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertTrue(zipArchiveOutputStream0.isSeekable());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertFalse(zipArchiveEntry0.isDirectory());
      assertFalse(zipArchiveEntry0.isUnixSymlink());
      assertEquals("", zipArchiveEntry0.toString());
      assertEquals(8, zipArchiveEntry0.getMethod());
      assertFalse(zipArchiveEntry0.isStreamContiguous());
      assertEquals(0, zipArchiveEntry0.getVersionRequired());
      assertNull(zipArchiveEntry0.getComment());
      assertEquals(0, zipArchiveEntry0.getPlatform());
      assertEquals(0, zipArchiveEntry0.getUnixMode());
      assertEquals(0, zipArchiveEntry0.getInternalAttributes());
      assertEquals((-1L), zipArchiveEntry0.getDataOffset());
      assertEquals(0, zipArchiveEntry0.getVersionMadeBy());
      assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
      assertEquals((-1L), zipArchiveEntry0.getSize());
      assertEquals(0, zipArchiveEntry0.getRawFlag());
      assertEquals((-1L), zipArchiveEntry0.getCrc());
      assertEquals((-1L), zipArchiveEntry0.getCompressedSize());
      assertEquals("", zipArchiveEntry0.getName());
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      
      zipArchiveOutputStream0.setUseLanguageEncodingFlag(false);
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isHidden());
      assertTrue(file0.canWrite());
      assertTrue(file0.isFile());
      assertTrue(file0.canRead());
      assertEquals("/tmp/9SOzK.T>_.j9(0not encodeable", file0.toString());
      assertEquals("9SOzK.T>_.j9(0not encodeable", file0.getName());
      assertEquals("/tmp", file0.getParent());
      assertTrue(file0.exists());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(1392409281320L, file0.lastModified());
      assertTrue(file0.isAbsolute());
      assertTrue(file0.canExecute());
      assertFalse(file0.isDirectory());
      assertEquals(0L, file0.length());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertTrue(zipArchiveOutputStream0.isSeekable());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      
      ZipArchiveOutputStream.UnicodeExtraFieldPolicy zipArchiveOutputStream_UnicodeExtraFieldPolicy0 = ZipArchiveOutputStream.UnicodeExtraFieldPolicy.NEVER;
      assertEquals("never", zipArchiveOutputStream_UnicodeExtraFieldPolicy0.toString());
      assertNotNull(zipArchiveOutputStream_UnicodeExtraFieldPolicy0);
      
      ZipArchiveEntry zipArchiveEntry1 = new ZipArchiveEntry();
      assertFalse(zipArchiveEntry1.equals((Object)zipArchiveEntry0));
      assertEquals(0, zipArchiveEntry1.getVersionRequired());
      assertEquals((-1L), zipArchiveEntry1.getCompressedSize());
      assertEquals((-1L), zipArchiveEntry1.getDataOffset());
      assertEquals("", zipArchiveEntry1.getName());
      assertEquals("", zipArchiveEntry1.toString());
      assertFalse(zipArchiveEntry1.isStreamContiguous());
      assertEquals((-1L), zipArchiveEntry1.getCrc());
      assertFalse(zipArchiveEntry1.isDirectory());
      assertEquals((-1L), zipArchiveEntry1.getSize());
      assertNull(zipArchiveEntry1.getComment());
      assertEquals((-1), zipArchiveEntry1.getMethod());
      assertEquals(0, zipArchiveEntry1.getInternalAttributes());
      assertEquals(0L, zipArchiveEntry1.getExternalAttributes());
      assertFalse(zipArchiveEntry1.isUnixSymlink());
      assertEquals(0, zipArchiveEntry1.getVersionMadeBy());
      assertEquals(0, zipArchiveEntry1.getRawFlag());
      assertEquals(0, zipArchiveEntry1.getUnixMode());
      assertEquals(0, zipArchiveEntry1.getPlatform());
      assertNotNull(zipArchiveEntry1);
      assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      
      zipArchiveOutputStream0.writeCentralDirectoryEnd();
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isHidden());
      assertTrue(file0.canWrite());
      assertTrue(file0.isFile());
      assertTrue(file0.canRead());
      assertEquals("/tmp/9SOzK.T>_.j9(0not encodeable", file0.toString());
      assertEquals("9SOzK.T>_.j9(0not encodeable", file0.getName());
      assertEquals("/tmp", file0.getParent());
      assertTrue(file0.exists());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(1392409281320L, file0.lastModified());
      assertTrue(file0.isAbsolute());
      assertTrue(file0.canExecute());
      assertFalse(file0.isDirectory());
      assertEquals(0L, file0.length());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertTrue(zipArchiveOutputStream0.isSeekable());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedInputStream0);
      
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(pipedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pushbackInputStream0);
      
//      try { 
        zipArchiveOutputStream0.addRawArchiveEntry(zipArchiveEntry0, pipedInputStream0);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Pipe not connected
//         //
//         verifyException("java.io.PipedInputStream", e);
//      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      File file0 = MockFile.createTempFile("9SOzK.T>_.j9(", "9SOzK.T>_.j9(");
      assertTrue(file0.isAbsolute());
      assertTrue(file0.canWrite());
      assertEquals("/tmp/9SOzK.T>_.j9(09SOzK.T>_.j9(", file0.toString());
      assertTrue(file0.canRead());
      assertTrue(file0.isFile());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(0L, file0.length());
      assertTrue(file0.canExecute());
      assertEquals(0L, file0.getFreeSpace());
      assertTrue(file0.exists());
      assertFalse(file0.isDirectory());
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isHidden());
      assertEquals("9SOzK.T>_.j9(09SOzK.T>_.j9(", file0.getName());
      assertEquals("/tmp", file0.getParent());
      assertNotNull(file0);
      
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(file0);
      assertTrue(file0.isAbsolute());
      assertTrue(file0.canWrite());
      assertEquals("/tmp/9SOzK.T>_.j9(09SOzK.T>_.j9(", file0.toString());
      assertTrue(file0.canRead());
      assertTrue(file0.isFile());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(0L, file0.length());
      assertTrue(file0.canExecute());
      assertEquals(0L, file0.getFreeSpace());
      assertTrue(file0.exists());
      assertFalse(file0.isDirectory());
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isHidden());
      assertEquals("9SOzK.T>_.j9(09SOzK.T>_.j9(", file0.getName());
      assertEquals("/tmp", file0.getParent());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertTrue(zipArchiveOutputStream0.isSeekable());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertNotNull(zipArchiveOutputStream0);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      
      zipArchiveOutputStream0.writeCentralDirectoryEnd();
      assertTrue(file0.isAbsolute());
      assertTrue(file0.canWrite());
      assertEquals("/tmp/9SOzK.T>_.j9(09SOzK.T>_.j9(", file0.toString());
      assertTrue(file0.canRead());
      assertTrue(file0.isFile());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(0L, file0.length());
      assertTrue(file0.canExecute());
      assertEquals(0L, file0.getFreeSpace());
      assertTrue(file0.exists());
      assertFalse(file0.isDirectory());
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isHidden());
      assertEquals("9SOzK.T>_.j9(09SOzK.T>_.j9(", file0.getName());
      assertEquals("/tmp", file0.getParent());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertTrue(zipArchiveOutputStream0.isSeekable());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      
      ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry("9SOzK.T>_.j9(");
      assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
      assertEquals("9SOzK.T>_.j9(", zipArchiveEntry0.toString());
      assertEquals((-1L), zipArchiveEntry0.getDataOffset());
      assertEquals((-1L), zipArchiveEntry0.getSize());
      assertEquals((-1), zipArchiveEntry0.getMethod());
      assertNull(zipArchiveEntry0.getComment());
      assertEquals((-1L), zipArchiveEntry0.getCrc());
      assertEquals((-1L), zipArchiveEntry0.getCompressedSize());
      assertEquals("9SOzK.T>_.j9(", zipArchiveEntry0.getName());
      assertFalse(zipArchiveEntry0.isUnixSymlink());
      assertFalse(zipArchiveEntry0.isDirectory());
      assertFalse(zipArchiveEntry0.isStreamContiguous());
      assertEquals(0, zipArchiveEntry0.getVersionRequired());
      assertEquals(0, zipArchiveEntry0.getRawFlag());
      assertEquals(0, zipArchiveEntry0.getInternalAttributes());
      assertEquals(0, zipArchiveEntry0.getPlatform());
      assertEquals(0, zipArchiveEntry0.getUnixMode());
      assertEquals(0, zipArchiveEntry0.getVersionMadeBy());
      assertNotNull(zipArchiveEntry0);
      assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      
      zipArchiveOutputStream0.setUseLanguageEncodingFlag(false);
      assertTrue(file0.isAbsolute());
      assertTrue(file0.canWrite());
      assertEquals("/tmp/9SOzK.T>_.j9(09SOzK.T>_.j9(", file0.toString());
      assertTrue(file0.canRead());
      assertTrue(file0.isFile());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(0L, file0.length());
      assertTrue(file0.canExecute());
      assertEquals(0L, file0.getFreeSpace());
      assertTrue(file0.exists());
      assertFalse(file0.isDirectory());
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isHidden());
      assertEquals("9SOzK.T>_.j9(09SOzK.T>_.j9(", file0.getName());
      assertEquals("/tmp", file0.getParent());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertTrue(zipArchiveOutputStream0.isSeekable());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      
      ZipArchiveEntry zipArchiveEntry1 = new ZipArchiveEntry("tar\u0000");
      assertFalse(zipArchiveEntry1.equals((Object)zipArchiveEntry0));
      assertNull(zipArchiveEntry1.getComment());
      assertEquals((-1), zipArchiveEntry1.getMethod());
      assertEquals(0, zipArchiveEntry1.getInternalAttributes());
      assertEquals("tar\u0000", zipArchiveEntry1.toString());
      assertEquals(0, zipArchiveEntry1.getUnixMode());
      assertEquals(0, zipArchiveEntry1.getVersionMadeBy());
      assertEquals(0L, zipArchiveEntry1.getExternalAttributes());
      assertEquals(0, zipArchiveEntry1.getRawFlag());
      assertEquals(0, zipArchiveEntry1.getPlatform());
      assertEquals(0, zipArchiveEntry1.getVersionRequired());
      assertEquals((-1L), zipArchiveEntry1.getCompressedSize());
      assertEquals((-1L), zipArchiveEntry1.getSize());
      assertFalse(zipArchiveEntry1.isDirectory());
      assertFalse(zipArchiveEntry1.isUnixSymlink());
      assertEquals((-1L), zipArchiveEntry1.getDataOffset());
      assertEquals("tar\u0000", zipArchiveEntry1.getName());
      assertEquals((-1L), zipArchiveEntry1.getCrc());
      assertFalse(zipArchiveEntry1.isStreamContiguous());
      assertNotNull(zipArchiveEntry1);
      assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      
      zipArchiveEntry0.setTime((-276L));
      assertFalse(zipArchiveEntry0.equals((Object)zipArchiveEntry1));
      assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
      assertEquals("9SOzK.T>_.j9(", zipArchiveEntry0.toString());
      assertEquals((-1L), zipArchiveEntry0.getDataOffset());
      assertEquals((-1L), zipArchiveEntry0.getSize());
      assertEquals((-1), zipArchiveEntry0.getMethod());
      assertNull(zipArchiveEntry0.getComment());
      assertEquals((-1L), zipArchiveEntry0.getCrc());
      assertEquals((-1L), zipArchiveEntry0.getCompressedSize());
      assertEquals("9SOzK.T>_.j9(", zipArchiveEntry0.getName());
      assertFalse(zipArchiveEntry0.isUnixSymlink());
      assertFalse(zipArchiveEntry0.isDirectory());
      assertFalse(zipArchiveEntry0.isStreamContiguous());
      assertEquals(0, zipArchiveEntry0.getVersionRequired());
      assertEquals(0, zipArchiveEntry0.getRawFlag());
      assertEquals(0, zipArchiveEntry0.getInternalAttributes());
      assertEquals(0, zipArchiveEntry0.getPlatform());
      assertEquals(0, zipArchiveEntry0.getUnixMode());
      assertEquals(0, zipArchiveEntry0.getVersionMadeBy());
      assertNotSame(zipArchiveEntry0, zipArchiveEntry1);
      assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      
      zipArchiveOutputStream0.writeDataDescriptor(zipArchiveEntry1);
      assertFalse(zipArchiveEntry1.equals((Object)zipArchiveEntry0));
      assertTrue(file0.isAbsolute());
      assertTrue(file0.canWrite());
      assertEquals("/tmp/9SOzK.T>_.j9(09SOzK.T>_.j9(", file0.toString());
      assertTrue(file0.canRead());
      assertTrue(file0.isFile());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(0L, file0.length());
      assertTrue(file0.canExecute());
      assertEquals(0L, file0.getFreeSpace());
      assertTrue(file0.exists());
      assertFalse(file0.isDirectory());
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isHidden());
      assertEquals("9SOzK.T>_.j9(09SOzK.T>_.j9(", file0.getName());
      assertEquals("/tmp", file0.getParent());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertTrue(zipArchiveOutputStream0.isSeekable());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertNull(zipArchiveEntry1.getComment());
      assertEquals((-1), zipArchiveEntry1.getMethod());
      assertEquals(0, zipArchiveEntry1.getInternalAttributes());
      assertEquals("tar\u0000", zipArchiveEntry1.toString());
      assertEquals(0, zipArchiveEntry1.getUnixMode());
      assertEquals(0, zipArchiveEntry1.getVersionMadeBy());
      assertEquals(0L, zipArchiveEntry1.getExternalAttributes());
      assertEquals(0, zipArchiveEntry1.getRawFlag());
      assertEquals(0, zipArchiveEntry1.getPlatform());
      assertEquals(0, zipArchiveEntry1.getVersionRequired());
      assertEquals((-1L), zipArchiveEntry1.getCompressedSize());
      assertEquals((-1L), zipArchiveEntry1.getSize());
      assertFalse(zipArchiveEntry1.isDirectory());
      assertFalse(zipArchiveEntry1.isUnixSymlink());
      assertEquals((-1L), zipArchiveEntry1.getDataOffset());
      assertEquals("tar\u0000", zipArchiveEntry1.getName());
      assertEquals((-1L), zipArchiveEntry1.getCrc());
      assertFalse(zipArchiveEntry1.isStreamContiguous());
      assertNotSame(zipArchiveEntry1, zipArchiveEntry0);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      
      zipArchiveOutputStream0.putArchiveEntry(zipArchiveEntry0);
      assertFalse(zipArchiveEntry0.equals((Object)zipArchiveEntry1));
      assertTrue(file0.isAbsolute());
      assertTrue(file0.canWrite());
      assertEquals("/tmp/9SOzK.T>_.j9(09SOzK.T>_.j9(", file0.toString());
      assertTrue(file0.canRead());
      assertTrue(file0.isFile());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(0L, file0.length());
      assertTrue(file0.canExecute());
      assertEquals(0L, file0.getFreeSpace());
      assertTrue(file0.exists());
      assertFalse(file0.isDirectory());
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isHidden());
      assertEquals("9SOzK.T>_.j9(09SOzK.T>_.j9(", file0.getName());
      assertEquals("/tmp", file0.getParent());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertTrue(zipArchiveOutputStream0.isSeekable());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
      assertEquals("9SOzK.T>_.j9(", zipArchiveEntry0.toString());
      assertEquals((-1L), zipArchiveEntry0.getDataOffset());
      assertEquals((-1L), zipArchiveEntry0.getSize());
      assertNull(zipArchiveEntry0.getComment());
      assertEquals((-1L), zipArchiveEntry0.getCrc());
      assertEquals((-1L), zipArchiveEntry0.getCompressedSize());
      assertEquals("9SOzK.T>_.j9(", zipArchiveEntry0.getName());
      assertEquals(8, zipArchiveEntry0.getMethod());
      assertFalse(zipArchiveEntry0.isUnixSymlink());
      assertFalse(zipArchiveEntry0.isDirectory());
      assertFalse(zipArchiveEntry0.isStreamContiguous());
      assertEquals(0, zipArchiveEntry0.getVersionRequired());
      assertEquals(0, zipArchiveEntry0.getRawFlag());
      assertEquals(0, zipArchiveEntry0.getInternalAttributes());
      assertEquals(0, zipArchiveEntry0.getPlatform());
      assertEquals(0, zipArchiveEntry0.getUnixMode());
      assertEquals(0, zipArchiveEntry0.getVersionMadeBy());
      assertNotSame(zipArchiveEntry0, zipArchiveEntry1);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      
      zipArchiveOutputStream0.setMethod(518);
      assertTrue(file0.isAbsolute());
      assertTrue(file0.canWrite());
      assertEquals("/tmp/9SOzK.T>_.j9(09SOzK.T>_.j9(", file0.toString());
      assertTrue(file0.canRead());
      assertTrue(file0.isFile());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(0L, file0.length());
      assertTrue(file0.canExecute());
      assertEquals(0L, file0.getFreeSpace());
      assertTrue(file0.exists());
      assertFalse(file0.isDirectory());
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isHidden());
      assertEquals("9SOzK.T>_.j9(09SOzK.T>_.j9(", file0.getName());
      assertEquals("/tmp", file0.getParent());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertTrue(zipArchiveOutputStream0.isSeekable());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      
      ZipArchiveEntry zipArchiveEntry2 = (ZipArchiveEntry)zipArchiveOutputStream0.createArchiveEntry(file0, "Invalid compression level: ");
      assertFalse(zipArchiveEntry2.equals((Object)zipArchiveEntry0));
      assertFalse(zipArchiveEntry2.equals((Object)zipArchiveEntry1));
      assertTrue(file0.isAbsolute());
      assertTrue(file0.canWrite());
      assertEquals("/tmp/9SOzK.T>_.j9(09SOzK.T>_.j9(", file0.toString());
      assertTrue(file0.canRead());
      assertTrue(file0.isFile());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(0L, file0.length());
      assertTrue(file0.canExecute());
      assertEquals(0L, file0.getFreeSpace());
      assertTrue(file0.exists());
      assertFalse(file0.isDirectory());
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isHidden());
      assertEquals("9SOzK.T>_.j9(09SOzK.T>_.j9(", file0.getName());
      assertEquals("/tmp", file0.getParent());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertTrue(zipArchiveOutputStream0.isSeekable());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertEquals(0L, zipArchiveEntry2.getSize());
      assertEquals(0, zipArchiveEntry2.getUnixMode());
      assertEquals(0, zipArchiveEntry2.getVersionMadeBy());
      assertEquals((-1L), zipArchiveEntry2.getDataOffset());
      assertEquals((-1L), zipArchiveEntry2.getCrc());
      assertEquals("Invalid compression level: ", zipArchiveEntry2.getName());
      assertEquals(0, zipArchiveEntry2.getRawFlag());
      assertEquals(0, zipArchiveEntry2.getVersionRequired());
      assertEquals((-1), zipArchiveEntry2.getMethod());
      assertEquals(0L, zipArchiveEntry2.getExternalAttributes());
      assertEquals((-1L), zipArchiveEntry2.getCompressedSize());
      assertFalse(zipArchiveEntry2.isDirectory());
      assertEquals(0, zipArchiveEntry2.getPlatform());
      assertFalse(zipArchiveEntry2.isStreamContiguous());
      assertNull(zipArchiveEntry2.getComment());
      assertEquals(0, zipArchiveEntry2.getInternalAttributes());
      assertFalse(zipArchiveEntry2.isUnixSymlink());
      assertEquals("Invalid compression level: ", zipArchiveEntry2.toString());
      assertNotNull(zipArchiveEntry2);
      assertNotSame(zipArchiveEntry2, zipArchiveEntry0);
      assertNotSame(zipArchiveEntry2, zipArchiveEntry1);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      
      zipArchiveOutputStream0.writeCentralDirectoryEnd();
      assertTrue(file0.isAbsolute());
      assertTrue(file0.canWrite());
      assertEquals("/tmp/9SOzK.T>_.j9(09SOzK.T>_.j9(", file0.toString());
      assertTrue(file0.canRead());
      assertTrue(file0.isFile());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(0L, file0.length());
      assertTrue(file0.canExecute());
      assertEquals(0L, file0.getFreeSpace());
      assertTrue(file0.exists());
      assertFalse(file0.isDirectory());
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isHidden());
      assertEquals("9SOzK.T>_.j9(09SOzK.T>_.j9(", file0.getName());
      assertEquals("/tmp", file0.getParent());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertTrue(zipArchiveOutputStream0.isSeekable());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedInputStream0);
      
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(pipedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pushbackInputStream0);
      
      // Undeclared exception!
//      try { 
        zipArchiveOutputStream0.addRawArchiveEntry(zipArchiveEntry1, pushbackInputStream0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // ZIP compression method can not be negative: -1
//         //
//         verifyException("org.apache.commons.compress.archivers.zip.ZipArchiveEntry", e);
//      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      File file0 = MockFile.createTempFile("9SOzK.T>_.j9(", "wcsdgq");
      assertEquals(1392409281320L, file0.lastModified());
      assertTrue(file0.isFile());
      assertTrue(file0.canRead());
      assertTrue(file0.isAbsolute());
      assertTrue(file0.exists());
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isHidden());
      assertEquals("/tmp", file0.getParent());
      assertFalse(file0.isDirectory());
      assertEquals("9SOzK.T>_.j9(0wcsdgq", file0.getName());
      assertTrue(file0.canWrite());
      assertEquals(0L, file0.length());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals("/tmp/9SOzK.T>_.j9(0wcsdgq", file0.toString());
      assertTrue(file0.canExecute());
      assertNotNull(file0);
      
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(file0);
      assertEquals(1392409281320L, file0.lastModified());
      assertTrue(file0.isFile());
      assertTrue(file0.canRead());
      assertTrue(file0.isAbsolute());
      assertTrue(file0.exists());
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isHidden());
      assertEquals("/tmp", file0.getParent());
      assertFalse(file0.isDirectory());
      assertEquals("9SOzK.T>_.j9(0wcsdgq", file0.getName());
      assertTrue(file0.canWrite());
      assertEquals(0L, file0.length());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals("/tmp/9SOzK.T>_.j9(0wcsdgq", file0.toString());
      assertTrue(file0.canExecute());
      assertTrue(zipArchiveOutputStream0.isSeekable());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertNotNull(zipArchiveOutputStream0);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      
      zipArchiveOutputStream0.writeCentralDirectoryEnd();
      assertEquals(1392409281320L, file0.lastModified());
      assertTrue(file0.isFile());
      assertTrue(file0.canRead());
      assertTrue(file0.isAbsolute());
      assertTrue(file0.exists());
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isHidden());
      assertEquals("/tmp", file0.getParent());
      assertFalse(file0.isDirectory());
      assertEquals("9SOzK.T>_.j9(0wcsdgq", file0.getName());
      assertTrue(file0.canWrite());
      assertEquals(0L, file0.length());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals("/tmp/9SOzK.T>_.j9(0wcsdgq", file0.toString());
      assertTrue(file0.canExecute());
      assertTrue(zipArchiveOutputStream0.isSeekable());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      
      file0.deleteOnExit();
      assertEquals(1392409281320L, file0.lastModified());
      assertTrue(file0.isFile());
      assertTrue(file0.canRead());
      assertTrue(file0.isAbsolute());
      assertTrue(file0.exists());
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isHidden());
      assertEquals("/tmp", file0.getParent());
      assertFalse(file0.isDirectory());
      assertEquals("9SOzK.T>_.j9(0wcsdgq", file0.getName());
      assertTrue(file0.canWrite());
      assertEquals(0L, file0.length());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals("/tmp/9SOzK.T>_.j9(0wcsdgq", file0.toString());
      assertTrue(file0.canExecute());
      
      ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry("wcsdgq");
      assertEquals((-1L), zipArchiveEntry0.getCrc());
      assertEquals(0, zipArchiveEntry0.getVersionRequired());
      assertEquals((-1L), zipArchiveEntry0.getDataOffset());
      assertEquals((-1L), zipArchiveEntry0.getCompressedSize());
      assertFalse(zipArchiveEntry0.isStreamContiguous());
      assertFalse(zipArchiveEntry0.isDirectory());
      assertEquals((-1L), zipArchiveEntry0.getSize());
      assertNull(zipArchiveEntry0.getComment());
      assertEquals((-1), zipArchiveEntry0.getMethod());
      assertEquals(0, zipArchiveEntry0.getInternalAttributes());
      assertEquals("wcsdgq", zipArchiveEntry0.getName());
      assertFalse(zipArchiveEntry0.isUnixSymlink());
      assertEquals("wcsdgq", zipArchiveEntry0.toString());
      assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
      assertEquals(0, zipArchiveEntry0.getUnixMode());
      assertEquals(0, zipArchiveEntry0.getVersionMadeBy());
      assertEquals(0, zipArchiveEntry0.getRawFlag());
      assertEquals(0, zipArchiveEntry0.getPlatform());
      assertNotNull(zipArchiveEntry0);
      assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      
      zipArchiveOutputStream0.setLevel(3);
      assertEquals(1392409281320L, file0.lastModified());
      assertTrue(file0.isFile());
      assertTrue(file0.canRead());
      assertTrue(file0.isAbsolute());
      assertTrue(file0.exists());
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isHidden());
      assertEquals("/tmp", file0.getParent());
      assertFalse(file0.isDirectory());
      assertEquals("9SOzK.T>_.j9(0wcsdgq", file0.getName());
      assertTrue(file0.canWrite());
      assertEquals(0L, file0.length());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals("/tmp/9SOzK.T>_.j9(0wcsdgq", file0.toString());
      assertTrue(file0.canExecute());
      assertTrue(zipArchiveOutputStream0.isSeekable());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      
      zipArchiveOutputStream0.putArchiveEntry(zipArchiveEntry0);
      assertEquals(1392409281320L, file0.lastModified());
      assertTrue(file0.isFile());
      assertTrue(file0.canRead());
      assertTrue(file0.isAbsolute());
      assertTrue(file0.exists());
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isHidden());
      assertEquals("/tmp", file0.getParent());
      assertFalse(file0.isDirectory());
      assertEquals("9SOzK.T>_.j9(0wcsdgq", file0.getName());
      assertTrue(file0.canWrite());
      assertEquals(0L, file0.length());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals("/tmp/9SOzK.T>_.j9(0wcsdgq", file0.toString());
      assertTrue(file0.canExecute());
      assertTrue(zipArchiveOutputStream0.isSeekable());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals((-1L), zipArchiveEntry0.getCrc());
      assertEquals(0, zipArchiveEntry0.getVersionRequired());
      assertEquals((-1L), zipArchiveEntry0.getDataOffset());
      assertEquals((-1L), zipArchiveEntry0.getCompressedSize());
      assertFalse(zipArchiveEntry0.isStreamContiguous());
      assertEquals(8, zipArchiveEntry0.getMethod());
      assertFalse(zipArchiveEntry0.isDirectory());
      assertEquals((-1L), zipArchiveEntry0.getSize());
      assertNull(zipArchiveEntry0.getComment());
      assertEquals(0, zipArchiveEntry0.getInternalAttributes());
      assertEquals("wcsdgq", zipArchiveEntry0.getName());
      assertFalse(zipArchiveEntry0.isUnixSymlink());
      assertEquals("wcsdgq", zipArchiveEntry0.toString());
      assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
      assertEquals(0, zipArchiveEntry0.getUnixMode());
      assertEquals(0, zipArchiveEntry0.getVersionMadeBy());
      assertEquals(0, zipArchiveEntry0.getRawFlag());
      assertEquals(0, zipArchiveEntry0.getPlatform());
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      
      zipArchiveOutputStream0.setUseLanguageEncodingFlag(true);
      assertEquals(1392409281320L, file0.lastModified());
      assertTrue(file0.isFile());
      assertTrue(file0.canRead());
      assertTrue(file0.isAbsolute());
      assertTrue(file0.exists());
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isHidden());
      assertEquals("/tmp", file0.getParent());
      assertFalse(file0.isDirectory());
      assertEquals("9SOzK.T>_.j9(0wcsdgq", file0.getName());
      assertTrue(file0.canWrite());
      assertEquals(0L, file0.length());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals("/tmp/9SOzK.T>_.j9(0wcsdgq", file0.toString());
      assertTrue(file0.canExecute());
      assertTrue(zipArchiveOutputStream0.isSeekable());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      
      zipArchiveEntry0.setVersionMadeBy(4736);
      assertEquals((-1L), zipArchiveEntry0.getCrc());
      assertEquals(0, zipArchiveEntry0.getVersionRequired());
      assertEquals((-1L), zipArchiveEntry0.getDataOffset());
      assertEquals((-1L), zipArchiveEntry0.getCompressedSize());
      assertFalse(zipArchiveEntry0.isStreamContiguous());
      assertEquals(8, zipArchiveEntry0.getMethod());
      assertFalse(zipArchiveEntry0.isDirectory());
      assertEquals((-1L), zipArchiveEntry0.getSize());
      assertNull(zipArchiveEntry0.getComment());
      assertEquals(0, zipArchiveEntry0.getInternalAttributes());
      assertEquals("wcsdgq", zipArchiveEntry0.getName());
      assertFalse(zipArchiveEntry0.isUnixSymlink());
      assertEquals("wcsdgq", zipArchiveEntry0.toString());
      assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
      assertEquals(4736, zipArchiveEntry0.getVersionMadeBy());
      assertEquals(0, zipArchiveEntry0.getUnixMode());
      assertEquals(0, zipArchiveEntry0.getRawFlag());
      assertEquals(0, zipArchiveEntry0.getPlatform());
      assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      
      zipArchiveOutputStream0.writeZip64CentralDirectory();
      assertEquals(1392409281320L, file0.lastModified());
      assertTrue(file0.isFile());
      assertTrue(file0.canRead());
      assertTrue(file0.isAbsolute());
      assertTrue(file0.exists());
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isHidden());
      assertEquals("/tmp", file0.getParent());
      assertFalse(file0.isDirectory());
      assertEquals("9SOzK.T>_.j9(0wcsdgq", file0.getName());
      assertTrue(file0.canWrite());
      assertEquals(0L, file0.length());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals("/tmp/9SOzK.T>_.j9(0wcsdgq", file0.toString());
      assertTrue(file0.canExecute());
      assertTrue(zipArchiveOutputStream0.isSeekable());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      assertFalse(fileDescriptor0.valid());
      assertNotNull(fileDescriptor0);
      
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(fileDescriptor0);
      assertNotNull(mockFileOutputStream0);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-74);
//      try { 
        mockFileOutputStream0.write(byteArray0, 72, 0);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.evosuite.runtime.mock.java.io.NativeMockedIO", e);
//      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      File file0 = MockFile.createTempFile("9SOzK.T>_.j9(", "9SOzK.T>_.j9(");
      assertEquals(0L, file0.getFreeSpace());
      assertFalse(file0.isDirectory());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(0L, file0.length());
      assertTrue(file0.exists());
      assertTrue(file0.isAbsolute());
      assertTrue(file0.canExecute());
      assertTrue(file0.canRead());
      assertEquals("/tmp", file0.getParent());
      assertTrue(file0.canWrite());
      assertEquals("/tmp/9SOzK.T>_.j9(09SOzK.T>_.j9(", file0.toString());
      assertTrue(file0.isFile());
      assertFalse(file0.isHidden());
      assertEquals("9SOzK.T>_.j9(09SOzK.T>_.j9(", file0.getName());
      assertEquals(0L, file0.getUsableSpace());
      assertNotNull(file0);
      
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(file0);
      assertEquals(0L, file0.getFreeSpace());
      assertFalse(file0.isDirectory());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(0L, file0.length());
      assertTrue(file0.exists());
      assertTrue(file0.isAbsolute());
      assertTrue(file0.canExecute());
      assertTrue(file0.canRead());
      assertEquals("/tmp", file0.getParent());
      assertTrue(file0.canWrite());
      assertEquals("/tmp/9SOzK.T>_.j9(09SOzK.T>_.j9(", file0.toString());
      assertTrue(file0.isFile());
      assertFalse(file0.isHidden());
      assertEquals("9SOzK.T>_.j9(09SOzK.T>_.j9(", file0.getName());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertTrue(zipArchiveOutputStream0.isSeekable());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertNotNull(zipArchiveOutputStream0);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      
      zipArchiveOutputStream0.writeCentralDirectoryEnd();
      assertEquals(0L, file0.getFreeSpace());
      assertFalse(file0.isDirectory());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(0L, file0.length());
      assertTrue(file0.exists());
      assertTrue(file0.isAbsolute());
      assertTrue(file0.canExecute());
      assertTrue(file0.canRead());
      assertEquals("/tmp", file0.getParent());
      assertTrue(file0.canWrite());
      assertEquals("/tmp/9SOzK.T>_.j9(09SOzK.T>_.j9(", file0.toString());
      assertTrue(file0.isFile());
      assertFalse(file0.isHidden());
      assertEquals("9SOzK.T>_.j9(09SOzK.T>_.j9(", file0.getName());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertTrue(zipArchiveOutputStream0.isSeekable());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      
      ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
      assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
      assertEquals((-1), zipArchiveEntry0.getMethod());
      assertEquals((-1L), zipArchiveEntry0.getDataOffset());
      assertNull(zipArchiveEntry0.getComment());
      assertFalse(zipArchiveEntry0.isStreamContiguous());
      assertEquals((-1L), zipArchiveEntry0.getCrc());
      assertEquals((-1L), zipArchiveEntry0.getSize());
      assertEquals("", zipArchiveEntry0.getName());
      assertEquals((-1L), zipArchiveEntry0.getCompressedSize());
      assertFalse(zipArchiveEntry0.isDirectory());
      assertFalse(zipArchiveEntry0.isUnixSymlink());
      assertEquals(0, zipArchiveEntry0.getVersionRequired());
      assertEquals("", zipArchiveEntry0.toString());
      assertEquals(0, zipArchiveEntry0.getRawFlag());
      assertEquals(0, zipArchiveEntry0.getInternalAttributes());
      assertEquals(0, zipArchiveEntry0.getPlatform());
      assertEquals(0, zipArchiveEntry0.getUnixMode());
      assertEquals(0, zipArchiveEntry0.getVersionMadeBy());
      assertNotNull(zipArchiveEntry0);
      assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      
      Zip64Mode zip64Mode0 = Zip64Mode.Never;
      zipArchiveOutputStream0.setUseZip64(zip64Mode0);
      assertEquals(0L, file0.getFreeSpace());
      assertFalse(file0.isDirectory());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(0L, file0.length());
      assertTrue(file0.exists());
      assertTrue(file0.isAbsolute());
      assertTrue(file0.canExecute());
      assertTrue(file0.canRead());
      assertEquals("/tmp", file0.getParent());
      assertTrue(file0.canWrite());
      assertEquals("/tmp/9SOzK.T>_.j9(09SOzK.T>_.j9(", file0.toString());
      assertTrue(file0.isFile());
      assertFalse(file0.isHidden());
      assertEquals("9SOzK.T>_.j9(09SOzK.T>_.j9(", file0.getName());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertTrue(zipArchiveOutputStream0.isSeekable());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      
      boolean boolean0 = zipArchiveOutputStream0.isSeekable();
      assertEquals(0L, file0.getFreeSpace());
      assertFalse(file0.isDirectory());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(0L, file0.length());
      assertTrue(file0.exists());
      assertTrue(file0.isAbsolute());
      assertTrue(file0.canExecute());
      assertTrue(file0.canRead());
      assertEquals("/tmp", file0.getParent());
      assertTrue(file0.canWrite());
      assertEquals("/tmp/9SOzK.T>_.j9(09SOzK.T>_.j9(", file0.toString());
      assertTrue(file0.isFile());
      assertFalse(file0.isHidden());
      assertEquals("9SOzK.T>_.j9(09SOzK.T>_.j9(", file0.getName());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertTrue(zipArchiveOutputStream0.isSeekable());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertTrue(boolean0);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      
      zipArchiveOutputStream0.putArchiveEntry(zipArchiveEntry0);
      assertEquals(0L, file0.getFreeSpace());
      assertFalse(file0.isDirectory());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(0L, file0.length());
      assertTrue(file0.exists());
      assertTrue(file0.isAbsolute());
      assertTrue(file0.canExecute());
      assertTrue(file0.canRead());
      assertEquals("/tmp", file0.getParent());
      assertTrue(file0.canWrite());
      assertEquals("/tmp/9SOzK.T>_.j9(09SOzK.T>_.j9(", file0.toString());
      assertTrue(file0.isFile());
      assertFalse(file0.isHidden());
      assertEquals("9SOzK.T>_.j9(09SOzK.T>_.j9(", file0.getName());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertTrue(zipArchiveOutputStream0.isSeekable());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
      assertEquals((-1L), zipArchiveEntry0.getDataOffset());
      assertNull(zipArchiveEntry0.getComment());
      assertFalse(zipArchiveEntry0.isStreamContiguous());
      assertEquals((-1L), zipArchiveEntry0.getCrc());
      assertEquals((-1L), zipArchiveEntry0.getSize());
      assertEquals("", zipArchiveEntry0.getName());
      assertEquals(8, zipArchiveEntry0.getMethod());
      assertEquals((-1L), zipArchiveEntry0.getCompressedSize());
      assertFalse(zipArchiveEntry0.isDirectory());
      assertFalse(zipArchiveEntry0.isUnixSymlink());
      assertEquals(0, zipArchiveEntry0.getVersionRequired());
      assertEquals("", zipArchiveEntry0.toString());
      assertEquals(0, zipArchiveEntry0.getRawFlag());
      assertEquals(0, zipArchiveEntry0.getInternalAttributes());
      assertEquals(0, zipArchiveEntry0.getPlatform());
      assertEquals(0, zipArchiveEntry0.getUnixMode());
      assertEquals(0, zipArchiveEntry0.getVersionMadeBy());
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      
      zipArchiveOutputStream0.setMethod((-1160));
      assertEquals(0L, file0.getFreeSpace());
      assertFalse(file0.isDirectory());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(0L, file0.length());
      assertTrue(file0.exists());
      assertTrue(file0.isAbsolute());
      assertTrue(file0.canExecute());
      assertTrue(file0.canRead());
      assertEquals("/tmp", file0.getParent());
      assertTrue(file0.canWrite());
      assertEquals("/tmp/9SOzK.T>_.j9(09SOzK.T>_.j9(", file0.toString());
      assertTrue(file0.isFile());
      assertFalse(file0.isHidden());
      assertEquals("9SOzK.T>_.j9(09SOzK.T>_.j9(", file0.getName());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertTrue(zipArchiveOutputStream0.isSeekable());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      
      zipArchiveOutputStream0.writeCentralFileHeader(zipArchiveEntry0);
      assertEquals(0L, file0.getFreeSpace());
      assertFalse(file0.isDirectory());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(0L, file0.length());
      assertTrue(file0.exists());
      assertTrue(file0.isAbsolute());
      assertTrue(file0.canExecute());
      assertTrue(file0.canRead());
      assertEquals("/tmp", file0.getParent());
      assertTrue(file0.canWrite());
      assertEquals("/tmp/9SOzK.T>_.j9(09SOzK.T>_.j9(", file0.toString());
      assertTrue(file0.isFile());
      assertFalse(file0.isHidden());
      assertEquals("9SOzK.T>_.j9(09SOzK.T>_.j9(", file0.getName());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertTrue(zipArchiveOutputStream0.isSeekable());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
      assertEquals((-1L), zipArchiveEntry0.getDataOffset());
      assertNull(zipArchiveEntry0.getComment());
      assertFalse(zipArchiveEntry0.isStreamContiguous());
      assertEquals((-1L), zipArchiveEntry0.getCrc());
      assertEquals((-1L), zipArchiveEntry0.getSize());
      assertEquals("", zipArchiveEntry0.getName());
      assertEquals(8, zipArchiveEntry0.getMethod());
      assertEquals((-1L), zipArchiveEntry0.getCompressedSize());
      assertFalse(zipArchiveEntry0.isDirectory());
      assertFalse(zipArchiveEntry0.isUnixSymlink());
      assertEquals(0, zipArchiveEntry0.getVersionRequired());
      assertEquals("", zipArchiveEntry0.toString());
      assertEquals(0, zipArchiveEntry0.getRawFlag());
      assertEquals(0, zipArchiveEntry0.getInternalAttributes());
      assertEquals(0, zipArchiveEntry0.getPlatform());
      assertEquals(0, zipArchiveEntry0.getUnixMode());
      assertEquals(0, zipArchiveEntry0.getVersionMadeBy());
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      
      zipArchiveOutputStream0.setUseLanguageEncodingFlag(false);
      assertEquals(0L, file0.getFreeSpace());
      assertFalse(file0.isDirectory());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(0L, file0.length());
      assertTrue(file0.exists());
      assertTrue(file0.isAbsolute());
      assertTrue(file0.canExecute());
      assertTrue(file0.canRead());
      assertEquals("/tmp", file0.getParent());
      assertTrue(file0.canWrite());
      assertEquals("/tmp/9SOzK.T>_.j9(09SOzK.T>_.j9(", file0.toString());
      assertTrue(file0.isFile());
      assertFalse(file0.isHidden());
      assertEquals("9SOzK.T>_.j9(09SOzK.T>_.j9(", file0.getName());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertTrue(zipArchiveOutputStream0.isSeekable());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      
      ZipArchiveOutputStream.UnicodeExtraFieldPolicy zipArchiveOutputStream_UnicodeExtraFieldPolicy0 = ZipArchiveOutputStream.UnicodeExtraFieldPolicy.NEVER;
      assertEquals("never", zipArchiveOutputStream_UnicodeExtraFieldPolicy0.toString());
      assertNotNull(zipArchiveOutputStream_UnicodeExtraFieldPolicy0);
      
      ZipArchiveEntry zipArchiveEntry1 = new ZipArchiveEntry();
      assertFalse(zipArchiveEntry1.equals((Object)zipArchiveEntry0));
      assertFalse(zipArchiveEntry1.isUnixSymlink());
      assertFalse(zipArchiveEntry1.isDirectory());
      assertEquals(0, zipArchiveEntry1.getPlatform());
      assertEquals("", zipArchiveEntry1.toString());
      assertFalse(zipArchiveEntry1.isStreamContiguous());
      assertEquals(0, zipArchiveEntry1.getVersionRequired());
      assertEquals((-1), zipArchiveEntry1.getMethod());
      assertEquals((-1L), zipArchiveEntry1.getCompressedSize());
      assertEquals("", zipArchiveEntry1.getName());
      assertEquals(0, zipArchiveEntry1.getVersionMadeBy());
      assertEquals((-1L), zipArchiveEntry1.getSize());
      assertEquals(0, zipArchiveEntry1.getUnixMode());
      assertEquals((-1L), zipArchiveEntry1.getDataOffset());
      assertEquals(0L, zipArchiveEntry1.getExternalAttributes());
      assertEquals((-1L), zipArchiveEntry1.getCrc());
      assertEquals(0, zipArchiveEntry1.getRawFlag());
      assertNull(zipArchiveEntry1.getComment());
      assertEquals(0, zipArchiveEntry1.getInternalAttributes());
      assertNotNull(zipArchiveEntry1);
      assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      
      zipArchiveOutputStream0.writeCentralDirectoryEnd();
      assertEquals(0L, file0.getFreeSpace());
      assertFalse(file0.isDirectory());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(0L, file0.length());
      assertTrue(file0.exists());
      assertTrue(file0.isAbsolute());
      assertTrue(file0.canExecute());
      assertTrue(file0.canRead());
      assertEquals("/tmp", file0.getParent());
      assertTrue(file0.canWrite());
      assertEquals("/tmp/9SOzK.T>_.j9(09SOzK.T>_.j9(", file0.toString());
      assertTrue(file0.isFile());
      assertFalse(file0.isHidden());
      assertEquals("9SOzK.T>_.j9(09SOzK.T>_.j9(", file0.getName());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertTrue(zipArchiveOutputStream0.isSeekable());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedInputStream0);
      
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(pipedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pushbackInputStream0);
      
      // Undeclared exception!
//      try { 
        zipArchiveOutputStream0.addRawArchiveEntry(zipArchiveEntry1, pipedInputStream0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // ZIP compression method can not be negative: -1
//         //
//         verifyException("org.apache.commons.compress.archivers.zip.ZipArchiveEntry", e);
//      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      String string0 = "9SOzK.T>_.j9(";
      File file0 = MockFile.createTempFile("9SOzK.T>_.j9(", "}wcsdgq");
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(0L, file0.getFreeSpace());
      assertTrue(file0.exists());
      assertEquals("/tmp/9SOzK.T>_.j9(0}wcsdgq", file0.toString());
      assertEquals("9SOzK.T>_.j9(0}wcsdgq", file0.getName());
      assertEquals(0L, file0.length());
      assertTrue(file0.isAbsolute());
      assertFalse(file0.isDirectory());
      assertTrue(file0.canWrite());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals("/tmp", file0.getParent());
      assertTrue(file0.canExecute());
      assertTrue(file0.canRead());
      assertTrue(file0.isFile());
      assertNotNull(file0);
      
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(file0);
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(0L, file0.getFreeSpace());
      assertTrue(file0.exists());
      assertEquals("/tmp/9SOzK.T>_.j9(0}wcsdgq", file0.toString());
      assertEquals("9SOzK.T>_.j9(0}wcsdgq", file0.getName());
      assertEquals(0L, file0.length());
      assertTrue(file0.isAbsolute());
      assertFalse(file0.isDirectory());
      assertTrue(file0.canWrite());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals("/tmp", file0.getParent());
      assertTrue(file0.canExecute());
      assertTrue(file0.canRead());
      assertTrue(file0.isFile());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertTrue(zipArchiveOutputStream0.isSeekable());
      assertNotNull(zipArchiveOutputStream0);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      
      zipArchiveOutputStream0.writeCentralDirectoryEnd();
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(0L, file0.getFreeSpace());
      assertTrue(file0.exists());
      assertEquals("/tmp/9SOzK.T>_.j9(0}wcsdgq", file0.toString());
      assertEquals("9SOzK.T>_.j9(0}wcsdgq", file0.getName());
      assertEquals(0L, file0.length());
      assertTrue(file0.isAbsolute());
      assertFalse(file0.isDirectory());
      assertTrue(file0.canWrite());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals("/tmp", file0.getParent());
      assertTrue(file0.canExecute());
      assertTrue(file0.canRead());
      assertTrue(file0.isFile());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertTrue(zipArchiveOutputStream0.isSeekable());
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      
      file0.deleteOnExit();
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(0L, file0.getFreeSpace());
      assertTrue(file0.exists());
      assertEquals("/tmp/9SOzK.T>_.j9(0}wcsdgq", file0.toString());
      assertEquals("9SOzK.T>_.j9(0}wcsdgq", file0.getName());
      assertEquals(0L, file0.length());
      assertTrue(file0.isAbsolute());
      assertFalse(file0.isDirectory());
      assertTrue(file0.canWrite());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals("/tmp", file0.getParent());
      assertTrue(file0.canExecute());
      assertTrue(file0.canRead());
      assertTrue(file0.isFile());
      
      ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry("org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream$EntryMetaData");
      assertFalse(zipArchiveEntry0.isDirectory());
      assertEquals("org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream$EntryMetaData", zipArchiveEntry0.toString());
      assertEquals((-1L), zipArchiveEntry0.getCompressedSize());
      assertFalse(zipArchiveEntry0.isUnixSymlink());
      assertEquals("org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream$EntryMetaData", zipArchiveEntry0.getName());
      assertEquals(0, zipArchiveEntry0.getVersionRequired());
      assertEquals((-1L), zipArchiveEntry0.getCrc());
      assertFalse(zipArchiveEntry0.isStreamContiguous());
      assertEquals((-1L), zipArchiveEntry0.getSize());
      assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
      assertNull(zipArchiveEntry0.getComment());
      assertEquals((-1L), zipArchiveEntry0.getDataOffset());
      assertEquals((-1), zipArchiveEntry0.getMethod());
      assertEquals(0, zipArchiveEntry0.getPlatform());
      assertEquals(0, zipArchiveEntry0.getRawFlag());
      assertEquals(0, zipArchiveEntry0.getInternalAttributes());
      assertEquals(0, zipArchiveEntry0.getUnixMode());
      assertEquals(0, zipArchiveEntry0.getVersionMadeBy());
      assertNotNull(zipArchiveEntry0);
      assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      
      zipArchiveOutputStream0.setLevel(9);
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(0L, file0.getFreeSpace());
      assertTrue(file0.exists());
      assertEquals("/tmp/9SOzK.T>_.j9(0}wcsdgq", file0.toString());
      assertEquals("9SOzK.T>_.j9(0}wcsdgq", file0.getName());
      assertEquals(0L, file0.length());
      assertTrue(file0.isAbsolute());
      assertFalse(file0.isDirectory());
      assertTrue(file0.canWrite());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals("/tmp", file0.getParent());
      assertTrue(file0.canExecute());
      assertTrue(file0.canRead());
      assertTrue(file0.isFile());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertTrue(zipArchiveOutputStream0.isSeekable());
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      
      zipArchiveOutputStream0.putArchiveEntry(zipArchiveEntry0);
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(0L, file0.getFreeSpace());
      assertTrue(file0.exists());
      assertEquals("/tmp/9SOzK.T>_.j9(0}wcsdgq", file0.toString());
      assertEquals("9SOzK.T>_.j9(0}wcsdgq", file0.getName());
      assertEquals(0L, file0.length());
      assertTrue(file0.isAbsolute());
      assertFalse(file0.isDirectory());
      assertTrue(file0.canWrite());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals("/tmp", file0.getParent());
      assertTrue(file0.canExecute());
      assertTrue(file0.canRead());
      assertTrue(file0.isFile());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertTrue(zipArchiveOutputStream0.isSeekable());
      assertFalse(zipArchiveEntry0.isDirectory());
      assertEquals("org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream$EntryMetaData", zipArchiveEntry0.toString());
      assertEquals((-1L), zipArchiveEntry0.getCompressedSize());
      assertFalse(zipArchiveEntry0.isUnixSymlink());
      assertEquals("org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream$EntryMetaData", zipArchiveEntry0.getName());
      assertEquals(0, zipArchiveEntry0.getVersionRequired());
      assertEquals((-1L), zipArchiveEntry0.getCrc());
      assertFalse(zipArchiveEntry0.isStreamContiguous());
      assertEquals((-1L), zipArchiveEntry0.getSize());
      assertEquals(8, zipArchiveEntry0.getMethod());
      assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
      assertNull(zipArchiveEntry0.getComment());
      assertEquals((-1L), zipArchiveEntry0.getDataOffset());
      assertEquals(0, zipArchiveEntry0.getPlatform());
      assertEquals(0, zipArchiveEntry0.getRawFlag());
      assertEquals(0, zipArchiveEntry0.getInternalAttributes());
      assertEquals(0, zipArchiveEntry0.getUnixMode());
      assertEquals(0, zipArchiveEntry0.getVersionMadeBy());
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      
      zipArchiveOutputStream0.setUseLanguageEncodingFlag(true);
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(0L, file0.getFreeSpace());
      assertTrue(file0.exists());
      assertEquals("/tmp/9SOzK.T>_.j9(0}wcsdgq", file0.toString());
      assertEquals("9SOzK.T>_.j9(0}wcsdgq", file0.getName());
      assertEquals(0L, file0.length());
      assertTrue(file0.isAbsolute());
      assertFalse(file0.isDirectory());
      assertTrue(file0.canWrite());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals("/tmp", file0.getParent());
      assertTrue(file0.canExecute());
      assertTrue(file0.canRead());
      assertTrue(file0.isFile());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertTrue(zipArchiveOutputStream0.isSeekable());
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      
      boolean boolean0 = zipArchiveOutputStream0.isSeekable();
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(0L, file0.getFreeSpace());
      assertTrue(file0.exists());
      assertEquals("/tmp/9SOzK.T>_.j9(0}wcsdgq", file0.toString());
      assertEquals("9SOzK.T>_.j9(0}wcsdgq", file0.getName());
      assertEquals(0L, file0.length());
      assertTrue(file0.isAbsolute());
      assertFalse(file0.isDirectory());
      assertTrue(file0.canWrite());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals("/tmp", file0.getParent());
      assertTrue(file0.canExecute());
      assertTrue(file0.canRead());
      assertTrue(file0.isFile());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertTrue(zipArchiveOutputStream0.isSeekable());
      assertTrue(boolean0);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      
      zipArchiveOutputStream0.putArchiveEntry(zipArchiveEntry0);
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(0L, file0.getFreeSpace());
      assertTrue(file0.exists());
      assertEquals("/tmp/9SOzK.T>_.j9(0}wcsdgq", file0.toString());
      assertEquals("9SOzK.T>_.j9(0}wcsdgq", file0.getName());
      assertEquals(0L, file0.length());
      assertTrue(file0.isAbsolute());
      assertFalse(file0.isDirectory());
      assertTrue(file0.canWrite());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals("/tmp", file0.getParent());
      assertTrue(file0.canExecute());
      assertTrue(file0.canRead());
      assertTrue(file0.isFile());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertTrue(zipArchiveOutputStream0.isSeekable());
      assertFalse(zipArchiveEntry0.isDirectory());
      assertEquals("org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream$EntryMetaData", zipArchiveEntry0.toString());
      assertFalse(zipArchiveEntry0.isUnixSymlink());
      assertEquals("org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream$EntryMetaData", zipArchiveEntry0.getName());
      assertEquals(0, zipArchiveEntry0.getVersionRequired());
      assertEquals(0L, zipArchiveEntry0.getCrc());
      assertFalse(zipArchiveEntry0.isStreamContiguous());
      assertEquals(2L, zipArchiveEntry0.getCompressedSize());
      assertEquals(0L, zipArchiveEntry0.getSize());
      assertEquals(8, zipArchiveEntry0.getMethod());
      assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
      assertNull(zipArchiveEntry0.getComment());
      assertEquals((-1L), zipArchiveEntry0.getDataOffset());
      assertEquals(0, zipArchiveEntry0.getPlatform());
      assertEquals(0, zipArchiveEntry0.getRawFlag());
      assertEquals(0, zipArchiveEntry0.getInternalAttributes());
      assertEquals(0, zipArchiveEntry0.getUnixMode());
      assertEquals(0, zipArchiveEntry0.getVersionMadeBy());
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      
      zipArchiveOutputStream0.setMethod(3251);
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(0L, file0.getFreeSpace());
      assertTrue(file0.exists());
      assertEquals("/tmp/9SOzK.T>_.j9(0}wcsdgq", file0.toString());
      assertEquals("9SOzK.T>_.j9(0}wcsdgq", file0.getName());
      assertEquals(0L, file0.length());
      assertTrue(file0.isAbsolute());
      assertFalse(file0.isDirectory());
      assertTrue(file0.canWrite());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals("/tmp", file0.getParent());
      assertTrue(file0.canExecute());
      assertTrue(file0.canRead());
      assertTrue(file0.isFile());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertTrue(zipArchiveOutputStream0.isSeekable());
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      
      zipArchiveOutputStream0.writeCentralFileHeader(zipArchiveEntry0);
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(0L, file0.getFreeSpace());
      assertTrue(file0.exists());
      assertEquals("/tmp/9SOzK.T>_.j9(0}wcsdgq", file0.toString());
      assertEquals("9SOzK.T>_.j9(0}wcsdgq", file0.getName());
      assertEquals(0L, file0.length());
      assertTrue(file0.isAbsolute());
      assertFalse(file0.isDirectory());
      assertTrue(file0.canWrite());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals("/tmp", file0.getParent());
      assertTrue(file0.canExecute());
      assertTrue(file0.canRead());
      assertTrue(file0.isFile());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertTrue(zipArchiveOutputStream0.isSeekable());
      assertFalse(zipArchiveEntry0.isDirectory());
      assertEquals("org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream$EntryMetaData", zipArchiveEntry0.toString());
      assertFalse(zipArchiveEntry0.isUnixSymlink());
      assertEquals("org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream$EntryMetaData", zipArchiveEntry0.getName());
      assertEquals(0, zipArchiveEntry0.getVersionRequired());
      assertEquals(0L, zipArchiveEntry0.getCrc());
      assertFalse(zipArchiveEntry0.isStreamContiguous());
      assertEquals(2L, zipArchiveEntry0.getCompressedSize());
      assertEquals(0L, zipArchiveEntry0.getSize());
      assertEquals(8, zipArchiveEntry0.getMethod());
      assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
      assertNull(zipArchiveEntry0.getComment());
      assertEquals((-1L), zipArchiveEntry0.getDataOffset());
      assertEquals(0, zipArchiveEntry0.getPlatform());
      assertEquals(0, zipArchiveEntry0.getRawFlag());
      assertEquals(0, zipArchiveEntry0.getInternalAttributes());
      assertEquals(0, zipArchiveEntry0.getUnixMode());
      assertEquals(0, zipArchiveEntry0.getVersionMadeBy());
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      
      zipArchiveOutputStream0.setUseLanguageEncodingFlag(true);
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(0L, file0.getFreeSpace());
      assertTrue(file0.exists());
      assertEquals("/tmp/9SOzK.T>_.j9(0}wcsdgq", file0.toString());
      assertEquals("9SOzK.T>_.j9(0}wcsdgq", file0.getName());
      assertEquals(0L, file0.length());
      assertTrue(file0.isAbsolute());
      assertFalse(file0.isDirectory());
      assertTrue(file0.canWrite());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals("/tmp", file0.getParent());
      assertTrue(file0.canExecute());
      assertTrue(file0.canRead());
      assertTrue(file0.isFile());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertTrue(zipArchiveOutputStream0.isSeekable());
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      
      ZipArchiveOutputStream.UnicodeExtraFieldPolicy zipArchiveOutputStream_UnicodeExtraFieldPolicy0 = ZipArchiveOutputStream.UnicodeExtraFieldPolicy.NEVER;
      assertEquals("never", zipArchiveOutputStream_UnicodeExtraFieldPolicy0.toString());
      assertNotNull(zipArchiveOutputStream_UnicodeExtraFieldPolicy0);
      
      ZipArchiveEntry zipArchiveEntry1 = new ZipArchiveEntry();
      assertFalse(zipArchiveEntry1.equals((Object)zipArchiveEntry0));
      assertEquals((-1), zipArchiveEntry1.getMethod());
      assertNull(zipArchiveEntry1.getComment());
      assertEquals(0L, zipArchiveEntry1.getExternalAttributes());
      assertEquals(0, zipArchiveEntry1.getInternalAttributes());
      assertEquals((-1L), zipArchiveEntry1.getSize());
      assertEquals("", zipArchiveEntry1.getName());
      assertEquals((-1L), zipArchiveEntry1.getDataOffset());
      assertEquals("", zipArchiveEntry1.toString());
      assertFalse(zipArchiveEntry1.isStreamContiguous());
      assertFalse(zipArchiveEntry1.isDirectory());
      assertEquals((-1L), zipArchiveEntry1.getCrc());
      assertEquals(0, zipArchiveEntry1.getVersionRequired());
      assertEquals((-1L), zipArchiveEntry1.getCompressedSize());
      assertFalse(zipArchiveEntry1.isUnixSymlink());
      assertEquals(0, zipArchiveEntry1.getVersionMadeBy());
      assertEquals(0, zipArchiveEntry1.getUnixMode());
      assertEquals(0, zipArchiveEntry1.getPlatform());
      assertEquals(0, zipArchiveEntry1.getRawFlag());
      assertNotNull(zipArchiveEntry1);
      assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      
      // Undeclared exception!
//      try { 
        zipArchiveOutputStream0.writeCentralFileHeader(zipArchiveEntry1);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream$EntryMetaData", e);
//      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      File file0 = MockFile.createTempFile("9SOzK.T>_.j9(", "wMcsdgq");
      assertTrue(file0.canExecute());
      assertTrue(file0.canRead());
      assertTrue(file0.isAbsolute());
      assertTrue(file0.isFile());
      assertEquals("/tmp/9SOzK.T>_.j9(0wMcsdgq", file0.toString());
      assertEquals("9SOzK.T>_.j9(0wMcsdgq", file0.getName());
      assertEquals("/tmp", file0.getParent());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals(0L, file0.getFreeSpace());
      assertTrue(file0.canWrite());
      assertFalse(file0.isHidden());
      assertFalse(file0.isDirectory());
      assertEquals(0L, file0.length());
      assertEquals(1392409281320L, file0.lastModified());
      assertTrue(file0.exists());
      assertEquals(0L, file0.getTotalSpace());
      assertNotNull(file0);
      
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(file0);
      assertTrue(file0.canExecute());
      assertTrue(file0.canRead());
      assertTrue(file0.isAbsolute());
      assertTrue(file0.isFile());
      assertEquals("/tmp/9SOzK.T>_.j9(0wMcsdgq", file0.toString());
      assertEquals("9SOzK.T>_.j9(0wMcsdgq", file0.getName());
      assertEquals("/tmp", file0.getParent());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals(0L, file0.getFreeSpace());
      assertTrue(file0.canWrite());
      assertFalse(file0.isHidden());
      assertFalse(file0.isDirectory());
      assertEquals(0L, file0.length());
      assertEquals(1392409281320L, file0.lastModified());
      assertTrue(file0.exists());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertTrue(zipArchiveOutputStream0.isSeekable());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertNotNull(zipArchiveOutputStream0);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      
      zipArchiveOutputStream0.writeCentralDirectoryEnd();
      assertTrue(file0.canExecute());
      assertTrue(file0.canRead());
      assertTrue(file0.isAbsolute());
      assertTrue(file0.isFile());
      assertEquals("/tmp/9SOzK.T>_.j9(0wMcsdgq", file0.toString());
      assertEquals("9SOzK.T>_.j9(0wMcsdgq", file0.getName());
      assertEquals("/tmp", file0.getParent());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals(0L, file0.getFreeSpace());
      assertTrue(file0.canWrite());
      assertFalse(file0.isHidden());
      assertFalse(file0.isDirectory());
      assertEquals(0L, file0.length());
      assertEquals(1392409281320L, file0.lastModified());
      assertTrue(file0.exists());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertTrue(zipArchiveOutputStream0.isSeekable());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      
      ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
      assertEquals(0, zipArchiveEntry0.getInternalAttributes());
      assertEquals("", zipArchiveEntry0.getName());
      assertFalse(zipArchiveEntry0.isStreamContiguous());
      assertFalse(zipArchiveEntry0.isDirectory());
      assertEquals(0, zipArchiveEntry0.getPlatform());
      assertEquals("", zipArchiveEntry0.toString());
      assertFalse(zipArchiveEntry0.isUnixSymlink());
      assertNull(zipArchiveEntry0.getComment());
      assertEquals((-1L), zipArchiveEntry0.getDataOffset());
      assertEquals(0, zipArchiveEntry0.getRawFlag());
      assertEquals((-1L), zipArchiveEntry0.getCrc());
      assertEquals((-1L), zipArchiveEntry0.getSize());
      assertEquals(0, zipArchiveEntry0.getUnixMode());
      assertEquals(0, zipArchiveEntry0.getVersionMadeBy());
      assertEquals(0, zipArchiveEntry0.getVersionRequired());
      assertEquals((-1L), zipArchiveEntry0.getCompressedSize());
      assertEquals((-1), zipArchiveEntry0.getMethod());
      assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
      assertNotNull(zipArchiveEntry0);
      assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      
      zipArchiveOutputStream0.setUseLanguageEncodingFlag(true);
      assertTrue(file0.canExecute());
      assertTrue(file0.canRead());
      assertTrue(file0.isAbsolute());
      assertTrue(file0.isFile());
      assertEquals("/tmp/9SOzK.T>_.j9(0wMcsdgq", file0.toString());
      assertEquals("9SOzK.T>_.j9(0wMcsdgq", file0.getName());
      assertEquals("/tmp", file0.getParent());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals(0L, file0.getFreeSpace());
      assertTrue(file0.canWrite());
      assertFalse(file0.isHidden());
      assertFalse(file0.isDirectory());
      assertEquals(0L, file0.length());
      assertEquals(1392409281320L, file0.lastModified());
      assertTrue(file0.exists());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertTrue(zipArchiveOutputStream0.isSeekable());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("bY");
      assertNotNull(mockFileOutputStream0);
      
      FileChannel fileChannel0 = mockFileOutputStream0.getChannel();
      assertEquals(0L, fileChannel0.position());
      assertEquals(0L, fileChannel0.size());
      assertTrue(fileChannel0.isOpen());
      assertNotNull(fileChannel0);
      
      FileChannel fileChannel1 = fileChannel0.truncate(0);
      assertEquals(0L, fileChannel0.position());
      assertEquals(0L, fileChannel0.size());
      assertTrue(fileChannel0.isOpen());
      assertEquals(0L, fileChannel1.size());
      assertTrue(fileChannel1.isOpen());
      assertEquals(0L, fileChannel1.position());
      assertNotNull(fileChannel1);
      assertSame(fileChannel0, fileChannel1);
      assertSame(fileChannel1, fileChannel0);
      
      FileChannel fileChannel2 = fileChannel1.position((long) 8);
      assertEquals(8L, fileChannel0.position());
      assertEquals(0L, fileChannel0.size());
      assertTrue(fileChannel0.isOpen());
      assertEquals(0L, fileChannel1.size());
      assertTrue(fileChannel1.isOpen());
      assertEquals(8L, fileChannel1.position());
      assertEquals(8L, fileChannel2.position());
      assertEquals(0L, fileChannel2.size());
      assertTrue(fileChannel2.isOpen());
      assertNotNull(fileChannel2);
      assertSame(fileChannel0, fileChannel2);
      assertSame(fileChannel0, fileChannel1);
      assertSame(fileChannel1, fileChannel0);
      assertSame(fileChannel1, fileChannel2);
      assertSame(fileChannel2, fileChannel0);
      assertSame(fileChannel2, fileChannel1);
      
      ZipArchiveOutputStream zipArchiveOutputStream1 = new ZipArchiveOutputStream(fileChannel2);
      assertFalse(zipArchiveOutputStream1.equals((Object)zipArchiveOutputStream0));
      assertEquals(8L, fileChannel0.position());
      assertEquals(0L, fileChannel0.size());
      assertTrue(fileChannel0.isOpen());
      assertEquals(0L, fileChannel1.size());
      assertTrue(fileChannel1.isOpen());
      assertEquals(8L, fileChannel1.position());
      assertEquals(8L, fileChannel2.position());
      assertEquals(0L, fileChannel2.size());
      assertTrue(fileChannel2.isOpen());
      assertEquals("UTF8", zipArchiveOutputStream1.getEncoding());
      assertEquals(0, zipArchiveOutputStream1.getCount());
      assertEquals(0L, zipArchiveOutputStream1.getBytesWritten());
      assertTrue(zipArchiveOutputStream1.isSeekable());
      assertNotNull(zipArchiveOutputStream1);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      
      zipArchiveOutputStream1.writeDataDescriptor(zipArchiveEntry0);
      assertFalse(zipArchiveOutputStream1.equals((Object)zipArchiveOutputStream0));
      assertEquals(0, zipArchiveEntry0.getInternalAttributes());
      assertEquals("", zipArchiveEntry0.getName());
      assertFalse(zipArchiveEntry0.isStreamContiguous());
      assertFalse(zipArchiveEntry0.isDirectory());
      assertEquals(0, zipArchiveEntry0.getPlatform());
      assertEquals("", zipArchiveEntry0.toString());
      assertFalse(zipArchiveEntry0.isUnixSymlink());
      assertNull(zipArchiveEntry0.getComment());
      assertEquals((-1L), zipArchiveEntry0.getDataOffset());
      assertEquals(0, zipArchiveEntry0.getRawFlag());
      assertEquals((-1L), zipArchiveEntry0.getCrc());
      assertEquals((-1L), zipArchiveEntry0.getSize());
      assertEquals(0, zipArchiveEntry0.getUnixMode());
      assertEquals(0, zipArchiveEntry0.getVersionMadeBy());
      assertEquals(0, zipArchiveEntry0.getVersionRequired());
      assertEquals((-1L), zipArchiveEntry0.getCompressedSize());
      assertEquals((-1), zipArchiveEntry0.getMethod());
      assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
      assertEquals(8L, fileChannel0.position());
      assertEquals(0L, fileChannel0.size());
      assertTrue(fileChannel0.isOpen());
      assertEquals(0L, fileChannel1.size());
      assertTrue(fileChannel1.isOpen());
      assertEquals(8L, fileChannel1.position());
      assertEquals(8L, fileChannel2.position());
      assertEquals(0L, fileChannel2.size());
      assertTrue(fileChannel2.isOpen());
      assertEquals("UTF8", zipArchiveOutputStream1.getEncoding());
      assertEquals(0, zipArchiveOutputStream1.getCount());
      assertEquals(0L, zipArchiveOutputStream1.getBytesWritten());
      assertTrue(zipArchiveOutputStream1.isSeekable());
      assertSame(fileChannel0, fileChannel2);
      assertSame(fileChannel0, fileChannel1);
      assertSame(fileChannel1, fileChannel0);
      assertSame(fileChannel1, fileChannel2);
      assertSame(fileChannel2, fileChannel0);
      assertSame(fileChannel2, fileChannel1);
      assertNotSame(zipArchiveOutputStream1, zipArchiveOutputStream0);
      assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      
      zipArchiveOutputStream1.putArchiveEntry(zipArchiveEntry0);
      assertFalse(zipArchiveOutputStream1.equals((Object)zipArchiveOutputStream0));
      assertEquals(0, zipArchiveEntry0.getInternalAttributes());
      assertEquals("", zipArchiveEntry0.getName());
      assertFalse(zipArchiveEntry0.isStreamContiguous());
      assertFalse(zipArchiveEntry0.isDirectory());
      assertEquals(8, zipArchiveEntry0.getMethod());
      assertEquals(0, zipArchiveEntry0.getPlatform());
      assertEquals("", zipArchiveEntry0.toString());
      assertFalse(zipArchiveEntry0.isUnixSymlink());
      assertNull(zipArchiveEntry0.getComment());
      assertEquals((-1L), zipArchiveEntry0.getDataOffset());
      assertEquals(0, zipArchiveEntry0.getRawFlag());
      assertEquals((-1L), zipArchiveEntry0.getCrc());
      assertEquals((-1L), zipArchiveEntry0.getSize());
      assertEquals(0, zipArchiveEntry0.getUnixMode());
      assertEquals(0, zipArchiveEntry0.getVersionMadeBy());
      assertEquals(0, zipArchiveEntry0.getVersionRequired());
      assertEquals((-1L), zipArchiveEntry0.getCompressedSize());
      assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
      assertEquals(58L, fileChannel0.size());
      assertEquals(58L, fileChannel0.position());
      assertTrue(fileChannel0.isOpen());
      assertEquals(58L, fileChannel1.position());
      assertTrue(fileChannel1.isOpen());
      assertEquals(58L, fileChannel1.size());
      assertEquals(58L, fileChannel2.position());
      assertEquals(58L, fileChannel2.size());
      assertTrue(fileChannel2.isOpen());
      assertEquals("UTF8", zipArchiveOutputStream1.getEncoding());
      assertEquals(0, zipArchiveOutputStream1.getCount());
      assertEquals(0L, zipArchiveOutputStream1.getBytesWritten());
      assertTrue(zipArchiveOutputStream1.isSeekable());
      assertSame(fileChannel0, fileChannel2);
      assertSame(fileChannel0, fileChannel1);
      assertSame(fileChannel1, fileChannel0);
      assertSame(fileChannel1, fileChannel2);
      assertSame(fileChannel2, fileChannel0);
      assertSame(fileChannel2, fileChannel1);
      assertNotSame(zipArchiveOutputStream1, zipArchiveOutputStream0);
      assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      
      zipArchiveOutputStream0.setMethod(238);
      assertFalse(zipArchiveOutputStream0.equals((Object)zipArchiveOutputStream1));
      assertTrue(file0.canExecute());
      assertTrue(file0.canRead());
      assertTrue(file0.isAbsolute());
      assertTrue(file0.isFile());
      assertEquals("/tmp/9SOzK.T>_.j9(0wMcsdgq", file0.toString());
      assertEquals("9SOzK.T>_.j9(0wMcsdgq", file0.getName());
      assertEquals("/tmp", file0.getParent());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals(0L, file0.getFreeSpace());
      assertTrue(file0.canWrite());
      assertFalse(file0.isHidden());
      assertFalse(file0.isDirectory());
      assertEquals(0L, file0.length());
      assertEquals(1392409281320L, file0.lastModified());
      assertTrue(file0.exists());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertTrue(zipArchiveOutputStream0.isSeekable());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertNotSame(zipArchiveOutputStream0, zipArchiveOutputStream1);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      
      zipArchiveOutputStream1.writeCentralFileHeader(zipArchiveEntry0);
      assertFalse(zipArchiveOutputStream1.equals((Object)zipArchiveOutputStream0));
      assertEquals(0, zipArchiveEntry0.getInternalAttributes());
      assertEquals("", zipArchiveEntry0.getName());
      assertFalse(zipArchiveEntry0.isStreamContiguous());
      assertFalse(zipArchiveEntry0.isDirectory());
      assertEquals(8, zipArchiveEntry0.getMethod());
      assertEquals(0, zipArchiveEntry0.getPlatform());
      assertEquals("", zipArchiveEntry0.toString());
      assertFalse(zipArchiveEntry0.isUnixSymlink());
      assertNull(zipArchiveEntry0.getComment());
      assertEquals((-1L), zipArchiveEntry0.getDataOffset());
      assertEquals(0, zipArchiveEntry0.getRawFlag());
      assertEquals((-1L), zipArchiveEntry0.getCrc());
      assertEquals((-1L), zipArchiveEntry0.getSize());
      assertEquals(0, zipArchiveEntry0.getUnixMode());
      assertEquals(0, zipArchiveEntry0.getVersionMadeBy());
      assertEquals(0, zipArchiveEntry0.getVersionRequired());
      assertEquals((-1L), zipArchiveEntry0.getCompressedSize());
      assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
      assertEquals(108L, fileChannel0.position());
      assertEquals(108L, fileChannel0.size());
      assertTrue(fileChannel0.isOpen());
      assertEquals(108L, fileChannel1.position());
      assertTrue(fileChannel1.isOpen());
      assertEquals(108L, fileChannel1.size());
      assertEquals(108L, fileChannel2.position());
      assertEquals(108L, fileChannel2.size());
      assertTrue(fileChannel2.isOpen());
      assertEquals("UTF8", zipArchiveOutputStream1.getEncoding());
      assertEquals(0, zipArchiveOutputStream1.getCount());
      assertEquals(0L, zipArchiveOutputStream1.getBytesWritten());
      assertTrue(zipArchiveOutputStream1.isSeekable());
      assertSame(fileChannel0, fileChannel2);
      assertSame(fileChannel0, fileChannel1);
      assertSame(fileChannel1, fileChannel0);
      assertSame(fileChannel1, fileChannel2);
      assertSame(fileChannel2, fileChannel0);
      assertSame(fileChannel2, fileChannel1);
      assertNotSame(zipArchiveOutputStream1, zipArchiveOutputStream0);
      assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      
      zipArchiveOutputStream1.setUseLanguageEncodingFlag(false);
      assertFalse(zipArchiveOutputStream1.equals((Object)zipArchiveOutputStream0));
      assertEquals(108L, fileChannel0.position());
      assertEquals(108L, fileChannel0.size());
      assertTrue(fileChannel0.isOpen());
      assertEquals(108L, fileChannel1.position());
      assertTrue(fileChannel1.isOpen());
      assertEquals(108L, fileChannel1.size());
      assertEquals(108L, fileChannel2.position());
      assertEquals(108L, fileChannel2.size());
      assertTrue(fileChannel2.isOpen());
      assertEquals("UTF8", zipArchiveOutputStream1.getEncoding());
      assertEquals(0, zipArchiveOutputStream1.getCount());
      assertEquals(0L, zipArchiveOutputStream1.getBytesWritten());
      assertTrue(zipArchiveOutputStream1.isSeekable());
      assertSame(fileChannel0, fileChannel2);
      assertSame(fileChannel0, fileChannel1);
      assertSame(fileChannel1, fileChannel0);
      assertSame(fileChannel1, fileChannel2);
      assertSame(fileChannel2, fileChannel0);
      assertSame(fileChannel2, fileChannel1);
      assertNotSame(zipArchiveOutputStream1, zipArchiveOutputStream0);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      
      zipArchiveOutputStream1.putArchiveEntry(zipArchiveEntry0);
      assertFalse(zipArchiveOutputStream1.equals((Object)zipArchiveOutputStream0));
      assertEquals(0, zipArchiveEntry0.getInternalAttributes());
      assertEquals("", zipArchiveEntry0.getName());
      assertFalse(zipArchiveEntry0.isStreamContiguous());
      assertFalse(zipArchiveEntry0.isDirectory());
      assertEquals(52L, zipArchiveEntry0.getCompressedSize());
      assertEquals(8, zipArchiveEntry0.getMethod());
      assertEquals(0, zipArchiveEntry0.getPlatform());
      assertEquals("", zipArchiveEntry0.toString());
      assertFalse(zipArchiveEntry0.isUnixSymlink());
      assertNull(zipArchiveEntry0.getComment());
      assertEquals((-1L), zipArchiveEntry0.getDataOffset());
      assertEquals(0, zipArchiveEntry0.getRawFlag());
      assertEquals(0L, zipArchiveEntry0.getCrc());
      assertEquals(0L, zipArchiveEntry0.getSize());
      assertEquals(0, zipArchiveEntry0.getUnixMode());
      assertEquals(0, zipArchiveEntry0.getVersionMadeBy());
      assertEquals(0, zipArchiveEntry0.getVersionRequired());
      assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
      assertEquals(140L, fileChannel0.position());
      assertEquals(140L, fileChannel0.size());
      assertTrue(fileChannel0.isOpen());
      assertEquals(140L, fileChannel1.position());
      assertTrue(fileChannel1.isOpen());
      assertEquals(140L, fileChannel1.size());
      assertEquals(140L, fileChannel2.position());
      assertEquals(140L, fileChannel2.size());
      assertTrue(fileChannel2.isOpen());
      assertEquals("UTF8", zipArchiveOutputStream1.getEncoding());
      assertEquals(0, zipArchiveOutputStream1.getCount());
      assertEquals(0L, zipArchiveOutputStream1.getBytesWritten());
      assertTrue(zipArchiveOutputStream1.isSeekable());
      assertSame(fileChannel0, fileChannel2);
      assertSame(fileChannel0, fileChannel1);
      assertSame(fileChannel1, fileChannel0);
      assertSame(fileChannel1, fileChannel2);
      assertSame(fileChannel2, fileChannel0);
      assertSame(fileChannel2, fileChannel1);
      assertNotSame(zipArchiveOutputStream1, zipArchiveOutputStream0);
      assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      
      zipArchiveOutputStream0.setMethod(2040);
      assertFalse(zipArchiveOutputStream0.equals((Object)zipArchiveOutputStream1));
      assertTrue(file0.canExecute());
      assertTrue(file0.canRead());
      assertTrue(file0.isAbsolute());
      assertTrue(file0.isFile());
      assertEquals("/tmp/9SOzK.T>_.j9(0wMcsdgq", file0.toString());
      assertEquals("9SOzK.T>_.j9(0wMcsdgq", file0.getName());
      assertEquals("/tmp", file0.getParent());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals(0L, file0.getFreeSpace());
      assertTrue(file0.canWrite());
      assertFalse(file0.isHidden());
      assertFalse(file0.isDirectory());
      assertEquals(0L, file0.length());
      assertEquals(1392409281320L, file0.lastModified());
      assertTrue(file0.exists());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertTrue(zipArchiveOutputStream0.isSeekable());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertNotSame(zipArchiveOutputStream0, zipArchiveOutputStream1);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      
      zipArchiveOutputStream0.close();
      assertFalse(zipArchiveOutputStream0.equals((Object)zipArchiveOutputStream1));
      assertTrue(file0.canExecute());
      assertTrue(file0.canRead());
      assertTrue(file0.isAbsolute());
      assertTrue(file0.isFile());
      assertEquals("/tmp/9SOzK.T>_.j9(0wMcsdgq", file0.toString());
      assertEquals("9SOzK.T>_.j9(0wMcsdgq", file0.getName());
      assertEquals("/tmp", file0.getParent());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals(0L, file0.getFreeSpace());
      assertTrue(file0.canWrite());
      assertFalse(file0.isHidden());
      assertFalse(file0.isDirectory());
      assertEquals(0L, file0.length());
      assertEquals(1392409281320L, file0.lastModified());
      assertTrue(file0.exists());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertTrue(zipArchiveOutputStream0.isSeekable());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertNotSame(zipArchiveOutputStream0, zipArchiveOutputStream1);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      
//      try { 
        zipArchiveOutputStream0.closeArchiveEntry();
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Stream has already been finished
//         //
//         verifyException("org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream", e);
//      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      File file0 = MockFile.createTempFile("9SOzK.T>_.j9(", "wcsdgq");
      assertEquals("9SOzK.T>_.j9(0wcsdgq", file0.getName());
      assertFalse(file0.isDirectory());
      assertEquals(0L, file0.length());
      assertTrue(file0.exists());
      assertTrue(file0.isFile());
      assertTrue(file0.canRead());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals("/tmp/9SOzK.T>_.j9(0wcsdgq", file0.toString());
      assertEquals(1392409281320L, file0.lastModified());
      assertTrue(file0.isAbsolute());
      assertTrue(file0.canExecute());
      assertEquals("/tmp", file0.getParent());
      assertEquals(0L, file0.getFreeSpace());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      assertTrue(file0.canWrite());
      assertNotNull(file0);
      
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(file0);
      assertEquals("9SOzK.T>_.j9(0wcsdgq", file0.getName());
      assertFalse(file0.isDirectory());
      assertEquals(0L, file0.length());
      assertTrue(file0.exists());
      assertTrue(file0.isFile());
      assertTrue(file0.canRead());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals("/tmp/9SOzK.T>_.j9(0wcsdgq", file0.toString());
      assertEquals(1392409281320L, file0.lastModified());
      assertTrue(file0.isAbsolute());
      assertTrue(file0.canExecute());
      assertEquals("/tmp", file0.getParent());
      assertEquals(0L, file0.getFreeSpace());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      assertTrue(file0.canWrite());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertTrue(zipArchiveOutputStream0.isSeekable());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertNotNull(zipArchiveOutputStream0);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      
      zipArchiveOutputStream0.writeCentralDirectoryEnd();
      assertEquals("9SOzK.T>_.j9(0wcsdgq", file0.getName());
      assertFalse(file0.isDirectory());
      assertEquals(0L, file0.length());
      assertTrue(file0.exists());
      assertTrue(file0.isFile());
      assertTrue(file0.canRead());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals("/tmp/9SOzK.T>_.j9(0wcsdgq", file0.toString());
      assertEquals(1392409281320L, file0.lastModified());
      assertTrue(file0.isAbsolute());
      assertTrue(file0.canExecute());
      assertEquals("/tmp", file0.getParent());
      assertEquals(0L, file0.getFreeSpace());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      assertTrue(file0.canWrite());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertTrue(zipArchiveOutputStream0.isSeekable());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      
      file0.deleteOnExit();
      assertEquals("9SOzK.T>_.j9(0wcsdgq", file0.getName());
      assertFalse(file0.isDirectory());
      assertEquals(0L, file0.length());
      assertTrue(file0.exists());
      assertTrue(file0.isFile());
      assertTrue(file0.canRead());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals("/tmp/9SOzK.T>_.j9(0wcsdgq", file0.toString());
      assertEquals(1392409281320L, file0.lastModified());
      assertTrue(file0.isAbsolute());
      assertTrue(file0.canExecute());
      assertEquals("/tmp", file0.getParent());
      assertEquals(0L, file0.getFreeSpace());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      assertTrue(file0.canWrite());
      
      ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry("wcsdgq");
      assertEquals(0, zipArchiveEntry0.getPlatform());
      assertEquals(0, zipArchiveEntry0.getVersionMadeBy());
      assertEquals((-1L), zipArchiveEntry0.getSize());
      assertEquals(0, zipArchiveEntry0.getInternalAttributes());
      assertEquals("wcsdgq", zipArchiveEntry0.getName());
      assertFalse(zipArchiveEntry0.isUnixSymlink());
      assertFalse(zipArchiveEntry0.isStreamContiguous());
      assertEquals((-1L), zipArchiveEntry0.getDataOffset());
      assertNull(zipArchiveEntry0.getComment());
      assertEquals(0, zipArchiveEntry0.getVersionRequired());
      assertEquals((-1L), zipArchiveEntry0.getCompressedSize());
      assertEquals((-1L), zipArchiveEntry0.getCrc());
      assertFalse(zipArchiveEntry0.isDirectory());
      assertEquals(0, zipArchiveEntry0.getUnixMode());
      assertEquals(0, zipArchiveEntry0.getRawFlag());
      assertEquals("wcsdgq", zipArchiveEntry0.toString());
      assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
      assertEquals((-1), zipArchiveEntry0.getMethod());
      assertNotNull(zipArchiveEntry0);
      assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      
      zipArchiveOutputStream0.setLevel(3);
      assertEquals("9SOzK.T>_.j9(0wcsdgq", file0.getName());
      assertFalse(file0.isDirectory());
      assertEquals(0L, file0.length());
      assertTrue(file0.exists());
      assertTrue(file0.isFile());
      assertTrue(file0.canRead());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals("/tmp/9SOzK.T>_.j9(0wcsdgq", file0.toString());
      assertEquals(1392409281320L, file0.lastModified());
      assertTrue(file0.isAbsolute());
      assertTrue(file0.canExecute());
      assertEquals("/tmp", file0.getParent());
      assertEquals(0L, file0.getFreeSpace());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      assertTrue(file0.canWrite());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertTrue(zipArchiveOutputStream0.isSeekable());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      
      zipArchiveOutputStream0.putArchiveEntry(zipArchiveEntry0);
      assertEquals("9SOzK.T>_.j9(0wcsdgq", file0.getName());
      assertFalse(file0.isDirectory());
      assertEquals(0L, file0.length());
      assertTrue(file0.exists());
      assertTrue(file0.isFile());
      assertTrue(file0.canRead());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals("/tmp/9SOzK.T>_.j9(0wcsdgq", file0.toString());
      assertEquals(1392409281320L, file0.lastModified());
      assertTrue(file0.isAbsolute());
      assertTrue(file0.canExecute());
      assertEquals("/tmp", file0.getParent());
      assertEquals(0L, file0.getFreeSpace());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      assertTrue(file0.canWrite());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertTrue(zipArchiveOutputStream0.isSeekable());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals(0, zipArchiveEntry0.getPlatform());
      assertEquals(0, zipArchiveEntry0.getVersionMadeBy());
      assertEquals((-1L), zipArchiveEntry0.getSize());
      assertEquals(0, zipArchiveEntry0.getInternalAttributes());
      assertEquals("wcsdgq", zipArchiveEntry0.getName());
      assertFalse(zipArchiveEntry0.isUnixSymlink());
      assertFalse(zipArchiveEntry0.isStreamContiguous());
      assertEquals((-1L), zipArchiveEntry0.getDataOffset());
      assertNull(zipArchiveEntry0.getComment());
      assertEquals(0, zipArchiveEntry0.getVersionRequired());
      assertEquals((-1L), zipArchiveEntry0.getCompressedSize());
      assertEquals((-1L), zipArchiveEntry0.getCrc());
      assertFalse(zipArchiveEntry0.isDirectory());
      assertEquals(8, zipArchiveEntry0.getMethod());
      assertEquals(0, zipArchiveEntry0.getUnixMode());
      assertEquals(0, zipArchiveEntry0.getRawFlag());
      assertEquals("wcsdgq", zipArchiveEntry0.toString());
      assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      
      zipArchiveOutputStream0.setUseLanguageEncodingFlag(true);
      assertEquals("9SOzK.T>_.j9(0wcsdgq", file0.getName());
      assertFalse(file0.isDirectory());
      assertEquals(0L, file0.length());
      assertTrue(file0.exists());
      assertTrue(file0.isFile());
      assertTrue(file0.canRead());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals("/tmp/9SOzK.T>_.j9(0wcsdgq", file0.toString());
      assertEquals(1392409281320L, file0.lastModified());
      assertTrue(file0.isAbsolute());
      assertTrue(file0.canExecute());
      assertEquals("/tmp", file0.getParent());
      assertEquals(0L, file0.getFreeSpace());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      assertTrue(file0.canWrite());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertTrue(zipArchiveOutputStream0.isSeekable());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      
      zipArchiveEntry0.setVersionMadeBy(4736);
      assertEquals(4736, zipArchiveEntry0.getVersionMadeBy());
      assertEquals(0, zipArchiveEntry0.getPlatform());
      assertEquals((-1L), zipArchiveEntry0.getSize());
      assertEquals(0, zipArchiveEntry0.getInternalAttributes());
      assertEquals("wcsdgq", zipArchiveEntry0.getName());
      assertFalse(zipArchiveEntry0.isUnixSymlink());
      assertFalse(zipArchiveEntry0.isStreamContiguous());
      assertEquals((-1L), zipArchiveEntry0.getDataOffset());
      assertNull(zipArchiveEntry0.getComment());
      assertEquals(0, zipArchiveEntry0.getVersionRequired());
      assertEquals((-1L), zipArchiveEntry0.getCompressedSize());
      assertEquals((-1L), zipArchiveEntry0.getCrc());
      assertFalse(zipArchiveEntry0.isDirectory());
      assertEquals(8, zipArchiveEntry0.getMethod());
      assertEquals(0, zipArchiveEntry0.getUnixMode());
      assertEquals(0, zipArchiveEntry0.getRawFlag());
      assertEquals("wcsdgq", zipArchiveEntry0.toString());
      assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
      assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      
      boolean boolean0 = zipArchiveOutputStream0.isSeekable();
      assertEquals("9SOzK.T>_.j9(0wcsdgq", file0.getName());
      assertFalse(file0.isDirectory());
      assertEquals(0L, file0.length());
      assertTrue(file0.exists());
      assertTrue(file0.isFile());
      assertTrue(file0.canRead());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals("/tmp/9SOzK.T>_.j9(0wcsdgq", file0.toString());
      assertEquals(1392409281320L, file0.lastModified());
      assertTrue(file0.isAbsolute());
      assertTrue(file0.canExecute());
      assertEquals("/tmp", file0.getParent());
      assertEquals(0L, file0.getFreeSpace());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      assertTrue(file0.canWrite());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertTrue(zipArchiveOutputStream0.isSeekable());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertTrue(boolean0);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      
      zipArchiveOutputStream0.putArchiveEntry(zipArchiveEntry0);
      assertEquals("9SOzK.T>_.j9(0wcsdgq", file0.getName());
      assertFalse(file0.isDirectory());
      assertEquals(0L, file0.length());
      assertTrue(file0.exists());
      assertTrue(file0.isFile());
      assertTrue(file0.canRead());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals("/tmp/9SOzK.T>_.j9(0wcsdgq", file0.toString());
      assertEquals(1392409281320L, file0.lastModified());
      assertTrue(file0.isAbsolute());
      assertTrue(file0.canExecute());
      assertEquals("/tmp", file0.getParent());
      assertEquals(0L, file0.getFreeSpace());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      assertTrue(file0.canWrite());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertTrue(zipArchiveOutputStream0.isSeekable());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals(4736, zipArchiveEntry0.getVersionMadeBy());
      assertEquals(0, zipArchiveEntry0.getPlatform());
      assertEquals(0L, zipArchiveEntry0.getSize());
      assertEquals(0, zipArchiveEntry0.getInternalAttributes());
      assertEquals("wcsdgq", zipArchiveEntry0.getName());
      assertFalse(zipArchiveEntry0.isUnixSymlink());
      assertFalse(zipArchiveEntry0.isStreamContiguous());
      assertEquals((-1L), zipArchiveEntry0.getDataOffset());
      assertNull(zipArchiveEntry0.getComment());
      assertEquals(2L, zipArchiveEntry0.getCompressedSize());
      assertEquals(0, zipArchiveEntry0.getVersionRequired());
      assertEquals(0L, zipArchiveEntry0.getCrc());
      assertFalse(zipArchiveEntry0.isDirectory());
      assertEquals(8, zipArchiveEntry0.getMethod());
      assertEquals(0, zipArchiveEntry0.getUnixMode());
      assertEquals(0, zipArchiveEntry0.getRawFlag());
      assertEquals("wcsdgq", zipArchiveEntry0.toString());
      assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      
      zipArchiveOutputStream0.setMethod(0);
      assertEquals("9SOzK.T>_.j9(0wcsdgq", file0.getName());
      assertFalse(file0.isDirectory());
      assertEquals(0L, file0.length());
      assertTrue(file0.exists());
      assertTrue(file0.isFile());
      assertTrue(file0.canRead());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals("/tmp/9SOzK.T>_.j9(0wcsdgq", file0.toString());
      assertEquals(1392409281320L, file0.lastModified());
      assertTrue(file0.isAbsolute());
      assertTrue(file0.canExecute());
      assertEquals("/tmp", file0.getParent());
      assertEquals(0L, file0.getFreeSpace());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      assertTrue(file0.canWrite());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertTrue(zipArchiveOutputStream0.isSeekable());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      
      zipArchiveOutputStream0.writeCentralFileHeader(zipArchiveEntry0);
      assertEquals("9SOzK.T>_.j9(0wcsdgq", file0.getName());
      assertFalse(file0.isDirectory());
      assertEquals(0L, file0.length());
      assertTrue(file0.exists());
      assertTrue(file0.isFile());
      assertTrue(file0.canRead());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals("/tmp/9SOzK.T>_.j9(0wcsdgq", file0.toString());
      assertEquals(1392409281320L, file0.lastModified());
      assertTrue(file0.isAbsolute());
      assertTrue(file0.canExecute());
      assertEquals("/tmp", file0.getParent());
      assertEquals(0L, file0.getFreeSpace());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      assertTrue(file0.canWrite());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertTrue(zipArchiveOutputStream0.isSeekable());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals(4736, zipArchiveEntry0.getVersionMadeBy());
      assertEquals(0, zipArchiveEntry0.getPlatform());
      assertEquals(0L, zipArchiveEntry0.getSize());
      assertEquals(0, zipArchiveEntry0.getInternalAttributes());
      assertEquals("wcsdgq", zipArchiveEntry0.getName());
      assertFalse(zipArchiveEntry0.isUnixSymlink());
      assertFalse(zipArchiveEntry0.isStreamContiguous());
      assertEquals((-1L), zipArchiveEntry0.getDataOffset());
      assertNull(zipArchiveEntry0.getComment());
      assertEquals(2L, zipArchiveEntry0.getCompressedSize());
      assertEquals(0, zipArchiveEntry0.getVersionRequired());
      assertEquals(0L, zipArchiveEntry0.getCrc());
      assertFalse(zipArchiveEntry0.isDirectory());
      assertEquals(8, zipArchiveEntry0.getMethod());
      assertEquals(0, zipArchiveEntry0.getUnixMode());
      assertEquals(0, zipArchiveEntry0.getRawFlag());
      assertEquals("wcsdgq", zipArchiveEntry0.toString());
      assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      
      zipArchiveOutputStream0.setUseLanguageEncodingFlag(false);
      assertEquals("9SOzK.T>_.j9(0wcsdgq", file0.getName());
      assertFalse(file0.isDirectory());
      assertEquals(0L, file0.length());
      assertTrue(file0.exists());
      assertTrue(file0.isFile());
      assertTrue(file0.canRead());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals("/tmp/9SOzK.T>_.j9(0wcsdgq", file0.toString());
      assertEquals(1392409281320L, file0.lastModified());
      assertTrue(file0.isAbsolute());
      assertTrue(file0.canExecute());
      assertEquals("/tmp", file0.getParent());
      assertEquals(0L, file0.getFreeSpace());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      assertTrue(file0.canWrite());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertTrue(zipArchiveOutputStream0.isSeekable());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      
      ZipArchiveOutputStream.UnicodeExtraFieldPolicy zipArchiveOutputStream_UnicodeExtraFieldPolicy0 = ZipArchiveOutputStream.UnicodeExtraFieldPolicy.NEVER;
      assertEquals("never", zipArchiveOutputStream_UnicodeExtraFieldPolicy0.toString());
      assertNotNull(zipArchiveOutputStream_UnicodeExtraFieldPolicy0);
      
      ZipArchiveEntry zipArchiveEntry1 = new ZipArchiveEntry();
      assertFalse(zipArchiveEntry1.equals((Object)zipArchiveEntry0));
      assertFalse(zipArchiveEntry1.isStreamContiguous());
      assertEquals(0, zipArchiveEntry1.getInternalAttributes());
      assertFalse(zipArchiveEntry1.isUnixSymlink());
      assertFalse(zipArchiveEntry1.isDirectory());
      assertEquals(0, zipArchiveEntry1.getPlatform());
      assertEquals("", zipArchiveEntry1.toString());
      assertNull(zipArchiveEntry1.getComment());
      assertEquals(0, zipArchiveEntry1.getUnixMode());
      assertEquals(0, zipArchiveEntry1.getVersionMadeBy());
      assertEquals(0, zipArchiveEntry1.getRawFlag());
      assertEquals((-1L), zipArchiveEntry1.getSize());
      assertEquals((-1L), zipArchiveEntry1.getCrc());
      assertEquals(0L, zipArchiveEntry1.getExternalAttributes());
      assertEquals((-1L), zipArchiveEntry1.getDataOffset());
      assertEquals(0, zipArchiveEntry1.getVersionRequired());
      assertEquals((-1), zipArchiveEntry1.getMethod());
      assertEquals((-1L), zipArchiveEntry1.getCompressedSize());
      assertEquals("", zipArchiveEntry1.getName());
      assertNotNull(zipArchiveEntry1);
      assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      
      zipArchiveOutputStream0.writeCentralDirectoryEnd();
      assertEquals("9SOzK.T>_.j9(0wcsdgq", file0.getName());
      assertFalse(file0.isDirectory());
      assertEquals(0L, file0.length());
      assertTrue(file0.exists());
      assertTrue(file0.isFile());
      assertTrue(file0.canRead());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals("/tmp/9SOzK.T>_.j9(0wcsdgq", file0.toString());
      assertEquals(1392409281320L, file0.lastModified());
      assertTrue(file0.isAbsolute());
      assertTrue(file0.canExecute());
      assertEquals("/tmp", file0.getParent());
      assertEquals(0L, file0.getFreeSpace());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      assertTrue(file0.canWrite());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertTrue(zipArchiveOutputStream0.isSeekable());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedInputStream0);
      
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(pipedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pushbackInputStream0);
      
//      try { 
        zipArchiveOutputStream0.addRawArchiveEntry(zipArchiveEntry0, pushbackInputStream0);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Pipe not connected
//         //
//         verifyException("java.io.PipedInputStream", e);
//      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      File file0 = MockFile.createTempFile("9SOzK.T>_.j9(", "wMcsdgq");
      assertTrue(file0.canExecute());
      assertTrue(file0.canRead());
      assertTrue(file0.isAbsolute());
      assertEquals("/tmp/9SOzK.T>_.j9(0wMcsdgq", file0.toString());
      assertTrue(file0.isFile());
      assertEquals("9SOzK.T>_.j9(0wMcsdgq", file0.getName());
      assertEquals("/tmp", file0.getParent());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals(0L, file0.getFreeSpace());
      assertTrue(file0.canWrite());
      assertFalse(file0.isHidden());
      assertFalse(file0.isDirectory());
      assertEquals(0L, file0.length());
      assertEquals(1392409281320L, file0.lastModified());
      assertTrue(file0.exists());
      assertEquals(0L, file0.getTotalSpace());
      assertNotNull(file0);
      
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(file0);
      assertTrue(file0.canExecute());
      assertTrue(file0.canRead());
      assertTrue(file0.isAbsolute());
      assertEquals("/tmp/9SOzK.T>_.j9(0wMcsdgq", file0.toString());
      assertTrue(file0.isFile());
      assertEquals("9SOzK.T>_.j9(0wMcsdgq", file0.getName());
      assertEquals("/tmp", file0.getParent());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals(0L, file0.getFreeSpace());
      assertTrue(file0.canWrite());
      assertFalse(file0.isHidden());
      assertFalse(file0.isDirectory());
      assertEquals(0L, file0.length());
      assertEquals(1392409281320L, file0.lastModified());
      assertTrue(file0.exists());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertTrue(zipArchiveOutputStream0.isSeekable());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertNotNull(zipArchiveOutputStream0);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      
      zipArchiveOutputStream0.writeZip64CentralDirectory();
      assertTrue(file0.canExecute());
      assertTrue(file0.canRead());
      assertTrue(file0.isAbsolute());
      assertEquals("/tmp/9SOzK.T>_.j9(0wMcsdgq", file0.toString());
      assertTrue(file0.isFile());
      assertEquals("9SOzK.T>_.j9(0wMcsdgq", file0.getName());
      assertEquals("/tmp", file0.getParent());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals(0L, file0.getFreeSpace());
      assertTrue(file0.canWrite());
      assertFalse(file0.isHidden());
      assertFalse(file0.isDirectory());
      assertEquals(0L, file0.length());
      assertEquals(1392409281320L, file0.lastModified());
      assertTrue(file0.exists());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertTrue(zipArchiveOutputStream0.isSeekable());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      
      zipArchiveOutputStream0.writeCentralDirectoryEnd();
      assertTrue(file0.canExecute());
      assertTrue(file0.canRead());
      assertTrue(file0.isAbsolute());
      assertEquals("/tmp/9SOzK.T>_.j9(0wMcsdgq", file0.toString());
      assertTrue(file0.isFile());
      assertEquals("9SOzK.T>_.j9(0wMcsdgq", file0.getName());
      assertEquals("/tmp", file0.getParent());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals(0L, file0.getFreeSpace());
      assertTrue(file0.canWrite());
      assertFalse(file0.isHidden());
      assertFalse(file0.isDirectory());
      assertEquals(0L, file0.length());
      assertEquals(1392409281320L, file0.lastModified());
      assertTrue(file0.exists());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertTrue(zipArchiveOutputStream0.isSeekable());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      
      ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
      assertEquals(0, zipArchiveEntry0.getUnixMode());
      assertEquals((-1L), zipArchiveEntry0.getSize());
      assertEquals((-1L), zipArchiveEntry0.getCrc());
      assertEquals(0, zipArchiveEntry0.getRawFlag());
      assertEquals(0, zipArchiveEntry0.getVersionMadeBy());
      assertEquals((-1L), zipArchiveEntry0.getDataOffset());
      assertEquals("", zipArchiveEntry0.toString());
      assertNull(zipArchiveEntry0.getComment());
      assertFalse(zipArchiveEntry0.isStreamContiguous());
      assertEquals(0, zipArchiveEntry0.getPlatform());
      assertEquals(0, zipArchiveEntry0.getInternalAttributes());
      assertFalse(zipArchiveEntry0.isUnixSymlink());
      assertFalse(zipArchiveEntry0.isDirectory());
      assertEquals("", zipArchiveEntry0.getName());
      assertEquals((-1L), zipArchiveEntry0.getCompressedSize());
      assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
      assertEquals(0, zipArchiveEntry0.getVersionRequired());
      assertEquals((-1), zipArchiveEntry0.getMethod());
      assertNotNull(zipArchiveEntry0);
      assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      
      zipArchiveOutputStream0.putArchiveEntry(zipArchiveEntry0);
      assertTrue(file0.canExecute());
      assertTrue(file0.canRead());
      assertTrue(file0.isAbsolute());
      assertEquals("/tmp/9SOzK.T>_.j9(0wMcsdgq", file0.toString());
      assertTrue(file0.isFile());
      assertEquals("9SOzK.T>_.j9(0wMcsdgq", file0.getName());
      assertEquals("/tmp", file0.getParent());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals(0L, file0.getFreeSpace());
      assertTrue(file0.canWrite());
      assertFalse(file0.isHidden());
      assertFalse(file0.isDirectory());
      assertEquals(0L, file0.length());
      assertEquals(1392409281320L, file0.lastModified());
      assertTrue(file0.exists());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertTrue(zipArchiveOutputStream0.isSeekable());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals(0, zipArchiveEntry0.getUnixMode());
      assertEquals((-1L), zipArchiveEntry0.getSize());
      assertEquals((-1L), zipArchiveEntry0.getCrc());
      assertEquals(0, zipArchiveEntry0.getRawFlag());
      assertEquals(0, zipArchiveEntry0.getVersionMadeBy());
      assertEquals((-1L), zipArchiveEntry0.getDataOffset());
      assertEquals("", zipArchiveEntry0.toString());
      assertNull(zipArchiveEntry0.getComment());
      assertFalse(zipArchiveEntry0.isStreamContiguous());
      assertEquals(0, zipArchiveEntry0.getPlatform());
      assertEquals(0, zipArchiveEntry0.getInternalAttributes());
      assertFalse(zipArchiveEntry0.isUnixSymlink());
      assertFalse(zipArchiveEntry0.isDirectory());
      assertEquals(8, zipArchiveEntry0.getMethod());
      assertEquals("", zipArchiveEntry0.getName());
      assertEquals((-1L), zipArchiveEntry0.getCompressedSize());
      assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
      assertEquals(0, zipArchiveEntry0.getVersionRequired());
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      
      zipArchiveOutputStream0.setUseLanguageEncodingFlag(true);
      assertTrue(file0.canExecute());
      assertTrue(file0.canRead());
      assertTrue(file0.isAbsolute());
      assertEquals("/tmp/9SOzK.T>_.j9(0wMcsdgq", file0.toString());
      assertTrue(file0.isFile());
      assertEquals("9SOzK.T>_.j9(0wMcsdgq", file0.getName());
      assertEquals("/tmp", file0.getParent());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals(0L, file0.getFreeSpace());
      assertTrue(file0.canWrite());
      assertFalse(file0.isHidden());
      assertFalse(file0.isDirectory());
      assertEquals(0L, file0.length());
      assertEquals(1392409281320L, file0.lastModified());
      assertTrue(file0.exists());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertTrue(zipArchiveOutputStream0.isSeekable());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      ZipArchiveOutputStream zipArchiveOutputStream1 = new ZipArchiveOutputStream(zipArchiveOutputStream0);
      assertFalse(zipArchiveOutputStream1.equals((Object)zipArchiveOutputStream0));
      assertTrue(file0.canExecute());
      assertTrue(file0.canRead());
      assertTrue(file0.isAbsolute());
      assertEquals("/tmp/9SOzK.T>_.j9(0wMcsdgq", file0.toString());
      assertTrue(file0.isFile());
      assertEquals("9SOzK.T>_.j9(0wMcsdgq", file0.getName());
      assertEquals("/tmp", file0.getParent());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals(0L, file0.getFreeSpace());
      assertTrue(file0.canWrite());
      assertFalse(file0.isHidden());
      assertFalse(file0.isDirectory());
      assertEquals(0L, file0.length());
      assertEquals(1392409281320L, file0.lastModified());
      assertTrue(file0.exists());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertTrue(zipArchiveOutputStream0.isSeekable());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals(0, zipArchiveOutputStream1.getCount());
      assertEquals(0L, zipArchiveOutputStream1.getBytesWritten());
      assertFalse(zipArchiveOutputStream1.isSeekable());
      assertEquals("UTF8", zipArchiveOutputStream1.getEncoding());
      assertNotNull(zipArchiveOutputStream1);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      
      zipArchiveOutputStream0.writeDataDescriptor(zipArchiveEntry0);
      assertFalse(zipArchiveOutputStream0.equals((Object)zipArchiveOutputStream1));
      assertTrue(file0.canExecute());
      assertTrue(file0.canRead());
      assertTrue(file0.isAbsolute());
      assertEquals("/tmp/9SOzK.T>_.j9(0wMcsdgq", file0.toString());
      assertTrue(file0.isFile());
      assertEquals("9SOzK.T>_.j9(0wMcsdgq", file0.getName());
      assertEquals("/tmp", file0.getParent());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals(0L, file0.getFreeSpace());
      assertTrue(file0.canWrite());
      assertFalse(file0.isHidden());
      assertFalse(file0.isDirectory());
      assertEquals(0L, file0.length());
      assertEquals(1392409281320L, file0.lastModified());
      assertTrue(file0.exists());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertTrue(zipArchiveOutputStream0.isSeekable());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals(0, zipArchiveEntry0.getUnixMode());
      assertEquals((-1L), zipArchiveEntry0.getSize());
      assertEquals((-1L), zipArchiveEntry0.getCrc());
      assertEquals(0, zipArchiveEntry0.getRawFlag());
      assertEquals(0, zipArchiveEntry0.getVersionMadeBy());
      assertEquals((-1L), zipArchiveEntry0.getDataOffset());
      assertEquals("", zipArchiveEntry0.toString());
      assertNull(zipArchiveEntry0.getComment());
      assertFalse(zipArchiveEntry0.isStreamContiguous());
      assertEquals(0, zipArchiveEntry0.getPlatform());
      assertEquals(0, zipArchiveEntry0.getInternalAttributes());
      assertFalse(zipArchiveEntry0.isUnixSymlink());
      assertFalse(zipArchiveEntry0.isDirectory());
      assertEquals(8, zipArchiveEntry0.getMethod());
      assertEquals("", zipArchiveEntry0.getName());
      assertEquals((-1L), zipArchiveEntry0.getCompressedSize());
      assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
      assertEquals(0, zipArchiveEntry0.getVersionRequired());
      assertNotSame(zipArchiveOutputStream0, zipArchiveOutputStream1);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      
      zipArchiveOutputStream1.putArchiveEntry(zipArchiveEntry0);
      assertFalse(zipArchiveOutputStream0.equals((Object)zipArchiveOutputStream1));
      assertFalse(zipArchiveOutputStream1.equals((Object)zipArchiveOutputStream0));
      assertTrue(file0.canExecute());
      assertTrue(file0.canRead());
      assertTrue(file0.isAbsolute());
      assertEquals("/tmp/9SOzK.T>_.j9(0wMcsdgq", file0.toString());
      assertTrue(file0.isFile());
      assertEquals("9SOzK.T>_.j9(0wMcsdgq", file0.getName());
      assertEquals("/tmp", file0.getParent());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals(0L, file0.getFreeSpace());
      assertTrue(file0.canWrite());
      assertFalse(file0.isHidden());
      assertFalse(file0.isDirectory());
      assertEquals(0L, file0.length());
      assertEquals(1392409281320L, file0.lastModified());
      assertTrue(file0.exists());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertTrue(zipArchiveOutputStream0.isSeekable());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals(0, zipArchiveEntry0.getUnixMode());
      assertEquals((-1L), zipArchiveEntry0.getSize());
      assertEquals((-1L), zipArchiveEntry0.getCrc());
      assertEquals(0, zipArchiveEntry0.getRawFlag());
      assertEquals(0, zipArchiveEntry0.getVersionMadeBy());
      assertEquals((-1L), zipArchiveEntry0.getDataOffset());
      assertEquals("", zipArchiveEntry0.toString());
      assertNull(zipArchiveEntry0.getComment());
      assertFalse(zipArchiveEntry0.isStreamContiguous());
      assertEquals(0, zipArchiveEntry0.getPlatform());
      assertEquals(0, zipArchiveEntry0.getInternalAttributes());
      assertFalse(zipArchiveEntry0.isUnixSymlink());
      assertFalse(zipArchiveEntry0.isDirectory());
      assertEquals(8, zipArchiveEntry0.getMethod());
      assertEquals("", zipArchiveEntry0.getName());
      assertEquals((-1L), zipArchiveEntry0.getCompressedSize());
      assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
      assertEquals(0, zipArchiveEntry0.getVersionRequired());
      assertEquals(0, zipArchiveOutputStream1.getCount());
      assertEquals(0L, zipArchiveOutputStream1.getBytesWritten());
      assertFalse(zipArchiveOutputStream1.isSeekable());
      assertEquals("UTF8", zipArchiveOutputStream1.getEncoding());
      assertNotSame(zipArchiveOutputStream0, zipArchiveOutputStream1);
      assertNotSame(zipArchiveOutputStream1, zipArchiveOutputStream0);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      
      zipArchiveOutputStream1.setMethod(3);
      assertFalse(zipArchiveOutputStream0.equals((Object)zipArchiveOutputStream1));
      assertFalse(zipArchiveOutputStream1.equals((Object)zipArchiveOutputStream0));
      assertTrue(file0.canExecute());
      assertTrue(file0.canRead());
      assertTrue(file0.isAbsolute());
      assertEquals("/tmp/9SOzK.T>_.j9(0wMcsdgq", file0.toString());
      assertTrue(file0.isFile());
      assertEquals("9SOzK.T>_.j9(0wMcsdgq", file0.getName());
      assertEquals("/tmp", file0.getParent());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals(0L, file0.getFreeSpace());
      assertTrue(file0.canWrite());
      assertFalse(file0.isHidden());
      assertFalse(file0.isDirectory());
      assertEquals(0L, file0.length());
      assertEquals(1392409281320L, file0.lastModified());
      assertTrue(file0.exists());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertTrue(zipArchiveOutputStream0.isSeekable());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals(0, zipArchiveOutputStream1.getCount());
      assertEquals(0L, zipArchiveOutputStream1.getBytesWritten());
      assertFalse(zipArchiveOutputStream1.isSeekable());
      assertEquals("UTF8", zipArchiveOutputStream1.getEncoding());
      assertNotSame(zipArchiveOutputStream0, zipArchiveOutputStream1);
      assertNotSame(zipArchiveOutputStream1, zipArchiveOutputStream0);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      
      zipArchiveOutputStream0.writeCentralFileHeader(zipArchiveEntry0);
      assertFalse(zipArchiveOutputStream0.equals((Object)zipArchiveOutputStream1));
      assertTrue(file0.canExecute());
      assertTrue(file0.canRead());
      assertTrue(file0.isAbsolute());
      assertEquals("/tmp/9SOzK.T>_.j9(0wMcsdgq", file0.toString());
      assertTrue(file0.isFile());
      assertEquals("9SOzK.T>_.j9(0wMcsdgq", file0.getName());
      assertEquals("/tmp", file0.getParent());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals(0L, file0.getFreeSpace());
      assertTrue(file0.canWrite());
      assertFalse(file0.isHidden());
      assertFalse(file0.isDirectory());
      assertEquals(0L, file0.length());
      assertEquals(1392409281320L, file0.lastModified());
      assertTrue(file0.exists());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertTrue(zipArchiveOutputStream0.isSeekable());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals(0, zipArchiveEntry0.getUnixMode());
      assertEquals((-1L), zipArchiveEntry0.getSize());
      assertEquals((-1L), zipArchiveEntry0.getCrc());
      assertEquals(0, zipArchiveEntry0.getRawFlag());
      assertEquals(0, zipArchiveEntry0.getVersionMadeBy());
      assertEquals((-1L), zipArchiveEntry0.getDataOffset());
      assertEquals("", zipArchiveEntry0.toString());
      assertNull(zipArchiveEntry0.getComment());
      assertFalse(zipArchiveEntry0.isStreamContiguous());
      assertEquals(0, zipArchiveEntry0.getPlatform());
      assertEquals(0, zipArchiveEntry0.getInternalAttributes());
      assertFalse(zipArchiveEntry0.isUnixSymlink());
      assertFalse(zipArchiveEntry0.isDirectory());
      assertEquals(8, zipArchiveEntry0.getMethod());
      assertEquals("", zipArchiveEntry0.getName());
      assertEquals((-1L), zipArchiveEntry0.getCompressedSize());
      assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
      assertEquals(0, zipArchiveEntry0.getVersionRequired());
      assertNotSame(zipArchiveOutputStream0, zipArchiveOutputStream1);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      
      zipArchiveOutputStream1.setUseLanguageEncodingFlag(true);
      assertFalse(zipArchiveOutputStream0.equals((Object)zipArchiveOutputStream1));
      assertFalse(zipArchiveOutputStream1.equals((Object)zipArchiveOutputStream0));
      assertTrue(file0.canExecute());
      assertTrue(file0.canRead());
      assertTrue(file0.isAbsolute());
      assertEquals("/tmp/9SOzK.T>_.j9(0wMcsdgq", file0.toString());
      assertTrue(file0.isFile());
      assertEquals("9SOzK.T>_.j9(0wMcsdgq", file0.getName());
      assertEquals("/tmp", file0.getParent());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals(0L, file0.getFreeSpace());
      assertTrue(file0.canWrite());
      assertFalse(file0.isHidden());
      assertFalse(file0.isDirectory());
      assertEquals(0L, file0.length());
      assertEquals(1392409281320L, file0.lastModified());
      assertTrue(file0.exists());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertTrue(zipArchiveOutputStream0.isSeekable());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals(0, zipArchiveOutputStream1.getCount());
      assertEquals(0L, zipArchiveOutputStream1.getBytesWritten());
      assertFalse(zipArchiveOutputStream1.isSeekable());
      assertEquals("UTF8", zipArchiveOutputStream1.getEncoding());
      assertNotSame(zipArchiveOutputStream0, zipArchiveOutputStream1);
      assertNotSame(zipArchiveOutputStream1, zipArchiveOutputStream0);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      
      zipArchiveOutputStream1.putArchiveEntry(zipArchiveEntry0);
      assertFalse(zipArchiveOutputStream0.equals((Object)zipArchiveOutputStream1));
      assertFalse(zipArchiveOutputStream1.equals((Object)zipArchiveOutputStream0));
      assertTrue(file0.canExecute());
      assertTrue(file0.canRead());
      assertTrue(file0.isAbsolute());
      assertEquals("/tmp/9SOzK.T>_.j9(0wMcsdgq", file0.toString());
      assertTrue(file0.isFile());
      assertEquals("9SOzK.T>_.j9(0wMcsdgq", file0.getName());
      assertEquals("/tmp", file0.getParent());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals(0L, file0.getFreeSpace());
      assertTrue(file0.canWrite());
      assertFalse(file0.isHidden());
      assertFalse(file0.isDirectory());
      assertEquals(0L, file0.length());
      assertEquals(1392409281320L, file0.lastModified());
      assertTrue(file0.exists());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertTrue(zipArchiveOutputStream0.isSeekable());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals(0, zipArchiveEntry0.getUnixMode());
      assertEquals(0L, zipArchiveEntry0.getSize());
      assertEquals(0L, zipArchiveEntry0.getCrc());
      assertEquals(0, zipArchiveEntry0.getRawFlag());
      assertEquals(0, zipArchiveEntry0.getVersionMadeBy());
      assertEquals(2L, zipArchiveEntry0.getCompressedSize());
      assertEquals((-1L), zipArchiveEntry0.getDataOffset());
      assertEquals("", zipArchiveEntry0.toString());
      assertNull(zipArchiveEntry0.getComment());
      assertFalse(zipArchiveEntry0.isStreamContiguous());
      assertEquals(0, zipArchiveEntry0.getPlatform());
      assertEquals(0, zipArchiveEntry0.getInternalAttributes());
      assertFalse(zipArchiveEntry0.isUnixSymlink());
      assertFalse(zipArchiveEntry0.isDirectory());
      assertEquals(8, zipArchiveEntry0.getMethod());
      assertEquals("", zipArchiveEntry0.getName());
      assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
      assertEquals(0, zipArchiveEntry0.getVersionRequired());
      assertEquals(0, zipArchiveOutputStream1.getCount());
      assertEquals(0L, zipArchiveOutputStream1.getBytesWritten());
      assertFalse(zipArchiveOutputStream1.isSeekable());
      assertEquals("UTF8", zipArchiveOutputStream1.getEncoding());
      assertNotSame(zipArchiveOutputStream0, zipArchiveOutputStream1);
      assertNotSame(zipArchiveOutputStream1, zipArchiveOutputStream0);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      
      boolean boolean1 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "9SOzK.T>_.j9(");
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      zipArchiveOutputStream1.setMethod(760);
      assertFalse(zipArchiveOutputStream0.equals((Object)zipArchiveOutputStream1));
      assertFalse(zipArchiveOutputStream1.equals((Object)zipArchiveOutputStream0));
      assertTrue(file0.canExecute());
      assertTrue(file0.canRead());
      assertTrue(file0.isAbsolute());
      assertEquals("/tmp/9SOzK.T>_.j9(0wMcsdgq", file0.toString());
      assertTrue(file0.isFile());
      assertEquals("9SOzK.T>_.j9(0wMcsdgq", file0.getName());
      assertEquals("/tmp", file0.getParent());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals(0L, file0.getFreeSpace());
      assertTrue(file0.canWrite());
      assertFalse(file0.isHidden());
      assertFalse(file0.isDirectory());
      assertEquals(0L, file0.length());
      assertEquals(1392409281320L, file0.lastModified());
      assertTrue(file0.exists());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertTrue(zipArchiveOutputStream0.isSeekable());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals(0, zipArchiveOutputStream1.getCount());
      assertEquals(0L, zipArchiveOutputStream1.getBytesWritten());
      assertFalse(zipArchiveOutputStream1.isSeekable());
      assertEquals("UTF8", zipArchiveOutputStream1.getEncoding());
      assertNotSame(zipArchiveOutputStream0, zipArchiveOutputStream1);
      assertNotSame(zipArchiveOutputStream1, zipArchiveOutputStream0);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      
//      try { 
        zipArchiveOutputStream0.close();
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // This archive contains unclosed entries.
//         //
//         verifyException("org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream", e);
//      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      File file0 = MockFile.createTempFile("9SOzK.T>_.j9(", "wcsdgq");
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(1392409281320L, file0.lastModified());
      assertTrue(file0.exists());
      assertTrue(file0.isFile());
      assertEquals("/tmp", file0.getParent());
      assertTrue(file0.canRead());
      assertEquals("9SOzK.T>_.j9(0wcsdgq", file0.getName());
      assertEquals("/tmp/9SOzK.T>_.j9(0wcsdgq", file0.toString());
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isHidden());
      assertTrue(file0.canExecute());
      assertTrue(file0.isAbsolute());
      assertTrue(file0.canWrite());
      assertEquals(0L, file0.length());
      assertEquals(0L, file0.getFreeSpace());
      assertFalse(file0.isDirectory());
      assertNotNull(file0);
      
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(file0);
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(1392409281320L, file0.lastModified());
      assertTrue(file0.exists());
      assertTrue(file0.isFile());
      assertEquals("/tmp", file0.getParent());
      assertTrue(file0.canRead());
      assertEquals("9SOzK.T>_.j9(0wcsdgq", file0.getName());
      assertEquals("/tmp/9SOzK.T>_.j9(0wcsdgq", file0.toString());
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isHidden());
      assertTrue(file0.canExecute());
      assertTrue(file0.isAbsolute());
      assertTrue(file0.canWrite());
      assertEquals(0L, file0.length());
      assertEquals(0L, file0.getFreeSpace());
      assertFalse(file0.isDirectory());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertTrue(zipArchiveOutputStream0.isSeekable());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertNotNull(zipArchiveOutputStream0);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      
      zipArchiveOutputStream0.writeCentralDirectoryEnd();
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(1392409281320L, file0.lastModified());
      assertTrue(file0.exists());
      assertTrue(file0.isFile());
      assertEquals("/tmp", file0.getParent());
      assertTrue(file0.canRead());
      assertEquals("9SOzK.T>_.j9(0wcsdgq", file0.getName());
      assertEquals("/tmp/9SOzK.T>_.j9(0wcsdgq", file0.toString());
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isHidden());
      assertTrue(file0.canExecute());
      assertTrue(file0.isAbsolute());
      assertTrue(file0.canWrite());
      assertEquals(0L, file0.length());
      assertEquals(0L, file0.getFreeSpace());
      assertFalse(file0.isDirectory());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertTrue(zipArchiveOutputStream0.isSeekable());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      
      file0.deleteOnExit();
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(1392409281320L, file0.lastModified());
      assertTrue(file0.exists());
      assertTrue(file0.isFile());
      assertEquals("/tmp", file0.getParent());
      assertTrue(file0.canRead());
      assertEquals("9SOzK.T>_.j9(0wcsdgq", file0.getName());
      assertEquals("/tmp/9SOzK.T>_.j9(0wcsdgq", file0.toString());
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isHidden());
      assertTrue(file0.canExecute());
      assertTrue(file0.isAbsolute());
      assertTrue(file0.canWrite());
      assertEquals(0L, file0.length());
      assertEquals(0L, file0.getFreeSpace());
      assertFalse(file0.isDirectory());
      
      ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry("wcsdgq");
      assertEquals("wcsdgq", zipArchiveEntry0.getName());
      assertFalse(zipArchiveEntry0.isStreamContiguous());
      assertEquals("wcsdgq", zipArchiveEntry0.toString());
      assertFalse(zipArchiveEntry0.isDirectory());
      assertEquals(0, zipArchiveEntry0.getPlatform());
      assertEquals(0, zipArchiveEntry0.getVersionRequired());
      assertEquals((-1), zipArchiveEntry0.getMethod());
      assertEquals((-1L), zipArchiveEntry0.getCompressedSize());
      assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
      assertEquals(0, zipArchiveEntry0.getVersionMadeBy());
      assertEquals((-1L), zipArchiveEntry0.getCrc());
      assertEquals(0, zipArchiveEntry0.getRawFlag());
      assertEquals(0, zipArchiveEntry0.getUnixMode());
      assertEquals((-1L), zipArchiveEntry0.getSize());
      assertNull(zipArchiveEntry0.getComment());
      assertEquals(0, zipArchiveEntry0.getInternalAttributes());
      assertEquals((-1L), zipArchiveEntry0.getDataOffset());
      assertFalse(zipArchiveEntry0.isUnixSymlink());
      assertNotNull(zipArchiveEntry0);
      assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      
      zipArchiveOutputStream0.setLevel(3);
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(1392409281320L, file0.lastModified());
      assertTrue(file0.exists());
      assertTrue(file0.isFile());
      assertEquals("/tmp", file0.getParent());
      assertTrue(file0.canRead());
      assertEquals("9SOzK.T>_.j9(0wcsdgq", file0.getName());
      assertEquals("/tmp/9SOzK.T>_.j9(0wcsdgq", file0.toString());
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isHidden());
      assertTrue(file0.canExecute());
      assertTrue(file0.isAbsolute());
      assertTrue(file0.canWrite());
      assertEquals(0L, file0.length());
      assertEquals(0L, file0.getFreeSpace());
      assertFalse(file0.isDirectory());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertTrue(zipArchiveOutputStream0.isSeekable());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      
      zipArchiveOutputStream0.putArchiveEntry(zipArchiveEntry0);
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(1392409281320L, file0.lastModified());
      assertTrue(file0.exists());
      assertTrue(file0.isFile());
      assertEquals("/tmp", file0.getParent());
      assertTrue(file0.canRead());
      assertEquals("9SOzK.T>_.j9(0wcsdgq", file0.getName());
      assertEquals("/tmp/9SOzK.T>_.j9(0wcsdgq", file0.toString());
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isHidden());
      assertTrue(file0.canExecute());
      assertTrue(file0.isAbsolute());
      assertTrue(file0.canWrite());
      assertEquals(0L, file0.length());
      assertEquals(0L, file0.getFreeSpace());
      assertFalse(file0.isDirectory());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertTrue(zipArchiveOutputStream0.isSeekable());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertEquals("wcsdgq", zipArchiveEntry0.getName());
      assertFalse(zipArchiveEntry0.isStreamContiguous());
      assertEquals("wcsdgq", zipArchiveEntry0.toString());
      assertEquals(8, zipArchiveEntry0.getMethod());
      assertFalse(zipArchiveEntry0.isDirectory());
      assertEquals(0, zipArchiveEntry0.getPlatform());
      assertEquals(0, zipArchiveEntry0.getVersionRequired());
      assertEquals((-1L), zipArchiveEntry0.getCompressedSize());
      assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
      assertEquals(0, zipArchiveEntry0.getVersionMadeBy());
      assertEquals((-1L), zipArchiveEntry0.getCrc());
      assertEquals(0, zipArchiveEntry0.getRawFlag());
      assertEquals(0, zipArchiveEntry0.getUnixMode());
      assertEquals((-1L), zipArchiveEntry0.getSize());
      assertNull(zipArchiveEntry0.getComment());
      assertEquals(0, zipArchiveEntry0.getInternalAttributes());
      assertEquals((-1L), zipArchiveEntry0.getDataOffset());
      assertFalse(zipArchiveEntry0.isUnixSymlink());
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      
      zipArchiveOutputStream0.setUseLanguageEncodingFlag(true);
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(1392409281320L, file0.lastModified());
      assertTrue(file0.exists());
      assertTrue(file0.isFile());
      assertEquals("/tmp", file0.getParent());
      assertTrue(file0.canRead());
      assertEquals("9SOzK.T>_.j9(0wcsdgq", file0.getName());
      assertEquals("/tmp/9SOzK.T>_.j9(0wcsdgq", file0.toString());
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isHidden());
      assertTrue(file0.canExecute());
      assertTrue(file0.isAbsolute());
      assertTrue(file0.canWrite());
      assertEquals(0L, file0.length());
      assertEquals(0L, file0.getFreeSpace());
      assertFalse(file0.isDirectory());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertTrue(zipArchiveOutputStream0.isSeekable());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      
      boolean boolean0 = zipArchiveOutputStream0.isSeekable();
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(1392409281320L, file0.lastModified());
      assertTrue(file0.exists());
      assertTrue(file0.isFile());
      assertEquals("/tmp", file0.getParent());
      assertTrue(file0.canRead());
      assertEquals("9SOzK.T>_.j9(0wcsdgq", file0.getName());
      assertEquals("/tmp/9SOzK.T>_.j9(0wcsdgq", file0.toString());
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isHidden());
      assertTrue(file0.canExecute());
      assertTrue(file0.isAbsolute());
      assertTrue(file0.canWrite());
      assertEquals(0L, file0.length());
      assertEquals(0L, file0.getFreeSpace());
      assertFalse(file0.isDirectory());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertTrue(zipArchiveOutputStream0.isSeekable());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertTrue(boolean0);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      
      ZipArchiveOutputStream zipArchiveOutputStream1 = new ZipArchiveOutputStream(zipArchiveOutputStream0);
      assertFalse(zipArchiveOutputStream1.equals((Object)zipArchiveOutputStream0));
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(1392409281320L, file0.lastModified());
      assertTrue(file0.exists());
      assertTrue(file0.isFile());
      assertEquals("/tmp", file0.getParent());
      assertTrue(file0.canRead());
      assertEquals("9SOzK.T>_.j9(0wcsdgq", file0.getName());
      assertEquals("/tmp/9SOzK.T>_.j9(0wcsdgq", file0.toString());
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isHidden());
      assertTrue(file0.canExecute());
      assertTrue(file0.isAbsolute());
      assertTrue(file0.canWrite());
      assertEquals(0L, file0.length());
      assertEquals(0L, file0.getFreeSpace());
      assertFalse(file0.isDirectory());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertTrue(zipArchiveOutputStream0.isSeekable());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertFalse(zipArchiveOutputStream1.isSeekable());
      assertEquals(0, zipArchiveOutputStream1.getCount());
      assertEquals(0L, zipArchiveOutputStream1.getBytesWritten());
      assertEquals("UTF8", zipArchiveOutputStream1.getEncoding());
      assertNotNull(zipArchiveOutputStream1);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      
      zipArchiveOutputStream1.putArchiveEntry(zipArchiveEntry0);
      assertFalse(zipArchiveOutputStream0.equals((Object)zipArchiveOutputStream1));
      assertFalse(zipArchiveOutputStream1.equals((Object)zipArchiveOutputStream0));
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(1392409281320L, file0.lastModified());
      assertTrue(file0.exists());
      assertTrue(file0.isFile());
      assertEquals("/tmp", file0.getParent());
      assertTrue(file0.canRead());
      assertEquals("9SOzK.T>_.j9(0wcsdgq", file0.getName());
      assertEquals("/tmp/9SOzK.T>_.j9(0wcsdgq", file0.toString());
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isHidden());
      assertTrue(file0.canExecute());
      assertTrue(file0.isAbsolute());
      assertTrue(file0.canWrite());
      assertEquals(0L, file0.length());
      assertEquals(0L, file0.getFreeSpace());
      assertFalse(file0.isDirectory());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertTrue(zipArchiveOutputStream0.isSeekable());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertEquals("wcsdgq", zipArchiveEntry0.getName());
      assertFalse(zipArchiveEntry0.isStreamContiguous());
      assertEquals("wcsdgq", zipArchiveEntry0.toString());
      assertEquals(8, zipArchiveEntry0.getMethod());
      assertFalse(zipArchiveEntry0.isDirectory());
      assertEquals(0, zipArchiveEntry0.getPlatform());
      assertEquals(0, zipArchiveEntry0.getVersionRequired());
      assertEquals((-1L), zipArchiveEntry0.getCompressedSize());
      assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
      assertEquals(0, zipArchiveEntry0.getVersionMadeBy());
      assertEquals((-1L), zipArchiveEntry0.getCrc());
      assertEquals(0, zipArchiveEntry0.getRawFlag());
      assertEquals(0, zipArchiveEntry0.getUnixMode());
      assertEquals((-1L), zipArchiveEntry0.getSize());
      assertNull(zipArchiveEntry0.getComment());
      assertEquals(0, zipArchiveEntry0.getInternalAttributes());
      assertEquals((-1L), zipArchiveEntry0.getDataOffset());
      assertFalse(zipArchiveEntry0.isUnixSymlink());
      assertFalse(zipArchiveOutputStream1.isSeekable());
      assertEquals(0, zipArchiveOutputStream1.getCount());
      assertEquals(0L, zipArchiveOutputStream1.getBytesWritten());
      assertEquals("UTF8", zipArchiveOutputStream1.getEncoding());
      assertNotSame(zipArchiveOutputStream0, zipArchiveOutputStream1);
      assertNotSame(zipArchiveOutputStream1, zipArchiveOutputStream0);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      
      zipArchiveOutputStream0.setMethod(0);
      assertFalse(zipArchiveOutputStream0.equals((Object)zipArchiveOutputStream1));
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(1392409281320L, file0.lastModified());
      assertTrue(file0.exists());
      assertTrue(file0.isFile());
      assertEquals("/tmp", file0.getParent());
      assertTrue(file0.canRead());
      assertEquals("9SOzK.T>_.j9(0wcsdgq", file0.getName());
      assertEquals("/tmp/9SOzK.T>_.j9(0wcsdgq", file0.toString());
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isHidden());
      assertTrue(file0.canExecute());
      assertTrue(file0.isAbsolute());
      assertTrue(file0.canWrite());
      assertEquals(0L, file0.length());
      assertEquals(0L, file0.getFreeSpace());
      assertFalse(file0.isDirectory());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertTrue(zipArchiveOutputStream0.isSeekable());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertNotSame(zipArchiveOutputStream0, zipArchiveOutputStream1);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      
      zipArchiveOutputStream1.writeCentralFileHeader(zipArchiveEntry0);
      assertFalse(zipArchiveOutputStream0.equals((Object)zipArchiveOutputStream1));
      assertFalse(zipArchiveOutputStream1.equals((Object)zipArchiveOutputStream0));
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(1392409281320L, file0.lastModified());
      assertTrue(file0.exists());
      assertTrue(file0.isFile());
      assertEquals("/tmp", file0.getParent());
      assertTrue(file0.canRead());
      assertEquals("9SOzK.T>_.j9(0wcsdgq", file0.getName());
      assertEquals("/tmp/9SOzK.T>_.j9(0wcsdgq", file0.toString());
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isHidden());
      assertTrue(file0.canExecute());
      assertTrue(file0.isAbsolute());
      assertTrue(file0.canWrite());
      assertEquals(0L, file0.length());
      assertEquals(0L, file0.getFreeSpace());
      assertFalse(file0.isDirectory());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertTrue(zipArchiveOutputStream0.isSeekable());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertEquals("wcsdgq", zipArchiveEntry0.getName());
      assertFalse(zipArchiveEntry0.isStreamContiguous());
      assertEquals("wcsdgq", zipArchiveEntry0.toString());
      assertEquals(8, zipArchiveEntry0.getMethod());
      assertFalse(zipArchiveEntry0.isDirectory());
      assertEquals(0, zipArchiveEntry0.getPlatform());
      assertEquals(0, zipArchiveEntry0.getVersionRequired());
      assertEquals((-1L), zipArchiveEntry0.getCompressedSize());
      assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
      assertEquals(0, zipArchiveEntry0.getVersionMadeBy());
      assertEquals((-1L), zipArchiveEntry0.getCrc());
      assertEquals(0, zipArchiveEntry0.getRawFlag());
      assertEquals(0, zipArchiveEntry0.getUnixMode());
      assertEquals((-1L), zipArchiveEntry0.getSize());
      assertNull(zipArchiveEntry0.getComment());
      assertEquals(0, zipArchiveEntry0.getInternalAttributes());
      assertEquals((-1L), zipArchiveEntry0.getDataOffset());
      assertFalse(zipArchiveEntry0.isUnixSymlink());
      assertFalse(zipArchiveOutputStream1.isSeekable());
      assertEquals(0, zipArchiveOutputStream1.getCount());
      assertEquals(0L, zipArchiveOutputStream1.getBytesWritten());
      assertEquals("UTF8", zipArchiveOutputStream1.getEncoding());
      assertNotSame(zipArchiveOutputStream0, zipArchiveOutputStream1);
      assertNotSame(zipArchiveOutputStream1, zipArchiveOutputStream0);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      
      ZipArchiveOutputStream zipArchiveOutputStream2 = new ZipArchiveOutputStream(zipArchiveOutputStream1);
      assertFalse(zipArchiveOutputStream0.equals((Object)zipArchiveOutputStream1));
      assertFalse(zipArchiveOutputStream1.equals((Object)zipArchiveOutputStream0));
      assertFalse(zipArchiveOutputStream2.equals((Object)zipArchiveOutputStream0));
      assertFalse(zipArchiveOutputStream2.equals((Object)zipArchiveOutputStream1));
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(1392409281320L, file0.lastModified());
      assertTrue(file0.exists());
      assertTrue(file0.isFile());
      assertEquals("/tmp", file0.getParent());
      assertTrue(file0.canRead());
      assertEquals("9SOzK.T>_.j9(0wcsdgq", file0.getName());
      assertEquals("/tmp/9SOzK.T>_.j9(0wcsdgq", file0.toString());
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isHidden());
      assertTrue(file0.canExecute());
      assertTrue(file0.isAbsolute());
      assertTrue(file0.canWrite());
      assertEquals(0L, file0.length());
      assertEquals(0L, file0.getFreeSpace());
      assertFalse(file0.isDirectory());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertTrue(zipArchiveOutputStream0.isSeekable());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertFalse(zipArchiveOutputStream1.isSeekable());
      assertEquals(0, zipArchiveOutputStream1.getCount());
      assertEquals(0L, zipArchiveOutputStream1.getBytesWritten());
      assertEquals("UTF8", zipArchiveOutputStream1.getEncoding());
      assertEquals(0L, zipArchiveOutputStream2.getBytesWritten());
      assertEquals("UTF8", zipArchiveOutputStream2.getEncoding());
      assertFalse(zipArchiveOutputStream2.isSeekable());
      assertEquals(0, zipArchiveOutputStream2.getCount());
      assertNotNull(zipArchiveOutputStream2);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      
//      try { 
        zipArchiveOutputStream0.finish();
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // This archive contains unclosed entries.
//         //
//         verifyException("org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream", e);
//      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream((SeekableByteChannel) null);
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertFalse(zipArchiveOutputStream0.isSeekable());
      assertNotNull(zipArchiveOutputStream0);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      
      ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry("uncompressed size is required for STORED method when not writing to a file");
      assertEquals((-1L), zipArchiveEntry0.getCrc());
      assertEquals(0, zipArchiveEntry0.getRawFlag());
      assertEquals(0, zipArchiveEntry0.getVersionRequired());
      assertEquals((-1L), zipArchiveEntry0.getDataOffset());
      assertFalse(zipArchiveEntry0.isUnixSymlink());
      assertEquals(0, zipArchiveEntry0.getUnixMode());
      assertEquals(0, zipArchiveEntry0.getVersionMadeBy());
      assertEquals(0, zipArchiveEntry0.getPlatform());
      assertEquals(0, zipArchiveEntry0.getInternalAttributes());
      assertFalse(zipArchiveEntry0.isStreamContiguous());
      assertEquals((-1), zipArchiveEntry0.getMethod());
      assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
      assertNull(zipArchiveEntry0.getComment());
      assertEquals("uncompressed size is required for STORED method when not writing to a file", zipArchiveEntry0.getName());
      assertFalse(zipArchiveEntry0.isDirectory());
      assertEquals((-1L), zipArchiveEntry0.getSize());
      assertEquals("uncompressed size is required for STORED method when not writing to a file", zipArchiveEntry0.toString());
      assertEquals((-1L), zipArchiveEntry0.getCompressedSize());
      assertNotNull(zipArchiveEntry0);
      assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      
      zipArchiveOutputStream0.setLevel((-1));
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertFalse(zipArchiveOutputStream0.isSeekable());
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      
      StandardOpenOption standardOpenOption0 = StandardOpenOption.READ;
      assertEquals(StandardOpenOption.READ, standardOpenOption0);
      
      boolean boolean0 = zipArchiveEntry0.equals(standardOpenOption0);
      assertEquals((-1L), zipArchiveEntry0.getCrc());
      assertEquals(0, zipArchiveEntry0.getRawFlag());
      assertEquals(0, zipArchiveEntry0.getVersionRequired());
      assertEquals((-1L), zipArchiveEntry0.getDataOffset());
      assertFalse(zipArchiveEntry0.isUnixSymlink());
      assertEquals(0, zipArchiveEntry0.getUnixMode());
      assertEquals(0, zipArchiveEntry0.getVersionMadeBy());
      assertEquals(0, zipArchiveEntry0.getPlatform());
      assertEquals(0, zipArchiveEntry0.getInternalAttributes());
      assertFalse(zipArchiveEntry0.isStreamContiguous());
      assertEquals((-1), zipArchiveEntry0.getMethod());
      assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
      assertNull(zipArchiveEntry0.getComment());
      assertEquals("uncompressed size is required for STORED method when not writing to a file", zipArchiveEntry0.getName());
      assertFalse(zipArchiveEntry0.isDirectory());
      assertEquals((-1L), zipArchiveEntry0.getSize());
      assertEquals("uncompressed size is required for STORED method when not writing to a file", zipArchiveEntry0.toString());
      assertEquals((-1L), zipArchiveEntry0.getCompressedSize());
      assertFalse(boolean0);
      assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      
      File file0 = MockFile.createTempFile(" Modify:[", "e6");
      assertEquals(0L, file0.getTotalSpace());
      assertTrue(file0.exists());
      assertEquals(0L, file0.length());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(" Modify:[0e6", file0.getName());
      assertTrue(file0.isFile());
      assertTrue(file0.canRead());
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isHidden());
      assertEquals("/tmp", file0.getParent());
      assertTrue(file0.canExecute());
      assertTrue(file0.isAbsolute());
      assertEquals("/tmp/ Modify:[0e6", file0.toString());
      assertTrue(file0.canWrite());
      assertEquals(0L, file0.getFreeSpace());
      assertFalse(file0.isDirectory());
      assertNotNull(file0);
      
      ZipArchiveEntry zipArchiveEntry1 = (ZipArchiveEntry)zipArchiveOutputStream0.createArchiveEntry(file0, "uncompressed size is required for STORED method when not writing to a file");
      assertFalse(zipArchiveEntry1.equals((Object)zipArchiveEntry0));
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertFalse(zipArchiveOutputStream0.isSeekable());
      assertEquals(0L, file0.getTotalSpace());
      assertTrue(file0.exists());
      assertEquals(0L, file0.length());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(" Modify:[0e6", file0.getName());
      assertTrue(file0.isFile());
      assertTrue(file0.canRead());
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isHidden());
      assertEquals("/tmp", file0.getParent());
      assertTrue(file0.canExecute());
      assertTrue(file0.isAbsolute());
      assertEquals("/tmp/ Modify:[0e6", file0.toString());
      assertTrue(file0.canWrite());
      assertEquals(0L, file0.getFreeSpace());
      assertFalse(file0.isDirectory());
      assertEquals((-1L), zipArchiveEntry1.getCompressedSize());
      assertEquals(0, zipArchiveEntry1.getVersionRequired());
      assertFalse(zipArchiveEntry1.isStreamContiguous());
      assertFalse(zipArchiveEntry1.isDirectory());
      assertEquals((-1L), zipArchiveEntry1.getCrc());
      assertEquals((-1), zipArchiveEntry1.getMethod());
      assertEquals("uncompressed size is required for STORED method when not writing to a file", zipArchiveEntry1.getName());
      assertEquals(0L, zipArchiveEntry1.getExternalAttributes());
      assertEquals("uncompressed size is required for STORED method when not writing to a file", zipArchiveEntry1.toString());
      assertEquals((-1L), zipArchiveEntry1.getDataOffset());
      assertEquals(0, zipArchiveEntry1.getVersionMadeBy());
      assertEquals(0L, zipArchiveEntry1.getSize());
      assertEquals(0, zipArchiveEntry1.getRawFlag());
      assertEquals(0, zipArchiveEntry1.getPlatform());
      assertEquals(0, zipArchiveEntry1.getUnixMode());
      assertNull(zipArchiveEntry1.getComment());
      assertFalse(zipArchiveEntry1.isUnixSymlink());
      assertEquals(0, zipArchiveEntry1.getInternalAttributes());
      assertNotNull(zipArchiveEntry1);
      assertNotSame(zipArchiveEntry1, zipArchiveEntry0);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      
      zipArchiveOutputStream0.setMethod(5241);
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertFalse(zipArchiveOutputStream0.isSeekable());
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      
      ZipArchiveOutputStream zipArchiveOutputStream1 = new ZipArchiveOutputStream(zipArchiveOutputStream0);
      assertFalse(zipArchiveOutputStream1.equals((Object)zipArchiveOutputStream0));
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertFalse(zipArchiveOutputStream0.isSeekable());
      assertEquals(0L, zipArchiveOutputStream1.getBytesWritten());
      assertEquals(0, zipArchiveOutputStream1.getCount());
      assertEquals("UTF8", zipArchiveOutputStream1.getEncoding());
      assertFalse(zipArchiveOutputStream1.isSeekable());
      assertNotNull(zipArchiveOutputStream1);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      
      zipArchiveOutputStream1.setUseLanguageEncodingFlag(true);
      assertFalse(zipArchiveOutputStream0.equals((Object)zipArchiveOutputStream1));
      assertFalse(zipArchiveOutputStream1.equals((Object)zipArchiveOutputStream0));
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertFalse(zipArchiveOutputStream0.isSeekable());
      assertEquals(0L, zipArchiveOutputStream1.getBytesWritten());
      assertEquals(0, zipArchiveOutputStream1.getCount());
      assertEquals("UTF8", zipArchiveOutputStream1.getEncoding());
      assertFalse(zipArchiveOutputStream1.isSeekable());
      assertNotSame(zipArchiveOutputStream0, zipArchiveOutputStream1);
      assertNotSame(zipArchiveOutputStream1, zipArchiveOutputStream0);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      
      // Undeclared exception!
//      try { 
        zipArchiveOutputStream0.putArchiveEntry(zipArchiveEntry1);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      File file0 = MockFile.createTempFile("9SOzK.T>_.j9(", "wcsdgq");
      assertTrue(file0.exists());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(1392409281320L, file0.lastModified());
      assertTrue(file0.canRead());
      assertEquals("/tmp", file0.getParent());
      assertEquals("9SOzK.T>_.j9(0wcsdgq", file0.getName());
      assertTrue(file0.isFile());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals("/tmp/9SOzK.T>_.j9(0wcsdgq", file0.toString());
      assertFalse(file0.isDirectory());
      assertTrue(file0.isAbsolute());
      assertTrue(file0.canWrite());
      assertTrue(file0.canExecute());
      assertEquals(0L, file0.length());
      assertEquals(0L, file0.getFreeSpace());
      assertNotNull(file0);
      
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(file0);
      assertTrue(file0.exists());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(1392409281320L, file0.lastModified());
      assertTrue(file0.canRead());
      assertEquals("/tmp", file0.getParent());
      assertEquals("9SOzK.T>_.j9(0wcsdgq", file0.getName());
      assertTrue(file0.isFile());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals("/tmp/9SOzK.T>_.j9(0wcsdgq", file0.toString());
      assertFalse(file0.isDirectory());
      assertTrue(file0.isAbsolute());
      assertTrue(file0.canWrite());
      assertTrue(file0.canExecute());
      assertEquals(0L, file0.length());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertTrue(zipArchiveOutputStream0.isSeekable());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertNotNull(zipArchiveOutputStream0);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      
      zipArchiveOutputStream0.writeCentralDirectoryEnd();
      assertTrue(file0.exists());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(1392409281320L, file0.lastModified());
      assertTrue(file0.canRead());
      assertEquals("/tmp", file0.getParent());
      assertEquals("9SOzK.T>_.j9(0wcsdgq", file0.getName());
      assertTrue(file0.isFile());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals("/tmp/9SOzK.T>_.j9(0wcsdgq", file0.toString());
      assertFalse(file0.isDirectory());
      assertTrue(file0.isAbsolute());
      assertTrue(file0.canWrite());
      assertTrue(file0.canExecute());
      assertEquals(0L, file0.length());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertTrue(zipArchiveOutputStream0.isSeekable());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      
      ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry("wcsdgq");
      assertEquals(0, zipArchiveEntry0.getVersionRequired());
      assertEquals(0, zipArchiveEntry0.getUnixMode());
      assertEquals(0, zipArchiveEntry0.getRawFlag());
      assertEquals((-1L), zipArchiveEntry0.getSize());
      assertEquals((-1L), zipArchiveEntry0.getCrc());
      assertEquals((-1L), zipArchiveEntry0.getDataOffset());
      assertEquals(0, zipArchiveEntry0.getVersionMadeBy());
      assertEquals(0, zipArchiveEntry0.getInternalAttributes());
      assertEquals("wcsdgq", zipArchiveEntry0.getName());
      assertFalse(zipArchiveEntry0.isUnixSymlink());
      assertEquals((-1), zipArchiveEntry0.getMethod());
      assertNull(zipArchiveEntry0.getComment());
      assertFalse(zipArchiveEntry0.isStreamContiguous());
      assertEquals(0, zipArchiveEntry0.getPlatform());
      assertFalse(zipArchiveEntry0.isDirectory());
      assertEquals("wcsdgq", zipArchiveEntry0.toString());
      assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
      assertEquals((-1L), zipArchiveEntry0.getCompressedSize());
      assertNotNull(zipArchiveEntry0);
      assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      
      zipArchiveOutputStream0.setLevel(3);
      assertTrue(file0.exists());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(1392409281320L, file0.lastModified());
      assertTrue(file0.canRead());
      assertEquals("/tmp", file0.getParent());
      assertEquals("9SOzK.T>_.j9(0wcsdgq", file0.getName());
      assertTrue(file0.isFile());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals("/tmp/9SOzK.T>_.j9(0wcsdgq", file0.toString());
      assertFalse(file0.isDirectory());
      assertTrue(file0.isAbsolute());
      assertTrue(file0.canWrite());
      assertTrue(file0.canExecute());
      assertEquals(0L, file0.length());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertTrue(zipArchiveOutputStream0.isSeekable());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      
      boolean boolean0 = zipArchiveEntry0.equals(zipArchiveOutputStream0);
      assertTrue(file0.exists());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(1392409281320L, file0.lastModified());
      assertTrue(file0.canRead());
      assertEquals("/tmp", file0.getParent());
      assertEquals("9SOzK.T>_.j9(0wcsdgq", file0.getName());
      assertTrue(file0.isFile());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals("/tmp/9SOzK.T>_.j9(0wcsdgq", file0.toString());
      assertFalse(file0.isDirectory());
      assertTrue(file0.isAbsolute());
      assertTrue(file0.canWrite());
      assertTrue(file0.canExecute());
      assertEquals(0L, file0.length());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertTrue(zipArchiveOutputStream0.isSeekable());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertEquals(0, zipArchiveEntry0.getVersionRequired());
      assertEquals(0, zipArchiveEntry0.getUnixMode());
      assertEquals(0, zipArchiveEntry0.getRawFlag());
      assertEquals((-1L), zipArchiveEntry0.getSize());
      assertEquals((-1L), zipArchiveEntry0.getCrc());
      assertEquals((-1L), zipArchiveEntry0.getDataOffset());
      assertEquals(0, zipArchiveEntry0.getVersionMadeBy());
      assertEquals(0, zipArchiveEntry0.getInternalAttributes());
      assertEquals("wcsdgq", zipArchiveEntry0.getName());
      assertFalse(zipArchiveEntry0.isUnixSymlink());
      assertEquals((-1), zipArchiveEntry0.getMethod());
      assertNull(zipArchiveEntry0.getComment());
      assertFalse(zipArchiveEntry0.isStreamContiguous());
      assertEquals(0, zipArchiveEntry0.getPlatform());
      assertFalse(zipArchiveEntry0.isDirectory());
      assertEquals("wcsdgq", zipArchiveEntry0.toString());
      assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
      assertEquals((-1L), zipArchiveEntry0.getCompressedSize());
      assertFalse(boolean0);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      
      ZipArchiveEntry zipArchiveEntry1 = (ZipArchiveEntry)zipArchiveOutputStream0.createArchiveEntry(file0, "e6");
      assertFalse(zipArchiveEntry1.equals((Object)zipArchiveEntry0));
      assertTrue(file0.exists());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(1392409281320L, file0.lastModified());
      assertTrue(file0.canRead());
      assertEquals("/tmp", file0.getParent());
      assertEquals("9SOzK.T>_.j9(0wcsdgq", file0.getName());
      assertTrue(file0.isFile());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals("/tmp/9SOzK.T>_.j9(0wcsdgq", file0.toString());
      assertFalse(file0.isDirectory());
      assertTrue(file0.isAbsolute());
      assertTrue(file0.canWrite());
      assertTrue(file0.canExecute());
      assertEquals(0L, file0.length());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertTrue(zipArchiveOutputStream0.isSeekable());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertFalse(zipArchiveEntry1.isDirectory());
      assertFalse(zipArchiveEntry1.isUnixSymlink());
      assertFalse(zipArchiveEntry1.isStreamContiguous());
      assertEquals(0, zipArchiveEntry1.getVersionRequired());
      assertEquals(0, zipArchiveEntry1.getRawFlag());
      assertEquals(0, zipArchiveEntry1.getInternalAttributes());
      assertEquals(0, zipArchiveEntry1.getUnixMode());
      assertEquals(0, zipArchiveEntry1.getPlatform());
      assertEquals(0, zipArchiveEntry1.getVersionMadeBy());
      assertEquals((-1L), zipArchiveEntry1.getDataOffset());
      assertEquals(0L, zipArchiveEntry1.getSize());
      assertEquals("e6", zipArchiveEntry1.getName());
      assertEquals("e6", zipArchiveEntry1.toString());
      assertEquals((-1), zipArchiveEntry1.getMethod());
      assertEquals(0L, zipArchiveEntry1.getExternalAttributes());
      assertNull(zipArchiveEntry1.getComment());
      assertEquals((-1L), zipArchiveEntry1.getCrc());
      assertEquals((-1L), zipArchiveEntry1.getCompressedSize());
      assertNotNull(zipArchiveEntry1);
      assertNotSame(zipArchiveEntry1, zipArchiveEntry0);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      
      zipArchiveOutputStream0.setMethod(967);
      assertTrue(file0.exists());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(1392409281320L, file0.lastModified());
      assertTrue(file0.canRead());
      assertEquals("/tmp", file0.getParent());
      assertEquals("9SOzK.T>_.j9(0wcsdgq", file0.getName());
      assertTrue(file0.isFile());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals("/tmp/9SOzK.T>_.j9(0wcsdgq", file0.toString());
      assertFalse(file0.isDirectory());
      assertTrue(file0.isAbsolute());
      assertTrue(file0.canWrite());
      assertTrue(file0.canExecute());
      assertEquals(0L, file0.length());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertTrue(zipArchiveOutputStream0.isSeekable());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      
      zipArchiveOutputStream0.setUseLanguageEncodingFlag(true);
      assertTrue(file0.exists());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(1392409281320L, file0.lastModified());
      assertTrue(file0.canRead());
      assertEquals("/tmp", file0.getParent());
      assertEquals("9SOzK.T>_.j9(0wcsdgq", file0.getName());
      assertTrue(file0.isFile());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals("/tmp/9SOzK.T>_.j9(0wcsdgq", file0.toString());
      assertFalse(file0.isDirectory());
      assertTrue(file0.isAbsolute());
      assertTrue(file0.canWrite());
      assertTrue(file0.canExecute());
      assertEquals(0L, file0.length());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertTrue(zipArchiveOutputStream0.isSeekable());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      
      zipArchiveOutputStream0.putArchiveEntry(zipArchiveEntry1);
      assertFalse(zipArchiveEntry1.equals((Object)zipArchiveEntry0));
      assertTrue(file0.exists());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(1392409281320L, file0.lastModified());
      assertTrue(file0.canRead());
      assertEquals("/tmp", file0.getParent());
      assertEquals("9SOzK.T>_.j9(0wcsdgq", file0.getName());
      assertTrue(file0.isFile());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals("/tmp/9SOzK.T>_.j9(0wcsdgq", file0.toString());
      assertFalse(file0.isDirectory());
      assertTrue(file0.isAbsolute());
      assertTrue(file0.canWrite());
      assertTrue(file0.canExecute());
      assertEquals(0L, file0.length());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertTrue(zipArchiveOutputStream0.isSeekable());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertFalse(zipArchiveEntry1.isDirectory());
      assertFalse(zipArchiveEntry1.isUnixSymlink());
      assertFalse(zipArchiveEntry1.isStreamContiguous());
      assertEquals(0, zipArchiveEntry1.getVersionRequired());
      assertEquals(0, zipArchiveEntry1.getRawFlag());
      assertEquals(0, zipArchiveEntry1.getInternalAttributes());
      assertEquals(0, zipArchiveEntry1.getUnixMode());
      assertEquals(0, zipArchiveEntry1.getPlatform());
      assertEquals(0, zipArchiveEntry1.getVersionMadeBy());
      assertEquals((-1L), zipArchiveEntry1.getDataOffset());
      assertEquals(0L, zipArchiveEntry1.getSize());
      assertEquals("e6", zipArchiveEntry1.getName());
      assertEquals("e6", zipArchiveEntry1.toString());
      assertEquals(0L, zipArchiveEntry1.getExternalAttributes());
      assertNull(zipArchiveEntry1.getComment());
      assertEquals((-1L), zipArchiveEntry1.getCrc());
      assertEquals((-1L), zipArchiveEntry1.getCompressedSize());
      assertEquals(967, zipArchiveEntry1.getMethod());
      assertNotSame(zipArchiveEntry1, zipArchiveEntry0);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      
      boolean boolean1 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      zipArchiveOutputStream0.setMethod(9524);
      assertTrue(file0.exists());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(1392409281320L, file0.lastModified());
      assertTrue(file0.canRead());
      assertEquals("/tmp", file0.getParent());
      assertEquals("9SOzK.T>_.j9(0wcsdgq", file0.getName());
      assertTrue(file0.isFile());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals("/tmp/9SOzK.T>_.j9(0wcsdgq", file0.toString());
      assertFalse(file0.isDirectory());
      assertTrue(file0.isAbsolute());
      assertTrue(file0.canWrite());
      assertTrue(file0.canExecute());
      assertEquals(0L, file0.length());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertTrue(zipArchiveOutputStream0.isSeekable());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      
      ZipArchiveOutputStream zipArchiveOutputStream1 = new ZipArchiveOutputStream(zipArchiveOutputStream0);
      assertFalse(zipArchiveOutputStream1.equals((Object)zipArchiveOutputStream0));
      assertTrue(file0.exists());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(1392409281320L, file0.lastModified());
      assertTrue(file0.canRead());
      assertEquals("/tmp", file0.getParent());
      assertEquals("9SOzK.T>_.j9(0wcsdgq", file0.getName());
      assertTrue(file0.isFile());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals("/tmp/9SOzK.T>_.j9(0wcsdgq", file0.toString());
      assertFalse(file0.isDirectory());
      assertTrue(file0.isAbsolute());
      assertTrue(file0.canWrite());
      assertTrue(file0.canExecute());
      assertEquals(0L, file0.length());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertTrue(zipArchiveOutputStream0.isSeekable());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertEquals(0, zipArchiveOutputStream1.getCount());
      assertEquals(0L, zipArchiveOutputStream1.getBytesWritten());
      assertEquals("UTF8", zipArchiveOutputStream1.getEncoding());
      assertFalse(zipArchiveOutputStream1.isSeekable());
      assertNotNull(zipArchiveOutputStream1);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      
//      try { 
        zipArchiveOutputStream1.close();
//        fail("Expecting exception: UnsupportedZipFeatureException");
      
//      } catch(UnsupportedZipFeatureException e) {
//         //
//         // unsupported feature compression method used in entry e6
//         //
//         verifyException("org.apache.commons.compress.archivers.zip.ZipUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      File file0 = MockFile.createTempFile("9SOzK.T>_.j9(", "wcsdgq");
      assertTrue(file0.canWrite());
      assertEquals("/tmp/9SOzK.T>_.j9(0wcsdgq", file0.toString());
      assertTrue(file0.isFile());
      assertTrue(file0.canRead());
      assertEquals("/tmp", file0.getParent());
      assertTrue(file0.isAbsolute());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals(0L, file0.length());
      assertTrue(file0.exists());
      assertEquals("9SOzK.T>_.j9(0wcsdgq", file0.getName());
      assertEquals(0L, file0.getFreeSpace());
      assertFalse(file0.isDirectory());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(1392409281320L, file0.lastModified());
      assertTrue(file0.canExecute());
      assertNotNull(file0);
      
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(file0);
      assertTrue(file0.canWrite());
      assertEquals("/tmp/9SOzK.T>_.j9(0wcsdgq", file0.toString());
      assertTrue(file0.isFile());
      assertTrue(file0.canRead());
      assertEquals("/tmp", file0.getParent());
      assertTrue(file0.isAbsolute());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals(0L, file0.length());
      assertTrue(file0.exists());
      assertEquals("9SOzK.T>_.j9(0wcsdgq", file0.getName());
      assertEquals(0L, file0.getFreeSpace());
      assertFalse(file0.isDirectory());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(1392409281320L, file0.lastModified());
      assertTrue(file0.canExecute());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertTrue(zipArchiveOutputStream0.isSeekable());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertNotNull(zipArchiveOutputStream0);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      
      zipArchiveOutputStream0.writeCentralDirectoryEnd();
      assertTrue(file0.canWrite());
      assertEquals("/tmp/9SOzK.T>_.j9(0wcsdgq", file0.toString());
      assertTrue(file0.isFile());
      assertTrue(file0.canRead());
      assertEquals("/tmp", file0.getParent());
      assertTrue(file0.isAbsolute());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals(0L, file0.length());
      assertTrue(file0.exists());
      assertEquals("9SOzK.T>_.j9(0wcsdgq", file0.getName());
      assertEquals(0L, file0.getFreeSpace());
      assertFalse(file0.isDirectory());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(1392409281320L, file0.lastModified());
      assertTrue(file0.canExecute());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertTrue(zipArchiveOutputStream0.isSeekable());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      
      file0.deleteOnExit();
      assertTrue(file0.canWrite());
      assertEquals("/tmp/9SOzK.T>_.j9(0wcsdgq", file0.toString());
      assertTrue(file0.isFile());
      assertTrue(file0.canRead());
      assertEquals("/tmp", file0.getParent());
      assertTrue(file0.isAbsolute());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals(0L, file0.length());
      assertTrue(file0.exists());
      assertEquals("9SOzK.T>_.j9(0wcsdgq", file0.getName());
      assertEquals(0L, file0.getFreeSpace());
      assertFalse(file0.isDirectory());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(1392409281320L, file0.lastModified());
      assertTrue(file0.canExecute());
      
      ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry("wcsdgq");
      assertEquals(0, zipArchiveEntry0.getRawFlag());
      assertEquals((-1L), zipArchiveEntry0.getCrc());
      assertEquals(0, zipArchiveEntry0.getVersionRequired());
      assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
      assertEquals((-1L), zipArchiveEntry0.getDataOffset());
      assertEquals("wcsdgq", zipArchiveEntry0.toString());
      assertEquals(0, zipArchiveEntry0.getUnixMode());
      assertEquals(0, zipArchiveEntry0.getVersionMadeBy());
      assertEquals(0, zipArchiveEntry0.getInternalAttributes());
      assertEquals(0, zipArchiveEntry0.getPlatform());
      assertFalse(zipArchiveEntry0.isStreamContiguous());
      assertNull(zipArchiveEntry0.getComment());
      assertEquals("wcsdgq", zipArchiveEntry0.getName());
      assertFalse(zipArchiveEntry0.isUnixSymlink());
      assertEquals((-1), zipArchiveEntry0.getMethod());
      assertEquals((-1L), zipArchiveEntry0.getCompressedSize());
      assertFalse(zipArchiveEntry0.isDirectory());
      assertEquals((-1L), zipArchiveEntry0.getSize());
      assertNotNull(zipArchiveEntry0);
      assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      
      zipArchiveOutputStream0.setLevel(3);
      assertTrue(file0.canWrite());
      assertEquals("/tmp/9SOzK.T>_.j9(0wcsdgq", file0.toString());
      assertTrue(file0.isFile());
      assertTrue(file0.canRead());
      assertEquals("/tmp", file0.getParent());
      assertTrue(file0.isAbsolute());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals(0L, file0.length());
      assertTrue(file0.exists());
      assertEquals("9SOzK.T>_.j9(0wcsdgq", file0.getName());
      assertEquals(0L, file0.getFreeSpace());
      assertFalse(file0.isDirectory());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(1392409281320L, file0.lastModified());
      assertTrue(file0.canExecute());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertTrue(zipArchiveOutputStream0.isSeekable());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      
      zipArchiveOutputStream0.putArchiveEntry(zipArchiveEntry0);
      assertTrue(file0.canWrite());
      assertEquals("/tmp/9SOzK.T>_.j9(0wcsdgq", file0.toString());
      assertTrue(file0.isFile());
      assertTrue(file0.canRead());
      assertEquals("/tmp", file0.getParent());
      assertTrue(file0.isAbsolute());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals(0L, file0.length());
      assertTrue(file0.exists());
      assertEquals("9SOzK.T>_.j9(0wcsdgq", file0.getName());
      assertEquals(0L, file0.getFreeSpace());
      assertFalse(file0.isDirectory());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(1392409281320L, file0.lastModified());
      assertTrue(file0.canExecute());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertTrue(zipArchiveOutputStream0.isSeekable());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals(0, zipArchiveEntry0.getRawFlag());
      assertEquals((-1L), zipArchiveEntry0.getCrc());
      assertEquals(0, zipArchiveEntry0.getVersionRequired());
      assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
      assertEquals((-1L), zipArchiveEntry0.getDataOffset());
      assertEquals("wcsdgq", zipArchiveEntry0.toString());
      assertEquals(0, zipArchiveEntry0.getUnixMode());
      assertEquals(0, zipArchiveEntry0.getVersionMadeBy());
      assertEquals(0, zipArchiveEntry0.getInternalAttributes());
      assertEquals(0, zipArchiveEntry0.getPlatform());
      assertFalse(zipArchiveEntry0.isStreamContiguous());
      assertNull(zipArchiveEntry0.getComment());
      assertEquals("wcsdgq", zipArchiveEntry0.getName());
      assertFalse(zipArchiveEntry0.isUnixSymlink());
      assertEquals((-1L), zipArchiveEntry0.getCompressedSize());
      assertEquals(8, zipArchiveEntry0.getMethod());
      assertFalse(zipArchiveEntry0.isDirectory());
      assertEquals((-1L), zipArchiveEntry0.getSize());
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      
      zipArchiveOutputStream0.setUseLanguageEncodingFlag(true);
      assertTrue(file0.canWrite());
      assertEquals("/tmp/9SOzK.T>_.j9(0wcsdgq", file0.toString());
      assertTrue(file0.isFile());
      assertTrue(file0.canRead());
      assertEquals("/tmp", file0.getParent());
      assertTrue(file0.isAbsolute());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals(0L, file0.length());
      assertTrue(file0.exists());
      assertEquals("9SOzK.T>_.j9(0wcsdgq", file0.getName());
      assertEquals(0L, file0.getFreeSpace());
      assertFalse(file0.isDirectory());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(1392409281320L, file0.lastModified());
      assertTrue(file0.canExecute());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertTrue(zipArchiveOutputStream0.isSeekable());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      
      boolean boolean0 = zipArchiveOutputStream0.isSeekable();
      assertTrue(file0.canWrite());
      assertEquals("/tmp/9SOzK.T>_.j9(0wcsdgq", file0.toString());
      assertTrue(file0.isFile());
      assertTrue(file0.canRead());
      assertEquals("/tmp", file0.getParent());
      assertTrue(file0.isAbsolute());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals(0L, file0.length());
      assertTrue(file0.exists());
      assertEquals("9SOzK.T>_.j9(0wcsdgq", file0.getName());
      assertEquals(0L, file0.getFreeSpace());
      assertFalse(file0.isDirectory());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(1392409281320L, file0.lastModified());
      assertTrue(file0.canExecute());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertTrue(zipArchiveOutputStream0.isSeekable());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertTrue(boolean0);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      
      zipArchiveOutputStream0.putArchiveEntry(zipArchiveEntry0);
      assertTrue(file0.canWrite());
      assertEquals("/tmp/9SOzK.T>_.j9(0wcsdgq", file0.toString());
      assertTrue(file0.isFile());
      assertTrue(file0.canRead());
      assertEquals("/tmp", file0.getParent());
      assertTrue(file0.isAbsolute());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals(0L, file0.length());
      assertTrue(file0.exists());
      assertEquals("9SOzK.T>_.j9(0wcsdgq", file0.getName());
      assertEquals(0L, file0.getFreeSpace());
      assertFalse(file0.isDirectory());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(1392409281320L, file0.lastModified());
      assertTrue(file0.canExecute());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertTrue(zipArchiveOutputStream0.isSeekable());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals(0, zipArchiveEntry0.getRawFlag());
      assertEquals(0L, zipArchiveEntry0.getCrc());
      assertEquals(0, zipArchiveEntry0.getVersionRequired());
      assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
      assertEquals((-1L), zipArchiveEntry0.getDataOffset());
      assertEquals("wcsdgq", zipArchiveEntry0.toString());
      assertEquals(0, zipArchiveEntry0.getUnixMode());
      assertEquals(0, zipArchiveEntry0.getVersionMadeBy());
      assertEquals(0, zipArchiveEntry0.getInternalAttributes());
      assertEquals(0, zipArchiveEntry0.getPlatform());
      assertFalse(zipArchiveEntry0.isStreamContiguous());
      assertNull(zipArchiveEntry0.getComment());
      assertEquals("wcsdgq", zipArchiveEntry0.getName());
      assertFalse(zipArchiveEntry0.isUnixSymlink());
      assertEquals(8, zipArchiveEntry0.getMethod());
      assertFalse(zipArchiveEntry0.isDirectory());
      assertEquals(0L, zipArchiveEntry0.getSize());
      assertEquals(2L, zipArchiveEntry0.getCompressedSize());
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      
      zipArchiveOutputStream0.setMethod(0);
      assertTrue(file0.canWrite());
      assertEquals("/tmp/9SOzK.T>_.j9(0wcsdgq", file0.toString());
      assertTrue(file0.isFile());
      assertTrue(file0.canRead());
      assertEquals("/tmp", file0.getParent());
      assertTrue(file0.isAbsolute());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals(0L, file0.length());
      assertTrue(file0.exists());
      assertEquals("9SOzK.T>_.j9(0wcsdgq", file0.getName());
      assertEquals(0L, file0.getFreeSpace());
      assertFalse(file0.isDirectory());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(1392409281320L, file0.lastModified());
      assertTrue(file0.canExecute());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertTrue(zipArchiveOutputStream0.isSeekable());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      
      zipArchiveOutputStream0.writeCentralFileHeader(zipArchiveEntry0);
      assertTrue(file0.canWrite());
      assertEquals("/tmp/9SOzK.T>_.j9(0wcsdgq", file0.toString());
      assertTrue(file0.isFile());
      assertTrue(file0.canRead());
      assertEquals("/tmp", file0.getParent());
      assertTrue(file0.isAbsolute());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals(0L, file0.length());
      assertTrue(file0.exists());
      assertEquals("9SOzK.T>_.j9(0wcsdgq", file0.getName());
      assertEquals(0L, file0.getFreeSpace());
      assertFalse(file0.isDirectory());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(1392409281320L, file0.lastModified());
      assertTrue(file0.canExecute());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertTrue(zipArchiveOutputStream0.isSeekable());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals(0, zipArchiveEntry0.getRawFlag());
      assertEquals(0L, zipArchiveEntry0.getCrc());
      assertEquals(0, zipArchiveEntry0.getVersionRequired());
      assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
      assertEquals((-1L), zipArchiveEntry0.getDataOffset());
      assertEquals("wcsdgq", zipArchiveEntry0.toString());
      assertEquals(0, zipArchiveEntry0.getUnixMode());
      assertEquals(0, zipArchiveEntry0.getVersionMadeBy());
      assertEquals(0, zipArchiveEntry0.getInternalAttributes());
      assertEquals(0, zipArchiveEntry0.getPlatform());
      assertFalse(zipArchiveEntry0.isStreamContiguous());
      assertNull(zipArchiveEntry0.getComment());
      assertEquals("wcsdgq", zipArchiveEntry0.getName());
      assertFalse(zipArchiveEntry0.isUnixSymlink());
      assertEquals(8, zipArchiveEntry0.getMethod());
      assertFalse(zipArchiveEntry0.isDirectory());
      assertEquals(0L, zipArchiveEntry0.getSize());
      assertEquals(2L, zipArchiveEntry0.getCompressedSize());
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      
      zipArchiveOutputStream0.setUseLanguageEncodingFlag(false);
      assertTrue(file0.canWrite());
      assertEquals("/tmp/9SOzK.T>_.j9(0wcsdgq", file0.toString());
      assertTrue(file0.isFile());
      assertTrue(file0.canRead());
      assertEquals("/tmp", file0.getParent());
      assertTrue(file0.isAbsolute());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals(0L, file0.length());
      assertTrue(file0.exists());
      assertEquals("9SOzK.T>_.j9(0wcsdgq", file0.getName());
      assertEquals(0L, file0.getFreeSpace());
      assertFalse(file0.isDirectory());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(1392409281320L, file0.lastModified());
      assertTrue(file0.canExecute());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertTrue(zipArchiveOutputStream0.isSeekable());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      
      ZipArchiveOutputStream.UnicodeExtraFieldPolicy zipArchiveOutputStream_UnicodeExtraFieldPolicy0 = ZipArchiveOutputStream.UnicodeExtraFieldPolicy.NEVER;
      assertEquals("never", zipArchiveOutputStream_UnicodeExtraFieldPolicy0.toString());
      assertNotNull(zipArchiveOutputStream_UnicodeExtraFieldPolicy0);
      
      ZipArchiveEntry zipArchiveEntry1 = new ZipArchiveEntry();
      assertFalse(zipArchiveEntry1.equals((Object)zipArchiveEntry0));
      assertEquals("", zipArchiveEntry1.toString());
      assertEquals((-1L), zipArchiveEntry1.getCompressedSize());
      assertEquals(0, zipArchiveEntry1.getVersionRequired());
      assertFalse(zipArchiveEntry1.isStreamContiguous());
      assertFalse(zipArchiveEntry1.isDirectory());
      assertEquals((-1L), zipArchiveEntry1.getCrc());
      assertEquals((-1), zipArchiveEntry1.getMethod());
      assertEquals("", zipArchiveEntry1.getName());
      assertEquals(0L, zipArchiveEntry1.getExternalAttributes());
      assertEquals((-1L), zipArchiveEntry1.getDataOffset());
      assertEquals(0, zipArchiveEntry1.getVersionMadeBy());
      assertEquals((-1L), zipArchiveEntry1.getSize());
      assertEquals(0, zipArchiveEntry1.getRawFlag());
      assertEquals(0, zipArchiveEntry1.getPlatform());
      assertEquals(0, zipArchiveEntry1.getUnixMode());
      assertNull(zipArchiveEntry1.getComment());
      assertFalse(zipArchiveEntry1.isUnixSymlink());
      assertEquals(0, zipArchiveEntry1.getInternalAttributes());
      assertNotNull(zipArchiveEntry1);
      assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      
      zipArchiveOutputStream0.writeCentralFileHeader(zipArchiveEntry0);
      assertFalse(zipArchiveEntry0.equals((Object)zipArchiveEntry1));
      assertTrue(file0.canWrite());
      assertEquals("/tmp/9SOzK.T>_.j9(0wcsdgq", file0.toString());
      assertTrue(file0.isFile());
      assertTrue(file0.canRead());
      assertEquals("/tmp", file0.getParent());
      assertTrue(file0.isAbsolute());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals(0L, file0.length());
      assertTrue(file0.exists());
      assertEquals("9SOzK.T>_.j9(0wcsdgq", file0.getName());
      assertEquals(0L, file0.getFreeSpace());
      assertFalse(file0.isDirectory());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(1392409281320L, file0.lastModified());
      assertTrue(file0.canExecute());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertTrue(zipArchiveOutputStream0.isSeekable());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals(0, zipArchiveEntry0.getRawFlag());
      assertEquals(0L, zipArchiveEntry0.getCrc());
      assertEquals(0, zipArchiveEntry0.getVersionRequired());
      assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
      assertEquals((-1L), zipArchiveEntry0.getDataOffset());
      assertEquals("wcsdgq", zipArchiveEntry0.toString());
      assertEquals(0, zipArchiveEntry0.getUnixMode());
      assertEquals(0, zipArchiveEntry0.getVersionMadeBy());
      assertEquals(0, zipArchiveEntry0.getInternalAttributes());
      assertEquals(0, zipArchiveEntry0.getPlatform());
      assertFalse(zipArchiveEntry0.isStreamContiguous());
      assertNull(zipArchiveEntry0.getComment());
      assertEquals("wcsdgq", zipArchiveEntry0.getName());
      assertFalse(zipArchiveEntry0.isUnixSymlink());
      assertEquals(8, zipArchiveEntry0.getMethod());
      assertFalse(zipArchiveEntry0.isDirectory());
      assertEquals(0L, zipArchiveEntry0.getSize());
      assertEquals(2L, zipArchiveEntry0.getCompressedSize());
      assertNotSame(zipArchiveEntry0, zipArchiveEntry1);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      
      zipArchiveOutputStream0.writeCentralDirectoryEnd();
      assertTrue(file0.canWrite());
      assertEquals("/tmp/9SOzK.T>_.j9(0wcsdgq", file0.toString());
      assertTrue(file0.isFile());
      assertTrue(file0.canRead());
      assertEquals("/tmp", file0.getParent());
      assertTrue(file0.isAbsolute());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals(0L, file0.length());
      assertTrue(file0.exists());
      assertEquals("9SOzK.T>_.j9(0wcsdgq", file0.getName());
      assertEquals(0L, file0.getFreeSpace());
      assertFalse(file0.isDirectory());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(1392409281320L, file0.lastModified());
      assertTrue(file0.canExecute());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertTrue(zipArchiveOutputStream0.isSeekable());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      
      ZipArchiveEntry zipArchiveEntry2 = (ZipArchiveEntry)zipArchiveOutputStream0.createArchiveEntry(file0, ",lC?FmHg<X{h-_sK");
      assertFalse(zipArchiveEntry2.equals((Object)zipArchiveEntry0));
      assertFalse(zipArchiveEntry2.equals((Object)zipArchiveEntry1));
      assertTrue(file0.canWrite());
      assertEquals("/tmp/9SOzK.T>_.j9(0wcsdgq", file0.toString());
      assertTrue(file0.isFile());
      assertTrue(file0.canRead());
      assertEquals("/tmp", file0.getParent());
      assertTrue(file0.isAbsolute());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals(0L, file0.length());
      assertTrue(file0.exists());
      assertEquals("9SOzK.T>_.j9(0wcsdgq", file0.getName());
      assertEquals(0L, file0.getFreeSpace());
      assertFalse(file0.isDirectory());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(1392409281320L, file0.lastModified());
      assertTrue(file0.canExecute());
      assertEquals(0, zipArchiveEntry2.getInternalAttributes());
      assertEquals(",lC?FmHg<X{h-_sK", zipArchiveEntry2.toString());
      assertEquals(0, zipArchiveEntry2.getPlatform());
      assertFalse(zipArchiveEntry2.isStreamContiguous());
      assertEquals((-1), zipArchiveEntry2.getMethod());
      assertNull(zipArchiveEntry2.getComment());
      assertEquals((-1L), zipArchiveEntry2.getDataOffset());
      assertFalse(zipArchiveEntry2.isUnixSymlink());
      assertEquals(0, zipArchiveEntry2.getUnixMode());
      assertEquals(0, zipArchiveEntry2.getVersionMadeBy());
      assertEquals(",lC?FmHg<X{h-_sK", zipArchiveEntry2.getName());
      assertEquals((-1L), zipArchiveEntry2.getCrc());
      assertEquals(0, zipArchiveEntry2.getRawFlag());
      assertEquals(0, zipArchiveEntry2.getVersionRequired());
      assertEquals(0L, zipArchiveEntry2.getExternalAttributes());
      assertFalse(zipArchiveEntry2.isDirectory());
      assertEquals(0L, zipArchiveEntry2.getSize());
      assertEquals((-1L), zipArchiveEntry2.getCompressedSize());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertTrue(zipArchiveOutputStream0.isSeekable());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertNotNull(zipArchiveEntry2);
      assertNotSame(zipArchiveEntry2, zipArchiveEntry0);
      assertNotSame(zipArchiveEntry2, zipArchiveEntry1);
      assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      File file0 = MockFile.createTempFile("9SOzK.T>_.j9(", "9SOzK.T>_.j9(");
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(file0);
      zipArchiveOutputStream0.writeCentralDirectoryEnd();
      zipArchiveOutputStream0.writeCentralDirectoryEnd();
      ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry("");
      zipArchiveOutputStream0.putArchiveEntry(zipArchiveEntry0);
      zipArchiveOutputStream0.setUseLanguageEncodingFlag(false);
      FileSystemHandling.shouldAllThrowIOExceptions();
      ZipArchiveOutputStream zipArchiveOutputStream1 = new ZipArchiveOutputStream(zipArchiveOutputStream0);
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      FileChannel fileChannel0 = mockFileInputStream0.getChannel();
      ZipArchiveOutputStream zipArchiveOutputStream2 = new ZipArchiveOutputStream(fileChannel0);
      zipArchiveOutputStream2.writeDataDescriptor(zipArchiveEntry0);
      zipArchiveOutputStream1.putArchiveEntry(zipArchiveEntry0);
      zipArchiveOutputStream0.setMethod(967);
      zipArchiveOutputStream1.writeCentralFileHeader(zipArchiveEntry0);
      zipArchiveOutputStream0.setUseLanguageEncodingFlag(false);
      zipArchiveOutputStream1.putArchiveEntry(zipArchiveEntry0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      zipArchiveOutputStream0.setMethod((-682));
      // Undeclared exception!
//      try { 
        zipArchiveOutputStream2.close();
//        fail("Expecting exception: NonWritableChannelException");
      
//      } catch(NonWritableChannelException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.evosuite.runtime.mock.java.io.EvoFileChannel", e);
//      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      String string0 = "9SOzK.T>_.j9(";
      String string1 = "wMcsdgq";
      File file0 = MockFile.createTempFile("9SOzK.T>_.j9(", "wMcsdgq");
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(file0);
      ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
      byte byte0 = (byte) (-44);
      // Undeclared exception!
//      try { 
        zipArchiveOutputStream0.setLevel((-2995));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Invalid compression level: -2995
//         //
//         verifyException("org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream", e);
//      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      File file0 = MockFile.createTempFile("9SOzK.T>_.j9(", "wcsdgq");
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(file0);
      zipArchiveOutputStream0.writeCentralDirectoryEnd();
      ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry("wcsdgq");
      zipArchiveOutputStream0.setLevel(3);
      zipArchiveEntry0.equals(zipArchiveOutputStream0);
      ArchiveEntry archiveEntry0 = zipArchiveOutputStream0.createArchiveEntry(file0, "e6");
      zipArchiveOutputStream0.setMethod(967);
      zipArchiveOutputStream0.setUseLanguageEncodingFlag(true);
      zipArchiveOutputStream0.putArchiveEntry(archiveEntry0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, ", comment=");
      zipArchiveOutputStream0.setMethod(2689);
//      try { 
        zipArchiveOutputStream0.close();
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // This archive contains unclosed entries.
//         //
//         verifyException("org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream", e);
//      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream((SeekableByteChannel) null);
      String string0 = "";
      MockFile mockFile0 = new MockFile("");
      zipArchiveOutputStream0.createArchiveEntry(mockFile0, "");
      ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(mockFile0, "");
      ZipArchiveEntry zipArchiveEntry1 = null;
//      try {
        zipArchiveEntry1 = new ZipArchiveEntry((ZipEntry) zipArchiveEntry0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // ZIP compression method can not be negative: -1
//         //
//         verifyException("org.apache.commons.compress.archivers.zip.ZipArchiveEntry", e);
//      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      File file0 = MockFile.createTempFile("9SOzK.T>_.j9(", "wcsdgq");
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(file0);
      zipArchiveOutputStream0.writeCentralDirectoryEnd();
      ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry("wcsdgq");
      zipArchiveOutputStream0.setLevel(3);
      zipArchiveEntry0.equals(zipArchiveOutputStream0);
      ZipArchiveEntry zipArchiveEntry1 = (ZipArchiveEntry)zipArchiveOutputStream0.createArchiveEntry(file0, "e6");
      zipArchiveOutputStream0.writeDataDescriptor(zipArchiveEntry0);
      zipArchiveOutputStream0.putArchiveEntry(zipArchiveEntry1);
      zipArchiveOutputStream0.setUseLanguageEncodingFlag(false);
      FileSystemHandling.shouldAllThrowIOExceptions();
      ZipArchiveOutputStream zipArchiveOutputStream1 = new ZipArchiveOutputStream(zipArchiveOutputStream0);
      zipArchiveOutputStream1.writeDataDescriptor(zipArchiveEntry1);
      zipArchiveOutputStream1.putArchiveEntry(zipArchiveEntry0);
      zipArchiveOutputStream0.setMethod(3);
      zipArchiveOutputStream1.setUseLanguageEncodingFlag(false);
      zipArchiveOutputStream1.putArchiveEntry(zipArchiveEntry0);
      assertEquals(2L, zipArchiveEntry0.getCompressedSize());
      
      zipArchiveOutputStream1.createArchiveEntry(file0, "qO%]GMA^[lp+5TrjZ#");
      zipArchiveOutputStream0.writeCentralDirectoryEnd();
      zipArchiveOutputStream1.isSeekable();
      ZipArchiveOutputStream zipArchiveOutputStream2 = new ZipArchiveOutputStream(file0);
      zipArchiveOutputStream2.isSeekable();
      zipArchiveOutputStream0.setUseLanguageEncodingFlag(true);
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      File file0 = MockFile.createTempFile("9SOzK.T>_.j9(", "wMcsdgq");
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(file0);
      zipArchiveOutputStream0.writeZip64CentralDirectory();
      zipArchiveOutputStream0.writeCentralDirectoryEnd();
      ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
      zipArchiveOutputStream0.setUseLanguageEncodingFlag(false);
      ZipArchiveEntry zipArchiveEntry1 = new ZipArchiveEntry(", compressedSize=");
      zipArchiveEntry1.setTime(1918L);
      zipArchiveEntry1.setVersionRequired(0);
      zipArchiveOutputStream0.writeDataDescriptor(zipArchiveEntry1);
      zipArchiveOutputStream0.setMethod((-1));
      zipArchiveOutputStream0.setUseLanguageEncodingFlag(false);
      // Undeclared exception!
//      try { 
        zipArchiveOutputStream0.putArchiveEntry(zipArchiveEntry1);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // ZIP compression method can not be negative: -1
//         //
//         verifyException("org.apache.commons.compress.archivers.zip.ZipArchiveEntry", e);
//      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      File file0 = MockFile.createTempFile("9SOzK.T>_.j9(", "wcsdgq");
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(file0);
      zipArchiveOutputStream0.writeCentralDirectoryEnd();
      ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry("wcsdgq");
      zipArchiveOutputStream0.setLevel(3);
      zipArchiveEntry0.equals(zipArchiveOutputStream0);
      zipArchiveOutputStream0.writeDataDescriptor(zipArchiveEntry0);
      zipArchiveOutputStream0.putArchiveEntry(zipArchiveEntry0);
      zipArchiveOutputStream0.setUseLanguageEncodingFlag(false);
      FileSystemHandling.shouldAllThrowIOExceptions();
      ZipArchiveOutputStream zipArchiveOutputStream1 = new ZipArchiveOutputStream(zipArchiveOutputStream0);
      zipArchiveOutputStream1.writeDataDescriptor(zipArchiveEntry0);
      zipArchiveOutputStream1.putArchiveEntry(zipArchiveEntry0);
      zipArchiveOutputStream0.setMethod(3);
      zipArchiveOutputStream1.writeCentralFileHeader(zipArchiveEntry0);
      zipArchiveOutputStream1.setUseLanguageEncodingFlag(false);
      zipArchiveOutputStream1.putArchiveEntry(zipArchiveEntry0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "org.apache.commons.compress.archivers.zip.ZipLong");
      zipArchiveOutputStream0.setMethod(2048);
//      try { 
        zipArchiveOutputStream1.close();
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // This archive contains unclosed entries.
//         //
//         verifyException("org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream", e);
//      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      File file0 = MockFile.createTempFile("9SOzK.T>_.j9(", "wMcsdgq");
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(file0);
      zipArchiveOutputStream0.writeCentralDirectoryEnd();
      ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
      zipArchiveOutputStream0.writeCentralDirectoryEnd();
      zipArchiveOutputStream0.finish();
      int int0 = 1116;
//      try { 
        zipArchiveOutputStream0.closeArchiveEntry();
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Stream has already been finished
//         //
//         verifyException("org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream", e);
//      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      MockFile mockFile0 = new MockFile("IhV&e}Q:)");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0, true);
      FileChannel fileChannel0 = mockFileOutputStream0.getChannel();
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(fileChannel0);
      zipArchiveOutputStream0.flush();
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-74);
      mockFileOutputStream0.write(byteArray0, 0, 740);
      zipArchiveOutputStream0.setEncoding((String) null);
      ZipArchiveOutputStream.UnicodeExtraFieldPolicy zipArchiveOutputStream_UnicodeExtraFieldPolicy0 = ZipArchiveOutputStream.UnicodeExtraFieldPolicy.NEVER;
      ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
      String string0 = "7y`*Bq";
      zipArchiveOutputStream0.getEncoding();
      zipArchiveOutputStream0.canWriteEntryData(zipArchiveEntry0);
      // Undeclared exception!
//      try { 
        zipArchiveOutputStream0.setLevel(1243);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Invalid compression level: 1243
//         //
//         verifyException("org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream", e);
//      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      String string0 = "{mI>y";
      MockFile mockFile0 = new MockFile("{mI>y");
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(mockFile0);
      zipArchiveOutputStream0.setFallbackToUTF8(true);
      Zip64Mode zip64Mode0 = Zip64Mode.Always;
      zipArchiveOutputStream0.setUseZip64(zip64Mode0);
      zipArchiveOutputStream0.finished = true;
//      try { 
        zipArchiveOutputStream0.finish();
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // This archive has already been finished
//         //
//         verifyException("org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream", e);
//      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      String string0 = "9SOzK.T>_.j9(";
      File file0 = MockFile.createTempFile("9SOzK.T>_.j9(", "wMcsdgq");
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(file0);
      zipArchiveOutputStream0.writeCentralDirectoryEnd();
      ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
      zipArchiveEntry0.equals(zipArchiveOutputStream0);
      zipArchiveOutputStream0.finish();
      MockFile.createTempFile(", extendedHeaders=", ",J");
//      try { 
        zipArchiveOutputStream0.createArchiveEntry(file0, ", extendedHeaders=");
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Stream has already been finished
//         //
//         verifyException("org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream", e);
//      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      File file0 = MockFile.createTempFile("9SOzK.T>_.j9(", "wMcsdgq");
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(file0);
      zipArchiveOutputStream0.writeCentralDirectoryEnd();
      ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
      byte[] byteArray0 = new byte[4];
      byteArray0[1] = (byte) (-44);
      byteArray0[2] = (byte) (-44);
      byteArray0[3] = (byte) (-44);
      zipArchiveOutputStream0.writeOut(byteArray0);
      zipArchiveOutputStream0.setUseLanguageEncodingFlag(true);
      ZipArchiveEntry zipArchiveEntry1 = new ZipArchiveEntry(", compressedSize=");
      FileSystemHandling.shouldAllThrowIOExceptions();
      zipArchiveOutputStream0.writeDataDescriptor(zipArchiveEntry1);
      zipArchiveOutputStream0.putArchiveEntry(zipArchiveEntry1);
      ZipArchiveOutputStream zipArchiveOutputStream1 = new ZipArchiveOutputStream((SeekableByteChannel) null);
      zipArchiveOutputStream1.setMethod((-1));
      ZipArchiveOutputStream zipArchiveOutputStream2 = new ZipArchiveOutputStream(zipArchiveOutputStream1);
      zipArchiveOutputStream2.setUseLanguageEncodingFlag(true);
      ZipArchiveOutputStream zipArchiveOutputStream3 = new ZipArchiveOutputStream(file0);
      zipArchiveOutputStream1.writeZip64CentralDirectory();
      zipArchiveOutputStream3.putArchiveEntry(zipArchiveEntry1);
      zipArchiveOutputStream3.setMethod(2827);
      zipArchiveOutputStream0.writeLocalFileHeader(zipArchiveEntry0);
      // Undeclared exception!
//      try { 
        zipArchiveOutputStream1.close();
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      File file0 = MockFile.createTempFile("9SOzK.T>_.j9(", "wcsdgq");
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(file0);
      zipArchiveOutputStream0.writeCentralDirectoryEnd();
      ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry("wcsdgq");
      zipArchiveOutputStream0.setLevel(3);
      zipArchiveEntry0.equals(zipArchiveOutputStream0);
      ZipArchiveEntry zipArchiveEntry1 = (ZipArchiveEntry)zipArchiveOutputStream0.createArchiveEntry(file0, "e6");
      zipArchiveOutputStream0.writeDataDescriptor(zipArchiveEntry0);
      zipArchiveOutputStream0.putArchiveEntry(zipArchiveEntry1);
      zipArchiveOutputStream0.setUseLanguageEncodingFlag(false);
      FileSystemHandling.shouldAllThrowIOExceptions();
      ZipArchiveOutputStream zipArchiveOutputStream1 = new ZipArchiveOutputStream(zipArchiveOutputStream0);
      zipArchiveOutputStream1.writeDataDescriptor(zipArchiveEntry1);
      zipArchiveOutputStream1.putArchiveEntry(zipArchiveEntry0);
      zipArchiveOutputStream0.setMethod(3);
      zipArchiveOutputStream1.setUseLanguageEncodingFlag(false);
      zipArchiveOutputStream1.putArchiveEntry(zipArchiveEntry0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "org.apache.commons.compress.archivers.zip.ZipLong");
      zipArchiveOutputStream0.setMethod(1073741824);
//      try { 
        zipArchiveOutputStream1.close();
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // This archive contains unclosed entries.
//         //
//         verifyException("org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream", e);
//      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      MockFile mockFile0 = new MockFile("IhVVo,}Q:)");
      byte byte0 = (byte) (-75);
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(mockFile0);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-75);
      byteArray0[1] = (byte) (-75);
      byteArray0[2] = (byte) (-75);
      int int0 = 6;
      // Undeclared exception!
//      try { 
        zipArchiveOutputStream0.writeOut(byteArray0, (byte) (-75), 6);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      File file0 = MockFile.createTempFile("9SOzK.T>_.j9(", "wMcsdgq");
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(file0);
      zipArchiveOutputStream0.writeCentralDirectoryEnd();
      ZipArchiveOutputStream zipArchiveOutputStream1 = new ZipArchiveOutputStream(zipArchiveOutputStream0);
      zipArchiveOutputStream0.finish();
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-75);
      byteArray0[1] = (byte) (-75);
      byteArray0[2] = (byte) (-75);
      byteArray0[3] = (byte) (-75);
      zipArchiveOutputStream1.destroy();
      // Undeclared exception!
//      try { 
        zipArchiveOutputStream1.writeOut(byteArray0, (byte) (-75), (byte) (-75));
//        fail("Expecting exception: IllegalStateException");
      
//      } catch(IllegalStateException e) {
//         //
//         // No current entry
//         //
//         verifyException("org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream", e);
//      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      File file0 = MockFile.createTempFile("9SOzK.T>_.j9(", "wMcsdgq");
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(file0);
      zipArchiveOutputStream0.writeZip64CentralDirectory();
      zipArchiveOutputStream0.writeCentralDirectoryEnd();
      ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-44);
      byteArray0[2] = (byte) (-44);
      byteArray0[3] = (byte) (-44);
      zipArchiveOutputStream0.writeOut(byteArray0);
      zipArchiveOutputStream0.setUseLanguageEncodingFlag(false);
      ZipArchiveEntry zipArchiveEntry1 = new ZipArchiveEntry(", compressedSize=");
      zipArchiveEntry1.setTime(1918L);
      zipArchiveOutputStream0.writeDataDescriptor(zipArchiveEntry1);
      zipArchiveOutputStream0.putArchiveEntry(zipArchiveEntry1);
      zipArchiveOutputStream0.setMethod(1334);
      zipArchiveOutputStream0.write(byteArray0, 0, 3);
      file0.createNewFile();
      zipArchiveOutputStream0.createArchiveEntry(file0, "wMcsdgq");
      zipArchiveOutputStream0.writeCentralDirectoryEnd();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(pipedInputStream0);
      zipArchiveOutputStream0.isSeekable();
//      try { 
        zipArchiveOutputStream0.addRawArchiveEntry(zipArchiveEntry1, pushbackInputStream0);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Pipe not connected
//         //
//         verifyException("java.io.PipedInputStream", e);
//      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      File file0 = MockFile.createTempFile("9SOzK.T>_.j9(", "wcsdgq");
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(file0);
      zipArchiveOutputStream0.writeCentralDirectoryEnd();
      ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry("wcsdgq");
      zipArchiveOutputStream0.setLevel(3);
      zipArchiveEntry0.equals(zipArchiveOutputStream0);
      ArchiveEntry archiveEntry0 = zipArchiveOutputStream0.createArchiveEntry(file0, "e6");
      zipArchiveOutputStream0.writeDataDescriptor(zipArchiveEntry0);
      zipArchiveOutputStream0.putArchiveEntry(archiveEntry0);
      zipArchiveOutputStream0.setUseLanguageEncodingFlag(false);
      ZipArchiveOutputStream.UnicodeExtraFieldPolicy zipArchiveOutputStream_UnicodeExtraFieldPolicy0 = ZipArchiveOutputStream.UnicodeExtraFieldPolicy.NOT_ENCODEABLE;
      ZipArchiveOutputStream zipArchiveOutputStream1 = new ZipArchiveOutputStream(file0);
      zipArchiveOutputStream1.setCreateUnicodeExtraFields(zipArchiveOutputStream_UnicodeExtraFieldPolicy0);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(file0, false);
      ZipArchiveOutputStream zipArchiveOutputStream2 = new ZipArchiveOutputStream(mockFileOutputStream0);
      JarArchiveEntry jarArchiveEntry0 = null;
//      try {
        jarArchiveEntry0 = new JarArchiveEntry(zipArchiveEntry0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // ZIP compression method can not be negative: -1
//         //
//         verifyException("org.apache.commons.compress.archivers.zip.ZipArchiveEntry", e);
//      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      File file0 = MockFile.createTempFile("|@XO!c+Y3]g4v;", "");
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(file0);
      zipArchiveOutputStream0.writeCentralDirectoryEnd();
      ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-44);
      byteArray0[1] = (byte) (-44);
      byteArray0[2] = (byte) (-44);
      zipArchiveOutputStream0.writeOut(byteArray0);
      zipArchiveOutputStream0.setUseLanguageEncodingFlag(true);
      ZipArchiveEntry zipArchiveEntry1 = new ZipArchiveEntry("");
      zipArchiveOutputStream0.writeDataDescriptor(zipArchiveEntry0);
      ZipArchiveOutputStream zipArchiveOutputStream1 = new ZipArchiveOutputStream(file0);
      zipArchiveOutputStream1.putArchiveEntry(zipArchiveEntry1);
      ZipArchiveOutputStream zipArchiveOutputStream2 = new ZipArchiveOutputStream(zipArchiveOutputStream0);
      zipArchiveOutputStream2.setMethod((-389));
      zipArchiveOutputStream0.setUseLanguageEncodingFlag(false);
      zipArchiveOutputStream0.putArchiveEntry(zipArchiveEntry1);
      zipArchiveOutputStream0.setMethod(0);
      zipArchiveOutputStream1.writeLocalFileHeader(zipArchiveEntry1);
      System.setCurrentTimeMillis(8);
//      try { 
        zipArchiveOutputStream2.close();
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // This archive contains unclosed entries.
//         //
//         verifyException("org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream", e);
//      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      String string0 = "*9|}4S*<O";
      MockPrintStream mockPrintStream0 = new MockPrintStream("*9|}4S*<O");
      Locale locale0 = new Locale("");
      Object object0 = new Object();
      mockPrintStream0.print(object0);
      String string1 = "rb~6.K`P6\"G:";
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) "rb~6.K`P6\"G:";
      Object object1 = new Object();
      objectArray0[1] = object1;
      objectArray0[2] = (Object) locale0;
      mockPrintStream0.format(locale0, "rb~6.K`P6\"G:", objectArray0);
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(mockPrintStream0);
      zipArchiveOutputStream0.close();
      zipArchiveOutputStream0.setCreateUnicodeExtraFields((ZipArchiveOutputStream.UnicodeExtraFieldPolicy) null);
      // Undeclared exception!
//      try { 
        zipArchiveOutputStream0.setEncoding("rb~6.K`P6\"G:");
//        fail("Expecting exception: IllegalCharsetNameException");
      
//      } catch(IllegalCharsetNameException e) {
//         //
//         // rb~6.K`P6\"G:
//         //
//         verifyException("java.nio.charset.Charset", e);
//      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      File file0 = MockFile.createTempFile("9SOzK.T>_.j9(", "wMcsdgq");
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(file0);
      zipArchiveOutputStream0.writeCentralDirectoryEnd();
      ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
      byte[] byteArray0 = new byte[4];
      byteArray0[1] = (byte) (-44);
      byteArray0[2] = (byte) (-44);
      byteArray0[3] = (byte) (-44);
      zipArchiveOutputStream0.writeOut(byteArray0);
      zipArchiveOutputStream0.setUseLanguageEncodingFlag(true);
      ZipArchiveEntry zipArchiveEntry1 = new ZipArchiveEntry(", compressedSize=");
      zipArchiveOutputStream0.writeDataDescriptor(zipArchiveEntry1);
      zipArchiveOutputStream0.putArchiveEntry(zipArchiveEntry1);
      zipArchiveOutputStream0.setMethod(1334);
      zipArchiveOutputStream0.setUseLanguageEncodingFlag(true);
      zipArchiveOutputStream0.putArchiveEntry(zipArchiveEntry1);
      zipArchiveOutputStream0.setMethod(0);
      zipArchiveOutputStream0.writeLocalFileHeader(zipArchiveEntry0);
      System.setCurrentTimeMillis(1L);
//      try { 
        zipArchiveOutputStream0.close();
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // This archive contains unclosed entries.
//         //
//         verifyException("org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream", e);
//      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      String string0 = "9SOzK.T>_.j9(";
      File file0 = MockFile.createTempFile("9SOzK.T>_.j9(", "wMcsdgq");
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(file0);
      zipArchiveOutputStream0.writeCentralDirectoryEnd();
      ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
      ZipArchiveOutputStream zipArchiveOutputStream1 = new ZipArchiveOutputStream(zipArchiveOutputStream0);
      // Undeclared exception!
//      try { 
        zipArchiveOutputStream1.writeCentralDirectoryEnd();
//        fail("Expecting exception: IllegalStateException");
      
//      } catch(IllegalStateException e) {
//         //
//         // No current entry
//         //
//         verifyException("org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream", e);
//      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      File file0 = MockFile.createTempFile("9SOzK.T>_.j9(", "wMcsdgq");
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(file0);
      zipArchiveOutputStream0.writeCentralDirectoryEnd();
      ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
      zipArchiveOutputStream0.setLevel(3);
      zipArchiveOutputStream0.setLevel((-1));
      ZipArchiveOutputStream.UnicodeExtraFieldPolicy zipArchiveOutputStream_UnicodeExtraFieldPolicy0 = ZipArchiveOutputStream.UnicodeExtraFieldPolicy.NEVER;
      zipArchiveOutputStream0.setCreateUnicodeExtraFields(zipArchiveOutputStream_UnicodeExtraFieldPolicy0);
      zipArchiveEntry0.equals(zipArchiveOutputStream0);
      MockFile.createTempFile(", extendedHeaders=", ",J");
      zipArchiveOutputStream0.createArchiveEntry(file0, ", extendedHeaders=");
      JarEntry jarEntry0 = new JarEntry("Stream has already been finished");
      JarArchiveEntry jarArchiveEntry0 = new JarArchiveEntry("not encodeable");
      file0.toPath();
      OpenOption[] openOptionArray0 = new OpenOption[2];
      // Undeclared exception!
//      try { 
        StandardOpenOption.valueOf((String) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Name is null
//         //
//         verifyException("java.lang.Enum", e);
//      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      File file0 = MockFile.createTempFile("9SOzK.T>_.j9(", "wMcsdgq");
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(file0);
      zipArchiveOutputStream0.writeCentralDirectoryEnd();
      ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-44);
      byteArray0[2] = (byte) (-44);
      byteArray0[3] = (byte) (-44);
      zipArchiveOutputStream0.writeOut(byteArray0);
      zipArchiveOutputStream0.setUseLanguageEncodingFlag(false);
      ZipArchiveEntry zipArchiveEntry1 = new ZipArchiveEntry(", compressedSize=");
      zipArchiveOutputStream0.writeDataDescriptor(zipArchiveEntry1);
      zipArchiveEntry1.getLocalFileDataExtra();
      zipArchiveOutputStream0.putArchiveEntry(zipArchiveEntry1);
      zipArchiveOutputStream0.setMethod(1334);
      zipArchiveOutputStream0.setUseLanguageEncodingFlag(false);
      ZipArchiveOutputStream.UnicodeExtraFieldPolicy zipArchiveOutputStream_UnicodeExtraFieldPolicy0 = ZipArchiveOutputStream.UnicodeExtraFieldPolicy.NOT_ENCODEABLE;
      zipArchiveOutputStream0.setCreateUnicodeExtraFields(zipArchiveOutputStream_UnicodeExtraFieldPolicy0);
      ZipArchiveOutputStream zipArchiveOutputStream1 = new ZipArchiveOutputStream(zipArchiveOutputStream0);
      zipArchiveOutputStream1.canWriteEntryData(zipArchiveEntry1);
      // Undeclared exception!
//      try { 
        zipArchiveOutputStream1.writeLocalFileHeader(zipArchiveEntry0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream$CurrentEntry", e);
//      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      File file0 = MockFile.createTempFile("9SOzK.T>_.j9(", "wMcsdgq");
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(file0);
      zipArchiveOutputStream0.writeCentralDirectoryEnd();
      ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
      zipArchiveOutputStream0.setLevel((-1));
      zipArchiveEntry0.equals(zipArchiveOutputStream0);
      MockFile.createTempFile(", extendedHeaders=", ",J");
      zipArchiveOutputStream0.createArchiveEntry(file0, ", extendedHeaders=");
      JarEntry jarEntry0 = new JarEntry("Stream has already been finished");
      JarArchiveEntry jarArchiveEntry0 = new JarArchiveEntry("not encodeable");
      file0.toPath();
      OpenOption[] openOptionArray0 = new OpenOption[2];
      // Undeclared exception!
//      try { 
        StandardOpenOption.valueOf((String) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Name is null
//         //
//         verifyException("java.lang.Enum", e);
//      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      File file0 = MockFile.createTempFile("9SOzK.T>_.j9(", "wMcsdgq");
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(file0);
      zipArchiveOutputStream0.writeCentralDirectoryEnd();
      ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-25);
      byteArray0[1] = (byte) (-44);
      byteArray0[2] = (byte) (-44);
      byteArray0[3] = (byte) (-44);
      zipArchiveOutputStream0.writeOut(byteArray0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      zipArchiveOutputStream0.setUseLanguageEncodingFlag(false);
      ZipArchiveEntry zipArchiveEntry1 = new ZipArchiveEntry(", compressedSize=");
      zipArchiveOutputStream0.writeDataDescriptor(zipArchiveEntry1);
      zipArchiveOutputStream0.putArchiveEntry(zipArchiveEntry1);
      JarArchiveEntry jarArchiveEntry0 = new JarArchiveEntry("1:9]lI");
      zipArchiveOutputStream0.writeLocalFileHeader(zipArchiveEntry0);
      System.setCurrentTimeMillis((byte) (-44));
//      try { 
        zipArchiveOutputStream0.close();
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // This archive contains unclosed entries.
//         //
//         verifyException("org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream", e);
//      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      File file0 = MockFile.createTempFile("9SOzK.T>_.j9(", "wMcsdgq");
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(file0);
      zipArchiveOutputStream0.writeZip64CentralDirectory();
      zipArchiveOutputStream0.writeCentralDirectoryEnd();
      ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-44);
      byteArray0[2] = (byte) (-44);
      byteArray0[3] = (byte) (-44);
      zipArchiveOutputStream0.writeOut(byteArray0);
      zipArchiveOutputStream0.setUseLanguageEncodingFlag(false);
      ZipArchiveEntry zipArchiveEntry1 = new ZipArchiveEntry(", compressedSize=");
      zipArchiveEntry1.setTime(1918L);
      zipArchiveOutputStream0.writeDataDescriptor(zipArchiveEntry1);
      zipArchiveOutputStream0.putArchiveEntry(zipArchiveEntry1);
      zipArchiveOutputStream0.setMethod(1334);
      zipArchiveOutputStream0.write(byteArray0, 0, 3);
      zipArchiveOutputStream0.createArchiveEntry(file0, "wMcsdgq");
      zipArchiveOutputStream0.writeCentralDirectoryEnd();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(pipedInputStream0);
//      try { 
        zipArchiveOutputStream0.addRawArchiveEntry(zipArchiveEntry1, pushbackInputStream0);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Pipe not connected
//         //
//         verifyException("java.io.PipedInputStream", e);
//      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      File file0 = MockFile.createTempFile("9SOzK.T>_.j9(", "wMcsdgq");
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(file0);
      zipArchiveOutputStream0.writeCentralDirectoryEnd();
      ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
      byte byte0 = (byte) (-44);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-44);
      byteArray0[2] = (byte) (-44);
      byteArray0[3] = (byte) (-44);
      zipArchiveOutputStream0.writeOut(byteArray0);
      boolean boolean0 = true;
      zipArchiveOutputStream0.setUseLanguageEncodingFlag(true);
      ZipArchiveEntry zipArchiveEntry1 = new ZipArchiveEntry(", compressedSize=");
      zipArchiveOutputStream0.writeDataDescriptor(zipArchiveEntry1);
      zipArchiveOutputStream0.putArchiveEntry(zipArchiveEntry1);
      zipArchiveOutputStream0.setMethod(1334);
      zipArchiveOutputStream0.setUseLanguageEncodingFlag(true);
      zipArchiveOutputStream0.putArchiveEntry(zipArchiveEntry1);
      zipArchiveOutputStream0.setMethod(0);
      // Undeclared exception!
//      try { 
        zipArchiveOutputStream0.write(byteArray0, 1334, (-1));
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.util.zip.CRC32", e);
//      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      File file0 = MockFile.createTempFile("9SOzK.T>_.j9(", "wMcsdgq");
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(file0);
      zipArchiveOutputStream0.writeCentralDirectoryEnd();
      ZipArchiveOutputStream zipArchiveOutputStream1 = new ZipArchiveOutputStream(zipArchiveOutputStream0);
      zipArchiveOutputStream0.finish();
      Zip64Mode zip64Mode0 = Zip64Mode.Never;
      zipArchiveOutputStream0.setUseZip64(zip64Mode0);
      zipArchiveOutputStream0.setUseLanguageEncodingFlag(false);
      zipArchiveOutputStream0.setUseLanguageEncodingFlag(false);
      ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry("wMcsdgq");
      zipArchiveOutputStream0.writeDataDescriptor(zipArchiveEntry0);
//      try { 
        zipArchiveOutputStream0.putArchiveEntry((ArchiveEntry) null);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Stream has already been finished
//         //
//         verifyException("org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream", e);
//      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      File file0 = MockFile.createTempFile("9SOzK.T>_.j9(", "wMcsdgq");
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(file0);
      zipArchiveOutputStream0.writeCentralDirectoryEnd();
      ZipArchiveOutputStream zipArchiveOutputStream1 = new ZipArchiveOutputStream(zipArchiveOutputStream0);
      zipArchiveOutputStream0.finish();
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-75);
      byteArray0[1] = (byte) (-75);
      byteArray0[2] = (byte) (-75);
      byteArray0[3] = (byte) (-75);
      // Undeclared exception!
//      try { 
        zipArchiveOutputStream1.writeOut(byteArray0, (byte) (-75), (byte) (-75));
//        fail("Expecting exception: IllegalStateException");
      
//      } catch(IllegalStateException e) {
//         //
//         // No current entry
//         //
//         verifyException("org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream", e);
//      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      File file0 = MockFile.createTempFile("9SOzK.T>_.j9(", "wMcsdgq");
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(file0);
      zipArchiveOutputStream0.writeCentralDirectoryEnd();
      ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
      Zip64Mode zip64Mode0 = Zip64Mode.Always;
      zipArchiveOutputStream0.setUseZip64(zip64Mode0);
      ZipArchiveOutputStream zipArchiveOutputStream1 = new ZipArchiveOutputStream(zipArchiveOutputStream0);
      file0.setWritable(true, false);
      ZipArchiveEntry zipArchiveEntry1 = new ZipArchiveEntry();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("}J_}#_rRG^1h");
      FileSystemHandling.createFolder(evoSuiteFile0);
      zipArchiveOutputStream0.writeDataDescriptor(zipArchiveEntry0);
      zipArchiveOutputStream1.setFallbackToUTF8(true);
      DumpArchiveEntry dumpArchiveEntry0 = new DumpArchiveEntry("wMcsdgq", "wMcsdgq");
      zipArchiveOutputStream0.canWriteEntryData(zipArchiveEntry0);
      JarEntry jarEntry0 = new JarEntry("wMcsdgq");
      JarArchiveEntry jarArchiveEntry0 = null;
//      try {
        jarArchiveEntry0 = new JarArchiveEntry(jarEntry0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // ZIP compression method can not be negative: -1
//         //
//         verifyException("org.apache.commons.compress.archivers.zip.ZipArchiveEntry", e);
//      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      MockFile mockFile0 = new MockFile("IhV&e}Q:)");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0, true);
      FileChannel fileChannel0 = mockFileOutputStream0.getChannel();
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(fileChannel0);
      zipArchiveOutputStream0.flush();
      DumpArchiveEntry dumpArchiveEntry0 = new DumpArchiveEntry();
      // Undeclared exception!
//      try { 
        zipArchiveOutputStream0.putArchiveEntry(dumpArchiveEntry0);
//        fail("Expecting exception: ClassCastException");
      
//      } catch(ClassCastException e) {
//         //
//         // org.apache.commons.compress.archivers.dump.DumpArchiveEntry cannot be cast to org.apache.commons.compress.archivers.zip.ZipArchiveEntry
//         //
//         verifyException("org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream", e);
//      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      File file0 = MockFile.createTempFile("9SOzK.T>_.j9(", "wMcsdgq");
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(file0);
      zipArchiveOutputStream0.writeCentralDirectoryEnd();
      ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
      zipArchiveOutputStream0.setLevel(3);
      zipArchiveEntry0.equals(zipArchiveOutputStream0);
      MockFile.createTempFile("9SOzK.T>_.j9(", "wMcsdgq");
      zipArchiveOutputStream0.createArchiveEntry(file0, "e6");
      JarEntry jarEntry0 = new JarEntry("7loMDr/SQWu)A~5;+d");
      JarArchiveEntry jarArchiveEntry0 = new JarArchiveEntry("7loMDr/SQWu)A~5;+d");
      // Undeclared exception!
//      try { 
        zipArchiveOutputStream0.writeLocalFileHeader(jarArchiveEntry0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream$CurrentEntry", e);
//      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      FileChannel fileChannel0 = mockFileInputStream0.getChannel();
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(fileChannel0);
      // Undeclared exception!
//      try { 
        zipArchiveOutputStream0.finish();
//        fail("Expecting exception: NonWritableChannelException");
      
//      } catch(NonWritableChannelException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.evosuite.runtime.mock.java.io.EvoFileChannel", e);
//      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-74);
      int int0 = 740;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(">]j");
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream((SeekableByteChannel) null);
      // Undeclared exception!
//      try { 
        zipArchiveOutputStream0.putArchiveEntry(zipArchiveEntry0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      String string0 = "wMcsdgq";
      File file0 = MockFile.createTempFile("9SOzK.T>_.j9(", "wMcsdgq");
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(file0);
      zipArchiveOutputStream0.writeCentralDirectoryEnd();
      ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
      zipArchiveOutputStream0.setLevel(3);
      ZipArchiveOutputStream zipArchiveOutputStream1 = new ZipArchiveOutputStream(zipArchiveOutputStream0);
      byte[] byteArray0 = new byte[2];
      byte byte0 = (byte) (-6);
      byteArray0[0] = (byte) (-6);
      byteArray0[1] = (byte) (-97);
      // Undeclared exception!
//      try { 
        zipArchiveOutputStream1.writeOut(byteArray0);
//        fail("Expecting exception: IllegalStateException");
      
//      } catch(IllegalStateException e) {
//         //
//         // No current entry
//         //
//         verifyException("org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream", e);
//      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      File file0 = MockFile.createTempFile("9SOzK.T>_.j9(", "wMcsdgq");
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(file0);
      zipArchiveOutputStream0.writeCentralDirectoryEnd();
      ZipArchiveOutputStream zipArchiveOutputStream1 = new ZipArchiveOutputStream(zipArchiveOutputStream0);
      zipArchiveOutputStream0.finish();
      Zip64Mode zip64Mode0 = Zip64Mode.Never;
      zipArchiveOutputStream0.setUseZip64(zip64Mode0);
      boolean boolean0 = true;
      zipArchiveOutputStream0.setUseLanguageEncodingFlag(true);
      ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry("archive contains more than 65535 entries.");
      // Undeclared exception!
//      try { 
        zipArchiveOutputStream1.putArchiveEntry(zipArchiveEntry0);
//        fail("Expecting exception: IllegalStateException");
      
//      } catch(IllegalStateException e) {
//         //
//         // No current entry
//         //
//         verifyException("org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream", e);
//      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      FileChannel fileChannel0 = mockFileInputStream0.getChannel();
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(fileChannel0);
      ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-44);
      // Undeclared exception!
//      try { 
        zipArchiveOutputStream0.writeOut(byteArray0);
//        fail("Expecting exception: NonWritableChannelException");
      
//      } catch(NonWritableChannelException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.evosuite.runtime.mock.java.io.EvoFileChannel", e);
//      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      FileChannel fileChannel0 = mockFileInputStream0.getChannel();
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(fileChannel0);
      ZipArchiveOutputStream zipArchiveOutputStream1 = new ZipArchiveOutputStream(zipArchiveOutputStream0);
      Zip64Mode zip64Mode0 = Zip64Mode.Never;
      zipArchiveOutputStream1.setUseZip64(zip64Mode0);
      zipArchiveOutputStream0.setUseLanguageEncodingFlag(true);
      boolean boolean0 = false;
      ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry("k}V1lvo P}nZUGg");
      // Undeclared exception!
//      try { 
        zipArchiveOutputStream0.putArchiveEntry(zipArchiveEntry0);
//        fail("Expecting exception: NonWritableChannelException");
      
//      } catch(NonWritableChannelException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.evosuite.runtime.mock.java.io.EvoFileChannel", e);
//      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      MockFile mockFile0 = new MockFile("IhV&e}Q:)");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0, true);
      FileChannel fileChannel0 = mockFileOutputStream0.getChannel();
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(fileChannel0);
      zipArchiveOutputStream0.flush();
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-74);
      mockFileOutputStream0.write(byteArray0, 0, 740);
      zipArchiveOutputStream0.setEncoding((String) null);
      ZipArchiveOutputStream.UnicodeExtraFieldPolicy zipArchiveOutputStream_UnicodeExtraFieldPolicy0 = ZipArchiveOutputStream.UnicodeExtraFieldPolicy.NEVER;
      ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
      // Undeclared exception!
//      try { 
        zipArchiveOutputStream0.writeCentralFileHeader(zipArchiveEntry0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream$EntryMetaData", e);
//      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
      MockFile mockFile0 = new MockFile("}J_}#_rRG^1h", "}J_}#_rRG^1h");
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(mockFile0);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte)0;
      zipArchiveOutputStream0.writeOut(byteArray0);
      zipArchiveOutputStream0.setUseLanguageEncodingFlag(true);
      ZipArchiveEntry zipArchiveEntry1 = new ZipArchiveEntry(", arjFlags=");
      zipArchiveOutputStream0.writeDataDescriptor(zipArchiveEntry1);
      zipArchiveOutputStream0.putArchiveEntry(zipArchiveEntry1);
      zipArchiveOutputStream0.setMethod((-782));
      zipArchiveOutputStream0.setUseLanguageEncodingFlag(false);
      ZipArchiveOutputStream.UnicodeExtraFieldPolicy zipArchiveOutputStream_UnicodeExtraFieldPolicy0 = ZipArchiveOutputStream.UnicodeExtraFieldPolicy.NOT_ENCODEABLE;
      ZipArchiveOutputStream.UnicodeExtraFieldPolicy zipArchiveOutputStream_UnicodeExtraFieldPolicy1 = ZipArchiveOutputStream.UnicodeExtraFieldPolicy.NEVER;
      zipArchiveOutputStream0.setCreateUnicodeExtraFields(zipArchiveOutputStream_UnicodeExtraFieldPolicy1);
      ZipArchiveOutputStream zipArchiveOutputStream1 = new ZipArchiveOutputStream(zipArchiveOutputStream0);
      boolean boolean0 = zipArchiveOutputStream1.canWriteEntryData(zipArchiveEntry1);
      assertEquals(8, zipArchiveEntry1.getMethod());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      MockFile mockFile0 = new MockFile("IhV&e}Q:)", "0x");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0, true);
      FileChannel fileChannel0 = mockFileOutputStream0.getChannel();
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(fileChannel0);
      zipArchiveOutputStream0.flush();
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-74);
      mockFileOutputStream0.write(byteArray0, 0, 740);
      zipArchiveOutputStream0.setEncoding((String) null);
      ZipArchiveOutputStream.UnicodeExtraFieldPolicy zipArchiveOutputStream_UnicodeExtraFieldPolicy0 = ZipArchiveOutputStream.UnicodeExtraFieldPolicy.NEVER;
      String string0 = zipArchiveOutputStream_UnicodeExtraFieldPolicy0.toString();
      assertEquals("never", string0);
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      MockFile mockFile0 = new MockFile("IhV&e}Q:)", "0x");
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream((OutputStream) null);
      zipArchiveOutputStream0.setUseLanguageEncodingFlag(false);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-75);
      byteArray0[1] = (byte)57;
      byteArray0[2] = (byte) (-75);
      byteArray0[3] = (byte) (-75);
      byteArray0[4] = (byte) (-75);
      byteArray0[5] = (byte) (-75);
      byteArray0[6] = (byte) (-75);
      byteArray0[7] = (byte) (-75);
      byteArray0[8] = (byte) (-75);
      // Undeclared exception!
//      try { 
        zipArchiveOutputStream0.writeOut(byteArray0, (byte) (-75), 19);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.compress.archivers.zip.StreamCompressor$OutputStreamCompressor", e);
//      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      File file0 = MockFile.createTempFile("9SOzK.T>_.j9(", "wMcsdgq");
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(file0);
      zipArchiveOutputStream0.writeCentralDirectoryEnd();
      ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
      Zip64Mode zip64Mode0 = Zip64Mode.Always;
      zipArchiveOutputStream0.setUseZip64(zip64Mode0);
      ZipArchiveOutputStream zipArchiveOutputStream1 = new ZipArchiveOutputStream(zipArchiveOutputStream0);
      file0.setWritable(true, false);
      ZipArchiveEntry zipArchiveEntry1 = new ZipArchiveEntry();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("}J_}#_rRG^1h");
      FileSystemHandling.createFolder(evoSuiteFile0);
      zipArchiveOutputStream0.writeDataDescriptor(zipArchiveEntry0);
      DumpArchiveEntry dumpArchiveEntry0 = new DumpArchiveEntry("wMcsdgq", "wMcsdgq");
      zipArchiveOutputStream0.canWriteEntryData(zipArchiveEntry0);
      JarEntry jarEntry0 = new JarEntry("wMcsdgq");
      JarArchiveEntry jarArchiveEntry0 = null;
//      try {
        jarArchiveEntry0 = new JarArchiveEntry(jarEntry0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // ZIP compression method can not be negative: -1
//         //
//         verifyException("org.apache.commons.compress.archivers.zip.ZipArchiveEntry", e);
//      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      File file0 = MockFile.createTempFile("wMcsdgq", "wMcsdgq");
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(file0);
      zipArchiveOutputStream0.writeCentralDirectoryEnd();
      ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      zipArchiveEntry0.setExternalAttributes((byte) (-44));
      byteArray0[2] = (byte)45;
      byteArray0[3] = (byte) (-44);
      byteArray0[4] = (byte) (-44);
      zipArchiveOutputStream0.writeOut(byteArray0);
      boolean boolean0 = false;
      zipArchiveOutputStream0.setUseLanguageEncodingFlag(false);
      ZipArchiveEntry zipArchiveEntry1 = new ZipArchiveEntry("wMcsdgq");
      zipArchiveOutputStream0.writeDataDescriptor(zipArchiveEntry0);
      ZipArchiveOutputStream zipArchiveOutputStream1 = new ZipArchiveOutputStream(file0);
      zipArchiveOutputStream1.putArchiveEntry(zipArchiveEntry0);
      zipArchiveOutputStream1.setMethod(1);
      // Undeclared exception!
//      try { 
        zipArchiveOutputStream1.write(byteArray0, (-1514), 528);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.util.zip.CRC32", e);
//      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      File file0 = MockFile.createTempFile("9SOzK.T>_.j9(", "wMcsdgq");
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(file0);
      zipArchiveOutputStream0.writeCentralDirectoryEnd();
      ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
      zipArchiveOutputStream0.setLevel(3);
      zipArchiveEntry0.equals(zipArchiveOutputStream0);
      MockFile.createTempFile("9SOzK.T>_.j9(", (String) null);
      zipArchiveOutputStream0.createArchiveEntry(file0, "e6");
      JarEntry jarEntry0 = new JarEntry("7loMDr/SQWu)A~5;+d");
      zipArchiveEntry0.setPlatform(0);
      JarArchiveEntry jarArchiveEntry0 = null;
//      try {
        jarArchiveEntry0 = new JarArchiveEntry(jarEntry0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // ZIP compression method can not be negative: -1
//         //
//         verifyException("org.apache.commons.compress.archivers.zip.ZipArchiveEntry", e);
//      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(byteArrayOutputStream0);
      zipArchiveOutputStream0.setUseLanguageEncodingFlag(false);
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)24;
      byteArray0[1] = (byte) (-115);
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte) (-115);
      byteArray0[4] = (byte)25;
      zipArchiveOutputStream0.writeOut(byteArray0);
      zipArchiveOutputStream0.setUseLanguageEncodingFlag(false);
      ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry("");
      MockFile mockFile0 = new MockFile((File) null, "~<I\u0005e!zF^");
      ZipArchiveEntry zipArchiveEntry1 = new ZipArchiveEntry(mockFile0, "");
      zipArchiveOutputStream0.writeDataDescriptor(zipArchiveEntry1);
      zipArchiveOutputStream0.putArchiveEntry(zipArchiveEntry1);
      zipArchiveOutputStream0.setMethod(1);
      zipArchiveOutputStream0.write(byteArray0, 3, (int) (byte)0);
      assertEquals(35, byteArrayOutputStream0.size());
      assertEquals("\u0018\uFFFD\u0000\uFFFD\u0019PK\u0003\u0004\u0014\u0000\b\u0000\b\u0000\u0000!\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", byteArrayOutputStream0.toString());
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      File file0 = MockFile.createTempFile("9SOzK.T>_.j9(", "wMcsdgq");
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(file0);
      zipArchiveOutputStream0.writeCentralDirectoryEnd();
      ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-44);
      byteArray0[2] = (byte) (-44);
      byteArray0[3] = (byte) (-44);
      zipArchiveOutputStream0.writeOut(byteArray0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      zipArchiveOutputStream0.setUseLanguageEncodingFlag(false);
      ZipArchiveEntry zipArchiveEntry1 = new ZipArchiveEntry(", compressedSize=");
      zipArchiveOutputStream0.writeDataDescriptor(zipArchiveEntry1);
      zipArchiveOutputStream0.putArchiveEntry(zipArchiveEntry1);
      zipArchiveOutputStream0.setMethod(1334);
      zipArchiveOutputStream0.setUseLanguageEncodingFlag(false);
      zipArchiveOutputStream0.write(byteArray0);
//      try { 
        zipArchiveOutputStream0.close();
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // This archive contains unclosed entries.
//         //
//         verifyException("org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream", e);
//      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-74);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      MockFile mockFile0 = new MockFile("5#R8{.,x", "070707");
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(mockFile0);
      // Undeclared exception!
//      try { 
        zipArchiveOutputStream0.writeCentralFileHeader((ZipArchiveEntry) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream", e);
//      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      String string0 = "IhV&e}Q:)";
      MockFile mockFile0 = new MockFile("IhV&e}Q:)", "0x");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0, true);
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(mockFileOutputStream0);
      ZipArchiveOutputStream zipArchiveOutputStream1 = new ZipArchiveOutputStream(mockFileOutputStream0);
//      try { 
        zipArchiveOutputStream1.finish();
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Error in writing to file
//         //
//         verifyException("org.evosuite.runtime.mock.java.io.NativeMockedIO", e);
//      }
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("%*{_?Uzrxk");
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(mockFileOutputStream0);
      int int0 = 40;
      zipArchiveOutputStream0.deflate();
      FileSystemHandling.shouldAllThrowIOExceptions();
//      try { 
        zipArchiveOutputStream0.writeOut((byte[]) null, 40, 6);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Simulated IOException
//         //
//         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
//      }
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      MockFile mockFile0 = new MockFile("IhV&e}Q:)", "0x");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0, true);
      FileChannel fileChannel0 = mockFileOutputStream0.getChannel();
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(fileChannel0);
      zipArchiveOutputStream0.flush();
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-74);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 740, 2048);
      // Undeclared exception!
//      try { 
        zipArchiveOutputStream0.addRawArchiveEntry((ZipArchiveEntry) null, byteArrayInputStream0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // entry
//         //
//         verifyException("java.util.Objects", e);
//      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(byteArrayOutputStream0);
      zipArchiveOutputStream0.setUseLanguageEncodingFlag(false);
      // Undeclared exception!
//      try { 
        zipArchiveOutputStream0.setLevel(72);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Invalid compression level: 72
//         //
//         verifyException("org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream", e);
//      }
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      File file0 = MockFile.createTempFile(";yy] qE`e", "org.apache.commons.compress.archivers.zip.X0016_CertificateIdForCentralDirectory");
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(file0);
      zipArchiveOutputStream0.writeCentralDirectoryEnd();
      ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)4;
      byteArray0[0] = (byte) (-44);
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte) (-44);
      byteArray0[4] = (byte)0;
      byteArray0[6] = (byte) (-44);
      byteArray0[7] = (byte) (-44);
      byteArray0[8] = (byte)0;
      zipArchiveOutputStream0.writeOut(byteArray0);
      zipArchiveOutputStream0.setUseLanguageEncodingFlag(true);
      ZipArchiveEntry zipArchiveEntry1 = new ZipArchiveEntry(", compressedSize=");
      zipArchiveOutputStream0.writeDataDescriptor(zipArchiveEntry0);
      zipArchiveOutputStream0.putArchiveEntry(zipArchiveEntry0);
      zipArchiveOutputStream0.setMethod((-3600));
      zipArchiveOutputStream0.setUseLanguageEncodingFlag(false);
      ZipArchiveOutputStream.UnicodeExtraFieldPolicy zipArchiveOutputStream_UnicodeExtraFieldPolicy0 = ZipArchiveOutputStream.UnicodeExtraFieldPolicy.NOT_ENCODEABLE;
      zipArchiveOutputStream0.setCreateUnicodeExtraFields(zipArchiveOutputStream_UnicodeExtraFieldPolicy0);
      ZipArchiveOutputStream zipArchiveOutputStream1 = new ZipArchiveOutputStream(zipArchiveOutputStream0);
      ZipArchiveOutputStream zipArchiveOutputStream2 = new ZipArchiveOutputStream(file0);
      String string0 = zipArchiveOutputStream0.getEncoding();
      assertEquals("UTF8", string0);
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      File file0 = MockFile.createTempFile("9SOzK.T>_.j9(", "wMcsdgq");
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(file0);
      zipArchiveOutputStream0.writeCentralDirectoryEnd();
      ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-44);
      byteArray0[2] = (byte) (-44);
      byteArray0[3] = (byte) (-44);
      zipArchiveOutputStream0.writeOut(byteArray0);
      zipArchiveOutputStream0.setUseLanguageEncodingFlag(false);
      ZipArchiveEntry zipArchiveEntry1 = new ZipArchiveEntry(", compressedSize=");
      zipArchiveOutputStream0.writeDataDescriptor(zipArchiveEntry1);
      zipArchiveOutputStream0.putArchiveEntry(zipArchiveEntry1);
      zipArchiveOutputStream0.setMethod(1334);
      zipArchiveOutputStream0.setUseLanguageEncodingFlag(false);
      ZipArchiveOutputStream.UnicodeExtraFieldPolicy zipArchiveOutputStream_UnicodeExtraFieldPolicy0 = ZipArchiveOutputStream.UnicodeExtraFieldPolicy.NOT_ENCODEABLE;
      zipArchiveOutputStream0.setCreateUnicodeExtraFields(zipArchiveOutputStream_UnicodeExtraFieldPolicy0);
      ZipArchiveOutputStream zipArchiveOutputStream1 = new ZipArchiveOutputStream(zipArchiveOutputStream0);
      boolean boolean0 = zipArchiveOutputStream1.canWriteEntryData(zipArchiveEntry1);
      assertEquals(8, zipArchiveEntry1.getMethod());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      File file0 = MockFile.createTempFile("9SOzK.T>_.j9(", "wMcsdgq");
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(file0);
      zipArchiveOutputStream0.writeCentralDirectoryEnd();
      ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-44);
      byteArray0[2] = (byte) (-44);
      byteArray0[3] = (byte) (-44);
      zipArchiveOutputStream0.writeOut(byteArray0);
      zipArchiveOutputStream0.setUseLanguageEncodingFlag(false);
      ZipArchiveEntry zipArchiveEntry1 = new ZipArchiveEntry(", compressedSize=");
      zipArchiveOutputStream0.writeDataDescriptor(zipArchiveEntry1);
      zipArchiveOutputStream0.putArchiveEntry(zipArchiveEntry1);
      assertEquals(8, zipArchiveEntry1.getMethod());
      
      zipArchiveOutputStream0.setMethod(1334);
      zipArchiveOutputStream0.write(byteArray0, 0, 3);
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      MockFile mockFile0 = new MockFile("IhV&e}Q:)", "0x");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0, true);
      FileChannel fileChannel0 = mockFileOutputStream0.getChannel();
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(fileChannel0);
      zipArchiveOutputStream0.flush();
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-74);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)84;
      mockFileOutputStream0.write(byteArray0, 0, 19);
      // Undeclared exception!
//      try { 
        zipArchiveOutputStream0.setEncoding("");
//        fail("Expecting exception: IllegalCharsetNameException");
      
//      } catch(IllegalCharsetNameException e) {
//         //
//         // 
//         //
//         verifyException("java.nio.charset.Charset", e);
//      }
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      MockFile mockFile0 = new MockFile("IhV&e}Q:)", "0x");
      MockFile mockFile1 = new MockFile("IhV&e}Q:)", ">i(slbF");
      mockFile1.setReadable(true);
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(mockFile0);
      // Undeclared exception!
//      try { 
        zipArchiveOutputStream0.createArchiveEntry(mockFile0, (String) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // name
//         //
//         verifyException("java.util.Objects", e);
//      }
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      MockFile mockFile0 = new MockFile("3yxp;)K&_]BOtiRC{");
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(mockFile0);
      zipArchiveOutputStream0.getEncoding();
      JarArchiveEntry jarArchiveEntry0 = new JarArchiveEntry("cu>hqw");
      ZipArchiveOutputStream zipArchiveOutputStream1 = new ZipArchiveOutputStream((SeekableByteChannel) null);
      zipArchiveOutputStream1.writeDataDescriptor(jarArchiveEntry0);
      jarArchiveEntry0.getLastModifiedTime();
      zipArchiveOutputStream0.destroy();
      ZipArchiveOutputStream zipArchiveOutputStream2 = new ZipArchiveOutputStream((SeekableByteChannel) null);
      zipArchiveOutputStream2.getEncoding();
      ZipArchiveOutputStream.UnicodeExtraFieldPolicy zipArchiveOutputStream_UnicodeExtraFieldPolicy0 = ZipArchiveOutputStream.UnicodeExtraFieldPolicy.NOT_ENCODEABLE;
      zipArchiveOutputStream_UnicodeExtraFieldPolicy0.toString();
//      try { 
        zipArchiveOutputStream0.writeCentralDirectoryEnd();
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.evosuite.runtime.mock.java.io.MockFileOutputStream", e);
//      }
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      File file0 = MockFile.createTempFile("9SOzK.T>_.j9(", "wMcsdgq");
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(file0);
      zipArchiveOutputStream0.writeCentralDirectoryEnd();
      ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
      Zip64Mode zip64Mode0 = Zip64Mode.Never;
      zipArchiveOutputStream0.setUseZip64(zip64Mode0);
      ZipArchiveOutputStream zipArchiveOutputStream1 = new ZipArchiveOutputStream(zipArchiveOutputStream0);
      zipArchiveOutputStream1.setUseLanguageEncodingFlag(true);
      String string0 = "\"XZr<)~";
      MockFile.createTempFile("?/_@s^FGH2@n", "uncompressed size is required for STORED method when not writing to a file");
      zipArchiveOutputStream0.createArchiveEntry(file0, "wMcsdgq");
      boolean boolean0 = zipArchiveOutputStream1.finished;
      zipArchiveOutputStream1.writeZip64CentralDirectory();
//      try { 
        zipArchiveOutputStream0.closeArchiveEntry();
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // No current entry to close
//         //
//         verifyException("org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream", e);
//      }
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      File file0 = MockFile.createTempFile("9SOzK.T>_.j9(", "wMcsdgq");
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(file0);
      zipArchiveOutputStream0.writeCentralDirectoryEnd();
      ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-44);
      byteArray0[2] = (byte) (-44);
      byteArray0[3] = (byte) (-44);
      zipArchiveOutputStream0.writeOut(byteArray0);
      zipArchiveOutputStream0.setUseLanguageEncodingFlag(false);
      ZipArchiveEntry zipArchiveEntry1 = new ZipArchiveEntry(", compressedSize=");
      zipArchiveOutputStream0.writeDataDescriptor(zipArchiveEntry1);
      zipArchiveOutputStream0.putArchiveEntry(zipArchiveEntry1);
      zipArchiveOutputStream0.setMethod(1334);
      zipArchiveOutputStream0.setUseLanguageEncodingFlag(false);
      ZipArchiveOutputStream.UnicodeExtraFieldPolicy zipArchiveOutputStream_UnicodeExtraFieldPolicy0 = ZipArchiveOutputStream.UnicodeExtraFieldPolicy.NOT_ENCODEABLE;
      zipArchiveOutputStream0.setCreateUnicodeExtraFields(zipArchiveOutputStream_UnicodeExtraFieldPolicy0);
      ZipArchiveOutputStream zipArchiveOutputStream1 = new ZipArchiveOutputStream(zipArchiveOutputStream0);
      zipArchiveOutputStream1.getEncoding();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0);
      // Undeclared exception!
//      try { 
        zipArchiveOutputStream1.addRawArchiveEntry(zipArchiveEntry0, pipedInputStream0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // ZIP compression method can not be negative: -1
//         //
//         verifyException("org.apache.commons.compress.archivers.zip.ZipArchiveEntry", e);
//      }
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      MockFile mockFile0 = new MockFile("org.apache.commons.compress.archivers.zip.ZipArchiveEntry", "@FUBbdm.o");
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(mockFile0);
      zipArchiveOutputStream0.flush();
      ZipArchiveEntry zipArchiveEntry0 = null;
//      try {
        zipArchiveEntry0 = new ZipArchiveEntry((String) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // name
//         //
//         verifyException("java.util.Objects", e);
//      }
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream((SeekableByteChannel) null);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)37;
      byteArray0[1] = (byte) (-114);
      ZipArchiveOutputStream.UnicodeExtraFieldPolicy zipArchiveOutputStream_UnicodeExtraFieldPolicy0 = ZipArchiveOutputStream.UnicodeExtraFieldPolicy.ALWAYS;
      zipArchiveOutputStream_UnicodeExtraFieldPolicy0.toString();
      // Undeclared exception!
//      try { 
        zipArchiveOutputStream0.writeCentralDirectoryEnd();
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(fileDescriptor0);
      DataOutputStream dataOutputStream0 = new DataOutputStream(mockFileOutputStream0);
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(dataOutputStream0);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte)78;
      zipArchiveOutputStream0.setMethod(8);
      zipArchiveOutputStream0.deflate();
//      try { 
        zipArchiveOutputStream0.writeOut(byteArray0);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.evosuite.runtime.mock.java.io.NativeMockedIO", e);
//      }
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      MockFile mockFile0 = new MockFile("IhV&e}Q:)", "0x");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0, true);
      FileChannel fileChannel0 = mockFileOutputStream0.getChannel();
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(fileChannel0);
      zipArchiveOutputStream0.flush();
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-74);
      byteArray0[1] = (byte)0;
      zipArchiveOutputStream0.writeOut(byteArray0);
      zipArchiveOutputStream0.setComment("");
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      
      ZipArchiveOutputStream zipArchiveOutputStream1 = new ZipArchiveOutputStream(mockFile0);
      ZipArchiveEntry zipArchiveEntry0 = (ZipArchiveEntry)zipArchiveOutputStream1.createArchiveEntry(mockFile0, "hKj+,N64mh\"?W");
      assertEquals("hKj+,N64mh\"?W", zipArchiveEntry0.toString());
      assertEquals("UTF8", zipArchiveOutputStream1.getEncoding());
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      FileChannel fileChannel0 = mockFileInputStream0.getChannel();
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(fileChannel0);
      ZipArchiveOutputStream zipArchiveOutputStream1 = new ZipArchiveOutputStream(zipArchiveOutputStream0);
      // Undeclared exception!
//      try { 
        zipArchiveOutputStream1.finish();
//        fail("Expecting exception: IllegalStateException");
      
//      } catch(IllegalStateException e) {
//         //
//         // No current entry
//         //
//         verifyException("org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream", e);
//      }
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      String string0 = "9SOzK.T>_.j9(";
      File file0 = MockFile.createTempFile("9SOzK.T>_.j9(", "wMcsdgq");
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(file0);
      zipArchiveOutputStream0.writeCentralDirectoryEnd();
      ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)0;
      byte byte0 = (byte)0;
      // Undeclared exception!
//      try { 
        zipArchiveOutputStream0.write(0);
//        fail("Expecting exception: IllegalStateException");
      
//      } catch(IllegalStateException e) {
//         //
//         // No current entry
//         //
//         verifyException("org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream", e);
//      }
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      MockFile mockFile0 = new MockFile("IhV&e}Q:)", "0x");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0, true);
      FileChannel fileChannel0 = mockFileOutputStream0.getChannel();
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(fileChannel0);
      zipArchiveOutputStream0.flush();
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-74);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)84;
      mockFileOutputStream0.write(byteArray0, 0, 19);
      DumpArchiveEntry dumpArchiveEntry0 = new DumpArchiveEntry("IhV&e}Q:)", "v8%sd3-9'x6iw[>3Q");
      boolean boolean0 = zipArchiveOutputStream0.canWriteEntryData(dumpArchiveEntry0);
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream((SeekableByteChannel) null);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)37;
      byteArray0[1] = (byte) (-114);
      byteArray0[2] = (byte) (-44);
      boolean boolean0 = true;
      zipArchiveOutputStream0.finished = true;
      // Undeclared exception!
//      try { 
        zipArchiveOutputStream0.writeOut(byteArray0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream((SeekableByteChannel) null);
      ZipArchiveOutputStream.UnicodeExtraFieldPolicy zipArchiveOutputStream_UnicodeExtraFieldPolicy0 = ZipArchiveOutputStream.UnicodeExtraFieldPolicy.ALWAYS;
//      try { 
        zipArchiveOutputStream0.closeArchiveEntry();
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // No current entry to close
//         //
//         verifyException("org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream", e);
//      }
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      MockFile mockFile0 = new MockFile("");
      ZipArchiveOutputStream zipArchiveOutputStream0 = null;
//      try {
        zipArchiveOutputStream0 = new ZipArchiveOutputStream(mockFile0);
//       //  fail("Expecting exception: FileNotFoundException");
       // Unstable assertion
//      } catch(Throwable e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.evosuite.runtime.mock.java.io.MockFileOutputStream", e);
//      }
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream((SeekableByteChannel) null);
      byte[] byteArray0 = new byte[1];
      zipArchiveOutputStream0.setUseLanguageEncodingFlag(false);
      byte byte0 = (byte) (-75);
      byteArray0[0] = (byte) (-75);
      // Undeclared exception!
//      try { 
        zipArchiveOutputStream0.writeOut(byteArray0, (byte) (-75), (byte) (-75));
//        fail("Expecting exception: IndexOutOfBoundsException");
      
//      } catch(IndexOutOfBoundsException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.nio.ByteBuffer", e);
//      }
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      ZipArchiveOutputStream zipArchiveOutputStream0 = null;
//      try {
        zipArchiveOutputStream0 = new ZipArchiveOutputStream((File) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream", e);
//      }
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      ZipArchiveOutputStream.UnicodeExtraFieldPolicy zipArchiveOutputStream_UnicodeExtraFieldPolicy0 = ZipArchiveOutputStream.UnicodeExtraFieldPolicy.NOT_ENCODEABLE;
      String string0 = zipArchiveOutputStream_UnicodeExtraFieldPolicy0.toString();
      assertEquals("not encodeable", string0);
  }
}
