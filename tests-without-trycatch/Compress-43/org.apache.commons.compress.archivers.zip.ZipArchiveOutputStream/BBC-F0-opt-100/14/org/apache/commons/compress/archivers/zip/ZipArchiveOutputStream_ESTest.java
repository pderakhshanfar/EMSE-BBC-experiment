/*
 * This file was automatically generated by EvoSuite
 * Wed Oct 20 14:56:13 GMT 2021
 */

package org.apache.commons.compress.archivers.zip;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedOutputStream;
import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.FileDescriptor;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.PushbackInputStream;
import java.io.SequenceInputStream;
import java.io.UnsupportedEncodingException;
import java.nio.channels.ClosedChannelException;
import java.nio.channels.FileChannel;
import java.nio.channels.NonWritableChannelException;
import java.nio.channels.SeekableByteChannel;
import java.nio.file.InvalidPathException;
import java.nio.file.OpenOption;
import java.nio.file.Path;
import java.nio.file.StandardOpenOption;
import java.util.Enumeration;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;
import java.util.zip.ZipException;
import org.apache.commons.compress.archivers.ArchiveEntry;
import org.apache.commons.compress.archivers.cpio.CpioArchiveEntry;
import org.apache.commons.compress.archivers.dump.DumpArchiveEntry;
import org.apache.commons.compress.archivers.jar.JarArchiveEntry;
import org.apache.commons.compress.archivers.zip.GeneralPurposeBit;
import org.apache.commons.compress.archivers.zip.ResourceAlignmentExtraField;
import org.apache.commons.compress.archivers.zip.UnicodeCommentExtraField;
import org.apache.commons.compress.archivers.zip.UnsupportedZipFeatureException;
import org.apache.commons.compress.archivers.zip.X000A_NTFS;
import org.apache.commons.compress.archivers.zip.X0017_StrongEncryptionHeader;
import org.apache.commons.compress.archivers.zip.Zip64Mode;
import org.apache.commons.compress.archivers.zip.Zip64RequiredException;
import org.apache.commons.compress.archivers.zip.ZipArchiveEntry;
import org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileInputStream;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class ZipArchiveOutputStream_ESTest extends ZipArchiveOutputStream_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
//        try {
          MockFile mockFile0 = new MockFile("or.'pachcomcTns.coprr%s@uOils.IUtils");
          ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(mockFile0);
          JarArchiveEntry jarArchiveEntry0 = new JarArchiveEntry("u(f>yTRW}{B9w?");
          jarArchiveEntry0.setSize(4294967295L);
          zipArchiveOutputStream0.putArchiveEntry(jarArchiveEntry0);
          zipArchiveOutputStream0.writeCentralFileHeader(jarArchiveEntry0);
          assertEquals(144L, mockFile0.length());
//        } catch(Throwable t) {
//            // Need to catch declared exceptions
//        }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      File file0 = MockFile.createTempFile("umrRmiU_J`:;$", "umrRmiU_J`:;$");
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(file0);
      ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry("umrRmiU_J`:;$");
      zipArchiveOutputStream0.putArchiveEntry(zipArchiveEntry0);
      zipArchiveEntry0.setUnixMode(8);
      zipArchiveOutputStream0.writeCentralFileHeader(zipArchiveEntry0);
      assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      MockFile mockFile0 = new MockFile("or.'pachcomcTns.coprr%s@uOils.IUtils");
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(mockFile0);
      JarArchiveEntry jarArchiveEntry0 = new JarArchiveEntry("or.'pachcomcTns.coprr%s@uOils.IUtils");
      jarArchiveEntry0.setSize(4294967322L);
      // Undeclared exception!
//      try { 
        zipArchiveOutputStream0.writeCentralFileHeader(jarArchiveEntry0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream$EntryMetaData", e);
//      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream((OutputStream) null);
      zipArchiveOutputStream0.setLevel(8);
      zipArchiveOutputStream0.setLevel(4);
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      MockFile mockFile0 = new MockFile("umrRmiU_J`:;$");
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(mockFile0);
      zipArchiveOutputStream0.setLevel(9);
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      File file0 = MockFile.createTempFile("umrRmiU_J`:;$", "umrRmiU_J`:;$");
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(file0);
      ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry("umrRmiU_J`:;$");
      X000A_NTFS x000A_NTFS0 = new X000A_NTFS();
      zipArchiveEntry0.addExtraField(x000A_NTFS0);
      zipArchiveOutputStream0.putArchiveEntry(zipArchiveEntry0);
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      File file0 = MockFile.createTempFile("umrRmiU_J`:;$", "umrRmiU_J`:;$");
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(file0);
      ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry("umrRmiU_J`:;$");
      zipArchiveOutputStream0.putArchiveEntry(zipArchiveEntry0);
      zipArchiveOutputStream0.putArchiveEntry(zipArchiveEntry0);
      JarArchiveEntry jarArchiveEntry0 = new JarArchiveEntry(zipArchiveEntry0);
      jarArchiveEntry0.setCompressedSize((-741L));
      // Undeclared exception!
//      try { 
        zipArchiveOutputStream0.addRawArchiveEntry(jarArchiveEntry0, (InputStream) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream", e);
//      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      File file0 = MockFile.createTempFile("umrRmiU_J`:;$", "umrRmiU_J`:;$");
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(file0);
      ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry("umrRmiU_J`:;$");
      zipArchiveOutputStream0.writeDataDescriptor(zipArchiveEntry0);
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      File file0 = MockFile.createTempFile(" Masked: ", " Masked: ");
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(file0);
      zipArchiveOutputStream0.writeCentralDirectoryEnd();
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      MockFile mockFile0 = new MockFile("org.apache.commons.compress.utils.IOUtils");
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(mockFile0);
      ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
      zipArchiveOutputStream0.putArchiveEntry(zipArchiveEntry0);
      byte[] byteArray0 = new byte[6];
      zipArchiveOutputStream0.write(byteArray0, (int) (byte)0, 0);
      assertEquals(30L, mockFile0.length());
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      MockFile mockFile0 = new MockFile("'j}K`|WwP2");
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(mockFile0);
      byte[] byteArray0 = new byte[6];
      zipArchiveOutputStream0.writeOut(byteArray0, (byte)0, (byte)64);
      assertEquals(6L, mockFile0.length());
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      MockFile mockFile0 = new MockFile("or.'pachcomcTns.coprr%s@uOils.IUtils");
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(mockFile0);
      JarArchiveEntry jarArchiveEntry0 = new JarArchiveEntry("u(f>yTRW}{B9w?");
      zipArchiveOutputStream0.putArchiveEntry(jarArchiveEntry0);
      zipArchiveOutputStream0.writeLocalFileHeader(jarArchiveEntry0);
      assertEquals(88L, mockFile0.length());
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(pipedOutputStream0);
      zipArchiveOutputStream0.setEncoding((String) null);
      String string0 = zipArchiveOutputStream0.getEncoding();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      MockFile mockFile0 = new MockFile("org.apache.commons.compress.archivers.zip.FallbackZipEncoding");
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(mockFile0);
      byte[] byteArray0 = new byte[7];
      zipArchiveOutputStream0.writeOut(byteArray0);
      ZipArchiveEntry zipArchiveEntry0 = (ZipArchiveEntry)zipArchiveOutputStream0.createArchiveEntry(mockFile0, "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream$EntryMetaData");
      assertEquals(7L, mockFile0.length());
      assertEquals("org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream$EntryMetaData", zipArchiveEntry0.toString());
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      MockFile mockFile0 = new MockFile("Mjxw+a^O+#cvMu){&", "Mjxw+a^O+#cvMu){&");
      mockFile0.createNewFile();
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(fileDescriptor0);
      FileChannel fileChannel0 = mockFileOutputStream0.getChannel();
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(fileChannel0);
      MockFile mockFile1 = new MockFile("Mjxw+a^O+#cvMu){&", "");
      ArchiveEntry archiveEntry0 = zipArchiveOutputStream0.createArchiveEntry(mockFile1, "7:;v`w!0TJDQ){$");
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertEquals("7:;v`w!0TJDQ){$/", archiveEntry0.getName());
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      File file0 = MockFile.createTempFile("PPMD", "PPMD");
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(file0);
      ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
      zipArchiveOutputStream0.putArchiveEntry(zipArchiveEntry0);
      zipArchiveOutputStream0.destroy();
//      try { 
        zipArchiveOutputStream0.writeZip64CentralDirectory();
//        fail("Expecting exception: ClosedChannelException");
      
//      } catch(ClosedChannelException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream((OutputStream) null);
      byte[] byteArray0 = new byte[0];
      // Undeclared exception!
//      try { 
        zipArchiveOutputStream0.writeOut(byteArray0, 2708, 1595);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      MockFile mockFile0 = new MockFile(".{t");
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(mockFile0);
      ZipArchiveOutputStream zipArchiveOutputStream1 = new ZipArchiveOutputStream(zipArchiveOutputStream0);
      byte[] byteArray0 = new byte[2];
      // Undeclared exception!
//      try { 
        zipArchiveOutputStream1.writeOut(byteArray0, 27, 9);
//        fail("Expecting exception: IllegalStateException");
      
//      } catch(IllegalStateException e) {
//         //
//         // No current entry
//         //
//         verifyException("org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream", e);
//      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      MockFile mockFile0 = new MockFile("OyW", "o%Y2}Jeek&(D!miZz ,");
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(mockFile0);
      byte[] byteArray0 = new byte[4];
      // Undeclared exception!
//      try { 
        zipArchiveOutputStream0.writeOut(byteArray0, (-1), 199);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("\"%dM*+");
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(mockFileOutputStream0);
      byte[] byteArray0 = new byte[4];
//      try { 
        zipArchiveOutputStream0.writeOut(byteArray0, 1245, 14);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Error in writing to file
//         //
//         verifyException("org.evosuite.runtime.mock.java.io.NativeMockedIO", e);
//      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream((SeekableByteChannel) null);
      byte[] byteArray0 = new byte[8];
      // Undeclared exception!
//      try { 
        zipArchiveOutputStream0.writeOut(byteArray0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.compress.archivers.zip.StreamCompressor$SeekableByteChannelCompressor", e);
//      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      MockFile mockFile0 = new MockFile("umrRiU_J:;", "umrRiU_J:;");
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(mockFile0);
      ZipArchiveOutputStream zipArchiveOutputStream1 = new ZipArchiveOutputStream(zipArchiveOutputStream0);
      byte[] byteArray0 = new byte[6];
      // Undeclared exception!
//      try { 
        zipArchiveOutputStream1.writeOut(byteArray0);
//        fail("Expecting exception: IllegalStateException");
      
//      } catch(IllegalStateException e) {
//         //
//         // No current entry
//         //
//         verifyException("org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream", e);
//      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      MockFile mockFile0 = new MockFile("Mjxw+a^O+#cvMu){&", "Mjxw+a^O+#cvMu){&");
      FileSystemHandling.shouldAllThrowIOExceptions();
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(mockFile0);
      byte[] byteArray0 = new byte[3];
//      try { 
        zipArchiveOutputStream0.writeOut(byteArray0);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Simulated IOException
//         //
//         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
//      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      MockFile mockFile0 = new MockFile("k8C_n4Frja", "k8C_n4Frja");
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(mockFile0);
      ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
      zipArchiveOutputStream0.setEncoding("k8C_n4Frja");
//      try { 
        zipArchiveOutputStream0.writeLocalFileHeader(zipArchiveEntry0);
//        fail("Expecting exception: UnsupportedEncodingException");
      
//      } catch(UnsupportedEncodingException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      MockFile mockFile0 = new MockFile("umrRmiU_J`:;$");
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(mockFile0);
      ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry("");
      zipArchiveOutputStream0.putArchiveEntry(zipArchiveEntry0);
      FileSystemHandling.shouldAllThrowIOExceptions();
//      try { 
        zipArchiveOutputStream0.writeLocalFileHeader(zipArchiveEntry0);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Simulated IOException
//         //
//         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
//      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(byteArrayOutputStream0);
      // Undeclared exception!
//      try { 
        zipArchiveOutputStream0.writeDataDescriptor((ZipArchiveEntry) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream", e);
//      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      MockFile mockFile0 = new MockFile("././@LongLink", "");
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(mockFile0);
      JarArchiveEntry jarArchiveEntry0 = new JarArchiveEntry("");
      zipArchiveOutputStream0.putArchiveEntry(jarArchiveEntry0);
      zipArchiveOutputStream0.closeArchiveEntry();
      ZipArchiveOutputStream zipArchiveOutputStream1 = new ZipArchiveOutputStream(zipArchiveOutputStream0);
      // Undeclared exception!
//      try { 
        zipArchiveOutputStream1.writeDataDescriptor(jarArchiveEntry0);
//        fail("Expecting exception: IllegalStateException");
      
//      } catch(IllegalStateException e) {
//         //
//         // No current entry
//         //
//         verifyException("org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream", e);
//      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      JarArchiveEntry jarArchiveEntry0 = new JarArchiveEntry("Hc. 4$N");
      MockFile mockFile0 = new MockFile("Hc. 4$N", "Hc. 4$N");
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(mockFile0);
      zipArchiveOutputStream0.putArchiveEntry(jarArchiveEntry0);
      zipArchiveOutputStream0.closeArchiveEntry();
      zipArchiveOutputStream0.setComment("Hc. 4$N");
      zipArchiveOutputStream0.close();
//      try { 
        zipArchiveOutputStream0.writeDataDescriptor(jarArchiveEntry0);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.evosuite.runtime.mock.java.io.MockFileOutputStream", e);
//      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      File file0 = MockFile.createTempFile("PPMD", "PPMD");
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(file0);
      ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
      zipArchiveOutputStream0.putArchiveEntry(zipArchiveEntry0);
      zipArchiveOutputStream0.destroy();
//      try { 
        zipArchiveOutputStream0.writeCentralFileHeader(zipArchiveEntry0);
//        fail("Expecting exception: ClosedChannelException");
      
//      } catch(ClosedChannelException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      MockFile mockFile0 = new MockFile("PPMD");
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(mockFile0);
      ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry("PPMD");
      zipArchiveOutputStream0.putArchiveEntry(zipArchiveEntry0);
      zipArchiveOutputStream0.destroy();
//      try { 
        zipArchiveOutputStream0.writeCentralFileHeader(zipArchiveEntry0);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.evosuite.runtime.mock.java.io.MockFileOutputStream", e);
//      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      FileChannel fileChannel0 = mockFileInputStream0.getChannel();
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(fileChannel0);
      // Undeclared exception!
//      try { 
        zipArchiveOutputStream0.writeCentralDirectoryEnd();
//        fail("Expecting exception: NonWritableChannelException");
      
//      } catch(NonWritableChannelException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.evosuite.runtime.mock.java.io.EvoFileChannel", e);
//      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      File file0 = MockFile.createTempFile(" Masked: ", " Masked: ");
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(file0);
      zipArchiveOutputStream0.close();
//      try { 
        zipArchiveOutputStream0.writeCentralDirectoryEnd();
//        fail("Expecting exception: ClosedChannelException");
      
//      } catch(ClosedChannelException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream((OutputStream) null);
      // Undeclared exception!
//      try { 
        zipArchiveOutputStream0.writeCentralDirectoryEnd();
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(pipedOutputStream0);
      zipArchiveOutputStream0.setEncoding("org.apache.commons.compress.archivers.zip.FallbackZipEncoding");
//      try { 
        zipArchiveOutputStream0.writeCentralDirectoryEnd();
//        fail("Expecting exception: UnsupportedEncodingException");
      
//      } catch(UnsupportedEncodingException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      MockFile mockFile0 = new MockFile("AuU.\"");
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(mockFile0);
//      try { 
        zipArchiveOutputStream0.writeCentralDirectoryEnd();
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Error in writing to file
//         //
//         verifyException("org.evosuite.runtime.mock.java.io.NativeMockedIO", e);
//      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      File file0 = MockFile.createTempFile("org.apache.commons.compress.utils.IOUtils", "org.apache.commons.compress.utils.IOUtils");
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(file0);
      JarArchiveEntry jarArchiveEntry0 = new JarArchiveEntry("org.apache.commons.compress.utils.IOUtils");
      zipArchiveOutputStream0.setMethod(184);
      zipArchiveOutputStream0.putArchiveEntry(jarArchiveEntry0);
      byte[] byteArray0 = new byte[1];
//      try { 
        zipArchiveOutputStream0.write(byteArray0, 184, (-275));
//        fail("Expecting exception: UnsupportedZipFeatureException");
      
//      } catch(UnsupportedZipFeatureException e) {
//         //
//         // unsupported feature compression method used in entry org.apache.commons.compress.utils.IOUtils
//         //
//         verifyException("org.apache.commons.compress.archivers.zip.ZipUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      File file0 = MockFile.createTempFile("umrRmiU_J`:;$", "umrRmiU_J`:;$");
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(file0);
      ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry("umrRmiU_J`:;$");
      zipArchiveOutputStream0.putArchiveEntry(zipArchiveEntry0);
      // Undeclared exception!
//      try { 
        zipArchiveOutputStream0.write((byte[]) null, 3, 3);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.util.zip.CRC32", e);
//      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      File file0 = MockFile.createTempFile("org.'pachcomcTns.compreos@uOils.IUtils", "org.'pachcomcTns.compreos@uOils.IUtils");
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(file0);
      JarArchiveEntry jarArchiveEntry0 = new JarArchiveEntry("org.'pachcomcTns.compreos@uOils.IUtils");
      zipArchiveOutputStream0.setMethod(3);
      zipArchiveOutputStream0.putArchiveEntry(jarArchiveEntry0);
//      try { 
        zipArchiveOutputStream0.putArchiveEntry(jarArchiveEntry0);
//        fail("Expecting exception: UnsupportedZipFeatureException");
      
//      } catch(UnsupportedZipFeatureException e) {
//         //
//         // unsupported feature method 'EXPANDING_LEVEL_2' used in entry org.'pachcomcTns.compreos@uOils.IUtils
//         //
//         verifyException("org.apache.commons.compress.archivers.zip.ZipUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      JarArchiveEntry jarArchiveEntry0 = new JarArchiveEntry("&3ZOF7jC");
      MockFile mockFile0 = new MockFile("org.apache.commons.compress.archivers.zip.FallbackZipEncoding", "");
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(mockFile0);
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(mockFile0);
      FileChannel fileChannel0 = mockFileInputStream0.getChannel();
      ZipArchiveOutputStream zipArchiveOutputStream1 = new ZipArchiveOutputStream(fileChannel0);
      // Undeclared exception!
//      try { 
        zipArchiveOutputStream1.putArchiveEntry(jarArchiveEntry0);
//        fail("Expecting exception: NonWritableChannelException");
      
//      } catch(NonWritableChannelException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.evosuite.runtime.mock.java.io.EvoFileChannel", e);
//      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      File file0 = MockFile.createTempFile("umrRmiU_J`:;$", "umrRmiU_J`:;$");
      ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(";Z>R}_Y+f!JSz*|m");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(file0);
      FileChannel fileChannel0 = mockFileOutputStream0.getChannel();
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(fileChannel0);
      fileChannel0.close();
//      try { 
        zipArchiveOutputStream0.putArchiveEntry(zipArchiveEntry0);
//        fail("Expecting exception: ClosedChannelException");
      
//      } catch(ClosedChannelException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.evosuite.runtime.mock.java.io.EvoFileChannel", e);
//      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream((OutputStream) null);
      ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
      // Undeclared exception!
//      try { 
        zipArchiveOutputStream0.putArchiveEntry(zipArchiveEntry0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      File file0 = MockFile.createTempFile("umrRmiU_J`:;$", "umrRmiU_J`:;$");
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(file0);
      ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry("umrRmiU_J`:;$");
      ResourceAlignmentExtraField resourceAlignmentExtraField0 = new ResourceAlignmentExtraField(0);
      zipArchiveEntry0.addExtraField(resourceAlignmentExtraField0);
      // Undeclared exception!
//      try { 
        zipArchiveOutputStream0.putArchiveEntry(zipArchiveEntry0);
//        fail("Expecting exception: NegativeArraySizeException");
      
//      } catch(NegativeArraySizeException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.compress.archivers.zip.ExtraFieldUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream((OutputStream) null);
      File file0 = MockFile.createTempFile("org.apache.commons.compress.archivers.zip.FallbackZipEncoding", "org.apache.commons.compress.archivers.zip.FallbackZipEncoding");
      ZipArchiveOutputStream zipArchiveOutputStream1 = new ZipArchiveOutputStream(zipArchiveOutputStream0);
      ArchiveEntry archiveEntry0 = zipArchiveOutputStream1.createArchiveEntry(file0, "org.apache.commons.compress.archivers.zip.FallbackZipEncoding");
      // Undeclared exception!
//      try { 
        zipArchiveOutputStream1.putArchiveEntry(archiveEntry0);
//        fail("Expecting exception: IllegalStateException");
      
//      } catch(IllegalStateException e) {
//         //
//         // No current entry
//         //
//         verifyException("org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream", e);
//      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      MockFile mockFile0 = new MockFile("c. 4$N", "c. 4$N");
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(mockFile0);
      ArchiveEntry archiveEntry0 = zipArchiveOutputStream0.createArchiveEntry(mockFile0, "UTF8");
      zipArchiveOutputStream0.setMethod((-1930));
      // Undeclared exception!
//      try { 
        zipArchiveOutputStream0.putArchiveEntry(archiveEntry0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // ZIP compression method can not be negative: -1930
//         //
//         verifyException("org.apache.commons.compress.archivers.zip.ZipArchiveEntry", e);
//      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      MockFile mockFile0 = new MockFile("L0", "L0");
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(mockFile0);
      DumpArchiveEntry dumpArchiveEntry0 = new DumpArchiveEntry();
      // Undeclared exception!
//      try { 
        zipArchiveOutputStream0.putArchiveEntry(dumpArchiveEntry0);
//        fail("Expecting exception: ClassCastException");
      
//      } catch(ClassCastException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(pipedOutputStream0);
      zipArchiveOutputStream0.setEncoding("org.apache.commons.compress.archivers.zip.FallbackZipEncoding");
      ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry("org.apache.commons.compress.archivers.zip.FallbackZipEncoding");
//      try { 
        zipArchiveOutputStream0.putArchiveEntry(zipArchiveEntry0);
//        fail("Expecting exception: UnsupportedEncodingException");
      
//      } catch(UnsupportedEncodingException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      JarArchiveEntry jarArchiveEntry0 = new JarArchiveEntry("&3ZOF7jC");
      FileSystemHandling.shouldAllThrowIOExceptions();
      MockFile mockFile0 = new MockFile("Hc. 4$N", "Hc. 4$N");
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(mockFile0);
//      try { 
        zipArchiveOutputStream0.putArchiveEntry(jarArchiveEntry0);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Simulated IOException
//         //
//         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
//      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      FileChannel fileChannel0 = mockFileInputStream0.getChannel();
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(fileChannel0);
      // Undeclared exception!
//      try { 
        zipArchiveOutputStream0.finish();
//        fail("Expecting exception: NonWritableChannelException");
      
//      } catch(NonWritableChannelException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.evosuite.runtime.mock.java.io.EvoFileChannel", e);
//      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      File file0 = MockFile.createTempFile("umrRmiU_J`:;$", "umrRmiU_J`:;$");
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(file0);
      zipArchiveOutputStream0.destroy();
//      try { 
        zipArchiveOutputStream0.finish();
//        fail("Expecting exception: ClosedChannelException");
      
//      } catch(ClosedChannelException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream((SeekableByteChannel) null);
      // Undeclared exception!
//      try { 
        zipArchiveOutputStream0.finish();
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      MockFile mockFile0 = new MockFile("Mjxw+a^O+#cvMu){&", "Mjxw+a^O+#cvMu){&");
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(mockFile0);
      ZipArchiveOutputStream zipArchiveOutputStream1 = new ZipArchiveOutputStream(zipArchiveOutputStream0);
      // Undeclared exception!
//      try { 
        zipArchiveOutputStream1.finish();
//        fail("Expecting exception: IllegalStateException");
      
//      } catch(IllegalStateException e) {
//         //
//         // No current entry
//         //
//         verifyException("org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream", e);
//      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(pipedOutputStream0);
      zipArchiveOutputStream0.setEncoding("org.apache.commons.compress.archivers.zip.FallbackZipEncoding");
//      try { 
        zipArchiveOutputStream0.finish();
//        fail("Expecting exception: UnsupportedEncodingException");
      
//      } catch(UnsupportedEncodingException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      File file0 = MockFile.createTempFile(" Masked: ", " Masked: ");
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(file0);
      ZipArchiveOutputStream zipArchiveOutputStream1 = new ZipArchiveOutputStream(zipArchiveOutputStream0);
      zipArchiveOutputStream0.destroy();
//      try { 
        zipArchiveOutputStream1.destroy();
//        fail("Expecting exception: ClosedChannelException");
      
//      } catch(ClosedChannelException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream((OutputStream) null);
      ZipArchiveOutputStream zipArchiveOutputStream1 = new ZipArchiveOutputStream(zipArchiveOutputStream0);
      // Undeclared exception!
//      try { 
        zipArchiveOutputStream1.destroy();
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(fileDescriptor0);
      FileChannel fileChannel0 = mockFileOutputStream0.getChannel();
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(fileChannel0);
      ZipArchiveOutputStream zipArchiveOutputStream1 = new ZipArchiveOutputStream(zipArchiveOutputStream0);
//      try { 
        zipArchiveOutputStream1.destroy();
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.evosuite.runtime.mock.java.io.NativeMockedIO", e);
//      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      File file0 = MockFile.createTempFile(" Masked: ", " Masked: ");
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(file0);
      zipArchiveOutputStream0.finish();
      // Undeclared exception!
//      try { 
        zipArchiveOutputStream0.deflate();
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Deflater has been closed
//         //
//         verifyException("java.util.zip.Deflater", e);
//      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      File file0 = MockFile.createTempFile("umrRmiU_J`:;$", "umrRmiU_J`:;$");
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(file0);
      ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry("bad CRC checksum for entry ");
      zipArchiveOutputStream0.setMethod(3);
      zipArchiveOutputStream0.putArchiveEntry(zipArchiveEntry0);
//      try { 
        zipArchiveOutputStream0.closeArchiveEntry();
//        fail("Expecting exception: UnsupportedZipFeatureException");
      
//      } catch(UnsupportedZipFeatureException e) {
//         //
//         // unsupported feature method 'EXPANDING_LEVEL_2' used in entry bad CRC checksum for entry 
//         //
//         verifyException("org.apache.commons.compress.archivers.zip.ZipUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      File file0 = MockFile.createTempFile("org.apache.commons.compress.utils.IOUtils", "org.apache.commons.compress.utils.IOUtils");
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(file0);
      JarArchiveEntry jarArchiveEntry0 = new JarArchiveEntry("org.apache.commons.compress.utils.IOUtils");
      jarArchiveEntry0.setGeneralPurposeBit((GeneralPurposeBit) null);
      zipArchiveOutputStream0.putArchiveEntry(jarArchiveEntry0);
      // Undeclared exception!
//      try { 
        zipArchiveOutputStream0.closeArchiveEntry();
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.compress.archivers.zip.ZipUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      FileChannel fileChannel0 = mockFileInputStream0.getChannel();
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(fileChannel0);
      // Undeclared exception!
//      try { 
        zipArchiveOutputStream0.close();
//        fail("Expecting exception: NonWritableChannelException");
      
//      } catch(NonWritableChannelException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.evosuite.runtime.mock.java.io.EvoFileChannel", e);
//      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream((OutputStream) null);
      // Undeclared exception!
//      try { 
        zipArchiveOutputStream0.close();
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      MockFile mockFile0 = new MockFile("Mjxw+a^O+#cvMu){&", "Mjxw+a^O+#cvMu){&");
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(mockFile0);
      ZipArchiveOutputStream zipArchiveOutputStream1 = new ZipArchiveOutputStream(zipArchiveOutputStream0);
      // Undeclared exception!
//      try { 
        zipArchiveOutputStream1.close();
//        fail("Expecting exception: IllegalStateException");
      
//      } catch(IllegalStateException e) {
//         //
//         // No current entry
//         //
//         verifyException("org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream", e);
//      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(pipedOutputStream0);
      zipArchiveOutputStream0.setEncoding("org.apache.commons.compress.archivers.zip.FallbackZipEncoding");
//      try { 
        zipArchiveOutputStream0.close();
//        fail("Expecting exception: UnsupportedEncodingException");
      
//      } catch(UnsupportedEncodingException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      MockFile mockFile0 = new MockFile(")");
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(mockFile0);
      ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(")");
      zipArchiveEntry0.setGeneralPurposeBit((GeneralPurposeBit) null);
      // Undeclared exception!
//      try { 
        zipArchiveOutputStream0.canWriteEntryData(zipArchiveEntry0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.compress.archivers.zip.ZipUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      JarArchiveEntry jarArchiveEntry0 = new JarArchiveEntry("Hc. 4$N");
      MockFile mockFile0 = new MockFile("Hc. 4$N");
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(mockFile0);
      byte[] byteArray0 = new byte[0];
      jarArchiveEntry0.setMethod(2048);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
//      try { 
        zipArchiveOutputStream0.addRawArchiveEntry(jarArchiveEntry0, byteArrayInputStream0);
//        fail("Expecting exception: UnsupportedZipFeatureException");
      
//      } catch(UnsupportedZipFeatureException e) {
//         //
//         // unsupported feature compression method used in entry Hc. 4$N
//         //
//         verifyException("org.apache.commons.compress.archivers.zip.ZipUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      MockFile mockFile0 = new MockFile("umrRmiU_J`:;$");
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(mockFile0);
      ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry("umrRmiU_J`:;$");
      byte[] byteArray0 = new byte[6];
      UnicodeCommentExtraField unicodeCommentExtraField0 = new UnicodeCommentExtraField();
      zipArchiveEntry0.addExtraField(unicodeCommentExtraField0);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
//      try { 
        zipArchiveOutputStream0.addRawArchiveEntry(zipArchiveEntry0, byteArrayInputStream0);
//        fail("Expecting exception: ZipException");
      
//      } catch(ZipException e) {
//         //
//         // UniCode path extra data must have at least 5 bytes.
//         //
//         verifyException("org.apache.commons.compress.archivers.zip.AbstractUnicodeExtraField", e);
//      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      File file0 = MockFile.createTempFile("umrRmiU_J`:;$", "umrRmiU_J`:;$");
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(file0);
      ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry("umrRmiU_J`:;$");
      zipArchiveOutputStream0.putArchiveEntry(zipArchiveEntry0);
      byte[] byteArray0 = new byte[1];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      Path path0 = file0.toPath();
      OpenOption[] openOptionArray0 = new OpenOption[1];
      StandardOpenOption standardOpenOption0 = StandardOpenOption.SYNC;
      openOptionArray0[0] = (OpenOption) standardOpenOption0;
      FileChannel fileChannel0 = FileChannel.open(path0, openOptionArray0);
      ZipArchiveOutputStream zipArchiveOutputStream1 = new ZipArchiveOutputStream(fileChannel0);
      // Undeclared exception!
//      try { 
        zipArchiveOutputStream1.addRawArchiveEntry(zipArchiveEntry0, byteArrayInputStream0);
//        fail("Expecting exception: NonWritableChannelException");
      
//      } catch(NonWritableChannelException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      File file0 = MockFile.createTempFile("org.apUche.commons.compress.ut'ls.IOUtils", "org.apUche.commons.compress.ut'ls.IOUtils");
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(file0);
      JarArchiveEntry jarArchiveEntry0 = new JarArchiveEntry("org.apUche.commons.compress.ut'ls.IOUtils");
      zipArchiveOutputStream0.putArchiveEntry(jarArchiveEntry0);
      zipArchiveOutputStream0.destroy();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
//      try { 
        zipArchiveOutputStream0.addRawArchiveEntry(jarArchiveEntry0, pipedInputStream0);
//        fail("Expecting exception: ClosedChannelException");
      
//      } catch(ClosedChannelException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      File file0 = MockFile.createTempFile("umrRmiU_J`:;$", "umrRmiU_J`:;$");
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(file0);
      ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry("r9[");
      zipArchiveOutputStream0.putArchiveEntry(zipArchiveEntry0);
      JarArchiveEntry jarArchiveEntry0 = new JarArchiveEntry(zipArchiveEntry0);
      // Undeclared exception!
//      try { 
        zipArchiveOutputStream0.addRawArchiveEntry(jarArchiveEntry0, (InputStream) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream", e);
//      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      File file0 = MockFile.createTempFile("umrRmiU_J`:;$", "umrRmiU_J`:;$");
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(file0);
      ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry("umrRmiU_J`:;$");
      zipArchiveOutputStream0.putArchiveEntry(zipArchiveEntry0);
      ResourceAlignmentExtraField resourceAlignmentExtraField0 = new ResourceAlignmentExtraField(0);
      zipArchiveEntry0.addExtraField(resourceAlignmentExtraField0);
      byte[] byteArray0 = new byte[6];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      // Undeclared exception!
//      try { 
        zipArchiveOutputStream0.addRawArchiveEntry(zipArchiveEntry0, byteArrayInputStream0);
//        fail("Expecting exception: NegativeArraySizeException");
      
//      } catch(NegativeArraySizeException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.compress.archivers.zip.ExtraFieldUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      MockFile mockFile0 = new MockFile("umrRmiU_J`:;$");
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(mockFile0);
      ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry("umrRmiU_J`:;$");
      zipArchiveOutputStream0.putArchiveEntry(zipArchiveEntry0);
      byte[] byteArray0 = new byte[5];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      ZipArchiveOutputStream zipArchiveOutputStream1 = new ZipArchiveOutputStream(mockFile0);
      ZipArchiveOutputStream zipArchiveOutputStream2 = new ZipArchiveOutputStream(zipArchiveOutputStream1);
      // Undeclared exception!
//      try { 
        zipArchiveOutputStream2.addRawArchiveEntry(zipArchiveEntry0, byteArrayInputStream0);
//        fail("Expecting exception: IllegalStateException");
      
//      } catch(IllegalStateException e) {
//         //
//         // No current entry
//         //
//         verifyException("org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream", e);
//      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("9Hrz^Uer8mh(", false);
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(mockFileOutputStream0);
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(bufferedOutputStream0);
      ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry("codeToEnum");
      // Undeclared exception!
//      try { 
        zipArchiveOutputStream0.addRawArchiveEntry(zipArchiveEntry0, (InputStream) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // ZIP compression method can not be negative: -1
//         //
//         verifyException("org.apache.commons.compress.archivers.zip.ZipArchiveEntry", e);
//      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      MockFile mockFile0 = new MockFile("umrRmiU_J`:;$", "umrRmiU_J`:;$");
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(mockFile0);
      ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
      byte[] byteArray0 = new byte[3];
      X0017_StrongEncryptionHeader x0017_StrongEncryptionHeader0 = new X0017_StrongEncryptionHeader();
      zipArchiveEntry0.addAsFirstExtraField(x0017_StrongEncryptionHeader0);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      // Undeclared exception!
//      try { 
        zipArchiveOutputStream0.addRawArchiveEntry(zipArchiveEntry0, byteArrayInputStream0);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 4
//         //
//         verifyException("org.apache.commons.compress.utils.ByteUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      File file0 = MockFile.createTempFile("SHA512", "SHA512");
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(file0);
      ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry("SHA512");
      zipArchiveOutputStream0.putArchiveEntry(zipArchiveEntry0);
      zipArchiveOutputStream0.setEncoding("SHA512");
      byte[] byteArray0 = new byte[0];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
//      try { 
        zipArchiveOutputStream0.addRawArchiveEntry(zipArchiveEntry0, byteArrayInputStream0);
//        fail("Expecting exception: UnsupportedEncodingException");
      
//      } catch(UnsupportedEncodingException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      MockFile mockFile0 = new MockFile("z^d9X\"", "0\u0000");
      ZipArchiveOutputStream zipArchiveOutputStream0 = null;
//      try {
        zipArchiveOutputStream0 = new ZipArchiveOutputStream(mockFile0);
//        fail("Expecting exception: InvalidPathException");
      
//      } catch(InvalidPathException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      ZipArchiveOutputStream zipArchiveOutputStream0 = null;
//      try {
        zipArchiveOutputStream0 = new ZipArchiveOutputStream((File) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      MockFile mockFile0 = new MockFile("");
      ZipArchiveOutputStream zipArchiveOutputStream0 = null;
//      try {
        zipArchiveOutputStream0 = new ZipArchiveOutputStream(mockFile0);
//        fail("Expecting exception: FileNotFoundException");
      
//      } catch(Throwable e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.evosuite.runtime.mock.java.io.MockFileOutputStream", e);
//      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      File file0 = MockFile.createTempFile("org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream$EntryMetaData", "org.apache.commons.compress.archivers.zip.FallbackZipEncoding");
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(file0);
      zipArchiveOutputStream0.destroy();
//      try { 
        zipArchiveOutputStream0.close();
//        fail("Expecting exception: ClosedChannelException");
      
//      } catch(ClosedChannelException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      JarArchiveEntry jarArchiveEntry0 = new JarArchiveEntry("umrRmiU_J`:;$");
      MockFile mockFile0 = new MockFile("org.apache.commons.compress.archivers.zip.GeneralPurposeBit", "umrRmiU_J`:;$");
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(mockFile0);
      zipArchiveOutputStream0.putArchiveEntry(jarArchiveEntry0);
      zipArchiveOutputStream0.closeArchiveEntry();
      Zip64Mode zip64Mode0 = Zip64Mode.Always;
      zipArchiveOutputStream0.setUseZip64(zip64Mode0);
//      try { 
        zipArchiveOutputStream0.finish();
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Error in writing to file
//         //
//         verifyException("org.evosuite.runtime.mock.java.io.NativeMockedIO", e);
//      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      File file0 = MockFile.createTempFile("org.apache.commons.compress.utils.IOUtils", "org.apache.commons.compress.utils.IOUtils");
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(file0);
      JarArchiveEntry jarArchiveEntry0 = new JarArchiveEntry("org.apache.commons.compress.utils.IOUtils");
      zipArchiveOutputStream0.putArchiveEntry(jarArchiveEntry0);
      byte[] byteArray0 = new byte[1];
      // Undeclared exception!
//      try { 
        zipArchiveOutputStream0.write(byteArray0, 184, (-275));
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.util.zip.CRC32", e);
//      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream((OutputStream) null);
      byte[] byteArray0 = new byte[4];
      // Undeclared exception!
//      try { 
        zipArchiveOutputStream0.write(byteArray0, (int) (byte)104, 0);
//        fail("Expecting exception: IllegalStateException");
      
//      } catch(IllegalStateException e) {
//         //
//         // No current entry
//         //
//         verifyException("org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream", e);
//      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      JarArchiveEntry jarArchiveEntry0 = new JarArchiveEntry("&3ZOF7jC");
      MockFile mockFile0 = new MockFile("c. 4$N", "c. 4$N");
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(mockFile0);
      zipArchiveOutputStream0.putArchiveEntry(jarArchiveEntry0);
      boolean boolean0 = zipArchiveOutputStream0.canWriteEntryData(jarArchiveEntry0);
      assertEquals(8, jarArchiveEntry0.getMethod());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      MockFile mockFile0 = new MockFile("or.'pac@comcTns.copfr%s@uOils.IUtils", "or.'pac@comcTns.copfr%s@uOils.IUtils");
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(mockFile0);
      JarArchiveEntry jarArchiveEntry0 = new JarArchiveEntry("or.'pac@comcTns.copfr%s@uOils.IUtils");
      jarArchiveEntry0.setSize(4294967318L);
      zipArchiveOutputStream0.putArchiveEntry(jarArchiveEntry0);
      byte[] byteArray0 = new byte[4];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      ZipArchiveOutputStream zipArchiveOutputStream1 = new ZipArchiveOutputStream(mockFile0);
      zipArchiveOutputStream1.addRawArchiveEntry(jarArchiveEntry0, byteArrayInputStream0);
      assertEquals(114L, mockFile0.length());
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      JarArchiveEntry jarArchiveEntry0 = new JarArchiveEntry("umrRmiU_J`:;$");
      MockFile mockFile0 = new MockFile("org.apache.commons.compress.archivers.zip.GeneralPurposeBit", "umrRmiU_J`:;$");
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(mockFile0);
      zipArchiveOutputStream0.putArchiveEntry(jarArchiveEntry0);
      zipArchiveOutputStream0.closeArchiveEntry();
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      zipArchiveOutputStream0.addRawArchiveEntry(jarArchiveEntry0, sequenceInputStream0);
      assertEquals(2L, jarArchiveEntry0.getCompressedSize());
      assertEquals(106L, mockFile0.length());
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      File file0 = MockFile.createTempFile("umrRmiU_J`:;$", "umrRmiU_J`:;$");
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(file0);
      ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry("umrRmiU_J`:;$");
      zipArchiveOutputStream0.putArchiveEntry(zipArchiveEntry0);
      Zip64Mode zip64Mode0 = Zip64Mode.Always;
      zipArchiveOutputStream0.setUseZip64(zip64Mode0);
      zipArchiveOutputStream0.closeArchiveEntry();
      zipArchiveOutputStream0.finish();
      assertEquals(0, zipArchiveOutputStream0.getCount());
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      File file0 = MockFile.createTempFile("umrRmiU_J`:;$", "umrRmiU_J`:;$");
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(file0);
      zipArchiveOutputStream0.finish();
//      try { 
        zipArchiveOutputStream0.createArchiveEntry(file0, "org.apache.commons.compress.archivers.zip.StreamCompressor$ScatterGatherBackingStoreCompressor");
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Stream has already been finished
//         //
//         verifyException("org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream", e);
//      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream((OutputStream) null);
      MockFile mockFile0 = new MockFile("h48", "");
      // Undeclared exception!
//      try { 
        zipArchiveOutputStream0.createArchiveEntry(mockFile0, (String) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // name
//         //
//         verifyException("java.util.Objects", e);
//      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      File file0 = MockFile.createTempFile("umrRmiU_J`:;$", "umrRmiU_J`:;$");
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(file0);
      ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry("umrRmiU_J`:;$");
      zipArchiveOutputStream0.setUseLanguageEncodingFlag(false);
      zipArchiveOutputStream0.putArchiveEntry(zipArchiveEntry0);
      assertEquals(8, zipArchiveEntry0.getMethod());
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      File file0 = MockFile.createTempFile("umrRmiU_J`:;$", "umrRmiU_J`:;$");
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(file0);
      ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry("umrRmiU_J`:;$");
      zipArchiveOutputStream0.putArchiveEntry(zipArchiveEntry0);
      assertEquals(8, zipArchiveEntry0.getMethod());
      
      zipArchiveOutputStream0.writeZip64CentralDirectory();
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      File file0 = MockFile.createTempFile("umrRmiU_J`:;$", "umrRmiU_J`:;$");
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(file0);
      Zip64Mode zip64Mode0 = Zip64Mode.Never;
      zipArchiveOutputStream0.setUseZip64(zip64Mode0);
      zipArchiveOutputStream0.finish();
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      File file0 = MockFile.createTempFile("org.'pachcomcTns.compre%s@uOils.IUtils", "org.'pachcomcTns.compre%s@uOils.IUtils");
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(file0);
      JarArchiveEntry jarArchiveEntry0 = new JarArchiveEntry("org.'pachcomcTns.compre%s@uOils.IUtils");
      jarArchiveEntry0.setSize(4294967328L);
      zipArchiveOutputStream0.putArchiveEntry(jarArchiveEntry0);
      zipArchiveOutputStream0.writeCentralFileHeader(jarArchiveEntry0);
      assertEquals("org.'pachcomcTns.compre%s@uOils.IUtils", jarArchiveEntry0.toString());
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      File file0 = MockFile.createTempFile("umrRmiU_J`:;$", "umrRmiU_J`:;$");
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(file0);
      ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry("umrRmiU_J`:;$");
      zipArchiveOutputStream0.putArchiveEntry(zipArchiveEntry0);
      zipArchiveEntry0.setComment("8+F0J4}IBaf:B;>Yz]");
      zipArchiveOutputStream0.writeCentralFileHeader(zipArchiveEntry0);
      assertEquals(8, zipArchiveEntry0.getMethod());
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      MockFile mockFile0 = new MockFile(">:R`[OUq", "or.'pachcomcTns.coprr%s@uOils.IUtils");
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(mockFile0);
      JarArchiveEntry jarArchiveEntry0 = new JarArchiveEntry(" value");
      jarArchiveEntry0.setSize(4294967295L);
      // Undeclared exception!
//      try { 
        zipArchiveOutputStream0.writeCentralFileHeader(jarArchiveEntry0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream$EntryMetaData", e);
//      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      MockFile mockFile0 = new MockFile("archive's size exceeds the limit of 4GByte.", "archive's size exceeds the limit of 4GByte.");
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(mockFile0);
      ZipArchiveOutputStream.UnicodeExtraFieldPolicy zipArchiveOutputStream_UnicodeExtraFieldPolicy0 = ZipArchiveOutputStream.UnicodeExtraFieldPolicy.ALWAYS;
      zipArchiveOutputStream0.setCreateUnicodeExtraFields(zipArchiveOutputStream_UnicodeExtraFieldPolicy0);
      ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
      zipArchiveEntry0.setComment("_^7yX2T*");
      zipArchiveOutputStream0.putArchiveEntry(zipArchiveEntry0);
      assertEquals(8, zipArchiveEntry0.getMethod());
      assertEquals(56L, mockFile0.length());
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      MockFile mockFile0 = new MockFile("\"AY{~_D ", "Lm.TSyhO;<mS");
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(mockFile0);
      ZipArchiveOutputStream.UnicodeExtraFieldPolicy zipArchiveOutputStream_UnicodeExtraFieldPolicy0 = ZipArchiveOutputStream.UnicodeExtraFieldPolicy.NOT_ENCODEABLE;
      zipArchiveOutputStream0.setCreateUnicodeExtraFields(zipArchiveOutputStream_UnicodeExtraFieldPolicy0);
      JarArchiveEntry jarArchiveEntry0 = new JarArchiveEntry("Lm.TSyhO;<mS");
      jarArchiveEntry0.setComment("");
      zipArchiveOutputStream0.putArchiveEntry(jarArchiveEntry0);
      assertEquals(8, jarArchiveEntry0.getMethod());
      assertEquals(42L, mockFile0.length());
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      MockFile mockFile0 = new MockFile("J-*3t>G#thP,7;Ol");
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(mockFile0);
      ZipArchiveOutputStream.UnicodeExtraFieldPolicy zipArchiveOutputStream_UnicodeExtraFieldPolicy0 = ZipArchiveOutputStream.UnicodeExtraFieldPolicy.NOT_ENCODEABLE;
      zipArchiveOutputStream0.setCreateUnicodeExtraFields(zipArchiveOutputStream_UnicodeExtraFieldPolicy0);
      ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
      zipArchiveEntry0.setComment("J-*3t>G#thP,7;Ol");
      zipArchiveOutputStream0.putArchiveEntry(zipArchiveEntry0);
      assertEquals(30L, mockFile0.length());
      assertEquals(8, zipArchiveEntry0.getMethod());
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      MockFile mockFile0 = new MockFile("archive's size exceeds the limit of 4GByte.", "archive's size exceeds the limit of 4GByte.");
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(mockFile0);
      ZipArchiveOutputStream.UnicodeExtraFieldPolicy zipArchiveOutputStream_UnicodeExtraFieldPolicy0 = ZipArchiveOutputStream.UnicodeExtraFieldPolicy.ALWAYS;
      zipArchiveOutputStream0.setCreateUnicodeExtraFields(zipArchiveOutputStream_UnicodeExtraFieldPolicy0);
      ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
      zipArchiveOutputStream0.putArchiveEntry(zipArchiveEntry0);
      assertEquals(8, zipArchiveEntry0.getMethod());
      assertEquals(39L, mockFile0.length());
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      File file0 = MockFile.createTempFile("umrRmiU_J`:;$", "umrRmiU_J`:;$");
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(file0);
      ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry("umrRmiU_J`:;$");
      zipArchiveOutputStream0.putArchiveEntry(zipArchiveEntry0);
      ResourceAlignmentExtraField resourceAlignmentExtraField0 = new ResourceAlignmentExtraField(418, true, 26);
      zipArchiveEntry0.addExtraField(resourceAlignmentExtraField0);
      byte[] byteArray0 = new byte[0];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      zipArchiveOutputStream0.addRawArchiveEntry(zipArchiveEntry0, byteArrayInputStream0);
      assertEquals(8, zipArchiveEntry0.getMethod());
      assertEquals(2L, zipArchiveEntry0.getCompressedSize());
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      File file0 = MockFile.createTempFile("umrRiU_J:;$", "umrRiU_J:;$");
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(file0);
      ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry("umrRiU_J:;$");
      ResourceAlignmentExtraField resourceAlignmentExtraField0 = new ResourceAlignmentExtraField(0);
      zipArchiveEntry0.addExtraField(resourceAlignmentExtraField0);
      // Undeclared exception!
//      try { 
        zipArchiveOutputStream0.writeLocalFileHeader(zipArchiveEntry0);
//        fail("Expecting exception: NegativeArraySizeException");
      
//      } catch(NegativeArraySizeException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.compress.archivers.zip.ExtraFieldUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      File file0 = MockFile.createTempFile("not encodeable", "w");
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(file0);
      ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
      ResourceAlignmentExtraField resourceAlignmentExtraField0 = new ResourceAlignmentExtraField(0, true, 3);
      zipArchiveEntry0.addExtraField(resourceAlignmentExtraField0);
      zipArchiveOutputStream0.putArchiveEntry(zipArchiveEntry0);
      assertEquals(8, zipArchiveEntry0.getMethod());
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      MockFile mockFile0 = new MockFile("umrRmiU_J`:;$");
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(mockFile0);
      ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
      zipArchiveEntry0.setAlignment(8);
      zipArchiveOutputStream0.putArchiveEntry(zipArchiveEntry0);
      zipArchiveOutputStream0.putArchiveEntry(zipArchiveEntry0);
      assertEquals(0L, zipArchiveEntry0.getCrc());
      assertEquals(96L, mockFile0.length());
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      MockFile mockFile0 = new MockFile("c. 4$N", "c. 4$N");
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(mockFile0);
      zipArchiveOutputStream0.flush();
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      File file0 = MockFile.createTempFile("umrRmiU_J`:;$", "umrRmiU_J`:;$");
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(file0);
      zipArchiveOutputStream0.flush();
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream((OutputStream) null);
      zipArchiveOutputStream0.finished = true;
      zipArchiveOutputStream0.close();
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      MockFile mockFile0 = new MockFile("org.apache.commons.compress.archivers.zip.FallbackZipEncoding");
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(mockFile0);
      ZipArchiveOutputStream zipArchiveOutputStream1 = new ZipArchiveOutputStream(zipArchiveOutputStream0);
      // Undeclared exception!
//      try { 
        zipArchiveOutputStream1.writeCentralDirectoryEnd();
//        fail("Expecting exception: IllegalStateException");
      
//      } catch(IllegalStateException e) {
//         //
//         // No current entry
//         //
//         verifyException("org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream", e);
//      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      MockFile mockFile0 = new MockFile("Hc. 4$N", "Hc. 4$N");
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(mockFile0);
      ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry("Hc. 4$N");
      zipArchiveOutputStream0.setMethod(1);
      zipArchiveOutputStream0.putArchiveEntry(zipArchiveEntry0);
      zipArchiveOutputStream0.canWriteEntryData(zipArchiveEntry0);
      assertEquals(1, zipArchiveEntry0.getMethod());
      assertEquals(37L, mockFile0.length());
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      MockFile mockFile0 = new MockFile("3Wqk:)Ip8j^8fR:B-", "3Wqk:)Ip8j^8fR:B-");
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(mockFile0);
      JarArchiveEntry jarArchiveEntry0 = new JarArchiveEntry("3Wqk:)Ip8j^8fR:B-");
      zipArchiveOutputStream0.setMethod(6);
      zipArchiveOutputStream0.putArchiveEntry(jarArchiveEntry0);
      boolean boolean0 = zipArchiveOutputStream0.canWriteEntryData(jarArchiveEntry0);
      assertEquals(6, jarArchiveEntry0.getMethod());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      MockFile mockFile0 = new MockFile("3Wqk:)Ip8j^8fR:B-", "3Wqk:)Ip8j^8fR:B-");
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(mockFile0);
      JarArchiveEntry jarArchiveEntry0 = new JarArchiveEntry("3Wqk:)Ip8j^8fR:B-");
      boolean boolean0 = zipArchiveOutputStream0.canWriteEntryData(jarArchiveEntry0);
      assertFalse(boolean0);
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream((OutputStream) null);
      CpioArchiveEntry cpioArchiveEntry0 = new CpioArchiveEntry("", 8);
      boolean boolean0 = zipArchiveOutputStream0.canWriteEntryData(cpioArchiveEntry0);
      assertFalse(boolean0);
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      MockFile mockFile0 = new MockFile("J-*3t>G#thP,7;Ol");
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(mockFile0);
      zipArchiveOutputStream0.setLevel((-1));
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      MockFile mockFile0 = new MockFile("archive's size exceeds the limit of 4GByte.", "archive's size exceeds the limit of 4GByte.");
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(mockFile0);
      // Undeclared exception!
//      try { 
        zipArchiveOutputStream0.setLevel(944);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Invalid compression level: 944
//         //
//         verifyException("org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream", e);
//      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream((OutputStream) null);
      // Undeclared exception!
//      try { 
        zipArchiveOutputStream0.setLevel((byte) (-13));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Invalid compression level: -13
//         //
//         verifyException("org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream", e);
//      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      File file0 = MockFile.createTempFile("PPMD", "PPMD");
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(file0);
      ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry("PPMD");
      Zip64Mode zip64Mode0 = Zip64Mode.Never;
      zipArchiveOutputStream0.setUseZip64(zip64Mode0);
      zipArchiveOutputStream0.putArchiveEntry(zipArchiveEntry0);
      assertEquals(8, zipArchiveEntry0.getMethod());
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      MockFile mockFile0 = new MockFile("^PxcFOL6A3CM1hG_");
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(mockFile0);
      JarArchiveEntry jarArchiveEntry0 = new JarArchiveEntry("^PxcFOL6A3CM1hG_");
      jarArchiveEntry0.setSize(4294967322L);
      Zip64Mode zip64Mode0 = Zip64Mode.Never;
      zipArchiveOutputStream0.setUseZip64(zip64Mode0);
//      try { 
        zipArchiveOutputStream0.putArchiveEntry(jarArchiveEntry0);
//        fail("Expecting exception: Zip64RequiredException");
      
//      } catch(Zip64RequiredException e) {
//         //
//         // ^PxcFOL6A3CM1hG_'s size exceeds the limit of 4GByte.
//         //
//         verifyException("org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream", e);
//      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      MockFile mockFile0 = new MockFile("5}qm:%SF)xY}B");
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(mockFile0);
      JarArchiveEntry jarArchiveEntry0 = new JarArchiveEntry("5}qm:%SF)xY}B");
      jarArchiveEntry0.setSize(44L);
      zipArchiveOutputStream0.setMethod(0);
//      try { 
        zipArchiveOutputStream0.putArchiveEntry(jarArchiveEntry0);
//        fail("Expecting exception: ZipException");
      
//      } catch(ZipException e) {
//         //
//         // crc checksum is required for STORED method when not writing to a file
//         //
//         verifyException("org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream", e);
//      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream((OutputStream) null);
      ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(";Z>R}_Y+f!JSz*|m");
      zipArchiveOutputStream0.setMethod(0);
//      try { 
        zipArchiveOutputStream0.putArchiveEntry(zipArchiveEntry0);
//        fail("Expecting exception: ZipException");
      
//      } catch(ZipException e) {
//         //
//         // uncompressed size is required for STORED method when not writing to a file
//         //
//         verifyException("org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream", e);
//      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      File file0 = MockFile.createTempFile("umrRmiU_J`:;$", "umrRmiU_J`:;$");
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(file0);
      ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry("umrRmiU_J`:;$");
      zipArchiveOutputStream0.setLevel(3);
      zipArchiveOutputStream0.putArchiveEntry(zipArchiveEntry0);
      assertEquals(8, zipArchiveEntry0.getMethod());
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      File file0 = MockFile.createTempFile("umrRmiU_J`:;$", "umrRmiU_J`:;$");
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(file0);
      ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry("umrRmiU_J`:;$");
      zipArchiveOutputStream0.setMethod(0);
      zipArchiveOutputStream0.putArchiveEntry(zipArchiveEntry0);
      Zip64Mode zip64Mode0 = Zip64Mode.Always;
      zipArchiveOutputStream0.setUseZip64(zip64Mode0);
      zipArchiveOutputStream0.putArchiveEntry(zipArchiveEntry0);
      assertEquals(0L, zipArchiveEntry0.getSize());
      assertEquals(0L, zipArchiveEntry0.getCompressedSize());
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      File file0 = MockFile.createTempFile("umrRmiU_J`:;$", "umrRmiU_J`:;$");
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(file0);
      ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry("umrRmiU_J`:;$");
      zipArchiveOutputStream0.putArchiveEntry(zipArchiveEntry0);
      byte[] byteArray0 = new byte[0];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      Zip64Mode zip64Mode0 = Zip64Mode.Always;
      zipArchiveOutputStream0.setUseZip64(zip64Mode0);
      zipArchiveOutputStream0.addRawArchiveEntry(zipArchiveEntry0, byteArrayInputStream0);
      zipArchiveOutputStream0.addRawArchiveEntry(zipArchiveEntry0, byteArrayInputStream0);
      assertEquals(0L, zipArchiveEntry0.getCrc());
      assertEquals(2L, zipArchiveEntry0.getCompressedSize());
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      File file0 = MockFile.createTempFile("umrRmiU_J`:;$", "umrRmiU_J`:;$");
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(file0);
      ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry("umrRmiU_J`:;$");
      zipArchiveOutputStream0.putArchiveEntry(zipArchiveEntry0);
      byte[] byteArray0 = new byte[0];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      ZipArchiveOutputStream zipArchiveOutputStream1 = new ZipArchiveOutputStream(file0);
      zipArchiveOutputStream1.finish();
//      try { 
        zipArchiveOutputStream1.addRawArchiveEntry(zipArchiveEntry0, byteArrayInputStream0);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Stream has already been finished
//         //
//         verifyException("org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream", e);
//      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      File file0 = MockFile.createTempFile("umrRmiU_J`:;$", "umrRmiU_J`:;$");
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(file0);
      ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry("umrRmiU_J`:;$");
      zipArchiveOutputStream0.putArchiveEntry(zipArchiveEntry0);
      zipArchiveOutputStream0.writeCentralFileHeader(zipArchiveEntry0);
      zipArchiveOutputStream0.closeArchiveEntry();
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      MockFile mockFile0 = new MockFile("or.'pachcomcTns.coprr%s@uOils.IUtils");
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(mockFile0);
      JarArchiveEntry jarArchiveEntry0 = new JarArchiveEntry("u(f>yTRW}{B9w?");
      jarArchiveEntry0.setSize(4294967295L);
      zipArchiveOutputStream0.putArchiveEntry(jarArchiveEntry0);
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(mockFile0);
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(mockFileInputStream0, 687);
      zipArchiveOutputStream0.addRawArchiveEntry(jarArchiveEntry0, pushbackInputStream0);
      assertEquals(2L, jarArchiveEntry0.getCompressedSize());
      assertEquals(12113L, mockFile0.length());
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      File file0 = MockFile.createTempFile("CBV$L1zkOC!<", "CBV$L1zkOC!<");
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(file0);
      JarArchiveEntry jarArchiveEntry0 = new JarArchiveEntry("CBV$L1zkOC!<");
      zipArchiveOutputStream0.setMethod(0);
      zipArchiveOutputStream0.putArchiveEntry(jarArchiveEntry0);
      zipArchiveOutputStream0.putArchiveEntry(jarArchiveEntry0);
      ZipArchiveOutputStream zipArchiveOutputStream1 = new ZipArchiveOutputStream(zipArchiveOutputStream0);
      jarArchiveEntry0.setSize(4096L);
      zipArchiveOutputStream1.putArchiveEntry(jarArchiveEntry0);
//      try { 
        zipArchiveOutputStream1.putArchiveEntry(jarArchiveEntry0);
//        fail("Expecting exception: ZipException");
      
//      } catch(ZipException e) {
//         //
//         // bad size for entry CBV$L1zkOC!<: 4096 instead of 0
//         //
//         verifyException("org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream", e);
//      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      File file0 = MockFile.createTempFile("org.apache.commons.compress.utils.IOUtils", "org.apache.commons.compress.utils.IOUtils");
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(file0);
      JarArchiveEntry jarArchiveEntry0 = new JarArchiveEntry("org.apache.commons.compress.utils.IOUtils");
      zipArchiveOutputStream0.setMethod(0);
      zipArchiveOutputStream0.putArchiveEntry(jarArchiveEntry0);
      zipArchiveOutputStream0.putArchiveEntry(jarArchiveEntry0);
      ZipArchiveOutputStream zipArchiveOutputStream1 = new ZipArchiveOutputStream(zipArchiveOutputStream0);
      zipArchiveOutputStream1.putArchiveEntry(jarArchiveEntry0);
      zipArchiveOutputStream1.closeArchiveEntry();
      assertEquals(71L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals(71, zipArchiveOutputStream0.getCount());
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      File file0 = MockFile.createTempFile(" ModDify:[", " ModDify:[");
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(file0);
      JarArchiveEntry jarArchiveEntry0 = new JarArchiveEntry("org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry");
      zipArchiveOutputStream0.setMethod(1);
      zipArchiveOutputStream0.putArchiveEntry(jarArchiveEntry0);
      ZipArchiveOutputStream zipArchiveOutputStream1 = new ZipArchiveOutputStream(zipArchiveOutputStream0);
      zipArchiveOutputStream1.putArchiveEntry(jarArchiveEntry0);
//      try { 
        zipArchiveOutputStream1.putArchiveEntry(jarArchiveEntry0);
//        fail("Expecting exception: ZipException");
      
//      } catch(ZipException e) {
//         //
//         // bad CRC checksum for entry org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry: ffffffffffffffff instead of 0
//         //
//         verifyException("org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream", e);
//      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      File file0 = MockFile.createTempFile(":TN=V", "");
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(file0);
      JarArchiveEntry jarArchiveEntry0 = new JarArchiveEntry("");
      zipArchiveOutputStream0.setMethod(12);
      zipArchiveOutputStream0.putArchiveEntry(jarArchiveEntry0);
      zipArchiveOutputStream0.putArchiveEntry(jarArchiveEntry0);
      assertEquals(0, jarArchiveEntry0.getVersionMadeBy());
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      File file0 = MockFile.createTempFile(" Masked: ", " Masked: ");
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(file0);
      ZipArchiveOutputStream zipArchiveOutputStream1 = new ZipArchiveOutputStream(zipArchiveOutputStream0);
      zipArchiveOutputStream1.destroy();
//      try { 
        zipArchiveOutputStream0.closeArchiveEntry();
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Stream has already been finished
//         //
//         verifyException("org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream", e);
//      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      File file0 = MockFile.createTempFile("umrRmiU_J`:;$", "umrRmiU_J`:;$");
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(file0);
      ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry("umrRmiU_J`:;$");
      zipArchiveOutputStream0.putArchiveEntry(zipArchiveEntry0);
      byte[] byteArray0 = new byte[0];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      zipArchiveOutputStream0.addRawArchiveEntry(zipArchiveEntry0, byteArrayInputStream0);
      zipArchiveOutputStream0.addRawArchiveEntry(zipArchiveEntry0, byteArrayInputStream0);
      assertEquals(2L, zipArchiveEntry0.getCompressedSize());
      assertEquals(0L, zipArchiveEntry0.getSize());
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      JarArchiveEntry jarArchiveEntry0 = new JarArchiveEntry("&3ZOF7jC");
      MockFile mockFile0 = new MockFile("c. 4$N", "c. 4$N");
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(mockFile0);
      zipArchiveOutputStream0.putArchiveEntry(jarArchiveEntry0);
//      try { 
        zipArchiveOutputStream0.finish();
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // This archive contains unclosed entries.
//         //
//         verifyException("org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream", e);
//      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      File file0 = MockFile.createTempFile("umrRmiU_J`:;$", "umrRmiU_J`:;$");
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(file0);
      zipArchiveOutputStream0.finished = true;
//      try { 
        zipArchiveOutputStream0.finish();
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // This archive has already been finished
//         //
//         verifyException("org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream", e);
//      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(pipedOutputStream0);
      zipArchiveOutputStream0.setEncoding("org.apache.commons.compress.archivers.zip.FallbackZipEncoding");
      zipArchiveOutputStream0.setUseLanguageEncodingFlag(true);
      assertEquals("org.apache.commons.compress.archivers.zip.FallbackZipEncoding", zipArchiveOutputStream0.getEncoding());
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(pipedOutputStream0);
      zipArchiveOutputStream0.setUseLanguageEncodingFlag(true);
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(pipedOutputStream0);
      zipArchiveOutputStream0.setEncoding("org.apache.commons.compress.archivers.zip.FallbackZipEncoding");
      zipArchiveOutputStream0.setEncoding("org.apache.commons.compress.archivers.zip.FallbackZipEncoding");
      assertEquals("org.apache.commons.compress.archivers.zip.FallbackZipEncoding", zipArchiveOutputStream0.getEncoding());
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      File file0 = MockFile.createTempFile("lfD%!`,eUB!", "org.apache.commons.compress.archivers.zip.FallbackZipEncoding");
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(file0);
      boolean boolean0 = zipArchiveOutputStream0.isSeekable();
      assertTrue(boolean0);
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      ZipArchiveOutputStream.UnicodeExtraFieldPolicy zipArchiveOutputStream_UnicodeExtraFieldPolicy0 = ZipArchiveOutputStream.UnicodeExtraFieldPolicy.NEVER;
      String string0 = zipArchiveOutputStream_UnicodeExtraFieldPolicy0.toString();
      assertEquals("never", string0);
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream((SeekableByteChannel) null);
      byte[] byteArray0 = new byte[2];
      // Undeclared exception!
//      try { 
        zipArchiveOutputStream0.writeOut(byteArray0, 0, (byte)64);
//        fail("Expecting exception: IndexOutOfBoundsException");
      
//      } catch(IndexOutOfBoundsException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.nio.ByteBuffer", e);
//      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      MockFile mockFile0 = new MockFile("", "?");
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(mockFile0);
      String string0 = zipArchiveOutputStream0.getEncoding();
      assertEquals("UTF8", string0);
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      File file0 = MockFile.createTempFile(" Masked: ", " Masked: ");
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(file0);
      zipArchiveOutputStream0.deflate();
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream((OutputStream) null);
//      try { 
        zipArchiveOutputStream0.closeArchiveEntry();
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // No current entry to close
//         //
//         verifyException("org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream", e);
//      }
  }
}
