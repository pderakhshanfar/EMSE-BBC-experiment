/*
 * This file was automatically generated by EvoSuite
 * Wed Oct 13 21:58:17 GMT 2021
 */

package org.apache.commons.compress.archivers.zip;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.FileDescriptor;
import java.io.FileNotFoundException;
import java.io.FilterOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.ObjectOutputStream;
import java.io.OutputStream;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.PrintStream;
import java.io.PushbackInputStream;
import java.io.UnsupportedEncodingException;
import java.net.URI;
import java.net.URISyntaxException;
import java.nio.ByteBuffer;
import java.nio.channels.ClosedChannelException;
import java.nio.channels.FileChannel;
import java.nio.channels.NonWritableChannelException;
import java.nio.charset.Charset;
import java.nio.charset.IllegalCharsetNameException;
import java.nio.file.InvalidPathException;
import java.nio.file.attribute.FileTime;
import java.util.concurrent.TimeUnit;
import java.util.jar.JarEntry;
import java.util.zip.ZipEntry;
import java.util.zip.ZipException;
import org.apache.commons.compress.archivers.ArchiveEntry;
import org.apache.commons.compress.archivers.cpio.CpioArchiveEntry;
import org.apache.commons.compress.archivers.jar.JarArchiveEntry;
import org.apache.commons.compress.archivers.tar.TarArchiveEntry;
import org.apache.commons.compress.archivers.zip.GeneralPurposeBit;
import org.apache.commons.compress.archivers.zip.JarMarker;
import org.apache.commons.compress.archivers.zip.ResourceAlignmentExtraField;
import org.apache.commons.compress.archivers.zip.UnicodePathExtraField;
import org.apache.commons.compress.archivers.zip.UnparseableExtraFieldData;
import org.apache.commons.compress.archivers.zip.UnsupportedZipFeatureException;
import org.apache.commons.compress.archivers.zip.X000A_NTFS;
import org.apache.commons.compress.archivers.zip.X0014_X509Certificates;
import org.apache.commons.compress.archivers.zip.X0016_CertificateIdForCentralDirectory;
import org.apache.commons.compress.archivers.zip.Zip64Mode;
import org.apache.commons.compress.archivers.zip.Zip64RequiredException;
import org.apache.commons.compress.archivers.zip.ZipArchiveEntry;
import org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream;
import org.apache.commons.compress.archivers.zip.ZipExtraField;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileInputStream;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.net.MockURI;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class ZipArchiveOutputStream_ESTest extends ZipArchiveOutputStream_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      zipArchiveEntry0.setMethod(1);
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(byteArrayOutputStream0);
      zipArchiveOutputStream0.canWriteEntryData(zipArchiveEntry0);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/experiment");
      FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("D37B,]cr");
      FileChannel fileChannel0 = mockFileOutputStream0.getChannel();
      JarArchiveEntry jarArchiveEntry0 = new JarArchiveEntry("D37B,]cr");
      jarArchiveEntry0.setCompressedSize(4294967299L);
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(fileChannel0);
      zipArchiveOutputStream0.putArchiveEntry(jarArchiveEntry0);
      zipArchiveOutputStream0.writeCentralFileHeader(jarArchiveEntry0);
      zipArchiveOutputStream0.putArchiveEntry(jarArchiveEntry0);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)78;
      byteArray0[1] = (byte)9;
      byteArray0[2] = (byte)81;
      // Undeclared exception!
//      try { 
        zipArchiveOutputStream0.writeOut(byteArray0, 923, 1131);
//        fail("Expecting exception: IndexOutOfBoundsException");
      
//      } catch(IndexOutOfBoundsException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.nio.ByteBuffer", e);
//      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
      zipArchiveEntry0.setMethod(0);
      Zip64Mode zip64Mode0 = Zip64Mode.Always;
      File file0 = MockFile.createTempFile("Major device number is out of range: ", "9DATMvHFN~m^");
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(file0);
      zipArchiveOutputStream0.setUseZip64(zip64Mode0);
      zipArchiveOutputStream0.putArchiveEntry(zipArchiveEntry0);
      zipArchiveOutputStream0.putArchiveEntry(zipArchiveEntry0);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(3);
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(byteArrayOutputStream0);
      Zip64Mode zip64Mode0 = Zip64Mode.Always;
      zipArchiveOutputStream0.setEncoding("Pbd");
//      try { 
        zipArchiveOutputStream0.close();
//        fail("Expecting exception: UnsupportedEncodingException");
      
//      } catch(UnsupportedEncodingException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("tre_m hasBlra0m Ken finiOLed");
      JarArchiveEntry jarArchiveEntry0 = new JarArchiveEntry("tre_m hasBlra0m Ken finiOLed");
      jarArchiveEntry0.setMethod(9508);
      jarArchiveEntry0.setCompressedSize(4294967315L);
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(mockFileOutputStream0);
      // Undeclared exception!
//      try { 
        zipArchiveOutputStream0.writeCentralFileHeader(jarArchiveEntry0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream$EntryMetaData", e);
//      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(byteArrayOutputStream0);
      zipArchiveEntry0.setMethod(0);
      zipArchiveEntry0.setCrc(808471376L);
      zipArchiveOutputStream0.setLevel((-1));
      zipArchiveEntry0.setSize(2048);
      zipArchiveOutputStream0.putArchiveEntry(zipArchiveEntry0);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("F9}m$");
      FileChannel fileChannel0 = mockFileOutputStream0.getChannel();
      JarArchiveEntry jarArchiveEntry0 = new JarArchiveEntry("F9}m$");
      jarArchiveEntry0.setCompressedSize(4294967312L);
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(mockFileOutputStream0);
      ZipArchiveOutputStream zipArchiveOutputStream1 = new ZipArchiveOutputStream(fileChannel0);
      zipArchiveOutputStream1.putArchiveEntry(jarArchiveEntry0);
      jarArchiveEntry0.setCrc(22L);
      // Undeclared exception!
//      try { 
        zipArchiveOutputStream0.writeCentralFileHeader(jarArchiveEntry0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream$EntryMetaData", e);
//      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(fileDescriptor0);
      FileChannel fileChannel0 = mockFileOutputStream0.getChannel();
      JarArchiveEntry jarArchiveEntry0 = new JarArchiveEntry("always");
      jarArchiveEntry0.setCompressedSize(4294967295L);
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(mockFileOutputStream0);
      ZipArchiveOutputStream zipArchiveOutputStream1 = new ZipArchiveOutputStream(fileChannel0);
//      try { 
        zipArchiveOutputStream1.putArchiveEntry(jarArchiveEntry0);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.evosuite.runtime.mock.java.io.NativeMockedIO", e);
//      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(fileDescriptor0);
      mockFileOutputStream0.getChannel();
      JarArchiveEntry jarArchiveEntry0 = new JarArchiveEntry("always");
      jarArchiveEntry0.setCompressedSize(4294967295L);
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(mockFileOutputStream0);
      // Undeclared exception!
//      try { 
        zipArchiveOutputStream0.writeCentralFileHeader(jarArchiveEntry0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream$EntryMetaData", e);
//      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
      zipArchiveEntry0.setMethod(0);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("Major device number is out of range: ");
      FileChannel fileChannel0 = mockFileOutputStream0.getChannel();
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(fileChannel0);
      zipArchiveOutputStream0.putArchiveEntry(zipArchiveEntry0);
      zipArchiveOutputStream0.destroy();
//      try { 
        zipArchiveOutputStream0.writeLocalFileHeader(zipArchiveEntry0);
//        fail("Expecting exception: ClosedChannelException");
      
//      } catch(ClosedChannelException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.evosuite.runtime.mock.java.io.EvoFileChannel", e);
//      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      FileChannel fileChannel0 = mockFileInputStream0.getChannel();
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(fileChannel0);
      Zip64Mode zip64Mode0 = Zip64Mode.AsNeeded;
      mockFileInputStream0.mark((-1));
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-10);
      // Undeclared exception!
//      try { 
        zipArchiveOutputStream0.writeOut(byteArray0);
//        fail("Expecting exception: NonWritableChannelException");
      
//      } catch(NonWritableChannelException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.evosuite.runtime.mock.java.io.EvoFileChannel", e);
//      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("a9}m\"*");
      mockFileOutputStream0.write((-219));
      FileChannel fileChannel0 = mockFileOutputStream0.getChannel();
      JarArchiveEntry jarArchiveEntry0 = new JarArchiveEntry("a9}m\"*");
      jarArchiveEntry0.setCompressedSize(4294967294L);
      FileChannel fileChannel1 = fileChannel0.position(4294967294L);
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(fileChannel1);
      ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
      // Undeclared exception!
//      try { 
        zipArchiveOutputStream0.putArchiveEntry(jarArchiveEntry0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Position in the file cannot be negative
//         //
//         verifyException("org.evosuite.runtime.vfs.VFile", e);
//      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("a9}m\"*");
      FileChannel fileChannel0 = mockFileOutputStream0.getChannel();
      JarArchiveEntry jarArchiveEntry0 = new JarArchiveEntry("a9}m\"*");
      jarArchiveEntry0.setCompressedSize(4294967294L);
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(mockFileOutputStream0);
      ZipArchiveOutputStream zipArchiveOutputStream1 = new ZipArchiveOutputStream(fileChannel0);
      zipArchiveOutputStream1.putArchiveEntry(jarArchiveEntry0);
      jarArchiveEntry0.setCrc(1L);
      zipArchiveOutputStream0.destroy();
//      try { 
        zipArchiveOutputStream1.writeCentralFileHeader(jarArchiveEntry0);
//        fail("Expecting exception: ClosedChannelException");
      
//      } catch(ClosedChannelException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.evosuite.runtime.mock.java.io.EvoFileChannel", e);
//      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(byteArrayOutputStream0);
      zipArchiveOutputStream0.putArchiveEntry(zipArchiveEntry0);
      Zip64Mode zip64Mode0 = Zip64Mode.Always;
      zipArchiveOutputStream0.setUseZip64(zip64Mode0);
      zipArchiveOutputStream0.closeArchiveEntry();
      zipArchiveOutputStream0.writeCentralFileHeader(zipArchiveEntry0);
      zipArchiveOutputStream0.writeCentralFileHeader(zipArchiveEntry0);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
      zipArchiveEntry0.setSize(4294967313L);
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(byteArrayOutputStream0);
      zipArchiveOutputStream0.putArchiveEntry(zipArchiveEntry0);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-10);
      byteArray0[1] = (byte)33;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)103;
      byteArray0[5] = (byte) (-78);
      zipArchiveOutputStream0.write(byteArray0, (int) (byte)0, (int) (byte)0);
      JarArchiveEntry jarArchiveEntry0 = new JarArchiveEntry(zipArchiveEntry0);
      // Undeclared exception!
//      try { 
        zipArchiveOutputStream0.writeCentralFileHeader(jarArchiveEntry0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream$EntryMetaData", e);
//      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      zipArchiveEntry0.setMethod(0);
      MockFile mockFile0 = new MockFile("MUo~v$fs<z", "MUo~v$fs<z");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0);
      mockFileOutputStream0.getChannel();
      zipArchiveEntry0.setMethod(6);
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(mockFile0);
      zipArchiveOutputStream0.canWriteEntryData(zipArchiveEntry0);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      zipArchiveEntry0.setMethod(0);
      MockFile mockFile0 = new MockFile("MUo~v$<z", "MUo~v$<z");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0);
      FileChannel fileChannel0 = mockFileOutputStream0.getChannel();
      mockFile0.getAbsolutePath();
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(fileChannel0);
      zipArchiveOutputStream0.putArchiveEntry(zipArchiveEntry0);
      byte[] byteArray0 = new byte[6];
      zipArchiveOutputStream0.putArchiveEntry(zipArchiveEntry0);
      byteArray0[0] = (byte)65;
      byteArray0[1] = (byte) (-70);
      byteArray0[2] = (byte)7;
      byteArray0[3] = (byte)15;
      byteArray0[4] = (byte) (-82);
      byteArray0[5] = (byte)73;
      // Undeclared exception!
//      try { 
        zipArchiveOutputStream0.writeOut(byteArray0, 3, (-2469));
//        fail("Expecting exception: IndexOutOfBoundsException");
      
//      } catch(IndexOutOfBoundsException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.nio.ByteBuffer", e);
//      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(byteArrayOutputStream0);
      zipArchiveEntry0.setMethod(0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      zipArchiveEntry0.setSize(2048);
      ZipArchiveOutputStream zipArchiveOutputStream1 = new ZipArchiveOutputStream(zipArchiveOutputStream0);
//      try { 
        zipArchiveOutputStream1.putArchiveEntry(zipArchiveEntry0);
//        fail("Expecting exception: ZipException");
      
//      } catch(ZipException e) {
//         //
//         // crc checksum is required for STORED method when not writing to a file
//         //
//         verifyException("org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream", e);
//      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(byteArrayOutputStream0);
      zipArchiveOutputStream0.putArchiveEntry(zipArchiveEntry0);
      Zip64Mode zip64Mode0 = Zip64Mode.Always;
      zipArchiveOutputStream0.setUseZip64(zip64Mode0);
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      FileChannel fileChannel0 = mockFileInputStream0.getChannel();
      ZipArchiveOutputStream zipArchiveOutputStream1 = new ZipArchiveOutputStream(fileChannel0);
      // Undeclared exception!
//      try { 
        zipArchiveOutputStream1.addRawArchiveEntry(zipArchiveEntry0, mockFileInputStream0);
//        fail("Expecting exception: NonWritableChannelException");
      
//      } catch(NonWritableChannelException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.evosuite.runtime.mock.java.io.EvoFileChannel", e);
//      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      String string0 = "k_k";
      String string1 = "qz";
      File file0 = MockFile.createTempFile("k_k", "qz");
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(file0);
      zipArchiveOutputStream0.destroy();
      zipArchiveOutputStream0.setEncoding("k_k");
      zipArchiveOutputStream0.setEncoding("k_k");
//      try { 
        zipArchiveOutputStream0.finish();
//        fail("Expecting exception: ClosedChannelException");
      
//      } catch(ClosedChannelException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(3);
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(byteArrayOutputStream0);
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(byteArrayOutputStream0);
      ZipArchiveOutputStream zipArchiveOutputStream1 = new ZipArchiveOutputStream(bufferedOutputStream0);
      zipArchiveOutputStream1.putArchiveEntry(zipArchiveEntry0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-97);
      bufferedOutputStream0.write(byteArray0);
      zipArchiveEntry0.setMethod(12);
//      try { 
        zipArchiveOutputStream1.putArchiveEntry(zipArchiveEntry0);
//        fail("Expecting exception: ZipException");
      
//      } catch(ZipException e) {
//         //
//         // bad CRC checksum for entry : ffffffffffffffff instead of 0
//         //
//         verifyException("org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream", e);
//      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(byteArrayOutputStream0);
      zipArchiveEntry0.setMethod(0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      zipArchiveOutputStream0.canWriteEntryData(zipArchiveEntry0);
      MockFile mockFile0 = new MockFile("MUo~v$<z", "org.apache.commons.compress.archivers.zip.StreamCompressor$OutputStreamCompressor");
      MockFile mockFile1 = new MockFile(mockFile0, "org.apache.commons.compress.archivers.zip.StreamCompressor$OutputStreamCompressor");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile1);
      FileChannel fileChannel0 = mockFileOutputStream0.getChannel();
      ZipArchiveOutputStream zipArchiveOutputStream1 = new ZipArchiveOutputStream(fileChannel0);
//      try { 
        zipArchiveOutputStream1.putArchiveEntry(zipArchiveEntry0);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Simulated IOException
//         //
//         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
//      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      String string0 = "#a^g}y_.";
      File file0 = MockFile.createTempFile("#a^g}y_.", "#a^g}y_.");
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(file0);
      zipArchiveOutputStream0.destroy();
      boolean boolean0 = false;
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "^)1X-62!B61");
      zipArchiveOutputStream0.setUseLanguageEncodingFlag(false);
      String string1 = null;
      zipArchiveOutputStream0.setComment((String) null);
      zipArchiveOutputStream0.destroy();
//      try { 
        zipArchiveOutputStream0.close();
//        fail("Expecting exception: ClosedChannelException");
      
//      } catch(ClosedChannelException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
      zipArchiveEntry0.setSize(0);
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(byteArrayOutputStream0);
      zipArchiveOutputStream0.putArchiveEntry(zipArchiveEntry0);
      JarArchiveEntry jarArchiveEntry0 = new JarArchiveEntry((ZipEntry) zipArchiveEntry0);
      jarArchiveEntry0.setCompressedSize((-470L));
      jarArchiveEntry0.setCrc(0);
      // Undeclared exception!
//      try { 
        zipArchiveOutputStream0.addRawArchiveEntry(jarArchiveEntry0, (InputStream) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(byteArrayOutputStream0);
      byteArrayOutputStream0.write(1000);
      zipArchiveOutputStream0.putArchiveEntry(zipArchiveEntry0);
      zipArchiveEntry0.setMethod(0);
      zipArchiveOutputStream0.canWriteEntryData(zipArchiveEntry0);
      zipArchiveOutputStream0.writeCentralFileHeader(zipArchiveEntry0);
//      try { 
        zipArchiveOutputStream0.closeArchiveEntry();
//        fail("Expecting exception: ZipException");
      
//      } catch(ZipException e) {
//         //
//         // bad CRC checksum for entry : ffffffffffffffff instead of 0
//         //
//         verifyException("org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream", e);
//      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      MockFile mockFile0 = new MockFile("0\u0000", "");
      ZipArchiveOutputStream zipArchiveOutputStream0 = null;
//      try {
        zipArchiveOutputStream0 = new ZipArchiveOutputStream(mockFile0);
//        fail("Expecting exception: InvalidPathException");
      
//      } catch(InvalidPathException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(byteArrayOutputStream0);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-34);
      byteArray0[1] = (byte) (-91);
      byteArray0[2] = (byte)26;
      byteArray0[3] = (byte) (-87);
      byteArray0[4] = (byte) (-59);
      byteArrayOutputStream0.write(byteArray0);
      zipArchiveEntry0.setName("IBM437");
      zipArchiveOutputStream0.putArchiveEntry(zipArchiveEntry0);
      Zip64Mode zip64Mode0 = Zip64Mode.Never;
      zipArchiveOutputStream0.setUseZip64(zip64Mode0);
      zipArchiveOutputStream0.putArchiveEntry(zipArchiveEntry0);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(byteArrayOutputStream0);
      zipArchiveOutputStream0.putArchiveEntry(zipArchiveEntry0);
      zipArchiveEntry0.setMethod(1);
//      try { 
        zipArchiveOutputStream0.addRawArchiveEntry(zipArchiveEntry0, (InputStream) null);
//        fail("Expecting exception: ZipException");
      
//      } catch(ZipException e) {
//         //
//         // bad CRC checksum for entry : ffffffffffffffff instead of 0
//         //
//         verifyException("org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream", e);
//      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("Stream has Blready been finished");
      JarArchiveEntry jarArchiveEntry0 = new JarArchiveEntry("Stream has Blready been finished");
      jarArchiveEntry0.setCompressedSize(4294967306L);
      JarArchiveEntry jarArchiveEntry1 = new JarArchiveEntry("Stream has Blready been finished");
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(mockFileOutputStream0);
      ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
//      try { 
        zipArchiveOutputStream0.putArchiveEntry(jarArchiveEntry0);
//        fail("Expecting exception: Zip64RequiredException");
      
//      } catch(Zip64RequiredException e) {
//         //
//         // Stream has Blready been finished's size exceeds the limit of 4GByte.
//         //
//         verifyException("org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream", e);
//      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
      zipArchiveEntry0.setRawFlag(2140372774);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(byteArrayOutputStream0);
      zipArchiveOutputStream0.putArchiveEntry(zipArchiveEntry0);
      Zip64Mode zip64Mode0 = Zip64Mode.Always;
      zipArchiveOutputStream0.setUseZip64(zip64Mode0);
      zipArchiveOutputStream0.writeCentralFileHeader(zipArchiveEntry0);
      zipArchiveOutputStream0.writeLocalFileHeader(zipArchiveEntry0);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("Stream has Blready been finished");
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("Stream has Blready been finished");
      FileSystemHandling.createFolder(evoSuiteFile0);
      JarArchiveEntry jarArchiveEntry0 = new JarArchiveEntry("Stream has Blready been finished");
      GeneralPurposeBit generalPurposeBit0 = jarArchiveEntry0.getGeneralPurposeBit();
      generalPurposeBit0.useStrongEncryption(false);
      jarArchiveEntry0.setGeneralPurposeBit(generalPurposeBit0);
      byte[] byteArray0 = new byte[0];
      FileSystemHandling.appendDataToFile(evoSuiteFile0, byteArray0);
      jarArchiveEntry0.setCompressedSize(4294967286L);
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(mockFileOutputStream0);
      zipArchiveOutputStream0.putArchiveEntry(jarArchiveEntry0);
      zipArchiveOutputStream0.destroy();
      zipArchiveOutputStream0.writeZip64CentralDirectory();
//      try { 
        zipArchiveOutputStream0.writeDataDescriptor(jarArchiveEntry0);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.evosuite.runtime.mock.java.io.MockFileOutputStream", e);
//      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("Stream has Blready been finished");
      JarArchiveEntry jarArchiveEntry0 = new JarArchiveEntry("Stream has Blready been finished");
      jarArchiveEntry0.setCompressedSize(4294967295L);
      JarArchiveEntry jarArchiveEntry1 = new JarArchiveEntry("Stream has Blready been finished");
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(mockFileOutputStream0);
//      try { 
        zipArchiveOutputStream0.putArchiveEntry(jarArchiveEntry0);
//        fail("Expecting exception: Zip64RequiredException");
      
//      } catch(Zip64RequiredException e) {
//         //
//         // Stream has Blready been finished's size exceeds the limit of 4GByte.
//         //
//         verifyException("org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream", e);
//      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("Streamhas aleady been finished");
      FileChannel fileChannel0 = mockFileOutputStream0.getChannel();
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(fileChannel0);
      zipArchiveOutputStream0.setMethod(20);
      Zip64Mode zip64Mode0 = Zip64Mode.Never;
      zipArchiveOutputStream0.setUseZip64(zip64Mode0);
      MockFile mockFile0 = new MockFile("z(KgrI+]xE", "org.apache.commons.compress.utils.ByteUtils");
      ArchiveEntry archiveEntry0 = zipArchiveOutputStream0.createArchiveEntry(mockFile0, "org.apache.commons.compress.utils.ByteUtils");
      zipArchiveOutputStream0.putArchiveEntry(archiveEntry0);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
      zipArchiveEntry0.setSize(8589934591L);
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(byteArrayOutputStream0);
      ZipArchiveOutputStream zipArchiveOutputStream1 = new ZipArchiveOutputStream(byteArrayOutputStream0);
      // Undeclared exception!
//      try { 
        zipArchiveOutputStream0.writeCentralFileHeader(zipArchiveEntry0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream$EntryMetaData", e);
//      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      JarArchiveEntry jarArchiveEntry0 = new JarArchiveEntry("xv($l");
      File file0 = MockFile.createTempFile("xv($l", "!");
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(file0);
      zipArchiveOutputStream0.putArchiveEntry(jarArchiveEntry0);
      Zip64Mode zip64Mode0 = Zip64Mode.Always;
      zipArchiveOutputStream0.setUseZip64(zip64Mode0);
      zipArchiveOutputStream0.putArchiveEntry(jarArchiveEntry0);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-51);
      byteArray0[1] = (byte) (-39);
      // Undeclared exception!
//      try { 
        zipArchiveOutputStream0.write(byteArray0, (-2120), 2902);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.util.zip.CRC32", e);
//      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
      zipArchiveEntry0.setSize(4294967295L);
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(byteArrayOutputStream0);
      // Undeclared exception!
//      try { 
        zipArchiveOutputStream0.writeCentralFileHeader(zipArchiveEntry0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream$EntryMetaData", e);
//      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
      zipArchiveEntry0.setSize(8589934591L);
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(byteArrayOutputStream0);
      zipArchiveOutputStream0.putArchiveEntry(zipArchiveEntry0);
      byteArrayOutputStream0.writeTo(zipArchiveOutputStream0);
      JarArchiveEntry jarArchiveEntry0 = new JarArchiveEntry((ZipEntry) zipArchiveEntry0);
      Zip64Mode zip64Mode0 = Zip64Mode.Never;
      zipArchiveOutputStream0.setUseZip64(zip64Mode0);
//      try { 
        zipArchiveOutputStream0.putArchiveEntry(jarArchiveEntry0);
//        fail("Expecting exception: Zip64RequiredException");
      
//      } catch(Zip64RequiredException e) {
//         //
//         // 's size exceeds the limit of 4GByte.
//         //
//         verifyException("org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream", e);
//      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(byteArrayOutputStream0);
      ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
      zipArchiveEntry0.setSize(2480L);
      ZipArchiveOutputStream zipArchiveOutputStream1 = new ZipArchiveOutputStream(zipArchiveOutputStream0);
      // Undeclared exception!
//      try { 
        zipArchiveOutputStream1.writeCentralDirectoryEnd();
//        fail("Expecting exception: IllegalStateException");
      
//      } catch(IllegalStateException e) {
//         //
//         // No current entry
//         //
//         verifyException("org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream", e);
//      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
      zipArchiveEntry0.setSize(4294967308L);
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(byteArrayOutputStream0);
      zipArchiveOutputStream0.putArchiveEntry(zipArchiveEntry0);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)2;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (-2304), (-2304));
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      ByteArrayInputStream byteArrayInputStream1 = new ByteArrayInputStream(byteArray0, (-2304), (-1940));
      byteArrayInputStream1.mark(0);
      zipArchiveOutputStream0.addRawArchiveEntry(zipArchiveEntry0, byteArrayInputStream1);
      zipArchiveOutputStream0.close();
      // Undeclared exception!
//      try { 
        zipArchiveOutputStream0.write(byteArray0, 579, (-708));
//        fail("Expecting exception: IllegalStateException");
      
//      } catch(IllegalStateException e) {
//         //
//         // No current entry
//         //
//         verifyException("org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream", e);
//      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
      zipArchiveEntry0.setSize(4294967295L);
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(byteArrayOutputStream0);
      zipArchiveOutputStream0.putArchiveEntry(zipArchiveEntry0);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)2;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (-2304), 532);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      ByteArrayInputStream byteArrayInputStream1 = new ByteArrayInputStream(byteArray0, (-226), (-1940));
      byteArrayInputStream1.mark(0);
      zipArchiveOutputStream0.addRawArchiveEntry(zipArchiveEntry0, byteArrayInputStream1);
      zipArchiveOutputStream0.close();
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
      zipArchiveEntry0.setSize(1392409281320L);
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(byteArrayOutputStream0);
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(objectOutputStream0);
      zipArchiveOutputStream0.putArchiveEntry(zipArchiveEntry0);
      ZipArchiveOutputStream zipArchiveOutputStream1 = new ZipArchiveOutputStream(objectOutputStream0);
      JarArchiveEntry jarArchiveEntry0 = new JarArchiveEntry((ZipEntry) zipArchiveEntry0);
      jarArchiveEntry0.setCrc(4294967282L);
      MockFile mockFile0 = new MockFile("4k?6L6&s2nJ:/G");
      ZipArchiveOutputStream zipArchiveOutputStream2 = new ZipArchiveOutputStream(mockFile0);
      zipArchiveOutputStream2.putArchiveEntry(jarArchiveEntry0);
      // Undeclared exception!
//      try { 
        zipArchiveOutputStream1.addRawArchiveEntry(zipArchiveEntry0, (InputStream) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
      zipArchiveEntry0.setSize(4294967295L);
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(byteArrayOutputStream0);
      zipArchiveOutputStream0.putArchiveEntry(zipArchiveEntry0);
      ZipArchiveOutputStream zipArchiveOutputStream1 = new ZipArchiveOutputStream(zipArchiveOutputStream0);
      JarArchiveEntry jarArchiveEntry0 = new JarArchiveEntry((ZipEntry) zipArchiveEntry0);
      jarArchiveEntry0.setCrc(2048);
      zipArchiveOutputStream0.putArchiveEntry(zipArchiveEntry0);
      // Undeclared exception!
//      try { 
        zipArchiveOutputStream1.addRawArchiveEntry(jarArchiveEntry0, (InputStream) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
      zipArchiveEntry0.setSize(4294967295L);
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(byteArrayOutputStream0);
      zipArchiveOutputStream0.putArchiveEntry(zipArchiveEntry0);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)2;
      byteArray0[1] = (byte)36;
      byteArray0[2] = (byte)18;
      byteArray0[3] = (byte)56;
      byteArray0[4] = (byte)49;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte)2, (byte)36);
      zipArchiveOutputStream0.addRawArchiveEntry(zipArchiveEntry0, byteArrayInputStream0);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(byteArrayOutputStream0);
      zipArchiveOutputStream0.setMethod(3);
      Zip64Mode zip64Mode0 = Zip64Mode.Always;
      zipArchiveOutputStream0.setUseZip64(zip64Mode0);
      zipArchiveOutputStream0.putArchiveEntry(zipArchiveEntry0);
      System.setCurrentTimeMillis(0);
      zipArchiveOutputStream0.writeCentralFileHeader(zipArchiveEntry0);
      String string0 = ", comment=";
//      try { 
        MockURI.URI("Pw)=4+q", "Pw)=4+q", "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream", ", comment=", "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream");
//        fail("Expecting exception: URISyntaxException");
      
//      } catch(URISyntaxException e) {
//         //
//         // Relative path in absolute URI: Pw)=4+q://Pw)=4+qorg.apache.commons.compress.archivers.zip.ZipArchiveOutputStream?,%20comment=#org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream
//         //
//         verifyException("java.net.URI", e);
//      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
      zipArchiveEntry0.setSize(4294967295L);
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(byteArrayOutputStream0);
      zipArchiveOutputStream0.putArchiveEntry(zipArchiveEntry0);
//      try { 
        zipArchiveOutputStream0.finish();
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // This archive contains unclosed entries.
//         //
//         verifyException("org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream", e);
//      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      FileChannel fileChannel0 = mockFileInputStream0.getChannel();
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(fileChannel0);
      // Undeclared exception!
//      try { 
        zipArchiveOutputStream0.finish();
//        fail("Expecting exception: NonWritableChannelException");
      
//      } catch(NonWritableChannelException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.evosuite.runtime.mock.java.io.EvoFileChannel", e);
//      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("'F_");
      JarArchiveEntry jarArchiveEntry0 = new JarArchiveEntry("'F_");
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(mockFileOutputStream0);
      zipArchiveOutputStream0.putArchiveEntry(jarArchiveEntry0);
      zipArchiveOutputStream0.writeDataDescriptor(jarArchiveEntry0);
      jarArchiveEntry0.getLastModifiedTime();
      Zip64Mode zip64Mode0 = Zip64Mode.Always;
      zipArchiveOutputStream0.setUseZip64(zip64Mode0);
      zipArchiveOutputStream0.putArchiveEntry(jarArchiveEntry0);
      zipArchiveOutputStream0.putArchiveEntry(jarArchiveEntry0);
      zipArchiveOutputStream0.putArchiveEntry(jarArchiveEntry0);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(2108);
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(byteArrayOutputStream0);
      zipArchiveOutputStream0.setMethod(9532);
      zipArchiveOutputStream0.putArchiveEntry(zipArchiveEntry0);
      zipArchiveOutputStream0.writeDataDescriptor(zipArchiveEntry0);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("'F_");
      JarArchiveEntry jarArchiveEntry0 = new JarArchiveEntry("'F_");
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(mockFileOutputStream0);
      zipArchiveOutputStream0.putArchiveEntry(jarArchiveEntry0);
      jarArchiveEntry0.getLastModifiedTime();
      Zip64Mode zip64Mode0 = Zip64Mode.Always;
      zipArchiveOutputStream0.writeDataDescriptor(jarArchiveEntry0);
      zipArchiveOutputStream0.setUseZip64(zip64Mode0);
      zipArchiveOutputStream0.putArchiveEntry(jarArchiveEntry0);
      zipArchiveOutputStream0.closeArchiveEntry();
      // Undeclared exception!
//      try { 
        zipArchiveOutputStream0.write((byte[]) null, 3, (-694));
//        fail("Expecting exception: IllegalStateException");
      
//      } catch(IllegalStateException e) {
//         //
//         // No current entry
//         //
//         verifyException("org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream", e);
//      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("Stream has Blready been finished");
      JarArchiveEntry jarArchiveEntry0 = new JarArchiveEntry("Stream has Blready been finished");
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(mockFileOutputStream0);
      zipArchiveOutputStream0.putArchiveEntry(jarArchiveEntry0);
      zipArchiveOutputStream0.putArchiveEntry(jarArchiveEntry0);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)34;
      jarArchiveEntry0.setUnixMode((-1932735280));
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 2270, (byte)34);
      zipArchiveOutputStream0.addRawArchiveEntry(jarArchiveEntry0, byteArrayInputStream0);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(byteArrayInputStream0, 3805);
      zipArchiveOutputStream0.addRawArchiveEntry(jarArchiveEntry0, bufferedInputStream0);
      zipArchiveOutputStream0.putArchiveEntry(jarArchiveEntry0);
      zipArchiveOutputStream0.addRawArchiveEntry(jarArchiveEntry0, bufferedInputStream0);
//      try { 
        zipArchiveOutputStream0.finish();
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Error in writing to file
//         //
//         verifyException("org.evosuite.runtime.mock.java.io.NativeMockedIO", e);
//      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(byteArrayOutputStream0);
      zipArchiveOutputStream0.putArchiveEntry(zipArchiveEntry0);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)34;
      byteArray0[1] = (byte)34;
      byteArray0[2] = (byte)34;
      byteArray0[3] = (byte)34;
      byteArray0[4] = (byte)34;
      byteArray0[5] = (byte)34;
      byteArray0[6] = (byte)34;
      ResourceAlignmentExtraField resourceAlignmentExtraField0 = new ResourceAlignmentExtraField();
      zipArchiveEntry0.addExtraField(resourceAlignmentExtraField0);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 3, 9);
      // Undeclared exception!
//      try { 
        zipArchiveOutputStream0.addRawArchiveEntry(zipArchiveEntry0, byteArrayInputStream0);
//        fail("Expecting exception: NegativeArraySizeException");
      
//      } catch(NegativeArraySizeException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.compress.archivers.zip.ExtraFieldUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("}=8 ");
      JarArchiveEntry jarArchiveEntry0 = new JarArchiveEntry("}=8 ");
      jarArchiveEntry0.setInternalAttributes(2);
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(mockFileOutputStream0);
      zipArchiveOutputStream0.putArchiveEntry(jarArchiveEntry0);
      zipArchiveOutputStream0.putArchiveEntry(jarArchiveEntry0);
      jarArchiveEntry0.setComment("?YrbaZvJ2oo");
      Zip64Mode zip64Mode0 = Zip64Mode.Always;
      zipArchiveOutputStream0.setUseZip64(zip64Mode0);
      // Undeclared exception!
//      try { 
        zipArchiveOutputStream0.addRawArchiveEntry(jarArchiveEntry0, (InputStream) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("}=8 ");
      JarArchiveEntry jarArchiveEntry0 = new JarArchiveEntry("}=8 ");
      jarArchiveEntry0.setInternalAttributes(2);
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(mockFileOutputStream0);
      zipArchiveOutputStream0.putArchiveEntry(jarArchiveEntry0);
      zipArchiveOutputStream0.putArchiveEntry(jarArchiveEntry0);
      jarArchiveEntry0.setComment("?YrbaZvJ2oo");
      Zip64Mode zip64Mode0 = Zip64Mode.Always;
      zipArchiveOutputStream0.setUseZip64(zip64Mode0);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)34;
      ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
      zipArchiveOutputStream0.putArchiveEntry(jarArchiveEntry0);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      JarArchiveEntry jarArchiveEntry0 = new JarArchiveEntry("x!$l");
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(byteArrayOutputStream0);
      UnicodePathExtraField unicodePathExtraField0 = new UnicodePathExtraField();
      jarArchiveEntry0.addAsFirstExtraField(unicodePathExtraField0);
      jarArchiveEntry0.setCrc(8);
      zipArchiveOutputStream0.putArchiveEntry(jarArchiveEntry0);
      InputStream inputStream0 = null;
//      try { 
        zipArchiveOutputStream0.addRawArchiveEntry(jarArchiveEntry0, (InputStream) null);
//        fail("Expecting exception: ZipException");
      
//      } catch(ZipException e) {
//         //
//         // UniCode path extra data must have at least 5 bytes.
//         //
//         verifyException("org.apache.commons.compress.archivers.zip.AbstractUnicodeExtraField", e);
//      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(byteArrayOutputStream0);
      ZipArchiveEntry zipArchiveEntry1 = new ZipArchiveEntry();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      zipArchiveOutputStream0.setLevel(0);
      zipArchiveOutputStream0.setLevel((-1));
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("rcount: ");
      JarArchiveEntry jarArchiveEntry0 = new JarArchiveEntry("rcount: ");
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(mockFileOutputStream0, 3);
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(bufferedOutputStream0);
      zipArchiveOutputStream0.putArchiveEntry(jarArchiveEntry0);
      jarArchiveEntry0.setComment("|");
      ZipArchiveOutputStream.UnicodeExtraFieldPolicy zipArchiveOutputStream_UnicodeExtraFieldPolicy0 = ZipArchiveOutputStream.UnicodeExtraFieldPolicy.ALWAYS;
      ZipArchiveOutputStream.UnicodeExtraFieldPolicy zipArchiveOutputStream_UnicodeExtraFieldPolicy1 = ZipArchiveOutputStream.UnicodeExtraFieldPolicy.NOT_ENCODEABLE;
      zipArchiveOutputStream0.setCreateUnicodeExtraFields(zipArchiveOutputStream_UnicodeExtraFieldPolicy1);
      zipArchiveOutputStream0.putArchiveEntry(jarArchiveEntry0);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(byteArrayOutputStream0);
      ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
      zipArchiveOutputStream0.setMethod(3);
      zipArchiveOutputStream0.putArchiveEntry(zipArchiveEntry0);
//      try { 
        zipArchiveOutputStream0.putArchiveEntry(zipArchiveEntry0);
//        fail("Expecting exception: UnsupportedZipFeatureException");
      
//      } catch(UnsupportedZipFeatureException e) {
//         //
//         // unsupported feature method 'EXPANDING_LEVEL_2' used in entry 
//         //
//         verifyException("org.apache.commons.compress.archivers.zip.ZipUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(byteArrayOutputStream0);
      ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
      zipArchiveOutputStream0.setMethod(3);
      zipArchiveOutputStream0.putArchiveEntry(zipArchiveEntry0);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-75);
      byteArray0[1] = (byte)8;
//      try { 
        zipArchiveOutputStream0.write(byteArray0, 233, (int) (byte) (-75));
//        fail("Expecting exception: UnsupportedZipFeatureException");
      
//      } catch(UnsupportedZipFeatureException e) {
//         //
//         // unsupported feature method 'EXPANDING_LEVEL_2' used in entry 
//         //
//         verifyException("org.apache.commons.compress.archivers.zip.ZipUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(byteArrayOutputStream0);
      ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
      zipArchiveOutputStream0.canWriteEntryData(zipArchiveEntry0);
      zipArchiveOutputStream0.setEncoding("never");
//      try { 
        zipArchiveOutputStream0.finish();
//        fail("Expecting exception: UnsupportedEncodingException");
      
//      } catch(UnsupportedEncodingException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(byteArrayOutputStream0);
      ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
      GeneralPurposeBit generalPurposeBit0 = zipArchiveEntry0.getGeneralPurposeBit();
      zipArchiveEntry0.setGeneralPurposeBit(generalPurposeBit0);
      zipArchiveOutputStream0.setMethod(3);
      zipArchiveOutputStream0.putArchiveEntry(zipArchiveEntry0);
//      try { 
        zipArchiveOutputStream0.closeArchiveEntry();
//        fail("Expecting exception: UnsupportedZipFeatureException");
      
//      } catch(UnsupportedZipFeatureException e) {
//         //
//         // unsupported feature method 'EXPANDING_LEVEL_2' used in entry 
//         //
//         verifyException("org.apache.commons.compress.archivers.zip.ZipUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("archive contains more than 65535 entries.");
      JarArchiveEntry jarArchiveEntry0 = new JarArchiveEntry("\"JWkG[5o~TE");
      ByteArrayOutputStream byteArrayOutputStream1 = new ByteArrayOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(pipedOutputStream0);
      jarArchiveEntry0.setCrc(48L);
      zipArchiveOutputStream0.putArchiveEntry(jarArchiveEntry0);
      InputStream inputStream0 = null;
      // Undeclared exception!
      zipArchiveOutputStream0.addRawArchiveEntry(jarArchiveEntry0, pipedInputStream0);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      String string0 = "w=EWM:[";
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("w=EWM:[");
      JarArchiveEntry jarArchiveEntry0 = new JarArchiveEntry("w=EWM:[");
      jarArchiveEntry0.setInternalAttributes(0);
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(mockFileOutputStream0);
      zipArchiveOutputStream0.putArchiveEntry(jarArchiveEntry0);
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      FileChannel fileChannel0 = mockFileInputStream0.getChannel();
      ZipArchiveOutputStream zipArchiveOutputStream1 = new ZipArchiveOutputStream(fileChannel0);
      ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry("w=EWM:[");
      // Undeclared exception!
//      try { 
        zipArchiveOutputStream1.putArchiveEntry(zipArchiveEntry0);
//        fail("Expecting exception: NonWritableChannelException");
      
//      } catch(NonWritableChannelException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.evosuite.runtime.mock.java.io.EvoFileChannel", e);
//      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-62);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)9;
      byteArray0[3] = (byte)97;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)76;
      byteArray0[6] = (byte)86;
      byteArray0[7] = (byte)86;
      byteArray0[8] = (byte) (-27);
      byteArrayOutputStream0.write(byteArray0);
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(byteArrayOutputStream0);
      ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
      zipArchiveOutputStream0.setMethod(3);
      zipArchiveOutputStream0.putArchiveEntry(zipArchiveEntry0);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0);
//      try { 
        zipArchiveOutputStream0.addRawArchiveEntry(zipArchiveEntry0, pipedInputStream0);
//        fail("Expecting exception: UnsupportedZipFeatureException");
      
//      } catch(UnsupportedZipFeatureException e) {
//         //
//         // unsupported feature method 'EXPANDING_LEVEL_2' used in entry 
//         //
//         verifyException("org.apache.commons.compress.archivers.zip.ZipUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(byteArrayOutputStream0);
      ZipArchiveOutputStream.UnicodeExtraFieldPolicy zipArchiveOutputStream_UnicodeExtraFieldPolicy0 = ZipArchiveOutputStream.UnicodeExtraFieldPolicy.ALWAYS;
      zipArchiveOutputStream0.setCreateUnicodeExtraFields(zipArchiveOutputStream_UnicodeExtraFieldPolicy0);
      ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
      zipArchiveEntry0.setComment("");
      zipArchiveOutputStream0.putArchiveEntry(zipArchiveEntry0);
      assertEquals(39, byteArrayOutputStream0.size());
      assertEquals("PK\u0001\u0002\u0014\u0000\b\b\b\u0000\uFFFD\uFFFDND\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\t\u0000up\u0005\u0000\u0001\u0000\u0000\u0000\u0000", byteArrayOutputStream0.toString());
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("w=EWM:[");
      JarArchiveEntry jarArchiveEntry0 = new JarArchiveEntry("w=EWM:[");
      jarArchiveEntry0.setInternalAttributes(2);
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(mockFileOutputStream0);
      zipArchiveOutputStream0.putArchiveEntry(jarArchiveEntry0);
      zipArchiveOutputStream0.putArchiveEntry(jarArchiveEntry0);
      jarArchiveEntry0.setComment("*ZX");
      ZipArchiveOutputStream.UnicodeExtraFieldPolicy zipArchiveOutputStream_UnicodeExtraFieldPolicy0 = ZipArchiveOutputStream.UnicodeExtraFieldPolicy.ALWAYS;
      zipArchiveOutputStream0.setCreateUnicodeExtraFields(zipArchiveOutputStream_UnicodeExtraFieldPolicy0);
      JarArchiveEntry jarArchiveEntry1 = new JarArchiveEntry("");
      zipArchiveOutputStream0.putArchiveEntry(jarArchiveEntry0);
      System.setCurrentTimeMillis(2);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("archive contains more than 65535 entries.");
      JarArchiveEntry jarArchiveEntry0 = new JarArchiveEntry("archive contains more than 65535 entries.");
      ByteArrayOutputStream byteArrayOutputStream1 = new ByteArrayOutputStream();
      mockFileOutputStream0.getChannel();
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(mockFileOutputStream0);
      jarArchiveEntry0.setCrc(0);
      zipArchiveOutputStream0.putArchiveEntry(jarArchiveEntry0);
      zipArchiveOutputStream0.setEncoding("org.apache.commons.compress.archivers.zip.ZipShort");
//      try { 
        zipArchiveOutputStream0.addRawArchiveEntry(jarArchiveEntry0, (InputStream) null);
//        fail("Expecting exception: UnsupportedEncodingException");
      
//      } catch(UnsupportedEncodingException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("w=EWM:[");
      JarArchiveEntry jarArchiveEntry0 = new JarArchiveEntry("w=EWM:[");
      jarArchiveEntry0.setInternalAttributes(2);
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(mockFileOutputStream0);
      zipArchiveOutputStream0.putArchiveEntry(jarArchiveEntry0);
      zipArchiveOutputStream0.putArchiveEntry(jarArchiveEntry0);
      jarArchiveEntry0.setComment("*ZX");
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)34;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte)34, 3620);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(byteArrayInputStream0, (byte)34);
      zipArchiveOutputStream0.addRawArchiveEntry(jarArchiveEntry0, bufferedInputStream0);
      zipArchiveOutputStream0.addRawArchiveEntry(jarArchiveEntry0, byteArrayInputStream0);
//      try { 
        zipArchiveOutputStream0.finish();
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Error in writing to file
//         //
//         verifyException("org.evosuite.runtime.mock.java.io.NativeMockedIO", e);
//      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("archive contains more than 65535 entries.");
      JarArchiveEntry jarArchiveEntry0 = new JarArchiveEntry("archive contains more than 65535 entries.");
      ByteArrayOutputStream byteArrayOutputStream1 = new ByteArrayOutputStream();
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(mockFileOutputStream0);
      jarArchiveEntry0.setCrc(0);
      zipArchiveOutputStream0.putArchiveEntry(jarArchiveEntry0);
      // Undeclared exception!
//      try { 
        zipArchiveOutputStream0.addRawArchiveEntry(jarArchiveEntry0, (InputStream) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(byteArrayOutputStream0);
      zipArchiveOutputStream0.setMethod(187);
      ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
      zipArchiveOutputStream0.setMethod((-1));
      ZipArchiveOutputStream zipArchiveOutputStream1 = new ZipArchiveOutputStream(zipArchiveOutputStream0);
      // Undeclared exception!
//      try { 
        zipArchiveOutputStream0.putArchiveEntry(zipArchiveEntry0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // ZIP compression method can not be negative: -1
//         //
//         verifyException("org.apache.commons.compress.archivers.zip.ZipArchiveEntry", e);
//      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("bc}U~lp+m(;Z}v");
      FileChannel fileChannel0 = mockFileOutputStream0.getChannel();
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(fileChannel0);
      ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
      Zip64Mode zip64Mode0 = Zip64Mode.Never;
      zipArchiveOutputStream0.setUseZip64(zip64Mode0);
      zipArchiveOutputStream0.putArchiveEntry(zipArchiveEntry0);
      zipArchiveOutputStream0.canWriteEntryData(zipArchiveEntry0);
      zipArchiveOutputStream0.closeArchiveEntry();
      assertEquals(32L, fileChannel0.position());
      assertEquals(32L, fileChannel0.size());
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(byteArrayOutputStream0);
      ZipArchiveOutputStream.UnicodeExtraFieldPolicy zipArchiveOutputStream_UnicodeExtraFieldPolicy0 = ZipArchiveOutputStream.UnicodeExtraFieldPolicy.NOT_ENCODEABLE;
      ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
      zipArchiveOutputStream0.putArchiveEntry(zipArchiveEntry0);
      zipArchiveOutputStream0.setLevel(9);
      assertEquals("PK\u0001\u0002\u0014\u0000\b\b\b\u0000\uFFFD\uFFFDND\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", byteArrayOutputStream0.toString());
      assertEquals(30, byteArrayOutputStream0.size());
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(byteArrayOutputStream0);
      ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
      zipArchiveOutputStream0.setMethod(0);
      Zip64Mode zip64Mode0 = Zip64Mode.AsNeeded;
      zipArchiveOutputStream0.setUseZip64(zip64Mode0);
//      try { 
        zipArchiveOutputStream0.putArchiveEntry(zipArchiveEntry0);
//        fail("Expecting exception: ZipException");
      
//      } catch(ZipException e) {
//         //
//         // uncompressed size is required for STORED method when not writing to a file
//         //
//         verifyException("org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream", e);
//      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      JarArchiveEntry jarArchiveEntry0 = new JarArchiveEntry("");
      ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry("");
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(byteArrayOutputStream0);
      zipArchiveOutputStream0.setMethod(246);
      zipArchiveOutputStream0.putArchiveEntry(zipArchiveEntry0);
      JarArchiveEntry jarArchiveEntry1 = new JarArchiveEntry("");
      zipArchiveOutputStream0.writeZip64CentralDirectory();
      zipArchiveOutputStream0.writeLocalFileHeader(jarArchiveEntry0);
      zipArchiveOutputStream0.writeZip64CentralDirectory();
      MockFile mockFile0 = new MockFile("", "");
      ZipArchiveOutputStream zipArchiveOutputStream1 = null;
//      try {
        zipArchiveOutputStream1 = new ZipArchiveOutputStream(mockFile0);
//        fail("Expecting exception: FileNotFoundException");
      
//      } catch(Throwable e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.evosuite.runtime.mock.java.io.MockFileOutputStream", e);
//      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(byteArrayOutputStream0);
      ZipArchiveOutputStream.UnicodeExtraFieldPolicy zipArchiveOutputStream_UnicodeExtraFieldPolicy0 = ZipArchiveOutputStream.UnicodeExtraFieldPolicy.NOT_ENCODEABLE;
      Zip64Mode zip64Mode0 = Zip64Mode.Never;
      zipArchiveOutputStream0.setUseZip64(zip64Mode0);
      zipArchiveOutputStream0.setCreateUnicodeExtraFields((ZipArchiveOutputStream.UnicodeExtraFieldPolicy) null);
      JarArchiveEntry jarArchiveEntry0 = new JarArchiveEntry("jjxj(P(Hu+2|");
      jarArchiveEntry0.getCentralDirectoryExtra();
      zipArchiveOutputStream0.putArchiveEntry(jarArchiveEntry0);
      assertEquals(42, byteArrayOutputStream0.size());
      assertEquals("PK\u0001\u0002\u0014\u0000\b\b\b\u0000\uFFFD\uFFFDND\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\f\u0000\u0000\u0000jjxj(P(Hu+2|", byteArrayOutputStream0.toString());
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("bc}U~lp+m(;Z}v");
      FileChannel fileChannel0 = mockFileOutputStream0.getChannel();
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(fileChannel0);
      ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
      zipArchiveOutputStream0.putArchiveEntry(zipArchiveEntry0);
      ByteBuffer[] byteBufferArray0 = new ByteBuffer[5];
      ByteBuffer byteBuffer0 = ByteBuffer.allocateDirect(1147);
      byteBufferArray0[0] = byteBuffer0;
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-107);
      ByteBuffer byteBuffer1 = ByteBuffer.wrap(byteArray0);
      byteBufferArray0[1] = byteBuffer1;
      ByteBuffer byteBuffer2 = ByteBuffer.allocateDirect(3664);
      byteBufferArray0[2] = byteBuffer2;
      ByteBuffer byteBuffer3 = ByteBuffer.wrap(byteArray0);
      zipArchiveEntry0.getLastModifiedTime();
      byteBufferArray0[3] = byteBuffer3;
      Charset charset0 = Charset.defaultCharset();
      ByteBuffer byteBuffer4 = charset0.encode("bc}U~lp+m(;Z}v");
      byteBufferArray0[4] = byteBuffer4;
      fileChannel0.write(byteBufferArray0);
      zipArchiveOutputStream0.setLevel(3);
      zipArchiveOutputStream0.putArchiveEntry(zipArchiveEntry0);
      zipArchiveOutputStream0.writeZip64CentralDirectory();
      zipArchiveOutputStream0.putArchiveEntry(zipArchiveEntry0);
      zipArchiveOutputStream0.writeZip64CentralDirectory();
      assertEquals(4941L, fileChannel0.position());
      assertEquals(4941L, fileChannel0.size());
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("bc}U~lp+m(;Z}v");
      FileChannel fileChannel0 = mockFileOutputStream0.getChannel();
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(fileChannel0);
      ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
      zipArchiveOutputStream0.putArchiveEntry(zipArchiveEntry0);
      zipArchiveOutputStream0.setLevel(3);
      zipArchiveOutputStream0.closeArchiveEntry();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream("bc}U~lp+m(;Z}v");
      mockFileInputStream0.markSupported();
      zipArchiveOutputStream0.addRawArchiveEntry(zipArchiveEntry0, mockFileInputStream0);
      assertEquals(8, zipArchiveEntry0.getMethod());
      assertEquals(3485L, fileChannel0.position());
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("bc}U~lp+m(;Z}v");
      FileChannel fileChannel0 = mockFileOutputStream0.getChannel();
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(fileChannel0);
      ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
      ZipArchiveOutputStream zipArchiveOutputStream1 = new ZipArchiveOutputStream(mockFileOutputStream0);
      zipArchiveOutputStream0.putArchiveEntry(zipArchiveEntry0);
      zipArchiveOutputStream0.writeCentralFileHeader(zipArchiveEntry0);
      zipArchiveOutputStream0.putArchiveEntry(zipArchiveEntry0);
      assertEquals(0L, zipArchiveEntry0.getSize());
      assertEquals(132L, fileChannel0.size());
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(byteArrayOutputStream0);
      zipArchiveOutputStream0.close();
      byteArrayOutputStream0.write(8);
      ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
      zipArchiveOutputStream0.canWriteEntryData(zipArchiveEntry0);
      zipArchiveOutputStream0.close();
      // Undeclared exception!
//      try { 
        zipArchiveOutputStream0.writeCentralFileHeader(zipArchiveEntry0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream$EntryMetaData", e);
//      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("bc}U~lp+m(;Z}v");
      JarArchiveEntry jarArchiveEntry0 = new JarArchiveEntry("bc}U~lp+m(;Z}v");
      ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry("bc}U~lp+m(;Z}v");
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(mockFileOutputStream0);
      MockFile mockFile0 = new MockFile("bc}U~lp+m(;Z}v", "");
      zipArchiveEntry0.setAlignment(2048);
      ZipArchiveOutputStream zipArchiveOutputStream1 = new ZipArchiveOutputStream(mockFile0);
      zipArchiveOutputStream1.putArchiveEntry(zipArchiveEntry0);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-84);
      byteArray0[1] = (byte) (-63);
      byteArray0[2] = (byte)89;
      byteArray0[3] = (byte)121;
      byteArray0[4] = (byte) (-71);
      byteArray0[5] = (byte)3;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (-1), (byte) (-71));
      ZipArchiveEntry zipArchiveEntry1 = new ZipArchiveEntry(zipArchiveEntry0);
      zipArchiveOutputStream0.addRawArchiveEntry(zipArchiveEntry1, byteArrayInputStream0);
      zipArchiveOutputStream1.canWriteEntryData(jarArchiveEntry0);
//      try { 
        zipArchiveOutputStream0.close();
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Error in writing to file
//         //
//         verifyException("org.evosuite.runtime.mock.java.io.NativeMockedIO", e);
//      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("QVJ}J)L&G$*%'");
      mockFileOutputStream0.getChannel();
      ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry("T@4-[ifZ");
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(mockFileOutputStream0);
      zipArchiveOutputStream0.setLevel(3);
      zipArchiveOutputStream0.putArchiveEntry(zipArchiveEntry0);
//      try { 
        zipArchiveOutputStream0.finish();
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // This archive contains unclosed entries.
//         //
//         verifyException("org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream", e);
//      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("QVJ}J)L&G$*%'");
      mockFileOutputStream0.getChannel();
      ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry("T@4-[ifZ");
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(mockFileOutputStream0);
      zipArchiveOutputStream0.putArchiveEntry(zipArchiveEntry0);
      byte[] byteArray0 = new byte[0];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 693, 693);
      zipArchiveOutputStream0.addRawArchiveEntry(zipArchiveEntry0, byteArrayInputStream0);
//      try { 
        zipArchiveOutputStream0.finish();
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Error in writing to file
//         //
//         verifyException("org.evosuite.runtime.mock.java.io.NativeMockedIO", e);
//      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("QVJ}J)L&G$*%'");
      mockFileOutputStream0.getChannel();
      ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry("T@4-[ifZ");
      zipArchiveEntry0.setSize(24L);
      zipArchiveEntry0.setCrc(1372L);
      mockFileOutputStream0.release();
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(mockFileOutputStream0);
      zipArchiveOutputStream0.putArchiveEntry(zipArchiveEntry0);
      ZipArchiveOutputStream.UnicodeExtraFieldPolicy zipArchiveOutputStream_UnicodeExtraFieldPolicy0 = ZipArchiveOutputStream.UnicodeExtraFieldPolicy.NOT_ENCODEABLE;
      zipArchiveOutputStream0.setCreateUnicodeExtraFields(zipArchiveOutputStream_UnicodeExtraFieldPolicy0);
      JarArchiveEntry jarArchiveEntry0 = new JarArchiveEntry("YKd#F m(L$p7KP^zUG)");
      zipArchiveOutputStream0.writeLocalFileHeader(jarArchiveEntry0);
      zipArchiveOutputStream0.writeZip64CentralDirectory();
      assertEquals(0, ZipArchiveOutputStream.STORED);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      MockFile mockFile0 = new MockFile("^QfxE:<a! A@8q");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) "netware";
      objectArray0[1] = (Object) "^QfxE:<a! A@8q";
      objectArray0[2] = (Object) "netware";
      objectArray0[3] = (Object) mockPrintStream0;
      Object object0 = new Object();
      objectArray0[4] = object0;
      objectArray0[5] = (Object) "^QfxE:<a! A@8q";
      objectArray0[6] = (Object) mockFile0;
      PrintStream printStream0 = mockPrintStream0.format("netware", objectArray0);
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(printStream0);
      zipArchiveOutputStream0.destroy();
      zipArchiveOutputStream0.createArchiveEntry(mockFile0, "netware");
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-41);
      byteArray0[1] = (byte)46;
      byteArray0[2] = (byte) (-52);
      byteArray0[3] = (byte)119;
      byteArray0[4] = (byte) (-24);
      byteArray0[5] = (byte) (-24);
      byteArray0[6] = (byte) (-41);
      byteArray0[7] = (byte)46;
      byteArray0[8] = (byte)102;
      // Undeclared exception!
//      try { 
        zipArchiveOutputStream0.write(byteArray0, 3592, (-2687));
//        fail("Expecting exception: IllegalStateException");
      
//      } catch(IllegalStateException e) {
//         //
//         // No current entry
//         //
//         verifyException("org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream", e);
//      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("bc}U~lp+m(;Z}v");
      FileChannel fileChannel0 = mockFileOutputStream0.getChannel();
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(fileChannel0);
      zipArchiveOutputStream0.getEncoding();
      ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry("bc}U~lp+m(;Z}v");
      ZipArchiveOutputStream zipArchiveOutputStream1 = new ZipArchiveOutputStream(mockFileOutputStream0);
      zipArchiveOutputStream0.putArchiveEntry(zipArchiveEntry0);
      zipArchiveOutputStream0.canWriteEntryData(zipArchiveEntry0);
      mockFileOutputStream0.close();
//      try { 
        zipArchiveOutputStream0.closeArchiveEntry();
//        fail("Expecting exception: ClosedChannelException");
      
//      } catch(ClosedChannelException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.evosuite.runtime.mock.java.io.EvoFileChannel", e);
//      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("bc}U~lp+m(;Z}v");
      FileChannel fileChannel0 = mockFileOutputStream0.getChannel();
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(fileChannel0);
      ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
      ZipArchiveOutputStream zipArchiveOutputStream1 = new ZipArchiveOutputStream(mockFileOutputStream0);
      zipArchiveOutputStream1.putArchiveEntry(zipArchiveEntry0);
      zipArchiveOutputStream1.writeCentralFileHeader(zipArchiveEntry0);
      zipArchiveOutputStream1.destroy();
//      try { 
        zipArchiveOutputStream1.writeLocalFileHeader(zipArchiveEntry0);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.evosuite.runtime.mock.java.io.MockFileOutputStream", e);
//      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("QVJ}J)L&G$*%'");
      mockFileOutputStream0.getChannel();
      ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry("T@4-[ifZ");
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(mockFileOutputStream0);
      zipArchiveOutputStream0.putArchiveEntry(zipArchiveEntry0);
      // Undeclared exception!
//      try { 
        zipArchiveOutputStream0.write((byte[]) null, (-1), 1932735283);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.util.zip.CRC32", e);
//      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("QVJ}J)L&G$*%'");
      mockFileOutputStream0.getChannel();
      ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry("T@4-[ifZ");
      ZipExtraField[] zipExtraFieldArray0 = new ZipExtraField[6];
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)100;
      byteArray0[1] = (byte) (-1);
      UnicodePathExtraField unicodePathExtraField0 = new UnicodePathExtraField("z}:R|FB3SF", byteArray0);
      zipExtraFieldArray0[0] = (ZipExtraField) unicodePathExtraField0;
      JarMarker jarMarker0 = JarMarker.getInstance();
      zipExtraFieldArray0[1] = (ZipExtraField) jarMarker0;
      ResourceAlignmentExtraField resourceAlignmentExtraField0 = new ResourceAlignmentExtraField();
      zipExtraFieldArray0[2] = (ZipExtraField) resourceAlignmentExtraField0;
      X000A_NTFS x000A_NTFS0 = new X000A_NTFS();
      zipExtraFieldArray0[3] = (ZipExtraField) x000A_NTFS0;
      JarMarker jarMarker1 = JarMarker.getInstance();
      zipExtraFieldArray0[4] = (ZipExtraField) jarMarker1;
      UnicodePathExtraField unicodePathExtraField1 = new UnicodePathExtraField("QVJ}J)L&G$*%'", byteArray0);
      zipExtraFieldArray0[5] = (ZipExtraField) unicodePathExtraField1;
      zipArchiveEntry0.setExtraFields(zipExtraFieldArray0);
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(mockFileOutputStream0);
      // Undeclared exception!
//      try { 
        zipArchiveOutputStream0.putArchiveEntry(zipArchiveEntry0);
//        fail("Expecting exception: NegativeArraySizeException");
      
//      } catch(NegativeArraySizeException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.compress.archivers.zip.ExtraFieldUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(byteArrayOutputStream0);
      ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry("");
      ZipArchiveOutputStream zipArchiveOutputStream1 = new ZipArchiveOutputStream(byteArrayOutputStream0);
      zipArchiveOutputStream0.putArchiveEntry(zipArchiveEntry0);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)4;
      byteArray0[1] = (byte) (-96);
      byteArray0[2] = (byte)94;
      byteArray0[3] = (byte)36;
      byteArray0[4] = (byte)9;
      byteArray0[5] = (byte)78;
      byteArray0[6] = (byte) (-6);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 3, 3);
      ZipArchiveOutputStream zipArchiveOutputStream2 = new ZipArchiveOutputStream(zipArchiveOutputStream0);
      zipArchiveOutputStream2.addRawArchiveEntry(zipArchiveEntry0, byteArrayInputStream0);
      assertEquals("PK\u0003\u0004\u0014\u0000\b\b\b\u0000\uFFFD\uFFFDND\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", byteArrayOutputStream0.toString());
      assertEquals(30, byteArrayOutputStream0.size());
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      FileChannel fileChannel0 = mockFileInputStream0.getChannel();
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(fileChannel0);
      // Undeclared exception!
//      try { 
        zipArchiveOutputStream0.close();
//        fail("Expecting exception: NonWritableChannelException");
      
//      } catch(NonWritableChannelException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.evosuite.runtime.mock.java.io.EvoFileChannel", e);
//      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(byteArrayOutputStream0);
      ZipArchiveOutputStream.UnicodeExtraFieldPolicy zipArchiveOutputStream_UnicodeExtraFieldPolicy0 = ZipArchiveOutputStream.UnicodeExtraFieldPolicy.ALWAYS;
      zipArchiveOutputStream0.setCreateUnicodeExtraFields(zipArchiveOutputStream_UnicodeExtraFieldPolicy0);
      JarArchiveEntry jarArchiveEntry0 = new JarArchiveEntry("jjxj(P(,u+2|");
      // Undeclared exception!
//      try { 
        zipArchiveOutputStream0.writeLocalFileHeader(jarArchiveEntry0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream$CurrentEntry", e);
//      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(byteArrayOutputStream0);
      zipArchiveOutputStream0.setUseLanguageEncodingFlag(false);
      ZipArchiveOutputStream.UnicodeExtraFieldPolicy zipArchiveOutputStream_UnicodeExtraFieldPolicy0 = ZipArchiveOutputStream.UnicodeExtraFieldPolicy.NOT_ENCODEABLE;
      zipArchiveOutputStream0.setCreateUnicodeExtraFields(zipArchiveOutputStream_UnicodeExtraFieldPolicy0);
      JarArchiveEntry jarArchiveEntry0 = new JarArchiveEntry("jjxj(P(,u+2|");
      // Undeclared exception!
//      try { 
        zipArchiveOutputStream0.writeLocalFileHeader(jarArchiveEntry0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream$CurrentEntry", e);
//      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("bc}U~lp+m(;Z}v");
      FileChannel fileChannel0 = mockFileOutputStream0.getChannel();
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(fileChannel0);
      zipArchiveOutputStream0.getEncoding();
      ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry("bc}U~lp+m(;Z}v");
      ZipArchiveOutputStream zipArchiveOutputStream1 = new ZipArchiveOutputStream(mockFileOutputStream0);
      zipArchiveOutputStream0.putArchiveEntry(zipArchiveEntry0);
      zipArchiveOutputStream0.deflate();
      mockFileOutputStream0.close();
      JarArchiveEntry jarArchiveEntry0 = new JarArchiveEntry(zipArchiveEntry0);
//      try { 
        zipArchiveOutputStream0.addRawArchiveEntry(jarArchiveEntry0, (InputStream) null);
//        fail("Expecting exception: ClosedChannelException");
      
//      } catch(ClosedChannelException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.evosuite.runtime.mock.java.io.EvoFileChannel", e);
//      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(byteArrayOutputStream0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-3);
      zipArchiveOutputStream0.writeOut(byteArray0, (byte)0, (byte)0);
      boolean boolean0 = zipArchiveOutputStream0.isSeekable();
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertFalse(boolean0);
      assertEquals(0, byteArrayOutputStream0.size());
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("bc}U~lp+m(;Z}v");
      FileChannel fileChannel0 = mockFileOutputStream0.getChannel();
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(fileChannel0);
      zipArchiveOutputStream0.getEncoding();
      ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry("bc}U~lp+m(;Z}v");
      ZipArchiveOutputStream zipArchiveOutputStream1 = new ZipArchiveOutputStream(mockFileOutputStream0);
      zipArchiveOutputStream0.putArchiveEntry(zipArchiveEntry0);
      byte[] byteArray0 = new byte[17];
      byteArray0[0] = (byte)82;
      byteArray0[1] = (byte)108;
      byteArray0[2] = (byte) (-9);
      byteArray0[3] = (byte) (-43);
      byteArray0[4] = (byte) (-13);
      byteArray0[5] = (byte) (-51);
      byteArray0[6] = (byte) (-52);
      byteArray0[7] = (byte)114;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte) (-52), (byte) (-51));
      zipArchiveOutputStream1.addRawArchiveEntry(zipArchiveEntry0, byteArrayInputStream0);
      ZipArchiveOutputStream zipArchiveOutputStream2 = new ZipArchiveOutputStream(zipArchiveOutputStream1);
      zipArchiveOutputStream2.writeZip64CentralDirectory();
      // Undeclared exception!
//      try { 
        zipArchiveOutputStream2.writeCentralFileHeader(zipArchiveEntry0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream$EntryMetaData", e);
//      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("bc}U~lp+m(;Z}v");
      FileChannel fileChannel0 = mockFileOutputStream0.getChannel();
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(fileChannel0);
      zipArchiveOutputStream0.getEncoding();
      JarArchiveEntry jarArchiveEntry0 = new JarArchiveEntry("UTF8");
      ZipArchiveOutputStream zipArchiveOutputStream1 = new ZipArchiveOutputStream(mockFileOutputStream0);
      zipArchiveOutputStream0.putArchiveEntry(jarArchiveEntry0);
      JarEntry jarEntry0 = new JarEntry("bc}U~lp+m(;Z}v");
      zipArchiveOutputStream0.closeArchiveEntry();
      ZipArchiveOutputStream zipArchiveOutputStream2 = new ZipArchiveOutputStream(zipArchiveOutputStream0);
      zipArchiveOutputStream0.writeCentralFileHeader(jarArchiveEntry0);
      zipArchiveOutputStream2.writeZip64CentralDirectory();
      // Undeclared exception!
//      try { 
        zipArchiveOutputStream1.setEncoding("");
//        fail("Expecting exception: IllegalCharsetNameException");
      
//      } catch(IllegalCharsetNameException e) {
//         //
//         // 
//         //
//         verifyException("java.nio.charset.Charset", e);
//      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("G1*|n.gGgP", false);
      FileChannel fileChannel0 = mockFileOutputStream0.getChannel();
      fileChannel0.position(559L);
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(fileChannel0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      zipArchiveOutputStream0.getEncoding();
      ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry("UTF8");
      ZipArchiveOutputStream zipArchiveOutputStream1 = new ZipArchiveOutputStream(mockFileOutputStream0);
      zipArchiveOutputStream0.putArchiveEntry(zipArchiveEntry0);
      JarEntry jarEntry0 = new JarEntry("LlsbX`");
      zipArchiveOutputStream0.writeZip64CentralDirectory();
      JarArchiveEntry jarArchiveEntry0 = new JarArchiveEntry(zipArchiveEntry0);
      mockFileOutputStream0.close();
      zipArchiveOutputStream1.setLevel(3);
//      try { 
        zipArchiveOutputStream0.writeZip64CentralDirectory();
//        fail("Expecting exception: ClosedChannelException");
      
//      } catch(ClosedChannelException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.evosuite.runtime.mock.java.io.EvoFileChannel", e);
//      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(byteArrayOutputStream0);
      JarArchiveEntry jarArchiveEntry0 = new JarArchiveEntry("Invalid compression level: ");
      jarArchiveEntry0.setMethod(2216);
      // Undeclared exception!
//      try { 
        zipArchiveOutputStream0.writeLocalFileHeader(jarArchiveEntry0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream$CurrentEntry", e);
//      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      String string0 = "bc}U~lp+m(;Z}v";
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("bc}U~lp+m(;Z}v");
      FileChannel fileChannel0 = mockFileOutputStream0.getChannel();
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(fileChannel0);
      zipArchiveOutputStream0.getEncoding();
      JarArchiveEntry jarArchiveEntry0 = new JarArchiveEntry("UTF8");
      ZipArchiveOutputStream zipArchiveOutputStream1 = new ZipArchiveOutputStream(mockFileOutputStream0);
      zipArchiveOutputStream0.putArchiveEntry(jarArchiveEntry0);
      String string1 = "";
      JarEntry jarEntry0 = new JarEntry("");
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-107);
      byteArray0[1] = (byte)13;
      byte[] byteArray1 = new byte[6];
      byteArray1[0] = (byte)13;
      byteArray1[1] = (byte) (-107);
      byteArray1[2] = (byte)104;
      byteArray1[3] = (byte)78;
      byteArray1[4] = (byte)78;
      byteArray1[5] = (byte)78;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray1, (-1892), 2217);
      // Undeclared exception!
//      try { 
        zipArchiveOutputStream1.addRawArchiveEntry(jarArchiveEntry0, byteArrayInputStream0);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.io.ByteArrayInputStream", e);
//      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      ZipArchiveOutputStream.UnicodeExtraFieldPolicy zipArchiveOutputStream_UnicodeExtraFieldPolicy0 = ZipArchiveOutputStream.UnicodeExtraFieldPolicy.NEVER;
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("QVJ}J)L&G$*%'");
      ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry("$`cp437");
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(mockFileOutputStream0);
      zipArchiveOutputStream0.putArchiveEntry(zipArchiveEntry0);
      byte[] byteArray0 = zipArchiveEntry0.getLocalFileDataExtra();
      FileSystemHandling.shouldAllThrowIOExceptions();
      JarEntry jarEntry0 = new JarEntry("5t?5Ds>d");
      ZipArchiveOutputStream zipArchiveOutputStream1 = new ZipArchiveOutputStream(zipArchiveOutputStream0);
      zipArchiveOutputStream0.write(byteArray0);
//      try { 
        zipArchiveOutputStream0.writeCentralFileHeader(zipArchiveEntry0);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Simulated IOException
//         //
//         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
//      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("bc}U~lp+m(;Z}v");
      FileChannel fileChannel0 = mockFileOutputStream0.getChannel();
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(fileChannel0);
      zipArchiveOutputStream0.getEncoding();
      JarArchiveEntry jarArchiveEntry0 = new JarArchiveEntry("UTF8");
      ZipArchiveOutputStream zipArchiveOutputStream1 = new ZipArchiveOutputStream(mockFileOutputStream0);
      zipArchiveOutputStream0.putArchiveEntry(jarArchiveEntry0);
      JarEntry jarEntry0 = new JarEntry("");
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-107);
      byteArray0[1] = (byte)13;
      byteArray0[2] = (byte)78;
      byteArray0[3] = (byte)12;
      byteArray0[4] = (byte)38;
      mockFileOutputStream0.write(byteArray0);
      ZipArchiveOutputStream zipArchiveOutputStream2 = new ZipArchiveOutputStream(zipArchiveOutputStream0);
      zipArchiveOutputStream0.writeCentralFileHeader(jarArchiveEntry0);
      assertEquals(113L, fileChannel0.position());
      assertEquals(8, jarArchiveEntry0.getMethod());
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      ZipArchiveOutputStream.UnicodeExtraFieldPolicy zipArchiveOutputStream_UnicodeExtraFieldPolicy0 = ZipArchiveOutputStream.UnicodeExtraFieldPolicy.NEVER;
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("QVJ}J)L&G$*%'");
      ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry("$`cp437");
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(mockFileOutputStream0);
      zipArchiveOutputStream0.putArchiveEntry(zipArchiveEntry0);
      zipArchiveOutputStream0.canWriteEntryData(zipArchiveEntry0);
      mockFileOutputStream0.release();
      zipArchiveOutputStream0.destroy();
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)103;
      byteArray0[1] = (byte)122;
      byteArray0[2] = (byte)32;
      byteArray0[3] = (byte)32;
      byteArray0[4] = (byte)46;
      // Undeclared exception!
//      try { 
        zipArchiveOutputStream0.write(byteArray0, (int) (byte)122, 3);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.util.zip.CRC32", e);
//      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream((OutputStream) null);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("bc}U~lp+m(;Z}v");
      FileChannel fileChannel0 = mockFileOutputStream0.getChannel();
      fileChannel0.position((long) 8);
      ZipArchiveOutputStream zipArchiveOutputStream1 = new ZipArchiveOutputStream(fileChannel0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      zipArchiveOutputStream1.getEncoding();
      ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry("bc}U~lp+m(;Z}v");
      ZipArchiveOutputStream zipArchiveOutputStream2 = new ZipArchiveOutputStream(mockFileOutputStream0);
      zipArchiveOutputStream1.putArchiveEntry(zipArchiveEntry0);
      JarEntry jarEntry0 = new JarEntry("LlsbX`");
      JarArchiveEntry jarArchiveEntry0 = new JarArchiveEntry(zipArchiveEntry0);
      mockFileOutputStream0.close();
      zipArchiveOutputStream0.setLevel(3);
//      try { 
        zipArchiveOutputStream1.writeZip64CentralDirectory();
//        fail("Expecting exception: ClosedChannelException");
      
//      } catch(ClosedChannelException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.evosuite.runtime.mock.java.io.EvoFileChannel", e);
//      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      ZipArchiveOutputStream.UnicodeExtraFieldPolicy zipArchiveOutputStream_UnicodeExtraFieldPolicy0 = ZipArchiveOutputStream.UnicodeExtraFieldPolicy.ALWAYS;
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("QVJ}J)L&G$*%'");
      mockFileOutputStream0.getChannel();
      ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry("$`cp437");
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(mockFileOutputStream0);
      zipArchiveOutputStream0.putArchiveEntry(zipArchiveEntry0);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)30;
      byteArray0[1] = (byte) (-34);
      byteArray0[0] = (byte)30;
      byteArray0[3] = (byte) (-34);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (-1), (-1));
      zipArchiveOutputStream0.addRawArchiveEntry(zipArchiveEntry0, byteArrayInputStream0);
      zipArchiveOutputStream0.writeZip64CentralDirectory();
      zipArchiveOutputStream0.writeCentralFileHeader(zipArchiveEntry0);
      assertEquals(2L, zipArchiveEntry0.getCompressedSize());
      assertEquals(0L, zipArchiveEntry0.getCrc());
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream((OutputStream) null);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("bc}U~lp+m(;Z}v");
      FileChannel fileChannel0 = mockFileOutputStream0.getChannel();
      fileChannel0.position((long) 8);
      ZipArchiveOutputStream zipArchiveOutputStream1 = new ZipArchiveOutputStream(fileChannel0);
      zipArchiveOutputStream1.getEncoding();
      JarArchiveEntry jarArchiveEntry0 = new JarArchiveEntry("UTF8");
      zipArchiveOutputStream0.destroy();
      ZipArchiveOutputStream zipArchiveOutputStream2 = new ZipArchiveOutputStream(mockFileOutputStream0);
      zipArchiveOutputStream1.putArchiveEntry(jarArchiveEntry0);
      JarEntry jarEntry0 = new JarEntry("LlsbX`");
      ZipArchiveOutputStream zipArchiveOutputStream3 = new ZipArchiveOutputStream(zipArchiveOutputStream2);
      // Undeclared exception!
//      try { 
        zipArchiveOutputStream2.writeCentralFileHeader(jarArchiveEntry0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream$EntryMetaData", e);
//      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(byteArrayOutputStream0);
      zipArchiveOutputStream0.deflate();
      zipArchiveOutputStream0.setUseLanguageEncodingFlag(false);
      JarArchiveEntry jarArchiveEntry0 = new JarArchiveEntry("jjxj(P(,u+2|");
      ZipArchiveOutputStream zipArchiveOutputStream1 = new ZipArchiveOutputStream(byteArrayOutputStream0);
      zipArchiveOutputStream0.putArchiveEntry(jarArchiveEntry0);
      zipArchiveOutputStream0.canWriteEntryData(jarArchiveEntry0);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-35);
      byteArray0[1] = (byte)109;
      byteArray0[2] = (byte) (-31);
      byteArray0[3] = (byte)30;
      byteArray0[4] = (byte) (-34);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 8, (byte)109);
      zipArchiveOutputStream0.addRawArchiveEntry(jarArchiveEntry0, byteArrayInputStream0);
      zipArchiveOutputStream0.writeZip64CentralDirectory();
      assertEquals("PK\u0003\u0004\u0014\u0000\b\u0000\b\u0000\uFFFD\uFFFDND\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\f\u0000\u0000\u0000jjxj(P(,u+2|\u0003\u0000PK\u0007\b\u0000\u0000\u0000\u0000\u0002\u0000\u0000\u0000\u0000\u0000\u0000\u0000PK\u0003\u0004\u0014\u0000\b\u0000\b\u0000\uFFFD\uFFFDND\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\f\u0000\u0000\u0000jjxj(P(,u+2|PK\u0007\b\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD", byteArrayOutputStream0.toString());
      assertEquals(118, byteArrayOutputStream0.size());
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream((OutputStream) null);
      String string0 = "bc}U~lp+m(;Z}v";
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("bc}U~lp+m(;Z}v");
      FileChannel fileChannel0 = mockFileOutputStream0.getChannel();
      fileChannel0.position((long) 8);
      ZipArchiveOutputStream zipArchiveOutputStream1 = new ZipArchiveOutputStream(fileChannel0);
      JarArchiveEntry jarArchiveEntry0 = new JarArchiveEntry(":6i'H9|#qwd8");
      zipArchiveOutputStream1.canWriteEntryData(jarArchiveEntry0);
      ZipArchiveOutputStream zipArchiveOutputStream2 = new ZipArchiveOutputStream(zipArchiveOutputStream1);
      zipArchiveOutputStream2.destroy();
//      try { 
        zipArchiveOutputStream1.writeCentralDirectoryEnd();
//        fail("Expecting exception: ClosedChannelException");
      
//      } catch(ClosedChannelException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.evosuite.runtime.mock.java.io.EvoFileChannel", e);
//      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(byteArrayOutputStream0);
      zipArchiveOutputStream0.writeCentralDirectoryEnd();
      zipArchiveOutputStream0.close();
      CpioArchiveEntry cpioArchiveEntry0 = new CpioArchiveEntry(":Z");
      zipArchiveOutputStream0.destroy();
      ZipArchiveEntry zipArchiveEntry0 = null;
//      try {
        zipArchiveEntry0 = new ZipArchiveEntry((ZipEntry) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // entry
//         //
//         verifyException("java.util.Objects", e);
//      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream((OutputStream) null);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("bc}U~lp+m(;Z}v");
      FileChannel fileChannel0 = mockFileOutputStream0.getChannel();
      fileChannel0.position((long) 2048);
      ZipArchiveOutputStream zipArchiveOutputStream1 = new ZipArchiveOutputStream(fileChannel0);
      ZipArchiveOutputStream zipArchiveOutputStream2 = new ZipArchiveOutputStream(mockFileOutputStream0);
      zipArchiveOutputStream2.getEncoding();
      ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry("UTF8");
      ZipArchiveOutputStream zipArchiveOutputStream3 = new ZipArchiveOutputStream(zipArchiveOutputStream2);
      zipArchiveOutputStream1.putArchiveEntry(zipArchiveEntry0);
      JarEntry jarEntry0 = new JarEntry("LlsbX`");
      JarArchiveEntry jarArchiveEntry0 = new JarArchiveEntry(zipArchiveEntry0);
      // Undeclared exception!
//      try { 
        zipArchiveOutputStream3.addRawArchiveEntry(zipArchiveEntry0, (InputStream) null);
//        fail("Expecting exception: IllegalStateException");
      
//      } catch(IllegalStateException e) {
//         //
//         // No current entry
//         //
//         verifyException("org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream", e);
//      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream((OutputStream) null);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("bc}U~lp+m(;Z}v");
      FileChannel fileChannel0 = mockFileOutputStream0.getChannel();
      FileChannel fileChannel1 = fileChannel0.position((long) 8);
      ZipArchiveOutputStream zipArchiveOutputStream1 = new ZipArchiveOutputStream(fileChannel0);
      zipArchiveOutputStream1.getEncoding();
      ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry("bc}U~lp+m(;Z}v");
      zipArchiveOutputStream0.destroy();
      ZipArchiveOutputStream zipArchiveOutputStream2 = new ZipArchiveOutputStream(mockFileOutputStream0);
      zipArchiveOutputStream1.putArchiveEntry(zipArchiveEntry0);
      zipArchiveOutputStream2.canWriteEntryData(zipArchiveEntry0);
      ZipArchiveOutputStream zipArchiveOutputStream3 = new ZipArchiveOutputStream(fileChannel1);
      zipArchiveOutputStream3.flush();
      assertEquals(72L, fileChannel1.size());
      assertEquals(72L, fileChannel0.position());
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      ZipArchiveOutputStream.UnicodeExtraFieldPolicy zipArchiveOutputStream_UnicodeExtraFieldPolicy0 = ZipArchiveOutputStream.UnicodeExtraFieldPolicy.NEVER;
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("QVJ}J)L&G$*%'");
      mockFileOutputStream0.getChannel();
      ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry("$`cp437");
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(mockFileOutputStream0);
      zipArchiveOutputStream0.putArchiveEntry(zipArchiveEntry0);
      zipArchiveOutputStream0.canWriteEntryData(zipArchiveEntry0);
      JarArchiveEntry jarArchiveEntry0 = new JarArchiveEntry(zipArchiveEntry0);
      zipArchiveOutputStream0.writeLocalFileHeader(jarArchiveEntry0);
//      try { 
        zipArchiveOutputStream0.finish();
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // This archive contains unclosed entries.
//         //
//         verifyException("org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream", e);
//      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(byteArrayOutputStream0);
      zipArchiveOutputStream0.deflate();
      zipArchiveOutputStream0.setUseLanguageEncodingFlag(false);
      ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry("No current entry");
      // Undeclared exception!
//      try { 
        zipArchiveOutputStream0.addRawArchiveEntry(zipArchiveEntry0, (InputStream) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // ZIP compression method can not be negative: -1
//         //
//         verifyException("org.apache.commons.compress.archivers.zip.ZipArchiveEntry", e);
//      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream((OutputStream) null);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("bc}U~lp+m(;Z}v");
      FileChannel fileChannel0 = mockFileOutputStream0.getChannel();
      fileChannel0.position((long) 8);
      ZipArchiveOutputStream zipArchiveOutputStream1 = new ZipArchiveOutputStream(fileChannel0);
      zipArchiveOutputStream1.getEncoding();
      ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry("bc}U~lp+m(;Z}v");
      zipArchiveOutputStream0.destroy();
      ZipArchiveOutputStream zipArchiveOutputStream2 = new ZipArchiveOutputStream(mockFileOutputStream0);
      zipArchiveOutputStream1.putArchiveEntry(zipArchiveEntry0);
      JarEntry jarEntry0 = new JarEntry("LlsbX`");
      JarArchiveEntry jarArchiveEntry0 = new JarArchiveEntry(zipArchiveEntry0);
      // Undeclared exception!
//      try { 
        zipArchiveOutputStream1.addRawArchiveEntry(jarArchiveEntry0, (InputStream) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      ZipArchiveOutputStream.UnicodeExtraFieldPolicy zipArchiveOutputStream_UnicodeExtraFieldPolicy0 = ZipArchiveOutputStream.UnicodeExtraFieldPolicy.NEVER;
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("QVJ}J)L&G$*%'");
      mockFileOutputStream0.getChannel();
      ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry("$`cp437");
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(mockFileOutputStream0);
      zipArchiveOutputStream0.putArchiveEntry(zipArchiveEntry0);
      zipArchiveOutputStream0.canWriteEntryData(zipArchiveEntry0);
      // Undeclared exception!
//      try { 
        zipArchiveOutputStream0.addRawArchiveEntry(zipArchiveEntry0, (InputStream) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream((OutputStream) null);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("bc}U~lp+m(;Z}v");
      FileChannel fileChannel0 = mockFileOutputStream0.getChannel();
      fileChannel0.position((long) 8);
      ZipArchiveOutputStream zipArchiveOutputStream1 = new ZipArchiveOutputStream(fileChannel0);
      zipArchiveOutputStream1.getEncoding();
      ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry("bc}U~lp+m(;Z}v");
      zipArchiveOutputStream0.destroy();
      zipArchiveOutputStream1.finish();
      zipArchiveOutputStream0.setLevel(8);
      CpioArchiveEntry cpioArchiveEntry0 = new CpioArchiveEntry("");
      FilterOutputStream filterOutputStream0 = new FilterOutputStream(zipArchiveOutputStream0);
      ZipArchiveOutputStream zipArchiveOutputStream2 = new ZipArchiveOutputStream(filterOutputStream0);
      ZipArchiveOutputStream zipArchiveOutputStream3 = new ZipArchiveOutputStream(zipArchiveOutputStream1);
      zipArchiveOutputStream3.destroy();
      assertEquals("UTF8", zipArchiveOutputStream3.getEncoding());
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("/s/O>iym0:/bE4{");
      FileChannel fileChannel0 = mockFileOutputStream0.getChannel();
      fileChannel0.position((long) 2497);
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(fileChannel0);
      zipArchiveOutputStream0.getEncoding();
      ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry("org.apache.commons.compress.archivers.cpio.CpioArchiveEntry");
      zipArchiveOutputStream0.destroy();
      ZipArchiveOutputStream zipArchiveOutputStream1 = new ZipArchiveOutputStream(zipArchiveOutputStream0);
      ZipArchiveOutputStream zipArchiveOutputStream2 = new ZipArchiveOutputStream(fileChannel0);
//      try { 
        zipArchiveOutputStream2.putArchiveEntry(zipArchiveEntry0);
//        fail("Expecting exception: ClosedChannelException");
      
//      } catch(ClosedChannelException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.evosuite.runtime.mock.java.io.EvoFileChannel", e);
//      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      ZipArchiveOutputStream.UnicodeExtraFieldPolicy zipArchiveOutputStream_UnicodeExtraFieldPolicy0 = ZipArchiveOutputStream.UnicodeExtraFieldPolicy.NEVER;
      zipArchiveOutputStream_UnicodeExtraFieldPolicy0.toString();
      MockFile mockFile0 = new MockFile("never");
      MockFile mockFile1 = new MockFile("never", "never");
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(mockFile0);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("uncompressed size is required for STORED method when not writing to a file");
      MockFileOutputStream mockFileOutputStream1 = new MockFileOutputStream("never", true);
      FileChannel fileChannel0 = mockFileOutputStream1.getChannel();
      fileChannel0.position(2131L);
      ZipArchiveOutputStream zipArchiveOutputStream1 = new ZipArchiveOutputStream(fileChannel0);
      zipArchiveOutputStream0.getEncoding();
      ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry("QVJ}J)L&G$*%'");
      zipArchiveOutputStream0.destroy();
      ZipArchiveOutputStream zipArchiveOutputStream2 = new ZipArchiveOutputStream(zipArchiveOutputStream0);
      zipArchiveOutputStream1.putArchiveEntry(zipArchiveEntry0);
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream((InputStream) null);
//      try { 
        zipArchiveOutputStream0.addRawArchiveEntry(zipArchiveEntry0, pushbackInputStream0);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.evosuite.runtime.mock.java.io.MockFileOutputStream", e);
//      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream((OutputStream) null);
      zipArchiveOutputStream0.finished = true;
      JarArchiveEntry jarArchiveEntry0 = new JarArchiveEntry("G2;9G|qY:nqT%AUCT");
      zipArchiveOutputStream0.setLevel((-1));
      JarArchiveEntry jarArchiveEntry1 = new JarArchiveEntry("G2;9G|qY:nqT%AUCT");
      zipArchiveOutputStream0.setUseLanguageEncodingFlag(false);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)2;
      byteArray0[1] = (byte) (-90);
      byteArray0[2] = (byte)2;
      byteArray0[3] = (byte) (-1);
//      try { 
        zipArchiveOutputStream0.putArchiveEntry(jarArchiveEntry0);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Stream has already been finished
//         //
//         verifyException("org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream", e);
//      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream((OutputStream) null);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("bc}U~lp+m(;Z}v");
      FileChannel fileChannel0 = mockFileOutputStream0.getChannel();
      fileChannel0.position((long) 8);
      ZipArchiveOutputStream zipArchiveOutputStream1 = new ZipArchiveOutputStream(fileChannel0);
      zipArchiveOutputStream1.getEncoding();
      ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry("bc}U~lp+m(;Z}v");
      zipArchiveOutputStream0.destroy();
      ZipArchiveOutputStream zipArchiveOutputStream2 = new ZipArchiveOutputStream(mockFileOutputStream0);
      zipArchiveOutputStream1.putArchiveEntry(zipArchiveEntry0);
      InputStream inputStream0 = null;
      JarEntry jarEntry0 = new JarEntry("LlsbX`");
      JarArchiveEntry jarArchiveEntry0 = null;
//      try {
        jarArchiveEntry0 = new JarArchiveEntry(jarEntry0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // ZIP compression method can not be negative: -1
//         //
//         verifyException("org.apache.commons.compress.archivers.zip.ZipArchiveEntry", e);
//      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      ZipArchiveOutputStream.UnicodeExtraFieldPolicy zipArchiveOutputStream_UnicodeExtraFieldPolicy0 = ZipArchiveOutputStream.UnicodeExtraFieldPolicy.NEVER;
      zipArchiveOutputStream_UnicodeExtraFieldPolicy0.toString();
      MockFile mockFile0 = new MockFile("never");
      MockFile mockFile1 = new MockFile("never", "never");
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(mockFile0);
      JarArchiveEntry jarArchiveEntry0 = new JarArchiveEntry("org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream$CurrentEntry");
      ZipArchiveOutputStream zipArchiveOutputStream1 = new ZipArchiveOutputStream(zipArchiveOutputStream0);
      ZipArchiveOutputStream zipArchiveOutputStream2 = new ZipArchiveOutputStream(zipArchiveOutputStream1);
      // Undeclared exception!
//      try { 
        zipArchiveOutputStream2.destroy();
//        fail("Expecting exception: IllegalStateException");
      
//      } catch(IllegalStateException e) {
//         //
//         // No current entry
//         //
//         verifyException("org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream", e);
//      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(byteArrayOutputStream0);
      JarArchiveEntry jarArchiveEntry0 = new JarArchiveEntry("AES3192");
      byteArrayOutputStream0.write((-1646));
      ResourceAlignmentExtraField resourceAlignmentExtraField0 = new ResourceAlignmentExtraField();
      jarArchiveEntry0.addExtraField(resourceAlignmentExtraField0);
      zipArchiveOutputStream0.writeDataDescriptor(jarArchiveEntry0);
      jarArchiveEntry0.setTime(2);
      ZipArchiveOutputStream zipArchiveOutputStream1 = new ZipArchiveOutputStream(zipArchiveOutputStream0);
      // Undeclared exception!
//      try { 
        zipArchiveOutputStream0.putArchiveEntry(jarArchiveEntry0);
//        fail("Expecting exception: NegativeArraySizeException");
      
//      } catch(NegativeArraySizeException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.compress.archivers.zip.ExtraFieldUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream((OutputStream) null);
      ZipArchiveOutputStream zipArchiveOutputStream1 = new ZipArchiveOutputStream(zipArchiveOutputStream0);
      zipArchiveOutputStream1.setEncoding("oi0V2yP");
      zipArchiveOutputStream0.destroy();
      // Undeclared exception!
//      try { 
        zipArchiveOutputStream0.close();
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      ZipArchiveOutputStream.UnicodeExtraFieldPolicy zipArchiveOutputStream_UnicodeExtraFieldPolicy0 = ZipArchiveOutputStream.UnicodeExtraFieldPolicy.ALWAYS;
      String string0 = ZipArchiveOutputStream.DEFAULT_ENCODING;
      MockFile mockFile0 = new MockFile("UTF8", "UTF8");
      MockFile mockFile1 = new MockFile(mockFile0, "UTF8");
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(mockFile1);
      zipArchiveOutputStream0.setEncoding("UTF8");
      CpioArchiveEntry cpioArchiveEntry0 = new CpioArchiveEntry("UTF8");
      ZipArchiveOutputStream zipArchiveOutputStream1 = new ZipArchiveOutputStream(zipArchiveOutputStream0);
      assertEquals("UTF8", zipArchiveOutputStream1.getEncoding());
      
      ZipArchiveOutputStream zipArchiveOutputStream2 = new ZipArchiveOutputStream(mockFile1);
      zipArchiveOutputStream2.destroy();
      assertEquals("UTF8", zipArchiveOutputStream2.getEncoding());
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream((OutputStream) null);
      JarArchiveEntry jarArchiveEntry0 = new JarArchiveEntry("G2;9G|qY:nqT%AUCT");
      ZipArchiveOutputStream zipArchiveOutputStream1 = new ZipArchiveOutputStream(zipArchiveOutputStream0);
      // Undeclared exception!
//      try { 
        zipArchiveOutputStream1.destroy();
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      ByteArrayOutputStream byteArrayOutputStream1 = new ByteArrayOutputStream(1);
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(byteArrayOutputStream0);
      zipArchiveOutputStream0.setLevel(1);
      JarArchiveEntry jarArchiveEntry0 = new JarArchiveEntry("=Emo7");
      ZipArchiveOutputStream zipArchiveOutputStream1 = new ZipArchiveOutputStream(zipArchiveOutputStream0);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("V-j|)k>JS9h6U7e//", false);
      FileChannel fileChannel0 = mockFileOutputStream0.getChannel();
      ZipArchiveOutputStream zipArchiveOutputStream2 = new ZipArchiveOutputStream(fileChannel0);
      // Undeclared exception!
//      try { 
        zipArchiveOutputStream2.writeLocalFileHeader(jarArchiveEntry0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream$CurrentEntry", e);
//      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream((OutputStream) null);
      String string0 = "G2;9G|qY:nqT%AUCT";
      JarArchiveEntry jarArchiveEntry0 = new JarArchiveEntry("G2;9G|qY:nqT%AUCT");
      zipArchiveOutputStream0.setLevel((-1));
      ZipArchiveOutputStream zipArchiveOutputStream1 = new ZipArchiveOutputStream(zipArchiveOutputStream0);
      // Undeclared exception!
//      try { 
        zipArchiveOutputStream1.finish();
//        fail("Expecting exception: IllegalStateException");
      
//      } catch(IllegalStateException e) {
//         //
//         // No current entry
//         //
//         verifyException("org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream", e);
//      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(byteArrayOutputStream0);
      zipArchiveOutputStream0.deflate();
      ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry("UTF8");
      zipArchiveOutputStream0.destroy();
      zipArchiveOutputStream0.putArchiveEntry(zipArchiveEntry0);
//      try { 
        zipArchiveOutputStream0.finish();
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // This archive contains unclosed entries.
//         //
//         verifyException("org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream", e);
//      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(166);
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(byteArrayOutputStream0);
      zipArchiveOutputStream0.finished = true;
      zipArchiveOutputStream0.canWriteEntryData((ArchiveEntry) null);
      zipArchiveOutputStream0.flush();
//      try { 
        zipArchiveOutputStream0.finish();
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // This archive has already been finished
//         //
//         verifyException("org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream", e);
//      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      ZipArchiveOutputStream.UnicodeExtraFieldPolicy zipArchiveOutputStream_UnicodeExtraFieldPolicy0 = ZipArchiveOutputStream.UnicodeExtraFieldPolicy.NEVER;
      zipArchiveOutputStream_UnicodeExtraFieldPolicy0.toString();
      MockFile mockFile0 = new MockFile("never");
      MockFile mockFile1 = new MockFile("never", "never");
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(mockFile0);
      zipArchiveOutputStream0.setEncoding("never");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("QVJ}J)L&G$*%'");
      FileChannel fileChannel0 = mockFileOutputStream0.getChannel();
      FileChannel fileChannel1 = fileChannel0.position((long) 8);
      FileChannel fileChannel2 = fileChannel1.truncate(1392409281320L);
      ZipArchiveOutputStream zipArchiveOutputStream1 = new ZipArchiveOutputStream(fileChannel2);
      zipArchiveOutputStream1.getEncoding();
      ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry("eQT#pT%^W0V");
      zipArchiveOutputStream0.destroy();
      ZipArchiveOutputStream zipArchiveOutputStream2 = new ZipArchiveOutputStream(mockFileOutputStream0);
      zipArchiveOutputStream2.putArchiveEntry(zipArchiveEntry0);
      // Undeclared exception!
//      try { 
        zipArchiveOutputStream2.addRawArchiveEntry(zipArchiveEntry0, (InputStream) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      ZipArchiveOutputStream.UnicodeExtraFieldPolicy zipArchiveOutputStream_UnicodeExtraFieldPolicy0 = ZipArchiveOutputStream.UnicodeExtraFieldPolicy.ALWAYS;
      zipArchiveOutputStream_UnicodeExtraFieldPolicy0.toString();
      MockFile mockFile0 = new MockFile("always");
      MockFile mockFile1 = new MockFile("always", "always");
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(mockFile1);
      zipArchiveOutputStream0.setEncoding((String) null);
      zipArchiveOutputStream0.getEncoding();
      ZipArchiveEntry zipArchiveEntry0 = (ZipArchiveEntry)zipArchiveOutputStream0.createArchiveEntry(mockFile1, "Alignment must be between 0 and 0x7fff, was: ");
      ZipExtraField[] zipExtraFieldArray0 = new ZipExtraField[4];
      X0014_X509Certificates x0014_X509Certificates0 = new X0014_X509Certificates();
      zipExtraFieldArray0[0] = (ZipExtraField) x0014_X509Certificates0;
      UnicodePathExtraField unicodePathExtraField0 = new UnicodePathExtraField();
      zipExtraFieldArray0[1] = (ZipExtraField) unicodePathExtraField0;
      ResourceAlignmentExtraField resourceAlignmentExtraField0 = new ResourceAlignmentExtraField(3, true, 8);
      zipExtraFieldArray0[2] = (ZipExtraField) resourceAlignmentExtraField0;
      UnparseableExtraFieldData unparseableExtraFieldData0 = new UnparseableExtraFieldData();
      zipExtraFieldArray0[3] = (ZipExtraField) unparseableExtraFieldData0;
      zipArchiveEntry0.setExtraFields(zipExtraFieldArray0);
      zipArchiveOutputStream0.destroy();
      ZipArchiveOutputStream zipArchiveOutputStream1 = new ZipArchiveOutputStream(zipArchiveOutputStream0);
      // Undeclared exception!
//      try { 
        zipArchiveOutputStream1.putArchiveEntry(zipArchiveEntry0);
//        fail("Expecting exception: IllegalStateException");
      
//      } catch(IllegalStateException e) {
//         //
//         // No current entry
//         //
//         verifyException("org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream", e);
//      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      ByteArrayOutputStream byteArrayOutputStream1 = new ByteArrayOutputStream(1);
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(byteArrayOutputStream0);
      zipArchiveOutputStream0.deflate();
      zipArchiveOutputStream0.setUseLanguageEncodingFlag(true);
      // Undeclared exception!
//      try { 
        zipArchiveOutputStream0.writeOut((byte[]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream", e);
//      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      ZipArchiveOutputStream.UnicodeExtraFieldPolicy zipArchiveOutputStream_UnicodeExtraFieldPolicy0 = ZipArchiveOutputStream.UnicodeExtraFieldPolicy.ALWAYS;
      zipArchiveOutputStream_UnicodeExtraFieldPolicy0.toString();
      MockFile mockFile0 = new MockFile("always");
      MockFile mockFile1 = new MockFile("always", "always");
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(mockFile1);
      zipArchiveOutputStream0.setEncoding((String) null);
      zipArchiveOutputStream0.getEncoding();
      ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry("always");
      zipArchiveOutputStream0.destroy();
      ZipArchiveOutputStream zipArchiveOutputStream1 = new ZipArchiveOutputStream(zipArchiveOutputStream0);
      // Undeclared exception!
//      try { 
        zipArchiveOutputStream1.putArchiveEntry(zipArchiveEntry0);
//        fail("Expecting exception: IllegalStateException");
      
//      } catch(IllegalStateException e) {
//         //
//         // No current entry
//         //
//         verifyException("org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream", e);
//      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      ZipArchiveOutputStream.UnicodeExtraFieldPolicy zipArchiveOutputStream_UnicodeExtraFieldPolicy0 = ZipArchiveOutputStream.UnicodeExtraFieldPolicy.ALWAYS;
      zipArchiveOutputStream_UnicodeExtraFieldPolicy0.toString();
      MockFile mockFile0 = new MockFile("always");
      MockFile mockFile1 = new MockFile("always", "always");
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(mockFile1);
      zipArchiveOutputStream0.setEncoding((String) null);
      zipArchiveOutputStream0.getEncoding();
      ArchiveEntry archiveEntry0 = zipArchiveOutputStream0.createArchiveEntry(mockFile1, "Alignment must be between 0 and 0x7fff, was: ");
      zipArchiveOutputStream0.destroy();
      ZipArchiveOutputStream zipArchiveOutputStream1 = new ZipArchiveOutputStream(zipArchiveOutputStream0);
      // Undeclared exception!
//      try { 
        zipArchiveOutputStream1.putArchiveEntry(archiveEntry0);
//        fail("Expecting exception: IllegalStateException");
      
//      } catch(IllegalStateException e) {
//         //
//         // No current entry
//         //
//         verifyException("org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream", e);
//      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      String string0 = "1TX,!C9#2:`LQ,G";
      MockFile mockFile0 = new MockFile("1TX,!C9#2:`LQ,G", "1TX,!C9#2:`LQ,G");
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(mockFile0);
      zipArchiveOutputStream0.isSeekable();
      byte[] byteArray0 = new byte[4];
      zipArchiveOutputStream0.setLevel(6);
      zipArchiveOutputStream0.writeOut(byteArray0);
      ZipArchiveOutputStream zipArchiveOutputStream1 = new ZipArchiveOutputStream(zipArchiveOutputStream0);
      // Undeclared exception!
//      try { 
        zipArchiveOutputStream1.close();
//        fail("Expecting exception: IllegalStateException");
      
//      } catch(IllegalStateException e) {
//         //
//         // No current entry
//         //
//         verifyException("org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream", e);
//      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      int int0 = 1;
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(byteArrayOutputStream0);
      zipArchiveOutputStream0.finish();
      // Undeclared exception!
//      try { 
        zipArchiveOutputStream0.deflate();
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // Deflater has been closed
//         //
//         verifyException("java.util.zip.Deflater", e);
//      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      ZipArchiveOutputStream.UnicodeExtraFieldPolicy zipArchiveOutputStream_UnicodeExtraFieldPolicy0 = ZipArchiveOutputStream.UnicodeExtraFieldPolicy.ALWAYS;
      String string0 = ZipArchiveOutputStream.DEFAULT_ENCODING;
      MockFile mockFile0 = new MockFile("UTF8", "UTF8");
      MockFile mockFile1 = new MockFile(mockFile0, "UTF8");
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(mockFile1);
      zipArchiveOutputStream0.deflate();
      zipArchiveOutputStream0.setEncoding((String) null);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-2);
      zipArchiveOutputStream0.setEncoding("UTF8");
      zipArchiveOutputStream0.getEncoding();
      ArchiveEntry archiveEntry0 = zipArchiveOutputStream0.createArchiveEntry(mockFile1, "UTF8");
      zipArchiveOutputStream0.destroy();
//      try { 
        zipArchiveOutputStream0.putArchiveEntry(archiveEntry0);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.evosuite.runtime.mock.java.io.MockFileOutputStream", e);
//      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      String string0 = "gn#Z]qF@5Q#1;OHE";
      MockFile mockFile0 = new MockFile("gn#Z]qF@5Q#1;OHE", "gn#Z]qF@5Q#1;OHE");
      File file0 = MockFile.createTempFile("gn#Z]qF@5Q#1;OHE", "", (File) mockFile0);
      mockFile0.getCanonicalFile();
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(file0);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, false);
      zipArchiveOutputStream0.finished = true;
//      try { 
        zipArchiveOutputStream0.closeArchiveEntry();
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Stream has already been finished
//         //
//         verifyException("org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream", e);
//      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      ZipArchiveOutputStream.UnicodeExtraFieldPolicy zipArchiveOutputStream_UnicodeExtraFieldPolicy0 = ZipArchiveOutputStream.UnicodeExtraFieldPolicy.ALWAYS;
      zipArchiveOutputStream_UnicodeExtraFieldPolicy0.toString();
      MockFile mockFile0 = new MockFile("always", "always");
      MockFile mockFile1 = new MockFile(mockFile0, "always");
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(mockFile1);
//      try { 
        zipArchiveOutputStream0.finish();
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Error in writing to file
//         //
//         verifyException("org.evosuite.runtime.mock.java.io.NativeMockedIO", e);
//      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream((OutputStream) null);
      zipArchiveOutputStream0.destroy();
      // Undeclared exception!
//      try { 
        zipArchiveOutputStream0.writeCentralDirectoryEnd();
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      ZipArchiveOutputStream.UnicodeExtraFieldPolicy zipArchiveOutputStream_UnicodeExtraFieldPolicy0 = ZipArchiveOutputStream.UnicodeExtraFieldPolicy.ALWAYS;
      zipArchiveOutputStream_UnicodeExtraFieldPolicy0.toString();
      MockFile mockFile0 = new MockFile("always", "always");
      MockFile mockFile1 = new MockFile(mockFile0, "always");
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(mockFile1);
      zipArchiveOutputStream0.deflate();
      zipArchiveOutputStream0.setEncoding((String) null);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-2);
      zipArchiveOutputStream0.setEncoding("always");
      zipArchiveOutputStream0.getEncoding();
      JarArchiveEntry jarArchiveEntry0 = new JarArchiveEntry("always");
      TimeUnit timeUnit0 = TimeUnit.NANOSECONDS;
      FileTime fileTime0 = FileTime.from((long) (-1), timeUnit0);
      jarArchiveEntry0.setLastAccessTime(fileTime0);
//      try { 
        zipArchiveOutputStream0.writeLocalFileHeader(jarArchiveEntry0);
//        fail("Expecting exception: UnsupportedEncodingException");
      
//      } catch(UnsupportedEncodingException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      ZipArchiveOutputStream.UnicodeExtraFieldPolicy zipArchiveOutputStream_UnicodeExtraFieldPolicy0 = ZipArchiveOutputStream.UnicodeExtraFieldPolicy.ALWAYS;
      zipArchiveOutputStream_UnicodeExtraFieldPolicy0.toString();
      MockFile mockFile0 = new MockFile("always", "always");
      MockFile mockFile1 = new MockFile(mockFile0, "always");
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(mockFile1);
      zipArchiveOutputStream0.deflate();
      zipArchiveOutputStream0.setEncoding((String) null);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-2);
      zipArchiveOutputStream0.setEncoding("always");
      zipArchiveOutputStream0.getEncoding();
      ArchiveEntry archiveEntry0 = zipArchiveOutputStream0.createArchiveEntry(mockFile1, "always");
      zipArchiveOutputStream0.destroy();
      assertEquals("always", zipArchiveOutputStream0.getEncoding());
      
//      try { 
        zipArchiveOutputStream0.putArchiveEntry(archiveEntry0);
//        fail("Expecting exception: UnsupportedEncodingException");
      
//      } catch(UnsupportedEncodingException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      ZipArchiveOutputStream.UnicodeExtraFieldPolicy zipArchiveOutputStream_UnicodeExtraFieldPolicy0 = ZipArchiveOutputStream.UnicodeExtraFieldPolicy.ALWAYS;
      zipArchiveOutputStream_UnicodeExtraFieldPolicy0.toString();
      MockFile mockFile0 = new MockFile("always");
      MockFile mockFile1 = new MockFile(mockFile0, "always");
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(mockFile1);
      zipArchiveOutputStream0.setEncoding("always");
//      try { 
        zipArchiveOutputStream0.closeArchiveEntry();
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // No current entry to close
//         //
//         verifyException("org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream", e);
//      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(byteArrayOutputStream0);
      zipArchiveOutputStream0.deflate();
      zipArchiveOutputStream0.setUseLanguageEncodingFlag(true);
      zipArchiveOutputStream0.close();
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)74;
      byteArray0[2] = (byte)42;
      byteArray0[3] = (byte) (-110);
      byteArray0[4] = (byte)9;
      byteArray0[5] = (byte)52;
      byteArray0[6] = (byte)47;
      byteArray0[7] = (byte) (-50);
      // Undeclared exception!
//      try { 
        zipArchiveOutputStream0.write(byteArray0, 2497, (-621));
//        fail("Expecting exception: IllegalStateException");
      
//      } catch(IllegalStateException e) {
//         //
//         // No current entry
//         //
//         verifyException("org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream", e);
//      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("k#P0bLf>YJ");
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(mockFileOutputStream0);
      String string0 = "GNU.parse.reaKJlie";
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("GNU.parse.reaKJlie");
      // Undeclared exception!
//      try { 
        zipArchiveOutputStream0.putArchiveEntry((ArchiveEntry) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      int int0 = 1;
      ByteArrayOutputStream byteArrayOutputStream1 = new ByteArrayOutputStream(1);
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(byteArrayOutputStream0);
      byte[] byteArray0 = null;
      // Undeclared exception!
//      try { 
        zipArchiveOutputStream0.writeOut((byte[]) null, 1, 1);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(2497);
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(byteArrayOutputStream0);
      zipArchiveOutputStream0.deflate();
      zipArchiveOutputStream0.setUseLanguageEncodingFlag(true);
      byte[] byteArray0 = new byte[2];
      byteArray0[1] = (byte)0;
      zipArchiveOutputStream0.setLevel((byte)0);
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      ZipArchiveOutputStream.UnicodeExtraFieldPolicy zipArchiveOutputStream_UnicodeExtraFieldPolicy0 = ZipArchiveOutputStream.UnicodeExtraFieldPolicy.ALWAYS;
      zipArchiveOutputStream_UnicodeExtraFieldPolicy0.toString();
      MockFile mockFile0 = new MockFile("always", "always");
      MockFile mockFile1 = new MockFile(mockFile0, "always");
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(mockFile1);
      zipArchiveOutputStream0.setEncoding("always");
      CpioArchiveEntry cpioArchiveEntry0 = new CpioArchiveEntry("always");
      ZipArchiveOutputStream zipArchiveOutputStream1 = new ZipArchiveOutputStream(zipArchiveOutputStream0);
      zipArchiveOutputStream0.destroy();
      ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry("");
      zipArchiveOutputStream0.writeDataDescriptor(zipArchiveEntry0);
      zipArchiveOutputStream0.setUseLanguageEncodingFlag(true);
      assertEquals("always", zipArchiveOutputStream0.getEncoding());
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(2497);
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(byteArrayOutputStream0);
      zipArchiveOutputStream0.getEncoding();
      JarArchiveEntry jarArchiveEntry0 = new JarArchiveEntry("AES192");
      byteArrayOutputStream0.write((-1646));
      ResourceAlignmentExtraField resourceAlignmentExtraField0 = new ResourceAlignmentExtraField();
      ResourceAlignmentExtraField resourceAlignmentExtraField1 = new ResourceAlignmentExtraField();
      X0016_CertificateIdForCentralDirectory x0016_CertificateIdForCentralDirectory0 = new X0016_CertificateIdForCentralDirectory();
      jarArchiveEntry0.addExtraField(x0016_CertificateIdForCentralDirectory0);
      jarArchiveEntry0.addAsFirstExtraField(resourceAlignmentExtraField1);
      zipArchiveOutputStream0.writeDataDescriptor(jarArchiveEntry0);
      jarArchiveEntry0.setTime(31L);
      zipArchiveOutputStream0.destroy();
      Zip64Mode zip64Mode0 = Zip64Mode.Never;
      zipArchiveOutputStream0.setUseZip64(zip64Mode0);
      // Undeclared exception!
//      try { 
        zipArchiveOutputStream0.writeLocalFileHeader(jarArchiveEntry0);
//        fail("Expecting exception: NegativeArraySizeException");
      
//      } catch(NegativeArraySizeException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.compress.archivers.zip.ExtraFieldUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(2497);
      byteArrayOutputStream0.write(2497);
      ResourceAlignmentExtraField resourceAlignmentExtraField0 = new ResourceAlignmentExtraField();
      ResourceAlignmentExtraField resourceAlignmentExtraField1 = new ResourceAlignmentExtraField();
      X0016_CertificateIdForCentralDirectory x0016_CertificateIdForCentralDirectory0 = new X0016_CertificateIdForCentralDirectory();
      File file0 = MockFile.createTempFile("{uA2]N9$iUBZgA!", "=5H,'p,DK|]G@A>");
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(file0);
      zipArchiveOutputStream0.destroy();
      Zip64Mode zip64Mode0 = Zip64Mode.Never;
      zipArchiveOutputStream0.setUseZip64(zip64Mode0);
      zipArchiveOutputStream0.writeZip64CentralDirectory();
      zipArchiveOutputStream0.isSeekable();
      JarArchiveEntry jarArchiveEntry0 = new JarArchiveEntry(": ");
      JarEntry jarEntry0 = new JarEntry(jarArchiveEntry0);
      JarArchiveEntry jarArchiveEntry1 = null;
//      try {
        jarArchiveEntry1 = new JarArchiveEntry((ZipEntry) jarEntry0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // ZIP compression method can not be negative: -1
//         //
//         verifyException("org.apache.commons.compress.archivers.zip.ZipArchiveEntry", e);
//      }
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream((OutputStream) null);
      JarArchiveEntry jarArchiveEntry0 = new JarArchiveEntry("org.apache.commons.compress.archivers.zip.ZipEightByteInteger");
      boolean boolean0 = zipArchiveOutputStream0.canWriteEntryData(jarArchiveEntry0);
      assertFalse(boolean0);
      
      zipArchiveOutputStream0.destroy();
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(2497);
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(byteArrayOutputStream0);
      zipArchiveOutputStream0.setUseLanguageEncodingFlag(false);
      zipArchiveOutputStream0.getEncoding();
      zipArchiveOutputStream0.setLevel((-1));
      zipArchiveOutputStream0.setMethod(2497);
      zipArchiveOutputStream0.isSeekable();
      // Undeclared exception!
//      try { 
        zipArchiveOutputStream0.createArchiveEntry((File) null, "UTF8");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.compress.archivers.zip.ZipArchiveEntry", e);
//      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(2497);
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(byteArrayOutputStream0);
      zipArchiveOutputStream0.getEncoding();
      byteArrayOutputStream0.write((-1646));
      ResourceAlignmentExtraField resourceAlignmentExtraField0 = new ResourceAlignmentExtraField();
      X0016_CertificateIdForCentralDirectory x0016_CertificateIdForCentralDirectory0 = new X0016_CertificateIdForCentralDirectory();
      zipArchiveOutputStream0.destroy();
      URI uRI0 = MockURI.aFileURI;
      MockFile mockFile0 = new MockFile(uRI0);
      File file0 = MockFile.createTempFile("UTF8", "AES192", (File) mockFile0);
      zipArchiveOutputStream0.createArchiveEntry(file0, ".5hL");
      CpioArchiveEntry cpioArchiveEntry0 = new CpioArchiveEntry("UTF8");
      ZipArchiveOutputStream zipArchiveOutputStream1 = new ZipArchiveOutputStream(zipArchiveOutputStream0);
      zipArchiveOutputStream1.destroy();
      assertEquals(23, byteArrayOutputStream0.size());
      assertEquals("\uFFFDPK\u0005\u0006\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", byteArrayOutputStream0.toString());
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      ZipArchiveOutputStream.UnicodeExtraFieldPolicy zipArchiveOutputStream_UnicodeExtraFieldPolicy0 = ZipArchiveOutputStream.UnicodeExtraFieldPolicy.ALWAYS;
      zipArchiveOutputStream_UnicodeExtraFieldPolicy0.toString();
      MockFile mockFile0 = new MockFile("always", "always");
      MockFile mockFile1 = new MockFile(mockFile0, "always");
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(mockFile1);
      zipArchiveOutputStream0.setEncoding("always");
      File file0 = MockFile.createTempFile("always", ">W\",{5}L@{/_:");
      ZipArchiveOutputStream zipArchiveOutputStream1 = new ZipArchiveOutputStream(file0);
      zipArchiveOutputStream0.canWriteEntryData((ArchiveEntry) null);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)91;
      byteArray0[1] = (byte)103;
      byteArray0[2] = (byte)103;
      byteArray0[3] = (byte) (-50);
      byteArray0[4] = (byte)32;
      byteArray0[5] = (byte)32;
      byteArray0[6] = (byte)117;
      byteArray0[7] = (byte)103;
      byteArray0[8] = (byte)91;
      zipArchiveOutputStream0.writeOut(byteArray0);
      zipArchiveOutputStream0.canWriteEntryData((ArchiveEntry) null);
      zipArchiveOutputStream0.destroy();
      assertEquals("always", zipArchiveOutputStream0.getEncoding());
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      MockFile mockFile0 = new MockFile("L6$FqW<<", "L6$FqW<<");
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(mockFile0);
      boolean boolean0 = zipArchiveOutputStream0.isSeekable();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      zipArchiveOutputStream0.destroy();
      ZipArchiveOutputStream zipArchiveOutputStream1 = new ZipArchiveOutputStream(zipArchiveOutputStream0);
      ZipArchiveOutputStream zipArchiveOutputStream2 = new ZipArchiveOutputStream(mockFile0);
      boolean boolean1 = zipArchiveOutputStream2.canWriteEntryData((ArchiveEntry) null);
      assertTrue(boolean1 == boolean0);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)32;
      byteArray0[1] = (byte)103;
      ZipArchiveOutputStream zipArchiveOutputStream3 = new ZipArchiveOutputStream(zipArchiveOutputStream0);
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertEquals("UTF8", zipArchiveOutputStream3.getEncoding());
      
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      FileChannel fileChannel0 = mockFileInputStream0.getChannel();
      ZipArchiveOutputStream zipArchiveOutputStream4 = new ZipArchiveOutputStream(fileChannel0);
      zipArchiveOutputStream4.destroy();
      assertEquals("UTF8", zipArchiveOutputStream4.getEncoding());
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      ZipArchiveOutputStream.UnicodeExtraFieldPolicy zipArchiveOutputStream_UnicodeExtraFieldPolicy0 = ZipArchiveOutputStream.UnicodeExtraFieldPolicy.ALWAYS;
      zipArchiveOutputStream_UnicodeExtraFieldPolicy0.toString();
      MockFile mockFile0 = new MockFile("always", "always");
      MockFile mockFile1 = new MockFile(mockFile0, "always");
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(mockFile1);
      zipArchiveOutputStream0.setEncoding("always");
      CpioArchiveEntry cpioArchiveEntry0 = new CpioArchiveEntry("always");
      byte[] byteArray0 = new byte[0];
//      try { 
        zipArchiveOutputStream0.writeOut(byteArray0);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Error in writing to file
//         //
//         verifyException("org.evosuite.runtime.mock.java.io.NativeMockedIO", e);
//      }
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(166);
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(byteArrayOutputStream0);
      File file0 = MockFile.createTempFile(", method=", ", method=");
      ZipArchiveOutputStream zipArchiveOutputStream1 = new ZipArchiveOutputStream(file0);
      zipArchiveOutputStream1.finish();
      zipArchiveOutputStream1.isSeekable();
      zipArchiveOutputStream0.createArchiveEntry(file0, ", method=");
      CpioArchiveEntry cpioArchiveEntry0 = new CpioArchiveEntry("");
      ZipArchiveOutputStream zipArchiveOutputStream2 = new ZipArchiveOutputStream(zipArchiveOutputStream0);
      zipArchiveOutputStream0.destroy();
      assertEquals(0, ZipArchiveOutputStream.STORED);
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(166);
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(byteArrayOutputStream0);
      zipArchiveOutputStream0.setMethod(166);
      zipArchiveOutputStream0.setFallbackToUTF8(true);
      MockFile mockFile0 = new MockFile("bad size for entry ");
      ZipArchiveOutputStream zipArchiveOutputStream1 = new ZipArchiveOutputStream(mockFile0);
      zipArchiveOutputStream1.setFallbackToUTF8(false);
      ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
      ZipArchiveEntry zipArchiveEntry1 = null;
//      try {
        zipArchiveEntry1 = new ZipArchiveEntry(zipArchiveEntry0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // ZIP compression method can not be negative: -1
//         //
//         verifyException("org.apache.commons.compress.archivers.zip.ZipArchiveEntry", e);
//      }
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      ZipArchiveOutputStream.UnicodeExtraFieldPolicy zipArchiveOutputStream_UnicodeExtraFieldPolicy0 = ZipArchiveOutputStream.UnicodeExtraFieldPolicy.ALWAYS;
      zipArchiveOutputStream_UnicodeExtraFieldPolicy0.toString();
      MockFile mockFile0 = new MockFile("always", "always");
      MockFile mockFile1 = new MockFile(mockFile0, "always");
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(mockFile1);
      zipArchiveOutputStream0.setEncoding("always");
//      try { 
        zipArchiveOutputStream0.writeCentralDirectoryEnd();
//        fail("Expecting exception: UnsupportedEncodingException");
      
//      } catch(UnsupportedEncodingException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(166);
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(byteArrayOutputStream0);
      String string0 = "e.-w\\hg6d]Y0]";
      JarArchiveEntry jarArchiveEntry0 = new JarArchiveEntry("e.-whg6d]Y0]");
      // Undeclared exception!
//      try { 
        zipArchiveOutputStream0.writeCentralFileHeader(jarArchiveEntry0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream$EntryMetaData", e);
//      }
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      ZipArchiveOutputStream.UnicodeExtraFieldPolicy zipArchiveOutputStream_UnicodeExtraFieldPolicy0 = ZipArchiveOutputStream.UnicodeExtraFieldPolicy.ALWAYS;
      zipArchiveOutputStream_UnicodeExtraFieldPolicy0.toString();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("always/always");
      FileSystemHandling.appendStringToFile(evoSuiteFile0, "");
      MockFile mockFile0 = new MockFile("always", "always");
      MockFile mockFile1 = new MockFile(mockFile0, "always");
      ZipArchiveOutputStream zipArchiveOutputStream0 = null;
//      try {
        zipArchiveOutputStream0 = new ZipArchiveOutputStream(mockFile1);
//        fail("Expecting exception: FileNotFoundException");
      
//      } catch(Throwable e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.evosuite.runtime.mock.java.io.MockFileOutputStream", e);
//      }
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(0);
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(byteArrayOutputStream0);
      MockFile mockFile0 = new MockFile("L6$FqW<<", "L6$FqW<<");
      ZipArchiveOutputStream zipArchiveOutputStream1 = new ZipArchiveOutputStream(mockFile0);
      zipArchiveOutputStream1.isSeekable();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      zipArchiveOutputStream1.destroy();
      ZipArchiveOutputStream zipArchiveOutputStream2 = new ZipArchiveOutputStream(zipArchiveOutputStream1);
      ArchiveEntry archiveEntry0 = null;
      ZipArchiveOutputStream zipArchiveOutputStream3 = new ZipArchiveOutputStream(mockFile0);
      zipArchiveOutputStream3.canWriteEntryData((ArchiveEntry) null);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)32;
      byteArray0[1] = (byte)103;
      byteArray0[2] = (byte)91;
      // Undeclared exception!
//      try { 
        zipArchiveOutputStream2.writeOut(byteArray0);
//        fail("Expecting exception: IllegalStateException");
      
//      } catch(IllegalStateException e) {
//         //
//         // No current entry
//         //
//         verifyException("org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream", e);
//      }
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(2497);
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(byteArrayOutputStream0);
      zipArchiveOutputStream0.setUseLanguageEncodingFlag(true);
      zipArchiveOutputStream0.getEncoding();
      JarArchiveEntry jarArchiveEntry0 = new JarArchiveEntry("AES192");
      byteArrayOutputStream0.write((-1646));
      ResourceAlignmentExtraField resourceAlignmentExtraField0 = new ResourceAlignmentExtraField();
      ResourceAlignmentExtraField resourceAlignmentExtraField1 = new ResourceAlignmentExtraField();
      X0016_CertificateIdForCentralDirectory x0016_CertificateIdForCentralDirectory0 = new X0016_CertificateIdForCentralDirectory();
      jarArchiveEntry0.addExtraField(x0016_CertificateIdForCentralDirectory0);
      ZipArchiveOutputStream zipArchiveOutputStream1 = new ZipArchiveOutputStream(byteArrayOutputStream0);
      zipArchiveOutputStream1.writeDataDescriptor(jarArchiveEntry0);
      jarArchiveEntry0.setTime(31L);
      zipArchiveOutputStream1.destroy();
      Zip64Mode zip64Mode0 = Zip64Mode.Never;
      zipArchiveOutputStream0.setUseZip64(zip64Mode0);
      // Undeclared exception!
//      try { 
        zipArchiveOutputStream1.writeLocalFileHeader(jarArchiveEntry0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream$CurrentEntry", e);
//      }
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(2497);
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(byteArrayOutputStream0);
      zipArchiveOutputStream0.setUseLanguageEncodingFlag(true);
      zipArchiveOutputStream0.getEncoding();
      JarArchiveEntry jarArchiveEntry0 = new JarArchiveEntry("AES192");
      byteArrayOutputStream0.write((-1646));
      ResourceAlignmentExtraField resourceAlignmentExtraField0 = new ResourceAlignmentExtraField();
      jarArchiveEntry0.addExtraField(resourceAlignmentExtraField0);
      zipArchiveOutputStream0.writeDataDescriptor(jarArchiveEntry0);
      jarArchiveEntry0.setTime(2);
      zipArchiveOutputStream0.destroy();
      Zip64Mode zip64Mode0 = Zip64Mode.Never;
      zipArchiveOutputStream0.setUseZip64(zip64Mode0);
      MockFile mockFile0 = new MockFile("org.apache.commons.compress.archivers.zip.UnsupportedZipFeatureException", "AES192");
      ZipArchiveOutputStream zipArchiveOutputStream1 = new ZipArchiveOutputStream(mockFile0);
      zipArchiveOutputStream1.canWriteEntryData((ArchiveEntry) null);
      zipArchiveOutputStream0.flush();
      assertEquals("\uFFFD", byteArrayOutputStream0.toString());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      int int0 = 2497;
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(2497);
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(byteArrayOutputStream0);
      zipArchiveOutputStream0.setUseLanguageEncodingFlag(false);
      zipArchiveOutputStream0.getEncoding();
      zipArchiveOutputStream0.setLevel((-1));
      zipArchiveOutputStream0.setMethod((-1995));
      zipArchiveOutputStream0.finish();
      zipArchiveOutputStream0.isSeekable();
      File file0 = null;
//      try { 
        zipArchiveOutputStream0.createArchiveEntry((File) null, "UTF8");
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Stream has already been finished
//         //
//         verifyException("org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream", e);
//      }
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      ZipArchiveOutputStream.UnicodeExtraFieldPolicy zipArchiveOutputStream_UnicodeExtraFieldPolicy0 = ZipArchiveOutputStream.UnicodeExtraFieldPolicy.ALWAYS;
      zipArchiveOutputStream_UnicodeExtraFieldPolicy0.toString();
      MockFile mockFile0 = new MockFile("always", "always");
      MockFile mockFile1 = new MockFile(mockFile0, "always");
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(mockFile1);
      zipArchiveOutputStream0.deflate();
      zipArchiveOutputStream0.setEncoding((String) null);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-2);
      byteArray0[3] = (byte) (-2);
      zipArchiveOutputStream0.createArchiveEntry(mockFile0, "C?o:`!G9c58~J}");
      zipArchiveOutputStream0.destroy();
      zipArchiveOutputStream0.setCreateUnicodeExtraFields(zipArchiveOutputStream_UnicodeExtraFieldPolicy0);
      assertNull(zipArchiveOutputStream0.getEncoding());
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(2497);
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(byteArrayOutputStream0);
      zipArchiveOutputStream0.setUseLanguageEncodingFlag(true);
      zipArchiveOutputStream0.getEncoding();
      JarArchiveEntry jarArchiveEntry0 = new JarArchiveEntry("AES192");
      byteArrayOutputStream0.write((-1646));
      ResourceAlignmentExtraField resourceAlignmentExtraField0 = new ResourceAlignmentExtraField();
      jarArchiveEntry0.addExtraField(resourceAlignmentExtraField0);
      zipArchiveOutputStream0.writeDataDescriptor(jarArchiveEntry0);
      jarArchiveEntry0.setTime(2);
      zipArchiveOutputStream0.destroy();
      Zip64Mode zip64Mode0 = Zip64Mode.Never;
      zipArchiveOutputStream0.setUseZip64(zip64Mode0);
      // Undeclared exception!
//      try { 
        zipArchiveOutputStream0.writeLocalFileHeader(jarArchiveEntry0);
//        fail("Expecting exception: NegativeArraySizeException");
      
//      } catch(NegativeArraySizeException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.compress.archivers.zip.ExtraFieldUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      ZipArchiveOutputStream.UnicodeExtraFieldPolicy zipArchiveOutputStream_UnicodeExtraFieldPolicy0 = ZipArchiveOutputStream.UnicodeExtraFieldPolicy.ALWAYS;
      zipArchiveOutputStream_UnicodeExtraFieldPolicy0.toString();
      MockFile mockFile0 = new MockFile("always", "always");
      MockFile mockFile1 = new MockFile(mockFile0, "always");
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(mockFile1);
      zipArchiveOutputStream0.setEncoding("always");
      CpioArchiveEntry cpioArchiveEntry0 = new CpioArchiveEntry("always");
      ZipArchiveOutputStream zipArchiveOutputStream1 = new ZipArchiveOutputStream(zipArchiveOutputStream0);
//      try { 
        zipArchiveOutputStream1.destroy();
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Error in writing to file
//         //
//         verifyException("org.evosuite.runtime.mock.java.io.NativeMockedIO", e);
//      }
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(166);
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(byteArrayOutputStream0);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-54);
      byteArray0[1] = (byte)105;
      byteArray0[2] = (byte)97;
      byteArray0[3] = (byte) (-3);
      byteArray0[4] = (byte) (-12);
      byteArray0[5] = (byte)23;
      // Undeclared exception!
//      try { 
        zipArchiveOutputStream0.writeOut(byteArray0, (byte) (-12), (byte) (-3));
//        fail("Expecting exception: IndexOutOfBoundsException");
      
//      } catch(IndexOutOfBoundsException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.io.ByteArrayOutputStream", e);
//      }
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream((OutputStream) null);
      String string0 = "/1'vk";
      zipArchiveOutputStream0.setComment("/1'vk");
      // Undeclared exception!
//      try { 
        zipArchiveOutputStream0.finish();
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      ZipArchiveOutputStream.UnicodeExtraFieldPolicy zipArchiveOutputStream_UnicodeExtraFieldPolicy0 = ZipArchiveOutputStream.UnicodeExtraFieldPolicy.NEVER;
      zipArchiveOutputStream_UnicodeExtraFieldPolicy0.toString();
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      FileChannel fileChannel0 = mockFileInputStream0.getChannel();
      FileChannel fileChannel1 = fileChannel0.position(527L);
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(fileChannel1);
      // Undeclared exception!
//      try { 
        zipArchiveOutputStream0.setEncoding(">jrcK4");
//        fail("Expecting exception: IllegalCharsetNameException");
      
//      } catch(IllegalCharsetNameException e) {
//         //
//         // >jrcK4
//         //
//         verifyException("java.nio.charset.Charset", e);
//      }
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      File file0 = null;
      ZipArchiveOutputStream zipArchiveOutputStream0 = null;
//      try {
        zipArchiveOutputStream0 = new ZipArchiveOutputStream((File) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream", e);
//      }
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(2497);
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(byteArrayOutputStream0);
      zipArchiveOutputStream0.setUseLanguageEncodingFlag(false);
      zipArchiveOutputStream0.getEncoding();
      JarArchiveEntry jarArchiveEntry0 = new JarArchiveEntry("AES192");
      byteArrayOutputStream0.write((-1646));
      ResourceAlignmentExtraField resourceAlignmentExtraField0 = new ResourceAlignmentExtraField();
      jarArchiveEntry0.addExtraField(resourceAlignmentExtraField0);
      zipArchiveOutputStream0.writeDataDescriptor(jarArchiveEntry0);
      jarArchiveEntry0.setTime(2);
      zipArchiveOutputStream0.destroy();
      Zip64Mode zip64Mode0 = Zip64Mode.Never;
      zipArchiveOutputStream0.setUseZip64(zip64Mode0);
      // Undeclared exception!
//      try { 
        zipArchiveOutputStream0.writeLocalFileHeader(jarArchiveEntry0);
//        fail("Expecting exception: NegativeArraySizeException");
      
//      } catch(NegativeArraySizeException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.compress.archivers.zip.ExtraFieldUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      int int0 = 0;
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(0);
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(byteArrayOutputStream0);
      String string0 = "L6$FqW<<";
      byteArrayOutputStream0.flush();
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("GNU.sparse.realsize");
      // Undeclared exception!
//      try { 
        zipArchiveOutputStream0.putArchiveEntry(tarArchiveEntry0);
//        fail("Expecting exception: ClassCastException");
      
//      } catch(ClassCastException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("cp850", true);
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(mockFileOutputStream0);
      String string0 = zipArchiveOutputStream0.getEncoding();
      assertEquals("UTF8", string0);
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      String string0 = "76B0=4/7vSJ'^LeO";
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("76B0=4/7vSJ'^LeO");
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(mockFileOutputStream0);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)59;
//      try { 
        zipArchiveOutputStream0.writeOut(byteArray0, (byte)59, 1266);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Error in writing to file
//         //
//         verifyException("org.evosuite.runtime.mock.java.io.NativeMockedIO", e);
//      }
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      ZipArchiveOutputStream.UnicodeExtraFieldPolicy zipArchiveOutputStream_UnicodeExtraFieldPolicy0 = ZipArchiveOutputStream.UnicodeExtraFieldPolicy.ALWAYS;
      zipArchiveOutputStream_UnicodeExtraFieldPolicy0.toString();
      MockFileInputStream mockFileInputStream0 = null;
//      try {
        mockFileInputStream0 = new MockFileInputStream("]?yU");
//        fail("Expecting exception: FileNotFoundException");
      
//      } catch(Throwable e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
//      }
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(166);
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(byteArrayOutputStream0);
      boolean boolean0 = zipArchiveOutputStream0.canWriteEntryData((ArchiveEntry) null);
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertFalse(boolean0);
  }
}
