/*
 * This file was automatically generated by EvoSuite
 * Wed Oct 20 16:13:03 GMT 2021
 */

package org.apache.commons.compress.archivers.zip;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedInputStream;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.PushbackInputStream;
import java.io.SequenceInputStream;
import java.nio.charset.IllegalCharsetNameException;
import java.util.Enumeration;
import java.util.zip.ZipEntry;
import org.apache.commons.compress.archivers.ArchiveEntry;
import org.apache.commons.compress.archivers.ar.ArArchiveEntry;
import org.apache.commons.compress.archivers.cpio.CpioArchiveEntry;
import org.apache.commons.compress.archivers.dump.DumpArchiveEntry;
import org.apache.commons.compress.archivers.jar.JarArchiveEntry;
import org.apache.commons.compress.archivers.tar.TarArchiveEntry;
import org.apache.commons.compress.archivers.zip.ZipArchiveEntry;
import org.apache.commons.compress.archivers.zip.ZipArchiveInputStream;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class ZipArchiveInputStream_ESTest extends ZipArchiveInputStream_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)116;
      byteArray0[3] = (byte)19;
      byteArray0[4] = (byte)30;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (-9), (byte)116);
      ZipArchiveInputStream zipArchiveInputStream0 = new ZipArchiveInputStream(byteArrayInputStream0, "windows");
      // Undeclared exception!
//      try { 
        zipArchiveInputStream0.getNextZipEntry();
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      FileSystemHandling.shouldAllThrowIOExceptions();
      System.setCurrentTimeMillis((-395));
      ZipArchiveInputStream.matches(byteArray0, (-888));
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (-888), 1610612736);
      ZipArchiveInputStream zipArchiveInputStream0 = new ZipArchiveInputStream(byteArrayInputStream0);
      zipArchiveInputStream0.getNextEntry();
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)57;
      byteArray0[1] = (byte)23;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(byteArrayInputStream0, (InputStream) null);
      ZipArchiveInputStream zipArchiveInputStream0 = new ZipArchiveInputStream(sequenceInputStream0);
      // Undeclared exception!
//      try { 
        zipArchiveInputStream0.getNextZipEntry();
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.io.SequenceInputStream", e);
//      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      DataInputStream dataInputStream0 = new DataInputStream((InputStream) null);
      ZipArchiveInputStream zipArchiveInputStream0 = new ZipArchiveInputStream(dataInputStream0);
      // Undeclared exception!
//      try { 
        zipArchiveInputStream0.getNextEntry();
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.io.DataInputStream", e);
//      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ZipArchiveInputStream zipArchiveInputStream0 = new ZipArchiveInputStream((InputStream) null);
      zipArchiveInputStream0.available();
      ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
      zipArchiveEntry0.setMethod(0);
      zipArchiveInputStream0.canReadEntryData(zipArchiveEntry0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      byte[] byteArray0 = new byte[43];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      ZipArchiveInputStream zipArchiveInputStream0 = new ZipArchiveInputStream(byteArrayInputStream0);
      zipArchiveInputStream0.getNextZipEntry();
      zipArchiveInputStream0.skip(0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ZipArchiveInputStream zipArchiveInputStream0 = new ZipArchiveInputStream((InputStream) null);
      MockFile mockFile0 = new MockFile(":_bJ=J{7h3d%OJ)Y{e");
      ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(mockFile0, ":_bJ=J{7h3d%OJ)Y{e");
      zipArchiveInputStream0.canReadEntryData(zipArchiveEntry0);
      ZipArchiveInputStream zipArchiveInputStream1 = new ZipArchiveInputStream(zipArchiveInputStream0);
      zipArchiveInputStream1.read();
      zipArchiveInputStream1.skip(1024L);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ZipArchiveInputStream zipArchiveInputStream0 = new ZipArchiveInputStream((InputStream) null);
      MockFile mockFile0 = new MockFile(":_bJ=J{7h3d%OJ)Y{e");
      ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(mockFile0, ":_bJ=J{7h3d%OJ)Y{e");
      zipArchiveInputStream0.canReadEntryData(zipArchiveEntry0);
      ZipArchiveInputStream zipArchiveInputStream1 = new ZipArchiveInputStream((InputStream) null);
//      try { 
        zipArchiveInputStream1.getNextZipEntry();
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Stream closed
//         //
//         verifyException("java.io.PushbackInputStream", e);
//      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ZipArchiveInputStream zipArchiveInputStream0 = new ZipArchiveInputStream((InputStream) null, (String) null, true);
      zipArchiveInputStream0.skip(968L);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(zipArchiveInputStream0);
      bufferedInputStream0.close();
      zipArchiveInputStream0.close();
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      byte byte0 = (byte)110;
      byte[] byteArray0 = new byte[0];
      // Undeclared exception!
//      try { 
        ZipArchiveInputStream.matches(byteArray0, (byte)110);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 0
//         //
//         verifyException("org.apache.commons.compress.archivers.zip.ZipArchiveInputStream", e);
//      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)80;
      byteArray0[1] = (byte)110;
      ZipArchiveInputStream.matches(byteArray0, (byte)80);
      SequenceInputStream sequenceInputStream0 = null;
//      try {
        sequenceInputStream0 = new SequenceInputStream((Enumeration<? extends InputStream>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.io.SequenceInputStream", e);
//      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)80;
      byte byte0 = (byte)110;
      byteArray0[1] = (byte)110;
      ZipArchiveInputStream.matches(byteArray0, (byte)80);
      Enumeration<PushbackInputStream> enumeration0 = (Enumeration<PushbackInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      ZipArchiveInputStream zipArchiveInputStream0 = null;
//      try {
        zipArchiveInputStream0 = new ZipArchiveInputStream(sequenceInputStream0, "", true, false);
//        fail("Expecting exception: IllegalCharsetNameException");
      
//      } catch(IllegalCharsetNameException e) {
//         //
//         // 
//         //
//         verifyException("java.nio.charset.Charset", e);
//      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ZipArchiveInputStream zipArchiveInputStream0 = new ZipArchiveInputStream((InputStream) null, (String) null);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(zipArchiveInputStream0);
      bufferedInputStream0.close();
//      try { 
        zipArchiveInputStream0.skip(16L);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // The stream is closed
//         //
//         verifyException("org.apache.commons.compress.archivers.zip.ZipArchiveInputStream", e);
//      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream((InputStream) null);
      ZipArchiveInputStream zipArchiveInputStream0 = new ZipArchiveInputStream(bufferedInputStream0);
      zipArchiveInputStream0.skip(34L);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)42;
      byteArray0[1] = (byte)94;
      byteArray0[2] = (byte)42;
      byteArray0[3] = (byte) (-28);
      byteArray0[4] = (byte) (-28);
      byteArray0[5] = (byte) (-62);
      byteArray0[6] = (byte) (-28);
      byteArray0[7] = (byte) (-86);
      ZipArchiveInputStream.matches(byteArray0, 4);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      ZipArchiveInputStream zipArchiveInputStream0 = new ZipArchiveInputStream((InputStream) null);
      zipArchiveInputStream0.skip(34L);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)94;
      byteArray0[1] = (byte)42;
      byteArray0[2] = (byte) (-62);
      byteArray0[3] = (byte)48;
      byteArray0[4] = (byte) (-28);
      ZipArchiveInputStream.matches(byteArray0, 184);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Enumeration<PushbackInputStream> enumeration0 = (Enumeration<PushbackInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false, false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      sequenceInputStream0.available();
      ZipArchiveInputStream zipArchiveInputStream0 = new ZipArchiveInputStream(sequenceInputStream0);
      byte[] byteArray0 = new byte[1];
      sequenceInputStream0.mark(296);
      byteArray0[0] = (byte)123;
      zipArchiveInputStream0.read(byteArray0, 2926, (int) (byte)123);
      zipArchiveInputStream0.getNextEntry();
      zipArchiveInputStream0.close();
      zipArchiveInputStream0.canReadEntryData((ArchiveEntry) null);
      zipArchiveInputStream0.getNextZipEntry();
//      try { 
        zipArchiveInputStream0.read(byteArray0, 0, (int) (byte)123);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // The stream is closed
//         //
//         verifyException("org.apache.commons.compress.archivers.zip.ZipArchiveInputStream", e);
//      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      ZipArchiveInputStream zipArchiveInputStream0 = new ZipArchiveInputStream((InputStream) null);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      zipArchiveInputStream0.skip(0L);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)116;
      byteArray0[3] = (byte)19;
      byteArray0[4] = (byte)30;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 0, (byte)116);
      ZipArchiveInputStream zipArchiveInputStream0 = new ZipArchiveInputStream(byteArrayInputStream0, "windows");
      // Undeclared exception!
//      try { 
        zipArchiveInputStream0.skip((-1009L));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.compress.archivers.zip.ZipArchiveInputStream", e);
//      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Enumeration<PushbackInputStream> enumeration0 = (Enumeration<PushbackInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false, true).when(enumeration0).hasMoreElements();
      doReturn((Object) null).when(enumeration0).nextElement();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      sequenceInputStream0.available();
      ZipArchiveInputStream zipArchiveInputStream0 = new ZipArchiveInputStream(sequenceInputStream0);
      byte[] byteArray0 = new byte[1];
      sequenceInputStream0.mark(296);
      byteArray0[0] = (byte)123;
      zipArchiveInputStream0.read(byteArray0, 2926, (int) (byte)123);
      zipArchiveInputStream0.getNextEntry();
      // Undeclared exception!
//      try { 
        zipArchiveInputStream0.close();
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.io.SequenceInputStream", e);
//      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      ZipArchiveInputStream zipArchiveInputStream0 = new ZipArchiveInputStream((InputStream) null, (String) null);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(zipArchiveInputStream0);
      bufferedInputStream0.close();
      ZipArchiveInputStream zipArchiveInputStream1 = new ZipArchiveInputStream(bufferedInputStream0, (String) null, false);
//      try { 
        zipArchiveInputStream1.getNextEntry();
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Stream closed
//         //
//         verifyException("java.io.BufferedInputStream", e);
//      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      InputStream inputStream0 = null;
      ZipArchiveInputStream zipArchiveInputStream0 = new ZipArchiveInputStream((InputStream) null, (String) null);
      byte byte0 = (byte)0;
      int int0 = 0;
      byte[] byteArray0 = null;
      // Undeclared exception!
//      try { 
        ZipArchiveInputStream.matches((byte[]) null, 39);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.compress.archivers.zip.ZipArchiveInputStream", e);
//      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Enumeration<PushbackInputStream> enumeration0 = (Enumeration<PushbackInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false, false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      sequenceInputStream0.available();
      ZipArchiveInputStream zipArchiveInputStream0 = new ZipArchiveInputStream(sequenceInputStream0);
      byte[] byteArray0 = new byte[1];
      sequenceInputStream0.mark(296);
      byteArray0[0] = (byte)123;
      zipArchiveInputStream0.read(byteArray0, 2926, (int) (byte)123);
      zipArchiveInputStream0.getNextEntry();
      zipArchiveInputStream0.close();
//      try { 
        zipArchiveInputStream0.read(byteArray0, (-1), 0);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // The stream is closed
//         //
//         verifyException("org.apache.commons.compress.archivers.zip.ZipArchiveInputStream", e);
//      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      ZipArchiveInputStream zipArchiveInputStream0 = new ZipArchiveInputStream((InputStream) null, "WORLD_WRITE", false, false);
      ZipArchiveInputStream zipArchiveInputStream1 = new ZipArchiveInputStream(zipArchiveInputStream0, "WORLD_WRITE", false);
      zipArchiveInputStream0.markSupported();
      ZipArchiveInputStream zipArchiveInputStream2 = new ZipArchiveInputStream(zipArchiveInputStream1, "G");
      zipArchiveInputStream2.available();
      zipArchiveInputStream2.close();
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("G");
      zipArchiveInputStream2.canReadEntryData(tarArchiveEntry0);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-76);
      zipArchiveInputStream1.getNextEntry();
//      try { 
        zipArchiveInputStream0.read(byteArray0, 512, 512);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // The stream is closed
//         //
//         verifyException("org.apache.commons.compress.archivers.zip.ZipArchiveInputStream", e);
//      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-111);
      byteArray0[1] = (byte)102;
      byteArray0[2] = (byte)11;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)84;
      ZipArchiveInputStream.matches(byteArray0, 1080);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      ZipArchiveInputStream zipArchiveInputStream0 = null;
//      try {
        zipArchiveInputStream0 = new ZipArchiveInputStream(byteArrayInputStream0, "D YS&|-B}w,tPhmW;7");
//        fail("Expecting exception: IllegalCharsetNameException");
      
//      } catch(IllegalCharsetNameException e) {
//         //
//         // D YS&|-B}w,tPhmW;7
//         //
//         verifyException("java.nio.charset.Charset", e);
//      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      ZipArchiveInputStream zipArchiveInputStream0 = new ZipArchiveInputStream((InputStream) null);
      byte[] byteArray0 = null;
      zipArchiveInputStream0.skip(24576L);
      int int0 = 9632;
      zipArchiveInputStream0.read((byte[]) null, 9632, 9632);
      zipArchiveInputStream0.canReadEntryData((ArchiveEntry) null);
      int int1 = 0;
//      try { 
        zipArchiveInputStream0.getNextZipEntry();
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Stream closed
//         //
//         verifyException("java.io.PushbackInputStream", e);
//      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      ZipArchiveInputStream zipArchiveInputStream0 = new ZipArchiveInputStream((InputStream) null);
      zipArchiveInputStream0.skip(16L);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream((InputStream) null);
      ZipArchiveInputStream zipArchiveInputStream0 = null;
//      try {
        zipArchiveInputStream0 = new ZipArchiveInputStream(bufferedInputStream0, "FIp'v(!)\"L1i~#yIJ");
//        fail("Expecting exception: IllegalCharsetNameException");
      
//      } catch(IllegalCharsetNameException e) {
//         //
//         // FIp'v(!)\"L1i~#yIJ
//         //
//         verifyException("java.nio.charset.Charset", e);
//      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      ZipArchiveInputStream zipArchiveInputStream0 = new ZipArchiveInputStream((InputStream) null, "WORLD_WRITE", false, false);
      ZipArchiveInputStream zipArchiveInputStream1 = new ZipArchiveInputStream(zipArchiveInputStream0, "WORLD_WRITE", false);
      zipArchiveInputStream0.markSupported();
      ZipArchiveInputStream zipArchiveInputStream2 = new ZipArchiveInputStream(zipArchiveInputStream1, "G");
      zipArchiveInputStream2.available();
      zipArchiveInputStream2.close();
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("G");
      zipArchiveInputStream2.canReadEntryData(tarArchiveEntry0);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-76);
      ZipArchiveInputStream.matches(byteArray0, 0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      ZipArchiveInputStream zipArchiveInputStream0 = null;
//      try {
        zipArchiveInputStream0 = new ZipArchiveInputStream((InputStream) null, "%VK:8l]XL.ec", false);
//        fail("Expecting exception: IllegalCharsetNameException");
      
//      } catch(IllegalCharsetNameException e) {
//         //
//         // %VK:8l]XL.ec
//         //
//         verifyException("java.nio.charset.Charset", e);
//      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)116;
      byteArray0[3] = (byte)19;
      byteArray0[4] = (byte)30;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 0, (byte)116);
      ZipArchiveInputStream zipArchiveInputStream0 = new ZipArchiveInputStream(byteArrayInputStream0, "windows");
      zipArchiveInputStream0.getNextZipEntry();
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-14);
      byteArray0[1] = (byte)4;
      byteArray0[2] = (byte) (-1);
      byteArray0[3] = (byte)78;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte) (-101);
      byteArray0[6] = (byte) (-36);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 0, 15);
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(byteArrayInputStream0, byteArrayInputStream0);
      ZipArchiveInputStream zipArchiveInputStream0 = null;
//      try {
        zipArchiveInputStream0 = new ZipArchiveInputStream(sequenceInputStream0, "`PX;oC$}O~}^(fRj", true, true);
//        fail("Expecting exception: IllegalCharsetNameException");
      
//      } catch(IllegalCharsetNameException e) {
//         //
//         // `PX;oC$}O~}^(fRj
//         //
//         verifyException("java.nio.charset.Charset", e);
//      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Enumeration<PushbackInputStream> enumeration0 = (Enumeration<PushbackInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      ZipArchiveInputStream zipArchiveInputStream0 = null;
//      try {
        zipArchiveInputStream0 = new ZipArchiveInputStream(sequenceInputStream0, "0b~rEc79\"nsS;ukd", true, false);
//        fail("Expecting exception: IllegalCharsetNameException");
      
//      } catch(IllegalCharsetNameException e) {
//         //
//         // 0b~rEc79\"nsS;ukd
//         //
//         verifyException("java.nio.charset.Charset", e);
//      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      ZipArchiveInputStream zipArchiveInputStream0 = new ZipArchiveInputStream((InputStream) null, (String) null);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(zipArchiveInputStream0);
      ZipArchiveInputStream zipArchiveInputStream1 = new ZipArchiveInputStream(bufferedInputStream0, (String) null, false);
      zipArchiveInputStream1.getNextEntry();
  }
}
