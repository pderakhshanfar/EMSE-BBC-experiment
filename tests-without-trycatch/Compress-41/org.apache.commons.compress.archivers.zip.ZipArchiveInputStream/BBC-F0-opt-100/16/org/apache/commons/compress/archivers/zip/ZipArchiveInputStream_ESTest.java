/*
 * This file was automatically generated by EvoSuite
 * Wed Oct 20 16:02:36 GMT 2021
 */

package org.apache.commons.compress.archivers.zip;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedInputStream;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.FileDescriptor;
import java.io.IOException;
import java.io.InputStream;
import java.io.PipedInputStream;
import java.io.PushbackInputStream;
import java.io.SequenceInputStream;
import java.nio.charset.IllegalCharsetNameException;
import java.util.Enumeration;
import org.apache.commons.compress.archivers.ArchiveEntry;
import org.apache.commons.compress.archivers.cpio.CpioArchiveEntry;
import org.apache.commons.compress.archivers.dump.DumpArchiveEntry;
import org.apache.commons.compress.archivers.zip.X000A_NTFS;
import org.apache.commons.compress.archivers.zip.X0016_CertificateIdForCentralDirectory;
import org.apache.commons.compress.archivers.zip.ZipArchiveEntry;
import org.apache.commons.compress.archivers.zip.ZipArchiveInputStream;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFileInputStream;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class ZipArchiveInputStream_ESTest extends ZipArchiveInputStream_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      System.setCurrentTimeMillis((-1176L));
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-18);
      byteArray0[1] = (byte)12;
      byteArray0[2] = (byte)28;
      byteArray0[3] = (byte)100;
      byteArray0[4] = (byte) (-37);
      byteArray0[5] = (byte)100;
      byteArray0[6] = (byte) (-36);
      byteArray0[7] = (byte)108;
      byteArray0[8] = (byte)2;
      ZipArchiveInputStream.matches(byteArray0, (-463));
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte) (-36), 3002);
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(byteArrayInputStream0, (byte)28);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(pushbackInputStream0);
      ZipArchiveInputStream zipArchiveInputStream0 = new ZipArchiveInputStream(bufferedInputStream0);
      // Undeclared exception!
//      try { 
        zipArchiveInputStream0.getNextZipEntry();
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Enumeration<PushbackInputStream> enumeration0 = (Enumeration<PushbackInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false, true).when(enumeration0).hasMoreElements();
      doReturn((Object) null).when(enumeration0).nextElement();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      ZipArchiveInputStream zipArchiveInputStream0 = new ZipArchiveInputStream(sequenceInputStream0, (String) null);
      DataInputStream dataInputStream0 = new DataInputStream(zipArchiveInputStream0);
      zipArchiveInputStream0.read();
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)16;
      byteArray0[1] = (byte)16;
      byteArray0[2] = (byte) (-8);
      byteArray0[3] = (byte) (-59);
      zipArchiveInputStream0.read(byteArray0, (-1), 2145307879);
      zipArchiveInputStream0.markSupported();
      int int0 = 0;
      zipArchiveInputStream0.read(byteArray0, 2145307879, (int) (byte)16);
      zipArchiveInputStream0.close();
      zipArchiveInputStream0.skip(int0);
      ZipArchiveEntry zipArchiveEntry0 = zipArchiveInputStream0.getNextZipEntry();
      zipArchiveInputStream0.skip(zipArchiveEntry0.CRC_UNKNOWN);
      zipArchiveInputStream0.getNextEntry();
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      byte[] byteArray0 = new byte[43];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      ZipArchiveInputStream zipArchiveInputStream0 = new ZipArchiveInputStream(byteArrayInputStream0);
      zipArchiveInputStream0.getNextZipEntry();
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      DataInputStream dataInputStream0 = new DataInputStream((InputStream) null);
      ZipArchiveInputStream zipArchiveInputStream0 = new ZipArchiveInputStream(dataInputStream0);
      // Undeclared exception!
//      try { 
        zipArchiveInputStream0.getNextZipEntry();
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.io.DataInputStream", e);
//      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      ZipArchiveInputStream zipArchiveInputStream0 = new ZipArchiveInputStream(mockFileInputStream0);
      FileSystemHandling.shouldAllThrowIOExceptions();
//      try { 
        zipArchiveInputStream0.close();
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Simulated IOException
//         //
//         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
//      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ZipArchiveInputStream zipArchiveInputStream0 = new ZipArchiveInputStream((InputStream) null);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)80;
      byteArray0[1] = (byte)2;
      byteArray0[2] = (byte)7;
      byteArray0[3] = (byte)73;
      byteArray0[4] = (byte) (-1);
      ZipArchiveInputStream.matches(byteArray0, 46);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ZipArchiveInputStream zipArchiveInputStream0 = new ZipArchiveInputStream((InputStream) null);
      ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
      zipArchiveInputStream0.close();
//      try { 
        zipArchiveInputStream0.skip(3657L);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // The stream is closed
//         //
//         verifyException("org.apache.commons.compress.archivers.zip.ZipArchiveInputStream", e);
//      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      ZipArchiveInputStream zipArchiveInputStream0 = new ZipArchiveInputStream((InputStream) null);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-22);
      ZipArchiveInputStream.matches(byteArray0, (byte) (-22));
      ZipArchiveInputStream.matches(byteArray0, 4);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      assertFalse(fileDescriptor0.valid());
      assertNotNull(fileDescriptor0);
      
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      assertNotNull(mockFileInputStream0);
      
      ZipArchiveInputStream zipArchiveInputStream0 = new ZipArchiveInputStream(mockFileInputStream0);
      assertFalse(fileDescriptor0.valid());
      assertEquals(0L, zipArchiveInputStream0.getBytesRead());
      assertEquals(0, zipArchiveInputStream0.getCount());
      assertNotNull(zipArchiveInputStream0);
      
      zipArchiveInputStream0.close();
      assertFalse(fileDescriptor0.valid());
      assertEquals(0L, zipArchiveInputStream0.getBytesRead());
      assertEquals(0, zipArchiveInputStream0.getCount());
      
      ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
      assertEquals((-1L), zipArchiveEntry0.getCrc());
      assertEquals((-1L), zipArchiveEntry0.getCompressedSize());
      assertEquals(0, zipArchiveEntry0.getUnixMode());
      assertFalse(zipArchiveEntry0.isUnixSymlink());
      assertEquals((-1L), zipArchiveEntry0.getSize());
      assertFalse(zipArchiveEntry0.isDirectory());
      assertEquals("", zipArchiveEntry0.toString());
      assertNull(zipArchiveEntry0.getComment());
      assertEquals((-1), zipArchiveEntry0.getMethod());
      assertEquals(0, zipArchiveEntry0.getPlatform());
      assertEquals(0, zipArchiveEntry0.getInternalAttributes());
      assertEquals("", zipArchiveEntry0.getName());
      assertEquals(0, zipArchiveEntry0.getVersionMadeBy());
      assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
      assertEquals(0, zipArchiveEntry0.getRawFlag());
      assertEquals(0, zipArchiveEntry0.getVersionRequired());
      assertNotNull(zipArchiveEntry0);
      assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      
      zipArchiveInputStream0.canReadEntryData(zipArchiveEntry0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertEquals(5, byteArrayInputStream0.available());
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(5, byteArray0.length);
      assertNotNull(byteArrayInputStream0);
      
      ZipArchiveInputStream zipArchiveInputStream0 = new ZipArchiveInputStream(byteArrayInputStream0, (String) null, false);
      assertEquals(5, byteArrayInputStream0.available());
      assertEquals(0, zipArchiveInputStream0.getCount());
      assertEquals(0L, zipArchiveInputStream0.getBytesRead());
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(5, byteArray0.length);
      assertNotNull(zipArchiveInputStream0);
      
      long long0 = zipArchiveInputStream0.getBytesRead();
      assertEquals(5, byteArrayInputStream0.available());
      assertEquals(0, zipArchiveInputStream0.getCount());
      assertEquals(0L, zipArchiveInputStream0.getBytesRead());
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(5, byteArray0.length);
      assertEquals(0L, long0);
      
      ZipArchiveInputStream zipArchiveInputStream1 = new ZipArchiveInputStream(byteArrayInputStream0, "always");
      assertEquals(5, byteArrayInputStream0.available());
      assertEquals(0L, zipArchiveInputStream1.getBytesRead());
      assertEquals(0, zipArchiveInputStream1.getCount());
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(5, byteArray0.length);
      assertFalse(zipArchiveInputStream1.equals((Object)zipArchiveInputStream0));
      assertNotNull(zipArchiveInputStream1);
      
      long long1 = zipArchiveInputStream1.skip(0L);
      assertEquals(5, byteArrayInputStream0.available());
      assertEquals(0L, zipArchiveInputStream1.getBytesRead());
      assertEquals(0, zipArchiveInputStream1.getCount());
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(5, byteArray0.length);
      assertFalse(zipArchiveInputStream1.equals((Object)zipArchiveInputStream0));
      assertTrue(long1 == long0);
      assertEquals(0L, long1);
      assertNotSame(zipArchiveInputStream1, zipArchiveInputStream0);
      
      ZipArchiveEntry zipArchiveEntry0 = zipArchiveInputStream1.getNextZipEntry();
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(5L, zipArchiveInputStream1.getBytesRead());
      assertEquals(5, zipArchiveInputStream1.getCount());
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(5, byteArray0.length);
      assertFalse(zipArchiveInputStream1.equals((Object)zipArchiveInputStream0));
      assertNull(zipArchiveEntry0);
      assertNotSame(zipArchiveInputStream1, zipArchiveInputStream0);
      
      int int0 = byteArrayInputStream0.read();
      assertEquals(0, byteArrayInputStream0.available());
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(5, byteArray0.length);
      assertEquals((-1), int0);
      
      int int1 = zipArchiveInputStream1.read(byteArray0, (-1513), 1789569706);
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(5L, zipArchiveInputStream1.getBytesRead());
      assertEquals(5, zipArchiveInputStream1.getCount());
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(5, byteArray0.length);
      assertFalse(zipArchiveInputStream1.equals((Object)zipArchiveInputStream0));
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      assertNotSame(zipArchiveInputStream1, zipArchiveInputStream0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      assertFalse(fileDescriptor0.valid());
      assertNotNull(fileDescriptor0);
      
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      assertNotNull(mockFileInputStream0);
      
      ZipArchiveInputStream zipArchiveInputStream0 = new ZipArchiveInputStream(mockFileInputStream0);
      assertFalse(fileDescriptor0.valid());
      assertEquals(0L, zipArchiveInputStream0.getBytesRead());
      assertEquals(0, zipArchiveInputStream0.getCount());
      assertNotNull(zipArchiveInputStream0);
      
      zipArchiveInputStream0.close();
      assertFalse(fileDescriptor0.valid());
      assertEquals(0L, zipArchiveInputStream0.getBytesRead());
      assertEquals(0, zipArchiveInputStream0.getCount());
      
//      try { 
        zipArchiveInputStream0.read((byte[]) null, (-2506), 2092419964);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // The stream is closed
//         //
//         verifyException("org.apache.commons.compress.archivers.zip.ZipArchiveInputStream", e);
//      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)54;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)4;
      byteArray0[3] = (byte)26;
      byteArray0[4] = (byte) (-56);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertEquals(5, byteArrayInputStream0.available());
      assertArrayEquals(new byte[] {(byte)54, (byte)0, (byte)4, (byte)26, (byte) (-56)}, byteArray0);
      assertEquals(5, byteArray0.length);
      assertNotNull(byteArrayInputStream0);
      
      ZipArchiveInputStream zipArchiveInputStream0 = new ZipArchiveInputStream(byteArrayInputStream0, "always", false, false);
      assertEquals(5, byteArrayInputStream0.available());
      assertEquals(0L, zipArchiveInputStream0.getBytesRead());
      assertEquals(0, zipArchiveInputStream0.getCount());
      assertArrayEquals(new byte[] {(byte)54, (byte)0, (byte)4, (byte)26, (byte) (-56)}, byteArray0);
      assertEquals(5, byteArray0.length);
      assertNotNull(zipArchiveInputStream0);
      
      CpioArchiveEntry cpioArchiveEntry0 = new CpioArchiveEntry("", (byte)54);
      assertEquals(4, cpioArchiveEntry0.getAlignmentBoundary());
      assertEquals(0L, cpioArchiveEntry0.getInode());
      assertEquals(0L, cpioArchiveEntry0.getTime());
      assertEquals(110, cpioArchiveEntry0.getHeaderSize());
      assertEquals(32768L, cpioArchiveEntry0.getMode());
      assertEquals(0L, cpioArchiveEntry0.getUID());
      assertEquals(54L, cpioArchiveEntry0.getSize());
      assertEquals((short)1, cpioArchiveEntry0.getFormat());
      assertEquals(2, cpioArchiveEntry0.getDataPadCount());
      assertEquals(0L, cpioArchiveEntry0.getGID());
      assertEquals("", cpioArchiveEntry0.getName());
      assertEquals(1, cpioArchiveEntry0.getHeaderPadCount());
      assertNotNull(cpioArchiveEntry0);
      
      zipArchiveInputStream0.close();
      assertEquals(5, byteArrayInputStream0.available());
      assertEquals(0L, zipArchiveInputStream0.getBytesRead());
      assertEquals(0, zipArchiveInputStream0.getCount());
      assertArrayEquals(new byte[] {(byte)54, (byte)0, (byte)4, (byte)26, (byte) (-56)}, byteArray0);
      assertEquals(5, byteArray0.length);
      
      boolean boolean0 = zipArchiveInputStream0.canReadEntryData(cpioArchiveEntry0);
      assertEquals(5, byteArrayInputStream0.available());
      assertEquals(0L, zipArchiveInputStream0.getBytesRead());
      assertEquals(0, zipArchiveInputStream0.getCount());
      assertEquals(4, cpioArchiveEntry0.getAlignmentBoundary());
      assertEquals(0L, cpioArchiveEntry0.getInode());
      assertEquals(0L, cpioArchiveEntry0.getTime());
      assertEquals(110, cpioArchiveEntry0.getHeaderSize());
      assertEquals(32768L, cpioArchiveEntry0.getMode());
      assertEquals(0L, cpioArchiveEntry0.getUID());
      assertEquals(54L, cpioArchiveEntry0.getSize());
      assertEquals((short)1, cpioArchiveEntry0.getFormat());
      assertEquals(2, cpioArchiveEntry0.getDataPadCount());
      assertEquals(0L, cpioArchiveEntry0.getGID());
      assertEquals("", cpioArchiveEntry0.getName());
      assertEquals(1, cpioArchiveEntry0.getHeaderPadCount());
      assertArrayEquals(new byte[] {(byte)54, (byte)0, (byte)4, (byte)26, (byte) (-56)}, byteArray0);
      assertEquals(5, byteArray0.length);
      assertFalse(boolean0);
      
      long long0 = byteArrayInputStream0.skip((byte)26);
      assertEquals(0, byteArrayInputStream0.available());
      assertArrayEquals(new byte[] {(byte)54, (byte)0, (byte)4, (byte)26, (byte) (-56)}, byteArray0);
      assertEquals(5, byteArray0.length);
      assertEquals(5L, long0);
      
      long long1 = zipArchiveInputStream0.getBytesRead();
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(0L, zipArchiveInputStream0.getBytesRead());
      assertEquals(0, zipArchiveInputStream0.getCount());
      assertArrayEquals(new byte[] {(byte)54, (byte)0, (byte)4, (byte)26, (byte) (-56)}, byteArray0);
      assertEquals(5, byteArray0.length);
      assertFalse(long1 == long0);
      assertEquals(0L, long1);
      
      ZipArchiveInputStream zipArchiveInputStream1 = new ZipArchiveInputStream(byteArrayInputStream0, (String) null);
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(0L, zipArchiveInputStream1.getBytesRead());
      assertEquals(0, zipArchiveInputStream1.getCount());
      assertArrayEquals(new byte[] {(byte)54, (byte)0, (byte)4, (byte)26, (byte) (-56)}, byteArray0);
      assertEquals(5, byteArray0.length);
      assertFalse(zipArchiveInputStream1.equals((Object)zipArchiveInputStream0));
      assertNotNull(zipArchiveInputStream1);
      
      int int0 = zipArchiveInputStream1.read(byteArray0, (int) (byte)0, (int) (byte)54);
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(0L, zipArchiveInputStream1.getBytesRead());
      assertEquals(0, zipArchiveInputStream1.getCount());
      assertArrayEquals(new byte[] {(byte)54, (byte)0, (byte)4, (byte)26, (byte) (-56)}, byteArray0);
      assertEquals(5, byteArray0.length);
      assertFalse(zipArchiveInputStream1.equals((Object)zipArchiveInputStream0));
      assertEquals((-1), int0);
      assertNotSame(zipArchiveInputStream1, zipArchiveInputStream0);
      
      zipArchiveInputStream0.close();
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(0L, zipArchiveInputStream0.getBytesRead());
      assertEquals(0, zipArchiveInputStream0.getCount());
      assertArrayEquals(new byte[] {(byte)54, (byte)0, (byte)4, (byte)26, (byte) (-56)}, byteArray0);
      assertEquals(5, byteArray0.length);
      assertFalse(zipArchiveInputStream0.equals((Object)zipArchiveInputStream1));
      assertNotSame(zipArchiveInputStream0, zipArchiveInputStream1);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)54;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)4;
      byteArray0[3] = (byte)26;
      byteArray0[4] = (byte) (-56);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertEquals(5, byteArrayInputStream0.available());
      assertArrayEquals(new byte[] {(byte)54, (byte)0, (byte)4, (byte)26, (byte) (-56)}, byteArray0);
      assertEquals(5, byteArray0.length);
      assertNotNull(byteArrayInputStream0);
      
      ZipArchiveInputStream zipArchiveInputStream0 = new ZipArchiveInputStream(byteArrayInputStream0, "always", false, false);
      assertEquals(5, byteArrayInputStream0.available());
      assertEquals(0L, zipArchiveInputStream0.getBytesRead());
      assertEquals(0, zipArchiveInputStream0.getCount());
      assertArrayEquals(new byte[] {(byte)54, (byte)0, (byte)4, (byte)26, (byte) (-56)}, byteArray0);
      assertEquals(5, byteArray0.length);
      assertNotNull(zipArchiveInputStream0);
      
      CpioArchiveEntry cpioArchiveEntry0 = new CpioArchiveEntry("", (byte)54);
      assertEquals(1, cpioArchiveEntry0.getHeaderPadCount());
      assertEquals(110, cpioArchiveEntry0.getHeaderSize());
      assertEquals(0L, cpioArchiveEntry0.getUID());
      assertEquals(4, cpioArchiveEntry0.getAlignmentBoundary());
      assertEquals(0L, cpioArchiveEntry0.getInode());
      assertEquals("", cpioArchiveEntry0.getName());
      assertEquals((short)1, cpioArchiveEntry0.getFormat());
      assertEquals(2, cpioArchiveEntry0.getDataPadCount());
      assertEquals(54L, cpioArchiveEntry0.getSize());
      assertEquals(0L, cpioArchiveEntry0.getTime());
      assertEquals(32768L, cpioArchiveEntry0.getMode());
      assertEquals(0L, cpioArchiveEntry0.getGID());
      assertNotNull(cpioArchiveEntry0);
      
      boolean boolean0 = zipArchiveInputStream0.canReadEntryData(cpioArchiveEntry0);
      assertEquals(5, byteArrayInputStream0.available());
      assertEquals(0L, zipArchiveInputStream0.getBytesRead());
      assertEquals(0, zipArchiveInputStream0.getCount());
      assertEquals(1, cpioArchiveEntry0.getHeaderPadCount());
      assertEquals(110, cpioArchiveEntry0.getHeaderSize());
      assertEquals(0L, cpioArchiveEntry0.getUID());
      assertEquals(4, cpioArchiveEntry0.getAlignmentBoundary());
      assertEquals(0L, cpioArchiveEntry0.getInode());
      assertEquals("", cpioArchiveEntry0.getName());
      assertEquals((short)1, cpioArchiveEntry0.getFormat());
      assertEquals(2, cpioArchiveEntry0.getDataPadCount());
      assertEquals(54L, cpioArchiveEntry0.getSize());
      assertEquals(0L, cpioArchiveEntry0.getTime());
      assertEquals(32768L, cpioArchiveEntry0.getMode());
      assertEquals(0L, cpioArchiveEntry0.getGID());
      assertArrayEquals(new byte[] {(byte)54, (byte)0, (byte)4, (byte)26, (byte) (-56)}, byteArray0);
      assertEquals(5, byteArray0.length);
      assertFalse(boolean0);
      
      long long0 = byteArrayInputStream0.skip((byte)26);
      assertEquals(0, byteArrayInputStream0.available());
      assertArrayEquals(new byte[] {(byte)54, (byte)0, (byte)4, (byte)26, (byte) (-56)}, byteArray0);
      assertEquals(5, byteArray0.length);
      assertEquals(5L, long0);
      
      long long1 = zipArchiveInputStream0.getBytesRead();
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(0L, zipArchiveInputStream0.getBytesRead());
      assertEquals(0, zipArchiveInputStream0.getCount());
      assertArrayEquals(new byte[] {(byte)54, (byte)0, (byte)4, (byte)26, (byte) (-56)}, byteArray0);
      assertEquals(5, byteArray0.length);
      assertFalse(long1 == long0);
      assertEquals(0L, long1);
      
      ZipArchiveEntry zipArchiveEntry0 = zipArchiveInputStream0.getNextZipEntry();
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(0L, zipArchiveInputStream0.getBytesRead());
      assertEquals(0, zipArchiveInputStream0.getCount());
      assertArrayEquals(new byte[] {(byte)54, (byte)0, (byte)4, (byte)26, (byte) (-56)}, byteArray0);
      assertEquals(5, byteArray0.length);
      assertNull(zipArchiveEntry0);
      
      int int0 = byteArrayInputStream0.read();
      assertEquals(0, byteArrayInputStream0.available());
      assertArrayEquals(new byte[] {(byte)54, (byte)0, (byte)4, (byte)26, (byte) (-56)}, byteArray0);
      assertEquals(5, byteArray0.length);
      assertEquals((-1), int0);
      
      zipArchiveInputStream0.close();
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(0L, zipArchiveInputStream0.getBytesRead());
      assertEquals(0, zipArchiveInputStream0.getCount());
      assertArrayEquals(new byte[] {(byte)54, (byte)0, (byte)4, (byte)26, (byte) (-56)}, byteArray0);
      assertEquals(5, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Enumeration<PushbackInputStream> enumeration0 = (Enumeration<PushbackInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      assertNotNull(sequenceInputStream0);
      
      ZipArchiveInputStream zipArchiveInputStream0 = new ZipArchiveInputStream(sequenceInputStream0, (String) null);
      assertEquals(0, zipArchiveInputStream0.getCount());
      assertEquals(0L, zipArchiveInputStream0.getBytesRead());
      assertNotNull(zipArchiveInputStream0);
      
      DataInputStream dataInputStream0 = new DataInputStream(zipArchiveInputStream0);
      assertEquals(0, zipArchiveInputStream0.getCount());
      assertEquals(0L, zipArchiveInputStream0.getBytesRead());
      assertNotNull(dataInputStream0);
      
      ArchiveEntry archiveEntry0 = zipArchiveInputStream0.getNextEntry();
      assertEquals(0, zipArchiveInputStream0.getCount());
      assertEquals(0L, zipArchiveInputStream0.getBytesRead());
      assertNull(archiveEntry0);
      
      ZipArchiveInputStream zipArchiveInputStream1 = new ZipArchiveInputStream(dataInputStream0, (String) null, true, true);
      assertEquals(0, zipArchiveInputStream0.getCount());
      assertEquals(0L, zipArchiveInputStream0.getBytesRead());
      assertEquals(0, zipArchiveInputStream1.getCount());
      assertEquals(0L, zipArchiveInputStream1.getBytesRead());
      assertFalse(zipArchiveInputStream1.equals((Object)zipArchiveInputStream0));
      assertNotNull(zipArchiveInputStream1);
      
      ZipArchiveEntry zipArchiveEntry0 = zipArchiveInputStream1.getNextZipEntry();
      assertEquals(0, zipArchiveInputStream0.getCount());
      assertEquals(0L, zipArchiveInputStream0.getBytesRead());
      assertEquals(0, zipArchiveInputStream1.getCount());
      assertEquals(0L, zipArchiveInputStream1.getBytesRead());
      assertFalse(zipArchiveInputStream0.equals((Object)zipArchiveInputStream1));
      assertFalse(zipArchiveInputStream1.equals((Object)zipArchiveInputStream0));
      assertNull(zipArchiveEntry0);
      assertNotSame(zipArchiveInputStream0, zipArchiveInputStream1);
      assertNotSame(zipArchiveInputStream1, zipArchiveInputStream0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)55;
      byteArray0[1] = (byte)55;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertEquals(9, byteArrayInputStream0.available());
      assertArrayEquals(new byte[] {(byte)55, (byte)55, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(9, byteArray0.length);
      assertNotNull(byteArrayInputStream0);
      
      ZipArchiveInputStream zipArchiveInputStream0 = new ZipArchiveInputStream(byteArrayInputStream0, "always", false, false);
      assertEquals(9, byteArrayInputStream0.available());
      assertEquals(0L, zipArchiveInputStream0.getBytesRead());
      assertEquals(0, zipArchiveInputStream0.getCount());
      assertArrayEquals(new byte[] {(byte)55, (byte)55, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(9, byteArray0.length);
      assertNotNull(zipArchiveInputStream0);
      
      long long0 = zipArchiveInputStream0.getBytesRead();
      assertEquals(9, byteArrayInputStream0.available());
      assertEquals(0L, zipArchiveInputStream0.getBytesRead());
      assertEquals(0, zipArchiveInputStream0.getCount());
      assertArrayEquals(new byte[] {(byte)55, (byte)55, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(9, byteArray0.length);
      assertEquals(0L, long0);
      
      long long1 = zipArchiveInputStream0.skip(1024L);
      assertEquals(9, byteArrayInputStream0.available());
      assertEquals(0L, zipArchiveInputStream0.getBytesRead());
      assertEquals(0, zipArchiveInputStream0.getCount());
      assertArrayEquals(new byte[] {(byte)55, (byte)55, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(9, byteArray0.length);
      assertTrue(long1 == long0);
      assertEquals(0L, long1);
      
      ZipArchiveEntry zipArchiveEntry0 = zipArchiveInputStream0.getNextZipEntry();
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(9L, zipArchiveInputStream0.getBytesRead());
      assertEquals(9, zipArchiveInputStream0.getCount());
      assertArrayEquals(new byte[] {(byte)55, (byte)55, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(9, byteArray0.length);
      assertNull(zipArchiveEntry0);
      
      int int0 = byteArrayInputStream0.read();
      assertEquals(0, byteArrayInputStream0.available());
      assertArrayEquals(new byte[] {(byte)55, (byte)55, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(9, byteArray0.length);
      assertEquals((-1), int0);
      
      int int1 = zipArchiveInputStream0.read(byteArray0, (int) (byte)26, 2145307879);
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(9L, zipArchiveInputStream0.getBytesRead());
      assertEquals(9, zipArchiveInputStream0.getCount());
      assertArrayEquals(new byte[] {(byte)55, (byte)55, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(9, byteArray0.length);
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)55;
      byteArray0[1] = (byte)13;
      byteArray0[2] = (byte) (-73);
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      assertFalse(boolean0);
      
      byteArray0[3] = (byte)38;
      boolean boolean1 = ZipArchiveInputStream.matches(byteArray0, 761);
      assertArrayEquals(new byte[] {(byte)55, (byte)13, (byte) (-73), (byte)38, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(9, byteArray0.length);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      ZipArchiveInputStream zipArchiveInputStream0 = new ZipArchiveInputStream((InputStream) null);
      assertEquals(0L, zipArchiveInputStream0.getBytesRead());
      assertEquals(0, zipArchiveInputStream0.getCount());
      assertNotNull(zipArchiveInputStream0);
      
      byte[] byteArray1 = new byte[8];
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      byteArray1[0] = (byte)13;
      byteArray1[1] = (byte)33;
      byteArray1[2] = (byte)55;
      byteArray1[3] = (byte) (-73);
      byteArray1[4] = (byte)38;
      byteArray1[5] = (byte)55;
      byteArray1[6] = (byte) (-73);
      byteArray1[7] = (byte)13;
      int int0 = zipArchiveInputStream0.read(byteArray1, 1, 1392);
      assertEquals(0L, zipArchiveInputStream0.getBytesRead());
      assertEquals(0, zipArchiveInputStream0.getCount());
      assertArrayEquals(new byte[] {(byte)13, (byte)33, (byte)55, (byte) (-73), (byte)38, (byte)55, (byte) (-73), (byte)13}, byteArray1);
      assertEquals(8, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertEquals((-1), int0);
      assertNotSame(byteArray1, byteArray0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      assertFalse(fileDescriptor0.valid());
      assertNotNull(fileDescriptor0);
      
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      assertNotNull(mockFileInputStream0);
      
      ZipArchiveInputStream zipArchiveInputStream0 = new ZipArchiveInputStream(mockFileInputStream0);
      assertFalse(fileDescriptor0.valid());
      assertEquals(0L, zipArchiveInputStream0.getBytesRead());
      assertEquals(0, zipArchiveInputStream0.getCount());
      assertNotNull(zipArchiveInputStream0);
      
      zipArchiveInputStream0.close();
      assertFalse(fileDescriptor0.valid());
      assertEquals(0L, zipArchiveInputStream0.getBytesRead());
      assertEquals(0, zipArchiveInputStream0.getCount());
      
      ZipArchiveEntry zipArchiveEntry0 = zipArchiveInputStream0.getNextZipEntry();
      assertFalse(fileDescriptor0.valid());
      assertEquals(0L, zipArchiveInputStream0.getBytesRead());
      assertEquals(0, zipArchiveInputStream0.getCount());
      assertNull(zipArchiveEntry0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Enumeration<PushbackInputStream> enumeration0 = (Enumeration<PushbackInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false, false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      assertNotNull(sequenceInputStream0);
      
      ZipArchiveInputStream zipArchiveInputStream0 = new ZipArchiveInputStream(sequenceInputStream0, (String) null);
      assertEquals(0, zipArchiveInputStream0.getCount());
      assertEquals(0L, zipArchiveInputStream0.getBytesRead());
      assertNotNull(zipArchiveInputStream0);
      
      DataInputStream dataInputStream0 = new DataInputStream(zipArchiveInputStream0);
      assertEquals(0, zipArchiveInputStream0.getCount());
      assertEquals(0L, zipArchiveInputStream0.getBytesRead());
      assertNotNull(dataInputStream0);
      
      int int0 = zipArchiveInputStream0.read();
      assertEquals(0, zipArchiveInputStream0.getCount());
      assertEquals(0L, zipArchiveInputStream0.getBytesRead());
      assertEquals((-1), int0);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)16;
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte) (-19);
      byteArray0[3] = (byte) (-59);
      int int1 = zipArchiveInputStream0.read(byteArray0, (-1), 2145307879);
      assertEquals(0, zipArchiveInputStream0.getCount());
      assertEquals(0L, zipArchiveInputStream0.getBytesRead());
      assertArrayEquals(new byte[] {(byte)16, (byte) (-1), (byte) (-19), (byte) (-59)}, byteArray0);
      assertEquals(4, byteArray0.length);
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      
      boolean boolean0 = zipArchiveInputStream0.markSupported();
      assertEquals(0, zipArchiveInputStream0.getCount());
      assertEquals(0L, zipArchiveInputStream0.getBytesRead());
      assertFalse(boolean0);
      
      int int2 = zipArchiveInputStream0.read(byteArray0, 2145307879, (int) (byte) (-1));
      assertEquals(0, zipArchiveInputStream0.getCount());
      assertEquals(0L, zipArchiveInputStream0.getBytesRead());
      assertArrayEquals(new byte[] {(byte)16, (byte) (-1), (byte) (-19), (byte) (-59)}, byteArray0);
      assertEquals(4, byteArray0.length);
      assertTrue(int2 == int1);
      assertTrue(int2 == int0);
      assertEquals((-1), int2);
      
      zipArchiveInputStream0.close();
      assertEquals(0, zipArchiveInputStream0.getCount());
      assertEquals(0L, zipArchiveInputStream0.getBytesRead());
      
      long long0 = zipArchiveInputStream0.skip(0);
      assertEquals(0, zipArchiveInputStream0.getCount());
      assertEquals(0L, zipArchiveInputStream0.getBytesRead());
      assertEquals(0L, long0);
      
      ZipArchiveEntry zipArchiveEntry0 = zipArchiveInputStream0.getNextZipEntry();
      assertEquals(0, zipArchiveInputStream0.getCount());
      assertEquals(0L, zipArchiveInputStream0.getBytesRead());
      assertNull(zipArchiveEntry0);
      
      // Undeclared exception!
//      try { 
        zipArchiveInputStream0.skip((-1));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.compress.archivers.zip.ZipArchiveInputStream", e);
//      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)55;
      byteArray0[1] = (byte)13;
      byteArray0[2] = (byte) (-73);
      byteArray0[3] = (byte)38;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte) (-1);
      byteArray0[6] = (byte)106;
      byteArray0[7] = (byte)0;
      byteArray0[8] = (byte)0;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 201, (byte)13);
      assertEquals((-192), byteArrayInputStream0.available());
      assertArrayEquals(new byte[] {(byte)55, (byte)13, (byte) (-73), (byte)38, (byte)0, (byte) (-1), (byte)106, (byte)0, (byte)0}, byteArray0);
      assertEquals(9, byteArray0.length);
      assertNotNull(byteArrayInputStream0);
      
      ZipArchiveInputStream zipArchiveInputStream0 = new ZipArchiveInputStream(byteArrayInputStream0);
      assertEquals((-192), byteArrayInputStream0.available());
      assertEquals(0, zipArchiveInputStream0.getCount());
      assertEquals(0L, zipArchiveInputStream0.getBytesRead());
      assertArrayEquals(new byte[] {(byte)55, (byte)13, (byte) (-73), (byte)38, (byte)0, (byte) (-1), (byte)106, (byte)0, (byte)0}, byteArray0);
      assertEquals(9, byteArray0.length);
      assertNotNull(zipArchiveInputStream0);
      
      long long0 = zipArchiveInputStream0.skip((byte)38);
      assertEquals((-192), byteArrayInputStream0.available());
      assertEquals(0, zipArchiveInputStream0.getCount());
      assertEquals(0L, zipArchiveInputStream0.getBytesRead());
      assertArrayEquals(new byte[] {(byte)55, (byte)13, (byte) (-73), (byte)38, (byte)0, (byte) (-1), (byte)106, (byte)0, (byte)0}, byteArray0);
      assertEquals(9, byteArray0.length);
      assertEquals(0L, long0);
      
      ZipArchiveEntry zipArchiveEntry0 = zipArchiveInputStream0.getNextZipEntry();
      assertEquals((-192), byteArrayInputStream0.available());
      assertEquals(0, zipArchiveInputStream0.getCount());
      assertEquals(0L, zipArchiveInputStream0.getBytesRead());
      assertArrayEquals(new byte[] {(byte)55, (byte)13, (byte) (-73), (byte)38, (byte)0, (byte) (-1), (byte)106, (byte)0, (byte)0}, byteArray0);
      assertEquals(9, byteArray0.length);
      assertNull(zipArchiveEntry0);
      
      zipArchiveInputStream0.mark(51);
      assertEquals((-192), byteArrayInputStream0.available());
      assertEquals(0, zipArchiveInputStream0.getCount());
      assertEquals(0L, zipArchiveInputStream0.getBytesRead());
      assertArrayEquals(new byte[] {(byte)55, (byte)13, (byte) (-73), (byte)38, (byte)0, (byte) (-1), (byte)106, (byte)0, (byte)0}, byteArray0);
      assertEquals(9, byteArray0.length);
      
      int int0 = zipArchiveInputStream0.read(byteArray0, (-1164), (-619));
      assertEquals((-192), byteArrayInputStream0.available());
      assertEquals(0, zipArchiveInputStream0.getCount());
      assertEquals(0L, zipArchiveInputStream0.getBytesRead());
      assertArrayEquals(new byte[] {(byte)55, (byte)13, (byte) (-73), (byte)38, (byte)0, (byte) (-1), (byte)106, (byte)0, (byte)0}, byteArray0);
      assertEquals(9, byteArray0.length);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-62);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte)0, 30);
      assertEquals(5, byteArrayInputStream0.available());
      assertArrayEquals(new byte[] {(byte) (-62), (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(5, byteArray0.length);
      assertNotNull(byteArrayInputStream0);
      
      ZipArchiveInputStream zipArchiveInputStream0 = new ZipArchiveInputStream(byteArrayInputStream0);
      assertEquals(5, byteArrayInputStream0.available());
      assertEquals(0L, zipArchiveInputStream0.getBytesRead());
      assertEquals(0, zipArchiveInputStream0.getCount());
      assertArrayEquals(new byte[] {(byte) (-62), (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(5, byteArray0.length);
      assertNotNull(zipArchiveInputStream0);
      
      long long0 = zipArchiveInputStream0.skip(1345L);
      assertEquals(5, byteArrayInputStream0.available());
      assertEquals(0L, zipArchiveInputStream0.getBytesRead());
      assertEquals(0, zipArchiveInputStream0.getCount());
      assertArrayEquals(new byte[] {(byte) (-62), (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(5, byteArray0.length);
      assertEquals(0L, long0);
      
      ZipArchiveEntry zipArchiveEntry0 = zipArchiveInputStream0.getNextZipEntry();
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(5, zipArchiveInputStream0.getCount());
      assertEquals(5L, zipArchiveInputStream0.getBytesRead());
      assertArrayEquals(new byte[] {(byte) (-62), (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(5, byteArray0.length);
      assertNull(zipArchiveEntry0);
      
      zipArchiveInputStream0.mark((byte)0);
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(5, zipArchiveInputStream0.getCount());
      assertEquals(5L, zipArchiveInputStream0.getBytesRead());
      assertArrayEquals(new byte[] {(byte) (-62), (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(5, byteArray0.length);
      
      ZipArchiveInputStream zipArchiveInputStream1 = new ZipArchiveInputStream(zipArchiveInputStream0);
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(5, zipArchiveInputStream0.getCount());
      assertEquals(5L, zipArchiveInputStream0.getBytesRead());
      assertEquals(0L, zipArchiveInputStream1.getBytesRead());
      assertEquals(0, zipArchiveInputStream1.getCount());
      assertArrayEquals(new byte[] {(byte) (-62), (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(5, byteArray0.length);
      assertFalse(zipArchiveInputStream1.equals((Object)zipArchiveInputStream0));
      assertNotNull(zipArchiveInputStream1);
      
      int int0 = (-2466);
      // Undeclared exception!
//      try { 
        zipArchiveInputStream1.skip((byte) (-62));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.compress.archivers.zip.ZipArchiveInputStream", e);
//      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Enumeration<PushbackInputStream> enumeration0 = (Enumeration<PushbackInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false, false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      assertNotNull(sequenceInputStream0);
      
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(sequenceInputStream0, 2393);
      assertNotNull(bufferedInputStream0);
      
      ZipArchiveInputStream zipArchiveInputStream0 = new ZipArchiveInputStream(bufferedInputStream0);
      assertEquals(0, zipArchiveInputStream0.getCount());
      assertEquals(0L, zipArchiveInputStream0.getBytesRead());
      assertNotNull(zipArchiveInputStream0);
      
      long long0 = zipArchiveInputStream0.skip(2393);
      assertEquals(0, zipArchiveInputStream0.getCount());
      assertEquals(0L, zipArchiveInputStream0.getBytesRead());
      assertEquals(0L, long0);
      
      String string0 = "";
      zipArchiveInputStream0.close();
      assertEquals(0, zipArchiveInputStream0.getCount());
      assertEquals(0L, zipArchiveInputStream0.getBytesRead());
      
      bufferedInputStream0.close();
      ZipArchiveInputStream zipArchiveInputStream1 = null;
//      try {
        zipArchiveInputStream1 = new ZipArchiveInputStream(zipArchiveInputStream0, "");
//        fail("Expecting exception: IllegalCharsetNameException");
      
//      } catch(IllegalCharsetNameException e) {
//         //
//         // 
//         //
//         verifyException("java.nio.charset.Charset", e);
//      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      // Undeclared exception!
//      try { 
        ZipArchiveInputStream.matches(byteArray0, 663);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 0
//         //
//         verifyException("org.apache.commons.compress.archivers.zip.ZipArchiveInputStream", e);
//      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      ZipArchiveInputStream zipArchiveInputStream0 = null;
//      try {
        zipArchiveInputStream0 = new ZipArchiveInputStream((InputStream) null, "", false);
//        fail("Expecting exception: IllegalCharsetNameException");
      
//      } catch(IllegalCharsetNameException e) {
//         //
//         // 
//         //
//         verifyException("java.nio.charset.Charset", e);
//      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      boolean boolean0 = ZipArchiveInputStream.matches((byte[]) null, (-1885));
      assertFalse(boolean0);
      
      Enumeration<PushbackInputStream> enumeration0 = (Enumeration<PushbackInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      assertNotNull(sequenceInputStream0);
      
      SequenceInputStream sequenceInputStream1 = new SequenceInputStream(sequenceInputStream0, sequenceInputStream0);
      assertFalse(sequenceInputStream1.equals((Object)sequenceInputStream0));
      assertNotNull(sequenceInputStream1);
      
      ZipArchiveInputStream zipArchiveInputStream0 = null;
//      try {
        zipArchiveInputStream0 = new ZipArchiveInputStream(sequenceInputStream1, "");
//        fail("Expecting exception: IllegalCharsetNameException");
      
//      } catch(IllegalCharsetNameException e) {
//         //
//         // 
//         //
//         verifyException("java.nio.charset.Charset", e);
//      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream(3);
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedInputStream0);
      
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(pipedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(bufferedInputStream0);
      
      boolean boolean0 = bufferedInputStream0.markSupported();
      assertEquals(0, pipedInputStream0.available());
      assertTrue(boolean0);
      
      ZipArchiveInputStream zipArchiveInputStream0 = new ZipArchiveInputStream(bufferedInputStream0, (String) null);
      assertEquals(0, pipedInputStream0.available());
      assertEquals(0L, zipArchiveInputStream0.getBytesRead());
      assertEquals(0, zipArchiveInputStream0.getCount());
      assertNotNull(zipArchiveInputStream0);
      
      zipArchiveInputStream0.close();
      assertEquals(0, pipedInputStream0.available());
      assertEquals(0L, zipArchiveInputStream0.getBytesRead());
      assertEquals(0, zipArchiveInputStream0.getCount());
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-93);
      byteArray0[2] = (byte)30;
      byteArray0[3] = (byte)20;
      byteArray0[4] = (byte)119;
      byteArray0[5] = (byte)41;
      byteArray0[6] = (byte)30;
      byteArray0[7] = (byte)0;
      boolean boolean1 = ZipArchiveInputStream.matches(byteArray0, (-815));
      assertArrayEquals(new byte[] {(byte)0, (byte) (-93), (byte)30, (byte)20, (byte)119, (byte)41, (byte)30, (byte)0}, byteArray0);
      assertEquals(8, byteArray0.length);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)83;
      byteArray0[1] = (byte) (-41);
      byteArray0[2] = (byte)16;
      byteArray0[3] = (byte) (-39);
      byteArray0[4] = (byte) (-22);
      byteArray0[5] = (byte) (-20);
      byteArray0[6] = (byte)100;
      boolean boolean0 = ZipArchiveInputStream.matches(byteArray0, 46);
      assertArrayEquals(new byte[] {(byte)83, (byte) (-41), (byte)16, (byte) (-39), (byte) (-22), (byte) (-20), (byte)100}, byteArray0);
      assertEquals(7, byteArray0.length);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)54;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)4;
      byteArray0[3] = (byte)26;
      byteArray0[4] = (byte) (-56);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertEquals(5, byteArrayInputStream0.available());
      assertArrayEquals(new byte[] {(byte)54, (byte)0, (byte)4, (byte)26, (byte) (-56)}, byteArray0);
      assertEquals(5, byteArray0.length);
      assertNotNull(byteArrayInputStream0);
      
      ZipArchiveInputStream zipArchiveInputStream0 = new ZipArchiveInputStream(byteArrayInputStream0, "always", true, true);
      assertEquals(5, byteArrayInputStream0.available());
      assertEquals(0, zipArchiveInputStream0.getCount());
      assertEquals(0L, zipArchiveInputStream0.getBytesRead());
      assertArrayEquals(new byte[] {(byte)54, (byte)0, (byte)4, (byte)26, (byte) (-56)}, byteArray0);
      assertEquals(5, byteArray0.length);
      assertNotNull(zipArchiveInputStream0);
      
      long long0 = byteArrayInputStream0.skip((byte)26);
      assertEquals(0, byteArrayInputStream0.available());
      assertArrayEquals(new byte[] {(byte)54, (byte)0, (byte)4, (byte)26, (byte) (-56)}, byteArray0);
      assertEquals(5, byteArray0.length);
      assertEquals(5L, long0);
      
      long long1 = zipArchiveInputStream0.skip(0L);
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(0, zipArchiveInputStream0.getCount());
      assertEquals(0L, zipArchiveInputStream0.getBytesRead());
      assertArrayEquals(new byte[] {(byte)54, (byte)0, (byte)4, (byte)26, (byte) (-56)}, byteArray0);
      assertEquals(5, byteArray0.length);
      assertFalse(long1 == long0);
      assertEquals(0L, long1);
      
      ZipArchiveEntry zipArchiveEntry0 = zipArchiveInputStream0.getNextZipEntry();
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(0, zipArchiveInputStream0.getCount());
      assertEquals(0L, zipArchiveInputStream0.getBytesRead());
      assertArrayEquals(new byte[] {(byte)54, (byte)0, (byte)4, (byte)26, (byte) (-56)}, byteArray0);
      assertEquals(5, byteArray0.length);
      assertNull(zipArchiveEntry0);
      
      int int0 = byteArrayInputStream0.read();
      assertEquals(0, byteArrayInputStream0.available());
      assertArrayEquals(new byte[] {(byte)54, (byte)0, (byte)4, (byte)26, (byte) (-56)}, byteArray0);
      assertEquals(5, byteArray0.length);
      assertEquals((-1), int0);
      
      int int1 = zipArchiveInputStream0.read(byteArray0, 8993, 0);
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(0, zipArchiveInputStream0.getCount());
      assertEquals(0L, zipArchiveInputStream0.getBytesRead());
      assertArrayEquals(new byte[] {(byte)54, (byte)0, (byte)4, (byte)26, (byte) (-56)}, byteArray0);
      assertEquals(5, byteArray0.length);
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      DataInputStream dataInputStream0 = new DataInputStream((InputStream) null);
      assertNotNull(dataInputStream0);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-91);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-37);
      byteArray0[3] = (byte)85;
      dataInputStream0.readFully(byteArray0, (-662), 0);
      assertArrayEquals(new byte[] {(byte) (-91), (byte)0, (byte) (-37), (byte)85}, byteArray0);
      assertEquals(4, byteArray0.length);
      
      ZipArchiveInputStream zipArchiveInputStream0 = null;
//      try {
        zipArchiveInputStream0 = new ZipArchiveInputStream(dataInputStream0, ".O#_N-$|{QA@6jH");
//        fail("Expecting exception: IllegalCharsetNameException");
      
//      } catch(IllegalCharsetNameException e) {
//         //
//         // .O#_N-$|{QA@6jH
//         //
//         verifyException("java.nio.charset.Charset", e);
//      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      byte[] byteArray0 = null;
      int int0 = 33;
      // Undeclared exception!
//      try { 
        ZipArchiveInputStream.matches((byte[]) null, 33);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.compress.archivers.zip.ZipArchiveInputStream", e);
//      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      ZipArchiveInputStream zipArchiveInputStream0 = new ZipArchiveInputStream((InputStream) null);
      assertEquals(0L, zipArchiveInputStream0.getBytesRead());
      assertEquals(0, zipArchiveInputStream0.getCount());
      assertNotNull(zipArchiveInputStream0);
      
//      try { 
        zipArchiveInputStream0.getNextZipEntry();
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Stream closed
//         //
//         verifyException("java.io.PushbackInputStream", e);
//      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      String string0 = null;
      ZipArchiveInputStream zipArchiveInputStream0 = new ZipArchiveInputStream((InputStream) null, (String) null);
      assertEquals(0L, zipArchiveInputStream0.getBytesRead());
      assertEquals(0, zipArchiveInputStream0.getCount());
      assertNotNull(zipArchiveInputStream0);
      
//      try { 
        zipArchiveInputStream0.getNextEntry();
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Stream closed
//         //
//         verifyException("java.io.PushbackInputStream", e);
//      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      ZipArchiveInputStream zipArchiveInputStream0 = null;
//      try {
        zipArchiveInputStream0 = new ZipArchiveInputStream((InputStream) null, "Truncated ZIP file", true, false);
//        fail("Expecting exception: IllegalCharsetNameException");
      
//      } catch(IllegalCharsetNameException e) {
//         //
//         // Truncated ZIP file
//         //
//         verifyException("java.nio.charset.Charset", e);
//      }
  }
}
