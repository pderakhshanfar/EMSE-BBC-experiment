/*
 * This file was automatically generated by EvoSuite
 * Wed Oct 20 14:41:42 GMT 2021
 */

package org.apache.commons.compress.utils;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedInputStream;
import java.io.ByteArrayInputStream;
import java.io.FileDescriptor;
import java.io.IOException;
import java.io.InputStream;
import java.io.PipedInputStream;
import java.io.PushbackInputStream;
import java.io.SequenceInputStream;
import java.nio.ByteBuffer;
import java.util.Enumeration;
import java.util.zip.Adler32;
import java.util.zip.CRC32;
import java.util.zip.Checksum;
import org.apache.commons.compress.utils.ChecksumCalculatingInputStream;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFileInputStream;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class ChecksumCalculatingInputStream_ESTest extends ChecksumCalculatingInputStream_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Adler32 adler32_0 = new Adler32();
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      byte[] byteArray0 = new byte[2];
      adler32_0.update(byteArray0);
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-97);
      mockFileInputStream0.read(byteArray0, (-1), (-1133));
      ChecksumCalculatingInputStream checksumCalculatingInputStream0 = new ChecksumCalculatingInputStream(adler32_0, mockFileInputStream0);
      // Undeclared exception!
//      try { 
        checksumCalculatingInputStream0.read(byteArray0, (-920), (-891));
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.util.zip.Adler32", e);
//      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)112;
      byteArray0[1] = (byte) (-11);
      byteArray0[2] = (byte) (-111);
      byteArray0[3] = (byte)127;
      byteArray0[4] = (byte) (-124);
      byteArray0[5] = (byte)0;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      CRC32 cRC32_0 = new CRC32();
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (-1303), 217);
      ChecksumCalculatingInputStream checksumCalculatingInputStream0 = new ChecksumCalculatingInputStream(cRC32_0, byteArrayInputStream0);
      // Undeclared exception!
//      try { 
        checksumCalculatingInputStream0.read(byteArray0);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.io.ByteArrayInputStream", e);
//      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      CRC32 cRC32_0 = new CRC32();
      ChecksumCalculatingInputStream checksumCalculatingInputStream0 = new ChecksumCalculatingInputStream(cRC32_0, (InputStream) null);
      ChecksumCalculatingInputStream checksumCalculatingInputStream1 = new ChecksumCalculatingInputStream(cRC32_0, checksumCalculatingInputStream0);
      // Undeclared exception!
//      try { 
        checksumCalculatingInputStream1.read();
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.compress.utils.ChecksumCalculatingInputStream", e);
//      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Adler32 adler32_0 = new Adler32();
      byte[] byteArray0 = new byte[2];
      ByteBuffer byteBuffer0 = ByteBuffer.wrap(byteArray0);
      adler32_0.update(byteBuffer0);
      ByteBuffer.wrap(byteArray0);
      adler32_0.update(byteBuffer0);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (-551), 164);
      ChecksumCalculatingInputStream checksumCalculatingInputStream0 = new ChecksumCalculatingInputStream(adler32_0, byteArrayInputStream0);
      // Undeclared exception!
//      try { 
        checksumCalculatingInputStream0.read();
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // -551
//         //
//         verifyException("java.io.ByteArrayInputStream", e);
//      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      CRC32 cRC32_0 = new CRC32();
      byte[] byteArray0 = new byte[1];
      cRC32_0.update(byteArray0);
      byteArray0[0] = (byte)0;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      ChecksumCalculatingInputStream checksumCalculatingInputStream0 = new ChecksumCalculatingInputStream(cRC32_0, byteArrayInputStream0);
      int int0 = checksumCalculatingInputStream0.read(byteArray0, (int) (byte)0, (int) (byte)0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      CRC32 cRC32_0 = new CRC32();
      byte[] byteArray0 = new byte[0];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (-234), (-15));
      ChecksumCalculatingInputStream checksumCalculatingInputStream0 = new ChecksumCalculatingInputStream(cRC32_0, (InputStream) null);
      // Undeclared exception!
//      try { 
        checksumCalculatingInputStream0.skip((-234));
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.compress.utils.ChecksumCalculatingInputStream", e);
//      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      CRC32 cRC32_0 = new CRC32();
      byte[] byteArray0 = new byte[6];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      ByteArrayInputStream byteArrayInputStream1 = new ByteArrayInputStream(byteArray0);
      ChecksumCalculatingInputStream checksumCalculatingInputStream0 = new ChecksumCalculatingInputStream(cRC32_0, byteArrayInputStream0);
      checksumCalculatingInputStream0.getValue();
      long long0 = checksumCalculatingInputStream0.skip((-989L));
      assertEquals(3523407757L, checksumCalculatingInputStream0.getValue());
      assertEquals(1L, long0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      CRC32 cRC32_0 = new CRC32();
      byte[] byteArray0 = new byte[0];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      ChecksumCalculatingInputStream checksumCalculatingInputStream0 = new ChecksumCalculatingInputStream(cRC32_0, byteArrayInputStream0);
      ByteArrayInputStream byteArrayInputStream1 = new ByteArrayInputStream(byteArray0, (-1), 2);
      ByteArrayInputStream byteArrayInputStream2 = new ByteArrayInputStream(byteArray0, (-1698), (-1698));
      ChecksumCalculatingInputStream checksumCalculatingInputStream1 = new ChecksumCalculatingInputStream(cRC32_0, byteArrayInputStream1);
      // Undeclared exception!
//      try { 
        checksumCalculatingInputStream1.skip(0L);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // -1
//         //
//         verifyException("java.io.ByteArrayInputStream", e);
//      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Adler32 adler32_0 = new Adler32();
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)38;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      byteArray0[1] = (byte)1;
      byteArray0[2] = (byte) (-1);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      ChecksumCalculatingInputStream checksumCalculatingInputStream0 = new ChecksumCalculatingInputStream(adler32_0, byteArrayInputStream0);
      checksumCalculatingInputStream0.getValue();
      checksumCalculatingInputStream0.skip((byte)38);
      checksumCalculatingInputStream0.markSupported();
      checksumCalculatingInputStream0.read(byteArray0, 0, 1);
      checksumCalculatingInputStream0.skip((byte) (-1));
      checksumCalculatingInputStream0.skip((byte) (-1));
      int int0 = checksumCalculatingInputStream0.read(byteArray0, 0, 0);
      assertArrayEquals(new byte[] {(byte)1, (byte)1, (byte) (-1)}, byteArray0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Adler32 adler32_0 = new Adler32();
      byte[] byteArray0 = new byte[2];
      ByteBuffer byteBuffer0 = ByteBuffer.wrap(byteArray0);
      adler32_0.update(byteBuffer0);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte)1, 5);
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(byteArrayInputStream0, byteArrayInputStream0);
      ChecksumCalculatingInputStream checksumCalculatingInputStream0 = new ChecksumCalculatingInputStream(adler32_0, sequenceInputStream0);
      checksumCalculatingInputStream0.read();
      sequenceInputStream0.close();
      checksumCalculatingInputStream0.read(byteArray0);
      checksumCalculatingInputStream0.skip(0L);
      checksumCalculatingInputStream0.close();
      checksumCalculatingInputStream0.getValue();
      checksumCalculatingInputStream0.read(byteArray0);
      assertEquals(196609L, checksumCalculatingInputStream0.getValue());
      
      adler32_0.reset();
      int int0 = checksumCalculatingInputStream0.read(byteArray0, 45, (-1));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      CRC32 cRC32_0 = new CRC32();
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)54;
      byteArray0[1] = (byte)62;
      byteArray0[2] = (byte)58;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(byteArrayInputStream0, 1759);
      ChecksumCalculatingInputStream checksumCalculatingInputStream0 = new ChecksumCalculatingInputStream(cRC32_0, bufferedInputStream0);
      BufferedInputStream bufferedInputStream1 = new BufferedInputStream(checksumCalculatingInputStream0);
      ChecksumCalculatingInputStream checksumCalculatingInputStream1 = new ChecksumCalculatingInputStream(cRC32_0, bufferedInputStream1);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      long long0 = checksumCalculatingInputStream1.skip(1L);
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(1L, long0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      CRC32 cRC32_0 = new CRC32();
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)54;
      byteArray0[1] = (byte)62;
      byteArray0[2] = (byte)58;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      ChecksumCalculatingInputStream checksumCalculatingInputStream0 = new ChecksumCalculatingInputStream((Checksum) null, mockFileInputStream0);
      // Undeclared exception!
//      try { 
        checksumCalculatingInputStream0.getValue();
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.compress.utils.ChecksumCalculatingInputStream", e);
//      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      CRC32 cRC32_0 = new CRC32();
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte)1;
      byteArray0[3] = (byte) (-5);
      ChecksumCalculatingInputStream checksumCalculatingInputStream0 = new ChecksumCalculatingInputStream(cRC32_0, (InputStream) null);
      cRC32_0.reset();
      // Undeclared exception!
//      try { 
        checksumCalculatingInputStream0.read(byteArray0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.compress.utils.ChecksumCalculatingInputStream", e);
//      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      CRC32 cRC32_0 = new CRC32();
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      ChecksumCalculatingInputStream checksumCalculatingInputStream0 = new ChecksumCalculatingInputStream(cRC32_0, mockFileInputStream0);
      Adler32 adler32_0 = new Adler32();
      adler32_0.reset();
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-41);
      byteArray0[1] = (byte) (-120);
      byteArray0[2] = (byte) (-42);
//      try { 
        checksumCalculatingInputStream0.read(byteArray0, (int) (byte) (-41), 694);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.evosuite.runtime.mock.java.io.NativeMockedIO", e);
//      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      CRC32 cRC32_0 = new CRC32();
      byte[] byteArray0 = new byte[0];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(byteArrayInputStream0, byteArrayInputStream0);
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(sequenceInputStream0);
      PushbackInputStream pushbackInputStream1 = new PushbackInputStream(pushbackInputStream0, 600);
      ByteArrayInputStream byteArrayInputStream1 = new ByteArrayInputStream(byteArray0);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(pushbackInputStream0, 2);
      ChecksumCalculatingInputStream checksumCalculatingInputStream0 = new ChecksumCalculatingInputStream(cRC32_0, bufferedInputStream0);
      checksumCalculatingInputStream0.read();
      ChecksumCalculatingInputStream checksumCalculatingInputStream1 = new ChecksumCalculatingInputStream(cRC32_0, byteArrayInputStream1);
      checksumCalculatingInputStream1.getValue();
      bufferedInputStream0.skip((-1419L));
      checksumCalculatingInputStream0.read(byteArray0);
      int int0 = checksumCalculatingInputStream0.read();
      assertEquals((-1), int0);
      
      byteArrayInputStream1.read();
      long long0 = checksumCalculatingInputStream0.getValue();
      assertEquals(0L, long0);
      
      int int1 = checksumCalculatingInputStream0.read(byteArray0);
      assertEquals(0, int1);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      CRC32 cRC32_0 = new CRC32();
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      ChecksumCalculatingInputStream checksumCalculatingInputStream0 = new ChecksumCalculatingInputStream(cRC32_0, mockFileInputStream0);
      long long0 = checksumCalculatingInputStream0.getValue();
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      CRC32 cRC32_0 = new CRC32();
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-1);
      byte byte0 = (byte)53;
      byteArray0[1] = (byte)53;
      byteArray0[2] = (byte)37;
      byteArray0[3] = (byte) (-95);
      byteArray0[4] = (byte)65;
      byteArray0[5] = (byte) (-1);
      cRC32_0.update(byteArray0);
      ChecksumCalculatingInputStream checksumCalculatingInputStream0 = new ChecksumCalculatingInputStream(cRC32_0, (InputStream) null);
      cRC32_0.reset();
      byte[] byteArray1 = new byte[3];
      byte byte1 = (byte) (-1);
      byteArray1[0] = (byte) (-1);
      byteArray1[1] = (byte)78;
      byte byte2 = (byte) (-75);
      byteArray1[2] = (byte) (-75);
      int int0 = 1;
      // Undeclared exception!
//      try { 
        checksumCalculatingInputStream0.read(byteArray1, 1, (int) (byte)78);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.compress.utils.ChecksumCalculatingInputStream", e);
//      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      CRC32 cRC32_0 = new CRC32();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(pipedInputStream0);
      ChecksumCalculatingInputStream checksumCalculatingInputStream0 = new ChecksumCalculatingInputStream(cRC32_0, bufferedInputStream0);
//      try { 
        checksumCalculatingInputStream0.read();
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Pipe not connected
//         //
//         verifyException("java.io.PipedInputStream", e);
//      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Adler32 adler32_0 = new Adler32();
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte)19;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte) (-114);
      byteArray0[4] = (byte)23;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte) (-119);
      byteArray0[7] = (byte)0;
      byteArray0[8] = (byte)0;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte)23, 0);
      ChecksumCalculatingInputStream checksumCalculatingInputStream0 = new ChecksumCalculatingInputStream(adler32_0, byteArrayInputStream0);
      long long0 = checksumCalculatingInputStream0.skip((byte) (-1));
      assertEquals(1L, checksumCalculatingInputStream0.getValue());
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      CRC32 cRC32_0 = new CRC32();
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)54;
      byteArray0[1] = (byte)62;
      byteArray0[2] = (byte)58;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(byteArrayInputStream0, 1759);
      ChecksumCalculatingInputStream checksumCalculatingInputStream0 = new ChecksumCalculatingInputStream(cRC32_0, bufferedInputStream0);
      checksumCalculatingInputStream0.read();
      checksumCalculatingInputStream0.getValue();
      bufferedInputStream0.skip(0L);
      checksumCalculatingInputStream0.read(byteArray0);
      checksumCalculatingInputStream0.read();
      byteArrayInputStream0.read();
      checksumCalculatingInputStream0.getValue();
      int int0 = checksumCalculatingInputStream0.read(byteArray0);
      assertArrayEquals(new byte[] {(byte)62, (byte)58, (byte)58}, byteArray0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Adler32 adler32_0 = new Adler32();
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      sequenceInputStream0.available();
      sequenceInputStream0.mark(0);
      ChecksumCalculatingInputStream checksumCalculatingInputStream0 = new ChecksumCalculatingInputStream(adler32_0, sequenceInputStream0);
      sequenceInputStream0.available();
      int int0 = checksumCalculatingInputStream0.read();
      checksumCalculatingInputStream0.getValue();
      checksumCalculatingInputStream0.getValue();
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)127;
      int int1 = checksumCalculatingInputStream0.read(byteArray0);
      assertTrue(int1 == int0);
      
      checksumCalculatingInputStream0.read(byteArray0, 1047, 0);
      byte[] byteArray1 = new byte[8];
      byteArray1[0] = (byte)0;
      byteArray1[1] = (byte)127;
      byteArray1[2] = (byte)0;
      byteArray1[3] = (byte)127;
      byteArray1[4] = (byte)0;
      byteArray1[5] = (byte)0;
      byteArray1[6] = (byte)0;
      byteArray1[7] = (byte)0;
      checksumCalculatingInputStream0.read(byteArray1);
      long long0 = checksumCalculatingInputStream0.getValue();
      assertEquals(1L, long0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(mockFileInputStream0);
      ChecksumCalculatingInputStream checksumCalculatingInputStream0 = new ChecksumCalculatingInputStream((Checksum) null, pushbackInputStream0);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)54;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-98);
      byteArray0[3] = (byte) (-39);
      byteArray0[4] = (byte)1;
      byteArray0[5] = (byte)33;
      byteArray0[6] = (byte) (-88);
      byteArray0[7] = (byte) (-40);
      byteArray0[8] = (byte)87;
//      try { 
        checksumCalculatingInputStream0.read(byteArray0);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.evosuite.runtime.mock.java.io.NativeMockedIO", e);
//      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Adler32 adler32_0 = new Adler32();
      adler32_0.update(299);
      byte[] byteArray0 = new byte[2];
      byte byte0 = (byte)1;
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte)30;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte)1, 97);
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(byteArrayInputStream0);
      ChecksumCalculatingInputStream checksumCalculatingInputStream0 = new ChecksumCalculatingInputStream(adler32_0, pushbackInputStream0);
      byteArrayInputStream0.read(byteArray0);
      // Undeclared exception!
//      try { 
        checksumCalculatingInputStream0.read(byteArray0, 97, (int) (byte)30);
//        fail("Expecting exception: IndexOutOfBoundsException");
      
//      } catch(IndexOutOfBoundsException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.io.PushbackInputStream", e);
//      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(mockFileInputStream0);
      ChecksumCalculatingInputStream checksumCalculatingInputStream0 = new ChecksumCalculatingInputStream((Checksum) null, pushbackInputStream0);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)54;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-98);
      byteArray0[3] = (byte) (-39);
      byteArray0[4] = (byte)1;
      byteArray0[5] = (byte)33;
      checksumCalculatingInputStream0.available();
      byteArray0[6] = (byte) (-88);
      byteArray0[7] = (byte) (-40);
      byteArray0[8] = (byte)87;
//      try { 
        checksumCalculatingInputStream0.skip((byte) (-40));
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.evosuite.runtime.mock.java.io.NativeMockedIO", e);
//      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      CRC32 cRC32_0 = new CRC32();
      byte[] byteArray0 = new byte[0];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      ChecksumCalculatingInputStream checksumCalculatingInputStream0 = new ChecksumCalculatingInputStream(cRC32_0, byteArrayInputStream0);
      int int0 = checksumCalculatingInputStream0.read(byteArray0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Adler32 adler32_0 = new Adler32();
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false, false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(sequenceInputStream0, 3195);
      SequenceInputStream sequenceInputStream1 = new SequenceInputStream(pushbackInputStream0, pushbackInputStream0);
      ChecksumCalculatingInputStream checksumCalculatingInputStream0 = new ChecksumCalculatingInputStream(adler32_0, sequenceInputStream1);
//      try { 
        checksumCalculatingInputStream0.skip(1717L);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Stream closed
//         //
//         verifyException("java.io.PushbackInputStream", e);
//      }
  }
}
