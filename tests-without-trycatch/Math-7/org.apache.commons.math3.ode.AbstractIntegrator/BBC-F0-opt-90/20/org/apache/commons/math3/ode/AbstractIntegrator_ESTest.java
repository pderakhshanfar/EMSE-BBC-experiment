/*
 * This file was automatically generated by EvoSuite
 * Thu Oct 21 12:31:23 GMT 2021
 */

package org.apache.commons.math3.ode;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math3.analysis.solvers.BrentSolver;
import org.apache.commons.math3.analysis.solvers.IllinoisSolver;
import org.apache.commons.math3.analysis.solvers.UnivariateSolver;
import org.apache.commons.math3.ode.ExpandableStatefulODE;
import org.apache.commons.math3.ode.FirstOrderConverter;
import org.apache.commons.math3.ode.FirstOrderDifferentialEquations;
import org.apache.commons.math3.ode.SecondOrderDifferentialEquations;
import org.apache.commons.math3.ode.events.EventHandler;
import org.apache.commons.math3.ode.nonstiff.AdamsBashforthIntegrator;
import org.apache.commons.math3.ode.nonstiff.AdamsMoultonIntegrator;
import org.apache.commons.math3.ode.nonstiff.ClassicalRungeKuttaIntegrator;
import org.apache.commons.math3.ode.nonstiff.DormandPrince54Integrator;
import org.apache.commons.math3.ode.nonstiff.DormandPrince853Integrator;
import org.apache.commons.math3.ode.nonstiff.EulerIntegrator;
import org.apache.commons.math3.ode.nonstiff.GillIntegrator;
import org.apache.commons.math3.ode.nonstiff.GraggBulirschStoerIntegrator;
import org.apache.commons.math3.ode.nonstiff.HighamHall54Integrator;
import org.apache.commons.math3.ode.nonstiff.MidpointIntegrator;
import org.apache.commons.math3.ode.nonstiff.ThreeEighthesIntegrator;
import org.apache.commons.math3.ode.sampling.DummyStepHandler;
import org.apache.commons.math3.ode.sampling.FixedStepHandler;
import org.apache.commons.math3.ode.sampling.NordsieckStepInterpolator;
import org.apache.commons.math3.ode.sampling.StepHandler;
import org.apache.commons.math3.ode.sampling.StepInterpolator;
import org.apache.commons.math3.ode.sampling.StepNormalizer;
import org.apache.commons.math3.ode.sampling.StepNormalizerBounds;
import org.apache.commons.math3.ode.sampling.StepNormalizerMode;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class AbstractIntegrator_ESTest extends AbstractIntegrator_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ClassicalRungeKuttaIntegrator classicalRungeKuttaIntegrator0 = new ClassicalRungeKuttaIntegrator((-1490.4752787833));
      MidpointIntegrator midpointIntegrator0 = new MidpointIntegrator((-1490.4752787833));
      DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator((-1490.4752787833), (-1490.4752787833), (-9.040643863751471E-8), (-1490.4752787833));
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      ClassicalRungeKuttaIntegrator classicalRungeKuttaIntegrator1 = new ClassicalRungeKuttaIntegrator((-1490.4752787833));
      double[] doubleArray0 = new double[0];
      Double double0 = new Double((-9.040643863751471E-8));
      dormandPrince853Integrator0.getEvaluations();
      DormandPrince853Integrator dormandPrince853Integrator1 = new DormandPrince853Integrator((-9.040643863751471E-8), 0.0, (-1490.4752787833), (-9.040643863751471E-8));
      FixedStepHandler fixedStepHandler0 = mock(FixedStepHandler.class, new ViolatedAssumptionAnswer());
      StepNormalizer stepNormalizer0 = new StepNormalizer((-4775.40022654), fixedStepHandler0);
      classicalRungeKuttaIntegrator1.addStepHandler(stepNormalizer0);
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      doReturn((-1490.4752787833), 1000.0, (-1490.4752787833), (double)0, (-1490.4752787833)).when(eventHandler0).g(anyDouble() , any(double[].class));
      classicalRungeKuttaIntegrator1.addEventHandler(eventHandler0, 1000.0, (double) 0, 1552);
      // Undeclared exception!
      classicalRungeKuttaIntegrator1.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, Double.NaN, doubleArray0, 1000.0, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ClassicalRungeKuttaIntegrator classicalRungeKuttaIntegrator0 = new ClassicalRungeKuttaIntegrator((-1490.4752787833));
      MidpointIntegrator midpointIntegrator0 = new MidpointIntegrator((-1490.4752787833));
      DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator((-1490.4752787833), (-1490.4752787833), (-9.040643863751471E-8), (-1490.4752787833));
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      ClassicalRungeKuttaIntegrator classicalRungeKuttaIntegrator1 = new ClassicalRungeKuttaIntegrator((-1490.4752787833));
      double[] doubleArray0 = new double[0];
      Double double0 = new Double((-9.040643863751471E-8));
      dormandPrince853Integrator0.getEvaluations();
      DormandPrince853Integrator dormandPrince853Integrator1 = new DormandPrince853Integrator((-9.040643863751471E-8), 0.0, (-1490.4752787833), (-9.040643863751471E-8));
      classicalRungeKuttaIntegrator0.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, (-1809.341724813951), doubleArray0, (-9.040643863751471E-8), doubleArray0);
      EventHandler.Action eventHandler_Action0 = EventHandler.Action.STOP;
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      doReturn(eventHandler_Action0).when(eventHandler0).eventOccurred(anyDouble() , any(double[].class) , anyBoolean());
      doReturn((-1490.4752787833), 1000.0, (-1490.4752787833), (double)0, (-1490.4752787833)).when(eventHandler0).g(anyDouble() , any(double[].class));
      FixedStepHandler fixedStepHandler0 = mock(FixedStepHandler.class, new ViolatedAssumptionAnswer());
      StepNormalizerMode stepNormalizerMode0 = StepNormalizerMode.MULTIPLES;
      StepNormalizerBounds stepNormalizerBounds0 = StepNormalizerBounds.BOTH;
      StepNormalizer stepNormalizer0 = new StepNormalizer(1.3784853708457332E-206, fixedStepHandler0, stepNormalizerMode0, stepNormalizerBounds0);
      classicalRungeKuttaIntegrator0.addStepHandler(stepNormalizer0);
      classicalRungeKuttaIntegrator0.addEventHandler(eventHandler0, (-640.0), 0.0, 4176);
      // Undeclared exception!
      classicalRungeKuttaIntegrator0.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, (double) double0, doubleArray0, 0.0, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator(975.528563356577, 975.528563356577, 975.528563356577, 975.528563356577);
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter0);
      expandableStatefulODE0.setTime(55.334319);
      graggBulirschStoerIntegrator0.integrate(expandableStatefulODE0, 975.528563356577);
//      try { 
        graggBulirschStoerIntegrator0.integrate(expandableStatefulODE0, 975.528563356577);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // too small integration interval: length = 0
//         //
//         verifyException("org.apache.commons.math3.ode.AbstractIntegrator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      double double0 = (-1490.4752787833);
      ClassicalRungeKuttaIntegrator classicalRungeKuttaIntegrator0 = new ClassicalRungeKuttaIntegrator((-1490.4752787833));
      MidpointIntegrator midpointIntegrator0 = new MidpointIntegrator((-1490.4752787833));
      DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator(0.0, (-3981.3756006199465), doubleArray0, doubleArray0);
      double double1 = (-9.040643863751471E-8);
      dormandPrince853Integrator0.getStepHandlers();
      DormandPrince853Integrator dormandPrince853Integrator1 = new DormandPrince853Integrator((-1490.4752787833), (-3981.3756006199465), (-9.040643863751471E-8), (-1490.4752787833));
      dormandPrince853Integrator0.setMinReduction((-1490.4752787833));
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      ClassicalRungeKuttaIntegrator classicalRungeKuttaIntegrator1 = new ClassicalRungeKuttaIntegrator((-3981.3756006199465));
      dormandPrince853Integrator1.setInitialStepSize((-9.040643863751471E-8));
      double[] doubleArray1 = new double[0];
      Double double2 = new Double((-9.040643863751471E-8));
      dormandPrince853Integrator1.getEvaluations();
      DormandPrince853Integrator dormandPrince853Integrator2 = new DormandPrince853Integrator(825.5553183799665, 0.0, (-1490.4752787833), 825.5553183799665);
      dormandPrince853Integrator2.clearEventHandlers();
      EventHandler.Action eventHandler_Action0 = EventHandler.Action.STOP;
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      classicalRungeKuttaIntegrator0.setMaxEvaluations(0);
      int int0 = 4176;
      classicalRungeKuttaIntegrator0.addEventHandler(eventHandler0, (-640.0), 0.0, 4176);
//      try { 
        classicalRungeKuttaIntegrator0.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, (double) double2, doubleArray1, 0.0, doubleArray1);
//        fail("Expecting exception: IllegalStateException");
      
//      } catch(IllegalStateException e) {
//         //
//         // illegal state: maximal count (0) exceeded
//         //
//         verifyException("org.apache.commons.math3.util.Incrementor$1", e);
//      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      ClassicalRungeKuttaIntegrator classicalRungeKuttaIntegrator0 = new ClassicalRungeKuttaIntegrator((-1490.4752787833));
      IllinoisSolver illinoisSolver0 = new IllinoisSolver((-1490.4752787833));
      MidpointIntegrator midpointIntegrator0 = new MidpointIntegrator((-1490.4752787833));
      DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator(0.0, (-3980.6029636), doubleArray0, doubleArray0);
      dormandPrince853Integrator0.getStepHandlers();
      DormandPrince853Integrator dormandPrince853Integrator1 = new DormandPrince853Integrator(1490.6789, (-9.040643863751471E-8), doubleArray0, doubleArray0);
      dormandPrince853Integrator0.setMinReduction(0.0);
      int int0 = 0;
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      ClassicalRungeKuttaIntegrator classicalRungeKuttaIntegrator1 = new ClassicalRungeKuttaIntegrator((-3980.6029636));
      dormandPrince853Integrator1.setInitialStepSize((-9.040643863751471E-8));
      double[] doubleArray1 = new double[0];
      classicalRungeKuttaIntegrator0.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, (-1490.4752787833), doubleArray1, 1.0, doubleArray0);
      dormandPrince853Integrator1.getEvaluations();
      DormandPrince853Integrator dormandPrince853Integrator2 = new DormandPrince853Integrator(825.5553183799665, 0.0, (-1490.4752787833), 825.5553183799665);
      dormandPrince853Integrator2.clearEventHandlers();
      EventHandler.Action eventHandler_Action0 = EventHandler.Action.RESET_DERIVATIVES;
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      doReturn((-1490.4752787833), 1000.0).when(eventHandler0).g(anyDouble() , any(double[].class));
      classicalRungeKuttaIntegrator0.addEventHandler(eventHandler0, 174.20213236692, 0.0, 0);
//      try { 
        classicalRungeKuttaIntegrator0.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, 1490.6789, doubleArray1, (-9.040643863751471E-8), doubleArray0);
//        fail("Expecting exception: IllegalStateException");
      
//      } catch(IllegalStateException e) {
//         //
//         // illegal state: maximal count (0) exceeded: evaluations
//         //
//         verifyException("org.apache.commons.math3.analysis.solvers.BaseAbstractUnivariateSolver", e);
//      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      ClassicalRungeKuttaIntegrator classicalRungeKuttaIntegrator0 = new ClassicalRungeKuttaIntegrator((-1490.4752787833));
      IllinoisSolver illinoisSolver0 = new IllinoisSolver((-1490.4752787833));
      MidpointIntegrator midpointIntegrator0 = new MidpointIntegrator((-1490.4752787833));
      DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator(0.0, (-3980.6029636), doubleArray0, doubleArray0);
      dormandPrince853Integrator0.getStepHandlers();
      DormandPrince853Integrator dormandPrince853Integrator1 = new DormandPrince853Integrator((-1490.4752787833), 1490.68, (-9.040643863751471E-8), (-1490.4752787833));
      dormandPrince853Integrator0.setMinReduction(0.0);
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      ClassicalRungeKuttaIntegrator classicalRungeKuttaIntegrator1 = new ClassicalRungeKuttaIntegrator((-3980.6029636));
      dormandPrince853Integrator1.setInitialStepSize((-9.040643863751471E-8));
      double[] doubleArray1 = new double[0];
      classicalRungeKuttaIntegrator0.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, (-1490.4752787833), doubleArray1, 1.0, doubleArray0);
      dormandPrince853Integrator1.getEvaluations();
      DormandPrince853Integrator dormandPrince853Integrator2 = new DormandPrince853Integrator(825.5553183799665, 0.0, (-1490.4752787833), 825.5553183799665);
      dormandPrince853Integrator2.clearEventHandlers();
      EventHandler.Action eventHandler_Action0 = EventHandler.Action.STOP;
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      doReturn(eventHandler_Action0).when(eventHandler0).eventOccurred(anyDouble() , any(double[].class) , anyBoolean());
      doReturn((-1490.4752787833), 1000.0, 1490.68, (double)0, (-1490.4752787833)).when(eventHandler0).g(anyDouble() , any(double[].class));
      classicalRungeKuttaIntegrator0.addEventHandler(eventHandler0, (-640.0), 0.0, 4176);
      classicalRungeKuttaIntegrator0.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, 1.0, doubleArray1, 0.0, doubleArray1);
      AdamsMoultonIntegrator adamsMoultonIntegrator0 = new AdamsMoultonIntegrator(4176, (-9.040643863751471E-8), (-1490.4752787833), 0.3824149966239929, (-1.8379759110070617));
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      double double0 = (-1490.4752787833);
      ClassicalRungeKuttaIntegrator classicalRungeKuttaIntegrator0 = new ClassicalRungeKuttaIntegrator((-1490.4752787833));
      IllinoisSolver illinoisSolver0 = new IllinoisSolver((-1490.4752787833));
      MidpointIntegrator midpointIntegrator0 = new MidpointIntegrator((-1490.4752787833));
      DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator(0.0, (-3980.6029636), doubleArray0, doubleArray0);
      double double1 = (-9.040643863751471E-8);
      dormandPrince853Integrator0.getStepHandlers();
      DormandPrince853Integrator dormandPrince853Integrator1 = new DormandPrince853Integrator(1490.6789, (-9.040643863751471E-8), doubleArray0, doubleArray0);
      dormandPrince853Integrator0.setMinReduction(0.0);
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      ClassicalRungeKuttaIntegrator classicalRungeKuttaIntegrator1 = new ClassicalRungeKuttaIntegrator((-3980.6029636));
      dormandPrince853Integrator1.setInitialStepSize((-9.040643863751471E-8));
      double[] doubleArray1 = new double[0];
      classicalRungeKuttaIntegrator0.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, (-1490.4752787833), doubleArray1, 1.0, doubleArray0);
      dormandPrince853Integrator1.getEvaluations();
      DormandPrince853Integrator dormandPrince853Integrator2 = new DormandPrince853Integrator(825.5553183799665, 0.0, (-1490.4752787833), 825.5553183799665);
      dormandPrince853Integrator2.clearEventHandlers();
      EventHandler.Action eventHandler_Action0 = EventHandler.Action.RESET_DERIVATIVES;
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      doReturn(eventHandler_Action0).when(eventHandler0).eventOccurred(anyDouble() , any(double[].class) , anyBoolean());
      doReturn((-1490.4752787833), 1000.0, 1490.6789, (double)0, (-1490.4752787833)).when(eventHandler0).g(anyDouble() , any(double[].class));
      int int0 = 4176;
      classicalRungeKuttaIntegrator0.addEventHandler(eventHandler0, (-640.0), 0.0, 4176);
      // Undeclared exception!
//      try { 
        classicalRungeKuttaIntegrator0.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, 1.0, doubleArray1, 0.0, doubleArray1);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // endpoints do not specify an interval: [0, -744.738]
//         //
//         verifyException("org.apache.commons.math3.analysis.solvers.UnivariateSolverUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      ClassicalRungeKuttaIntegrator classicalRungeKuttaIntegrator0 = new ClassicalRungeKuttaIntegrator((-1490.4752787833));
      IllinoisSolver illinoisSolver0 = new IllinoisSolver();
      MidpointIntegrator midpointIntegrator0 = new MidpointIntegrator((-1490.4752787833));
      classicalRungeKuttaIntegrator0.getMaxEvaluations();
      DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator(0.0, (-3980.6029636), doubleArray0, doubleArray0);
      dormandPrince853Integrator0.getEventHandlers();
      dormandPrince853Integrator0.getStepHandlers();
      DormandPrince853Integrator dormandPrince853Integrator1 = new DormandPrince853Integrator(1490.6789, (-9.040643863751471E-8), doubleArray0, doubleArray0);
      dormandPrince853Integrator0.setMinReduction(0.0);
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      ClassicalRungeKuttaIntegrator classicalRungeKuttaIntegrator1 = new ClassicalRungeKuttaIntegrator((-3980.6029636));
      dormandPrince853Integrator1.setInitialStepSize((-9.040643863751471E-8));
      double[] doubleArray1 = new double[0];
      classicalRungeKuttaIntegrator0.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, 2502.3362264226294, doubleArray1, 1.0, doubleArray0);
      dormandPrince853Integrator1.getEvaluations();
      DormandPrince853Integrator dormandPrince853Integrator2 = new DormandPrince853Integrator(825.5553183799665, 0.0, (-1490.4752787833), 825.5553183799665);
      dormandPrince853Integrator2.clearEventHandlers();
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      doReturn((EventHandler.Action) null).when(eventHandler0).eventOccurred(anyDouble() , any(double[].class) , anyBoolean());
      doReturn(2502.3362264226294, (-1.3070101381473173E-251), 1490.6789, (double)0, (-1490.4752787833)).when(eventHandler0).g(anyDouble() , any(double[].class));
      classicalRungeKuttaIntegrator0.addEventHandler(eventHandler0, (-640.0), 0.0, 4176);
      classicalRungeKuttaIntegrator0.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, 1.0, doubleArray1, 0.0, doubleArray1);
      classicalRungeKuttaIntegrator0.getName();
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      double double0 = (-1490.4752787833);
      ClassicalRungeKuttaIntegrator classicalRungeKuttaIntegrator0 = new ClassicalRungeKuttaIntegrator((-1490.4752787833));
      IllinoisSolver illinoisSolver0 = new IllinoisSolver((-1490.4752787833));
      MidpointIntegrator midpointIntegrator0 = new MidpointIntegrator((-1490.4752787833));
      DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator(0.0, (-3980.6029636), doubleArray0, doubleArray0);
      double double1 = (-9.040643863751471E-8);
      dormandPrince853Integrator0.getStepHandlers();
      DormandPrince853Integrator dormandPrince853Integrator1 = new DormandPrince853Integrator(1490.6789, (-9.040643863751471E-8), doubleArray0, doubleArray0);
      dormandPrince853Integrator0.setMinReduction(0.0);
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      ClassicalRungeKuttaIntegrator classicalRungeKuttaIntegrator1 = new ClassicalRungeKuttaIntegrator((-3980.6029636));
      dormandPrince853Integrator1.setInitialStepSize((-9.040643863751471E-8));
      double[] doubleArray1 = new double[0];
      classicalRungeKuttaIntegrator0.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, (-1490.4752787833), doubleArray1, 1.0, doubleArray0);
      dormandPrince853Integrator1.getEvaluations();
      DormandPrince853Integrator dormandPrince853Integrator2 = new DormandPrince853Integrator(825.5553183799665, 0.0, (-1490.4752787833), 825.5553183799665);
      dormandPrince853Integrator2.clearEventHandlers();
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      doReturn((EventHandler.Action) null).when(eventHandler0).eventOccurred(anyDouble() , any(double[].class) , anyBoolean());
      doReturn((-1490.4752787833), 1000.0, 1490.6789, (double)0, (-1490.4752787833)).when(eventHandler0).g(anyDouble() , any(double[].class));
      int int0 = 4176;
      classicalRungeKuttaIntegrator0.addEventHandler(eventHandler0, (-640.0), 0.0, 4176);
      // Undeclared exception!
//      try { 
        classicalRungeKuttaIntegrator0.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, 1.0, doubleArray1, 0.0, doubleArray1);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // endpoints do not specify an interval: [-1,489.475, -1,489.475]
//         //
//         verifyException("org.apache.commons.math3.analysis.solvers.UnivariateSolverUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      double double0 = 2441.0645;
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      ClassicalRungeKuttaIntegrator classicalRungeKuttaIntegrator0 = new ClassicalRungeKuttaIntegrator((-2372.72777119));
      double[] doubleArray0 = new double[0];
      classicalRungeKuttaIntegrator0.clearEventHandlers();
      classicalRungeKuttaIntegrator0.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, (-2372.72777119), doubleArray0, 1210.9734308511, doubleArray0);
      DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator((-2809.08149968), 2441.0645, 0.36290550231933594, 2233.994994854528);
      ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter0);
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      doReturn((-2372.72777119), 1518.7397201).when(eventHandler0).g(anyDouble() , any(double[].class));
      int int0 = (-1413);
      dormandPrince853Integrator0.addEventHandler(eventHandler0, 2214.5880287675027, (-1261.22852), (-1413));
//      try { 
        dormandPrince853Integrator0.integrate(expandableStatefulODE0, (-4484.862167562987));
//        fail("Expecting exception: IllegalStateException");
      
//      } catch(IllegalStateException e) {
//         //
//         // illegal state: maximal count (-1,413) exceeded: evaluations
//         //
//         verifyException("org.apache.commons.math3.analysis.solvers.BaseAbstractUnivariateSolver", e);
//      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      ClassicalRungeKuttaIntegrator classicalRungeKuttaIntegrator0 = new ClassicalRungeKuttaIntegrator((-1490.4752787833));
      IllinoisSolver illinoisSolver0 = new IllinoisSolver((-1490.4752787833));
      MidpointIntegrator midpointIntegrator0 = new MidpointIntegrator((-1490.4752787833));
      DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator(0.0, (-3980.6029636), doubleArray0, doubleArray0);
      dormandPrince853Integrator0.getEventHandlers();
      dormandPrince853Integrator0.getStepHandlers();
      DormandPrince853Integrator dormandPrince853Integrator1 = new DormandPrince853Integrator(1490.6789, (-9.040643863751471E-8), doubleArray0, doubleArray0);
      dormandPrince853Integrator0.setMinReduction(0.0);
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(eventHandler0).g(anyDouble() , any(double[].class));
      classicalRungeKuttaIntegrator0.addEventHandler(eventHandler0, (-3980.6029636), 2502.3362264226294, Integer.MAX_VALUE);
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      ClassicalRungeKuttaIntegrator classicalRungeKuttaIntegrator1 = new ClassicalRungeKuttaIntegrator((-3980.6029636));
      double[] doubleArray1 = new double[0];
      classicalRungeKuttaIntegrator0.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, 2502.3362264226294, doubleArray1, (-33.31866435499), doubleArray0);
      dormandPrince853Integrator1.getEvaluations();
      DormandPrince853Integrator dormandPrince853Integrator2 = new DormandPrince853Integrator(1.1368683772161603E-10, 0.0, (-1490.4752787833), (-1117.7));
      dormandPrince853Integrator2.clearEventHandlers();
      EventHandler eventHandler1 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      doReturn(2502.3362264226294, 1000.0, 1490.6789, (double)0, (-1490.4752787833)).when(eventHandler1).g(anyDouble() , any(double[].class));
      classicalRungeKuttaIntegrator0.addEventHandler(eventHandler1, (-640.0), 0.0, 4176);
      classicalRungeKuttaIntegrator0.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, (-33.318664354990005), doubleArray1, (-1117.7), doubleArray1);
      classicalRungeKuttaIntegrator0.computeDerivatives(Integer.MAX_VALUE, doubleArray0, doubleArray1);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      ClassicalRungeKuttaIntegrator classicalRungeKuttaIntegrator0 = new ClassicalRungeKuttaIntegrator((-1490.4752787833));
      IllinoisSolver illinoisSolver0 = new IllinoisSolver((-1490.4752787833));
      MidpointIntegrator midpointIntegrator0 = new MidpointIntegrator((-1490.4752787833));
      DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator(0.0, (-3980.6029636), doubleArray0, doubleArray0);
      dormandPrince853Integrator0.getEventHandlers();
      dormandPrince853Integrator0.getStepHandlers();
      DormandPrince853Integrator dormandPrince853Integrator1 = new DormandPrince853Integrator(1490.6789, (-9.040643863751471E-8), doubleArray0, doubleArray0);
      dormandPrince853Integrator0.setMinReduction(0.0);
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      ClassicalRungeKuttaIntegrator classicalRungeKuttaIntegrator1 = new ClassicalRungeKuttaIntegrator((-3980.6029636));
      dormandPrince853Integrator1.setInitialStepSize((-9.040643863751471E-8));
      double[] doubleArray1 = new double[0];
      classicalRungeKuttaIntegrator0.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, 2502.3362264226294, doubleArray1, 1.0, doubleArray0);
      DormandPrince853Integrator dormandPrince853Integrator2 = new DormandPrince853Integrator(2673.2, 4.547473508864641E-10, 1273.648446102364, (-217.50490128));
      dormandPrince853Integrator1.clearEventHandlers();
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      doReturn((-9.040643863751471E-8), (-1234.62737663444), 3.529920406834134E113, 3565.2554, 4947.3758295).when(eventHandler0).g(anyDouble() , any(double[].class));
      classicalRungeKuttaIntegrator1.addEventHandler(eventHandler0, 1176.48, 2502.3362264226294, 415);
//      try { 
        classicalRungeKuttaIntegrator1.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, 1576.2458999998862, doubleArray0, (-3980.6029636), doubleArray1);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // function values at endpoints do not have different signs, endpoints: [-414.056, 581.095], values: [4,947.376, 4,947.376]
//         //
//         verifyException("org.apache.commons.math3.analysis.solvers.BracketingNthOrderBrentSolver", e);
//      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      double double0 = 750.038311480608;
      DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator(0.0, 750.038311480608, 750.038311480608, 750.038311480608);
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter0);
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (-1272.92);
      doubleArray0[1] = 2154.687473;
      doubleArray0[2] = 750.038311480608;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 0.0;
      doubleArray0[5] = 0.0;
      doubleArray0[6] = 750.038311480608;
      dormandPrince853Integrator0.setStepSizeControl((-1272.92), 750.038311480608, doubleArray0, doubleArray0);
//      try { 
        dormandPrince853Integrator0.integrate(expandableStatefulODE0, Double.NaN);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // 0 != 7
//         //
//         verifyException("org.apache.commons.math3.ode.nonstiff.AdaptiveStepsizeIntegrator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      ClassicalRungeKuttaIntegrator classicalRungeKuttaIntegrator0 = new ClassicalRungeKuttaIntegrator(773.7395896);
      classicalRungeKuttaIntegrator0.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, 4.94E-321, doubleArray0, 4185.8227701112, doubleArray0);
      DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator(0.36290550231933594, 4.94E-321, 773.7395896, 4185.8227701112);
      ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter0);
      dormandPrince853Integrator0.setMaxEvaluations(413);
//      try { 
        dormandPrince853Integrator0.integrate(expandableStatefulODE0, Double.NaN);
//        fail("Expecting exception: IllegalStateException");
      
//      } catch(IllegalStateException e) {
//         //
//         // illegal state: maximal count (413) exceeded
//         //
//         verifyException("org.apache.commons.math3.util.Incrementor$1", e);
//      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator(0.0, 0.0, doubleArray0, doubleArray0);
      dormandPrince853Integrator0.getEventHandlers();
      dormandPrince853Integrator0.getOrder();
      dormandPrince853Integrator0.setMinReduction(8);
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      ClassicalRungeKuttaIntegrator classicalRungeKuttaIntegrator0 = new ClassicalRungeKuttaIntegrator((-2725.18824160549));
      classicalRungeKuttaIntegrator0.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, 2448.64, doubleArray0, (-2725.18824160549), doubleArray0);
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(eventHandler0).toString();
      classicalRungeKuttaIntegrator0.addEventHandler(eventHandler0, 2725.18824160549, 2.2737367544323206E-10, 3);
      dormandPrince853Integrator0.getEvaluations();
      dormandPrince853Integrator0.clearEventHandlers();
      DummyStepHandler dummyStepHandler0 = DummyStepHandler.getInstance();
      classicalRungeKuttaIntegrator0.addStepHandler(dummyStepHandler0);
      classicalRungeKuttaIntegrator0.getEventHandlers();
      EventHandler eventHandler1 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      classicalRungeKuttaIntegrator0.addEventHandler(eventHandler1, (double) 8, (-227.74757326745427), 8);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator(0.0, 0.0, doubleArray0, doubleArray0);
      dormandPrince853Integrator0.getEventHandlers();
      dormandPrince853Integrator0.getOrder();
      dormandPrince853Integrator0.setMinReduction(8);
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      ClassicalRungeKuttaIntegrator classicalRungeKuttaIntegrator0 = new ClassicalRungeKuttaIntegrator((-2725.18824160549));
      classicalRungeKuttaIntegrator0.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, 1000.0, doubleArray0, (-2725.18824160549), doubleArray0);
      classicalRungeKuttaIntegrator0.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, 2448.64, doubleArray0, (-2725.18824160549), doubleArray0);
      dormandPrince853Integrator0.getEvaluations();
      dormandPrince853Integrator0.clearEventHandlers();
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      classicalRungeKuttaIntegrator0.addEventHandler(eventHandler0, (double) 8, (-227.74757326745427), 8);
      classicalRungeKuttaIntegrator0.getEvaluations();
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator(975.528563356577, 975.528563356577, 975.528563356577, 975.528563356577);
      // Undeclared exception!
//      try { 
        graggBulirschStoerIntegrator0.integrate((ExpandableStatefulODE) null, 975.528563356577);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.ode.AbstractIntegrator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      double double0 = 2033.1999;
      GillIntegrator gillIntegrator0 = new GillIntegrator(2033.1999);
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter0);
      // Undeclared exception!
      gillIntegrator0.integrate(expandableStatefulODE0, 2033.1999);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator(0.0, 0.0, 0.0, 0.0);
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      dormandPrince54Integrator0.setMaxEvaluations(3180);
      dormandPrince54Integrator0.getCurrentSignedStepsize();
      dormandPrince54Integrator0.getStepHandlers();
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator(0.0, 0.0, doubleArray0, doubleArray0);
      dormandPrince853Integrator0.getEventHandlers();
      dormandPrince853Integrator0.getOrder();
      dormandPrince853Integrator0.setMinReduction(0.0);
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      ClassicalRungeKuttaIntegrator classicalRungeKuttaIntegrator0 = new ClassicalRungeKuttaIntegrator((-1204.141443482));
//      try { 
        classicalRungeKuttaIntegrator0.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, 4.94E-321, doubleArray0, 0.0, doubleArray0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // too small integration interval: length = 0
//         //
//         verifyException("org.apache.commons.math3.ode.AbstractIntegrator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator(0.0, 0.0, doubleArray0, doubleArray0);
      dormandPrince853Integrator0.getEventHandlers();
      dormandPrince853Integrator0.getOrder();
      double double0 = (-227.74757326745427);
      dormandPrince853Integrator0.clearEventHandlers();
      double double1 = 4.547473508864641E-10;
      dormandPrince853Integrator0.setMinReduction(4.547473508864641E-10);
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      ClassicalRungeKuttaIntegrator classicalRungeKuttaIntegrator0 = new ClassicalRungeKuttaIntegrator(0.0);
      // Undeclared exception!
      classicalRungeKuttaIntegrator0.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, 0.0, doubleArray0, 4.547473508864641E-10, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      ClassicalRungeKuttaIntegrator classicalRungeKuttaIntegrator0 = new ClassicalRungeKuttaIntegrator((-1490.4752787833));
      IllinoisSolver illinoisSolver0 = new IllinoisSolver((-1490.4752787833));
      MidpointIntegrator midpointIntegrator0 = new MidpointIntegrator((-1490.4752787833));
      DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator(0.0, (-3980.6029636), doubleArray0, doubleArray0);
      dormandPrince853Integrator0.getEventHandlers();
      dormandPrince853Integrator0.getStepHandlers();
      DormandPrince853Integrator dormandPrince853Integrator1 = new DormandPrince853Integrator(1490.6789, (-9.040643863751471E-8), doubleArray0, doubleArray0);
      dormandPrince853Integrator0.setMinReduction(0.0);
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      ClassicalRungeKuttaIntegrator classicalRungeKuttaIntegrator1 = new ClassicalRungeKuttaIntegrator((-3980.6029636));
      double[] doubleArray1 = new double[0];
      classicalRungeKuttaIntegrator0.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, 2502.3362264226294, doubleArray1, (-33.31866435499), doubleArray0);
      dormandPrince853Integrator1.getEvaluations();
      DormandPrince853Integrator dormandPrince853Integrator2 = new DormandPrince853Integrator(1.1368683772161603E-10, 0.0, (-1490.4752787833), (-1117.7));
      dormandPrince853Integrator2.clearEventHandlers();
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(eventHandler0).g(anyDouble() , any(double[].class));
      classicalRungeKuttaIntegrator0.addEventHandler(eventHandler0, (-640.0), 0.0, 4176);
      classicalRungeKuttaIntegrator0.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, (-33.318664354990005), doubleArray1, (-1117.7), doubleArray1);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator(0.0, 0.0, doubleArray0, doubleArray0);
      dormandPrince853Integrator0.getEventHandlers();
      dormandPrince853Integrator0.getOrder();
      dormandPrince853Integrator0.clearEventHandlers();
      dormandPrince853Integrator0.setMinReduction(4.547473508864641E-10);
      ClassicalRungeKuttaIntegrator classicalRungeKuttaIntegrator0 = new ClassicalRungeKuttaIntegrator((-227.74757326745427));
      double[] doubleArray1 = new double[0];
      // Undeclared exception!
//      try { 
        classicalRungeKuttaIntegrator0.integrate((FirstOrderDifferentialEquations) null, 1.8518977165222168, doubleArray1, (-227.74757326745427), doubleArray0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.ode.AbstractIntegrator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      IllinoisSolver illinoisSolver0 = new IllinoisSolver(0.0);
      MidpointIntegrator midpointIntegrator0 = new MidpointIntegrator(439.698);
      double[] doubleArray1 = new double[2];
      doubleArray1[0] = (-3980.6029636);
      doubleArray1[1] = 0.0;
      DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator((-1425.615152049), (-2067.308), doubleArray1, doubleArray1);
      dormandPrince853Integrator0.getEventHandlers();
      dormandPrince853Integrator0.getOrder();
      dormandPrince853Integrator0.setMinReduction(951.0);
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      ClassicalRungeKuttaIntegrator classicalRungeKuttaIntegrator0 = new ClassicalRungeKuttaIntegrator((-457.322));
//      try { 
        classicalRungeKuttaIntegrator0.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, 951.0, doubleArray0, 951.0, doubleArray0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // too small integration interval: length = 0
//         //
//         verifyException("org.apache.commons.math3.ode.AbstractIntegrator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      ClassicalRungeKuttaIntegrator classicalRungeKuttaIntegrator0 = new ClassicalRungeKuttaIntegrator((-1490.4752787833));
      IllinoisSolver illinoisSolver0 = new IllinoisSolver((-1490.4752787833));
      MidpointIntegrator midpointIntegrator0 = new MidpointIntegrator((-1490.4752787833));
      double double0 = 2502.3362264226294;
      double double1 = (-3980.6029636);
      DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator(0.0, (-3980.6029636), doubleArray0, doubleArray0);
      dormandPrince853Integrator0.getEventHandlers();
      DormandPrince853Integrator dormandPrince853Integrator1 = new DormandPrince853Integrator(1490.6789, (-9.040643863751471E-8), doubleArray0, doubleArray0);
      dormandPrince853Integrator1.getOrder();
      dormandPrince853Integrator1.setMinReduction(774.0);
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      ClassicalRungeKuttaIntegrator classicalRungeKuttaIntegrator1 = new ClassicalRungeKuttaIntegrator(2502.3362264226294);
//      try { 
        classicalRungeKuttaIntegrator1.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, 0.0, doubleArray0, 0.0, doubleArray0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // too small integration interval: length = 0
//         //
//         verifyException("org.apache.commons.math3.ode.AbstractIntegrator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator(0.0, 0.0, 0.0, 0.0);
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FixedStepHandler fixedStepHandler0 = mock(FixedStepHandler.class, new ViolatedAssumptionAnswer());
      StepNormalizerBounds stepNormalizerBounds0 = StepNormalizerBounds.NEITHER;
      StepNormalizer stepNormalizer0 = new StepNormalizer((-1.0), fixedStepHandler0, stepNormalizerBounds0);
      dormandPrince54Integrator0.addStepHandler(stepNormalizer0);
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter0);
      // Undeclared exception!
      dormandPrince54Integrator0.integrate(expandableStatefulODE0, 0.0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      double double0 = 0.0;
      IllinoisSolver illinoisSolver0 = new IllinoisSolver((-3134.972794240194));
      MidpointIntegrator midpointIntegrator0 = new MidpointIntegrator(0.0);
      double double1 = 2502.3362264226294;
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      double double2 = 1490.6789;
      double double3 = 0.0;
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      double[] doubleArray1 = new double[9];
      doubleArray1[0] = (-3134.972794240194);
      doubleArray1[1] = (-2067.308);
      doubleArray1[2] = (-3134.972794240194);
      doubleArray1[3] = 1852.6810980210485;
      doubleArray1[4] = (-3134.972794240194);
      doubleArray1[5] = (-3980.6029636);
      doubleArray1[6] = 1852.6810980210485;
      doubleArray1[7] = 1490.6789;
      doubleArray1[8] = (-2382.792381);
//      try { 
        midpointIntegrator0.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, 1852.6810980210485, doubleArray0, 4681.7743, doubleArray1);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // 9 != 0
//         //
//         verifyException("org.apache.commons.math3.ode.AbstractIntegrator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      double double0 = 1.1368683772161603E-10;
      double double1 = 2594.1206724031;
      double double2 = 1852.6810980210485;
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator(1.1368683772161603E-10, 2594.1206724031, 799.0, 1852.6810980210485);
      graggBulirschStoerIntegrator0.getCurrentSignedStepsize();
      double double3 = 377.0;
      FixedStepHandler fixedStepHandler0 = mock(FixedStepHandler.class, new ViolatedAssumptionAnswer());
      StepNormalizerMode stepNormalizerMode0 = StepNormalizerMode.MULTIPLES;
      StepNormalizer stepNormalizer0 = new StepNormalizer(377.0, fixedStepHandler0, stepNormalizerMode0);
      NordsieckStepInterpolator nordsieckStepInterpolator0 = new NordsieckStepInterpolator();
      StepInterpolator stepInterpolator0 = nordsieckStepInterpolator0.copy();
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 377.0;
      doubleArray0[1] = 2527.8683854;
      doubleArray0[2] = 1943.778112;
      doubleArray0[3] = 377.0;
      doubleArray0[4] = 951.0;
      doubleArray0[5] = 799.0;
      doubleArray0[6] = 951.0;
      stepNormalizer0.init(951.0, doubleArray0, 799.0);
      // Undeclared exception!
//      try { 
        stepNormalizer0.handleStep(stepInterpolator0, false);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.util.Arrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      double double0 = 593.7594850288;
      ClassicalRungeKuttaIntegrator classicalRungeKuttaIntegrator0 = new ClassicalRungeKuttaIntegrator(593.7594850288);
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 1387.884545;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 593.7594850288;
      doubleArray0[3] = 593.7594850288;
      classicalRungeKuttaIntegrator0.clearEventHandlers();
      doubleArray0[4] = 593.7594850288;
      DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator(593.7594850288, 1387.884545, doubleArray0, doubleArray0);
      double double1 = 0.0;
      FixedStepHandler fixedStepHandler0 = mock(FixedStepHandler.class, new ViolatedAssumptionAnswer());
      StepNormalizerBounds stepNormalizerBounds0 = StepNormalizerBounds.BOTH;
      StepNormalizer stepNormalizer0 = new StepNormalizer(0.0, fixedStepHandler0, stepNormalizerBounds0);
      classicalRungeKuttaIntegrator0.addStepHandler(stepNormalizer0);
      dormandPrince853Integrator0.setStepSizeControl(0.0, 1719.005067, 1387.884545, 1387.884545);
      dormandPrince853Integrator0.getEventHandlers();
      dormandPrince853Integrator0.getOrder();
      dormandPrince853Integrator0.setMinReduction(0.0);
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(4389).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      double[] doubleArray1 = new double[2];
      doubleArray1[0] = 1719.005067;
      ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter0);
      // Undeclared exception!
      classicalRungeKuttaIntegrator0.integrate(expandableStatefulODE0, 1817.57989427047);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      IllinoisSolver illinoisSolver0 = new IllinoisSolver((-3134.972794240194));
      MidpointIntegrator midpointIntegrator0 = new MidpointIntegrator(0.0);
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator(1490.6789, 0.0, doubleArray0, doubleArray0);
      dormandPrince853Integrator0.getEventHandlers();
      dormandPrince853Integrator0.getOrder();
      dormandPrince853Integrator0.setMinReduction(0.0);
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      ClassicalRungeKuttaIntegrator classicalRungeKuttaIntegrator0 = new ClassicalRungeKuttaIntegrator(8);
      classicalRungeKuttaIntegrator0.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, (-377.0), doubleArray0, 0.0, doubleArray0);
      dormandPrince853Integrator0.getEvaluations();
      dormandPrince853Integrator0.clearEventHandlers();
      classicalRungeKuttaIntegrator0.addEventHandler(eventHandler0, (double) 0, 1852.6810980210485, 0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator(1000.0, 1000.0, doubleArray0, doubleArray0);
      dormandPrince853Integrator0.getEventHandlers();
      dormandPrince853Integrator0.getOrder();
      dormandPrince853Integrator0.setMinReduction((-227.74757326745427));
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      ClassicalRungeKuttaIntegrator classicalRungeKuttaIntegrator0 = new ClassicalRungeKuttaIntegrator((-227.74757326745427));
      classicalRungeKuttaIntegrator0.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, (double) 574, doubleArray0, (-377.0), doubleArray0);
      dormandPrince853Integrator0.getEvaluations();
      dormandPrince853Integrator0.clearEventHandlers();
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      classicalRungeKuttaIntegrator0.addEventHandler(eventHandler0, (-227.74757326745427), 431.6768926443549, 0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      MidpointIntegrator midpointIntegrator0 = new MidpointIntegrator(0.0);
      IllinoisSolver illinoisSolver0 = new IllinoisSolver(0.0);
      midpointIntegrator0.getCurrentStepStart();
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator(0.0, (-67.03548), 0.0, (-1079.9));
      graggBulirschStoerIntegrator0.setOrderControl(0, 1332.0, 0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      ClassicalRungeKuttaIntegrator classicalRungeKuttaIntegrator0 = new ClassicalRungeKuttaIntegrator((-1490.4752787833));
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      classicalRungeKuttaIntegrator0.addEventHandler(eventHandler0, (-1490.4752787833), 1.1368683772161603E-10, (-418));
      DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator(1.1368683772161603E-10, 561.7086504055, doubleArray0, doubleArray0);
      dormandPrince853Integrator0.setStepSizeControl(1387.884545, 3199.99676, (-1490.4752787833), (-1490.4752787833));
      dormandPrince853Integrator0.getEventHandlers();
      dormandPrince853Integrator0.getOrder();
      dormandPrince853Integrator0.setMinReduction((-3509.0304075143));
      dormandPrince853Integrator0.addStepHandler((StepHandler) null);
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      MidpointIntegrator midpointIntegrator0 = new MidpointIntegrator((-1490.4752787833));
      midpointIntegrator0.getCurrentStepStart();
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      ClassicalRungeKuttaIntegrator classicalRungeKuttaIntegrator0 = new ClassicalRungeKuttaIntegrator((-1490.4752787833));
      classicalRungeKuttaIntegrator0.clearEventHandlers();
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      classicalRungeKuttaIntegrator0.addEventHandler(eventHandler0, (-1490.4752787833), 1.1368683772161603E-10, (-418));
      DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator(1.1368683772161603E-10, 561.7086504055, doubleArray0, doubleArray0);
      dormandPrince853Integrator0.setStepSizeControl(1387.884545, 3199.99676, (-1490.4752787833), (-1490.4752787833));
      dormandPrince853Integrator0.getEventHandlers();
      dormandPrince853Integrator0.getOrder();
      dormandPrince853Integrator0.setMinReduction((-3509.0304075143));
      dormandPrince853Integrator0.addStepHandler((StepHandler) null);
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      ClassicalRungeKuttaIntegrator classicalRungeKuttaIntegrator1 = new ClassicalRungeKuttaIntegrator(1000.0);
      classicalRungeKuttaIntegrator1.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, 976.528563356577, doubleArray0, 1.0, doubleArray0);
      dormandPrince853Integrator0.getEvaluations();
      DormandPrince853Integrator dormandPrince853Integrator1 = new DormandPrince853Integrator((-3030.8275), 3215.548282, 0, 976.528563356577);
      dormandPrince853Integrator1.clearEventHandlers();
      EventHandler eventHandler1 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      classicalRungeKuttaIntegrator0.addEventHandler(eventHandler1, 1963.2501350545747, 3199.99676, 0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      double double0 = 0.0;
      MidpointIntegrator midpointIntegrator0 = new MidpointIntegrator(0.0);
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 1852.6810980210485, 0.0, (-3.702271091849158E-8)).when(eventHandler0).g(anyDouble() , any(double[].class));
      IllinoisSolver illinoisSolver0 = new IllinoisSolver(0.0);
      midpointIntegrator0.addEventHandler(eventHandler0, 0.0, 0.0, (-2086), (UnivariateSolver) illinoisSolver0);
      int int0 = (-1001);
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter0);
//      try { 
        midpointIntegrator0.integrate(expandableStatefulODE0, 1.1368683772161603E-10);
//        fail("Expecting exception: IllegalStateException");
      
//      } catch(IllegalStateException e) {
//         //
//         // illegal state: maximal count (-2,086) exceeded: evaluations
//         //
//         verifyException("org.apache.commons.math3.analysis.solvers.BaseAbstractUnivariateSolver", e);
//      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      ClassicalRungeKuttaIntegrator classicalRungeKuttaIntegrator0 = new ClassicalRungeKuttaIntegrator(593.7594850288);
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 1387.884545;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 593.7594850288;
      doubleArray0[3] = 593.7594850288;
      classicalRungeKuttaIntegrator0.clearEventHandlers();
      doubleArray0[4] = 593.7594850288;
      DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator(593.7594850288, 1387.884545, doubleArray0, doubleArray0);
      double double0 = 0.0;
      double double1 = 1719.005067;
      dormandPrince853Integrator0.setStepSizeControl(0.0, 1719.005067, 1387.884545, 1387.884545);
      dormandPrince853Integrator0.getEventHandlers();
      dormandPrince853Integrator0.getOrder();
      dormandPrince853Integrator0.setMinReduction(0.0);
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(8).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      double[] doubleArray1 = new double[2];
      doubleArray1[0] = 1719.005067;
      doubleArray1[1] = 593.7594850288;
      double double2 = 0.0;
//      try { 
        classicalRungeKuttaIntegrator0.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, 1387.884545, doubleArray1, 0.0, doubleArray0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // 2 != 16
//         //
//         verifyException("org.apache.commons.math3.ode.AbstractIntegrator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      double double0 = 976.528563356577;
      double[] doubleArray0 = new double[0];
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator(976.528563356577, 976.528563356577, doubleArray0, doubleArray0);
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      // Undeclared exception!
//      try { 
        graggBulirschStoerIntegrator0.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, (-876.1525346644713), doubleArray0, 976.528563356577, doubleArray0);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 0
//         //
//         verifyException("org.apache.commons.math3.ode.nonstiff.GraggBulirschStoerIntegrator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator(321.6006102550762, 321.6006102550762, 321.6006102550762, 321.6006102550762);
      dormandPrince853Integrator0.setSafety(321.6006102550762);
      dormandPrince853Integrator0.getMaxEvaluations();
      dormandPrince853Integrator0.getMaxEvaluations();
      dormandPrince853Integrator0.getStepHandlers();
      dormandPrince853Integrator0.setInitialStepSize((-3564.89));
      dormandPrince853Integrator0.setMaxEvaluations(0);
      dormandPrince853Integrator0.getEvaluations();
      dormandPrince853Integrator0.setMaxEvaluations(187);
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator((-3564.89), 0, 0.47766253643826434, (-231.5293791760455));
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      BrentSolver brentSolver0 = new BrentSolver(1000.0, 0.0);
      graggBulirschStoerIntegrator0.addEventHandler(eventHandler0, 0.0, 891.813667879598, 187, (UnivariateSolver) brentSolver0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator((-3258.9111208751788), Double.NaN, 1000.0, 0.0);
      dormandPrince54Integrator0.setMinReduction(0.0);
      double[] doubleArray0 = new double[1];
      dormandPrince54Integrator0.setMaxGrowth(0.0);
      dormandPrince54Integrator0.setMinReduction(0.0);
      doubleArray0[0] = 1000.0;
      dormandPrince54Integrator0.setStepSizeControl(0.0, 1000.0, doubleArray0, doubleArray0);
      dormandPrince54Integrator0.getOrder();
      dormandPrince54Integrator0.setStepSizeControl((-3258.9111208751788), 1000.0, (-0.55), 770.026);
      double[] doubleArray1 = new double[5];
      doubleArray1[0] = 0.0;
      doubleArray1[1] = 0.0;
      doubleArray1[2] = 0.0;
      doubleArray1[3] = 0.0;
      doubleArray1[4] = (double) 5;
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator(0.0012326388888888888, 5, doubleArray0, doubleArray1);
      graggBulirschStoerIntegrator0.setInterpolationControl(true, 223);
      dormandPrince54Integrator0.getName();
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 0.0;
      HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator(0.0, 0.0, doubleArray0, doubleArray0);
      FixedStepHandler fixedStepHandler0 = mock(FixedStepHandler.class, new ViolatedAssumptionAnswer());
      StepNormalizerMode stepNormalizerMode0 = StepNormalizerMode.MULTIPLES;
      StepNormalizer stepNormalizer0 = new StepNormalizer(0.0, fixedStepHandler0, stepNormalizerMode0);
      highamHall54Integrator0.addStepHandler(stepNormalizer0);
      DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator((-2217.2784014481476), 0.0, 0.0, 0.0);
      dormandPrince54Integrator0.getOrder();
      double[] doubleArray1 = new double[7];
      doubleArray1[0] = 0.0;
      doubleArray1[1] = 0.0;
      doubleArray1[2] = (double) 5;
      doubleArray1[3] = 0.0;
      doubleArray1[4] = (-3448.6438167592);
      doubleArray1[5] = 0.0;
      doubleArray1[6] = (-2217.2784014481476);
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator((-3448.6438167592), 94326.0, doubleArray0, doubleArray1);
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter0);
//      try { 
        graggBulirschStoerIntegrator0.integrate(expandableStatefulODE0, 0.0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // 0 != 1
//         //
//         verifyException("org.apache.commons.math3.ode.nonstiff.AdaptiveStepsizeIntegrator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      double double0 = Double.NaN;
      DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator(0.0, 0.0, Double.NaN, 163.49324);
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      dormandPrince853Integrator0.addEventHandler(eventHandler0, 163.49324, 3844.0, 531);
      dormandPrince853Integrator0.setMaxEvaluations((-418));
      dormandPrince853Integrator0.getOrder();
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      double double1 = 2211.2;
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) (-418);
      double[] doubleArray1 = new double[5];
      doubleArray1[0] = 2211.2;
      doubleArray1[1] = 0.0;
      doubleArray1[2] = 2211.2;
      doubleArray1[3] = 3844.0;
      doubleArray1[4] = (-226.06713797934523);
      dormandPrince853Integrator0.setStepSizeControl(1000.0, (-1239.3935278), doubleArray1, doubleArray1);
      // Undeclared exception!
//      try { 
        dormandPrince853Integrator0.initializeStep(false, 531, doubleArray0, 163.49324, doubleArray0, doubleArray0, doubleArray0, doubleArray1);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      ClassicalRungeKuttaIntegrator classicalRungeKuttaIntegrator0 = new ClassicalRungeKuttaIntegrator(593.7594850288);
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 1387.884545;
      doubleArray0[1] = 0.0;
      doubleArray0[3] = 593.7594850288;
      classicalRungeKuttaIntegrator0.clearEventHandlers();
      doubleArray0[4] = 593.7594850288;
      DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator(593.7594850288, 1387.884545, doubleArray0, doubleArray0);
      dormandPrince853Integrator0.getStepHandlers();
      dormandPrince853Integrator0.setStepSizeControl(0.0, 1719.005067, 1387.884545, 1387.884545);
      AdamsBashforthIntegrator adamsBashforthIntegrator0 = new AdamsBashforthIntegrator(373, 0.0, 593.7594850288, 373, 0.0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      ThreeEighthesIntegrator threeEighthesIntegrator0 = new ThreeEighthesIntegrator((-3.7333333333333334));
      threeEighthesIntegrator0.getStepHandlers();
      threeEighthesIntegrator0.setMaxEvaluations(0);
      threeEighthesIntegrator0.getMaxEvaluations();
      FixedStepHandler fixedStepHandler0 = mock(FixedStepHandler.class, new ViolatedAssumptionAnswer());
      StepNormalizer stepNormalizer0 = new StepNormalizer((-639.578551), fixedStepHandler0);
      NordsieckStepInterpolator nordsieckStepInterpolator0 = new NordsieckStepInterpolator();
      // Undeclared exception!
//      try { 
        stepNormalizer0.handleStep(nordsieckStepInterpolator0, false);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.util.Arrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator(26.83773419943, (-1781.98625225747), 26.83773419943, 574);
      dormandPrince54Integrator0.setMaxEvaluations(574);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator(0.0, 0.0, 0.0, 686.2601074171135);
      highamHall54Integrator0.getOrder();
      highamHall54Integrator0.getEvaluations();
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      double double0 = 2392.972;
      EulerIntegrator eulerIntegrator0 = new EulerIntegrator(2392.972);
      eulerIntegrator0.clearStepHandlers();
      eulerIntegrator0.getMaxEvaluations();
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter0);
      eulerIntegrator0.setMaxEvaluations((-3145));
      // Undeclared exception!
      eulerIntegrator0.integrate(expandableStatefulODE0, 2392.972);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      ThreeEighthesIntegrator threeEighthesIntegrator0 = new ThreeEighthesIntegrator((-1746.04379547));
      StepHandler stepHandler0 = null;
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (-1746.04379547);
      // Undeclared exception!
//      try { 
        threeEighthesIntegrator0.computeDerivatives((-1746.04379547), doubleArray0, doubleArray0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 975.528563356577;
      doubleArray0[1] = 4.3239378585884645E70;
      doubleArray0[2] = 4.3239378585884645E70;
      doubleArray0[3] = (double) 325;
      doubleArray0[3] = 4.3239378585884645E70;
      doubleArray0[6] = 4.3239378585884645E70;
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator(325, 5173.82824161, doubleArray0, doubleArray0);
      graggBulirschStoerIntegrator0.setOrderControl(325, 0.0, Double.NaN);
      graggBulirschStoerIntegrator0.getCurrentSignedStepsize();
      graggBulirschStoerIntegrator0.setOrderControl((-2769), (-36.53707461674), 1329.46294903557);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      double double0 = 0.04471061572777259;
      ThreeEighthesIntegrator threeEighthesIntegrator0 = new ThreeEighthesIntegrator(0.04471061572777259);
      threeEighthesIntegrator0.getCurrentSignedStepsize();
      int int0 = (-873);
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = Double.NaN;
      doubleArray0[2] = 0.04471061572777259;
      AdamsBashforthIntegrator adamsBashforthIntegrator0 = null;
//      try {
        adamsBashforthIntegrator0 = new AdamsBashforthIntegrator((-873), 0.04471061572777259, 0.04471061572777259, doubleArray0, doubleArray0);
//        fail("Expecting exception: NegativeArraySizeException");
      
//      } catch(NegativeArraySizeException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.ode.nonstiff.AdamsNordsieckTransformer", e);
//      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      ClassicalRungeKuttaIntegrator classicalRungeKuttaIntegrator0 = new ClassicalRungeKuttaIntegrator(1000.0);
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 1000.0;
      doubleArray0[1] = 1000.0;
      doubleArray0[2] = 1000.0;
      doubleArray0[3] = (-1584.2234231022555);
      doubleArray0[4] = 1000.0;
      doubleArray0[5] = 1000.0;
      doubleArray0[6] = 1000.0;
      doubleArray0[7] = 1000.0;
      // Undeclared exception!
//      try { 
        classicalRungeKuttaIntegrator0.computeDerivatives(1000.0, doubleArray0, doubleArray0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      double double0 = 0.0;
      MidpointIntegrator midpointIntegrator0 = new MidpointIntegrator(0.0);
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(eventHandler0).g(anyDouble() , any(double[].class));
      IllinoisSolver illinoisSolver0 = new IllinoisSolver(0.0);
      midpointIntegrator0.addEventHandler(eventHandler0, 0.0, 0.0, (-2069), (UnivariateSolver) illinoisSolver0);
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter0);
      // Undeclared exception!
      midpointIntegrator0.integrate(expandableStatefulODE0, 0.0);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      GillIntegrator gillIntegrator0 = new GillIntegrator(3.623110695743118E237);
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator(4.809072216941908E-8, 4.809072216941908E-8, 5.6843418860808015E-11, 1.537490712803659E-166);
      IllinoisSolver illinoisSolver0 = new IllinoisSolver();
      graggBulirschStoerIntegrator0.addEventHandler((EventHandler) null, 2535.654890777619, 377.0, 2146907326, (UnivariateSolver) illinoisSolver0);
      graggBulirschStoerIntegrator0.setOrderControl(3432, (-1.0), (-1.0));
      assertEquals(4.809072216941908E-8, graggBulirschStoerIntegrator0.getCurrentSignedStepsize(), 0.01);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      ClassicalRungeKuttaIntegrator classicalRungeKuttaIntegrator0 = new ClassicalRungeKuttaIntegrator((-86.441));
      classicalRungeKuttaIntegrator0.addEventHandler((EventHandler) null, 3.623110695743118E237, 3.623110695743118E237, 4176);
      ClassicalRungeKuttaIntegrator classicalRungeKuttaIntegrator1 = new ClassicalRungeKuttaIntegrator(377.0);
      // Undeclared exception!
//      try { 
        classicalRungeKuttaIntegrator1.integrate((FirstOrderDifferentialEquations) null, 2433.9121033603683, (double[]) null, (double) 4176, (double[]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.ode.AbstractIntegrator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator(975.528563356577, 975.528563356577, 975.528563356577, 975.528563356577);
      int int0 = graggBulirschStoerIntegrator0.getMaxEvaluations();
      assertEquals(Integer.MAX_VALUE, int0);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 0.0;
      doubleArray0[5] = 0.0;
      DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator(0.0, 0.0, doubleArray0, doubleArray0);
      dormandPrince54Integrator0.getMaxEvaluations();
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator(0.0, (-869.627), (-317.32103798718816), 29.8402934266605);
      dormandPrince54Integrator0.clearStepHandlers();
      graggBulirschStoerIntegrator0.setStabilityCheck(true, 0, 0, 26.0629541118);
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      dormandPrince54Integrator0.addEventHandler(eventHandler0, (-770.7841), 0.0, 0);
      AdamsBashforthIntegrator adamsBashforthIntegrator0 = null;
//      try {
        adamsBashforthIntegrator0 = new AdamsBashforthIntegrator(0, 0.0, 0.0, Double.NaN, Double.NaN);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // multistep method needs at least 0 previous steps, got 2
//         //
//         verifyException("org.apache.commons.math3.ode.MultistepIntegrator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      GillIntegrator gillIntegrator0 = new GillIntegrator(3565.901058);
      gillIntegrator0.clearStepHandlers();
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 1796.6083324047952;
      doubleArray0[1] = 3565.901058;
      doubleArray0[2] = 3565.901058;
      doubleArray0[3] = 3565.901058;
      doubleArray0[4] = 3565.901058;
      doubleArray0[5] = 1796.6083324047952;
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator(3565.901058, 1796.6083324047952, doubleArray0, doubleArray0);
      graggBulirschStoerIntegrator0.addStepHandler((StepHandler) null);
      assertEquals("Gragg-Bulirsch-Stoer", graggBulirschStoerIntegrator0.getName());
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (-712.3366);
      doubleArray0[1] = (-712.3366);
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator((-712.3366), (-712.3366), doubleArray0, doubleArray0);
      FixedStepHandler fixedStepHandler0 = mock(FixedStepHandler.class, new ViolatedAssumptionAnswer());
      StepNormalizerBounds stepNormalizerBounds0 = StepNormalizerBounds.BOTH;
      StepNormalizer stepNormalizer0 = new StepNormalizer((-712.3366), fixedStepHandler0, stepNormalizerBounds0);
      graggBulirschStoerIntegrator0.addStepHandler(stepNormalizer0);
      assertEquals(Double.NaN, graggBulirschStoerIntegrator0.getCurrentStepStart(), 0.01);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator(0.0, 0.0, 0.0, 0.0);
      DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator(0.0, 1852.6810980210485, 1852.6810980210485, 1852.6810980210485);
      dormandPrince853Integrator0.getEventHandlers();
      dormandPrince853Integrator0.getEventHandlers();
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator(5.458481186294964E-36, 1852.6810980210485, (-1079.9), 1852.6810980210485);
      graggBulirschStoerIntegrator0.setOrderControl(3036, 1852.6810980210485, 377.0);
      assertEquals(Double.NaN, graggBulirschStoerIntegrator0.getCurrentStepStart(), 0.01);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      ClassicalRungeKuttaIntegrator classicalRungeKuttaIntegrator0 = new ClassicalRungeKuttaIntegrator(593.7594850288);
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 1387.884545;
      doubleArray0[1] = 0.0;
      doubleArray0[3] = 593.7594850288;
      classicalRungeKuttaIntegrator0.clearEventHandlers();
      doubleArray0[4] = 593.7594850288;
      DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator(593.7594850288, 1387.884545, doubleArray0, doubleArray0);
      dormandPrince853Integrator0.setStepSizeControl(0.0, 1719.005067, 1387.884545, 1387.884545);
      AdamsBashforthIntegrator adamsBashforthIntegrator0 = new AdamsBashforthIntegrator(373, 0.0, 593.7594850288, 373, 0.0);
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      double double0 = 0.3333333333333333;
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator(0.3333333333333333, (-2335.221358860791), (-723.564310004), (-769.44574385879));
      DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator((-2335.221358860791), Double.NaN, 0.0, 18.0);
      boolean boolean0 = true;
      int int0 = 1;
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 1;
      doubleArray0[1] = 18.0;
      doubleArray0[2] = 0.3333333333333333;
      doubleArray0[3] = (double) 1;
      double[] doubleArray1 = new double[9];
      doubleArray1[0] = (-769.44574385879);
      doubleArray1[1] = (-723.564310004);
      doubleArray1[2] = (-2699.03915114);
      doubleArray1[3] = (-723.564310004);
      doubleArray1[4] = (-2335.221358860791);
      doubleArray1[5] = (-2335.221358860791);
      doubleArray1[6] = (-2335.221358860791);
      doubleArray1[7] = 0.0;
      doubleArray1[8] = (double) 1;
      // Undeclared exception!
//      try { 
        dormandPrince54Integrator0.initializeStep(true, 1, doubleArray1, 0.0, doubleArray0, doubleArray1, doubleArray1, doubleArray1);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 4
//         //
//         verifyException("org.apache.commons.math3.ode.nonstiff.AdaptiveStepsizeIntegrator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      ClassicalRungeKuttaIntegrator classicalRungeKuttaIntegrator0 = new ClassicalRungeKuttaIntegrator(593.7594850288);
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 1387.884545;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 593.7594850288;
      doubleArray0[3] = 593.7594850288;
      classicalRungeKuttaIntegrator0.clearEventHandlers();
      doubleArray0[4] = 593.7594850288;
      DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator(593.7594850288, 1387.884545, doubleArray0, doubleArray0);
      double double0 = 0.0;
      dormandPrince853Integrator0.setStepSizeControl(0.0, 1719.005067, 1387.884545, 1387.884545);
      dormandPrince853Integrator0.getEventHandlers();
      dormandPrince853Integrator0.getOrder();
      dormandPrince853Integrator0.setMinReduction(0.0);
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      double[] doubleArray1 = new double[2];
      doubleArray1[0] = 1719.005067;
      doubleArray1[1] = 593.7594850288;
//      try { 
        classicalRungeKuttaIntegrator0.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, 1387.884545, doubleArray1, 0.0, doubleArray0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // 2 != 0
//         //
//         verifyException("org.apache.commons.math3.ode.AbstractIntegrator", e);
//      }
  }
}
