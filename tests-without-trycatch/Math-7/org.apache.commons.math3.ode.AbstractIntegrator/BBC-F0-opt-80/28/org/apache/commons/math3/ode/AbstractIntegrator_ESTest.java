/*
 * This file was automatically generated by EvoSuite
 * Sat Oct 23 17:47:50 GMT 2021
 */

package org.apache.commons.math3.ode;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Collection;
import org.apache.commons.math3.analysis.UnivariateFunction;
import org.apache.commons.math3.analysis.function.Floor;
import org.apache.commons.math3.analysis.function.HarmonicOscillator;
import org.apache.commons.math3.analysis.solvers.AllowedSolution;
import org.apache.commons.math3.analysis.solvers.BracketingNthOrderBrentSolver;
import org.apache.commons.math3.analysis.solvers.BrentSolver;
import org.apache.commons.math3.analysis.solvers.MullerSolver;
import org.apache.commons.math3.analysis.solvers.RegulaFalsiSolver;
import org.apache.commons.math3.analysis.solvers.RiddersSolver;
import org.apache.commons.math3.analysis.solvers.UnivariateSolver;
import org.apache.commons.math3.ode.ExpandableStatefulODE;
import org.apache.commons.math3.ode.FirstOrderConverter;
import org.apache.commons.math3.ode.FirstOrderDifferentialEquations;
import org.apache.commons.math3.ode.SecondOrderDifferentialEquations;
import org.apache.commons.math3.ode.events.EventHandler;
import org.apache.commons.math3.ode.nonstiff.AdamsBashforthIntegrator;
import org.apache.commons.math3.ode.nonstiff.AdamsMoultonIntegrator;
import org.apache.commons.math3.ode.nonstiff.ClassicalRungeKuttaIntegrator;
import org.apache.commons.math3.ode.nonstiff.DormandPrince54Integrator;
import org.apache.commons.math3.ode.nonstiff.DormandPrince853Integrator;
import org.apache.commons.math3.ode.nonstiff.GraggBulirschStoerIntegrator;
import org.apache.commons.math3.ode.nonstiff.HighamHall54Integrator;
import org.apache.commons.math3.ode.nonstiff.MidpointIntegrator;
import org.apache.commons.math3.ode.nonstiff.ThreeEighthesIntegrator;
import org.apache.commons.math3.ode.sampling.DummyStepHandler;
import org.apache.commons.math3.ode.sampling.FixedStepHandler;
import org.apache.commons.math3.ode.sampling.NordsieckStepInterpolator;
import org.apache.commons.math3.ode.sampling.StepHandler;
import org.apache.commons.math3.ode.sampling.StepInterpolator;
import org.apache.commons.math3.ode.sampling.StepNormalizer;
import org.apache.commons.math3.ode.sampling.StepNormalizerBounds;
import org.apache.commons.math3.ode.sampling.StepNormalizerMode;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class AbstractIntegrator_ESTest extends AbstractIntegrator_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter0);
      ThreeEighthesIntegrator threeEighthesIntegrator0 = new ThreeEighthesIntegrator(1191.728);
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = new double[0];
      threeEighthesIntegrator0.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, 1020.5996705138431, doubleArray0, 1191.728, doubleArray1);
      // Undeclared exception!
      threeEighthesIntegrator0.integrate(expandableStatefulODE0, 1660.314620788851);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 0.0;
      DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator(0.0, 0.0, doubleArray0, doubleArray0);
      dormandPrince54Integrator0.getEventHandlers();
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      double double0 = 4055.7616;
      int int0 = 1207;
      RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver(0.0, 0.0);
      HarmonicOscillator harmonicOscillator0 = new HarmonicOscillator(430.95, 2653.73442949, 0.0);
      dormandPrince54Integrator0.getCurrentSignedStepsize();
//      try { 
        regulaFalsiSolver0.solve((-1656), (UnivariateFunction) harmonicOscillator0, 1138.02, 1787.5211363058288);
//        fail("Expecting exception: IllegalStateException");
      
//      } catch(IllegalStateException e) {
//         //
//         // illegal state: maximal count (-1,656) exceeded: evaluations
//         //
//         verifyException("org.apache.commons.math3.analysis.solvers.BaseAbstractUnivariateSolver", e);
//      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter0);
      ThreeEighthesIntegrator threeEighthesIntegrator0 = new ThreeEighthesIntegrator(2964.0810153);
      double[] doubleArray0 = new double[0];
      threeEighthesIntegrator0.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, (-1787.3004011146), doubleArray0, 0.0, doubleArray0);
      threeEighthesIntegrator0.getName();
      threeEighthesIntegrator0.getEvaluations();
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ThreeEighthesIntegrator threeEighthesIntegrator0 = new ThreeEighthesIntegrator((-1225.3179201));
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      threeEighthesIntegrator0.setMaxEvaluations(0);
      threeEighthesIntegrator0.addEventHandler(eventHandler0, 0.0, 326.80203, 970);
      threeEighthesIntegrator0.getStepHandlers();
      threeEighthesIntegrator0.getMaxEvaluations();
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = (double) 970;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = (double) 0;
      double[] doubleArray1 = new double[6];
      doubleArray1[0] = 2988.0810153;
      doubleArray1[1] = 1312.1706866;
      doubleArray1[2] = 1312.1706866;
      doubleArray1[3] = 1312.1706866;
      doubleArray1[4] = 0.0;
      doubleArray1[5] = 0.0;
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator(1312.1706866, 6.837671137556327E30, doubleArray0, doubleArray1);
      graggBulirschStoerIntegrator0.setOrderControl(0, 0.0, 970);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      double double0 = (-1787.3004011146);
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter0);
      ThreeEighthesIntegrator threeEighthesIntegrator0 = new ThreeEighthesIntegrator(2964.0810153);
      double[] doubleArray0 = new double[0];
      threeEighthesIntegrator0.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, (-1.7809679916043692E-247), doubleArray0, (-1787.3004011146), doubleArray0);
      // Undeclared exception!
      threeEighthesIntegrator0.integrate(expandableStatefulODE0, 0.5723689794540405);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter0);
      ThreeEighthesIntegrator threeEighthesIntegrator0 = new ThreeEighthesIntegrator(0.0);
      double[] doubleArray0 = new double[0];
//      try { 
        threeEighthesIntegrator0.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, 2035.8799002102, doubleArray0, 2035.8799002102, doubleArray0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // too small integration interval: length = 0
//         //
//         verifyException("org.apache.commons.math3.ode.AbstractIntegrator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter0);
      ThreeEighthesIntegrator threeEighthesIntegrator0 = new ThreeEighthesIntegrator(6.643105496829061E-69);
      double[] doubleArray0 = new double[0];
//      try { 
        threeEighthesIntegrator0.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, 0.0, doubleArray0, 0.0, doubleArray0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // too small integration interval: length = 0
//         //
//         verifyException("org.apache.commons.math3.ode.AbstractIntegrator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      ThreeEighthesIntegrator threeEighthesIntegrator0 = new ThreeEighthesIntegrator(0);
      FixedStepHandler fixedStepHandler0 = mock(FixedStepHandler.class, new ViolatedAssumptionAnswer());
      StepNormalizerMode stepNormalizerMode0 = StepNormalizerMode.MULTIPLES;
      StepNormalizerBounds stepNormalizerBounds0 = StepNormalizerBounds.LAST;
      StepNormalizer stepNormalizer0 = new StepNormalizer(3166, fixedStepHandler0, stepNormalizerMode0, stepNormalizerBounds0);
      threeEighthesIntegrator0.addStepHandler(stepNormalizer0);
      threeEighthesIntegrator0.setMaxEvaluations(3166);
      double[] doubleArray0 = new double[0];
//      try { 
        threeEighthesIntegrator0.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, (-1787.3004011146), doubleArray0, 0.0, doubleArray0);
//        fail("Expecting exception: IllegalStateException");
      
//      } catch(IllegalStateException e) {
//         //
//         // illegal state: maximal count (3,166) exceeded
//         //
//         verifyException("org.apache.commons.math3.util.Incrementor$1", e);
//      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter0);
      ThreeEighthesIntegrator threeEighthesIntegrator0 = new ThreeEighthesIntegrator(Integer.MAX_VALUE);
      expandableStatefulODE0.setTime((-1.497405487919762E-139));
      threeEighthesIntegrator0.integrate(expandableStatefulODE0, 1.0);
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (-1.497405487919762E-139);
      doubleArray0[1] = 1.0;
      doubleArray0[2] = 1.0;
      doubleArray0[3] = 2.2737367544323206E-10;
      doubleArray0[4] = 0.0;
      doubleArray0[5] = 2.2737367544323206E-10;
      doubleArray0[6] = (-1.497405487919762E-139);
      threeEighthesIntegrator0.computeDerivatives(2.2737367544323206E-10, doubleArray0, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      SecondOrderDifferentialEquations secondOrderDifferentialEquations1 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations1).getDimension();
      FirstOrderConverter firstOrderConverter1 = new FirstOrderConverter(secondOrderDifferentialEquations1);
      ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter1);
      double double0 = (-691.20761811935);
      ThreeEighthesIntegrator threeEighthesIntegrator0 = new ThreeEighthesIntegrator((-691.20761811935));
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = new double[7];
      doubleArray1[0] = 0.0;
      doubleArray1[1] = (-691.20761811935);
      doubleArray1[2] = 2964.0810153;
      doubleArray1[3] = (-691.20761811935);
      doubleArray1[4] = 0.0;
      doubleArray1[5] = 0.0;
      doubleArray1[6] = 0.0;
//      try { 
        threeEighthesIntegrator0.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, 0.0, doubleArray0, 3.695372823623631E-12, doubleArray1);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // 7 != 0
//         //
//         verifyException("org.apache.commons.math3.ode.AbstractIntegrator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter0);
      ThreeEighthesIntegrator threeEighthesIntegrator0 = new ThreeEighthesIntegrator(2964.0810153);
      double[] doubleArray0 = new double[0];
      threeEighthesIntegrator0.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, (-1787.3004011146), doubleArray0, 0.0, doubleArray0);
      AdamsMoultonIntegrator adamsMoultonIntegrator0 = new AdamsMoultonIntegrator(5, (-1787.3004011146), 0.0, (-1787.3004011146), 0.0);
      threeEighthesIntegrator0.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, 0.0, doubleArray0, 1787.3004011146, doubleArray0);
      DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator(6.466611224443739E245, (-542.9345531493), doubleArray0, doubleArray0);
      dormandPrince853Integrator0.getOrder();
      DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator(2.2737367544323206E-10, 2964.0810153, doubleArray0, doubleArray0);
      dormandPrince54Integrator0.getOrder();
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      double double0 = (-1787.3004011146);
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      ThreeEighthesIntegrator threeEighthesIntegrator0 = new ThreeEighthesIntegrator(0);
      double[] doubleArray0 = new double[0];
      double double1 = 0.0;
      // Undeclared exception!
      threeEighthesIntegrator0.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, (-1787.3004011146), doubleArray0, 0.0, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      double double0 = 0.0;
      RiddersSolver riddersSolver0 = new RiddersSolver(0.0, 3088.7567974);
      double double1 = 97.4247383974;
      double double2 = 1992.57;
      ClassicalRungeKuttaIntegrator classicalRungeKuttaIntegrator0 = new ClassicalRungeKuttaIntegrator(1992.57);
      int int0 = 382;
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 984.6024884167123, 2.2737367544323206E-10, (-2871.876897), 2.2737367544323206E-10).when(eventHandler0).g(anyDouble() , any(double[].class));
      int int1 = 9;
      MullerSolver mullerSolver0 = new MullerSolver(3653.1, 1992.57);
      classicalRungeKuttaIntegrator0.addEventHandler(eventHandler0, 3088.7567974, 3088.7567974, 9, (UnivariateSolver) mullerSolver0);
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      SecondOrderDifferentialEquations secondOrderDifferentialEquations1 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(1).when(secondOrderDifferentialEquations1).getDimension();
      FirstOrderConverter firstOrderConverter1 = new FirstOrderConverter(secondOrderDifferentialEquations1);
      SecondOrderDifferentialEquations secondOrderDifferentialEquations2 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(1).when(secondOrderDifferentialEquations2).getDimension();
      FirstOrderConverter firstOrderConverter2 = new FirstOrderConverter(secondOrderDifferentialEquations2);
      ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter2);
      ExpandableStatefulODE expandableStatefulODE1 = new ExpandableStatefulODE(firstOrderConverter0);
      ExpandableStatefulODE expandableStatefulODE2 = new ExpandableStatefulODE(firstOrderConverter0);
//      try { 
        classicalRungeKuttaIntegrator0.integrate(expandableStatefulODE2, (double) 382);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // function values at endpoints do not have different signs, endpoints: [\uFFFD, \uFFFD], values: [0, 0]
//         //
//         verifyException("org.apache.commons.math3.analysis.solvers.UnivariateSolverUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(798).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter0);
      ThreeEighthesIntegrator threeEighthesIntegrator0 = new ThreeEighthesIntegrator((-874.1385466));
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (-874.1385466);
      doubleArray0[1] = 2187.0;
      doubleArray0[2] = 2187.0;
      doubleArray0[3] = 2187.0;
      doubleArray0[4] = 0.19541901350021362;
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator(2187.0, (-874.1385466), doubleArray0, doubleArray0);
      graggBulirschStoerIntegrator0.addStepHandler((StepHandler) null);
//      try { 
        graggBulirschStoerIntegrator0.integrate(expandableStatefulODE0, 1574.45221);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // 1,596 != 5
//         //
//         verifyException("org.apache.commons.math3.ode.nonstiff.AdaptiveStepsizeIntegrator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter0);
      ThreeEighthesIntegrator threeEighthesIntegrator0 = new ThreeEighthesIntegrator(0.0);
      FixedStepHandler fixedStepHandler0 = mock(FixedStepHandler.class, new ViolatedAssumptionAnswer());
      StepNormalizerMode stepNormalizerMode0 = StepNormalizerMode.INCREMENT;
      StepNormalizer stepNormalizer0 = new StepNormalizer(929.999778206, fixedStepHandler0, stepNormalizerMode0);
      threeEighthesIntegrator0.addStepHandler(stepNormalizer0);
      // Undeclared exception!
      threeEighthesIntegrator0.integrate(expandableStatefulODE0, 929.999778206);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      double double0 = (-1100.4);
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator(1523.976514809, 1523.976514809, 1523.976514809, (-1100.4));
      ClassicalRungeKuttaIntegrator classicalRungeKuttaIntegrator0 = new ClassicalRungeKuttaIntegrator(3.323458344853057E-8);
      RiddersSolver riddersSolver0 = new RiddersSolver((-1100.4), 0.0);
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      classicalRungeKuttaIntegrator0.addEventHandler(eventHandler0, 97.4247383974, 1283.2945, 0, (UnivariateSolver) riddersSolver0);
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      SecondOrderDifferentialEquations secondOrderDifferentialEquations1 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations1).getDimension();
      FirstOrderConverter firstOrderConverter1 = new FirstOrderConverter(secondOrderDifferentialEquations1);
      ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter1);
      classicalRungeKuttaIntegrator0.setMaxEvaluations(0);
      ExpandableStatefulODE expandableStatefulODE1 = new ExpandableStatefulODE(firstOrderConverter1);
//      try { 
        classicalRungeKuttaIntegrator0.integrate(expandableStatefulODE1, (-2185.87947957));
//        fail("Expecting exception: IllegalStateException");
      
//      } catch(IllegalStateException e) {
//         //
//         // illegal state: maximal count (0) exceeded
//         //
//         verifyException("org.apache.commons.math3.util.Incrementor$1", e);
//      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      ThreeEighthesIntegrator threeEighthesIntegrator0 = new ThreeEighthesIntegrator(2.7698267293941856E-162);
      // Undeclared exception!
//      try { 
        threeEighthesIntegrator0.integrate((ExpandableStatefulODE) null, (-1787.3004011146));
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.ode.AbstractIntegrator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      ThreeEighthesIntegrator threeEighthesIntegrator0 = new ThreeEighthesIntegrator(1000.0);
      threeEighthesIntegrator0.getCurrentStepStart();
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator(2429.49, 2.193649279840519E199, 1000.0, 2429.49);
      ClassicalRungeKuttaIntegrator classicalRungeKuttaIntegrator0 = new ClassicalRungeKuttaIntegrator(2.193649279840519E199);
      double double0 = 5.184023388254773E-130;
      RiddersSolver riddersSolver0 = new RiddersSolver(1000.0, 5.184023388254773E-130);
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      doReturn(2.2737367544323206E-10, Double.NaN).when(eventHandler0).g(anyDouble() , any(double[].class));
      double double1 = 183.5;
      classicalRungeKuttaIntegrator0.addEventHandler(eventHandler0, (-1182.9), 183.5, 0, (UnivariateSolver) riddersSolver0);
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(2570).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      SecondOrderDifferentialEquations secondOrderDifferentialEquations1 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations1).getDimension();
      FirstOrderConverter firstOrderConverter1 = new FirstOrderConverter(secondOrderDifferentialEquations1);
      ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter1);
      ExpandableStatefulODE expandableStatefulODE1 = new ExpandableStatefulODE(firstOrderConverter1);
//      try { 
        classicalRungeKuttaIntegrator0.integrate(expandableStatefulODE1, (-2554.43170763695));
//        fail("Expecting exception: IllegalStateException");
      
//      } catch(IllegalStateException e) {
//         //
//         // illegal state: maximal count (0) exceeded: evaluations
//         //
//         verifyException("org.apache.commons.math3.analysis.solvers.BaseAbstractUnivariateSolver", e);
//      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter0);
      ExpandableStatefulODE expandableStatefulODE1 = new ExpandableStatefulODE(firstOrderConverter0);
      ClassicalRungeKuttaIntegrator classicalRungeKuttaIntegrator0 = new ClassicalRungeKuttaIntegrator((-2554.43170763695));
      classicalRungeKuttaIntegrator0.setMaxEvaluations(1);
      ExpandableStatefulODE expandableStatefulODE2 = new ExpandableStatefulODE(firstOrderConverter0);
//      try { 
        classicalRungeKuttaIntegrator0.integrate(expandableStatefulODE2, (-2554.43170763695));
//        fail("Expecting exception: IllegalStateException");
      
//      } catch(IllegalStateException e) {
//         //
//         // illegal state: maximal count (1) exceeded
//         //
//         verifyException("org.apache.commons.math3.util.Incrementor$1", e);
//      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator(4493.8462053, 2.3805896467049493E-39, doubleArray0, doubleArray0);
      DormandPrince54Integrator dormandPrince54Integrator1 = new DormandPrince54Integrator(4493.8462053, 2.3805896467049493E-39, 2.3195229636950566E-16, 2.3195229636950566E-16);
      dormandPrince54Integrator1.getEventHandlers();
      dormandPrince54Integrator1.clearStepHandlers();
      RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver(Double.NaN, Double.NaN);
      ThreeEighthesIntegrator threeEighthesIntegrator0 = new ThreeEighthesIntegrator(Double.NaN);
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter0);
      double[] doubleArray1 = new double[8];
      doubleArray1[0] = 2.3195229636950566E-16;
      doubleArray1[1] = Double.NaN;
      doubleArray1[2] = 4493.8462053;
      doubleArray1[3] = (-1.1253822296423454E-15);
      doubleArray1[4] = 0.0;
      doubleArray1[5] = 2964.0810153;
      doubleArray1[6] = 0.0;
      doubleArray1[7] = 2964.0810153;
//      try { 
        threeEighthesIntegrator0.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, (-1.1253822296423454E-15), doubleArray1, (-1496.09), doubleArray0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // 8 != 0
//         //
//         verifyException("org.apache.commons.math3.ode.AbstractIntegrator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      assertEquals(0, firstOrderConverter0.getDimension());
      assertNotNull(firstOrderConverter0);
      
      ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter0);
      assertEquals(0, firstOrderConverter0.getDimension());
      assertEquals(Double.NaN, expandableStatefulODE0.getTime(), 0.01);
      assertNotNull(expandableStatefulODE0);
      
      ThreeEighthesIntegrator threeEighthesIntegrator0 = new ThreeEighthesIntegrator(2964.0810153);
      assertEquals(Double.NaN, threeEighthesIntegrator0.getCurrentStepStart(), 0.01);
      assertEquals(Double.NaN, threeEighthesIntegrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals("3/8", threeEighthesIntegrator0.getName());
      assertNotNull(threeEighthesIntegrator0);
      
      double[] doubleArray0 = new double[0];
      double double0 = threeEighthesIntegrator0.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, (-1787.3004011146), doubleArray0, 0.0, doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0.0, double0, 0.01);
      assertEquals(0, firstOrderConverter0.getDimension());
      assertEquals(Double.NaN, threeEighthesIntegrator0.getCurrentStepStart(), 0.01);
      assertEquals(Double.NaN, threeEighthesIntegrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals("3/8", threeEighthesIntegrator0.getName());
      assertEquals(0, doubleArray0.length);
      
      ExpandableStatefulODE expandableStatefulODE1 = new ExpandableStatefulODE(firstOrderConverter0);
      assertFalse(expandableStatefulODE1.equals((Object)expandableStatefulODE0));
      assertEquals(0, firstOrderConverter0.getDimension());
      assertEquals(Double.NaN, expandableStatefulODE1.getTime(), 0.01);
      assertNotNull(expandableStatefulODE1);
      
      // Undeclared exception!
      threeEighthesIntegrator0.integrate(expandableStatefulODE1, 2964.0810153);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      ThreeEighthesIntegrator threeEighthesIntegrator0 = new ThreeEighthesIntegrator(1000.0);
      assertEquals(Double.NaN, threeEighthesIntegrator0.getCurrentStepStart(), 0.01);
      assertEquals(Double.NaN, threeEighthesIntegrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals("3/8", threeEighthesIntegrator0.getName());
      assertNotNull(threeEighthesIntegrator0);
      
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 1000.0;
      doubleArray0[1] = (-1079.61354);
      doubleArray0[2] = 1000.0;
      doubleArray0[3] = 1000.0;
      doubleArray0[4] = (-1079.61354);
      doubleArray0[5] = (-1079.61354);
      doubleArray0[6] = 1000.0;
      doubleArray0[7] = 1000.0;
      doubleArray0[8] = 1000.0;
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator(1000.0, 1000.0, doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {1000.0, (-1079.61354), 1000.0, 1000.0, (-1079.61354), (-1079.61354), 1000.0, 1000.0, 1000.0}, doubleArray0, 0.01);
      assertEquals(1000.0, graggBulirschStoerIntegrator0.getMaxStep(), 0.01);
      assertEquals(1000.0, graggBulirschStoerIntegrator0.getMinStep(), 0.01);
      assertEquals(1000.0, graggBulirschStoerIntegrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals("Gragg-Bulirsch-Stoer", graggBulirschStoerIntegrator0.getName());
      assertEquals(Double.NaN, graggBulirschStoerIntegrator0.getCurrentStepStart(), 0.01);
      assertNotNull(graggBulirschStoerIntegrator0);
      assertEquals(9, doubleArray0.length);
      
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator1 = new GraggBulirschStoerIntegrator((-1.0), 0.0, (-1079.61354), 0.0);
      assertFalse(graggBulirschStoerIntegrator1.equals((Object)graggBulirschStoerIntegrator0));
      assertEquals(0.0, graggBulirschStoerIntegrator1.getCurrentSignedStepsize(), 0.01);
      assertEquals("Gragg-Bulirsch-Stoer", graggBulirschStoerIntegrator1.getName());
      assertEquals(0.0, graggBulirschStoerIntegrator1.getMaxStep(), 0.01);
      assertEquals(Double.NaN, graggBulirschStoerIntegrator1.getCurrentStepStart(), 0.01);
      assertEquals(1.0, graggBulirschStoerIntegrator1.getMinStep(), 0.01);
      assertNotNull(graggBulirschStoerIntegrator1);
      
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(eventHandler0).toString();
      graggBulirschStoerIntegrator1.addEventHandler(eventHandler0, 0.0, 1000.0, 931);
      assertNotSame(graggBulirschStoerIntegrator1, graggBulirschStoerIntegrator0);
      assertFalse(graggBulirschStoerIntegrator1.equals((Object)graggBulirschStoerIntegrator0));
      assertEquals(0.0, graggBulirschStoerIntegrator1.getCurrentSignedStepsize(), 0.01);
      assertEquals("Gragg-Bulirsch-Stoer", graggBulirschStoerIntegrator1.getName());
      assertEquals(0.0, graggBulirschStoerIntegrator1.getMaxStep(), 0.01);
      assertEquals(Double.NaN, graggBulirschStoerIntegrator1.getCurrentStepStart(), 0.01);
      assertEquals(1.0, graggBulirschStoerIntegrator1.getMinStep(), 0.01);
      
      graggBulirschStoerIntegrator1.setInterpolationControl(false, 8);
      assertNotSame(graggBulirschStoerIntegrator1, graggBulirschStoerIntegrator0);
      assertFalse(graggBulirschStoerIntegrator1.equals((Object)graggBulirschStoerIntegrator0));
      assertEquals(0.0, graggBulirschStoerIntegrator1.getCurrentSignedStepsize(), 0.01);
      assertEquals("Gragg-Bulirsch-Stoer", graggBulirschStoerIntegrator1.getName());
      assertEquals(0.0, graggBulirschStoerIntegrator1.getMaxStep(), 0.01);
      assertEquals(Double.NaN, graggBulirschStoerIntegrator1.getCurrentStepStart(), 0.01);
      assertEquals(1.0, graggBulirschStoerIntegrator1.getMinStep(), 0.01);
      
      Collection<EventHandler> collection0 = graggBulirschStoerIntegrator1.getEventHandlers();
      assertNotSame(graggBulirschStoerIntegrator1, graggBulirschStoerIntegrator0);
      assertTrue(collection0.contains(eventHandler0));
      assertFalse(graggBulirschStoerIntegrator1.equals((Object)graggBulirschStoerIntegrator0));
      assertEquals(0.0, graggBulirschStoerIntegrator1.getCurrentSignedStepsize(), 0.01);
      assertEquals("Gragg-Bulirsch-Stoer", graggBulirschStoerIntegrator1.getName());
      assertEquals(0.0, graggBulirschStoerIntegrator1.getMaxStep(), 0.01);
      assertEquals(Double.NaN, graggBulirschStoerIntegrator1.getCurrentStepStart(), 0.01);
      assertEquals(1.0, graggBulirschStoerIntegrator1.getMinStep(), 0.01);
      assertNotNull(collection0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      double double0 = 1.0;
      ThreeEighthesIntegrator threeEighthesIntegrator0 = new ThreeEighthesIntegrator(1.0);
      assertEquals("3/8", threeEighthesIntegrator0.getName());
      assertEquals(Double.NaN, threeEighthesIntegrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals(Double.NaN, threeEighthesIntegrator0.getCurrentStepStart(), 0.01);
      assertNotNull(threeEighthesIntegrator0);
      
      double double1 = threeEighthesIntegrator0.getCurrentStepStart();
      assertEquals(Double.NaN, double1, 0.01);
      assertNotEquals(double1, double0, 0.01);
      assertEquals("3/8", threeEighthesIntegrator0.getName());
      assertEquals(Double.NaN, threeEighthesIntegrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals(Double.NaN, threeEighthesIntegrator0.getCurrentStepStart(), 0.01);
      
      String string0 = threeEighthesIntegrator0.getName();
      assertEquals("3/8", string0);
      assertEquals("3/8", threeEighthesIntegrator0.getName());
      assertEquals(Double.NaN, threeEighthesIntegrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals(Double.NaN, threeEighthesIntegrator0.getCurrentStepStart(), 0.01);
      assertNotNull(string0);
      
      double double2 = threeEighthesIntegrator0.getCurrentStepStart();
      assertEquals(Double.NaN, double2, 0.01);
      assertEquals(double2, double1, 0.01);
      assertNotEquals(double2, double0, 0.01);
      assertEquals("3/8", threeEighthesIntegrator0.getName());
      assertEquals(Double.NaN, threeEighthesIntegrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals(Double.NaN, threeEighthesIntegrator0.getCurrentStepStart(), 0.01);
      
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator(1.0, 1.0, 2429.49, Double.NaN);
      assertEquals(1.0, graggBulirschStoerIntegrator0.getMinStep(), 0.01);
      assertEquals("Gragg-Bulirsch-Stoer", graggBulirschStoerIntegrator0.getName());
      assertEquals(1.0, graggBulirschStoerIntegrator0.getMaxStep(), 0.01);
      assertEquals(Double.NaN, graggBulirschStoerIntegrator0.getCurrentStepStart(), 0.01);
      assertEquals(1.0, graggBulirschStoerIntegrator0.getCurrentSignedStepsize(), 0.01);
      assertNotNull(graggBulirschStoerIntegrator0);
      
      ClassicalRungeKuttaIntegrator classicalRungeKuttaIntegrator0 = new ClassicalRungeKuttaIntegrator(514.43);
      assertEquals("classical Runge-Kutta", classicalRungeKuttaIntegrator0.getName());
      assertEquals(Double.NaN, classicalRungeKuttaIntegrator0.getCurrentStepStart(), 0.01);
      assertEquals(Double.NaN, classicalRungeKuttaIntegrator0.getCurrentSignedStepsize(), 0.01);
      assertNotNull(classicalRungeKuttaIntegrator0);
      
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(eventHandler0).g(anyDouble() , any(double[].class));
      double double3 = 0.0;
      int int0 = 0;
      double double4 = 1000.0;
      RiddersSolver riddersSolver0 = new RiddersSolver(0.0, 1000.0);
      assertEquals(0.0, riddersSolver0.getMax(), 0.01);
      assertEquals(0.0, riddersSolver0.getStartValue(), 0.01);
      assertEquals(1.0E-15, riddersSolver0.getFunctionValueAccuracy(), 0.01);
      assertEquals(0.0, riddersSolver0.getMin(), 0.01);
      assertEquals(0.0, riddersSolver0.getRelativeAccuracy(), 0.01);
      assertEquals(1000.0, riddersSolver0.getAbsoluteAccuracy(), 0.01);
      assertNotNull(riddersSolver0);
      
      classicalRungeKuttaIntegrator0.addEventHandler(eventHandler0, 1.3319784467641742E-9, 0.0, 0, (UnivariateSolver) riddersSolver0);
      assertEquals("classical Runge-Kutta", classicalRungeKuttaIntegrator0.getName());
      assertEquals(Double.NaN, classicalRungeKuttaIntegrator0.getCurrentStepStart(), 0.01);
      assertEquals(Double.NaN, classicalRungeKuttaIntegrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals(0.0, riddersSolver0.getMax(), 0.01);
      assertEquals(0.0, riddersSolver0.getStartValue(), 0.01);
      assertEquals(1.0E-15, riddersSolver0.getFunctionValueAccuracy(), 0.01);
      assertEquals(0.0, riddersSolver0.getMin(), 0.01);
      assertEquals(0.0, riddersSolver0.getRelativeAccuracy(), 0.01);
      assertEquals(1000.0, riddersSolver0.getAbsoluteAccuracy(), 0.01);
      
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      assertEquals(0, firstOrderConverter0.getDimension());
      assertNotNull(firstOrderConverter0);
      
      SecondOrderDifferentialEquations secondOrderDifferentialEquations1 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations1).getDimension();
      FirstOrderConverter firstOrderConverter1 = new FirstOrderConverter(secondOrderDifferentialEquations1);
      assertFalse(firstOrderConverter1.equals((Object)firstOrderConverter0));
      assertEquals(0, firstOrderConverter1.getDimension());
      assertNotNull(firstOrderConverter1);
      
      ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter1);
      assertFalse(firstOrderConverter1.equals((Object)firstOrderConverter0));
      assertEquals(0, firstOrderConverter1.getDimension());
      assertEquals(Double.NaN, expandableStatefulODE0.getTime(), 0.01);
      assertNotNull(expandableStatefulODE0);
      
      // Undeclared exception!
      classicalRungeKuttaIntegrator0.integrate(expandableStatefulODE0, 0.0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (-2879.876570897621);
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator((-1635.058186826679), 767.546392415838, doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {(-2879.876570897621)}, doubleArray0, 0.01);
      assertEquals(1635.058186826679, graggBulirschStoerIntegrator0.getMinStep(), 0.01);
      assertEquals(1120.26024328671, graggBulirschStoerIntegrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals(767.546392415838, graggBulirschStoerIntegrator0.getMaxStep(), 0.01);
      assertEquals("Gragg-Bulirsch-Stoer", graggBulirschStoerIntegrator0.getName());
      assertEquals(Double.NaN, graggBulirschStoerIntegrator0.getCurrentStepStart(), 0.01);
      assertNotNull(graggBulirschStoerIntegrator0);
      assertEquals(1, doubleArray0.length);
      
      graggBulirschStoerIntegrator0.setInitialStepSize(843.515736223);
      assertArrayEquals(new double[] {(-2879.876570897621)}, doubleArray0, 0.01);
      assertEquals(1635.058186826679, graggBulirschStoerIntegrator0.getMinStep(), 0.01);
      assertEquals(1120.26024328671, graggBulirschStoerIntegrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals(767.546392415838, graggBulirschStoerIntegrator0.getMaxStep(), 0.01);
      assertEquals("Gragg-Bulirsch-Stoer", graggBulirschStoerIntegrator0.getName());
      assertEquals(Double.NaN, graggBulirschStoerIntegrator0.getCurrentStepStart(), 0.01);
      assertEquals(1, doubleArray0.length);
      
      graggBulirschStoerIntegrator0.setInterpolationControl(false, 782);
      assertArrayEquals(new double[] {(-2879.876570897621)}, doubleArray0, 0.01);
      assertEquals(1635.058186826679, graggBulirschStoerIntegrator0.getMinStep(), 0.01);
      assertEquals(1120.26024328671, graggBulirschStoerIntegrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals(767.546392415838, graggBulirschStoerIntegrator0.getMaxStep(), 0.01);
      assertEquals("Gragg-Bulirsch-Stoer", graggBulirschStoerIntegrator0.getName());
      assertEquals(Double.NaN, graggBulirschStoerIntegrator0.getCurrentStepStart(), 0.01);
      assertEquals(1, doubleArray0.length);
      
      double double0 = graggBulirschStoerIntegrator0.getCurrentSignedStepsize();
      assertArrayEquals(new double[] {(-2879.876570897621)}, doubleArray0, 0.01);
      assertEquals(1120.26024328671, double0, 0.01);
      assertEquals(1635.058186826679, graggBulirschStoerIntegrator0.getMinStep(), 0.01);
      assertEquals(1120.26024328671, graggBulirschStoerIntegrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals(767.546392415838, graggBulirschStoerIntegrator0.getMaxStep(), 0.01);
      assertEquals("Gragg-Bulirsch-Stoer", graggBulirschStoerIntegrator0.getName());
      assertEquals(Double.NaN, graggBulirschStoerIntegrator0.getCurrentStepStart(), 0.01);
      assertEquals(1, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      AdamsBashforthIntegrator adamsBashforthIntegrator0 = new AdamsBashforthIntegrator(5, 5, 5, (-560.874600467), (-560.874600467));
      assertEquals(0.2, adamsBashforthIntegrator0.getMinReduction(), 0.01);
      assertEquals(5.0, adamsBashforthIntegrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals(5.0, adamsBashforthIntegrator0.getMaxStep(), 0.01);
      assertEquals(1.148698354997035, adamsBashforthIntegrator0.getMaxGrowth(), 0.01);
      assertEquals(Double.NaN, adamsBashforthIntegrator0.getCurrentStepStart(), 0.01);
      assertEquals(0.9, adamsBashforthIntegrator0.getSafety(), 0.01);
      assertEquals("Adams-Bashforth", adamsBashforthIntegrator0.getName());
      assertEquals(5.0, adamsBashforthIntegrator0.getMinStep(), 0.01);
      assertNotNull(adamsBashforthIntegrator0);
      
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      BrentSolver brentSolver0 = new BrentSolver(0.0, (-4096.45));
      assertEquals(0.0, brentSolver0.getStartValue(), 0.01);
      assertEquals((-4096.45), brentSolver0.getAbsoluteAccuracy(), 0.01);
      assertEquals(0.0, brentSolver0.getMin(), 0.01);
      assertEquals(0.0, brentSolver0.getMax(), 0.01);
      assertEquals(1.0E-15, brentSolver0.getFunctionValueAccuracy(), 0.01);
      assertEquals(0.0, brentSolver0.getRelativeAccuracy(), 0.01);
      assertNotNull(brentSolver0);
      
      Floor floor0 = new Floor();
      assertNotNull(floor0);
      
      double double0 = floor0.value(1948.0);
      assertEquals(1948.0, double0, 0.01);
      
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (-560.874600467);
      doubleArray0[2] = 1948.0;
      doubleArray0[3] = 1948.0;
      doubleArray0[4] = (-204.3603465484);
      doubleArray0[5] = 1948.0;
      doubleArray0[4] = (-4096.45);
      doubleArray0[7] = 1948.0;
      doubleArray0[8] = (double) 5;
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator(1948.0, 5, doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {0.0, (-560.874600467), 1948.0, 1948.0, (-4096.45), 1948.0, 0.0, 1948.0, 5.0}, doubleArray0, 0.01);
      assertEquals(1948.0, graggBulirschStoerIntegrator0.getMinStep(), 0.01);
      assertEquals(Double.NaN, graggBulirschStoerIntegrator0.getCurrentStepStart(), 0.01);
      assertEquals("Gragg-Bulirsch-Stoer", graggBulirschStoerIntegrator0.getName());
      assertEquals(5.0, graggBulirschStoerIntegrator0.getMaxStep(), 0.01);
      assertEquals(98.69143833180262, graggBulirschStoerIntegrator0.getCurrentSignedStepsize(), 0.01);
      assertNotNull(graggBulirschStoerIntegrator0);
      assertEquals(9, doubleArray0.length);
      
      FixedStepHandler fixedStepHandler0 = mock(FixedStepHandler.class, new ViolatedAssumptionAnswer());
      StepNormalizer stepNormalizer0 = new StepNormalizer(1416.0, fixedStepHandler0);
      assertNotNull(stepNormalizer0);
      
      stepNormalizer0.init(1948.0, doubleArray0, (-2068.42));
      assertArrayEquals(new double[] {0.0, (-560.874600467), 1948.0, 1948.0, (-4096.45), 1948.0, 0.0, 1948.0, 5.0}, doubleArray0, 0.01);
      assertEquals(9, doubleArray0.length);
      
      graggBulirschStoerIntegrator0.addStepHandler(stepNormalizer0);
      assertArrayEquals(new double[] {0.0, (-560.874600467), 1948.0, 1948.0, (-4096.45), 1948.0, 0.0, 1948.0, 5.0}, doubleArray0, 0.01);
      assertEquals(1948.0, graggBulirschStoerIntegrator0.getMinStep(), 0.01);
      assertEquals(Double.NaN, graggBulirschStoerIntegrator0.getCurrentStepStart(), 0.01);
      assertEquals("Gragg-Bulirsch-Stoer", graggBulirschStoerIntegrator0.getName());
      assertEquals(5.0, graggBulirschStoerIntegrator0.getMaxStep(), 0.01);
      assertEquals(98.69143833180262, graggBulirschStoerIntegrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals(9, doubleArray0.length);
      
      double double1 = graggBulirschStoerIntegrator0.getCurrentSignedStepsize();
      assertArrayEquals(new double[] {0.0, (-560.874600467), 1948.0, 1948.0, (-4096.45), 1948.0, 0.0, 1948.0, 5.0}, doubleArray0, 0.01);
      assertEquals(98.69143833180262, double1, 0.01);
      assertNotEquals(double1, double0, 0.01);
      assertEquals(1948.0, graggBulirschStoerIntegrator0.getMinStep(), 0.01);
      assertEquals(Double.NaN, graggBulirschStoerIntegrator0.getCurrentStepStart(), 0.01);
      assertEquals("Gragg-Bulirsch-Stoer", graggBulirschStoerIntegrator0.getName());
      assertEquals(5.0, graggBulirschStoerIntegrator0.getMaxStep(), 0.01);
      assertEquals(98.69143833180262, graggBulirschStoerIntegrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals(9, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      ThreeEighthesIntegrator threeEighthesIntegrator0 = new ThreeEighthesIntegrator(3679.2041233);
      assertEquals("3/8", threeEighthesIntegrator0.getName());
      assertEquals(Double.NaN, threeEighthesIntegrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals(Double.NaN, threeEighthesIntegrator0.getCurrentStepStart(), 0.01);
      assertNotNull(threeEighthesIntegrator0);
      
      threeEighthesIntegrator0.clearEventHandlers();
      assertEquals("3/8", threeEighthesIntegrator0.getName());
      assertEquals(Double.NaN, threeEighthesIntegrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals(Double.NaN, threeEighthesIntegrator0.getCurrentStepStart(), 0.01);
      
      double double0 = (-1375.2013377916);
      DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator(2193.03486914859, (-1375.2013377916), 3679.2041233, (-1375.2013377916));
      assertEquals(1736.6244515947506, dormandPrince853Integrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals(0.2, dormandPrince853Integrator0.getMinReduction(), 0.01);
      assertEquals(8, dormandPrince853Integrator0.getOrder());
      assertEquals("Dormand-Prince 8 (5, 3)", dormandPrince853Integrator0.getName());
      assertEquals(10.0, dormandPrince853Integrator0.getMaxGrowth(), 0.01);
      assertEquals(2193.03486914859, dormandPrince853Integrator0.getMinStep(), 0.01);
      assertEquals(1375.2013377916, dormandPrince853Integrator0.getMaxStep(), 0.01);
      assertEquals(Double.NaN, dormandPrince853Integrator0.getCurrentStepStart(), 0.01);
      assertEquals(0.9, dormandPrince853Integrator0.getSafety(), 0.01);
      assertNotNull(dormandPrince853Integrator0);
      
      int int0 = dormandPrince853Integrator0.getOrder();
      assertEquals(8, int0);
      assertEquals(1736.6244515947506, dormandPrince853Integrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals(0.2, dormandPrince853Integrator0.getMinReduction(), 0.01);
      assertEquals(8, dormandPrince853Integrator0.getOrder());
      assertEquals("Dormand-Prince 8 (5, 3)", dormandPrince853Integrator0.getName());
      assertEquals(10.0, dormandPrince853Integrator0.getMaxGrowth(), 0.01);
      assertEquals(2193.03486914859, dormandPrince853Integrator0.getMinStep(), 0.01);
      assertEquals(1375.2013377916, dormandPrince853Integrator0.getMaxStep(), 0.01);
      assertEquals(Double.NaN, dormandPrince853Integrator0.getCurrentStepStart(), 0.01);
      assertEquals(0.9, dormandPrince853Integrator0.getSafety(), 0.01);
      
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (-1.0);
      doubleArray0[1] = 2193.03486914859;
      doubleArray0[2] = 249.873371911514;
      doubleArray0[3] = 3679.2041233;
      doubleArray0[4] = (double) 8;
      doubleArray0[5] = (double) 8;
      doubleArray0[6] = (-1.0);
      ClassicalRungeKuttaIntegrator classicalRungeKuttaIntegrator0 = new ClassicalRungeKuttaIntegrator(0.3333333333333333);
      assertEquals(Double.NaN, classicalRungeKuttaIntegrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals(Double.NaN, classicalRungeKuttaIntegrator0.getCurrentStepStart(), 0.01);
      assertEquals("classical Runge-Kutta", classicalRungeKuttaIntegrator0.getName());
      assertNotNull(classicalRungeKuttaIntegrator0);
      
      ExpandableStatefulODE expandableStatefulODE0 = null;
      double double1 = 0.0;
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(8).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      assertEquals(16, firstOrderConverter0.getDimension());
      assertNotNull(firstOrderConverter0);
      
//      try { 
        dormandPrince853Integrator0.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, 249.873371911514, doubleArray0, 0.0, doubleArray0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // 8 != 16
//         //
//         verifyException("org.apache.commons.math3.ode.AbstractIntegrator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      double double0 = 1000.0;
      ThreeEighthesIntegrator threeEighthesIntegrator0 = new ThreeEighthesIntegrator(1000.0);
      assertEquals(Double.NaN, threeEighthesIntegrator0.getCurrentStepStart(), 0.01);
      assertEquals(Double.NaN, threeEighthesIntegrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals("3/8", threeEighthesIntegrator0.getName());
      assertNotNull(threeEighthesIntegrator0);
      
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(548).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      assertEquals(1096, firstOrderConverter0.getDimension());
      assertNotNull(firstOrderConverter0);
      
      ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter0);
      assertEquals(1096, firstOrderConverter0.getDimension());
      assertEquals(Double.NaN, expandableStatefulODE0.getTime(), 0.01);
      assertNotNull(expandableStatefulODE0);
      
      SecondOrderDifferentialEquations secondOrderDifferentialEquations1 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations1).getDimension();
      FirstOrderConverter firstOrderConverter1 = new FirstOrderConverter(secondOrderDifferentialEquations1);
      assertFalse(firstOrderConverter1.equals((Object)firstOrderConverter0));
      assertEquals(0, firstOrderConverter1.getDimension());
      assertNotNull(firstOrderConverter1);
      
      ExpandableStatefulODE expandableStatefulODE1 = new ExpandableStatefulODE(firstOrderConverter1);
      assertFalse(firstOrderConverter1.equals((Object)firstOrderConverter0));
      assertFalse(expandableStatefulODE1.equals((Object)expandableStatefulODE0));
      assertEquals(0, firstOrderConverter1.getDimension());
      assertEquals(Double.NaN, expandableStatefulODE1.getTime(), 0.01);
      assertNotNull(expandableStatefulODE1);
      
      ClassicalRungeKuttaIntegrator classicalRungeKuttaIntegrator0 = new ClassicalRungeKuttaIntegrator(1000.0);
      assertEquals(Double.NaN, classicalRungeKuttaIntegrator0.getCurrentStepStart(), 0.01);
      assertEquals("classical Runge-Kutta", classicalRungeKuttaIntegrator0.getName());
      assertEquals(Double.NaN, classicalRungeKuttaIntegrator0.getCurrentSignedStepsize(), 0.01);
      assertNotNull(classicalRungeKuttaIntegrator0);
      
      // Undeclared exception!
      classicalRungeKuttaIntegrator0.integrate(expandableStatefulODE1, 1000.0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      ThreeEighthesIntegrator threeEighthesIntegrator0 = new ThreeEighthesIntegrator(3679.2041233);
      assertEquals(Double.NaN, threeEighthesIntegrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals(Double.NaN, threeEighthesIntegrator0.getCurrentStepStart(), 0.01);
      assertEquals("3/8", threeEighthesIntegrator0.getName());
      assertNotNull(threeEighthesIntegrator0);
      
      threeEighthesIntegrator0.clearEventHandlers();
      assertEquals(Double.NaN, threeEighthesIntegrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals(Double.NaN, threeEighthesIntegrator0.getCurrentStepStart(), 0.01);
      assertEquals("3/8", threeEighthesIntegrator0.getName());
      
      DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator(2193.03486914859, (-1375.2013377916), 3679.2041233, (-1375.2013377916));
      assertEquals(1736.6244515947506, dormandPrince853Integrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals(1375.2013377916, dormandPrince853Integrator0.getMaxStep(), 0.01);
      assertEquals(2193.03486914859, dormandPrince853Integrator0.getMinStep(), 0.01);
      assertEquals(Double.NaN, dormandPrince853Integrator0.getCurrentStepStart(), 0.01);
      assertEquals(0.9, dormandPrince853Integrator0.getSafety(), 0.01);
      assertEquals(8, dormandPrince853Integrator0.getOrder());
      assertEquals("Dormand-Prince 8 (5, 3)", dormandPrince853Integrator0.getName());
      assertEquals(10.0, dormandPrince853Integrator0.getMaxGrowth(), 0.01);
      assertEquals(0.2, dormandPrince853Integrator0.getMinReduction(), 0.01);
      assertNotNull(dormandPrince853Integrator0);
      
      int int0 = dormandPrince853Integrator0.getOrder();
      assertEquals(8, int0);
      assertEquals(1736.6244515947506, dormandPrince853Integrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals(1375.2013377916, dormandPrince853Integrator0.getMaxStep(), 0.01);
      assertEquals(2193.03486914859, dormandPrince853Integrator0.getMinStep(), 0.01);
      assertEquals(Double.NaN, dormandPrince853Integrator0.getCurrentStepStart(), 0.01);
      assertEquals(0.9, dormandPrince853Integrator0.getSafety(), 0.01);
      assertEquals(8, dormandPrince853Integrator0.getOrder());
      assertEquals("Dormand-Prince 8 (5, 3)", dormandPrince853Integrator0.getName());
      assertEquals(10.0, dormandPrince853Integrator0.getMaxGrowth(), 0.01);
      assertEquals(0.2, dormandPrince853Integrator0.getMinReduction(), 0.01);
      
      double double0 = (-1.0);
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (-1.0);
      doubleArray0[1] = 2193.03486914859;
      doubleArray0[2] = 249.873371911514;
      doubleArray0[3] = 3679.2041233;
      doubleArray0[4] = (double) 8;
      doubleArray0[5] = (double) 8;
      doubleArray0[6] = (-1.0);
      ClassicalRungeKuttaIntegrator classicalRungeKuttaIntegrator0 = new ClassicalRungeKuttaIntegrator(0.3333333333333333);
      assertEquals(Double.NaN, classicalRungeKuttaIntegrator0.getCurrentStepStart(), 0.01);
      assertEquals("classical Runge-Kutta", classicalRungeKuttaIntegrator0.getName());
      assertEquals(Double.NaN, classicalRungeKuttaIntegrator0.getCurrentSignedStepsize(), 0.01);
      assertNotNull(classicalRungeKuttaIntegrator0);
      
      ExpandableStatefulODE expandableStatefulODE0 = null;
      double double1 = 0.0;
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      assertEquals(0, firstOrderConverter0.getDimension());
      assertNotNull(firstOrderConverter0);
      
//      try { 
        dormandPrince853Integrator0.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, 249.873371911514, doubleArray0, 0.0, doubleArray0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // 8 != 0
//         //
//         verifyException("org.apache.commons.math3.ode.AbstractIntegrator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator(0.0, 0.0, 3675.268830918139, 3675.268830918139);
      assertEquals(Double.NaN, graggBulirschStoerIntegrator0.getCurrentStepStart(), 0.01);
      assertEquals(0.0, graggBulirschStoerIntegrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals(0.0, graggBulirschStoerIntegrator0.getMinStep(), 0.01);
      assertEquals("Gragg-Bulirsch-Stoer", graggBulirschStoerIntegrator0.getName());
      assertEquals(0.0, graggBulirschStoerIntegrator0.getMaxStep(), 0.01);
      assertNotNull(graggBulirschStoerIntegrator0);
      
      graggBulirschStoerIntegrator0.setControlFactors(795.26113, 0.0, 795.26113, 0.0);
      assertEquals(Double.NaN, graggBulirschStoerIntegrator0.getCurrentStepStart(), 0.01);
      assertEquals(0.0, graggBulirschStoerIntegrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals(0.0, graggBulirschStoerIntegrator0.getMinStep(), 0.01);
      assertEquals("Gragg-Bulirsch-Stoer", graggBulirschStoerIntegrator0.getName());
      assertEquals(0.0, graggBulirschStoerIntegrator0.getMaxStep(), 0.01);
      
      int int0 = graggBulirschStoerIntegrator0.getEvaluations();
      assertEquals(0, int0);
      assertEquals(Double.NaN, graggBulirschStoerIntegrator0.getCurrentStepStart(), 0.01);
      assertEquals(0.0, graggBulirschStoerIntegrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals(0.0, graggBulirschStoerIntegrator0.getMinStep(), 0.01);
      assertEquals("Gragg-Bulirsch-Stoer", graggBulirschStoerIntegrator0.getName());
      assertEquals(0.0, graggBulirschStoerIntegrator0.getMaxStep(), 0.01);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 767.546392415838;
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator(0.0, (-1635.058186826679), doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 767.546392415838}, doubleArray0, 0.01);
      assertEquals(0.0, graggBulirschStoerIntegrator0.getMinStep(), 0.01);
      assertEquals(1635.058186826679, graggBulirschStoerIntegrator0.getMaxStep(), 0.01);
      assertEquals("Gragg-Bulirsch-Stoer", graggBulirschStoerIntegrator0.getName());
      assertEquals(Double.NaN, graggBulirschStoerIntegrator0.getCurrentStepStart(), 0.01);
      assertEquals(0.0, graggBulirschStoerIntegrator0.getCurrentSignedStepsize(), 0.01);
      assertNotNull(graggBulirschStoerIntegrator0);
      assertEquals(3, doubleArray0.length);
      
      Collection<EventHandler> collection0 = graggBulirschStoerIntegrator0.getEventHandlers();
      assertArrayEquals(new double[] {0.0, 0.0, 767.546392415838}, doubleArray0, 0.01);
      assertEquals(0.0, graggBulirschStoerIntegrator0.getMinStep(), 0.01);
      assertEquals(1635.058186826679, graggBulirschStoerIntegrator0.getMaxStep(), 0.01);
      assertEquals("Gragg-Bulirsch-Stoer", graggBulirschStoerIntegrator0.getName());
      assertEquals(Double.NaN, graggBulirschStoerIntegrator0.getCurrentStepStart(), 0.01);
      assertEquals(0.0, graggBulirschStoerIntegrator0.getCurrentSignedStepsize(), 0.01);
      assertNotNull(collection0);
      assertEquals(3, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 0.0;
      DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator(0.0, 0.0, doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(0.0, dormandPrince54Integrator0.getMinStep(), 0.01);
      assertEquals(0.2, dormandPrince54Integrator0.getMinReduction(), 0.01);
      assertEquals(5, dormandPrince54Integrator0.getOrder());
      assertEquals(0.0, dormandPrince54Integrator0.getMaxStep(), 0.01);
      assertEquals(0.9, dormandPrince54Integrator0.getSafety(), 0.01);
      assertEquals(Double.NaN, dormandPrince54Integrator0.getCurrentStepStart(), 0.01);
      assertEquals("Dormand-Prince 5(4)", dormandPrince54Integrator0.getName());
      assertEquals(10.0, dormandPrince54Integrator0.getMaxGrowth(), 0.01);
      assertEquals(0.0, dormandPrince54Integrator0.getCurrentSignedStepsize(), 0.01);
      assertNotNull(dormandPrince54Integrator0);
      assertEquals(4, doubleArray0.length);
      
      Collection<EventHandler> collection0 = dormandPrince54Integrator0.getEventHandlers();
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(0.0, dormandPrince54Integrator0.getMinStep(), 0.01);
      assertEquals(0.2, dormandPrince54Integrator0.getMinReduction(), 0.01);
      assertEquals(5, dormandPrince54Integrator0.getOrder());
      assertEquals(0.0, dormandPrince54Integrator0.getMaxStep(), 0.01);
      assertEquals(0.9, dormandPrince54Integrator0.getSafety(), 0.01);
      assertEquals(Double.NaN, dormandPrince54Integrator0.getCurrentStepStart(), 0.01);
      assertEquals("Dormand-Prince 5(4)", dormandPrince54Integrator0.getName());
      assertEquals(10.0, dormandPrince54Integrator0.getMaxGrowth(), 0.01);
      assertEquals(0.0, dormandPrince54Integrator0.getCurrentSignedStepsize(), 0.01);
      assertNotNull(collection0);
      assertEquals(4, doubleArray0.length);
      
      dormandPrince54Integrator0.clearStepHandlers();
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(0.0, dormandPrince54Integrator0.getMinStep(), 0.01);
      assertEquals(0.2, dormandPrince54Integrator0.getMinReduction(), 0.01);
      assertEquals(5, dormandPrince54Integrator0.getOrder());
      assertEquals(0.0, dormandPrince54Integrator0.getMaxStep(), 0.01);
      assertEquals(0.9, dormandPrince54Integrator0.getSafety(), 0.01);
      assertEquals(Double.NaN, dormandPrince54Integrator0.getCurrentStepStart(), 0.01);
      assertEquals("Dormand-Prince 5(4)", dormandPrince54Integrator0.getName());
      assertEquals(10.0, dormandPrince54Integrator0.getMaxGrowth(), 0.01);
      assertEquals(0.0, dormandPrince54Integrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals(4, doubleArray0.length);
      
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      double double0 = 4055.7616;
      int int0 = 1207;
      RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver(0.0, 0.0);
      assertEquals(0.0, regulaFalsiSolver0.getMin(), 0.01);
      assertEquals(1.0E-15, regulaFalsiSolver0.getFunctionValueAccuracy(), 0.01);
      assertEquals(0.0, regulaFalsiSolver0.getStartValue(), 0.01);
      assertEquals(0.0, regulaFalsiSolver0.getAbsoluteAccuracy(), 0.01);
      assertEquals(0.0, regulaFalsiSolver0.getRelativeAccuracy(), 0.01);
      assertEquals(0.0, regulaFalsiSolver0.getMax(), 0.01);
      assertNotNull(regulaFalsiSolver0);
      
      HarmonicOscillator harmonicOscillator0 = new HarmonicOscillator(430.95, 2653.73442949, 0.0);
      assertNotNull(harmonicOscillator0);
      
      AllowedSolution allowedSolution0 = AllowedSolution.RIGHT_SIDE;
      // Undeclared exception!
//      try { 
        regulaFalsiSolver0.solve(1207, (UnivariateFunction) harmonicOscillator0, 0.0, 4055.7616, 0.0, allowedSolution0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // function values at endpoints do not have different signs, endpoints: [0, 4,055.762], values: [430.95, 430.835]
//         //
//         verifyException("org.apache.commons.math3.analysis.solvers.UnivariateSolverUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator(2937500.0, 2937500.0, 0.0, 0.0);
      assertEquals(Double.NaN, dormandPrince853Integrator0.getCurrentStepStart(), 0.01);
      assertEquals(10.0, dormandPrince853Integrator0.getMaxGrowth(), 0.01);
      assertEquals(2937500.0, dormandPrince853Integrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals(0.9, dormandPrince853Integrator0.getSafety(), 0.01);
      assertEquals("Dormand-Prince 8 (5, 3)", dormandPrince853Integrator0.getName());
      assertEquals(0.2, dormandPrince853Integrator0.getMinReduction(), 0.01);
      assertEquals(2937500.0, dormandPrince853Integrator0.getMaxStep(), 0.01);
      assertEquals(2937500.0, dormandPrince853Integrator0.getMinStep(), 0.01);
      assertEquals(8, dormandPrince853Integrator0.getOrder());
      assertNotNull(dormandPrince853Integrator0);
      
      int int0 = dormandPrince853Integrator0.getMaxEvaluations();
      assertEquals(Integer.MAX_VALUE, int0);
      assertEquals(Double.NaN, dormandPrince853Integrator0.getCurrentStepStart(), 0.01);
      assertEquals(10.0, dormandPrince853Integrator0.getMaxGrowth(), 0.01);
      assertEquals(2937500.0, dormandPrince853Integrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals(0.9, dormandPrince853Integrator0.getSafety(), 0.01);
      assertEquals("Dormand-Prince 8 (5, 3)", dormandPrince853Integrator0.getName());
      assertEquals(0.2, dormandPrince853Integrator0.getMinReduction(), 0.01);
      assertEquals(2937500.0, dormandPrince853Integrator0.getMaxStep(), 0.01);
      assertEquals(2937500.0, dormandPrince853Integrator0.getMinStep(), 0.01);
      assertEquals(8, dormandPrince853Integrator0.getOrder());
      
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator(184.371819465344, 0.008273789163814023, 2937500.0, (-1063.7403));
      assertEquals(184.371819465344, graggBulirschStoerIntegrator0.getMinStep(), 0.01);
      assertEquals(Double.NaN, graggBulirschStoerIntegrator0.getCurrentStepStart(), 0.01);
      assertEquals(1.2350925317582642, graggBulirschStoerIntegrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals("Gragg-Bulirsch-Stoer", graggBulirschStoerIntegrator0.getName());
      assertEquals(0.008273789163814023, graggBulirschStoerIntegrator0.getMaxStep(), 0.01);
      assertNotNull(graggBulirschStoerIntegrator0);
      
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      assertEquals(0, firstOrderConverter0.getDimension());
      assertNotNull(firstOrderConverter0);
      
      ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter0);
      assertEquals(0, firstOrderConverter0.getDimension());
      assertEquals(Double.NaN, expandableStatefulODE0.getTime(), 0.01);
      assertNotNull(expandableStatefulODE0);
      
      // Undeclared exception!
      graggBulirschStoerIntegrator0.integrate(expandableStatefulODE0, 78.8436364010425);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 0.0;
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator(14.0, 61.295504137, doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(14.0, graggBulirschStoerIntegrator0.getMinStep(), 0.01);
      assertEquals(Double.NaN, graggBulirschStoerIntegrator0.getCurrentStepStart(), 0.01);
      assertEquals(61.295504137, graggBulirschStoerIntegrator0.getMaxStep(), 0.01);
      assertEquals("Gragg-Bulirsch-Stoer", graggBulirschStoerIntegrator0.getName());
      assertEquals(29.293976478416173, graggBulirschStoerIntegrator0.getCurrentSignedStepsize(), 0.01);
      assertNotNull(graggBulirschStoerIntegrator0);
      assertEquals(3, doubleArray0.length);
      
      Collection<StepHandler> collection0 = graggBulirschStoerIntegrator0.getStepHandlers();
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(14.0, graggBulirschStoerIntegrator0.getMinStep(), 0.01);
      assertEquals(Double.NaN, graggBulirschStoerIntegrator0.getCurrentStepStart(), 0.01);
      assertEquals(61.295504137, graggBulirschStoerIntegrator0.getMaxStep(), 0.01);
      assertEquals("Gragg-Bulirsch-Stoer", graggBulirschStoerIntegrator0.getName());
      assertEquals(29.293976478416173, graggBulirschStoerIntegrator0.getCurrentSignedStepsize(), 0.01);
      assertNotNull(collection0);
      assertEquals(3, doubleArray0.length);
      
      Collection<EventHandler> collection1 = graggBulirschStoerIntegrator0.getEventHandlers();
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(14.0, graggBulirschStoerIntegrator0.getMinStep(), 0.01);
      assertEquals(Double.NaN, graggBulirschStoerIntegrator0.getCurrentStepStart(), 0.01);
      assertEquals(61.295504137, graggBulirschStoerIntegrator0.getMaxStep(), 0.01);
      assertEquals("Gragg-Bulirsch-Stoer", graggBulirschStoerIntegrator0.getName());
      assertEquals(29.293976478416173, graggBulirschStoerIntegrator0.getCurrentSignedStepsize(), 0.01);
      assertNotNull(collection1);
      assertEquals(3, doubleArray0.length);
      
      int int0 = graggBulirschStoerIntegrator0.getMaxEvaluations();
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(Integer.MAX_VALUE, int0);
      assertEquals(14.0, graggBulirschStoerIntegrator0.getMinStep(), 0.01);
      assertEquals(Double.NaN, graggBulirschStoerIntegrator0.getCurrentStepStart(), 0.01);
      assertEquals(61.295504137, graggBulirschStoerIntegrator0.getMaxStep(), 0.01);
      assertEquals("Gragg-Bulirsch-Stoer", graggBulirschStoerIntegrator0.getName());
      assertEquals(29.293976478416173, graggBulirschStoerIntegrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals(3, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      double double0 = 1.0;
      ThreeEighthesIntegrator threeEighthesIntegrator0 = new ThreeEighthesIntegrator(1.0);
      assertEquals(Double.NaN, threeEighthesIntegrator0.getCurrentStepStart(), 0.01);
      assertEquals(Double.NaN, threeEighthesIntegrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals("3/8", threeEighthesIntegrator0.getName());
      assertNotNull(threeEighthesIntegrator0);
      
      double double1 = new Double(1.0);
      assertEquals(1.0, double1, 0.01);
      assertEquals(double1, double0, 0.01);
      
      String string0 = threeEighthesIntegrator0.getName();
      assertEquals("3/8", string0);
      assertEquals(Double.NaN, threeEighthesIntegrator0.getCurrentStepStart(), 0.01);
      assertEquals(Double.NaN, threeEighthesIntegrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals("3/8", threeEighthesIntegrator0.getName());
      assertNotNull(string0);
      
      double double2 = threeEighthesIntegrator0.getCurrentStepStart();
      assertEquals(Double.NaN, double2, 0.01);
      assertNotEquals(double2, double1, 0.01);
      assertNotEquals(double2, double0, 0.01);
      assertEquals(Double.NaN, threeEighthesIntegrator0.getCurrentStepStart(), 0.01);
      assertEquals(Double.NaN, threeEighthesIntegrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals("3/8", threeEighthesIntegrator0.getName());
      
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator(1.0, 1.0, 2429.49, 1.0);
      assertEquals(1.0, graggBulirschStoerIntegrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals(1.0, graggBulirschStoerIntegrator0.getMinStep(), 0.01);
      assertEquals(1.0, graggBulirschStoerIntegrator0.getMaxStep(), 0.01);
      assertEquals(Double.NaN, graggBulirschStoerIntegrator0.getCurrentStepStart(), 0.01);
      assertEquals("Gragg-Bulirsch-Stoer", graggBulirschStoerIntegrator0.getName());
      assertNotNull(graggBulirschStoerIntegrator0);
      
      FirstOrderDifferentialEquations firstOrderDifferentialEquations0 = null;
      ExpandableStatefulODE expandableStatefulODE0 = null;
//      try {
        expandableStatefulODE0 = new ExpandableStatefulODE((FirstOrderDifferentialEquations) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.ode.ExpandableStatefulODE", e);
//      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      ThreeEighthesIntegrator threeEighthesIntegrator0 = new ThreeEighthesIntegrator(1.0);
      assertEquals("3/8", threeEighthesIntegrator0.getName());
      assertEquals(Double.NaN, threeEighthesIntegrator0.getCurrentStepStart(), 0.01);
      assertEquals(Double.NaN, threeEighthesIntegrator0.getCurrentSignedStepsize(), 0.01);
      assertNotNull(threeEighthesIntegrator0);
      
      double double0 = threeEighthesIntegrator0.getCurrentStepStart();
      assertEquals(Double.NaN, double0, 0.01);
      assertEquals("3/8", threeEighthesIntegrator0.getName());
      assertEquals(Double.NaN, threeEighthesIntegrator0.getCurrentStepStart(), 0.01);
      assertEquals(Double.NaN, threeEighthesIntegrator0.getCurrentSignedStepsize(), 0.01);
      
      String string0 = threeEighthesIntegrator0.getName();
      assertEquals("3/8", string0);
      assertEquals("3/8", threeEighthesIntegrator0.getName());
      assertEquals(Double.NaN, threeEighthesIntegrator0.getCurrentStepStart(), 0.01);
      assertEquals(Double.NaN, threeEighthesIntegrator0.getCurrentSignedStepsize(), 0.01);
      assertNotNull(string0);
      
      double double1 = threeEighthesIntegrator0.getCurrentStepStart();
      assertEquals(Double.NaN, double1, 0.01);
      assertEquals(double1, double0, 0.01);
      assertEquals("3/8", threeEighthesIntegrator0.getName());
      assertEquals(Double.NaN, threeEighthesIntegrator0.getCurrentStepStart(), 0.01);
      assertEquals(Double.NaN, threeEighthesIntegrator0.getCurrentSignedStepsize(), 0.01);
      
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator(1.0, 1.0, 2429.49, Double.NaN);
      assertEquals(1.0, graggBulirschStoerIntegrator0.getMaxStep(), 0.01);
      assertEquals(Double.NaN, graggBulirschStoerIntegrator0.getCurrentStepStart(), 0.01);
      assertEquals(1.0, graggBulirschStoerIntegrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals("Gragg-Bulirsch-Stoer", graggBulirschStoerIntegrator0.getName());
      assertEquals(1.0, graggBulirschStoerIntegrator0.getMinStep(), 0.01);
      assertNotNull(graggBulirschStoerIntegrator0);
      
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      assertEquals(0, firstOrderConverter0.getDimension());
      assertNotNull(firstOrderConverter0);
      
      ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter0);
      assertEquals(0, firstOrderConverter0.getDimension());
      assertEquals(Double.NaN, expandableStatefulODE0.getTime(), 0.01);
      assertNotNull(expandableStatefulODE0);
      
      // Undeclared exception!
      graggBulirschStoerIntegrator0.integrate(expandableStatefulODE0, Double.NaN);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      ThreeEighthesIntegrator threeEighthesIntegrator0 = new ThreeEighthesIntegrator(1.0);
      assertEquals(Double.NaN, threeEighthesIntegrator0.getCurrentStepStart(), 0.01);
      assertEquals("3/8", threeEighthesIntegrator0.getName());
      assertEquals(Double.NaN, threeEighthesIntegrator0.getCurrentSignedStepsize(), 0.01);
      assertNotNull(threeEighthesIntegrator0);
      
      double double0 = threeEighthesIntegrator0.getCurrentStepStart();
      assertEquals(Double.NaN, double0, 0.01);
      assertEquals(Double.NaN, threeEighthesIntegrator0.getCurrentStepStart(), 0.01);
      assertEquals("3/8", threeEighthesIntegrator0.getName());
      assertEquals(Double.NaN, threeEighthesIntegrator0.getCurrentSignedStepsize(), 0.01);
      
      String string0 = threeEighthesIntegrator0.getName();
      assertEquals("3/8", string0);
      assertEquals(Double.NaN, threeEighthesIntegrator0.getCurrentStepStart(), 0.01);
      assertEquals("3/8", threeEighthesIntegrator0.getName());
      assertEquals(Double.NaN, threeEighthesIntegrator0.getCurrentSignedStepsize(), 0.01);
      assertNotNull(string0);
      
      double double1 = threeEighthesIntegrator0.getCurrentStepStart();
      assertEquals(Double.NaN, double1, 0.01);
      assertEquals(double1, double0, 0.01);
      assertEquals(Double.NaN, threeEighthesIntegrator0.getCurrentStepStart(), 0.01);
      assertEquals("3/8", threeEighthesIntegrator0.getName());
      assertEquals(Double.NaN, threeEighthesIntegrator0.getCurrentSignedStepsize(), 0.01);
      
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator(1.0, 1.0, 2429.49, Double.NaN);
      assertEquals(1.0, graggBulirschStoerIntegrator0.getMinStep(), 0.01);
      assertEquals(1.0, graggBulirschStoerIntegrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals(1.0, graggBulirschStoerIntegrator0.getMaxStep(), 0.01);
      assertEquals(Double.NaN, graggBulirschStoerIntegrator0.getCurrentStepStart(), 0.01);
      assertEquals("Gragg-Bulirsch-Stoer", graggBulirschStoerIntegrator0.getName());
      assertNotNull(graggBulirschStoerIntegrator0);
      
      ClassicalRungeKuttaIntegrator classicalRungeKuttaIntegrator0 = new ClassicalRungeKuttaIntegrator(514.43);
      assertEquals(Double.NaN, classicalRungeKuttaIntegrator0.getCurrentStepStart(), 0.01);
      assertEquals(Double.NaN, classicalRungeKuttaIntegrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals("classical Runge-Kutta", classicalRungeKuttaIntegrator0.getName());
      assertNotNull(classicalRungeKuttaIntegrator0);
      
      ThreeEighthesIntegrator threeEighthesIntegrator1 = new ThreeEighthesIntegrator(0.0);
      assertFalse(threeEighthesIntegrator1.equals((Object)threeEighthesIntegrator0));
      assertEquals(Double.NaN, threeEighthesIntegrator1.getCurrentSignedStepsize(), 0.01);
      assertEquals("3/8", threeEighthesIntegrator1.getName());
      assertEquals(Double.NaN, threeEighthesIntegrator1.getCurrentStepStart(), 0.01);
      assertNotNull(threeEighthesIntegrator1);
      
      FirstOrderDifferentialEquations firstOrderDifferentialEquations0 = null;
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = Double.NaN;
      int int0 = threeEighthesIntegrator1.getMaxEvaluations();
      assertEquals(Integer.MAX_VALUE, int0);
      assertNotSame(threeEighthesIntegrator1, threeEighthesIntegrator0);
      assertFalse(threeEighthesIntegrator1.equals((Object)threeEighthesIntegrator0));
      assertEquals(Double.NaN, threeEighthesIntegrator1.getCurrentSignedStepsize(), 0.01);
      assertEquals("3/8", threeEighthesIntegrator1.getName());
      assertEquals(Double.NaN, threeEighthesIntegrator1.getCurrentStepStart(), 0.01);
      
      doubleArray0[1] = 1.0;
      doubleArray0[2] = 2429.49;
      doubleArray0[3] = 1.0077883359971829E-8;
      doubleArray0[4] = 0.0;
      doubleArray0[5] = 2964.0810153;
      threeEighthesIntegrator1.clearEventHandlers();
      assertNotSame(threeEighthesIntegrator1, threeEighthesIntegrator0);
      assertFalse(threeEighthesIntegrator1.equals((Object)threeEighthesIntegrator0));
      assertEquals(Double.NaN, threeEighthesIntegrator1.getCurrentSignedStepsize(), 0.01);
      assertEquals("3/8", threeEighthesIntegrator1.getName());
      assertEquals(Double.NaN, threeEighthesIntegrator1.getCurrentStepStart(), 0.01);
      
      doubleArray0[6] = Double.NaN;
      // Undeclared exception!
//      try { 
        threeEighthesIntegrator0.integrate((FirstOrderDifferentialEquations) null, 0.0, doubleArray0, Double.NaN, doubleArray0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.ode.AbstractIntegrator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      ClassicalRungeKuttaIntegrator classicalRungeKuttaIntegrator0 = new ClassicalRungeKuttaIntegrator(843.515736223);
      assertEquals(Double.NaN, classicalRungeKuttaIntegrator0.getCurrentStepStart(), 0.01);
      assertEquals("classical Runge-Kutta", classicalRungeKuttaIntegrator0.getName());
      assertEquals(Double.NaN, classicalRungeKuttaIntegrator0.getCurrentSignedStepsize(), 0.01);
      assertNotNull(classicalRungeKuttaIntegrator0);
      
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      assertEquals(0, firstOrderConverter0.getDimension());
      assertNotNull(firstOrderConverter0);
      
      // Undeclared exception!
//      try { 
        classicalRungeKuttaIntegrator0.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, 843.515736223, (double[]) null, 15.0, (double[]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.ode.AbstractIntegrator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (-2884.9);
      doubleArray0[1] = 2875.0;
      doubleArray0[2] = (-2884.9);
      doubleArray0[3] = (-2884.9);
      doubleArray0[4] = (-2884.9);
      doubleArray0[5] = (-2884.9);
      DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator((-2884.9), (-2884.9), doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {(-2884.9), 2875.0, (-2884.9), (-2884.9), (-2884.9), (-2884.9)}, doubleArray0, 0.01);
      assertEquals(10.0, dormandPrince853Integrator0.getMaxGrowth(), 0.01);
      assertEquals(2884.9, dormandPrince853Integrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals("Dormand-Prince 8 (5, 3)", dormandPrince853Integrator0.getName());
      assertEquals(0.9, dormandPrince853Integrator0.getSafety(), 0.01);
      assertEquals(Double.NaN, dormandPrince853Integrator0.getCurrentStepStart(), 0.01);
      assertEquals(2884.9, dormandPrince853Integrator0.getMinStep(), 0.01);
      assertEquals(0.2, dormandPrince853Integrator0.getMinReduction(), 0.01);
      assertEquals(2884.9, dormandPrince853Integrator0.getMaxStep(), 0.01);
      assertEquals(8, dormandPrince853Integrator0.getOrder());
      assertNotNull(dormandPrince853Integrator0);
      assertEquals(6, doubleArray0.length);
      
      DummyStepHandler dummyStepHandler0 = DummyStepHandler.getInstance();
      assertNotNull(dummyStepHandler0);
      
      DummyStepHandler dummyStepHandler1 = DummyStepHandler.getInstance();
      assertSame(dummyStepHandler1, dummyStepHandler0);
      assertNotNull(dummyStepHandler1);
      
      dormandPrince853Integrator0.addStepHandler(dummyStepHandler0);
      assertArrayEquals(new double[] {(-2884.9), 2875.0, (-2884.9), (-2884.9), (-2884.9), (-2884.9)}, doubleArray0, 0.01);
      assertSame(dummyStepHandler0, dummyStepHandler1);
      assertEquals(10.0, dormandPrince853Integrator0.getMaxGrowth(), 0.01);
      assertEquals(2884.9, dormandPrince853Integrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals("Dormand-Prince 8 (5, 3)", dormandPrince853Integrator0.getName());
      assertEquals(0.9, dormandPrince853Integrator0.getSafety(), 0.01);
      assertEquals(Double.NaN, dormandPrince853Integrator0.getCurrentStepStart(), 0.01);
      assertEquals(2884.9, dormandPrince853Integrator0.getMinStep(), 0.01);
      assertEquals(0.2, dormandPrince853Integrator0.getMinReduction(), 0.01);
      assertEquals(2884.9, dormandPrince853Integrator0.getMaxStep(), 0.01);
      assertEquals(8, dormandPrince853Integrator0.getOrder());
      assertEquals(6, doubleArray0.length);
      
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator(0.022651792198360825, 0.0, doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {(-2884.9), 2875.0, (-2884.9), (-2884.9), (-2884.9), (-2884.9)}, doubleArray0, 0.01);
      assertEquals(0.0, graggBulirschStoerIntegrator0.getMaxStep(), 0.01);
      assertEquals(0.022651792198360825, graggBulirschStoerIntegrator0.getMinStep(), 0.01);
      assertEquals(0.0, graggBulirschStoerIntegrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals("Gragg-Bulirsch-Stoer", graggBulirschStoerIntegrator0.getName());
      assertEquals(Double.NaN, graggBulirschStoerIntegrator0.getCurrentStepStart(), 0.01);
      assertNotNull(graggBulirschStoerIntegrator0);
      assertEquals(6, doubleArray0.length);
      
      graggBulirschStoerIntegrator0.setStabilityCheck(true, 279, 279, 1909.0536207);
      assertArrayEquals(new double[] {(-2884.9), 2875.0, (-2884.9), (-2884.9), (-2884.9), (-2884.9)}, doubleArray0, 0.01);
      assertEquals(0.0, graggBulirschStoerIntegrator0.getMaxStep(), 0.01);
      assertEquals(0.022651792198360825, graggBulirschStoerIntegrator0.getMinStep(), 0.01);
      assertEquals(0.0, graggBulirschStoerIntegrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals("Gragg-Bulirsch-Stoer", graggBulirschStoerIntegrator0.getName());
      assertEquals(Double.NaN, graggBulirschStoerIntegrator0.getCurrentStepStart(), 0.01);
      assertEquals(6, doubleArray0.length);
      
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      RiddersSolver riddersSolver0 = new RiddersSolver(0.0, (-1103.8));
      assertEquals(0.0, riddersSolver0.getMin(), 0.01);
      assertEquals(0.0, riddersSolver0.getStartValue(), 0.01);
      assertEquals(1.0E-15, riddersSolver0.getFunctionValueAccuracy(), 0.01);
      assertEquals((-1103.8), riddersSolver0.getAbsoluteAccuracy(), 0.01);
      assertEquals(0.0, riddersSolver0.getMax(), 0.01);
      assertEquals(0.0, riddersSolver0.getRelativeAccuracy(), 0.01);
      assertNotNull(riddersSolver0);
      
      graggBulirschStoerIntegrator0.addEventHandler(eventHandler0, (-10.757575757575758), 2875.0, (-1), (UnivariateSolver) riddersSolver0);
      assertArrayEquals(new double[] {(-2884.9), 2875.0, (-2884.9), (-2884.9), (-2884.9), (-2884.9)}, doubleArray0, 0.01);
      assertEquals(0.0, graggBulirschStoerIntegrator0.getMaxStep(), 0.01);
      assertEquals(0.022651792198360825, graggBulirschStoerIntegrator0.getMinStep(), 0.01);
      assertEquals(0.0, graggBulirschStoerIntegrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals("Gragg-Bulirsch-Stoer", graggBulirschStoerIntegrator0.getName());
      assertEquals(Double.NaN, graggBulirschStoerIntegrator0.getCurrentStepStart(), 0.01);
      assertEquals(0.0, riddersSolver0.getMin(), 0.01);
      assertEquals(0.0, riddersSolver0.getStartValue(), 0.01);
      assertEquals(1.0E-15, riddersSolver0.getFunctionValueAccuracy(), 0.01);
      assertEquals((-1103.8), riddersSolver0.getAbsoluteAccuracy(), 0.01);
      assertEquals(0.0, riddersSolver0.getMax(), 0.01);
      assertEquals(0.0, riddersSolver0.getRelativeAccuracy(), 0.01);
      assertEquals(6, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      ThreeEighthesIntegrator threeEighthesIntegrator0 = new ThreeEighthesIntegrator(1000.0);
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter0);
      // Undeclared exception!
      threeEighthesIntegrator0.integrate(expandableStatefulODE0, (-1079.61354));
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator(5407.72, 5407.72, 5407.72, 609.3);
      EventHandler eventHandler0 = null;
      BracketingNthOrderBrentSolver bracketingNthOrderBrentSolver0 = new BracketingNthOrderBrentSolver(63, 0.0, 0.0, 63);
      graggBulirschStoerIntegrator0.addEventHandler((EventHandler) null, 5407.72, 0.0, 63, (UnivariateSolver) bracketingNthOrderBrentSolver0);
      EventHandler eventHandler1 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      double double0 = 0.0;
      FixedStepHandler fixedStepHandler0 = mock(FixedStepHandler.class, new ViolatedAssumptionAnswer());
      StepNormalizer stepNormalizer0 = new StepNormalizer(0.0, fixedStepHandler0);
      graggBulirschStoerIntegrator0.addStepHandler(stepNormalizer0);
      graggBulirschStoerIntegrator0.setInitialStepSize(0.0);
      graggBulirschStoerIntegrator0.clearStepHandlers();
      graggBulirschStoerIntegrator0.setMaxEvaluations((-1245));
      graggBulirschStoerIntegrator0.addEventHandler(eventHandler1, 609.3, 0.0, 0);
      graggBulirschStoerIntegrator0.clearEventHandlers();
      double double1 = 0.0;
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = (double) 63;
      doubleArray0[3] = 609.3;
      // Undeclared exception!
//      try { 
        graggBulirschStoerIntegrator0.computeDerivatives(0.0, doubleArray0, doubleArray0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      double double0 = 0.0;
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 0.0;
      doubleArray0[5] = 0.0;
      doubleArray0[6] = 0.0;
      doubleArray0[7] = 0.0;
      DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator(0.0, 0.0, doubleArray0, doubleArray0);
      dormandPrince853Integrator0.getOrder();
      double double1 = 1802.103;
      AdamsMoultonIntegrator adamsMoultonIntegrator0 = new AdamsMoultonIntegrator(8, 1802.103, 0.0, doubleArray0, doubleArray0);
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter0);
      double double2 = (-2514.88295946);
//      try { 
        adamsMoultonIntegrator0.integrate(expandableStatefulODE0, (-2514.88295946));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // 0 != 8
//         //
//         verifyException("org.apache.commons.math3.ode.nonstiff.AdaptiveStepsizeIntegrator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator(0.0, 0.0, (-1.0), 0.0);
      dormandPrince853Integrator0.clearEventHandlers();
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 2732.0;
      doubleArray0[1] = 2732.0;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = (-1.0);
      doubleArray0[5] = (-1.0);
      doubleArray0[6] = 2732.0;
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator((-1.0), 2732.0, doubleArray0, doubleArray0);
      graggBulirschStoerIntegrator0.setStepSizeControl(2732.0, 2732.0, 2732.0, 1.0);
      graggBulirschStoerIntegrator0.setStepSizeControl((-1.0), 3.18801444819E11, doubleArray0, doubleArray0);
      graggBulirschStoerIntegrator0.setStabilityCheck(true, (-2032), (-2032), 0.0);
      HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator(1084.53, 0.0, (-1666.1), 1084.53);
      highamHall54Integrator0.getOrder();
      String string0 = dormandPrince853Integrator0.getName();
      assertEquals("Dormand-Prince 8 (5, 3)", string0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      MidpointIntegrator midpointIntegrator0 = new MidpointIntegrator(0.0);
      midpointIntegrator0.getStepHandlers();
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      midpointIntegrator0.clearEventHandlers();
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 23.0;
      double double0 = (-0.18980075407240762);
      doubleArray0[4] = (-0.18980075407240762);
      doubleArray0[5] = 23.0;
      // Undeclared exception!
//      try { 
        midpointIntegrator0.computeDerivatives(23.0, doubleArray0, doubleArray0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      MidpointIntegrator midpointIntegrator0 = new MidpointIntegrator(368.2779327120825);
      midpointIntegrator0.setMaxEvaluations(1);
      DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator(368.2779327120825, 368.2779327120825, 1683.678833483, 1683.678833483);
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (-729.8314605);
      // Undeclared exception!
//      try { 
        midpointIntegrator0.computeDerivatives((-729.8314605), doubleArray0, doubleArray0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      double double0 = 3815.27694;
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (-1503.7);
      doubleArray0[1] = (-1503.7);
      doubleArray0[2] = 3815.27694;
      doubleArray0[3] = (-1503.7);
      doubleArray0[4] = 3815.27694;
      doubleArray0[5] = 3815.27694;
      double[] doubleArray1 = new double[6];
      doubleArray1[0] = 3815.27694;
      doubleArray1[1] = 3815.27694;
      doubleArray1[2] = 3815.27694;
      doubleArray1[3] = (-1503.7);
      doubleArray1[4] = 3815.27694;
      doubleArray1[5] = 3815.27694;
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator((-1503.7), 3815.27694, doubleArray0, doubleArray1);
      double double1 = 0.0;
      double double2 = 0.0;
      // Undeclared exception!
//      try { 
        graggBulirschStoerIntegrator0.initializeStep(true, 0, doubleArray1, (-1521.4404406287429), doubleArray1, doubleArray0, doubleArray1, doubleArray0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator(238.0714057802931, 0.0, 0.0, 238.0714057802931);
      double[] doubleArray0 = new double[0];
      // Undeclared exception!
//      try { 
        dormandPrince54Integrator0.initializeStep(false, (-1337), doubleArray0, (-811.0), doubleArray0, doubleArray0, doubleArray0, doubleArray0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator((-1635.058186826679), (-0.942628957978672), doubleArray0, doubleArray0);
      graggBulirschStoerIntegrator0.getEventHandlers();
      DummyStepHandler dummyStepHandler0 = DummyStepHandler.getInstance();
      graggBulirschStoerIntegrator0.setInterpolationControl(false, 337);
      DummyStepHandler.getInstance();
      graggBulirschStoerIntegrator0.addStepHandler(dummyStepHandler0);
      assertEquals(1635.058186826679, graggBulirschStoerIntegrator0.getMinStep(), 0.01);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator(Double.NaN, Double.NaN, (-1629.4), (-1166.925297118));
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      graggBulirschStoerIntegrator0.addEventHandler(eventHandler0, (-1629.4), (-1629.4), (-4073));
      graggBulirschStoerIntegrator0.addStepHandler((StepHandler) null);
      HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator((-1166.925297118), 3375.9132219765584, 1895.515383203907, 3375.9132219765584);
      highamHall54Integrator0.setSafety(835.5797051947);
      highamHall54Integrator0.getOrder();
      graggBulirschStoerIntegrator0.addStepHandler((StepHandler) null);
      assertEquals(Double.NaN, graggBulirschStoerIntegrator0.getCurrentSignedStepsize(), 0.01);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      double double0 = Double.POSITIVE_INFINITY;
      double double1 = 0.0;
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = Double.POSITIVE_INFINITY;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = Double.POSITIVE_INFINITY;
      doubleArray0[4] = Double.POSITIVE_INFINITY;
      doubleArray0[5] = Double.POSITIVE_INFINITY;
      doubleArray0[6] = 0.0;
      doubleArray0[7] = Double.POSITIVE_INFINITY;
      doubleArray0[8] = 0.0;
      DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator(Double.POSITIVE_INFINITY, 0.0, doubleArray0, doubleArray0);
      dormandPrince853Integrator0.getStepHandlers();
      FirstOrderConverter firstOrderConverter0 = null;
//      try {
        firstOrderConverter0 = new FirstOrderConverter((SecondOrderDifferentialEquations) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.ode.FirstOrderConverter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator(341.32535, 341.32535, 1.0E-10, 341.32535);
      graggBulirschStoerIntegrator0.setInterpolationControl(false, 4348);
      HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator(0.0, 0.0, (-4781.597783), 0.0);
      highamHall54Integrator0.setInitialStepSize(0.0);
      highamHall54Integrator0.getStepHandlers();
      highamHall54Integrator0.getOrder();
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver(0.0, 0.0, 4348);
      graggBulirschStoerIntegrator0.addEventHandler(eventHandler0, 341.32535, 341.32535, (-704), (UnivariateSolver) regulaFalsiSolver0);
      assertEquals(Double.NaN, graggBulirschStoerIntegrator0.getCurrentStepStart(), 0.01);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      ThreeEighthesIntegrator threeEighthesIntegrator0 = new ThreeEighthesIntegrator(2964.0810153);
      double[] doubleArray0 = new double[0];
      threeEighthesIntegrator0.getEventHandlers();
      threeEighthesIntegrator0.clearStepHandlers();
      assertEquals(Double.NaN, threeEighthesIntegrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals(Double.NaN, threeEighthesIntegrator0.getCurrentStepStart(), 0.01);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      double double0 = 0.0;
      double double1 = (-653.7151331858929);
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator(0.0, 0.0, (-653.7151331858929), 0.0);
      int int0 = 3203;
      graggBulirschStoerIntegrator0.setOrderControl(3203, (-653.7151331858929), (-653.7151331858929));
      graggBulirschStoerIntegrator0.clearStepHandlers();
      double double2 = 1.0;
      double double3 = 3250.56662740442;
      boolean boolean0 = true;
      int int1 = (-1);
      FixedStepHandler fixedStepHandler0 = mock(FixedStepHandler.class, new ViolatedAssumptionAnswer());
      StepNormalizerMode stepNormalizerMode0 = StepNormalizerMode.INCREMENT;
      StepNormalizerBounds stepNormalizerBounds0 = StepNormalizerBounds.FIRST;
      StepNormalizer stepNormalizer0 = new StepNormalizer(1.0, fixedStepHandler0, stepNormalizerMode0, stepNormalizerBounds0);
      NordsieckStepInterpolator nordsieckStepInterpolator0 = new NordsieckStepInterpolator();
      NordsieckStepInterpolator nordsieckStepInterpolator1 = new NordsieckStepInterpolator(nordsieckStepInterpolator0);
      StepInterpolator stepInterpolator0 = nordsieckStepInterpolator1.copy();
      // Undeclared exception!
//      try { 
        stepNormalizer0.handleStep(stepInterpolator0, true);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.util.Arrays", e);
//      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator(Double.NaN, Double.NaN, doubleArray0, doubleArray0);
      MullerSolver mullerSolver0 = new MullerSolver(Double.NaN);
      graggBulirschStoerIntegrator0.addEventHandler((EventHandler) null, Double.NaN, Double.NaN, 184, (UnivariateSolver) mullerSolver0);
      assertEquals(Double.NaN, graggBulirschStoerIntegrator0.getMaxStep(), 0.01);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator((-2056.412330232279), (-0.020331201708508627), Double.NaN, (-1276.9));
      graggBulirschStoerIntegrator0.setControlFactors((-2056.412330232279), (-334.93993), 1.0, Double.NaN);
      graggBulirschStoerIntegrator0.setStabilityCheck(true, 0, 0, 1360.4767745384);
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      graggBulirschStoerIntegrator0.addEventHandler(eventHandler0, 1000.0, 0.0, 0);
      assertEquals("Gragg-Bulirsch-Stoer", graggBulirschStoerIntegrator0.getName());
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator(0.0, 0.0, 1776.23, 0.0);
      graggBulirschStoerIntegrator0.setOrderControl((-922), (-922), (-922));
      DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator(260.07752087, (-2341.0124), 0.0, 4063.538947985);
      int int0 = dormandPrince853Integrator0.getOrder();
      assertEquals(8, int0);
  }
}
