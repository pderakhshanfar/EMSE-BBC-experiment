/*
 * This file was automatically generated by EvoSuite
 * Tue Oct 19 20:44:54 GMT 2021
 */

package org.apache.commons.math3.ode;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Collection;
import org.apache.commons.math3.analysis.solvers.BisectionSolver;
import org.apache.commons.math3.analysis.solvers.BracketingNthOrderBrentSolver;
import org.apache.commons.math3.analysis.solvers.IllinoisSolver;
import org.apache.commons.math3.analysis.solvers.MullerSolver;
import org.apache.commons.math3.analysis.solvers.MullerSolver2;
import org.apache.commons.math3.analysis.solvers.RegulaFalsiSolver;
import org.apache.commons.math3.analysis.solvers.RiddersSolver;
import org.apache.commons.math3.analysis.solvers.UnivariateSolver;
import org.apache.commons.math3.ode.ExpandableStatefulODE;
import org.apache.commons.math3.ode.FirstOrderConverter;
import org.apache.commons.math3.ode.FirstOrderDifferentialEquations;
import org.apache.commons.math3.ode.SecondOrderDifferentialEquations;
import org.apache.commons.math3.ode.SecondaryEquations;
import org.apache.commons.math3.ode.events.EventHandler;
import org.apache.commons.math3.ode.nonstiff.AdamsBashforthIntegrator;
import org.apache.commons.math3.ode.nonstiff.AdamsMoultonIntegrator;
import org.apache.commons.math3.ode.nonstiff.ClassicalRungeKuttaIntegrator;
import org.apache.commons.math3.ode.nonstiff.DormandPrince54Integrator;
import org.apache.commons.math3.ode.nonstiff.DormandPrince853Integrator;
import org.apache.commons.math3.ode.nonstiff.EulerIntegrator;
import org.apache.commons.math3.ode.nonstiff.GillIntegrator;
import org.apache.commons.math3.ode.nonstiff.GraggBulirschStoerIntegrator;
import org.apache.commons.math3.ode.nonstiff.HighamHall54Integrator;
import org.apache.commons.math3.ode.sampling.DummyStepHandler;
import org.apache.commons.math3.ode.sampling.FixedStepHandler;
import org.apache.commons.math3.ode.sampling.StepHandler;
import org.apache.commons.math3.ode.sampling.StepNormalizer;
import org.apache.commons.math3.ode.sampling.StepNormalizerBounds;
import org.apache.commons.math3.ode.sampling.StepNormalizerMode;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class AbstractIntegrator_ESTest extends AbstractIntegrator_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      EulerIntegrator eulerIntegrator0 = new EulerIntegrator(4.94E-321);
      eulerIntegrator0.getEvaluations();
      eulerIntegrator0.getMaxEvaluations();
      eulerIntegrator0.setMaxEvaluations(0);
      eulerIntegrator0.getMaxEvaluations();
      eulerIntegrator0.getName();
      eulerIntegrator0.getStepHandlers();
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      GillIntegrator gillIntegrator0 = new GillIntegrator(1038.4379996236519);
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0).when(eventHandler0).g(anyDouble() , any(double[].class));
      RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver((-1510.70103), 9.494921297991565E-8, 813.17730705289);
      gillIntegrator0.addEventHandler(eventHandler0, 1038.4379996236519, (-1112.5), 0, (UnivariateSolver) regulaFalsiSolver0);
      double[] doubleArray0 = new double[0];
      gillIntegrator0.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, (-1112.5), doubleArray0, 1.1368683772161603E-10, doubleArray0);
      double[] doubleArray1 = new double[4];
      doubleArray1[0] = 1.1368683772161603E-10;
      doubleArray1[1] = 1.0267179012298584;
      doubleArray1[2] = (-1510.70103);
      doubleArray1[3] = 813.17730705289;
      gillIntegrator0.computeDerivatives(9.494921297991565E-8, doubleArray0, doubleArray1);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      EulerIntegrator eulerIntegrator0 = new EulerIntegrator(979.4042);
      int int0 = 5;
      double double0 = (-262.52);
      AdamsBashforthIntegrator adamsBashforthIntegrator0 = new AdamsBashforthIntegrator(5, 979.4042, (-262.52), 0.0, 5);
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter0);
      // Undeclared exception!
//      try { 
        adamsBashforthIntegrator0.integrate(expandableStatefulODE0, (double) 5);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // matrix must have at least one column
//         //
//         verifyException("org.apache.commons.math3.linear.Array2DRowRealMatrix", e);
//      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      EulerIntegrator eulerIntegrator0 = new EulerIntegrator(0.0);
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      eulerIntegrator0.setMaxEvaluations(7);
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter0);
      eulerIntegrator0.getStepHandlers();
//      try { 
        eulerIntegrator0.integrate(expandableStatefulODE0, 0.0);
//        fail("Expecting exception: IllegalStateException");
      
//      } catch(IllegalStateException e) {
//         //
//         // illegal state: maximal count (7) exceeded
//         //
//         verifyException("org.apache.commons.math3.util.Incrementor$1", e);
//      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 1898.54;
      doubleArray0[1] = (-741.4819722);
      doubleArray0[2] = 1898.54;
      doubleArray0[3] = (-741.4819722);
      HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator((-741.4819722), 1898.54, doubleArray0, doubleArray0);
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter0);
      SecondaryEquations secondaryEquations0 = mock(SecondaryEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondaryEquations0).getDimension();
      expandableStatefulODE0.computeDerivatives(4147.640531902507, doubleArray0, doubleArray0);
      expandableStatefulODE0.getCompleteState();
      expandableStatefulODE0.addSecondaryEquations(secondaryEquations0);
//      try { 
        highamHall54Integrator0.integrate(expandableStatefulODE0, 1898.54);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // 0 != 4
//         //
//         verifyException("org.apache.commons.math3.ode.nonstiff.AdaptiveStepsizeIntegrator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      EulerIntegrator eulerIntegrator0 = new EulerIntegrator(0.0);
      eulerIntegrator0.getEvaluations();
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      GillIntegrator gillIntegrator0 = new GillIntegrator(4147.640531902507);
      BisectionSolver bisectionSolver0 = new BisectionSolver();
      gillIntegrator0.getMaxEvaluations();
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      doReturn(4147.640531902507, 1000.0, 1000.0, 303.56014313475, 4147.640531902507).when(eventHandler0).g(anyDouble() , any(double[].class));
      gillIntegrator0.addEventHandler(eventHandler0, (double) Integer.MAX_VALUE, 0.5914691686630249, (-1778), (UnivariateSolver) bisectionSolver0);
      GillIntegrator gillIntegrator1 = new GillIntegrator(Integer.MAX_VALUE);
      gillIntegrator1.getEvaluations();
      double[] doubleArray0 = new double[0];
      eulerIntegrator0.clearStepHandlers();
      gillIntegrator0.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, 0.5914691686630249, doubleArray0, 0.0, doubleArray0);
      eulerIntegrator0.getCurrentStepStart();
      ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter0);
      GillIntegrator gillIntegrator2 = new GillIntegrator(1251.2397290495);
      gillIntegrator0.getEvaluations();
      gillIntegrator0.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, 4395.0, doubleArray0, 1000.0, doubleArray0);
      gillIntegrator1.getMaxEvaluations();
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      EulerIntegrator eulerIntegrator0 = new EulerIntegrator(0.0);
      eulerIntegrator0.getEvaluations();
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      GillIntegrator gillIntegrator0 = new GillIntegrator(4147.640531902507);
      BisectionSolver bisectionSolver0 = new BisectionSolver();
      gillIntegrator0.getMaxEvaluations();
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      doReturn((double)Integer.MAX_VALUE, 0.0, 104.60183030348155, (-2937.89)).when(eventHandler0).g(anyDouble() , any(double[].class));
      gillIntegrator0.addEventHandler(eventHandler0, (double) Integer.MAX_VALUE, 0.5914691686630249, (-1778), (UnivariateSolver) bisectionSolver0);
      GillIntegrator gillIntegrator1 = new GillIntegrator(Integer.MAX_VALUE);
      gillIntegrator1.getEvaluations();
      double[] doubleArray0 = new double[0];
      // Undeclared exception!
//      try { 
        gillIntegrator0.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, 0.5914691686630249, doubleArray0, 0.0, doubleArray0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // endpoints do not specify an interval: [0, -4,147.049]
//         //
//         verifyException("org.apache.commons.math3.analysis.solvers.UnivariateSolverUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      EulerIntegrator eulerIntegrator0 = new EulerIntegrator(0.0);
      eulerIntegrator0.getEvaluations();
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      GillIntegrator gillIntegrator0 = new GillIntegrator(4147.640531902507);
      BisectionSolver bisectionSolver0 = new BisectionSolver();
      gillIntegrator0.getMaxEvaluations();
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      doReturn(4147.640531902507, 1000.0, 1000.0, 303.56014313475, 4147.640531902507).when(eventHandler0).g(anyDouble() , any(double[].class));
      gillIntegrator0.addEventHandler(eventHandler0, (double) Integer.MAX_VALUE, 0.5914691686630249, (-1778), (UnivariateSolver) bisectionSolver0);
      GillIntegrator gillIntegrator1 = new GillIntegrator(Integer.MAX_VALUE);
      gillIntegrator1.getEvaluations();
      double[] doubleArray0 = new double[0];
      gillIntegrator0.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, 0.5914691686630249, doubleArray0, 0.0, doubleArray0);
      eulerIntegrator0.getCurrentStepStart();
      ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter0);
      SecondOrderDifferentialEquations secondOrderDifferentialEquations1 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations1).getDimension();
      FirstOrderConverter firstOrderConverter1 = new FirstOrderConverter(secondOrderDifferentialEquations1);
      GillIntegrator gillIntegrator2 = new GillIntegrator((-2802.034909421));
      // Undeclared exception!
      gillIntegrator0.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, 469.6827116708222, doubleArray0, (double) Integer.MAX_VALUE, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      double double0 = 1919.60932;
      double double1 = 669.25347;
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator(1919.60932, (-1.0), 944.5332833244694, 669.25347);
      int int0 = 422;
      graggBulirschStoerIntegrator0.setInterpolationControl(true, 422);
      FixedStepHandler fixedStepHandler0 = mock(FixedStepHandler.class, new ViolatedAssumptionAnswer());
      StepNormalizerMode stepNormalizerMode0 = StepNormalizerMode.INCREMENT;
      StepNormalizerBounds stepNormalizerBounds0 = StepNormalizerBounds.LAST;
      StepNormalizer stepNormalizer0 = new StepNormalizer(1.1102230246251565E-13, fixedStepHandler0, stepNormalizerMode0, stepNormalizerBounds0);
      graggBulirschStoerIntegrator0.addStepHandler(stepNormalizer0);
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter0);
      // Undeclared exception!
      graggBulirschStoerIntegrator0.integrate(expandableStatefulODE0, 13.8749);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      EulerIntegrator eulerIntegrator0 = new EulerIntegrator(0.0);
      assertEquals("Euler", eulerIntegrator0.getName());
      assertEquals(Double.NaN, eulerIntegrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals(Double.NaN, eulerIntegrator0.getCurrentStepStart(), 0.01);
      assertNotNull(eulerIntegrator0);
      
      int int0 = eulerIntegrator0.getEvaluations();
      assertEquals("Euler", eulerIntegrator0.getName());
      assertEquals(Double.NaN, eulerIntegrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals(Double.NaN, eulerIntegrator0.getCurrentStepStart(), 0.01);
      assertEquals(0, int0);
      
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      assertEquals(0, firstOrderConverter0.getDimension());
      assertNotNull(firstOrderConverter0);
      
      double double0 = 4147.640531902507;
      GillIntegrator gillIntegrator0 = new GillIntegrator(4147.640531902507);
      assertEquals(Double.NaN, gillIntegrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals(Double.NaN, gillIntegrator0.getCurrentStepStart(), 0.01);
      assertEquals("Gill", gillIntegrator0.getName());
      assertNotNull(gillIntegrator0);
      
      EulerIntegrator eulerIntegrator1 = new EulerIntegrator(0.0);
      assertEquals("Euler", eulerIntegrator1.getName());
      assertEquals(Double.NaN, eulerIntegrator1.getCurrentSignedStepsize(), 0.01);
      assertEquals(Double.NaN, eulerIntegrator1.getCurrentStepStart(), 0.01);
      assertFalse(eulerIntegrator1.equals((Object)eulerIntegrator0));
      assertNotNull(eulerIntegrator1);
      
      DummyStepHandler dummyStepHandler0 = DummyStepHandler.getInstance();
      assertNotNull(dummyStepHandler0);
      
      eulerIntegrator1.addStepHandler(dummyStepHandler0);
      assertNotSame(eulerIntegrator1, eulerIntegrator0);
      assertEquals("Euler", eulerIntegrator1.getName());
      assertEquals(Double.NaN, eulerIntegrator1.getCurrentSignedStepsize(), 0.01);
      assertEquals(Double.NaN, eulerIntegrator1.getCurrentStepStart(), 0.01);
      assertFalse(eulerIntegrator1.equals((Object)eulerIntegrator0));
      
      ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter0);
      assertEquals(0, firstOrderConverter0.getDimension());
      assertEquals(Double.NaN, expandableStatefulODE0.getTime(), 0.01);
      assertNotNull(expandableStatefulODE0);
      
      // Undeclared exception!
      eulerIntegrator1.integrate(expandableStatefulODE0, 0.0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      EulerIntegrator eulerIntegrator0 = new EulerIntegrator(0.0);
      assertEquals(Double.NaN, eulerIntegrator0.getCurrentStepStart(), 0.01);
      assertEquals(Double.NaN, eulerIntegrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals("Euler", eulerIntegrator0.getName());
      assertNotNull(eulerIntegrator0);
      
      int int0 = eulerIntegrator0.getEvaluations();
      assertEquals(Double.NaN, eulerIntegrator0.getCurrentStepStart(), 0.01);
      assertEquals(Double.NaN, eulerIntegrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals("Euler", eulerIntegrator0.getName());
      assertEquals(0, int0);
      
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      assertEquals(0, firstOrderConverter0.getDimension());
      assertNotNull(firstOrderConverter0);
      
      GillIntegrator gillIntegrator0 = new GillIntegrator(4147.640531902507);
      assertEquals(Double.NaN, gillIntegrator0.getCurrentStepStart(), 0.01);
      assertEquals(Double.NaN, gillIntegrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals("Gill", gillIntegrator0.getName());
      assertNotNull(gillIntegrator0);
      
      BisectionSolver bisectionSolver0 = new BisectionSolver();
      assertEquals(1.0E-14, bisectionSolver0.getRelativeAccuracy(), 0.01);
      assertEquals(0.0, bisectionSolver0.getStartValue(), 0.01);
      assertEquals(1.0E-6, bisectionSolver0.getAbsoluteAccuracy(), 0.01);
      assertEquals(0.0, bisectionSolver0.getMin(), 0.01);
      assertEquals(1.0E-15, bisectionSolver0.getFunctionValueAccuracy(), 0.01);
      assertEquals(0.0, bisectionSolver0.getMax(), 0.01);
      assertNotNull(bisectionSolver0);
      
      int int1 = gillIntegrator0.getMaxEvaluations();
      assertEquals(Double.NaN, gillIntegrator0.getCurrentStepStart(), 0.01);
      assertEquals(Double.NaN, gillIntegrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals("Gill", gillIntegrator0.getName());
      assertFalse(int1 == int0);
      assertEquals(Integer.MAX_VALUE, int1);
      
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      gillIntegrator0.addEventHandler(eventHandler0, (-2386.366150309078), 1000.0, (-2481), (UnivariateSolver) bisectionSolver0);
      assertEquals(Double.NaN, gillIntegrator0.getCurrentStepStart(), 0.01);
      assertEquals(Double.NaN, gillIntegrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals("Gill", gillIntegrator0.getName());
      assertEquals(1.0E-14, bisectionSolver0.getRelativeAccuracy(), 0.01);
      assertEquals(0.0, bisectionSolver0.getStartValue(), 0.01);
      assertEquals(1.0E-6, bisectionSolver0.getAbsoluteAccuracy(), 0.01);
      assertEquals(0.0, bisectionSolver0.getMin(), 0.01);
      assertEquals(1.0E-15, bisectionSolver0.getFunctionValueAccuracy(), 0.01);
      assertEquals(0.0, bisectionSolver0.getMax(), 0.01);
      
      GillIntegrator gillIntegrator1 = new GillIntegrator((-1.0));
      assertEquals("Gill", gillIntegrator1.getName());
      assertEquals(Double.NaN, gillIntegrator1.getCurrentStepStart(), 0.01);
      assertEquals(Double.NaN, gillIntegrator1.getCurrentSignedStepsize(), 0.01);
      assertFalse(gillIntegrator1.equals((Object)gillIntegrator0));
      assertNotNull(gillIntegrator1);
      
      int int2 = gillIntegrator0.getEvaluations();
      assertNotSame(gillIntegrator0, gillIntegrator1);
      assertEquals(Double.NaN, gillIntegrator0.getCurrentStepStart(), 0.01);
      assertEquals(Double.NaN, gillIntegrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals("Gill", gillIntegrator0.getName());
      assertFalse(gillIntegrator0.equals((Object)gillIntegrator1));
      assertFalse(int2 == int1);
      assertTrue(int2 == int0);
      assertEquals(0, int2);
      
      GillIntegrator gillIntegrator2 = new GillIntegrator(1929.0);
      assertEquals(Double.NaN, gillIntegrator2.getCurrentSignedStepsize(), 0.01);
      assertEquals(Double.NaN, gillIntegrator2.getCurrentStepStart(), 0.01);
      assertEquals("Gill", gillIntegrator2.getName());
      assertFalse(gillIntegrator2.equals((Object)gillIntegrator0));
      assertFalse(gillIntegrator2.equals((Object)gillIntegrator1));
      assertNotNull(gillIntegrator2);
      
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = new double[9];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = 0.0;
      doubleArray1[1] = 303.56014313475;
      doubleArray1[2] = 1000.0;
      doubleArray1[3] = (-1.0);
      doubleArray1[4] = 1929.0;
      doubleArray1[5] = 303.56014313475;
      doubleArray1[6] = 1.1102230246251565E-13;
      doubleArray1[7] = (double) 0;
      doubleArray1[8] = (double) 0;
//      try { 
        gillIntegrator2.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, (-1.0), doubleArray0, 4147.640531902507, doubleArray1);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // 9 != 0
//         //
//         verifyException("org.apache.commons.math3.ode.AbstractIntegrator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator(294.82674, 294.82674, (-605.39), 392.4056506);
      assertEquals("Gragg-Bulirsch-Stoer", graggBulirschStoerIntegrator0.getName());
      assertEquals(294.82674, graggBulirschStoerIntegrator0.getMaxStep(), 0.01);
      assertEquals(294.82674, graggBulirschStoerIntegrator0.getMinStep(), 0.01);
      assertEquals(294.82674, graggBulirschStoerIntegrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals(Double.NaN, graggBulirschStoerIntegrator0.getCurrentStepStart(), 0.01);
      assertNotNull(graggBulirschStoerIntegrator0);
      
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      assertEquals(0, firstOrderConverter0.getDimension());
      assertNotNull(firstOrderConverter0);
      
      SecondOrderDifferentialEquations secondOrderDifferentialEquations1 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations1).getDimension();
      FirstOrderConverter firstOrderConverter1 = new FirstOrderConverter(secondOrderDifferentialEquations1);
      assertEquals(0, firstOrderConverter1.getDimension());
      assertFalse(firstOrderConverter1.equals((Object)firstOrderConverter0));
      assertNotNull(firstOrderConverter1);
      
      GillIntegrator gillIntegrator0 = new GillIntegrator(0);
      assertEquals(Double.NaN, gillIntegrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals(Double.NaN, gillIntegrator0.getCurrentStepStart(), 0.01);
      assertEquals("Gill", gillIntegrator0.getName());
      assertNotNull(gillIntegrator0);
      
      double[] doubleArray0 = new double[0];
      // Undeclared exception!
      gillIntegrator0.integrate((FirstOrderDifferentialEquations) firstOrderConverter1, (-605.39), doubleArray0, 645.8497290495, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      EulerIntegrator eulerIntegrator0 = new EulerIntegrator(0.0);
      assertEquals(Double.NaN, eulerIntegrator0.getCurrentStepStart(), 0.01);
      assertEquals("Euler", eulerIntegrator0.getName());
      assertEquals(Double.NaN, eulerIntegrator0.getCurrentSignedStepsize(), 0.01);
      assertNotNull(eulerIntegrator0);
      
      eulerIntegrator0.setMaxEvaluations(0);
      assertEquals(Double.NaN, eulerIntegrator0.getCurrentStepStart(), 0.01);
      assertEquals("Euler", eulerIntegrator0.getName());
      assertEquals(Double.NaN, eulerIntegrator0.getCurrentSignedStepsize(), 0.01);
      
      int int0 = eulerIntegrator0.getEvaluations();
      assertEquals(Double.NaN, eulerIntegrator0.getCurrentStepStart(), 0.01);
      assertEquals("Euler", eulerIntegrator0.getName());
      assertEquals(Double.NaN, eulerIntegrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals(0, int0);
      
      GillIntegrator gillIntegrator0 = new GillIntegrator(293.04404732917783);
      assertEquals(Double.NaN, gillIntegrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals("Gill", gillIntegrator0.getName());
      assertEquals(Double.NaN, gillIntegrator0.getCurrentStepStart(), 0.01);
      assertNotNull(gillIntegrator0);
      
      int int1 = gillIntegrator0.getMaxEvaluations();
      assertEquals(Double.NaN, gillIntegrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals("Gill", gillIntegrator0.getName());
      assertEquals(Double.NaN, gillIntegrator0.getCurrentStepStart(), 0.01);
      assertFalse(int1 == int0);
      assertEquals(Integer.MAX_VALUE, int1);
      
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(eventHandler0).g(anyDouble() , any(double[].class));
      BisectionSolver bisectionSolver0 = new BisectionSolver((-1429.99124), (-3590.36291));
      assertEquals(0.0, bisectionSolver0.getMax(), 0.01);
      assertEquals(0.0, bisectionSolver0.getStartValue(), 0.01);
      assertEquals(0.0, bisectionSolver0.getMin(), 0.01);
      assertEquals(1.0E-15, bisectionSolver0.getFunctionValueAccuracy(), 0.01);
      assertEquals((-1429.99124), bisectionSolver0.getRelativeAccuracy(), 0.01);
      assertEquals((-3590.36291), bisectionSolver0.getAbsoluteAccuracy(), 0.01);
      assertNotNull(bisectionSolver0);
      
      gillIntegrator0.addEventHandler(eventHandler0, 0.5914691686630249, (-1429.99124), (-1696), (UnivariateSolver) bisectionSolver0);
      assertEquals(Double.NaN, gillIntegrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals("Gill", gillIntegrator0.getName());
      assertEquals(Double.NaN, gillIntegrator0.getCurrentStepStart(), 0.01);
      assertEquals(0.0, bisectionSolver0.getMax(), 0.01);
      assertEquals(0.0, bisectionSolver0.getStartValue(), 0.01);
      assertEquals(0.0, bisectionSolver0.getMin(), 0.01);
      assertEquals(1.0E-15, bisectionSolver0.getFunctionValueAccuracy(), 0.01);
      assertEquals((-1429.99124), bisectionSolver0.getRelativeAccuracy(), 0.01);
      assertEquals((-3590.36291), bisectionSolver0.getAbsoluteAccuracy(), 0.01);
      
      GillIntegrator gillIntegrator1 = new GillIntegrator((-1778));
      assertEquals(Double.NaN, gillIntegrator1.getCurrentSignedStepsize(), 0.01);
      assertEquals(Double.NaN, gillIntegrator1.getCurrentStepStart(), 0.01);
      assertEquals("Gill", gillIntegrator1.getName());
      assertFalse(gillIntegrator1.equals((Object)gillIntegrator0));
      assertNotNull(gillIntegrator1);
      
      int int2 = gillIntegrator0.getEvaluations();
      assertNotSame(gillIntegrator0, gillIntegrator1);
      assertEquals(Double.NaN, gillIntegrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals("Gill", gillIntegrator0.getName());
      assertEquals(Double.NaN, gillIntegrator0.getCurrentStepStart(), 0.01);
      assertFalse(gillIntegrator0.equals((Object)gillIntegrator1));
      assertFalse(int2 == int1);
      assertTrue(int2 == int0);
      assertEquals(0, int2);
      
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      assertEquals(0, firstOrderConverter0.getDimension());
      assertNotNull(firstOrderConverter0);
      
      double[] doubleArray0 = new double[0];
      double double0 = gillIntegrator0.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, 293.04404732917783, doubleArray0, (-1388.43656513), doubleArray0);
      assertNotSame(gillIntegrator0, gillIntegrator1);
      assertEquals(Double.NaN, gillIntegrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals("Gill", gillIntegrator0.getName());
      assertEquals(Double.NaN, gillIntegrator0.getCurrentStepStart(), 0.01);
      assertEquals(0, firstOrderConverter0.getDimension());
      assertEquals(0, doubleArray0.length);
      assertFalse(gillIntegrator0.equals((Object)gillIntegrator1));
      assertEquals((-1388.43656513), double0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator(294.82674, 294.82674, (-605.39), 392.4056506);
      assertEquals(294.82674, graggBulirschStoerIntegrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals(294.82674, graggBulirschStoerIntegrator0.getMinStep(), 0.01);
      assertEquals(294.82674, graggBulirschStoerIntegrator0.getMaxStep(), 0.01);
      assertEquals(Double.NaN, graggBulirschStoerIntegrator0.getCurrentStepStart(), 0.01);
      assertEquals("Gragg-Bulirsch-Stoer", graggBulirschStoerIntegrator0.getName());
      assertNotNull(graggBulirschStoerIntegrator0);
      
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      assertEquals(0, firstOrderConverter0.getDimension());
      assertNotNull(firstOrderConverter0);
      
      ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter0);
      assertEquals(0, firstOrderConverter0.getDimension());
      assertEquals(Double.NaN, expandableStatefulODE0.getTime(), 0.01);
      assertNotNull(expandableStatefulODE0);
      
      SecondOrderDifferentialEquations secondOrderDifferentialEquations1 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations1).getDimension();
      FirstOrderConverter firstOrderConverter1 = new FirstOrderConverter(secondOrderDifferentialEquations1);
      assertEquals(0, firstOrderConverter1.getDimension());
      assertFalse(firstOrderConverter1.equals((Object)firstOrderConverter0));
      assertNotNull(firstOrderConverter1);
      
      GillIntegrator gillIntegrator0 = new GillIntegrator(0);
      assertEquals("Gill", gillIntegrator0.getName());
      assertEquals(Double.NaN, gillIntegrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals(Double.NaN, gillIntegrator0.getCurrentStepStart(), 0.01);
      assertNotNull(gillIntegrator0);
      
      double[] doubleArray0 = new double[0];
//      try { 
        gillIntegrator0.integrate((FirstOrderDifferentialEquations) firstOrderConverter1, 0.5914691686630249, doubleArray0, 0.5914691686630249, doubleArray0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // too small integration interval: length = 0
//         //
//         verifyException("org.apache.commons.math3.ode.AbstractIntegrator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator(294.82674, 294.82674, (-605.39), 393.1512971690317);
      assertEquals("Gragg-Bulirsch-Stoer", graggBulirschStoerIntegrator0.getName());
      assertEquals(Double.NaN, graggBulirschStoerIntegrator0.getCurrentStepStart(), 0.01);
      assertEquals(294.82674, graggBulirschStoerIntegrator0.getMaxStep(), 0.01);
      assertEquals(294.82674, graggBulirschStoerIntegrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals(294.82674, graggBulirschStoerIntegrator0.getMinStep(), 0.01);
      assertNotNull(graggBulirschStoerIntegrator0);
      
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      assertEquals(0, firstOrderConverter0.getDimension());
      assertNotNull(firstOrderConverter0);
      
      ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter0);
      assertEquals(0, firstOrderConverter0.getDimension());
      assertEquals(Double.NaN, expandableStatefulODE0.getTime(), 0.01);
      assertNotNull(expandableStatefulODE0);
      
      SecondOrderDifferentialEquations secondOrderDifferentialEquations1 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations1).getDimension();
      FirstOrderConverter firstOrderConverter1 = new FirstOrderConverter(secondOrderDifferentialEquations1);
      assertEquals(0, firstOrderConverter1.getDimension());
      assertFalse(firstOrderConverter1.equals((Object)firstOrderConverter0));
      assertNotNull(firstOrderConverter1);
      
      GillIntegrator gillIntegrator0 = new GillIntegrator(1.7826926708221436);
      assertEquals(Double.NaN, gillIntegrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals(Double.NaN, gillIntegrator0.getCurrentStepStart(), 0.01);
      assertEquals("Gill", gillIntegrator0.getName());
      assertNotNull(gillIntegrator0);
      
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      doReturn(1.7826926708221436, 3263.845, 294.82674, (-1831.310848277)).when(eventHandler0).g(anyDouble() , any(double[].class));
      BisectionSolver bisectionSolver0 = new BisectionSolver();
      assertEquals(1.0E-15, bisectionSolver0.getFunctionValueAccuracy(), 0.01);
      assertEquals(0.0, bisectionSolver0.getStartValue(), 0.01);
      assertEquals(1.0E-6, bisectionSolver0.getAbsoluteAccuracy(), 0.01);
      assertEquals(1.0E-14, bisectionSolver0.getRelativeAccuracy(), 0.01);
      assertEquals(0.0, bisectionSolver0.getMin(), 0.01);
      assertEquals(0.0, bisectionSolver0.getMax(), 0.01);
      assertNotNull(bisectionSolver0);
      
      gillIntegrator0.addEventHandler(eventHandler0, (-605.39), 1.7826926708221436, 0, (UnivariateSolver) bisectionSolver0);
      assertEquals(Double.NaN, gillIntegrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals(Double.NaN, gillIntegrator0.getCurrentStepStart(), 0.01);
      assertEquals("Gill", gillIntegrator0.getName());
      assertEquals(1.0E-15, bisectionSolver0.getFunctionValueAccuracy(), 0.01);
      assertEquals(0.0, bisectionSolver0.getStartValue(), 0.01);
      assertEquals(1.0E-6, bisectionSolver0.getAbsoluteAccuracy(), 0.01);
      assertEquals(1.0E-14, bisectionSolver0.getRelativeAccuracy(), 0.01);
      assertEquals(0.0, bisectionSolver0.getMin(), 0.01);
      assertEquals(0.0, bisectionSolver0.getMax(), 0.01);
      
      int int0 = gillIntegrator0.getEvaluations();
      assertEquals(Double.NaN, gillIntegrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals(Double.NaN, gillIntegrator0.getCurrentStepStart(), 0.01);
      assertEquals("Gill", gillIntegrator0.getName());
      assertEquals(0, int0);
      
      double[] doubleArray0 = new double[0];
//      try { 
        gillIntegrator0.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, 1.7826926708221436, doubleArray0, 294.82674, doubleArray0);
//        fail("Expecting exception: IllegalStateException");
      
//      } catch(IllegalStateException e) {
//         //
//         // illegal state: maximal count (0) exceeded: evaluations
//         //
//         verifyException("org.apache.commons.math3.analysis.solvers.BaseAbstractUnivariateSolver", e);
//      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      EulerIntegrator eulerIntegrator0 = new EulerIntegrator(0.0);
      assertEquals(Double.NaN, eulerIntegrator0.getCurrentStepStart(), 0.01);
      assertEquals(Double.NaN, eulerIntegrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals("Euler", eulerIntegrator0.getName());
      assertNotNull(eulerIntegrator0);
      
      int int0 = eulerIntegrator0.getEvaluations();
      assertEquals(Double.NaN, eulerIntegrator0.getCurrentStepStart(), 0.01);
      assertEquals(Double.NaN, eulerIntegrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals("Euler", eulerIntegrator0.getName());
      assertEquals(0, int0);
      
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      assertEquals(0, firstOrderConverter0.getDimension());
      assertNotNull(firstOrderConverter0);
      
      GillIntegrator gillIntegrator0 = new GillIntegrator(4147.640531902507);
      assertEquals("Gill", gillIntegrator0.getName());
      assertEquals(Double.NaN, gillIntegrator0.getCurrentStepStart(), 0.01);
      assertEquals(Double.NaN, gillIntegrator0.getCurrentSignedStepsize(), 0.01);
      assertNotNull(gillIntegrator0);
      
      BisectionSolver bisectionSolver0 = new BisectionSolver();
      assertEquals(0.0, bisectionSolver0.getStartValue(), 0.01);
      assertEquals(1.0E-14, bisectionSolver0.getRelativeAccuracy(), 0.01);
      assertEquals(1.0E-6, bisectionSolver0.getAbsoluteAccuracy(), 0.01);
      assertEquals(0.0, bisectionSolver0.getMax(), 0.01);
      assertEquals(0.0, bisectionSolver0.getMin(), 0.01);
      assertEquals(1.0E-15, bisectionSolver0.getFunctionValueAccuracy(), 0.01);
      assertNotNull(bisectionSolver0);
      
      int int1 = gillIntegrator0.getMaxEvaluations();
      assertEquals("Gill", gillIntegrator0.getName());
      assertEquals(Double.NaN, gillIntegrator0.getCurrentStepStart(), 0.01);
      assertEquals(Double.NaN, gillIntegrator0.getCurrentSignedStepsize(), 0.01);
      assertFalse(int1 == int0);
      assertEquals(Integer.MAX_VALUE, int1);
      
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(eventHandler0).g(anyDouble() , any(double[].class));
      gillIntegrator0.addEventHandler(eventHandler0, (double) Integer.MAX_VALUE, 0.5914691686630249, (-1778), (UnivariateSolver) bisectionSolver0);
      assertEquals("Gill", gillIntegrator0.getName());
      assertEquals(Double.NaN, gillIntegrator0.getCurrentStepStart(), 0.01);
      assertEquals(Double.NaN, gillIntegrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals(0.0, bisectionSolver0.getStartValue(), 0.01);
      assertEquals(1.0E-14, bisectionSolver0.getRelativeAccuracy(), 0.01);
      assertEquals(1.0E-6, bisectionSolver0.getAbsoluteAccuracy(), 0.01);
      assertEquals(0.0, bisectionSolver0.getMax(), 0.01);
      assertEquals(0.0, bisectionSolver0.getMin(), 0.01);
      assertEquals(1.0E-15, bisectionSolver0.getFunctionValueAccuracy(), 0.01);
      
      GillIntegrator gillIntegrator1 = new GillIntegrator(Integer.MAX_VALUE);
      assertEquals(Double.NaN, gillIntegrator1.getCurrentStepStart(), 0.01);
      assertEquals(Double.NaN, gillIntegrator1.getCurrentSignedStepsize(), 0.01);
      assertEquals("Gill", gillIntegrator1.getName());
      assertFalse(gillIntegrator1.equals((Object)gillIntegrator0));
      assertNotNull(gillIntegrator1);
      
      int int2 = gillIntegrator1.getEvaluations();
      assertNotSame(gillIntegrator1, gillIntegrator0);
      assertEquals(Double.NaN, gillIntegrator1.getCurrentStepStart(), 0.01);
      assertEquals(Double.NaN, gillIntegrator1.getCurrentSignedStepsize(), 0.01);
      assertEquals("Gill", gillIntegrator1.getName());
      assertFalse(gillIntegrator1.equals((Object)gillIntegrator0));
      assertFalse(int2 == int1);
      assertTrue(int2 == int0);
      assertEquals(0, int2);
      
      double[] doubleArray0 = new double[0];
      double double0 = gillIntegrator0.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, 0.5914691686630249, doubleArray0, 0.0, doubleArray0);
      assertNotSame(gillIntegrator0, gillIntegrator1);
      assertEquals(0, firstOrderConverter0.getDimension());
      assertEquals("Gill", gillIntegrator0.getName());
      assertEquals(Double.NaN, gillIntegrator0.getCurrentStepStart(), 0.01);
      assertEquals(Double.NaN, gillIntegrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals(0, doubleArray0.length);
      assertFalse(gillIntegrator0.equals((Object)gillIntegrator1));
      assertEquals(0.0, double0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator(1000.0, 1000.0, 1000.0, 1000.0);
      assertEquals(8, dormandPrince853Integrator0.getOrder());
      assertEquals("Dormand-Prince 8 (5, 3)", dormandPrince853Integrator0.getName());
      assertEquals(0.9, dormandPrince853Integrator0.getSafety(), 0.01);
      assertEquals(Double.NaN, dormandPrince853Integrator0.getCurrentStepStart(), 0.01);
      assertEquals(0.2, dormandPrince853Integrator0.getMinReduction(), 0.01);
      assertEquals(1000.0, dormandPrince853Integrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals(1000.0, dormandPrince853Integrator0.getMinStep(), 0.01);
      assertEquals(1000.0, dormandPrince853Integrator0.getMaxStep(), 0.01);
      assertEquals(10.0, dormandPrince853Integrator0.getMaxGrowth(), 0.01);
      assertNotNull(dormandPrince853Integrator0);
      
      GillIntegrator gillIntegrator0 = new GillIntegrator(1000.0);
      assertEquals(Double.NaN, gillIntegrator0.getCurrentStepStart(), 0.01);
      assertEquals(Double.NaN, gillIntegrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals("Gill", gillIntegrator0.getName());
      assertNotNull(gillIntegrator0);
      
      EulerIntegrator eulerIntegrator0 = new EulerIntegrator((-392.99051));
      assertEquals(Double.NaN, eulerIntegrator0.getCurrentStepStart(), 0.01);
      assertEquals(Double.NaN, eulerIntegrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals("Euler", eulerIntegrator0.getName());
      assertNotNull(eulerIntegrator0);
      
      double double0 = eulerIntegrator0.getCurrentStepStart();
      assertEquals(Double.NaN, eulerIntegrator0.getCurrentStepStart(), 0.01);
      assertEquals(Double.NaN, eulerIntegrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals("Euler", eulerIntegrator0.getName());
      assertEquals(Double.NaN, double0, 0.01);
      
      DummyStepHandler dummyStepHandler0 = DummyStepHandler.getInstance();
      assertNotNull(dummyStepHandler0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      assertEquals(0, firstOrderConverter0.getDimension());
      assertNotNull(firstOrderConverter0);
      
      ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter0);
      assertEquals(0, firstOrderConverter0.getDimension());
      assertEquals(Double.NaN, expandableStatefulODE0.getTime(), 0.01);
      assertNotNull(expandableStatefulODE0);
      
      SecondOrderDifferentialEquations secondOrderDifferentialEquations1 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations1).getDimension();
      FirstOrderConverter firstOrderConverter1 = new FirstOrderConverter(secondOrderDifferentialEquations1);
      assertEquals(0, firstOrderConverter1.getDimension());
      assertFalse(firstOrderConverter1.equals((Object)firstOrderConverter0));
      assertNotNull(firstOrderConverter1);
      
      GillIntegrator gillIntegrator0 = new GillIntegrator(1.7826926708221436);
      assertEquals("Gill", gillIntegrator0.getName());
      assertEquals(Double.NaN, gillIntegrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals(Double.NaN, gillIntegrator0.getCurrentStepStart(), 0.01);
      assertNotNull(gillIntegrator0);
      
      gillIntegrator0.setMaxEvaluations(3887);
      assertEquals("Gill", gillIntegrator0.getName());
      assertEquals(Double.NaN, gillIntegrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals(Double.NaN, gillIntegrator0.getCurrentStepStart(), 0.01);
      
      double[] doubleArray0 = new double[0];
      double double0 = gillIntegrator0.getCurrentStepStart();
      assertEquals("Gill", gillIntegrator0.getName());
      assertEquals(Double.NaN, gillIntegrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals(Double.NaN, gillIntegrator0.getCurrentStepStart(), 0.01);
      assertEquals(Double.NaN, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator(294.82674, 294.82674, (-605.39), 392.4056506);
      assertEquals(294.82674, graggBulirschStoerIntegrator0.getMaxStep(), 0.01);
      assertEquals("Gragg-Bulirsch-Stoer", graggBulirschStoerIntegrator0.getName());
      assertEquals(294.82674, graggBulirschStoerIntegrator0.getMinStep(), 0.01);
      assertEquals(294.82674, graggBulirschStoerIntegrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals(Double.NaN, graggBulirschStoerIntegrator0.getCurrentStepStart(), 0.01);
      assertNotNull(graggBulirschStoerIntegrator0);
      
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      assertEquals(0, firstOrderConverter0.getDimension());
      assertNotNull(firstOrderConverter0);
      
      ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter0);
      assertEquals(0, firstOrderConverter0.getDimension());
      assertEquals(Double.NaN, expandableStatefulODE0.getTime(), 0.01);
      assertNotNull(expandableStatefulODE0);
      
      SecondOrderDifferentialEquations secondOrderDifferentialEquations1 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations1).getDimension();
      FirstOrderConverter firstOrderConverter1 = new FirstOrderConverter(secondOrderDifferentialEquations1);
      assertEquals(0, firstOrderConverter1.getDimension());
      assertFalse(firstOrderConverter1.equals((Object)firstOrderConverter0));
      assertNotNull(firstOrderConverter1);
      
      GillIntegrator gillIntegrator0 = new GillIntegrator(1.7826926708221436);
      assertEquals(Double.NaN, gillIntegrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals(Double.NaN, gillIntegrator0.getCurrentStepStart(), 0.01);
      assertEquals("Gill", gillIntegrator0.getName());
      assertNotNull(gillIntegrator0);
      
      gillIntegrator0.setMaxEvaluations(0);
      assertEquals(Double.NaN, gillIntegrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals(Double.NaN, gillIntegrator0.getCurrentStepStart(), 0.01);
      assertEquals("Gill", gillIntegrator0.getName());
      
      double[] doubleArray0 = new double[0];
//      try { 
        gillIntegrator0.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, 1.7826926708221436, doubleArray0, 294.82674, doubleArray0);
//        fail("Expecting exception: IllegalStateException");
      
//      } catch(IllegalStateException e) {
//         //
//         // illegal state: maximal count (0) exceeded
//         //
//         verifyException("org.apache.commons.math3.util.Incrementor$1", e);
//      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      MullerSolver2 mullerSolver2_0 = new MullerSolver2();
      assertEquals(1.0E-14, mullerSolver2_0.getRelativeAccuracy(), 0.01);
      assertEquals(0.0, mullerSolver2_0.getMax(), 0.01);
      assertEquals(0.0, mullerSolver2_0.getMin(), 0.01);
      assertEquals(1.0E-15, mullerSolver2_0.getFunctionValueAccuracy(), 0.01);
      assertEquals(0.0, mullerSolver2_0.getStartValue(), 0.01);
      assertEquals(1.0E-6, mullerSolver2_0.getAbsoluteAccuracy(), 0.01);
      assertNotNull(mullerSolver2_0);
      
      EulerIntegrator eulerIntegrator0 = new EulerIntegrator(0.0);
      assertEquals(Double.NaN, eulerIntegrator0.getCurrentStepStart(), 0.01);
      assertEquals(Double.NaN, eulerIntegrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals("Euler", eulerIntegrator0.getName());
      assertNotNull(eulerIntegrator0);
      
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      doReturn(1551.628605, (-1219.933), 1.1426473877336358E-245, (-1568.317007), (-375.55786381482)).when(eventHandler0).g(anyDouble() , any(double[].class));
      eulerIntegrator0.addEventHandler(eventHandler0, (-4366.407765233), 5.6843418860808015E-11, 1600, (UnivariateSolver) mullerSolver2_0);
      assertEquals(1.0E-14, mullerSolver2_0.getRelativeAccuracy(), 0.01);
      assertEquals(0.0, mullerSolver2_0.getMax(), 0.01);
      assertEquals(0.0, mullerSolver2_0.getMin(), 0.01);
      assertEquals(1.0E-15, mullerSolver2_0.getFunctionValueAccuracy(), 0.01);
      assertEquals(0.0, mullerSolver2_0.getStartValue(), 0.01);
      assertEquals(1.0E-6, mullerSolver2_0.getAbsoluteAccuracy(), 0.01);
      assertEquals(Double.NaN, eulerIntegrator0.getCurrentStepStart(), 0.01);
      assertEquals(Double.NaN, eulerIntegrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals("Euler", eulerIntegrator0.getName());
      
      MullerSolver2 mullerSolver2_1 = new MullerSolver2((-1190.13468113));
      assertEquals(1.0E-15, mullerSolver2_1.getFunctionValueAccuracy(), 0.01);
      assertEquals(0.0, mullerSolver2_1.getStartValue(), 0.01);
      assertEquals(0.0, mullerSolver2_1.getMin(), 0.01);
      assertEquals((-1190.13468113), mullerSolver2_1.getAbsoluteAccuracy(), 0.01);
      assertEquals(0.0, mullerSolver2_1.getMax(), 0.01);
      assertEquals(1.0E-14, mullerSolver2_1.getRelativeAccuracy(), 0.01);
      assertFalse(mullerSolver2_1.equals((Object)mullerSolver2_0));
      assertNotNull(mullerSolver2_1);
      
      RiddersSolver riddersSolver0 = new RiddersSolver();
      assertEquals(1.0E-14, riddersSolver0.getRelativeAccuracy(), 0.01);
      assertEquals(0.0, riddersSolver0.getMin(), 0.01);
      assertEquals(1.0E-6, riddersSolver0.getAbsoluteAccuracy(), 0.01);
      assertEquals(0.0, riddersSolver0.getMax(), 0.01);
      assertEquals(1.0E-15, riddersSolver0.getFunctionValueAccuracy(), 0.01);
      assertEquals(0.0, riddersSolver0.getStartValue(), 0.01);
      assertNotNull(riddersSolver0);
      
      int int0 = eulerIntegrator0.getMaxEvaluations();
      assertEquals(Double.NaN, eulerIntegrator0.getCurrentStepStart(), 0.01);
      assertEquals(Double.NaN, eulerIntegrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals("Euler", eulerIntegrator0.getName());
      assertEquals(Integer.MAX_VALUE, int0);
      
      int int1 = eulerIntegrator0.getEvaluations();
      assertEquals(Double.NaN, eulerIntegrator0.getCurrentStepStart(), 0.01);
      assertEquals(Double.NaN, eulerIntegrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals("Euler", eulerIntegrator0.getName());
      assertFalse(int1 == int0);
      assertEquals(0, int1);
      
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      assertEquals(0, firstOrderConverter0.getDimension());
      assertNotNull(firstOrderConverter0);
      
      ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter0);
      assertEquals(0, firstOrderConverter0.getDimension());
      assertEquals(Double.NaN, expandableStatefulODE0.getTime(), 0.01);
      assertNotNull(expandableStatefulODE0);
      
//      try { 
        eulerIntegrator0.integrate(expandableStatefulODE0, (-4366.407765233));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // number of iterations=1,599, maximum iterations=1,599, initial=\uFFFD, lower bound=\uFFFD, upper bound=\uFFFD, final a value=\uFFFD, final b value=\uFFFD, f(a)=-1,568.317, f(b)=-375.558
//         //
//         verifyException("org.apache.commons.math3.analysis.solvers.UnivariateSolverUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      double double0 = (-277.258089722478);
      EulerIntegrator eulerIntegrator0 = new EulerIntegrator((-277.258089722478));
      assertEquals(Double.NaN, eulerIntegrator0.getCurrentStepStart(), 0.01);
      assertEquals("Euler", eulerIntegrator0.getName());
      assertEquals(Double.NaN, eulerIntegrator0.getCurrentSignedStepsize(), 0.01);
      assertNotNull(eulerIntegrator0);
      
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      doReturn((-2286.42575766), 1.7534012237555307E-252).when(eventHandler0).g(anyDouble() , any(double[].class));
      double double1 = (-1560.55668);
      EventHandler eventHandler1 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      doReturn((-277.258089722478), (-277.258089722478)).when(eventHandler1).g(anyDouble() , any(double[].class));
      MullerSolver2 mullerSolver2_0 = new MullerSolver2();
      assertEquals(1.0E-6, mullerSolver2_0.getAbsoluteAccuracy(), 0.01);
      assertEquals(1.0E-14, mullerSolver2_0.getRelativeAccuracy(), 0.01);
      assertEquals(0.0, mullerSolver2_0.getMax(), 0.01);
      assertEquals(1.0E-15, mullerSolver2_0.getFunctionValueAccuracy(), 0.01);
      assertEquals(0.0, mullerSolver2_0.getMin(), 0.01);
      assertEquals(0.0, mullerSolver2_0.getStartValue(), 0.01);
      assertNotNull(mullerSolver2_0);
      
      eulerIntegrator0.addEventHandler(eventHandler1, 0.0, (-1560.55668), (-2481), (UnivariateSolver) mullerSolver2_0);
      assertEquals(Double.NaN, eulerIntegrator0.getCurrentStepStart(), 0.01);
      assertEquals("Euler", eulerIntegrator0.getName());
      assertEquals(Double.NaN, eulerIntegrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals(1.0E-6, mullerSolver2_0.getAbsoluteAccuracy(), 0.01);
      assertEquals(1.0E-14, mullerSolver2_0.getRelativeAccuracy(), 0.01);
      assertEquals(0.0, mullerSolver2_0.getMax(), 0.01);
      assertEquals(1.0E-15, mullerSolver2_0.getFunctionValueAccuracy(), 0.01);
      assertEquals(0.0, mullerSolver2_0.getMin(), 0.01);
      assertEquals(0.0, mullerSolver2_0.getStartValue(), 0.01);
      
      int int0 = 0;
      MullerSolver2 mullerSolver2_1 = new MullerSolver2(1208.666);
      assertEquals(0.0, mullerSolver2_1.getMax(), 0.01);
      assertEquals(1.0E-14, mullerSolver2_1.getRelativeAccuracy(), 0.01);
      assertEquals(1208.666, mullerSolver2_1.getAbsoluteAccuracy(), 0.01);
      assertEquals(0.0, mullerSolver2_1.getMin(), 0.01);
      assertEquals(1.0E-15, mullerSolver2_1.getFunctionValueAccuracy(), 0.01);
      assertEquals(0.0, mullerSolver2_1.getStartValue(), 0.01);
      assertFalse(mullerSolver2_1.equals((Object)mullerSolver2_0));
      assertNotNull(mullerSolver2_1);
      
      eulerIntegrator0.addEventHandler(eventHandler0, (-277.258089722478), (-1560.55668), 0, (UnivariateSolver) mullerSolver2_1);
      assertNotSame(mullerSolver2_1, mullerSolver2_0);
      assertEquals(Double.NaN, eulerIntegrator0.getCurrentStepStart(), 0.01);
      assertEquals("Euler", eulerIntegrator0.getName());
      assertEquals(Double.NaN, eulerIntegrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals(0.0, mullerSolver2_1.getMax(), 0.01);
      assertEquals(1.0E-14, mullerSolver2_1.getRelativeAccuracy(), 0.01);
      assertEquals(1208.666, mullerSolver2_1.getAbsoluteAccuracy(), 0.01);
      assertEquals(0.0, mullerSolver2_1.getMin(), 0.01);
      assertEquals(1.0E-15, mullerSolver2_1.getFunctionValueAccuracy(), 0.01);
      assertEquals(0.0, mullerSolver2_1.getStartValue(), 0.01);
      assertFalse(mullerSolver2_1.equals((Object)mullerSolver2_0));
      
      int int1 = eulerIntegrator0.getMaxEvaluations();
      assertEquals(Double.NaN, eulerIntegrator0.getCurrentStepStart(), 0.01);
      assertEquals("Euler", eulerIntegrator0.getName());
      assertEquals(Double.NaN, eulerIntegrator0.getCurrentSignedStepsize(), 0.01);
      assertFalse(int1 == int0);
      assertEquals(Integer.MAX_VALUE, int1);
      
      int int2 = eulerIntegrator0.getEvaluations();
      assertEquals(Double.NaN, eulerIntegrator0.getCurrentStepStart(), 0.01);
      assertEquals("Euler", eulerIntegrator0.getName());
      assertEquals(Double.NaN, eulerIntegrator0.getCurrentSignedStepsize(), 0.01);
      assertFalse(int2 == int1);
      assertTrue(int2 == int0);
      assertEquals(0, int2);
      
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      assertEquals(0, firstOrderConverter0.getDimension());
      assertNotNull(firstOrderConverter0);
      
      ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter0);
      assertEquals(0, firstOrderConverter0.getDimension());
      assertEquals(Double.NaN, expandableStatefulODE0.getTime(), 0.01);
      assertNotNull(expandableStatefulODE0);
      
      double double2 = (-825.0);
//      try { 
        eulerIntegrator0.integrate(expandableStatefulODE0, (-825.0));
//        fail("Expecting exception: IllegalStateException");
      
//      } catch(IllegalStateException e) {
//         //
//         // illegal state: maximal count (0) exceeded: evaluations
//         //
//         verifyException("org.apache.commons.math3.analysis.solvers.BaseAbstractUnivariateSolver", e);
//      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      EulerIntegrator eulerIntegrator0 = new EulerIntegrator((-277.258089722478));
      assertEquals(Double.NaN, eulerIntegrator0.getCurrentStepStart(), 0.01);
      assertEquals("Euler", eulerIntegrator0.getName());
      assertEquals(Double.NaN, eulerIntegrator0.getCurrentSignedStepsize(), 0.01);
      assertNotNull(eulerIntegrator0);
      
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(eventHandler0).toString();
      EventHandler eventHandler1 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(eventHandler1).toString();
      MullerSolver2 mullerSolver2_0 = new MullerSolver2();
      assertEquals(1.0E-14, mullerSolver2_0.getRelativeAccuracy(), 0.01);
      assertEquals(1.0E-6, mullerSolver2_0.getAbsoluteAccuracy(), 0.01);
      assertEquals(0.0, mullerSolver2_0.getMin(), 0.01);
      assertEquals(1.0E-15, mullerSolver2_0.getFunctionValueAccuracy(), 0.01);
      assertEquals(0.0, mullerSolver2_0.getStartValue(), 0.01);
      assertEquals(0.0, mullerSolver2_0.getMax(), 0.01);
      assertNotNull(mullerSolver2_0);
      
      eulerIntegrator0.addEventHandler(eventHandler1, 0.0, (-1560.55668), (-2481), (UnivariateSolver) mullerSolver2_0);
      assertEquals(Double.NaN, eulerIntegrator0.getCurrentStepStart(), 0.01);
      assertEquals("Euler", eulerIntegrator0.getName());
      assertEquals(Double.NaN, eulerIntegrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals(1.0E-14, mullerSolver2_0.getRelativeAccuracy(), 0.01);
      assertEquals(1.0E-6, mullerSolver2_0.getAbsoluteAccuracy(), 0.01);
      assertEquals(0.0, mullerSolver2_0.getMin(), 0.01);
      assertEquals(1.0E-15, mullerSolver2_0.getFunctionValueAccuracy(), 0.01);
      assertEquals(0.0, mullerSolver2_0.getStartValue(), 0.01);
      assertEquals(0.0, mullerSolver2_0.getMax(), 0.01);
      
      MullerSolver2 mullerSolver2_1 = new MullerSolver2();
      assertEquals(1.0E-14, mullerSolver2_1.getRelativeAccuracy(), 0.01);
      assertEquals(1.0E-6, mullerSolver2_1.getAbsoluteAccuracy(), 0.01);
      assertEquals(0.0, mullerSolver2_1.getMax(), 0.01);
      assertEquals(1.0E-15, mullerSolver2_1.getFunctionValueAccuracy(), 0.01);
      assertEquals(0.0, mullerSolver2_1.getStartValue(), 0.01);
      assertEquals(0.0, mullerSolver2_1.getMin(), 0.01);
      assertFalse(mullerSolver2_1.equals((Object)mullerSolver2_0));
      assertNotNull(mullerSolver2_1);
      
      eulerIntegrator0.addEventHandler(eventHandler0, (-277.258089722478), (-1560.55668), 0, (UnivariateSolver) mullerSolver2_1);
      assertNotSame(mullerSolver2_1, mullerSolver2_0);
      assertEquals(Double.NaN, eulerIntegrator0.getCurrentStepStart(), 0.01);
      assertEquals("Euler", eulerIntegrator0.getName());
      assertEquals(Double.NaN, eulerIntegrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals(1.0E-14, mullerSolver2_1.getRelativeAccuracy(), 0.01);
      assertEquals(1.0E-6, mullerSolver2_1.getAbsoluteAccuracy(), 0.01);
      assertEquals(0.0, mullerSolver2_1.getMax(), 0.01);
      assertEquals(1.0E-15, mullerSolver2_1.getFunctionValueAccuracy(), 0.01);
      assertEquals(0.0, mullerSolver2_1.getStartValue(), 0.01);
      assertEquals(0.0, mullerSolver2_1.getMin(), 0.01);
      assertFalse(mullerSolver2_1.equals((Object)mullerSolver2_0));
      
      eulerIntegrator0.setMaxEvaluations((-1814));
      assertEquals(Double.NaN, eulerIntegrator0.getCurrentStepStart(), 0.01);
      assertEquals("Euler", eulerIntegrator0.getName());
      assertEquals(Double.NaN, eulerIntegrator0.getCurrentSignedStepsize(), 0.01);
      
      EulerIntegrator eulerIntegrator1 = new EulerIntegrator(5.6843418860808015E-11);
      assertEquals(Double.NaN, eulerIntegrator1.getCurrentStepStart(), 0.01);
      assertEquals("Euler", eulerIntegrator1.getName());
      assertEquals(Double.NaN, eulerIntegrator1.getCurrentSignedStepsize(), 0.01);
      assertFalse(eulerIntegrator1.equals((Object)eulerIntegrator0));
      assertNotNull(eulerIntegrator1);
      
      Collection<StepHandler> collection0 = eulerIntegrator1.getStepHandlers();
      assertNotSame(eulerIntegrator1, eulerIntegrator0);
      assertEquals(Double.NaN, eulerIntegrator1.getCurrentStepStart(), 0.01);
      assertEquals("Euler", eulerIntegrator1.getName());
      assertEquals(Double.NaN, eulerIntegrator1.getCurrentSignedStepsize(), 0.01);
      assertFalse(eulerIntegrator1.equals((Object)eulerIntegrator0));
      assertNotNull(collection0);
      
      Collection<EventHandler> collection1 = eulerIntegrator0.getEventHandlers();
      assertNotSame(eulerIntegrator0, eulerIntegrator1);
      assertEquals(Double.NaN, eulerIntegrator0.getCurrentStepStart(), 0.01);
      assertEquals("Euler", eulerIntegrator0.getName());
      assertEquals(Double.NaN, eulerIntegrator0.getCurrentSignedStepsize(), 0.01);
      assertFalse(eulerIntegrator0.equals((Object)eulerIntegrator1));
      assertTrue(collection1.contains(eventHandler0));
      assertNotNull(collection1);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator(294.82674, 294.82674, (-605.39), 392.4056506);
      assertEquals(294.82674, graggBulirschStoerIntegrator0.getMaxStep(), 0.01);
      assertEquals("Gragg-Bulirsch-Stoer", graggBulirschStoerIntegrator0.getName());
      assertEquals(Double.NaN, graggBulirschStoerIntegrator0.getCurrentStepStart(), 0.01);
      assertEquals(294.82674, graggBulirschStoerIntegrator0.getMinStep(), 0.01);
      assertEquals(294.82674, graggBulirschStoerIntegrator0.getCurrentSignedStepsize(), 0.01);
      assertNotNull(graggBulirschStoerIntegrator0);
      
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      assertEquals(0, firstOrderConverter0.getDimension());
      assertNotNull(firstOrderConverter0);
      
      ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter0);
      assertEquals(0, firstOrderConverter0.getDimension());
      assertEquals(Double.NaN, expandableStatefulODE0.getTime(), 0.01);
      assertNotNull(expandableStatefulODE0);
      
      SecondOrderDifferentialEquations secondOrderDifferentialEquations1 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations1).getDimension();
      FirstOrderConverter firstOrderConverter1 = new FirstOrderConverter(secondOrderDifferentialEquations1);
      assertEquals(0, firstOrderConverter1.getDimension());
      assertFalse(firstOrderConverter1.equals((Object)firstOrderConverter0));
      assertNotNull(firstOrderConverter1);
      
      GillIntegrator gillIntegrator0 = new GillIntegrator(1.7826926708221436);
      assertEquals("Gill", gillIntegrator0.getName());
      assertEquals(Double.NaN, gillIntegrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals(Double.NaN, gillIntegrator0.getCurrentStepStart(), 0.01);
      assertNotNull(gillIntegrator0);
      
      double[] doubleArray0 = new double[0];
      double double0 = gillIntegrator0.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, 1.7826926708221436, doubleArray0, 294.82674, doubleArray0);
      assertNotSame(firstOrderConverter0, firstOrderConverter1);
      assertEquals(0, firstOrderConverter0.getDimension());
      assertEquals("Gill", gillIntegrator0.getName());
      assertEquals(Double.NaN, gillIntegrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals(Double.NaN, gillIntegrator0.getCurrentStepStart(), 0.01);
      assertEquals(0, doubleArray0.length);
      assertFalse(firstOrderConverter0.equals((Object)firstOrderConverter1));
      assertEquals(294.82674, double0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator(0.0, 0.0, Double.NaN, Double.NaN);
      assertEquals(0.0, dormandPrince54Integrator0.getMinStep(), 0.01);
      assertEquals(5, dormandPrince54Integrator0.getOrder());
      assertEquals(0.0, dormandPrince54Integrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals(10.0, dormandPrince54Integrator0.getMaxGrowth(), 0.01);
      assertEquals("Dormand-Prince 5(4)", dormandPrince54Integrator0.getName());
      assertEquals(0.0, dormandPrince54Integrator0.getMaxStep(), 0.01);
      assertEquals(0.9, dormandPrince54Integrator0.getSafety(), 0.01);
      assertEquals(Double.NaN, dormandPrince54Integrator0.getCurrentStepStart(), 0.01);
      assertEquals(0.2, dormandPrince54Integrator0.getMinReduction(), 0.01);
      assertNotNull(dormandPrince54Integrator0);
      
      // Undeclared exception!
//      try { 
        dormandPrince54Integrator0.integrate((ExpandableStatefulODE) null, Double.NaN);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.ode.AbstractIntegrator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      double double0 = 294.82674;
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator(294.82674, 294.82674, (-605.39), 392.4056506);
      assertEquals(Double.NaN, graggBulirschStoerIntegrator0.getCurrentStepStart(), 0.01);
      assertEquals("Gragg-Bulirsch-Stoer", graggBulirschStoerIntegrator0.getName());
      assertEquals(294.82674, graggBulirschStoerIntegrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals(294.82674, graggBulirschStoerIntegrator0.getMinStep(), 0.01);
      assertEquals(294.82674, graggBulirschStoerIntegrator0.getMaxStep(), 0.01);
      assertNotNull(graggBulirschStoerIntegrator0);
      
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      assertEquals(0, firstOrderConverter0.getDimension());
      assertNotNull(firstOrderConverter0);
      
      double double1 = (-1690.9);
      GillIntegrator gillIntegrator0 = new GillIntegrator((-1690.9));
      assertEquals("Gill", gillIntegrator0.getName());
      assertEquals(Double.NaN, gillIntegrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals(Double.NaN, gillIntegrator0.getCurrentStepStart(), 0.01);
      assertNotNull(gillIntegrator0);
      
      double double2 = (-962.29);
      double[] doubleArray0 = new double[2];
      double[] doubleArray1 = new double[0];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
//      try { 
        gillIntegrator0.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, 7.663353127378024E218, doubleArray0, 2044.9028895271504, doubleArray1);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // 2 != 0
//         //
//         verifyException("org.apache.commons.math3.ode.AbstractIntegrator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (-3.141592653589793);
      double double0 = 3031.054278711996;
      doubleArray0[1] = 3031.054278711996;
      doubleArray0[2] = (-3.141592653589793);
      doubleArray0[3] = 1000.0;
      doubleArray0[4] = (-3.141592653589793);
      doubleArray0[5] = (-3.141592653589793);
      doubleArray0[6] = (-3.141592653589793);
      DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator((-3.141592653589793), (-3.141592653589793), doubleArray0, doubleArray0);
      assertEquals(0.9, dormandPrince853Integrator0.getSafety(), 0.01);
      assertEquals(8, dormandPrince853Integrator0.getOrder());
      assertEquals("Dormand-Prince 8 (5, 3)", dormandPrince853Integrator0.getName());
      assertEquals(3.141592653589793, dormandPrince853Integrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals(3.141592653589793, dormandPrince853Integrator0.getMinStep(), 0.01);
      assertEquals(10.0, dormandPrince853Integrator0.getMaxGrowth(), 0.01);
      assertEquals(0.2, dormandPrince853Integrator0.getMinReduction(), 0.01);
      assertEquals(3.141592653589793, dormandPrince853Integrator0.getMaxStep(), 0.01);
      assertEquals(Double.NaN, dormandPrince853Integrator0.getCurrentStepStart(), 0.01);
      assertEquals(7, doubleArray0.length);
      assertArrayEquals(new double[] {(-3.141592653589793), 3031.054278711996, (-3.141592653589793), 1000.0, (-3.141592653589793), (-3.141592653589793), (-3.141592653589793)}, doubleArray0, 0.01);
      assertNotNull(dormandPrince853Integrator0);
      
      double double1 = (-1.0);
      DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator((-3.141592653589793), (-1.0), doubleArray0, doubleArray0);
      assertEquals(10.0, dormandPrince54Integrator0.getMaxGrowth(), 0.01);
      assertEquals(Double.NaN, dormandPrince54Integrator0.getCurrentStepStart(), 0.01);
      assertEquals(0.9, dormandPrince54Integrator0.getSafety(), 0.01);
      assertEquals(5, dormandPrince54Integrator0.getOrder());
      assertEquals(1.0, dormandPrince54Integrator0.getMaxStep(), 0.01);
      assertEquals(0.2, dormandPrince54Integrator0.getMinReduction(), 0.01);
      assertEquals(1.7724538509055159, dormandPrince54Integrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals(3.141592653589793, dormandPrince54Integrator0.getMinStep(), 0.01);
      assertEquals("Dormand-Prince 5(4)", dormandPrince54Integrator0.getName());
      assertEquals(7, doubleArray0.length);
      assertArrayEquals(new double[] {(-3.141592653589793), 3031.054278711996, (-3.141592653589793), 1000.0, (-3.141592653589793), (-3.141592653589793), (-3.141592653589793)}, doubleArray0, 0.01);
      assertNotNull(dormandPrince54Integrator0);
      
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(105).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      assertEquals(210, firstOrderConverter0.getDimension());
      assertNotNull(firstOrderConverter0);
      
      double double2 = (-10.757575757575758);
//      try { 
        dormandPrince54Integrator0.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, (-10.757575757575758), doubleArray0, 271.0085453417192, doubleArray0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // 7 != 210
//         //
//         verifyException("org.apache.commons.math3.ode.AbstractIntegrator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = Double.NaN;
      doubleArray0[1] = Double.NaN;
      doubleArray0[2] = Double.NaN;
      doubleArray0[3] = Double.NaN;
      doubleArray0[4] = Double.NaN;
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator(Double.NaN, Double.NaN, doubleArray0, doubleArray0);
      assertEquals(Double.NaN, graggBulirschStoerIntegrator0.getMaxStep(), 0.01);
      assertEquals(Double.NaN, graggBulirschStoerIntegrator0.getMinStep(), 0.01);
      assertEquals(Double.NaN, graggBulirschStoerIntegrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals("Gragg-Bulirsch-Stoer", graggBulirschStoerIntegrator0.getName());
      assertEquals(Double.NaN, graggBulirschStoerIntegrator0.getCurrentStepStart(), 0.01);
      assertEquals(5, doubleArray0.length);
      assertArrayEquals(new double[] {Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN}, doubleArray0, 0.01);
      assertNotNull(graggBulirschStoerIntegrator0);
      
      graggBulirschStoerIntegrator0.setControlFactors(Double.NaN, Double.NaN, 4106.657926870857, 0.0);
      assertEquals(Double.NaN, graggBulirschStoerIntegrator0.getMaxStep(), 0.01);
      assertEquals(Double.NaN, graggBulirschStoerIntegrator0.getMinStep(), 0.01);
      assertEquals(Double.NaN, graggBulirschStoerIntegrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals("Gragg-Bulirsch-Stoer", graggBulirschStoerIntegrator0.getName());
      assertEquals(Double.NaN, graggBulirschStoerIntegrator0.getCurrentStepStart(), 0.01);
      assertEquals(5, doubleArray0.length);
      assertArrayEquals(new double[] {Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN}, doubleArray0, 0.01);
      
      String string0 = graggBulirschStoerIntegrator0.getName();
      assertEquals(Double.NaN, graggBulirschStoerIntegrator0.getMaxStep(), 0.01);
      assertEquals(Double.NaN, graggBulirschStoerIntegrator0.getMinStep(), 0.01);
      assertEquals(Double.NaN, graggBulirschStoerIntegrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals("Gragg-Bulirsch-Stoer", graggBulirschStoerIntegrator0.getName());
      assertEquals(Double.NaN, graggBulirschStoerIntegrator0.getCurrentStepStart(), 0.01);
      assertEquals(5, doubleArray0.length);
      assertEquals("Gragg-Bulirsch-Stoer", string0);
      assertArrayEquals(new double[] {Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN}, doubleArray0, 0.01);
      assertNotNull(string0);
      
      graggBulirschStoerIntegrator0.setMaxEvaluations(1600);
      assertEquals(Double.NaN, graggBulirschStoerIntegrator0.getMaxStep(), 0.01);
      assertEquals(Double.NaN, graggBulirschStoerIntegrator0.getMinStep(), 0.01);
      assertEquals(Double.NaN, graggBulirschStoerIntegrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals("Gragg-Bulirsch-Stoer", graggBulirschStoerIntegrator0.getName());
      assertEquals(Double.NaN, graggBulirschStoerIntegrator0.getCurrentStepStart(), 0.01);
      assertEquals(5, doubleArray0.length);
      assertArrayEquals(new double[] {Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator((-871.47581), (-871.47581), 1000.0, 1000.0);
      assertEquals(871.47581, dormandPrince853Integrator0.getMinStep(), 0.01);
      assertEquals(871.47581, dormandPrince853Integrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals(10.0, dormandPrince853Integrator0.getMaxGrowth(), 0.01);
      assertEquals(871.47581, dormandPrince853Integrator0.getMaxStep(), 0.01);
      assertEquals(Double.NaN, dormandPrince853Integrator0.getCurrentStepStart(), 0.01);
      assertEquals(8, dormandPrince853Integrator0.getOrder());
      assertEquals("Dormand-Prince 8 (5, 3)", dormandPrince853Integrator0.getName());
      assertEquals(0.9, dormandPrince853Integrator0.getSafety(), 0.01);
      assertEquals(0.2, dormandPrince853Integrator0.getMinReduction(), 0.01);
      assertNotNull(dormandPrince853Integrator0);
      
      double double0 = dormandPrince853Integrator0.getCurrentSignedStepsize();
      assertEquals(871.47581, dormandPrince853Integrator0.getMinStep(), 0.01);
      assertEquals(871.47581, dormandPrince853Integrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals(10.0, dormandPrince853Integrator0.getMaxGrowth(), 0.01);
      assertEquals(871.47581, dormandPrince853Integrator0.getMaxStep(), 0.01);
      assertEquals(Double.NaN, dormandPrince853Integrator0.getCurrentStepStart(), 0.01);
      assertEquals(8, dormandPrince853Integrator0.getOrder());
      assertEquals("Dormand-Prince 8 (5, 3)", dormandPrince853Integrator0.getName());
      assertEquals(0.9, dormandPrince853Integrator0.getSafety(), 0.01);
      assertEquals(0.2, dormandPrince853Integrator0.getMinReduction(), 0.01);
      assertEquals(871.47581, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator(0.0, 0.0, 0.0, (-1025.710598));
      assertEquals("Gragg-Bulirsch-Stoer", graggBulirschStoerIntegrator0.getName());
      assertEquals(0.0, graggBulirschStoerIntegrator0.getMaxStep(), 0.01);
      assertEquals(0.0, graggBulirschStoerIntegrator0.getMinStep(), 0.01);
      assertEquals(Double.NaN, graggBulirschStoerIntegrator0.getCurrentStepStart(), 0.01);
      assertEquals(0.0, graggBulirschStoerIntegrator0.getCurrentSignedStepsize(), 0.01);
      assertNotNull(graggBulirschStoerIntegrator0);
      
      double double0 = graggBulirschStoerIntegrator0.getCurrentSignedStepsize();
      assertEquals("Gragg-Bulirsch-Stoer", graggBulirschStoerIntegrator0.getName());
      assertEquals(0.0, graggBulirschStoerIntegrator0.getMaxStep(), 0.01);
      assertEquals(0.0, graggBulirschStoerIntegrator0.getMinStep(), 0.01);
      assertEquals(Double.NaN, graggBulirschStoerIntegrator0.getCurrentStepStart(), 0.01);
      assertEquals(0.0, graggBulirschStoerIntegrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals(0.0, double0, 0.01);
      
      int int0 = 0;
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = (-673.1909);
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 0.0;
      doubleArray0[5] = 0.0;
      doubleArray0[6] = (-673.1909);
      doubleArray0[7] = 0.0;
      AdamsMoultonIntegrator adamsMoultonIntegrator0 = null;
//      try {
        adamsMoultonIntegrator0 = new AdamsMoultonIntegrator(0, (-673.1909), 3718.2753069000046, doubleArray0, doubleArray0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // matrix must have at least one row
//         //
//         verifyException("org.apache.commons.math3.linear.AbstractFieldMatrix", e);
//      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      double double0 = 0.0;
      EulerIntegrator eulerIntegrator0 = new EulerIntegrator(0.0);
      assertEquals("Euler", eulerIntegrator0.getName());
      assertEquals(Double.NaN, eulerIntegrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals(Double.NaN, eulerIntegrator0.getCurrentStepStart(), 0.01);
      assertNotNull(eulerIntegrator0);
      
      eulerIntegrator0.clearStepHandlers();
      assertEquals("Euler", eulerIntegrator0.getName());
      assertEquals(Double.NaN, eulerIntegrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals(Double.NaN, eulerIntegrator0.getCurrentStepStart(), 0.01);
      
      double double1 = (-906.3);
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator(1.0, (-906.3), 1.0, 0.0);
      assertEquals(906.3, graggBulirschStoerIntegrator0.getMaxStep(), 0.01);
      assertEquals("Gragg-Bulirsch-Stoer", graggBulirschStoerIntegrator0.getName());
      assertEquals(Double.NaN, graggBulirschStoerIntegrator0.getCurrentStepStart(), 0.01);
      assertEquals(1.0, graggBulirschStoerIntegrator0.getMinStep(), 0.01);
      assertEquals(30.104816890325043, graggBulirschStoerIntegrator0.getCurrentSignedStepsize(), 0.01);
      assertNotNull(graggBulirschStoerIntegrator0);
      
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      assertEquals(0, firstOrderConverter0.getDimension());
      assertNotNull(firstOrderConverter0);
      
      ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter0);
      assertEquals(0, firstOrderConverter0.getDimension());
      assertEquals(Double.NaN, expandableStatefulODE0.getTime(), 0.01);
      assertNotNull(expandableStatefulODE0);
      
      double double2 = 0.0;
      // Undeclared exception!
      graggBulirschStoerIntegrator0.integrate(expandableStatefulODE0, 0.0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator(294.82674, 294.82674, (-605.39), 392.4056506);
      assertEquals(294.82674, graggBulirschStoerIntegrator0.getMaxStep(), 0.01);
      assertEquals("Gragg-Bulirsch-Stoer", graggBulirschStoerIntegrator0.getName());
      assertEquals(Double.NaN, graggBulirschStoerIntegrator0.getCurrentStepStart(), 0.01);
      assertEquals(294.82674, graggBulirschStoerIntegrator0.getMinStep(), 0.01);
      assertEquals(294.82674, graggBulirschStoerIntegrator0.getCurrentSignedStepsize(), 0.01);
      assertNotNull(graggBulirschStoerIntegrator0);
      
      DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator(1.0, 294.82674, 294.82674, 294.82674);
      assertEquals(0.2, dormandPrince853Integrator0.getMinReduction(), 0.01);
      assertEquals(0.9, dormandPrince853Integrator0.getSafety(), 0.01);
      assertEquals("Dormand-Prince 8 (5, 3)", dormandPrince853Integrator0.getName());
      assertEquals(Double.NaN, dormandPrince853Integrator0.getCurrentStepStart(), 0.01);
      assertEquals(1.0, dormandPrince853Integrator0.getMinStep(), 0.01);
      assertEquals(294.82674, dormandPrince853Integrator0.getMaxStep(), 0.01);
      assertEquals(17.170519502915454, dormandPrince853Integrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals(8, dormandPrince853Integrator0.getOrder());
      assertEquals(10.0, dormandPrince853Integrator0.getMaxGrowth(), 0.01);
      assertNotNull(dormandPrince853Integrator0);
      
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 1.0;
      doubleArray0[1] = 1.0;
      doubleArray0[2] = 1.0;
      doubleArray0[3] = 1.0;
      // Undeclared exception!
//      try { 
        dormandPrince853Integrator0.integrate((FirstOrderDifferentialEquations) null, 3497.72984592044, doubleArray0, (-1.0), doubleArray0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.ode.AbstractIntegrator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator(0.0, 0.0, (-0.022459085953066622), 0.0);
      assertEquals(0.2, dormandPrince853Integrator0.getMinReduction(), 0.01);
      assertEquals(0.0, dormandPrince853Integrator0.getMinStep(), 0.01);
      assertEquals(0.0, dormandPrince853Integrator0.getMaxStep(), 0.01);
      assertEquals(Double.NaN, dormandPrince853Integrator0.getCurrentStepStart(), 0.01);
      assertEquals(0.9, dormandPrince853Integrator0.getSafety(), 0.01);
      assertEquals(8, dormandPrince853Integrator0.getOrder());
      assertEquals("Dormand-Prince 8 (5, 3)", dormandPrince853Integrator0.getName());
      assertEquals(0.0, dormandPrince853Integrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals(10.0, dormandPrince853Integrator0.getMaxGrowth(), 0.01);
      assertNotNull(dormandPrince853Integrator0);
      
      dormandPrince853Integrator0.setMinReduction(0.0);
      assertEquals(0.0, dormandPrince853Integrator0.getMinStep(), 0.01);
      assertEquals(0.0, dormandPrince853Integrator0.getMinReduction(), 0.01);
      assertEquals(0.0, dormandPrince853Integrator0.getMaxStep(), 0.01);
      assertEquals(Double.NaN, dormandPrince853Integrator0.getCurrentStepStart(), 0.01);
      assertEquals(0.9, dormandPrince853Integrator0.getSafety(), 0.01);
      assertEquals(8, dormandPrince853Integrator0.getOrder());
      assertEquals("Dormand-Prince 8 (5, 3)", dormandPrince853Integrator0.getName());
      assertEquals(0.0, dormandPrince853Integrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals(10.0, dormandPrince853Integrator0.getMaxGrowth(), 0.01);
      
      Collection<StepHandler> collection0 = dormandPrince853Integrator0.getStepHandlers();
      assertEquals(0.0, dormandPrince853Integrator0.getMinStep(), 0.01);
      assertEquals(0.0, dormandPrince853Integrator0.getMinReduction(), 0.01);
      assertEquals(0.0, dormandPrince853Integrator0.getMaxStep(), 0.01);
      assertEquals(Double.NaN, dormandPrince853Integrator0.getCurrentStepStart(), 0.01);
      assertEquals(0.9, dormandPrince853Integrator0.getSafety(), 0.01);
      assertEquals(8, dormandPrince853Integrator0.getOrder());
      assertEquals("Dormand-Prince 8 (5, 3)", dormandPrince853Integrator0.getName());
      assertEquals(0.0, dormandPrince853Integrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals(10.0, dormandPrince853Integrator0.getMaxGrowth(), 0.01);
      assertNotNull(collection0);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 1463.373010778692;
      doubleArray0[1] = (-0.022459085953066622);
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator(2283.3500250715, 0.0, doubleArray0, doubleArray0);
      assertEquals(2283.3500250715, graggBulirschStoerIntegrator0.getMinStep(), 0.01);
      assertEquals(0.0, graggBulirschStoerIntegrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals(0.0, graggBulirschStoerIntegrator0.getMaxStep(), 0.01);
      assertEquals("Gragg-Bulirsch-Stoer", graggBulirschStoerIntegrator0.getName());
      assertEquals(Double.NaN, graggBulirschStoerIntegrator0.getCurrentStepStart(), 0.01);
      assertEquals(2, doubleArray0.length);
      assertArrayEquals(new double[] {1463.373010778692, (-0.022459085953066622)}, doubleArray0, 0.01);
      assertNotNull(graggBulirschStoerIntegrator0);
      
      double[] doubleArray1 = new double[2];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = 2298.68;
      doubleArray1[1] = (-149.72683625798564);
      graggBulirschStoerIntegrator0.setStepSizeControl((-149.72683625798564), 2298.68, doubleArray1, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(149.72683625798564, graggBulirschStoerIntegrator0.getMinStep(), 0.01);
      assertEquals(0.0, graggBulirschStoerIntegrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals(2298.68, graggBulirschStoerIntegrator0.getMaxStep(), 0.01);
      assertEquals("Gragg-Bulirsch-Stoer", graggBulirschStoerIntegrator0.getName());
      assertEquals(Double.NaN, graggBulirschStoerIntegrator0.getCurrentStepStart(), 0.01);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {1463.373010778692, (-0.022459085953066622)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {2298.68, (-149.72683625798564)}, doubleArray1, 0.01);
      
      graggBulirschStoerIntegrator0.clearStepHandlers();
      assertNotSame(doubleArray0, doubleArray1);
      assertEquals(149.72683625798564, graggBulirschStoerIntegrator0.getMinStep(), 0.01);
      assertEquals(0.0, graggBulirschStoerIntegrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals(2298.68, graggBulirschStoerIntegrator0.getMaxStep(), 0.01);
      assertEquals("Gragg-Bulirsch-Stoer", graggBulirschStoerIntegrator0.getName());
      assertEquals(Double.NaN, graggBulirschStoerIntegrator0.getCurrentStepStart(), 0.01);
      assertEquals(2, doubleArray0.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertArrayEquals(new double[] {1463.373010778692, (-0.022459085953066622)}, doubleArray0, 0.01);
      
      int int0 = graggBulirschStoerIntegrator0.getEvaluations();
      assertNotSame(doubleArray0, doubleArray1);
      assertEquals(149.72683625798564, graggBulirschStoerIntegrator0.getMinStep(), 0.01);
      assertEquals(0.0, graggBulirschStoerIntegrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals(2298.68, graggBulirschStoerIntegrator0.getMaxStep(), 0.01);
      assertEquals("Gragg-Bulirsch-Stoer", graggBulirschStoerIntegrator0.getName());
      assertEquals(Double.NaN, graggBulirschStoerIntegrator0.getCurrentStepStart(), 0.01);
      assertEquals(2, doubleArray0.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertEquals(0, int0);
      assertArrayEquals(new double[] {1463.373010778692, (-0.022459085953066622)}, doubleArray0, 0.01);
      
      graggBulirschStoerIntegrator0.setControlFactors(0.0, 0.0, 1463.373010778692, 2283.3500250715);
      assertNotSame(doubleArray0, doubleArray1);
      assertEquals(149.72683625798564, graggBulirschStoerIntegrator0.getMinStep(), 0.01);
      assertEquals(0.0, graggBulirschStoerIntegrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals(2298.68, graggBulirschStoerIntegrator0.getMaxStep(), 0.01);
      assertEquals("Gragg-Bulirsch-Stoer", graggBulirschStoerIntegrator0.getName());
      assertEquals(Double.NaN, graggBulirschStoerIntegrator0.getCurrentStepStart(), 0.01);
      assertEquals(2, doubleArray0.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertArrayEquals(new double[] {1463.373010778692, (-0.022459085953066622)}, doubleArray0, 0.01);
      
      DormandPrince54Integrator dormandPrince54Integrator0 = null;
//      try {
        dormandPrince54Integrator0 = new DormandPrince54Integrator((-149.72683625798564), (-0.022459085953066622), (double[]) null, doubleArray0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.ode.nonstiff.AdaptiveStepsizeIntegrator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      double double0 = (-277.258089722478);
      EulerIntegrator eulerIntegrator0 = new EulerIntegrator((-277.258089722478));
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(eventHandler0).g(anyDouble() , any(double[].class));
      double double1 = (-1560.55668);
      EventHandler eventHandler1 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(eventHandler1).g(anyDouble() , any(double[].class));
      MullerSolver2 mullerSolver2_0 = new MullerSolver2();
      eulerIntegrator0.addEventHandler(eventHandler1, 0.0, (-1560.55668), (-2481), (UnivariateSolver) mullerSolver2_0);
      int int0 = 0;
      MullerSolver2 mullerSolver2_1 = new MullerSolver2(1208.666);
      eulerIntegrator0.addEventHandler(eventHandler0, (-277.258089722478), (-1560.55668), 0, (UnivariateSolver) mullerSolver2_1);
      eulerIntegrator0.getMaxEvaluations();
      eulerIntegrator0.getEvaluations();
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter0);
      double double2 = (-825.0);
      // Undeclared exception!
      eulerIntegrator0.integrate(expandableStatefulODE0, (-825.0));
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator(0.0, 0.0, Double.NaN, Double.NaN);
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator(11.04426, (-2795.615721039), Double.NaN, 0.0);
      StepNormalizerMode stepNormalizerMode0 = StepNormalizerMode.INCREMENT;
      StepNormalizer stepNormalizer0 = new StepNormalizer(293.04404732917783, (FixedStepHandler) null, stepNormalizerMode0);
      graggBulirschStoerIntegrator0.addStepHandler(stepNormalizer0);
      assertEquals(Double.NaN, graggBulirschStoerIntegrator0.getCurrentStepStart(), 0.01);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = Double.NaN;
      doubleArray0[1] = Double.NaN;
      DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator(Double.NaN, Double.NaN, doubleArray0, doubleArray0);
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      dormandPrince54Integrator0.getEventHandlers();
      int int0 = 0;
      FixedStepHandler fixedStepHandler0 = mock(FixedStepHandler.class, new ViolatedAssumptionAnswer());
      StepNormalizer stepNormalizer0 = new StepNormalizer(0.0, fixedStepHandler0);
      dormandPrince54Integrator0.addStepHandler(stepNormalizer0);
      dormandPrince54Integrator0.addEventHandler(eventHandler0, 0.0, Double.NaN, 0);
      // Undeclared exception!
//      try { 
        dormandPrince54Integrator0.computeDerivatives(0.0, doubleArray0, doubleArray0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      ClassicalRungeKuttaIntegrator classicalRungeKuttaIntegrator0 = new ClassicalRungeKuttaIntegrator(2.9475147891527724);
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      classicalRungeKuttaIntegrator0.addEventHandler(eventHandler0, 2.9475147891527724, 0.0, 2655);
      DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator(2568.348463075, 2.9475147891527724, 0.0, 3062.1516224112);
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 2568.348463075;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 4630.2;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 2.9475147891527724;
      doubleArray0[5] = 3062.1516224112;
      double[] doubleArray1 = new double[7];
      doubleArray1[0] = (double) 2655;
      doubleArray1[1] = 3062.1516224112;
      doubleArray1[2] = (-0.022355307863886294);
      doubleArray1[3] = (-1134.4081977684298);
      doubleArray1[4] = 2568.348463075;
      doubleArray1[5] = 0.0;
      doubleArray1[6] = 0.30545274794128174;
      // Undeclared exception!
//      try { 
        dormandPrince54Integrator0.initializeStep(true, 2655, doubleArray0, 0.30545274794128174, doubleArray1, doubleArray0, doubleArray1, doubleArray0);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 6
//         //
//         verifyException("org.apache.commons.math3.ode.nonstiff.AdaptiveStepsizeIntegrator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator(1145.049984491, 0.022651792198360825, 3193.0, (-2075.9520484060063));
      int int0 = 107;
      highamHall54Integrator0.setInitialStepSize((-3372.851));
      double double0 = (-861.0);
      highamHall54Integrator0.setSafety((-861.0));
      highamHall54Integrator0.setSafety((-2075.9520484060063));
      double double1 = 0.0;
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 0.022651792198360825;
      highamHall54Integrator0.setSafety(Double.NaN);
      doubleArray0[1] = 1145.049984491;
      highamHall54Integrator0.setStepSizeControl(2973.873804, (-3372.851), (-2075.9520484060063), 0.022651792198360825);
      doubleArray0[2] = (double) 107;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 3193.0;
      double double2 = (-2914.7823736);
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
//      try { 
        highamHall54Integrator0.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, 0.0, doubleArray0, 594.04892993822, doubleArray0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // 5 != 0
//         //
//         verifyException("org.apache.commons.math3.ode.AbstractIntegrator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      GillIntegrator gillIntegrator0 = new GillIntegrator((-1.0));
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      gillIntegrator0.setMaxEvaluations(0);
      MullerSolver mullerSolver0 = new MullerSolver(8.0, (-0.35032884874997366));
      mullerSolver0.getEvaluations();
      gillIntegrator0.addEventHandler(eventHandler0, (-1051.79641), (-1051.79641), 0, (UnivariateSolver) mullerSolver0);
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (-1051.79641);
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = 8.0;
      doubleArray0[3] = (double) 0;
      doubleArray0[4] = (-1.0);
//      try { 
        gillIntegrator0.computeDerivatives((-1051.79641), doubleArray0, doubleArray0);
//        fail("Expecting exception: IllegalStateException");
      
//      } catch(IllegalStateException e) {
//         //
//         // illegal state: maximal count (0) exceeded
//         //
//         verifyException("org.apache.commons.math3.util.Incrementor$1", e);
//      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator((-871.47581), (-316.2813663436788), 1000.0, 1000.0);
      dormandPrince853Integrator0.setMaxEvaluations(307);
      assertEquals(871.47581, dormandPrince853Integrator0.getMinStep(), 0.01);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      double double0 = 392.4056506;
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator(294.82674, 294.82674, (-605.39), 392.4056506);
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter0);
      // Undeclared exception!
      graggBulirschStoerIntegrator0.integrate(expandableStatefulODE0, (-1872.0));
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      EulerIntegrator eulerIntegrator0 = new EulerIntegrator(0.0);
      eulerIntegrator0.setMaxEvaluations(0);
      eulerIntegrator0.getStepHandlers();
      eulerIntegrator0.getEventHandlers();
      assertEquals(Double.NaN, eulerIntegrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals(Double.NaN, eulerIntegrator0.getCurrentStepStart(), 0.01);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator((-855.0365892690472), (-855.0365892690472), 1000.0, 1000.0);
      EulerIntegrator eulerIntegrator0 = new EulerIntegrator(1000.0);
      dormandPrince853Integrator0.getEvaluations();
      eulerIntegrator0.clearEventHandlers();
      eulerIntegrator0.setMaxEvaluations(1);
      assertEquals(Double.NaN, eulerIntegrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals(Double.NaN, eulerIntegrator0.getCurrentStepStart(), 0.01);
      
      double double0 = dormandPrince853Integrator0.getCurrentSignedStepsize();
      assertEquals(855.0365892690472, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      GillIntegrator gillIntegrator0 = new GillIntegrator(0.0);
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 0.0;
      doubleArray0[5] = 0.0;
      doubleArray0[6] = 0.0;
      doubleArray0[7] = 0.0;
      // Undeclared exception!
//      try { 
        gillIntegrator0.computeDerivatives(0.0, doubleArray0, doubleArray0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator(502.571, 502.571, 1.0, (-883.5));
      int int0 = graggBulirschStoerIntegrator0.getMaxEvaluations();
      assertEquals(Integer.MAX_VALUE, int0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator((-11.595793324188385), 3106.3348144807046, Double.NaN, 475.74438801);
      BracketingNthOrderBrentSolver bracketingNthOrderBrentSolver0 = new BracketingNthOrderBrentSolver();
      graggBulirschStoerIntegrator0.addEventHandler((EventHandler) null, (-11.595793324188385), 1541.8482, 2114, (UnivariateSolver) bracketingNthOrderBrentSolver0);
      assertEquals(5, bracketingNthOrderBrentSolver0.getMaximalOrder());
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      double double0 = 2003.8563;
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 2003.8563;
      doubleArray0[1] = 2003.8563;
      doubleArray0[2] = 2003.8563;
      doubleArray0[3] = 2003.8563;
      doubleArray0[4] = 2003.8563;
      doubleArray0[5] = 2003.8563;
      doubleArray0[6] = 2003.8563;
      doubleArray0[7] = 2003.8563;
      DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator(2003.8563, 2003.8563, doubleArray0, doubleArray0);
      dormandPrince54Integrator0.getMaxEvaluations();
      dormandPrince54Integrator0.clearEventHandlers();
      int int0 = 4277;
      double double1 = (-436.341574465779);
      IllinoisSolver illinoisSolver0 = new IllinoisSolver((-436.341574465779), 2003.8563);
      dormandPrince54Integrator0.addEventHandler((EventHandler) null, 2003.8563, (-3.141592653589793), 4277, (UnivariateSolver) illinoisSolver0);
      dormandPrince54Integrator0.getEventHandlers();
      // Undeclared exception!
//      try { 
        dormandPrince54Integrator0.computeDerivatives(2003.8563, doubleArray0, doubleArray0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }
}
