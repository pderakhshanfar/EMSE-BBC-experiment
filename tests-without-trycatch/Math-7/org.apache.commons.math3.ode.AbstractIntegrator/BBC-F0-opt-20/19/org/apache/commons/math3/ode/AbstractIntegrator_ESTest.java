/*
 * This file was automatically generated by EvoSuite
 * Thu Oct 21 12:27:56 GMT 2021
 */

package org.apache.commons.math3.ode;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Collection;
import org.apache.commons.math3.analysis.UnivariateFunction;
import org.apache.commons.math3.analysis.function.Sigmoid;
import org.apache.commons.math3.analysis.solvers.AllowedSolution;
import org.apache.commons.math3.analysis.solvers.IllinoisSolver;
import org.apache.commons.math3.analysis.solvers.MullerSolver2;
import org.apache.commons.math3.analysis.solvers.PegasusSolver;
import org.apache.commons.math3.analysis.solvers.RegulaFalsiSolver;
import org.apache.commons.math3.analysis.solvers.SecantSolver;
import org.apache.commons.math3.analysis.solvers.UnivariateSolver;
import org.apache.commons.math3.ode.ExpandableStatefulODE;
import org.apache.commons.math3.ode.FirstOrderConverter;
import org.apache.commons.math3.ode.FirstOrderDifferentialEquations;
import org.apache.commons.math3.ode.SecondOrderDifferentialEquations;
import org.apache.commons.math3.ode.events.EventHandler;
import org.apache.commons.math3.ode.nonstiff.AdamsMoultonIntegrator;
import org.apache.commons.math3.ode.nonstiff.ClassicalRungeKuttaIntegrator;
import org.apache.commons.math3.ode.nonstiff.DormandPrince54Integrator;
import org.apache.commons.math3.ode.nonstiff.DormandPrince853Integrator;
import org.apache.commons.math3.ode.nonstiff.GraggBulirschStoerIntegrator;
import org.apache.commons.math3.ode.nonstiff.HighamHall54Integrator;
import org.apache.commons.math3.ode.nonstiff.MidpointIntegrator;
import org.apache.commons.math3.ode.sampling.DummyStepHandler;
import org.apache.commons.math3.ode.sampling.FixedStepHandler;
import org.apache.commons.math3.ode.sampling.StepHandler;
import org.apache.commons.math3.ode.sampling.StepNormalizer;
import org.apache.commons.math3.ode.sampling.StepNormalizerBounds;
import org.apache.commons.math3.ode.sampling.StepNormalizerMode;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class AbstractIntegrator_ESTest extends AbstractIntegrator_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator(0.0, 0.0, 0.0, 0.0);
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      dormandPrince54Integrator0.setMaxEvaluations(27);
      ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter0);
//      try { 
        dormandPrince54Integrator0.integrate(expandableStatefulODE0, 0.0);
//        fail("Expecting exception: IllegalStateException");
      
//      } catch(IllegalStateException e) {
//         //
//         // illegal state: maximal count (27) exceeded
//         //
//         verifyException("org.apache.commons.math3.util.Incrementor$1", e);
//      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator(0.0, 0.0, 0.0, 0.0);
      IllinoisSolver illinoisSolver0 = new IllinoisSolver(0.0, 0.0);
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator(0.0, (-2675), 0.0, 0.0);
      dormandPrince54Integrator0.getOrder();
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      doReturn((double)(-2675), 0.0).when(eventHandler0).g(anyDouble() , any(double[].class));
      SecantSolver secantSolver0 = new SecantSolver();
      dormandPrince54Integrator0.addEventHandler(eventHandler0, 0.0, (double) 5, (-2675), (UnivariateSolver) illinoisSolver0);
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter0);
//      try { 
        dormandPrince54Integrator0.integrate(expandableStatefulODE0, 874.9637090680332);
//        fail("Expecting exception: IllegalStateException");
      
//      } catch(IllegalStateException e) {
//         //
//         // illegal state: maximal count (-2,675) exceeded: evaluations
//         //
//         verifyException("org.apache.commons.math3.analysis.solvers.BaseAbstractUnivariateSolver", e);
//      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      double double0 = 1952.0;
      double[] doubleArray0 = new double[0];
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator(1952.0, 1952.0, doubleArray0, doubleArray0);
      int int0 = (-2476);
      double double1 = 905.2145805200772;
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      // Undeclared exception!
//      try { 
        graggBulirschStoerIntegrator0.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, (-978.29402379), doubleArray0, (double) (-2476), doubleArray0);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 0
//         //
//         verifyException("org.apache.commons.math3.ode.nonstiff.GraggBulirschStoerIntegrator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator(0.0, 0.0, 0.0, 0.0);
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator((-2675), 3.402369329874797E300, 3.402369329874797E300, (-1219.961775276));
      graggBulirschStoerIntegrator0.getEventHandlers();
      dormandPrince54Integrator0.getOrder();
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      SecantSolver secantSolver0 = new SecantSolver((-1219.961775276), 2.1186736024949195E-289);
      graggBulirschStoerIntegrator0.addEventHandler(eventHandler0, 0.0, (double) (-2675), 5, (UnivariateSolver) secantSolver0);
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      dormandPrince54Integrator0.getCurrentSignedStepsize();
      graggBulirschStoerIntegrator0.setMaxEvaluations(0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      double double0 = 0.0;
      DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator(0.0, 0.0, 0.0, 0.0);
      int int0 = (-2675);
      IllinoisSolver illinoisSolver0 = new IllinoisSolver(0.0, 0.0);
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator(0.0, (-2675), 0.0, 0.0);
      dormandPrince54Integrator0.getOrder();
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      doReturn((double)(-2675), 0.0).when(eventHandler0).g(anyDouble() , any(double[].class));
      graggBulirschStoerIntegrator0.addEventHandler(eventHandler0, (double) 5, 0.0, (-1367), (UnivariateSolver) illinoisSolver0);
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      double[] doubleArray0 = new double[0];
//      try { 
        graggBulirschStoerIntegrator0.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, 1568.9256689548492, doubleArray0, (double) (-1367), doubleArray0);
//        fail("Expecting exception: IllegalStateException");
      
//      } catch(IllegalStateException e) {
//         //
//         // illegal state: maximal count (-1,367) exceeded: evaluations
//         //
//         verifyException("org.apache.commons.math3.analysis.solvers.BaseAbstractUnivariateSolver", e);
//      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator(1000.0, 1000.0, doubleArray0, doubleArray0);
      double[] doubleArray1 = new double[0];
      graggBulirschStoerIntegrator0.clearStepHandlers();
      graggBulirschStoerIntegrator0.setStepSizeControl(2.6691899766673256E-109, 1334.883, doubleArray1, doubleArray0);
      graggBulirschStoerIntegrator0.setInterpolationControl(true, 20232);
      graggBulirschStoerIntegrator0.clearStepHandlers();
      graggBulirschStoerIntegrator0.setControlFactors((-2219.577973016081), (-1465.0), 1.7763568394002505E-12, 5.606492666349878E-9);
      graggBulirschStoerIntegrator0.getName();
      graggBulirschStoerIntegrator0.setInterpolationControl(true, 2969);
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter0);
      // Undeclared exception!
//      try { 
        graggBulirschStoerIntegrator0.integrate(expandableStatefulODE0, (double) 20232);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 0
//         //
//         verifyException("org.apache.commons.math3.ode.nonstiff.GraggBulirschStoerIntegrator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator((-5895.4504212), (-5895.4504212), doubleArray0, doubleArray0);
      dormandPrince54Integrator0.getCurrentSignedStepsize();
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0).when(eventHandler0).g(anyDouble() , any(double[].class));
      dormandPrince54Integrator0.addEventHandler(eventHandler0, 1591.3028721809387, (-5895.4504212), 2145334133);
      dormandPrince54Integrator0.setInitialStepSize(1000.0);
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      dormandPrince54Integrator0.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, 5895.4504212, doubleArray0, 1081.0, doubleArray0);
      dormandPrince54Integrator0.computeDerivatives((-5895.4504212), doubleArray0, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator(0.0, 0.0, 0.0, 0.0);
      dormandPrince54Integrator0.setStepSizeControl(0.0, 0.0, 0.0, 0.0);
      IllinoisSolver illinoisSolver0 = new IllinoisSolver(2391.8, 2391.8);
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator((-26.041666666666668), (-2675), 2391.8, 0.0);
      graggBulirschStoerIntegrator0.setControlFactors((-26.041666666666668), (-2675), 0.0, (-26.041666666666668));
      dormandPrince54Integrator0.getOrder();
      dormandPrince54Integrator0.getOrder();
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0).when(eventHandler0).g(anyDouble() , any(double[].class));
      graggBulirschStoerIntegrator0.addEventHandler(eventHandler0, 905.2145805200772, 163.4580089849073, 5, (UnivariateSolver) illinoisSolver0);
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter0);
      expandableStatefulODE0.setTime(1.6543612251060553E-21);
      graggBulirschStoerIntegrator0.integrate(expandableStatefulODE0, (-26.041666666666668));
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (-26.041666666666668);
      doubleArray0[1] = (double) 5;
      doubleArray0[2] = (-26.041666666666668);
      doubleArray0[3] = 0.0;
      doubleArray0[4] = (-26.041666666666668);
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator1 = new GraggBulirschStoerIntegrator(1302.064090012, 1000.0, doubleArray0, doubleArray0);
      graggBulirschStoerIntegrator1.getMaxEvaluations();
      EventHandler eventHandler1 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      graggBulirschStoerIntegrator1.addEventHandler(eventHandler1, 763.21790123, 0.0, (-2675), (UnivariateSolver) illinoisSolver0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      PegasusSolver pegasusSolver0 = new PegasusSolver();
      DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator(1081, 1081, 1.9445664882659912, 1081);
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      doReturn(1000.0, (double)1081, 0.0, 0.0, 0.0).when(eventHandler0).g(anyDouble() , any(double[].class));
      int int0 = 181;
      SecantSolver secantSolver0 = new SecantSolver();
      dormandPrince54Integrator0.addEventHandler(eventHandler0, (double) 1081, (-1501.31135), 4302, (UnivariateSolver) secantSolver0);
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      double double0 = (-626.3476409319668);
      double[] doubleArray1 = new double[0];
      dormandPrince54Integrator0.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, (-1501.31135), doubleArray0, (-626.3476409319668), doubleArray1);
      SecondOrderDifferentialEquations secondOrderDifferentialEquations1 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations1).getDimension();
      FirstOrderConverter firstOrderConverter1 = new FirstOrderConverter(secondOrderDifferentialEquations1);
      ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter1);
      // Undeclared exception!
      dormandPrince54Integrator0.integrate(expandableStatefulODE0, 1.4693679385278594E-36);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      double double0 = 1594.0;
      ClassicalRungeKuttaIntegrator classicalRungeKuttaIntegrator0 = new ClassicalRungeKuttaIntegrator(1594.0);
      classicalRungeKuttaIntegrator0.getEvaluations();
      classicalRungeKuttaIntegrator0.getCurrentStepStart();
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = null;
//      try {
        graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator(Double.NaN, 1594.0, (double[]) null, (double[]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.ode.nonstiff.AdaptiveStepsizeIntegrator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      double double0 = 1594.0;
      ClassicalRungeKuttaIntegrator classicalRungeKuttaIntegrator0 = new ClassicalRungeKuttaIntegrator(1594.0);
      classicalRungeKuttaIntegrator0.getEvaluations();
      classicalRungeKuttaIntegrator0.getCurrentStepStart();
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter0);
      // Undeclared exception!
      classicalRungeKuttaIntegrator0.integrate(expandableStatefulODE0, (double) 0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator((-5895.4504212), (-5895.4504212), doubleArray0, doubleArray0);
      dormandPrince54Integrator0.getCurrentSignedStepsize();
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      dormandPrince54Integrator0.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, 5895.4504212, doubleArray0, 1081.0, doubleArray0);
      dormandPrince54Integrator0.getEvaluations();
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      PegasusSolver pegasusSolver0 = new PegasusSolver();
      DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator(1081, 1081, 1.9445664882659912, 1081);
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      doReturn(1.9445664882659912, 1.9445664882659912, 0.0, 0.0, 0.0).when(eventHandler0).g(anyDouble() , any(double[].class));
      pegasusSolver0.getMaxEvaluations();
      dormandPrince54Integrator0.addEventHandler(eventHandler0, 4.547473508864641E-10, 1591.3028721809387, 0, (UnivariateSolver) pegasusSolver0);
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      dormandPrince54Integrator0.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, 1.2924697071141057E-23, doubleArray0, (double) 0, doubleArray0);
      SecondOrderDifferentialEquations secondOrderDifferentialEquations1 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations1).getDimension();
      FirstOrderConverter firstOrderConverter1 = new FirstOrderConverter(secondOrderDifferentialEquations1);
      dormandPrince54Integrator0.integrate((FirstOrderDifferentialEquations) firstOrderConverter1, (-1054.12696783289), doubleArray0, (double) (-308), doubleArray0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      PegasusSolver pegasusSolver0 = new PegasusSolver();
      DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator(1081, 1081, 1.9445664882659912, 1081);
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      doReturn((double)1081, (-8036.0), (-8036.0), (-8036.0)).when(eventHandler0).g(anyDouble() , any(double[].class));
      double double0 = 4.547473508864641E-10;
      dormandPrince54Integrator0.addEventHandler(eventHandler0, 4.547473508864641E-10, 1591.3028721809387, 0, (UnivariateSolver) pegasusSolver0);
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      dormandPrince54Integrator0.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, 1.2924697071141057E-23, doubleArray0, (double) 0, doubleArray0);
      double double1 = 1591.3028721809387;
      EventHandler eventHandler1 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      doReturn(Double.NaN, 1.9445664882659912, 1591.3028721809387, 4.547473508864641E-10, (-319.188)).when(eventHandler1).g(anyDouble() , any(double[].class));
      dormandPrince54Integrator0.addEventHandler(eventHandler1, 1.9445664882659912, 1.9445664882659912, 1458, (UnivariateSolver) pegasusSolver0);
      SecondOrderDifferentialEquations secondOrderDifferentialEquations1 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(5).when(secondOrderDifferentialEquations1).getDimension();
      FirstOrderConverter firstOrderConverter1 = new FirstOrderConverter(secondOrderDifferentialEquations1);
      ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter1);
//      try { 
        dormandPrince54Integrator0.integrate(expandableStatefulODE0, 0.0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // function values at endpoints do not have different signs, endpoints: [\uFFFD, \uFFFD], values: [-319.188, -319.188]
//         //
//         verifyException("org.apache.commons.math3.analysis.solvers.UnivariateSolverUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator(0.0, 0.0, 0.0, 0.0);
      dormandPrince54Integrator0.setStepSizeControl(253.0, 118.0, 0.0, (-999.51));
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      IllinoisSolver illinoisSolver0 = new IllinoisSolver(2391.8, 2391.8);
      dormandPrince54Integrator0.addEventHandler(eventHandler0, 0.0, 0.0, (-2675), (UnivariateSolver) illinoisSolver0);
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator((-26.041666666666668), (-2675), 2391.8, 0.0);
      graggBulirschStoerIntegrator0.setControlFactors((-26.041666666666668), (-2675), 0.0, (-26.041666666666668));
      dormandPrince54Integrator0.getOrder();
      EventHandler eventHandler1 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      doReturn(697.8625320734817, (-1.0), 0.0, (-26.041666666666668), 0.0).when(eventHandler1).g(anyDouble() , any(double[].class));
      graggBulirschStoerIntegrator0.addEventHandler(eventHandler1, 0.0, (double) 5, 5, (UnivariateSolver) illinoisSolver0);
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (-999.51);
      doubleArray0[1] = 2391.8;
      doubleArray0[2] = 253.0;
      doubleArray0[3] = 2391.8;
      FixedStepHandler fixedStepHandler0 = mock(FixedStepHandler.class, new ViolatedAssumptionAnswer());
      StepNormalizerMode stepNormalizerMode0 = StepNormalizerMode.MULTIPLES;
      StepNormalizerBounds stepNormalizerBounds0 = StepNormalizerBounds.NEITHER;
      StepNormalizer stepNormalizer0 = new StepNormalizer((-999.51), fixedStepHandler0, stepNormalizerMode0, stepNormalizerBounds0);
      graggBulirschStoerIntegrator0.addStepHandler(stepNormalizer0);
      doubleArray0[4] = (double) 5;
      doubleArray0[5] = 0.0;
      doubleArray0[6] = (-18.52006565999696);
      DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator(2391.8, 0.0, doubleArray0, doubleArray0);
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(5).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter0);
      // Undeclared exception!
      graggBulirschStoerIntegrator0.integrate(expandableStatefulODE0, (-999.51));
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      double double0 = 0.0;
      double[] doubleArray0 = new double[0];
      DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator((-5895.4504212), 0.0, doubleArray0, doubleArray0);
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      doReturn(4.94E-321, (double)5442, (-766.47), 0.0, (-5895.4504212)).when(eventHandler0).g(anyDouble() , any(double[].class));
      int int0 = 1081;
      PegasusSolver pegasusSolver0 = new PegasusSolver();
      dormandPrince54Integrator0.addEventHandler(eventHandler0, 2877.0, 0.0, 1081, (UnivariateSolver) pegasusSolver0);
      dormandPrince54Integrator0.getName();
      SecondOrderDifferentialEquations secondOrderDifferentialEquations1 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations1).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations1);
//      try { 
        dormandPrince54Integrator0.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, 4549.01989132887, doubleArray0, 579.7358790322972, doubleArray0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // function values at endpoints do not have different signs, endpoints: [\uFFFD, 4,549.02], values: [-5,895.45, -5,895.45]
//         //
//         verifyException("org.apache.commons.math3.analysis.solvers.UnivariateSolverUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator((-5895.4504212), (-5895.4504212), doubleArray0, doubleArray0);
      dormandPrince54Integrator0.getCurrentSignedStepsize();
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(2711).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      SecondOrderDifferentialEquations secondOrderDifferentialEquations1 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations1).getDimension();
      FirstOrderConverter firstOrderConverter1 = new FirstOrderConverter(secondOrderDifferentialEquations1);
      double[] doubleArray1 = new double[2];
      doubleArray1[0] = (-5895.4504212);
      doubleArray1[1] = 0.0;
//      try { 
        dormandPrince54Integrator0.integrate((FirstOrderDifferentialEquations) firstOrderConverter1, (-5895.4504212), doubleArray0, (-3382.2899), doubleArray1);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // 2 != 0
//         //
//         verifyException("org.apache.commons.math3.ode.AbstractIntegrator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      PegasusSolver pegasusSolver0 = new PegasusSolver();
      DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator(1081, 1081, 1.9445664882659912, 1081);
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(eventHandler0).g(anyDouble() , any(double[].class));
      double double0 = 4.547473508864641E-10;
      dormandPrince54Integrator0.addEventHandler(eventHandler0, 4.547473508864641E-10, 1591.3028721809387, 0, (UnivariateSolver) pegasusSolver0);
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      dormandPrince54Integrator0.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, 1.2924697071141057E-23, doubleArray0, (double) 0, doubleArray0);
      SecondOrderDifferentialEquations secondOrderDifferentialEquations1 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations1).getDimension();
      FirstOrderConverter firstOrderConverter1 = new FirstOrderConverter(secondOrderDifferentialEquations1);
      ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter1);
      // Undeclared exception!
      dormandPrince54Integrator0.integrate(expandableStatefulODE0, 0.0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator((-5895.4504212), 0.0, doubleArray0, doubleArray0);
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      dormandPrince54Integrator0.setMaxEvaluations(7712);
//      try { 
        dormandPrince54Integrator0.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, Double.NaN, doubleArray0, 0.0, doubleArray0);
//        fail("Expecting exception: IllegalStateException");
      
//      } catch(IllegalStateException e) {
//         //
//         // illegal state: maximal count (7,712) exceeded
//         //
//         verifyException("org.apache.commons.math3.util.Incrementor$1", e);
//      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      double double0 = (-2852.000633153);
      double double1 = 3922.27;
      double double2 = 3969.284012296572;
      DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator((-2852.000633153), (-2852.000633153), 3922.27, 3969.284012296572);
      dormandPrince54Integrator0.getStepHandlers();
      ExpandableStatefulODE expandableStatefulODE0 = null;
      // Undeclared exception!
//      try { 
        dormandPrince54Integrator0.integrate((ExpandableStatefulODE) null, (-2852.000633153));
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.ode.AbstractIntegrator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator((-5895.4504212), (-5895.4504212), doubleArray0, doubleArray0);
      dormandPrince54Integrator0.getCurrentSignedStepsize();
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      dormandPrince54Integrator0.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, 0.0, doubleArray0, 5895.4504212, doubleArray0);
      ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter0);
      // Undeclared exception!
      dormandPrince54Integrator0.integrate(expandableStatefulODE0, 2.7006726968568243E282);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      double double0 = 0.0;
      double[] doubleArray0 = new double[0];
      DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator((-5895.4504212), 0.0, doubleArray0, doubleArray0);
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      SecondOrderDifferentialEquations secondOrderDifferentialEquations1 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations1).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations1);
      double[] doubleArray1 = new double[0];
      // Undeclared exception!
      dormandPrince54Integrator0.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, 0.0, doubleArray1, (-5895.4504212), doubleArray0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator((-5895.4504212), (-5895.4504212), doubleArray0, doubleArray0);
      dormandPrince54Integrator0.getCurrentSignedStepsize();
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      SecondOrderDifferentialEquations secondOrderDifferentialEquations1 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations1).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations1);
//      try { 
        dormandPrince54Integrator0.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, (-5895.4504212), doubleArray0, (-5895.4504212), doubleArray0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // too small integration interval: length = 0
//         //
//         verifyException("org.apache.commons.math3.ode.AbstractIntegrator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator(2289.13641641708, 2289.13641641708, 2289.13641641708, 2289.13641641708);
      double[] doubleArray0 = new double[0];
      DormandPrince54Integrator dormandPrince54Integrator1 = new DormandPrince54Integrator(0.0, 0.0, doubleArray0, doubleArray0);
      dormandPrince54Integrator1.getCurrentSignedStepsize();
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
//      try { 
        dormandPrince54Integrator0.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, 0.0, doubleArray0, 0.0, doubleArray0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // too small integration interval: length = 0
//         //
//         verifyException("org.apache.commons.math3.ode.AbstractIntegrator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator((-5895.4504212), 2289.13641641708, doubleArray0, doubleArray0);
      dormandPrince54Integrator0.getCurrentSignedStepsize();
      DormandPrince54Integrator dormandPrince54Integrator1 = new DormandPrince54Integrator(2289.13641641708, (-1.0), doubleArray0, doubleArray0);
      dormandPrince54Integrator1.getCurrentSignedStepsize();
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      // Undeclared exception!
      dormandPrince54Integrator1.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, 0.0, doubleArray0, 3006.0425863, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator((-5895.4504212), 2289.13641641708, doubleArray0, doubleArray0);
      dormandPrince54Integrator0.getCurrentSignedStepsize();
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      // Undeclared exception!
      dormandPrince54Integrator0.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, Double.NaN, doubleArray0, 0.0, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator(0.0, 0.0, 0.0, 0.0);
      double[] doubleArray0 = new double[0];
      DormandPrince54Integrator dormandPrince54Integrator1 = new DormandPrince54Integrator(1.0, 0.0, doubleArray0, doubleArray0);
      dormandPrince54Integrator1.getCurrentSignedStepsize();
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
//      try { 
        dormandPrince54Integrator0.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, 0.0, doubleArray0, 0.0, doubleArray0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // too small integration interval: length = 0
//         //
//         verifyException("org.apache.commons.math3.ode.AbstractIntegrator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      double double0 = (-1872.5163665352875);
      double double1 = Double.NaN;
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (-1872.5163665352875);
      doubleArray0[1] = (-1872.5163665352875);
      HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator((-1872.5163665352875), Double.NaN, doubleArray0, doubleArray0);
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter0);
//      try { 
        highamHall54Integrator0.integrate(expandableStatefulODE0, (-1872.5163665352875));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // 0 != 2
//         //
//         verifyException("org.apache.commons.math3.ode.nonstiff.AdaptiveStepsizeIntegrator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator(0.0, 0.0, 0.0, 0.0);
      dormandPrince54Integrator0.setStepSizeControl(253.0, 118.0, 0.0, (-999.51));
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      IllinoisSolver illinoisSolver0 = new IllinoisSolver(2391.8, 2391.8);
      dormandPrince54Integrator0.addEventHandler(eventHandler0, 0.0, 0.0, (-2675), (UnivariateSolver) illinoisSolver0);
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator((-26.041666666666668), (-2675), 2391.8, 0.0);
      graggBulirschStoerIntegrator0.setControlFactors((-26.041666666666668), (-2675), 0.0, (-26.041666666666668));
      dormandPrince54Integrator0.getOrder();
      EventHandler eventHandler1 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      doReturn(697.8625320734817, (-1.0), 0.0, (-26.041666666666668), 0.0).when(eventHandler1).g(anyDouble() , any(double[].class));
      graggBulirschStoerIntegrator0.addEventHandler(eventHandler1, 0.0, (double) 5, 5, (UnivariateSolver) illinoisSolver0);
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (-999.51);
      doubleArray0[1] = 2391.8;
      doubleArray0[2] = 253.0;
      doubleArray0[3] = 2391.8;
      doubleArray0[4] = (double) 5;
      doubleArray0[5] = 0.0;
      doubleArray0[6] = (-18.52006565999696);
      DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator(2391.8, 0.0, doubleArray0, doubleArray0);
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter0);
      // Undeclared exception!
      graggBulirschStoerIntegrator0.integrate(expandableStatefulODE0, (-999.51));
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 470.990435233554;
      doubleArray0[1] = 1038.7;
      doubleArray0[2] = 1038.7;
      double[] doubleArray1 = new double[6];
      doubleArray1[0] = 1038.7;
      doubleArray1[1] = 1038.7;
      doubleArray1[2] = 470.990435233554;
      doubleArray1[3] = 470.990435233554;
      doubleArray0[2] = 470.990435233554;
      doubleArray1[5] = 2289.13641641708;
      DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator(1038.7, 1038.7, doubleArray0, doubleArray1);
      dormandPrince54Integrator0.getCurrentSignedStepsize();
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(3).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
//      try { 
        dormandPrince54Integrator0.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, 1.0, doubleArray1, 1.0, doubleArray0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // 3 != 6
//         //
//         verifyException("org.apache.commons.math3.ode.AbstractIntegrator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 470.990435233554;
      doubleArray0[2] = 1038.7;
      doubleArray0[2] = 1038.7;
      double[] doubleArray1 = new double[6];
      doubleArray1[0] = 1038.7;
      doubleArray1[1] = 1038.7;
      doubleArray1[2] = 470.990435233554;
      doubleArray0[2] = 470.990435233554;
      doubleArray1[4] = 470.990435233554;
      doubleArray1[5] = 2289.13641641708;
      DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator(1038.7, 1038.7, doubleArray0, doubleArray1);
      dormandPrince54Integrator0.getCurrentSignedStepsize();
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(219).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
//      try { 
        dormandPrince54Integrator0.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, 1.0, doubleArray1, 1.0, doubleArray0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // 6 != 438
//         //
//         verifyException("org.apache.commons.math3.ode.AbstractIntegrator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 6.466611224443739E245;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = (-8.10254145615142E-8);
      doubleArray0[4] = 6.466611224443739E245;
      doubleArray0[5] = 6.466611224443739E245;
      doubleArray0[6] = 6.466611224443739E245;
      doubleArray0[7] = 6.466611224443739E245;
      DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator(6.466611224443739E245, 0.0, doubleArray0, doubleArray0);
      // Undeclared exception!
//      try { 
        dormandPrince54Integrator0.integrate((FirstOrderDifferentialEquations) null, 4.94E-321, doubleArray0, (-1876.8174191), doubleArray0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.ode.AbstractIntegrator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      double double0 = 2030.867;
      MidpointIntegrator midpointIntegrator0 = new MidpointIntegrator(2030.867);
      DummyStepHandler dummyStepHandler0 = DummyStepHandler.getInstance();
      DummyStepHandler.getInstance();
      DummyStepHandler.getInstance();
      midpointIntegrator0.addStepHandler(dummyStepHandler0);
      midpointIntegrator0.clearEventHandlers();
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter0);
      // Undeclared exception!
      midpointIntegrator0.integrate(expandableStatefulODE0, 2030.867);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator(0.0, 6.0, 0.0, 6.0);
      dormandPrince54Integrator0.getStepHandlers();
      double double0 = 0.0;
      dormandPrince54Integrator0.setInitialStepSize(1976.412668890827);
      dormandPrince54Integrator0.setStepSizeControl(0.0, 0.0, 0.0, 1705.3351);
      dormandPrince54Integrator0.clearEventHandlers();
      dormandPrince54Integrator0.getEvaluations();
      dormandPrince54Integrator0.getMaxEvaluations();
      dormandPrince54Integrator0.getName();
      dormandPrince54Integrator0.getName();
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      dormandPrince54Integrator0.getEvaluations();
      PegasusSolver pegasusSolver0 = new PegasusSolver(5.0, 3657.0, (-679.8805030179368));
      Sigmoid sigmoid0 = new Sigmoid((-3043.0178534141314), 5.0);
      AllowedSolution allowedSolution0 = AllowedSolution.LEFT_SIDE;
      // Undeclared exception!
//      try { 
        pegasusSolver0.solve((-591), (UnivariateFunction) sigmoid0, 1976.412668890827, 1432.44, allowedSolution0);
//        fail("Expecting exception: IllegalStateException");
      
//      } catch(IllegalStateException e) {
//         //
//         // illegal state: maximal count (-591) exceeded: evaluations
//         //
//         verifyException("org.apache.commons.math3.analysis.solvers.BaseAbstractUnivariateSolver", e);
//      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (-1137.737536753278);
      doubleArray0[1] = (-1137.737536753278);
      doubleArray0[2] = 624.78215198311;
      doubleArray0[3] = (-1137.737536753278);
      doubleArray0[4] = 0.0;
      doubleArray0[5] = (-1137.737536753278);
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator((-1137.737536753278), (-1137.737536753278), doubleArray0, doubleArray0);
      graggBulirschStoerIntegrator0.setStabilityCheck(false, 1, 1, 1);
      graggBulirschStoerIntegrator0.getName();
      graggBulirschStoerIntegrator0.setInterpolationControl(false, 1);
      graggBulirschStoerIntegrator0.getEvaluations();
      graggBulirschStoerIntegrator0.getName();
      HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator((-3912.3666), 0, (-1137.737536753278), 0.0);
      int int0 = highamHall54Integrator0.getOrder();
      assertEquals(5, int0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator(0.0, 0.0, 0.0, 0.0);
      dormandPrince54Integrator0.setMaxEvaluations(1142);
      dormandPrince54Integrator0.getMaxEvaluations();
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 1000.0;
      doubleArray0[1] = 1000.0;
      doubleArray0[2] = 1000.0;
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator(1000.0, 1000.0, doubleArray0, doubleArray0);
      graggBulirschStoerIntegrator0.setStabilityCheck(false, 662, 5, 870.056386365822);
      assertEquals(1000.0, graggBulirschStoerIntegrator0.getCurrentSignedStepsize(), 0.01);
      
      RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver(870.056386365822);
      graggBulirschStoerIntegrator0.addEventHandler((EventHandler) null, 1000.0, (-7.886250961456327E130), 722, (UnivariateSolver) regulaFalsiSolver0);
      assertEquals(1000.0, graggBulirschStoerIntegrator0.getMinStep(), 0.01);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 470.990435233554;
      doubleArray0[1] = 1038.7;
      doubleArray0[2] = 1038.7;
      double[] doubleArray1 = new double[6];
      doubleArray1[0] = 1038.7;
      doubleArray1[1] = 1038.7;
      doubleArray1[2] = 470.990435233554;
      doubleArray1[3] = 470.990435233554;
      doubleArray1[4] = 470.990435233554;
      doubleArray1[5] = 2289.13641641708;
      DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator(1038.7, 1038.7, doubleArray0, doubleArray1);
      dormandPrince54Integrator0.getCurrentSignedStepsize();
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
//      try { 
        dormandPrince54Integrator0.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, 1.0, doubleArray1, 1.0, doubleArray0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // 6 != 0
//         //
//         verifyException("org.apache.commons.math3.ode.AbstractIntegrator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 4.450312892752409;
      DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator(4.450312892752409, 0.0, doubleArray0, doubleArray0);
      FixedStepHandler fixedStepHandler0 = mock(FixedStepHandler.class, new ViolatedAssumptionAnswer());
      StepNormalizerMode stepNormalizerMode0 = StepNormalizerMode.INCREMENT;
      StepNormalizerBounds stepNormalizerBounds0 = StepNormalizerBounds.LAST;
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      dormandPrince853Integrator0.addEventHandler(eventHandler0, 4.450312892752409, 0.0, (-632));
      StepNormalizer stepNormalizer0 = new StepNormalizer(0.0, fixedStepHandler0, stepNormalizerMode0, stepNormalizerBounds0);
      dormandPrince853Integrator0.addStepHandler(stepNormalizer0);
      RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver(0.0);
      regulaFalsiSolver0.getEvaluations();
      dormandPrince853Integrator0.addEventHandler((EventHandler) null, 0.0, 0.0, 646, (UnivariateSolver) regulaFalsiSolver0);
      dormandPrince853Integrator0.getCurrentSignedStepsize();
      AdamsMoultonIntegrator adamsMoultonIntegrator0 = new AdamsMoultonIntegrator(646, 1.0, 0.0, doubleArray0, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      double double0 = (-1.0);
      double double1 = 0.0;
      double double2 = 924.7910704104237;
      HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator((-1.0), 0.0, 440.934, 924.7910704104237);
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      FixedStepHandler fixedStepHandler0 = mock(FixedStepHandler.class, new ViolatedAssumptionAnswer());
      StepNormalizerBounds stepNormalizerBounds0 = StepNormalizerBounds.FIRST;
      StepNormalizer stepNormalizer0 = new StepNormalizer(0.0, fixedStepHandler0, stepNormalizerBounds0);
      highamHall54Integrator0.addStepHandler(stepNormalizer0);
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 440.934;
      double double3 = 224.43447021636277;
      // Undeclared exception!
//      try { 
        highamHall54Integrator0.computeDerivatives(0.0, doubleArray0, doubleArray0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator(0.0, 0.0, 0.0, 0.0);
      dormandPrince54Integrator0.setStepSizeControl(0.0, 0.0, 0.0, 0.0);
      double double0 = 2389.553916702233;
      IllinoisSolver illinoisSolver0 = new IllinoisSolver(2389.553916702233, 2389.553916702233);
      int int0 = 2145334133;
      double double1 = 0.0;
      dormandPrince54Integrator0.addEventHandler((EventHandler) null, 0.0, 0.0, 2145334133);
      FirstOrderConverter firstOrderConverter0 = null;
//      try {
        firstOrderConverter0 = new FirstOrderConverter((SecondOrderDifferentialEquations) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.ode.FirstOrderConverter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      double double0 = 1389.3286922001;
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator(1389.3286922001, 1389.3286922001, (-1070.96590939445), (-499.525773973207));
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (-499.525773973207);
      doubleArray0[1] = 2707.1213;
      doubleArray0[2] = (-499.525773973207);
      graggBulirschStoerIntegrator0.addStepHandler((StepHandler) null);
      doubleArray0[3] = (-499.525773973207);
      doubleArray0[4] = (-1070.96590939445);
      doubleArray0[5] = (-1070.96590939445);
      graggBulirschStoerIntegrator0.clearStepHandlers();
      graggBulirschStoerIntegrator0.addEventHandler((EventHandler) null, (-983.260043255), 2707.1213, 2938);
      doubleArray0[6] = 0.0;
      doubleArray0[7] = 1389.3286922001;
      graggBulirschStoerIntegrator0.setStepSizeControl((-499.525773973207), (-499.525773973207), doubleArray0, doubleArray0);
      graggBulirschStoerIntegrator0.setStepSizeControl(2707.1213, (-499.525773973207), (-9.15095847217987), (-499.525773973207));
      graggBulirschStoerIntegrator0.setStepSizeControl((-499.525773973207), (-1070.96590939445), doubleArray0, doubleArray0);
      graggBulirschStoerIntegrator0.setOrderControl(234, 234, 1389.3286922001);
      graggBulirschStoerIntegrator0.clearStepHandlers();
      graggBulirschStoerIntegrator0.addStepHandler((StepHandler) null);
      AdamsMoultonIntegrator adamsMoultonIntegrator0 = null;
//      try {
        adamsMoultonIntegrator0 = new AdamsMoultonIntegrator(0, 2707.1213, (-499.525773973207), 0.0, 0.0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // multistep method needs at least 0 previous steps, got 2
//         //
//         verifyException("org.apache.commons.math3.ode.MultistepIntegrator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (-1039.9688360292653);
      doubleArray0[1] = (-1039.9688360292653);
      doubleArray0[2] = (-1039.9688360292653);
      doubleArray0[3] = (-1039.9688360292653);
      doubleArray0[4] = (-1039.9688360292653);
      doubleArray0[5] = (-1039.9688360292653);
      HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator((-1039.9688360292653), (-1039.9688360292653), doubleArray0, doubleArray0);
      Collection<StepHandler> collection0 = highamHall54Integrator0.getStepHandlers();
      assertNotNull(collection0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator((-1780.6642), (-1780.6642), Double.NaN, (-1780.6642));
      dormandPrince54Integrator0.getEventHandlers();
      int int0 = dormandPrince54Integrator0.getMaxEvaluations();
      assertEquals(Integer.MAX_VALUE, int0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      MidpointIntegrator midpointIntegrator0 = new MidpointIntegrator(2030.867);
      DummyStepHandler dummyStepHandler0 = DummyStepHandler.getInstance();
      DummyStepHandler.getInstance();
      DummyStepHandler.getInstance();
      midpointIntegrator0.addStepHandler(dummyStepHandler0);
      midpointIntegrator0.clearEventHandlers();
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (-1787.8998984266843);
      doubleArray0[1] = 3.481513333662908E-8;
      doubleArray0[2] = 4856.5879305055;
      doubleArray0[3] = 2030.867;
      doubleArray0[4] = 3.481513333662908E-8;
      doubleArray0[5] = 4856.5879305055;
      DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator(3.481513333662908E-8, 1654.0, doubleArray0, doubleArray0);
      int int0 = dormandPrince54Integrator0.getOrder();
      assertEquals(5, int0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator(2304.970874, (-3111.773631536891), 2304.970874, (-3598.5395));
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (-3598.5395);
      doubleArray0[1] = 2304.970874;
      doubleArray0[2] = (-3111.773631536891);
      doubleArray0[3] = (-3111.773631536891);
      doubleArray0[4] = 2304.970874;
      doubleArray0[5] = 5.4375131636754E196;
      doubleArray0[6] = (-3598.5395);
      dormandPrince54Integrator0.setStepSizeControl((-3111.773631536891), 5.4375131636754E196, doubleArray0, doubleArray0);
      dormandPrince54Integrator0.clearStepHandlers();
      int int0 = dormandPrince54Integrator0.getOrder();
      assertEquals(5, int0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      double double0 = (-0.42268232132379197);
      ClassicalRungeKuttaIntegrator classicalRungeKuttaIntegrator0 = new ClassicalRungeKuttaIntegrator((-0.42268232132379197));
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 466.172716441;
      doubleArray0[1] = (-0.42268232132379197);
      doubleArray0[2] = Double.NaN;
      doubleArray0[3] = (-0.42268232132379197);
      doubleArray0[4] = Double.NaN;
      doubleArray0[5] = (-0.42268232132379197);
      doubleArray0[6] = 466.172716441;
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator(Double.NaN, 466.172716441, doubleArray0, doubleArray0);
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(eventHandler0).toString();
      MullerSolver2 mullerSolver2_0 = new MullerSolver2(Double.NaN, 0.0);
      graggBulirschStoerIntegrator0.addEventHandler(eventHandler0, 466.172716441, (-53.5599), (-1646), (UnivariateSolver) mullerSolver2_0);
      graggBulirschStoerIntegrator0.getEvaluations();
      graggBulirschStoerIntegrator0.clearStepHandlers();
      graggBulirschStoerIntegrator0.getEventHandlers();
      graggBulirschStoerIntegrator0.setControlFactors((-0.020331201708508627), (-1.0), 2449.67, Double.NaN);
      graggBulirschStoerIntegrator0.clearEventHandlers();
      ExpandableStatefulODE expandableStatefulODE0 = null;
//      try {
        expandableStatefulODE0 = new ExpandableStatefulODE((FirstOrderDifferentialEquations) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.ode.ExpandableStatefulODE", e);
//      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator(966.5915134438, 966.5915134438, 102.0, 102.0);
      highamHall54Integrator0.getEvaluations();
      highamHall54Integrator0.getOrder();
      highamHall54Integrator0.getCurrentSignedStepsize();
      highamHall54Integrator0.setMinReduction(Double.NaN);
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 5;
      doubleArray0[1] = 966.5915134438;
      doubleArray0[2] = (double) 5;
      doubleArray0[3] = 966.5915134438;
      // Undeclared exception!
//      try { 
        highamHall54Integrator0.computeDerivatives(424.91346991432, doubleArray0, doubleArray0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator(0.0, 0.0, 0.0, 0.0);
      dormandPrince54Integrator0.setStepSizeControl(253.0, 118.0, 0.0, (-999.51));
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      IllinoisSolver illinoisSolver0 = new IllinoisSolver(2391.8, 2391.8);
      dormandPrince54Integrator0.addEventHandler(eventHandler0, 0.0, 0.0, (-2675), (UnivariateSolver) illinoisSolver0);
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator((-26.041666666666668), (-2675), 2391.8, 0.0);
      graggBulirschStoerIntegrator0.setControlFactors((-26.041666666666668), (-2675), 0.0, (-26.041666666666668));
      dormandPrince54Integrator0.getOrder();
      EventHandler eventHandler1 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(eventHandler1).g(anyDouble() , any(double[].class));
      graggBulirschStoerIntegrator0.addEventHandler(eventHandler1, 0.0, (double) 5, 5, (UnivariateSolver) illinoisSolver0);
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (-999.51);
      doubleArray0[1] = 2391.8;
      doubleArray0[2] = 253.0;
      doubleArray0[3] = (-1024.6103728327);
      doubleArray0[4] = (double) 5;
      doubleArray0[5] = 0.0;
      doubleArray0[6] = (-18.52006565999696);
      DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator(2391.8, 0.0, doubleArray0, doubleArray0);
      dormandPrince853Integrator0.getOrder();
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter0);
      // Undeclared exception!
      graggBulirschStoerIntegrator0.integrate(expandableStatefulODE0, 253.0);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = Double.NaN;
      doubleArray0[1] = Double.NaN;
      doubleArray0[2] = Double.NaN;
      doubleArray0[3] = Double.NaN;
      doubleArray0[4] = Double.NaN;
      doubleArray0[5] = Double.NaN;
      doubleArray0[6] = Double.NaN;
      doubleArray0[7] = Double.NaN;
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator(Double.NaN, Double.NaN, doubleArray0, doubleArray0);
      graggBulirschStoerIntegrator0.setStabilityCheck(false, (-1), 2136, Double.NaN);
      assertEquals("Gragg-Bulirsch-Stoer", graggBulirschStoerIntegrator0.getName());
  }
}
