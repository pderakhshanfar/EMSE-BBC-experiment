/*
 * This file was automatically generated by EvoSuite
 * Tue Oct 19 20:26:06 GMT 2021
 */

package org.apache.commons.math3.ode;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math3.analysis.solvers.BisectionSolver;
import org.apache.commons.math3.analysis.solvers.MullerSolver;
import org.apache.commons.math3.analysis.solvers.MullerSolver2;
import org.apache.commons.math3.analysis.solvers.RegulaFalsiSolver;
import org.apache.commons.math3.analysis.solvers.SecantSolver;
import org.apache.commons.math3.analysis.solvers.UnivariateSolver;
import org.apache.commons.math3.ode.ExpandableStatefulODE;
import org.apache.commons.math3.ode.FirstOrderConverter;
import org.apache.commons.math3.ode.FirstOrderDifferentialEquations;
import org.apache.commons.math3.ode.SecondOrderDifferentialEquations;
import org.apache.commons.math3.ode.SecondaryEquations;
import org.apache.commons.math3.ode.events.EventHandler;
import org.apache.commons.math3.ode.nonstiff.AdamsBashforthIntegrator;
import org.apache.commons.math3.ode.nonstiff.AdamsMoultonIntegrator;
import org.apache.commons.math3.ode.nonstiff.ClassicalRungeKuttaIntegrator;
import org.apache.commons.math3.ode.nonstiff.DormandPrince54Integrator;
import org.apache.commons.math3.ode.nonstiff.DormandPrince853Integrator;
import org.apache.commons.math3.ode.nonstiff.EulerIntegrator;
import org.apache.commons.math3.ode.nonstiff.GillIntegrator;
import org.apache.commons.math3.ode.nonstiff.GraggBulirschStoerIntegrator;
import org.apache.commons.math3.ode.nonstiff.HighamHall54Integrator;
import org.apache.commons.math3.ode.nonstiff.ThreeEighthesIntegrator;
import org.apache.commons.math3.ode.sampling.DummyStepHandler;
import org.apache.commons.math3.ode.sampling.FixedStepHandler;
import org.apache.commons.math3.ode.sampling.StepHandler;
import org.apache.commons.math3.ode.sampling.StepNormalizer;
import org.apache.commons.math3.ode.sampling.StepNormalizerBounds;
import org.apache.commons.math3.ode.sampling.StepNormalizerMode;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class AbstractIntegrator_ESTest extends AbstractIntegrator_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator(1195.1, 1195.1, 1195.1, 1195.1);
      highamHall54Integrator0.getEvaluations();
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator(1195.1, 1195.1, 0, 1195.1);
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      double[] doubleArray0 = new double[0];
      graggBulirschStoerIntegrator0.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, 1195.1, doubleArray0, (double) 0, doubleArray0);
      graggBulirschStoerIntegrator0.getEvaluations();
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator(1195.131175377, 0.0, 1195.131175377, 0.0);
      FixedStepHandler fixedStepHandler0 = mock(FixedStepHandler.class, new ViolatedAssumptionAnswer());
      highamHall54Integrator0.getEvaluations();
      highamHall54Integrator0.setMaxEvaluations(0);
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator(1.2088773369194057, 0, 0, 1.2088773369194057);
      graggBulirschStoerIntegrator0.setStabilityCheck(true, 0, 0, 0.0);
      highamHall54Integrator0.getCurrentStepStart();
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      highamHall54Integrator0.getMaxEvaluations();
      Double double0 = new Double(0);
      DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator(1.2088773369194057, 4.547473508864641E-10, (double) double0, (-1123.600261));
      ThreeEighthesIntegrator threeEighthesIntegrator0 = new ThreeEighthesIntegrator(Double.NaN);
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      doReturn((-1123.600261), 1195.131175377, 1.61949812578045E-182, 1.61949812578045E-182, 0.0).when(eventHandler0).g(anyDouble() , any(double[].class));
      SecantSolver secantSolver0 = new SecantSolver(1195.131175377);
      threeEighthesIntegrator0.addEventHandler(eventHandler0, 1.2088773369194057, 1195.131175377, 3404, (UnivariateSolver) secantSolver0);
      ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter0);
      ExpandableStatefulODE expandableStatefulODE1 = new ExpandableStatefulODE(firstOrderConverter0);
      // Undeclared exception!
      threeEighthesIntegrator0.integrate(expandableStatefulODE1, 1195.131175377);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator(1195.131175377, 0.0, 1195.131175377, 0.0);
      FixedStepHandler fixedStepHandler0 = mock(FixedStepHandler.class, new ViolatedAssumptionAnswer());
      highamHall54Integrator0.getEvaluations();
      highamHall54Integrator0.getEventHandlers();
      highamHall54Integrator0.setMaxEvaluations(875);
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator(1.2088773369194057, 1000.0, 875, 1.2088773369194057);
      graggBulirschStoerIntegrator0.setStabilityCheck(true, 875, 0, 0.0);
      highamHall54Integrator0.getCurrentStepStart();
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      Double double0 = new Double(875);
      highamHall54Integrator0.setMinReduction(0.0);
      DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator(1000.0, 4.547473508864641E-10, (double) double0, (-1123.600261));
      ThreeEighthesIntegrator threeEighthesIntegrator0 = new ThreeEighthesIntegrator(Double.NaN);
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      doReturn((-1123.600261), 1195.131175377, 1.61949812578045E-182, 1.61949812578045E-182, 0.0).when(eventHandler0).g(anyDouble() , any(double[].class));
      DummyStepHandler dummyStepHandler0 = DummyStepHandler.getInstance();
      threeEighthesIntegrator0.addStepHandler(dummyStepHandler0);
      SecantSolver secantSolver0 = new SecantSolver(1195.131175377);
      threeEighthesIntegrator0.addEventHandler(eventHandler0, 1.2088773369194057, 1195.131175377, 3404, (UnivariateSolver) secantSolver0);
      ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter0);
      ExpandableStatefulODE expandableStatefulODE1 = new ExpandableStatefulODE(firstOrderConverter0);
      // Undeclared exception!
      threeEighthesIntegrator0.integrate(expandableStatefulODE1, 1195.131175377);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      double double0 = (-1263.29855);
      ThreeEighthesIntegrator threeEighthesIntegrator0 = new ThreeEighthesIntegrator((-1263.29855));
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(8388607).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      threeEighthesIntegrator0.addEventHandler(eventHandler0, 9.094947017729282E-10, 9.094947017729282E-10, 3091);
      ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter0);
      threeEighthesIntegrator0.integrate(expandableStatefulODE0, double0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator(1195.131175377, 0.0, 1195.131175377, 0.0);
      FixedStepHandler fixedStepHandler0 = mock(FixedStepHandler.class, new ViolatedAssumptionAnswer());
      StepNormalizerMode stepNormalizerMode0 = StepNormalizerMode.INCREMENT;
      StepNormalizer stepNormalizer0 = new StepNormalizer(1.2088773369194057, fixedStepHandler0, stepNormalizerMode0);
      highamHall54Integrator0.addStepHandler(stepNormalizer0);
      highamHall54Integrator0.getEvaluations();
      highamHall54Integrator0.getEventHandlers();
      highamHall54Integrator0.setMaxEvaluations(875);
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator(1.2088773369194057, 1000.0, 875, 1.2088773369194057);
      graggBulirschStoerIntegrator0.setStabilityCheck(true, 875, 0, 0.0);
      highamHall54Integrator0.getOrder();
      highamHall54Integrator0.getCurrentStepStart();
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      double[] doubleArray0 = new double[0];
      graggBulirschStoerIntegrator0.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, 1.2088773369194057, doubleArray0, 0.0, doubleArray0);
      DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator(1000.0, 4.547473508864641E-10, 0.0, (-1123.600261));
      ThreeEighthesIntegrator threeEighthesIntegrator0 = new ThreeEighthesIntegrator(Double.NaN);
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      doReturn((-1123.600261), 1195.131175377, 1.61949812578045E-182, 1.61949812578045E-182, 0.0).when(eventHandler0).g(anyDouble() , any(double[].class));
      SecantSolver secantSolver0 = new SecantSolver(1195.131175377);
      threeEighthesIntegrator0.addEventHandler(eventHandler0, 1916.06012264, 1195.131175377, 3404, (UnivariateSolver) secantSolver0);
      ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter0);
      ExpandableStatefulODE expandableStatefulODE1 = new ExpandableStatefulODE(firstOrderConverter0);
      // Undeclared exception!
      threeEighthesIntegrator0.integrate(expandableStatefulODE1, 1195.131175377);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator(1195.131175377, 6.450579408813831, 1195.131175377, 6.450579408813831);
      FixedStepHandler fixedStepHandler0 = mock(FixedStepHandler.class, new ViolatedAssumptionAnswer());
      highamHall54Integrator0.getEvaluations();
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator(1.2088773369194057, 1195.131175377, 0, 1.2088773369194057);
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      doReturn(7.663353127378024E218, 0.4673144817352295, 6.450579408813831).when(eventHandler0).g(anyDouble() , any(double[].class));
      BisectionSolver bisectionSolver0 = new BisectionSolver();
      graggBulirschStoerIntegrator0.addEventHandler(eventHandler0, (-1616.25122005207), (double) 0, 400, (UnivariateSolver) bisectionSolver0);
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      double[] doubleArray0 = new double[0];
      graggBulirschStoerIntegrator0.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, 1.2088773369194057, doubleArray0, (double) 0, doubleArray0);
      ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter0);
      ThreeEighthesIntegrator threeEighthesIntegrator0 = new ThreeEighthesIntegrator(400);
      expandableStatefulODE0.setTime(0.4673144817352295);
      threeEighthesIntegrator0.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, (-5652.48275), doubleArray0, (-4424.038), doubleArray0);
      threeEighthesIntegrator0.integrate(expandableStatefulODE0, 0.0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator(1195.131175377, 6.450579408813831, 1195.131175377, 6.450579408813831);
      FixedStepHandler fixedStepHandler0 = mock(FixedStepHandler.class, new ViolatedAssumptionAnswer());
      highamHall54Integrator0.getEvaluations();
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator(1.2088773369194057, 1195.131175377, 0, 1.2088773369194057);
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      doReturn((EventHandler.Action) null, (EventHandler.Action) null).when(eventHandler0).eventOccurred(anyDouble() , any(double[].class) , anyBoolean());
      doReturn((double)0, 1.2088773369194057, 1.0, (-1303.750556), 0.0).when(eventHandler0).g(anyDouble() , any(double[].class));
      BisectionSolver bisectionSolver0 = new BisectionSolver();
      graggBulirschStoerIntegrator0.addEventHandler(eventHandler0, 4.440892098500626E-13, (double) 0, 400, (UnivariateSolver) bisectionSolver0);
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      double[] doubleArray0 = new double[0];
      // Undeclared exception!
      graggBulirschStoerIntegrator0.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, 1.2088773369194057, doubleArray0, (double) 0, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ThreeEighthesIntegrator threeEighthesIntegrator0 = new ThreeEighthesIntegrator(1340.3297385537);
      threeEighthesIntegrator0.clearStepHandlers();
      threeEighthesIntegrator0.getCurrentSignedStepsize();
      threeEighthesIntegrator0.getCurrentStepStart();
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ThreeEighthesIntegrator threeEighthesIntegrator0 = new ThreeEighthesIntegrator((-1263.29855));
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(5).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      FixedStepHandler fixedStepHandler0 = mock(FixedStepHandler.class, new ViolatedAssumptionAnswer());
      StepNormalizerBounds stepNormalizerBounds0 = StepNormalizerBounds.NEITHER;
      StepNormalizer stepNormalizer0 = new StepNormalizer(2.2737367544323206E-10, fixedStepHandler0, stepNormalizerBounds0);
      threeEighthesIntegrator0.addStepHandler(stepNormalizer0);
      SecondOrderDifferentialEquations secondOrderDifferentialEquations1 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations1).getDimension();
      FirstOrderConverter firstOrderConverter1 = new FirstOrderConverter(secondOrderDifferentialEquations1);
      ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter1);
      expandableStatefulODE0.setTime(6.1407711078356886E265);
      MullerSolver mullerSolver0 = new MullerSolver();
      ThreeEighthesIntegrator threeEighthesIntegrator1 = new ThreeEighthesIntegrator((-776.496));
      EventHandler eventHandler1 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      mullerSolver0.getEvaluations();
      threeEighthesIntegrator1.addEventHandler(eventHandler1, (-776.496), (-1263.29855), Integer.MAX_VALUE, (UnivariateSolver) mullerSolver0);
      SecondaryEquations secondaryEquations0 = mock(SecondaryEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondaryEquations0).getDimension();
      expandableStatefulODE0.addSecondaryEquations(secondaryEquations0);
//      try { 
        threeEighthesIntegrator0.integrate(expandableStatefulODE0, 6.1407711078356886E265);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // too small integration interval: length = 0
//         //
//         verifyException("org.apache.commons.math3.ode.AbstractIntegrator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator(1195.131175377, 6.450579408813831, 1195.131175377, 6.450579408813831);
      FixedStepHandler fixedStepHandler0 = mock(FixedStepHandler.class, new ViolatedAssumptionAnswer());
      StepNormalizerMode stepNormalizerMode0 = StepNormalizerMode.INCREMENT;
      StepNormalizer stepNormalizer0 = new StepNormalizer(1.2088773369194057, fixedStepHandler0, stepNormalizerMode0);
      highamHall54Integrator0.addStepHandler(stepNormalizer0);
      highamHall54Integrator0.getEvaluations();
      highamHall54Integrator0.getEventHandlers();
      highamHall54Integrator0.setMaxEvaluations(0);
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator(1.2088773369194057, 1000.0, 0, 1.2088773369194057);
      graggBulirschStoerIntegrator0.setStabilityCheck(true, 0, 0, 6.450579408813831);
      highamHall54Integrator0.getOrder();
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0).when(eventHandler0).g(anyDouble() , any(double[].class));
      BisectionSolver bisectionSolver0 = new BisectionSolver();
      graggBulirschStoerIntegrator0.addEventHandler(eventHandler0, (double) 0, (-1217.8627045625), 2791, (UnivariateSolver) bisectionSolver0);
      double[] doubleArray0 = new double[0];
      graggBulirschStoerIntegrator0.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, 1.2088773369194057, doubleArray0, 0.0, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator(1195.131175377, 6.450579408813831, 1195.131175377, 6.450579408813831);
      FixedStepHandler fixedStepHandler0 = mock(FixedStepHandler.class, new ViolatedAssumptionAnswer());
      StepNormalizerMode stepNormalizerMode0 = StepNormalizerMode.INCREMENT;
      StepNormalizer stepNormalizer0 = new StepNormalizer(1.2088773369194057, fixedStepHandler0, stepNormalizerMode0);
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 1195.131175377;
      stepNormalizer0.init(1000.0, doubleArray0, 225.50000000045475);
      double[] doubleArray1 = new double[0];
      stepNormalizer0.init(6.450579408813831, doubleArray1, 1.2088773369194057);
      highamHall54Integrator0.addStepHandler(stepNormalizer0);
      highamHall54Integrator0.getEvaluations();
      highamHall54Integrator0.getEventHandlers();
      highamHall54Integrator0.setMaxEvaluations(0);
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator(1.2088773369194057, 1000.0, 0, 1.2088773369194057);
      graggBulirschStoerIntegrator0.setStabilityCheck(true, 0, 0, 6.450579408813831);
      highamHall54Integrator0.getOrder();
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      double[] doubleArray2 = new double[0];
      graggBulirschStoerIntegrator0.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, 1.2088773369194057, doubleArray2, 0.0, doubleArray2);
      DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator(1195.131175377, 5, doubleArray2, doubleArray2);
      graggBulirschStoerIntegrator0.getEventHandlers();
      graggBulirschStoerIntegrator0.computeDerivatives(0.0, doubleArray1, doubleArray1);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator(1195.131175377, 6.450579408813831, 1195.131175377, 6.450579408813831);
      FixedStepHandler fixedStepHandler0 = mock(FixedStepHandler.class, new ViolatedAssumptionAnswer());
      StepNormalizerMode stepNormalizerMode0 = StepNormalizerMode.INCREMENT;
      StepNormalizer stepNormalizer0 = new StepNormalizer(1.2088773369194057, fixedStepHandler0, stepNormalizerMode0);
      highamHall54Integrator0.addStepHandler(stepNormalizer0);
      highamHall54Integrator0.getEvaluations();
      highamHall54Integrator0.getEventHandlers();
      highamHall54Integrator0.setMaxEvaluations(0);
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator(1.2088773369194057, 1000.0, 0, 1.2088773369194057);
      graggBulirschStoerIntegrator0.setStabilityCheck(true, 0, 0, 6.450579408813831);
      highamHall54Integrator0.getOrder();
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      double[] doubleArray0 = new double[0];
      graggBulirschStoerIntegrator0.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, 1.2088773369194057, doubleArray0, 0.0, doubleArray0);
      DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator(1195.131175377, 5, doubleArray0, doubleArray0);
//      try { 
        highamHall54Integrator0.computeDerivatives(26.993471833046947, doubleArray0, doubleArray0);
//        fail("Expecting exception: IllegalStateException");
      
//      } catch(IllegalStateException e) {
//         //
//         // illegal state: maximal count (0) exceeded
//         //
//         verifyException("org.apache.commons.math3.util.Incrementor$1", e);
//      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator(1195.131175377, 0.0, 1195.131175377, 0.0);
      FixedStepHandler fixedStepHandler0 = mock(FixedStepHandler.class, new ViolatedAssumptionAnswer());
      StepNormalizerMode stepNormalizerMode0 = StepNormalizerMode.INCREMENT;
      StepNormalizer stepNormalizer0 = new StepNormalizer(0.0, fixedStepHandler0, stepNormalizerMode0);
      highamHall54Integrator0.addStepHandler(stepNormalizer0);
      highamHall54Integrator0.getEvaluations();
      highamHall54Integrator0.getEventHandlers();
      highamHall54Integrator0.setMaxEvaluations(875);
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator(0.0, 1000.0, 0.0, 0.0);
      graggBulirschStoerIntegrator0.setStabilityCheck(true, 875, 3, 0.0);
      highamHall54Integrator0.getOrder();
      highamHall54Integrator0.getCurrentStepStart();
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      double[] doubleArray0 = new double[0];
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator1 = new GraggBulirschStoerIntegrator(3358.5951929292737, 2.2737367544323206E-10, doubleArray0, doubleArray0);
      // Undeclared exception!
//      try { 
        graggBulirschStoerIntegrator1.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, 7.3409917428393E138, doubleArray0, 0.0, doubleArray0);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 0
//         //
//         verifyException("org.apache.commons.math3.ode.nonstiff.GraggBulirschStoerIntegrator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      double double0 = 1195.131175377;
      HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator(1195.131175377, 0.0, 1195.131175377, 0.0);
      FixedStepHandler fixedStepHandler0 = mock(FixedStepHandler.class, new ViolatedAssumptionAnswer());
      StepNormalizerMode stepNormalizerMode0 = StepNormalizerMode.INCREMENT;
      StepNormalizer stepNormalizer0 = new StepNormalizer(1.2088773369194057, fixedStepHandler0, stepNormalizerMode0);
      highamHall54Integrator0.addStepHandler(stepNormalizer0);
      highamHall54Integrator0.getEvaluations();
      highamHall54Integrator0.getEventHandlers();
      highamHall54Integrator0.setMaxEvaluations(875);
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator(1.2088773369194057, 1000.0, 875, 1.2088773369194057);
      graggBulirschStoerIntegrator0.setStabilityCheck(true, 875, 0, 0.0);
      highamHall54Integrator0.getOrder();
      highamHall54Integrator0.getCurrentStepStart();
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      double[] doubleArray0 = new double[0];
      graggBulirschStoerIntegrator0.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, 1.2088773369194057, doubleArray0, 0.0, doubleArray0);
      DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator(1000.0, 4.547473508864641E-10, 0.0, (-1123.600261));
      dormandPrince853Integrator0.getOrder();
      ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter0);
      // Undeclared exception!
      graggBulirschStoerIntegrator0.integrate(expandableStatefulODE0, 1.2088773369194057);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      double double0 = (-1.0);
      double double1 = 881.54772888;
      DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator(1424.0, (-1.0), 8.881784197001252E-13, 881.54772888);
      dormandPrince54Integrator0.getEvaluations();
      dormandPrince54Integrator0.getOrder();
      dormandPrince54Integrator0.getName();
      double double2 = 2.8421709430404007E-11;
      double double3 = 1297.7267590840743;
      AdamsMoultonIntegrator adamsMoultonIntegrator0 = new AdamsMoultonIntegrator(5, 31.844398950586662, 2.8421709430404007E-11, 0, 1297.7267590840743);
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter0);
      double double4 = (-2678.0);
      // Undeclared exception!
//      try { 
        adamsMoultonIntegrator0.integrate(expandableStatefulODE0, (-2678.0));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // matrix must have at least one column
//         //
//         verifyException("org.apache.commons.math3.linear.Array2DRowRealMatrix", e);
//      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      FixedStepHandler fixedStepHandler0 = mock(FixedStepHandler.class, new ViolatedAssumptionAnswer());
      StepNormalizerMode stepNormalizerMode0 = StepNormalizerMode.INCREMENT;
      StepNormalizer stepNormalizer0 = new StepNormalizer(1.2088773369194057, fixedStepHandler0, stepNormalizerMode0);
      int int0 = 875;
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator(1.2088773369194057, 1000.0, 0.0, 1.2088773369194057);
      boolean boolean0 = true;
      int int1 = 3;
      graggBulirschStoerIntegrator0.setStabilityCheck(true, 875, 3, 0.0);
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = new double[6];
      doubleArray1[0] = 1.2088773369194057;
      doubleArray1[3] = 0.0;
      doubleArray1[4] = (-3306.5);
      DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator(1170.0, 1195.131175377, doubleArray0, doubleArray1);
      dormandPrince853Integrator0.setMinReduction(1195.131175377);
      dormandPrince853Integrator0.getOrder();
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter0);
//      try { 
        dormandPrince853Integrator0.integrate(expandableStatefulODE0, 4.547473508864641E-10);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // 0 != 6
//         //
//         verifyException("org.apache.commons.math3.ode.nonstiff.AdaptiveStepsizeIntegrator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter0);
      StepNormalizerMode stepNormalizerMode0 = StepNormalizerMode.MULTIPLES;
      FixedStepHandler fixedStepHandler0 = mock(FixedStepHandler.class, new ViolatedAssumptionAnswer());
      StepNormalizer stepNormalizer0 = new StepNormalizer(582.8293026783, fixedStepHandler0, stepNormalizerMode0);
      ThreeEighthesIntegrator threeEighthesIntegrator0 = new ThreeEighthesIntegrator(252.510871179);
      threeEighthesIntegrator0.addStepHandler(stepNormalizer0);
      SecondOrderDifferentialEquations secondOrderDifferentialEquations1 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations1).getDimension();
      FirstOrderConverter firstOrderConverter1 = new FirstOrderConverter(secondOrderDifferentialEquations1);
      ExpandableStatefulODE expandableStatefulODE1 = new ExpandableStatefulODE(firstOrderConverter0);
      MullerSolver mullerSolver0 = new MullerSolver();
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      threeEighthesIntegrator0.setMaxEvaluations(0);
      threeEighthesIntegrator0.addEventHandler(eventHandler0, 2.3501806259155273, 1.460686206817627, Integer.MAX_VALUE, (UnivariateSolver) mullerSolver0);
      SecondaryEquations secondaryEquations0 = mock(SecondaryEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondaryEquations0).getDimension();
      expandableStatefulODE0.addSecondaryEquations(secondaryEquations0);
//      try { 
        threeEighthesIntegrator0.integrate(expandableStatefulODE1, 779.6637949862995);
//        fail("Expecting exception: IllegalStateException");
      
//      } catch(IllegalStateException e) {
//         //
//         // illegal state: maximal count (0) exceeded
//         //
//         verifyException("org.apache.commons.math3.util.Incrementor$1", e);
//      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator(1195.131175377, 0.0, 1195.131175377, 0.0);
      FixedStepHandler fixedStepHandler0 = mock(FixedStepHandler.class, new ViolatedAssumptionAnswer());
      StepNormalizerMode stepNormalizerMode0 = StepNormalizerMode.INCREMENT;
      StepNormalizer stepNormalizer0 = new StepNormalizer(0.0, fixedStepHandler0, stepNormalizerMode0);
      highamHall54Integrator0.addStepHandler(stepNormalizer0);
      highamHall54Integrator0.getEvaluations();
      highamHall54Integrator0.getEventHandlers();
      highamHall54Integrator0.setMaxGrowth(1195.131175377);
      highamHall54Integrator0.setMaxEvaluations(875);
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator(1195.131175377, 1000.0, 0.0, 1195.131175377);
      graggBulirschStoerIntegrator0.setStabilityCheck(true, 875, 3, 0.0);
      highamHall54Integrator0.getOrder();
      highamHall54Integrator0.getCurrentStepStart();
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      double[] doubleArray0 = new double[0];
      graggBulirschStoerIntegrator0.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, 0.0, doubleArray0, (-26.52676076463821), doubleArray0);
      DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator(0.0, 5, doubleArray0, doubleArray0);
      dormandPrince853Integrator0.getOrder();
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      ThreeEighthesIntegrator threeEighthesIntegrator0 = new ThreeEighthesIntegrator(1340.3297385537);
      // Undeclared exception!
//      try { 
        threeEighthesIntegrator0.integrate((ExpandableStatefulODE) null, 3.7911226630805945);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.ode.AbstractIntegrator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      double double0 = 1195.131175377;
      HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator(1195.131175377, 0.0, 1195.131175377, 0.0);
      FixedStepHandler fixedStepHandler0 = mock(FixedStepHandler.class, new ViolatedAssumptionAnswer());
      StepNormalizerMode stepNormalizerMode0 = StepNormalizerMode.INCREMENT;
      StepNormalizer stepNormalizer0 = new StepNormalizer(1.2088773369194057, fixedStepHandler0, stepNormalizerMode0);
      highamHall54Integrator0.addStepHandler(stepNormalizer0);
      highamHall54Integrator0.getEvaluations();
      highamHall54Integrator0.getEventHandlers();
      highamHall54Integrator0.setMaxEvaluations(875);
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator(1.2088773369194057, 1000.0, 0.0, 1.2088773369194057);
      graggBulirschStoerIntegrator0.setStabilityCheck(true, 875, 3, 0.0);
      highamHall54Integrator0.getOrder();
      highamHall54Integrator0.getCurrentStepStart();
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = new double[6];
      doubleArray1[0] = 4.94E-321;
      doubleArray1[1] = Double.NaN;
      doubleArray1[2] = Double.NaN;
      doubleArray1[3] = 0.0;
      doubleArray1[4] = (-3306.5);
      doubleArray1[5] = (double) 5;
//      try { 
        graggBulirschStoerIntegrator0.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, 96.8, doubleArray0, 0.0, doubleArray1);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // 6 != 0
//         //
//         verifyException("org.apache.commons.math3.ode.AbstractIntegrator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator(1195.131175377, 0.0, 1195.131175377, 0.0);
      FixedStepHandler fixedStepHandler0 = mock(FixedStepHandler.class, new ViolatedAssumptionAnswer());
      StepNormalizerMode stepNormalizerMode0 = StepNormalizerMode.INCREMENT;
      StepNormalizer stepNormalizer0 = new StepNormalizer(0.0, fixedStepHandler0, stepNormalizerMode0);
      highamHall54Integrator0.addStepHandler(stepNormalizer0);
      highamHall54Integrator0.getEvaluations();
      highamHall54Integrator0.getEventHandlers();
      highamHall54Integrator0.setMaxEvaluations(875);
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator(0.0, 1000.0, 0.0, 0.0);
      graggBulirschStoerIntegrator0.setStabilityCheck(true, 875, 3, 0.0);
      highamHall54Integrator0.getOrder();
      highamHall54Integrator0.getCurrentStepStart();
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      double[] doubleArray0 = new double[0];
      graggBulirschStoerIntegrator0.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, 0.0, doubleArray0, 4.547473508864641E-10, doubleArray0);
      DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator((-2208.885146178964), 1000.0, doubleArray0, doubleArray0);
      dormandPrince853Integrator0.getOrder();
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator(1195.131175377, 0.0, 1195.131175377, 0.0);
      FixedStepHandler fixedStepHandler0 = mock(FixedStepHandler.class, new ViolatedAssumptionAnswer());
      StepNormalizerMode stepNormalizerMode0 = StepNormalizerMode.INCREMENT;
      StepNormalizer stepNormalizer0 = new StepNormalizer(0.0, fixedStepHandler0, stepNormalizerMode0);
      highamHall54Integrator0.getEvaluations();
      highamHall54Integrator0.getEventHandlers();
      highamHall54Integrator0.setMaxEvaluations(875);
      double double0 = 0.0;
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator(1195.131175377, 1000.0, 0.0, 1195.131175377);
      graggBulirschStoerIntegrator0.setStabilityCheck(true, 875, 3, 0.0);
      highamHall54Integrator0.getOrder();
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      double[] doubleArray0 = new double[0];
      graggBulirschStoerIntegrator0.setMaxEvaluations(875);
//      try { 
        graggBulirschStoerIntegrator0.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, 1195.131175377, doubleArray0, 0.0, doubleArray0);
//        fail("Expecting exception: IllegalStateException");
      
//      } catch(IllegalStateException e) {
//         //
//         // illegal state: maximal count (875) exceeded
//         //
//         verifyException("org.apache.commons.math3.util.Incrementor$1", e);
//      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator(1195.131175377, 0.0, 1195.131175377, 0.0);
      FixedStepHandler fixedStepHandler0 = mock(FixedStepHandler.class, new ViolatedAssumptionAnswer());
      StepNormalizerMode stepNormalizerMode0 = StepNormalizerMode.INCREMENT;
      StepNormalizer stepNormalizer0 = new StepNormalizer(0.0, fixedStepHandler0, stepNormalizerMode0);
      highamHall54Integrator0.addStepHandler(stepNormalizer0);
      highamHall54Integrator0.getEvaluations();
      highamHall54Integrator0.getEventHandlers();
      highamHall54Integrator0.setMaxEvaluations(875);
      double double0 = 0.0;
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator(1195.131175377, 1000.0, 0.0, 1195.131175377);
      graggBulirschStoerIntegrator0.setStabilityCheck(true, 875, 3, 0.0);
      highamHall54Integrator0.getOrder();
      highamHall54Integrator0.getCurrentStepStart();
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      double[] doubleArray0 = new double[0];
//      try { 
        graggBulirschStoerIntegrator0.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, 0.0, doubleArray0, 0.0, doubleArray0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // too small integration interval: length = 0
//         //
//         verifyException("org.apache.commons.math3.ode.AbstractIntegrator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator(1195.131175377, 0.0, 1195.131175377, 0.0);
      FixedStepHandler fixedStepHandler0 = mock(FixedStepHandler.class, new ViolatedAssumptionAnswer());
      StepNormalizerMode stepNormalizerMode0 = StepNormalizerMode.INCREMENT;
      StepNormalizer stepNormalizer0 = new StepNormalizer(1.2088773369194057, fixedStepHandler0, stepNormalizerMode0);
      highamHall54Integrator0.addStepHandler(stepNormalizer0);
      highamHall54Integrator0.getEvaluations();
      highamHall54Integrator0.getEventHandlers();
      highamHall54Integrator0.setMaxEvaluations(875);
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator(1.2088773369194057, 1000.0, 0.0, 1.2088773369194057);
      graggBulirschStoerIntegrator0.setStabilityCheck(true, 875, 3, 0.0);
      highamHall54Integrator0.getOrder();
      highamHall54Integrator0.getCurrentStepStart();
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      double[] doubleArray0 = new double[0];
      graggBulirschStoerIntegrator0.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, 1.2088773369194057, doubleArray0, 0.0, doubleArray0);
      DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator(0.0, 5, doubleArray0, doubleArray0);
      dormandPrince853Integrator0.getOrder();
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator((-1371.565606186124), 0.0, (-1738.16), 1.0);
      dormandPrince853Integrator0.getCurrentSignedStepsize();
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      double double0 = 0.0;
      HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator(1195.131175377, 0.0, 1195.131175377, 0.0);
      FixedStepHandler fixedStepHandler0 = mock(FixedStepHandler.class, new ViolatedAssumptionAnswer());
      StepNormalizerMode stepNormalizerMode0 = StepNormalizerMode.INCREMENT;
      StepNormalizer stepNormalizer0 = new StepNormalizer(0.0, fixedStepHandler0, stepNormalizerMode0);
      highamHall54Integrator0.getEvaluations();
      highamHall54Integrator0.setMaxEvaluations(0);
      double double1 = 0.0;
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator(1195.131175377, 1000.0, 0.0, 1195.131175377);
      int int0 = 3;
      graggBulirschStoerIntegrator0.setStabilityCheck(true, 0, 3, 0.0);
      highamHall54Integrator0.getOrder();
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      double[] doubleArray0 = new double[0];
      // Undeclared exception!
      graggBulirschStoerIntegrator0.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, 1195.131175377, doubleArray0, 0.0, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator(1195.131175377, 0.0, 1195.131175377, 0.0);
      FixedStepHandler fixedStepHandler0 = mock(FixedStepHandler.class, new ViolatedAssumptionAnswer());
      StepNormalizerMode stepNormalizerMode0 = StepNormalizerMode.INCREMENT;
      StepNormalizer stepNormalizer0 = new StepNormalizer(0.0, fixedStepHandler0, stepNormalizerMode0);
      highamHall54Integrator0.getEvaluations();
      highamHall54Integrator0.getEventHandlers();
      highamHall54Integrator0.setMaxEvaluations(875);
      double double0 = 0.0;
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator(1195.131175377, 1000.0, 0.0, 1195.131175377);
      graggBulirschStoerIntegrator0.setStabilityCheck(true, 875, 3, 0.0);
      highamHall54Integrator0.getOrder();
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      double[] doubleArray0 = new double[0];
      // Undeclared exception!
      graggBulirschStoerIntegrator0.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, 1195.131175377, doubleArray0, 0.0, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      double double0 = (-1.3333333333333333);
      DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator((-1.3333333333333333), (-1.3333333333333333), (-1.3333333333333333), (-1.3333333333333333));
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(1).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter0);
      StepNormalizerMode stepNormalizerMode0 = StepNormalizerMode.MULTIPLES;
      FixedStepHandler fixedStepHandler0 = mock(FixedStepHandler.class, new ViolatedAssumptionAnswer());
      StepNormalizer stepNormalizer0 = new StepNormalizer((-1.3333333333333333), fixedStepHandler0, stepNormalizerMode0);
      double double1 = 252.510871179;
      ThreeEighthesIntegrator threeEighthesIntegrator0 = new ThreeEighthesIntegrator(252.510871179);
      threeEighthesIntegrator0.addStepHandler(stepNormalizer0);
      SecondOrderDifferentialEquations secondOrderDifferentialEquations1 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(3).when(secondOrderDifferentialEquations1).getDimension();
      FirstOrderConverter firstOrderConverter1 = new FirstOrderConverter(secondOrderDifferentialEquations1);
      ExpandableStatefulODE expandableStatefulODE1 = new ExpandableStatefulODE(firstOrderConverter1);
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 1190.6595862, (-4.776104368314602E-8), 4.94E-321).when(eventHandler0).g(anyDouble() , any(double[].class));
      MullerSolver mullerSolver0 = new MullerSolver();
      threeEighthesIntegrator0.addEventHandler(eventHandler0, 0.0, 0.0, 1, (UnivariateSolver) mullerSolver0);
      SecondaryEquations secondaryEquations0 = mock(SecondaryEquations.class, new ViolatedAssumptionAnswer());
      doReturn(3).when(secondaryEquations0).getDimension();
      expandableStatefulODE1.addSecondaryEquations(secondaryEquations0);
//      try { 
        threeEighthesIntegrator0.integrate(expandableStatefulODE1, 0.0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // number of iterations=2, maximum iterations=0, initial=\uFFFD, lower bound=\uFFFD, upper bound=\uFFFD, final a value=\uFFFD, final b value=\uFFFD, f(a)=0, f(b)=0
//         //
//         verifyException("org.apache.commons.math3.analysis.solvers.UnivariateSolverUtils", e);
//      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      double double0 = 0.0;
      ThreeEighthesIntegrator threeEighthesIntegrator0 = new ThreeEighthesIntegrator(0.0);
      FixedStepHandler fixedStepHandler0 = mock(FixedStepHandler.class, new ViolatedAssumptionAnswer());
      StepNormalizerMode stepNormalizerMode0 = StepNormalizerMode.INCREMENT;
      StepNormalizer stepNormalizer0 = new StepNormalizer(582.8293026783, fixedStepHandler0, stepNormalizerMode0);
      threeEighthesIntegrator0.addStepHandler(stepNormalizer0);
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter0);
      MullerSolver mullerSolver0 = new MullerSolver();
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(eventHandler0).g(anyDouble() , any(double[].class));
      expandableStatefulODE0.setTime((-1.0));
      int int0 = (-1009);
      threeEighthesIntegrator0.addEventHandler(eventHandler0, 0.0, 0.0, (-1009), (UnivariateSolver) mullerSolver0);
      SecondaryEquations secondaryEquations0 = mock(SecondaryEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondaryEquations0).getDimension();
      expandableStatefulODE0.addSecondaryEquations(secondaryEquations0);
      double double1 = 0.0;
      // Undeclared exception!
      threeEighthesIntegrator0.integrate(expandableStatefulODE0, 0.0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      double double0 = 823.831258929;
      double double1 = 0.0;
      DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator((-1.3333333333333333), 4.94E-321, (-1991.0), (-1991.0));
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      double double2 = 1000.0;
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 4.94E-321;
      double[] doubleArray1 = new double[9];
      doubleArray1[0] = 823.831258929;
      doubleArray1[1] = (-343.5913363236);
      doubleArray1[2] = 0.0;
      doubleArray1[3] = (-1991.0);
      doubleArray1[4] = 0.0;
      doubleArray1[5] = 4.94E-321;
      doubleArray1[6] = 1000.0;
      doubleArray1[7] = 256.93;
      doubleArray1[8] = 1000.0;
//      try { 
        dormandPrince54Integrator0.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, 0.0, doubleArray0, 0.0, doubleArray1);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // 1 != 0
//         //
//         verifyException("org.apache.commons.math3.ode.AbstractIntegrator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      double double0 = (-1.3333333333333333);
      DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator((-1.3333333333333333), (-1.3333333333333333), (-1.3333333333333333), (-1.3333333333333333));
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(1).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter0);
      StepNormalizerMode stepNormalizerMode0 = StepNormalizerMode.MULTIPLES;
      FixedStepHandler fixedStepHandler0 = mock(FixedStepHandler.class, new ViolatedAssumptionAnswer());
      StepNormalizer stepNormalizer0 = new StepNormalizer((-1.3333333333333333), fixedStepHandler0, stepNormalizerMode0);
      double double1 = 252.510871179;
      ThreeEighthesIntegrator threeEighthesIntegrator0 = new ThreeEighthesIntegrator(252.510871179);
      threeEighthesIntegrator0.addStepHandler(stepNormalizer0);
      SecondOrderDifferentialEquations secondOrderDifferentialEquations1 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(1).when(secondOrderDifferentialEquations1).getDimension();
      FirstOrderConverter firstOrderConverter1 = new FirstOrderConverter(secondOrderDifferentialEquations1);
      ExpandableStatefulODE expandableStatefulODE1 = new ExpandableStatefulODE(firstOrderConverter1);
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      doReturn((-1.3333333333333333), 1.1083180046837618E231, 0.25088030099868774).when(eventHandler0).g(anyDouble() , any(double[].class));
      MullerSolver mullerSolver0 = new MullerSolver();
      threeEighthesIntegrator0.addEventHandler(eventHandler0, 0.0, 0.0, 1, (UnivariateSolver) mullerSolver0);
      SecondaryEquations secondaryEquations0 = mock(SecondaryEquations.class, new ViolatedAssumptionAnswer());
      doReturn(1).when(secondaryEquations0).getDimension();
      expandableStatefulODE1.addSecondaryEquations(secondaryEquations0);
//      try { 
        threeEighthesIntegrator0.integrate(expandableStatefulODE1, 0.0);
//        fail("Expecting exception: IllegalStateException");
      
//      } catch(IllegalStateException e) {
//         //
//         // illegal state: maximal count (1) exceeded: evaluations
//         //
//         verifyException("org.apache.commons.math3.analysis.solvers.BaseAbstractUnivariateSolver", e);
//      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      double double0 = 1195.131175377;
      HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator(1195.131175377, 0.0, 1195.131175377, 0.0);
      FixedStepHandler fixedStepHandler0 = mock(FixedStepHandler.class, new ViolatedAssumptionAnswer());
      StepNormalizerMode stepNormalizerMode0 = StepNormalizerMode.INCREMENT;
      StepNormalizer stepNormalizer0 = new StepNormalizer(0.0, fixedStepHandler0, stepNormalizerMode0);
      highamHall54Integrator0.addStepHandler(stepNormalizer0);
      highamHall54Integrator0.getEvaluations();
      highamHall54Integrator0.getEventHandlers();
      highamHall54Integrator0.setMaxEvaluations(875);
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator(0.0, 1000.0, 0.0, 0.0);
      graggBulirschStoerIntegrator0.setStabilityCheck(true, (-1417), 3, 0.0);
      highamHall54Integrator0.getOrder();
      highamHall54Integrator0.getCurrentStepStart();
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      double[] doubleArray0 = new double[0];
//      try { 
        graggBulirschStoerIntegrator0.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, 0.0, doubleArray0, 0.0, doubleArray0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // too small integration interval: length = 0
//         //
//         verifyException("org.apache.commons.math3.ode.AbstractIntegrator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator((-1.8379759110070617), 422.6174, (-1.8379759110070617), 508.1301);
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(203).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 508.1301;
      doubleArray0[1] = (-1.8379759110070617);
      doubleArray0[2] = 508.1301;
      doubleArray0[3] = (-1.8379759110070617);
      doubleArray0[4] = (-1.8379759110070617);
      doubleArray0[3] = 422.6174;
      doubleArray0[6] = 508.1301;
      dormandPrince853Integrator0.getCurrentSignedStepsize();
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      double double0 = 422.6174;
      DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator((-1.8379759110070617), 422.6174, (-1.8379759110070617), 508.1301);
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(935).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 508.1301;
      doubleArray0[1] = (-1.8379759110070617);
      doubleArray0[2] = 508.1301;
      doubleArray0[3] = (-1.8379759110070617);
      doubleArray0[4] = (-1.8379759110070617);
      doubleArray0[5] = 422.6174;
      doubleArray0[6] = 508.1301;
//      try { 
        dormandPrince853Integrator0.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, (-1.8379759110070617), doubleArray0, (-1.8379759110070617), doubleArray0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // 7 != 1,870
//         //
//         verifyException("org.apache.commons.math3.ode.AbstractIntegrator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      double double0 = (-1.3333333333333333);
      DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator((-1.3333333333333333), (-1.3333333333333333), (-1.3333333333333333), (-1.3333333333333333));
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(1).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter0);
      StepNormalizerMode stepNormalizerMode0 = StepNormalizerMode.MULTIPLES;
      FixedStepHandler fixedStepHandler0 = mock(FixedStepHandler.class, new ViolatedAssumptionAnswer());
      StepNormalizer stepNormalizer0 = new StepNormalizer((-1.3333333333333333), fixedStepHandler0, stepNormalizerMode0);
      double double1 = 252.510871179;
      ThreeEighthesIntegrator threeEighthesIntegrator0 = new ThreeEighthesIntegrator(252.510871179);
      threeEighthesIntegrator0.addStepHandler(stepNormalizer0);
      SecondOrderDifferentialEquations secondOrderDifferentialEquations1 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations1).getDimension();
      FirstOrderConverter firstOrderConverter1 = new FirstOrderConverter(secondOrderDifferentialEquations1);
      ExpandableStatefulODE expandableStatefulODE1 = new ExpandableStatefulODE(firstOrderConverter1);
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(eventHandler0).g(anyDouble() , any(double[].class));
      MullerSolver mullerSolver0 = new MullerSolver();
      threeEighthesIntegrator0.addEventHandler(eventHandler0, 0.0, 0.0, 1, (UnivariateSolver) mullerSolver0);
      SecondaryEquations secondaryEquations0 = mock(SecondaryEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondaryEquations0).getDimension();
      expandableStatefulODE1.addSecondaryEquations(secondaryEquations0);
      // Undeclared exception!
      threeEighthesIntegrator0.integrate(expandableStatefulODE1, 0.0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator(582.8293026783, (-1738.16), (-1738.16), (-1391.77853181));
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      MullerSolver mullerSolver0 = new MullerSolver((-1391.77853181), (-1391.77853181));
      dormandPrince853Integrator0.addEventHandler(eventHandler0, Double.NaN, 582.8293026783, (-1276), (UnivariateSolver) mullerSolver0);
      dormandPrince853Integrator0.setMaxEvaluations(935);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.0;
      DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator(0.0, 0.0, doubleArray0, doubleArray0);
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator(501.95695, 0.0, 0.0, 0.0);
      graggBulirschStoerIntegrator0.setStepSizeControl(3479.64535838, 501.95695, 3479.64535838, 0.0);
      graggBulirschStoerIntegrator0.setMaxEvaluations(1138720628);
      graggBulirschStoerIntegrator0.getEvaluations();
      graggBulirschStoerIntegrator0.setStepSizeControl(0.0, (double) 431, 1243.84976898, 0.0);
      graggBulirschStoerIntegrator0.setOrderControl(431, 0.0, 2.220446049250313E-13);
      DummyStepHandler dummyStepHandler0 = DummyStepHandler.getInstance();
      graggBulirschStoerIntegrator0.addStepHandler(dummyStepHandler0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      ClassicalRungeKuttaIntegrator classicalRungeKuttaIntegrator0 = new ClassicalRungeKuttaIntegrator(0.03709200011850479);
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      SecantSolver secantSolver0 = new SecantSolver((-1.3020833333333333));
      classicalRungeKuttaIntegrator0.addEventHandler(eventHandler0, 2776.071678252697, (-1.3020833333333333), (-54), (UnivariateSolver) secantSolver0);
      classicalRungeKuttaIntegrator0.clearEventHandlers();
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 0.0;
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator(0.0, 0.0, doubleArray0, doubleArray0);
      graggBulirschStoerIntegrator0.setOrderControl(1347, 1347, 0.0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      double double0 = 5306.8832;
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator(0.3777405619621277, 5306.8832, 0.3777405619621277, (-488.836));
      DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator(0.3777405619621277, (-488.836), 31.844398950586662, 5306.8832);
      int int0 = Integer.MAX_VALUE;
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 5306.8832;
      doubleArray0[1] = 31.844398950586662;
      doubleArray0[2] = (double) Integer.MAX_VALUE;
      doubleArray0[3] = (-488.836);
      doubleArray0[4] = (double) Integer.MAX_VALUE;
      doubleArray0[5] = 8.43527683868743E-8;
      doubleArray0[6] = 13.592708611341823;
      doubleArray0[7] = (-488.836);
      double[] doubleArray1 = new double[6];
      doubleArray1[0] = 0.3777405619621277;
      doubleArray1[1] = 1923.281361061;
      doubleArray1[2] = 8.43527683868743E-8;
      doubleArray1[3] = 31.844398950586662;
      doubleArray1[4] = (double) Integer.MAX_VALUE;
      doubleArray1[5] = 0.3777405619621277;
      // Undeclared exception!
//      try { 
        dormandPrince54Integrator0.integrate((FirstOrderDifferentialEquations) null, 8.43527683868743E-8, doubleArray0, 1.4838639396411233, doubleArray1);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.ode.AbstractIntegrator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator((-1.8379759110070617), 422.6174, (-1.8379759110070617), 508.1301);
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 508.1301;
      doubleArray0[1] = (-1.8379759110070617);
      doubleArray0[2] = 508.1301;
      doubleArray0[3] = (-1.8379759110070617);
      doubleArray0[4] = (-1.8379759110070617);
      doubleArray0[5] = 422.6174;
      doubleArray0[6] = 508.1301;
//      try { 
        dormandPrince853Integrator0.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, (-1.8379759110070617), doubleArray0, (-1.8379759110070617), doubleArray0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // 7 != 0
//         //
//         verifyException("org.apache.commons.math3.ode.AbstractIntegrator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 7034.2701;
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator(7034.2701, 7034.2701, doubleArray0, doubleArray0);
      MullerSolver2 mullerSolver2_0 = new MullerSolver2((-2478.565664394106));
      graggBulirschStoerIntegrator0.addEventHandler((EventHandler) null, 0.0, 7034.2701, 48, (UnivariateSolver) mullerSolver2_0);
      graggBulirschStoerIntegrator0.getEventHandlers();
      graggBulirschStoerIntegrator0.setControlFactors((-2478.565664394106), 1310.03858, (-2478.565664394106), (-1412.3903605756561));
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator((-261.076473), (-1.0), (-261.076473), (-1.0));
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (-1.0);
      doubleArray0[1] = (-1.0);
      doubleArray0[2] = (-1.0);
      doubleArray0[3] = (-3363.0);
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator((-1.0), (-1.0), doubleArray0, doubleArray0);
      graggBulirschStoerIntegrator0.getEventHandlers();
      graggBulirschStoerIntegrator0.setInterpolationControl(true, 117);
      graggBulirschStoerIntegrator0.setOrderControl(5, 1772.27048, (-1.0));
      highamHall54Integrator0.clearStepHandlers();
      graggBulirschStoerIntegrator0.setOrderControl(0, 175.270365, (-1.0));
      graggBulirschStoerIntegrator0.clearStepHandlers();
      highamHall54Integrator0.getEvaluations();
      graggBulirschStoerIntegrator0.getCurrentStepStart();
      highamHall54Integrator0.getEvaluations();
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      GillIntegrator gillIntegrator0 = new GillIntegrator(Double.NaN);
      gillIntegrator0.getEventHandlers();
      DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator((-8.833499967268279E225), 0.0, (-1393.115797447858), Double.NaN);
      dormandPrince54Integrator0.setMinReduction((-8.833499967268279E225));
      dormandPrince54Integrator0.getOrder();
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator((-1250.2169993371774), 3047.30907, (-1250.2169993371774), Double.NaN);
      graggBulirschStoerIntegrator0.addEventHandler((EventHandler) null, 2888.30599416, 1195.131175377, 5);
      graggBulirschStoerIntegrator0.setInterpolationControl(false, 1655);
      dormandPrince54Integrator0.getCurrentStepStart();
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator((-1391.77853181), 582.8293026783, (-1738.16), 1518.2752012721);
      dormandPrince54Integrator0.getName();
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (-1.0);
      doubleArray0[1] = (-1.0);
      doubleArray0[2] = (-1.0);
      doubleArray0[3] = (-1.0);
      doubleArray0[4] = (-1.0);
      doubleArray0[5] = (-1.0);
      doubleArray0[6] = (-1.0);
      doubleArray0[7] = (-1.0);
      DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator((-1.0), (-1.0), doubleArray0, doubleArray0);
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator(0.0, 1909.58, (-1.0), 1838.27704871997);
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver((-478.575), (-0.3333333333333333), (-1.0));
      graggBulirschStoerIntegrator0.addEventHandler(eventHandler0, (-1.0), (-1.0), Integer.MAX_VALUE, (UnivariateSolver) regulaFalsiSolver0);
      graggBulirschStoerIntegrator0.setMaxEvaluations((-2181));
      EventHandler eventHandler1 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      graggBulirschStoerIntegrator0.addEventHandler(eventHandler1, (double) 1230, (double) (-2181), 1230);
      graggBulirschStoerIntegrator0.setStabilityCheck(false, 1230, 1, (-686.9138132147384));
      graggBulirschStoerIntegrator0.clearStepHandlers();
      graggBulirschStoerIntegrator0.setOrderControl(0, (-1.0), 0.0);
      graggBulirschStoerIntegrator0.getName();
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator(582.8293026783, 582.8293026783, 1425.3, (-3303.3938563526));
      dormandPrince853Integrator0.getCurrentSignedStepsize();
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator(2549.286996691394, 884.2006, 582.8293026783, 884.2006);
      graggBulirschStoerIntegrator0.setInterpolationControl(false, 2147483645);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      ThreeEighthesIntegrator threeEighthesIntegrator0 = new ThreeEighthesIntegrator(0.0);
      threeEighthesIntegrator0.getMaxEvaluations();
      threeEighthesIntegrator0.getMaxEvaluations();
      threeEighthesIntegrator0.getMaxEvaluations();
      threeEighthesIntegrator0.getStepHandlers();
      threeEighthesIntegrator0.getCurrentSignedStepsize();
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = Double.NaN;
      doubleArray0[1] = (double) Integer.MAX_VALUE;
      doubleArray0[2] = (-658.9);
      doubleArray0[3] = (double) Integer.MAX_VALUE;
      doubleArray0[4] = 0.0;
      doubleArray0[5] = 0.0;
      doubleArray0[6] = (double) Integer.MAX_VALUE;
      doubleArray0[7] = (double) Integer.MAX_VALUE;
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator(0.0, 0.0, doubleArray0, doubleArray0);
      graggBulirschStoerIntegrator0.clearEventHandlers();
      graggBulirschStoerIntegrator0.setOrderControl(0, 2.147483647E9, (-658.9));
      FixedStepHandler fixedStepHandler0 = mock(FixedStepHandler.class, new ViolatedAssumptionAnswer());
      StepNormalizerMode stepNormalizerMode0 = StepNormalizerMode.MULTIPLES;
      StepNormalizer stepNormalizer0 = new StepNormalizer((-1.2251564463762044), fixedStepHandler0, stepNormalizerMode0);
      threeEighthesIntegrator0.addStepHandler(stepNormalizer0);
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter0);
      SecondaryEquations secondaryEquations0 = mock(SecondaryEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondaryEquations0).getDimension();
      expandableStatefulODE0.addSecondaryEquations(secondaryEquations0);
      // Undeclared exception!
      threeEighthesIntegrator0.integrate(expandableStatefulODE0, (double) Integer.MAX_VALUE);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      double double0 = (-1.0);
      HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator((-261.076473), (-1.0), (-261.076473), (-1.0));
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (-1.0);
      doubleArray0[1] = (-1.0);
      doubleArray0[2] = (-1.0);
      double double1 = (-3363.0);
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter0);
      // Undeclared exception!
      highamHall54Integrator0.integrate(expandableStatefulODE0, (-1176.36025123));
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      int int0 = 5;
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (double) 5;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 0.0;
      doubleArray0[5] = 0.0;
      doubleArray0[6] = (double) 5;
      doubleArray0[7] = (double) 5;
      AdamsBashforthIntegrator adamsBashforthIntegrator0 = new AdamsBashforthIntegrator(5, 0.0, 5, doubleArray0, doubleArray0);
      adamsBashforthIntegrator0.getStepHandlers();
      double double0 = 1864.235596379;
      adamsBashforthIntegrator0.setInitialStepSize(1864.235596379);
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator(5.0, 0.0, doubleArray0, doubleArray0);
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter0);
//      try { 
        graggBulirschStoerIntegrator0.integrate(expandableStatefulODE0, (-2610.2371514));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // 0 != 8
//         //
//         verifyException("org.apache.commons.math3.ode.nonstiff.AdaptiveStepsizeIntegrator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      double double0 = (-2933.6617907786);
      EulerIntegrator eulerIntegrator0 = new EulerIntegrator((-2933.6617907786));
      double[] doubleArray0 = null;
      // Undeclared exception!
//      try { 
        eulerIntegrator0.computeDerivatives((-2933.6617907786), (double[]) null, (double[]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      double double0 = 4784.0;
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 1761.41;
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator(1761.41, 4784.0, doubleArray0, doubleArray0);
      graggBulirschStoerIntegrator0.clearEventHandlers();
      graggBulirschStoerIntegrator0.getEventHandlers();
      graggBulirschStoerIntegrator0.setControlFactors(4784.0, 0.0, 1761.41, 0.0);
      graggBulirschStoerIntegrator0.getMaxEvaluations();
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
//      try { 
        graggBulirschStoerIntegrator0.initializeStep(false, Integer.MAX_VALUE, doubleArray0, 1000.0, doubleArray0, doubleArray0, doubleArray0, doubleArray0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      ThreeEighthesIntegrator threeEighthesIntegrator0 = new ThreeEighthesIntegrator(0.0);
      threeEighthesIntegrator0.getMaxEvaluations();
      threeEighthesIntegrator0.getMaxEvaluations();
      threeEighthesIntegrator0.getMaxEvaluations();
      threeEighthesIntegrator0.getStepHandlers();
      double double0 = new Double(0.0);
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (double) Integer.MAX_VALUE;
      doubleArray0[2] = (-658.9);
      doubleArray0[7] = (double) Integer.MAX_VALUE;
      doubleArray0[4] = 0.0;
      doubleArray0[5] = 0.0;
      doubleArray0[6] = (double) Integer.MAX_VALUE;
      doubleArray0[0] = (double) Integer.MAX_VALUE;
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator(0.0, 0.0, doubleArray0, doubleArray0);
      graggBulirschStoerIntegrator0.clearEventHandlers();
      graggBulirschStoerIntegrator0.setOrderControl(0, 0.0, (-658.9));
      double double1 = 0.0;
      DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator(732.809994, 0.0, doubleArray0, doubleArray0);
      // Undeclared exception!
//      try { 
        dormandPrince54Integrator0.integrate((ExpandableStatefulODE) null, (double) Integer.MAX_VALUE);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.ode.AbstractIntegrator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator(1744.68, 1332.727, 1744.68, (-86.55));
      dormandPrince853Integrator0.getEvaluations();
      dormandPrince853Integrator0.getEventHandlers();
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (-86.55);
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (-86.55);
      doubleArray0[3] = (-2206.968611);
      doubleArray0[4] = (-86.55);
      doubleArray0[5] = 1744.68;
      doubleArray0[6] = (double) 0;
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator((-86.55), (-2206.968611), doubleArray0, doubleArray0);
      graggBulirschStoerIntegrator0.addStepHandler((StepHandler) null);
      assertEquals(86.55, graggBulirschStoerIntegrator0.getMinStep(), 0.01);
  }
}
