/*
 * This file was automatically generated by EvoSuite
 * Fri Oct 22 22:21:53 GMT 2021
 */

package org.jfree.data.time;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.time.Instant;
import java.time.LocalDateTime;
import java.time.ZoneId;
import java.time.ZoneOffset;
import java.time.ZonedDateTime;
import java.util.Calendar;
import java.util.Date;
import java.util.GregorianCalendar;
import java.util.Locale;
import java.util.SimpleTimeZone;
import java.util.TimeZone;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.mock.java.time.MockInstant;
import org.evosuite.runtime.mock.java.time.MockLocalDateTime;
import org.evosuite.runtime.mock.java.time.MockZonedDateTime;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.evosuite.runtime.mock.java.util.MockGregorianCalendar;
import org.jfree.data.time.Month;
import org.jfree.data.time.RegularTimePeriod;
import org.jfree.data.time.SpreadsheetDate;
import org.jfree.data.time.Week;
import org.jfree.data.time.Year;
import org.junit.runner.RunWith;
import sun.util.calendar.ZoneInfo;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Week_ESTest extends Week_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Week week0 = new Week();
      Week week1 = (Week)week0.previous();
      int int0 = week1.compareTo(week0);
      assertEquals(1392409281319L, week1.getLastMillisecond());
      assertEquals(6, week1.getWeek());
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      Week week0 = new Week(1, (-146));
      mockDate0.setTime(1);
      Week week1 = new Week(mockDate0, week0.DEFAULT_TIME_ZONE);
      boolean boolean0 = week0.equals(week1);
      assertEquals((-7737L), week0.getSerialIndex());
      assertEquals(0L, week1.getLastMillisecond());
      assertFalse(week1.equals((Object)week0));
      assertEquals(104411L, week1.getSerialIndex());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      MockDate mockDate0 = new MockDate(10, 10, 10, 10, 10);
      Week week0 = new Week(mockDate0);
      Week week1 = new Week(53, 53);
      boolean boolean0 = week0.equals(week1);
      assertFalse(boolean0);
      assertEquals(1392409281319L, week1.getLastMillisecond());
      assertEquals(2862L, week1.getSerialIndex());
      assertEquals(101276L, week0.getSerialIndex());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Year year0 = new Year(9999);
      Week week0 = new Week(2127, year0);
      RegularTimePeriod regularTimePeriod0 = week0.next();
      assertEquals(1392409281319L, week0.getLastMillisecond());
      assertNull(regularTimePeriod0);
      assertEquals(79, week0.getWeek());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      MockDate mockDate0 = new MockDate((-1), 46, 52, (-1), 0);
      Week week0 = new Week(mockDate0);
      RegularTimePeriod regularTimePeriod0 = week0.next();
      assertEquals(1392409281319L, regularTimePeriod0.getLastMillisecond());
      assertEquals(52, week0.getWeek());
      assertNotNull(regularTimePeriod0);
      assertEquals(100860L, regularTimePeriod0.getSerialIndex());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      MockDate mockDate0 = new MockDate(0, 0, 0);
      Week week0 = new Week(mockDate0);
      RegularTimePeriod regularTimePeriod0 = week0.previous();
      assertEquals(100701L, week0.getSerialIndex());
      assertNull(regularTimePeriod0);
      assertEquals((-2209075200001L), week0.getLastMillisecond());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Week week0 = new Week(0, 0);
      int int0 = week0.getYearValue();
      assertEquals(1392409281319L, week0.getLastMillisecond());
      assertEquals(0L, week0.getSerialIndex());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      MockDate mockDate0 = new MockDate((-274L));
      TimeZone timeZone0 = TimeZone.getTimeZone("");
      Locale locale0 = Locale.ENGLISH;
      Week week0 = new Week(mockDate0, timeZone0, locale0);
      int int0 = week0.getYearValue();
      assertEquals(104411L, week0.getSerialIndex());
      assertEquals((-275L), week0.getLastMillisecond());
      assertEquals(1970, int0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Week week0 = new Week();
      System.setCurrentTimeMillis(0);
      week0.getYear();
      assertEquals(1392409281319L, week0.getLastMillisecond());
      assertEquals(7, week0.getWeek());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Year year0 = new Year();
      Week week0 = new Week(0, year0);
      System.setCurrentTimeMillis((-6286L));
      week0.getYear();
      assertEquals(1392409281319L, week0.getLastMillisecond());
      assertEquals(0, week0.getWeek());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      MockDate mockDate0 = new MockDate(0, 0, 0);
      Year year0 = new Year(mockDate0);
      Week week0 = new Week(0, year0);
      int int0 = week0.getWeek();
      assertEquals(1392409281319L, week0.getLastMillisecond());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      MockDate mockDate0 = new MockDate(10, 10, 10);
      Week week0 = new Week(mockDate0);
      Year year0 = new Year(mockDate0, week0.DEFAULT_TIME_ZONE);
      Week week1 = new Week((-3078), year0);
      int int0 = week1.getWeek();
      assertEquals((-6), int0);
      assertEquals(1392409281319L, week1.getLastMillisecond());
      assertEquals(46, week0.getWeek());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Week week0 = new Week(0, 0);
      long long0 = week0.getSerialIndex();
      assertEquals(1392409281319L, week0.getLastMillisecond());
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Week week0 = new Week((-930), (-115));
      long long0 = week0.getSerialIndex();
      assertEquals((-6001L), long0);
      assertEquals(1392409281319L, week0.getLastMillisecond());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Instant instant0 = MockInstant.ofEpochSecond(275L);
      Date date0 = Date.from(instant0);
      ZoneInfo zoneInfo0 = (ZoneInfo)RegularTimePeriod.DEFAULT_TIME_ZONE;
      Week week0 = new Week(date0, zoneInfo0);
      System.setCurrentTimeMillis(1);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      long long0 = week0.getLastMillisecond((Calendar) mockGregorianCalendar0);
      assertEquals(274999L, week0.getLastMillisecond());
      assertEquals(104411L, week0.getSerialIndex());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=1,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Week week0 = new Week(0, 0);
      Instant instant0 = MockInstant.now();
      Instant instant1 = MockInstant.minusMillis(instant0, 1392409281320L);
      ZoneOffset zoneOffset0 = ZoneOffset.MAX;
      LocalDateTime localDateTime0 = MockLocalDateTime.ofInstant(instant1, zoneOffset0);
      ZonedDateTime zonedDateTime0 = MockZonedDateTime.of(localDateTime0, (ZoneId) zoneOffset0);
      GregorianCalendar gregorianCalendar0 = MockGregorianCalendar.from(zonedDateTime0);
      long long0 = week0.getLastMillisecond((Calendar) gregorianCalendar0);
      assertEquals(0L, week0.getSerialIndex());
      assertEquals((-1L), long0);
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=0,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT+18:00\",offset=64800000,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=1,HOUR=6,HOUR_OF_DAY=18,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=64800000,DST_OFFSET=0]", gregorianCalendar0.toString());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      MockDate mockDate0 = new MockDate(1);
      Week week0 = new Week(mockDate0);
      long long0 = week0.getLastMillisecond();
      assertEquals(0L, long0);
      assertEquals(104411L, week0.getSerialIndex());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Week week0 = new Week();
      long long0 = week0.getLastMillisecond();
      assertEquals(106749L, week0.getSerialIndex());
      assertEquals(1392409281319L, long0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      MockDate mockDate0 = new MockDate(10, 10, 10, 10, 10);
      Week week0 = new Week(mockDate0);
      long long0 = week0.getLastMillisecond();
      assertEquals(101276L, week0.getSerialIndex());
      assertEquals((-1866376200001L), long0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      MockDate mockDate0 = new MockDate(10, 10, 10);
      Week week0 = new Week(mockDate0);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(53, 1, 1, 1, 3117);
      week0.getFirstMillisecond((Calendar) mockGregorianCalendar0);
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=53,MONTH=1,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=1,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=1,HOUR_OF_DAY=1,MINUTE=3117,SECOND=0,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
      assertEquals((-1866412800001L), week0.getLastMillisecond());
      assertEquals(46, week0.getWeek());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Week week0 = new Week(0, 0);
      Locale locale0 = Locale.US;
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(locale0);
      week0.getFirstMillisecond((Calendar) mockGregorianCalendar0);
      assertEquals(0L, week0.getSerialIndex());
      assertEquals(1392409281319L, week0.getLastMillisecond());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Year year0 = new Year();
      Week week0 = new Week(0, year0);
      System.setCurrentTimeMillis((-6286L));
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(week0.DEFAULT_TIME_ZONE);
      week0.getFirstMillisecond((Calendar) mockGregorianCalendar0);
      assertEquals(1392409281319L, week0.getLastMillisecond());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=-6286,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=53,MILLISECOND=714,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      assertEquals(0, week0.getWeek());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Week week0 = new Week(0, 0);
      long long0 = week0.getFirstMillisecond();
      assertEquals(1392409281320L, long0);
      assertEquals(1392409281319L, week0.getLastMillisecond());
      assertEquals(0L, week0.getSerialIndex());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      MockDate mockDate0 = new MockDate((-274L));
      TimeZone timeZone0 = TimeZone.getTimeZone("");
      Locale locale0 = Locale.ENGLISH;
      Week week0 = new Week(mockDate0, timeZone0, locale0);
      long long0 = week0.getFirstMillisecond();
      assertEquals((-274L), long0);
      assertEquals(104411L, week0.getSerialIndex());
      assertEquals((-275L), week0.getLastMillisecond());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      MockDate mockDate0 = new MockDate(10, 10, 10, 10, 10);
      Week week0 = new Week(mockDate0);
      MockDate mockDate1 = new MockDate(5, (-974), 5, (-1561), 5);
      Week week1 = new Week(mockDate1);
      int int0 = week1.compareTo(week0);
      assertEquals((-4617910500001L), week1.getLastMillisecond());
      assertEquals(96655L, week1.getSerialIndex());
      assertEquals((-87), int0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Week week0 = new Week(1902, 1902);
      // Undeclared exception!
//      try { 
        week0.peg((Calendar) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Week week0 = new Week(337, 337);
      // Undeclared exception!
//      try { 
        week0.getYear();
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Year constructor: year (337) outside valid range.
//         //
//         verifyException("org.jfree.data.time.Year", e);
//      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      MockDate mockDate0 = new MockDate(90, (-2062), 90, 1902, 90);
      Week week0 = new Week(mockDate0);
      // Undeclared exception!
//      try { 
        week0.getLastMillisecond((Calendar) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Week week0 = new Week();
      // Undeclared exception!
//      try { 
        week0.getFirstMillisecond((Calendar) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      MockDate mockDate0 = new MockDate(0, 0, 0);
      Year year0 = new Year(mockDate0);
      Week week0 = new Week(0, year0);
      // Undeclared exception!
//      try { 
        week0.compareTo(week0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Year constructor: year (1899) outside valid range.
//         //
//         verifyException("org.jfree.data.time.Year", e);
//      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Week week0 = new Week();
      Week week1 = null;
//      try {
        week1 = new Week((Date) null, week0.DEFAULT_TIME_ZONE);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Null 'time' argument.
//         //
//         verifyException("org.jfree.data.time.Week", e);
//      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Week week0 = null;
//      try {
        week0 = new Week((Date) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Null 'time' argument.
//         //
//         verifyException("org.jfree.data.time.Week", e);
//      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Week week0 = null;
//      try {
        week0 = new Week(1902, (Year) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.jfree.data.time.Week", e);
//      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      MockDate mockDate0 = new MockDate((-274L));
      TimeZone timeZone0 = TimeZone.getTimeZone("");
      Locale locale0 = Locale.ENGLISH;
      Week week0 = new Week(mockDate0, timeZone0, locale0);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(53, 53, 53);
      week0.peg(mockGregorianCalendar0);
      assertEquals((-1L), week0.getLastMillisecond());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Year year0 = new Year();
      Week week0 = new Week(0, year0);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(week0.DEFAULT_TIME_ZONE);
      long long0 = week0.getLastMillisecond((Calendar) mockGregorianCalendar0);
      assertEquals(0, week0.getWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      assertEquals(1392409281319L, long0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      // Undeclared exception!
//      try { 
        Week.parseWeek("UP-F;GmdYzI8(*1B1*N");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Can't evaluate the year.
//         //
//         verifyException("org.jfree.data.time.Week", e);
//      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      // Undeclared exception!
//      try { 
        Week.parseWeek(", ");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Can't evaluate the year.
//         //
//         verifyException("org.jfree.data.time.Week", e);
//      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      // Undeclared exception!
//      try { 
        Week.parseWeek("w#$edZ)$T9_X{/#j");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Could not find separator.
//         //
//         verifyException("org.jfree.data.time.Week", e);
//      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Week week0 = Week.parseWeek((String) null);
      assertNull(week0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Week week0 = new Week();
      Date date0 = week0.getEnd();
      Month month0 = new Month(date0, week0.DEFAULT_TIME_ZONE);
      int int0 = week0.compareTo(month0);
      assertEquals(0, int0);
      assertEquals(1392409281319L, month0.getLastMillisecond());
      assertEquals(7, week0.getWeek());
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Week week0 = new Week();
      Object object0 = new Object();
      int int0 = week0.compareTo(object0);
      assertEquals(1392409281319L, week0.getLastMillisecond());
      assertEquals(106749L, week0.getSerialIndex());
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      MockDate mockDate0 = new MockDate(90, (-2062), 90, 1902, 90);
      Week week0 = new Week(mockDate0);
      Week week1 = new Week(mockDate0);
      boolean boolean0 = week0.equals(week1);
      assertTrue(boolean0);
      assertEquals(96388L, week1.getSerialIndex());
      assertEquals((-4777029000001L), week1.getLastMillisecond());
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      MockDate mockDate0 = new MockDate(10, 10, 10);
      Week week0 = new Week(mockDate0);
      Week week1 = new Week();
      boolean boolean0 = week0.equals(week1);
      assertFalse(boolean0);
      assertEquals(1392409281319L, week1.getLastMillisecond());
      assertEquals(7, week1.getWeek());
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Week week0 = new Week();
      boolean boolean0 = week0.equals((Object) null);
      assertEquals(1392409281319L, week0.getLastMillisecond());
      assertEquals(106749L, week0.getSerialIndex());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      MockDate mockDate0 = new MockDate(10, 10, 10, 10, 10);
      Week week0 = new Week(mockDate0);
      boolean boolean0 = week0.equals(week0);
      assertTrue(boolean0);
      assertEquals((-1866376200001L), week0.getLastMillisecond());
      assertEquals(46, week0.getWeek());
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Year year0 = new Year();
      Week week0 = new Week(0, 0);
      Week week1 = new Week(0, year0);
      boolean boolean0 = week1.equals(week0);
      assertEquals(1392409281319L, week1.getLastMillisecond());
      assertEquals(0, week1.getWeek());
      assertEquals(0L, week0.getSerialIndex());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Week week0 = new Week(1902, 3324);
      RegularTimePeriod regularTimePeriod0 = week0.next();
      assertNotNull(regularTimePeriod0);
      
      int int0 = ((Week) regularTimePeriod0).compareTo(week0);
      assertEquals(1392409281319L, regularTimePeriod0.getLastMillisecond());
      assertEquals(1, int0);
      assertEquals(176226L, regularTimePeriod0.getSerialIndex());
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      MockDate mockDate0 = new MockDate(1902, 3324, (-36));
      Year year0 = new Year(mockDate0);
      Week week0 = new Week(52, year0);
      RegularTimePeriod regularTimePeriod0 = week0.next();
      assertEquals(216187L, regularTimePeriod0.getSerialIndex());
      assertEquals(1392409281319L, regularTimePeriod0.getLastMillisecond());
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Week week0 = new Week();
      RegularTimePeriod regularTimePeriod0 = week0.next();
      assertEquals(1392409281319L, regularTimePeriod0.getLastMillisecond());
      assertEquals(106750L, regularTimePeriod0.getSerialIndex());
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Week week0 = new Week(2137, 10026);
      RegularTimePeriod regularTimePeriod0 = week0.next();
      assertEquals(89, week0.getWeek());
      assertEquals(1392409281319L, week0.getLastMillisecond());
      assertNull(regularTimePeriod0);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Week week0 = new Week(1, (-1841));
      RegularTimePeriod regularTimePeriod0 = week0.previous();
      assertEquals((-97572L), week0.getSerialIndex());
      assertEquals(1392409281319L, week0.getLastMillisecond());
      assertNull(regularTimePeriod0);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      MockDate mockDate0 = new MockDate(15, 31, (-2966), (-3975), 31, 31);
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(31, "KU.0HmKf[9ZMk,xb");
      Locale locale0 = Locale.FRANCE;
      Week week0 = new Week(mockDate0, simpleTimeZone0, locale0);
      assertEquals((-1924871309001L), week0.getLastMillisecond());
      assertEquals(53, week0.getWeek());
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      SpreadsheetDate spreadsheetDate0 = new SpreadsheetDate(400);
      Date date0 = spreadsheetDate0.toDate();
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(334, "");
      Week week0 = null;
//      try {
        week0 = new Week(date0, simpleTimeZone0, (Locale) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Null 'locale' argument.
//         //
//         verifyException("org.jfree.data.time.Week", e);
//      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      Locale locale0 = Locale.JAPANESE;
      Week week0 = null;
//      try {
        week0 = new Week(mockDate0, (TimeZone) null, locale0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Null 'zone' argument.
//         //
//         verifyException("org.jfree.data.time.Week", e);
//      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      Week week0 = new Week();
      Year year0 = new Year(mockDate0, week0.DEFAULT_TIME_ZONE);
      Week week1 = new Week(1, year0);
      Week week2 = (Week)week1.previous();
      assertEquals(106741L, week2.getSerialIndex());
      assertEquals(1392409281319L, week2.getLastMillisecond());
      assertEquals(2013, week2.getYearValue());
      assertEquals(7, week0.getWeek());
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Instant instant0 = MockInstant.ofEpochSecond(0L);
      Date date0 = Date.from(instant0);
      ZoneInfo zoneInfo0 = (ZoneInfo)RegularTimePeriod.DEFAULT_TIME_ZONE;
      Week week0 = new Week(date0, zoneInfo0);
      week0.getFirstMillisecond();
      assertEquals((-1L), week0.getLastMillisecond());
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Week week0 = new Week();
      long long0 = week0.getSerialIndex();
      assertEquals(106749L, long0);
      assertEquals(1392409281319L, week0.getLastMillisecond());
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Week week0 = new Week();
      int int0 = week0.getWeek();
      assertEquals(7, int0);
      assertEquals(1392409281319L, week0.getLastMillisecond());
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Week week0 = new Week();
      String string0 = week0.toString();
      assertEquals("Week 7, 2014", string0);
      assertEquals(1392409281319L, week0.getLastMillisecond());
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Week week0 = new Week((-465), (-465));
      int int0 = week0.getYearValue();
      assertEquals((-24598L), week0.getSerialIndex());
      assertEquals(1392409281319L, week0.getLastMillisecond());
      assertEquals((-465), int0);
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      // Undeclared exception!
//      try { 
        Week.parseWeek("Week 7, 2014");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Can't evaluate the week.
//         //
//         verifyException("org.jfree.data.time.Week", e);
//      }
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Year year0 = new Year();
      Week week0 = new Week(0, year0);
      week0.getYear();
      assertEquals(106742L, week0.getSerialIndex());
      assertEquals(1392409281319L, week0.getLastMillisecond());
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      MockDate mockDate0 = new MockDate((-274L));
      TimeZone timeZone0 = TimeZone.getTimeZone("");
      Locale locale0 = Locale.ENGLISH;
      Week week0 = new Week(mockDate0, timeZone0, locale0);
      week0.hashCode();
      assertEquals(104411L, week0.getSerialIndex());
      assertEquals((-275L), week0.getLastMillisecond());
  }
}
