/*
 * This file was automatically generated by EvoSuite
 * Wed Oct 13 12:41:16 GMT 2021
 */

package org.jfree.data.time;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.time.ZoneId;
import java.time.ZoneOffset;
import java.util.Calendar;
import java.util.Date;
import java.util.Locale;
import java.util.SimpleTimeZone;
import java.util.TimeZone;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.mock.java.util.MockCalendar;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.evosuite.runtime.mock.java.util.MockGregorianCalendar;
import org.jfree.data.time.FixedMillisecond;
import org.jfree.data.time.RegularTimePeriod;
import org.jfree.data.time.Second;
import org.jfree.data.time.Week;
import org.jfree.data.time.Year;
import org.junit.runner.RunWith;
import sun.util.calendar.ZoneInfo;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Week_ESTest extends Week_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      MockDate mockDate0 = new MockDate(1085, (-1), 291, 181, 181);
      Year year0 = new Year(mockDate0);
      Week week0 = new Week(0, year0);
      RegularTimePeriod regularTimePeriod0 = week0.next();
      int int0 = ((Week) regularTimePeriod0).compareTo(week0);
      assertEquals(1, int0);
      assertEquals(158206L, regularTimePeriod0.getSerialIndex());
      assertEquals(1392409281319L, regularTimePeriod0.getLastMillisecond());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Week week0 = new Week();
      Week week1 = new Week(7, 53);
      boolean boolean0 = week0.equals(week1);
      assertFalse(week1.equals((Object)week0));
      assertEquals(7, week0.getWeek());
      assertEquals(1392409281319L, week1.getLastMillisecond());
      assertFalse(boolean0);
      assertEquals(2816L, week1.getSerialIndex());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      MockDate mockDate0 = new MockDate((-24L));
      Year year0 = new Year(mockDate0);
      Week week0 = new Week((-2439), year0);
      Week week1 = new Week(mockDate0, week0.DEFAULT_TIME_ZONE);
      week0.equals(week1);
      assertEquals(121, week0.getWeek());
      assertEquals((-25L), week1.getLastMillisecond());
      assertEquals(1970, week1.getYearValue());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Week week0 = new Week(120, 9999);
      RegularTimePeriod regularTimePeriod0 = week0.next();
      assertNull(regularTimePeriod0);
      assertEquals(120, week0.getWeek());
      assertEquals(1392409281319L, week0.getLastMillisecond());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Week week0 = new Week(53, (-4546));
      Week week1 = (Week)week0.next();
      Week week2 = (Week)week1.previous();
      assertNull(week2);
      assertEquals(1392409281319L, week1.getLastMillisecond());
      assertEquals((-4545), week1.getYearValue());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Week week0 = new Week(0, 0);
      int int0 = week0.getYearValue();
      assertEquals(1392409281319L, week0.getLastMillisecond());
      assertEquals(0L, week0.getSerialIndex());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Week week0 = new Week(366, (-2224));
      int int0 = week0.getYearValue();
      assertEquals((-117762L), week0.getSerialIndex());
      assertEquals((-2224), int0);
      assertEquals(1392409281319L, week0.getLastMillisecond());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Year year0 = new Year();
      Week week0 = new Week(0, year0);
      System.setCurrentTimeMillis(0);
      week0.getYear();
      assertEquals(1392409281319L, week0.getLastMillisecond());
      assertEquals(0, week0.getWeek());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Week week0 = new Week();
      System.setCurrentTimeMillis((-2414L));
      week0.getYear();
      assertEquals(1392409281319L, week0.getLastMillisecond());
      assertEquals(106749L, week0.getSerialIndex());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Week week0 = new Week(0, 11);
      int int0 = week0.getWeek();
      assertEquals(1392409281319L, week0.getLastMillisecond());
      assertEquals(583L, week0.getSerialIndex());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Week week0 = new Week((-2339), 0);
      int int0 = week0.getWeek();
      assertEquals(1392409281319L, week0.getLastMillisecond());
      assertEquals((-35L), week0.getSerialIndex());
      assertEquals((-35), int0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Week week0 = new Week(0, 0);
      long long0 = week0.getSerialIndex();
      assertEquals(0L, long0);
      assertEquals(1392409281319L, week0.getLastMillisecond());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Week week0 = new Week(11, (-886));
      long long0 = week0.getSerialIndex();
      assertEquals((-46947L), long0);
      assertEquals(1392409281319L, week0.getLastMillisecond());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Week week0 = new Week(44, 44);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(44, 53, 44, 1, 44);
      mockGregorianCalendar0.setTimeInMillis(1);
      long long0 = week0.getLastMillisecond((Calendar) mockGregorianCalendar0);
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=1,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      assertEquals(0L, long0);
      assertEquals(2376L, week0.getSerialIndex());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      MockDate mockDate0 = new MockDate(774, 12, 12);
      Week week0 = new Week(mockDate0);
      Locale locale0 = Locale.ITALIAN;
      Calendar calendar0 = MockCalendar.getInstance(week0.DEFAULT_TIME_ZONE, locale0);
      long long0 = week0.getLastMillisecond(calendar0);
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", calendar0.toString());
      assertEquals(1392409281319L, long0);
      assertEquals(3, week0.getWeek());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      MockDate mockDate0 = new MockDate((-2177), 9999, 3, 9999, 3, 9999);
      mockDate0.setTime(1L);
      TimeZone timeZone0 = TimeZone.getTimeZone("Can't evaluate the month.");
      Locale locale0 = Locale.TAIWAN;
      Week week0 = new Week(mockDate0, timeZone0, locale0);
      long long0 = week0.getLastMillisecond();
      assertEquals(104411L, week0.getSerialIndex());
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Week week0 = new Week(53, (-4546));
      long long0 = week0.getLastMillisecond();
      assertEquals(1392409281319L, long0);
      assertEquals((-240885L), week0.getSerialIndex());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar((-2856), (-2856), 3, (-2856), (-539), 0);
      Date date0 = mockGregorianCalendar0.getGregorianChange();
      ZoneOffset zoneOffset0 = ZoneOffset.MAX;
      TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
      Locale locale0 = Locale.US;
      Week week0 = new Week(date0, timeZone0, locale0);
      week0.getFirstMillisecond((Calendar) mockGregorianCalendar0);
      assertEquals((-12219292800001L), week0.getLastMillisecond());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=-2856,MONTH=-2856,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=3,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=-2856,HOUR_OF_DAY=-2856,MINUTE=-539,SECOND=0,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
      assertEquals(40, week0.getWeek());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Week week0 = new Week(0, 11);
      Calendar calendar0 = MockCalendar.getInstance();
      week0.getFirstMillisecond(calendar0);
      assertEquals(583L, week0.getSerialIndex());
      assertEquals(1392409281319L, week0.getLastMillisecond());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", calendar0.toString());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      System.setCurrentTimeMillis((-1015L));
      MockDate mockDate0 = new MockDate((-1), (-1), 76);
      ZoneInfo zoneInfo0 = (ZoneInfo)RegularTimePeriod.DEFAULT_TIME_ZONE;
      Locale locale0 = Locale.ROOT;
      Week week0 = new Week(mockDate0, zoneInfo0, locale0);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      week0.getFirstMillisecond((Calendar) mockGregorianCalendar0);
      assertEquals((-2236723200001L), week0.getLastMillisecond());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=-1015,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=58,MILLISECOND=985,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      assertEquals(7, week0.getWeek());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Week week0 = new Week(0, 11);
      long long0 = week0.getFirstMillisecond();
      assertEquals(1392409281320L, long0);
      assertEquals(1392409281319L, week0.getLastMillisecond());
      assertEquals(583L, week0.getSerialIndex());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      MockDate mockDate0 = new MockDate((-24L));
      Year year0 = new Year(mockDate0);
      Week week0 = new Week((-2439), year0);
      Week week1 = new Week(mockDate0, week0.DEFAULT_TIME_ZONE);
      long long0 = week1.getFirstMillisecond();
      assertEquals((-24L), long0);
      assertEquals((-25L), week1.getLastMillisecond());
      assertEquals(104478L, week0.getSerialIndex());
      assertEquals(1970, week1.getYearValue());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Week week0 = new Week((-698), 291);
      Week week1 = new Week();
      int int0 = week0.compareTo(week1);
      assertEquals((-1723), int0);
      assertEquals(70, week0.getWeek());
      assertEquals(7, week1.getWeek());
      assertEquals(1392409281319L, week1.getLastMillisecond());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Week week0 = new Week(334, 5);
      // Undeclared exception!
//      try { 
        week0.peg((Calendar) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Week week0 = new Week(562, 562);
      // Undeclared exception!
//      try { 
        week0.getYear();
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Year constructor: year (562) outside valid range.
//         //
//         verifyException("org.jfree.data.time.Year", e);
//      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Week week0 = new Week((-284), 414);
      // Undeclared exception!
//      try { 
        week0.getLastMillisecond((Calendar) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Year year0 = new Year();
      Week week0 = new Week(2150, year0);
      // Undeclared exception!
//      try { 
        week0.getFirstMillisecond((Calendar) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Week week0 = new Week(11, (-886));
      // Undeclared exception!
//      try { 
        week0.compareTo(week0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Year constructor: year (-886) outside valid range.
//         //
//         verifyException("org.jfree.data.time.Year", e);
//      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Week week0 = null;
//      try {
        week0 = new Week((Date) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Null 'time' argument.
//         //
//         verifyException("org.jfree.data.time.Week", e);
//      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Week week0 = null;
//      try {
        week0 = new Week(1085, (Year) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.jfree.data.time.Week", e);
//      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      MockDate mockDate0 = new MockDate((-24L));
      Year year0 = new Year(mockDate0);
      Week week0 = new Week((-2439), year0);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(43, 25, 1545, 25, 32, (-1));
      week0.peg(mockGregorianCalendar0);
      assertEquals((-1L), week0.getLastMillisecond());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Week week0 = new Week();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(17, 53, 1, 17, 1);
      long long0 = week0.getLastMillisecond((Calendar) mockGregorianCalendar0);
      assertEquals(7, week0.getWeek());
      assertEquals((-1L), long0);
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=17,MONTH=53,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=1,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=1,HOUR=5,HOUR_OF_DAY=17,MINUTE=1,SECOND=0,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      // Undeclared exception!
//      try { 
        Week.parseWeek("The 'week' argument must be in the range 1 - 53.");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Can't evaluate the year.
//         //
//         verifyException("org.jfree.data.time.Week", e);
//      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      // Undeclared exception!
//      try { 
        Week.parseWeek("dis<W6");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Could not find separator.
//         //
//         verifyException("org.jfree.data.time.Week", e);
//      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Week week0 = Week.parseWeek((String) null);
      assertNull(week0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      MockDate mockDate0 = new MockDate(1085, (-1), 291, 181, 181);
      Year year0 = new Year(mockDate0);
      Week week0 = new Week(mockDate0, year0.DEFAULT_TIME_ZONE);
      int int0 = week0.compareTo(mockDate0);
      assertEquals(32053420859999L, week0.getLastMillisecond());
      assertEquals(39, week0.getWeek());
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      MockDate mockDate0 = new MockDate((-24L));
      Year year0 = new Year(mockDate0);
      Week week0 = new Week((-2483), year0);
      Week week1 = new Week(mockDate0, week0.DEFAULT_TIME_ZONE);
      int int0 = week1.compareTo(week0);
      assertEquals((-25L), week1.getLastMillisecond());
      assertEquals(1, int0);
      assertEquals(77, week0.getWeek());
      assertEquals(1, week1.getWeek());
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      MockDate mockDate0 = new MockDate(1085, (-9), 291, 181, 181);
      Year year0 = new Year(mockDate0);
      Week week0 = new Week(mockDate0, year0.DEFAULT_TIME_ZONE);
      int int0 = week0.compareTo(week0);
      assertEquals(0, int0);
      assertEquals(32032339259999L, week0.getLastMillisecond());
      assertEquals(5, week0.getWeek());
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      MockDate mockDate0 = new MockDate(1085, (-9), 291, 181, 181);
      Year year0 = new Year(mockDate0);
      Week week0 = new Week(mockDate0, year0.DEFAULT_TIME_ZONE);
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond(1);
      int int0 = week0.compareTo(fixedMillisecond0);
      assertEquals(0, int0);
      assertEquals(32032339259999L, week0.getLastMillisecond());
      assertEquals(158210L, week0.getSerialIndex());
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Week week0 = new Week();
      Date date0 = week0.getStart();
      Week week1 = new Week(date0);
      boolean boolean0 = week0.equals(week1);
      assertEquals(1392409281319L, week1.getLastMillisecond());
      assertEquals(7, week0.getWeek());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Week week0 = new Week((-20), (-20));
      Week week1 = new Week((-20), 53);
      boolean boolean0 = week0.equals(week1);
      assertEquals(1392409281319L, week1.getLastMillisecond());
      assertFalse(boolean0);
      assertEquals(2789L, week1.getSerialIndex());
      assertFalse(week1.equals((Object)week0));
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      MockDate mockDate0 = new MockDate(1085, (-9), 291, 181, 181);
      Year year0 = new Year(mockDate0);
      Week week0 = new Week(mockDate0, year0.DEFAULT_TIME_ZONE);
      RegularTimePeriod regularTimePeriod0 = week0.next();
      boolean boolean0 = week0.equals(regularTimePeriod0);
      assertFalse(boolean0);
      assertEquals(1392409281319L, regularTimePeriod0.getLastMillisecond());
      assertEquals(158211L, regularTimePeriod0.getSerialIndex());
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Week week0 = new Week();
      boolean boolean0 = week0.equals(week0);
      assertEquals(7, week0.getWeek());
      assertEquals(1392409281319L, week0.getLastMillisecond());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      MockDate mockDate0 = new MockDate(1085, (-9), 291, 181, 181);
      Year year0 = new Year(mockDate0);
      Week week0 = new Week(mockDate0, year0.DEFAULT_TIME_ZONE);
      Object object0 = new Object();
      boolean boolean0 = week0.equals(object0);
      assertEquals(5, week0.getWeek());
      assertFalse(boolean0);
      assertEquals(32032339259999L, week0.getLastMillisecond());
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Week week0 = new Week((-651), 10018);
      RegularTimePeriod regularTimePeriod0 = week0.next();
      assertNull(regularTimePeriod0);
      assertEquals(531071L, week0.getSerialIndex());
      assertEquals(1392409281319L, week0.getLastMillisecond());
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Week week0 = new Week(52, 52);
      RegularTimePeriod regularTimePeriod0 = week0.next();
      assertEquals(1392409281319L, regularTimePeriod0.getLastMillisecond());
      assertEquals(2809L, regularTimePeriod0.getSerialIndex());
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      MockDate mockDate0 = new MockDate(0, 0, 0, 0, 3044, 1861);
      Week week0 = new Week(mockDate0, (TimeZone) null);
      RegularTimePeriod regularTimePeriod0 = week0.previous();
      assertNull(regularTimePeriod0);
      assertEquals((-2208890699001L), week0.getLastMillisecond());
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      MockDate mockDate0 = new MockDate(1085, (-9), 291, 181, 181);
      Year year0 = new Year(mockDate0);
      Week week0 = new Week(mockDate0, year0.DEFAULT_TIME_ZONE);
      RegularTimePeriod regularTimePeriod0 = week0.previous();
      assertEquals(158209L, regularTimePeriod0.getSerialIndex());
      assertEquals(1392409281319L, regularTimePeriod0.getLastMillisecond());
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Second second0 = new Second();
      MockDate mockDate0 = new MockDate(0);
      Week week0 = new Week(mockDate0, second0.DEFAULT_TIME_ZONE);
      Week week1 = (Week)week0.previous();
      Week week2 = (Week)week1.next();
      assertEquals(1392409281319L, week2.getLastMillisecond());
      assertNotNull(week2);
      assertEquals(1970, week0.getYearValue());
      assertEquals(104411L, week2.getSerialIndex());
      assertEquals(52, week1.getWeek());
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      MockDate mockDate0 = new MockDate(46, (-86), 1525);
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-86), "");
      Locale locale0 = Locale.GERMAN;
      Week week0 = new Week(mockDate0, simpleTimeZone0, locale0);
      assertEquals((-851904000001L), week0.getLastMillisecond());
      assertEquals(1942, week0.getYearValue());
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      MockDate mockDate0 = new MockDate(1085, (-28), 317, 181, 181);
      Year year0 = new Year(mockDate0);
      Week week0 = null;
//      try {
        week0 = new Week(mockDate0, year0.DEFAULT_TIME_ZONE, (Locale) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Null 'locale' argument.
//         //
//         verifyException("org.jfree.data.time.Week", e);
//      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      MockDate mockDate0 = new MockDate((-4074));
      Locale locale0 = Locale.forLanguageTag(">,8/P^;M~/D9~r@");
      Week week0 = null;
//      try {
        week0 = new Week(mockDate0, (TimeZone) null, locale0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Null 'zone' argument.
//         //
//         verifyException("org.jfree.data.time.Week", e);
//      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Week week0 = null;
//      try {
        week0 = new Week((Date) null, (TimeZone) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Null 'time' argument.
//         //
//         verifyException("org.jfree.data.time.Week", e);
//      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Second second0 = new Second();
      MockDate mockDate0 = new MockDate(0);
      Week week0 = new Week(mockDate0, second0.DEFAULT_TIME_ZONE);
      week0.getFirstMillisecond();
      assertEquals(104411L, week0.getSerialIndex());
      assertEquals((-1L), week0.getLastMillisecond());
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Second second0 = new Second();
      MockDate mockDate0 = new MockDate(0);
      Week week0 = new Week(mockDate0, second0.DEFAULT_TIME_ZONE);
      long long0 = week0.getSerialIndex();
      assertEquals((-1L), week0.getLastMillisecond());
      assertEquals(104411L, long0);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Week week0 = new Week();
      String string0 = week0.toString();
      assertEquals("Week 7, 2014", string0);
      assertEquals(1392409281319L, week0.getLastMillisecond());
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      MockDate mockDate0 = new MockDate((-2177), 9999, 3, 9999, 3, 9999);
      TimeZone timeZone0 = TimeZone.getTimeZone("Can't evaluate the month.");
      Locale locale0 = Locale.TAIWAN;
      Week week0 = new Week(mockDate0, timeZone0, locale0);
      int int0 = week0.getYearValue();
      assertEquals(29542L, week0.getSerialIndex());
      assertEquals(557, int0);
      assertEquals((-44577324621001L), week0.getLastMillisecond());
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      // Undeclared exception!
//      try { 
        Week.parseWeek("Week 7, 2014");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Can't evaluate the week.
//         //
//         verifyException("org.jfree.data.time.Week", e);
//      }
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      MockDate mockDate0 = new MockDate((-2177), 9999, 3, 9999, 3, 9999);
      TimeZone timeZone0 = TimeZone.getTimeZone("Can't evaluate the month.");
      Locale locale0 = Locale.TAIWAN;
      Week week0 = new Week(mockDate0, timeZone0, locale0);
      long long0 = week0.getLastMillisecond();
      assertEquals((-44577324621001L), long0);
      assertEquals(29542L, week0.getSerialIndex());
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Week week0 = new Week();
      week0.getYear();
      assertEquals(7, week0.getWeek());
      assertEquals(1392409281319L, week0.getLastMillisecond());
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      MockDate mockDate0 = new MockDate(1085, (-9), 291, 181, 181);
      Year year0 = new Year(mockDate0);
      Week week0 = new Week(mockDate0, year0.DEFAULT_TIME_ZONE);
      week0.hashCode();
      assertEquals(32032339259999L, week0.getLastMillisecond());
      assertEquals(5, week0.getWeek());
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Second second0 = new Second();
      MockDate mockDate0 = new MockDate(0);
      Week week0 = new Week(mockDate0, second0.DEFAULT_TIME_ZONE);
      int int0 = week0.getWeek();
      assertEquals(1, int0);
      assertEquals(1970, week0.getYearValue());
      assertEquals((-1L), week0.getLastMillisecond());
  }
}
