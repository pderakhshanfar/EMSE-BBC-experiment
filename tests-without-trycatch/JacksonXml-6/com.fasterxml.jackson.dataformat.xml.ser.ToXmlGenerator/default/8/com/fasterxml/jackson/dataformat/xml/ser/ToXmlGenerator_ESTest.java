/*
 * This file was automatically generated by EvoSuite
 * Fri Jul 30 06:53:31 GMT 2021
 */

package com.fasterxml.jackson.dataformat.xml.ser;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.ctc.wstx.api.WriterConfig;
import com.ctc.wstx.sw.AsciiXmlWriter;
import com.ctc.wstx.sw.BufferingXmlWriter;
import com.ctc.wstx.sw.ISOLatin1XmlWriter;
import com.ctc.wstx.sw.NonNsStreamWriter;
import com.ctc.wstx.sw.RepairingNsStreamWriter;
import com.ctc.wstx.sw.SimpleNsStreamWriter;
import com.ctc.wstx.sw.XmlWriter;
import com.fasterxml.jackson.core.Base64Variant;
import com.fasterxml.jackson.core.JsonFactory;
import com.fasterxml.jackson.core.JsonGenerator;
import com.fasterxml.jackson.core.ObjectCodec;
import com.fasterxml.jackson.core.PrettyPrinter;
import com.fasterxml.jackson.core.SerializableString;
import com.fasterxml.jackson.core.base.GeneratorBase;
import com.fasterxml.jackson.core.io.IOContext;
import com.fasterxml.jackson.core.io.SerializedString;
import com.fasterxml.jackson.core.util.BufferRecycler;
import com.fasterxml.jackson.core.util.ByteArrayBuilder;
import com.fasterxml.jackson.core.util.DefaultPrettyPrinter;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.ObjectReader;
import com.fasterxml.jackson.databind.module.SimpleModule;
import com.fasterxml.jackson.dataformat.xml.XmlPrettyPrinter;
import com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator;
import com.fasterxml.jackson.dataformat.xml.util.DefaultXmlPrettyPrinter;
import java.io.ByteArrayOutputStream;
import java.io.IOException;
import java.io.OutputStream;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.Writer;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.time.chrono.ThaiBuddhistEra;
import javax.xml.namespace.QName;
import javax.xml.stream.XMLStreamWriter;
import org.codehaus.stax2.XMLStreamWriter2;
import org.codehaus.stax2.ri.Stax2WriterAdapter;
import org.codehaus.stax2.util.StreamWriter2Delegate;
import org.codehaus.stax2.util.StreamWriterDelegate;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class ToXmlGenerator_ESTest extends ToXmlGenerator_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertNotNull(bufferRecycler0);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      assertNotNull(writerConfig0);
      assertTrue(writerConfig0.willSupportNamespaces());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertFalse(writerConfig0.willValidateNames());
      assertTrue(writerConfig0.willValidateStructure());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertTrue(writerConfig0.willValidateContent());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willValidateAttributes());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertTrue(writerConfig0.willEscapeCr());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      
      IOContext iOContext0 = new IOContext(bufferRecycler0, objectMapper0, false);
      assertNotNull(iOContext0);
      assertFalse(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      
      SimpleNsStreamWriter simpleNsStreamWriter0 = new SimpleNsStreamWriter((XmlWriter) null, "", writerConfig0);
      assertNotNull(simpleNsStreamWriter0);
      assertTrue(writerConfig0.willSupportNamespaces());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertFalse(writerConfig0.willValidateNames());
      assertTrue(writerConfig0.willValidateStructure());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertTrue(writerConfig0.willValidateContent());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willValidateAttributes());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertTrue(writerConfig0.willEscapeCr());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertNull(simpleNsStreamWriter0.getBaseUri());
      assertEquals("", simpleNsStreamWriter0.getEncoding());
      assertEquals(0, simpleNsStreamWriter0.getAttributeCount());
      assertEquals("1.0", simpleNsStreamWriter0.getXmlVersion());
      
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 3, 2, objectMapper0, simpleNsStreamWriter0);
      assertNotNull(toXmlGenerator0);
      assertTrue(writerConfig0.willSupportNamespaces());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertFalse(writerConfig0.willValidateNames());
      assertTrue(writerConfig0.willValidateStructure());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertTrue(writerConfig0.willValidateContent());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willValidateAttributes());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertTrue(writerConfig0.willEscapeCr());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertFalse(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertNull(simpleNsStreamWriter0.getBaseUri());
      assertEquals("", simpleNsStreamWriter0.getEncoding());
      assertEquals(0, simpleNsStreamWriter0.getAttributeCount());
      assertEquals("1.0", simpleNsStreamWriter0.getXmlVersion());
      assertFalse(toXmlGenerator0.canWriteObjectId());
      assertTrue(toXmlGenerator0.inRoot());
      assertEquals((-1), toXmlGenerator0.getOutputBuffered());
      assertTrue(toXmlGenerator0.canOmitFields());
      assertFalse(toXmlGenerator0.canWriteBinaryNatively());
      assertEquals(3, toXmlGenerator0.getFeatureMask());
      assertFalse(toXmlGenerator0.isClosed());
      assertEquals(2, toXmlGenerator0.getFormatFeatures());
      assertEquals(0, toXmlGenerator0.getHighestEscapedChar());
      assertFalse(toXmlGenerator0.canWriteTypeId());
      assertTrue(toXmlGenerator0.canWriteFormattedNumbers());
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      
      ToXmlGenerator toXmlGenerator1 = (ToXmlGenerator)toXmlGenerator0.overrideFormatFeatures(1, 3);
      assertNotNull(toXmlGenerator1);
      assertSame(toXmlGenerator0, toXmlGenerator1);
      assertSame(toXmlGenerator1, toXmlGenerator0);
      assertTrue(writerConfig0.willSupportNamespaces());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertFalse(writerConfig0.willValidateNames());
      assertTrue(writerConfig0.willValidateStructure());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertTrue(writerConfig0.willValidateContent());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willValidateAttributes());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertTrue(writerConfig0.willEscapeCr());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertFalse(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertNull(simpleNsStreamWriter0.getBaseUri());
      assertEquals("", simpleNsStreamWriter0.getEncoding());
      assertEquals(0, simpleNsStreamWriter0.getAttributeCount());
      assertEquals("1.0", simpleNsStreamWriter0.getXmlVersion());
      assertFalse(toXmlGenerator0.canWriteObjectId());
      assertTrue(toXmlGenerator0.inRoot());
      assertEquals((-1), toXmlGenerator0.getOutputBuffered());
      assertTrue(toXmlGenerator0.canOmitFields());
      assertFalse(toXmlGenerator0.canWriteBinaryNatively());
      assertEquals(3, toXmlGenerator0.getFeatureMask());
      assertEquals(1, toXmlGenerator0.getFormatFeatures());
      assertFalse(toXmlGenerator0.isClosed());
      assertEquals(0, toXmlGenerator0.getHighestEscapedChar());
      assertFalse(toXmlGenerator0.canWriteTypeId());
      assertTrue(toXmlGenerator0.canWriteFormattedNumbers());
      assertFalse(toXmlGenerator1.isClosed());
      assertEquals(0, toXmlGenerator1.getHighestEscapedChar());
      assertEquals(1, toXmlGenerator1.getFormatFeatures());
      assertFalse(toXmlGenerator1.canWriteTypeId());
      assertTrue(toXmlGenerator1.canOmitFields());
      assertTrue(toXmlGenerator1.inRoot());
      assertTrue(toXmlGenerator1.canWriteFormattedNumbers());
      assertEquals(3, toXmlGenerator1.getFeatureMask());
      assertFalse(toXmlGenerator1.canWriteObjectId());
      assertFalse(toXmlGenerator1.canWriteBinaryNatively());
      assertEquals((-1), toXmlGenerator1.getOutputBuffered());
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertNotNull(bufferRecycler0);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(3);
      assertNotNull(byteArrayOutputStream0);
      assertEquals(0, byteArrayOutputStream0.size());
      assertEquals("", byteArrayOutputStream0.toString());
      
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      assertNotNull(writerConfig0);
      assertTrue(writerConfig0.willValidateContent());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertFalse(writerConfig0.willValidateNames());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.willValidateStructure());
      assertTrue(writerConfig0.willEscapeCr());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willValidateAttributes());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertFalse(writerConfig0.willOutputCDataAsText());
      
      AsciiXmlWriter asciiXmlWriter0 = new AsciiXmlWriter(byteArrayOutputStream0, writerConfig0, true);
      assertNotNull(asciiXmlWriter0);
      assertEquals(0, byteArrayOutputStream0.size());
      assertEquals("", byteArrayOutputStream0.toString());
      assertTrue(writerConfig0.willValidateContent());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertFalse(writerConfig0.willValidateNames());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.willValidateStructure());
      assertTrue(writerConfig0.willEscapeCr());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willValidateAttributes());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertEquals(1, asciiXmlWriter0.getRow());
      
      NonNsStreamWriter nonNsStreamWriter0 = new NonNsStreamWriter(asciiXmlWriter0, "", writerConfig0);
      assertNotNull(nonNsStreamWriter0);
      assertEquals(0, byteArrayOutputStream0.size());
      assertEquals("", byteArrayOutputStream0.toString());
      assertTrue(writerConfig0.willValidateContent());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertFalse(writerConfig0.willValidateNames());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.willValidateStructure());
      assertTrue(writerConfig0.willEscapeCr());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willValidateAttributes());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertEquals(1, asciiXmlWriter0.getRow());
      assertEquals(0, nonNsStreamWriter0.getAttributeCount());
      assertEquals("1.0", nonNsStreamWriter0.getXmlVersion());
      assertNull(nonNsStreamWriter0.getBaseUri());
      assertEquals("", nonNsStreamWriter0.getEncoding());
      
      IOContext iOContext0 = new IOContext(bufferRecycler0, objectMapper0, false);
      assertNotNull(iOContext0);
      assertFalse(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 2, (-697), objectMapper0, nonNsStreamWriter0);
      assertNotNull(toXmlGenerator0);
      assertEquals(0, byteArrayOutputStream0.size());
      assertEquals("", byteArrayOutputStream0.toString());
      assertTrue(writerConfig0.willValidateContent());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertFalse(writerConfig0.willValidateNames());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.willValidateStructure());
      assertTrue(writerConfig0.willEscapeCr());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willValidateAttributes());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertEquals(1, asciiXmlWriter0.getRow());
      assertEquals(0, nonNsStreamWriter0.getAttributeCount());
      assertEquals("1.0", nonNsStreamWriter0.getXmlVersion());
      assertNull(nonNsStreamWriter0.getBaseUri());
      assertEquals("", nonNsStreamWriter0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertFalse(toXmlGenerator0.canWriteTypeId());
      assertEquals((-1), toXmlGenerator0.getOutputBuffered());
      assertEquals(0, toXmlGenerator0.getHighestEscapedChar());
      assertFalse(toXmlGenerator0.isClosed());
      assertEquals(2, toXmlGenerator0.getFeatureMask());
      assertFalse(toXmlGenerator0.canWriteObjectId());
      assertFalse(toXmlGenerator0.canWriteBinaryNatively());
      assertTrue(toXmlGenerator0.canOmitFields());
      assertTrue(toXmlGenerator0.canWriteFormattedNumbers());
      assertTrue(toXmlGenerator0.inRoot());
      assertEquals((-697), toXmlGenerator0.getFormatFeatures());
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      
      QName qName0 = new QName("R^`/lY", "", "R^`/lY");
      assertNotNull(qName0);
      
      toXmlGenerator0.startWrappedValue(qName0, qName0);
      assertEquals(0, byteArrayOutputStream0.size());
      assertEquals("", byteArrayOutputStream0.toString());
      assertTrue(writerConfig0.willValidateContent());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertFalse(writerConfig0.willValidateNames());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.willValidateStructure());
      assertTrue(writerConfig0.willEscapeCr());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willValidateAttributes());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertEquals(1, asciiXmlWriter0.getRow());
      assertEquals(0, nonNsStreamWriter0.getAttributeCount());
      assertEquals("1.0", nonNsStreamWriter0.getXmlVersion());
      assertNull(nonNsStreamWriter0.getBaseUri());
      assertEquals("", nonNsStreamWriter0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertFalse(toXmlGenerator0.canWriteTypeId());
      assertEquals((-1), toXmlGenerator0.getOutputBuffered());
      assertEquals(0, toXmlGenerator0.getHighestEscapedChar());
      assertFalse(toXmlGenerator0.isClosed());
      assertEquals(2, toXmlGenerator0.getFeatureMask());
      assertFalse(toXmlGenerator0.canWriteObjectId());
      assertFalse(toXmlGenerator0.canWriteBinaryNatively());
      assertTrue(toXmlGenerator0.canOmitFields());
      assertTrue(toXmlGenerator0.canWriteFormattedNumbers());
      assertTrue(toXmlGenerator0.inRoot());
      assertEquals((-697), toXmlGenerator0.getFormatFeatures());
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      
      toXmlGenerator0.writeString("");
      assertEquals(0, byteArrayOutputStream0.size());
      assertEquals("", byteArrayOutputStream0.toString());
      assertTrue(writerConfig0.willValidateContent());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertFalse(writerConfig0.willValidateNames());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.willValidateStructure());
      assertTrue(writerConfig0.willEscapeCr());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willValidateAttributes());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertEquals(1, asciiXmlWriter0.getRow());
      assertEquals(0, nonNsStreamWriter0.getAttributeCount());
      assertEquals("1.0", nonNsStreamWriter0.getXmlVersion());
      assertNull(nonNsStreamWriter0.getBaseUri());
      assertEquals("", nonNsStreamWriter0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertFalse(toXmlGenerator0.canWriteTypeId());
      assertEquals((-1), toXmlGenerator0.getOutputBuffered());
      assertEquals(0, toXmlGenerator0.getHighestEscapedChar());
      assertFalse(toXmlGenerator0.isClosed());
      assertEquals(2, toXmlGenerator0.getFeatureMask());
      assertFalse(toXmlGenerator0.canWriteObjectId());
      assertFalse(toXmlGenerator0.canWriteBinaryNatively());
      assertTrue(toXmlGenerator0.canOmitFields());
      assertTrue(toXmlGenerator0.canWriteFormattedNumbers());
      assertTrue(toXmlGenerator0.inRoot());
      assertEquals((-697), toXmlGenerator0.getFormatFeatures());
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      assertNotNull(writerConfig0);
      assertEquals(933, writerConfig0.getConfigFlags());
      assertFalse(writerConfig0.willValidateNames());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.willValidateContent());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertTrue(writerConfig0.willValidateStructure());
      assertTrue(writerConfig0.willEscapeCr());
      assertFalse(writerConfig0.willValidateAttributes());
      
      SimpleNsStreamWriter simpleNsStreamWriter0 = new SimpleNsStreamWriter((XmlWriter) null, "<!DOCTYPE ", writerConfig0);
      assertNotNull(simpleNsStreamWriter0);
      assertEquals(933, writerConfig0.getConfigFlags());
      assertFalse(writerConfig0.willValidateNames());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.willValidateContent());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertTrue(writerConfig0.willValidateStructure());
      assertTrue(writerConfig0.willEscapeCr());
      assertFalse(writerConfig0.willValidateAttributes());
      assertEquals("<!DOCTYPE ", simpleNsStreamWriter0.getEncoding());
      assertNull(simpleNsStreamWriter0.getBaseUri());
      assertEquals(0, simpleNsStreamWriter0.getAttributeCount());
      assertEquals("1.0", simpleNsStreamWriter0.getXmlVersion());
      
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator((IOContext) null, 0, 0, objectMapper0, simpleNsStreamWriter0);
      assertNotNull(toXmlGenerator0);
      assertEquals(933, writerConfig0.getConfigFlags());
      assertFalse(writerConfig0.willValidateNames());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.willValidateContent());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertTrue(writerConfig0.willValidateStructure());
      assertTrue(writerConfig0.willEscapeCr());
      assertFalse(writerConfig0.willValidateAttributes());
      assertEquals("<!DOCTYPE ", simpleNsStreamWriter0.getEncoding());
      assertNull(simpleNsStreamWriter0.getBaseUri());
      assertEquals(0, simpleNsStreamWriter0.getAttributeCount());
      assertEquals("1.0", simpleNsStreamWriter0.getXmlVersion());
      assertTrue(toXmlGenerator0.inRoot());
      assertFalse(toXmlGenerator0.canWriteObjectId());
      assertTrue(toXmlGenerator0.canWriteFormattedNumbers());
      assertFalse(toXmlGenerator0.canWriteTypeId());
      assertFalse(toXmlGenerator0.isClosed());
      assertTrue(toXmlGenerator0.canOmitFields());
      assertEquals(0, toXmlGenerator0.getFormatFeatures());
      assertFalse(toXmlGenerator0.canWriteBinaryNatively());
      assertEquals(0, toXmlGenerator0.getFeatureMask());
      assertEquals((-1), toXmlGenerator0.getOutputBuffered());
      assertEquals(0, toXmlGenerator0.getHighestEscapedChar());
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      
      toXmlGenerator0._verifyValueWrite("<!DOCTYPE ");
      assertEquals(933, writerConfig0.getConfigFlags());
      assertFalse(writerConfig0.willValidateNames());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.willValidateContent());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertTrue(writerConfig0.willValidateStructure());
      assertTrue(writerConfig0.willEscapeCr());
      assertFalse(writerConfig0.willValidateAttributes());
      assertEquals("<!DOCTYPE ", simpleNsStreamWriter0.getEncoding());
      assertNull(simpleNsStreamWriter0.getBaseUri());
      assertEquals(0, simpleNsStreamWriter0.getAttributeCount());
      assertEquals("1.0", simpleNsStreamWriter0.getXmlVersion());
      assertTrue(toXmlGenerator0.inRoot());
      assertFalse(toXmlGenerator0.canWriteObjectId());
      assertTrue(toXmlGenerator0.canWriteFormattedNumbers());
      assertFalse(toXmlGenerator0.canWriteTypeId());
      assertFalse(toXmlGenerator0.isClosed());
      assertTrue(toXmlGenerator0.canOmitFields());
      assertEquals(0, toXmlGenerator0.getFormatFeatures());
      assertFalse(toXmlGenerator0.canWriteBinaryNatively());
      assertEquals(0, toXmlGenerator0.getFeatureMask());
      assertEquals((-1), toXmlGenerator0.getOutputBuffered());
      assertEquals(0, toXmlGenerator0.getHighestEscapedChar());
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertNotNull(bufferRecycler0);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      assertNotNull(iOContext0);
      assertNull(iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      assertNotNull(writerConfig0);
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willValidateAttributes());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willValidateNames());
      assertTrue(writerConfig0.willValidateStructure());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertTrue(writerConfig0.willEscapeCr());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.willValidateContent());
      
      ISOLatin1XmlWriter iSOLatin1XmlWriter0 = new ISOLatin1XmlWriter((OutputStream) null, writerConfig0, false);
      assertNotNull(iSOLatin1XmlWriter0);
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willValidateAttributes());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willValidateNames());
      assertTrue(writerConfig0.willValidateStructure());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertTrue(writerConfig0.willEscapeCr());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.willValidateContent());
      assertEquals(1, iSOLatin1XmlWriter0.getRow());
      
      SimpleNsStreamWriter simpleNsStreamWriter0 = new SimpleNsStreamWriter(iSOLatin1XmlWriter0, "", writerConfig0);
      assertNotNull(simpleNsStreamWriter0);
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willValidateAttributes());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willValidateNames());
      assertTrue(writerConfig0.willValidateStructure());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertTrue(writerConfig0.willEscapeCr());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.willValidateContent());
      assertEquals(1, iSOLatin1XmlWriter0.getRow());
      assertEquals(0, simpleNsStreamWriter0.getAttributeCount());
      assertNull(simpleNsStreamWriter0.getBaseUri());
      assertEquals("1.0", simpleNsStreamWriter0.getXmlVersion());
      assertEquals("", simpleNsStreamWriter0.getEncoding());
      
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 0, 0, objectMapper0, simpleNsStreamWriter0);
      assertNotNull(toXmlGenerator0);
      assertNull(iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willValidateAttributes());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willValidateNames());
      assertTrue(writerConfig0.willValidateStructure());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertTrue(writerConfig0.willEscapeCr());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.willValidateContent());
      assertEquals(1, iSOLatin1XmlWriter0.getRow());
      assertEquals(0, simpleNsStreamWriter0.getAttributeCount());
      assertNull(simpleNsStreamWriter0.getBaseUri());
      assertEquals("1.0", simpleNsStreamWriter0.getXmlVersion());
      assertEquals("", simpleNsStreamWriter0.getEncoding());
      assertFalse(toXmlGenerator0.canWriteTypeId());
      assertTrue(toXmlGenerator0.inRoot());
      assertTrue(toXmlGenerator0.canOmitFields());
      assertFalse(toXmlGenerator0.isClosed());
      assertFalse(toXmlGenerator0.canWriteBinaryNatively());
      assertTrue(toXmlGenerator0.canWriteFormattedNumbers());
      assertEquals(0, toXmlGenerator0.getFormatFeatures());
      assertFalse(toXmlGenerator0.canWriteObjectId());
      assertEquals(0, toXmlGenerator0.getHighestEscapedChar());
      assertEquals(0, toXmlGenerator0.getFeatureMask());
      assertEquals((-1), toXmlGenerator0.getOutputBuffered());
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      
      QName qName0 = new QName("", "");
      assertNotNull(qName0);
      
      toXmlGenerator0.startWrappedValue(qName0, qName0);
      assertNull(iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willValidateAttributes());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willValidateNames());
      assertTrue(writerConfig0.willValidateStructure());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertTrue(writerConfig0.willEscapeCr());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.willValidateContent());
      assertEquals(1, iSOLatin1XmlWriter0.getRow());
      assertEquals(0, simpleNsStreamWriter0.getAttributeCount());
      assertNull(simpleNsStreamWriter0.getBaseUri());
      assertEquals("1.0", simpleNsStreamWriter0.getXmlVersion());
      assertEquals("", simpleNsStreamWriter0.getEncoding());
      assertFalse(toXmlGenerator0.canWriteTypeId());
      assertTrue(toXmlGenerator0.inRoot());
      assertTrue(toXmlGenerator0.canOmitFields());
      assertFalse(toXmlGenerator0.isClosed());
      assertFalse(toXmlGenerator0.canWriteBinaryNatively());
      assertTrue(toXmlGenerator0.canWriteFormattedNumbers());
      assertEquals(0, toXmlGenerator0.getFormatFeatures());
      assertFalse(toXmlGenerator0.canWriteObjectId());
      assertEquals(0, toXmlGenerator0.getHighestEscapedChar());
      assertEquals(0, toXmlGenerator0.getFeatureMask());
      assertEquals((-1), toXmlGenerator0.getOutputBuffered());
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      
      toXmlGenerator0.writeStartObject();
      assertNull(iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willValidateAttributes());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willValidateNames());
      assertTrue(writerConfig0.willValidateStructure());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertTrue(writerConfig0.willEscapeCr());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.willValidateContent());
      assertEquals(1, iSOLatin1XmlWriter0.getRow());
      assertEquals(0, simpleNsStreamWriter0.getAttributeCount());
      assertNull(simpleNsStreamWriter0.getBaseUri());
      assertEquals("1.0", simpleNsStreamWriter0.getXmlVersion());
      assertEquals("", simpleNsStreamWriter0.getEncoding());
      assertFalse(toXmlGenerator0.canWriteTypeId());
      assertFalse(toXmlGenerator0.inRoot());
      assertTrue(toXmlGenerator0.canOmitFields());
      assertFalse(toXmlGenerator0.isClosed());
      assertFalse(toXmlGenerator0.canWriteBinaryNatively());
      assertTrue(toXmlGenerator0.canWriteFormattedNumbers());
      assertEquals(0, toXmlGenerator0.getFormatFeatures());
      assertFalse(toXmlGenerator0.canWriteObjectId());
      assertEquals(0, toXmlGenerator0.getHighestEscapedChar());
      assertEquals(0, toXmlGenerator0.getFeatureMask());
      assertEquals((-1), toXmlGenerator0.getOutputBuffered());
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      
      toXmlGenerator0.writeStringField("", "");
      assertNull(iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willValidateAttributes());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willValidateNames());
      assertTrue(writerConfig0.willValidateStructure());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertTrue(writerConfig0.willEscapeCr());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.willValidateContent());
      assertEquals(1, iSOLatin1XmlWriter0.getRow());
      assertEquals(0, simpleNsStreamWriter0.getAttributeCount());
      assertNull(simpleNsStreamWriter0.getBaseUri());
      assertEquals("1.0", simpleNsStreamWriter0.getXmlVersion());
      assertEquals("", simpleNsStreamWriter0.getEncoding());
      assertFalse(toXmlGenerator0.canWriteTypeId());
      assertFalse(toXmlGenerator0.inRoot());
      assertTrue(toXmlGenerator0.canOmitFields());
      assertFalse(toXmlGenerator0.isClosed());
      assertFalse(toXmlGenerator0.canWriteBinaryNatively());
      assertTrue(toXmlGenerator0.canWriteFormattedNumbers());
      assertEquals(0, toXmlGenerator0.getFormatFeatures());
      assertFalse(toXmlGenerator0.canWriteObjectId());
      assertEquals(0, toXmlGenerator0.getHighestEscapedChar());
      assertEquals(0, toXmlGenerator0.getFeatureMask());
      assertEquals((-1), toXmlGenerator0.getOutputBuffered());
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertNotNull(bufferRecycler0);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(3);
      assertNotNull(byteArrayOutputStream0);
      assertEquals(0, byteArrayOutputStream0.size());
      assertEquals("", byteArrayOutputStream0.toString());
      
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      assertNotNull(writerConfig0);
      assertTrue(writerConfig0.willSupportNamespaces());
      assertFalse(writerConfig0.willValidateNames());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertTrue(writerConfig0.willValidateContent());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertFalse(writerConfig0.willFixContent());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willValidateAttributes());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertTrue(writerConfig0.willEscapeCr());
      assertTrue(writerConfig0.willValidateStructure());
      
      AsciiXmlWriter asciiXmlWriter0 = new AsciiXmlWriter(byteArrayOutputStream0, writerConfig0, false);
      assertNotNull(asciiXmlWriter0);
      assertEquals(0, byteArrayOutputStream0.size());
      assertEquals("", byteArrayOutputStream0.toString());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertFalse(writerConfig0.willValidateNames());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertTrue(writerConfig0.willValidateContent());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertFalse(writerConfig0.willFixContent());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willValidateAttributes());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertTrue(writerConfig0.willEscapeCr());
      assertTrue(writerConfig0.willValidateStructure());
      assertEquals(1, asciiXmlWriter0.getRow());
      
      NonNsStreamWriter nonNsStreamWriter0 = new NonNsStreamWriter(asciiXmlWriter0, "", writerConfig0);
      assertNotNull(nonNsStreamWriter0);
      assertEquals(0, byteArrayOutputStream0.size());
      assertEquals("", byteArrayOutputStream0.toString());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertFalse(writerConfig0.willValidateNames());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertTrue(writerConfig0.willValidateContent());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertFalse(writerConfig0.willFixContent());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willValidateAttributes());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertTrue(writerConfig0.willEscapeCr());
      assertTrue(writerConfig0.willValidateStructure());
      assertEquals(1, asciiXmlWriter0.getRow());
      assertNull(nonNsStreamWriter0.getBaseUri());
      assertEquals(0, nonNsStreamWriter0.getAttributeCount());
      assertEquals("1.0", nonNsStreamWriter0.getXmlVersion());
      assertEquals("", nonNsStreamWriter0.getEncoding());
      
      IOContext iOContext0 = new IOContext(bufferRecycler0, "", false);
      assertNotNull(iOContext0);
      assertFalse(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 2, 15, objectMapper0, nonNsStreamWriter0);
      assertNotNull(toXmlGenerator0);
      assertEquals(0, byteArrayOutputStream0.size());
      assertEquals("", byteArrayOutputStream0.toString());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertFalse(writerConfig0.willValidateNames());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertTrue(writerConfig0.willValidateContent());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertFalse(writerConfig0.willFixContent());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willValidateAttributes());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertTrue(writerConfig0.willEscapeCr());
      assertTrue(writerConfig0.willValidateStructure());
      assertEquals(1, asciiXmlWriter0.getRow());
      assertNull(nonNsStreamWriter0.getBaseUri());
      assertEquals(0, nonNsStreamWriter0.getAttributeCount());
      assertEquals("1.0", nonNsStreamWriter0.getXmlVersion());
      assertEquals("", nonNsStreamWriter0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertFalse(toXmlGenerator0.isClosed());
      assertFalse(toXmlGenerator0.canWriteTypeId());
      assertEquals((-1), toXmlGenerator0.getOutputBuffered());
      assertEquals(0, toXmlGenerator0.getHighestEscapedChar());
      assertFalse(toXmlGenerator0.canWriteObjectId());
      assertEquals(2, toXmlGenerator0.getFeatureMask());
      assertEquals(15, toXmlGenerator0.getFormatFeatures());
      assertTrue(toXmlGenerator0.inRoot());
      assertFalse(toXmlGenerator0.canWriteBinaryNatively());
      assertTrue(toXmlGenerator0.canOmitFields());
      assertTrue(toXmlGenerator0.canWriteFormattedNumbers());
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      
      QName qName0 = new QName("write String value", "yZE)yeay6Wg|Yt~5L", "Can not write END_ELEMENT without open START_ELEMENT");
      assertNotNull(qName0);
      
      toXmlGenerator0.startWrappedValue(qName0, qName0);
      assertEquals(0, byteArrayOutputStream0.size());
      assertEquals("", byteArrayOutputStream0.toString());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertFalse(writerConfig0.willValidateNames());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertTrue(writerConfig0.willValidateContent());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertFalse(writerConfig0.willFixContent());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willValidateAttributes());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertTrue(writerConfig0.willEscapeCr());
      assertTrue(writerConfig0.willValidateStructure());
      assertEquals(1, asciiXmlWriter0.getRow());
      assertNull(nonNsStreamWriter0.getBaseUri());
      assertEquals(0, nonNsStreamWriter0.getAttributeCount());
      assertEquals("1.0", nonNsStreamWriter0.getXmlVersion());
      assertEquals("", nonNsStreamWriter0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertFalse(toXmlGenerator0.isClosed());
      assertFalse(toXmlGenerator0.canWriteTypeId());
      assertEquals((-1), toXmlGenerator0.getOutputBuffered());
      assertEquals(0, toXmlGenerator0.getHighestEscapedChar());
      assertFalse(toXmlGenerator0.canWriteObjectId());
      assertEquals(2, toXmlGenerator0.getFeatureMask());
      assertEquals(15, toXmlGenerator0.getFormatFeatures());
      assertTrue(toXmlGenerator0.inRoot());
      assertFalse(toXmlGenerator0.canWriteBinaryNatively());
      assertTrue(toXmlGenerator0.canOmitFields());
      assertTrue(toXmlGenerator0.canWriteFormattedNumbers());
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      assertNotNull(serializedString0);
      assertEquals(" ", serializedString0.toString());
      assertEquals(" ", serializedString0.getValue());
      assertEquals(1, serializedString0.charLength());
      
      toXmlGenerator0.writeString((SerializableString) serializedString0);
      assertEquals(0, byteArrayOutputStream0.size());
      assertEquals("", byteArrayOutputStream0.toString());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertFalse(writerConfig0.willValidateNames());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertTrue(writerConfig0.willValidateContent());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertFalse(writerConfig0.willFixContent());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willValidateAttributes());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertTrue(writerConfig0.willEscapeCr());
      assertTrue(writerConfig0.willValidateStructure());
      assertEquals(1, asciiXmlWriter0.getRow());
      assertNull(nonNsStreamWriter0.getBaseUri());
      assertEquals(0, nonNsStreamWriter0.getAttributeCount());
      assertEquals("1.0", nonNsStreamWriter0.getXmlVersion());
      assertEquals("", nonNsStreamWriter0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertFalse(toXmlGenerator0.isClosed());
      assertFalse(toXmlGenerator0.canWriteTypeId());
      assertEquals((-1), toXmlGenerator0.getOutputBuffered());
      assertEquals(0, toXmlGenerator0.getHighestEscapedChar());
      assertFalse(toXmlGenerator0.canWriteObjectId());
      assertEquals(2, toXmlGenerator0.getFeatureMask());
      assertEquals(15, toXmlGenerator0.getFormatFeatures());
      assertTrue(toXmlGenerator0.inRoot());
      assertFalse(toXmlGenerator0.canWriteBinaryNatively());
      assertTrue(toXmlGenerator0.canOmitFields());
      assertTrue(toXmlGenerator0.canWriteFormattedNumbers());
      assertEquals(" ", serializedString0.toString());
      assertEquals(" ", serializedString0.getValue());
      assertEquals(1, serializedString0.charLength());
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertNotNull(bufferRecycler0);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      assertNotNull(iOContext0);
      assertNull(iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      assertNotNull(writerConfig0);
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.willValidateContent());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertFalse(writerConfig0.willValidateAttributes());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertTrue(writerConfig0.willEscapeCr());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertTrue(writerConfig0.willValidateStructure());
      assertFalse(writerConfig0.willValidateNames());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      
      ISOLatin1XmlWriter iSOLatin1XmlWriter0 = new ISOLatin1XmlWriter((OutputStream) null, writerConfig0, false);
      assertNotNull(iSOLatin1XmlWriter0);
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.willValidateContent());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertFalse(writerConfig0.willValidateAttributes());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertTrue(writerConfig0.willEscapeCr());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertTrue(writerConfig0.willValidateStructure());
      assertFalse(writerConfig0.willValidateNames());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertEquals(1, iSOLatin1XmlWriter0.getRow());
      
      SimpleNsStreamWriter simpleNsStreamWriter0 = new SimpleNsStreamWriter(iSOLatin1XmlWriter0, "", writerConfig0);
      assertNotNull(simpleNsStreamWriter0);
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.willValidateContent());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertFalse(writerConfig0.willValidateAttributes());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertTrue(writerConfig0.willEscapeCr());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertTrue(writerConfig0.willValidateStructure());
      assertFalse(writerConfig0.willValidateNames());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertEquals(1, iSOLatin1XmlWriter0.getRow());
      assertEquals("1.0", simpleNsStreamWriter0.getXmlVersion());
      assertEquals(0, simpleNsStreamWriter0.getAttributeCount());
      assertNull(simpleNsStreamWriter0.getBaseUri());
      assertEquals("", simpleNsStreamWriter0.getEncoding());
      
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 0, 0, objectMapper0, simpleNsStreamWriter0);
      assertNotNull(toXmlGenerator0);
      assertNull(iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.willValidateContent());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertFalse(writerConfig0.willValidateAttributes());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertTrue(writerConfig0.willEscapeCr());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertTrue(writerConfig0.willValidateStructure());
      assertFalse(writerConfig0.willValidateNames());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertEquals(1, iSOLatin1XmlWriter0.getRow());
      assertEquals("1.0", simpleNsStreamWriter0.getXmlVersion());
      assertEquals(0, simpleNsStreamWriter0.getAttributeCount());
      assertNull(simpleNsStreamWriter0.getBaseUri());
      assertEquals("", simpleNsStreamWriter0.getEncoding());
      assertEquals(0, toXmlGenerator0.getHighestEscapedChar());
      assertFalse(toXmlGenerator0.isClosed());
      assertEquals(0, toXmlGenerator0.getFormatFeatures());
      assertEquals(0, toXmlGenerator0.getFeatureMask());
      assertEquals((-1), toXmlGenerator0.getOutputBuffered());
      assertFalse(toXmlGenerator0.canWriteObjectId());
      assertFalse(toXmlGenerator0.canWriteBinaryNatively());
      assertTrue(toXmlGenerator0.canOmitFields());
      assertTrue(toXmlGenerator0.canWriteFormattedNumbers());
      assertTrue(toXmlGenerator0.inRoot());
      assertFalse(toXmlGenerator0.canWriteTypeId());
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      
      QName qName0 = new QName("", "");
      assertNotNull(qName0);
      
      simpleNsStreamWriter0.writeEmptyElement("", "", "");
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.willValidateContent());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertFalse(writerConfig0.willValidateAttributes());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertTrue(writerConfig0.willEscapeCr());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertTrue(writerConfig0.willValidateStructure());
      assertFalse(writerConfig0.willValidateNames());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertEquals(1, iSOLatin1XmlWriter0.getRow());
      assertEquals("1.0", simpleNsStreamWriter0.getXmlVersion());
      assertEquals(0, simpleNsStreamWriter0.getAttributeCount());
      assertNull(simpleNsStreamWriter0.getBaseUri());
      assertEquals("", simpleNsStreamWriter0.getEncoding());
      
      toXmlGenerator0.startWrappedValue(qName0, qName0);
      assertNull(iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.willValidateContent());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertFalse(writerConfig0.willValidateAttributes());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertTrue(writerConfig0.willEscapeCr());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertTrue(writerConfig0.willValidateStructure());
      assertFalse(writerConfig0.willValidateNames());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertEquals(1, iSOLatin1XmlWriter0.getRow());
      assertEquals("1.0", simpleNsStreamWriter0.getXmlVersion());
      assertEquals(0, simpleNsStreamWriter0.getAttributeCount());
      assertNull(simpleNsStreamWriter0.getBaseUri());
      assertEquals("", simpleNsStreamWriter0.getEncoding());
      assertEquals(0, toXmlGenerator0.getHighestEscapedChar());
      assertFalse(toXmlGenerator0.isClosed());
      assertEquals(0, toXmlGenerator0.getFormatFeatures());
      assertEquals(0, toXmlGenerator0.getFeatureMask());
      assertEquals((-1), toXmlGenerator0.getOutputBuffered());
      assertFalse(toXmlGenerator0.canWriteObjectId());
      assertFalse(toXmlGenerator0.canWriteBinaryNatively());
      assertTrue(toXmlGenerator0.canOmitFields());
      assertTrue(toXmlGenerator0.canWriteFormattedNumbers());
      assertTrue(toXmlGenerator0.inRoot());
      assertFalse(toXmlGenerator0.canWriteTypeId());
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      
      char[] charArray0 = new char[2];
//      try { 
        toXmlGenerator0.writeRawValue(charArray0, 1, 0);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // No open start element, when trying to write end element
//         //
//         verifyException("com.fasterxml.jackson.dataformat.xml.util.StaxUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertNotNull(bufferRecycler0);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      assertNotNull(iOContext0);
      assertFalse(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      assertNotNull(writerConfig0);
      assertTrue(writerConfig0.willValidateContent());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willValidateAttributes());
      assertTrue(writerConfig0.willEscapeCr());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertTrue(writerConfig0.willValidateStructure());
      assertFalse(writerConfig0.willValidateNames());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      
      ISOLatin1XmlWriter iSOLatin1XmlWriter0 = new ISOLatin1XmlWriter((OutputStream) null, writerConfig0, false);
      assertNotNull(iSOLatin1XmlWriter0);
      assertTrue(writerConfig0.willValidateContent());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willValidateAttributes());
      assertTrue(writerConfig0.willEscapeCr());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertTrue(writerConfig0.willValidateStructure());
      assertFalse(writerConfig0.willValidateNames());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertEquals(1, iSOLatin1XmlWriter0.getRow());
      
      SimpleNsStreamWriter simpleNsStreamWriter0 = new SimpleNsStreamWriter(iSOLatin1XmlWriter0, "", writerConfig0);
      assertNotNull(simpleNsStreamWriter0);
      assertTrue(writerConfig0.willValidateContent());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willValidateAttributes());
      assertTrue(writerConfig0.willEscapeCr());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertTrue(writerConfig0.willValidateStructure());
      assertFalse(writerConfig0.willValidateNames());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertEquals(1, iSOLatin1XmlWriter0.getRow());
      assertEquals(0, simpleNsStreamWriter0.getAttributeCount());
      assertEquals("", simpleNsStreamWriter0.getEncoding());
      assertEquals("1.0", simpleNsStreamWriter0.getXmlVersion());
      assertNull(simpleNsStreamWriter0.getBaseUri());
      
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 0, 0, objectMapper0, simpleNsStreamWriter0);
      assertNotNull(toXmlGenerator0);
      assertFalse(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertTrue(writerConfig0.willValidateContent());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willValidateAttributes());
      assertTrue(writerConfig0.willEscapeCr());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertTrue(writerConfig0.willValidateStructure());
      assertFalse(writerConfig0.willValidateNames());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertEquals(1, iSOLatin1XmlWriter0.getRow());
      assertEquals(0, simpleNsStreamWriter0.getAttributeCount());
      assertEquals("", simpleNsStreamWriter0.getEncoding());
      assertEquals("1.0", simpleNsStreamWriter0.getXmlVersion());
      assertNull(simpleNsStreamWriter0.getBaseUri());
      assertFalse(toXmlGenerator0.isClosed());
      assertEquals(0, toXmlGenerator0.getFormatFeatures());
      assertTrue(toXmlGenerator0.canOmitFields());
      assertFalse(toXmlGenerator0.canWriteTypeId());
      assertTrue(toXmlGenerator0.inRoot());
      assertTrue(toXmlGenerator0.canWriteFormattedNumbers());
      assertEquals((-1), toXmlGenerator0.getOutputBuffered());
      assertFalse(toXmlGenerator0.canWriteBinaryNatively());
      assertFalse(toXmlGenerator0.canWriteObjectId());
      assertEquals(0, toXmlGenerator0.getHighestEscapedChar());
      assertEquals(0, toXmlGenerator0.getFeatureMask());
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      
      QName qName0 = new QName("", "");
      assertNotNull(qName0);
      
      toXmlGenerator0.startWrappedValue(qName0, qName0);
      assertFalse(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertTrue(writerConfig0.willValidateContent());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willValidateAttributes());
      assertTrue(writerConfig0.willEscapeCr());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertTrue(writerConfig0.willValidateStructure());
      assertFalse(writerConfig0.willValidateNames());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertEquals(1, iSOLatin1XmlWriter0.getRow());
      assertEquals(0, simpleNsStreamWriter0.getAttributeCount());
      assertEquals("", simpleNsStreamWriter0.getEncoding());
      assertEquals("1.0", simpleNsStreamWriter0.getXmlVersion());
      assertNull(simpleNsStreamWriter0.getBaseUri());
      assertFalse(toXmlGenerator0.isClosed());
      assertEquals(0, toXmlGenerator0.getFormatFeatures());
      assertTrue(toXmlGenerator0.canOmitFields());
      assertFalse(toXmlGenerator0.canWriteTypeId());
      assertTrue(toXmlGenerator0.inRoot());
      assertTrue(toXmlGenerator0.canWriteFormattedNumbers());
      assertEquals((-1), toXmlGenerator0.getOutputBuffered());
      assertFalse(toXmlGenerator0.canWriteBinaryNatively());
      assertFalse(toXmlGenerator0.canWriteObjectId());
      assertEquals(0, toXmlGenerator0.getHighestEscapedChar());
      assertEquals(0, toXmlGenerator0.getFeatureMask());
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      
      char[] charArray0 = new char[2];
      toXmlGenerator0.writeRawValue(charArray0, 1, 0);
      assertEquals(2, charArray0.length);
      assertFalse(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertTrue(writerConfig0.willValidateContent());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willValidateAttributes());
      assertTrue(writerConfig0.willEscapeCr());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertTrue(writerConfig0.willValidateStructure());
      assertFalse(writerConfig0.willValidateNames());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertEquals(1, iSOLatin1XmlWriter0.getRow());
      assertEquals(0, simpleNsStreamWriter0.getAttributeCount());
      assertEquals("", simpleNsStreamWriter0.getEncoding());
      assertEquals("1.0", simpleNsStreamWriter0.getXmlVersion());
      assertNull(simpleNsStreamWriter0.getBaseUri());
      assertFalse(toXmlGenerator0.isClosed());
      assertEquals(0, toXmlGenerator0.getFormatFeatures());
      assertTrue(toXmlGenerator0.canOmitFields());
      assertFalse(toXmlGenerator0.canWriteTypeId());
      assertTrue(toXmlGenerator0.inRoot());
      assertTrue(toXmlGenerator0.canWriteFormattedNumbers());
      assertEquals((-1), toXmlGenerator0.getOutputBuffered());
      assertFalse(toXmlGenerator0.canWriteBinaryNatively());
      assertFalse(toXmlGenerator0.canWriteObjectId());
      assertEquals(0, toXmlGenerator0.getHighestEscapedChar());
      assertEquals(0, toXmlGenerator0.getFeatureMask());
      assertArrayEquals(new char[] {'\u0000', '\u0000'}, charArray0);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertNotNull(bufferRecycler0);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      assertNotNull(iOContext0);
      assertFalse(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      
      WriterConfig writerConfig0 = WriterConfig.createJ2MEDefaults();
      assertNotNull(writerConfig0);
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willValidateAttributes());
      assertTrue(writerConfig0.willEscapeCr());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willValidateNames());
      assertTrue(writerConfig0.willValidateStructure());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertTrue(writerConfig0.willValidateContent());
      assertEquals("woodstox", writerConfig0.getImplName());
      
      ISOLatin1XmlWriter iSOLatin1XmlWriter0 = new ISOLatin1XmlWriter((OutputStream) null, writerConfig0, false);
      assertNotNull(iSOLatin1XmlWriter0);
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willValidateAttributes());
      assertTrue(writerConfig0.willEscapeCr());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willValidateNames());
      assertTrue(writerConfig0.willValidateStructure());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertTrue(writerConfig0.willValidateContent());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertEquals(1, iSOLatin1XmlWriter0.getRow());
      
      SimpleNsStreamWriter simpleNsStreamWriter0 = new SimpleNsStreamWriter(iSOLatin1XmlWriter0, "", writerConfig0);
      assertNotNull(simpleNsStreamWriter0);
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willValidateAttributes());
      assertTrue(writerConfig0.willEscapeCr());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willValidateNames());
      assertTrue(writerConfig0.willValidateStructure());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertTrue(writerConfig0.willValidateContent());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertEquals(1, iSOLatin1XmlWriter0.getRow());
      assertNull(simpleNsStreamWriter0.getBaseUri());
      assertEquals("", simpleNsStreamWriter0.getEncoding());
      assertEquals(0, simpleNsStreamWriter0.getAttributeCount());
      assertEquals("1.0", simpleNsStreamWriter0.getXmlVersion());
      
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 0, 0, objectMapper0, simpleNsStreamWriter0);
      assertNotNull(toXmlGenerator0);
      assertFalse(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willValidateAttributes());
      assertTrue(writerConfig0.willEscapeCr());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willValidateNames());
      assertTrue(writerConfig0.willValidateStructure());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertTrue(writerConfig0.willValidateContent());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertEquals(1, iSOLatin1XmlWriter0.getRow());
      assertNull(simpleNsStreamWriter0.getBaseUri());
      assertEquals("", simpleNsStreamWriter0.getEncoding());
      assertEquals(0, simpleNsStreamWriter0.getAttributeCount());
      assertEquals("1.0", simpleNsStreamWriter0.getXmlVersion());
      assertEquals(0, toXmlGenerator0.getHighestEscapedChar());
      assertFalse(toXmlGenerator0.isClosed());
      assertFalse(toXmlGenerator0.canWriteTypeId());
      assertTrue(toXmlGenerator0.canOmitFields());
      assertTrue(toXmlGenerator0.canWriteFormattedNumbers());
      assertTrue(toXmlGenerator0.inRoot());
      assertEquals(0, toXmlGenerator0.getFormatFeatures());
      assertEquals(0, toXmlGenerator0.getFeatureMask());
      assertEquals((-1), toXmlGenerator0.getOutputBuffered());
      assertFalse(toXmlGenerator0.canWriteObjectId());
      assertFalse(toXmlGenerator0.canWriteBinaryNatively());
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      
      QName qName0 = new QName("", "");
      assertNotNull(qName0);
      
      toXmlGenerator0.startWrappedValue(qName0, qName0);
      assertFalse(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willValidateAttributes());
      assertTrue(writerConfig0.willEscapeCr());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willValidateNames());
      assertTrue(writerConfig0.willValidateStructure());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertTrue(writerConfig0.willValidateContent());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertEquals(1, iSOLatin1XmlWriter0.getRow());
      assertNull(simpleNsStreamWriter0.getBaseUri());
      assertEquals("", simpleNsStreamWriter0.getEncoding());
      assertEquals(0, simpleNsStreamWriter0.getAttributeCount());
      assertEquals("1.0", simpleNsStreamWriter0.getXmlVersion());
      assertEquals(0, toXmlGenerator0.getHighestEscapedChar());
      assertFalse(toXmlGenerator0.isClosed());
      assertFalse(toXmlGenerator0.canWriteTypeId());
      assertTrue(toXmlGenerator0.canOmitFields());
      assertTrue(toXmlGenerator0.canWriteFormattedNumbers());
      assertTrue(toXmlGenerator0.inRoot());
      assertEquals(0, toXmlGenerator0.getFormatFeatures());
      assertEquals(0, toXmlGenerator0.getFeatureMask());
      assertEquals((-1), toXmlGenerator0.getOutputBuffered());
      assertFalse(toXmlGenerator0.canWriteObjectId());
      assertFalse(toXmlGenerator0.canWriteBinaryNatively());
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      
      simpleNsStreamWriter0.writeEndElement();
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willValidateAttributes());
      assertTrue(writerConfig0.willEscapeCr());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willValidateNames());
      assertTrue(writerConfig0.willValidateStructure());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertTrue(writerConfig0.willValidateContent());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertEquals(1, iSOLatin1XmlWriter0.getRow());
      assertNull(simpleNsStreamWriter0.getBaseUri());
      assertEquals("", simpleNsStreamWriter0.getEncoding());
      assertEquals(0, simpleNsStreamWriter0.getAttributeCount());
      assertEquals("1.0", simpleNsStreamWriter0.getXmlVersion());
      
//      try { 
        toXmlGenerator0.writeRawValue("", 2, 1);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Trying to output second root, <>
//         //
//         verifyException("com.fasterxml.jackson.dataformat.xml.util.StaxUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertNotNull(bufferRecycler0);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(3);
      assertNotNull(byteArrayOutputStream0);
      assertEquals("", byteArrayOutputStream0.toString());
      assertEquals(0, byteArrayOutputStream0.size());
      
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      assertNotNull(writerConfig0);
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertTrue(writerConfig0.willValidateContent());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willValidateNames());
      assertFalse(writerConfig0.willValidateAttributes());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertTrue(writerConfig0.willEscapeCr());
      assertTrue(writerConfig0.willValidateStructure());
      
      AsciiXmlWriter asciiXmlWriter0 = new AsciiXmlWriter(byteArrayOutputStream0, writerConfig0, false);
      assertNotNull(asciiXmlWriter0);
      assertEquals("", byteArrayOutputStream0.toString());
      assertEquals(0, byteArrayOutputStream0.size());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertTrue(writerConfig0.willValidateContent());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willValidateNames());
      assertFalse(writerConfig0.willValidateAttributes());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertTrue(writerConfig0.willEscapeCr());
      assertTrue(writerConfig0.willValidateStructure());
      assertEquals(1, asciiXmlWriter0.getRow());
      
      NonNsStreamWriter nonNsStreamWriter0 = new NonNsStreamWriter(asciiXmlWriter0, "-", writerConfig0);
      assertNotNull(nonNsStreamWriter0);
      assertEquals("", byteArrayOutputStream0.toString());
      assertEquals(0, byteArrayOutputStream0.size());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertTrue(writerConfig0.willValidateContent());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willValidateNames());
      assertFalse(writerConfig0.willValidateAttributes());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertTrue(writerConfig0.willEscapeCr());
      assertTrue(writerConfig0.willValidateStructure());
      assertEquals(1, asciiXmlWriter0.getRow());
      assertEquals("-", nonNsStreamWriter0.getEncoding());
      assertEquals(0, nonNsStreamWriter0.getAttributeCount());
      assertEquals("1.0", nonNsStreamWriter0.getXmlVersion());
      assertNull(nonNsStreamWriter0.getBaseUri());
      
      IOContext iOContext0 = new IOContext(bufferRecycler0, "-", false);
      assertNotNull(iOContext0);
      assertNull(iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 2, 15, objectMapper0, nonNsStreamWriter0);
      assertNotNull(toXmlGenerator0);
      assertEquals("", byteArrayOutputStream0.toString());
      assertEquals(0, byteArrayOutputStream0.size());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertTrue(writerConfig0.willValidateContent());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willValidateNames());
      assertFalse(writerConfig0.willValidateAttributes());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertTrue(writerConfig0.willEscapeCr());
      assertTrue(writerConfig0.willValidateStructure());
      assertEquals(1, asciiXmlWriter0.getRow());
      assertEquals("-", nonNsStreamWriter0.getEncoding());
      assertEquals(0, nonNsStreamWriter0.getAttributeCount());
      assertEquals("1.0", nonNsStreamWriter0.getXmlVersion());
      assertNull(nonNsStreamWriter0.getBaseUri());
      assertNull(iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertTrue(toXmlGenerator0.inRoot());
      assertTrue(toXmlGenerator0.canWriteFormattedNumbers());
      assertFalse(toXmlGenerator0.canWriteObjectId());
      assertEquals(2, toXmlGenerator0.getFeatureMask());
      assertFalse(toXmlGenerator0.canWriteBinaryNatively());
      assertEquals((-1), toXmlGenerator0.getOutputBuffered());
      assertFalse(toXmlGenerator0.isClosed());
      assertEquals(0, toXmlGenerator0.getHighestEscapedChar());
      assertEquals(15, toXmlGenerator0.getFormatFeatures());
      assertFalse(toXmlGenerator0.canWriteTypeId());
      assertTrue(toXmlGenerator0.canOmitFields());
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      
      QName qName0 = new QName("write String value", "yZE)yeay6Wg|Yt~5L", "");
      assertNotNull(qName0);
      
      toXmlGenerator0.startWrappedValue(qName0, qName0);
      assertEquals("", byteArrayOutputStream0.toString());
      assertEquals(0, byteArrayOutputStream0.size());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertTrue(writerConfig0.willValidateContent());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willValidateNames());
      assertFalse(writerConfig0.willValidateAttributes());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertTrue(writerConfig0.willEscapeCr());
      assertTrue(writerConfig0.willValidateStructure());
      assertEquals(1, asciiXmlWriter0.getRow());
      assertEquals("-", nonNsStreamWriter0.getEncoding());
      assertEquals(0, nonNsStreamWriter0.getAttributeCount());
      assertEquals("1.0", nonNsStreamWriter0.getXmlVersion());
      assertNull(nonNsStreamWriter0.getBaseUri());
      assertNull(iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertTrue(toXmlGenerator0.inRoot());
      assertTrue(toXmlGenerator0.canWriteFormattedNumbers());
      assertFalse(toXmlGenerator0.canWriteObjectId());
      assertEquals(2, toXmlGenerator0.getFeatureMask());
      assertFalse(toXmlGenerator0.canWriteBinaryNatively());
      assertEquals((-1), toXmlGenerator0.getOutputBuffered());
      assertFalse(toXmlGenerator0.isClosed());
      assertEquals(0, toXmlGenerator0.getHighestEscapedChar());
      assertEquals(15, toXmlGenerator0.getFormatFeatures());
      assertFalse(toXmlGenerator0.canWriteTypeId());
      assertTrue(toXmlGenerator0.canOmitFields());
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      
      toXmlGenerator0.finishWrappedValue(qName0, (QName) null);
      assertEquals("", byteArrayOutputStream0.toString());
      assertEquals(0, byteArrayOutputStream0.size());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertTrue(writerConfig0.willValidateContent());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willValidateNames());
      assertFalse(writerConfig0.willValidateAttributes());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertTrue(writerConfig0.willEscapeCr());
      assertTrue(writerConfig0.willValidateStructure());
      assertEquals(1, asciiXmlWriter0.getRow());
      assertEquals("-", nonNsStreamWriter0.getEncoding());
      assertEquals(0, nonNsStreamWriter0.getAttributeCount());
      assertEquals("1.0", nonNsStreamWriter0.getXmlVersion());
      assertNull(nonNsStreamWriter0.getBaseUri());
      assertNull(iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertTrue(toXmlGenerator0.inRoot());
      assertTrue(toXmlGenerator0.canWriteFormattedNumbers());
      assertFalse(toXmlGenerator0.canWriteObjectId());
      assertEquals(2, toXmlGenerator0.getFeatureMask());
      assertFalse(toXmlGenerator0.canWriteBinaryNatively());
      assertEquals((-1), toXmlGenerator0.getOutputBuffered());
      assertFalse(toXmlGenerator0.isClosed());
      assertEquals(0, toXmlGenerator0.getHighestEscapedChar());
      assertEquals(15, toXmlGenerator0.getFormatFeatures());
      assertFalse(toXmlGenerator0.canWriteTypeId());
      assertTrue(toXmlGenerator0.canOmitFields());
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      
//      try { 
        toXmlGenerator0.writeRawValue("; expected one of type (CDATA, ID, IDREF, IDREFS, ENTITY, ENTITIES NOTATION, NMTOKE or NMTOENS)");
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Trying to output second root, <yZE)yeay6Wg|Yt~5L>
//         //
//         verifyException("com.fasterxml.jackson.dataformat.xml.util.StaxUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertNotNull(bufferRecycler0);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(3);
      assertNotNull(byteArrayOutputStream0);
      assertEquals(0, byteArrayOutputStream0.size());
      assertEquals("", byteArrayOutputStream0.toString());
      
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      assertNotNull(writerConfig0);
      assertTrue(writerConfig0.willValidateStructure());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertFalse(writerConfig0.willValidateAttributes());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertTrue(writerConfig0.willValidateContent());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertTrue(writerConfig0.willEscapeCr());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willValidateNames());
      assertFalse(writerConfig0.willOutputCDataAsText());
      
      AsciiXmlWriter asciiXmlWriter0 = new AsciiXmlWriter(byteArrayOutputStream0, writerConfig0, false);
      assertNotNull(asciiXmlWriter0);
      assertEquals(0, byteArrayOutputStream0.size());
      assertEquals("", byteArrayOutputStream0.toString());
      assertTrue(writerConfig0.willValidateStructure());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertFalse(writerConfig0.willValidateAttributes());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertTrue(writerConfig0.willValidateContent());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertTrue(writerConfig0.willEscapeCr());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willValidateNames());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertEquals(1, asciiXmlWriter0.getRow());
      
      SimpleNsStreamWriter simpleNsStreamWriter0 = new SimpleNsStreamWriter(asciiXmlWriter0, "", writerConfig0);
      assertNotNull(simpleNsStreamWriter0);
      assertEquals(0, byteArrayOutputStream0.size());
      assertEquals("", byteArrayOutputStream0.toString());
      assertTrue(writerConfig0.willValidateStructure());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertFalse(writerConfig0.willValidateAttributes());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertTrue(writerConfig0.willValidateContent());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertTrue(writerConfig0.willEscapeCr());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willValidateNames());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertEquals(1, asciiXmlWriter0.getRow());
      assertNull(simpleNsStreamWriter0.getBaseUri());
      assertEquals(0, simpleNsStreamWriter0.getAttributeCount());
      assertEquals("", simpleNsStreamWriter0.getEncoding());
      assertEquals("1.0", simpleNsStreamWriter0.getXmlVersion());
      
      ThaiBuddhistEra thaiBuddhistEra0 = ThaiBuddhistEra.BE;
      assertEquals(ThaiBuddhistEra.BE, thaiBuddhistEra0);
      
      IOContext iOContext0 = new IOContext(bufferRecycler0, thaiBuddhistEra0, false);
      assertNotNull(iOContext0);
      assertFalse(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 0, 0, objectMapper0, simpleNsStreamWriter0);
      assertNotNull(toXmlGenerator0);
      assertEquals(0, byteArrayOutputStream0.size());
      assertEquals("", byteArrayOutputStream0.toString());
      assertTrue(writerConfig0.willValidateStructure());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertFalse(writerConfig0.willValidateAttributes());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertTrue(writerConfig0.willValidateContent());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertTrue(writerConfig0.willEscapeCr());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willValidateNames());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertEquals(1, asciiXmlWriter0.getRow());
      assertNull(simpleNsStreamWriter0.getBaseUri());
      assertEquals(0, simpleNsStreamWriter0.getAttributeCount());
      assertEquals("", simpleNsStreamWriter0.getEncoding());
      assertEquals("1.0", simpleNsStreamWriter0.getXmlVersion());
      assertFalse(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertEquals((-1), toXmlGenerator0.getOutputBuffered());
      assertFalse(toXmlGenerator0.canWriteTypeId());
      assertFalse(toXmlGenerator0.canWriteObjectId());
      assertEquals(0, toXmlGenerator0.getHighestEscapedChar());
      assertTrue(toXmlGenerator0.inRoot());
      assertEquals(0, toXmlGenerator0.getFeatureMask());
      assertFalse(toXmlGenerator0.isClosed());
      assertEquals(0, toXmlGenerator0.getFormatFeatures());
      assertFalse(toXmlGenerator0.canWriteBinaryNatively());
      assertTrue(toXmlGenerator0.canOmitFields());
      assertTrue(toXmlGenerator0.canWriteFormattedNumbers());
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      
      char[] charArray0 = new char[0];
      toXmlGenerator0.writeRaw(charArray0, (-2275), (-32));
      assertEquals(0, charArray0.length);
      assertEquals(0, byteArrayOutputStream0.size());
      assertEquals("", byteArrayOutputStream0.toString());
      assertTrue(writerConfig0.willValidateStructure());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertFalse(writerConfig0.willValidateAttributes());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertTrue(writerConfig0.willValidateContent());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertTrue(writerConfig0.willEscapeCr());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willValidateNames());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertEquals(1, asciiXmlWriter0.getRow());
      assertNull(simpleNsStreamWriter0.getBaseUri());
      assertEquals(0, simpleNsStreamWriter0.getAttributeCount());
      assertEquals("", simpleNsStreamWriter0.getEncoding());
      assertEquals("1.0", simpleNsStreamWriter0.getXmlVersion());
      assertFalse(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertEquals((-1), toXmlGenerator0.getOutputBuffered());
      assertFalse(toXmlGenerator0.canWriteTypeId());
      assertFalse(toXmlGenerator0.canWriteObjectId());
      assertEquals(0, toXmlGenerator0.getHighestEscapedChar());
      assertTrue(toXmlGenerator0.inRoot());
      assertEquals(0, toXmlGenerator0.getFeatureMask());
      assertFalse(toXmlGenerator0.isClosed());
      assertEquals(0, toXmlGenerator0.getFormatFeatures());
      assertFalse(toXmlGenerator0.canWriteBinaryNatively());
      assertTrue(toXmlGenerator0.canOmitFields());
      assertTrue(toXmlGenerator0.canWriteFormattedNumbers());
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertNotNull(bufferRecycler0);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, true);
      assertNotNull(iOContext0);
      assertTrue(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      assertNotNull(writerConfig0);
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertTrue(writerConfig0.willEscapeCr());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willValidateAttributes());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willValidateNames());
      assertTrue(writerConfig0.willValidateStructure());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertFalse(writerConfig0.willFixContent());
      assertTrue(writerConfig0.willValidateContent());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      assertNotNull(byteArrayOutputStream0);
      assertEquals("", byteArrayOutputStream0.toString());
      assertEquals(0, byteArrayOutputStream0.size());
      
      BufferingXmlWriter bufferingXmlWriter0 = new BufferingXmlWriter((Writer) null, writerConfig0, "JSON", true, byteArrayOutputStream0, 3);
      assertNotNull(bufferingXmlWriter0);
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertTrue(writerConfig0.willEscapeCr());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willValidateAttributes());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willValidateNames());
      assertTrue(writerConfig0.willValidateStructure());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertFalse(writerConfig0.willFixContent());
      assertTrue(writerConfig0.willValidateContent());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertEquals("", byteArrayOutputStream0.toString());
      assertEquals(0, byteArrayOutputStream0.size());
      assertEquals(1, bufferingXmlWriter0.getRow());
      
      NonNsStreamWriter nonNsStreamWriter0 = new NonNsStreamWriter(bufferingXmlWriter0, "JSON", writerConfig0);
      assertNotNull(nonNsStreamWriter0);
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertTrue(writerConfig0.willEscapeCr());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willValidateAttributes());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willValidateNames());
      assertTrue(writerConfig0.willValidateStructure());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertFalse(writerConfig0.willFixContent());
      assertTrue(writerConfig0.willValidateContent());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertEquals("", byteArrayOutputStream0.toString());
      assertEquals(0, byteArrayOutputStream0.size());
      assertEquals(1, bufferingXmlWriter0.getRow());
      assertEquals("JSON", nonNsStreamWriter0.getEncoding());
      assertEquals(0, nonNsStreamWriter0.getAttributeCount());
      assertNull(nonNsStreamWriter0.getBaseUri());
      assertEquals("1.0", nonNsStreamWriter0.getXmlVersion());
      
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 498, 3, (ObjectCodec) null, nonNsStreamWriter0);
      assertNotNull(toXmlGenerator0);
      assertTrue(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertTrue(writerConfig0.willEscapeCr());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willValidateAttributes());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willValidateNames());
      assertTrue(writerConfig0.willValidateStructure());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertFalse(writerConfig0.willFixContent());
      assertTrue(writerConfig0.willValidateContent());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertEquals("", byteArrayOutputStream0.toString());
      assertEquals(0, byteArrayOutputStream0.size());
      assertEquals(1, bufferingXmlWriter0.getRow());
      assertEquals("JSON", nonNsStreamWriter0.getEncoding());
      assertEquals(0, nonNsStreamWriter0.getAttributeCount());
      assertNull(nonNsStreamWriter0.getBaseUri());
      assertEquals("1.0", nonNsStreamWriter0.getXmlVersion());
      assertFalse(toXmlGenerator0.canWriteTypeId());
      assertFalse(toXmlGenerator0.isClosed());
      assertTrue(toXmlGenerator0.canOmitFields());
      assertEquals(3, toXmlGenerator0.getFormatFeatures());
      assertTrue(toXmlGenerator0.inRoot());
      assertEquals(498, toXmlGenerator0.getFeatureMask());
      assertFalse(toXmlGenerator0.canWriteObjectId());
      assertTrue(toXmlGenerator0.canWriteFormattedNumbers());
      assertFalse(toXmlGenerator0.canWriteBinaryNatively());
      assertEquals((-1), toXmlGenerator0.getOutputBuffered());
      assertEquals(0, toXmlGenerator0.getHighestEscapedChar());
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      
      toXmlGenerator0.writeRaw("", 4, (-3591));
      assertTrue(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertTrue(writerConfig0.willEscapeCr());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willValidateAttributes());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willValidateNames());
      assertTrue(writerConfig0.willValidateStructure());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertFalse(writerConfig0.willFixContent());
      assertTrue(writerConfig0.willValidateContent());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertEquals("", byteArrayOutputStream0.toString());
      assertEquals(0, byteArrayOutputStream0.size());
      assertEquals(1, bufferingXmlWriter0.getRow());
      assertEquals("JSON", nonNsStreamWriter0.getEncoding());
      assertEquals(0, nonNsStreamWriter0.getAttributeCount());
      assertNull(nonNsStreamWriter0.getBaseUri());
      assertEquals("1.0", nonNsStreamWriter0.getXmlVersion());
      assertFalse(toXmlGenerator0.canWriteTypeId());
      assertFalse(toXmlGenerator0.isClosed());
      assertTrue(toXmlGenerator0.canOmitFields());
      assertEquals(3, toXmlGenerator0.getFormatFeatures());
      assertTrue(toXmlGenerator0.inRoot());
      assertEquals(498, toXmlGenerator0.getFeatureMask());
      assertFalse(toXmlGenerator0.canWriteObjectId());
      assertTrue(toXmlGenerator0.canWriteFormattedNumbers());
      assertFalse(toXmlGenerator0.canWriteBinaryNatively());
      assertEquals((-1), toXmlGenerator0.getOutputBuffered());
      assertEquals(0, toXmlGenerator0.getHighestEscapedChar());
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertNotNull(bufferRecycler0);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(3);
      assertNotNull(byteArrayOutputStream0);
      assertEquals("", byteArrayOutputStream0.toString());
      assertEquals(0, byteArrayOutputStream0.size());
      
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      assertNotNull(writerConfig0);
      assertEquals(933, writerConfig0.getConfigFlags());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertFalse(writerConfig0.willFixContent());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertTrue(writerConfig0.willValidateContent());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertTrue(writerConfig0.willEscapeCr());
      assertTrue(writerConfig0.willValidateStructure());
      assertFalse(writerConfig0.willValidateAttributes());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willValidateNames());
      
      AsciiXmlWriter asciiXmlWriter0 = new AsciiXmlWriter(byteArrayOutputStream0, writerConfig0, false);
      assertNotNull(asciiXmlWriter0);
      assertEquals("", byteArrayOutputStream0.toString());
      assertEquals(0, byteArrayOutputStream0.size());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertFalse(writerConfig0.willFixContent());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertTrue(writerConfig0.willValidateContent());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertTrue(writerConfig0.willEscapeCr());
      assertTrue(writerConfig0.willValidateStructure());
      assertFalse(writerConfig0.willValidateAttributes());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willValidateNames());
      assertEquals(1, asciiXmlWriter0.getRow());
      
      NonNsStreamWriter nonNsStreamWriter0 = new NonNsStreamWriter(asciiXmlWriter0, "cOkF~y.\u0000n", writerConfig0);
      assertNotNull(nonNsStreamWriter0);
      assertEquals("", byteArrayOutputStream0.toString());
      assertEquals(0, byteArrayOutputStream0.size());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertFalse(writerConfig0.willFixContent());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertTrue(writerConfig0.willValidateContent());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertTrue(writerConfig0.willEscapeCr());
      assertTrue(writerConfig0.willValidateStructure());
      assertFalse(writerConfig0.willValidateAttributes());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willValidateNames());
      assertEquals(1, asciiXmlWriter0.getRow());
      assertEquals("1.0", nonNsStreamWriter0.getXmlVersion());
      assertEquals("cOkF~y.\u0000n", nonNsStreamWriter0.getEncoding());
      assertEquals(0, nonNsStreamWriter0.getAttributeCount());
      assertNull(nonNsStreamWriter0.getBaseUri());
      
      IOContext iOContext0 = new IOContext(bufferRecycler0, nonNsStreamWriter0, false);
      assertNotNull(iOContext0);
      assertEquals("", byteArrayOutputStream0.toString());
      assertEquals(0, byteArrayOutputStream0.size());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertFalse(writerConfig0.willFixContent());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertTrue(writerConfig0.willValidateContent());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertTrue(writerConfig0.willEscapeCr());
      assertTrue(writerConfig0.willValidateStructure());
      assertFalse(writerConfig0.willValidateAttributes());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willValidateNames());
      assertEquals(1, asciiXmlWriter0.getRow());
      assertEquals("1.0", nonNsStreamWriter0.getXmlVersion());
      assertEquals("cOkF~y.\u0000n", nonNsStreamWriter0.getEncoding());
      assertEquals(0, nonNsStreamWriter0.getAttributeCount());
      assertNull(nonNsStreamWriter0.getBaseUri());
      assertFalse(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 574, 2, objectMapper0, nonNsStreamWriter0);
      assertNotNull(toXmlGenerator0);
      assertEquals("", byteArrayOutputStream0.toString());
      assertEquals(0, byteArrayOutputStream0.size());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertFalse(writerConfig0.willFixContent());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertTrue(writerConfig0.willValidateContent());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertTrue(writerConfig0.willEscapeCr());
      assertTrue(writerConfig0.willValidateStructure());
      assertFalse(writerConfig0.willValidateAttributes());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willValidateNames());
      assertEquals(1, asciiXmlWriter0.getRow());
      assertEquals("1.0", nonNsStreamWriter0.getXmlVersion());
      assertEquals("cOkF~y.\u0000n", nonNsStreamWriter0.getEncoding());
      assertEquals(0, nonNsStreamWriter0.getAttributeCount());
      assertNull(nonNsStreamWriter0.getBaseUri());
      assertFalse(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertEquals(2, toXmlGenerator0.getFormatFeatures());
      assertFalse(toXmlGenerator0.canWriteBinaryNatively());
      assertTrue(toXmlGenerator0.canOmitFields());
      assertFalse(toXmlGenerator0.isClosed());
      assertTrue(toXmlGenerator0.inRoot());
      assertFalse(toXmlGenerator0.canWriteObjectId());
      assertFalse(toXmlGenerator0.canWriteTypeId());
      assertEquals((-1), toXmlGenerator0.getOutputBuffered());
      assertEquals(0, toXmlGenerator0.getHighestEscapedChar());
      assertEquals(574, toXmlGenerator0.getFeatureMask());
      assertTrue(toXmlGenerator0.canWriteFormattedNumbers());
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      
//      try { 
        toXmlGenerator0.writeRaw("cOkF~y.\u0000n");
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Invalid null character in text to output
//         //
//         verifyException("com.fasterxml.jackson.dataformat.xml.util.StaxUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertNotNull(bufferRecycler0);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      assertNotNull(iOContext0);
      assertFalse(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      
      WriterConfig writerConfig0 = WriterConfig.createJ2MEDefaults();
      assertNotNull(writerConfig0);
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.willValidateContent());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertTrue(writerConfig0.willValidateStructure());
      assertFalse(writerConfig0.willValidateNames());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertTrue(writerConfig0.willEscapeCr());
      assertFalse(writerConfig0.willValidateAttributes());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertTrue(writerConfig0.willSupportNamespaces());
      
      ISOLatin1XmlWriter iSOLatin1XmlWriter0 = new ISOLatin1XmlWriter((OutputStream) null, writerConfig0, false);
      assertNotNull(iSOLatin1XmlWriter0);
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.willValidateContent());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertTrue(writerConfig0.willValidateStructure());
      assertFalse(writerConfig0.willValidateNames());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertTrue(writerConfig0.willEscapeCr());
      assertFalse(writerConfig0.willValidateAttributes());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertEquals(1, iSOLatin1XmlWriter0.getRow());
      
      SimpleNsStreamWriter simpleNsStreamWriter0 = new SimpleNsStreamWriter(iSOLatin1XmlWriter0, "", writerConfig0);
      assertNotNull(simpleNsStreamWriter0);
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.willValidateContent());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertTrue(writerConfig0.willValidateStructure());
      assertFalse(writerConfig0.willValidateNames());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertTrue(writerConfig0.willEscapeCr());
      assertFalse(writerConfig0.willValidateAttributes());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertEquals(1, iSOLatin1XmlWriter0.getRow());
      assertEquals(0, simpleNsStreamWriter0.getAttributeCount());
      assertEquals("", simpleNsStreamWriter0.getEncoding());
      assertNull(simpleNsStreamWriter0.getBaseUri());
      assertEquals("1.0", simpleNsStreamWriter0.getXmlVersion());
      
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 0, 0, objectMapper0, simpleNsStreamWriter0);
      assertNotNull(toXmlGenerator0);
      assertFalse(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.willValidateContent());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertTrue(writerConfig0.willValidateStructure());
      assertFalse(writerConfig0.willValidateNames());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertTrue(writerConfig0.willEscapeCr());
      assertFalse(writerConfig0.willValidateAttributes());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertEquals(1, iSOLatin1XmlWriter0.getRow());
      assertEquals(0, simpleNsStreamWriter0.getAttributeCount());
      assertEquals("", simpleNsStreamWriter0.getEncoding());
      assertNull(simpleNsStreamWriter0.getBaseUri());
      assertEquals("1.0", simpleNsStreamWriter0.getXmlVersion());
      assertTrue(toXmlGenerator0.canOmitFields());
      assertTrue(toXmlGenerator0.canWriteFormattedNumbers());
      assertTrue(toXmlGenerator0.inRoot());
      assertFalse(toXmlGenerator0.canWriteTypeId());
      assertEquals(0, toXmlGenerator0.getHighestEscapedChar());
      assertFalse(toXmlGenerator0.isClosed());
      assertEquals(0, toXmlGenerator0.getFormatFeatures());
      assertEquals(0, toXmlGenerator0.getFeatureMask());
      assertEquals((-1), toXmlGenerator0.getOutputBuffered());
      assertFalse(toXmlGenerator0.canWriteObjectId());
      assertFalse(toXmlGenerator0.canWriteBinaryNatively());
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      
      QName qName0 = new QName("", "");
      assertNotNull(qName0);
      
      toXmlGenerator0.startWrappedValue(qName0, qName0);
      assertFalse(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.willValidateContent());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertTrue(writerConfig0.willValidateStructure());
      assertFalse(writerConfig0.willValidateNames());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertTrue(writerConfig0.willEscapeCr());
      assertFalse(writerConfig0.willValidateAttributes());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertEquals(1, iSOLatin1XmlWriter0.getRow());
      assertEquals(0, simpleNsStreamWriter0.getAttributeCount());
      assertEquals("", simpleNsStreamWriter0.getEncoding());
      assertNull(simpleNsStreamWriter0.getBaseUri());
      assertEquals("1.0", simpleNsStreamWriter0.getXmlVersion());
      assertTrue(toXmlGenerator0.canOmitFields());
      assertTrue(toXmlGenerator0.canWriteFormattedNumbers());
      assertTrue(toXmlGenerator0.inRoot());
      assertFalse(toXmlGenerator0.canWriteTypeId());
      assertEquals(0, toXmlGenerator0.getHighestEscapedChar());
      assertFalse(toXmlGenerator0.isClosed());
      assertEquals(0, toXmlGenerator0.getFormatFeatures());
      assertEquals(0, toXmlGenerator0.getFeatureMask());
      assertEquals((-1), toXmlGenerator0.getOutputBuffered());
      assertFalse(toXmlGenerator0.canWriteObjectId());
      assertFalse(toXmlGenerator0.canWriteBinaryNatively());
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      
      toXmlGenerator0.writeNumber((BigInteger) null);
      assertFalse(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.willValidateContent());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertTrue(writerConfig0.willValidateStructure());
      assertFalse(writerConfig0.willValidateNames());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertTrue(writerConfig0.willEscapeCr());
      assertFalse(writerConfig0.willValidateAttributes());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertEquals(1, iSOLatin1XmlWriter0.getRow());
      assertEquals(0, simpleNsStreamWriter0.getAttributeCount());
      assertEquals("", simpleNsStreamWriter0.getEncoding());
      assertNull(simpleNsStreamWriter0.getBaseUri());
      assertEquals("1.0", simpleNsStreamWriter0.getXmlVersion());
      assertTrue(toXmlGenerator0.canOmitFields());
      assertTrue(toXmlGenerator0.canWriteFormattedNumbers());
      assertTrue(toXmlGenerator0.inRoot());
      assertFalse(toXmlGenerator0.canWriteTypeId());
      assertEquals(0, toXmlGenerator0.getHighestEscapedChar());
      assertFalse(toXmlGenerator0.isClosed());
      assertEquals(0, toXmlGenerator0.getFormatFeatures());
      assertEquals(0, toXmlGenerator0.getFeatureMask());
      assertEquals((-1), toXmlGenerator0.getOutputBuffered());
      assertFalse(toXmlGenerator0.canWriteObjectId());
      assertFalse(toXmlGenerator0.canWriteBinaryNatively());
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertNotNull(bufferRecycler0);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      assertNotNull(writerConfig0);
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertFalse(writerConfig0.willValidateNames());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertTrue(writerConfig0.willValidateContent());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.willValidateStructure());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willValidateAttributes());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertTrue(writerConfig0.willEscapeCr());
      assertFalse(writerConfig0.willOutputCDataAsText());
      
      DefaultXmlPrettyPrinter defaultXmlPrettyPrinter0 = new DefaultXmlPrettyPrinter();
      assertNotNull(defaultXmlPrettyPrinter0);
      
      IOContext iOContext0 = new IOContext(bufferRecycler0, defaultXmlPrettyPrinter0, false);
      assertNotNull(iOContext0);
      assertNull(iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      assertNotNull(byteArrayOutputStream0);
      assertEquals(0, byteArrayOutputStream0.size());
      assertEquals("", byteArrayOutputStream0.toString());
      
      AsciiXmlWriter asciiXmlWriter0 = new AsciiXmlWriter(byteArrayOutputStream0, writerConfig0, true);
      assertNotNull(asciiXmlWriter0);
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertFalse(writerConfig0.willValidateNames());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertTrue(writerConfig0.willValidateContent());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.willValidateStructure());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willValidateAttributes());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertTrue(writerConfig0.willEscapeCr());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertEquals(0, byteArrayOutputStream0.size());
      assertEquals("", byteArrayOutputStream0.toString());
      assertEquals(1, asciiXmlWriter0.getRow());
      
      SimpleNsStreamWriter simpleNsStreamWriter0 = new SimpleNsStreamWriter(asciiXmlWriter0, "$9", writerConfig0);
      assertNotNull(simpleNsStreamWriter0);
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertFalse(writerConfig0.willValidateNames());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertTrue(writerConfig0.willValidateContent());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.willValidateStructure());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willValidateAttributes());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertTrue(writerConfig0.willEscapeCr());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertEquals(0, byteArrayOutputStream0.size());
      assertEquals("", byteArrayOutputStream0.toString());
      assertEquals(1, asciiXmlWriter0.getRow());
      assertEquals(0, simpleNsStreamWriter0.getAttributeCount());
      assertEquals("1.0", simpleNsStreamWriter0.getXmlVersion());
      assertNull(simpleNsStreamWriter0.getBaseUri());
      assertEquals("$9", simpleNsStreamWriter0.getEncoding());
      
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 1825, 2, objectMapper0, simpleNsStreamWriter0);
      assertNotNull(toXmlGenerator0);
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertFalse(writerConfig0.willValidateNames());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertTrue(writerConfig0.willValidateContent());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.willValidateStructure());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willValidateAttributes());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertTrue(writerConfig0.willEscapeCr());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertNull(iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertEquals(0, byteArrayOutputStream0.size());
      assertEquals("", byteArrayOutputStream0.toString());
      assertEquals(1, asciiXmlWriter0.getRow());
      assertEquals(0, simpleNsStreamWriter0.getAttributeCount());
      assertEquals("1.0", simpleNsStreamWriter0.getXmlVersion());
      assertNull(simpleNsStreamWriter0.getBaseUri());
      assertEquals("$9", simpleNsStreamWriter0.getEncoding());
      assertTrue(toXmlGenerator0.inRoot());
      assertTrue(toXmlGenerator0.canWriteFormattedNumbers());
      assertEquals(2, toXmlGenerator0.getFormatFeatures());
      assertFalse(toXmlGenerator0.canWriteTypeId());
      assertTrue(toXmlGenerator0.canOmitFields());
      assertFalse(toXmlGenerator0.isClosed());
      assertFalse(toXmlGenerator0.canWriteObjectId());
      assertEquals(1825, toXmlGenerator0.getFeatureMask());
      assertFalse(toXmlGenerator0.canWriteBinaryNatively());
      assertEquals((-1), toXmlGenerator0.getOutputBuffered());
      assertEquals(0, toXmlGenerator0.getHighestEscapedChar());
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      
      QName qName0 = QName.valueOf("$9");
      assertNotNull(qName0);
      
      toXmlGenerator0.startWrappedValue(qName0, qName0);
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertFalse(writerConfig0.willValidateNames());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertTrue(writerConfig0.willValidateContent());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.willValidateStructure());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willValidateAttributes());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertTrue(writerConfig0.willEscapeCr());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertNull(iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertEquals(0, byteArrayOutputStream0.size());
      assertEquals("", byteArrayOutputStream0.toString());
      assertEquals(1, asciiXmlWriter0.getRow());
      assertEquals(0, simpleNsStreamWriter0.getAttributeCount());
      assertEquals("1.0", simpleNsStreamWriter0.getXmlVersion());
      assertNull(simpleNsStreamWriter0.getBaseUri());
      assertEquals("$9", simpleNsStreamWriter0.getEncoding());
      assertTrue(toXmlGenerator0.inRoot());
      assertTrue(toXmlGenerator0.canWriteFormattedNumbers());
      assertEquals(2, toXmlGenerator0.getFormatFeatures());
      assertFalse(toXmlGenerator0.canWriteTypeId());
      assertTrue(toXmlGenerator0.canOmitFields());
      assertFalse(toXmlGenerator0.isClosed());
      assertFalse(toXmlGenerator0.canWriteObjectId());
      assertEquals(1825, toXmlGenerator0.getFeatureMask());
      assertFalse(toXmlGenerator0.canWriteBinaryNatively());
      assertEquals((-1), toXmlGenerator0.getOutputBuffered());
      assertEquals(0, toXmlGenerator0.getHighestEscapedChar());
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      
      toXmlGenerator0.writeNumber((BigDecimal) null);
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertFalse(writerConfig0.willValidateNames());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertTrue(writerConfig0.willValidateContent());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.willValidateStructure());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willValidateAttributes());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertTrue(writerConfig0.willEscapeCr());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertNull(iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertEquals(0, byteArrayOutputStream0.size());
      assertEquals("", byteArrayOutputStream0.toString());
      assertEquals(1, asciiXmlWriter0.getRow());
      assertEquals(0, simpleNsStreamWriter0.getAttributeCount());
      assertEquals("1.0", simpleNsStreamWriter0.getXmlVersion());
      assertNull(simpleNsStreamWriter0.getBaseUri());
      assertEquals("$9", simpleNsStreamWriter0.getEncoding());
      assertTrue(toXmlGenerator0.inRoot());
      assertTrue(toXmlGenerator0.canWriteFormattedNumbers());
      assertEquals(2, toXmlGenerator0.getFormatFeatures());
      assertFalse(toXmlGenerator0.canWriteTypeId());
      assertTrue(toXmlGenerator0.canOmitFields());
      assertFalse(toXmlGenerator0.isClosed());
      assertFalse(toXmlGenerator0.canWriteObjectId());
      assertEquals(1825, toXmlGenerator0.getFeatureMask());
      assertFalse(toXmlGenerator0.canWriteBinaryNatively());
      assertEquals((-1), toXmlGenerator0.getOutputBuffered());
      assertEquals(0, toXmlGenerator0.getHighestEscapedChar());
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertNotNull(bufferRecycler0);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      
      WriterConfig writerConfig0 = WriterConfig.createJ2MEDefaults();
      assertNotNull(writerConfig0);
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willValidateAttributes());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertTrue(writerConfig0.willValidateContent());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertFalse(writerConfig0.willFixContent());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertFalse(writerConfig0.willValidateNames());
      assertTrue(writerConfig0.willEscapeCr());
      assertTrue(writerConfig0.willValidateStructure());
      
      MockFile mockFile0 = new MockFile("C-Ci@r\"8]&=o^=E!");
      assertNotNull(mockFile0);
      
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0);
      assertNotNull(mockFileOutputStream0);
      
      ISOLatin1XmlWriter iSOLatin1XmlWriter0 = new ISOLatin1XmlWriter(mockFileOutputStream0, writerConfig0, true);
      assertNotNull(iSOLatin1XmlWriter0);
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willValidateAttributes());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertTrue(writerConfig0.willValidateContent());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertFalse(writerConfig0.willFixContent());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertFalse(writerConfig0.willValidateNames());
      assertTrue(writerConfig0.willEscapeCr());
      assertTrue(writerConfig0.willValidateStructure());
      assertEquals("C-Ci@r\"8]&=o^=E!", mockFile0.getName());
      assertTrue(mockFile0.isFile());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.canExecute());
      assertEquals("C-Ci@r\"8]&=o^=E!", mockFile0.toString());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isDirectory());
      assertTrue(mockFile0.canWrite());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertNull(mockFile0.getParent());
      assertEquals(1, iSOLatin1XmlWriter0.getRow());
      
      SimpleNsStreamWriter simpleNsStreamWriter0 = new SimpleNsStreamWriter(iSOLatin1XmlWriter0, "C-Ci@r\"8]&=o^=E!", writerConfig0);
      assertNotNull(simpleNsStreamWriter0);
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willValidateAttributes());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertTrue(writerConfig0.willValidateContent());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertFalse(writerConfig0.willFixContent());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertFalse(writerConfig0.willValidateNames());
      assertTrue(writerConfig0.willEscapeCr());
      assertTrue(writerConfig0.willValidateStructure());
      assertEquals("C-Ci@r\"8]&=o^=E!", mockFile0.getName());
      assertTrue(mockFile0.isFile());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.canExecute());
      assertEquals("C-Ci@r\"8]&=o^=E!", mockFile0.toString());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isDirectory());
      assertTrue(mockFile0.canWrite());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertNull(mockFile0.getParent());
      assertEquals(1, iSOLatin1XmlWriter0.getRow());
      assertEquals("1.0", simpleNsStreamWriter0.getXmlVersion());
      assertEquals("C-Ci@r\"8]&=o^=E!", simpleNsStreamWriter0.getEncoding());
      assertNull(simpleNsStreamWriter0.getBaseUri());
      assertEquals(0, simpleNsStreamWriter0.getAttributeCount());
      
      IOContext iOContext0 = new IOContext(bufferRecycler0, simpleNsStreamWriter0, true);
      assertNotNull(iOContext0);
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willValidateAttributes());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertTrue(writerConfig0.willValidateContent());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertFalse(writerConfig0.willFixContent());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertFalse(writerConfig0.willValidateNames());
      assertTrue(writerConfig0.willEscapeCr());
      assertTrue(writerConfig0.willValidateStructure());
      assertEquals("C-Ci@r\"8]&=o^=E!", mockFile0.getName());
      assertTrue(mockFile0.isFile());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.canExecute());
      assertEquals("C-Ci@r\"8]&=o^=E!", mockFile0.toString());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isDirectory());
      assertTrue(mockFile0.canWrite());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertNull(mockFile0.getParent());
      assertEquals(1, iSOLatin1XmlWriter0.getRow());
      assertEquals("1.0", simpleNsStreamWriter0.getXmlVersion());
      assertEquals("C-Ci@r\"8]&=o^=E!", simpleNsStreamWriter0.getEncoding());
      assertNull(simpleNsStreamWriter0.getBaseUri());
      assertEquals(0, simpleNsStreamWriter0.getAttributeCount());
      assertTrue(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 2945, (-1600), objectMapper0, simpleNsStreamWriter0);
      assertNotNull(toXmlGenerator0);
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willValidateAttributes());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertTrue(writerConfig0.willValidateContent());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertFalse(writerConfig0.willFixContent());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertFalse(writerConfig0.willValidateNames());
      assertTrue(writerConfig0.willEscapeCr());
      assertTrue(writerConfig0.willValidateStructure());
      assertEquals("C-Ci@r\"8]&=o^=E!", mockFile0.getName());
      assertTrue(mockFile0.isFile());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.canExecute());
      assertEquals("C-Ci@r\"8]&=o^=E!", mockFile0.toString());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isDirectory());
      assertTrue(mockFile0.canWrite());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertNull(mockFile0.getParent());
      assertEquals(1, iSOLatin1XmlWriter0.getRow());
      assertEquals("1.0", simpleNsStreamWriter0.getXmlVersion());
      assertEquals("C-Ci@r\"8]&=o^=E!", simpleNsStreamWriter0.getEncoding());
      assertNull(simpleNsStreamWriter0.getBaseUri());
      assertEquals(0, simpleNsStreamWriter0.getAttributeCount());
      assertTrue(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertFalse(toXmlGenerator0.canWriteTypeId());
      assertEquals((-1), toXmlGenerator0.getOutputBuffered());
      assertFalse(toXmlGenerator0.isClosed());
      assertEquals(0, toXmlGenerator0.getHighestEscapedChar());
      assertTrue(toXmlGenerator0.canWriteFormattedNumbers());
      assertFalse(toXmlGenerator0.canWriteBinaryNatively());
      assertTrue(toXmlGenerator0.inRoot());
      assertTrue(toXmlGenerator0.canOmitFields());
      assertEquals(2945, toXmlGenerator0.getFeatureMask());
      assertFalse(toXmlGenerator0.canWriteObjectId());
      assertEquals((-1600), toXmlGenerator0.getFormatFeatures());
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      
      QName qName0 = new QName("Underlying Stax XMLStreamWriter (of type ", "Underlying Stax XMLStreamWriter (of type ");
      assertNotNull(qName0);
      
      toXmlGenerator0.startWrappedValue((QName) null, qName0);
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willValidateAttributes());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertTrue(writerConfig0.willValidateContent());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertFalse(writerConfig0.willFixContent());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertFalse(writerConfig0.willValidateNames());
      assertTrue(writerConfig0.willEscapeCr());
      assertTrue(writerConfig0.willValidateStructure());
      assertEquals("C-Ci@r\"8]&=o^=E!", mockFile0.getName());
      assertTrue(mockFile0.isFile());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.canExecute());
      assertEquals("C-Ci@r\"8]&=o^=E!", mockFile0.toString());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isDirectory());
      assertTrue(mockFile0.canWrite());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertNull(mockFile0.getParent());
      assertEquals(1, iSOLatin1XmlWriter0.getRow());
      assertEquals("1.0", simpleNsStreamWriter0.getXmlVersion());
      assertEquals("C-Ci@r\"8]&=o^=E!", simpleNsStreamWriter0.getEncoding());
      assertNull(simpleNsStreamWriter0.getBaseUri());
      assertEquals(0, simpleNsStreamWriter0.getAttributeCount());
      assertTrue(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertFalse(toXmlGenerator0.canWriteTypeId());
      assertEquals((-1), toXmlGenerator0.getOutputBuffered());
      assertFalse(toXmlGenerator0.isClosed());
      assertEquals(0, toXmlGenerator0.getHighestEscapedChar());
      assertTrue(toXmlGenerator0.canWriteFormattedNumbers());
      assertFalse(toXmlGenerator0.canWriteBinaryNatively());
      assertTrue(toXmlGenerator0.inRoot());
      assertTrue(toXmlGenerator0.canOmitFields());
      assertEquals(2945, toXmlGenerator0.getFeatureMask());
      assertFalse(toXmlGenerator0.canWriteObjectId());
      assertEquals((-1600), toXmlGenerator0.getFormatFeatures());
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      
//      try { 
        toXmlGenerator0.writeNumber((long) 1);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Unbound namespace URI 'Underlying Stax XMLStreamWriter (of type '
//         //
//         verifyException("com.fasterxml.jackson.dataformat.xml.util.StaxUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertNotNull(bufferRecycler0);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      assertNotNull(iOContext0);
      assertNull(iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      assertNotNull(writerConfig0);
      assertTrue(writerConfig0.willValidateStructure());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willValidateNames());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertTrue(writerConfig0.willValidateContent());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertTrue(writerConfig0.willEscapeCr());
      assertFalse(writerConfig0.willFixContent());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertFalse(writerConfig0.willValidateAttributes());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertEquals("5.0", writerConfig0.getImplVersion());
      
      ISOLatin1XmlWriter iSOLatin1XmlWriter0 = new ISOLatin1XmlWriter((OutputStream) null, writerConfig0, false);
      assertNotNull(iSOLatin1XmlWriter0);
      assertTrue(writerConfig0.willValidateStructure());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willValidateNames());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertTrue(writerConfig0.willValidateContent());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertTrue(writerConfig0.willEscapeCr());
      assertFalse(writerConfig0.willFixContent());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertFalse(writerConfig0.willValidateAttributes());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertEquals(1, iSOLatin1XmlWriter0.getRow());
      
      SimpleNsStreamWriter simpleNsStreamWriter0 = new SimpleNsStreamWriter(iSOLatin1XmlWriter0, "", writerConfig0);
      assertNotNull(simpleNsStreamWriter0);
      assertTrue(writerConfig0.willValidateStructure());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willValidateNames());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertTrue(writerConfig0.willValidateContent());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertTrue(writerConfig0.willEscapeCr());
      assertFalse(writerConfig0.willFixContent());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertFalse(writerConfig0.willValidateAttributes());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertEquals(1, iSOLatin1XmlWriter0.getRow());
      assertEquals(0, simpleNsStreamWriter0.getAttributeCount());
      assertEquals("", simpleNsStreamWriter0.getEncoding());
      assertEquals("1.0", simpleNsStreamWriter0.getXmlVersion());
      assertNull(simpleNsStreamWriter0.getBaseUri());
      
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 0, 0, objectMapper0, simpleNsStreamWriter0);
      assertNotNull(toXmlGenerator0);
      assertNull(iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertTrue(writerConfig0.willValidateStructure());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willValidateNames());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertTrue(writerConfig0.willValidateContent());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertTrue(writerConfig0.willEscapeCr());
      assertFalse(writerConfig0.willFixContent());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertFalse(writerConfig0.willValidateAttributes());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertEquals(1, iSOLatin1XmlWriter0.getRow());
      assertEquals(0, simpleNsStreamWriter0.getAttributeCount());
      assertEquals("", simpleNsStreamWriter0.getEncoding());
      assertEquals("1.0", simpleNsStreamWriter0.getXmlVersion());
      assertNull(simpleNsStreamWriter0.getBaseUri());
      assertEquals(0, toXmlGenerator0.getFeatureMask());
      assertEquals((-1), toXmlGenerator0.getOutputBuffered());
      assertFalse(toXmlGenerator0.canWriteTypeId());
      assertFalse(toXmlGenerator0.canWriteObjectId());
      assertTrue(toXmlGenerator0.canOmitFields());
      assertTrue(toXmlGenerator0.inRoot());
      assertFalse(toXmlGenerator0.isClosed());
      assertEquals(0, toXmlGenerator0.getFormatFeatures());
      assertFalse(toXmlGenerator0.canWriteBinaryNatively());
      assertTrue(toXmlGenerator0.canWriteFormattedNumbers());
      assertEquals(0, toXmlGenerator0.getHighestEscapedChar());
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      
      QName qName0 = new QName("", "");
      assertNotNull(qName0);
      
      toXmlGenerator0.startWrappedValue(qName0, qName0);
      assertNull(iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertTrue(writerConfig0.willValidateStructure());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willValidateNames());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertTrue(writerConfig0.willValidateContent());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertTrue(writerConfig0.willEscapeCr());
      assertFalse(writerConfig0.willFixContent());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertFalse(writerConfig0.willValidateAttributes());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertEquals(1, iSOLatin1XmlWriter0.getRow());
      assertEquals(0, simpleNsStreamWriter0.getAttributeCount());
      assertEquals("", simpleNsStreamWriter0.getEncoding());
      assertEquals("1.0", simpleNsStreamWriter0.getXmlVersion());
      assertNull(simpleNsStreamWriter0.getBaseUri());
      assertEquals(0, toXmlGenerator0.getFeatureMask());
      assertEquals((-1), toXmlGenerator0.getOutputBuffered());
      assertFalse(toXmlGenerator0.canWriteTypeId());
      assertFalse(toXmlGenerator0.canWriteObjectId());
      assertTrue(toXmlGenerator0.canOmitFields());
      assertTrue(toXmlGenerator0.inRoot());
      assertFalse(toXmlGenerator0.isClosed());
      assertEquals(0, toXmlGenerator0.getFormatFeatures());
      assertFalse(toXmlGenerator0.canWriteBinaryNatively());
      assertTrue(toXmlGenerator0.canWriteFormattedNumbers());
      assertEquals(0, toXmlGenerator0.getHighestEscapedChar());
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      
      toXmlGenerator0.writeNumber((long) 0);
      assertNull(iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertTrue(writerConfig0.willValidateStructure());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willValidateNames());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertTrue(writerConfig0.willValidateContent());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertTrue(writerConfig0.willEscapeCr());
      assertFalse(writerConfig0.willFixContent());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertFalse(writerConfig0.willValidateAttributes());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertEquals(1, iSOLatin1XmlWriter0.getRow());
      assertEquals(0, simpleNsStreamWriter0.getAttributeCount());
      assertEquals("", simpleNsStreamWriter0.getEncoding());
      assertEquals("1.0", simpleNsStreamWriter0.getXmlVersion());
      assertNull(simpleNsStreamWriter0.getBaseUri());
      assertEquals(0, toXmlGenerator0.getFeatureMask());
      assertEquals((-1), toXmlGenerator0.getOutputBuffered());
      assertFalse(toXmlGenerator0.canWriteTypeId());
      assertFalse(toXmlGenerator0.canWriteObjectId());
      assertTrue(toXmlGenerator0.canOmitFields());
      assertTrue(toXmlGenerator0.inRoot());
      assertFalse(toXmlGenerator0.isClosed());
      assertEquals(0, toXmlGenerator0.getFormatFeatures());
      assertFalse(toXmlGenerator0.canWriteBinaryNatively());
      assertTrue(toXmlGenerator0.canWriteFormattedNumbers());
      assertEquals(0, toXmlGenerator0.getHighestEscapedChar());
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertNotNull(bufferRecycler0);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      assertNotNull(iOContext0);
      assertNull(iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      assertNotNull(writerConfig0);
      assertTrue(writerConfig0.willValidateContent());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertFalse(writerConfig0.willValidateNames());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertTrue(writerConfig0.willValidateStructure());
      assertTrue(writerConfig0.willEscapeCr());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertFalse(writerConfig0.willValidateAttributes());
      
      ISOLatin1XmlWriter iSOLatin1XmlWriter0 = new ISOLatin1XmlWriter((OutputStream) null, writerConfig0, false);
      assertNotNull(iSOLatin1XmlWriter0);
      assertTrue(writerConfig0.willValidateContent());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertFalse(writerConfig0.willValidateNames());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertTrue(writerConfig0.willValidateStructure());
      assertTrue(writerConfig0.willEscapeCr());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertFalse(writerConfig0.willValidateAttributes());
      assertEquals(1, iSOLatin1XmlWriter0.getRow());
      
      SimpleNsStreamWriter simpleNsStreamWriter0 = new SimpleNsStreamWriter(iSOLatin1XmlWriter0, "", writerConfig0);
      assertNotNull(simpleNsStreamWriter0);
      assertTrue(writerConfig0.willValidateContent());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertFalse(writerConfig0.willValidateNames());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertTrue(writerConfig0.willValidateStructure());
      assertTrue(writerConfig0.willEscapeCr());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertFalse(writerConfig0.willValidateAttributes());
      assertEquals(1, iSOLatin1XmlWriter0.getRow());
      assertEquals("1.0", simpleNsStreamWriter0.getXmlVersion());
      assertEquals("", simpleNsStreamWriter0.getEncoding());
      assertNull(simpleNsStreamWriter0.getBaseUri());
      assertEquals(0, simpleNsStreamWriter0.getAttributeCount());
      
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 0, 0, objectMapper0, simpleNsStreamWriter0);
      assertNotNull(toXmlGenerator0);
      assertNull(iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertTrue(writerConfig0.willValidateContent());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertFalse(writerConfig0.willValidateNames());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertTrue(writerConfig0.willValidateStructure());
      assertTrue(writerConfig0.willEscapeCr());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertFalse(writerConfig0.willValidateAttributes());
      assertEquals(1, iSOLatin1XmlWriter0.getRow());
      assertEquals("1.0", simpleNsStreamWriter0.getXmlVersion());
      assertEquals("", simpleNsStreamWriter0.getEncoding());
      assertNull(simpleNsStreamWriter0.getBaseUri());
      assertEquals(0, simpleNsStreamWriter0.getAttributeCount());
      assertEquals(0, toXmlGenerator0.getFormatFeatures());
      assertFalse(toXmlGenerator0.canWriteBinaryNatively());
      assertTrue(toXmlGenerator0.canOmitFields());
      assertTrue(toXmlGenerator0.inRoot());
      assertFalse(toXmlGenerator0.isClosed());
      assertFalse(toXmlGenerator0.canWriteObjectId());
      assertEquals((-1), toXmlGenerator0.getOutputBuffered());
      assertFalse(toXmlGenerator0.canWriteTypeId());
      assertTrue(toXmlGenerator0.canWriteFormattedNumbers());
      assertEquals(0, toXmlGenerator0.getHighestEscapedChar());
      assertEquals(0, toXmlGenerator0.getFeatureMask());
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      
      QName qName0 = new QName("", "");
      assertNotNull(qName0);
      
      simpleNsStreamWriter0.writeEmptyElement("", "", "");
      assertTrue(writerConfig0.willValidateContent());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertFalse(writerConfig0.willValidateNames());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertTrue(writerConfig0.willValidateStructure());
      assertTrue(writerConfig0.willEscapeCr());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertFalse(writerConfig0.willValidateAttributes());
      assertEquals(1, iSOLatin1XmlWriter0.getRow());
      assertEquals("1.0", simpleNsStreamWriter0.getXmlVersion());
      assertEquals("", simpleNsStreamWriter0.getEncoding());
      assertNull(simpleNsStreamWriter0.getBaseUri());
      assertEquals(0, simpleNsStreamWriter0.getAttributeCount());
      
      toXmlGenerator0.startWrappedValue(qName0, qName0);
      assertNull(iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertTrue(writerConfig0.willValidateContent());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertFalse(writerConfig0.willValidateNames());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertTrue(writerConfig0.willValidateStructure());
      assertTrue(writerConfig0.willEscapeCr());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertFalse(writerConfig0.willValidateAttributes());
      assertEquals(1, iSOLatin1XmlWriter0.getRow());
      assertEquals("1.0", simpleNsStreamWriter0.getXmlVersion());
      assertEquals("", simpleNsStreamWriter0.getEncoding());
      assertNull(simpleNsStreamWriter0.getBaseUri());
      assertEquals(0, simpleNsStreamWriter0.getAttributeCount());
      assertEquals(0, toXmlGenerator0.getFormatFeatures());
      assertFalse(toXmlGenerator0.canWriteBinaryNatively());
      assertTrue(toXmlGenerator0.canOmitFields());
      assertTrue(toXmlGenerator0.inRoot());
      assertFalse(toXmlGenerator0.isClosed());
      assertFalse(toXmlGenerator0.canWriteObjectId());
      assertEquals((-1), toXmlGenerator0.getOutputBuffered());
      assertFalse(toXmlGenerator0.canWriteTypeId());
      assertTrue(toXmlGenerator0.canWriteFormattedNumbers());
      assertEquals(0, toXmlGenerator0.getHighestEscapedChar());
      assertEquals(0, toXmlGenerator0.getFeatureMask());
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      
//      try { 
        toXmlGenerator0.writeNumber(4);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Trying to output non-whitespace characters outside main element tree (in prolog or epilog)
//         //
//         verifyException("com.fasterxml.jackson.dataformat.xml.util.StaxUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertNotNull(bufferRecycler0);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(3);
      assertNotNull(byteArrayOutputStream0);
      assertEquals("", byteArrayOutputStream0.toString());
      assertEquals(0, byteArrayOutputStream0.size());
      
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      assertNotNull(writerConfig0);
      assertTrue(writerConfig0.willValidateStructure());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertFalse(writerConfig0.willValidateNames());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertTrue(writerConfig0.willEscapeCr());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertFalse(writerConfig0.willValidateAttributes());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertFalse(writerConfig0.willFixContent());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertTrue(writerConfig0.willValidateContent());
      
      AsciiXmlWriter asciiXmlWriter0 = new AsciiXmlWriter(byteArrayOutputStream0, writerConfig0, false);
      assertNotNull(asciiXmlWriter0);
      assertEquals("", byteArrayOutputStream0.toString());
      assertEquals(0, byteArrayOutputStream0.size());
      assertTrue(writerConfig0.willValidateStructure());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertFalse(writerConfig0.willValidateNames());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertTrue(writerConfig0.willEscapeCr());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertFalse(writerConfig0.willValidateAttributes());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertFalse(writerConfig0.willFixContent());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertTrue(writerConfig0.willValidateContent());
      assertEquals(1, asciiXmlWriter0.getRow());
      
      NonNsStreamWriter nonNsStreamWriter0 = new NonNsStreamWriter(asciiXmlWriter0, "", writerConfig0);
      assertNotNull(nonNsStreamWriter0);
      assertEquals("", byteArrayOutputStream0.toString());
      assertEquals(0, byteArrayOutputStream0.size());
      assertTrue(writerConfig0.willValidateStructure());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertFalse(writerConfig0.willValidateNames());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertTrue(writerConfig0.willEscapeCr());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertFalse(writerConfig0.willValidateAttributes());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertFalse(writerConfig0.willFixContent());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertTrue(writerConfig0.willValidateContent());
      assertEquals(1, asciiXmlWriter0.getRow());
      assertEquals(0, nonNsStreamWriter0.getAttributeCount());
      assertNull(nonNsStreamWriter0.getBaseUri());
      assertEquals("1.0", nonNsStreamWriter0.getXmlVersion());
      assertEquals("", nonNsStreamWriter0.getEncoding());
      
      IOContext iOContext0 = new IOContext(bufferRecycler0, "", false);
      assertNotNull(iOContext0);
      assertFalse(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, (-697), 3, objectMapper0, nonNsStreamWriter0);
      assertNotNull(toXmlGenerator0);
      assertEquals("", byteArrayOutputStream0.toString());
      assertEquals(0, byteArrayOutputStream0.size());
      assertTrue(writerConfig0.willValidateStructure());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertFalse(writerConfig0.willValidateNames());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertTrue(writerConfig0.willEscapeCr());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertFalse(writerConfig0.willValidateAttributes());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertFalse(writerConfig0.willFixContent());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertTrue(writerConfig0.willValidateContent());
      assertEquals(1, asciiXmlWriter0.getRow());
      assertEquals(0, nonNsStreamWriter0.getAttributeCount());
      assertNull(nonNsStreamWriter0.getBaseUri());
      assertEquals("1.0", nonNsStreamWriter0.getXmlVersion());
      assertEquals("", nonNsStreamWriter0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertFalse(toXmlGenerator0.canWriteTypeId());
      assertFalse(toXmlGenerator0.isClosed());
      assertEquals((-697), toXmlGenerator0.getFeatureMask());
      assertEquals((-1), toXmlGenerator0.getOutputBuffered());
      assertEquals(0, toXmlGenerator0.getHighestEscapedChar());
      assertTrue(toXmlGenerator0.canWriteFormattedNumbers());
      assertFalse(toXmlGenerator0.canWriteBinaryNatively());
      assertTrue(toXmlGenerator0.canOmitFields());
      assertEquals(3, toXmlGenerator0.getFormatFeatures());
      assertTrue(toXmlGenerator0.inRoot());
      assertFalse(toXmlGenerator0.canWriteObjectId());
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      
      QName qName0 = new QName("write String value", "R^`/lY", "write String value");
      assertNotNull(qName0);
      
      toXmlGenerator0.startWrappedValue(qName0, qName0);
      assertEquals("", byteArrayOutputStream0.toString());
      assertEquals(0, byteArrayOutputStream0.size());
      assertTrue(writerConfig0.willValidateStructure());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertFalse(writerConfig0.willValidateNames());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertTrue(writerConfig0.willEscapeCr());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertFalse(writerConfig0.willValidateAttributes());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertFalse(writerConfig0.willFixContent());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertTrue(writerConfig0.willValidateContent());
      assertEquals(1, asciiXmlWriter0.getRow());
      assertEquals(0, nonNsStreamWriter0.getAttributeCount());
      assertNull(nonNsStreamWriter0.getBaseUri());
      assertEquals("1.0", nonNsStreamWriter0.getXmlVersion());
      assertEquals("", nonNsStreamWriter0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertFalse(toXmlGenerator0.canWriteTypeId());
      assertFalse(toXmlGenerator0.isClosed());
      assertEquals((-697), toXmlGenerator0.getFeatureMask());
      assertEquals((-1), toXmlGenerator0.getOutputBuffered());
      assertEquals(0, toXmlGenerator0.getHighestEscapedChar());
      assertTrue(toXmlGenerator0.canWriteFormattedNumbers());
      assertFalse(toXmlGenerator0.canWriteBinaryNatively());
      assertTrue(toXmlGenerator0.canOmitFields());
      assertEquals(3, toXmlGenerator0.getFormatFeatures());
      assertTrue(toXmlGenerator0.inRoot());
      assertFalse(toXmlGenerator0.canWriteObjectId());
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      
      toXmlGenerator0.close();
      assertEquals("<R^`/lY></R^`/lY>", byteArrayOutputStream0.toString());
      assertEquals(17, byteArrayOutputStream0.size());
      assertTrue(writerConfig0.willValidateStructure());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertFalse(writerConfig0.willValidateNames());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertTrue(writerConfig0.willEscapeCr());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertFalse(writerConfig0.willValidateAttributes());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertFalse(writerConfig0.willFixContent());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertTrue(writerConfig0.willValidateContent());
      assertEquals(1, asciiXmlWriter0.getRow());
      assertEquals(0, nonNsStreamWriter0.getAttributeCount());
      assertNull(nonNsStreamWriter0.getBaseUri());
      assertEquals("1.0", nonNsStreamWriter0.getXmlVersion());
      assertEquals("", nonNsStreamWriter0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertFalse(toXmlGenerator0.canWriteTypeId());
      assertEquals((-697), toXmlGenerator0.getFeatureMask());
      assertEquals((-1), toXmlGenerator0.getOutputBuffered());
      assertEquals(0, toXmlGenerator0.getHighestEscapedChar());
      assertTrue(toXmlGenerator0.canWriteFormattedNumbers());
      assertFalse(toXmlGenerator0.canWriteBinaryNatively());
      assertTrue(toXmlGenerator0.canOmitFields());
      assertEquals(3, toXmlGenerator0.getFormatFeatures());
      assertTrue(toXmlGenerator0.isClosed());
      assertTrue(toXmlGenerator0.inRoot());
      assertFalse(toXmlGenerator0.canWriteObjectId());
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      
//      try { 
        toXmlGenerator0.writeNumber((double) 55296);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Trying to output second root, <R^`/lY>
//         //
//         verifyException("com.fasterxml.jackson.dataformat.xml.util.StaxUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertNotNull(bufferRecycler0);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(3);
      assertNotNull(byteArrayOutputStream0);
      assertEquals("", byteArrayOutputStream0.toString());
      assertEquals(0, byteArrayOutputStream0.size());
      
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      assertNotNull(writerConfig0);
      assertTrue(writerConfig0.willValidateStructure());
      assertFalse(writerConfig0.willValidateNames());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertFalse(writerConfig0.willValidateAttributes());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertTrue(writerConfig0.willEscapeCr());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertTrue(writerConfig0.willValidateContent());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      
      AsciiXmlWriter asciiXmlWriter0 = new AsciiXmlWriter(byteArrayOutputStream0, writerConfig0, false);
      assertNotNull(asciiXmlWriter0);
      assertEquals("", byteArrayOutputStream0.toString());
      assertEquals(0, byteArrayOutputStream0.size());
      assertTrue(writerConfig0.willValidateStructure());
      assertFalse(writerConfig0.willValidateNames());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertFalse(writerConfig0.willValidateAttributes());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertTrue(writerConfig0.willEscapeCr());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertTrue(writerConfig0.willValidateContent());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertEquals(1, asciiXmlWriter0.getRow());
      
      NonNsStreamWriter nonNsStreamWriter0 = new NonNsStreamWriter(asciiXmlWriter0, "", writerConfig0);
      assertNotNull(nonNsStreamWriter0);
      assertEquals("", byteArrayOutputStream0.toString());
      assertEquals(0, byteArrayOutputStream0.size());
      assertTrue(writerConfig0.willValidateStructure());
      assertFalse(writerConfig0.willValidateNames());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertFalse(writerConfig0.willValidateAttributes());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertTrue(writerConfig0.willEscapeCr());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertTrue(writerConfig0.willValidateContent());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertEquals(1, asciiXmlWriter0.getRow());
      assertEquals(0, nonNsStreamWriter0.getAttributeCount());
      assertEquals("", nonNsStreamWriter0.getEncoding());
      assertNull(nonNsStreamWriter0.getBaseUri());
      assertEquals("1.0", nonNsStreamWriter0.getXmlVersion());
      
      IOContext iOContext0 = new IOContext(bufferRecycler0, "", false);
      assertNotNull(iOContext0);
      assertFalse(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 2, 15, objectMapper0, nonNsStreamWriter0);
      assertNotNull(toXmlGenerator0);
      assertEquals("", byteArrayOutputStream0.toString());
      assertEquals(0, byteArrayOutputStream0.size());
      assertTrue(writerConfig0.willValidateStructure());
      assertFalse(writerConfig0.willValidateNames());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertFalse(writerConfig0.willValidateAttributes());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertTrue(writerConfig0.willEscapeCr());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertTrue(writerConfig0.willValidateContent());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertEquals(1, asciiXmlWriter0.getRow());
      assertEquals(0, nonNsStreamWriter0.getAttributeCount());
      assertEquals("", nonNsStreamWriter0.getEncoding());
      assertNull(nonNsStreamWriter0.getBaseUri());
      assertEquals("1.0", nonNsStreamWriter0.getXmlVersion());
      assertFalse(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertFalse(toXmlGenerator0.canWriteTypeId());
      assertFalse(toXmlGenerator0.isClosed());
      assertEquals((-1), toXmlGenerator0.getOutputBuffered());
      assertEquals(0, toXmlGenerator0.getHighestEscapedChar());
      assertEquals(2, toXmlGenerator0.getFeatureMask());
      assertFalse(toXmlGenerator0.canWriteObjectId());
      assertEquals(15, toXmlGenerator0.getFormatFeatures());
      assertFalse(toXmlGenerator0.canWriteBinaryNatively());
      assertTrue(toXmlGenerator0.inRoot());
      assertTrue(toXmlGenerator0.canOmitFields());
      assertTrue(toXmlGenerator0.canWriteFormattedNumbers());
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      
      QName qName0 = QName.valueOf("");
      assertNotNull(qName0);
      
      toXmlGenerator0.startWrappedValue(qName0, qName0);
      assertEquals("", byteArrayOutputStream0.toString());
      assertEquals(0, byteArrayOutputStream0.size());
      assertTrue(writerConfig0.willValidateStructure());
      assertFalse(writerConfig0.willValidateNames());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertFalse(writerConfig0.willValidateAttributes());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertTrue(writerConfig0.willEscapeCr());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertTrue(writerConfig0.willValidateContent());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertEquals(1, asciiXmlWriter0.getRow());
      assertEquals(0, nonNsStreamWriter0.getAttributeCount());
      assertEquals("", nonNsStreamWriter0.getEncoding());
      assertNull(nonNsStreamWriter0.getBaseUri());
      assertEquals("1.0", nonNsStreamWriter0.getXmlVersion());
      assertFalse(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertFalse(toXmlGenerator0.canWriteTypeId());
      assertFalse(toXmlGenerator0.isClosed());
      assertEquals((-1), toXmlGenerator0.getOutputBuffered());
      assertEquals(0, toXmlGenerator0.getHighestEscapedChar());
      assertEquals(2, toXmlGenerator0.getFeatureMask());
      assertFalse(toXmlGenerator0.canWriteObjectId());
      assertEquals(15, toXmlGenerator0.getFormatFeatures());
      assertFalse(toXmlGenerator0.canWriteBinaryNatively());
      assertTrue(toXmlGenerator0.inRoot());
      assertTrue(toXmlGenerator0.canOmitFields());
      assertTrue(toXmlGenerator0.canWriteFormattedNumbers());
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      
      toXmlGenerator0.close();
      assertEquals("<></>", byteArrayOutputStream0.toString());
      assertEquals(5, byteArrayOutputStream0.size());
      assertTrue(writerConfig0.willValidateStructure());
      assertFalse(writerConfig0.willValidateNames());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertFalse(writerConfig0.willValidateAttributes());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertTrue(writerConfig0.willEscapeCr());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertTrue(writerConfig0.willValidateContent());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertEquals(1, asciiXmlWriter0.getRow());
      assertEquals(0, nonNsStreamWriter0.getAttributeCount());
      assertEquals("", nonNsStreamWriter0.getEncoding());
      assertNull(nonNsStreamWriter0.getBaseUri());
      assertEquals("1.0", nonNsStreamWriter0.getXmlVersion());
      assertFalse(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertFalse(toXmlGenerator0.canWriteTypeId());
      assertEquals((-1), toXmlGenerator0.getOutputBuffered());
      assertEquals(0, toXmlGenerator0.getHighestEscapedChar());
      assertEquals(2, toXmlGenerator0.getFeatureMask());
      assertTrue(toXmlGenerator0.isClosed());
      assertFalse(toXmlGenerator0.canWriteObjectId());
      assertEquals(15, toXmlGenerator0.getFormatFeatures());
      assertFalse(toXmlGenerator0.canWriteBinaryNatively());
      assertTrue(toXmlGenerator0.inRoot());
      assertTrue(toXmlGenerator0.canOmitFields());
      assertTrue(toXmlGenerator0.canWriteFormattedNumbers());
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      
//      try { 
        toXmlGenerator0.writeNumber((BigDecimal) null);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Trying to output second root, <>
//         //
//         verifyException("com.fasterxml.jackson.dataformat.xml.util.StaxUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertNotNull(bufferRecycler0);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      assertNotNull(iOContext0);
      assertTrue(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      
      WriterConfig writerConfig0 = WriterConfig.createJ2MEDefaults();
      assertNotNull(writerConfig0);
      assertFalse(writerConfig0.willValidateNames());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertTrue(writerConfig0.willValidateContent());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.willValidateStructure());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willValidateAttributes());
      assertTrue(writerConfig0.willEscapeCr());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertEquals("5.0", writerConfig0.getImplVersion());
      
      ISOLatin1XmlWriter iSOLatin1XmlWriter0 = new ISOLatin1XmlWriter((OutputStream) null, writerConfig0, true);
      assertNotNull(iSOLatin1XmlWriter0);
      assertFalse(writerConfig0.willValidateNames());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertTrue(writerConfig0.willValidateContent());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.willValidateStructure());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willValidateAttributes());
      assertTrue(writerConfig0.willEscapeCr());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertEquals(1, iSOLatin1XmlWriter0.getRow());
      
      SimpleNsStreamWriter simpleNsStreamWriter0 = new SimpleNsStreamWriter(iSOLatin1XmlWriter0, "", writerConfig0);
      assertNotNull(simpleNsStreamWriter0);
      assertFalse(writerConfig0.willValidateNames());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertTrue(writerConfig0.willValidateContent());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.willValidateStructure());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willValidateAttributes());
      assertTrue(writerConfig0.willEscapeCr());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertEquals(1, iSOLatin1XmlWriter0.getRow());
      assertNull(simpleNsStreamWriter0.getBaseUri());
      assertEquals("1.0", simpleNsStreamWriter0.getXmlVersion());
      assertEquals(0, simpleNsStreamWriter0.getAttributeCount());
      assertEquals("", simpleNsStreamWriter0.getEncoding());
      
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 0, 0, objectMapper0, simpleNsStreamWriter0);
      assertNotNull(toXmlGenerator0);
      assertTrue(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertFalse(writerConfig0.willValidateNames());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertTrue(writerConfig0.willValidateContent());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.willValidateStructure());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willValidateAttributes());
      assertTrue(writerConfig0.willEscapeCr());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertEquals(1, iSOLatin1XmlWriter0.getRow());
      assertNull(simpleNsStreamWriter0.getBaseUri());
      assertEquals("1.0", simpleNsStreamWriter0.getXmlVersion());
      assertEquals(0, simpleNsStreamWriter0.getAttributeCount());
      assertEquals("", simpleNsStreamWriter0.getEncoding());
      assertEquals(0, toXmlGenerator0.getHighestEscapedChar());
      assertFalse(toXmlGenerator0.isClosed());
      assertEquals(0, toXmlGenerator0.getFormatFeatures());
      assertFalse(toXmlGenerator0.canWriteTypeId());
      assertTrue(toXmlGenerator0.canOmitFields());
      assertTrue(toXmlGenerator0.canWriteFormattedNumbers());
      assertTrue(toXmlGenerator0.inRoot());
      assertFalse(toXmlGenerator0.canWriteObjectId());
      assertFalse(toXmlGenerator0.canWriteBinaryNatively());
      assertEquals(0, toXmlGenerator0.getFeatureMask());
      assertEquals((-1), toXmlGenerator0.getOutputBuffered());
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      
      QName qName0 = new QName("", "");
      assertNotNull(qName0);
      
      toXmlGenerator0.startWrappedValue(qName0, qName0);
      assertTrue(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertFalse(writerConfig0.willValidateNames());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertTrue(writerConfig0.willValidateContent());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.willValidateStructure());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willValidateAttributes());
      assertTrue(writerConfig0.willEscapeCr());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertEquals(1, iSOLatin1XmlWriter0.getRow());
      assertNull(simpleNsStreamWriter0.getBaseUri());
      assertEquals("1.0", simpleNsStreamWriter0.getXmlVersion());
      assertEquals(0, simpleNsStreamWriter0.getAttributeCount());
      assertEquals("", simpleNsStreamWriter0.getEncoding());
      assertEquals(0, toXmlGenerator0.getHighestEscapedChar());
      assertFalse(toXmlGenerator0.isClosed());
      assertEquals(0, toXmlGenerator0.getFormatFeatures());
      assertFalse(toXmlGenerator0.canWriteTypeId());
      assertTrue(toXmlGenerator0.canOmitFields());
      assertTrue(toXmlGenerator0.canWriteFormattedNumbers());
      assertTrue(toXmlGenerator0.inRoot());
      assertFalse(toXmlGenerator0.canWriteObjectId());
      assertFalse(toXmlGenerator0.canWriteBinaryNatively());
      assertEquals(0, toXmlGenerator0.getFeatureMask());
      assertEquals((-1), toXmlGenerator0.getOutputBuffered());
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      
      toXmlGenerator0.writeStartObject();
      assertTrue(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertFalse(writerConfig0.willValidateNames());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertTrue(writerConfig0.willValidateContent());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.willValidateStructure());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willValidateAttributes());
      assertTrue(writerConfig0.willEscapeCr());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertEquals(1, iSOLatin1XmlWriter0.getRow());
      assertNull(simpleNsStreamWriter0.getBaseUri());
      assertEquals("1.0", simpleNsStreamWriter0.getXmlVersion());
      assertEquals(0, simpleNsStreamWriter0.getAttributeCount());
      assertEquals("", simpleNsStreamWriter0.getEncoding());
      assertEquals(0, toXmlGenerator0.getHighestEscapedChar());
      assertFalse(toXmlGenerator0.isClosed());
      assertFalse(toXmlGenerator0.inRoot());
      assertEquals(0, toXmlGenerator0.getFormatFeatures());
      assertFalse(toXmlGenerator0.canWriteTypeId());
      assertTrue(toXmlGenerator0.canOmitFields());
      assertTrue(toXmlGenerator0.canWriteFormattedNumbers());
      assertFalse(toXmlGenerator0.canWriteObjectId());
      assertFalse(toXmlGenerator0.canWriteBinaryNatively());
      assertEquals(0, toXmlGenerator0.getFeatureMask());
      assertEquals((-1), toXmlGenerator0.getOutputBuffered());
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      assertNotNull(serializedString0);
      assertEquals(1, serializedString0.charLength());
      assertEquals(" ", serializedString0.toString());
      assertEquals(" ", serializedString0.getValue());
      
      toXmlGenerator0.writeFieldName((SerializableString) serializedString0);
      assertTrue(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertFalse(writerConfig0.willValidateNames());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertTrue(writerConfig0.willValidateContent());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.willValidateStructure());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willValidateAttributes());
      assertTrue(writerConfig0.willEscapeCr());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertEquals(1, iSOLatin1XmlWriter0.getRow());
      assertNull(simpleNsStreamWriter0.getBaseUri());
      assertEquals("1.0", simpleNsStreamWriter0.getXmlVersion());
      assertEquals(0, simpleNsStreamWriter0.getAttributeCount());
      assertEquals("", simpleNsStreamWriter0.getEncoding());
      assertEquals(0, toXmlGenerator0.getHighestEscapedChar());
      assertFalse(toXmlGenerator0.isClosed());
      assertFalse(toXmlGenerator0.inRoot());
      assertEquals(0, toXmlGenerator0.getFormatFeatures());
      assertFalse(toXmlGenerator0.canWriteTypeId());
      assertTrue(toXmlGenerator0.canOmitFields());
      assertTrue(toXmlGenerator0.canWriteFormattedNumbers());
      assertFalse(toXmlGenerator0.canWriteObjectId());
      assertFalse(toXmlGenerator0.canWriteBinaryNatively());
      assertEquals(0, toXmlGenerator0.getFeatureMask());
      assertEquals((-1), toXmlGenerator0.getOutputBuffered());
      assertEquals(1, serializedString0.charLength());
      assertEquals(" ", serializedString0.toString());
      assertEquals(" ", serializedString0.getValue());
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertNotNull(bufferRecycler0);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      assertNotNull(byteArrayOutputStream0);
      assertEquals(0, byteArrayOutputStream0.size());
      assertEquals("", byteArrayOutputStream0.toString());
      
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      assertNotNull(writerConfig0);
      assertTrue(writerConfig0.willSupportNamespaces());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertFalse(writerConfig0.willValidateNames());
      assertTrue(writerConfig0.willEscapeCr());
      assertTrue(writerConfig0.willValidateStructure());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willValidateAttributes());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertTrue(writerConfig0.willValidateContent());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertFalse(writerConfig0.willFixContent());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertEquals("woodstox", writerConfig0.getImplName());
      
      AsciiXmlWriter asciiXmlWriter0 = new AsciiXmlWriter(byteArrayOutputStream0, writerConfig0, true);
      assertNotNull(asciiXmlWriter0);
      assertEquals(0, byteArrayOutputStream0.size());
      assertEquals("", byteArrayOutputStream0.toString());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertFalse(writerConfig0.willValidateNames());
      assertTrue(writerConfig0.willEscapeCr());
      assertTrue(writerConfig0.willValidateStructure());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willValidateAttributes());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertTrue(writerConfig0.willValidateContent());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertFalse(writerConfig0.willFixContent());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertEquals(1, asciiXmlWriter0.getRow());
      
      NonNsStreamWriter nonNsStreamWriter0 = new NonNsStreamWriter(asciiXmlWriter0, "nWhAOd|*hlP*qX8", writerConfig0);
      assertNotNull(nonNsStreamWriter0);
      assertEquals(0, byteArrayOutputStream0.size());
      assertEquals("", byteArrayOutputStream0.toString());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertFalse(writerConfig0.willValidateNames());
      assertTrue(writerConfig0.willEscapeCr());
      assertTrue(writerConfig0.willValidateStructure());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willValidateAttributes());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertTrue(writerConfig0.willValidateContent());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertFalse(writerConfig0.willFixContent());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertEquals(1, asciiXmlWriter0.getRow());
      assertNull(nonNsStreamWriter0.getBaseUri());
      assertEquals("1.0", nonNsStreamWriter0.getXmlVersion());
      assertEquals("nWhAOd|*hlP*qX8", nonNsStreamWriter0.getEncoding());
      assertEquals(0, nonNsStreamWriter0.getAttributeCount());
      
      IOContext iOContext0 = new IOContext(bufferRecycler0, objectMapper0, false);
      assertNotNull(iOContext0);
      assertNull(iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 2, (-697), objectMapper0, nonNsStreamWriter0);
      assertNotNull(toXmlGenerator0);
      assertEquals(0, byteArrayOutputStream0.size());
      assertEquals("", byteArrayOutputStream0.toString());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertFalse(writerConfig0.willValidateNames());
      assertTrue(writerConfig0.willEscapeCr());
      assertTrue(writerConfig0.willValidateStructure());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willValidateAttributes());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertTrue(writerConfig0.willValidateContent());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertFalse(writerConfig0.willFixContent());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertEquals(1, asciiXmlWriter0.getRow());
      assertNull(nonNsStreamWriter0.getBaseUri());
      assertEquals("1.0", nonNsStreamWriter0.getXmlVersion());
      assertEquals("nWhAOd|*hlP*qX8", nonNsStreamWriter0.getEncoding());
      assertEquals(0, nonNsStreamWriter0.getAttributeCount());
      assertNull(iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertFalse(toXmlGenerator0.canWriteTypeId());
      assertTrue(toXmlGenerator0.canOmitFields());
      assertFalse(toXmlGenerator0.isClosed());
      assertTrue(toXmlGenerator0.inRoot());
      assertEquals(2, toXmlGenerator0.getFeatureMask());
      assertEquals((-697), toXmlGenerator0.getFormatFeatures());
      assertFalse(toXmlGenerator0.canWriteObjectId());
      assertFalse(toXmlGenerator0.canWriteBinaryNatively());
      assertEquals((-1), toXmlGenerator0.getOutputBuffered());
      assertTrue(toXmlGenerator0.canWriteFormattedNumbers());
      assertEquals(0, toXmlGenerator0.getHighestEscapedChar());
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      
      QName qName0 = new QName("R^`/lY", "nWhAOd|*hlP*qX8", "R^`/lY");
      assertNotNull(qName0);
      
      toXmlGenerator0.startWrappedValue(qName0, qName0);
      assertEquals(0, byteArrayOutputStream0.size());
      assertEquals("", byteArrayOutputStream0.toString());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertFalse(writerConfig0.willValidateNames());
      assertTrue(writerConfig0.willEscapeCr());
      assertTrue(writerConfig0.willValidateStructure());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willValidateAttributes());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertTrue(writerConfig0.willValidateContent());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertFalse(writerConfig0.willFixContent());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertEquals(1, asciiXmlWriter0.getRow());
      assertNull(nonNsStreamWriter0.getBaseUri());
      assertEquals("1.0", nonNsStreamWriter0.getXmlVersion());
      assertEquals("nWhAOd|*hlP*qX8", nonNsStreamWriter0.getEncoding());
      assertEquals(0, nonNsStreamWriter0.getAttributeCount());
      assertNull(iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertFalse(toXmlGenerator0.canWriteTypeId());
      assertTrue(toXmlGenerator0.canOmitFields());
      assertFalse(toXmlGenerator0.isClosed());
      assertTrue(toXmlGenerator0.inRoot());
      assertEquals(2, toXmlGenerator0.getFeatureMask());
      assertEquals((-697), toXmlGenerator0.getFormatFeatures());
      assertFalse(toXmlGenerator0.canWriteObjectId());
      assertFalse(toXmlGenerator0.canWriteBinaryNatively());
      assertEquals((-1), toXmlGenerator0.getOutputBuffered());
      assertTrue(toXmlGenerator0.canWriteFormattedNumbers());
      assertEquals(0, toXmlGenerator0.getHighestEscapedChar());
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      
      toXmlGenerator0.writeBinary((Base64Variant) null, (byte[]) null, 56319, 4);
      assertEquals(0, byteArrayOutputStream0.size());
      assertEquals("", byteArrayOutputStream0.toString());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertFalse(writerConfig0.willValidateNames());
      assertTrue(writerConfig0.willEscapeCr());
      assertTrue(writerConfig0.willValidateStructure());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willValidateAttributes());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertTrue(writerConfig0.willValidateContent());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertFalse(writerConfig0.willFixContent());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertEquals(1, asciiXmlWriter0.getRow());
      assertNull(nonNsStreamWriter0.getBaseUri());
      assertEquals("1.0", nonNsStreamWriter0.getXmlVersion());
      assertEquals("nWhAOd|*hlP*qX8", nonNsStreamWriter0.getEncoding());
      assertEquals(0, nonNsStreamWriter0.getAttributeCount());
      assertNull(iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertFalse(toXmlGenerator0.canWriteTypeId());
      assertTrue(toXmlGenerator0.canOmitFields());
      assertFalse(toXmlGenerator0.isClosed());
      assertTrue(toXmlGenerator0.inRoot());
      assertEquals(2, toXmlGenerator0.getFeatureMask());
      assertEquals((-697), toXmlGenerator0.getFormatFeatures());
      assertFalse(toXmlGenerator0.canWriteObjectId());
      assertFalse(toXmlGenerator0.canWriteBinaryNatively());
      assertEquals((-1), toXmlGenerator0.getOutputBuffered());
      assertTrue(toXmlGenerator0.canWriteFormattedNumbers());
      assertEquals(0, toXmlGenerator0.getHighestEscapedChar());
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertNotNull(bufferRecycler0);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, true);
      assertNotNull(iOContext0);
      assertTrue(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      assertNotNull(writerConfig0);
      assertTrue(writerConfig0.willValidateStructure());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willValidateNames());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertFalse(writerConfig0.willFixContent());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertTrue(writerConfig0.willValidateContent());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertFalse(writerConfig0.willValidateAttributes());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertTrue(writerConfig0.willEscapeCr());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      assertNotNull(byteArrayBuilder0);
      assertEquals(0, byteArrayBuilder0.getCurrentSegmentLength());
      assertEquals(0, byteArrayBuilder0.size());
      
      ISOLatin1XmlWriter iSOLatin1XmlWriter0 = new ISOLatin1XmlWriter(byteArrayBuilder0, writerConfig0, true);
      assertNotNull(iSOLatin1XmlWriter0);
      assertTrue(writerConfig0.willValidateStructure());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willValidateNames());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertFalse(writerConfig0.willFixContent());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertTrue(writerConfig0.willValidateContent());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertFalse(writerConfig0.willValidateAttributes());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertTrue(writerConfig0.willEscapeCr());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertEquals(0, byteArrayBuilder0.getCurrentSegmentLength());
      assertEquals(0, byteArrayBuilder0.size());
      assertEquals(1, iSOLatin1XmlWriter0.getRow());
      
      SimpleNsStreamWriter simpleNsStreamWriter0 = new SimpleNsStreamWriter(iSOLatin1XmlWriter0, "No element/attribute name specified when trying to output element", writerConfig0);
      assertNotNull(simpleNsStreamWriter0);
      assertTrue(writerConfig0.willValidateStructure());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willValidateNames());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertFalse(writerConfig0.willFixContent());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertTrue(writerConfig0.willValidateContent());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertFalse(writerConfig0.willValidateAttributes());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertTrue(writerConfig0.willEscapeCr());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertEquals(0, byteArrayBuilder0.getCurrentSegmentLength());
      assertEquals(0, byteArrayBuilder0.size());
      assertEquals(1, iSOLatin1XmlWriter0.getRow());
      assertEquals(0, simpleNsStreamWriter0.getAttributeCount());
      assertEquals("No element/attribute name specified when trying to output element", simpleNsStreamWriter0.getEncoding());
      assertNull(simpleNsStreamWriter0.getBaseUri());
      assertEquals("1.0", simpleNsStreamWriter0.getXmlVersion());
      
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 2613, 299, objectMapper0, simpleNsStreamWriter0);
      assertNotNull(toXmlGenerator0);
      assertTrue(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertTrue(writerConfig0.willValidateStructure());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willValidateNames());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertFalse(writerConfig0.willFixContent());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertTrue(writerConfig0.willValidateContent());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertFalse(writerConfig0.willValidateAttributes());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertTrue(writerConfig0.willEscapeCr());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertEquals(0, byteArrayBuilder0.getCurrentSegmentLength());
      assertEquals(0, byteArrayBuilder0.size());
      assertEquals(1, iSOLatin1XmlWriter0.getRow());
      assertEquals(0, simpleNsStreamWriter0.getAttributeCount());
      assertEquals("No element/attribute name specified when trying to output element", simpleNsStreamWriter0.getEncoding());
      assertNull(simpleNsStreamWriter0.getBaseUri());
      assertEquals("1.0", simpleNsStreamWriter0.getXmlVersion());
      assertFalse(toXmlGenerator0.canWriteBinaryNatively());
      assertTrue(toXmlGenerator0.canOmitFields());
      assertTrue(toXmlGenerator0.inRoot());
      assertTrue(toXmlGenerator0.canWriteFormattedNumbers());
      assertFalse(toXmlGenerator0.canWriteTypeId());
      assertEquals(299, toXmlGenerator0.getFormatFeatures());
      assertEquals(2613, toXmlGenerator0.getFeatureMask());
      assertEquals((-1), toXmlGenerator0.getOutputBuffered());
      assertEquals(0, toXmlGenerator0.getHighestEscapedChar());
      assertFalse(toXmlGenerator0.isClosed());
      assertFalse(toXmlGenerator0.canWriteObjectId());
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      
      toXmlGenerator0.flush();
      assertTrue(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertTrue(writerConfig0.willValidateStructure());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willValidateNames());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertFalse(writerConfig0.willFixContent());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertTrue(writerConfig0.willValidateContent());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertFalse(writerConfig0.willValidateAttributes());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertTrue(writerConfig0.willEscapeCr());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertEquals(0, byteArrayBuilder0.getCurrentSegmentLength());
      assertEquals(0, byteArrayBuilder0.size());
      assertEquals(1, iSOLatin1XmlWriter0.getRow());
      assertEquals(0, simpleNsStreamWriter0.getAttributeCount());
      assertEquals("No element/attribute name specified when trying to output element", simpleNsStreamWriter0.getEncoding());
      assertNull(simpleNsStreamWriter0.getBaseUri());
      assertEquals("1.0", simpleNsStreamWriter0.getXmlVersion());
      assertFalse(toXmlGenerator0.canWriteBinaryNatively());
      assertTrue(toXmlGenerator0.canOmitFields());
      assertTrue(toXmlGenerator0.inRoot());
      assertTrue(toXmlGenerator0.canWriteFormattedNumbers());
      assertFalse(toXmlGenerator0.canWriteTypeId());
      assertEquals(299, toXmlGenerator0.getFormatFeatures());
      assertEquals(2613, toXmlGenerator0.getFeatureMask());
      assertEquals((-1), toXmlGenerator0.getOutputBuffered());
      assertEquals(0, toXmlGenerator0.getHighestEscapedChar());
      assertFalse(toXmlGenerator0.isClosed());
      assertFalse(toXmlGenerator0.canWriteObjectId());
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertNotNull(bufferRecycler0);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      assertNotNull(iOContext0);
      assertFalse(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      assertNotNull(writerConfig0);
      assertTrue(writerConfig0.willValidateStructure());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertFalse(writerConfig0.willValidateNames());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.willValidateContent());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertTrue(writerConfig0.willEscapeCr());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willValidateAttributes());
      assertFalse(writerConfig0.willFixContent());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertEquals("5.0", writerConfig0.getImplVersion());
      
      ISOLatin1XmlWriter iSOLatin1XmlWriter0 = new ISOLatin1XmlWriter((OutputStream) null, writerConfig0, false);
      assertNotNull(iSOLatin1XmlWriter0);
      assertTrue(writerConfig0.willValidateStructure());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertFalse(writerConfig0.willValidateNames());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.willValidateContent());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertTrue(writerConfig0.willEscapeCr());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willValidateAttributes());
      assertFalse(writerConfig0.willFixContent());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertEquals(1, iSOLatin1XmlWriter0.getRow());
      
      SimpleNsStreamWriter simpleNsStreamWriter0 = new SimpleNsStreamWriter(iSOLatin1XmlWriter0, "", writerConfig0);
      assertNotNull(simpleNsStreamWriter0);
      assertTrue(writerConfig0.willValidateStructure());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertFalse(writerConfig0.willValidateNames());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.willValidateContent());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertTrue(writerConfig0.willEscapeCr());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willValidateAttributes());
      assertFalse(writerConfig0.willFixContent());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertEquals(1, iSOLatin1XmlWriter0.getRow());
      assertEquals(0, simpleNsStreamWriter0.getAttributeCount());
      assertNull(simpleNsStreamWriter0.getBaseUri());
      assertEquals("", simpleNsStreamWriter0.getEncoding());
      assertEquals("1.0", simpleNsStreamWriter0.getXmlVersion());
      
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 2, 1172, objectMapper0, simpleNsStreamWriter0);
      assertNotNull(toXmlGenerator0);
      assertFalse(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertTrue(writerConfig0.willValidateStructure());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertFalse(writerConfig0.willValidateNames());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.willValidateContent());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertTrue(writerConfig0.willEscapeCr());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willValidateAttributes());
      assertFalse(writerConfig0.willFixContent());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertEquals(1, iSOLatin1XmlWriter0.getRow());
      assertEquals(0, simpleNsStreamWriter0.getAttributeCount());
      assertNull(simpleNsStreamWriter0.getBaseUri());
      assertEquals("", simpleNsStreamWriter0.getEncoding());
      assertEquals("1.0", simpleNsStreamWriter0.getXmlVersion());
      assertTrue(toXmlGenerator0.inRoot());
      assertEquals(1172, toXmlGenerator0.getFormatFeatures());
      assertTrue(toXmlGenerator0.canOmitFields());
      assertEquals((-1), toXmlGenerator0.getOutputBuffered());
      assertFalse(toXmlGenerator0.canWriteObjectId());
      assertFalse(toXmlGenerator0.canWriteBinaryNatively());
      assertEquals(2, toXmlGenerator0.getFeatureMask());
      assertFalse(toXmlGenerator0.isClosed());
      assertEquals(0, toXmlGenerator0.getHighestEscapedChar());
      assertFalse(toXmlGenerator0.canWriteTypeId());
      assertTrue(toXmlGenerator0.canWriteFormattedNumbers());
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      
      QName qName0 = new QName("", "");
      assertNotNull(qName0);
      
      QName qName1 = new QName("eG2OYs^O{u", "eG2OYs^O{u", "eG2OYs^O{u");
      assertNotNull(qName1);
      assertFalse(qName1.equals((Object)qName0));
      
      toXmlGenerator0.startWrappedValue(qName0, qName1);
      assertNotSame(qName0, qName1);
      assertNotSame(qName1, qName0);
      assertFalse(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertTrue(writerConfig0.willValidateStructure());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertFalse(writerConfig0.willValidateNames());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.willValidateContent());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertTrue(writerConfig0.willEscapeCr());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willValidateAttributes());
      assertFalse(writerConfig0.willFixContent());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertEquals(1, iSOLatin1XmlWriter0.getRow());
      assertEquals(0, simpleNsStreamWriter0.getAttributeCount());
      assertNull(simpleNsStreamWriter0.getBaseUri());
      assertEquals("", simpleNsStreamWriter0.getEncoding());
      assertEquals("1.0", simpleNsStreamWriter0.getXmlVersion());
      assertTrue(toXmlGenerator0.inRoot());
      assertEquals(1172, toXmlGenerator0.getFormatFeatures());
      assertTrue(toXmlGenerator0.canOmitFields());
      assertEquals((-1), toXmlGenerator0.getOutputBuffered());
      assertFalse(toXmlGenerator0.canWriteObjectId());
      assertFalse(toXmlGenerator0.canWriteBinaryNatively());
      assertEquals(2, toXmlGenerator0.getFeatureMask());
      assertFalse(toXmlGenerator0.isClosed());
      assertEquals(0, toXmlGenerator0.getHighestEscapedChar());
      assertFalse(toXmlGenerator0.canWriteTypeId());
      assertTrue(toXmlGenerator0.canWriteFormattedNumbers());
      assertFalse(qName0.equals((Object)qName1));
      assertFalse(qName1.equals((Object)qName0));
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      
//      try { 
        toXmlGenerator0.writeStartObject();
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Unbound namespace URI 'eG2OYs^O{u'
//         //
//         verifyException("com.fasterxml.jackson.dataformat.xml.util.StaxUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertNotNull(bufferRecycler0);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(3);
      assertNotNull(byteArrayOutputStream0);
      assertEquals("", byteArrayOutputStream0.toString());
      assertEquals(0, byteArrayOutputStream0.size());
      
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      assertNotNull(writerConfig0);
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertTrue(writerConfig0.willValidateContent());
      assertFalse(writerConfig0.willValidateAttributes());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertTrue(writerConfig0.willEscapeCr());
      assertTrue(writerConfig0.willValidateStructure());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertFalse(writerConfig0.willValidateNames());
      
      AsciiXmlWriter asciiXmlWriter0 = new AsciiXmlWriter(byteArrayOutputStream0, writerConfig0, false);
      assertNotNull(asciiXmlWriter0);
      assertEquals("", byteArrayOutputStream0.toString());
      assertEquals(0, byteArrayOutputStream0.size());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertTrue(writerConfig0.willValidateContent());
      assertFalse(writerConfig0.willValidateAttributes());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertTrue(writerConfig0.willEscapeCr());
      assertTrue(writerConfig0.willValidateStructure());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertFalse(writerConfig0.willValidateNames());
      assertEquals(1, asciiXmlWriter0.getRow());
      
      NonNsStreamWriter nonNsStreamWriter0 = new NonNsStreamWriter(asciiXmlWriter0, "", writerConfig0);
      assertNotNull(nonNsStreamWriter0);
      assertEquals("", byteArrayOutputStream0.toString());
      assertEquals(0, byteArrayOutputStream0.size());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertTrue(writerConfig0.willValidateContent());
      assertFalse(writerConfig0.willValidateAttributes());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertTrue(writerConfig0.willEscapeCr());
      assertTrue(writerConfig0.willValidateStructure());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertFalse(writerConfig0.willValidateNames());
      assertEquals(1, asciiXmlWriter0.getRow());
      assertEquals("1.0", nonNsStreamWriter0.getXmlVersion());
      assertNull(nonNsStreamWriter0.getBaseUri());
      assertEquals("", nonNsStreamWriter0.getEncoding());
      assertEquals(0, nonNsStreamWriter0.getAttributeCount());
      
      IOContext iOContext0 = new IOContext(bufferRecycler0, "", false);
      assertNotNull(iOContext0);
      assertNull(iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 1318, (-6081), objectMapper0, nonNsStreamWriter0);
      assertNotNull(toXmlGenerator0);
      assertEquals("", byteArrayOutputStream0.toString());
      assertEquals(0, byteArrayOutputStream0.size());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertTrue(writerConfig0.willValidateContent());
      assertFalse(writerConfig0.willValidateAttributes());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertTrue(writerConfig0.willEscapeCr());
      assertTrue(writerConfig0.willValidateStructure());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertFalse(writerConfig0.willValidateNames());
      assertEquals(1, asciiXmlWriter0.getRow());
      assertEquals("1.0", nonNsStreamWriter0.getXmlVersion());
      assertNull(nonNsStreamWriter0.getBaseUri());
      assertEquals("", nonNsStreamWriter0.getEncoding());
      assertEquals(0, nonNsStreamWriter0.getAttributeCount());
      assertNull(iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertTrue(toXmlGenerator0.inRoot());
      assertTrue(toXmlGenerator0.canOmitFields());
      assertEquals((-1), toXmlGenerator0.getOutputBuffered());
      assertFalse(toXmlGenerator0.canWriteBinaryNatively());
      assertFalse(toXmlGenerator0.canWriteObjectId());
      assertEquals(1318, toXmlGenerator0.getFeatureMask());
      assertEquals(0, toXmlGenerator0.getHighestEscapedChar());
      assertFalse(toXmlGenerator0.isClosed());
      assertEquals((-6081), toXmlGenerator0.getFormatFeatures());
      assertFalse(toXmlGenerator0.canWriteTypeId());
      assertTrue(toXmlGenerator0.canWriteFormattedNumbers());
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      
      DefaultXmlPrettyPrinter defaultXmlPrettyPrinter0 = new DefaultXmlPrettyPrinter();
      assertNotNull(defaultXmlPrettyPrinter0);
      
      ToXmlGenerator toXmlGenerator1 = (ToXmlGenerator)toXmlGenerator0.setPrettyPrinter(defaultXmlPrettyPrinter0);
      assertNotNull(toXmlGenerator1);
      assertSame(toXmlGenerator0, toXmlGenerator1);
      assertSame(toXmlGenerator1, toXmlGenerator0);
      assertEquals("", byteArrayOutputStream0.toString());
      assertEquals(0, byteArrayOutputStream0.size());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertTrue(writerConfig0.willValidateContent());
      assertFalse(writerConfig0.willValidateAttributes());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertTrue(writerConfig0.willEscapeCr());
      assertTrue(writerConfig0.willValidateStructure());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertFalse(writerConfig0.willValidateNames());
      assertEquals(1, asciiXmlWriter0.getRow());
      assertEquals("1.0", nonNsStreamWriter0.getXmlVersion());
      assertNull(nonNsStreamWriter0.getBaseUri());
      assertEquals("", nonNsStreamWriter0.getEncoding());
      assertEquals(0, nonNsStreamWriter0.getAttributeCount());
      assertNull(iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertTrue(toXmlGenerator0.inRoot());
      assertTrue(toXmlGenerator0.canOmitFields());
      assertEquals((-1), toXmlGenerator0.getOutputBuffered());
      assertFalse(toXmlGenerator0.canWriteBinaryNatively());
      assertFalse(toXmlGenerator0.canWriteObjectId());
      assertEquals(1318, toXmlGenerator0.getFeatureMask());
      assertEquals(0, toXmlGenerator0.getHighestEscapedChar());
      assertFalse(toXmlGenerator0.isClosed());
      assertEquals((-6081), toXmlGenerator0.getFormatFeatures());
      assertFalse(toXmlGenerator0.canWriteTypeId());
      assertTrue(toXmlGenerator0.canWriteFormattedNumbers());
      assertFalse(toXmlGenerator1.canWriteBinaryNatively());
      assertTrue(toXmlGenerator1.canWriteFormattedNumbers());
      assertFalse(toXmlGenerator1.canWriteObjectId());
      assertEquals(0, toXmlGenerator1.getHighestEscapedChar());
      assertEquals((-1), toXmlGenerator1.getOutputBuffered());
      assertFalse(toXmlGenerator1.canWriteTypeId());
      assertEquals((-6081), toXmlGenerator1.getFormatFeatures());
      assertEquals(1318, toXmlGenerator1.getFeatureMask());
      assertTrue(toXmlGenerator1.inRoot());
      assertFalse(toXmlGenerator1.isClosed());
      assertTrue(toXmlGenerator1.canOmitFields());
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertNotNull(bufferRecycler0);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      assertNotNull(writerConfig0);
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertFalse(writerConfig0.willValidateAttributes());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertTrue(writerConfig0.willEscapeCr());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertTrue(writerConfig0.willValidateStructure());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertFalse(writerConfig0.willValidateNames());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.willValidateContent());
      assertFalse(writerConfig0.willFixContent());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertEquals(933, writerConfig0.getConfigFlags());
      
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      assertNotNull(iOContext0);
      assertFalse(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      
      SimpleNsStreamWriter simpleNsStreamWriter0 = new SimpleNsStreamWriter((XmlWriter) null, (String) null, writerConfig0);
      assertNotNull(simpleNsStreamWriter0);
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertFalse(writerConfig0.willValidateAttributes());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertTrue(writerConfig0.willEscapeCr());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertTrue(writerConfig0.willValidateStructure());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertFalse(writerConfig0.willValidateNames());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.willValidateContent());
      assertFalse(writerConfig0.willFixContent());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertEquals("1.0", simpleNsStreamWriter0.getXmlVersion());
      assertEquals(0, simpleNsStreamWriter0.getAttributeCount());
      assertNull(simpleNsStreamWriter0.getBaseUri());
      assertNull(simpleNsStreamWriter0.getEncoding());
      
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 0, 0, objectMapper0, simpleNsStreamWriter0);
      assertNotNull(toXmlGenerator0);
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertFalse(writerConfig0.willValidateAttributes());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertTrue(writerConfig0.willEscapeCr());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertTrue(writerConfig0.willValidateStructure());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertFalse(writerConfig0.willValidateNames());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.willValidateContent());
      assertFalse(writerConfig0.willFixContent());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertFalse(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertEquals("1.0", simpleNsStreamWriter0.getXmlVersion());
      assertEquals(0, simpleNsStreamWriter0.getAttributeCount());
      assertNull(simpleNsStreamWriter0.getBaseUri());
      assertNull(simpleNsStreamWriter0.getEncoding());
      assertFalse(toXmlGenerator0.canWriteBinaryNatively());
      assertFalse(toXmlGenerator0.isClosed());
      assertTrue(toXmlGenerator0.canOmitFields());
      assertEquals(0, toXmlGenerator0.getFormatFeatures());
      assertTrue(toXmlGenerator0.inRoot());
      assertEquals((-1), toXmlGenerator0.getOutputBuffered());
      assertFalse(toXmlGenerator0.canWriteTypeId());
      assertFalse(toXmlGenerator0.canWriteObjectId());
      assertEquals(0, toXmlGenerator0.getFeatureMask());
      assertTrue(toXmlGenerator0.canWriteFormattedNumbers());
      assertEquals(0, toXmlGenerator0.getHighestEscapedChar());
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      
      ToXmlGenerator toXmlGenerator1 = (ToXmlGenerator)toXmlGenerator0.overrideFormatFeatures(1, 1260);
      assertNotNull(toXmlGenerator1);
      assertSame(toXmlGenerator0, toXmlGenerator1);
      assertSame(toXmlGenerator1, toXmlGenerator0);
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertFalse(writerConfig0.willValidateAttributes());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertTrue(writerConfig0.willEscapeCr());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertTrue(writerConfig0.willValidateStructure());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertFalse(writerConfig0.willValidateNames());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.willValidateContent());
      assertFalse(writerConfig0.willFixContent());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertFalse(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertEquals("1.0", simpleNsStreamWriter0.getXmlVersion());
      assertEquals(0, simpleNsStreamWriter0.getAttributeCount());
      assertNull(simpleNsStreamWriter0.getBaseUri());
      assertNull(simpleNsStreamWriter0.getEncoding());
      assertFalse(toXmlGenerator0.canWriteBinaryNatively());
      assertFalse(toXmlGenerator0.isClosed());
      assertTrue(toXmlGenerator0.canOmitFields());
      assertEquals(0, toXmlGenerator0.getFormatFeatures());
      assertTrue(toXmlGenerator0.inRoot());
      assertEquals((-1), toXmlGenerator0.getOutputBuffered());
      assertFalse(toXmlGenerator0.canWriteTypeId());
      assertFalse(toXmlGenerator0.canWriteObjectId());
      assertEquals(0, toXmlGenerator0.getFeatureMask());
      assertTrue(toXmlGenerator0.canWriteFormattedNumbers());
      assertEquals(0, toXmlGenerator0.getHighestEscapedChar());
      assertFalse(toXmlGenerator1.canWriteBinaryNatively());
      assertTrue(toXmlGenerator1.canWriteFormattedNumbers());
      assertEquals(0, toXmlGenerator1.getFormatFeatures());
      assertFalse(toXmlGenerator1.canWriteObjectId());
      assertEquals(0, toXmlGenerator1.getHighestEscapedChar());
      assertEquals(0, toXmlGenerator1.getFeatureMask());
      assertEquals((-1), toXmlGenerator1.getOutputBuffered());
      assertFalse(toXmlGenerator1.canWriteTypeId());
      assertTrue(toXmlGenerator1.inRoot());
      assertTrue(toXmlGenerator1.canOmitFields());
      assertFalse(toXmlGenerator1.isClosed());
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertNotNull(bufferRecycler0);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(3);
      assertNotNull(byteArrayOutputStream0);
      assertEquals("", byteArrayOutputStream0.toString());
      assertEquals(0, byteArrayOutputStream0.size());
      
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      assertNotNull(writerConfig0);
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertTrue(writerConfig0.willEscapeCr());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertTrue(writerConfig0.willValidateContent());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertFalse(writerConfig0.willValidateNames());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.willValidateStructure());
      assertFalse(writerConfig0.willFixContent());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertFalse(writerConfig0.willValidateAttributes());
      
      AsciiXmlWriter asciiXmlWriter0 = new AsciiXmlWriter(byteArrayOutputStream0, writerConfig0, false);
      assertNotNull(asciiXmlWriter0);
      assertEquals("", byteArrayOutputStream0.toString());
      assertEquals(0, byteArrayOutputStream0.size());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertTrue(writerConfig0.willEscapeCr());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertTrue(writerConfig0.willValidateContent());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertFalse(writerConfig0.willValidateNames());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.willValidateStructure());
      assertFalse(writerConfig0.willFixContent());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertFalse(writerConfig0.willValidateAttributes());
      assertEquals(1, asciiXmlWriter0.getRow());
      
      NonNsStreamWriter nonNsStreamWriter0 = new NonNsStreamWriter(asciiXmlWriter0, "", writerConfig0);
      assertNotNull(nonNsStreamWriter0);
      assertEquals("", byteArrayOutputStream0.toString());
      assertEquals(0, byteArrayOutputStream0.size());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertTrue(writerConfig0.willEscapeCr());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertTrue(writerConfig0.willValidateContent());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertFalse(writerConfig0.willValidateNames());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.willValidateStructure());
      assertFalse(writerConfig0.willFixContent());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertFalse(writerConfig0.willValidateAttributes());
      assertEquals(1, asciiXmlWriter0.getRow());
      assertEquals(0, nonNsStreamWriter0.getAttributeCount());
      assertEquals("", nonNsStreamWriter0.getEncoding());
      assertNull(nonNsStreamWriter0.getBaseUri());
      assertEquals("1.0", nonNsStreamWriter0.getXmlVersion());
      
      IOContext iOContext0 = new IOContext(bufferRecycler0, "", false);
      assertNotNull(iOContext0);
      assertFalse(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      
      StreamWriterDelegate streamWriterDelegate0 = new StreamWriterDelegate(nonNsStreamWriter0);
      assertNotNull(streamWriterDelegate0);
      assertEquals("", byteArrayOutputStream0.toString());
      assertEquals(0, byteArrayOutputStream0.size());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertTrue(writerConfig0.willEscapeCr());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertTrue(writerConfig0.willValidateContent());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertFalse(writerConfig0.willValidateNames());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.willValidateStructure());
      assertFalse(writerConfig0.willFixContent());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertFalse(writerConfig0.willValidateAttributes());
      assertEquals(1, asciiXmlWriter0.getRow());
      assertEquals(0, nonNsStreamWriter0.getAttributeCount());
      assertEquals("", nonNsStreamWriter0.getEncoding());
      assertNull(nonNsStreamWriter0.getBaseUri());
      assertEquals("1.0", nonNsStreamWriter0.getXmlVersion());
      
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 344, (-697), objectMapper0, streamWriterDelegate0);
      assertNotNull(toXmlGenerator0);
      assertEquals("", byteArrayOutputStream0.toString());
      assertEquals(0, byteArrayOutputStream0.size());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertTrue(writerConfig0.willEscapeCr());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertTrue(writerConfig0.willValidateContent());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertFalse(writerConfig0.willValidateNames());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.willValidateStructure());
      assertFalse(writerConfig0.willFixContent());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertFalse(writerConfig0.willValidateAttributes());
      assertEquals(1, asciiXmlWriter0.getRow());
      assertEquals(0, nonNsStreamWriter0.getAttributeCount());
      assertEquals("", nonNsStreamWriter0.getEncoding());
      assertNull(nonNsStreamWriter0.getBaseUri());
      assertEquals("1.0", nonNsStreamWriter0.getXmlVersion());
      assertFalse(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertEquals((-697), toXmlGenerator0.getFormatFeatures());
      assertTrue(toXmlGenerator0.inRoot());
      assertTrue(toXmlGenerator0.canOmitFields());
      assertFalse(toXmlGenerator0.canWriteObjectId());
      assertEquals((-1), toXmlGenerator0.getOutputBuffered());
      assertFalse(toXmlGenerator0.canWriteBinaryNatively());
      assertFalse(toXmlGenerator0.isClosed());
      assertEquals(0, toXmlGenerator0.getHighestEscapedChar());
      assertEquals(344, toXmlGenerator0.getFeatureMask());
      assertFalse(toXmlGenerator0.canWriteTypeId());
      assertTrue(toXmlGenerator0.canWriteFormattedNumbers());
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      
      ToXmlGenerator toXmlGenerator1 = (ToXmlGenerator)toXmlGenerator0.overrideFormatFeatures(541, 0);
      assertNotNull(toXmlGenerator1);
      assertSame(toXmlGenerator0, toXmlGenerator1);
      assertSame(toXmlGenerator1, toXmlGenerator0);
      assertEquals("", byteArrayOutputStream0.toString());
      assertEquals(0, byteArrayOutputStream0.size());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertTrue(writerConfig0.willEscapeCr());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertTrue(writerConfig0.willValidateContent());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertFalse(writerConfig0.willValidateNames());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.willValidateStructure());
      assertFalse(writerConfig0.willFixContent());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertFalse(writerConfig0.willValidateAttributes());
      assertEquals(1, asciiXmlWriter0.getRow());
      assertEquals(0, nonNsStreamWriter0.getAttributeCount());
      assertEquals("", nonNsStreamWriter0.getEncoding());
      assertNull(nonNsStreamWriter0.getBaseUri());
      assertEquals("1.0", nonNsStreamWriter0.getXmlVersion());
      assertFalse(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertEquals((-697), toXmlGenerator0.getFormatFeatures());
      assertTrue(toXmlGenerator0.inRoot());
      assertTrue(toXmlGenerator0.canOmitFields());
      assertFalse(toXmlGenerator0.canWriteObjectId());
      assertEquals((-1), toXmlGenerator0.getOutputBuffered());
      assertFalse(toXmlGenerator0.canWriteBinaryNatively());
      assertFalse(toXmlGenerator0.isClosed());
      assertEquals(0, toXmlGenerator0.getHighestEscapedChar());
      assertEquals(344, toXmlGenerator0.getFeatureMask());
      assertFalse(toXmlGenerator0.canWriteTypeId());
      assertTrue(toXmlGenerator0.canWriteFormattedNumbers());
      assertFalse(toXmlGenerator1.canWriteObjectId());
      assertEquals((-697), toXmlGenerator1.getFormatFeatures());
      assertTrue(toXmlGenerator1.canWriteFormattedNumbers());
      assertFalse(toXmlGenerator1.canWriteBinaryNatively());
      assertEquals((-1), toXmlGenerator1.getOutputBuffered());
      assertEquals(0, toXmlGenerator1.getHighestEscapedChar());
      assertFalse(toXmlGenerator1.canWriteTypeId());
      assertTrue(toXmlGenerator1.inRoot());
      assertEquals(344, toXmlGenerator1.getFeatureMask());
      assertTrue(toXmlGenerator1.canOmitFields());
      assertFalse(toXmlGenerator1.isClosed());
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertNotNull(bufferRecycler0);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      assertNotNull(byteArrayOutputStream0);
      assertEquals("", byteArrayOutputStream0.toString());
      assertEquals(0, byteArrayOutputStream0.size());
      
      WriterConfig writerConfig0 = WriterConfig.createJ2MEDefaults();
      assertNotNull(writerConfig0);
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertTrue(writerConfig0.willValidateContent());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.willValidateStructure());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertFalse(writerConfig0.willValidateNames());
      assertTrue(writerConfig0.willEscapeCr());
      assertFalse(writerConfig0.willValidateAttributes());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      
      AsciiXmlWriter asciiXmlWriter0 = new AsciiXmlWriter(byteArrayOutputStream0, writerConfig0, false);
      assertNotNull(asciiXmlWriter0);
      assertEquals("", byteArrayOutputStream0.toString());
      assertEquals(0, byteArrayOutputStream0.size());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertTrue(writerConfig0.willValidateContent());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.willValidateStructure());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertFalse(writerConfig0.willValidateNames());
      assertTrue(writerConfig0.willEscapeCr());
      assertFalse(writerConfig0.willValidateAttributes());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertEquals(1, asciiXmlWriter0.getRow());
      
      NonNsStreamWriter nonNsStreamWriter0 = new NonNsStreamWriter(asciiXmlWriter0, "1.1", writerConfig0);
      assertNotNull(nonNsStreamWriter0);
      assertEquals("", byteArrayOutputStream0.toString());
      assertEquals(0, byteArrayOutputStream0.size());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertTrue(writerConfig0.willValidateContent());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.willValidateStructure());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertFalse(writerConfig0.willValidateNames());
      assertTrue(writerConfig0.willEscapeCr());
      assertFalse(writerConfig0.willValidateAttributes());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertEquals(1, asciiXmlWriter0.getRow());
      assertEquals("1.1", nonNsStreamWriter0.getEncoding());
      assertEquals("1.0", nonNsStreamWriter0.getXmlVersion());
      assertEquals(0, nonNsStreamWriter0.getAttributeCount());
      assertNull(nonNsStreamWriter0.getBaseUri());
      
      IOContext iOContext0 = new IOContext(bufferRecycler0, byteArrayOutputStream0, false);
      assertNotNull(iOContext0);
      assertEquals("", byteArrayOutputStream0.toString());
      assertEquals(0, byteArrayOutputStream0.size());
      assertNull(iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 3, 1618, objectMapper0, nonNsStreamWriter0);
      assertNotNull(toXmlGenerator0);
      assertEquals("", byteArrayOutputStream0.toString());
      assertEquals(0, byteArrayOutputStream0.size());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertTrue(writerConfig0.willValidateContent());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.willValidateStructure());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertFalse(writerConfig0.willValidateNames());
      assertTrue(writerConfig0.willEscapeCr());
      assertFalse(writerConfig0.willValidateAttributes());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertEquals(1, asciiXmlWriter0.getRow());
      assertEquals("1.1", nonNsStreamWriter0.getEncoding());
      assertEquals("1.0", nonNsStreamWriter0.getXmlVersion());
      assertEquals(0, nonNsStreamWriter0.getAttributeCount());
      assertNull(nonNsStreamWriter0.getBaseUri());
      assertNull(iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertEquals(1618, toXmlGenerator0.getFormatFeatures());
      assertTrue(toXmlGenerator0.canOmitFields());
      assertFalse(toXmlGenerator0.canWriteBinaryNatively());
      assertTrue(toXmlGenerator0.inRoot());
      assertFalse(toXmlGenerator0.isClosed());
      assertEquals(3, toXmlGenerator0.getFeatureMask());
      assertEquals((-1), toXmlGenerator0.getOutputBuffered());
      assertFalse(toXmlGenerator0.canWriteObjectId());
      assertEquals(0, toXmlGenerator0.getHighestEscapedChar());
      assertFalse(toXmlGenerator0.canWriteTypeId());
      assertTrue(toXmlGenerator0.canWriteFormattedNumbers());
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      
      toXmlGenerator0.writeStartArray();
      assertEquals("", byteArrayOutputStream0.toString());
      assertEquals(0, byteArrayOutputStream0.size());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertTrue(writerConfig0.willValidateContent());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.willValidateStructure());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertFalse(writerConfig0.willValidateNames());
      assertTrue(writerConfig0.willEscapeCr());
      assertFalse(writerConfig0.willValidateAttributes());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertEquals(1, asciiXmlWriter0.getRow());
      assertEquals("1.1", nonNsStreamWriter0.getEncoding());
      assertEquals("1.0", nonNsStreamWriter0.getXmlVersion());
      assertEquals(0, nonNsStreamWriter0.getAttributeCount());
      assertNull(nonNsStreamWriter0.getBaseUri());
      assertNull(iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertEquals(1618, toXmlGenerator0.getFormatFeatures());
      assertTrue(toXmlGenerator0.canOmitFields());
      assertFalse(toXmlGenerator0.canWriteBinaryNatively());
      assertFalse(toXmlGenerator0.isClosed());
      assertEquals(3, toXmlGenerator0.getFeatureMask());
      assertEquals((-1), toXmlGenerator0.getOutputBuffered());
      assertFalse(toXmlGenerator0.canWriteObjectId());
      assertEquals(0, toXmlGenerator0.getHighestEscapedChar());
      assertFalse(toXmlGenerator0.canWriteTypeId());
      assertFalse(toXmlGenerator0.inRoot());
      assertTrue(toXmlGenerator0.canWriteFormattedNumbers());
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      
      boolean boolean0 = toXmlGenerator0.inRoot();
      assertEquals("", byteArrayOutputStream0.toString());
      assertEquals(0, byteArrayOutputStream0.size());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertTrue(writerConfig0.willValidateContent());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.willValidateStructure());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertFalse(writerConfig0.willValidateNames());
      assertTrue(writerConfig0.willEscapeCr());
      assertFalse(writerConfig0.willValidateAttributes());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertEquals(1, asciiXmlWriter0.getRow());
      assertEquals("1.1", nonNsStreamWriter0.getEncoding());
      assertEquals("1.0", nonNsStreamWriter0.getXmlVersion());
      assertEquals(0, nonNsStreamWriter0.getAttributeCount());
      assertNull(nonNsStreamWriter0.getBaseUri());
      assertNull(iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertEquals(1618, toXmlGenerator0.getFormatFeatures());
      assertTrue(toXmlGenerator0.canOmitFields());
      assertFalse(toXmlGenerator0.canWriteBinaryNatively());
      assertFalse(toXmlGenerator0.isClosed());
      assertEquals(3, toXmlGenerator0.getFeatureMask());
      assertEquals((-1), toXmlGenerator0.getOutputBuffered());
      assertFalse(toXmlGenerator0.canWriteObjectId());
      assertEquals(0, toXmlGenerator0.getHighestEscapedChar());
      assertFalse(toXmlGenerator0.canWriteTypeId());
      assertFalse(toXmlGenerator0.inRoot());
      assertTrue(toXmlGenerator0.canWriteFormattedNumbers());
      assertFalse(boolean0);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertNotNull(bufferRecycler0);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      assertNotNull(iOContext0);
      assertFalse(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      
      WriterConfig writerConfig0 = WriterConfig.createJ2MEDefaults();
      assertNotNull(writerConfig0);
      assertTrue(writerConfig0.willValidateStructure());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willValidateNames());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willFixContent());
      assertTrue(writerConfig0.willEscapeCr());
      assertFalse(writerConfig0.willValidateAttributes());
      assertTrue(writerConfig0.willValidateContent());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertEquals(933, writerConfig0.getConfigFlags());
      
      NonNsStreamWriter nonNsStreamWriter0 = new NonNsStreamWriter((XmlWriter) null, "\"w7lZ2s0Tx1*AC-V", writerConfig0);
      assertNotNull(nonNsStreamWriter0);
      assertTrue(writerConfig0.willValidateStructure());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willValidateNames());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willFixContent());
      assertTrue(writerConfig0.willEscapeCr());
      assertFalse(writerConfig0.willValidateAttributes());
      assertTrue(writerConfig0.willValidateContent());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertEquals("1.0", nonNsStreamWriter0.getXmlVersion());
      assertEquals("\"w7lZ2s0Tx1*AC-V", nonNsStreamWriter0.getEncoding());
      assertEquals(0, nonNsStreamWriter0.getAttributeCount());
      assertNull(nonNsStreamWriter0.getBaseUri());
      
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 1, 114, objectMapper0, nonNsStreamWriter0);
      assertNotNull(toXmlGenerator0);
      assertFalse(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertTrue(writerConfig0.willValidateStructure());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willValidateNames());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willFixContent());
      assertTrue(writerConfig0.willEscapeCr());
      assertFalse(writerConfig0.willValidateAttributes());
      assertTrue(writerConfig0.willValidateContent());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertEquals("1.0", nonNsStreamWriter0.getXmlVersion());
      assertEquals("\"w7lZ2s0Tx1*AC-V", nonNsStreamWriter0.getEncoding());
      assertEquals(0, nonNsStreamWriter0.getAttributeCount());
      assertNull(nonNsStreamWriter0.getBaseUri());
      assertTrue(toXmlGenerator0.canOmitFields());
      assertTrue(toXmlGenerator0.inRoot());
      assertEquals(1, toXmlGenerator0.getFeatureMask());
      assertFalse(toXmlGenerator0.canWriteBinaryNatively());
      assertFalse(toXmlGenerator0.canWriteObjectId());
      assertEquals(114, toXmlGenerator0.getFormatFeatures());
      assertFalse(toXmlGenerator0.isClosed());
      assertEquals(0, toXmlGenerator0.getHighestEscapedChar());
      assertFalse(toXmlGenerator0.canWriteTypeId());
      assertEquals((-1), toXmlGenerator0.getOutputBuffered());
      assertTrue(toXmlGenerator0.canWriteFormattedNumbers());
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      
      int int0 = toXmlGenerator0.getFormatFeatures();
      assertFalse(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertTrue(writerConfig0.willValidateStructure());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willValidateNames());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willFixContent());
      assertTrue(writerConfig0.willEscapeCr());
      assertFalse(writerConfig0.willValidateAttributes());
      assertTrue(writerConfig0.willValidateContent());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertEquals("1.0", nonNsStreamWriter0.getXmlVersion());
      assertEquals("\"w7lZ2s0Tx1*AC-V", nonNsStreamWriter0.getEncoding());
      assertEquals(0, nonNsStreamWriter0.getAttributeCount());
      assertNull(nonNsStreamWriter0.getBaseUri());
      assertTrue(toXmlGenerator0.canOmitFields());
      assertTrue(toXmlGenerator0.inRoot());
      assertEquals(1, toXmlGenerator0.getFeatureMask());
      assertFalse(toXmlGenerator0.canWriteBinaryNatively());
      assertFalse(toXmlGenerator0.canWriteObjectId());
      assertEquals(114, toXmlGenerator0.getFormatFeatures());
      assertFalse(toXmlGenerator0.isClosed());
      assertEquals(0, toXmlGenerator0.getHighestEscapedChar());
      assertFalse(toXmlGenerator0.canWriteTypeId());
      assertEquals((-1), toXmlGenerator0.getOutputBuffered());
      assertTrue(toXmlGenerator0.canWriteFormattedNumbers());
      assertEquals(114, int0);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      assertNotNull(writerConfig0);
      assertTrue(writerConfig0.willValidateStructure());
      assertFalse(writerConfig0.willValidateNames());
      assertTrue(writerConfig0.willValidateContent());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertTrue(writerConfig0.willEscapeCr());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertFalse(writerConfig0.willValidateAttributes());
      
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertNotNull(bufferRecycler0);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      
      IOContext iOContext0 = new IOContext(bufferRecycler0, "", false);
      assertNotNull(iOContext0);
      assertNull(iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      
      ISOLatin1XmlWriter iSOLatin1XmlWriter0 = new ISOLatin1XmlWriter((OutputStream) null, writerConfig0, true);
      assertNotNull(iSOLatin1XmlWriter0);
      assertTrue(writerConfig0.willValidateStructure());
      assertFalse(writerConfig0.willValidateNames());
      assertTrue(writerConfig0.willValidateContent());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertTrue(writerConfig0.willEscapeCr());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertFalse(writerConfig0.willValidateAttributes());
      assertEquals(1, iSOLatin1XmlWriter0.getRow());
      
      NonNsStreamWriter nonNsStreamWriter0 = new NonNsStreamWriter(iSOLatin1XmlWriter0, "kxr6Z8TWm_++ws<Z", writerConfig0);
      assertNotNull(nonNsStreamWriter0);
      assertTrue(writerConfig0.willValidateStructure());
      assertFalse(writerConfig0.willValidateNames());
      assertTrue(writerConfig0.willValidateContent());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertTrue(writerConfig0.willEscapeCr());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertFalse(writerConfig0.willValidateAttributes());
      assertEquals(1, iSOLatin1XmlWriter0.getRow());
      assertEquals("1.0", nonNsStreamWriter0.getXmlVersion());
      assertEquals(0, nonNsStreamWriter0.getAttributeCount());
      assertNull(nonNsStreamWriter0.getBaseUri());
      assertEquals("kxr6Z8TWm_++ws<Z", nonNsStreamWriter0.getEncoding());
      
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 3, (-1496), objectMapper0, nonNsStreamWriter0);
      assertNotNull(toXmlGenerator0);
      assertTrue(writerConfig0.willValidateStructure());
      assertFalse(writerConfig0.willValidateNames());
      assertTrue(writerConfig0.willValidateContent());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertTrue(writerConfig0.willEscapeCr());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertFalse(writerConfig0.willValidateAttributes());
      assertNull(iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertEquals(1, iSOLatin1XmlWriter0.getRow());
      assertEquals("1.0", nonNsStreamWriter0.getXmlVersion());
      assertEquals(0, nonNsStreamWriter0.getAttributeCount());
      assertNull(nonNsStreamWriter0.getBaseUri());
      assertEquals("kxr6Z8TWm_++ws<Z", nonNsStreamWriter0.getEncoding());
      assertFalse(toXmlGenerator0.isClosed());
      assertEquals(0, toXmlGenerator0.getHighestEscapedChar());
      assertFalse(toXmlGenerator0.canWriteBinaryNatively());
      assertEquals((-1), toXmlGenerator0.getOutputBuffered());
      assertEquals(3, toXmlGenerator0.getFeatureMask());
      assertFalse(toXmlGenerator0.canWriteObjectId());
      assertEquals((-1496), toXmlGenerator0.getFormatFeatures());
      assertTrue(toXmlGenerator0.canOmitFields());
      assertTrue(toXmlGenerator0.inRoot());
      assertFalse(toXmlGenerator0.canWriteTypeId());
      assertTrue(toXmlGenerator0.canWriteFormattedNumbers());
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      
      int int0 = toXmlGenerator0.getFormatFeatures();
      assertTrue(writerConfig0.willValidateStructure());
      assertFalse(writerConfig0.willValidateNames());
      assertTrue(writerConfig0.willValidateContent());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertTrue(writerConfig0.willEscapeCr());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertFalse(writerConfig0.willValidateAttributes());
      assertNull(iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertEquals(1, iSOLatin1XmlWriter0.getRow());
      assertEquals("1.0", nonNsStreamWriter0.getXmlVersion());
      assertEquals(0, nonNsStreamWriter0.getAttributeCount());
      assertNull(nonNsStreamWriter0.getBaseUri());
      assertEquals("kxr6Z8TWm_++ws<Z", nonNsStreamWriter0.getEncoding());
      assertFalse(toXmlGenerator0.isClosed());
      assertEquals(0, toXmlGenerator0.getHighestEscapedChar());
      assertFalse(toXmlGenerator0.canWriteBinaryNatively());
      assertEquals((-1), toXmlGenerator0.getOutputBuffered());
      assertEquals(3, toXmlGenerator0.getFeatureMask());
      assertFalse(toXmlGenerator0.canWriteObjectId());
      assertEquals((-1496), toXmlGenerator0.getFormatFeatures());
      assertTrue(toXmlGenerator0.canOmitFields());
      assertTrue(toXmlGenerator0.inRoot());
      assertFalse(toXmlGenerator0.canWriteTypeId());
      assertTrue(toXmlGenerator0.canWriteFormattedNumbers());
      assertEquals((-1496), int0);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertNotNull(bufferRecycler0);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      assertNotNull(iOContext0);
      assertNull(iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      assertNotNull(writerConfig0);
      assertEquals(933, writerConfig0.getConfigFlags());
      assertFalse(writerConfig0.willValidateNames());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertTrue(writerConfig0.willEscapeCr());
      assertTrue(writerConfig0.willValidateStructure());
      assertFalse(writerConfig0.willValidateAttributes());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertTrue(writerConfig0.willValidateContent());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      
      ISOLatin1XmlWriter iSOLatin1XmlWriter0 = new ISOLatin1XmlWriter((OutputStream) null, writerConfig0, false);
      assertNotNull(iSOLatin1XmlWriter0);
      assertEquals(933, writerConfig0.getConfigFlags());
      assertFalse(writerConfig0.willValidateNames());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertTrue(writerConfig0.willEscapeCr());
      assertTrue(writerConfig0.willValidateStructure());
      assertFalse(writerConfig0.willValidateAttributes());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertTrue(writerConfig0.willValidateContent());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertEquals(1, iSOLatin1XmlWriter0.getRow());
      
      SimpleNsStreamWriter simpleNsStreamWriter0 = new SimpleNsStreamWriter(iSOLatin1XmlWriter0, "", writerConfig0);
      assertNotNull(simpleNsStreamWriter0);
      assertEquals(933, writerConfig0.getConfigFlags());
      assertFalse(writerConfig0.willValidateNames());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertTrue(writerConfig0.willEscapeCr());
      assertTrue(writerConfig0.willValidateStructure());
      assertFalse(writerConfig0.willValidateAttributes());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertTrue(writerConfig0.willValidateContent());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertEquals(1, iSOLatin1XmlWriter0.getRow());
      assertNull(simpleNsStreamWriter0.getBaseUri());
      assertEquals(0, simpleNsStreamWriter0.getAttributeCount());
      assertEquals("1.0", simpleNsStreamWriter0.getXmlVersion());
      assertEquals("", simpleNsStreamWriter0.getEncoding());
      
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 0, 0, objectMapper0, simpleNsStreamWriter0);
      assertNotNull(toXmlGenerator0);
      assertNull(iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertFalse(writerConfig0.willValidateNames());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertTrue(writerConfig0.willEscapeCr());
      assertTrue(writerConfig0.willValidateStructure());
      assertFalse(writerConfig0.willValidateAttributes());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertTrue(writerConfig0.willValidateContent());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertEquals(1, iSOLatin1XmlWriter0.getRow());
      assertNull(simpleNsStreamWriter0.getBaseUri());
      assertEquals(0, simpleNsStreamWriter0.getAttributeCount());
      assertEquals("1.0", simpleNsStreamWriter0.getXmlVersion());
      assertEquals("", simpleNsStreamWriter0.getEncoding());
      assertFalse(toXmlGenerator0.canWriteTypeId());
      assertEquals(0, toXmlGenerator0.getFormatFeatures());
      assertTrue(toXmlGenerator0.inRoot());
      assertTrue(toXmlGenerator0.canOmitFields());
      assertFalse(toXmlGenerator0.isClosed());
      assertTrue(toXmlGenerator0.canWriteFormattedNumbers());
      assertFalse(toXmlGenerator0.canWriteBinaryNatively());
      assertFalse(toXmlGenerator0.canWriteObjectId());
      assertEquals(0, toXmlGenerator0.getFeatureMask());
      assertEquals((-1), toXmlGenerator0.getOutputBuffered());
      assertEquals(0, toXmlGenerator0.getHighestEscapedChar());
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      
      ToXmlGenerator.Feature toXmlGenerator_Feature0 = ToXmlGenerator.Feature.WRITE_XML_DECLARATION;
      toXmlGenerator0.writeStartArray(2526);
      assertNull(iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertFalse(writerConfig0.willValidateNames());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertTrue(writerConfig0.willEscapeCr());
      assertTrue(writerConfig0.willValidateStructure());
      assertFalse(writerConfig0.willValidateAttributes());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertTrue(writerConfig0.willValidateContent());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertEquals(1, iSOLatin1XmlWriter0.getRow());
      assertNull(simpleNsStreamWriter0.getBaseUri());
      assertEquals(0, simpleNsStreamWriter0.getAttributeCount());
      assertEquals("1.0", simpleNsStreamWriter0.getXmlVersion());
      assertEquals("", simpleNsStreamWriter0.getEncoding());
      assertFalse(toXmlGenerator0.inRoot());
      assertFalse(toXmlGenerator0.canWriteTypeId());
      assertEquals(0, toXmlGenerator0.getFormatFeatures());
      assertTrue(toXmlGenerator0.canOmitFields());
      assertFalse(toXmlGenerator0.isClosed());
      assertTrue(toXmlGenerator0.canWriteFormattedNumbers());
      assertFalse(toXmlGenerator0.canWriteBinaryNatively());
      assertFalse(toXmlGenerator0.canWriteObjectId());
      assertEquals(0, toXmlGenerator0.getFeatureMask());
      assertEquals((-1), toXmlGenerator0.getOutputBuffered());
      assertEquals(0, toXmlGenerator0.getHighestEscapedChar());
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      
      ToXmlGenerator toXmlGenerator1 = toXmlGenerator0.enable(toXmlGenerator_Feature0);
      assertNotNull(toXmlGenerator1);
      assertSame(toXmlGenerator0, toXmlGenerator1);
      assertSame(toXmlGenerator1, toXmlGenerator0);
      assertNull(iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertFalse(writerConfig0.willValidateNames());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertTrue(writerConfig0.willEscapeCr());
      assertTrue(writerConfig0.willValidateStructure());
      assertFalse(writerConfig0.willValidateAttributes());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertTrue(writerConfig0.willValidateContent());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertEquals(1, iSOLatin1XmlWriter0.getRow());
      assertNull(simpleNsStreamWriter0.getBaseUri());
      assertEquals(0, simpleNsStreamWriter0.getAttributeCount());
      assertEquals("1.0", simpleNsStreamWriter0.getXmlVersion());
      assertEquals("", simpleNsStreamWriter0.getEncoding());
      assertFalse(toXmlGenerator0.inRoot());
      assertFalse(toXmlGenerator0.canWriteTypeId());
      assertEquals(1, toXmlGenerator0.getFormatFeatures());
      assertTrue(toXmlGenerator0.canOmitFields());
      assertFalse(toXmlGenerator0.isClosed());
      assertTrue(toXmlGenerator0.canWriteFormattedNumbers());
      assertFalse(toXmlGenerator0.canWriteBinaryNatively());
      assertFalse(toXmlGenerator0.canWriteObjectId());
      assertEquals(0, toXmlGenerator0.getFeatureMask());
      assertEquals((-1), toXmlGenerator0.getOutputBuffered());
      assertEquals(0, toXmlGenerator0.getHighestEscapedChar());
      assertEquals(0, toXmlGenerator1.getFeatureMask());
      assertTrue(toXmlGenerator1.canOmitFields());
      assertTrue(toXmlGenerator1.canWriteFormattedNumbers());
      assertEquals((-1), toXmlGenerator1.getOutputBuffered());
      assertFalse(toXmlGenerator1.canWriteObjectId());
      assertFalse(toXmlGenerator1.canWriteBinaryNatively());
      assertFalse(toXmlGenerator1.isClosed());
      assertFalse(toXmlGenerator1.inRoot());
      assertEquals(0, toXmlGenerator1.getHighestEscapedChar());
      assertEquals(1, toXmlGenerator1.getFormatFeatures());
      assertFalse(toXmlGenerator1.canWriteTypeId());
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertNotNull(bufferRecycler0);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      assertNotNull(iOContext0);
      assertNull(iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      
      WriterConfig writerConfig0 = WriterConfig.createJ2MEDefaults();
      assertNotNull(writerConfig0);
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertTrue(writerConfig0.willEscapeCr());
      assertFalse(writerConfig0.willValidateAttributes());
      assertFalse(writerConfig0.willValidateNames());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.willValidateStructure());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertTrue(writerConfig0.willValidateContent());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      
      AsciiXmlWriter asciiXmlWriter0 = new AsciiXmlWriter((OutputStream) null, writerConfig0, false);
      assertNotNull(asciiXmlWriter0);
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertTrue(writerConfig0.willEscapeCr());
      assertFalse(writerConfig0.willValidateAttributes());
      assertFalse(writerConfig0.willValidateNames());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.willValidateStructure());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertTrue(writerConfig0.willValidateContent());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertEquals(1, asciiXmlWriter0.getRow());
      
      NonNsStreamWriter nonNsStreamWriter0 = new NonNsStreamWriter(asciiXmlWriter0, "cOkF~y.\u0000n", writerConfig0);
      assertNotNull(nonNsStreamWriter0);
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertTrue(writerConfig0.willEscapeCr());
      assertFalse(writerConfig0.willValidateAttributes());
      assertFalse(writerConfig0.willValidateNames());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.willValidateStructure());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertTrue(writerConfig0.willValidateContent());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertEquals(1, asciiXmlWriter0.getRow());
      assertEquals("1.0", nonNsStreamWriter0.getXmlVersion());
      assertNull(nonNsStreamWriter0.getBaseUri());
      assertEquals(0, nonNsStreamWriter0.getAttributeCount());
      assertEquals("cOkF~y.\u0000n", nonNsStreamWriter0.getEncoding());
      
      StreamWriterDelegate streamWriterDelegate0 = new StreamWriterDelegate(nonNsStreamWriter0);
      assertNotNull(streamWriterDelegate0);
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertTrue(writerConfig0.willEscapeCr());
      assertFalse(writerConfig0.willValidateAttributes());
      assertFalse(writerConfig0.willValidateNames());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.willValidateStructure());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertTrue(writerConfig0.willValidateContent());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertEquals(1, asciiXmlWriter0.getRow());
      assertEquals("1.0", nonNsStreamWriter0.getXmlVersion());
      assertNull(nonNsStreamWriter0.getBaseUri());
      assertEquals(0, nonNsStreamWriter0.getAttributeCount());
      assertEquals("cOkF~y.\u0000n", nonNsStreamWriter0.getEncoding());
      
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 2, (-3204), (ObjectCodec) null, streamWriterDelegate0);
      assertNotNull(toXmlGenerator0);
      assertNull(iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertTrue(writerConfig0.willEscapeCr());
      assertFalse(writerConfig0.willValidateAttributes());
      assertFalse(writerConfig0.willValidateNames());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.willValidateStructure());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertTrue(writerConfig0.willValidateContent());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertEquals(1, asciiXmlWriter0.getRow());
      assertEquals("1.0", nonNsStreamWriter0.getXmlVersion());
      assertNull(nonNsStreamWriter0.getBaseUri());
      assertEquals(0, nonNsStreamWriter0.getAttributeCount());
      assertEquals("cOkF~y.\u0000n", nonNsStreamWriter0.getEncoding());
      assertFalse(toXmlGenerator0.canWriteObjectId());
      assertEquals(2, toXmlGenerator0.getFeatureMask());
      assertEquals((-3204), toXmlGenerator0.getFormatFeatures());
      assertFalse(toXmlGenerator0.canWriteBinaryNatively());
      assertEquals((-1), toXmlGenerator0.getOutputBuffered());
      assertTrue(toXmlGenerator0.canWriteFormattedNumbers());
      assertEquals(0, toXmlGenerator0.getHighestEscapedChar());
      assertFalse(toXmlGenerator0.canWriteTypeId());
      assertTrue(toXmlGenerator0.canOmitFields());
      assertFalse(toXmlGenerator0.isClosed());
      assertTrue(toXmlGenerator0.inRoot());
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      
      ToXmlGenerator.Feature toXmlGenerator_Feature0 = ToXmlGenerator.Feature.WRITE_XML_DECLARATION;
      ToXmlGenerator toXmlGenerator1 = toXmlGenerator0.enable(toXmlGenerator_Feature0);
      assertNotNull(toXmlGenerator1);
      assertSame(toXmlGenerator0, toXmlGenerator1);
      assertSame(toXmlGenerator1, toXmlGenerator0);
      assertNull(iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertTrue(writerConfig0.willEscapeCr());
      assertFalse(writerConfig0.willValidateAttributes());
      assertFalse(writerConfig0.willValidateNames());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.willValidateStructure());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertTrue(writerConfig0.willValidateContent());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertEquals(1, asciiXmlWriter0.getRow());
      assertEquals("1.0", nonNsStreamWriter0.getXmlVersion());
      assertNull(nonNsStreamWriter0.getBaseUri());
      assertEquals(0, nonNsStreamWriter0.getAttributeCount());
      assertEquals("cOkF~y.\u0000n", nonNsStreamWriter0.getEncoding());
      assertFalse(toXmlGenerator0.canWriteObjectId());
      assertEquals(2, toXmlGenerator0.getFeatureMask());
      assertFalse(toXmlGenerator0.canWriteBinaryNatively());
      assertEquals((-1), toXmlGenerator0.getOutputBuffered());
      assertTrue(toXmlGenerator0.canWriteFormattedNumbers());
      assertEquals(0, toXmlGenerator0.getHighestEscapedChar());
      assertFalse(toXmlGenerator0.canWriteTypeId());
      assertEquals((-3203), toXmlGenerator0.getFormatFeatures());
      assertTrue(toXmlGenerator0.canOmitFields());
      assertFalse(toXmlGenerator0.isClosed());
      assertTrue(toXmlGenerator0.inRoot());
      assertFalse(toXmlGenerator1.canWriteTypeId());
      assertEquals((-1), toXmlGenerator1.getOutputBuffered());
      assertFalse(toXmlGenerator1.isClosed());
      assertEquals(0, toXmlGenerator1.getHighestEscapedChar());
      assertTrue(toXmlGenerator1.canWriteFormattedNumbers());
      assertFalse(toXmlGenerator1.canWriteBinaryNatively());
      assertTrue(toXmlGenerator1.inRoot());
      assertTrue(toXmlGenerator1.canOmitFields());
      assertEquals(2, toXmlGenerator1.getFeatureMask());
      assertFalse(toXmlGenerator1.canWriteObjectId());
      assertEquals((-3203), toXmlGenerator1.getFormatFeatures());
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertNotNull(bufferRecycler0);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(3);
      assertNotNull(byteArrayOutputStream0);
      assertEquals(0, byteArrayOutputStream0.size());
      assertEquals("", byteArrayOutputStream0.toString());
      
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      assertNotNull(writerConfig0);
      assertEquals("woodstox", writerConfig0.getImplName());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertTrue(writerConfig0.willValidateContent());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertTrue(writerConfig0.willValidateStructure());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willValidateNames());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertTrue(writerConfig0.willEscapeCr());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willValidateAttributes());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      
      AsciiXmlWriter asciiXmlWriter0 = new AsciiXmlWriter(byteArrayOutputStream0, writerConfig0, false);
      assertNotNull(asciiXmlWriter0);
      assertEquals(0, byteArrayOutputStream0.size());
      assertEquals("", byteArrayOutputStream0.toString());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertTrue(writerConfig0.willValidateContent());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertTrue(writerConfig0.willValidateStructure());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willValidateNames());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertTrue(writerConfig0.willEscapeCr());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willValidateAttributes());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertEquals(1, asciiXmlWriter0.getRow());
      
      NonNsStreamWriter nonNsStreamWriter0 = new NonNsStreamWriter(asciiXmlWriter0, "", writerConfig0);
      assertNotNull(nonNsStreamWriter0);
      assertEquals(0, byteArrayOutputStream0.size());
      assertEquals("", byteArrayOutputStream0.toString());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertTrue(writerConfig0.willValidateContent());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertTrue(writerConfig0.willValidateStructure());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willValidateNames());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertTrue(writerConfig0.willEscapeCr());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willValidateAttributes());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertEquals(1, asciiXmlWriter0.getRow());
      assertNull(nonNsStreamWriter0.getBaseUri());
      assertEquals("", nonNsStreamWriter0.getEncoding());
      assertEquals(0, nonNsStreamWriter0.getAttributeCount());
      assertEquals("1.0", nonNsStreamWriter0.getXmlVersion());
      
      IOContext iOContext0 = new IOContext(bufferRecycler0, "", false);
      assertNotNull(iOContext0);
      assertNull(iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, (-697), 3, objectMapper0, nonNsStreamWriter0);
      assertNotNull(toXmlGenerator0);
      assertEquals(0, byteArrayOutputStream0.size());
      assertEquals("", byteArrayOutputStream0.toString());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertTrue(writerConfig0.willValidateContent());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertTrue(writerConfig0.willValidateStructure());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willValidateNames());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertTrue(writerConfig0.willEscapeCr());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willValidateAttributes());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertEquals(1, asciiXmlWriter0.getRow());
      assertNull(nonNsStreamWriter0.getBaseUri());
      assertEquals("", nonNsStreamWriter0.getEncoding());
      assertEquals(0, nonNsStreamWriter0.getAttributeCount());
      assertEquals("1.0", nonNsStreamWriter0.getXmlVersion());
      assertNull(iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertFalse(toXmlGenerator0.canWriteTypeId());
      assertEquals((-1), toXmlGenerator0.getOutputBuffered());
      assertEquals((-697), toXmlGenerator0.getFeatureMask());
      assertEquals(0, toXmlGenerator0.getHighestEscapedChar());
      assertFalse(toXmlGenerator0.isClosed());
      assertTrue(toXmlGenerator0.canWriteFormattedNumbers());
      assertEquals(3, toXmlGenerator0.getFormatFeatures());
      assertFalse(toXmlGenerator0.canWriteBinaryNatively());
      assertTrue(toXmlGenerator0.canOmitFields());
      assertTrue(toXmlGenerator0.inRoot());
      assertFalse(toXmlGenerator0.canWriteObjectId());
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      
      ToXmlGenerator.Feature toXmlGenerator_Feature0 = ToXmlGenerator.Feature.WRITE_XML_1_1;
      ToXmlGenerator toXmlGenerator1 = toXmlGenerator0.enable(toXmlGenerator_Feature0);
      assertNotNull(toXmlGenerator1);
      assertSame(toXmlGenerator0, toXmlGenerator1);
      assertSame(toXmlGenerator1, toXmlGenerator0);
      assertEquals(0, byteArrayOutputStream0.size());
      assertEquals("", byteArrayOutputStream0.toString());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertTrue(writerConfig0.willValidateContent());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertTrue(writerConfig0.willValidateStructure());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willValidateNames());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertTrue(writerConfig0.willEscapeCr());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willValidateAttributes());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertEquals(1, asciiXmlWriter0.getRow());
      assertNull(nonNsStreamWriter0.getBaseUri());
      assertEquals("", nonNsStreamWriter0.getEncoding());
      assertEquals(0, nonNsStreamWriter0.getAttributeCount());
      assertEquals("1.0", nonNsStreamWriter0.getXmlVersion());
      assertNull(iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertFalse(toXmlGenerator0.canWriteTypeId());
      assertEquals((-1), toXmlGenerator0.getOutputBuffered());
      assertEquals((-697), toXmlGenerator0.getFeatureMask());
      assertEquals(0, toXmlGenerator0.getHighestEscapedChar());
      assertFalse(toXmlGenerator0.isClosed());
      assertTrue(toXmlGenerator0.canWriteFormattedNumbers());
      assertEquals(3, toXmlGenerator0.getFormatFeatures());
      assertFalse(toXmlGenerator0.canWriteBinaryNatively());
      assertTrue(toXmlGenerator0.canOmitFields());
      assertTrue(toXmlGenerator0.inRoot());
      assertFalse(toXmlGenerator0.canWriteObjectId());
      assertFalse(toXmlGenerator1.canWriteTypeId());
      assertFalse(toXmlGenerator1.isClosed());
      assertEquals((-697), toXmlGenerator1.getFeatureMask());
      assertTrue(toXmlGenerator1.canOmitFields());
      assertEquals(3, toXmlGenerator1.getFormatFeatures());
      assertTrue(toXmlGenerator1.inRoot());
      assertFalse(toXmlGenerator1.canWriteObjectId());
      assertTrue(toXmlGenerator1.canWriteFormattedNumbers());
      assertFalse(toXmlGenerator1.canWriteBinaryNatively());
      assertEquals((-1), toXmlGenerator1.getOutputBuffered());
      assertEquals(0, toXmlGenerator1.getHighestEscapedChar());
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertNotNull(bufferRecycler0);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(3);
      assertNotNull(byteArrayOutputStream0);
      assertEquals(0, byteArrayOutputStream0.size());
      assertEquals("", byteArrayOutputStream0.toString());
      
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      assertNotNull(writerConfig0);
      assertFalse(writerConfig0.willValidateNames());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertTrue(writerConfig0.willValidateStructure());
      assertFalse(writerConfig0.willValidateAttributes());
      assertTrue(writerConfig0.willEscapeCr());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertTrue(writerConfig0.willValidateContent());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertFalse(writerConfig0.willFixContent());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      
      AsciiXmlWriter asciiXmlWriter0 = new AsciiXmlWriter(byteArrayOutputStream0, writerConfig0, false);
      assertNotNull(asciiXmlWriter0);
      assertEquals(0, byteArrayOutputStream0.size());
      assertEquals("", byteArrayOutputStream0.toString());
      assertFalse(writerConfig0.willValidateNames());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertTrue(writerConfig0.willValidateStructure());
      assertFalse(writerConfig0.willValidateAttributes());
      assertTrue(writerConfig0.willEscapeCr());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertTrue(writerConfig0.willValidateContent());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertFalse(writerConfig0.willFixContent());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertEquals(1, asciiXmlWriter0.getRow());
      
      NonNsStreamWriter nonNsStreamWriter0 = new NonNsStreamWriter(asciiXmlWriter0, "p'Px6*2*vW{+", writerConfig0);
      assertNotNull(nonNsStreamWriter0);
      assertEquals(0, byteArrayOutputStream0.size());
      assertEquals("", byteArrayOutputStream0.toString());
      assertFalse(writerConfig0.willValidateNames());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertTrue(writerConfig0.willValidateStructure());
      assertFalse(writerConfig0.willValidateAttributes());
      assertTrue(writerConfig0.willEscapeCr());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertTrue(writerConfig0.willValidateContent());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertFalse(writerConfig0.willFixContent());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertEquals(1, asciiXmlWriter0.getRow());
      assertEquals("1.0", nonNsStreamWriter0.getXmlVersion());
      assertNull(nonNsStreamWriter0.getBaseUri());
      assertEquals("p'Px6*2*vW{+", nonNsStreamWriter0.getEncoding());
      assertEquals(0, nonNsStreamWriter0.getAttributeCount());
      
      IOContext iOContext0 = new IOContext(bufferRecycler0, byteArrayOutputStream0, false);
      assertNotNull(iOContext0);
      assertEquals(0, byteArrayOutputStream0.size());
      assertEquals("", byteArrayOutputStream0.toString());
      assertNull(iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 223, (-2836), objectMapper0, nonNsStreamWriter0);
      assertNotNull(toXmlGenerator0);
      assertEquals(0, byteArrayOutputStream0.size());
      assertEquals("", byteArrayOutputStream0.toString());
      assertFalse(writerConfig0.willValidateNames());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertTrue(writerConfig0.willValidateStructure());
      assertFalse(writerConfig0.willValidateAttributes());
      assertTrue(writerConfig0.willEscapeCr());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertTrue(writerConfig0.willValidateContent());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertFalse(writerConfig0.willFixContent());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertEquals(1, asciiXmlWriter0.getRow());
      assertEquals("1.0", nonNsStreamWriter0.getXmlVersion());
      assertNull(nonNsStreamWriter0.getBaseUri());
      assertEquals("p'Px6*2*vW{+", nonNsStreamWriter0.getEncoding());
      assertEquals(0, nonNsStreamWriter0.getAttributeCount());
      assertNull(iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertFalse(toXmlGenerator0.canWriteBinaryNatively());
      assertTrue(toXmlGenerator0.canWriteFormattedNumbers());
      assertTrue(toXmlGenerator0.inRoot());
      assertTrue(toXmlGenerator0.canOmitFields());
      assertFalse(toXmlGenerator0.isClosed());
      assertEquals((-1), toXmlGenerator0.getOutputBuffered());
      assertEquals((-2836), toXmlGenerator0.getFormatFeatures());
      assertFalse(toXmlGenerator0.canWriteTypeId());
      assertFalse(toXmlGenerator0.canWriteObjectId());
      assertEquals(223, toXmlGenerator0.getFeatureMask());
      assertEquals(0, toXmlGenerator0.getHighestEscapedChar());
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      
      toXmlGenerator0.writeStartArray();
      assertEquals(0, byteArrayOutputStream0.size());
      assertEquals("", byteArrayOutputStream0.toString());
      assertFalse(writerConfig0.willValidateNames());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertTrue(writerConfig0.willValidateStructure());
      assertFalse(writerConfig0.willValidateAttributes());
      assertTrue(writerConfig0.willEscapeCr());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertTrue(writerConfig0.willValidateContent());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertFalse(writerConfig0.willFixContent());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertEquals(1, asciiXmlWriter0.getRow());
      assertEquals("1.0", nonNsStreamWriter0.getXmlVersion());
      assertNull(nonNsStreamWriter0.getBaseUri());
      assertEquals("p'Px6*2*vW{+", nonNsStreamWriter0.getEncoding());
      assertEquals(0, nonNsStreamWriter0.getAttributeCount());
      assertNull(iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertFalse(toXmlGenerator0.canWriteBinaryNatively());
      assertTrue(toXmlGenerator0.canWriteFormattedNumbers());
      assertTrue(toXmlGenerator0.canOmitFields());
      assertFalse(toXmlGenerator0.isClosed());
      assertEquals((-1), toXmlGenerator0.getOutputBuffered());
      assertEquals((-2836), toXmlGenerator0.getFormatFeatures());
      assertFalse(toXmlGenerator0.canWriteTypeId());
      assertFalse(toXmlGenerator0.canWriteObjectId());
      assertFalse(toXmlGenerator0.inRoot());
      assertEquals(223, toXmlGenerator0.getFeatureMask());
      assertEquals(0, toXmlGenerator0.getHighestEscapedChar());
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      
      ToXmlGenerator.Feature toXmlGenerator_Feature0 = ToXmlGenerator.Feature.WRITE_XML_DECLARATION;
      ToXmlGenerator toXmlGenerator1 = toXmlGenerator0.disable(toXmlGenerator_Feature0);
      assertNotNull(toXmlGenerator1);
      assertSame(toXmlGenerator0, toXmlGenerator1);
      assertSame(toXmlGenerator1, toXmlGenerator0);
      assertEquals(0, byteArrayOutputStream0.size());
      assertEquals("", byteArrayOutputStream0.toString());
      assertFalse(writerConfig0.willValidateNames());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertTrue(writerConfig0.willValidateStructure());
      assertFalse(writerConfig0.willValidateAttributes());
      assertTrue(writerConfig0.willEscapeCr());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertTrue(writerConfig0.willValidateContent());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertFalse(writerConfig0.willFixContent());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertEquals(1, asciiXmlWriter0.getRow());
      assertEquals("1.0", nonNsStreamWriter0.getXmlVersion());
      assertNull(nonNsStreamWriter0.getBaseUri());
      assertEquals("p'Px6*2*vW{+", nonNsStreamWriter0.getEncoding());
      assertEquals(0, nonNsStreamWriter0.getAttributeCount());
      assertNull(iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertFalse(toXmlGenerator0.canWriteBinaryNatively());
      assertTrue(toXmlGenerator0.canWriteFormattedNumbers());
      assertTrue(toXmlGenerator0.canOmitFields());
      assertFalse(toXmlGenerator0.isClosed());
      assertEquals((-1), toXmlGenerator0.getOutputBuffered());
      assertEquals((-2836), toXmlGenerator0.getFormatFeatures());
      assertFalse(toXmlGenerator0.canWriteTypeId());
      assertFalse(toXmlGenerator0.canWriteObjectId());
      assertFalse(toXmlGenerator0.inRoot());
      assertEquals(223, toXmlGenerator0.getFeatureMask());
      assertEquals(0, toXmlGenerator0.getHighestEscapedChar());
      assertEquals((-1), toXmlGenerator1.getOutputBuffered());
      assertFalse(toXmlGenerator1.canWriteTypeId());
      assertFalse(toXmlGenerator1.canWriteObjectId());
      assertEquals((-2836), toXmlGenerator1.getFormatFeatures());
      assertFalse(toXmlGenerator1.inRoot());
      assertEquals(223, toXmlGenerator1.getFeatureMask());
      assertEquals(0, toXmlGenerator1.getHighestEscapedChar());
      assertFalse(toXmlGenerator1.canWriteBinaryNatively());
      assertTrue(toXmlGenerator1.canWriteFormattedNumbers());
      assertFalse(toXmlGenerator1.isClosed());
      assertTrue(toXmlGenerator1.canOmitFields());
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertNotNull(bufferRecycler0);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      assertNotNull(iOContext0);
      assertNull(iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      
      WriterConfig writerConfig0 = WriterConfig.createJ2MEDefaults();
      assertNotNull(writerConfig0);
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertTrue(writerConfig0.willValidateContent());
      assertFalse(writerConfig0.willValidateAttributes());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertTrue(writerConfig0.willEscapeCr());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertTrue(writerConfig0.willValidateStructure());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willValidateNames());
      
      AsciiXmlWriter asciiXmlWriter0 = new AsciiXmlWriter((OutputStream) null, writerConfig0, false);
      assertNotNull(asciiXmlWriter0);
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertTrue(writerConfig0.willValidateContent());
      assertFalse(writerConfig0.willValidateAttributes());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertTrue(writerConfig0.willEscapeCr());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertTrue(writerConfig0.willValidateStructure());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willValidateNames());
      assertEquals(1, asciiXmlWriter0.getRow());
      
      NonNsStreamWriter nonNsStreamWriter0 = new NonNsStreamWriter(asciiXmlWriter0, "cOkF~y.\u0000n", writerConfig0);
      assertNotNull(nonNsStreamWriter0);
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertTrue(writerConfig0.willValidateContent());
      assertFalse(writerConfig0.willValidateAttributes());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertTrue(writerConfig0.willEscapeCr());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertTrue(writerConfig0.willValidateStructure());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willValidateNames());
      assertEquals(1, asciiXmlWriter0.getRow());
      assertNull(nonNsStreamWriter0.getBaseUri());
      assertEquals(0, nonNsStreamWriter0.getAttributeCount());
      assertEquals("1.0", nonNsStreamWriter0.getXmlVersion());
      assertEquals("cOkF~y.\u0000n", nonNsStreamWriter0.getEncoding());
      
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 0, 0, (ObjectCodec) null, nonNsStreamWriter0);
      assertNotNull(toXmlGenerator0);
      assertNull(iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertTrue(writerConfig0.willValidateContent());
      assertFalse(writerConfig0.willValidateAttributes());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertTrue(writerConfig0.willEscapeCr());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertTrue(writerConfig0.willValidateStructure());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willValidateNames());
      assertEquals(1, asciiXmlWriter0.getRow());
      assertNull(nonNsStreamWriter0.getBaseUri());
      assertEquals(0, nonNsStreamWriter0.getAttributeCount());
      assertEquals("1.0", nonNsStreamWriter0.getXmlVersion());
      assertEquals("cOkF~y.\u0000n", nonNsStreamWriter0.getEncoding());
      assertFalse(toXmlGenerator0.canWriteBinaryNatively());
      assertTrue(toXmlGenerator0.canWriteFormattedNumbers());
      assertEquals(0, toXmlGenerator0.getFormatFeatures());
      assertTrue(toXmlGenerator0.canOmitFields());
      assertTrue(toXmlGenerator0.inRoot());
      assertFalse(toXmlGenerator0.isClosed());
      assertFalse(toXmlGenerator0.canWriteTypeId());
      assertEquals((-1), toXmlGenerator0.getOutputBuffered());
      assertFalse(toXmlGenerator0.canWriteObjectId());
      assertEquals(0, toXmlGenerator0.getFeatureMask());
      assertEquals(0, toXmlGenerator0.getHighestEscapedChar());
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      
      ToXmlGenerator.Feature toXmlGenerator_Feature0 = ToXmlGenerator.Feature.WRITE_XML_DECLARATION;
      ToXmlGenerator toXmlGenerator1 = toXmlGenerator0.disable(toXmlGenerator_Feature0);
      assertNotNull(toXmlGenerator1);
      assertSame(toXmlGenerator0, toXmlGenerator1);
      assertSame(toXmlGenerator1, toXmlGenerator0);
      assertNull(iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertTrue(writerConfig0.willValidateContent());
      assertFalse(writerConfig0.willValidateAttributes());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertTrue(writerConfig0.willEscapeCr());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertTrue(writerConfig0.willValidateStructure());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willValidateNames());
      assertEquals(1, asciiXmlWriter0.getRow());
      assertNull(nonNsStreamWriter0.getBaseUri());
      assertEquals(0, nonNsStreamWriter0.getAttributeCount());
      assertEquals("1.0", nonNsStreamWriter0.getXmlVersion());
      assertEquals("cOkF~y.\u0000n", nonNsStreamWriter0.getEncoding());
      assertFalse(toXmlGenerator0.canWriteBinaryNatively());
      assertTrue(toXmlGenerator0.canWriteFormattedNumbers());
      assertEquals(0, toXmlGenerator0.getFormatFeatures());
      assertTrue(toXmlGenerator0.canOmitFields());
      assertTrue(toXmlGenerator0.inRoot());
      assertFalse(toXmlGenerator0.isClosed());
      assertFalse(toXmlGenerator0.canWriteTypeId());
      assertEquals((-1), toXmlGenerator0.getOutputBuffered());
      assertFalse(toXmlGenerator0.canWriteObjectId());
      assertEquals(0, toXmlGenerator0.getFeatureMask());
      assertEquals(0, toXmlGenerator0.getHighestEscapedChar());
      assertFalse(toXmlGenerator1.isClosed());
      assertEquals(0, toXmlGenerator1.getFormatFeatures());
      assertFalse(toXmlGenerator1.canWriteTypeId());
      assertTrue(toXmlGenerator1.canOmitFields());
      assertEquals(0, toXmlGenerator1.getFeatureMask());
      assertTrue(toXmlGenerator1.inRoot());
      assertTrue(toXmlGenerator1.canWriteFormattedNumbers());
      assertFalse(toXmlGenerator1.canWriteObjectId());
      assertFalse(toXmlGenerator1.canWriteBinaryNatively());
      assertEquals((-1), toXmlGenerator1.getOutputBuffered());
      assertEquals(0, toXmlGenerator1.getHighestEscapedChar());
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertNotNull(bufferRecycler0);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(3);
      assertNotNull(byteArrayOutputStream0);
      assertEquals(0, byteArrayOutputStream0.size());
      assertEquals("", byteArrayOutputStream0.toString());
      
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      assertNotNull(writerConfig0);
      assertEquals(933, writerConfig0.getConfigFlags());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertFalse(writerConfig0.willValidateAttributes());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertTrue(writerConfig0.willValidateContent());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertTrue(writerConfig0.willValidateStructure());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertTrue(writerConfig0.willEscapeCr());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willValidateNames());
      
      AsciiXmlWriter asciiXmlWriter0 = new AsciiXmlWriter(byteArrayOutputStream0, writerConfig0, false);
      assertNotNull(asciiXmlWriter0);
      assertEquals(0, byteArrayOutputStream0.size());
      assertEquals("", byteArrayOutputStream0.toString());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertFalse(writerConfig0.willValidateAttributes());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertTrue(writerConfig0.willValidateContent());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertTrue(writerConfig0.willValidateStructure());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertTrue(writerConfig0.willEscapeCr());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willValidateNames());
      assertEquals(1, asciiXmlWriter0.getRow());
      
      NonNsStreamWriter nonNsStreamWriter0 = new NonNsStreamWriter(asciiXmlWriter0, "D @yG", writerConfig0);
      assertNotNull(nonNsStreamWriter0);
      assertEquals(0, byteArrayOutputStream0.size());
      assertEquals("", byteArrayOutputStream0.toString());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertFalse(writerConfig0.willValidateAttributes());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertTrue(writerConfig0.willValidateContent());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertTrue(writerConfig0.willValidateStructure());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertTrue(writerConfig0.willEscapeCr());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willValidateNames());
      assertEquals(1, asciiXmlWriter0.getRow());
      assertEquals(0, nonNsStreamWriter0.getAttributeCount());
      assertEquals("D @yG", nonNsStreamWriter0.getEncoding());
      assertNull(nonNsStreamWriter0.getBaseUri());
      assertEquals("1.0", nonNsStreamWriter0.getXmlVersion());
      
      IOContext iOContext0 = new IOContext(bufferRecycler0, objectMapper0, true);
      assertNotNull(iOContext0);
      assertNull(iOContext0.getEncoding());
      assertTrue(iOContext0.isResourceManaged());
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, (-422), 1750, objectMapper0, nonNsStreamWriter0);
      assertNotNull(toXmlGenerator0);
      assertEquals(0, byteArrayOutputStream0.size());
      assertEquals("", byteArrayOutputStream0.toString());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertFalse(writerConfig0.willValidateAttributes());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertTrue(writerConfig0.willValidateContent());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertTrue(writerConfig0.willValidateStructure());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertTrue(writerConfig0.willEscapeCr());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willValidateNames());
      assertEquals(1, asciiXmlWriter0.getRow());
      assertEquals(0, nonNsStreamWriter0.getAttributeCount());
      assertEquals("D @yG", nonNsStreamWriter0.getEncoding());
      assertNull(nonNsStreamWriter0.getBaseUri());
      assertEquals("1.0", nonNsStreamWriter0.getXmlVersion());
      assertNull(iOContext0.getEncoding());
      assertTrue(iOContext0.isResourceManaged());
      assertFalse(toXmlGenerator0.canWriteBinaryNatively());
      assertTrue(toXmlGenerator0.canOmitFields());
      assertEquals(1750, toXmlGenerator0.getFormatFeatures());
      assertEquals((-422), toXmlGenerator0.getFeatureMask());
      assertTrue(toXmlGenerator0.canWriteFormattedNumbers());
      assertEquals((-1), toXmlGenerator0.getOutputBuffered());
      assertFalse(toXmlGenerator0.canWriteTypeId());
      assertFalse(toXmlGenerator0.canWriteObjectId());
      assertEquals(0, toXmlGenerator0.getHighestEscapedChar());
      assertTrue(toXmlGenerator0.inRoot());
      assertFalse(toXmlGenerator0.isClosed());
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      
      ToXmlGenerator.Feature toXmlGenerator_Feature0 = ToXmlGenerator.Feature.WRITE_XML_1_1;
      ToXmlGenerator toXmlGenerator1 = toXmlGenerator0.disable(toXmlGenerator_Feature0);
      assertNotNull(toXmlGenerator1);
      assertSame(toXmlGenerator0, toXmlGenerator1);
      assertSame(toXmlGenerator1, toXmlGenerator0);
      assertEquals(0, byteArrayOutputStream0.size());
      assertEquals("", byteArrayOutputStream0.toString());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertFalse(writerConfig0.willValidateAttributes());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertTrue(writerConfig0.willValidateContent());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertTrue(writerConfig0.willValidateStructure());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertTrue(writerConfig0.willEscapeCr());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willValidateNames());
      assertEquals(1, asciiXmlWriter0.getRow());
      assertEquals(0, nonNsStreamWriter0.getAttributeCount());
      assertEquals("D @yG", nonNsStreamWriter0.getEncoding());
      assertNull(nonNsStreamWriter0.getBaseUri());
      assertEquals("1.0", nonNsStreamWriter0.getXmlVersion());
      assertNull(iOContext0.getEncoding());
      assertTrue(iOContext0.isResourceManaged());
      assertFalse(toXmlGenerator0.canWriteBinaryNatively());
      assertTrue(toXmlGenerator0.canOmitFields());
      assertEquals(1748, toXmlGenerator0.getFormatFeatures());
      assertEquals((-422), toXmlGenerator0.getFeatureMask());
      assertTrue(toXmlGenerator0.canWriteFormattedNumbers());
      assertEquals((-1), toXmlGenerator0.getOutputBuffered());
      assertFalse(toXmlGenerator0.canWriteTypeId());
      assertFalse(toXmlGenerator0.canWriteObjectId());
      assertEquals(0, toXmlGenerator0.getHighestEscapedChar());
      assertTrue(toXmlGenerator0.inRoot());
      assertFalse(toXmlGenerator0.isClosed());
      assertFalse(toXmlGenerator1.isClosed());
      assertEquals(0, toXmlGenerator1.getHighestEscapedChar());
      assertFalse(toXmlGenerator1.canWriteBinaryNatively());
      assertFalse(toXmlGenerator1.canWriteObjectId());
      assertTrue(toXmlGenerator1.inRoot());
      assertEquals((-1), toXmlGenerator1.getOutputBuffered());
      assertTrue(toXmlGenerator1.canOmitFields());
      assertTrue(toXmlGenerator1.canWriteFormattedNumbers());
      assertEquals(1748, toXmlGenerator1.getFormatFeatures());
      assertFalse(toXmlGenerator1.canWriteTypeId());
      assertEquals((-422), toXmlGenerator1.getFeatureMask());
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertNotNull(bufferRecycler0);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      assertNotNull(byteArrayOutputStream0);
      assertEquals(0, byteArrayOutputStream0.size());
      assertEquals("", byteArrayOutputStream0.toString());
      
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      assertNotNull(writerConfig0);
      assertFalse(writerConfig0.willValidateAttributes());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertTrue(writerConfig0.willEscapeCr());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willValidateNames());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertTrue(writerConfig0.willValidateStructure());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.willValidateContent());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertFalse(writerConfig0.willFixContent());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      
      AsciiXmlWriter asciiXmlWriter0 = new AsciiXmlWriter(byteArrayOutputStream0, writerConfig0, false);
      assertNotNull(asciiXmlWriter0);
      assertEquals(0, byteArrayOutputStream0.size());
      assertEquals("", byteArrayOutputStream0.toString());
      assertFalse(writerConfig0.willValidateAttributes());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertTrue(writerConfig0.willEscapeCr());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willValidateNames());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertTrue(writerConfig0.willValidateStructure());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.willValidateContent());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertFalse(writerConfig0.willFixContent());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertEquals(1, asciiXmlWriter0.getRow());
      
      NonNsStreamWriter nonNsStreamWriter0 = new NonNsStreamWriter(asciiXmlWriter0, "", writerConfig0);
      assertNotNull(nonNsStreamWriter0);
      assertEquals(0, byteArrayOutputStream0.size());
      assertEquals("", byteArrayOutputStream0.toString());
      assertFalse(writerConfig0.willValidateAttributes());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertTrue(writerConfig0.willEscapeCr());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willValidateNames());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertTrue(writerConfig0.willValidateStructure());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.willValidateContent());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertFalse(writerConfig0.willFixContent());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertEquals(1, asciiXmlWriter0.getRow());
      assertEquals("1.0", nonNsStreamWriter0.getXmlVersion());
      assertEquals("", nonNsStreamWriter0.getEncoding());
      assertNull(nonNsStreamWriter0.getBaseUri());
      assertEquals(0, nonNsStreamWriter0.getAttributeCount());
      
      IOContext iOContext0 = new IOContext(bufferRecycler0, "", false);
      assertNotNull(iOContext0);
      assertNull(iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, (-697), 3, objectMapper0, nonNsStreamWriter0);
      assertNotNull(toXmlGenerator0);
      assertEquals(0, byteArrayOutputStream0.size());
      assertEquals("", byteArrayOutputStream0.toString());
      assertFalse(writerConfig0.willValidateAttributes());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertTrue(writerConfig0.willEscapeCr());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willValidateNames());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertTrue(writerConfig0.willValidateStructure());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.willValidateContent());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertFalse(writerConfig0.willFixContent());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertEquals(1, asciiXmlWriter0.getRow());
      assertEquals("1.0", nonNsStreamWriter0.getXmlVersion());
      assertEquals("", nonNsStreamWriter0.getEncoding());
      assertNull(nonNsStreamWriter0.getBaseUri());
      assertEquals(0, nonNsStreamWriter0.getAttributeCount());
      assertNull(iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertFalse(toXmlGenerator0.canWriteTypeId());
      assertFalse(toXmlGenerator0.canWriteObjectId());
      assertEquals(0, toXmlGenerator0.getHighestEscapedChar());
      assertEquals((-1), toXmlGenerator0.getOutputBuffered());
      assertFalse(toXmlGenerator0.canWriteBinaryNatively());
      assertTrue(toXmlGenerator0.canWriteFormattedNumbers());
      assertTrue(toXmlGenerator0.inRoot());
      assertFalse(toXmlGenerator0.isClosed());
      assertEquals((-697), toXmlGenerator0.getFeatureMask());
      assertTrue(toXmlGenerator0.canOmitFields());
      assertEquals(3, toXmlGenerator0.getFormatFeatures());
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      
      QName qName0 = new QName("write String value", "R^`/lY", "write String value");
      assertNotNull(qName0);
      
      ToXmlGenerator.Feature toXmlGenerator_Feature0 = ToXmlGenerator.Feature.WRITE_XML_1_1;
      toXmlGenerator0.startWrappedValue(qName0, qName0);
      assertEquals(0, byteArrayOutputStream0.size());
      assertEquals("", byteArrayOutputStream0.toString());
      assertFalse(writerConfig0.willValidateAttributes());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertTrue(writerConfig0.willEscapeCr());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willValidateNames());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertTrue(writerConfig0.willValidateStructure());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.willValidateContent());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertFalse(writerConfig0.willFixContent());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertEquals(1, asciiXmlWriter0.getRow());
      assertEquals("1.0", nonNsStreamWriter0.getXmlVersion());
      assertEquals("", nonNsStreamWriter0.getEncoding());
      assertNull(nonNsStreamWriter0.getBaseUri());
      assertEquals(0, nonNsStreamWriter0.getAttributeCount());
      assertNull(iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertFalse(toXmlGenerator0.canWriteTypeId());
      assertFalse(toXmlGenerator0.canWriteObjectId());
      assertEquals(0, toXmlGenerator0.getHighestEscapedChar());
      assertEquals((-1), toXmlGenerator0.getOutputBuffered());
      assertFalse(toXmlGenerator0.canWriteBinaryNatively());
      assertTrue(toXmlGenerator0.canWriteFormattedNumbers());
      assertTrue(toXmlGenerator0.inRoot());
      assertFalse(toXmlGenerator0.isClosed());
      assertEquals((-697), toXmlGenerator0.getFeatureMask());
      assertTrue(toXmlGenerator0.canOmitFields());
      assertEquals(3, toXmlGenerator0.getFormatFeatures());
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      
      toXmlGenerator0.close();
      assertEquals("<R^`/lY></R^`/lY>", byteArrayOutputStream0.toString());
      assertEquals(17, byteArrayOutputStream0.size());
      assertFalse(writerConfig0.willValidateAttributes());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertTrue(writerConfig0.willEscapeCr());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willValidateNames());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertTrue(writerConfig0.willValidateStructure());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.willValidateContent());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertFalse(writerConfig0.willFixContent());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertEquals(1, asciiXmlWriter0.getRow());
      assertEquals("1.0", nonNsStreamWriter0.getXmlVersion());
      assertEquals("", nonNsStreamWriter0.getEncoding());
      assertNull(nonNsStreamWriter0.getBaseUri());
      assertEquals(0, nonNsStreamWriter0.getAttributeCount());
      assertNull(iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertFalse(toXmlGenerator0.canWriteTypeId());
      assertTrue(toXmlGenerator0.isClosed());
      assertFalse(toXmlGenerator0.canWriteObjectId());
      assertEquals(0, toXmlGenerator0.getHighestEscapedChar());
      assertEquals((-1), toXmlGenerator0.getOutputBuffered());
      assertFalse(toXmlGenerator0.canWriteBinaryNatively());
      assertTrue(toXmlGenerator0.canWriteFormattedNumbers());
      assertTrue(toXmlGenerator0.inRoot());
      assertEquals((-697), toXmlGenerator0.getFeatureMask());
      assertTrue(toXmlGenerator0.canOmitFields());
      assertEquals(3, toXmlGenerator0.getFormatFeatures());
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      
      ToXmlGenerator toXmlGenerator1 = toXmlGenerator0.configure(toXmlGenerator_Feature0, false);
      assertNotNull(toXmlGenerator1);
      assertSame(toXmlGenerator0, toXmlGenerator1);
      assertSame(toXmlGenerator1, toXmlGenerator0);
      assertEquals("<R^`/lY></R^`/lY>", byteArrayOutputStream0.toString());
      assertEquals(17, byteArrayOutputStream0.size());
      assertFalse(writerConfig0.willValidateAttributes());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertTrue(writerConfig0.willEscapeCr());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willValidateNames());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertTrue(writerConfig0.willValidateStructure());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.willValidateContent());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertFalse(writerConfig0.willFixContent());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertEquals(1, asciiXmlWriter0.getRow());
      assertEquals("1.0", nonNsStreamWriter0.getXmlVersion());
      assertEquals("", nonNsStreamWriter0.getEncoding());
      assertNull(nonNsStreamWriter0.getBaseUri());
      assertEquals(0, nonNsStreamWriter0.getAttributeCount());
      assertNull(iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertFalse(toXmlGenerator0.canWriteTypeId());
      assertTrue(toXmlGenerator0.isClosed());
      assertFalse(toXmlGenerator0.canWriteObjectId());
      assertEquals(0, toXmlGenerator0.getHighestEscapedChar());
      assertEquals((-1), toXmlGenerator0.getOutputBuffered());
      assertFalse(toXmlGenerator0.canWriteBinaryNatively());
      assertTrue(toXmlGenerator0.canWriteFormattedNumbers());
      assertTrue(toXmlGenerator0.inRoot());
      assertEquals(1, toXmlGenerator0.getFormatFeatures());
      assertEquals((-697), toXmlGenerator0.getFeatureMask());
      assertTrue(toXmlGenerator0.canOmitFields());
      assertEquals(1, toXmlGenerator1.getFormatFeatures());
      assertFalse(toXmlGenerator1.canWriteBinaryNatively());
      assertEquals((-697), toXmlGenerator1.getFeatureMask());
      assertTrue(toXmlGenerator1.canOmitFields());
      assertTrue(toXmlGenerator1.inRoot());
      assertFalse(toXmlGenerator1.canWriteObjectId());
      assertEquals((-1), toXmlGenerator1.getOutputBuffered());
      assertFalse(toXmlGenerator1.canWriteTypeId());
      assertTrue(toXmlGenerator1.isClosed());
      assertTrue(toXmlGenerator1.canWriteFormattedNumbers());
      assertEquals(0, toXmlGenerator1.getHighestEscapedChar());
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertNotNull(bufferRecycler0);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      assertNotNull(iOContext0);
      assertNull(iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      
      WriterConfig writerConfig0 = WriterConfig.createJ2MEDefaults();
      assertNotNull(writerConfig0);
      assertTrue(writerConfig0.willValidateStructure());
      assertFalse(writerConfig0.willValidateNames());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willValidateAttributes());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertTrue(writerConfig0.willEscapeCr());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertTrue(writerConfig0.willValidateContent());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      
      AsciiXmlWriter asciiXmlWriter0 = new AsciiXmlWriter((OutputStream) null, writerConfig0, false);
      assertNotNull(asciiXmlWriter0);
      assertTrue(writerConfig0.willValidateStructure());
      assertFalse(writerConfig0.willValidateNames());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willValidateAttributes());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertTrue(writerConfig0.willEscapeCr());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertTrue(writerConfig0.willValidateContent());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertEquals(1, asciiXmlWriter0.getRow());
      
      NonNsStreamWriter nonNsStreamWriter0 = new NonNsStreamWriter(asciiXmlWriter0, "cOkF~y.\u0000n", writerConfig0);
      assertNotNull(nonNsStreamWriter0);
      assertTrue(writerConfig0.willValidateStructure());
      assertFalse(writerConfig0.willValidateNames());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willValidateAttributes());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertTrue(writerConfig0.willEscapeCr());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertTrue(writerConfig0.willValidateContent());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertEquals(1, asciiXmlWriter0.getRow());
      assertEquals(0, nonNsStreamWriter0.getAttributeCount());
      assertEquals("1.0", nonNsStreamWriter0.getXmlVersion());
      assertNull(nonNsStreamWriter0.getBaseUri());
      assertEquals("cOkF~y.\u0000n", nonNsStreamWriter0.getEncoding());
      
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 0, 0, (ObjectCodec) null, nonNsStreamWriter0);
      assertNotNull(toXmlGenerator0);
      assertNull(iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertTrue(writerConfig0.willValidateStructure());
      assertFalse(writerConfig0.willValidateNames());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willValidateAttributes());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertTrue(writerConfig0.willEscapeCr());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertTrue(writerConfig0.willValidateContent());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertEquals(1, asciiXmlWriter0.getRow());
      assertEquals(0, nonNsStreamWriter0.getAttributeCount());
      assertEquals("1.0", nonNsStreamWriter0.getXmlVersion());
      assertNull(nonNsStreamWriter0.getBaseUri());
      assertEquals("cOkF~y.\u0000n", nonNsStreamWriter0.getEncoding());
      assertFalse(toXmlGenerator0.canWriteBinaryNatively());
      assertTrue(toXmlGenerator0.canOmitFields());
      assertTrue(toXmlGenerator0.inRoot());
      assertTrue(toXmlGenerator0.canWriteFormattedNumbers());
      assertFalse(toXmlGenerator0.canWriteTypeId());
      assertEquals((-1), toXmlGenerator0.getOutputBuffered());
      assertEquals(0, toXmlGenerator0.getHighestEscapedChar());
      assertFalse(toXmlGenerator0.isClosed());
      assertEquals(0, toXmlGenerator0.getFeatureMask());
      assertEquals(0, toXmlGenerator0.getFormatFeatures());
      assertFalse(toXmlGenerator0.canWriteObjectId());
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      
      ToXmlGenerator.Feature toXmlGenerator_Feature0 = ToXmlGenerator.Feature.WRITE_XML_DECLARATION;
      ToXmlGenerator toXmlGenerator1 = toXmlGenerator0.configure(toXmlGenerator_Feature0, false);
      assertNotNull(toXmlGenerator1);
      assertSame(toXmlGenerator0, toXmlGenerator1);
      assertSame(toXmlGenerator1, toXmlGenerator0);
      assertNull(iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertTrue(writerConfig0.willValidateStructure());
      assertFalse(writerConfig0.willValidateNames());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willValidateAttributes());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertTrue(writerConfig0.willEscapeCr());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertTrue(writerConfig0.willValidateContent());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertEquals(1, asciiXmlWriter0.getRow());
      assertEquals(0, nonNsStreamWriter0.getAttributeCount());
      assertEquals("1.0", nonNsStreamWriter0.getXmlVersion());
      assertNull(nonNsStreamWriter0.getBaseUri());
      assertEquals("cOkF~y.\u0000n", nonNsStreamWriter0.getEncoding());
      assertFalse(toXmlGenerator0.canWriteBinaryNatively());
      assertTrue(toXmlGenerator0.canOmitFields());
      assertTrue(toXmlGenerator0.inRoot());
      assertTrue(toXmlGenerator0.canWriteFormattedNumbers());
      assertFalse(toXmlGenerator0.canWriteTypeId());
      assertEquals((-1), toXmlGenerator0.getOutputBuffered());
      assertEquals(0, toXmlGenerator0.getHighestEscapedChar());
      assertFalse(toXmlGenerator0.isClosed());
      assertEquals(0, toXmlGenerator0.getFeatureMask());
      assertEquals(0, toXmlGenerator0.getFormatFeatures());
      assertFalse(toXmlGenerator0.canWriteObjectId());
      assertFalse(toXmlGenerator1.canWriteTypeId());
      assertFalse(toXmlGenerator1.canWriteObjectId());
      assertEquals(0, toXmlGenerator1.getHighestEscapedChar());
      assertEquals(0, toXmlGenerator1.getFeatureMask());
      assertEquals((-1), toXmlGenerator1.getOutputBuffered());
      assertFalse(toXmlGenerator1.canWriteBinaryNatively());
      assertTrue(toXmlGenerator1.canWriteFormattedNumbers());
      assertEquals(0, toXmlGenerator1.getFormatFeatures());
      assertTrue(toXmlGenerator1.inRoot());
      assertFalse(toXmlGenerator1.isClosed());
      assertTrue(toXmlGenerator1.canOmitFields());
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertNotNull(bufferRecycler0);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      
      WriterConfig writerConfig0 = WriterConfig.createJ2MEDefaults();
      assertNotNull(writerConfig0);
      assertTrue(writerConfig0.willValidateContent());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.willValidateStructure());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willValidateNames());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertTrue(writerConfig0.willEscapeCr());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willValidateAttributes());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      
      IOContext iOContext0 = new IOContext(bufferRecycler0, writerConfig0, false);
      assertNotNull(iOContext0);
      assertTrue(writerConfig0.willValidateContent());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.willValidateStructure());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willValidateNames());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertTrue(writerConfig0.willEscapeCr());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willValidateAttributes());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertNull(iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      
      NonNsStreamWriter nonNsStreamWriter0 = new NonNsStreamWriter((XmlWriter) null, "|XdIGiKH%{.so", writerConfig0);
      assertNotNull(nonNsStreamWriter0);
      assertTrue(writerConfig0.willValidateContent());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.willValidateStructure());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willValidateNames());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertTrue(writerConfig0.willEscapeCr());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willValidateAttributes());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertEquals(0, nonNsStreamWriter0.getAttributeCount());
      assertNull(nonNsStreamWriter0.getBaseUri());
      assertEquals("|XdIGiKH%{.so", nonNsStreamWriter0.getEncoding());
      assertEquals("1.0", nonNsStreamWriter0.getXmlVersion());
      
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 2, 2, objectMapper0, nonNsStreamWriter0);
      assertNotNull(toXmlGenerator0);
      assertTrue(writerConfig0.willValidateContent());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.willValidateStructure());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willValidateNames());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertTrue(writerConfig0.willEscapeCr());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willValidateAttributes());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertNull(iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertEquals(0, nonNsStreamWriter0.getAttributeCount());
      assertNull(nonNsStreamWriter0.getBaseUri());
      assertEquals("|XdIGiKH%{.so", nonNsStreamWriter0.getEncoding());
      assertEquals("1.0", nonNsStreamWriter0.getXmlVersion());
      assertEquals(2, toXmlGenerator0.getFormatFeatures());
      assertFalse(toXmlGenerator0.canWriteBinaryNatively());
      assertFalse(toXmlGenerator0.isClosed());
      assertTrue(toXmlGenerator0.canOmitFields());
      assertTrue(toXmlGenerator0.inRoot());
      assertEquals((-1), toXmlGenerator0.getOutputBuffered());
      assertEquals(2, toXmlGenerator0.getFeatureMask());
      assertFalse(toXmlGenerator0.canWriteTypeId());
      assertFalse(toXmlGenerator0.canWriteObjectId());
      assertTrue(toXmlGenerator0.canWriteFormattedNumbers());
      assertEquals(0, toXmlGenerator0.getHighestEscapedChar());
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      
      boolean boolean0 = toXmlGenerator0.checkNextIsUnwrapped();
      assertTrue(writerConfig0.willValidateContent());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.willValidateStructure());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willValidateNames());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertTrue(writerConfig0.willEscapeCr());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willValidateAttributes());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertNull(iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertEquals(0, nonNsStreamWriter0.getAttributeCount());
      assertNull(nonNsStreamWriter0.getBaseUri());
      assertEquals("|XdIGiKH%{.so", nonNsStreamWriter0.getEncoding());
      assertEquals("1.0", nonNsStreamWriter0.getXmlVersion());
      assertEquals(2, toXmlGenerator0.getFormatFeatures());
      assertFalse(toXmlGenerator0.canWriteBinaryNatively());
      assertFalse(toXmlGenerator0.isClosed());
      assertTrue(toXmlGenerator0.canOmitFields());
      assertTrue(toXmlGenerator0.inRoot());
      assertEquals((-1), toXmlGenerator0.getOutputBuffered());
      assertEquals(2, toXmlGenerator0.getFeatureMask());
      assertFalse(toXmlGenerator0.canWriteTypeId());
      assertFalse(toXmlGenerator0.canWriteObjectId());
      assertTrue(toXmlGenerator0.canWriteFormattedNumbers());
      assertEquals(0, toXmlGenerator0.getHighestEscapedChar());
      assertFalse(boolean0);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertNotNull(bufferRecycler0);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      assertNotNull(iOContext0);
      assertFalse(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      
      WriterConfig writerConfig0 = WriterConfig.createJ2MEDefaults();
      assertNotNull(writerConfig0);
      assertTrue(writerConfig0.willValidateStructure());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertFalse(writerConfig0.willValidateNames());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertTrue(writerConfig0.willEscapeCr());
      assertFalse(writerConfig0.willValidateAttributes());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.willValidateContent());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willFixContent());
      
      AsciiXmlWriter asciiXmlWriter0 = new AsciiXmlWriter((OutputStream) null, writerConfig0, false);
      assertNotNull(asciiXmlWriter0);
      assertTrue(writerConfig0.willValidateStructure());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertFalse(writerConfig0.willValidateNames());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertTrue(writerConfig0.willEscapeCr());
      assertFalse(writerConfig0.willValidateAttributes());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.willValidateContent());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertEquals(1, asciiXmlWriter0.getRow());
      
      NonNsStreamWriter nonNsStreamWriter0 = new NonNsStreamWriter(asciiXmlWriter0, "cOkF~y.\u0000n", writerConfig0);
      assertNotNull(nonNsStreamWriter0);
      assertTrue(writerConfig0.willValidateStructure());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertFalse(writerConfig0.willValidateNames());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertTrue(writerConfig0.willEscapeCr());
      assertFalse(writerConfig0.willValidateAttributes());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.willValidateContent());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertEquals(1, asciiXmlWriter0.getRow());
      assertEquals("1.0", nonNsStreamWriter0.getXmlVersion());
      assertEquals("cOkF~y.\u0000n", nonNsStreamWriter0.getEncoding());
      assertNull(nonNsStreamWriter0.getBaseUri());
      assertEquals(0, nonNsStreamWriter0.getAttributeCount());
      
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 0, 0, (ObjectCodec) null, nonNsStreamWriter0);
      assertNotNull(toXmlGenerator0);
      assertFalse(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertTrue(writerConfig0.willValidateStructure());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertFalse(writerConfig0.willValidateNames());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertTrue(writerConfig0.willEscapeCr());
      assertFalse(writerConfig0.willValidateAttributes());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.willValidateContent());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertEquals(1, asciiXmlWriter0.getRow());
      assertEquals("1.0", nonNsStreamWriter0.getXmlVersion());
      assertEquals("cOkF~y.\u0000n", nonNsStreamWriter0.getEncoding());
      assertNull(nonNsStreamWriter0.getBaseUri());
      assertEquals(0, nonNsStreamWriter0.getAttributeCount());
      assertFalse(toXmlGenerator0.canWriteBinaryNatively());
      assertTrue(toXmlGenerator0.canWriteFormattedNumbers());
      assertEquals(0, toXmlGenerator0.getFormatFeatures());
      assertTrue(toXmlGenerator0.inRoot());
      assertFalse(toXmlGenerator0.isClosed());
      assertTrue(toXmlGenerator0.canOmitFields());
      assertFalse(toXmlGenerator0.canWriteTypeId());
      assertFalse(toXmlGenerator0.canWriteObjectId());
      assertEquals(0, toXmlGenerator0.getFeatureMask());
      assertEquals((-1), toXmlGenerator0.getOutputBuffered());
      assertEquals(0, toXmlGenerator0.getHighestEscapedChar());
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      
      PrettyPrinter prettyPrinter0 = toXmlGenerator0._constructDefaultPrettyPrinter();
      assertNotNull(prettyPrinter0);
      assertFalse(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertTrue(writerConfig0.willValidateStructure());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertFalse(writerConfig0.willValidateNames());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertTrue(writerConfig0.willEscapeCr());
      assertFalse(writerConfig0.willValidateAttributes());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.willValidateContent());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertEquals(1, asciiXmlWriter0.getRow());
      assertEquals("1.0", nonNsStreamWriter0.getXmlVersion());
      assertEquals("cOkF~y.\u0000n", nonNsStreamWriter0.getEncoding());
      assertNull(nonNsStreamWriter0.getBaseUri());
      assertEquals(0, nonNsStreamWriter0.getAttributeCount());
      assertFalse(toXmlGenerator0.canWriteBinaryNatively());
      assertTrue(toXmlGenerator0.canWriteFormattedNumbers());
      assertEquals(0, toXmlGenerator0.getFormatFeatures());
      assertTrue(toXmlGenerator0.inRoot());
      assertFalse(toXmlGenerator0.isClosed());
      assertTrue(toXmlGenerator0.canOmitFields());
      assertFalse(toXmlGenerator0.canWriteTypeId());
      assertFalse(toXmlGenerator0.canWriteObjectId());
      assertEquals(0, toXmlGenerator0.getFeatureMask());
      assertEquals((-1), toXmlGenerator0.getOutputBuffered());
      assertEquals(0, toXmlGenerator0.getHighestEscapedChar());
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertNotNull(bufferRecycler0);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      assertNotNull(iOContext0);
      assertFalse(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      assertNotNull(writerConfig0);
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertFalse(writerConfig0.willValidateNames());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertTrue(writerConfig0.willValidateContent());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertFalse(writerConfig0.willValidateAttributes());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertTrue(writerConfig0.willValidateStructure());
      assertTrue(writerConfig0.willEscapeCr());
      
      ISOLatin1XmlWriter iSOLatin1XmlWriter0 = new ISOLatin1XmlWriter((OutputStream) null, writerConfig0, false);
      assertNotNull(iSOLatin1XmlWriter0);
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertFalse(writerConfig0.willValidateNames());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertTrue(writerConfig0.willValidateContent());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertFalse(writerConfig0.willValidateAttributes());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertTrue(writerConfig0.willValidateStructure());
      assertTrue(writerConfig0.willEscapeCr());
      assertEquals(1, iSOLatin1XmlWriter0.getRow());
      
      SimpleNsStreamWriter simpleNsStreamWriter0 = new SimpleNsStreamWriter(iSOLatin1XmlWriter0, "", writerConfig0);
      assertNotNull(simpleNsStreamWriter0);
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertFalse(writerConfig0.willValidateNames());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertTrue(writerConfig0.willValidateContent());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertFalse(writerConfig0.willValidateAttributes());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertTrue(writerConfig0.willValidateStructure());
      assertTrue(writerConfig0.willEscapeCr());
      assertEquals(1, iSOLatin1XmlWriter0.getRow());
      assertEquals("1.0", simpleNsStreamWriter0.getXmlVersion());
      assertEquals("", simpleNsStreamWriter0.getEncoding());
      assertNull(simpleNsStreamWriter0.getBaseUri());
      assertEquals(0, simpleNsStreamWriter0.getAttributeCount());
      
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 0, 0, objectMapper0, simpleNsStreamWriter0);
      assertNotNull(toXmlGenerator0);
      assertFalse(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertFalse(writerConfig0.willValidateNames());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertTrue(writerConfig0.willValidateContent());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertFalse(writerConfig0.willValidateAttributes());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertTrue(writerConfig0.willValidateStructure());
      assertTrue(writerConfig0.willEscapeCr());
      assertEquals(1, iSOLatin1XmlWriter0.getRow());
      assertEquals("1.0", simpleNsStreamWriter0.getXmlVersion());
      assertEquals("", simpleNsStreamWriter0.getEncoding());
      assertNull(simpleNsStreamWriter0.getBaseUri());
      assertEquals(0, simpleNsStreamWriter0.getAttributeCount());
      assertTrue(toXmlGenerator0.inRoot());
      assertTrue(toXmlGenerator0.canWriteFormattedNumbers());
      assertFalse(toXmlGenerator0.canWriteBinaryNatively());
      assertEquals(0, toXmlGenerator0.getFeatureMask());
      assertFalse(toXmlGenerator0.canWriteObjectId());
      assertEquals(0, toXmlGenerator0.getHighestEscapedChar());
      assertEquals((-1), toXmlGenerator0.getOutputBuffered());
      assertEquals(0, toXmlGenerator0.getFormatFeatures());
      assertFalse(toXmlGenerator0.canWriteTypeId());
      assertFalse(toXmlGenerator0.isClosed());
      assertTrue(toXmlGenerator0.canOmitFields());
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      
      QName qName0 = new QName("", "");
      assertNotNull(qName0);
      
      toXmlGenerator0.startWrappedValue(qName0, qName0);
      assertFalse(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertFalse(writerConfig0.willValidateNames());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertTrue(writerConfig0.willValidateContent());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertFalse(writerConfig0.willValidateAttributes());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertTrue(writerConfig0.willValidateStructure());
      assertTrue(writerConfig0.willEscapeCr());
      assertEquals(1, iSOLatin1XmlWriter0.getRow());
      assertEquals("1.0", simpleNsStreamWriter0.getXmlVersion());
      assertEquals("", simpleNsStreamWriter0.getEncoding());
      assertNull(simpleNsStreamWriter0.getBaseUri());
      assertEquals(0, simpleNsStreamWriter0.getAttributeCount());
      assertTrue(toXmlGenerator0.inRoot());
      assertTrue(toXmlGenerator0.canWriteFormattedNumbers());
      assertFalse(toXmlGenerator0.canWriteBinaryNatively());
      assertEquals(0, toXmlGenerator0.getFeatureMask());
      assertFalse(toXmlGenerator0.canWriteObjectId());
      assertEquals(0, toXmlGenerator0.getHighestEscapedChar());
      assertEquals((-1), toXmlGenerator0.getOutputBuffered());
      assertEquals(0, toXmlGenerator0.getFormatFeatures());
      assertFalse(toXmlGenerator0.canWriteTypeId());
      assertFalse(toXmlGenerator0.isClosed());
      assertTrue(toXmlGenerator0.canOmitFields());
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      
      char[] charArray0 = new char[0];
      // Undeclared exception!
//      try { 
        toXmlGenerator0.writeString(charArray0, 0, 1);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 0
//         //
//         verifyException("com.ctc.wstx.sw.ISOLatin1XmlWriter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertNotNull(bufferRecycler0);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      assertNotNull(iOContext0);
      assertNull(iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      assertNotNull(writerConfig0);
      assertTrue(writerConfig0.willValidateStructure());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertFalse(writerConfig0.willValidateNames());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertTrue(writerConfig0.willEscapeCr());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertFalse(writerConfig0.willValidateAttributes());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertFalse(writerConfig0.willFixContent());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.willValidateContent());
      
      ISOLatin1XmlWriter iSOLatin1XmlWriter0 = new ISOLatin1XmlWriter((OutputStream) null, writerConfig0, false);
      assertNotNull(iSOLatin1XmlWriter0);
      assertTrue(writerConfig0.willValidateStructure());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertFalse(writerConfig0.willValidateNames());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertTrue(writerConfig0.willEscapeCr());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertFalse(writerConfig0.willValidateAttributes());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertFalse(writerConfig0.willFixContent());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.willValidateContent());
      assertEquals(1, iSOLatin1XmlWriter0.getRow());
      
      SimpleNsStreamWriter simpleNsStreamWriter0 = new SimpleNsStreamWriter(iSOLatin1XmlWriter0, "", writerConfig0);
      assertNotNull(simpleNsStreamWriter0);
      assertTrue(writerConfig0.willValidateStructure());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertFalse(writerConfig0.willValidateNames());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertTrue(writerConfig0.willEscapeCr());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertFalse(writerConfig0.willValidateAttributes());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertFalse(writerConfig0.willFixContent());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.willValidateContent());
      assertEquals(1, iSOLatin1XmlWriter0.getRow());
      assertEquals("1.0", simpleNsStreamWriter0.getXmlVersion());
      assertEquals(0, simpleNsStreamWriter0.getAttributeCount());
      assertNull(simpleNsStreamWriter0.getBaseUri());
      assertEquals("", simpleNsStreamWriter0.getEncoding());
      
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 0, 0, objectMapper0, simpleNsStreamWriter0);
      assertNotNull(toXmlGenerator0);
      assertNull(iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertTrue(writerConfig0.willValidateStructure());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertFalse(writerConfig0.willValidateNames());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertTrue(writerConfig0.willEscapeCr());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertFalse(writerConfig0.willValidateAttributes());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertFalse(writerConfig0.willFixContent());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.willValidateContent());
      assertEquals(1, iSOLatin1XmlWriter0.getRow());
      assertEquals("1.0", simpleNsStreamWriter0.getXmlVersion());
      assertEquals(0, simpleNsStreamWriter0.getAttributeCount());
      assertNull(simpleNsStreamWriter0.getBaseUri());
      assertEquals("", simpleNsStreamWriter0.getEncoding());
      assertEquals(0, toXmlGenerator0.getFormatFeatures());
      assertFalse(toXmlGenerator0.isClosed());
      assertEquals(0, toXmlGenerator0.getHighestEscapedChar());
      assertTrue(toXmlGenerator0.canWriteFormattedNumbers());
      assertFalse(toXmlGenerator0.canWriteTypeId());
      assertFalse(toXmlGenerator0.canWriteObjectId());
      assertTrue(toXmlGenerator0.inRoot());
      assertEquals(0, toXmlGenerator0.getFeatureMask());
      assertEquals((-1), toXmlGenerator0.getOutputBuffered());
      assertTrue(toXmlGenerator0.canOmitFields());
      assertFalse(toXmlGenerator0.canWriteBinaryNatively());
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      
      QName qName0 = new QName("", "");
      assertNotNull(qName0);
      
      toXmlGenerator0.startWrappedValue(qName0, qName0);
      assertNull(iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertTrue(writerConfig0.willValidateStructure());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertFalse(writerConfig0.willValidateNames());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertTrue(writerConfig0.willEscapeCr());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertFalse(writerConfig0.willValidateAttributes());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertFalse(writerConfig0.willFixContent());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.willValidateContent());
      assertEquals(1, iSOLatin1XmlWriter0.getRow());
      assertEquals("1.0", simpleNsStreamWriter0.getXmlVersion());
      assertEquals(0, simpleNsStreamWriter0.getAttributeCount());
      assertNull(simpleNsStreamWriter0.getBaseUri());
      assertEquals("", simpleNsStreamWriter0.getEncoding());
      assertEquals(0, toXmlGenerator0.getFormatFeatures());
      assertFalse(toXmlGenerator0.isClosed());
      assertEquals(0, toXmlGenerator0.getHighestEscapedChar());
      assertTrue(toXmlGenerator0.canWriteFormattedNumbers());
      assertFalse(toXmlGenerator0.canWriteTypeId());
      assertFalse(toXmlGenerator0.canWriteObjectId());
      assertTrue(toXmlGenerator0.inRoot());
      assertEquals(0, toXmlGenerator0.getFeatureMask());
      assertEquals((-1), toXmlGenerator0.getOutputBuffered());
      assertTrue(toXmlGenerator0.canOmitFields());
      assertFalse(toXmlGenerator0.canWriteBinaryNatively());
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      
      toXmlGenerator0.writeStartObject();
      assertNull(iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertTrue(writerConfig0.willValidateStructure());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertFalse(writerConfig0.willValidateNames());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertTrue(writerConfig0.willEscapeCr());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertFalse(writerConfig0.willValidateAttributes());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertFalse(writerConfig0.willFixContent());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.willValidateContent());
      assertEquals(1, iSOLatin1XmlWriter0.getRow());
      assertEquals("1.0", simpleNsStreamWriter0.getXmlVersion());
      assertEquals(0, simpleNsStreamWriter0.getAttributeCount());
      assertNull(simpleNsStreamWriter0.getBaseUri());
      assertEquals("", simpleNsStreamWriter0.getEncoding());
      assertEquals(0, toXmlGenerator0.getFormatFeatures());
      assertFalse(toXmlGenerator0.isClosed());
      assertEquals(0, toXmlGenerator0.getHighestEscapedChar());
      assertFalse(toXmlGenerator0.inRoot());
      assertTrue(toXmlGenerator0.canWriteFormattedNumbers());
      assertFalse(toXmlGenerator0.canWriteTypeId());
      assertFalse(toXmlGenerator0.canWriteObjectId());
      assertEquals(0, toXmlGenerator0.getFeatureMask());
      assertEquals((-1), toXmlGenerator0.getOutputBuffered());
      assertTrue(toXmlGenerator0.canOmitFields());
      assertFalse(toXmlGenerator0.canWriteBinaryNatively());
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      
//      try { 
        toXmlGenerator0.writeString("LDOXL0");
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Can not write String value, expecting field name
//         //
//         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertNotNull(bufferRecycler0);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      assertNotNull(iOContext0);
      assertNull(iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      
      WriterConfig writerConfig0 = WriterConfig.createJ2MEDefaults();
      assertNotNull(writerConfig0);
      assertTrue(writerConfig0.willSupportNamespaces());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertFalse(writerConfig0.willValidateNames());
      assertTrue(writerConfig0.willValidateContent());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.willValidateStructure());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willValidateAttributes());
      assertTrue(writerConfig0.willEscapeCr());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertFalse(writerConfig0.willOutputCDataAsText());
      
      ISOLatin1XmlWriter iSOLatin1XmlWriter0 = new ISOLatin1XmlWriter((OutputStream) null, writerConfig0, false);
      assertNotNull(iSOLatin1XmlWriter0);
      assertTrue(writerConfig0.willSupportNamespaces());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertFalse(writerConfig0.willValidateNames());
      assertTrue(writerConfig0.willValidateContent());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.willValidateStructure());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willValidateAttributes());
      assertTrue(writerConfig0.willEscapeCr());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertEquals(1, iSOLatin1XmlWriter0.getRow());
      
      SimpleNsStreamWriter simpleNsStreamWriter0 = new SimpleNsStreamWriter(iSOLatin1XmlWriter0, "", writerConfig0);
      assertNotNull(simpleNsStreamWriter0);
      assertTrue(writerConfig0.willSupportNamespaces());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertFalse(writerConfig0.willValidateNames());
      assertTrue(writerConfig0.willValidateContent());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.willValidateStructure());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willValidateAttributes());
      assertTrue(writerConfig0.willEscapeCr());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertEquals(1, iSOLatin1XmlWriter0.getRow());
      assertEquals("", simpleNsStreamWriter0.getEncoding());
      assertNull(simpleNsStreamWriter0.getBaseUri());
      assertEquals(0, simpleNsStreamWriter0.getAttributeCount());
      assertEquals("1.0", simpleNsStreamWriter0.getXmlVersion());
      
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 0, 0, objectMapper0, simpleNsStreamWriter0);
      assertNotNull(toXmlGenerator0);
      assertNull(iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertFalse(writerConfig0.willValidateNames());
      assertTrue(writerConfig0.willValidateContent());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.willValidateStructure());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willValidateAttributes());
      assertTrue(writerConfig0.willEscapeCr());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertEquals(1, iSOLatin1XmlWriter0.getRow());
      assertEquals("", simpleNsStreamWriter0.getEncoding());
      assertNull(simpleNsStreamWriter0.getBaseUri());
      assertEquals(0, simpleNsStreamWriter0.getAttributeCount());
      assertEquals("1.0", simpleNsStreamWriter0.getXmlVersion());
      assertEquals(0, toXmlGenerator0.getFormatFeatures());
      assertFalse(toXmlGenerator0.canWriteBinaryNatively());
      assertTrue(toXmlGenerator0.canOmitFields());
      assertFalse(toXmlGenerator0.isClosed());
      assertTrue(toXmlGenerator0.inRoot());
      assertEquals(0, toXmlGenerator0.getFeatureMask());
      assertEquals((-1), toXmlGenerator0.getOutputBuffered());
      assertFalse(toXmlGenerator0.canWriteTypeId());
      assertFalse(toXmlGenerator0.canWriteObjectId());
      assertTrue(toXmlGenerator0.canWriteFormattedNumbers());
      assertEquals(0, toXmlGenerator0.getHighestEscapedChar());
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      
      // Undeclared exception!
//      try { 
        toXmlGenerator0.writeString((SerializableString) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertNotNull(bufferRecycler0);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      assertNotNull(iOContext0);
      assertFalse(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      
      WriterConfig writerConfig0 = WriterConfig.createJ2MEDefaults();
      assertNotNull(writerConfig0);
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertFalse(writerConfig0.willValidateNames());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertTrue(writerConfig0.willValidateStructure());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertTrue(writerConfig0.willValidateContent());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertFalse(writerConfig0.willValidateAttributes());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertTrue(writerConfig0.willEscapeCr());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertFalse(writerConfig0.willAutoCloseOutput());
      
      ISOLatin1XmlWriter iSOLatin1XmlWriter0 = new ISOLatin1XmlWriter((OutputStream) null, writerConfig0, false);
      assertNotNull(iSOLatin1XmlWriter0);
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertFalse(writerConfig0.willValidateNames());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertTrue(writerConfig0.willValidateStructure());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertTrue(writerConfig0.willValidateContent());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertFalse(writerConfig0.willValidateAttributes());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertTrue(writerConfig0.willEscapeCr());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertEquals(1, iSOLatin1XmlWriter0.getRow());
      
      SimpleNsStreamWriter simpleNsStreamWriter0 = new SimpleNsStreamWriter(iSOLatin1XmlWriter0, "", writerConfig0);
      assertNotNull(simpleNsStreamWriter0);
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertFalse(writerConfig0.willValidateNames());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertTrue(writerConfig0.willValidateStructure());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertTrue(writerConfig0.willValidateContent());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertFalse(writerConfig0.willValidateAttributes());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertTrue(writerConfig0.willEscapeCr());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertEquals(1, iSOLatin1XmlWriter0.getRow());
      assertEquals("", simpleNsStreamWriter0.getEncoding());
      assertEquals("1.0", simpleNsStreamWriter0.getXmlVersion());
      assertEquals(0, simpleNsStreamWriter0.getAttributeCount());
      assertNull(simpleNsStreamWriter0.getBaseUri());
      
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 0, 0, objectMapper0, simpleNsStreamWriter0);
      assertNotNull(toXmlGenerator0);
      assertFalse(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertFalse(writerConfig0.willValidateNames());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertTrue(writerConfig0.willValidateStructure());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertTrue(writerConfig0.willValidateContent());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertFalse(writerConfig0.willValidateAttributes());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertTrue(writerConfig0.willEscapeCr());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertEquals(1, iSOLatin1XmlWriter0.getRow());
      assertEquals("", simpleNsStreamWriter0.getEncoding());
      assertEquals("1.0", simpleNsStreamWriter0.getXmlVersion());
      assertEquals(0, simpleNsStreamWriter0.getAttributeCount());
      assertNull(simpleNsStreamWriter0.getBaseUri());
      assertEquals(0, toXmlGenerator0.getFormatFeatures());
      assertTrue(toXmlGenerator0.canOmitFields());
      assertTrue(toXmlGenerator0.canWriteFormattedNumbers());
      assertFalse(toXmlGenerator0.isClosed());
      assertFalse(toXmlGenerator0.canWriteTypeId());
      assertFalse(toXmlGenerator0.canWriteObjectId());
      assertTrue(toXmlGenerator0.inRoot());
      assertEquals(0, toXmlGenerator0.getHighestEscapedChar());
      assertEquals((-1), toXmlGenerator0.getOutputBuffered());
      assertEquals(0, toXmlGenerator0.getFeatureMask());
      assertFalse(toXmlGenerator0.canWriteBinaryNatively());
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      
      QName qName0 = new QName("", "");
      assertNotNull(qName0);
      
      toXmlGenerator0.startWrappedValue(qName0, qName0);
      assertFalse(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertFalse(writerConfig0.willValidateNames());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertTrue(writerConfig0.willValidateStructure());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertTrue(writerConfig0.willValidateContent());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertFalse(writerConfig0.willValidateAttributes());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertTrue(writerConfig0.willEscapeCr());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertEquals(1, iSOLatin1XmlWriter0.getRow());
      assertEquals("", simpleNsStreamWriter0.getEncoding());
      assertEquals("1.0", simpleNsStreamWriter0.getXmlVersion());
      assertEquals(0, simpleNsStreamWriter0.getAttributeCount());
      assertNull(simpleNsStreamWriter0.getBaseUri());
      assertEquals(0, toXmlGenerator0.getFormatFeatures());
      assertTrue(toXmlGenerator0.canOmitFields());
      assertTrue(toXmlGenerator0.canWriteFormattedNumbers());
      assertFalse(toXmlGenerator0.isClosed());
      assertFalse(toXmlGenerator0.canWriteTypeId());
      assertFalse(toXmlGenerator0.canWriteObjectId());
      assertTrue(toXmlGenerator0.inRoot());
      assertEquals(0, toXmlGenerator0.getHighestEscapedChar());
      assertEquals((-1), toXmlGenerator0.getOutputBuffered());
      assertEquals(0, toXmlGenerator0.getFeatureMask());
      assertFalse(toXmlGenerator0.canWriteBinaryNatively());
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      
      toXmlGenerator0.writeStartObject();
      assertFalse(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertFalse(writerConfig0.willValidateNames());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertTrue(writerConfig0.willValidateStructure());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertTrue(writerConfig0.willValidateContent());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertFalse(writerConfig0.willValidateAttributes());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertTrue(writerConfig0.willEscapeCr());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertEquals(1, iSOLatin1XmlWriter0.getRow());
      assertEquals("", simpleNsStreamWriter0.getEncoding());
      assertEquals("1.0", simpleNsStreamWriter0.getXmlVersion());
      assertEquals(0, simpleNsStreamWriter0.getAttributeCount());
      assertNull(simpleNsStreamWriter0.getBaseUri());
      assertEquals(0, toXmlGenerator0.getFormatFeatures());
      assertFalse(toXmlGenerator0.inRoot());
      assertTrue(toXmlGenerator0.canOmitFields());
      assertTrue(toXmlGenerator0.canWriteFormattedNumbers());
      assertFalse(toXmlGenerator0.isClosed());
      assertFalse(toXmlGenerator0.canWriteTypeId());
      assertFalse(toXmlGenerator0.canWriteObjectId());
      assertEquals(0, toXmlGenerator0.getHighestEscapedChar());
      assertEquals((-1), toXmlGenerator0.getOutputBuffered());
      assertEquals(0, toXmlGenerator0.getFeatureMask());
      assertFalse(toXmlGenerator0.canWriteBinaryNatively());
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      
//      try { 
        toXmlGenerator0.writeStartObject();
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Can not start an object, expecting field name
//         //
//         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      
      WriterConfig writerConfig0 = WriterConfig.createJ2MEDefaults();
      assertNotNull(writerConfig0);
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertTrue(writerConfig0.willEscapeCr());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willValidateAttributes());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertTrue(writerConfig0.willValidateStructure());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertFalse(writerConfig0.willValidateNames());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertFalse(writerConfig0.willFixContent());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertTrue(writerConfig0.willValidateContent());
      assertEquals("woodstox", writerConfig0.getImplName());
      
      NonNsStreamWriter nonNsStreamWriter0 = new NonNsStreamWriter((XmlWriter) null, "V", writerConfig0);
      assertNotNull(nonNsStreamWriter0);
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertTrue(writerConfig0.willEscapeCr());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willValidateAttributes());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertTrue(writerConfig0.willValidateStructure());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertFalse(writerConfig0.willValidateNames());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertFalse(writerConfig0.willFixContent());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertTrue(writerConfig0.willValidateContent());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertEquals("1.0", nonNsStreamWriter0.getXmlVersion());
      assertNull(nonNsStreamWriter0.getBaseUri());
      assertEquals(0, nonNsStreamWriter0.getAttributeCount());
      assertEquals("V", nonNsStreamWriter0.getEncoding());
      
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator((IOContext) null, 2, 3, objectMapper0, nonNsStreamWriter0);
      assertNotNull(toXmlGenerator0);
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertTrue(writerConfig0.willEscapeCr());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willValidateAttributes());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertTrue(writerConfig0.willValidateStructure());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertFalse(writerConfig0.willValidateNames());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertFalse(writerConfig0.willFixContent());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertTrue(writerConfig0.willValidateContent());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertEquals("1.0", nonNsStreamWriter0.getXmlVersion());
      assertNull(nonNsStreamWriter0.getBaseUri());
      assertEquals(0, nonNsStreamWriter0.getAttributeCount());
      assertEquals("V", nonNsStreamWriter0.getEncoding());
      assertTrue(toXmlGenerator0.inRoot());
      assertTrue(toXmlGenerator0.canOmitFields());
      assertEquals((-1), toXmlGenerator0.getOutputBuffered());
      assertFalse(toXmlGenerator0.canWriteBinaryNatively());
      assertFalse(toXmlGenerator0.canWriteObjectId());
      assertEquals(2, toXmlGenerator0.getFeatureMask());
      assertEquals(0, toXmlGenerator0.getHighestEscapedChar());
      assertFalse(toXmlGenerator0.isClosed());
      assertEquals(3, toXmlGenerator0.getFormatFeatures());
      assertFalse(toXmlGenerator0.canWriteTypeId());
      assertTrue(toXmlGenerator0.canWriteFormattedNumbers());
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      
      // Undeclared exception!
//      try { 
        toXmlGenerator0.writeRepeatedFieldName();
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertNotNull(bufferRecycler0);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      assertNotNull(iOContext0);
      assertNull(iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      assertNotNull(writerConfig0);
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertFalse(writerConfig0.willValidateNames());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertFalse(writerConfig0.willValidateAttributes());
      assertTrue(writerConfig0.willValidateStructure());
      assertTrue(writerConfig0.willEscapeCr());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.willValidateContent());
      
      ISOLatin1XmlWriter iSOLatin1XmlWriter0 = new ISOLatin1XmlWriter((OutputStream) null, writerConfig0, false);
      assertNotNull(iSOLatin1XmlWriter0);
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertFalse(writerConfig0.willValidateNames());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertFalse(writerConfig0.willValidateAttributes());
      assertTrue(writerConfig0.willValidateStructure());
      assertTrue(writerConfig0.willEscapeCr());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.willValidateContent());
      assertEquals(1, iSOLatin1XmlWriter0.getRow());
      
      SimpleNsStreamWriter simpleNsStreamWriter0 = new SimpleNsStreamWriter(iSOLatin1XmlWriter0, "", writerConfig0);
      assertNotNull(simpleNsStreamWriter0);
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertFalse(writerConfig0.willValidateNames());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertFalse(writerConfig0.willValidateAttributes());
      assertTrue(writerConfig0.willValidateStructure());
      assertTrue(writerConfig0.willEscapeCr());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.willValidateContent());
      assertEquals(1, iSOLatin1XmlWriter0.getRow());
      assertEquals("", simpleNsStreamWriter0.getEncoding());
      assertEquals("1.0", simpleNsStreamWriter0.getXmlVersion());
      assertNull(simpleNsStreamWriter0.getBaseUri());
      assertEquals(0, simpleNsStreamWriter0.getAttributeCount());
      
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 0, 0, objectMapper0, simpleNsStreamWriter0);
      assertNotNull(toXmlGenerator0);
      assertNull(iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertFalse(writerConfig0.willValidateNames());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertFalse(writerConfig0.willValidateAttributes());
      assertTrue(writerConfig0.willValidateStructure());
      assertTrue(writerConfig0.willEscapeCr());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.willValidateContent());
      assertEquals(1, iSOLatin1XmlWriter0.getRow());
      assertEquals("", simpleNsStreamWriter0.getEncoding());
      assertEquals("1.0", simpleNsStreamWriter0.getXmlVersion());
      assertNull(simpleNsStreamWriter0.getBaseUri());
      assertEquals(0, simpleNsStreamWriter0.getAttributeCount());
      assertEquals(0, toXmlGenerator0.getFeatureMask());
      assertFalse(toXmlGenerator0.canWriteObjectId());
      assertFalse(toXmlGenerator0.canWriteTypeId());
      assertTrue(toXmlGenerator0.canOmitFields());
      assertFalse(toXmlGenerator0.isClosed());
      assertTrue(toXmlGenerator0.inRoot());
      assertEquals(0, toXmlGenerator0.getFormatFeatures());
      assertFalse(toXmlGenerator0.canWriteBinaryNatively());
      assertEquals((-1), toXmlGenerator0.getOutputBuffered());
      assertTrue(toXmlGenerator0.canWriteFormattedNumbers());
      assertEquals(0, toXmlGenerator0.getHighestEscapedChar());
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      
      QName qName0 = new QName("", "");
      assertNotNull(qName0);
      
      toXmlGenerator0.startWrappedValue(qName0, qName0);
      assertNull(iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertFalse(writerConfig0.willValidateNames());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertFalse(writerConfig0.willValidateAttributes());
      assertTrue(writerConfig0.willValidateStructure());
      assertTrue(writerConfig0.willEscapeCr());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.willValidateContent());
      assertEquals(1, iSOLatin1XmlWriter0.getRow());
      assertEquals("", simpleNsStreamWriter0.getEncoding());
      assertEquals("1.0", simpleNsStreamWriter0.getXmlVersion());
      assertNull(simpleNsStreamWriter0.getBaseUri());
      assertEquals(0, simpleNsStreamWriter0.getAttributeCount());
      assertEquals(0, toXmlGenerator0.getFeatureMask());
      assertFalse(toXmlGenerator0.canWriteObjectId());
      assertFalse(toXmlGenerator0.canWriteTypeId());
      assertTrue(toXmlGenerator0.canOmitFields());
      assertFalse(toXmlGenerator0.isClosed());
      assertTrue(toXmlGenerator0.inRoot());
      assertEquals(0, toXmlGenerator0.getFormatFeatures());
      assertFalse(toXmlGenerator0.canWriteBinaryNatively());
      assertEquals((-1), toXmlGenerator0.getOutputBuffered());
      assertTrue(toXmlGenerator0.canWriteFormattedNumbers());
      assertEquals(0, toXmlGenerator0.getHighestEscapedChar());
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      
      char[] charArray0 = new char[0];
      // Undeclared exception!
//      try { 
        toXmlGenerator0.writeRawValue(charArray0, 1, 1);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 1
//         //
//         verifyException("com.ctc.wstx.sw.ISOLatin1XmlWriter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertNotNull(bufferRecycler0);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      assertNotNull(iOContext0);
      assertNull(iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      assertNotNull(writerConfig0);
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertTrue(writerConfig0.willEscapeCr());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertFalse(writerConfig0.willValidateAttributes());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertTrue(writerConfig0.willValidateStructure());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.willValidateContent());
      assertFalse(writerConfig0.willValidateNames());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertFalse(writerConfig0.willOutputCDataAsText());
      
      ISOLatin1XmlWriter iSOLatin1XmlWriter0 = new ISOLatin1XmlWriter((OutputStream) null, writerConfig0, false);
      assertNotNull(iSOLatin1XmlWriter0);
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertTrue(writerConfig0.willEscapeCr());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertFalse(writerConfig0.willValidateAttributes());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertTrue(writerConfig0.willValidateStructure());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.willValidateContent());
      assertFalse(writerConfig0.willValidateNames());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertEquals(1, iSOLatin1XmlWriter0.getRow());
      
      SimpleNsStreamWriter simpleNsStreamWriter0 = new SimpleNsStreamWriter(iSOLatin1XmlWriter0, "", writerConfig0);
      assertNotNull(simpleNsStreamWriter0);
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertTrue(writerConfig0.willEscapeCr());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertFalse(writerConfig0.willValidateAttributes());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertTrue(writerConfig0.willValidateStructure());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.willValidateContent());
      assertFalse(writerConfig0.willValidateNames());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertEquals(1, iSOLatin1XmlWriter0.getRow());
      assertNull(simpleNsStreamWriter0.getBaseUri());
      assertEquals("1.0", simpleNsStreamWriter0.getXmlVersion());
      assertEquals(0, simpleNsStreamWriter0.getAttributeCount());
      assertEquals("", simpleNsStreamWriter0.getEncoding());
      
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 0, 0, objectMapper0, simpleNsStreamWriter0);
      assertNotNull(toXmlGenerator0);
      assertNull(iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertTrue(writerConfig0.willEscapeCr());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertFalse(writerConfig0.willValidateAttributes());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertTrue(writerConfig0.willValidateStructure());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.willValidateContent());
      assertFalse(writerConfig0.willValidateNames());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertEquals(1, iSOLatin1XmlWriter0.getRow());
      assertNull(simpleNsStreamWriter0.getBaseUri());
      assertEquals("1.0", simpleNsStreamWriter0.getXmlVersion());
      assertEquals(0, simpleNsStreamWriter0.getAttributeCount());
      assertEquals("", simpleNsStreamWriter0.getEncoding());
      assertFalse(toXmlGenerator0.canWriteTypeId());
      assertEquals((-1), toXmlGenerator0.getOutputBuffered());
      assertFalse(toXmlGenerator0.isClosed());
      assertEquals(0, toXmlGenerator0.getHighestEscapedChar());
      assertTrue(toXmlGenerator0.canWriteFormattedNumbers());
      assertFalse(toXmlGenerator0.canWriteBinaryNatively());
      assertTrue(toXmlGenerator0.inRoot());
      assertEquals(0, toXmlGenerator0.getFeatureMask());
      assertTrue(toXmlGenerator0.canOmitFields());
      assertEquals(0, toXmlGenerator0.getFormatFeatures());
      assertFalse(toXmlGenerator0.canWriteObjectId());
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      
      QName qName0 = new QName("", "");
      assertNotNull(qName0);
      
      toXmlGenerator0.startWrappedValue(qName0, qName0);
      assertNull(iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertTrue(writerConfig0.willEscapeCr());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertFalse(writerConfig0.willValidateAttributes());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertTrue(writerConfig0.willValidateStructure());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.willValidateContent());
      assertFalse(writerConfig0.willValidateNames());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertEquals(1, iSOLatin1XmlWriter0.getRow());
      assertNull(simpleNsStreamWriter0.getBaseUri());
      assertEquals("1.0", simpleNsStreamWriter0.getXmlVersion());
      assertEquals(0, simpleNsStreamWriter0.getAttributeCount());
      assertEquals("", simpleNsStreamWriter0.getEncoding());
      assertFalse(toXmlGenerator0.canWriteTypeId());
      assertEquals((-1), toXmlGenerator0.getOutputBuffered());
      assertFalse(toXmlGenerator0.isClosed());
      assertEquals(0, toXmlGenerator0.getHighestEscapedChar());
      assertTrue(toXmlGenerator0.canWriteFormattedNumbers());
      assertFalse(toXmlGenerator0.canWriteBinaryNatively());
      assertTrue(toXmlGenerator0.inRoot());
      assertEquals(0, toXmlGenerator0.getFeatureMask());
      assertTrue(toXmlGenerator0.canOmitFields());
      assertEquals(0, toXmlGenerator0.getFormatFeatures());
      assertFalse(toXmlGenerator0.canWriteObjectId());
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      
      // Undeclared exception!
//      try { 
        toXmlGenerator0.writeRawValue("", 2, 1);
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertNotNull(bufferRecycler0);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      
      WriterConfig writerConfig0 = WriterConfig.createJ2MEDefaults();
      assertNotNull(writerConfig0);
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertTrue(writerConfig0.willEscapeCr());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertFalse(writerConfig0.willValidateAttributes());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertTrue(writerConfig0.willValidateContent());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertFalse(writerConfig0.willValidateNames());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertFalse(writerConfig0.willFixContent());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.willValidateStructure());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willOutputCDataAsText());
      
      IOContext iOContext0 = new IOContext(bufferRecycler0, writerConfig0, false);
      assertNotNull(iOContext0);
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertTrue(writerConfig0.willEscapeCr());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertFalse(writerConfig0.willValidateAttributes());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertTrue(writerConfig0.willValidateContent());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertFalse(writerConfig0.willValidateNames());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertFalse(writerConfig0.willFixContent());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.willValidateStructure());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertNull(iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      assertNotNull(byteArrayOutputStream0);
      assertEquals(0, byteArrayOutputStream0.size());
      assertEquals("", byteArrayOutputStream0.toString());
      
      ISOLatin1XmlWriter iSOLatin1XmlWriter0 = new ISOLatin1XmlWriter(byteArrayOutputStream0, writerConfig0, false);
      assertNotNull(iSOLatin1XmlWriter0);
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertTrue(writerConfig0.willEscapeCr());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertFalse(writerConfig0.willValidateAttributes());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertTrue(writerConfig0.willValidateContent());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertFalse(writerConfig0.willValidateNames());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertFalse(writerConfig0.willFixContent());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.willValidateStructure());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertEquals(0, byteArrayOutputStream0.size());
      assertEquals("", byteArrayOutputStream0.toString());
      assertEquals(1, iSOLatin1XmlWriter0.getRow());
      
      RepairingNsStreamWriter repairingNsStreamWriter0 = new RepairingNsStreamWriter(iSOLatin1XmlWriter0, (String) null, writerConfig0);
      assertNotNull(repairingNsStreamWriter0);
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertTrue(writerConfig0.willEscapeCr());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertFalse(writerConfig0.willValidateAttributes());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertTrue(writerConfig0.willValidateContent());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertFalse(writerConfig0.willValidateNames());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertFalse(writerConfig0.willFixContent());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.willValidateStructure());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertEquals(0, byteArrayOutputStream0.size());
      assertEquals("", byteArrayOutputStream0.toString());
      assertEquals(1, iSOLatin1XmlWriter0.getRow());
      assertEquals("1.0", repairingNsStreamWriter0.getXmlVersion());
      assertEquals(0, repairingNsStreamWriter0.getAttributeCount());
      assertNull(repairingNsStreamWriter0.getBaseUri());
      assertNull(repairingNsStreamWriter0.getEncoding());
      
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 2, (-99), objectMapper0, repairingNsStreamWriter0);
      assertNotNull(toXmlGenerator0);
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertTrue(writerConfig0.willEscapeCr());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertFalse(writerConfig0.willValidateAttributes());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertTrue(writerConfig0.willValidateContent());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertFalse(writerConfig0.willValidateNames());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertFalse(writerConfig0.willFixContent());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.willValidateStructure());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertNull(iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertEquals(0, byteArrayOutputStream0.size());
      assertEquals("", byteArrayOutputStream0.toString());
      assertEquals(1, iSOLatin1XmlWriter0.getRow());
      assertEquals("1.0", repairingNsStreamWriter0.getXmlVersion());
      assertEquals(0, repairingNsStreamWriter0.getAttributeCount());
      assertNull(repairingNsStreamWriter0.getBaseUri());
      assertNull(repairingNsStreamWriter0.getEncoding());
      assertFalse(toXmlGenerator0.isClosed());
      assertEquals(0, toXmlGenerator0.getHighestEscapedChar());
      assertFalse(toXmlGenerator0.canWriteTypeId());
      assertEquals((-99), toXmlGenerator0.getFormatFeatures());
      assertEquals((-1), toXmlGenerator0.getOutputBuffered());
      assertTrue(toXmlGenerator0.canOmitFields());
      assertTrue(toXmlGenerator0.canWriteFormattedNumbers());
      assertEquals(2, toXmlGenerator0.getFeatureMask());
      assertFalse(toXmlGenerator0.canWriteBinaryNatively());
      assertFalse(toXmlGenerator0.canWriteObjectId());
      assertTrue(toXmlGenerator0.inRoot());
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      
      QName qName0 = QName.valueOf("C'D");
      assertNotNull(qName0);
      
      toXmlGenerator0.startWrappedValue(qName0, qName0);
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertTrue(writerConfig0.willEscapeCr());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertFalse(writerConfig0.willValidateAttributes());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertTrue(writerConfig0.willValidateContent());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertFalse(writerConfig0.willValidateNames());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertFalse(writerConfig0.willFixContent());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.willValidateStructure());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertNull(iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertEquals(0, byteArrayOutputStream0.size());
      assertEquals("", byteArrayOutputStream0.toString());
      assertEquals(1, iSOLatin1XmlWriter0.getRow());
      assertEquals("1.0", repairingNsStreamWriter0.getXmlVersion());
      assertEquals(0, repairingNsStreamWriter0.getAttributeCount());
      assertNull(repairingNsStreamWriter0.getBaseUri());
      assertNull(repairingNsStreamWriter0.getEncoding());
      assertFalse(toXmlGenerator0.isClosed());
      assertEquals(0, toXmlGenerator0.getHighestEscapedChar());
      assertFalse(toXmlGenerator0.canWriteTypeId());
      assertEquals((-99), toXmlGenerator0.getFormatFeatures());
      assertEquals((-1), toXmlGenerator0.getOutputBuffered());
      assertTrue(toXmlGenerator0.canOmitFields());
      assertTrue(toXmlGenerator0.canWriteFormattedNumbers());
      assertEquals(2, toXmlGenerator0.getFeatureMask());
      assertFalse(toXmlGenerator0.canWriteBinaryNatively());
      assertFalse(toXmlGenerator0.canWriteObjectId());
      assertTrue(toXmlGenerator0.inRoot());
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      
      // Undeclared exception!
//      try { 
        toXmlGenerator0.writeRawValue((String) null, 1, 3);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.ctc.wstx.sw.ISOLatin1XmlWriter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertNotNull(bufferRecycler0);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      assertNotNull(iOContext0);
      assertFalse(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      
      WriterConfig writerConfig0 = WriterConfig.createJ2MEDefaults();
      assertNotNull(writerConfig0);
      assertFalse(writerConfig0.willValidateNames());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.willValidateStructure());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertTrue(writerConfig0.willValidateContent());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willValidateAttributes());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertTrue(writerConfig0.willEscapeCr());
      
      ISOLatin1XmlWriter iSOLatin1XmlWriter0 = new ISOLatin1XmlWriter((OutputStream) null, writerConfig0, false);
      assertNotNull(iSOLatin1XmlWriter0);
      assertFalse(writerConfig0.willValidateNames());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.willValidateStructure());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertTrue(writerConfig0.willValidateContent());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willValidateAttributes());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertTrue(writerConfig0.willEscapeCr());
      assertEquals(1, iSOLatin1XmlWriter0.getRow());
      
      SimpleNsStreamWriter simpleNsStreamWriter0 = new SimpleNsStreamWriter(iSOLatin1XmlWriter0, "", writerConfig0);
      assertNotNull(simpleNsStreamWriter0);
      assertFalse(writerConfig0.willValidateNames());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.willValidateStructure());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertTrue(writerConfig0.willValidateContent());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willValidateAttributes());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertTrue(writerConfig0.willEscapeCr());
      assertEquals(1, iSOLatin1XmlWriter0.getRow());
      assertEquals("1.0", simpleNsStreamWriter0.getXmlVersion());
      assertEquals("", simpleNsStreamWriter0.getEncoding());
      assertNull(simpleNsStreamWriter0.getBaseUri());
      assertEquals(0, simpleNsStreamWriter0.getAttributeCount());
      
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 0, 0, objectMapper0, simpleNsStreamWriter0);
      assertNotNull(toXmlGenerator0);
      assertFalse(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertFalse(writerConfig0.willValidateNames());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.willValidateStructure());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertTrue(writerConfig0.willValidateContent());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willValidateAttributes());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertTrue(writerConfig0.willEscapeCr());
      assertEquals(1, iSOLatin1XmlWriter0.getRow());
      assertEquals("1.0", simpleNsStreamWriter0.getXmlVersion());
      assertEquals("", simpleNsStreamWriter0.getEncoding());
      assertNull(simpleNsStreamWriter0.getBaseUri());
      assertEquals(0, simpleNsStreamWriter0.getAttributeCount());
      assertFalse(toXmlGenerator0.canWriteTypeId());
      assertFalse(toXmlGenerator0.canWriteObjectId());
      assertEquals(0, toXmlGenerator0.getHighestEscapedChar());
      assertEquals(0, toXmlGenerator0.getFeatureMask());
      assertEquals((-1), toXmlGenerator0.getOutputBuffered());
      assertFalse(toXmlGenerator0.canWriteBinaryNatively());
      assertTrue(toXmlGenerator0.canWriteFormattedNumbers());
      assertEquals(0, toXmlGenerator0.getFormatFeatures());
      assertTrue(toXmlGenerator0.inRoot());
      assertFalse(toXmlGenerator0.isClosed());
      assertTrue(toXmlGenerator0.canOmitFields());
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      
      QName qName0 = new QName("", "", "");
      assertNotNull(qName0);
      
      toXmlGenerator0.startWrappedValue(qName0, qName0);
      assertFalse(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertFalse(writerConfig0.willValidateNames());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.willValidateStructure());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertTrue(writerConfig0.willValidateContent());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willValidateAttributes());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertTrue(writerConfig0.willEscapeCr());
      assertEquals(1, iSOLatin1XmlWriter0.getRow());
      assertEquals("1.0", simpleNsStreamWriter0.getXmlVersion());
      assertEquals("", simpleNsStreamWriter0.getEncoding());
      assertNull(simpleNsStreamWriter0.getBaseUri());
      assertEquals(0, simpleNsStreamWriter0.getAttributeCount());
      assertFalse(toXmlGenerator0.canWriteTypeId());
      assertFalse(toXmlGenerator0.canWriteObjectId());
      assertEquals(0, toXmlGenerator0.getHighestEscapedChar());
      assertEquals(0, toXmlGenerator0.getFeatureMask());
      assertEquals((-1), toXmlGenerator0.getOutputBuffered());
      assertFalse(toXmlGenerator0.canWriteBinaryNatively());
      assertTrue(toXmlGenerator0.canWriteFormattedNumbers());
      assertEquals(0, toXmlGenerator0.getFormatFeatures());
      assertTrue(toXmlGenerator0.inRoot());
      assertFalse(toXmlGenerator0.isClosed());
      assertTrue(toXmlGenerator0.canOmitFields());
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      
      // Undeclared exception!
//      try { 
        toXmlGenerator0.writeRawValue((String) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.ctc.wstx.sw.BaseStreamWriter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      assertNotNull(writerConfig0);
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willValidateAttributes());
      assertTrue(writerConfig0.willEscapeCr());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertFalse(writerConfig0.willValidateNames());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertTrue(writerConfig0.willValidateStructure());
      assertTrue(writerConfig0.willValidateContent());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willOutputCDataAsText());
      
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertNotNull(bufferRecycler0);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      assertNotNull(iOContext0);
      assertNull(iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      
      SimpleNsStreamWriter simpleNsStreamWriter0 = new SimpleNsStreamWriter((XmlWriter) null, "", writerConfig0);
      assertNotNull(simpleNsStreamWriter0);
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willValidateAttributes());
      assertTrue(writerConfig0.willEscapeCr());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertFalse(writerConfig0.willValidateNames());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertTrue(writerConfig0.willValidateStructure());
      assertTrue(writerConfig0.willValidateContent());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertEquals(0, simpleNsStreamWriter0.getAttributeCount());
      assertEquals("", simpleNsStreamWriter0.getEncoding());
      assertNull(simpleNsStreamWriter0.getBaseUri());
      assertEquals("1.0", simpleNsStreamWriter0.getXmlVersion());
      
      StreamWriterDelegate streamWriterDelegate0 = new StreamWriterDelegate(simpleNsStreamWriter0);
      assertNotNull(streamWriterDelegate0);
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willValidateAttributes());
      assertTrue(writerConfig0.willEscapeCr());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertFalse(writerConfig0.willValidateNames());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertTrue(writerConfig0.willValidateStructure());
      assertTrue(writerConfig0.willValidateContent());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertEquals(0, simpleNsStreamWriter0.getAttributeCount());
      assertEquals("", simpleNsStreamWriter0.getEncoding());
      assertNull(simpleNsStreamWriter0.getBaseUri());
      assertEquals("1.0", simpleNsStreamWriter0.getXmlVersion());
      
      XMLStreamWriter2 xMLStreamWriter2_0 = Stax2WriterAdapter.wrapIfNecessary(streamWriterDelegate0);
      assertNotNull(xMLStreamWriter2_0);
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willValidateAttributes());
      assertTrue(writerConfig0.willEscapeCr());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertFalse(writerConfig0.willValidateNames());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertTrue(writerConfig0.willValidateStructure());
      assertTrue(writerConfig0.willValidateContent());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertEquals(0, simpleNsStreamWriter0.getAttributeCount());
      assertEquals("", simpleNsStreamWriter0.getEncoding());
      assertNull(simpleNsStreamWriter0.getBaseUri());
      assertEquals("1.0", simpleNsStreamWriter0.getXmlVersion());
      assertNull(xMLStreamWriter2_0.getEncoding());
      
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, (-2092), 0, objectMapper0, xMLStreamWriter2_0);
      assertNotNull(toXmlGenerator0);
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willValidateAttributes());
      assertTrue(writerConfig0.willEscapeCr());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertFalse(writerConfig0.willValidateNames());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertTrue(writerConfig0.willValidateStructure());
      assertTrue(writerConfig0.willValidateContent());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertNull(iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertEquals(0, simpleNsStreamWriter0.getAttributeCount());
      assertEquals("", simpleNsStreamWriter0.getEncoding());
      assertNull(simpleNsStreamWriter0.getBaseUri());
      assertEquals("1.0", simpleNsStreamWriter0.getXmlVersion());
      assertNull(xMLStreamWriter2_0.getEncoding());
      assertTrue(toXmlGenerator0.inRoot());
      assertTrue(toXmlGenerator0.canOmitFields());
      assertTrue(toXmlGenerator0.canWriteFormattedNumbers());
      assertEquals((-2092), toXmlGenerator0.getFeatureMask());
      assertFalse(toXmlGenerator0.canWriteTypeId());
      assertFalse(toXmlGenerator0.isClosed());
      assertEquals(0, toXmlGenerator0.getHighestEscapedChar());
      assertEquals(0, toXmlGenerator0.getFormatFeatures());
      assertEquals((-1), toXmlGenerator0.getOutputBuffered());
      assertFalse(toXmlGenerator0.canWriteObjectId());
      assertFalse(toXmlGenerator0.canWriteBinaryNatively());
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      
      // Undeclared exception!
//      try { 
        toXmlGenerator0.writeRaw((char[]) null, (-413), 0);
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertNotNull(bufferRecycler0);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(3);
      assertNotNull(byteArrayOutputStream0);
      assertEquals("", byteArrayOutputStream0.toString());
      assertEquals(0, byteArrayOutputStream0.size());
      
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      assertNotNull(writerConfig0);
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertFalse(writerConfig0.willValidateNames());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertTrue(writerConfig0.willValidateContent());
      assertFalse(writerConfig0.willFixContent());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.willValidateStructure());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willValidateAttributes());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertTrue(writerConfig0.willEscapeCr());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertEquals("5.0", writerConfig0.getImplVersion());
      
      AsciiXmlWriter asciiXmlWriter0 = new AsciiXmlWriter(byteArrayOutputStream0, writerConfig0, true);
      assertNotNull(asciiXmlWriter0);
      assertEquals("", byteArrayOutputStream0.toString());
      assertEquals(0, byteArrayOutputStream0.size());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertFalse(writerConfig0.willValidateNames());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertTrue(writerConfig0.willValidateContent());
      assertFalse(writerConfig0.willFixContent());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.willValidateStructure());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willValidateAttributes());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertTrue(writerConfig0.willEscapeCr());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertEquals(1, asciiXmlWriter0.getRow());
      
      NonNsStreamWriter nonNsStreamWriter0 = new NonNsStreamWriter(asciiXmlWriter0, "", writerConfig0);
      assertNotNull(nonNsStreamWriter0);
      assertEquals("", byteArrayOutputStream0.toString());
      assertEquals(0, byteArrayOutputStream0.size());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertFalse(writerConfig0.willValidateNames());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertTrue(writerConfig0.willValidateContent());
      assertFalse(writerConfig0.willFixContent());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.willValidateStructure());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willValidateAttributes());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertTrue(writerConfig0.willEscapeCr());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertEquals(1, asciiXmlWriter0.getRow());
      assertEquals("1.0", nonNsStreamWriter0.getXmlVersion());
      assertEquals("", nonNsStreamWriter0.getEncoding());
      assertNull(nonNsStreamWriter0.getBaseUri());
      assertEquals(0, nonNsStreamWriter0.getAttributeCount());
      
      IOContext iOContext0 = new IOContext(bufferRecycler0, "", true);
      assertNotNull(iOContext0);
      assertTrue(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 3, 2, objectMapper0, nonNsStreamWriter0);
      assertNotNull(toXmlGenerator0);
      assertEquals("", byteArrayOutputStream0.toString());
      assertEquals(0, byteArrayOutputStream0.size());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertFalse(writerConfig0.willValidateNames());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertTrue(writerConfig0.willValidateContent());
      assertFalse(writerConfig0.willFixContent());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.willValidateStructure());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willValidateAttributes());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertTrue(writerConfig0.willEscapeCr());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertEquals(1, asciiXmlWriter0.getRow());
      assertEquals("1.0", nonNsStreamWriter0.getXmlVersion());
      assertEquals("", nonNsStreamWriter0.getEncoding());
      assertNull(nonNsStreamWriter0.getBaseUri());
      assertEquals(0, nonNsStreamWriter0.getAttributeCount());
      assertTrue(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertFalse(toXmlGenerator0.canWriteBinaryNatively());
      assertEquals(2, toXmlGenerator0.getFormatFeatures());
      assertTrue(toXmlGenerator0.canOmitFields());
      assertTrue(toXmlGenerator0.inRoot());
      assertEquals(3, toXmlGenerator0.getFeatureMask());
      assertFalse(toXmlGenerator0.canWriteTypeId());
      assertFalse(toXmlGenerator0.isClosed());
      assertFalse(toXmlGenerator0.canWriteObjectId());
      assertEquals(0, toXmlGenerator0.getHighestEscapedChar());
      assertEquals((-1), toXmlGenerator0.getOutputBuffered());
      assertTrue(toXmlGenerator0.canWriteFormattedNumbers());
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      
      char[] charArray0 = new char[0];
      // Undeclared exception!
//      try { 
        toXmlGenerator0.writeRaw(charArray0, (-2), 3);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // -2
//         //
//         verifyException("com.ctc.wstx.sw.AsciiXmlWriter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertNotNull(bufferRecycler0);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      assertNotNull(iOContext0);
      assertTrue(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      assertNotNull(writerConfig0);
      assertFalse(writerConfig0.willValidateNames());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertTrue(writerConfig0.willEscapeCr());
      assertTrue(writerConfig0.willValidateStructure());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willValidateAttributes());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertTrue(writerConfig0.willValidateContent());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertEquals("woodstox", writerConfig0.getImplName());
      
      ISOLatin1XmlWriter iSOLatin1XmlWriter0 = new ISOLatin1XmlWriter((OutputStream) null, writerConfig0, true);
      assertNotNull(iSOLatin1XmlWriter0);
      assertFalse(writerConfig0.willValidateNames());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertTrue(writerConfig0.willEscapeCr());
      assertTrue(writerConfig0.willValidateStructure());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willValidateAttributes());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertTrue(writerConfig0.willValidateContent());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertEquals(1, iSOLatin1XmlWriter0.getRow());
      
      SimpleNsStreamWriter simpleNsStreamWriter0 = new SimpleNsStreamWriter(iSOLatin1XmlWriter0, "", writerConfig0);
      assertNotNull(simpleNsStreamWriter0);
      assertFalse(writerConfig0.willValidateNames());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertTrue(writerConfig0.willEscapeCr());
      assertTrue(writerConfig0.willValidateStructure());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willValidateAttributes());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertTrue(writerConfig0.willValidateContent());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertEquals(1, iSOLatin1XmlWriter0.getRow());
      assertEquals(0, simpleNsStreamWriter0.getAttributeCount());
      assertNull(simpleNsStreamWriter0.getBaseUri());
      assertEquals("1.0", simpleNsStreamWriter0.getXmlVersion());
      assertEquals("", simpleNsStreamWriter0.getEncoding());
      
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 2, 3, objectMapper0, simpleNsStreamWriter0);
      assertNotNull(toXmlGenerator0);
      assertTrue(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertFalse(writerConfig0.willValidateNames());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertTrue(writerConfig0.willEscapeCr());
      assertTrue(writerConfig0.willValidateStructure());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willValidateAttributes());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertTrue(writerConfig0.willValidateContent());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertEquals(1, iSOLatin1XmlWriter0.getRow());
      assertEquals(0, simpleNsStreamWriter0.getAttributeCount());
      assertNull(simpleNsStreamWriter0.getBaseUri());
      assertEquals("1.0", simpleNsStreamWriter0.getXmlVersion());
      assertEquals("", simpleNsStreamWriter0.getEncoding());
      assertFalse(toXmlGenerator0.canWriteObjectId());
      assertEquals(2, toXmlGenerator0.getFeatureMask());
      assertEquals((-1), toXmlGenerator0.getOutputBuffered());
      assertFalse(toXmlGenerator0.canWriteTypeId());
      assertTrue(toXmlGenerator0.canOmitFields());
      assertFalse(toXmlGenerator0.isClosed());
      assertTrue(toXmlGenerator0.inRoot());
      assertEquals(3, toXmlGenerator0.getFormatFeatures());
      assertFalse(toXmlGenerator0.canWriteBinaryNatively());
      assertTrue(toXmlGenerator0.canWriteFormattedNumbers());
      assertEquals(0, toXmlGenerator0.getHighestEscapedChar());
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      
      // Undeclared exception!
//      try { 
        toXmlGenerator0.writeRaw("", 2, 2);
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertNotNull(bufferRecycler0);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      assertNotNull(writerConfig0);
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.willValidateContent());
      assertFalse(writerConfig0.willValidateNames());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertTrue(writerConfig0.willValidateStructure());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertTrue(writerConfig0.willEscapeCr());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertFalse(writerConfig0.willValidateAttributes());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertEquals("5.0", writerConfig0.getImplVersion());
      
      IOContext iOContext0 = new IOContext(bufferRecycler0, "9f", false);
      assertNotNull(iOContext0);
      assertFalse(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      
      NonNsStreamWriter nonNsStreamWriter0 = new NonNsStreamWriter((XmlWriter) null, "9f", writerConfig0);
      assertNotNull(nonNsStreamWriter0);
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.willValidateContent());
      assertFalse(writerConfig0.willValidateNames());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertTrue(writerConfig0.willValidateStructure());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertTrue(writerConfig0.willEscapeCr());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertFalse(writerConfig0.willValidateAttributes());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertEquals("9f", nonNsStreamWriter0.getEncoding());
      assertEquals(0, nonNsStreamWriter0.getAttributeCount());
      assertEquals("1.0", nonNsStreamWriter0.getXmlVersion());
      assertNull(nonNsStreamWriter0.getBaseUri());
      
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 0, 3, objectMapper0, nonNsStreamWriter0);
      assertNotNull(toXmlGenerator0);
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.willValidateContent());
      assertFalse(writerConfig0.willValidateNames());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertTrue(writerConfig0.willValidateStructure());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertTrue(writerConfig0.willEscapeCr());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertFalse(writerConfig0.willValidateAttributes());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertFalse(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertEquals("9f", nonNsStreamWriter0.getEncoding());
      assertEquals(0, nonNsStreamWriter0.getAttributeCount());
      assertEquals("1.0", nonNsStreamWriter0.getXmlVersion());
      assertNull(nonNsStreamWriter0.getBaseUri());
      assertFalse(toXmlGenerator0.canWriteObjectId());
      assertFalse(toXmlGenerator0.canWriteTypeId());
      assertEquals(0, toXmlGenerator0.getFeatureMask());
      assertEquals((-1), toXmlGenerator0.getOutputBuffered());
      assertEquals(0, toXmlGenerator0.getHighestEscapedChar());
      assertTrue(toXmlGenerator0.canWriteFormattedNumbers());
      assertEquals(3, toXmlGenerator0.getFormatFeatures());
      assertFalse(toXmlGenerator0.canWriteBinaryNatively());
      assertTrue(toXmlGenerator0.canOmitFields());
      assertFalse(toXmlGenerator0.isClosed());
      assertTrue(toXmlGenerator0.inRoot());
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      
      // Undeclared exception!
//      try { 
        toXmlGenerator0.writeRaw('\\');
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.ctc.wstx.sw.BaseStreamWriter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertNotNull(bufferRecycler0);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      assertNotNull(writerConfig0);
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willValidateAttributes());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertTrue(writerConfig0.willEscapeCr());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertFalse(writerConfig0.willValidateNames());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.willValidateStructure());
      assertTrue(writerConfig0.willValidateContent());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertFalse(writerConfig0.willAutoCloseOutput());
      
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      assertNotNull(iOContext0);
      assertNull(iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      
      MockPrintStream mockPrintStream0 = new MockPrintStream("@z]#ol>7Xj@B=w_J.5]");
      assertNotNull(mockPrintStream0);
      
      ISOLatin1XmlWriter iSOLatin1XmlWriter0 = new ISOLatin1XmlWriter(mockPrintStream0, writerConfig0, false);
      assertNotNull(iSOLatin1XmlWriter0);
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willValidateAttributes());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertTrue(writerConfig0.willEscapeCr());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertFalse(writerConfig0.willValidateNames());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.willValidateStructure());
      assertTrue(writerConfig0.willValidateContent());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertEquals(1, iSOLatin1XmlWriter0.getRow());
      
      QName qName0 = new QName("EU6dNVi3\tBW", "@z]#ol>7Xj@B=w_J.5]");
      assertNotNull(qName0);
      
      RepairingNsStreamWriter repairingNsStreamWriter0 = new RepairingNsStreamWriter(iSOLatin1XmlWriter0, "", writerConfig0);
      assertNotNull(repairingNsStreamWriter0);
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willValidateAttributes());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertTrue(writerConfig0.willEscapeCr());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertFalse(writerConfig0.willValidateNames());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.willValidateStructure());
      assertTrue(writerConfig0.willValidateContent());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertEquals(1, iSOLatin1XmlWriter0.getRow());
      assertEquals("1.0", repairingNsStreamWriter0.getXmlVersion());
      assertEquals("", repairingNsStreamWriter0.getEncoding());
      assertEquals(0, repairingNsStreamWriter0.getAttributeCount());
      assertNull(repairingNsStreamWriter0.getBaseUri());
      
      StreamWriter2Delegate streamWriter2Delegate0 = new StreamWriter2Delegate(repairingNsStreamWriter0);
      assertNotNull(streamWriter2Delegate0);
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willValidateAttributes());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertTrue(writerConfig0.willEscapeCr());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertFalse(writerConfig0.willValidateNames());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.willValidateStructure());
      assertTrue(writerConfig0.willValidateContent());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertEquals(1, iSOLatin1XmlWriter0.getRow());
      assertEquals("1.0", repairingNsStreamWriter0.getXmlVersion());
      assertEquals("", repairingNsStreamWriter0.getEncoding());
      assertEquals(0, repairingNsStreamWriter0.getAttributeCount());
      assertNull(repairingNsStreamWriter0.getBaseUri());
      
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 2, 1, objectMapper0, streamWriter2Delegate0);
      assertNotNull(toXmlGenerator0);
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willValidateAttributes());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertTrue(writerConfig0.willEscapeCr());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertFalse(writerConfig0.willValidateNames());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.willValidateStructure());
      assertTrue(writerConfig0.willValidateContent());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertNull(iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertEquals(1, iSOLatin1XmlWriter0.getRow());
      assertEquals("1.0", repairingNsStreamWriter0.getXmlVersion());
      assertEquals("", repairingNsStreamWriter0.getEncoding());
      assertEquals(0, repairingNsStreamWriter0.getAttributeCount());
      assertNull(repairingNsStreamWriter0.getBaseUri());
      assertTrue(toXmlGenerator0.canOmitFields());
      assertFalse(toXmlGenerator0.canWriteBinaryNatively());
      assertTrue(toXmlGenerator0.canWriteFormattedNumbers());
      assertEquals((-1), toXmlGenerator0.getOutputBuffered());
      assertFalse(toXmlGenerator0.canWriteObjectId());
      assertEquals(0, toXmlGenerator0.getHighestEscapedChar());
      assertFalse(toXmlGenerator0.canWriteTypeId());
      assertTrue(toXmlGenerator0.inRoot());
      assertEquals(2, toXmlGenerator0.getFeatureMask());
      assertFalse(toXmlGenerator0.isClosed());
      assertEquals(1, toXmlGenerator0.getFormatFeatures());
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      
      toXmlGenerator0.startWrappedValue(qName0, qName0);
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willValidateAttributes());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertTrue(writerConfig0.willEscapeCr());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertFalse(writerConfig0.willValidateNames());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.willValidateStructure());
      assertTrue(writerConfig0.willValidateContent());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertNull(iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertEquals(1, iSOLatin1XmlWriter0.getRow());
      assertEquals("1.0", repairingNsStreamWriter0.getXmlVersion());
      assertEquals("", repairingNsStreamWriter0.getEncoding());
      assertEquals(0, repairingNsStreamWriter0.getAttributeCount());
      assertNull(repairingNsStreamWriter0.getBaseUri());
      assertTrue(toXmlGenerator0.canOmitFields());
      assertFalse(toXmlGenerator0.canWriteBinaryNatively());
      assertTrue(toXmlGenerator0.canWriteFormattedNumbers());
      assertEquals((-1), toXmlGenerator0.getOutputBuffered());
      assertFalse(toXmlGenerator0.canWriteObjectId());
      assertEquals(0, toXmlGenerator0.getHighestEscapedChar());
      assertFalse(toXmlGenerator0.canWriteTypeId());
      assertTrue(toXmlGenerator0.inRoot());
      assertEquals(2, toXmlGenerator0.getFeatureMask());
      assertFalse(toXmlGenerator0.isClosed());
      assertEquals(1, toXmlGenerator0.getFormatFeatures());
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      
      BigInteger bigInteger0 = BigInteger.TEN;
      assertNotNull(bigInteger0);
      assertEquals((byte)10, bigInteger0.byteValue());
      assertEquals((short)10, bigInteger0.shortValue());
      
      // Undeclared exception!
//      try { 
        toXmlGenerator0.writeNumber(bigInteger0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.codehaus.stax2.util.StreamWriter2Delegate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertNotNull(bufferRecycler0);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      assertNotNull(iOContext0);
      assertNull(iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      
      WriterConfig writerConfig0 = WriterConfig.createJ2MEDefaults();
      assertNotNull(writerConfig0);
      assertEquals(933, writerConfig0.getConfigFlags());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertTrue(writerConfig0.willValidateContent());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertFalse(writerConfig0.willValidateNames());
      assertTrue(writerConfig0.willValidateStructure());
      assertFalse(writerConfig0.willValidateAttributes());
      assertTrue(writerConfig0.willEscapeCr());
      
      ISOLatin1XmlWriter iSOLatin1XmlWriter0 = new ISOLatin1XmlWriter((OutputStream) null, writerConfig0, false);
      assertNotNull(iSOLatin1XmlWriter0);
      assertEquals(933, writerConfig0.getConfigFlags());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertTrue(writerConfig0.willValidateContent());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertFalse(writerConfig0.willValidateNames());
      assertTrue(writerConfig0.willValidateStructure());
      assertFalse(writerConfig0.willValidateAttributes());
      assertTrue(writerConfig0.willEscapeCr());
      assertEquals(1, iSOLatin1XmlWriter0.getRow());
      
      SimpleNsStreamWriter simpleNsStreamWriter0 = new SimpleNsStreamWriter(iSOLatin1XmlWriter0, "", writerConfig0);
      assertNotNull(simpleNsStreamWriter0);
      assertEquals(933, writerConfig0.getConfigFlags());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertTrue(writerConfig0.willValidateContent());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertFalse(writerConfig0.willValidateNames());
      assertTrue(writerConfig0.willValidateStructure());
      assertFalse(writerConfig0.willValidateAttributes());
      assertTrue(writerConfig0.willEscapeCr());
      assertEquals(1, iSOLatin1XmlWriter0.getRow());
      assertNull(simpleNsStreamWriter0.getBaseUri());
      assertEquals("", simpleNsStreamWriter0.getEncoding());
      assertEquals(0, simpleNsStreamWriter0.getAttributeCount());
      assertEquals("1.0", simpleNsStreamWriter0.getXmlVersion());
      
      QName qName0 = new QName("", "");
      assertNotNull(qName0);
      
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 2, 3, objectMapper0, simpleNsStreamWriter0);
      assertNotNull(toXmlGenerator0);
      assertNull(iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertTrue(writerConfig0.willValidateContent());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertFalse(writerConfig0.willValidateNames());
      assertTrue(writerConfig0.willValidateStructure());
      assertFalse(writerConfig0.willValidateAttributes());
      assertTrue(writerConfig0.willEscapeCr());
      assertEquals(1, iSOLatin1XmlWriter0.getRow());
      assertNull(simpleNsStreamWriter0.getBaseUri());
      assertEquals("", simpleNsStreamWriter0.getEncoding());
      assertEquals(0, simpleNsStreamWriter0.getAttributeCount());
      assertEquals("1.0", simpleNsStreamWriter0.getXmlVersion());
      assertTrue(toXmlGenerator0.canWriteFormattedNumbers());
      assertEquals(0, toXmlGenerator0.getHighestEscapedChar());
      assertFalse(toXmlGenerator0.canWriteBinaryNatively());
      assertEquals((-1), toXmlGenerator0.getOutputBuffered());
      assertFalse(toXmlGenerator0.canWriteObjectId());
      assertEquals(2, toXmlGenerator0.getFeatureMask());
      assertTrue(toXmlGenerator0.canOmitFields());
      assertFalse(toXmlGenerator0.isClosed());
      assertTrue(toXmlGenerator0.inRoot());
      assertFalse(toXmlGenerator0.canWriteTypeId());
      assertEquals(3, toXmlGenerator0.getFormatFeatures());
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      
      toXmlGenerator0.startWrappedValue(qName0, qName0);
      assertNull(iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertTrue(writerConfig0.willValidateContent());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertFalse(writerConfig0.willValidateNames());
      assertTrue(writerConfig0.willValidateStructure());
      assertFalse(writerConfig0.willValidateAttributes());
      assertTrue(writerConfig0.willEscapeCr());
      assertEquals(1, iSOLatin1XmlWriter0.getRow());
      assertNull(simpleNsStreamWriter0.getBaseUri());
      assertEquals("", simpleNsStreamWriter0.getEncoding());
      assertEquals(0, simpleNsStreamWriter0.getAttributeCount());
      assertEquals("1.0", simpleNsStreamWriter0.getXmlVersion());
      assertTrue(toXmlGenerator0.canWriteFormattedNumbers());
      assertEquals(0, toXmlGenerator0.getHighestEscapedChar());
      assertFalse(toXmlGenerator0.canWriteBinaryNatively());
      assertEquals((-1), toXmlGenerator0.getOutputBuffered());
      assertFalse(toXmlGenerator0.canWriteObjectId());
      assertEquals(2, toXmlGenerator0.getFeatureMask());
      assertTrue(toXmlGenerator0.canOmitFields());
      assertFalse(toXmlGenerator0.isClosed());
      assertTrue(toXmlGenerator0.inRoot());
      assertFalse(toXmlGenerator0.canWriteTypeId());
      assertEquals(3, toXmlGenerator0.getFormatFeatures());
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      
      toXmlGenerator0.writeStartObject();
      assertNull(iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertTrue(writerConfig0.willValidateContent());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertFalse(writerConfig0.willValidateNames());
      assertTrue(writerConfig0.willValidateStructure());
      assertFalse(writerConfig0.willValidateAttributes());
      assertTrue(writerConfig0.willEscapeCr());
      assertEquals(1, iSOLatin1XmlWriter0.getRow());
      assertNull(simpleNsStreamWriter0.getBaseUri());
      assertEquals("", simpleNsStreamWriter0.getEncoding());
      assertEquals(0, simpleNsStreamWriter0.getAttributeCount());
      assertEquals("1.0", simpleNsStreamWriter0.getXmlVersion());
      assertTrue(toXmlGenerator0.canWriteFormattedNumbers());
      assertEquals(0, toXmlGenerator0.getHighestEscapedChar());
      assertFalse(toXmlGenerator0.canWriteBinaryNatively());
      assertEquals((-1), toXmlGenerator0.getOutputBuffered());
      assertFalse(toXmlGenerator0.canWriteObjectId());
      assertEquals(2, toXmlGenerator0.getFeatureMask());
      assertFalse(toXmlGenerator0.inRoot());
      assertTrue(toXmlGenerator0.canOmitFields());
      assertFalse(toXmlGenerator0.isClosed());
      assertFalse(toXmlGenerator0.canWriteTypeId());
      assertEquals(3, toXmlGenerator0.getFormatFeatures());
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      
      BigInteger bigInteger0 = BigInteger.TEN;
      assertNotNull(bigInteger0);
      assertEquals((byte)10, bigInteger0.byteValue());
      assertEquals((short)10, bigInteger0.shortValue());
      
//      try { 
        toXmlGenerator0.writeNumber(bigInteger0);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Can not write number, expecting field name
//         //
//         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertNotNull(bufferRecycler0);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      assertNotNull(iOContext0);
      assertFalse(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      assertNotNull(writerConfig0);
      assertFalse(writerConfig0.willFixContent());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.willValidateStructure());
      assertTrue(writerConfig0.willValidateContent());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willValidateNames());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertTrue(writerConfig0.willEscapeCr());
      assertFalse(writerConfig0.willValidateAttributes());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertEquals(933, writerConfig0.getConfigFlags());
      
      ISOLatin1XmlWriter iSOLatin1XmlWriter0 = new ISOLatin1XmlWriter((OutputStream) null, writerConfig0, false);
      assertNotNull(iSOLatin1XmlWriter0);
      assertFalse(writerConfig0.willFixContent());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.willValidateStructure());
      assertTrue(writerConfig0.willValidateContent());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willValidateNames());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertTrue(writerConfig0.willEscapeCr());
      assertFalse(writerConfig0.willValidateAttributes());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertEquals(1, iSOLatin1XmlWriter0.getRow());
      
      SimpleNsStreamWriter simpleNsStreamWriter0 = new SimpleNsStreamWriter(iSOLatin1XmlWriter0, "", writerConfig0);
      assertNotNull(simpleNsStreamWriter0);
      assertFalse(writerConfig0.willFixContent());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.willValidateStructure());
      assertTrue(writerConfig0.willValidateContent());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willValidateNames());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertTrue(writerConfig0.willEscapeCr());
      assertFalse(writerConfig0.willValidateAttributes());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertEquals(1, iSOLatin1XmlWriter0.getRow());
      assertEquals(0, simpleNsStreamWriter0.getAttributeCount());
      assertEquals("", simpleNsStreamWriter0.getEncoding());
      assertNull(simpleNsStreamWriter0.getBaseUri());
      assertEquals("1.0", simpleNsStreamWriter0.getXmlVersion());
      
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 0, 0, objectMapper0, simpleNsStreamWriter0);
      assertNotNull(toXmlGenerator0);
      assertFalse(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertFalse(writerConfig0.willFixContent());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.willValidateStructure());
      assertTrue(writerConfig0.willValidateContent());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willValidateNames());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertTrue(writerConfig0.willEscapeCr());
      assertFalse(writerConfig0.willValidateAttributes());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertEquals(1, iSOLatin1XmlWriter0.getRow());
      assertEquals(0, simpleNsStreamWriter0.getAttributeCount());
      assertEquals("", simpleNsStreamWriter0.getEncoding());
      assertNull(simpleNsStreamWriter0.getBaseUri());
      assertEquals("1.0", simpleNsStreamWriter0.getXmlVersion());
      assertTrue(toXmlGenerator0.canOmitFields());
      assertTrue(toXmlGenerator0.canWriteFormattedNumbers());
      assertTrue(toXmlGenerator0.inRoot());
      assertFalse(toXmlGenerator0.canWriteObjectId());
      assertFalse(toXmlGenerator0.canWriteBinaryNatively());
      assertEquals(0, toXmlGenerator0.getFeatureMask());
      assertEquals((-1), toXmlGenerator0.getOutputBuffered());
      assertEquals(0, toXmlGenerator0.getHighestEscapedChar());
      assertFalse(toXmlGenerator0.isClosed());
      assertEquals(0, toXmlGenerator0.getFormatFeatures());
      assertFalse(toXmlGenerator0.canWriteTypeId());
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      
      QName qName0 = new QName("", "");
      assertNotNull(qName0);
      
      toXmlGenerator0.startWrappedValue(qName0, qName0);
      assertFalse(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertFalse(writerConfig0.willFixContent());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.willValidateStructure());
      assertTrue(writerConfig0.willValidateContent());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willValidateNames());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertTrue(writerConfig0.willEscapeCr());
      assertFalse(writerConfig0.willValidateAttributes());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertEquals(1, iSOLatin1XmlWriter0.getRow());
      assertEquals(0, simpleNsStreamWriter0.getAttributeCount());
      assertEquals("", simpleNsStreamWriter0.getEncoding());
      assertNull(simpleNsStreamWriter0.getBaseUri());
      assertEquals("1.0", simpleNsStreamWriter0.getXmlVersion());
      assertTrue(toXmlGenerator0.canOmitFields());
      assertTrue(toXmlGenerator0.canWriteFormattedNumbers());
      assertTrue(toXmlGenerator0.inRoot());
      assertFalse(toXmlGenerator0.canWriteObjectId());
      assertFalse(toXmlGenerator0.canWriteBinaryNatively());
      assertEquals(0, toXmlGenerator0.getFeatureMask());
      assertEquals((-1), toXmlGenerator0.getOutputBuffered());
      assertEquals(0, toXmlGenerator0.getHighestEscapedChar());
      assertFalse(toXmlGenerator0.isClosed());
      assertEquals(0, toXmlGenerator0.getFormatFeatures());
      assertFalse(toXmlGenerator0.canWriteTypeId());
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      
      toXmlGenerator0.writeStartObject();
      assertFalse(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertFalse(writerConfig0.willFixContent());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.willValidateStructure());
      assertTrue(writerConfig0.willValidateContent());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willValidateNames());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertTrue(writerConfig0.willEscapeCr());
      assertFalse(writerConfig0.willValidateAttributes());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertEquals(1, iSOLatin1XmlWriter0.getRow());
      assertEquals(0, simpleNsStreamWriter0.getAttributeCount());
      assertEquals("", simpleNsStreamWriter0.getEncoding());
      assertNull(simpleNsStreamWriter0.getBaseUri());
      assertEquals("1.0", simpleNsStreamWriter0.getXmlVersion());
      assertTrue(toXmlGenerator0.canOmitFields());
      assertTrue(toXmlGenerator0.canWriteFormattedNumbers());
      assertFalse(toXmlGenerator0.canWriteObjectId());
      assertFalse(toXmlGenerator0.canWriteBinaryNatively());
      assertEquals(0, toXmlGenerator0.getFeatureMask());
      assertEquals((-1), toXmlGenerator0.getOutputBuffered());
      assertEquals(0, toXmlGenerator0.getHighestEscapedChar());
      assertFalse(toXmlGenerator0.isClosed());
      assertFalse(toXmlGenerator0.inRoot());
      assertEquals(0, toXmlGenerator0.getFormatFeatures());
      assertFalse(toXmlGenerator0.canWriteTypeId());
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      assertNotNull(bigDecimal0);
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertEquals((short)1, bigDecimal0.shortValue());
      
//      try { 
        toXmlGenerator0.writeNumber(bigDecimal0);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Can not write number, expecting field name
//         //
//         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertNotNull(bufferRecycler0);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      assertNotNull(writerConfig0);
      assertFalse(writerConfig0.willValidateAttributes());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertTrue(writerConfig0.willEscapeCr());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertTrue(writerConfig0.willValidateStructure());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertFalse(writerConfig0.willValidateNames());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.willValidateContent());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      
      DefaultXmlPrettyPrinter defaultXmlPrettyPrinter0 = new DefaultXmlPrettyPrinter();
      assertNotNull(defaultXmlPrettyPrinter0);
      
      IOContext iOContext0 = new IOContext(bufferRecycler0, defaultXmlPrettyPrinter0, false);
      assertNotNull(iOContext0);
      assertFalse(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      assertNotNull(byteArrayOutputStream0);
      assertEquals("", byteArrayOutputStream0.toString());
      assertEquals(0, byteArrayOutputStream0.size());
      
      AsciiXmlWriter asciiXmlWriter0 = new AsciiXmlWriter(byteArrayOutputStream0, writerConfig0, true);
      assertNotNull(asciiXmlWriter0);
      assertFalse(writerConfig0.willValidateAttributes());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertTrue(writerConfig0.willEscapeCr());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertTrue(writerConfig0.willValidateStructure());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertFalse(writerConfig0.willValidateNames());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.willValidateContent());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertEquals("", byteArrayOutputStream0.toString());
      assertEquals(0, byteArrayOutputStream0.size());
      assertEquals(1, asciiXmlWriter0.getRow());
      
      SimpleNsStreamWriter simpleNsStreamWriter0 = new SimpleNsStreamWriter(asciiXmlWriter0, "$9", writerConfig0);
      assertNotNull(simpleNsStreamWriter0);
      assertFalse(writerConfig0.willValidateAttributes());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertTrue(writerConfig0.willEscapeCr());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertTrue(writerConfig0.willValidateStructure());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertFalse(writerConfig0.willValidateNames());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.willValidateContent());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertEquals("", byteArrayOutputStream0.toString());
      assertEquals(0, byteArrayOutputStream0.size());
      assertEquals(1, asciiXmlWriter0.getRow());
      assertEquals(0, simpleNsStreamWriter0.getAttributeCount());
      assertEquals("$9", simpleNsStreamWriter0.getEncoding());
      assertNull(simpleNsStreamWriter0.getBaseUri());
      assertEquals("1.0", simpleNsStreamWriter0.getXmlVersion());
      
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 1825, 1615, objectMapper0, simpleNsStreamWriter0);
      assertNotNull(toXmlGenerator0);
      assertFalse(writerConfig0.willValidateAttributes());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertTrue(writerConfig0.willEscapeCr());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertTrue(writerConfig0.willValidateStructure());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertFalse(writerConfig0.willValidateNames());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.willValidateContent());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertFalse(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertEquals("", byteArrayOutputStream0.toString());
      assertEquals(0, byteArrayOutputStream0.size());
      assertEquals(1, asciiXmlWriter0.getRow());
      assertEquals(0, simpleNsStreamWriter0.getAttributeCount());
      assertEquals("$9", simpleNsStreamWriter0.getEncoding());
      assertNull(simpleNsStreamWriter0.getBaseUri());
      assertEquals("1.0", simpleNsStreamWriter0.getXmlVersion());
      assertEquals(1615, toXmlGenerator0.getFormatFeatures());
      assertFalse(toXmlGenerator0.canWriteTypeId());
      assertTrue(toXmlGenerator0.canOmitFields());
      assertFalse(toXmlGenerator0.isClosed());
      assertTrue(toXmlGenerator0.inRoot());
      assertEquals(1825, toXmlGenerator0.getFeatureMask());
      assertFalse(toXmlGenerator0.canWriteObjectId());
      assertFalse(toXmlGenerator0.canWriteBinaryNatively());
      assertEquals((-1), toXmlGenerator0.getOutputBuffered());
      assertTrue(toXmlGenerator0.canWriteFormattedNumbers());
      assertEquals(0, toXmlGenerator0.getHighestEscapedChar());
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      
      QName qName0 = QName.valueOf("$9");
      assertNotNull(qName0);
      
      toXmlGenerator0.startWrappedValue(qName0, qName0);
      assertFalse(writerConfig0.willValidateAttributes());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertTrue(writerConfig0.willEscapeCr());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertTrue(writerConfig0.willValidateStructure());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertFalse(writerConfig0.willValidateNames());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.willValidateContent());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertFalse(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertEquals("", byteArrayOutputStream0.toString());
      assertEquals(0, byteArrayOutputStream0.size());
      assertEquals(1, asciiXmlWriter0.getRow());
      assertEquals(0, simpleNsStreamWriter0.getAttributeCount());
      assertEquals("$9", simpleNsStreamWriter0.getEncoding());
      assertNull(simpleNsStreamWriter0.getBaseUri());
      assertEquals("1.0", simpleNsStreamWriter0.getXmlVersion());
      assertEquals(1615, toXmlGenerator0.getFormatFeatures());
      assertFalse(toXmlGenerator0.canWriteTypeId());
      assertTrue(toXmlGenerator0.canOmitFields());
      assertFalse(toXmlGenerator0.isClosed());
      assertTrue(toXmlGenerator0.inRoot());
      assertEquals(1825, toXmlGenerator0.getFeatureMask());
      assertFalse(toXmlGenerator0.canWriteObjectId());
      assertFalse(toXmlGenerator0.canWriteBinaryNatively());
      assertEquals((-1), toXmlGenerator0.getOutputBuffered());
      assertTrue(toXmlGenerator0.canWriteFormattedNumbers());
      assertEquals(0, toXmlGenerator0.getHighestEscapedChar());
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      
      // Undeclared exception!
//      try { 
        toXmlGenerator0.writeNumber((String) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.ctc.wstx.sw.BaseStreamWriter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertNotNull(bufferRecycler0);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      assertNotNull(writerConfig0);
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertTrue(writerConfig0.willValidateContent());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertTrue(writerConfig0.willEscapeCr());
      assertFalse(writerConfig0.willValidateAttributes());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertTrue(writerConfig0.willValidateStructure());
      assertFalse(writerConfig0.willValidateNames());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      
      IOContext iOContext0 = new IOContext(bufferRecycler0, writerConfig0, false);
      assertNotNull(iOContext0);
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertTrue(writerConfig0.willValidateContent());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertTrue(writerConfig0.willEscapeCr());
      assertFalse(writerConfig0.willValidateAttributes());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertTrue(writerConfig0.willValidateStructure());
      assertFalse(writerConfig0.willValidateNames());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertFalse(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      
      NonNsStreamWriter nonNsStreamWriter0 = new NonNsStreamWriter((XmlWriter) null, "org.codehaus.stax2.ri.typed.ValueDecoderFactory$FloatArrayDecoder", writerConfig0);
      assertNotNull(nonNsStreamWriter0);
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertTrue(writerConfig0.willValidateContent());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertTrue(writerConfig0.willEscapeCr());
      assertFalse(writerConfig0.willValidateAttributes());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertTrue(writerConfig0.willValidateStructure());
      assertFalse(writerConfig0.willValidateNames());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertEquals("org.codehaus.stax2.ri.typed.ValueDecoderFactory$FloatArrayDecoder", nonNsStreamWriter0.getEncoding());
      assertEquals(0, nonNsStreamWriter0.getAttributeCount());
      assertNull(nonNsStreamWriter0.getBaseUri());
      assertEquals("1.0", nonNsStreamWriter0.getXmlVersion());
      
      QName qName0 = new QName("org.codehaus.stax2.ri.typed.ValueDecoderFactory$FloatArrayDecoder", "org.codehaus.stax2.ri.typed.ValueDecoderFactory$FloatArrayDecoder");
      assertNotNull(qName0);
      
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, (-1487), 1665, objectMapper0, nonNsStreamWriter0);
      assertNotNull(toXmlGenerator0);
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertTrue(writerConfig0.willValidateContent());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertTrue(writerConfig0.willEscapeCr());
      assertFalse(writerConfig0.willValidateAttributes());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertTrue(writerConfig0.willValidateStructure());
      assertFalse(writerConfig0.willValidateNames());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertFalse(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertEquals("org.codehaus.stax2.ri.typed.ValueDecoderFactory$FloatArrayDecoder", nonNsStreamWriter0.getEncoding());
      assertEquals(0, nonNsStreamWriter0.getAttributeCount());
      assertNull(nonNsStreamWriter0.getBaseUri());
      assertEquals("1.0", nonNsStreamWriter0.getXmlVersion());
      assertFalse(toXmlGenerator0.canWriteObjectId());
      assertTrue(toXmlGenerator0.canOmitFields());
      assertFalse(toXmlGenerator0.isClosed());
      assertTrue(toXmlGenerator0.inRoot());
      assertFalse(toXmlGenerator0.canWriteTypeId());
      assertTrue(toXmlGenerator0.canWriteFormattedNumbers());
      assertEquals(1665, toXmlGenerator0.getFormatFeatures());
      assertEquals(0, toXmlGenerator0.getHighestEscapedChar());
      assertEquals((-1487), toXmlGenerator0.getFeatureMask());
      assertFalse(toXmlGenerator0.canWriteBinaryNatively());
      assertEquals((-1), toXmlGenerator0.getOutputBuffered());
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      
      toXmlGenerator0.startWrappedValue((QName) null, qName0);
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertTrue(writerConfig0.willValidateContent());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertTrue(writerConfig0.willEscapeCr());
      assertFalse(writerConfig0.willValidateAttributes());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertTrue(writerConfig0.willValidateStructure());
      assertFalse(writerConfig0.willValidateNames());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertFalse(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertEquals("org.codehaus.stax2.ri.typed.ValueDecoderFactory$FloatArrayDecoder", nonNsStreamWriter0.getEncoding());
      assertEquals(0, nonNsStreamWriter0.getAttributeCount());
      assertNull(nonNsStreamWriter0.getBaseUri());
      assertEquals("1.0", nonNsStreamWriter0.getXmlVersion());
      assertFalse(toXmlGenerator0.canWriteObjectId());
      assertTrue(toXmlGenerator0.canOmitFields());
      assertFalse(toXmlGenerator0.isClosed());
      assertTrue(toXmlGenerator0.inRoot());
      assertFalse(toXmlGenerator0.canWriteTypeId());
      assertTrue(toXmlGenerator0.canWriteFormattedNumbers());
      assertEquals(1665, toXmlGenerator0.getFormatFeatures());
      assertEquals(0, toXmlGenerator0.getHighestEscapedChar());
      assertEquals((-1487), toXmlGenerator0.getFeatureMask());
      assertFalse(toXmlGenerator0.canWriteBinaryNatively());
      assertEquals((-1), toXmlGenerator0.getOutputBuffered());
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      
      // Undeclared exception!
//      try { 
        toXmlGenerator0.writeNumber((double) 2);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.ctc.wstx.sw.NonNsStreamWriter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertNotNull(bufferRecycler0);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      assertNotNull(iOContext0);
      assertNull(iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      assertNotNull(writerConfig0);
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertTrue(writerConfig0.willValidateContent());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertFalse(writerConfig0.willValidateNames());
      assertFalse(writerConfig0.willValidateAttributes());
      assertTrue(writerConfig0.willValidateStructure());
      assertTrue(writerConfig0.willEscapeCr());
      
      ISOLatin1XmlWriter iSOLatin1XmlWriter0 = new ISOLatin1XmlWriter((OutputStream) null, writerConfig0, false);
      assertNotNull(iSOLatin1XmlWriter0);
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertTrue(writerConfig0.willValidateContent());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertFalse(writerConfig0.willValidateNames());
      assertFalse(writerConfig0.willValidateAttributes());
      assertTrue(writerConfig0.willValidateStructure());
      assertTrue(writerConfig0.willEscapeCr());
      assertEquals(1, iSOLatin1XmlWriter0.getRow());
      
      SimpleNsStreamWriter simpleNsStreamWriter0 = new SimpleNsStreamWriter(iSOLatin1XmlWriter0, "", writerConfig0);
      assertNotNull(simpleNsStreamWriter0);
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertTrue(writerConfig0.willValidateContent());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertFalse(writerConfig0.willValidateNames());
      assertFalse(writerConfig0.willValidateAttributes());
      assertTrue(writerConfig0.willValidateStructure());
      assertTrue(writerConfig0.willEscapeCr());
      assertEquals(1, iSOLatin1XmlWriter0.getRow());
      assertEquals("1.0", simpleNsStreamWriter0.getXmlVersion());
      assertEquals(0, simpleNsStreamWriter0.getAttributeCount());
      assertNull(simpleNsStreamWriter0.getBaseUri());
      assertEquals("", simpleNsStreamWriter0.getEncoding());
      
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 0, 0, objectMapper0, simpleNsStreamWriter0);
      assertNotNull(toXmlGenerator0);
      assertNull(iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertTrue(writerConfig0.willValidateContent());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertFalse(writerConfig0.willValidateNames());
      assertFalse(writerConfig0.willValidateAttributes());
      assertTrue(writerConfig0.willValidateStructure());
      assertTrue(writerConfig0.willEscapeCr());
      assertEquals(1, iSOLatin1XmlWriter0.getRow());
      assertEquals("1.0", simpleNsStreamWriter0.getXmlVersion());
      assertEquals(0, simpleNsStreamWriter0.getAttributeCount());
      assertNull(simpleNsStreamWriter0.getBaseUri());
      assertEquals("", simpleNsStreamWriter0.getEncoding());
      assertFalse(toXmlGenerator0.canWriteObjectId());
      assertTrue(toXmlGenerator0.canWriteFormattedNumbers());
      assertFalse(toXmlGenerator0.canWriteBinaryNatively());
      assertEquals(0, toXmlGenerator0.getFeatureMask());
      assertEquals((-1), toXmlGenerator0.getOutputBuffered());
      assertEquals(0, toXmlGenerator0.getHighestEscapedChar());
      assertEquals(0, toXmlGenerator0.getFormatFeatures());
      assertFalse(toXmlGenerator0.canWriteTypeId());
      assertTrue(toXmlGenerator0.inRoot());
      assertTrue(toXmlGenerator0.canOmitFields());
      assertFalse(toXmlGenerator0.isClosed());
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      
      QName qName0 = new QName("", "");
      assertNotNull(qName0);
      
      toXmlGenerator0.startWrappedValue(qName0, qName0);
      assertNull(iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertTrue(writerConfig0.willValidateContent());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertFalse(writerConfig0.willValidateNames());
      assertFalse(writerConfig0.willValidateAttributes());
      assertTrue(writerConfig0.willValidateStructure());
      assertTrue(writerConfig0.willEscapeCr());
      assertEquals(1, iSOLatin1XmlWriter0.getRow());
      assertEquals("1.0", simpleNsStreamWriter0.getXmlVersion());
      assertEquals(0, simpleNsStreamWriter0.getAttributeCount());
      assertNull(simpleNsStreamWriter0.getBaseUri());
      assertEquals("", simpleNsStreamWriter0.getEncoding());
      assertFalse(toXmlGenerator0.canWriteObjectId());
      assertTrue(toXmlGenerator0.canWriteFormattedNumbers());
      assertFalse(toXmlGenerator0.canWriteBinaryNatively());
      assertEquals(0, toXmlGenerator0.getFeatureMask());
      assertEquals((-1), toXmlGenerator0.getOutputBuffered());
      assertEquals(0, toXmlGenerator0.getHighestEscapedChar());
      assertEquals(0, toXmlGenerator0.getFormatFeatures());
      assertFalse(toXmlGenerator0.canWriteTypeId());
      assertTrue(toXmlGenerator0.inRoot());
      assertTrue(toXmlGenerator0.canOmitFields());
      assertFalse(toXmlGenerator0.isClosed());
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      
      toXmlGenerator0.writeStartObject();
      assertNull(iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertTrue(writerConfig0.willValidateContent());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertFalse(writerConfig0.willValidateNames());
      assertFalse(writerConfig0.willValidateAttributes());
      assertTrue(writerConfig0.willValidateStructure());
      assertTrue(writerConfig0.willEscapeCr());
      assertEquals(1, iSOLatin1XmlWriter0.getRow());
      assertEquals("1.0", simpleNsStreamWriter0.getXmlVersion());
      assertEquals(0, simpleNsStreamWriter0.getAttributeCount());
      assertNull(simpleNsStreamWriter0.getBaseUri());
      assertEquals("", simpleNsStreamWriter0.getEncoding());
      assertFalse(toXmlGenerator0.canWriteObjectId());
      assertFalse(toXmlGenerator0.inRoot());
      assertTrue(toXmlGenerator0.canWriteFormattedNumbers());
      assertFalse(toXmlGenerator0.canWriteBinaryNatively());
      assertEquals(0, toXmlGenerator0.getFeatureMask());
      assertEquals((-1), toXmlGenerator0.getOutputBuffered());
      assertEquals(0, toXmlGenerator0.getHighestEscapedChar());
      assertEquals(0, toXmlGenerator0.getFormatFeatures());
      assertFalse(toXmlGenerator0.canWriteTypeId());
      assertTrue(toXmlGenerator0.canOmitFields());
      assertFalse(toXmlGenerator0.isClosed());
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      
//      try { 
        toXmlGenerator0.writeNull();
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Can not write null value, expecting field name
//         //
//         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertNotNull(bufferRecycler0);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      
      WriterConfig writerConfig0 = WriterConfig.createJ2MEDefaults();
      assertNotNull(writerConfig0);
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertTrue(writerConfig0.willEscapeCr());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertFalse(writerConfig0.willValidateAttributes());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertTrue(writerConfig0.willValidateStructure());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.willValidateContent());
      assertFalse(writerConfig0.willValidateNames());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertFalse(writerConfig0.willOutputCDataAsText());
      
      IOContext iOContext0 = new IOContext(bufferRecycler0, writerConfig0, true);
      assertNotNull(iOContext0);
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertTrue(writerConfig0.willEscapeCr());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertFalse(writerConfig0.willValidateAttributes());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertTrue(writerConfig0.willValidateStructure());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.willValidateContent());
      assertFalse(writerConfig0.willValidateNames());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertTrue(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      
      NonNsStreamWriter nonNsStreamWriter0 = new NonNsStreamWriter((XmlWriter) null, "XdIGiKH|3%{so", writerConfig0);
      assertNotNull(nonNsStreamWriter0);
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertTrue(writerConfig0.willEscapeCr());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertFalse(writerConfig0.willValidateAttributes());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertTrue(writerConfig0.willValidateStructure());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.willValidateContent());
      assertFalse(writerConfig0.willValidateNames());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertNull(nonNsStreamWriter0.getBaseUri());
      assertEquals("XdIGiKH|3%{so", nonNsStreamWriter0.getEncoding());
      assertEquals(0, nonNsStreamWriter0.getAttributeCount());
      assertEquals("1.0", nonNsStreamWriter0.getXmlVersion());
      
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 2, 0, objectMapper0, nonNsStreamWriter0);
      assertNotNull(toXmlGenerator0);
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertTrue(writerConfig0.willEscapeCr());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertFalse(writerConfig0.willValidateAttributes());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertTrue(writerConfig0.willValidateStructure());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.willValidateContent());
      assertFalse(writerConfig0.willValidateNames());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertTrue(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertNull(nonNsStreamWriter0.getBaseUri());
      assertEquals("XdIGiKH|3%{so", nonNsStreamWriter0.getEncoding());
      assertEquals(0, nonNsStreamWriter0.getAttributeCount());
      assertEquals("1.0", nonNsStreamWriter0.getXmlVersion());
      assertFalse(toXmlGenerator0.canWriteBinaryNatively());
      assertTrue(toXmlGenerator0.canOmitFields());
      assertTrue(toXmlGenerator0.canWriteFormattedNumbers());
      assertFalse(toXmlGenerator0.canWriteObjectId());
      assertFalse(toXmlGenerator0.canWriteTypeId());
      assertEquals((-1), toXmlGenerator0.getOutputBuffered());
      assertEquals(0, toXmlGenerator0.getHighestEscapedChar());
      assertFalse(toXmlGenerator0.isClosed());
      assertTrue(toXmlGenerator0.inRoot());
      assertEquals(2, toXmlGenerator0.getFeatureMask());
      assertEquals(0, toXmlGenerator0.getFormatFeatures());
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      
      // Undeclared exception!
//      try { 
        toXmlGenerator0.writeFieldName((SerializableString) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertNotNull(bufferRecycler0);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      assertNotNull(iOContext0);
      assertNull(iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      
      WriterConfig writerConfig0 = WriterConfig.createJ2MEDefaults();
      assertNotNull(writerConfig0);
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertFalse(writerConfig0.willValidateAttributes());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertTrue(writerConfig0.willEscapeCr());
      assertTrue(writerConfig0.willValidateStructure());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertFalse(writerConfig0.willValidateNames());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertFalse(writerConfig0.willFixContent());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertTrue(writerConfig0.willValidateContent());
      
      ISOLatin1XmlWriter iSOLatin1XmlWriter0 = new ISOLatin1XmlWriter((OutputStream) null, writerConfig0, false);
      assertNotNull(iSOLatin1XmlWriter0);
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertFalse(writerConfig0.willValidateAttributes());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertTrue(writerConfig0.willEscapeCr());
      assertTrue(writerConfig0.willValidateStructure());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertFalse(writerConfig0.willValidateNames());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertFalse(writerConfig0.willFixContent());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertTrue(writerConfig0.willValidateContent());
      assertEquals(1, iSOLatin1XmlWriter0.getRow());
      
      SimpleNsStreamWriter simpleNsStreamWriter0 = new SimpleNsStreamWriter(iSOLatin1XmlWriter0, "", writerConfig0);
      assertNotNull(simpleNsStreamWriter0);
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertFalse(writerConfig0.willValidateAttributes());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertTrue(writerConfig0.willEscapeCr());
      assertTrue(writerConfig0.willValidateStructure());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertFalse(writerConfig0.willValidateNames());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertFalse(writerConfig0.willFixContent());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertTrue(writerConfig0.willValidateContent());
      assertEquals(1, iSOLatin1XmlWriter0.getRow());
      assertEquals(0, simpleNsStreamWriter0.getAttributeCount());
      assertNull(simpleNsStreamWriter0.getBaseUri());
      assertEquals("1.0", simpleNsStreamWriter0.getXmlVersion());
      assertEquals("", simpleNsStreamWriter0.getEncoding());
      
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 0, 0, objectMapper0, simpleNsStreamWriter0);
      assertNotNull(toXmlGenerator0);
      assertNull(iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertFalse(writerConfig0.willValidateAttributes());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertTrue(writerConfig0.willEscapeCr());
      assertTrue(writerConfig0.willValidateStructure());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertFalse(writerConfig0.willValidateNames());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertFalse(writerConfig0.willFixContent());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertTrue(writerConfig0.willValidateContent());
      assertEquals(1, iSOLatin1XmlWriter0.getRow());
      assertEquals(0, simpleNsStreamWriter0.getAttributeCount());
      assertNull(simpleNsStreamWriter0.getBaseUri());
      assertEquals("1.0", simpleNsStreamWriter0.getXmlVersion());
      assertEquals("", simpleNsStreamWriter0.getEncoding());
      assertEquals(0, toXmlGenerator0.getFormatFeatures());
      assertEquals(0, toXmlGenerator0.getHighestEscapedChar());
      assertFalse(toXmlGenerator0.isClosed());
      assertFalse(toXmlGenerator0.canWriteTypeId());
      assertTrue(toXmlGenerator0.canWriteFormattedNumbers());
      assertTrue(toXmlGenerator0.inRoot());
      assertEquals(0, toXmlGenerator0.getFeatureMask());
      assertTrue(toXmlGenerator0.canOmitFields());
      assertEquals((-1), toXmlGenerator0.getOutputBuffered());
      assertFalse(toXmlGenerator0.canWriteObjectId());
      assertFalse(toXmlGenerator0.canWriteBinaryNatively());
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      
      QName qName0 = new QName("", "", "");
      assertNotNull(qName0);
      
      toXmlGenerator0.startWrappedValue(qName0, qName0);
      assertNull(iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertFalse(writerConfig0.willValidateAttributes());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertTrue(writerConfig0.willEscapeCr());
      assertTrue(writerConfig0.willValidateStructure());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertFalse(writerConfig0.willValidateNames());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertFalse(writerConfig0.willFixContent());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertTrue(writerConfig0.willValidateContent());
      assertEquals(1, iSOLatin1XmlWriter0.getRow());
      assertEquals(0, simpleNsStreamWriter0.getAttributeCount());
      assertNull(simpleNsStreamWriter0.getBaseUri());
      assertEquals("1.0", simpleNsStreamWriter0.getXmlVersion());
      assertEquals("", simpleNsStreamWriter0.getEncoding());
      assertEquals(0, toXmlGenerator0.getFormatFeatures());
      assertEquals(0, toXmlGenerator0.getHighestEscapedChar());
      assertFalse(toXmlGenerator0.isClosed());
      assertFalse(toXmlGenerator0.canWriteTypeId());
      assertTrue(toXmlGenerator0.canWriteFormattedNumbers());
      assertTrue(toXmlGenerator0.inRoot());
      assertEquals(0, toXmlGenerator0.getFeatureMask());
      assertTrue(toXmlGenerator0.canOmitFields());
      assertEquals((-1), toXmlGenerator0.getOutputBuffered());
      assertFalse(toXmlGenerator0.canWriteObjectId());
      assertFalse(toXmlGenerator0.canWriteBinaryNatively());
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      
      toXmlGenerator0.writeStartObject();
      assertNull(iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertFalse(writerConfig0.willValidateAttributes());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertTrue(writerConfig0.willEscapeCr());
      assertTrue(writerConfig0.willValidateStructure());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertFalse(writerConfig0.willValidateNames());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertFalse(writerConfig0.willFixContent());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertTrue(writerConfig0.willValidateContent());
      assertEquals(1, iSOLatin1XmlWriter0.getRow());
      assertEquals(0, simpleNsStreamWriter0.getAttributeCount());
      assertNull(simpleNsStreamWriter0.getBaseUri());
      assertEquals("1.0", simpleNsStreamWriter0.getXmlVersion());
      assertEquals("", simpleNsStreamWriter0.getEncoding());
      assertEquals(0, toXmlGenerator0.getFormatFeatures());
      assertEquals(0, toXmlGenerator0.getHighestEscapedChar());
      assertFalse(toXmlGenerator0.isClosed());
      assertFalse(toXmlGenerator0.canWriteTypeId());
      assertFalse(toXmlGenerator0.inRoot());
      assertTrue(toXmlGenerator0.canWriteFormattedNumbers());
      assertEquals(0, toXmlGenerator0.getFeatureMask());
      assertTrue(toXmlGenerator0.canOmitFields());
      assertEquals((-1), toXmlGenerator0.getOutputBuffered());
      assertFalse(toXmlGenerator0.canWriteObjectId());
      assertFalse(toXmlGenerator0.canWriteBinaryNatively());
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      
//      try { 
        toXmlGenerator0.writeBoolean(false);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Can not write boolean value, expecting field name
//         //
//         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertNotNull(bufferRecycler0);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      assertNotNull(iOContext0);
      assertNull(iOContext0.getEncoding());
      assertTrue(iOContext0.isResourceManaged());
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      
      WriterConfig writerConfig0 = WriterConfig.createJ2MEDefaults();
      assertNotNull(writerConfig0);
      assertFalse(writerConfig0.willValidateNames());
      assertTrue(writerConfig0.willValidateStructure());
      assertTrue(writerConfig0.willValidateContent());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertTrue(writerConfig0.willEscapeCr());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertFalse(writerConfig0.willValidateAttributes());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      
      ISOLatin1XmlWriter iSOLatin1XmlWriter0 = new ISOLatin1XmlWriter((OutputStream) null, writerConfig0, true);
      assertNotNull(iSOLatin1XmlWriter0);
      assertFalse(writerConfig0.willValidateNames());
      assertTrue(writerConfig0.willValidateStructure());
      assertTrue(writerConfig0.willValidateContent());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertTrue(writerConfig0.willEscapeCr());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertFalse(writerConfig0.willValidateAttributes());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertEquals(1, iSOLatin1XmlWriter0.getRow());
      
      SimpleNsStreamWriter simpleNsStreamWriter0 = new SimpleNsStreamWriter(iSOLatin1XmlWriter0, "", writerConfig0);
      assertNotNull(simpleNsStreamWriter0);
      assertFalse(writerConfig0.willValidateNames());
      assertTrue(writerConfig0.willValidateStructure());
      assertTrue(writerConfig0.willValidateContent());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertTrue(writerConfig0.willEscapeCr());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertFalse(writerConfig0.willValidateAttributes());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertEquals(1, iSOLatin1XmlWriter0.getRow());
      assertEquals("", simpleNsStreamWriter0.getEncoding());
      assertEquals("1.0", simpleNsStreamWriter0.getXmlVersion());
      assertEquals(0, simpleNsStreamWriter0.getAttributeCount());
      assertNull(simpleNsStreamWriter0.getBaseUri());
      
      QName qName0 = QName.valueOf("");
      assertNotNull(qName0);
      
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 2, 3, objectMapper0, simpleNsStreamWriter0);
      assertNotNull(toXmlGenerator0);
      assertNull(iOContext0.getEncoding());
      assertTrue(iOContext0.isResourceManaged());
      assertFalse(writerConfig0.willValidateNames());
      assertTrue(writerConfig0.willValidateStructure());
      assertTrue(writerConfig0.willValidateContent());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertTrue(writerConfig0.willEscapeCr());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertFalse(writerConfig0.willValidateAttributes());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertEquals(1, iSOLatin1XmlWriter0.getRow());
      assertEquals("", simpleNsStreamWriter0.getEncoding());
      assertEquals("1.0", simpleNsStreamWriter0.getXmlVersion());
      assertEquals(0, simpleNsStreamWriter0.getAttributeCount());
      assertNull(simpleNsStreamWriter0.getBaseUri());
      assertTrue(toXmlGenerator0.inRoot());
      assertTrue(toXmlGenerator0.canOmitFields());
      assertEquals(3, toXmlGenerator0.getFormatFeatures());
      assertEquals((-1), toXmlGenerator0.getOutputBuffered());
      assertFalse(toXmlGenerator0.canWriteObjectId());
      assertFalse(toXmlGenerator0.canWriteBinaryNatively());
      assertEquals(2, toXmlGenerator0.getFeatureMask());
      assertFalse(toXmlGenerator0.isClosed());
      assertEquals(0, toXmlGenerator0.getHighestEscapedChar());
      assertFalse(toXmlGenerator0.canWriteTypeId());
      assertTrue(toXmlGenerator0.canWriteFormattedNumbers());
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      
      toXmlGenerator0.startWrappedValue(qName0, qName0);
      assertNull(iOContext0.getEncoding());
      assertTrue(iOContext0.isResourceManaged());
      assertFalse(writerConfig0.willValidateNames());
      assertTrue(writerConfig0.willValidateStructure());
      assertTrue(writerConfig0.willValidateContent());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertTrue(writerConfig0.willEscapeCr());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertFalse(writerConfig0.willValidateAttributes());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertEquals(1, iSOLatin1XmlWriter0.getRow());
      assertEquals("", simpleNsStreamWriter0.getEncoding());
      assertEquals("1.0", simpleNsStreamWriter0.getXmlVersion());
      assertEquals(0, simpleNsStreamWriter0.getAttributeCount());
      assertNull(simpleNsStreamWriter0.getBaseUri());
      assertTrue(toXmlGenerator0.inRoot());
      assertTrue(toXmlGenerator0.canOmitFields());
      assertEquals(3, toXmlGenerator0.getFormatFeatures());
      assertEquals((-1), toXmlGenerator0.getOutputBuffered());
      assertFalse(toXmlGenerator0.canWriteObjectId());
      assertFalse(toXmlGenerator0.canWriteBinaryNatively());
      assertEquals(2, toXmlGenerator0.getFeatureMask());
      assertFalse(toXmlGenerator0.isClosed());
      assertEquals(0, toXmlGenerator0.getHighestEscapedChar());
      assertFalse(toXmlGenerator0.canWriteTypeId());
      assertTrue(toXmlGenerator0.canWriteFormattedNumbers());
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      
      byte[] byteArray0 = new byte[3];
      // Undeclared exception!
//      try { 
        toXmlGenerator0.writeBinary((Base64Variant) null, byteArray0, (int) (byte)0, 1305);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 3
//         //
//         verifyException("org.codehaus.stax2.ri.typed.ValueEncoderFactory$Base64Encoder", e);
//      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      
      WriterConfig writerConfig0 = WriterConfig.createJ2MEDefaults();
      assertNotNull(writerConfig0);
      assertTrue(writerConfig0.willValidateStructure());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willValidateAttributes());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertTrue(writerConfig0.willValidateContent());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertTrue(writerConfig0.willEscapeCr());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willValidateNames());
      assertFalse(writerConfig0.willOutputCDataAsText());
      
      NonNsStreamWriter nonNsStreamWriter0 = new NonNsStreamWriter((XmlWriter) null, "(#PCDATA | ", writerConfig0);
      assertNotNull(nonNsStreamWriter0);
      assertTrue(writerConfig0.willValidateStructure());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willValidateAttributes());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertTrue(writerConfig0.willValidateContent());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertTrue(writerConfig0.willEscapeCr());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willValidateNames());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertNull(nonNsStreamWriter0.getBaseUri());
      assertEquals(0, nonNsStreamWriter0.getAttributeCount());
      assertEquals("(#PCDATA | ", nonNsStreamWriter0.getEncoding());
      assertEquals("1.0", nonNsStreamWriter0.getXmlVersion());
      
      QName qName0 = new QName("(#PCDATA | ", "(#PCDATA | ");
      assertNotNull(qName0);
      
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator((IOContext) null, 0, 3, objectMapper0, nonNsStreamWriter0);
      assertNotNull(toXmlGenerator0);
      assertTrue(writerConfig0.willValidateStructure());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willValidateAttributes());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertTrue(writerConfig0.willValidateContent());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertTrue(writerConfig0.willEscapeCr());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willValidateNames());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertNull(nonNsStreamWriter0.getBaseUri());
      assertEquals(0, nonNsStreamWriter0.getAttributeCount());
      assertEquals("(#PCDATA | ", nonNsStreamWriter0.getEncoding());
      assertEquals("1.0", nonNsStreamWriter0.getXmlVersion());
      assertFalse(toXmlGenerator0.canWriteTypeId());
      assertEquals((-1), toXmlGenerator0.getOutputBuffered());
      assertFalse(toXmlGenerator0.canWriteObjectId());
      assertEquals(0, toXmlGenerator0.getFeatureMask());
      assertEquals(0, toXmlGenerator0.getHighestEscapedChar());
      assertEquals(3, toXmlGenerator0.getFormatFeatures());
      assertFalse(toXmlGenerator0.canWriteBinaryNatively());
      assertTrue(toXmlGenerator0.canWriteFormattedNumbers());
      assertTrue(toXmlGenerator0.canOmitFields());
      assertFalse(toXmlGenerator0.isClosed());
      assertTrue(toXmlGenerator0.inRoot());
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      
      // Undeclared exception!
//      try { 
        toXmlGenerator0.startWrappedValue(qName0, qName0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.ctc.wstx.sw.NonNsStreamWriter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertNotNull(bufferRecycler0);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      assertNotNull(iOContext0);
      assertNull(iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      
      WriterConfig writerConfig0 = WriterConfig.createJ2MEDefaults();
      assertNotNull(writerConfig0);
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertTrue(writerConfig0.willEscapeCr());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertFalse(writerConfig0.willValidateAttributes());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertTrue(writerConfig0.willValidateStructure());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.willValidateContent());
      assertFalse(writerConfig0.willValidateNames());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertFalse(writerConfig0.willOutputCDataAsText());
      
      ISOLatin1XmlWriter iSOLatin1XmlWriter0 = new ISOLatin1XmlWriter((OutputStream) null, writerConfig0, false);
      assertNotNull(iSOLatin1XmlWriter0);
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertTrue(writerConfig0.willEscapeCr());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertFalse(writerConfig0.willValidateAttributes());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertTrue(writerConfig0.willValidateStructure());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.willValidateContent());
      assertFalse(writerConfig0.willValidateNames());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertEquals(1, iSOLatin1XmlWriter0.getRow());
      
      SimpleNsStreamWriter simpleNsStreamWriter0 = new SimpleNsStreamWriter(iSOLatin1XmlWriter0, "VJE-Uv=CnW,k-xAI", writerConfig0);
      assertNotNull(simpleNsStreamWriter0);
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertTrue(writerConfig0.willEscapeCr());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertFalse(writerConfig0.willValidateAttributes());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertTrue(writerConfig0.willValidateStructure());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.willValidateContent());
      assertFalse(writerConfig0.willValidateNames());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertEquals(1, iSOLatin1XmlWriter0.getRow());
      assertEquals("1.0", simpleNsStreamWriter0.getXmlVersion());
      assertEquals(0, simpleNsStreamWriter0.getAttributeCount());
      assertNull(simpleNsStreamWriter0.getBaseUri());
      assertEquals("VJE-Uv=CnW,k-xAI", simpleNsStreamWriter0.getEncoding());
      
      QName qName0 = new QName("VJE-Uv=CnW,k-xAI", "VJE-Uv=CnW,k-xAI");
      assertNotNull(qName0);
      
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 2, 3, objectMapper0, simpleNsStreamWriter0);
      assertNotNull(toXmlGenerator0);
      assertNull(iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertTrue(writerConfig0.willEscapeCr());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertFalse(writerConfig0.willValidateAttributes());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertTrue(writerConfig0.willValidateStructure());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.willValidateContent());
      assertFalse(writerConfig0.willValidateNames());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertEquals(1, iSOLatin1XmlWriter0.getRow());
      assertEquals("1.0", simpleNsStreamWriter0.getXmlVersion());
      assertEquals(0, simpleNsStreamWriter0.getAttributeCount());
      assertNull(simpleNsStreamWriter0.getBaseUri());
      assertEquals("VJE-Uv=CnW,k-xAI", simpleNsStreamWriter0.getEncoding());
      assertEquals(2, toXmlGenerator0.getFeatureMask());
      assertFalse(toXmlGenerator0.canWriteObjectId());
      assertTrue(toXmlGenerator0.canWriteFormattedNumbers());
      assertFalse(toXmlGenerator0.canWriteBinaryNatively());
      assertEquals((-1), toXmlGenerator0.getOutputBuffered());
      assertEquals(0, toXmlGenerator0.getHighestEscapedChar());
      assertFalse(toXmlGenerator0.canWriteTypeId());
      assertTrue(toXmlGenerator0.inRoot());
      assertTrue(toXmlGenerator0.canOmitFields());
      assertFalse(toXmlGenerator0.isClosed());
      assertEquals(3, toXmlGenerator0.getFormatFeatures());
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      
//      try { 
        toXmlGenerator0.startWrappedValue(qName0, qName0);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Unbound namespace URI 'VJE-Uv=CnW,k-xAI'
//         //
//         verifyException("com.fasterxml.jackson.dataformat.xml.util.StaxUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertNotNull(bufferRecycler0);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      assertNotNull(iOContext0);
      assertTrue(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      assertNotNull(writerConfig0);
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willValidateNames());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertFalse(writerConfig0.willValidateAttributes());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertTrue(writerConfig0.willValidateStructure());
      assertTrue(writerConfig0.willEscapeCr());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertTrue(writerConfig0.willValidateContent());
      
      ISOLatin1XmlWriter iSOLatin1XmlWriter0 = new ISOLatin1XmlWriter((OutputStream) null, writerConfig0, true);
      assertNotNull(iSOLatin1XmlWriter0);
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willValidateNames());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertFalse(writerConfig0.willValidateAttributes());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertTrue(writerConfig0.willValidateStructure());
      assertTrue(writerConfig0.willEscapeCr());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertTrue(writerConfig0.willValidateContent());
      assertEquals(1, iSOLatin1XmlWriter0.getRow());
      
      SimpleNsStreamWriter simpleNsStreamWriter0 = new SimpleNsStreamWriter(iSOLatin1XmlWriter0, "", writerConfig0);
      assertNotNull(simpleNsStreamWriter0);
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willValidateNames());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertFalse(writerConfig0.willValidateAttributes());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertTrue(writerConfig0.willValidateStructure());
      assertTrue(writerConfig0.willEscapeCr());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertTrue(writerConfig0.willValidateContent());
      assertEquals(1, iSOLatin1XmlWriter0.getRow());
      assertEquals("", simpleNsStreamWriter0.getEncoding());
      assertEquals("1.0", simpleNsStreamWriter0.getXmlVersion());
      assertEquals(0, simpleNsStreamWriter0.getAttributeCount());
      assertNull(simpleNsStreamWriter0.getBaseUri());
      
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 3, 2, objectMapper0, simpleNsStreamWriter0);
      assertNotNull(toXmlGenerator0);
      assertTrue(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willValidateNames());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertFalse(writerConfig0.willValidateAttributes());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertTrue(writerConfig0.willValidateStructure());
      assertTrue(writerConfig0.willEscapeCr());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertTrue(writerConfig0.willValidateContent());
      assertEquals(1, iSOLatin1XmlWriter0.getRow());
      assertEquals("", simpleNsStreamWriter0.getEncoding());
      assertEquals("1.0", simpleNsStreamWriter0.getXmlVersion());
      assertEquals(0, simpleNsStreamWriter0.getAttributeCount());
      assertNull(simpleNsStreamWriter0.getBaseUri());
      assertTrue(toXmlGenerator0.inRoot());
      assertTrue(toXmlGenerator0.canOmitFields());
      assertTrue(toXmlGenerator0.canWriteFormattedNumbers());
      assertEquals(2, toXmlGenerator0.getFormatFeatures());
      assertFalse(toXmlGenerator0.canWriteTypeId());
      assertFalse(toXmlGenerator0.isClosed());
      assertEquals(0, toXmlGenerator0.getHighestEscapedChar());
      assertEquals((-1), toXmlGenerator0.getOutputBuffered());
      assertEquals(3, toXmlGenerator0.getFeatureMask());
      assertFalse(toXmlGenerator0.canWriteObjectId());
      assertFalse(toXmlGenerator0.canWriteBinaryNatively());
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      
      toXmlGenerator0.writeRaw("");
      assertTrue(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willValidateNames());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertFalse(writerConfig0.willValidateAttributes());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertTrue(writerConfig0.willValidateStructure());
      assertTrue(writerConfig0.willEscapeCr());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertTrue(writerConfig0.willValidateContent());
      assertEquals(1, iSOLatin1XmlWriter0.getRow());
      assertEquals("", simpleNsStreamWriter0.getEncoding());
      assertEquals("1.0", simpleNsStreamWriter0.getXmlVersion());
      assertEquals(0, simpleNsStreamWriter0.getAttributeCount());
      assertNull(simpleNsStreamWriter0.getBaseUri());
      assertTrue(toXmlGenerator0.inRoot());
      assertTrue(toXmlGenerator0.canOmitFields());
      assertTrue(toXmlGenerator0.canWriteFormattedNumbers());
      assertEquals(2, toXmlGenerator0.getFormatFeatures());
      assertFalse(toXmlGenerator0.canWriteTypeId());
      assertFalse(toXmlGenerator0.isClosed());
      assertEquals(0, toXmlGenerator0.getHighestEscapedChar());
      assertEquals((-1), toXmlGenerator0.getOutputBuffered());
      assertEquals(3, toXmlGenerator0.getFeatureMask());
      assertFalse(toXmlGenerator0.canWriteObjectId());
      assertFalse(toXmlGenerator0.canWriteBinaryNatively());
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      
//      try { 
        toXmlGenerator0.initGenerator();
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Can not output XML declaration, after other output has already been done.
//         //
//         verifyException("com.fasterxml.jackson.dataformat.xml.util.StaxUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertNotNull(bufferRecycler0);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      
      WriterConfig writerConfig0 = WriterConfig.createJ2MEDefaults();
      assertNotNull(writerConfig0);
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertTrue(writerConfig0.willEscapeCr());
      assertFalse(writerConfig0.willValidateAttributes());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertFalse(writerConfig0.willValidateNames());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.willValidateStructure());
      assertTrue(writerConfig0.willValidateContent());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      
      IOContext iOContext0 = new IOContext(bufferRecycler0, writerConfig0, false);
      assertNotNull(iOContext0);
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertTrue(writerConfig0.willEscapeCr());
      assertFalse(writerConfig0.willValidateAttributes());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertFalse(writerConfig0.willValidateNames());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.willValidateStructure());
      assertTrue(writerConfig0.willValidateContent());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertNull(iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      
      NonNsStreamWriter nonNsStreamWriter0 = new NonNsStreamWriter((XmlWriter) null, "|XdIGiKH%{.so", writerConfig0);
      assertNotNull(nonNsStreamWriter0);
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertTrue(writerConfig0.willEscapeCr());
      assertFalse(writerConfig0.willValidateAttributes());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertFalse(writerConfig0.willValidateNames());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.willValidateStructure());
      assertTrue(writerConfig0.willValidateContent());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertEquals("1.0", nonNsStreamWriter0.getXmlVersion());
      assertEquals("|XdIGiKH%{.so", nonNsStreamWriter0.getEncoding());
      assertNull(nonNsStreamWriter0.getBaseUri());
      assertEquals(0, nonNsStreamWriter0.getAttributeCount());
      
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 2, 2, objectMapper0, nonNsStreamWriter0);
      assertNotNull(toXmlGenerator0);
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertTrue(writerConfig0.willEscapeCr());
      assertFalse(writerConfig0.willValidateAttributes());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertFalse(writerConfig0.willValidateNames());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.willValidateStructure());
      assertTrue(writerConfig0.willValidateContent());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertNull(iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertEquals("1.0", nonNsStreamWriter0.getXmlVersion());
      assertEquals("|XdIGiKH%{.so", nonNsStreamWriter0.getEncoding());
      assertNull(nonNsStreamWriter0.getBaseUri());
      assertEquals(0, nonNsStreamWriter0.getAttributeCount());
      assertFalse(toXmlGenerator0.isClosed());
      assertEquals((-1), toXmlGenerator0.getOutputBuffered());
      assertFalse(toXmlGenerator0.canWriteBinaryNatively());
      assertFalse(toXmlGenerator0.canWriteObjectId());
      assertEquals(0, toXmlGenerator0.getHighestEscapedChar());
      assertTrue(toXmlGenerator0.inRoot());
      assertEquals(2, toXmlGenerator0.getFeatureMask());
      assertTrue(toXmlGenerator0.canWriteFormattedNumbers());
      assertEquals(2, toXmlGenerator0.getFormatFeatures());
      assertTrue(toXmlGenerator0.canOmitFields());
      assertFalse(toXmlGenerator0.canWriteTypeId());
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      
      // Undeclared exception!
//      try { 
        toXmlGenerator0.handleMissingName();
//        fail("Expecting exception: IllegalStateException");
      
//      } catch(IllegalStateException e) {
//         //
//         // No element/attribute name specified when trying to output element
//         //
//         verifyException("com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertNotNull(bufferRecycler0);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      assertNotNull(iOContext0);
      assertNull(iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      assertNotNull(writerConfig0);
      assertTrue(writerConfig0.willValidateStructure());
      assertFalse(writerConfig0.willValidateNames());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertFalse(writerConfig0.willValidateAttributes());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertTrue(writerConfig0.willEscapeCr());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.willValidateContent());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertTrue(writerConfig0.willSupportNamespaces());
      
      ISOLatin1XmlWriter iSOLatin1XmlWriter0 = new ISOLatin1XmlWriter((OutputStream) null, writerConfig0, false);
      assertNotNull(iSOLatin1XmlWriter0);
      assertTrue(writerConfig0.willValidateStructure());
      assertFalse(writerConfig0.willValidateNames());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertFalse(writerConfig0.willValidateAttributes());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertTrue(writerConfig0.willEscapeCr());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.willValidateContent());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertEquals(1, iSOLatin1XmlWriter0.getRow());
      
      SimpleNsStreamWriter simpleNsStreamWriter0 = new SimpleNsStreamWriter(iSOLatin1XmlWriter0, "Can not write a field name, expecting a value", writerConfig0);
      assertNotNull(simpleNsStreamWriter0);
      assertTrue(writerConfig0.willValidateStructure());
      assertFalse(writerConfig0.willValidateNames());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertFalse(writerConfig0.willValidateAttributes());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertTrue(writerConfig0.willEscapeCr());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.willValidateContent());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertEquals(1, iSOLatin1XmlWriter0.getRow());
      assertEquals("1.0", simpleNsStreamWriter0.getXmlVersion());
      assertEquals(0, simpleNsStreamWriter0.getAttributeCount());
      assertEquals("Can not write a field name, expecting a value", simpleNsStreamWriter0.getEncoding());
      assertNull(simpleNsStreamWriter0.getBaseUri());
      
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 5, 125, objectMapper0, simpleNsStreamWriter0);
      assertNotNull(toXmlGenerator0);
      assertNull(iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertTrue(writerConfig0.willValidateStructure());
      assertFalse(writerConfig0.willValidateNames());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertFalse(writerConfig0.willValidateAttributes());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertTrue(writerConfig0.willEscapeCr());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.willValidateContent());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertEquals(1, iSOLatin1XmlWriter0.getRow());
      assertEquals("1.0", simpleNsStreamWriter0.getXmlVersion());
      assertEquals(0, simpleNsStreamWriter0.getAttributeCount());
      assertEquals("Can not write a field name, expecting a value", simpleNsStreamWriter0.getEncoding());
      assertNull(simpleNsStreamWriter0.getBaseUri());
      assertEquals((-1), toXmlGenerator0.getOutputBuffered());
      assertEquals(5, toXmlGenerator0.getFeatureMask());
      assertFalse(toXmlGenerator0.canWriteTypeId());
      assertFalse(toXmlGenerator0.canWriteObjectId());
      assertEquals(125, toXmlGenerator0.getFormatFeatures());
      assertEquals(0, toXmlGenerator0.getHighestEscapedChar());
      assertFalse(toXmlGenerator0.canWriteBinaryNatively());
      assertTrue(toXmlGenerator0.canWriteFormattedNumbers());
      assertTrue(toXmlGenerator0.inRoot());
      assertTrue(toXmlGenerator0.canOmitFields());
      assertFalse(toXmlGenerator0.isClosed());
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      
      // Undeclared exception!
//      try { 
        toXmlGenerator0.enable((ToXmlGenerator.Feature) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertNotNull(bufferRecycler0);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      assertNotNull(writerConfig0);
      assertFalse(writerConfig0.willValidateAttributes());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.willValidateContent());
      assertTrue(writerConfig0.willEscapeCr());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertFalse(writerConfig0.willValidateNames());
      assertTrue(writerConfig0.willValidateStructure());
      assertTrue(writerConfig0.willSupportNamespaces());
      
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      
      Class<Integer> class0 = Integer.class;
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("esR/?r|w'?LJ?gO]|", true);
      assertNotNull(mockFileOutputStream0);
      
      AsciiXmlWriter asciiXmlWriter0 = new AsciiXmlWriter(mockFileOutputStream0, writerConfig0, false);
      assertNotNull(asciiXmlWriter0);
      assertFalse(writerConfig0.willValidateAttributes());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.willValidateContent());
      assertTrue(writerConfig0.willEscapeCr());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertFalse(writerConfig0.willValidateNames());
      assertTrue(writerConfig0.willValidateStructure());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertEquals(1, asciiXmlWriter0.getRow());
      
      NonNsStreamWriter nonNsStreamWriter0 = new NonNsStreamWriter(asciiXmlWriter0, "esR/?r|w'?LJ?gO]|", writerConfig0);
      assertNotNull(nonNsStreamWriter0);
      assertFalse(writerConfig0.willValidateAttributes());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.willValidateContent());
      assertTrue(writerConfig0.willEscapeCr());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertFalse(writerConfig0.willValidateNames());
      assertTrue(writerConfig0.willValidateStructure());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertEquals(1, asciiXmlWriter0.getRow());
      assertEquals(0, nonNsStreamWriter0.getAttributeCount());
      assertNull(nonNsStreamWriter0.getBaseUri());
      assertEquals("1.0", nonNsStreamWriter0.getXmlVersion());
      assertEquals("esR/?r|w'?LJ?gO]|", nonNsStreamWriter0.getEncoding());
      
      IOContext iOContext0 = new IOContext(bufferRecycler0, class0, true);
      assertNotNull(iOContext0);
      assertTrue(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, (-1369), (-696), objectMapper0, nonNsStreamWriter0);
      assertNotNull(toXmlGenerator0);
      assertFalse(writerConfig0.willValidateAttributes());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.willValidateContent());
      assertTrue(writerConfig0.willEscapeCr());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertFalse(writerConfig0.willValidateNames());
      assertTrue(writerConfig0.willValidateStructure());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertEquals(1, asciiXmlWriter0.getRow());
      assertEquals(0, nonNsStreamWriter0.getAttributeCount());
      assertNull(nonNsStreamWriter0.getBaseUri());
      assertEquals("1.0", nonNsStreamWriter0.getXmlVersion());
      assertEquals("esR/?r|w'?LJ?gO]|", nonNsStreamWriter0.getEncoding());
      assertTrue(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertFalse(toXmlGenerator0.isClosed());
      assertEquals(0, toXmlGenerator0.getHighestEscapedChar());
      assertEquals((-1369), toXmlGenerator0.getFeatureMask());
      assertFalse(toXmlGenerator0.canWriteTypeId());
      assertTrue(toXmlGenerator0.inRoot());
      assertTrue(toXmlGenerator0.canOmitFields());
      assertTrue(toXmlGenerator0.canWriteFormattedNumbers());
      assertEquals((-696), toXmlGenerator0.getFormatFeatures());
      assertEquals((-1), toXmlGenerator0.getOutputBuffered());
      assertFalse(toXmlGenerator0.canWriteObjectId());
      assertFalse(toXmlGenerator0.canWriteBinaryNatively());
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      
      // Undeclared exception!
//      try { 
        toXmlGenerator0.configure((ToXmlGenerator.Feature) null, false);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertNotNull(bufferRecycler0);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      assertNotNull(iOContext0);
      assertFalse(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      assertNotNull(writerConfig0);
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertTrue(writerConfig0.willEscapeCr());
      assertTrue(writerConfig0.willValidateStructure());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertFalse(writerConfig0.willValidateNames());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertTrue(writerConfig0.willValidateContent());
      assertFalse(writerConfig0.willValidateAttributes());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willFixContent());
      
      ISOLatin1XmlWriter iSOLatin1XmlWriter0 = new ISOLatin1XmlWriter((OutputStream) null, writerConfig0, false);
      assertNotNull(iSOLatin1XmlWriter0);
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertTrue(writerConfig0.willEscapeCr());
      assertTrue(writerConfig0.willValidateStructure());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertFalse(writerConfig0.willValidateNames());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertTrue(writerConfig0.willValidateContent());
      assertFalse(writerConfig0.willValidateAttributes());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertEquals(1, iSOLatin1XmlWriter0.getRow());
      
      SimpleNsStreamWriter simpleNsStreamWriter0 = new SimpleNsStreamWriter(iSOLatin1XmlWriter0, "", writerConfig0);
      assertNotNull(simpleNsStreamWriter0);
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertTrue(writerConfig0.willEscapeCr());
      assertTrue(writerConfig0.willValidateStructure());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertFalse(writerConfig0.willValidateNames());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertTrue(writerConfig0.willValidateContent());
      assertFalse(writerConfig0.willValidateAttributes());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertEquals(1, iSOLatin1XmlWriter0.getRow());
      assertNull(simpleNsStreamWriter0.getBaseUri());
      assertEquals(0, simpleNsStreamWriter0.getAttributeCount());
      assertEquals("", simpleNsStreamWriter0.getEncoding());
      assertEquals("1.0", simpleNsStreamWriter0.getXmlVersion());
      
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 0, 0, objectMapper0, simpleNsStreamWriter0);
      assertNotNull(toXmlGenerator0);
      assertFalse(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertTrue(writerConfig0.willEscapeCr());
      assertTrue(writerConfig0.willValidateStructure());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertFalse(writerConfig0.willValidateNames());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertTrue(writerConfig0.willValidateContent());
      assertFalse(writerConfig0.willValidateAttributes());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertEquals(1, iSOLatin1XmlWriter0.getRow());
      assertNull(simpleNsStreamWriter0.getBaseUri());
      assertEquals(0, simpleNsStreamWriter0.getAttributeCount());
      assertEquals("", simpleNsStreamWriter0.getEncoding());
      assertEquals("1.0", simpleNsStreamWriter0.getXmlVersion());
      assertFalse(toXmlGenerator0.canWriteBinaryNatively());
      assertTrue(toXmlGenerator0.canOmitFields());
      assertTrue(toXmlGenerator0.inRoot());
      assertEquals(0, toXmlGenerator0.getFeatureMask());
      assertEquals(0, toXmlGenerator0.getFormatFeatures());
      assertEquals((-1), toXmlGenerator0.getOutputBuffered());
      assertFalse(toXmlGenerator0.canWriteTypeId());
      assertFalse(toXmlGenerator0.canWriteObjectId());
      assertFalse(toXmlGenerator0.isClosed());
      assertEquals(0, toXmlGenerator0.getHighestEscapedChar());
      assertTrue(toXmlGenerator0.canWriteFormattedNumbers());
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      
      QName qName0 = new QName("", "");
      assertNotNull(qName0);
      
      toXmlGenerator0.startWrappedValue(qName0, qName0);
      assertFalse(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertTrue(writerConfig0.willEscapeCr());
      assertTrue(writerConfig0.willValidateStructure());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertFalse(writerConfig0.willValidateNames());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertTrue(writerConfig0.willValidateContent());
      assertFalse(writerConfig0.willValidateAttributes());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertEquals(1, iSOLatin1XmlWriter0.getRow());
      assertNull(simpleNsStreamWriter0.getBaseUri());
      assertEquals(0, simpleNsStreamWriter0.getAttributeCount());
      assertEquals("", simpleNsStreamWriter0.getEncoding());
      assertEquals("1.0", simpleNsStreamWriter0.getXmlVersion());
      assertFalse(toXmlGenerator0.canWriteBinaryNatively());
      assertTrue(toXmlGenerator0.canOmitFields());
      assertTrue(toXmlGenerator0.inRoot());
      assertEquals(0, toXmlGenerator0.getFeatureMask());
      assertEquals(0, toXmlGenerator0.getFormatFeatures());
      assertEquals((-1), toXmlGenerator0.getOutputBuffered());
      assertFalse(toXmlGenerator0.canWriteTypeId());
      assertFalse(toXmlGenerator0.canWriteObjectId());
      assertFalse(toXmlGenerator0.isClosed());
      assertEquals(0, toXmlGenerator0.getHighestEscapedChar());
      assertTrue(toXmlGenerator0.canWriteFormattedNumbers());
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      
      toXmlGenerator0.writeStartObject();
      assertFalse(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertTrue(writerConfig0.willEscapeCr());
      assertTrue(writerConfig0.willValidateStructure());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertFalse(writerConfig0.willValidateNames());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertTrue(writerConfig0.willValidateContent());
      assertFalse(writerConfig0.willValidateAttributes());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertEquals(1, iSOLatin1XmlWriter0.getRow());
      assertNull(simpleNsStreamWriter0.getBaseUri());
      assertEquals(0, simpleNsStreamWriter0.getAttributeCount());
      assertEquals("", simpleNsStreamWriter0.getEncoding());
      assertEquals("1.0", simpleNsStreamWriter0.getXmlVersion());
      assertFalse(toXmlGenerator0.canWriteBinaryNatively());
      assertTrue(toXmlGenerator0.canOmitFields());
      assertEquals(0, toXmlGenerator0.getFeatureMask());
      assertEquals(0, toXmlGenerator0.getFormatFeatures());
      assertEquals((-1), toXmlGenerator0.getOutputBuffered());
      assertFalse(toXmlGenerator0.canWriteTypeId());
      assertFalse(toXmlGenerator0.canWriteObjectId());
      assertFalse(toXmlGenerator0.isClosed());
      assertEquals(0, toXmlGenerator0.getHighestEscapedChar());
      assertFalse(toXmlGenerator0.inRoot());
      assertTrue(toXmlGenerator0.canWriteFormattedNumbers());
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      
//      try { 
        toXmlGenerator0._verifyValueWrite("");
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Can not , expecting field name
//         //
//         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertNotNull(bufferRecycler0);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      
      WriterConfig writerConfig0 = WriterConfig.createJ2MEDefaults();
      assertNotNull(writerConfig0);
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertTrue(writerConfig0.willValidateStructure());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willValidateNames());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertTrue(writerConfig0.willEscapeCr());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willValidateAttributes());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertTrue(writerConfig0.willValidateContent());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      
      IOContext iOContext0 = new IOContext(bufferRecycler0, "", false);
      assertNotNull(iOContext0);
      assertFalse(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      
      NonNsStreamWriter nonNsStreamWriter0 = new NonNsStreamWriter((XmlWriter) null, "", writerConfig0);
      assertNotNull(nonNsStreamWriter0);
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertTrue(writerConfig0.willValidateStructure());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willValidateNames());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertTrue(writerConfig0.willEscapeCr());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willValidateAttributes());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertTrue(writerConfig0.willValidateContent());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertNull(nonNsStreamWriter0.getBaseUri());
      assertEquals("1.0", nonNsStreamWriter0.getXmlVersion());
      assertEquals("", nonNsStreamWriter0.getEncoding());
      assertEquals(0, nonNsStreamWriter0.getAttributeCount());
      
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 0, 3, objectMapper0, nonNsStreamWriter0);
      assertNotNull(toXmlGenerator0);
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertTrue(writerConfig0.willValidateStructure());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willValidateNames());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertTrue(writerConfig0.willEscapeCr());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willValidateAttributes());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertTrue(writerConfig0.willValidateContent());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertFalse(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertNull(nonNsStreamWriter0.getBaseUri());
      assertEquals("1.0", nonNsStreamWriter0.getXmlVersion());
      assertEquals("", nonNsStreamWriter0.getEncoding());
      assertEquals(0, nonNsStreamWriter0.getAttributeCount());
      assertTrue(toXmlGenerator0.canWriteFormattedNumbers());
      assertTrue(toXmlGenerator0.canOmitFields());
      assertFalse(toXmlGenerator0.isClosed());
      assertTrue(toXmlGenerator0.inRoot());
      assertFalse(toXmlGenerator0.canWriteTypeId());
      assertEquals(3, toXmlGenerator0.getFormatFeatures());
      assertFalse(toXmlGenerator0.canWriteObjectId());
      assertEquals(0, toXmlGenerator0.getHighestEscapedChar());
      assertFalse(toXmlGenerator0.canWriteBinaryNatively());
      assertEquals(0, toXmlGenerator0.getFeatureMask());
      assertEquals((-1), toXmlGenerator0.getOutputBuffered());
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      
//      try { 
        toXmlGenerator0._reportUnimplementedStax2("");
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Underlying Stax XMLStreamWriter (of type com.ctc.wstx.sw.NonNsStreamWriter) does not implement Stax2 API natively and is missing method '': this breaks functionality such as indentation that relies on it. You need to upgrade to using compliant Stax implementation like Woodstox or Aalto
//         //
//         verifyException("com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      
      ToXmlGenerator toXmlGenerator0 = null;
//      try {
        toXmlGenerator0 = new ToXmlGenerator((IOContext) null, 0, 0, objectMapper0, (XMLStreamWriter) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.codehaus.stax2.ri.Stax2WriterAdapter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertNotNull(bufferRecycler0);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      assertNotNull(iOContext0);
      assertNull(iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      
      WriterConfig writerConfig0 = WriterConfig.createJ2MEDefaults();
      assertNotNull(writerConfig0);
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertTrue(writerConfig0.willEscapeCr());
      assertTrue(writerConfig0.willValidateStructure());
      assertFalse(writerConfig0.willValidateAttributes());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertFalse(writerConfig0.willValidateNames());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.willValidateContent());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      
      ISOLatin1XmlWriter iSOLatin1XmlWriter0 = new ISOLatin1XmlWriter((OutputStream) null, writerConfig0, false);
      assertNotNull(iSOLatin1XmlWriter0);
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertTrue(writerConfig0.willEscapeCr());
      assertTrue(writerConfig0.willValidateStructure());
      assertFalse(writerConfig0.willValidateAttributes());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertFalse(writerConfig0.willValidateNames());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.willValidateContent());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertEquals(1, iSOLatin1XmlWriter0.getRow());
      
      SimpleNsStreamWriter simpleNsStreamWriter0 = new SimpleNsStreamWriter(iSOLatin1XmlWriter0, "", writerConfig0);
      assertNotNull(simpleNsStreamWriter0);
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertTrue(writerConfig0.willEscapeCr());
      assertTrue(writerConfig0.willValidateStructure());
      assertFalse(writerConfig0.willValidateAttributes());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertFalse(writerConfig0.willValidateNames());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.willValidateContent());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertEquals(1, iSOLatin1XmlWriter0.getRow());
      assertNull(simpleNsStreamWriter0.getBaseUri());
      assertEquals("", simpleNsStreamWriter0.getEncoding());
      assertEquals(0, simpleNsStreamWriter0.getAttributeCount());
      assertEquals("1.0", simpleNsStreamWriter0.getXmlVersion());
      
      QName qName0 = new QName("", "");
      assertNotNull(qName0);
      
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 2, 3, objectMapper0, simpleNsStreamWriter0);
      assertNotNull(toXmlGenerator0);
      assertNull(iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertTrue(writerConfig0.willEscapeCr());
      assertTrue(writerConfig0.willValidateStructure());
      assertFalse(writerConfig0.willValidateAttributes());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertFalse(writerConfig0.willValidateNames());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.willValidateContent());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertEquals(1, iSOLatin1XmlWriter0.getRow());
      assertNull(simpleNsStreamWriter0.getBaseUri());
      assertEquals("", simpleNsStreamWriter0.getEncoding());
      assertEquals(0, simpleNsStreamWriter0.getAttributeCount());
      assertEquals("1.0", simpleNsStreamWriter0.getXmlVersion());
      assertFalse(toXmlGenerator0.isClosed());
      assertEquals(0, toXmlGenerator0.getHighestEscapedChar());
      assertEquals(2, toXmlGenerator0.getFeatureMask());
      assertEquals((-1), toXmlGenerator0.getOutputBuffered());
      assertFalse(toXmlGenerator0.canWriteObjectId());
      assertFalse(toXmlGenerator0.canWriteBinaryNatively());
      assertTrue(toXmlGenerator0.canWriteFormattedNumbers());
      assertTrue(toXmlGenerator0.canOmitFields());
      assertEquals(3, toXmlGenerator0.getFormatFeatures());
      assertTrue(toXmlGenerator0.inRoot());
      assertFalse(toXmlGenerator0.canWriteTypeId());
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      
      toXmlGenerator0.startWrappedValue(qName0, qName0);
      assertNull(iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertTrue(writerConfig0.willEscapeCr());
      assertTrue(writerConfig0.willValidateStructure());
      assertFalse(writerConfig0.willValidateAttributes());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertFalse(writerConfig0.willValidateNames());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.willValidateContent());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertEquals(1, iSOLatin1XmlWriter0.getRow());
      assertNull(simpleNsStreamWriter0.getBaseUri());
      assertEquals("", simpleNsStreamWriter0.getEncoding());
      assertEquals(0, simpleNsStreamWriter0.getAttributeCount());
      assertEquals("1.0", simpleNsStreamWriter0.getXmlVersion());
      assertFalse(toXmlGenerator0.isClosed());
      assertEquals(0, toXmlGenerator0.getHighestEscapedChar());
      assertEquals(2, toXmlGenerator0.getFeatureMask());
      assertEquals((-1), toXmlGenerator0.getOutputBuffered());
      assertFalse(toXmlGenerator0.canWriteObjectId());
      assertFalse(toXmlGenerator0.canWriteBinaryNatively());
      assertTrue(toXmlGenerator0.canWriteFormattedNumbers());
      assertTrue(toXmlGenerator0.canOmitFields());
      assertEquals(3, toXmlGenerator0.getFormatFeatures());
      assertTrue(toXmlGenerator0.inRoot());
      assertFalse(toXmlGenerator0.canWriteTypeId());
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      
      toXmlGenerator0.writeStartObject();
      assertNull(iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertTrue(writerConfig0.willEscapeCr());
      assertTrue(writerConfig0.willValidateStructure());
      assertFalse(writerConfig0.willValidateAttributes());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertFalse(writerConfig0.willValidateNames());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.willValidateContent());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertEquals(1, iSOLatin1XmlWriter0.getRow());
      assertNull(simpleNsStreamWriter0.getBaseUri());
      assertEquals("", simpleNsStreamWriter0.getEncoding());
      assertEquals(0, simpleNsStreamWriter0.getAttributeCount());
      assertEquals("1.0", simpleNsStreamWriter0.getXmlVersion());
      assertFalse(toXmlGenerator0.inRoot());
      assertFalse(toXmlGenerator0.isClosed());
      assertEquals(0, toXmlGenerator0.getHighestEscapedChar());
      assertEquals(2, toXmlGenerator0.getFeatureMask());
      assertEquals((-1), toXmlGenerator0.getOutputBuffered());
      assertFalse(toXmlGenerator0.canWriteObjectId());
      assertFalse(toXmlGenerator0.canWriteBinaryNatively());
      assertTrue(toXmlGenerator0.canWriteFormattedNumbers());
      assertTrue(toXmlGenerator0.canOmitFields());
      assertEquals(3, toXmlGenerator0.getFormatFeatures());
      assertFalse(toXmlGenerator0.canWriteTypeId());
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      
//      try { 
        toXmlGenerator0.writeNumber((float) 3);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Can not write number, expecting field name
//         //
//         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertNotNull(bufferRecycler0);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      
      WriterConfig writerConfig0 = WriterConfig.createJ2MEDefaults();
      assertNotNull(writerConfig0);
      assertFalse(writerConfig0.willValidateNames());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertTrue(writerConfig0.willValidateStructure());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.willValidateContent());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willValidateAttributes());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertTrue(writerConfig0.willEscapeCr());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertFalse(writerConfig0.willOutputCDataAsText());
      
      IOContext iOContext0 = new IOContext(bufferRecycler0, writerConfig0, false);
      assertNotNull(iOContext0);
      assertFalse(writerConfig0.willValidateNames());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertTrue(writerConfig0.willValidateStructure());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.willValidateContent());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willValidateAttributes());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertTrue(writerConfig0.willEscapeCr());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertNull(iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      
      NonNsStreamWriter nonNsStreamWriter0 = new NonNsStreamWriter((XmlWriter) null, "|XdIGiKH%{.so", writerConfig0);
      assertNotNull(nonNsStreamWriter0);
      assertFalse(writerConfig0.willValidateNames());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertTrue(writerConfig0.willValidateStructure());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.willValidateContent());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willValidateAttributes());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertTrue(writerConfig0.willEscapeCr());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertEquals("1.0", nonNsStreamWriter0.getXmlVersion());
      assertEquals("|XdIGiKH%{.so", nonNsStreamWriter0.getEncoding());
      assertEquals(0, nonNsStreamWriter0.getAttributeCount());
      assertNull(nonNsStreamWriter0.getBaseUri());
      
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 2, 2, objectMapper0, nonNsStreamWriter0);
      assertNotNull(toXmlGenerator0);
      assertFalse(writerConfig0.willValidateNames());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertTrue(writerConfig0.willValidateStructure());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.willValidateContent());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willValidateAttributes());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertTrue(writerConfig0.willEscapeCr());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertNull(iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertEquals("1.0", nonNsStreamWriter0.getXmlVersion());
      assertEquals("|XdIGiKH%{.so", nonNsStreamWriter0.getEncoding());
      assertEquals(0, nonNsStreamWriter0.getAttributeCount());
      assertNull(nonNsStreamWriter0.getBaseUri());
      assertFalse(toXmlGenerator0.canWriteTypeId());
      assertEquals((-1), toXmlGenerator0.getOutputBuffered());
      assertFalse(toXmlGenerator0.isClosed());
      assertEquals(0, toXmlGenerator0.getHighestEscapedChar());
      assertEquals(2, toXmlGenerator0.getFeatureMask());
      assertFalse(toXmlGenerator0.canWriteObjectId());
      assertTrue(toXmlGenerator0.canWriteFormattedNumbers());
      assertFalse(toXmlGenerator0.canWriteBinaryNatively());
      assertTrue(toXmlGenerator0.inRoot());
      assertEquals(2, toXmlGenerator0.getFormatFeatures());
      assertTrue(toXmlGenerator0.canOmitFields());
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      
      // Undeclared exception!
//      try { 
        toXmlGenerator0.writeNull();
//        fail("Expecting exception: IllegalStateException");
      
//      } catch(IllegalStateException e) {
//         //
//         // No element/attribute name specified when trying to output element
//         //
//         verifyException("com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      
      WriterConfig writerConfig0 = WriterConfig.createJ2MEDefaults();
      assertNotNull(writerConfig0);
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertTrue(writerConfig0.willEscapeCr());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willValidateAttributes());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertTrue(writerConfig0.willValidateStructure());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertFalse(writerConfig0.willValidateNames());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertFalse(writerConfig0.willFixContent());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertTrue(writerConfig0.willValidateContent());
      assertEquals("woodstox", writerConfig0.getImplName());
      
      NonNsStreamWriter nonNsStreamWriter0 = new NonNsStreamWriter((XmlWriter) null, "(XPCDATA | ", writerConfig0);
      assertNotNull(nonNsStreamWriter0);
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertTrue(writerConfig0.willEscapeCr());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willValidateAttributes());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertTrue(writerConfig0.willValidateStructure());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertFalse(writerConfig0.willValidateNames());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertFalse(writerConfig0.willFixContent());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertTrue(writerConfig0.willValidateContent());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertEquals("1.0", nonNsStreamWriter0.getXmlVersion());
      assertEquals("(XPCDATA | ", nonNsStreamWriter0.getEncoding());
      assertNull(nonNsStreamWriter0.getBaseUri());
      assertEquals(0, nonNsStreamWriter0.getAttributeCount());
      
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator((IOContext) null, 3, 0, objectMapper0, nonNsStreamWriter0);
      assertNotNull(toXmlGenerator0);
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertTrue(writerConfig0.willEscapeCr());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willValidateAttributes());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertTrue(writerConfig0.willValidateStructure());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertFalse(writerConfig0.willValidateNames());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertFalse(writerConfig0.willFixContent());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertTrue(writerConfig0.willValidateContent());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertEquals("1.0", nonNsStreamWriter0.getXmlVersion());
      assertEquals("(XPCDATA | ", nonNsStreamWriter0.getEncoding());
      assertNull(nonNsStreamWriter0.getBaseUri());
      assertEquals(0, nonNsStreamWriter0.getAttributeCount());
      assertEquals(0, toXmlGenerator0.getFormatFeatures());
      assertFalse(toXmlGenerator0.canWriteBinaryNatively());
      assertFalse(toXmlGenerator0.isClosed());
      assertTrue(toXmlGenerator0.canOmitFields());
      assertTrue(toXmlGenerator0.inRoot());
      assertEquals(3, toXmlGenerator0.getFeatureMask());
      assertFalse(toXmlGenerator0.canWriteObjectId());
      assertEquals((-1), toXmlGenerator0.getOutputBuffered());
      assertFalse(toXmlGenerator0.canWriteTypeId());
      assertEquals(0, toXmlGenerator0.getHighestEscapedChar());
      assertTrue(toXmlGenerator0.canWriteFormattedNumbers());
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      
      // Undeclared exception!
//      try { 
        toXmlGenerator0.writeRaw("(XPCDATA | ");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.ctc.wstx.sw.BaseStreamWriter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertNotNull(bufferRecycler0);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      assertNotNull(writerConfig0);
      assertFalse(writerConfig0.willValidateAttributes());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertTrue(writerConfig0.willEscapeCr());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertFalse(writerConfig0.willValidateNames());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.willValidateContent());
      assertTrue(writerConfig0.willValidateStructure());
      assertFalse(writerConfig0.willFixContent());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertEquals("5.0", writerConfig0.getImplVersion());
      
      IOContext iOContext0 = new IOContext(bufferRecycler0, "9f", false);
      assertNotNull(iOContext0);
      assertFalse(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      
      NonNsStreamWriter nonNsStreamWriter0 = new NonNsStreamWriter((XmlWriter) null, "9f", writerConfig0);
      assertNotNull(nonNsStreamWriter0);
      assertFalse(writerConfig0.willValidateAttributes());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertTrue(writerConfig0.willEscapeCr());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertFalse(writerConfig0.willValidateNames());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.willValidateContent());
      assertTrue(writerConfig0.willValidateStructure());
      assertFalse(writerConfig0.willFixContent());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertNull(nonNsStreamWriter0.getBaseUri());
      assertEquals(0, nonNsStreamWriter0.getAttributeCount());
      assertEquals("1.0", nonNsStreamWriter0.getXmlVersion());
      assertEquals("9f", nonNsStreamWriter0.getEncoding());
      
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 0, 3, objectMapper0, nonNsStreamWriter0);
      assertNotNull(toXmlGenerator0);
      assertFalse(writerConfig0.willValidateAttributes());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertTrue(writerConfig0.willEscapeCr());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertFalse(writerConfig0.willValidateNames());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.willValidateContent());
      assertTrue(writerConfig0.willValidateStructure());
      assertFalse(writerConfig0.willFixContent());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertFalse(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertNull(nonNsStreamWriter0.getBaseUri());
      assertEquals(0, nonNsStreamWriter0.getAttributeCount());
      assertEquals("1.0", nonNsStreamWriter0.getXmlVersion());
      assertEquals("9f", nonNsStreamWriter0.getEncoding());
      assertTrue(toXmlGenerator0.canOmitFields());
      assertTrue(toXmlGenerator0.canWriteFormattedNumbers());
      assertTrue(toXmlGenerator0.inRoot());
      assertFalse(toXmlGenerator0.canWriteObjectId());
      assertEquals((-1), toXmlGenerator0.getOutputBuffered());
      assertFalse(toXmlGenerator0.canWriteBinaryNatively());
      assertEquals(0, toXmlGenerator0.getFeatureMask());
      assertEquals(0, toXmlGenerator0.getHighestEscapedChar());
      assertFalse(toXmlGenerator0.isClosed());
      assertFalse(toXmlGenerator0.canWriteTypeId());
      assertEquals(3, toXmlGenerator0.getFormatFeatures());
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      
      // Undeclared exception!
//      try { 
        toXmlGenerator0.writeString("9f");
//        fail("Expecting exception: IllegalStateException");
      
//      } catch(IllegalStateException e) {
//         //
//         // No element/attribute name specified when trying to output element
//         //
//         verifyException("com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertNotNull(bufferRecycler0);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      assertNotNull(iOContext0);
      assertNull(iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      assertNotNull(writerConfig0);
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertTrue(writerConfig0.willValidateContent());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertTrue(writerConfig0.willEscapeCr());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertFalse(writerConfig0.willValidateAttributes());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertTrue(writerConfig0.willValidateStructure());
      assertFalse(writerConfig0.willValidateNames());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertFalse(writerConfig0.willOutputCDataAsText());
      
      ISOLatin1XmlWriter iSOLatin1XmlWriter0 = new ISOLatin1XmlWriter((OutputStream) null, writerConfig0, false);
      assertNotNull(iSOLatin1XmlWriter0);
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertTrue(writerConfig0.willValidateContent());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertTrue(writerConfig0.willEscapeCr());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertFalse(writerConfig0.willValidateAttributes());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertTrue(writerConfig0.willValidateStructure());
      assertFalse(writerConfig0.willValidateNames());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertEquals(1, iSOLatin1XmlWriter0.getRow());
      
      SimpleNsStreamWriter simpleNsStreamWriter0 = new SimpleNsStreamWriter(iSOLatin1XmlWriter0, "", writerConfig0);
      assertNotNull(simpleNsStreamWriter0);
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertTrue(writerConfig0.willValidateContent());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertTrue(writerConfig0.willEscapeCr());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertFalse(writerConfig0.willValidateAttributes());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertTrue(writerConfig0.willValidateStructure());
      assertFalse(writerConfig0.willValidateNames());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertEquals(1, iSOLatin1XmlWriter0.getRow());
      assertEquals("1.0", simpleNsStreamWriter0.getXmlVersion());
      assertEquals("", simpleNsStreamWriter0.getEncoding());
      assertNull(simpleNsStreamWriter0.getBaseUri());
      assertEquals(0, simpleNsStreamWriter0.getAttributeCount());
      
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 0, 0, objectMapper0, simpleNsStreamWriter0);
      assertNotNull(toXmlGenerator0);
      assertNull(iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertTrue(writerConfig0.willValidateContent());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertTrue(writerConfig0.willEscapeCr());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertFalse(writerConfig0.willValidateAttributes());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertTrue(writerConfig0.willValidateStructure());
      assertFalse(writerConfig0.willValidateNames());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertEquals(1, iSOLatin1XmlWriter0.getRow());
      assertEquals("1.0", simpleNsStreamWriter0.getXmlVersion());
      assertEquals("", simpleNsStreamWriter0.getEncoding());
      assertNull(simpleNsStreamWriter0.getBaseUri());
      assertEquals(0, simpleNsStreamWriter0.getAttributeCount());
      assertFalse(toXmlGenerator0.isClosed());
      assertEquals(0, toXmlGenerator0.getHighestEscapedChar());
      assertFalse(toXmlGenerator0.canWriteTypeId());
      assertEquals((-1), toXmlGenerator0.getOutputBuffered());
      assertTrue(toXmlGenerator0.canWriteFormattedNumbers());
      assertTrue(toXmlGenerator0.inRoot());
      assertTrue(toXmlGenerator0.canOmitFields());
      assertFalse(toXmlGenerator0.canWriteObjectId());
      assertEquals(0, toXmlGenerator0.getFeatureMask());
      assertFalse(toXmlGenerator0.canWriteBinaryNatively());
      assertEquals(0, toXmlGenerator0.getFormatFeatures());
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      
      QName qName0 = new QName("", "");
      assertNotNull(qName0);
      
      toXmlGenerator0.startWrappedValue(qName0, qName0);
      assertNull(iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertTrue(writerConfig0.willValidateContent());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertTrue(writerConfig0.willEscapeCr());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertFalse(writerConfig0.willValidateAttributes());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertTrue(writerConfig0.willValidateStructure());
      assertFalse(writerConfig0.willValidateNames());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertEquals(1, iSOLatin1XmlWriter0.getRow());
      assertEquals("1.0", simpleNsStreamWriter0.getXmlVersion());
      assertEquals("", simpleNsStreamWriter0.getEncoding());
      assertNull(simpleNsStreamWriter0.getBaseUri());
      assertEquals(0, simpleNsStreamWriter0.getAttributeCount());
      assertFalse(toXmlGenerator0.isClosed());
      assertEquals(0, toXmlGenerator0.getHighestEscapedChar());
      assertFalse(toXmlGenerator0.canWriteTypeId());
      assertEquals((-1), toXmlGenerator0.getOutputBuffered());
      assertTrue(toXmlGenerator0.canWriteFormattedNumbers());
      assertTrue(toXmlGenerator0.inRoot());
      assertTrue(toXmlGenerator0.canOmitFields());
      assertFalse(toXmlGenerator0.canWriteObjectId());
      assertEquals(0, toXmlGenerator0.getFeatureMask());
      assertFalse(toXmlGenerator0.canWriteBinaryNatively());
      assertEquals(0, toXmlGenerator0.getFormatFeatures());
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      
      // Undeclared exception!
//      try { 
        toXmlGenerator0.writeString((String) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.ctc.wstx.sw.BaseStreamWriter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertNotNull(bufferRecycler0);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      assertNotNull(writerConfig0);
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willValidateAttributes());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertTrue(writerConfig0.willEscapeCr());
      assertTrue(writerConfig0.willValidateStructure());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertFalse(writerConfig0.willValidateNames());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertTrue(writerConfig0.willValidateContent());
      assertEquals("woodstox", writerConfig0.getImplName());
      
      IOContext iOContext0 = new IOContext(bufferRecycler0, writerConfig0, false);
      assertNotNull(iOContext0);
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willValidateAttributes());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertTrue(writerConfig0.willEscapeCr());
      assertTrue(writerConfig0.willValidateStructure());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertFalse(writerConfig0.willValidateNames());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertTrue(writerConfig0.willValidateContent());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertNull(iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      
      RepairingNsStreamWriter repairingNsStreamWriter0 = new RepairingNsStreamWriter((XmlWriter) null, "pYe2nTG 0vpKb_", writerConfig0);
      assertNotNull(repairingNsStreamWriter0);
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willValidateAttributes());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertTrue(writerConfig0.willEscapeCr());
      assertTrue(writerConfig0.willValidateStructure());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertFalse(writerConfig0.willValidateNames());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertTrue(writerConfig0.willValidateContent());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertEquals("1.0", repairingNsStreamWriter0.getXmlVersion());
      assertEquals("pYe2nTG 0vpKb_", repairingNsStreamWriter0.getEncoding());
      assertEquals(0, repairingNsStreamWriter0.getAttributeCount());
      assertNull(repairingNsStreamWriter0.getBaseUri());
      
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 3, 1, objectMapper0, repairingNsStreamWriter0);
      assertNotNull(toXmlGenerator0);
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willValidateAttributes());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertTrue(writerConfig0.willEscapeCr());
      assertTrue(writerConfig0.willValidateStructure());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertFalse(writerConfig0.willValidateNames());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertTrue(writerConfig0.willValidateContent());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertNull(iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertEquals("1.0", repairingNsStreamWriter0.getXmlVersion());
      assertEquals("pYe2nTG 0vpKb_", repairingNsStreamWriter0.getEncoding());
      assertEquals(0, repairingNsStreamWriter0.getAttributeCount());
      assertNull(repairingNsStreamWriter0.getBaseUri());
      assertFalse(toXmlGenerator0.canWriteBinaryNatively());
      assertTrue(toXmlGenerator0.canWriteFormattedNumbers());
      assertFalse(toXmlGenerator0.canWriteObjectId());
      assertEquals((-1), toXmlGenerator0.getOutputBuffered());
      assertEquals(0, toXmlGenerator0.getHighestEscapedChar());
      assertFalse(toXmlGenerator0.canWriteTypeId());
      assertEquals(3, toXmlGenerator0.getFeatureMask());
      assertEquals(1, toXmlGenerator0.getFormatFeatures());
      assertTrue(toXmlGenerator0.inRoot());
      assertFalse(toXmlGenerator0.isClosed());
      assertTrue(toXmlGenerator0.canOmitFields());
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      
//      try { 
        toXmlGenerator0._handleEndObject();
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Can not write END_ELEMENT without open START_ELEMENT
//         //
//         verifyException("com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertNotNull(bufferRecycler0);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      assertNotNull(iOContext0);
      assertFalse(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      assertNotNull(writerConfig0);
      assertTrue(writerConfig0.willSupportNamespaces());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertFalse(writerConfig0.willValidateNames());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertTrue(writerConfig0.willEscapeCr());
      assertTrue(writerConfig0.willValidateStructure());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willValidateAttributes());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertTrue(writerConfig0.willValidateContent());
      assertEquals("woodstox", writerConfig0.getImplName());
      
      ISOLatin1XmlWriter iSOLatin1XmlWriter0 = new ISOLatin1XmlWriter((OutputStream) null, writerConfig0, false);
      assertNotNull(iSOLatin1XmlWriter0);
      assertTrue(writerConfig0.willSupportNamespaces());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertFalse(writerConfig0.willValidateNames());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertTrue(writerConfig0.willEscapeCr());
      assertTrue(writerConfig0.willValidateStructure());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willValidateAttributes());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertTrue(writerConfig0.willValidateContent());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertEquals(1, iSOLatin1XmlWriter0.getRow());
      
      SimpleNsStreamWriter simpleNsStreamWriter0 = new SimpleNsStreamWriter(iSOLatin1XmlWriter0, "", writerConfig0);
      assertNotNull(simpleNsStreamWriter0);
      assertTrue(writerConfig0.willSupportNamespaces());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertFalse(writerConfig0.willValidateNames());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertTrue(writerConfig0.willEscapeCr());
      assertTrue(writerConfig0.willValidateStructure());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willValidateAttributes());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertTrue(writerConfig0.willValidateContent());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertEquals(1, iSOLatin1XmlWriter0.getRow());
      assertEquals(0, simpleNsStreamWriter0.getAttributeCount());
      assertNull(simpleNsStreamWriter0.getBaseUri());
      assertEquals("", simpleNsStreamWriter0.getEncoding());
      assertEquals("1.0", simpleNsStreamWriter0.getXmlVersion());
      
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 0, 0, objectMapper0, simpleNsStreamWriter0);
      assertNotNull(toXmlGenerator0);
      assertFalse(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertFalse(writerConfig0.willValidateNames());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertTrue(writerConfig0.willEscapeCr());
      assertTrue(writerConfig0.willValidateStructure());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willValidateAttributes());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertTrue(writerConfig0.willValidateContent());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertEquals(1, iSOLatin1XmlWriter0.getRow());
      assertEquals(0, simpleNsStreamWriter0.getAttributeCount());
      assertNull(simpleNsStreamWriter0.getBaseUri());
      assertEquals("", simpleNsStreamWriter0.getEncoding());
      assertEquals("1.0", simpleNsStreamWriter0.getXmlVersion());
      assertFalse(toXmlGenerator0.canWriteBinaryNatively());
      assertTrue(toXmlGenerator0.canWriteFormattedNumbers());
      assertEquals(0, toXmlGenerator0.getFormatFeatures());
      assertTrue(toXmlGenerator0.inRoot());
      assertFalse(toXmlGenerator0.isClosed());
      assertTrue(toXmlGenerator0.canOmitFields());
      assertFalse(toXmlGenerator0.canWriteTypeId());
      assertFalse(toXmlGenerator0.canWriteObjectId());
      assertEquals(0, toXmlGenerator0.getHighestEscapedChar());
      assertEquals(0, toXmlGenerator0.getFeatureMask());
      assertEquals((-1), toXmlGenerator0.getOutputBuffered());
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      
      QName qName0 = new QName("", "");
      assertNotNull(qName0);
      
      toXmlGenerator0.startWrappedValue(qName0, qName0);
      assertFalse(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertFalse(writerConfig0.willValidateNames());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertTrue(writerConfig0.willEscapeCr());
      assertTrue(writerConfig0.willValidateStructure());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willValidateAttributes());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertTrue(writerConfig0.willValidateContent());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertEquals(1, iSOLatin1XmlWriter0.getRow());
      assertEquals(0, simpleNsStreamWriter0.getAttributeCount());
      assertNull(simpleNsStreamWriter0.getBaseUri());
      assertEquals("", simpleNsStreamWriter0.getEncoding());
      assertEquals("1.0", simpleNsStreamWriter0.getXmlVersion());
      assertFalse(toXmlGenerator0.canWriteBinaryNatively());
      assertTrue(toXmlGenerator0.canWriteFormattedNumbers());
      assertEquals(0, toXmlGenerator0.getFormatFeatures());
      assertTrue(toXmlGenerator0.inRoot());
      assertFalse(toXmlGenerator0.isClosed());
      assertTrue(toXmlGenerator0.canOmitFields());
      assertFalse(toXmlGenerator0.canWriteTypeId());
      assertFalse(toXmlGenerator0.canWriteObjectId());
      assertEquals(0, toXmlGenerator0.getHighestEscapedChar());
      assertEquals(0, toXmlGenerator0.getFeatureMask());
      assertEquals((-1), toXmlGenerator0.getOutputBuffered());
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      
      toXmlGenerator0.writeStartObject();
      assertFalse(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertFalse(writerConfig0.willValidateNames());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertTrue(writerConfig0.willEscapeCr());
      assertTrue(writerConfig0.willValidateStructure());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willValidateAttributes());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertTrue(writerConfig0.willValidateContent());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertEquals(1, iSOLatin1XmlWriter0.getRow());
      assertEquals(0, simpleNsStreamWriter0.getAttributeCount());
      assertNull(simpleNsStreamWriter0.getBaseUri());
      assertEquals("", simpleNsStreamWriter0.getEncoding());
      assertEquals("1.0", simpleNsStreamWriter0.getXmlVersion());
      assertFalse(toXmlGenerator0.canWriteBinaryNatively());
      assertTrue(toXmlGenerator0.canWriteFormattedNumbers());
      assertEquals(0, toXmlGenerator0.getFormatFeatures());
      assertFalse(toXmlGenerator0.isClosed());
      assertTrue(toXmlGenerator0.canOmitFields());
      assertFalse(toXmlGenerator0.canWriteTypeId());
      assertFalse(toXmlGenerator0.inRoot());
      assertFalse(toXmlGenerator0.canWriteObjectId());
      assertEquals(0, toXmlGenerator0.getHighestEscapedChar());
      assertEquals(0, toXmlGenerator0.getFeatureMask());
      assertEquals((-1), toXmlGenerator0.getOutputBuffered());
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      
      toXmlGenerator0._handleEndObject();
      assertFalse(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertFalse(writerConfig0.willValidateNames());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertTrue(writerConfig0.willEscapeCr());
      assertTrue(writerConfig0.willValidateStructure());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willValidateAttributes());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertTrue(writerConfig0.willValidateContent());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertEquals(1, iSOLatin1XmlWriter0.getRow());
      assertEquals(0, simpleNsStreamWriter0.getAttributeCount());
      assertNull(simpleNsStreamWriter0.getBaseUri());
      assertEquals("", simpleNsStreamWriter0.getEncoding());
      assertEquals("1.0", simpleNsStreamWriter0.getXmlVersion());
      assertFalse(toXmlGenerator0.canWriteBinaryNatively());
      assertTrue(toXmlGenerator0.canWriteFormattedNumbers());
      assertEquals(0, toXmlGenerator0.getFormatFeatures());
      assertFalse(toXmlGenerator0.isClosed());
      assertTrue(toXmlGenerator0.canOmitFields());
      assertFalse(toXmlGenerator0.canWriteTypeId());
      assertFalse(toXmlGenerator0.inRoot());
      assertFalse(toXmlGenerator0.canWriteObjectId());
      assertEquals(0, toXmlGenerator0.getHighestEscapedChar());
      assertEquals(0, toXmlGenerator0.getFeatureMask());
      assertEquals((-1), toXmlGenerator0.getOutputBuffered());
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertNotNull(bufferRecycler0);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(3);
      assertNotNull(byteArrayOutputStream0);
      assertEquals("", byteArrayOutputStream0.toString());
      assertEquals(0, byteArrayOutputStream0.size());
      
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      assertNotNull(writerConfig0);
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.willValidateContent());
      assertTrue(writerConfig0.willEscapeCr());
      assertFalse(writerConfig0.willValidateNames());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertTrue(writerConfig0.willValidateStructure());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertFalse(writerConfig0.willValidateAttributes());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertEquals(933, writerConfig0.getConfigFlags());
      
      AsciiXmlWriter asciiXmlWriter0 = new AsciiXmlWriter(byteArrayOutputStream0, writerConfig0, false);
      assertNotNull(asciiXmlWriter0);
      assertEquals("", byteArrayOutputStream0.toString());
      assertEquals(0, byteArrayOutputStream0.size());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.willValidateContent());
      assertTrue(writerConfig0.willEscapeCr());
      assertFalse(writerConfig0.willValidateNames());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertTrue(writerConfig0.willValidateStructure());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertFalse(writerConfig0.willValidateAttributes());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertEquals(1, asciiXmlWriter0.getRow());
      
      NonNsStreamWriter nonNsStreamWriter0 = new NonNsStreamWriter(asciiXmlWriter0, "", writerConfig0);
      assertNotNull(nonNsStreamWriter0);
      assertEquals("", byteArrayOutputStream0.toString());
      assertEquals(0, byteArrayOutputStream0.size());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.willValidateContent());
      assertTrue(writerConfig0.willEscapeCr());
      assertFalse(writerConfig0.willValidateNames());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertTrue(writerConfig0.willValidateStructure());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertFalse(writerConfig0.willValidateAttributes());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertEquals(1, asciiXmlWriter0.getRow());
      assertEquals(0, nonNsStreamWriter0.getAttributeCount());
      assertEquals("1.0", nonNsStreamWriter0.getXmlVersion());
      assertNull(nonNsStreamWriter0.getBaseUri());
      assertEquals("", nonNsStreamWriter0.getEncoding());
      
      IOContext iOContext0 = new IOContext(bufferRecycler0, "", false);
      assertNotNull(iOContext0);
      assertFalse(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 2, 15, objectMapper0, nonNsStreamWriter0);
      assertNotNull(toXmlGenerator0);
      assertEquals("", byteArrayOutputStream0.toString());
      assertEquals(0, byteArrayOutputStream0.size());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.willValidateContent());
      assertTrue(writerConfig0.willEscapeCr());
      assertFalse(writerConfig0.willValidateNames());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertTrue(writerConfig0.willValidateStructure());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertFalse(writerConfig0.willValidateAttributes());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertEquals(1, asciiXmlWriter0.getRow());
      assertEquals(0, nonNsStreamWriter0.getAttributeCount());
      assertEquals("1.0", nonNsStreamWriter0.getXmlVersion());
      assertNull(nonNsStreamWriter0.getBaseUri());
      assertEquals("", nonNsStreamWriter0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertEquals(15, toXmlGenerator0.getFormatFeatures());
      assertTrue(toXmlGenerator0.canOmitFields());
      assertTrue(toXmlGenerator0.canWriteFormattedNumbers());
      assertFalse(toXmlGenerator0.isClosed());
      assertFalse(toXmlGenerator0.canWriteTypeId());
      assertFalse(toXmlGenerator0.canWriteObjectId());
      assertEquals(2, toXmlGenerator0.getFeatureMask());
      assertTrue(toXmlGenerator0.inRoot());
      assertEquals(0, toXmlGenerator0.getHighestEscapedChar());
      assertEquals((-1), toXmlGenerator0.getOutputBuffered());
      assertFalse(toXmlGenerator0.canWriteBinaryNatively());
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      
      QName qName0 = new QName("write String value", "yZE)yeay6Wg|Yt~5L", "Can not write END_ELEMENT without open START_ELEMENT");
      assertNotNull(qName0);
      
      toXmlGenerator0.startWrappedValue(qName0, qName0);
      assertEquals("", byteArrayOutputStream0.toString());
      assertEquals(0, byteArrayOutputStream0.size());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.willValidateContent());
      assertTrue(writerConfig0.willEscapeCr());
      assertFalse(writerConfig0.willValidateNames());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertTrue(writerConfig0.willValidateStructure());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertFalse(writerConfig0.willValidateAttributes());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertEquals(1, asciiXmlWriter0.getRow());
      assertEquals(0, nonNsStreamWriter0.getAttributeCount());
      assertEquals("1.0", nonNsStreamWriter0.getXmlVersion());
      assertNull(nonNsStreamWriter0.getBaseUri());
      assertEquals("", nonNsStreamWriter0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertEquals(15, toXmlGenerator0.getFormatFeatures());
      assertTrue(toXmlGenerator0.canOmitFields());
      assertTrue(toXmlGenerator0.canWriteFormattedNumbers());
      assertFalse(toXmlGenerator0.isClosed());
      assertFalse(toXmlGenerator0.canWriteTypeId());
      assertFalse(toXmlGenerator0.canWriteObjectId());
      assertEquals(2, toXmlGenerator0.getFeatureMask());
      assertTrue(toXmlGenerator0.inRoot());
      assertEquals(0, toXmlGenerator0.getHighestEscapedChar());
      assertEquals((-1), toXmlGenerator0.getOutputBuffered());
      assertFalse(toXmlGenerator0.canWriteBinaryNatively());
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      
      toXmlGenerator0._handleStartObject();
      assertEquals("", byteArrayOutputStream0.toString());
      assertEquals(0, byteArrayOutputStream0.size());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.willValidateContent());
      assertTrue(writerConfig0.willEscapeCr());
      assertFalse(writerConfig0.willValidateNames());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertTrue(writerConfig0.willValidateStructure());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertFalse(writerConfig0.willValidateAttributes());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertEquals(1, asciiXmlWriter0.getRow());
      assertEquals(0, nonNsStreamWriter0.getAttributeCount());
      assertEquals("1.0", nonNsStreamWriter0.getXmlVersion());
      assertNull(nonNsStreamWriter0.getBaseUri());
      assertEquals("", nonNsStreamWriter0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertEquals(15, toXmlGenerator0.getFormatFeatures());
      assertTrue(toXmlGenerator0.canOmitFields());
      assertTrue(toXmlGenerator0.canWriteFormattedNumbers());
      assertFalse(toXmlGenerator0.isClosed());
      assertFalse(toXmlGenerator0.canWriteTypeId());
      assertFalse(toXmlGenerator0.canWriteObjectId());
      assertEquals(2, toXmlGenerator0.getFeatureMask());
      assertTrue(toXmlGenerator0.inRoot());
      assertEquals(0, toXmlGenerator0.getHighestEscapedChar());
      assertEquals((-1), toXmlGenerator0.getOutputBuffered());
      assertFalse(toXmlGenerator0.canWriteBinaryNatively());
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertNotNull(bufferRecycler0);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      
      WriterConfig writerConfig0 = WriterConfig.createJ2MEDefaults();
      assertNotNull(writerConfig0);
      assertTrue(writerConfig0.willValidateStructure());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertFalse(writerConfig0.willValidateAttributes());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertTrue(writerConfig0.willEscapeCr());
      assertTrue(writerConfig0.willValidateContent());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertFalse(writerConfig0.willValidateNames());
      assertFalse(writerConfig0.willOutputCDataAsText());
      
      IOContext iOContext0 = new IOContext(bufferRecycler0, objectMapper0, false);
      assertNotNull(iOContext0);
      assertFalse(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      
      SimpleNsStreamWriter simpleNsStreamWriter0 = new SimpleNsStreamWriter((XmlWriter) null, "Uneconi\"ze HeatuCe \"", writerConfig0);
      assertNotNull(simpleNsStreamWriter0);
      assertTrue(writerConfig0.willValidateStructure());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertFalse(writerConfig0.willValidateAttributes());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertTrue(writerConfig0.willEscapeCr());
      assertTrue(writerConfig0.willValidateContent());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertFalse(writerConfig0.willValidateNames());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertEquals("1.0", simpleNsStreamWriter0.getXmlVersion());
      assertEquals("Uneconi\"ze HeatuCe \"", simpleNsStreamWriter0.getEncoding());
      assertNull(simpleNsStreamWriter0.getBaseUri());
      assertEquals(0, simpleNsStreamWriter0.getAttributeCount());
      
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 3, 2, objectMapper0, simpleNsStreamWriter0);
      assertNotNull(toXmlGenerator0);
      assertTrue(writerConfig0.willValidateStructure());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertFalse(writerConfig0.willValidateAttributes());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertTrue(writerConfig0.willEscapeCr());
      assertTrue(writerConfig0.willValidateContent());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertFalse(writerConfig0.willValidateNames());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertFalse(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertEquals("1.0", simpleNsStreamWriter0.getXmlVersion());
      assertEquals("Uneconi\"ze HeatuCe \"", simpleNsStreamWriter0.getEncoding());
      assertNull(simpleNsStreamWriter0.getBaseUri());
      assertEquals(0, simpleNsStreamWriter0.getAttributeCount());
      assertFalse(toXmlGenerator0.canWriteObjectId());
      assertEquals(3, toXmlGenerator0.getFeatureMask());
      assertEquals((-1), toXmlGenerator0.getOutputBuffered());
      assertTrue(toXmlGenerator0.inRoot());
      assertEquals(0, toXmlGenerator0.getHighestEscapedChar());
      assertFalse(toXmlGenerator0.canWriteBinaryNatively());
      assertEquals(2, toXmlGenerator0.getFormatFeatures());
      assertFalse(toXmlGenerator0.isClosed());
      assertTrue(toXmlGenerator0.canOmitFields());
      assertTrue(toXmlGenerator0.canWriteFormattedNumbers());
      assertFalse(toXmlGenerator0.canWriteTypeId());
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      
      // Undeclared exception!
//      try { 
        toXmlGenerator0._handleStartObject();
//        fail("Expecting exception: IllegalStateException");
      
//      } catch(IllegalStateException e) {
//         //
//         // No element/attribute name specified when trying to output element
//         //
//         verifyException("com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      
      WriterConfig writerConfig0 = WriterConfig.createJ2MEDefaults();
      assertNotNull(writerConfig0);
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.willValidateContent());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertFalse(writerConfig0.willFixContent());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertFalse(writerConfig0.willValidateAttributes());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willValidateNames());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertTrue(writerConfig0.willValidateStructure());
      assertTrue(writerConfig0.willEscapeCr());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      
      NonNsStreamWriter nonNsStreamWriter0 = new NonNsStreamWriter((XmlWriter) null, "Z", writerConfig0);
      assertNotNull(nonNsStreamWriter0);
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.willValidateContent());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertFalse(writerConfig0.willFixContent());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertFalse(writerConfig0.willValidateAttributes());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willValidateNames());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertTrue(writerConfig0.willValidateStructure());
      assertTrue(writerConfig0.willEscapeCr());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertNull(nonNsStreamWriter0.getBaseUri());
      assertEquals("1.0", nonNsStreamWriter0.getXmlVersion());
      assertEquals(0, nonNsStreamWriter0.getAttributeCount());
      assertEquals("Z", nonNsStreamWriter0.getEncoding());
      
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator((IOContext) null, (-1927), (-1927), objectMapper0, nonNsStreamWriter0);
      assertNotNull(toXmlGenerator0);
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.willValidateContent());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertFalse(writerConfig0.willFixContent());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertFalse(writerConfig0.willValidateAttributes());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willValidateNames());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertTrue(writerConfig0.willValidateStructure());
      assertTrue(writerConfig0.willEscapeCr());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertNull(nonNsStreamWriter0.getBaseUri());
      assertEquals("1.0", nonNsStreamWriter0.getXmlVersion());
      assertEquals(0, nonNsStreamWriter0.getAttributeCount());
      assertEquals("Z", nonNsStreamWriter0.getEncoding());
      assertFalse(toXmlGenerator0.isClosed());
      assertEquals(0, toXmlGenerator0.getHighestEscapedChar());
      assertFalse(toXmlGenerator0.canWriteTypeId());
      assertTrue(toXmlGenerator0.canOmitFields());
      assertTrue(toXmlGenerator0.canWriteFormattedNumbers());
      assertEquals((-1927), toXmlGenerator0.getFeatureMask());
      assertTrue(toXmlGenerator0.inRoot());
      assertEquals((-1927), toXmlGenerator0.getFormatFeatures());
      assertFalse(toXmlGenerator0.canWriteBinaryNatively());
      assertEquals((-1), toXmlGenerator0.getOutputBuffered());
      assertFalse(toXmlGenerator0.canWriteObjectId());
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      
//      try { 
        toXmlGenerator0.writeFieldName("Z");
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Can not write a field name, expecting a value
//         //
//         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      ToXmlGenerator.Feature toXmlGenerator_Feature0 = ToXmlGenerator.Feature.WRITE_XML_1_1;
      assertEquals(2, toXmlGenerator_Feature0.getMask());
      assertFalse(toXmlGenerator_Feature0.enabledByDefault());
      assertEquals(0, toXmlGenerator_Feature0.collectDefaults());
      assertEquals(ToXmlGenerator.Feature.WRITE_XML_1_1, toXmlGenerator_Feature0);
      
      boolean boolean0 = toXmlGenerator_Feature0.enabledIn(1);
      assertEquals(2, toXmlGenerator_Feature0.getMask());
      assertFalse(toXmlGenerator_Feature0.enabledByDefault());
      assertEquals(0, toXmlGenerator_Feature0.collectDefaults());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      ToXmlGenerator.Feature toXmlGenerator_Feature0 = ToXmlGenerator.Feature.WRITE_XML_DECLARATION;
      assertFalse(toXmlGenerator_Feature0.enabledByDefault());
      assertEquals(1, toXmlGenerator_Feature0.getMask());
      assertEquals(0, toXmlGenerator_Feature0.collectDefaults());
      assertEquals(ToXmlGenerator.Feature.WRITE_XML_DECLARATION, toXmlGenerator_Feature0);
      
      boolean boolean0 = toXmlGenerator_Feature0.enabledIn(1);
      assertFalse(toXmlGenerator_Feature0.enabledByDefault());
      assertEquals(1, toXmlGenerator_Feature0.getMask());
      assertEquals(0, toXmlGenerator_Feature0.collectDefaults());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      ToXmlGenerator.Feature toXmlGenerator_Feature0 = ToXmlGenerator.Feature.WRITE_XML_DECLARATION;
      assertEquals(1, toXmlGenerator_Feature0.getMask());
      assertFalse(toXmlGenerator_Feature0.enabledByDefault());
      assertEquals(0, toXmlGenerator_Feature0.collectDefaults());
      assertEquals(ToXmlGenerator.Feature.WRITE_XML_DECLARATION, toXmlGenerator_Feature0);
      
      int int0 = toXmlGenerator_Feature0.getMask();
      assertEquals(1, toXmlGenerator_Feature0.getMask());
      assertFalse(toXmlGenerator_Feature0.enabledByDefault());
      assertEquals(0, toXmlGenerator_Feature0.collectDefaults());
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertNotNull(bufferRecycler0);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(3);
      assertNotNull(byteArrayOutputStream0);
      assertEquals(0, byteArrayOutputStream0.size());
      assertEquals("", byteArrayOutputStream0.toString());
      
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      assertNotNull(writerConfig0);
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertTrue(writerConfig0.willValidateStructure());
      assertFalse(writerConfig0.willValidateNames());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.willValidateContent());
      assertFalse(writerConfig0.willValidateAttributes());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertTrue(writerConfig0.willEscapeCr());
      
      AsciiXmlWriter asciiXmlWriter0 = new AsciiXmlWriter(byteArrayOutputStream0, writerConfig0, false);
      assertNotNull(asciiXmlWriter0);
      assertEquals(0, byteArrayOutputStream0.size());
      assertEquals("", byteArrayOutputStream0.toString());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertTrue(writerConfig0.willValidateStructure());
      assertFalse(writerConfig0.willValidateNames());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.willValidateContent());
      assertFalse(writerConfig0.willValidateAttributes());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertTrue(writerConfig0.willEscapeCr());
      assertEquals(1, asciiXmlWriter0.getRow());
      
      NonNsStreamWriter nonNsStreamWriter0 = new NonNsStreamWriter(asciiXmlWriter0, "p'Px6*2*vW{+", writerConfig0);
      assertNotNull(nonNsStreamWriter0);
      assertEquals(0, byteArrayOutputStream0.size());
      assertEquals("", byteArrayOutputStream0.toString());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertTrue(writerConfig0.willValidateStructure());
      assertFalse(writerConfig0.willValidateNames());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.willValidateContent());
      assertFalse(writerConfig0.willValidateAttributes());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertTrue(writerConfig0.willEscapeCr());
      assertEquals(1, asciiXmlWriter0.getRow());
      assertEquals("p'Px6*2*vW{+", nonNsStreamWriter0.getEncoding());
      assertNull(nonNsStreamWriter0.getBaseUri());
      assertEquals(0, nonNsStreamWriter0.getAttributeCount());
      assertEquals("1.0", nonNsStreamWriter0.getXmlVersion());
      
      IOContext iOContext0 = new IOContext(bufferRecycler0, byteArrayOutputStream0, false);
      assertNotNull(iOContext0);
      assertEquals(0, byteArrayOutputStream0.size());
      assertEquals("", byteArrayOutputStream0.toString());
      assertFalse(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 223, (-2836), objectMapper0, nonNsStreamWriter0);
      assertNotNull(toXmlGenerator0);
      assertEquals(0, byteArrayOutputStream0.size());
      assertEquals("", byteArrayOutputStream0.toString());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertTrue(writerConfig0.willValidateStructure());
      assertFalse(writerConfig0.willValidateNames());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.willValidateContent());
      assertFalse(writerConfig0.willValidateAttributes());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertTrue(writerConfig0.willEscapeCr());
      assertEquals(1, asciiXmlWriter0.getRow());
      assertEquals("p'Px6*2*vW{+", nonNsStreamWriter0.getEncoding());
      assertNull(nonNsStreamWriter0.getBaseUri());
      assertEquals(0, nonNsStreamWriter0.getAttributeCount());
      assertEquals("1.0", nonNsStreamWriter0.getXmlVersion());
      assertFalse(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertFalse(toXmlGenerator0.isClosed());
      assertEquals(0, toXmlGenerator0.getHighestEscapedChar());
      assertFalse(toXmlGenerator0.canWriteBinaryNatively());
      assertEquals((-2836), toXmlGenerator0.getFormatFeatures());
      assertFalse(toXmlGenerator0.canWriteObjectId());
      assertTrue(toXmlGenerator0.inRoot());
      assertEquals((-1), toXmlGenerator0.getOutputBuffered());
      assertEquals(223, toXmlGenerator0.getFeatureMask());
      assertTrue(toXmlGenerator0.canOmitFields());
      assertTrue(toXmlGenerator0.canWriteFormattedNumbers());
      assertFalse(toXmlGenerator0.canWriteTypeId());
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      
      boolean boolean0 = toXmlGenerator0.inRoot();
      assertEquals(0, byteArrayOutputStream0.size());
      assertEquals("", byteArrayOutputStream0.toString());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertTrue(writerConfig0.willValidateStructure());
      assertFalse(writerConfig0.willValidateNames());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.willValidateContent());
      assertFalse(writerConfig0.willValidateAttributes());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertTrue(writerConfig0.willEscapeCr());
      assertEquals(1, asciiXmlWriter0.getRow());
      assertEquals("p'Px6*2*vW{+", nonNsStreamWriter0.getEncoding());
      assertNull(nonNsStreamWriter0.getBaseUri());
      assertEquals(0, nonNsStreamWriter0.getAttributeCount());
      assertEquals("1.0", nonNsStreamWriter0.getXmlVersion());
      assertFalse(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertFalse(toXmlGenerator0.isClosed());
      assertEquals(0, toXmlGenerator0.getHighestEscapedChar());
      assertFalse(toXmlGenerator0.canWriteBinaryNatively());
      assertEquals((-2836), toXmlGenerator0.getFormatFeatures());
      assertFalse(toXmlGenerator0.canWriteObjectId());
      assertTrue(toXmlGenerator0.inRoot());
      assertEquals((-1), toXmlGenerator0.getOutputBuffered());
      assertEquals(223, toXmlGenerator0.getFeatureMask());
      assertTrue(toXmlGenerator0.canOmitFields());
      assertTrue(toXmlGenerator0.canWriteFormattedNumbers());
      assertFalse(toXmlGenerator0.canWriteTypeId());
      assertTrue(boolean0);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertNotNull(bufferRecycler0);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, true);
      assertNotNull(iOContext0);
      assertTrue(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      assertNotNull(writerConfig0);
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertTrue(writerConfig0.willValidateContent());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.willValidateStructure());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willValidateNames());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertTrue(writerConfig0.willEscapeCr());
      assertFalse(writerConfig0.willValidateAttributes());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertEquals("5.0", writerConfig0.getImplVersion());
      
      ISOLatin1XmlWriter iSOLatin1XmlWriter0 = new ISOLatin1XmlWriter((OutputStream) null, writerConfig0, false);
      assertNotNull(iSOLatin1XmlWriter0);
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertTrue(writerConfig0.willValidateContent());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.willValidateStructure());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willValidateNames());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertTrue(writerConfig0.willEscapeCr());
      assertFalse(writerConfig0.willValidateAttributes());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertEquals(1, iSOLatin1XmlWriter0.getRow());
      
      SimpleNsStreamWriter simpleNsStreamWriter0 = new SimpleNsStreamWriter(iSOLatin1XmlWriter0, "Can not write a field name, expecting a value", writerConfig0);
      assertNotNull(simpleNsStreamWriter0);
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertTrue(writerConfig0.willValidateContent());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.willValidateStructure());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willValidateNames());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertTrue(writerConfig0.willEscapeCr());
      assertFalse(writerConfig0.willValidateAttributes());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertEquals(1, iSOLatin1XmlWriter0.getRow());
      assertNull(simpleNsStreamWriter0.getBaseUri());
      assertEquals("1.0", simpleNsStreamWriter0.getXmlVersion());
      assertEquals(0, simpleNsStreamWriter0.getAttributeCount());
      assertEquals("Can not write a field name, expecting a value", simpleNsStreamWriter0.getEncoding());
      
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 479, 0, objectMapper0, simpleNsStreamWriter0);
      assertNotNull(toXmlGenerator0);
      assertTrue(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertTrue(writerConfig0.willValidateContent());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.willValidateStructure());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willValidateNames());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertTrue(writerConfig0.willEscapeCr());
      assertFalse(writerConfig0.willValidateAttributes());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertEquals(1, iSOLatin1XmlWriter0.getRow());
      assertNull(simpleNsStreamWriter0.getBaseUri());
      assertEquals("1.0", simpleNsStreamWriter0.getXmlVersion());
      assertEquals(0, simpleNsStreamWriter0.getAttributeCount());
      assertEquals("Can not write a field name, expecting a value", simpleNsStreamWriter0.getEncoding());
      assertTrue(toXmlGenerator0.canOmitFields());
      assertTrue(toXmlGenerator0.canWriteFormattedNumbers());
      assertFalse(toXmlGenerator0.canWriteBinaryNatively());
      assertEquals(0, toXmlGenerator0.getFormatFeatures());
      assertTrue(toXmlGenerator0.inRoot());
      assertFalse(toXmlGenerator0.isClosed());
      assertFalse(toXmlGenerator0.canWriteTypeId());
      assertFalse(toXmlGenerator0.canWriteObjectId());
      assertEquals((-1), toXmlGenerator0.getOutputBuffered());
      assertEquals(479, toXmlGenerator0.getFeatureMask());
      assertEquals(0, toXmlGenerator0.getHighestEscapedChar());
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      
      QName qName0 = new QName("X 6ZlKWT_");
      assertNotNull(qName0);
      
      toXmlGenerator0.setNextName(qName0);
      assertTrue(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertTrue(writerConfig0.willValidateContent());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.willValidateStructure());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willValidateNames());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertTrue(writerConfig0.willEscapeCr());
      assertFalse(writerConfig0.willValidateAttributes());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertEquals(1, iSOLatin1XmlWriter0.getRow());
      assertNull(simpleNsStreamWriter0.getBaseUri());
      assertEquals("1.0", simpleNsStreamWriter0.getXmlVersion());
      assertEquals(0, simpleNsStreamWriter0.getAttributeCount());
      assertEquals("Can not write a field name, expecting a value", simpleNsStreamWriter0.getEncoding());
      assertTrue(toXmlGenerator0.canOmitFields());
      assertTrue(toXmlGenerator0.canWriteFormattedNumbers());
      assertFalse(toXmlGenerator0.canWriteBinaryNatively());
      assertEquals(0, toXmlGenerator0.getFormatFeatures());
      assertTrue(toXmlGenerator0.inRoot());
      assertFalse(toXmlGenerator0.isClosed());
      assertFalse(toXmlGenerator0.canWriteTypeId());
      assertFalse(toXmlGenerator0.canWriteObjectId());
      assertEquals((-1), toXmlGenerator0.getOutputBuffered());
      assertEquals(479, toXmlGenerator0.getFeatureMask());
      assertEquals(0, toXmlGenerator0.getHighestEscapedChar());
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertNotNull(bufferRecycler0);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      assertNotNull(iOContext0);
      assertFalse(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      
      WriterConfig writerConfig0 = WriterConfig.createJ2MEDefaults();
      assertNotNull(writerConfig0);
      assertEquals("woodstox", writerConfig0.getImplName());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertTrue(writerConfig0.willValidateContent());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertTrue(writerConfig0.willEscapeCr());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willValidateAttributes());
      assertTrue(writerConfig0.willValidateStructure());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willValidateNames());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      
      ISOLatin1XmlWriter iSOLatin1XmlWriter0 = new ISOLatin1XmlWriter((OutputStream) null, writerConfig0, false);
      assertNotNull(iSOLatin1XmlWriter0);
      assertEquals("woodstox", writerConfig0.getImplName());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertTrue(writerConfig0.willValidateContent());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertTrue(writerConfig0.willEscapeCr());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willValidateAttributes());
      assertTrue(writerConfig0.willValidateStructure());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willValidateNames());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertEquals(1, iSOLatin1XmlWriter0.getRow());
      
      SimpleNsStreamWriter simpleNsStreamWriter0 = new SimpleNsStreamWriter(iSOLatin1XmlWriter0, "", writerConfig0);
      assertNotNull(simpleNsStreamWriter0);
      assertEquals("woodstox", writerConfig0.getImplName());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertTrue(writerConfig0.willValidateContent());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertTrue(writerConfig0.willEscapeCr());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willValidateAttributes());
      assertTrue(writerConfig0.willValidateStructure());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willValidateNames());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertEquals(1, iSOLatin1XmlWriter0.getRow());
      assertEquals("", simpleNsStreamWriter0.getEncoding());
      assertEquals("1.0", simpleNsStreamWriter0.getXmlVersion());
      assertEquals(0, simpleNsStreamWriter0.getAttributeCount());
      assertNull(simpleNsStreamWriter0.getBaseUri());
      
      QName qName0 = new QName("", "");
      assertNotNull(qName0);
      
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 2, 3, objectMapper0, simpleNsStreamWriter0);
      assertNotNull(toXmlGenerator0);
      assertFalse(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertTrue(writerConfig0.willValidateContent());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertTrue(writerConfig0.willEscapeCr());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willValidateAttributes());
      assertTrue(writerConfig0.willValidateStructure());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willValidateNames());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertEquals(1, iSOLatin1XmlWriter0.getRow());
      assertEquals("", simpleNsStreamWriter0.getEncoding());
      assertEquals("1.0", simpleNsStreamWriter0.getXmlVersion());
      assertEquals(0, simpleNsStreamWriter0.getAttributeCount());
      assertNull(simpleNsStreamWriter0.getBaseUri());
      assertFalse(toXmlGenerator0.canWriteTypeId());
      assertEquals((-1), toXmlGenerator0.getOutputBuffered());
      assertEquals(0, toXmlGenerator0.getHighestEscapedChar());
      assertFalse(toXmlGenerator0.isClosed());
      assertTrue(toXmlGenerator0.canOmitFields());
      assertTrue(toXmlGenerator0.canWriteFormattedNumbers());
      assertEquals(3, toXmlGenerator0.getFormatFeatures());
      assertTrue(toXmlGenerator0.inRoot());
      assertEquals(2, toXmlGenerator0.getFeatureMask());
      assertFalse(toXmlGenerator0.canWriteObjectId());
      assertFalse(toXmlGenerator0.canWriteBinaryNatively());
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      
      toXmlGenerator0.startWrappedValue(qName0, qName0);
      assertFalse(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertTrue(writerConfig0.willValidateContent());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertTrue(writerConfig0.willEscapeCr());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willValidateAttributes());
      assertTrue(writerConfig0.willValidateStructure());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willValidateNames());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertEquals(1, iSOLatin1XmlWriter0.getRow());
      assertEquals("", simpleNsStreamWriter0.getEncoding());
      assertEquals("1.0", simpleNsStreamWriter0.getXmlVersion());
      assertEquals(0, simpleNsStreamWriter0.getAttributeCount());
      assertNull(simpleNsStreamWriter0.getBaseUri());
      assertFalse(toXmlGenerator0.canWriteTypeId());
      assertEquals((-1), toXmlGenerator0.getOutputBuffered());
      assertEquals(0, toXmlGenerator0.getHighestEscapedChar());
      assertFalse(toXmlGenerator0.isClosed());
      assertTrue(toXmlGenerator0.canOmitFields());
      assertTrue(toXmlGenerator0.canWriteFormattedNumbers());
      assertEquals(3, toXmlGenerator0.getFormatFeatures());
      assertTrue(toXmlGenerator0.inRoot());
      assertEquals(2, toXmlGenerator0.getFeatureMask());
      assertFalse(toXmlGenerator0.canWriteObjectId());
      assertFalse(toXmlGenerator0.canWriteBinaryNatively());
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      
      toXmlGenerator0.writeStartObject();
      assertFalse(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertTrue(writerConfig0.willValidateContent());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertTrue(writerConfig0.willEscapeCr());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willValidateAttributes());
      assertTrue(writerConfig0.willValidateStructure());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willValidateNames());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertEquals(1, iSOLatin1XmlWriter0.getRow());
      assertEquals("", simpleNsStreamWriter0.getEncoding());
      assertEquals("1.0", simpleNsStreamWriter0.getXmlVersion());
      assertEquals(0, simpleNsStreamWriter0.getAttributeCount());
      assertNull(simpleNsStreamWriter0.getBaseUri());
      assertFalse(toXmlGenerator0.canWriteTypeId());
      assertFalse(toXmlGenerator0.inRoot());
      assertEquals((-1), toXmlGenerator0.getOutputBuffered());
      assertEquals(0, toXmlGenerator0.getHighestEscapedChar());
      assertFalse(toXmlGenerator0.isClosed());
      assertTrue(toXmlGenerator0.canOmitFields());
      assertTrue(toXmlGenerator0.canWriteFormattedNumbers());
      assertEquals(3, toXmlGenerator0.getFormatFeatures());
      assertEquals(2, toXmlGenerator0.getFeatureMask());
      assertFalse(toXmlGenerator0.canWriteObjectId());
      assertFalse(toXmlGenerator0.canWriteBinaryNatively());
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      
      // Undeclared exception!
//      try { 
        toXmlGenerator0.close();
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.ctc.wstx.sw.EncodingXmlWriter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertNotNull(bufferRecycler0);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      assertNotNull(byteArrayOutputStream0);
      assertEquals(0, byteArrayOutputStream0.size());
      assertEquals("", byteArrayOutputStream0.toString());
      
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      assertNotNull(writerConfig0);
      assertTrue(writerConfig0.willValidateStructure());
      assertFalse(writerConfig0.willValidateNames());
      assertTrue(writerConfig0.willValidateContent());
      assertFalse(writerConfig0.willFixContent());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertTrue(writerConfig0.willEscapeCr());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willValidateAttributes());
      
      AsciiXmlWriter asciiXmlWriter0 = new AsciiXmlWriter(byteArrayOutputStream0, writerConfig0, false);
      assertNotNull(asciiXmlWriter0);
      assertEquals(0, byteArrayOutputStream0.size());
      assertEquals("", byteArrayOutputStream0.toString());
      assertTrue(writerConfig0.willValidateStructure());
      assertFalse(writerConfig0.willValidateNames());
      assertTrue(writerConfig0.willValidateContent());
      assertFalse(writerConfig0.willFixContent());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertTrue(writerConfig0.willEscapeCr());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willValidateAttributes());
      assertEquals(1, asciiXmlWriter0.getRow());
      
      NonNsStreamWriter nonNsStreamWriter0 = new NonNsStreamWriter(asciiXmlWriter0, "", writerConfig0);
      assertNotNull(nonNsStreamWriter0);
      assertEquals(0, byteArrayOutputStream0.size());
      assertEquals("", byteArrayOutputStream0.toString());
      assertTrue(writerConfig0.willValidateStructure());
      assertFalse(writerConfig0.willValidateNames());
      assertTrue(writerConfig0.willValidateContent());
      assertFalse(writerConfig0.willFixContent());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertTrue(writerConfig0.willEscapeCr());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willValidateAttributes());
      assertEquals(1, asciiXmlWriter0.getRow());
      assertNull(nonNsStreamWriter0.getBaseUri());
      assertEquals("", nonNsStreamWriter0.getEncoding());
      assertEquals("1.0", nonNsStreamWriter0.getXmlVersion());
      assertEquals(0, nonNsStreamWriter0.getAttributeCount());
      
      IOContext iOContext0 = new IOContext(bufferRecycler0, "", false);
      assertNotNull(iOContext0);
      assertNull(iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, (-697), 3, objectMapper0, nonNsStreamWriter0);
      assertNotNull(toXmlGenerator0);
      assertEquals(0, byteArrayOutputStream0.size());
      assertEquals("", byteArrayOutputStream0.toString());
      assertTrue(writerConfig0.willValidateStructure());
      assertFalse(writerConfig0.willValidateNames());
      assertTrue(writerConfig0.willValidateContent());
      assertFalse(writerConfig0.willFixContent());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertTrue(writerConfig0.willEscapeCr());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willValidateAttributes());
      assertEquals(1, asciiXmlWriter0.getRow());
      assertNull(nonNsStreamWriter0.getBaseUri());
      assertEquals("", nonNsStreamWriter0.getEncoding());
      assertEquals("1.0", nonNsStreamWriter0.getXmlVersion());
      assertEquals(0, nonNsStreamWriter0.getAttributeCount());
      assertNull(iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertTrue(toXmlGenerator0.canOmitFields());
      assertTrue(toXmlGenerator0.canWriteFormattedNumbers());
      assertEquals(3, toXmlGenerator0.getFormatFeatures());
      assertFalse(toXmlGenerator0.canWriteBinaryNatively());
      assertTrue(toXmlGenerator0.inRoot());
      assertEquals((-697), toXmlGenerator0.getFeatureMask());
      assertFalse(toXmlGenerator0.isClosed());
      assertEquals(0, toXmlGenerator0.getHighestEscapedChar());
      assertEquals((-1), toXmlGenerator0.getOutputBuffered());
      assertFalse(toXmlGenerator0.canWriteTypeId());
      assertFalse(toXmlGenerator0.canWriteObjectId());
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      
//      try { 
        toXmlGenerator0.close();
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Trying to write END_DOCUMENT when document has no root (ie. trying to output empty document).
//         //
//         verifyException("com.fasterxml.jackson.dataformat.xml.util.StaxUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertNotNull(bufferRecycler0);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      assertNotNull(iOContext0);
      assertTrue(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      
      WriterConfig writerConfig0 = WriterConfig.createJ2MEDefaults();
      assertNotNull(writerConfig0);
      assertFalse(writerConfig0.willValidateNames());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.willValidateStructure());
      assertTrue(writerConfig0.willValidateContent());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertTrue(writerConfig0.willEscapeCr());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertFalse(writerConfig0.willValidateAttributes());
      
      ISOLatin1XmlWriter iSOLatin1XmlWriter0 = new ISOLatin1XmlWriter((OutputStream) null, writerConfig0, true);
      assertNotNull(iSOLatin1XmlWriter0);
      assertFalse(writerConfig0.willValidateNames());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.willValidateStructure());
      assertTrue(writerConfig0.willValidateContent());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertTrue(writerConfig0.willEscapeCr());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertFalse(writerConfig0.willValidateAttributes());
      assertEquals(1, iSOLatin1XmlWriter0.getRow());
      
      SimpleNsStreamWriter simpleNsStreamWriter0 = new SimpleNsStreamWriter(iSOLatin1XmlWriter0, "", writerConfig0);
      assertNotNull(simpleNsStreamWriter0);
      assertFalse(writerConfig0.willValidateNames());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.willValidateStructure());
      assertTrue(writerConfig0.willValidateContent());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertTrue(writerConfig0.willEscapeCr());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertFalse(writerConfig0.willValidateAttributes());
      assertEquals(1, iSOLatin1XmlWriter0.getRow());
      assertEquals(0, simpleNsStreamWriter0.getAttributeCount());
      assertEquals("1.0", simpleNsStreamWriter0.getXmlVersion());
      assertNull(simpleNsStreamWriter0.getBaseUri());
      assertEquals("", simpleNsStreamWriter0.getEncoding());
      
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 0, 3, objectMapper0, simpleNsStreamWriter0);
      assertNotNull(toXmlGenerator0);
      assertTrue(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertFalse(writerConfig0.willValidateNames());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.willValidateStructure());
      assertTrue(writerConfig0.willValidateContent());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertTrue(writerConfig0.willEscapeCr());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertFalse(writerConfig0.willValidateAttributes());
      assertEquals(1, iSOLatin1XmlWriter0.getRow());
      assertEquals(0, simpleNsStreamWriter0.getAttributeCount());
      assertEquals("1.0", simpleNsStreamWriter0.getXmlVersion());
      assertNull(simpleNsStreamWriter0.getBaseUri());
      assertEquals("", simpleNsStreamWriter0.getEncoding());
      assertEquals(3, toXmlGenerator0.getFormatFeatures());
      assertFalse(toXmlGenerator0.canWriteBinaryNatively());
      assertEquals(0, toXmlGenerator0.getHighestEscapedChar());
      assertTrue(toXmlGenerator0.canWriteFormattedNumbers());
      assertFalse(toXmlGenerator0.canWriteObjectId());
      assertFalse(toXmlGenerator0.canWriteTypeId());
      assertEquals(0, toXmlGenerator0.getFeatureMask());
      assertEquals((-1), toXmlGenerator0.getOutputBuffered());
      assertTrue(toXmlGenerator0.canOmitFields());
      assertFalse(toXmlGenerator0.isClosed());
      assertTrue(toXmlGenerator0.inRoot());
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      
//      try { 
        toXmlGenerator0.close();
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Trying to write END_DOCUMENT when document has no root (ie. trying to output empty document).
//         //
//         verifyException("com.fasterxml.jackson.dataformat.xml.util.StaxUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertNotNull(bufferRecycler0);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      assertNotNull(writerConfig0);
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertTrue(writerConfig0.willEscapeCr());
      assertFalse(writerConfig0.willValidateAttributes());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willValidateNames());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertTrue(writerConfig0.willValidateStructure());
      assertTrue(writerConfig0.willValidateContent());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertEquals(933, writerConfig0.getConfigFlags());
      
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      assertNotNull(iOContext0);
      assertFalse(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      
      NonNsStreamWriter nonNsStreamWriter0 = new NonNsStreamWriter((XmlWriter) null, "Y1^1WJ.5xLA@es", writerConfig0);
      assertNotNull(nonNsStreamWriter0);
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertTrue(writerConfig0.willEscapeCr());
      assertFalse(writerConfig0.willValidateAttributes());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willValidateNames());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertTrue(writerConfig0.willValidateStructure());
      assertTrue(writerConfig0.willValidateContent());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertEquals("1.0", nonNsStreamWriter0.getXmlVersion());
      assertEquals(0, nonNsStreamWriter0.getAttributeCount());
      assertNull(nonNsStreamWriter0.getBaseUri());
      
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 57343, 55296, objectMapper0, nonNsStreamWriter0);
      assertNotNull(toXmlGenerator0);
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertTrue(writerConfig0.willEscapeCr());
      assertFalse(writerConfig0.willValidateAttributes());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willValidateNames());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertTrue(writerConfig0.willValidateStructure());
      assertTrue(writerConfig0.willValidateContent());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertFalse(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertEquals("1.0", nonNsStreamWriter0.getXmlVersion());
      assertEquals(0, nonNsStreamWriter0.getAttributeCount());
      assertNull(nonNsStreamWriter0.getBaseUri());
      assertEquals(57343, toXmlGenerator0.getFeatureMask());
      assertFalse(toXmlGenerator0.canWriteBinaryNatively());
      assertFalse(toXmlGenerator0.canWriteObjectId());
      assertEquals(0, toXmlGenerator0.getHighestEscapedChar());
      assertEquals((-1), toXmlGenerator0.getOutputBuffered());
      assertTrue(toXmlGenerator0.inRoot());
      assertTrue(toXmlGenerator0.canWriteFormattedNumbers());
      assertFalse(toXmlGenerator0.canWriteTypeId());
      assertEquals(55296, toXmlGenerator0.getFormatFeatures());
      assertFalse(toXmlGenerator0.isClosed());
      assertTrue(toXmlGenerator0.canOmitFields());
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      
      // Undeclared exception!
//      try { 
        toXmlGenerator0.flush();
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.ctc.wstx.sw.BaseStreamWriter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      
      WriterConfig writerConfig0 = WriterConfig.createJ2MEDefaults();
      assertNotNull(writerConfig0);
      assertEquals("woodstox", writerConfig0.getImplName());
      assertFalse(writerConfig0.willValidateNames());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertTrue(writerConfig0.willValidateStructure());
      assertFalse(writerConfig0.willValidateAttributes());
      assertTrue(writerConfig0.willEscapeCr());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertTrue(writerConfig0.willValidateContent());
      
      NonNsStreamWriter nonNsStreamWriter0 = new NonNsStreamWriter((XmlWriter) null, "(#PCDATA | ", writerConfig0);
      assertNotNull(nonNsStreamWriter0);
      assertEquals("woodstox", writerConfig0.getImplName());
      assertFalse(writerConfig0.willValidateNames());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertTrue(writerConfig0.willValidateStructure());
      assertFalse(writerConfig0.willValidateAttributes());
      assertTrue(writerConfig0.willEscapeCr());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertTrue(writerConfig0.willValidateContent());
      assertEquals("(#PCDATA | ", nonNsStreamWriter0.getEncoding());
      assertEquals("1.0", nonNsStreamWriter0.getXmlVersion());
      assertNull(nonNsStreamWriter0.getBaseUri());
      assertEquals(0, nonNsStreamWriter0.getAttributeCount());
      
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator((IOContext) null, 3, 0, objectMapper0, nonNsStreamWriter0);
      assertNotNull(toXmlGenerator0);
      assertEquals("woodstox", writerConfig0.getImplName());
      assertFalse(writerConfig0.willValidateNames());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertTrue(writerConfig0.willValidateStructure());
      assertFalse(writerConfig0.willValidateAttributes());
      assertTrue(writerConfig0.willEscapeCr());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertTrue(writerConfig0.willValidateContent());
      assertEquals("(#PCDATA | ", nonNsStreamWriter0.getEncoding());
      assertEquals("1.0", nonNsStreamWriter0.getXmlVersion());
      assertNull(nonNsStreamWriter0.getBaseUri());
      assertEquals(0, nonNsStreamWriter0.getAttributeCount());
      assertFalse(toXmlGenerator0.canWriteBinaryNatively());
      assertTrue(toXmlGenerator0.canWriteFormattedNumbers());
      assertEquals(0, toXmlGenerator0.getFormatFeatures());
      assertTrue(toXmlGenerator0.canOmitFields());
      assertFalse(toXmlGenerator0.isClosed());
      assertTrue(toXmlGenerator0.inRoot());
      assertFalse(toXmlGenerator0.canWriteTypeId());
      assertEquals((-1), toXmlGenerator0.getOutputBuffered());
      assertEquals(3, toXmlGenerator0.getFeatureMask());
      assertFalse(toXmlGenerator0.canWriteObjectId());
      assertEquals(0, toXmlGenerator0.getHighestEscapedChar());
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      
      toXmlGenerator0.flush();
      assertEquals("woodstox", writerConfig0.getImplName());
      assertFalse(writerConfig0.willValidateNames());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertTrue(writerConfig0.willValidateStructure());
      assertFalse(writerConfig0.willValidateAttributes());
      assertTrue(writerConfig0.willEscapeCr());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertTrue(writerConfig0.willValidateContent());
      assertEquals("(#PCDATA | ", nonNsStreamWriter0.getEncoding());
      assertEquals("1.0", nonNsStreamWriter0.getXmlVersion());
      assertNull(nonNsStreamWriter0.getBaseUri());
      assertEquals(0, nonNsStreamWriter0.getAttributeCount());
      assertFalse(toXmlGenerator0.canWriteBinaryNatively());
      assertTrue(toXmlGenerator0.canWriteFormattedNumbers());
      assertEquals(0, toXmlGenerator0.getFormatFeatures());
      assertTrue(toXmlGenerator0.canOmitFields());
      assertFalse(toXmlGenerator0.isClosed());
      assertTrue(toXmlGenerator0.inRoot());
      assertFalse(toXmlGenerator0.canWriteTypeId());
      assertEquals((-1), toXmlGenerator0.getOutputBuffered());
      assertEquals(3, toXmlGenerator0.getFeatureMask());
      assertFalse(toXmlGenerator0.canWriteObjectId());
      assertEquals(0, toXmlGenerator0.getHighestEscapedChar());
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertNotNull(bufferRecycler0);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      assertNotNull(iOContext0);
      assertFalse(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      
      WriterConfig writerConfig0 = WriterConfig.createJ2MEDefaults();
      assertNotNull(writerConfig0);
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willValidateAttributes());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertTrue(writerConfig0.willEscapeCr());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertFalse(writerConfig0.willValidateNames());
      assertTrue(writerConfig0.willValidateStructure());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertTrue(writerConfig0.willValidateContent());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertEquals("5.0", writerConfig0.getImplVersion());
      
      ISOLatin1XmlWriter iSOLatin1XmlWriter0 = new ISOLatin1XmlWriter((OutputStream) null, writerConfig0, false);
      assertNotNull(iSOLatin1XmlWriter0);
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willValidateAttributes());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertTrue(writerConfig0.willEscapeCr());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertFalse(writerConfig0.willValidateNames());
      assertTrue(writerConfig0.willValidateStructure());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertTrue(writerConfig0.willValidateContent());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertEquals(1, iSOLatin1XmlWriter0.getRow());
      
      SimpleNsStreamWriter simpleNsStreamWriter0 = new SimpleNsStreamWriter(iSOLatin1XmlWriter0, "", writerConfig0);
      assertNotNull(simpleNsStreamWriter0);
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willValidateAttributes());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertTrue(writerConfig0.willEscapeCr());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertFalse(writerConfig0.willValidateNames());
      assertTrue(writerConfig0.willValidateStructure());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertTrue(writerConfig0.willValidateContent());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertEquals(1, iSOLatin1XmlWriter0.getRow());
      assertNull(simpleNsStreamWriter0.getBaseUri());
      assertEquals("", simpleNsStreamWriter0.getEncoding());
      assertEquals(0, simpleNsStreamWriter0.getAttributeCount());
      assertEquals("1.0", simpleNsStreamWriter0.getXmlVersion());
      
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 0, 0, objectMapper0, simpleNsStreamWriter0);
      assertNotNull(toXmlGenerator0);
      assertFalse(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willValidateAttributes());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertTrue(writerConfig0.willEscapeCr());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertFalse(writerConfig0.willValidateNames());
      assertTrue(writerConfig0.willValidateStructure());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertTrue(writerConfig0.willValidateContent());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertEquals(1, iSOLatin1XmlWriter0.getRow());
      assertNull(simpleNsStreamWriter0.getBaseUri());
      assertEquals("", simpleNsStreamWriter0.getEncoding());
      assertEquals(0, simpleNsStreamWriter0.getAttributeCount());
      assertEquals("1.0", simpleNsStreamWriter0.getXmlVersion());
      assertEquals(0, toXmlGenerator0.getFormatFeatures());
      assertFalse(toXmlGenerator0.canWriteTypeId());
      assertTrue(toXmlGenerator0.canOmitFields());
      assertFalse(toXmlGenerator0.isClosed());
      assertTrue(toXmlGenerator0.inRoot());
      assertEquals(0, toXmlGenerator0.getFeatureMask());
      assertTrue(toXmlGenerator0.canWriteFormattedNumbers());
      assertEquals((-1), toXmlGenerator0.getOutputBuffered());
      assertFalse(toXmlGenerator0.canWriteObjectId());
      assertFalse(toXmlGenerator0.canWriteBinaryNatively());
      assertEquals(0, toXmlGenerator0.getHighestEscapedChar());
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      
      QName qName0 = new QName("", "");
      assertNotNull(qName0);
      
      toXmlGenerator0.startWrappedValue(qName0, qName0);
      assertFalse(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willValidateAttributes());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertTrue(writerConfig0.willEscapeCr());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertFalse(writerConfig0.willValidateNames());
      assertTrue(writerConfig0.willValidateStructure());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertTrue(writerConfig0.willValidateContent());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertEquals(1, iSOLatin1XmlWriter0.getRow());
      assertNull(simpleNsStreamWriter0.getBaseUri());
      assertEquals("", simpleNsStreamWriter0.getEncoding());
      assertEquals(0, simpleNsStreamWriter0.getAttributeCount());
      assertEquals("1.0", simpleNsStreamWriter0.getXmlVersion());
      assertEquals(0, toXmlGenerator0.getFormatFeatures());
      assertFalse(toXmlGenerator0.canWriteTypeId());
      assertTrue(toXmlGenerator0.canOmitFields());
      assertFalse(toXmlGenerator0.isClosed());
      assertTrue(toXmlGenerator0.inRoot());
      assertEquals(0, toXmlGenerator0.getFeatureMask());
      assertTrue(toXmlGenerator0.canWriteFormattedNumbers());
      assertEquals((-1), toXmlGenerator0.getOutputBuffered());
      assertFalse(toXmlGenerator0.canWriteObjectId());
      assertFalse(toXmlGenerator0.canWriteBinaryNatively());
      assertEquals(0, toXmlGenerator0.getHighestEscapedChar());
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      
      toXmlGenerator0.writeStartObject();
      assertFalse(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willValidateAttributes());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertTrue(writerConfig0.willEscapeCr());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertFalse(writerConfig0.willValidateNames());
      assertTrue(writerConfig0.willValidateStructure());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertTrue(writerConfig0.willValidateContent());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertEquals(1, iSOLatin1XmlWriter0.getRow());
      assertNull(simpleNsStreamWriter0.getBaseUri());
      assertEquals("", simpleNsStreamWriter0.getEncoding());
      assertEquals(0, simpleNsStreamWriter0.getAttributeCount());
      assertEquals("1.0", simpleNsStreamWriter0.getXmlVersion());
      assertEquals(0, toXmlGenerator0.getFormatFeatures());
      assertFalse(toXmlGenerator0.inRoot());
      assertFalse(toXmlGenerator0.canWriteTypeId());
      assertTrue(toXmlGenerator0.canOmitFields());
      assertFalse(toXmlGenerator0.isClosed());
      assertEquals(0, toXmlGenerator0.getFeatureMask());
      assertTrue(toXmlGenerator0.canWriteFormattedNumbers());
      assertEquals((-1), toXmlGenerator0.getOutputBuffered());
      assertFalse(toXmlGenerator0.canWriteObjectId());
      assertFalse(toXmlGenerator0.canWriteBinaryNatively());
      assertEquals(0, toXmlGenerator0.getHighestEscapedChar());
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      
      char[] charArray0 = new char[1];
//      try { 
        toXmlGenerator0.writeString(charArray0, 0, 2);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Can not write String value, expecting field name
//         //
//         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertNotNull(bufferRecycler0);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      assertNotNull(iOContext0);
      assertFalse(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      assertNotNull(writerConfig0);
      assertEquals(933, writerConfig0.getConfigFlags());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willValidateAttributes());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertTrue(writerConfig0.willEscapeCr());
      assertTrue(writerConfig0.willValidateStructure());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willValidateNames());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertTrue(writerConfig0.willValidateContent());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willFixContent());
      
      ISOLatin1XmlWriter iSOLatin1XmlWriter0 = new ISOLatin1XmlWriter((OutputStream) null, writerConfig0, false);
      assertNotNull(iSOLatin1XmlWriter0);
      assertEquals(933, writerConfig0.getConfigFlags());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willValidateAttributes());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertTrue(writerConfig0.willEscapeCr());
      assertTrue(writerConfig0.willValidateStructure());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willValidateNames());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertTrue(writerConfig0.willValidateContent());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertEquals(1, iSOLatin1XmlWriter0.getRow());
      
      SimpleNsStreamWriter simpleNsStreamWriter0 = new SimpleNsStreamWriter(iSOLatin1XmlWriter0, "", writerConfig0);
      assertNotNull(simpleNsStreamWriter0);
      assertEquals(933, writerConfig0.getConfigFlags());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willValidateAttributes());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertTrue(writerConfig0.willEscapeCr());
      assertTrue(writerConfig0.willValidateStructure());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willValidateNames());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertTrue(writerConfig0.willValidateContent());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertEquals(1, iSOLatin1XmlWriter0.getRow());
      assertEquals("", simpleNsStreamWriter0.getEncoding());
      assertEquals("1.0", simpleNsStreamWriter0.getXmlVersion());
      assertEquals(0, simpleNsStreamWriter0.getAttributeCount());
      assertNull(simpleNsStreamWriter0.getBaseUri());
      
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 0, 0, objectMapper0, simpleNsStreamWriter0);
      assertNotNull(toXmlGenerator0);
      assertFalse(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willValidateAttributes());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertTrue(writerConfig0.willEscapeCr());
      assertTrue(writerConfig0.willValidateStructure());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willValidateNames());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertTrue(writerConfig0.willValidateContent());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertEquals(1, iSOLatin1XmlWriter0.getRow());
      assertEquals("", simpleNsStreamWriter0.getEncoding());
      assertEquals("1.0", simpleNsStreamWriter0.getXmlVersion());
      assertEquals(0, simpleNsStreamWriter0.getAttributeCount());
      assertNull(simpleNsStreamWriter0.getBaseUri());
      assertEquals(0, toXmlGenerator0.getFeatureMask());
      assertFalse(toXmlGenerator0.canWriteObjectId());
      assertFalse(toXmlGenerator0.canWriteTypeId());
      assertTrue(toXmlGenerator0.canOmitFields());
      assertFalse(toXmlGenerator0.isClosed());
      assertTrue(toXmlGenerator0.inRoot());
      assertEquals(0, toXmlGenerator0.getFormatFeatures());
      assertFalse(toXmlGenerator0.canWriteBinaryNatively());
      assertEquals((-1), toXmlGenerator0.getOutputBuffered());
      assertTrue(toXmlGenerator0.canWriteFormattedNumbers());
      assertEquals(0, toXmlGenerator0.getHighestEscapedChar());
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      
      QName qName0 = QName.valueOf(";'<#W5G5p");
      assertNotNull(qName0);
      
      toXmlGenerator0.startWrappedValue(qName0, qName0);
      assertFalse(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willValidateAttributes());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertTrue(writerConfig0.willEscapeCr());
      assertTrue(writerConfig0.willValidateStructure());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willValidateNames());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertTrue(writerConfig0.willValidateContent());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertEquals(1, iSOLatin1XmlWriter0.getRow());
      assertEquals("", simpleNsStreamWriter0.getEncoding());
      assertEquals("1.0", simpleNsStreamWriter0.getXmlVersion());
      assertEquals(0, simpleNsStreamWriter0.getAttributeCount());
      assertNull(simpleNsStreamWriter0.getBaseUri());
      assertEquals(0, toXmlGenerator0.getFeatureMask());
      assertFalse(toXmlGenerator0.canWriteObjectId());
      assertFalse(toXmlGenerator0.canWriteTypeId());
      assertTrue(toXmlGenerator0.canOmitFields());
      assertFalse(toXmlGenerator0.isClosed());
      assertTrue(toXmlGenerator0.inRoot());
      assertEquals(0, toXmlGenerator0.getFormatFeatures());
      assertFalse(toXmlGenerator0.canWriteBinaryNatively());
      assertEquals((-1), toXmlGenerator0.getOutputBuffered());
      assertTrue(toXmlGenerator0.canWriteFormattedNumbers());
      assertEquals(0, toXmlGenerator0.getHighestEscapedChar());
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      
      ToXmlGenerator toXmlGenerator1 = (ToXmlGenerator)toXmlGenerator0.useDefaultPrettyPrinter();
      assertNotNull(toXmlGenerator1);
      assertSame(toXmlGenerator0, toXmlGenerator1);
      assertSame(toXmlGenerator1, toXmlGenerator0);
      assertFalse(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willValidateAttributes());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertTrue(writerConfig0.willEscapeCr());
      assertTrue(writerConfig0.willValidateStructure());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willValidateNames());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertTrue(writerConfig0.willValidateContent());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertEquals(1, iSOLatin1XmlWriter0.getRow());
      assertEquals("", simpleNsStreamWriter0.getEncoding());
      assertEquals("1.0", simpleNsStreamWriter0.getXmlVersion());
      assertEquals(0, simpleNsStreamWriter0.getAttributeCount());
      assertNull(simpleNsStreamWriter0.getBaseUri());
      assertEquals(0, toXmlGenerator0.getFeatureMask());
      assertFalse(toXmlGenerator0.canWriteObjectId());
      assertFalse(toXmlGenerator0.canWriteTypeId());
      assertTrue(toXmlGenerator0.canOmitFields());
      assertFalse(toXmlGenerator0.isClosed());
      assertTrue(toXmlGenerator0.inRoot());
      assertEquals(0, toXmlGenerator0.getFormatFeatures());
      assertFalse(toXmlGenerator0.canWriteBinaryNatively());
      assertEquals((-1), toXmlGenerator0.getOutputBuffered());
      assertTrue(toXmlGenerator0.canWriteFormattedNumbers());
      assertEquals(0, toXmlGenerator0.getHighestEscapedChar());
      assertFalse(toXmlGenerator1.canWriteObjectId());
      assertTrue(toXmlGenerator1.inRoot());
      assertEquals(0, toXmlGenerator1.getFeatureMask());
      assertEquals((-1), toXmlGenerator1.getOutputBuffered());
      assertTrue(toXmlGenerator1.canOmitFields());
      assertTrue(toXmlGenerator1.canWriteFormattedNumbers());
      assertFalse(toXmlGenerator1.canWriteTypeId());
      assertEquals(0, toXmlGenerator1.getFormatFeatures());
      assertFalse(toXmlGenerator1.isClosed());
      assertEquals(0, toXmlGenerator1.getHighestEscapedChar());
      assertFalse(toXmlGenerator1.canWriteBinaryNatively());
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      
      BigInteger bigInteger0 = BigInteger.TEN;
      assertNotNull(bigInteger0);
      assertEquals((short)10, bigInteger0.shortValue());
      assertEquals((byte)10, bigInteger0.byteValue());
      
      toXmlGenerator0.writeNumber(bigInteger0);
      assertSame(toXmlGenerator0, toXmlGenerator1);
      assertFalse(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willValidateAttributes());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertTrue(writerConfig0.willEscapeCr());
      assertTrue(writerConfig0.willValidateStructure());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willValidateNames());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertTrue(writerConfig0.willValidateContent());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertEquals(1, iSOLatin1XmlWriter0.getRow());
      assertEquals("", simpleNsStreamWriter0.getEncoding());
      assertEquals("1.0", simpleNsStreamWriter0.getXmlVersion());
      assertEquals(0, simpleNsStreamWriter0.getAttributeCount());
      assertNull(simpleNsStreamWriter0.getBaseUri());
      assertEquals(0, toXmlGenerator0.getFeatureMask());
      assertFalse(toXmlGenerator0.canWriteObjectId());
      assertFalse(toXmlGenerator0.canWriteTypeId());
      assertTrue(toXmlGenerator0.canOmitFields());
      assertFalse(toXmlGenerator0.isClosed());
      assertTrue(toXmlGenerator0.inRoot());
      assertEquals(0, toXmlGenerator0.getFormatFeatures());
      assertFalse(toXmlGenerator0.canWriteBinaryNatively());
      assertEquals((-1), toXmlGenerator0.getOutputBuffered());
      assertTrue(toXmlGenerator0.canWriteFormattedNumbers());
      assertEquals(0, toXmlGenerator0.getHighestEscapedChar());
      assertEquals((short)10, bigInteger0.shortValue());
      assertEquals((byte)10, bigInteger0.byteValue());
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertNotNull(bufferRecycler0);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(3);
      assertNotNull(byteArrayOutputStream0);
      assertEquals("", byteArrayOutputStream0.toString());
      assertEquals(0, byteArrayOutputStream0.size());
      
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      assertNotNull(writerConfig0);
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertTrue(writerConfig0.willEscapeCr());
      assertFalse(writerConfig0.willValidateAttributes());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertTrue(writerConfig0.willValidateStructure());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertFalse(writerConfig0.willValidateNames());
      assertFalse(writerConfig0.willFixContent());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.willValidateContent());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      
      AsciiXmlWriter asciiXmlWriter0 = new AsciiXmlWriter(byteArrayOutputStream0, writerConfig0, true);
      assertNotNull(asciiXmlWriter0);
      assertEquals("", byteArrayOutputStream0.toString());
      assertEquals(0, byteArrayOutputStream0.size());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertTrue(writerConfig0.willEscapeCr());
      assertFalse(writerConfig0.willValidateAttributes());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertTrue(writerConfig0.willValidateStructure());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertFalse(writerConfig0.willValidateNames());
      assertFalse(writerConfig0.willFixContent());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.willValidateContent());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertEquals(1, asciiXmlWriter0.getRow());
      
      NonNsStreamWriter nonNsStreamWriter0 = new NonNsStreamWriter(asciiXmlWriter0, "", writerConfig0);
      assertNotNull(nonNsStreamWriter0);
      assertEquals("", byteArrayOutputStream0.toString());
      assertEquals(0, byteArrayOutputStream0.size());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertTrue(writerConfig0.willEscapeCr());
      assertFalse(writerConfig0.willValidateAttributes());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertTrue(writerConfig0.willValidateStructure());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertFalse(writerConfig0.willValidateNames());
      assertFalse(writerConfig0.willFixContent());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.willValidateContent());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertEquals(1, asciiXmlWriter0.getRow());
      assertEquals("1.0", nonNsStreamWriter0.getXmlVersion());
      assertEquals("", nonNsStreamWriter0.getEncoding());
      assertNull(nonNsStreamWriter0.getBaseUri());
      assertEquals(0, nonNsStreamWriter0.getAttributeCount());
      
      IOContext iOContext0 = new IOContext(bufferRecycler0, objectMapper0, false);
      assertNotNull(iOContext0);
      assertFalse(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 2, (-697), objectMapper0, nonNsStreamWriter0);
      assertNotNull(toXmlGenerator0);
      assertEquals("", byteArrayOutputStream0.toString());
      assertEquals(0, byteArrayOutputStream0.size());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertTrue(writerConfig0.willEscapeCr());
      assertFalse(writerConfig0.willValidateAttributes());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertTrue(writerConfig0.willValidateStructure());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertFalse(writerConfig0.willValidateNames());
      assertFalse(writerConfig0.willFixContent());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.willValidateContent());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertEquals(1, asciiXmlWriter0.getRow());
      assertEquals("1.0", nonNsStreamWriter0.getXmlVersion());
      assertEquals("", nonNsStreamWriter0.getEncoding());
      assertNull(nonNsStreamWriter0.getBaseUri());
      assertEquals(0, nonNsStreamWriter0.getAttributeCount());
      assertFalse(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertFalse(toXmlGenerator0.canWriteTypeId());
      assertEquals((-1), toXmlGenerator0.getOutputBuffered());
      assertFalse(toXmlGenerator0.isClosed());
      assertEquals(0, toXmlGenerator0.getHighestEscapedChar());
      assertEquals(2, toXmlGenerator0.getFeatureMask());
      assertFalse(toXmlGenerator0.canWriteObjectId());
      assertTrue(toXmlGenerator0.canWriteFormattedNumbers());
      assertFalse(toXmlGenerator0.canWriteBinaryNatively());
      assertTrue(toXmlGenerator0.inRoot());
      assertTrue(toXmlGenerator0.canOmitFields());
      assertEquals((-697), toXmlGenerator0.getFormatFeatures());
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      
      QName qName0 = new QName("R^`/lY", "", "R^`/lY");
      assertNotNull(qName0);
      
      toXmlGenerator0.startWrappedValue(qName0, qName0);
      assertEquals("", byteArrayOutputStream0.toString());
      assertEquals(0, byteArrayOutputStream0.size());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertTrue(writerConfig0.willEscapeCr());
      assertFalse(writerConfig0.willValidateAttributes());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertTrue(writerConfig0.willValidateStructure());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertFalse(writerConfig0.willValidateNames());
      assertFalse(writerConfig0.willFixContent());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.willValidateContent());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertEquals(1, asciiXmlWriter0.getRow());
      assertEquals("1.0", nonNsStreamWriter0.getXmlVersion());
      assertEquals("", nonNsStreamWriter0.getEncoding());
      assertNull(nonNsStreamWriter0.getBaseUri());
      assertEquals(0, nonNsStreamWriter0.getAttributeCount());
      assertFalse(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertFalse(toXmlGenerator0.canWriteTypeId());
      assertEquals((-1), toXmlGenerator0.getOutputBuffered());
      assertFalse(toXmlGenerator0.isClosed());
      assertEquals(0, toXmlGenerator0.getHighestEscapedChar());
      assertEquals(2, toXmlGenerator0.getFeatureMask());
      assertFalse(toXmlGenerator0.canWriteObjectId());
      assertTrue(toXmlGenerator0.canWriteFormattedNumbers());
      assertFalse(toXmlGenerator0.canWriteBinaryNatively());
      assertTrue(toXmlGenerator0.inRoot());
      assertTrue(toXmlGenerator0.canOmitFields());
      assertEquals((-697), toXmlGenerator0.getFormatFeatures());
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      
      BigInteger bigInteger0 = BigInteger.ZERO;
      assertNotNull(bigInteger0);
      assertEquals((short)0, bigInteger0.shortValue());
      assertEquals((byte)0, bigInteger0.byteValue());
      
      toXmlGenerator0.writeNumber(bigInteger0);
      assertEquals("", byteArrayOutputStream0.toString());
      assertEquals(0, byteArrayOutputStream0.size());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertTrue(writerConfig0.willEscapeCr());
      assertFalse(writerConfig0.willValidateAttributes());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertTrue(writerConfig0.willValidateStructure());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertFalse(writerConfig0.willValidateNames());
      assertFalse(writerConfig0.willFixContent());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.willValidateContent());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertEquals(1, asciiXmlWriter0.getRow());
      assertEquals("1.0", nonNsStreamWriter0.getXmlVersion());
      assertEquals("", nonNsStreamWriter0.getEncoding());
      assertNull(nonNsStreamWriter0.getBaseUri());
      assertEquals(0, nonNsStreamWriter0.getAttributeCount());
      assertFalse(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertFalse(toXmlGenerator0.canWriteTypeId());
      assertEquals((-1), toXmlGenerator0.getOutputBuffered());
      assertFalse(toXmlGenerator0.isClosed());
      assertEquals(0, toXmlGenerator0.getHighestEscapedChar());
      assertEquals(2, toXmlGenerator0.getFeatureMask());
      assertFalse(toXmlGenerator0.canWriteObjectId());
      assertTrue(toXmlGenerator0.canWriteFormattedNumbers());
      assertFalse(toXmlGenerator0.canWriteBinaryNatively());
      assertTrue(toXmlGenerator0.inRoot());
      assertTrue(toXmlGenerator0.canOmitFields());
      assertEquals((-697), toXmlGenerator0.getFormatFeatures());
      assertEquals((short)0, bigInteger0.shortValue());
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertNotNull(bufferRecycler0);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      assertNotNull(iOContext0);
      assertNull(iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      
      WriterConfig writerConfig0 = WriterConfig.createJ2MEDefaults();
      assertNotNull(writerConfig0);
      assertTrue(writerConfig0.willSupportNamespaces());
      assertFalse(writerConfig0.willValidateNames());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.willValidateStructure());
      assertTrue(writerConfig0.willValidateContent());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertTrue(writerConfig0.willEscapeCr());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertFalse(writerConfig0.willValidateAttributes());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      
      ISOLatin1XmlWriter iSOLatin1XmlWriter0 = new ISOLatin1XmlWriter((OutputStream) null, writerConfig0, false);
      assertNotNull(iSOLatin1XmlWriter0);
      assertTrue(writerConfig0.willSupportNamespaces());
      assertFalse(writerConfig0.willValidateNames());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.willValidateStructure());
      assertTrue(writerConfig0.willValidateContent());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertTrue(writerConfig0.willEscapeCr());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertFalse(writerConfig0.willValidateAttributes());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertEquals(1, iSOLatin1XmlWriter0.getRow());
      
      SimpleNsStreamWriter simpleNsStreamWriter0 = new SimpleNsStreamWriter(iSOLatin1XmlWriter0, "", writerConfig0);
      assertNotNull(simpleNsStreamWriter0);
      assertTrue(writerConfig0.willSupportNamespaces());
      assertFalse(writerConfig0.willValidateNames());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.willValidateStructure());
      assertTrue(writerConfig0.willValidateContent());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertTrue(writerConfig0.willEscapeCr());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertFalse(writerConfig0.willValidateAttributes());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertEquals(1, iSOLatin1XmlWriter0.getRow());
      assertEquals("1.0", simpleNsStreamWriter0.getXmlVersion());
      assertEquals("", simpleNsStreamWriter0.getEncoding());
      assertEquals(0, simpleNsStreamWriter0.getAttributeCount());
      assertNull(simpleNsStreamWriter0.getBaseUri());
      
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 0, 0, objectMapper0, simpleNsStreamWriter0);
      assertNotNull(toXmlGenerator0);
      assertNull(iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertFalse(writerConfig0.willValidateNames());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.willValidateStructure());
      assertTrue(writerConfig0.willValidateContent());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertTrue(writerConfig0.willEscapeCr());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertFalse(writerConfig0.willValidateAttributes());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertEquals(1, iSOLatin1XmlWriter0.getRow());
      assertEquals("1.0", simpleNsStreamWriter0.getXmlVersion());
      assertEquals("", simpleNsStreamWriter0.getEncoding());
      assertEquals(0, simpleNsStreamWriter0.getAttributeCount());
      assertNull(simpleNsStreamWriter0.getBaseUri());
      assertFalse(toXmlGenerator0.canWriteBinaryNatively());
      assertTrue(toXmlGenerator0.canWriteFormattedNumbers());
      assertEquals(0, toXmlGenerator0.getFormatFeatures());
      assertTrue(toXmlGenerator0.inRoot());
      assertFalse(toXmlGenerator0.isClosed());
      assertTrue(toXmlGenerator0.canOmitFields());
      assertFalse(toXmlGenerator0.canWriteTypeId());
      assertEquals((-1), toXmlGenerator0.getOutputBuffered());
      assertFalse(toXmlGenerator0.canWriteObjectId());
      assertEquals(0, toXmlGenerator0.getHighestEscapedChar());
      assertEquals(0, toXmlGenerator0.getFeatureMask());
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      
      // Undeclared exception!
//      try { 
        toXmlGenerator0.writeNumber((BigInteger) null);
//        fail("Expecting exception: IllegalStateException");
      
//      } catch(IllegalStateException e) {
//         //
//         // No element/attribute name specified when trying to output element
//         //
//         verifyException("com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertNotNull(bufferRecycler0);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(3);
      assertNotNull(byteArrayOutputStream0);
      assertEquals(0, byteArrayOutputStream0.size());
      assertEquals("", byteArrayOutputStream0.toString());
      
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      assertNotNull(writerConfig0);
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.willValidateContent());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertFalse(writerConfig0.willValidateAttributes());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertTrue(writerConfig0.willEscapeCr());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertTrue(writerConfig0.willValidateStructure());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willValidateNames());
      assertFalse(writerConfig0.willAutoCloseOutput());
      
      AsciiXmlWriter asciiXmlWriter0 = new AsciiXmlWriter(byteArrayOutputStream0, writerConfig0, true);
      assertNotNull(asciiXmlWriter0);
      assertEquals(0, byteArrayOutputStream0.size());
      assertEquals("", byteArrayOutputStream0.toString());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.willValidateContent());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertFalse(writerConfig0.willValidateAttributes());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertTrue(writerConfig0.willEscapeCr());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertTrue(writerConfig0.willValidateStructure());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willValidateNames());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertEquals(1, asciiXmlWriter0.getRow());
      
      NonNsStreamWriter nonNsStreamWriter0 = new NonNsStreamWriter(asciiXmlWriter0, "", writerConfig0);
      assertNotNull(nonNsStreamWriter0);
      assertEquals(0, byteArrayOutputStream0.size());
      assertEquals("", byteArrayOutputStream0.toString());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.willValidateContent());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertFalse(writerConfig0.willValidateAttributes());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertTrue(writerConfig0.willEscapeCr());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertTrue(writerConfig0.willValidateStructure());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willValidateNames());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertEquals(1, asciiXmlWriter0.getRow());
      assertEquals("", nonNsStreamWriter0.getEncoding());
      assertNull(nonNsStreamWriter0.getBaseUri());
      assertEquals(0, nonNsStreamWriter0.getAttributeCount());
      assertEquals("1.0", nonNsStreamWriter0.getXmlVersion());
      
      IOContext iOContext0 = new IOContext(bufferRecycler0, objectMapper0, false);
      assertNotNull(iOContext0);
      assertFalse(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 2, (-697), objectMapper0, nonNsStreamWriter0);
      assertNotNull(toXmlGenerator0);
      assertEquals(0, byteArrayOutputStream0.size());
      assertEquals("", byteArrayOutputStream0.toString());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.willValidateContent());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertFalse(writerConfig0.willValidateAttributes());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertTrue(writerConfig0.willEscapeCr());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertTrue(writerConfig0.willValidateStructure());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willValidateNames());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertEquals(1, asciiXmlWriter0.getRow());
      assertEquals("", nonNsStreamWriter0.getEncoding());
      assertNull(nonNsStreamWriter0.getBaseUri());
      assertEquals(0, nonNsStreamWriter0.getAttributeCount());
      assertEquals("1.0", nonNsStreamWriter0.getXmlVersion());
      assertFalse(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertFalse(toXmlGenerator0.canWriteBinaryNatively());
      assertTrue(toXmlGenerator0.canOmitFields());
      assertTrue(toXmlGenerator0.inRoot());
      assertFalse(toXmlGenerator0.isClosed());
      assertFalse(toXmlGenerator0.canWriteObjectId());
      assertEquals((-1), toXmlGenerator0.getOutputBuffered());
      assertFalse(toXmlGenerator0.canWriteTypeId());
      assertEquals((-697), toXmlGenerator0.getFormatFeatures());
      assertEquals(2, toXmlGenerator0.getFeatureMask());
      assertTrue(toXmlGenerator0.canWriteFormattedNumbers());
      assertEquals(0, toXmlGenerator0.getHighestEscapedChar());
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      
      BigInteger bigInteger0 = BigInteger.ZERO;
      assertNotNull(bigInteger0);
      assertEquals((short)0, bigInteger0.shortValue());
      assertEquals((byte)0, bigInteger0.byteValue());
      
      // Undeclared exception!
//      try { 
        toXmlGenerator0.writeNumber(bigInteger0);
//        fail("Expecting exception: IllegalStateException");
      
//      } catch(IllegalStateException e) {
//         //
//         // No element/attribute name specified when trying to output element
//         //
//         verifyException("com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      ObjectMapper objectMapper0 = new ObjectMapper();
      WriterConfig writerConfig0 = WriterConfig.createJ2MEDefaults();
      IOContext iOContext0 = new IOContext(bufferRecycler0, writerConfig0, true);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      AsciiXmlWriter asciiXmlWriter0 = new AsciiXmlWriter(byteArrayOutputStream0, writerConfig0, false);
      SimpleNsStreamWriter simpleNsStreamWriter0 = new SimpleNsStreamWriter(asciiXmlWriter0, "", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 1638, (-232), objectMapper0, simpleNsStreamWriter0);
      QName qName0 = QName.valueOf("");
      toXmlGenerator0.startWrappedValue(qName0, qName0);
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      toXmlGenerator0.writeNumber(bigDecimal0);
      assertEquals((-232), toXmlGenerator0.getFormatFeatures());
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      ObjectMapper objectMapper0 = new ObjectMapper();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(3);
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      AsciiXmlWriter asciiXmlWriter0 = new AsciiXmlWriter(byteArrayOutputStream0, writerConfig0, true);
      NonNsStreamWriter nonNsStreamWriter0 = new NonNsStreamWriter(asciiXmlWriter0, "", writerConfig0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, objectMapper0, false);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 2, (-697), objectMapper0, nonNsStreamWriter0);
      QName qName0 = new QName("R^`/lY", "", "R^`/lY");
      toXmlGenerator0.startWrappedValue(qName0, qName0);
      BigDecimal bigDecimal0 = new BigDecimal(1.0);
      toXmlGenerator0.writeNumber(bigDecimal0);
      assertEquals((-697), toXmlGenerator0.getFormatFeatures());
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      ObjectMapper objectMapper0 = new ObjectMapper();
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      DefaultXmlPrettyPrinter defaultXmlPrettyPrinter0 = new DefaultXmlPrettyPrinter();
      IOContext iOContext0 = new IOContext(bufferRecycler0, defaultXmlPrettyPrinter0, false);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      AsciiXmlWriter asciiXmlWriter0 = new AsciiXmlWriter(byteArrayOutputStream0, writerConfig0, true);
      SimpleNsStreamWriter simpleNsStreamWriter0 = new SimpleNsStreamWriter(asciiXmlWriter0, "$9", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 1825, 2, objectMapper0, simpleNsStreamWriter0);
      // Undeclared exception!
//      try { 
        toXmlGenerator0.writeNumber((BigDecimal) null);
//        fail("Expecting exception: IllegalStateException");
      
//      } catch(IllegalStateException e) {
//         //
//         // No element/attribute name specified when trying to output element
//         //
//         verifyException("com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      ObjectMapper objectMapper0 = new ObjectMapper();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(3);
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      AsciiXmlWriter asciiXmlWriter0 = new AsciiXmlWriter(byteArrayOutputStream0, writerConfig0, true);
      NonNsStreamWriter nonNsStreamWriter0 = new NonNsStreamWriter(asciiXmlWriter0, "", writerConfig0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, objectMapper0, false);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 2, (-697), objectMapper0, nonNsStreamWriter0);
      BigDecimal bigDecimal0 = new BigDecimal(1.0);
      // Undeclared exception!
//      try { 
        toXmlGenerator0.writeNumber(bigDecimal0);
//        fail("Expecting exception: IllegalStateException");
      
//      } catch(IllegalStateException e) {
//         //
//         // No element/attribute name specified when trying to output element
//         //
//         verifyException("com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      NonNsStreamWriter nonNsStreamWriter0 = new NonNsStreamWriter((XmlWriter) null, "_", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator((IOContext) null, 1, 0, objectMapper0, nonNsStreamWriter0);
      // Undeclared exception!
//      try { 
        toXmlGenerator0.writeNumber((float) 0);
//        fail("Expecting exception: IllegalStateException");
      
//      } catch(IllegalStateException e) {
//         //
//         // No element/attribute name specified when trying to output element
//         //
//         verifyException("com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      ObjectMapper objectMapper0 = new ObjectMapper();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(3);
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      AsciiXmlWriter asciiXmlWriter0 = new AsciiXmlWriter(byteArrayOutputStream0, writerConfig0, true);
      NonNsStreamWriter nonNsStreamWriter0 = new NonNsStreamWriter(asciiXmlWriter0, "", writerConfig0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, objectMapper0, false);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 2, (-697), objectMapper0, nonNsStreamWriter0);
      QName qName0 = new QName("R^`/lY", "", "R^`/lY");
      toXmlGenerator0.startWrappedValue(qName0, qName0);
      toXmlGenerator0.writeNumber((float) 0);
      assertEquals((-697), toXmlGenerator0.getFormatFeatures());
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      ObjectMapper objectMapper0 = new ObjectMapper();
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      NonNsStreamWriter nonNsStreamWriter0 = new NonNsStreamWriter((XmlWriter) null, "Y1^1WJ.5xLA@es", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 2, 1, objectMapper0, nonNsStreamWriter0);
      // Undeclared exception!
//      try { 
        toXmlGenerator0.writeNumber((double) 0);
//        fail("Expecting exception: IllegalStateException");
      
//      } catch(IllegalStateException e) {
//         //
//         // No element/attribute name specified when trying to output element
//         //
//         verifyException("com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      ObjectMapper objectMapper0 = new ObjectMapper();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(3);
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      AsciiXmlWriter asciiXmlWriter0 = new AsciiXmlWriter(byteArrayOutputStream0, writerConfig0, false);
      NonNsStreamWriter nonNsStreamWriter0 = new NonNsStreamWriter(asciiXmlWriter0, "", writerConfig0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, "", false);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, (-697), 3, objectMapper0, nonNsStreamWriter0);
      QName qName0 = new QName("write String value", "R^`/lY", "write String value");
      toXmlGenerator0.startWrappedValue(qName0, qName0);
      toXmlGenerator0.writeNumber((-2808.1683203640087));
      assertEquals(3, toXmlGenerator0.getFormatFeatures());
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      ObjectMapper objectMapper0 = new ObjectMapper();
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      ISOLatin1XmlWriter iSOLatin1XmlWriter0 = new ISOLatin1XmlWriter((OutputStream) null, writerConfig0, false);
      SimpleNsStreamWriter simpleNsStreamWriter0 = new SimpleNsStreamWriter(iSOLatin1XmlWriter0, "", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 0, 0, objectMapper0, simpleNsStreamWriter0);
      QName qName0 = QName.valueOf(";'<#W5G5p");
      toXmlGenerator0.startWrappedValue(qName0, qName0);
      toXmlGenerator0.useDefaultPrettyPrinter();
      toXmlGenerator0.writeNumber((long) 57343);
      assertEquals(0, toXmlGenerator0.getFormatFeatures());
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      ObjectMapper objectMapper0 = new ObjectMapper();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(3);
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      AsciiXmlWriter asciiXmlWriter0 = new AsciiXmlWriter(byteArrayOutputStream0, writerConfig0, false);
      NonNsStreamWriter nonNsStreamWriter0 = new NonNsStreamWriter(asciiXmlWriter0, "", writerConfig0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, "", true);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 1, (-422), objectMapper0, nonNsStreamWriter0);
      // Undeclared exception!
//      try { 
        toXmlGenerator0.writeNumber(2147483647L);
//        fail("Expecting exception: IllegalStateException");
      
//      } catch(IllegalStateException e) {
//         //
//         // No element/attribute name specified when trying to output element
//         //
//         verifyException("com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      ObjectMapper objectMapper0 = new ObjectMapper();
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      ISOLatin1XmlWriter iSOLatin1XmlWriter0 = new ISOLatin1XmlWriter((OutputStream) null, writerConfig0, true);
      SimpleNsStreamWriter simpleNsStreamWriter0 = new SimpleNsStreamWriter(iSOLatin1XmlWriter0, "", writerConfig0);
      QName qName0 = QName.valueOf("");
      StreamWriter2Delegate streamWriter2Delegate0 = new StreamWriter2Delegate(simpleNsStreamWriter0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 11, 1, objectMapper0, streamWriter2Delegate0);
      toXmlGenerator0.startWrappedValue(qName0, qName0);
      // Undeclared exception!
//      try { 
        toXmlGenerator0.writeNumber(3156L);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.codehaus.stax2.util.StreamWriter2Delegate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      ObjectMapper objectMapper0 = new ObjectMapper();
      WriterConfig writerConfig0 = WriterConfig.createJ2MEDefaults();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "+[e5h~O", false);
      NonNsStreamWriter nonNsStreamWriter0 = new NonNsStreamWriter((XmlWriter) null, "+[e5h~O", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 0, 3, objectMapper0, nonNsStreamWriter0);
      // Undeclared exception!
//      try { 
        toXmlGenerator0.writeNumber(2);
//        fail("Expecting exception: IllegalStateException");
      
//      } catch(IllegalStateException e) {
//         //
//         // No element/attribute name specified when trying to output element
//         //
//         verifyException("com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      ObjectMapper objectMapper0 = new ObjectMapper();
      WriterConfig writerConfig0 = WriterConfig.createJ2MEDefaults();
      ISOLatin1XmlWriter iSOLatin1XmlWriter0 = new ISOLatin1XmlWriter((OutputStream) null, writerConfig0, true);
      SimpleNsStreamWriter simpleNsStreamWriter0 = new SimpleNsStreamWriter(iSOLatin1XmlWriter0, "", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 0, 3, objectMapper0, simpleNsStreamWriter0);
      QName qName0 = new QName("", "");
      toXmlGenerator0.startWrappedValue(qName0, qName0);
      toXmlGenerator0.useDefaultPrettyPrinter();
      toXmlGenerator0.writeNull();
      assertEquals(3, toXmlGenerator0.getFormatFeatures());
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      ObjectMapper objectMapper0 = new ObjectMapper();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(3);
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      AsciiXmlWriter asciiXmlWriter0 = new AsciiXmlWriter(byteArrayOutputStream0, writerConfig0, true);
      NonNsStreamWriter nonNsStreamWriter0 = new NonNsStreamWriter(asciiXmlWriter0, "", writerConfig0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, objectMapper0, false);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 2, (-697), objectMapper0, nonNsStreamWriter0);
      QName qName0 = new QName("R^`/lY", "", "R^`/lY");
      toXmlGenerator0.startWrappedValue(qName0, qName0);
      toXmlGenerator0.writeNull();
      assertEquals((-697), toXmlGenerator0.getFormatFeatures());
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      WriterConfig writerConfig0 = WriterConfig.createJ2MEDefaults();
      NonNsStreamWriter nonNsStreamWriter0 = new NonNsStreamWriter((XmlWriter) null, "(#PCDATA | ", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator((IOContext) null, 3, 0, objectMapper0, nonNsStreamWriter0);
      // Undeclared exception!
//      try { 
        toXmlGenerator0.writeBoolean(true);
//        fail("Expecting exception: IllegalStateException");
      
//      } catch(IllegalStateException e) {
//         //
//         // No element/attribute name specified when trying to output element
//         //
//         verifyException("com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      ObjectMapper objectMapper0 = new ObjectMapper();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      AsciiXmlWriter asciiXmlWriter0 = new AsciiXmlWriter(byteArrayOutputStream0, writerConfig0, true);
      NonNsStreamWriter nonNsStreamWriter0 = new NonNsStreamWriter(asciiXmlWriter0, "nWhAOd|*hlP*qX8", writerConfig0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, objectMapper0, false);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 2, (-697), objectMapper0, nonNsStreamWriter0);
      QName qName0 = new QName("R^`/lY", "nWhAOd|*hlP*qX8", "R^`/lY");
      toXmlGenerator0.startWrappedValue(qName0, qName0);
      toXmlGenerator0.writeBoolean(true);
      assertEquals((-697), toXmlGenerator0.getFormatFeatures());
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      ObjectMapper objectMapper0 = new ObjectMapper();
      byte[] byteArray0 = iOContext0.allocBase64Buffer(2);
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      ISOLatin1XmlWriter iSOLatin1XmlWriter0 = new ISOLatin1XmlWriter((OutputStream) null, writerConfig0, false);
      SimpleNsStreamWriter simpleNsStreamWriter0 = new SimpleNsStreamWriter(iSOLatin1XmlWriter0, "", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 0, 0, objectMapper0, simpleNsStreamWriter0);
      DefaultXmlPrettyPrinter defaultXmlPrettyPrinter0 = new DefaultXmlPrettyPrinter();
      toXmlGenerator0._xmlPrettyPrinter = (XmlPrettyPrinter) defaultXmlPrettyPrinter0;
      QName qName0 = new QName("", "");
      toXmlGenerator0.startWrappedValue(qName0, qName0);
      toXmlGenerator0.writeBinary(byteArray0);
      assertEquals(0, toXmlGenerator0.getFormatFeatures());
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      ObjectMapper objectMapper0 = new ObjectMapper();
      WriterConfig writerConfig0 = WriterConfig.createJ2MEDefaults();
      IOContext iOContext0 = new IOContext(bufferRecycler0, writerConfig0, true);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      AsciiXmlWriter asciiXmlWriter0 = new AsciiXmlWriter(byteArrayOutputStream0, writerConfig0, false);
      SimpleNsStreamWriter simpleNsStreamWriter0 = new SimpleNsStreamWriter(asciiXmlWriter0, "", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 1638, (-232), objectMapper0, simpleNsStreamWriter0);
      QName qName0 = QName.valueOf("");
      toXmlGenerator0.startWrappedValue(qName0, qName0);
      byte[] byteArray0 = new byte[7];
      toXmlGenerator0.writeBinary(byteArray0);
      assertEquals((-232), toXmlGenerator0.getFormatFeatures());
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      ObjectMapper objectMapper0 = new ObjectMapper();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      AsciiXmlWriter asciiXmlWriter0 = new AsciiXmlWriter(byteArrayOutputStream0, writerConfig0, true);
      NonNsStreamWriter nonNsStreamWriter0 = new NonNsStreamWriter(asciiXmlWriter0, "nWhAOd|*hlP*qX8", writerConfig0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, objectMapper0, false);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 2, (-697), objectMapper0, nonNsStreamWriter0);
      // Undeclared exception!
//      try { 
        toXmlGenerator0.writeBinary((Base64Variant) null, (byte[]) null, 56319, 4);
//        fail("Expecting exception: IllegalStateException");
      
//      } catch(IllegalStateException e) {
//         //
//         // No element/attribute name specified when trying to output element
//         //
//         verifyException("com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      ObjectMapper objectMapper0 = new ObjectMapper();
      WriterConfig writerConfig0 = WriterConfig.createJ2MEDefaults();
      IOContext iOContext0 = new IOContext(bufferRecycler0, writerConfig0, true);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      AsciiXmlWriter asciiXmlWriter0 = new AsciiXmlWriter(byteArrayOutputStream0, writerConfig0, false);
      SimpleNsStreamWriter simpleNsStreamWriter0 = new SimpleNsStreamWriter(asciiXmlWriter0, "", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 1638, (-232), objectMapper0, simpleNsStreamWriter0);
      byte[] byteArray0 = new byte[7];
      // Undeclared exception!
//      try { 
        toXmlGenerator0.writeBinary(byteArray0);
//        fail("Expecting exception: IllegalStateException");
      
//      } catch(IllegalStateException e) {
//         //
//         // No element/attribute name specified when trying to output element
//         //
//         verifyException("com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      ObjectMapper objectMapper0 = new ObjectMapper();
      WriterConfig writerConfig0 = WriterConfig.createJ2MEDefaults();
      ISOLatin1XmlWriter iSOLatin1XmlWriter0 = new ISOLatin1XmlWriter((OutputStream) null, writerConfig0, false);
      NonNsStreamWriter nonNsStreamWriter0 = new NonNsStreamWriter(iSOLatin1XmlWriter0, "v]JKps,|", writerConfig0);
      StreamWriterDelegate streamWriterDelegate0 = new StreamWriterDelegate(nonNsStreamWriter0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 4355, 2, objectMapper0, streamWriterDelegate0);
//      try { 
        toXmlGenerator0.writeRaw((char[]) null, (-1519), (-410));
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Underlying Stax XMLStreamWriter (of type org.codehaus.stax2.util.StreamWriterDelegate) does not implement Stax2 API natively and is missing method 'writeRaw': this breaks functionality such as indentation that relies on it. You need to upgrade to using compliant Stax implementation like Woodstox or Aalto
//         //
//         verifyException("com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      ObjectMapper objectMapper0 = new ObjectMapper();
      WriterConfig writerConfig0 = WriterConfig.createJ2MEDefaults();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "", false);
      NonNsStreamWriter nonNsStreamWriter0 = new NonNsStreamWriter((XmlWriter) null, "", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 0, 3, objectMapper0, nonNsStreamWriter0);
      char[] charArray0 = new char[3];
      // Undeclared exception!
//      try { 
        toXmlGenerator0.writeRaw(charArray0, 56320, 0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.ctc.wstx.sw.BaseStreamWriter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      ObjectMapper objectMapper0 = new ObjectMapper();
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "", false);
      NonNsStreamWriter nonNsStreamWriter0 = new NonNsStreamWriter((XmlWriter) null, "", writerConfig0);
      StreamWriterDelegate streamWriterDelegate0 = new StreamWriterDelegate(nonNsStreamWriter0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 406, 1, objectMapper0, streamWriterDelegate0);
//      try { 
        toXmlGenerator0.writeRaw("", 2456, 3);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Underlying Stax XMLStreamWriter (of type org.codehaus.stax2.util.StreamWriterDelegate) does not implement Stax2 API natively and is missing method 'writeRaw': this breaks functionality such as indentation that relies on it. You need to upgrade to using compliant Stax implementation like Woodstox or Aalto
//         //
//         verifyException("com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      ObjectMapper objectMapper0 = new ObjectMapper();
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      NonNsStreamWriter nonNsStreamWriter0 = new NonNsStreamWriter((XmlWriter) null, "", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 2, 1, objectMapper0, nonNsStreamWriter0);
      // Undeclared exception!
//      try { 
        toXmlGenerator0.writeRaw("", 0, 1);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.ctc.wstx.sw.BaseStreamWriter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      ObjectMapper objectMapper0 = new ObjectMapper();
      WriterConfig writerConfig0 = WriterConfig.createJ2MEDefaults();
      IOContext iOContext0 = new IOContext(bufferRecycler0, writerConfig0, false);
      NonNsStreamWriter nonNsStreamWriter0 = new NonNsStreamWriter((XmlWriter) null, "|XdIGiKH%{.so", writerConfig0);
      StreamWriterDelegate streamWriterDelegate0 = new StreamWriterDelegate(nonNsStreamWriter0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 2149, 1, objectMapper0, streamWriterDelegate0);
//      try { 
        toXmlGenerator0.writeRaw("");
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Underlying Stax XMLStreamWriter (of type org.codehaus.stax2.util.StreamWriterDelegate) does not implement Stax2 API natively and is missing method 'writeRaw': this breaks functionality such as indentation that relies on it. You need to upgrade to using compliant Stax implementation like Woodstox or Aalto
//         //
//         verifyException("com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      ObjectMapper objectMapper0 = new ObjectMapper();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(3);
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      AsciiXmlWriter asciiXmlWriter0 = new AsciiXmlWriter(byteArrayOutputStream0, writerConfig0, true);
      NonNsStreamWriter nonNsStreamWriter0 = new NonNsStreamWriter(asciiXmlWriter0, "", writerConfig0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, objectMapper0, false);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 2, (-697), objectMapper0, nonNsStreamWriter0);
      QName qName0 = QName.valueOf("R^`/lY");
      toXmlGenerator0.startWrappedValue(qName0, qName0);
      toXmlGenerator0.setNextIsAttribute(true);
      // Undeclared exception!
//      try { 
        toXmlGenerator0.writeRawValue((char[]) null, (-2025), 2);
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      ObjectMapper objectMapper0 = new ObjectMapper();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(3);
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      AsciiXmlWriter asciiXmlWriter0 = new AsciiXmlWriter(byteArrayOutputStream0, writerConfig0, true);
      NonNsStreamWriter nonNsStreamWriter0 = new NonNsStreamWriter(asciiXmlWriter0, "", writerConfig0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, objectMapper0, false);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 2, (-697), objectMapper0, nonNsStreamWriter0);
      QName qName0 = QName.valueOf("R^`/lY");
      toXmlGenerator0.startWrappedValue(qName0, qName0);
      // Undeclared exception!
//      try { 
        toXmlGenerator0.writeRawValue((char[]) null, (-2025), 2);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.ctc.wstx.sw.AsciiXmlWriter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      ObjectMapper objectMapper0 = new ObjectMapper();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(3);
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      AsciiXmlWriter asciiXmlWriter0 = new AsciiXmlWriter(byteArrayOutputStream0, writerConfig0, false);
      NonNsStreamWriter nonNsStreamWriter0 = new NonNsStreamWriter(asciiXmlWriter0, "", writerConfig0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, "", false);
      StreamWriterDelegate streamWriterDelegate0 = new StreamWriterDelegate(nonNsStreamWriter0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 344, (-697), objectMapper0, streamWriterDelegate0);
      char[] charArray0 = new char[6];
//      try { 
        toXmlGenerator0.writeRawValue(charArray0, 344, 1);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Underlying Stax XMLStreamWriter (of type org.codehaus.stax2.util.StreamWriterDelegate) does not implement Stax2 API natively and is missing method 'writeRawValue': this breaks functionality such as indentation that relies on it. You need to upgrade to using compliant Stax implementation like Woodstox or Aalto
//         //
//         verifyException("com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      ObjectMapper objectMapper0 = new ObjectMapper();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(3);
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      AsciiXmlWriter asciiXmlWriter0 = new AsciiXmlWriter(byteArrayOutputStream0, writerConfig0, true);
      NonNsStreamWriter nonNsStreamWriter0 = new NonNsStreamWriter(asciiXmlWriter0, "", writerConfig0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, objectMapper0, false);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 2, (-697), objectMapper0, nonNsStreamWriter0);
      // Undeclared exception!
//      try { 
        toXmlGenerator0.writeRawValue((char[]) null, (-2025), 2);
//        fail("Expecting exception: IllegalStateException");
      
//      } catch(IllegalStateException e) {
//         //
//         // No element/attribute name specified when trying to output element
//         //
//         verifyException("com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      ObjectMapper objectMapper0 = new ObjectMapper();
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      ISOLatin1XmlWriter iSOLatin1XmlWriter0 = new ISOLatin1XmlWriter((OutputStream) null, writerConfig0, true);
      SimpleNsStreamWriter simpleNsStreamWriter0 = new SimpleNsStreamWriter(iSOLatin1XmlWriter0, "", writerConfig0);
      QName qName0 = QName.valueOf("");
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 2, 3, objectMapper0, simpleNsStreamWriter0);
      toXmlGenerator0.startWrappedValue(qName0, qName0);
      toXmlGenerator0.writeRawValue("", 1, 0);
      assertEquals(3, toXmlGenerator0.getFormatFeatures());
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      ObjectMapper objectMapper0 = new ObjectMapper();
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      ISOLatin1XmlWriter iSOLatin1XmlWriter0 = new ISOLatin1XmlWriter((OutputStream) null, writerConfig0, true);
      SimpleNsStreamWriter simpleNsStreamWriter0 = new SimpleNsStreamWriter(iSOLatin1XmlWriter0, "", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 2, 3, objectMapper0, simpleNsStreamWriter0);
      // Undeclared exception!
//      try { 
        toXmlGenerator0.writeRawValue("", 1, 0);
//        fail("Expecting exception: IllegalStateException");
      
//      } catch(IllegalStateException e) {
//         //
//         // No element/attribute name specified when trying to output element
//         //
//         verifyException("com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      ObjectMapper objectMapper0 = new ObjectMapper();
      WriterConfig writerConfig0 = WriterConfig.createJ2MEDefaults();
      ISOLatin1XmlWriter iSOLatin1XmlWriter0 = new ISOLatin1XmlWriter((OutputStream) null, writerConfig0, false);
      SimpleNsStreamWriter simpleNsStreamWriter0 = new SimpleNsStreamWriter(iSOLatin1XmlWriter0, "", writerConfig0);
      QName qName0 = new QName("", "");
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 2, 3, objectMapper0, simpleNsStreamWriter0);
      toXmlGenerator0.startWrappedValue(qName0, qName0);
      toXmlGenerator0.writeRawValue("");
      assertEquals(3, toXmlGenerator0.getFormatFeatures());
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      ObjectMapper objectMapper0 = new ObjectMapper();
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "Illegal to pass null as argument", true);
      SimpleNsStreamWriter simpleNsStreamWriter0 = new SimpleNsStreamWriter((XmlWriter) null, "Illegal to pass null as argument", writerConfig0);
      StreamWriterDelegate streamWriterDelegate0 = new StreamWriterDelegate(simpleNsStreamWriter0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 2, 657, objectMapper0, streamWriterDelegate0);
//      try { 
        toXmlGenerator0.writeRawValue("Illegal to pass null as argument");
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Underlying Stax XMLStreamWriter (of type org.codehaus.stax2.util.StreamWriterDelegate) does not implement Stax2 API natively and is missing method 'writeRawValue': this breaks functionality such as indentation that relies on it. You need to upgrade to using compliant Stax implementation like Woodstox or Aalto
//         //
//         verifyException("com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      ObjectMapper objectMapper0 = new ObjectMapper();
      WriterConfig writerConfig0 = WriterConfig.createJ2MEDefaults();
      ISOLatin1XmlWriter iSOLatin1XmlWriter0 = new ISOLatin1XmlWriter((OutputStream) null, writerConfig0, false);
      SimpleNsStreamWriter simpleNsStreamWriter0 = new SimpleNsStreamWriter(iSOLatin1XmlWriter0, "", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 0, 0, objectMapper0, simpleNsStreamWriter0);
      // Undeclared exception!
//      try { 
        toXmlGenerator0.writeRawValue("");
//        fail("Expecting exception: IllegalStateException");
      
//      } catch(IllegalStateException e) {
//         //
//         // No element/attribute name specified when trying to output element
//         //
//         verifyException("com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      ObjectMapper objectMapper0 = new ObjectMapper();
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      ISOLatin1XmlWriter iSOLatin1XmlWriter0 = new ISOLatin1XmlWriter((OutputStream) null, writerConfig0, true);
      SimpleNsStreamWriter simpleNsStreamWriter0 = new SimpleNsStreamWriter(iSOLatin1XmlWriter0, "", writerConfig0);
      QName qName0 = QName.valueOf("");
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 2, 3, objectMapper0, simpleNsStreamWriter0);
      toXmlGenerator0.startWrappedValue(qName0, qName0);
      char[] charArray0 = new char[16];
      toXmlGenerator0.writeString(charArray0, 5, 0);
      assertEquals(3, toXmlGenerator0.getFormatFeatures());
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      ObjectMapper objectMapper0 = new ObjectMapper();
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "Illegal to pass null as argument", true);
      NonNsStreamWriter nonNsStreamWriter0 = new NonNsStreamWriter((XmlWriter) null, "Illegal to pass null as argument", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 0, 3, objectMapper0, nonNsStreamWriter0);
//      try { 
        toXmlGenerator0.writeEndObject();
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Current context not Object but root
//         //
//         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      ObjectMapper objectMapper0 = new ObjectMapper();
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      ISOLatin1XmlWriter iSOLatin1XmlWriter0 = new ISOLatin1XmlWriter((OutputStream) null, writerConfig0, false);
      SimpleNsStreamWriter simpleNsStreamWriter0 = new SimpleNsStreamWriter(iSOLatin1XmlWriter0, "", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 0, 0, objectMapper0, simpleNsStreamWriter0);
      QName qName0 = new QName("", "");
      toXmlGenerator0.startWrappedValue(qName0, qName0);
      toXmlGenerator0.writeStartObject();
      toXmlGenerator0.writeEndObject();
      // Undeclared exception!
//      try { 
        toXmlGenerator0.writeString((char[]) null, 0, 2411);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.ctc.wstx.sw.ISOLatin1XmlWriter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      ObjectMapper objectMapper0 = new ObjectMapper();
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      ISOLatin1XmlWriter iSOLatin1XmlWriter0 = new ISOLatin1XmlWriter((OutputStream) null, writerConfig0, true);
      SimpleNsStreamWriter simpleNsStreamWriter0 = new SimpleNsStreamWriter(iSOLatin1XmlWriter0, "No element/attribute name specified when trying to output element", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 3, 2, objectMapper0, simpleNsStreamWriter0);
      DefaultXmlPrettyPrinter defaultXmlPrettyPrinter0 = new DefaultXmlPrettyPrinter();
      toXmlGenerator0.setPrettyPrinter(defaultXmlPrettyPrinter0);
      // Undeclared exception!
//      try { 
        toXmlGenerator0.writeStartObject();
//        fail("Expecting exception: IllegalStateException");
      
//      } catch(IllegalStateException e) {
//         //
//         // No element/attribute name specified when trying to output element
//         //
//         verifyException("com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      ObjectMapper objectMapper0 = new ObjectMapper();
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      IOContext iOContext0 = new IOContext(bufferRecycler0, writerConfig0, false);
      RepairingNsStreamWriter repairingNsStreamWriter0 = new RepairingNsStreamWriter((XmlWriter) null, "skipToken() called when current token is ", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 3, 1, objectMapper0, repairingNsStreamWriter0);
      DefaultPrettyPrinter defaultPrettyPrinter0 = new DefaultPrettyPrinter();
      toXmlGenerator0.writeStartArray((-2554));
      toXmlGenerator0.setPrettyPrinter(defaultPrettyPrinter0);
      // Undeclared exception!
//      try { 
        toXmlGenerator0.close();
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.ctc.wstx.sw.BaseStreamWriter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      ObjectMapper objectMapper0 = new ObjectMapper();
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      IOContext iOContext0 = new IOContext(bufferRecycler0, writerConfig0, false);
      RepairingNsStreamWriter repairingNsStreamWriter0 = new RepairingNsStreamWriter((XmlWriter) null, "pYe2nTG 0vpKb_", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 3, 1, objectMapper0, repairingNsStreamWriter0);
//      try { 
        toXmlGenerator0.writeEndArray();
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Current context not Array but root
//         //
//         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      ObjectMapper objectMapper0 = new ObjectMapper();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      WriterConfig writerConfig0 = WriterConfig.createJ2MEDefaults();
      AsciiXmlWriter asciiXmlWriter0 = new AsciiXmlWriter(byteArrayOutputStream0, writerConfig0, false);
      NonNsStreamWriter nonNsStreamWriter0 = new NonNsStreamWriter(asciiXmlWriter0, "", writerConfig0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, "", false);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 3, 1601, objectMapper0, nonNsStreamWriter0);
      toXmlGenerator0.writeStartArray();
      toXmlGenerator0.writeEndArray();
      assertEquals(1601, toXmlGenerator0.getFormatFeatures());
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      ObjectMapper objectMapper0 = new ObjectMapper();
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      ISOLatin1XmlWriter iSOLatin1XmlWriter0 = new ISOLatin1XmlWriter((OutputStream) null, writerConfig0, false);
      SimpleNsStreamWriter simpleNsStreamWriter0 = new SimpleNsStreamWriter(iSOLatin1XmlWriter0, "", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 0, 0, objectMapper0, simpleNsStreamWriter0);
      DefaultXmlPrettyPrinter defaultXmlPrettyPrinter0 = new DefaultXmlPrettyPrinter();
      JsonGenerator jsonGenerator0 = toXmlGenerator0.setPrettyPrinter(defaultXmlPrettyPrinter0);
      jsonGenerator0.writeStartArray(2526);
      toXmlGenerator0.writeEndArray();
      assertEquals(0, toXmlGenerator0.getFormatFeatures());
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      ObjectMapper objectMapper0 = new ObjectMapper();
      WriterConfig writerConfig0 = WriterConfig.createJ2MEDefaults();
      ISOLatin1XmlWriter iSOLatin1XmlWriter0 = new ISOLatin1XmlWriter((OutputStream) null, writerConfig0, false);
      SimpleNsStreamWriter simpleNsStreamWriter0 = new SimpleNsStreamWriter(iSOLatin1XmlWriter0, "", writerConfig0);
      QName qName0 = new QName("", "");
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 2, 3, objectMapper0, simpleNsStreamWriter0);
      toXmlGenerator0.startWrappedValue(qName0, qName0);
      toXmlGenerator0.writeStartObject();
      toXmlGenerator0.writeFieldName("");
      toXmlGenerator0.writeNumber(3);
      assertEquals(3, toXmlGenerator0.getFormatFeatures());
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      ObjectMapper objectMapper0 = new ObjectMapper();
      WriterConfig writerConfig0 = WriterConfig.createJ2MEDefaults();
      IOContext iOContext0 = new IOContext(bufferRecycler0, writerConfig0, true);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      AsciiXmlWriter asciiXmlWriter0 = new AsciiXmlWriter(byteArrayOutputStream0, writerConfig0, false);
      SimpleNsStreamWriter simpleNsStreamWriter0 = new SimpleNsStreamWriter(asciiXmlWriter0, "", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 1638, (-232), objectMapper0, simpleNsStreamWriter0);
      QName qName0 = QName.valueOf("");
      toXmlGenerator0.startWrappedValue(qName0, qName0);
//      try { 
        toXmlGenerator0.writeRepeatedFieldName();
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Can not write a field name, expecting a value
//         //
//         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      ObjectMapper objectMapper0 = new ObjectMapper();
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      ISOLatin1XmlWriter iSOLatin1XmlWriter0 = new ISOLatin1XmlWriter((OutputStream) null, writerConfig0, false);
      SimpleNsStreamWriter simpleNsStreamWriter0 = new SimpleNsStreamWriter(iSOLatin1XmlWriter0, "", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 0, 0, objectMapper0, simpleNsStreamWriter0);
      QName qName0 = new QName("", "");
      toXmlGenerator0.startWrappedValue(qName0, qName0);
      toXmlGenerator0.writeStartObject();
      toXmlGenerator0.writeRepeatedFieldName();
      assertEquals(0, toXmlGenerator0.getFormatFeatures());
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      ObjectMapper objectMapper0 = new ObjectMapper();
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      ISOLatin1XmlWriter iSOLatin1XmlWriter0 = new ISOLatin1XmlWriter((OutputStream) null, writerConfig0, false);
      SimpleNsStreamWriter simpleNsStreamWriter0 = new SimpleNsStreamWriter(iSOLatin1XmlWriter0, "", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 0, 0, objectMapper0, simpleNsStreamWriter0);
      QName qName0 = QName.valueOf("");
      DefaultXmlPrettyPrinter defaultXmlPrettyPrinter0 = new DefaultXmlPrettyPrinter();
      toXmlGenerator0.setPrettyPrinter(defaultXmlPrettyPrinter0);
//      try { 
        toXmlGenerator0.finishWrappedValue(qName0, qName0);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // No open start element, when trying to write end element
//         //
//         verifyException("com.fasterxml.jackson.dataformat.xml.util.StaxUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, true);
      ObjectMapper objectMapper0 = new ObjectMapper();
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      AsciiXmlWriter asciiXmlWriter0 = new AsciiXmlWriter((OutputStream) null, writerConfig0, true);
      NonNsStreamWriter nonNsStreamWriter0 = new NonNsStreamWriter(asciiXmlWriter0, "", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, (-997), (-2557), objectMapper0, nonNsStreamWriter0);
      toXmlGenerator0.finishWrappedValue((QName) null, (QName) null);
      assertEquals((-2557), toXmlGenerator0.getFormatFeatures());
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      ObjectMapper objectMapper0 = new ObjectMapper();
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      AsciiXmlWriter asciiXmlWriter0 = new AsciiXmlWriter(byteArrayOutputStream0, writerConfig0, false);
      SimpleModule simpleModule0 = new SimpleModule("");
      IOContext iOContext0 = new IOContext(bufferRecycler0, simpleModule0, true);
      RepairingNsStreamWriter repairingNsStreamWriter0 = new RepairingNsStreamWriter(asciiXmlWriter0, "", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 3, 3, objectMapper0, repairingNsStreamWriter0);
      QName qName0 = QName.valueOf("((tBE");
      toXmlGenerator0.startWrappedValue((QName) null, qName0);
      toXmlGenerator0.writeNumber((long) 57343);
      BigInteger bigInteger0 = BigInteger.TEN;
//      try { 
        toXmlGenerator0.writeNumber(bigInteger0);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Trying to output second root, <((tBE>
//         //
//         verifyException("com.fasterxml.jackson.dataformat.xml.util.StaxUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      ObjectMapper objectMapper0 = new ObjectMapper();
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "", false);
      SimpleNsStreamWriter simpleNsStreamWriter0 = new SimpleNsStreamWriter((XmlWriter) null, "", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 5, 5, objectMapper0, simpleNsStreamWriter0);
      boolean boolean0 = toXmlGenerator0.setNextNameIfMissing((QName) null);
      assertEquals(5, toXmlGenerator0.getFormatFeatures());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      ObjectMapper objectMapper0 = new ObjectMapper();
      WriterConfig writerConfig0 = WriterConfig.createJ2MEDefaults();
      ISOLatin1XmlWriter iSOLatin1XmlWriter0 = new ISOLatin1XmlWriter((OutputStream) null, writerConfig0, true);
      SimpleNsStreamWriter simpleNsStreamWriter0 = new SimpleNsStreamWriter(iSOLatin1XmlWriter0, "", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 0, 3, objectMapper0, simpleNsStreamWriter0);
      QName qName0 = new QName("", "");
      toXmlGenerator0.startWrappedValue(qName0, qName0);
      boolean boolean0 = toXmlGenerator0.setNextNameIfMissing(qName0);
      assertFalse(boolean0);
      assertEquals(3, toXmlGenerator0.getFormatFeatures());
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      ObjectMapper objectMapper0 = new ObjectMapper();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      AsciiXmlWriter asciiXmlWriter0 = new AsciiXmlWriter(byteArrayOutputStream0, writerConfig0, true);
      NonNsStreamWriter nonNsStreamWriter0 = new NonNsStreamWriter(asciiXmlWriter0, "nWhAOd|*hlP*qX8", writerConfig0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, objectMapper0, false);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 2, (-697), objectMapper0, nonNsStreamWriter0);
      assertEquals((-697), toXmlGenerator0.getFormatFeatures());
      
      ToXmlGenerator.Feature toXmlGenerator_Feature0 = ToXmlGenerator.Feature.WRITE_XML_DECLARATION;
      toXmlGenerator0.configure(toXmlGenerator_Feature0, false);
      assertEquals((-698), toXmlGenerator0.getFormatFeatures());
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      ObjectMapper objectMapper0 = new ObjectMapper();
      WriterConfig writerConfig0 = WriterConfig.createJ2MEDefaults();
      ISOLatin1XmlWriter iSOLatin1XmlWriter0 = new ISOLatin1XmlWriter((OutputStream) null, writerConfig0, true);
      SimpleNsStreamWriter simpleNsStreamWriter0 = new SimpleNsStreamWriter(iSOLatin1XmlWriter0, "", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 2, 3, objectMapper0, simpleNsStreamWriter0);
      ToXmlGenerator.Feature toXmlGenerator_Feature0 = ToXmlGenerator.Feature.WRITE_XML_1_1;
      boolean boolean0 = toXmlGenerator0.isEnabled(toXmlGenerator_Feature0);
      assertTrue(boolean0);
      assertEquals(3, toXmlGenerator0.getFormatFeatures());
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      WriterConfig writerConfig0 = WriterConfig.createJ2MEDefaults();
      NonNsStreamWriter nonNsStreamWriter0 = new NonNsStreamWriter((XmlWriter) null, "(#PCDATA | ", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator((IOContext) null, 3, 0, objectMapper0, nonNsStreamWriter0);
      ToXmlGenerator.Feature toXmlGenerator_Feature0 = ToXmlGenerator.Feature.WRITE_XML_1_1;
      boolean boolean0 = toXmlGenerator0.isEnabled(toXmlGenerator_Feature0);
      assertEquals(0, toXmlGenerator0.getFormatFeatures());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, true);
      ObjectMapper objectMapper0 = new ObjectMapper();
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      ISOLatin1XmlWriter iSOLatin1XmlWriter0 = new ISOLatin1XmlWriter((OutputStream) null, writerConfig0, false);
      SimpleNsStreamWriter simpleNsStreamWriter0 = new SimpleNsStreamWriter(iSOLatin1XmlWriter0, "Can not write a field name, expecting a value", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 479, 0, objectMapper0, simpleNsStreamWriter0);
      toXmlGenerator0.overrideFormatFeatures(479, 344);
      assertEquals(344, toXmlGenerator0.getFormatFeatures());
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      ObjectMapper objectMapper0 = new ObjectMapper();
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      ISOLatin1XmlWriter iSOLatin1XmlWriter0 = new ISOLatin1XmlWriter((OutputStream) null, writerConfig0, true);
      SimpleNsStreamWriter simpleNsStreamWriter0 = new SimpleNsStreamWriter(iSOLatin1XmlWriter0, "", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 3, 2, objectMapper0, simpleNsStreamWriter0);
      DefaultXmlPrettyPrinter defaultXmlPrettyPrinter0 = new DefaultXmlPrettyPrinter();
      toXmlGenerator0.setPrettyPrinter(defaultXmlPrettyPrinter0);
      toXmlGenerator0.initGenerator();
      assertEquals("UTF-8", simpleNsStreamWriter0.getEncoding());
      assertEquals("1.1", simpleNsStreamWriter0.getXmlVersion());
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      ObjectMapper objectMapper0 = new ObjectMapper();
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      ISOLatin1XmlWriter iSOLatin1XmlWriter0 = new ISOLatin1XmlWriter((OutputStream) null, writerConfig0, false);
      SimpleNsStreamWriter simpleNsStreamWriter0 = new SimpleNsStreamWriter(iSOLatin1XmlWriter0, (String) null, writerConfig0);
      SimpleModule simpleModule0 = new SimpleModule((String) null);
      IOContext iOContext0 = new IOContext(bufferRecycler0, simpleModule0, true);
      StreamWriterDelegate streamWriterDelegate0 = new StreamWriterDelegate(simpleNsStreamWriter0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 5, 2, objectMapper0, streamWriterDelegate0);
      DefaultXmlPrettyPrinter defaultXmlPrettyPrinter0 = new DefaultXmlPrettyPrinter();
      toXmlGenerator0.setPrettyPrinter(defaultXmlPrettyPrinter0);
      toXmlGenerator0.initGenerator();
      assertEquals("1.1", simpleNsStreamWriter0.getXmlVersion());
      assertEquals(2, toXmlGenerator0.getFormatFeatures());
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      ObjectMapper objectMapper0 = new ObjectMapper();
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      IOContext iOContext0 = new IOContext(bufferRecycler0, writerConfig0, false);
      RepairingNsStreamWriter repairingNsStreamWriter0 = new RepairingNsStreamWriter((XmlWriter) null, "3Ye2KTG 0vpKb_", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 3, 1, objectMapper0, repairingNsStreamWriter0);
      // Undeclared exception!
//      try { 
        toXmlGenerator0.initGenerator();
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.ctc.wstx.sw.BaseStreamWriter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      ObjectMapper objectMapper0 = new ObjectMapper();
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      ISOLatin1XmlWriter iSOLatin1XmlWriter0 = new ISOLatin1XmlWriter((OutputStream) null, writerConfig0, true);
      SimpleNsStreamWriter simpleNsStreamWriter0 = new SimpleNsStreamWriter(iSOLatin1XmlWriter0, "No element/attribute name specified when trying to output element", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 3, 2, objectMapper0, simpleNsStreamWriter0);
      toXmlGenerator0._initialized = true;
      toXmlGenerator0.initGenerator();
      assertEquals("1.0", simpleNsStreamWriter0.getXmlVersion());
      assertEquals(2, toXmlGenerator0.getFormatFeatures());
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      ObjectMapper objectMapper0 = new ObjectMapper();
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      ISOLatin1XmlWriter iSOLatin1XmlWriter0 = new ISOLatin1XmlWriter((OutputStream) null, writerConfig0, false);
      SimpleNsStreamWriter simpleNsStreamWriter0 = new SimpleNsStreamWriter(iSOLatin1XmlWriter0, (String) null, writerConfig0);
      SimpleModule simpleModule0 = new SimpleModule((String) null);
      IOContext iOContext0 = new IOContext(bufferRecycler0, simpleModule0, true);
      StreamWriterDelegate streamWriterDelegate0 = new StreamWriterDelegate(simpleNsStreamWriter0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 5, 2, objectMapper0, streamWriterDelegate0);
      toXmlGenerator0.initGenerator();
      assertEquals("1.1", simpleNsStreamWriter0.getXmlVersion());
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      ObjectMapper objectMapper0 = new ObjectMapper();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      WriterConfig writerConfig0 = WriterConfig.createJ2MEDefaults();
      AsciiXmlWriter asciiXmlWriter0 = new AsciiXmlWriter(byteArrayOutputStream0, writerConfig0, true);
      NonNsStreamWriter nonNsStreamWriter0 = new NonNsStreamWriter(asciiXmlWriter0, "1.1", writerConfig0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, byteArrayOutputStream0, true);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 1, 0, objectMapper0, nonNsStreamWriter0);
      toXmlGenerator0.initGenerator();
      assertEquals(0, toXmlGenerator0.getFormatFeatures());
      assertEquals("1.0", nonNsStreamWriter0.getXmlVersion());
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      int int0 = ToXmlGenerator.Feature.collectDefaults();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      ObjectMapper objectMapper0 = new ObjectMapper();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(3);
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      AsciiXmlWriter asciiXmlWriter0 = new AsciiXmlWriter(byteArrayOutputStream0, writerConfig0, true);
      NonNsStreamWriter nonNsStreamWriter0 = new NonNsStreamWriter(asciiXmlWriter0, "", writerConfig0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, objectMapper0, false);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 2, (-697), objectMapper0, nonNsStreamWriter0);
      // Undeclared exception!
//      try { 
        toXmlGenerator0.writeNumber("");
//        fail("Expecting exception: IllegalStateException");
      
//      } catch(IllegalStateException e) {
//         //
//         // No element/attribute name specified when trying to output element
//         //
//         verifyException("com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      ObjectMapper objectMapper0 = new ObjectMapper();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(3);
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      AsciiXmlWriter asciiXmlWriter0 = new AsciiXmlWriter(byteArrayOutputStream0, writerConfig0, true);
      NonNsStreamWriter nonNsStreamWriter0 = new NonNsStreamWriter(asciiXmlWriter0, "", writerConfig0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, objectMapper0, false);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 2, (-697), objectMapper0, nonNsStreamWriter0);
      ToXmlGenerator.Feature toXmlGenerator_Feature0 = ToXmlGenerator.Feature.WRITE_XML_DECLARATION;
      toXmlGenerator0.configure(toXmlGenerator_Feature0, true);
      assertEquals((-697), toXmlGenerator0.getFormatFeatures());
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      WriterConfig writerConfig0 = WriterConfig.createJ2MEDefaults();
      NonNsStreamWriter nonNsStreamWriter0 = new NonNsStreamWriter((XmlWriter) null, "(#PCDATA | ", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator((IOContext) null, 3, 0, objectMapper0, nonNsStreamWriter0);
      byte[] byteArray0 = new byte[0];
      // Undeclared exception!
//      try { 
        toXmlGenerator0.writeRawUTF8String(byteArray0, 0, 3);
//        fail("Expecting exception: UnsupportedOperationException");
      
//      } catch(UnsupportedOperationException e) {
//         //
//         // Operation not supported by generator of type com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator
//         //
//         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      WriterConfig writerConfig0 = WriterConfig.createJ2MEDefaults();
      NonNsStreamWriter nonNsStreamWriter0 = new NonNsStreamWriter((XmlWriter) null, "(#PCDATA | ", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator((IOContext) null, 3, 0, objectMapper0, nonNsStreamWriter0);
      boolean boolean0 = toXmlGenerator0.canWriteFormattedNumbers();
      assertTrue(boolean0);
      assertEquals(0, toXmlGenerator0.getFormatFeatures());
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      WriterConfig writerConfig0 = WriterConfig.createJ2MEDefaults();
      AsciiXmlWriter asciiXmlWriter0 = new AsciiXmlWriter((OutputStream) null, writerConfig0, false);
      RepairingNsStreamWriter repairingNsStreamWriter0 = new RepairingNsStreamWriter(asciiXmlWriter0, "", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 1, 2, (ObjectCodec) null, repairingNsStreamWriter0);
      Object object0 = toXmlGenerator0.getOutputTarget();
      assertNotNull(object0);
      assertEquals(2, toXmlGenerator0.getFormatFeatures());
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      ObjectMapper objectMapper0 = new ObjectMapper();
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
      NonNsStreamWriter nonNsStreamWriter0 = new NonNsStreamWriter((XmlWriter) null, (String) null, writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 3, 2, objectMapper0, nonNsStreamWriter0);
      SerializedString serializedString0 = new SerializedString("1VI2{b&5O~3SSop!");
      // Undeclared exception!
//      try { 
        toXmlGenerator0.writeString((SerializableString) serializedString0);
//        fail("Expecting exception: IllegalStateException");
      
//      } catch(IllegalStateException e) {
//         //
//         // No element/attribute name specified when trying to output element
//         //
//         verifyException("com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      ObjectMapper objectMapper0 = new ObjectMapper();
      WriterConfig writerConfig0 = WriterConfig.createJ2MEDefaults();
      ISOLatin1XmlWriter iSOLatin1XmlWriter0 = new ISOLatin1XmlWriter((OutputStream) null, writerConfig0, false);
      SimpleNsStreamWriter simpleNsStreamWriter0 = new SimpleNsStreamWriter(iSOLatin1XmlWriter0, "", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 0, 0, objectMapper0, simpleNsStreamWriter0);
      toXmlGenerator0.getStaxWriter();
      assertEquals(0, toXmlGenerator0.getFormatFeatures());
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, true);
      ObjectMapper objectMapper0 = new ObjectMapper();
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      ISOLatin1XmlWriter iSOLatin1XmlWriter0 = new ISOLatin1XmlWriter((OutputStream) null, writerConfig0, false);
      SimpleNsStreamWriter simpleNsStreamWriter0 = new SimpleNsStreamWriter(iSOLatin1XmlWriter0, "Can not write a field name, expecting a value", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 479, 0, objectMapper0, simpleNsStreamWriter0);
      int int0 = toXmlGenerator0.getFormatFeatures();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      WriterConfig writerConfig0 = WriterConfig.createJ2MEDefaults();
      NonNsStreamWriter nonNsStreamWriter0 = new NonNsStreamWriter((XmlWriter) null, "(#PCDATA | ", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator((IOContext) null, 3, 0, objectMapper0, nonNsStreamWriter0);
      // Undeclared exception!
//      try { 
        toXmlGenerator0.writeRawValue((SerializableString) null);
//        fail("Expecting exception: UnsupportedOperationException");
      
//      } catch(UnsupportedOperationException e) {
//         //
//         // Operation not supported by generator of type com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator
//         //
//         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      ObjectMapper objectMapper0 = new ObjectMapper();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(3);
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      AsciiXmlWriter asciiXmlWriter0 = new AsciiXmlWriter(byteArrayOutputStream0, writerConfig0, true);
      NonNsStreamWriter nonNsStreamWriter0 = new NonNsStreamWriter(asciiXmlWriter0, "", writerConfig0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, objectMapper0, false);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 2, (-697), objectMapper0, nonNsStreamWriter0);
      QName qName0 = new QName("R^`/lY", "", "R^`/lY");
      toXmlGenerator0.startWrappedValue(qName0, qName0);
      toXmlGenerator0.writeNumber("");
      assertEquals((-697), toXmlGenerator0.getFormatFeatures());
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, pipedInputStream0, false);
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      AsciiXmlWriter asciiXmlWriter0 = new AsciiXmlWriter(pipedOutputStream0, writerConfig0, true);
      NonNsStreamWriter nonNsStreamWriter0 = new NonNsStreamWriter(asciiXmlWriter0, ")nr1dQOh.r9B]j", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 1, 1006, (ObjectCodec) null, nonNsStreamWriter0);
      int int0 = toXmlGenerator0.getOutputBuffered();
      assertEquals((-1), int0);
      assertEquals(1006, toXmlGenerator0.getFormatFeatures());
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      NonNsStreamWriter nonNsStreamWriter0 = new NonNsStreamWriter((XmlWriter) null, "_", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator((IOContext) null, 1, 0, objectMapper0, nonNsStreamWriter0);
      // Undeclared exception!
//      try { 
        toXmlGenerator0.writeUTF8String((byte[]) null, 3, 0);
//        fail("Expecting exception: UnsupportedOperationException");
      
//      } catch(UnsupportedOperationException e) {
//         //
//         // Operation not supported by generator of type com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator
//         //
//         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      ObjectMapper objectMapper0 = new ObjectMapper();
      WriterConfig writerConfig0 = WriterConfig.createJ2MEDefaults();
      NonNsStreamWriter nonNsStreamWriter0 = new NonNsStreamWriter((XmlWriter) null, "SRA4.,**6r*$J", writerConfig0);
      StreamWriterDelegate streamWriterDelegate0 = new StreamWriterDelegate(nonNsStreamWriter0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 3, 1092, objectMapper0, streamWriterDelegate0);
//      try { 
        toXmlGenerator0.writeRawValue("9U8h '7", 1220, 56319);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Underlying Stax XMLStreamWriter (of type org.codehaus.stax2.util.StreamWriterDelegate) does not implement Stax2 API natively and is missing method 'writeRawValue': this breaks functionality such as indentation that relies on it. You need to upgrade to using compliant Stax implementation like Woodstox or Aalto
//         //
//         verifyException("com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      ObjectMapper objectMapper0 = new ObjectMapper();
      WriterConfig writerConfig0 = WriterConfig.createJ2MEDefaults();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "9", false);
      NonNsStreamWriter nonNsStreamWriter0 = new NonNsStreamWriter((XmlWriter) null, "9", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 0, 3, objectMapper0, nonNsStreamWriter0);
      toXmlGenerator0.setNextIsUnwrapped(true);
      assertEquals(3, toXmlGenerator0.getFormatFeatures());
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      ObjectMapper objectMapper0 = new ObjectMapper();
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      IOContext iOContext0 = new IOContext(bufferRecycler0, writerConfig0, false);
      RepairingNsStreamWriter repairingNsStreamWriter0 = new RepairingNsStreamWriter((XmlWriter) null, "pYe2nTG 0vpKb_", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 3, 1, objectMapper0, repairingNsStreamWriter0);
//      try { 
        toXmlGenerator0.writeStringField("", "pYe2nTG 0vpKb_");
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Can not write a field name, expecting a value
//         //
//         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      ObjectMapper objectMapper0 = new ObjectMapper();
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      IOContext iOContext0 = new IOContext(bufferRecycler0, writerConfig0, true);
      NonNsStreamWriter nonNsStreamWriter0 = new NonNsStreamWriter((XmlWriter) null, "; expected type JsonDeserializer or Class<JsonDeserializer> instead", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 0, 2, objectMapper0, nonNsStreamWriter0);
      toXmlGenerator0.setNextIsCData(true);
      assertEquals(2, toXmlGenerator0.getFormatFeatures());
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, true);
      ObjectMapper objectMapper0 = new ObjectMapper();
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      AsciiXmlWriter asciiXmlWriter0 = new AsciiXmlWriter(byteArrayBuilder0, writerConfig0, true);
      Class<DefaultXmlPrettyPrinter> class0 = DefaultXmlPrettyPrinter.class;
      ObjectReader objectReader0 = objectMapper0.readerFor(class0);
      NonNsStreamWriter nonNsStreamWriter0 = new NonNsStreamWriter(asciiXmlWriter0, "AnnotationIntrospector returned PropertyNamingStrategy definition of type ", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 0, 0, objectReader0, nonNsStreamWriter0);
      toXmlGenerator0.writeRaw('#');
      assertEquals(0, toXmlGenerator0.getFormatFeatures());
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      ObjectMapper objectMapper0 = new ObjectMapper();
      WriterConfig writerConfig0 = WriterConfig.createJ2MEDefaults();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "9", false);
      NonNsStreamWriter nonNsStreamWriter0 = new NonNsStreamWriter((XmlWriter) null, "9", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 0, 3, objectMapper0, nonNsStreamWriter0);
      SerializedString serializedString0 = new SerializedString("9");
//      try { 
        toXmlGenerator0.writeFieldName((SerializableString) serializedString0);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Can not write a field name, expecting a value
//         //
//         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      WriterConfig writerConfig0 = WriterConfig.createJ2MEDefaults();
      NonNsStreamWriter nonNsStreamWriter0 = new NonNsStreamWriter((XmlWriter) null, "(#PCDATA | ", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator((IOContext) null, 3, 0, objectMapper0, nonNsStreamWriter0);
      // Undeclared exception!
//      try { 
        toXmlGenerator0.writeString((char[]) null, 11264, 0);
//        fail("Expecting exception: IllegalStateException");
      
//      } catch(IllegalStateException e) {
//         //
//         // No element/attribute name specified when trying to output element
//         //
//         verifyException("com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      RepairingNsStreamWriter repairingNsStreamWriter0 = new RepairingNsStreamWriter((XmlWriter) null, "JSON", writerConfig0);
      StreamWriterDelegate streamWriterDelegate0 = new StreamWriterDelegate(repairingNsStreamWriter0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, (-1093), (-2915), objectMapper0, streamWriterDelegate0);
      toXmlGenerator0._releaseBuffers();
      assertEquals((-2915), toXmlGenerator0.getFormatFeatures());
  }
}
