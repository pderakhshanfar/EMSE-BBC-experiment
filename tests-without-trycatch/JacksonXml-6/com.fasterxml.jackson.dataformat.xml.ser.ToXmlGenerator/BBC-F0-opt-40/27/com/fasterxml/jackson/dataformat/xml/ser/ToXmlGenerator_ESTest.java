/*
 * This file was automatically generated by EvoSuite
 * Sun Oct 24 06:33:42 GMT 2021
 */

package com.fasterxml.jackson.dataformat.xml.ser;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.ctc.wstx.api.WriterConfig;
import com.ctc.wstx.sw.AsciiXmlWriter;
import com.ctc.wstx.sw.BufferingXmlWriter;
import com.ctc.wstx.sw.ISOLatin1XmlWriter;
import com.ctc.wstx.sw.NonNsStreamWriter;
import com.ctc.wstx.sw.RepairingNsStreamWriter;
import com.ctc.wstx.sw.SimpleNsStreamWriter;
import com.ctc.wstx.sw.XmlWriter;
import com.fasterxml.jackson.core.Base64Variant;
import com.fasterxml.jackson.core.FormatFeature;
import com.fasterxml.jackson.core.JsonFactory;
import com.fasterxml.jackson.core.JsonGenerator;
import com.fasterxml.jackson.core.ObjectCodec;
import com.fasterxml.jackson.core.PrettyPrinter;
import com.fasterxml.jackson.core.SerializableString;
import com.fasterxml.jackson.core.io.IOContext;
import com.fasterxml.jackson.core.io.SerializedString;
import com.fasterxml.jackson.core.util.BufferRecycler;
import com.fasterxml.jackson.core.util.ByteArrayBuilder;
import com.fasterxml.jackson.core.util.DefaultPrettyPrinter;
import com.fasterxml.jackson.databind.DeserializationFeature;
import com.fasterxml.jackson.databind.Module;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.ObjectReader;
import com.fasterxml.jackson.databind.deser.BeanDeserializerFactory;
import com.fasterxml.jackson.databind.deser.DefaultDeserializationContext;
import com.fasterxml.jackson.databind.ser.DefaultSerializerProvider;
import com.fasterxml.jackson.dataformat.xml.XmlPrettyPrinter;
import com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser;
import com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator;
import com.fasterxml.jackson.dataformat.xml.util.DefaultXmlPrettyPrinter;
import java.io.BufferedOutputStream;
import java.io.ByteArrayOutputStream;
import java.io.CharArrayWriter;
import java.io.IOException;
import java.io.OutputStream;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.StringWriter;
import java.io.Writer;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.math.MathContext;
import javax.xml.namespace.QName;
import javax.xml.stream.XMLStreamWriter;
import org.codehaus.stax2.XMLStreamWriter2;
import org.codehaus.stax2.ri.Stax2WriterAdapter;
import org.codehaus.stax2.util.StreamWriter2Delegate;
import org.codehaus.stax2.util.StreamWriterDelegate;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockFileWriter;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class ToXmlGenerator_ESTest extends ToXmlGenerator_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      BufferRecycler bufferRecycler0 = jsonFactory0._getBufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "JSON", true);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(1);
      WriterConfig writerConfig0 = WriterConfig.createJ2MEDefaults();
      ISOLatin1XmlWriter iSOLatin1XmlWriter0 = new ISOLatin1XmlWriter(byteArrayBuilder0, writerConfig0, true);
      NonNsStreamWriter nonNsStreamWriter0 = new NonNsStreamWriter(iSOLatin1XmlWriter0, "JSON", writerConfig0);
      QName qName0 = new QName("JSON", "JSON");
      ObjectMapper objectMapper0 = new ObjectMapper();
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 0, 1, objectMapper0, nonNsStreamWriter0);
      boolean boolean0 = toXmlGenerator0.setNextNameIfMissing(qName0);
      assertTrue(boolean0);
      
      toXmlGenerator0.writeStartObject();
      toXmlGenerator0.writeFieldName(".kP!,318$");
      assertEquals(1, toXmlGenerator0.getFormatFeatures());
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      ObjectMapper objectMapper0 = new ObjectMapper();
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      RepairingNsStreamWriter repairingNsStreamWriter0 = new RepairingNsStreamWriter((XmlWriter) null, "JSON", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 1, 1, objectMapper0, repairingNsStreamWriter0);
      toXmlGenerator0._verifyValueWrite("JSON");
      assertEquals(1, toXmlGenerator0.getFormatFeatures());
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      BufferRecycler bufferRecycler0 = jsonFactory0._getBufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "JSON", false);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0);
      WriterConfig writerConfig0 = WriterConfig.createJ2MEDefaults();
      ISOLatin1XmlWriter iSOLatin1XmlWriter0 = new ISOLatin1XmlWriter(byteArrayBuilder0, writerConfig0, false);
      NonNsStreamWriter nonNsStreamWriter0 = new NonNsStreamWriter(iSOLatin1XmlWriter0, "JSON", writerConfig0);
      QName qName0 = new QName("Can not write END_ELEMENT without open START_ELEMENT", "Can not write END_ELEMENT without open START_ELEMENT");
      ObjectMapper objectMapper0 = new ObjectMapper();
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 0, 1, objectMapper0, nonNsStreamWriter0);
      boolean boolean0 = toXmlGenerator0.setNextNameIfMissing(qName0);
      assertTrue(boolean0);
      
      toXmlGenerator0._handleStartObject();
      assertEquals(1, toXmlGenerator0.getFormatFeatures());
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      SimpleNsStreamWriter simpleNsStreamWriter0 = new SimpleNsStreamWriter((XmlWriter) null, "", writerConfig0);
      IOContext iOContext0 = new IOContext((BufferRecycler) null, simpleNsStreamWriter0, true);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, (-3127), 10, (ObjectCodec) null, simpleNsStreamWriter0);
      toXmlGenerator0.writeStartArray();
      assertEquals(10, toXmlGenerator0.getFormatFeatures());
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      BufferRecycler bufferRecycler0 = jsonFactory0._getBufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "JSON", true);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(1);
      WriterConfig writerConfig0 = WriterConfig.createJ2MEDefaults();
      ISOLatin1XmlWriter iSOLatin1XmlWriter0 = new ISOLatin1XmlWriter(byteArrayBuilder0, writerConfig0, true);
      NonNsStreamWriter nonNsStreamWriter0 = new NonNsStreamWriter(iSOLatin1XmlWriter0, "JSON", writerConfig0);
      QName qName0 = new QName("JSON", "JSON");
      ObjectMapper objectMapper0 = new ObjectMapper();
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 0, 1, objectMapper0, nonNsStreamWriter0);
      boolean boolean0 = toXmlGenerator0.setNextNameIfMissing(qName0);
      assertTrue(boolean0);
      
      toXmlGenerator0.writeStartObject();
      toXmlGenerator0.writeStringField("JSON", "JSON");
      assertEquals(1, toXmlGenerator0.getFormatFeatures());
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      BufferRecycler bufferRecycler0 = jsonFactory0._getBufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "JSON", true);
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      SimpleNsStreamWriter simpleNsStreamWriter0 = new SimpleNsStreamWriter((XmlWriter) null, "JSON", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, (-189), (-189), (ObjectCodec) null, simpleNsStreamWriter0);
      QName qName0 = new QName("JSON", "JSON");
      toXmlGenerator0.setNextNameIfMissing(qName0);
//      try { 
        toXmlGenerator0.writeRawValue((char[]) null, 681, 681);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Unbound namespace URI 'JSON'
//         //
//         verifyException("com.fasterxml.jackson.dataformat.xml.util.StaxUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      MockPrintStream mockPrintStream0 = new MockPrintStream("kQX_HR");
      AsciiXmlWriter asciiXmlWriter0 = new AsciiXmlWriter(mockPrintStream0, writerConfig0, true);
      NonNsStreamWriter nonNsStreamWriter0 = new NonNsStreamWriter(asciiXmlWriter0, "kQX_HR", writerConfig0);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, writerConfig0, false);
      ObjectMapper objectMapper0 = new ObjectMapper();
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 87, 51, objectMapper0, nonNsStreamWriter0);
      QName qName0 = new QName("Underlying Stax XMLStreamWriter (of type ");
      boolean boolean0 = toXmlGenerator0.setNextNameIfMissing(qName0);
      assertTrue(boolean0);
      
      toXmlGenerator0.writeRawValue((char[]) null, 3847, 0);
      assertEquals(51, toXmlGenerator0.getFormatFeatures());
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("JSON");
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      ISOLatin1XmlWriter iSOLatin1XmlWriter0 = new ISOLatin1XmlWriter(mockPrintStream0, writerConfig0, false);
      SimpleNsStreamWriter simpleNsStreamWriter0 = new SimpleNsStreamWriter(iSOLatin1XmlWriter0, "JSON", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, (-4387), (-4387), objectMapper0, simpleNsStreamWriter0);
      QName qName0 = QName.valueOf("");
      boolean boolean0 = toXmlGenerator0.setNextNameIfMissing(qName0);
      assertTrue(boolean0);
      
      toXmlGenerator0.writeRawValue((String) null, (-1699), (-4387));
      assertEquals((-4387), toXmlGenerator0.getFormatFeatures());
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      BufferRecycler bufferRecycler0 = jsonFactory0._getBufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "JSON", false);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0);
      WriterConfig writerConfig0 = WriterConfig.createJ2MEDefaults();
      ISOLatin1XmlWriter iSOLatin1XmlWriter0 = new ISOLatin1XmlWriter(byteArrayBuilder0, writerConfig0, false);
      NonNsStreamWriter nonNsStreamWriter0 = new NonNsStreamWriter(iSOLatin1XmlWriter0, "JSON", writerConfig0);
      QName qName0 = new QName("Can not write END_ELEMENT without open START_ELEMENT", "Can not write END_ELEMENT without open START_ELEMENT");
      ObjectMapper objectMapper0 = new ObjectMapper();
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 0, 1, objectMapper0, nonNsStreamWriter0);
      boolean boolean0 = toXmlGenerator0.setNextNameIfMissing(qName0);
      assertTrue(boolean0);
      
      toXmlGenerator0.writeRawValue("JSON");
      assertEquals(1, toXmlGenerator0.getFormatFeatures());
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      ObjectMapper objectMapper0 = new ObjectMapper();
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0, 0);
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      ISOLatin1XmlWriter iSOLatin1XmlWriter0 = new ISOLatin1XmlWriter(byteArrayBuilder0, writerConfig0, true);
      NonNsStreamWriter nonNsStreamWriter0 = new NonNsStreamWriter(iSOLatin1XmlWriter0, "JSON", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, (-1527), 3, objectMapper0, nonNsStreamWriter0);
      char[] charArray0 = new char[7];
      toXmlGenerator0.writeRaw(charArray0, 1, (-1165));
      assertEquals(3, toXmlGenerator0.getFormatFeatures());
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      BufferRecycler bufferRecycler0 = jsonFactory0._getBufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "JSON", false);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0);
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      ISOLatin1XmlWriter iSOLatin1XmlWriter0 = new ISOLatin1XmlWriter(byteArrayBuilder0, writerConfig0, false);
      NonNsStreamWriter nonNsStreamWriter0 = new NonNsStreamWriter(iSOLatin1XmlWriter0, "JSON", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 0, 3, (ObjectCodec) null, nonNsStreamWriter0);
      toXmlGenerator0.initGenerator();
//      try { 
        toXmlGenerator0.writeRaw("0'FUA V:m", 2, 55296);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Invalid white space character (0x7f) in text to output (in xml 1.1, could output as a character entity)
//         //
//         verifyException("com.fasterxml.jackson.dataformat.xml.util.StaxUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      ISOLatin1XmlWriter iSOLatin1XmlWriter0 = new ISOLatin1XmlWriter((OutputStream) null, writerConfig0, true);
      SimpleNsStreamWriter simpleNsStreamWriter0 = new SimpleNsStreamWriter(iSOLatin1XmlWriter0, (String) null, writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 2, 5, objectMapper0, simpleNsStreamWriter0);
      toXmlGenerator0.writeRaw('A');
      assertEquals(5, toXmlGenerator0.getFormatFeatures());
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      BufferRecycler bufferRecycler0 = jsonFactory0._getBufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "JSON", false);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0, (-10));
      WriterConfig writerConfig0 = WriterConfig.createJ2MEDefaults();
      ISOLatin1XmlWriter iSOLatin1XmlWriter0 = new ISOLatin1XmlWriter(byteArrayBuilder0, writerConfig0, false);
      NonNsStreamWriter nonNsStreamWriter0 = new NonNsStreamWriter(iSOLatin1XmlWriter0, "JSON", writerConfig0);
      QName qName0 = new QName("Can not write END_ELEMENT without open START_ELEMENT");
      ObjectMapper objectMapper0 = new ObjectMapper();
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 419, 1914, objectMapper0, nonNsStreamWriter0);
      boolean boolean0 = toXmlGenerator0.setNextNameIfMissing(qName0);
      assertTrue(boolean0);
      
      toXmlGenerator0.writeNumber((BigInteger) null);
      assertEquals(1914, toXmlGenerator0.getFormatFeatures());
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      BufferRecycler bufferRecycler0 = jsonFactory0._getBufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "JSON", true);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0);
      WriterConfig writerConfig0 = WriterConfig.createJ2MEDefaults();
      ISOLatin1XmlWriter iSOLatin1XmlWriter0 = new ISOLatin1XmlWriter(byteArrayBuilder0, writerConfig0, true);
      NonNsStreamWriter nonNsStreamWriter0 = new NonNsStreamWriter(iSOLatin1XmlWriter0, "JSON", writerConfig0);
      QName qName0 = new QName("Can not write END_ELEMENT without open START_ELEMENT", "Can not write END_ELEMENT without open START_ELEMENT");
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 0, 1, objectMapper0, nonNsStreamWriter0);
      boolean boolean0 = toXmlGenerator0.setNextNameIfMissing(qName0);
      assertTrue(boolean0);
      
      toXmlGenerator0.writeNumber((BigDecimal) null);
      assertEquals(1, toXmlGenerator0.getFormatFeatures());
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      BufferRecycler bufferRecycler0 = jsonFactory0._getBufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "JSON", false);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0, (-10));
      WriterConfig writerConfig0 = WriterConfig.createJ2MEDefaults();
      ISOLatin1XmlWriter iSOLatin1XmlWriter0 = new ISOLatin1XmlWriter(byteArrayBuilder0, writerConfig0, false);
      NonNsStreamWriter nonNsStreamWriter0 = new NonNsStreamWriter(iSOLatin1XmlWriter0, "JSON", writerConfig0);
      QName qName0 = new QName("Can not write END_ELEMENT without open START_ELEMENT");
      ObjectMapper objectMapper0 = new ObjectMapper();
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 419, 1914, objectMapper0, nonNsStreamWriter0);
      boolean boolean0 = toXmlGenerator0.setNextNameIfMissing(qName0);
      assertTrue(boolean0);
      
      toXmlGenerator0.writeNumber("zfd-4:O3<O8Td>q r");
      assertEquals(1914, toXmlGenerator0.getFormatFeatures());
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      BufferRecycler bufferRecycler0 = jsonFactory0._getBufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "JSON", true);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(3);
      WriterConfig writerConfig0 = WriterConfig.createJ2MEDefaults();
      ISOLatin1XmlWriter iSOLatin1XmlWriter0 = new ISOLatin1XmlWriter(byteArrayBuilder0, writerConfig0, true);
      NonNsStreamWriter nonNsStreamWriter0 = new NonNsStreamWriter(iSOLatin1XmlWriter0, "JSON", writerConfig0);
      QName qName0 = new QName("JSON", "JSON");
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 0, 1, objectMapper0, nonNsStreamWriter0);
      boolean boolean0 = toXmlGenerator0.setNextNameIfMissing(qName0);
      assertTrue(boolean0);
      
      toXmlGenerator0.writeNumber(0L);
      assertEquals(1, toXmlGenerator0.getFormatFeatures());
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      BufferRecycler bufferRecycler0 = jsonFactory0._getBufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "JSON", true);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(3);
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      ISOLatin1XmlWriter iSOLatin1XmlWriter0 = new ISOLatin1XmlWriter(byteArrayBuilder0, writerConfig0, true);
      NonNsStreamWriter nonNsStreamWriter0 = new NonNsStreamWriter(iSOLatin1XmlWriter0, "JSON", writerConfig0);
      QName qName0 = new QName("JSON", "JSON");
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 0, 1, objectMapper0, nonNsStreamWriter0);
      boolean boolean0 = toXmlGenerator0.setNextNameIfMissing(qName0);
      assertTrue(boolean0);
      
      toXmlGenerator0.writeNumber(482.143F);
      assertEquals(1, toXmlGenerator0.getFormatFeatures());
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("JSON");
      WriterConfig writerConfig0 = WriterConfig.createJ2MEDefaults();
      AsciiXmlWriter asciiXmlWriter0 = new AsciiXmlWriter(mockFileOutputStream0, writerConfig0, false);
      RepairingNsStreamWriter repairingNsStreamWriter0 = new RepairingNsStreamWriter(asciiXmlWriter0, "i0rgJ]@$e-*h7", writerConfig0);
      StreamWriterDelegate streamWriterDelegate0 = new StreamWriterDelegate(repairingNsStreamWriter0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator((IOContext) null, 0, 0, (ObjectCodec) null, streamWriterDelegate0);
      QName qName0 = QName.valueOf("i0rgJ]@$e-*h7");
      boolean boolean0 = toXmlGenerator0.setNextNameIfMissing(qName0);
      assertTrue(boolean0);
      
      toXmlGenerator0.writeNumber(528.537471082);
      assertEquals(0, toXmlGenerator0.getFormatFeatures());
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      BufferRecycler bufferRecycler0 = jsonFactory0._getBufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "JSON", false);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0, 3);
      WriterConfig writerConfig0 = WriterConfig.createJ2MEDefaults();
      ISOLatin1XmlWriter iSOLatin1XmlWriter0 = new ISOLatin1XmlWriter(byteArrayBuilder0, writerConfig0, false);
      NonNsStreamWriter nonNsStreamWriter0 = new NonNsStreamWriter(iSOLatin1XmlWriter0, "JSON", writerConfig0);
      QName qName0 = new QName("Can not write END_ELEMENT without open START_ELEMENT");
      ObjectMapper objectMapper0 = new ObjectMapper();
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, (-3450), (-1149), objectMapper0, nonNsStreamWriter0);
      boolean boolean0 = toXmlGenerator0.setNextNameIfMissing(qName0);
      assertTrue(boolean0);
      
      toXmlGenerator0.writeBoolean(false);
      assertEquals((-1149), toXmlGenerator0.getFormatFeatures());
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      BufferRecycler bufferRecycler0 = jsonFactory0._getBufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "JSON", false);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0);
      WriterConfig writerConfig0 = WriterConfig.createJ2MEDefaults();
      ISOLatin1XmlWriter iSOLatin1XmlWriter0 = new ISOLatin1XmlWriter(byteArrayBuilder0, writerConfig0, false);
      NonNsStreamWriter nonNsStreamWriter0 = new NonNsStreamWriter(iSOLatin1XmlWriter0, "JSON", writerConfig0);
      QName qName0 = new QName("Can not write END_ELEMENT without open START_ELEMENT", "Can not write END_ELEMENT without open START_ELEMENT");
      ObjectMapper objectMapper0 = new ObjectMapper();
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 0, 1, objectMapper0, nonNsStreamWriter0);
      boolean boolean0 = toXmlGenerator0.setNextNameIfMissing(qName0);
      assertTrue(boolean0);
      
      toXmlGenerator0.writeBinary(byteArrayBuilder0.NO_BYTES, 55296, (-1038));
      assertEquals(1, toXmlGenerator0.getFormatFeatures());
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      BufferRecycler bufferRecycler0 = jsonFactory0._getBufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "JSON", true);
      WriterConfig writerConfig0 = WriterConfig.createJ2MEDefaults();
      SimpleNsStreamWriter simpleNsStreamWriter0 = new SimpleNsStreamWriter((XmlWriter) null, "JSON", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 0, 2, (ObjectCodec) null, simpleNsStreamWriter0);
      QName qName0 = new QName("");
      boolean boolean0 = toXmlGenerator0.setNextNameIfMissing(qName0);
      assertTrue(boolean0);
      
      toXmlGenerator0.setNextIsUnwrapped(true);
      toXmlGenerator0.writeBinary((byte[]) null, 1, 3);
      assertEquals(2, toXmlGenerator0.getFormatFeatures());
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "JSON", true);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0, 1);
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      ISOLatin1XmlWriter iSOLatin1XmlWriter0 = new ISOLatin1XmlWriter(byteArrayBuilder0, writerConfig0, true);
      NonNsStreamWriter nonNsStreamWriter0 = new NonNsStreamWriter(iSOLatin1XmlWriter0, "JSON", writerConfig0);
      QName qName0 = QName.valueOf("JSON");
      ObjectMapper objectMapper0 = new ObjectMapper();
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 0, 1, objectMapper0, nonNsStreamWriter0);
      boolean boolean0 = toXmlGenerator0.setNextNameIfMissing(qName0);
      assertTrue(boolean0);
      
      toXmlGenerator0.writeStartObject();
      toXmlGenerator0.finishWrappedValue(qName0, qName0);
      assertEquals(1, toXmlGenerator0.getFormatFeatures());
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "JSON", false);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(3);
      WriterConfig writerConfig0 = WriterConfig.createJ2MEDefaults();
      ISOLatin1XmlWriter iSOLatin1XmlWriter0 = new ISOLatin1XmlWriter(byteArrayBuilder0, writerConfig0, false);
      NonNsStreamWriter nonNsStreamWriter0 = new NonNsStreamWriter(iSOLatin1XmlWriter0, "JSON", writerConfig0);
      QName qName0 = QName.valueOf("JSON");
      ObjectMapper objectMapper0 = new ObjectMapper();
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 0, 1, objectMapper0, nonNsStreamWriter0);
      toXmlGenerator0.setNextNameIfMissing(qName0);
      toXmlGenerator0.writeStartObject();
      nonNsStreamWriter0.close();
//      try { 
        toXmlGenerator0.writeEndObject();
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // No open start element, when trying to write end element
//         //
//         verifyException("com.fasterxml.jackson.dataformat.xml.util.StaxUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      ObjectMapper objectMapper0 = new ObjectMapper();
      WriterConfig writerConfig0 = WriterConfig.createJ2MEDefaults();
      NonNsStreamWriter nonNsStreamWriter0 = new NonNsStreamWriter((XmlWriter) null, "", writerConfig0);
      StreamWriterDelegate streamWriterDelegate0 = new StreamWriterDelegate(nonNsStreamWriter0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, (-3722), 0, objectMapper0, streamWriterDelegate0);
      JsonGenerator jsonGenerator0 = toXmlGenerator0.setPrettyPrinter((PrettyPrinter) null);
      assertEquals(0, jsonGenerator0.getFormatFeatures());
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      BufferRecycler bufferRecycler0 = jsonFactory0._getBufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "JSON", true);
      WriterConfig writerConfig0 = WriterConfig.createJ2MEDefaults();
      NonNsStreamWriter nonNsStreamWriter0 = new NonNsStreamWriter((XmlWriter) null, "JSON", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 1, (-3722), (ObjectCodec) null, nonNsStreamWriter0);
      JsonGenerator jsonGenerator0 = toXmlGenerator0.setPrettyPrinter((PrettyPrinter) null);
      assertEquals((-3722), jsonGenerator0.getFormatFeatures());
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      BufferRecycler bufferRecycler0 = jsonFactory0._getBufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "JSON", true);
      WriterConfig writerConfig0 = WriterConfig.createJ2MEDefaults();
      SimpleNsStreamWriter simpleNsStreamWriter0 = new SimpleNsStreamWriter((XmlWriter) null, "", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 0, 3, (ObjectCodec) null, simpleNsStreamWriter0);
      ToXmlGenerator.Feature toXmlGenerator_Feature0 = ToXmlGenerator.Feature.WRITE_XML_DECLARATION;
      ToXmlGenerator toXmlGenerator1 = toXmlGenerator0.disable(toXmlGenerator_Feature0);
      assertEquals(2, toXmlGenerator0.getFormatFeatures());
      
      ToXmlGenerator.Feature toXmlGenerator_Feature1 = ToXmlGenerator.Feature.WRITE_XML_1_1;
      toXmlGenerator0.configure(toXmlGenerator_Feature1, false);
      toXmlGenerator1.overrideFormatFeatures(2, 0);
      assertEquals(0, toXmlGenerator0.getFormatFeatures());
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      SimpleNsStreamWriter simpleNsStreamWriter0 = new SimpleNsStreamWriter((XmlWriter) null, "", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 0, (-416), (ObjectCodec) null, simpleNsStreamWriter0);
      toXmlGenerator0.overrideFormatFeatures(3, 1575);
      assertEquals((-1981), toXmlGenerator0.getFormatFeatures());
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "JSON", true);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      ISOLatin1XmlWriter iSOLatin1XmlWriter0 = new ISOLatin1XmlWriter(byteArrayBuilder0, writerConfig0, true);
      NonNsStreamWriter nonNsStreamWriter0 = new NonNsStreamWriter(iSOLatin1XmlWriter0, "JSON", writerConfig0);
      QName qName0 = new QName("JSON", "JSON", "JSON");
      ObjectMapper objectMapper0 = new ObjectMapper();
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 0, 1, objectMapper0, nonNsStreamWriter0);
      boolean boolean0 = toXmlGenerator0.setNextNameIfMissing(qName0);
      assertTrue(boolean0);
      
      toXmlGenerator0.writeStartObject();
      toXmlGenerator0.inRoot();
      assertEquals(1, toXmlGenerator0.getFormatFeatures());
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      BufferRecycler bufferRecycler0 = jsonFactory0._getBufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "JSON", true);
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      RepairingNsStreamWriter repairingNsStreamWriter0 = new RepairingNsStreamWriter((XmlWriter) null, (String) null, writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 2, 1, (ObjectCodec) null, repairingNsStreamWriter0);
      assertEquals(1, toXmlGenerator0.getFormatFeatures());
      
      ToXmlGenerator.Feature toXmlGenerator_Feature0 = ToXmlGenerator.Feature.WRITE_XML_DECLARATION;
      ToXmlGenerator toXmlGenerator1 = toXmlGenerator0.disable(toXmlGenerator_Feature0);
      int int0 = toXmlGenerator1.getFormatFeatures();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      BufferRecycler bufferRecycler0 = jsonFactory0._getBufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "JSON", false);
      WriterConfig writerConfig0 = WriterConfig.createJ2MEDefaults();
      RepairingNsStreamWriter repairingNsStreamWriter0 = new RepairingNsStreamWriter((XmlWriter) null, "U-@v-2DAy9/xLf^", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 3, (-3794), (ObjectCodec) null, repairingNsStreamWriter0);
      int int0 = toXmlGenerator0.getFormatFeatures();
      assertEquals((-3794), int0);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      WriterConfig writerConfig0 = WriterConfig.createJ2MEDefaults();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      ISOLatin1XmlWriter iSOLatin1XmlWriter0 = new ISOLatin1XmlWriter(byteArrayOutputStream0, writerConfig0, false);
      SimpleNsStreamWriter simpleNsStreamWriter0 = new SimpleNsStreamWriter(iSOLatin1XmlWriter0, "JSON", writerConfig0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 2, 3, (ObjectCodec) null, simpleNsStreamWriter0);
      QName qName0 = new QName("8A,s\"F^5(mh2x*F=3");
      toXmlGenerator0.setNextNameIfMissing(qName0);
      char[] charArray0 = new char[2];
      toXmlGenerator0.writeString(charArray0, 1, 0);
      toXmlGenerator0.close();
      ToXmlGenerator.Feature toXmlGenerator_Feature0 = ToXmlGenerator.Feature.WRITE_XML_1_1;
      toXmlGenerator0.enable(toXmlGenerator_Feature0);
      assertEquals(39, byteArrayOutputStream0.size());
      assertEquals(3, toXmlGenerator0.getFormatFeatures());
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      BufferRecycler bufferRecycler0 = jsonFactory0._getBufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "JSON", true);
      WriterConfig writerConfig0 = WriterConfig.createJ2MEDefaults();
      NonNsStreamWriter nonNsStreamWriter0 = new NonNsStreamWriter((XmlWriter) null, "JSON", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 2, (-502), (ObjectCodec) null, nonNsStreamWriter0);
      toXmlGenerator0.writeStartArray(56320);
      ToXmlGenerator.Feature toXmlGenerator_Feature0 = ToXmlGenerator.Feature.WRITE_XML_1_1;
      ToXmlGenerator toXmlGenerator1 = toXmlGenerator0.enable(toXmlGenerator_Feature0);
      assertEquals((-502), toXmlGenerator1.getFormatFeatures());
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      BufferRecycler bufferRecycler0 = jsonFactory0._getBufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "JSON", true);
      WriterConfig writerConfig0 = WriterConfig.createJ2MEDefaults();
      SimpleNsStreamWriter simpleNsStreamWriter0 = new SimpleNsStreamWriter((XmlWriter) null, "JSON", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 0, 2, (ObjectCodec) null, simpleNsStreamWriter0);
      ToXmlGenerator.Feature toXmlGenerator_Feature0 = ToXmlGenerator.Feature.WRITE_XML_1_1;
      toXmlGenerator0.enable(toXmlGenerator_Feature0);
      assertEquals(2, toXmlGenerator0.getFormatFeatures());
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(2);
      WriterConfig writerConfig0 = WriterConfig.createJ2MEDefaults();
      ISOLatin1XmlWriter iSOLatin1XmlWriter0 = new ISOLatin1XmlWriter(byteArrayOutputStream0, writerConfig0, true);
      NonNsStreamWriter nonNsStreamWriter0 = new NonNsStreamWriter(iSOLatin1XmlWriter0, "; expected CHARACTERS, CDATA or SPACE.", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, (-4222), (-1362), (ObjectCodec) null, nonNsStreamWriter0);
      assertEquals((-1362), toXmlGenerator0.getFormatFeatures());
      
      ToXmlGenerator.Feature toXmlGenerator_Feature0 = ToXmlGenerator.Feature.WRITE_XML_DECLARATION;
      toXmlGenerator0.enable(toXmlGenerator_Feature0);
      assertEquals((-1361), toXmlGenerator0.getFormatFeatures());
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      BufferRecycler bufferRecycler0 = jsonFactory0._getBufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "JSON", true);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(1);
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      ISOLatin1XmlWriter iSOLatin1XmlWriter0 = new ISOLatin1XmlWriter(byteArrayBuilder0, writerConfig0, true);
      NonNsStreamWriter nonNsStreamWriter0 = new NonNsStreamWriter(iSOLatin1XmlWriter0, "JSON", writerConfig0);
      QName qName0 = new QName("JSON", "JSON", "JSON");
      ObjectMapper objectMapper0 = new ObjectMapper();
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 0, 1, objectMapper0, nonNsStreamWriter0);
      toXmlGenerator0.setNextNameIfMissing(qName0);
      toXmlGenerator0.writeStartObject();
      toXmlGenerator0.close();
      ToXmlGenerator.Feature toXmlGenerator_Feature0 = ToXmlGenerator.Feature.WRITE_XML_DECLARATION;
      toXmlGenerator0.disable(toXmlGenerator_Feature0);
      assertFalse(toXmlGenerator0.inRoot());
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      BufferRecycler bufferRecycler0 = jsonFactory0._getBufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "JSON", false);
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      SimpleNsStreamWriter simpleNsStreamWriter0 = new SimpleNsStreamWriter((XmlWriter) null, "JSON", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, (-189), (-189), (ObjectCodec) null, simpleNsStreamWriter0);
      assertEquals((-189), toXmlGenerator0.getFormatFeatures());
      
      ToXmlGenerator.Feature toXmlGenerator_Feature0 = ToXmlGenerator.Feature.WRITE_XML_DECLARATION;
      toXmlGenerator0.disable(toXmlGenerator_Feature0);
      assertEquals((-190), toXmlGenerator0.getFormatFeatures());
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      BufferRecycler bufferRecycler0 = jsonFactory0._getBufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "JSON", false);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0);
      WriterConfig writerConfig0 = WriterConfig.createJ2MEDefaults();
      ISOLatin1XmlWriter iSOLatin1XmlWriter0 = new ISOLatin1XmlWriter(byteArrayBuilder0, writerConfig0, false);
      NonNsStreamWriter nonNsStreamWriter0 = new NonNsStreamWriter(iSOLatin1XmlWriter0, "JSON", writerConfig0);
      QName qName0 = new QName("Can not write END_ELEMENT without open START_ELEMENT", "Can not write END_ELEMENT without open START_ELEMENT");
      ObjectMapper objectMapper0 = new ObjectMapper();
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 1, 2, objectMapper0, nonNsStreamWriter0);
      ToXmlGenerator.Feature toXmlGenerator_Feature0 = ToXmlGenerator.Feature.WRITE_XML_1_1;
      toXmlGenerator0.setNextNameIfMissing(qName0);
      char[] charArray0 = new char[8];
      toXmlGenerator0.writeString(charArray0, 57343, (-1638));
      toXmlGenerator0.close();
      toXmlGenerator0.configure(toXmlGenerator_Feature0, false);
      assertEquals(109, byteArrayBuilder0.size());
      assertEquals(109, byteArrayBuilder0.getCurrentSegmentLength());
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      BufferRecycler bufferRecycler0 = jsonFactory0._getBufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "JSON", true);
      WriterConfig writerConfig0 = WriterConfig.createJ2MEDefaults();
      NonNsStreamWriter nonNsStreamWriter0 = new NonNsStreamWriter((XmlWriter) null, "JSON", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 2, (-502), (ObjectCodec) null, nonNsStreamWriter0);
      toXmlGenerator0.writeStartArray(56320);
      ToXmlGenerator.Feature toXmlGenerator_Feature0 = ToXmlGenerator.Feature.WRITE_XML_1_1;
      toXmlGenerator0.configure(toXmlGenerator_Feature0, false);
      assertEquals((-504), toXmlGenerator0.getFormatFeatures());
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      BufferRecycler bufferRecycler0 = jsonFactory0._getBufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "JSON", true);
      WriterConfig writerConfig0 = WriterConfig.createJ2MEDefaults();
      SimpleNsStreamWriter simpleNsStreamWriter0 = new SimpleNsStreamWriter((XmlWriter) null, "", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 8, (-385), (ObjectCodec) null, simpleNsStreamWriter0);
      ToXmlGenerator.Feature toXmlGenerator_Feature0 = ToXmlGenerator.Feature.WRITE_XML_DECLARATION;
      toXmlGenerator0.configure(toXmlGenerator_Feature0, true);
      assertEquals((-385), toXmlGenerator0.getFormatFeatures());
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      ObjectMapper objectMapper0 = new ObjectMapper();
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0, 1);
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      ISOLatin1XmlWriter iSOLatin1XmlWriter0 = new ISOLatin1XmlWriter(byteArrayBuilder0, writerConfig0, true);
      NonNsStreamWriter nonNsStreamWriter0 = new NonNsStreamWriter(iSOLatin1XmlWriter0, "JSON", writerConfig0);
      StreamWriter2Delegate streamWriter2Delegate0 = new StreamWriter2Delegate(nonNsStreamWriter0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 0, 90, objectMapper0, streamWriter2Delegate0);
      assertEquals(90, toXmlGenerator0.getFormatFeatures());
      
      ToXmlGenerator.Feature toXmlGenerator_Feature0 = ToXmlGenerator.Feature.WRITE_XML_DECLARATION;
      toXmlGenerator0.configure(toXmlGenerator_Feature0, true);
      assertEquals(91, toXmlGenerator0.getFormatFeatures());
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      RepairingNsStreamWriter repairingNsStreamWriter0 = new RepairingNsStreamWriter((XmlWriter) null, (String) null, writerConfig0);
      ToXmlGenerator.Feature toXmlGenerator_Feature0 = ToXmlGenerator.Feature.WRITE_XML_1_1;
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, (-941), 3, (ObjectCodec) null, repairingNsStreamWriter0);
      ToXmlGenerator toXmlGenerator1 = toXmlGenerator0.configure(toXmlGenerator_Feature0, true);
      assertEquals(3, toXmlGenerator1.getFormatFeatures());
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      RepairingNsStreamWriter repairingNsStreamWriter0 = new RepairingNsStreamWriter((XmlWriter) null, "c@0NOff2}Qin", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 2, 2, (ObjectCodec) null, repairingNsStreamWriter0);
      toXmlGenerator0.setNextIsUnwrapped(true);
      boolean boolean0 = toXmlGenerator0.checkNextIsUnwrapped();
      assertTrue(boolean0);
      assertEquals(2, toXmlGenerator0.getFormatFeatures());
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Integer integer0 = new Integer(1399);
      IOContext iOContext0 = new IOContext((BufferRecycler) null, integer0, true);
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      StreamWriter2Delegate streamWriter2Delegate0 = new StreamWriter2Delegate((XMLStreamWriter2) null);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 1399, 1399, objectMapper0, streamWriter2Delegate0);
      toXmlGenerator0.checkNextIsUnwrapped();
      assertEquals(1399, toXmlGenerator0.getFormatFeatures());
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonFactory jsonFactory0 = new JsonFactory();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0, defaultSerializerProvider_Impl0, defaultDeserializationContext_Impl0);
      StreamWriter2Delegate streamWriter2Delegate0 = new StreamWriter2Delegate((XMLStreamWriter2) null);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 5, 2, objectMapper0, streamWriter2Delegate0);
      toXmlGenerator0._constructDefaultPrettyPrinter();
      assertEquals(2, toXmlGenerator0.getFormatFeatures());
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(2);
      WriterConfig writerConfig0 = WriterConfig.createJ2MEDefaults();
      ISOLatin1XmlWriter iSOLatin1XmlWriter0 = new ISOLatin1XmlWriter(byteArrayBuilder0, writerConfig0, false);
      NonNsStreamWriter nonNsStreamWriter0 = new NonNsStreamWriter(iSOLatin1XmlWriter0, "FW@", writerConfig0);
      QName qName0 = new QName("JSON", "FW@");
      ObjectMapper objectMapper0 = new ObjectMapper();
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, objectMapper0, true);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 3114, (-790), (ObjectCodec) null, nonNsStreamWriter0);
      toXmlGenerator0.setNextNameIfMissing(qName0);
      toXmlGenerator0.writeStartObject();
      // Undeclared exception!
//      try { 
        toXmlGenerator0.writeStringField("FW@", (String) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.ctc.wstx.sw.BaseStreamWriter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      BufferRecycler bufferRecycler0 = jsonFactory0._getBufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "JSON", false);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(1);
      WriterConfig writerConfig0 = WriterConfig.createJ2MEDefaults();
      ISOLatin1XmlWriter iSOLatin1XmlWriter0 = new ISOLatin1XmlWriter(byteArrayBuilder0, writerConfig0, false);
      NonNsStreamWriter nonNsStreamWriter0 = new NonNsStreamWriter(iSOLatin1XmlWriter0, "JSON", writerConfig0);
      QName qName0 = new QName("JSON", "JSON");
      ObjectMapper objectMapper0 = new ObjectMapper();
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 0, 1, objectMapper0, nonNsStreamWriter0);
      toXmlGenerator0.setNextNameIfMissing(qName0);
      toXmlGenerator0.writeStartObject();
      // Undeclared exception!
//      try { 
        toXmlGenerator0.writeStringField((String) null, "JSON");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // local part cannot be \"null\" when creating a QName
//         //
//         verifyException("javax.xml.namespace.QName", e);
//      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      BufferRecycler bufferRecycler0 = jsonFactory0._getBufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "JSON", true);
      StreamWriter2Delegate streamWriter2Delegate0 = new StreamWriter2Delegate((XMLStreamWriter2) null);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, (-725), 109, (ObjectCodec) null, streamWriter2Delegate0);
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      // Undeclared exception!
//      try { 
        toXmlGenerator0.writeString((SerializableString) serializedString0);
//        fail("Expecting exception: IllegalStateException");
      
//      } catch(IllegalStateException e) {
//         //
//         // No element/attribute name specified when trying to output element
//         //
//         verifyException("com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      SimpleNsStreamWriter simpleNsStreamWriter0 = new SimpleNsStreamWriter((XmlWriter) null, "JSON", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator((IOContext) null, 2, 1, (ObjectCodec) null, simpleNsStreamWriter0);
      QName qName0 = new QName("JSON", "JSON", "JSON");
      toXmlGenerator0.setNextNameIfMissing(qName0);
      toXmlGenerator0.setNextIsUnwrapped(true);
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      toXmlGenerator0.writeNull();
//      try { 
        toXmlGenerator0.writeString((SerializableString) serializedString0);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Unbound namespace URI 'JSON'
//         //
//         verifyException("com.fasterxml.jackson.dataformat.xml.util.StaxUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      BufferRecycler bufferRecycler0 = jsonFactory0._getBufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "JSON", true);
      WriterConfig writerConfig0 = WriterConfig.createJ2MEDefaults();
      NonNsStreamWriter nonNsStreamWriter0 = new NonNsStreamWriter((XmlWriter) null, "JSON", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 1, 0, (ObjectCodec) null, nonNsStreamWriter0);
      QName qName0 = QName.valueOf("A/");
      toXmlGenerator0.setNextNameIfMissing(qName0);
      // Undeclared exception!
//      try { 
        toXmlGenerator0.writeStartObject();
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.ctc.wstx.sw.NonNsStreamWriter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      ObjectMapper objectMapper0 = new ObjectMapper((JsonFactory) null, defaultSerializerProvider_Impl0, defaultDeserializationContext_Impl0);
      StreamWriter2Delegate streamWriter2Delegate0 = new StreamWriter2Delegate((XMLStreamWriter2) null);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 3, 3, objectMapper0, streamWriter2Delegate0);
      // Undeclared exception!
//      try { 
        toXmlGenerator0.writeRepeatedFieldName();
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      BufferRecycler bufferRecycler0 = jsonFactory0._getBufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "JSON", true);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(3);
      WriterConfig writerConfig0 = WriterConfig.createJ2MEDefaults();
      ISOLatin1XmlWriter iSOLatin1XmlWriter0 = new ISOLatin1XmlWriter(byteArrayBuilder0, writerConfig0, true);
      NonNsStreamWriter nonNsStreamWriter0 = new NonNsStreamWriter(iSOLatin1XmlWriter0, "JSON", writerConfig0);
      QName qName0 = new QName("JSON", "JSON");
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 0, 1, objectMapper0, nonNsStreamWriter0);
      toXmlGenerator0.setNextNameIfMissing(qName0);
      char[] charArray0 = new char[9];
      // Undeclared exception!
//      try { 
        toXmlGenerator0.writeRawValue(charArray0, (-413), 16777215);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // -413
//         //
//         verifyException("com.ctc.wstx.sw.ISOLatin1XmlWriter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      ObjectMapper objectMapper0 = new ObjectMapper();
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(0);
      WriterConfig writerConfig0 = WriterConfig.createJ2MEDefaults();
      AsciiXmlWriter asciiXmlWriter0 = new AsciiXmlWriter(byteArrayBuilder0, writerConfig0, false);
      NonNsStreamWriter nonNsStreamWriter0 = new NonNsStreamWriter(asciiXmlWriter0, "JSON", writerConfig0);
      StreamWriterDelegate streamWriterDelegate0 = new StreamWriterDelegate(nonNsStreamWriter0);
      XMLStreamWriter2 xMLStreamWriter2_0 = Stax2WriterAdapter.wrapIfNecessary(streamWriterDelegate0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 3, (-1693), objectMapper0, xMLStreamWriter2_0);
      QName qName0 = new QName("JSON", "", "T4k9u ot1`d,OQhw");
      toXmlGenerator0.setNextNameIfMissing(qName0);
      // Undeclared exception!
//      try { 
        toXmlGenerator0.writeRawValue("T4k9u ot1`d,OQhw", 0, (-1693));
//        fail("Expecting exception: UnsupportedOperationException");
      
//      } catch(UnsupportedOperationException e) {
//         //
//         // Not implemented
//         //
//         verifyException("org.codehaus.stax2.ri.Stax2WriterAdapter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "JSON", false);
      QName qName0 = new QName("JSON", "ZG4,]WT2Gt6=KOWn,,");
      WriterConfig writerConfig0 = WriterConfig.createJ2MEDefaults();
      NonNsStreamWriter nonNsStreamWriter0 = new NonNsStreamWriter((XmlWriter) null, "ZG4,]WT2Gt6=KOWn,,", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 0, (-2671), (ObjectCodec) null, nonNsStreamWriter0);
      toXmlGenerator0.setNextNameIfMissing(qName0);
      // Undeclared exception!
//      try { 
        toXmlGenerator0.writeRawValue((String) null, 3581, (-414));
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.ctc.wstx.sw.NonNsStreamWriter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      BufferRecycler bufferRecycler0 = jsonFactory0._getBufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "JSON", true);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(3);
      WriterConfig writerConfig0 = WriterConfig.createJ2MEDefaults();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      AsciiXmlWriter asciiXmlWriter0 = new AsciiXmlWriter(byteArrayBuilder0, writerConfig0, true);
      RepairingNsStreamWriter repairingNsStreamWriter0 = new RepairingNsStreamWriter(asciiXmlWriter0, (String) null, writerConfig0);
      StreamWriterDelegate streamWriterDelegate0 = new StreamWriterDelegate(repairingNsStreamWriter0);
      XMLStreamWriter2 xMLStreamWriter2_0 = Stax2WriterAdapter.wrapIfNecessary(streamWriterDelegate0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 2, 11, objectMapper0, xMLStreamWriter2_0);
      char[] charArray0 = new char[6];
      // Undeclared exception!
//      try { 
        toXmlGenerator0.writeRaw(charArray0, (-1793), 2419);
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      BufferRecycler bufferRecycler0 = jsonFactory0._getBufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "JSON", true);
      WriterConfig writerConfig0 = WriterConfig.createJ2MEDefaults();
      SimpleNsStreamWriter simpleNsStreamWriter0 = new SimpleNsStreamWriter((XmlWriter) null, "", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, (-3722), 3, (ObjectCodec) null, simpleNsStreamWriter0);
      char[] charArray0 = new char[4];
      // Undeclared exception!
//      try { 
        toXmlGenerator0.writeRaw(charArray0, 1, 57343);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.ctc.wstx.sw.BaseStreamWriter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(charArrayWriter0);
      WriterConfig writerConfig0 = WriterConfig.createJ2MEDefaults();
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream((OutputStream) null);
      BufferingXmlWriter bufferingXmlWriter0 = new BufferingXmlWriter(mockPrintWriter0, writerConfig0, "", true, bufferedOutputStream0, 3);
      NonNsStreamWriter nonNsStreamWriter0 = new NonNsStreamWriter(bufferingXmlWriter0, "", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 1101, 605, (ObjectCodec) null, nonNsStreamWriter0);
      char[] charArray0 = new char[7];
      // Undeclared exception!
//      try { 
        toXmlGenerator0.writeRaw(charArray0, 2, 1101);
//        fail("Expecting exception: IndexOutOfBoundsException");
      
//      } catch(IndexOutOfBoundsException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.io.CharArrayWriter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      ObjectMapper objectMapper0 = new ObjectMapper();
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      ISOLatin1XmlWriter iSOLatin1XmlWriter0 = new ISOLatin1XmlWriter(byteArrayBuilder0, writerConfig0, false);
      RepairingNsStreamWriter repairingNsStreamWriter0 = new RepairingNsStreamWriter(iSOLatin1XmlWriter0, "", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 15, 2, objectMapper0, repairingNsStreamWriter0);
      char[] charArray0 = new char[5];
      // Undeclared exception!
//      try { 
        toXmlGenerator0.writeRaw(charArray0, 99, 2);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 99
//         //
//         verifyException("com.ctc.wstx.sw.ISOLatin1XmlWriter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      BufferRecycler bufferRecycler0 = jsonFactory0._getBufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      WriterConfig writerConfig0 = WriterConfig.createJ2MEDefaults();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("JSON");
      ISOLatin1XmlWriter iSOLatin1XmlWriter0 = new ISOLatin1XmlWriter(mockFileOutputStream0, writerConfig0, false);
      SimpleNsStreamWriter simpleNsStreamWriter0 = new SimpleNsStreamWriter(iSOLatin1XmlWriter0, "JSON", writerConfig0);
      StreamWriterDelegate streamWriterDelegate0 = new StreamWriterDelegate(simpleNsStreamWriter0);
      XMLStreamWriter2 xMLStreamWriter2_0 = Stax2WriterAdapter.wrapIfNecessary(streamWriterDelegate0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, (-1691), 2, (ObjectCodec) null, xMLStreamWriter2_0);
      // Undeclared exception!
//      try { 
        toXmlGenerator0.writeRaw("uXm_&g:t1]:", (-1393), 0);
//        fail("Expecting exception: UnsupportedOperationException");
      
//      } catch(UnsupportedOperationException e) {
//         //
//         // Not implemented
//         //
//         verifyException("org.codehaus.stax2.ri.Stax2WriterAdapter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0.BYTE_BASE64_CODEC_BUFFER, true);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0, 753);
      WriterConfig writerConfig0 = WriterConfig.createJ2MEDefaults();
      ISOLatin1XmlWriter iSOLatin1XmlWriter0 = new ISOLatin1XmlWriter(byteArrayBuilder0, writerConfig0, false);
      SimpleNsStreamWriter simpleNsStreamWriter0 = new SimpleNsStreamWriter(iSOLatin1XmlWriter0, "com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 753, 1598, (ObjectCodec) null, simpleNsStreamWriter0);
      // Undeclared exception!
//      try { 
        toXmlGenerator0.writeRaw("", (-2105), 1);
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      BufferRecycler bufferRecycler0 = jsonFactory0._getBufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0.CHAR_CONCAT_BUFFER, false);
      WriterConfig writerConfig0 = WriterConfig.createJ2MEDefaults();
      NonNsStreamWriter nonNsStreamWriter0 = new NonNsStreamWriter((XmlWriter) null, "h?OCR-~6p", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 1, 3, (ObjectCodec) null, nonNsStreamWriter0);
      // Undeclared exception!
//      try { 
        toXmlGenerator0.writeRaw("", 4, 1);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.ctc.wstx.sw.BaseStreamWriter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      BufferRecycler bufferRecycler0 = jsonFactory0._getBufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "JSON", true);
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      SimpleNsStreamWriter simpleNsStreamWriter0 = new SimpleNsStreamWriter((XmlWriter) null, "", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 3, 4, (ObjectCodec) null, simpleNsStreamWriter0);
      // Undeclared exception!
//      try { 
        toXmlGenerator0.writeRaw("");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.ctc.wstx.sw.BaseStreamWriter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0);
      WriterConfig writerConfig0 = WriterConfig.createJ2MEDefaults();
      AsciiXmlWriter asciiXmlWriter0 = new AsciiXmlWriter(byteArrayBuilder0, writerConfig0, false);
      NonNsStreamWriter nonNsStreamWriter0 = new NonNsStreamWriter(asciiXmlWriter0, "JSON", writerConfig0);
      ObjectMapper objectMapper0 = new ObjectMapper();
      IOContext iOContext0 = new IOContext(bufferRecycler0, jsonFactory0, true);
      StreamWriterDelegate streamWriterDelegate0 = new StreamWriterDelegate(nonNsStreamWriter0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 0, (-910), objectMapper0, streamWriterDelegate0);
//      try { 
        toXmlGenerator0.writeRaw('x');
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Underlying Stax XMLStreamWriter (of type org.codehaus.stax2.util.StreamWriterDelegate) does not implement Stax2 API natively and is missing method 'writeRaw': this breaks functionality such as indentation that relies on it. You need to upgrade to using compliant Stax implementation like Woodstox or Aalto
//         //
//         verifyException("com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      BufferRecycler bufferRecycler0 = jsonFactory0._getBufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "JSON", true);
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      RepairingNsStreamWriter repairingNsStreamWriter0 = new RepairingNsStreamWriter((XmlWriter) null, ",2i)", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, (-980), 393, (ObjectCodec) null, repairingNsStreamWriter0);
      QName qName0 = QName.valueOf("ROECE");
      toXmlGenerator0.setNextNameIfMissing(qName0);
      // Undeclared exception!
//      try { 
        toXmlGenerator0.writeNumber((BigInteger) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.ctc.wstx.sw.BaseNsStreamWriter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      BufferRecycler bufferRecycler0 = jsonFactory0._getBufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "JSON", true);
      WriterConfig writerConfig0 = WriterConfig.createJ2MEDefaults();
      NonNsStreamWriter nonNsStreamWriter0 = new NonNsStreamWriter((XmlWriter) null, "JSON", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 1, 0, (ObjectCodec) null, nonNsStreamWriter0);
      QName qName0 = QName.valueOf("A/");
      toXmlGenerator0.setNextNameIfMissing(qName0);
      // Undeclared exception!
//      try { 
        toXmlGenerator0.writeNumber("A/");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.ctc.wstx.sw.NonNsStreamWriter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      BufferRecycler bufferRecycler0 = jsonFactory0._getBufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "JSON", false);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0, 3);
      WriterConfig writerConfig0 = WriterConfig.createJ2MEDefaults();
      ISOLatin1XmlWriter iSOLatin1XmlWriter0 = new ISOLatin1XmlWriter(byteArrayBuilder0, writerConfig0, false);
      NonNsStreamWriter nonNsStreamWriter0 = new NonNsStreamWriter(iSOLatin1XmlWriter0, "JSON", writerConfig0);
      QName qName0 = new QName("JSON");
      ObjectMapper objectMapper0 = new ObjectMapper();
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, (-3450), (-1149), objectMapper0, nonNsStreamWriter0);
      toXmlGenerator0.setNextNameIfMissing(qName0);
      toXmlGenerator0.writeNumber(65);
//      try { 
        toXmlGenerator0.writeNumber("JSON");
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Trying to output second root, <JSON>
//         //
//         verifyException("com.fasterxml.jackson.dataformat.xml.util.StaxUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      WriterConfig writerConfig0 = WriterConfig.createJ2MEDefaults();
      NonNsStreamWriter nonNsStreamWriter0 = new NonNsStreamWriter((XmlWriter) null, "JSON", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 319, 3, objectMapper0, nonNsStreamWriter0);
      QName qName0 = new QName("Zy!WPPmUj", "Zy!WPPmUj");
      toXmlGenerator0.setNextNameIfMissing(qName0);
      // Undeclared exception!
//      try { 
        toXmlGenerator0.writeNumber((long) 57343);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.ctc.wstx.sw.NonNsStreamWriter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      SimpleNsStreamWriter simpleNsStreamWriter0 = new SimpleNsStreamWriter((XmlWriter) null, "JSON", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator((IOContext) null, 2, 1, (ObjectCodec) null, simpleNsStreamWriter0);
      QName qName0 = new QName("JSON", "JSON", "JSON");
      toXmlGenerator0.useDefaultPrettyPrinter();
      toXmlGenerator0.setNextNameIfMissing(qName0);
      // Undeclared exception!
//      try { 
        toXmlGenerator0.writeNull();
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.ctc.wstx.sw.BaseStreamWriter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      ObjectMapper objectMapper0 = new ObjectMapper();
      WriterConfig writerConfig0 = WriterConfig.createJ2MEDefaults();
      StringWriter stringWriter0 = new StringWriter();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("JSON", true);
      BufferingXmlWriter bufferingXmlWriter0 = new BufferingXmlWriter(stringWriter0, writerConfig0, "com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator", true, mockFileOutputStream0, 933);
      RepairingNsStreamWriter repairingNsStreamWriter0 = new RepairingNsStreamWriter(bufferingXmlWriter0, "~Z0R|JkKo:y^", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 2, (-3722), objectMapper0, repairingNsStreamWriter0);
      // Undeclared exception!
//      try { 
        toXmlGenerator0.writeFieldName((SerializableString) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      WriterConfig writerConfig0 = WriterConfig.createJ2MEDefaults();
      ISOLatin1XmlWriter iSOLatin1XmlWriter0 = new ISOLatin1XmlWriter(byteArrayBuilder0, writerConfig0, true);
      NonNsStreamWriter nonNsStreamWriter0 = new NonNsStreamWriter(iSOLatin1XmlWriter0, "JSON", writerConfig0);
      QName qName0 = QName.valueOf("JSON");
      ObjectMapper objectMapper0 = new ObjectMapper();
      StreamWriter2Delegate streamWriter2Delegate0 = new StreamWriter2Delegate(nonNsStreamWriter0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator((IOContext) null, (-2276), (-3326), objectMapper0, streamWriter2Delegate0);
      toXmlGenerator0.setNextNameIfMissing(qName0);
      toXmlGenerator0.useDefaultPrettyPrinter();
      toXmlGenerator0.writeStartObject();
      // Undeclared exception!
//      try { 
        toXmlGenerator0.writeEndObject();
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.codehaus.stax2.util.StreamWriter2Delegate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      RepairingNsStreamWriter repairingNsStreamWriter0 = new RepairingNsStreamWriter((XmlWriter) null, "", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator((IOContext) null, (-435), (-1635), (ObjectCodec) null, repairingNsStreamWriter0);
      byte[] byteArray0 = new byte[9];
      // Undeclared exception!
//      try { 
        toXmlGenerator0.writeBinary((Base64Variant) null, byteArray0, 3, 863);
//        fail("Expecting exception: IllegalStateException");
      
//      } catch(IllegalStateException e) {
//         //
//         // No element/attribute name specified when trying to output element
//         //
//         verifyException("com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "JSON", true);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      ISOLatin1XmlWriter iSOLatin1XmlWriter0 = new ISOLatin1XmlWriter(byteArrayBuilder0, writerConfig0, true);
      NonNsStreamWriter nonNsStreamWriter0 = new NonNsStreamWriter(iSOLatin1XmlWriter0, "JSON", writerConfig0);
      QName qName0 = new QName("JSON", "JSON", "JSON");
      ObjectMapper objectMapper0 = new ObjectMapper();
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 0, 1, objectMapper0, nonNsStreamWriter0);
      toXmlGenerator0.setNextNameIfMissing(qName0);
      toXmlGenerator0.writeStartObject();
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      toXmlGenerator0.writeFieldName((SerializableString) serializedString0);
      // Undeclared exception!
//      try { 
        toXmlGenerator0.writeBinary((Base64Variant) null, byteArrayBuilder0.NO_BYTES, 2, 228);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 2
//         //
//         verifyException("org.codehaus.stax2.ri.typed.ValueEncoderFactory$Base64Encoder", e);
//      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      SimpleNsStreamWriter simpleNsStreamWriter0 = new SimpleNsStreamWriter((XmlWriter) null, "", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 0, (-416), (ObjectCodec) null, simpleNsStreamWriter0);
      QName qName0 = new QName("Module without defined name", "");
//      try { 
        toXmlGenerator0.startWrappedValue(qName0, qName0);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Unbound namespace URI 'Module without defined name'
//         //
//         verifyException("com.fasterxml.jackson.dataformat.xml.util.StaxUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "JSON", false);
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      SimpleNsStreamWriter simpleNsStreamWriter0 = new SimpleNsStreamWriter((XmlWriter) null, "JSON", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 3, 2, (ObjectCodec) null, simpleNsStreamWriter0);
      // Undeclared exception!
//      try { 
        toXmlGenerator0.isEnabled((ToXmlGenerator.Feature) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Integer integer0 = new Integer(1399);
      IOContext iOContext0 = new IOContext((BufferRecycler) null, integer0, true);
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      StreamWriter2Delegate streamWriter2Delegate0 = new StreamWriter2Delegate((XMLStreamWriter2) null);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 1399, 1399, objectMapper0, streamWriter2Delegate0);
      // Undeclared exception!
//      try { 
        toXmlGenerator0.initGenerator();
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.codehaus.stax2.util.StreamWriterDelegate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      ISOLatin1XmlWriter iSOLatin1XmlWriter0 = new ISOLatin1XmlWriter(byteArrayBuilder0, writerConfig0, true);
      char[] charArray0 = new char[0];
      iSOLatin1XmlWriter0.writeRawAscii(charArray0, 577, (-1666));
      NonNsStreamWriter nonNsStreamWriter0 = new NonNsStreamWriter(iSOLatin1XmlWriter0, "JSON", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 0, 2, objectMapper0, nonNsStreamWriter0);
      // Undeclared exception!
//      try { 
        toXmlGenerator0.initGenerator();
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // -1666
//         //
//         verifyException("com.ctc.wstx.sw.EncodingXmlWriter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      ObjectMapper objectMapper0 = new ObjectMapper();
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0, 1);
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      ISOLatin1XmlWriter iSOLatin1XmlWriter0 = new ISOLatin1XmlWriter(byteArrayBuilder0, writerConfig0, true);
      NonNsStreamWriter nonNsStreamWriter0 = new NonNsStreamWriter(iSOLatin1XmlWriter0, "JSON", writerConfig0);
      StreamWriter2Delegate streamWriter2Delegate0 = new StreamWriter2Delegate(nonNsStreamWriter0);
      nonNsStreamWriter0.writeStartElement("JSON", "");
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 0, 90, objectMapper0, streamWriter2Delegate0);
//      try { 
        toXmlGenerator0.initGenerator();
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Can not output XML declaration, after other output has already been done.
//         //
//         verifyException("com.fasterxml.jackson.dataformat.xml.util.StaxUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      ObjectMapper objectMapper0 = new ObjectMapper();
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0, 3);
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      AsciiXmlWriter asciiXmlWriter0 = new AsciiXmlWriter(byteArrayBuilder0, writerConfig0, false);
      RepairingNsStreamWriter repairingNsStreamWriter0 = new RepairingNsStreamWriter(asciiXmlWriter0, "JSON", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, (-412), (-1696), objectMapper0, repairingNsStreamWriter0);
      // Undeclared exception!
//      try { 
        toXmlGenerator0.handleMissingName();
//        fail("Expecting exception: IllegalStateException");
      
//      } catch(IllegalStateException e) {
//         //
//         // No element/attribute name specified when trying to output element
//         //
//         verifyException("com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Integer integer0 = new Integer(1399);
      IOContext iOContext0 = new IOContext((BufferRecycler) null, integer0, true);
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      StreamWriter2Delegate streamWriter2Delegate0 = new StreamWriter2Delegate((XMLStreamWriter2) null);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 1399, 1399, objectMapper0, streamWriter2Delegate0);
      // Undeclared exception!
//      try { 
        toXmlGenerator0.flush();
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.codehaus.stax2.util.StreamWriterDelegate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      BufferRecycler bufferRecycler0 = jsonFactory0._getBufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "JSON", false);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0, (-10));
      WriterConfig writerConfig0 = WriterConfig.createJ2MEDefaults();
      ISOLatin1XmlWriter iSOLatin1XmlWriter0 = new ISOLatin1XmlWriter(byteArrayBuilder0, writerConfig0, false);
      NonNsStreamWriter nonNsStreamWriter0 = new NonNsStreamWriter(iSOLatin1XmlWriter0, "JSON", writerConfig0);
      ObjectMapper objectMapper0 = new ObjectMapper();
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 419, 1914, objectMapper0, nonNsStreamWriter0);
      // Undeclared exception!
//      try { 
        toXmlGenerator0.enable((ToXmlGenerator.Feature) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      BufferRecycler bufferRecycler0 = jsonFactory0._getBufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "JSON", false);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(1);
      WriterConfig writerConfig0 = WriterConfig.createJ2MEDefaults();
      ISOLatin1XmlWriter iSOLatin1XmlWriter0 = new ISOLatin1XmlWriter(byteArrayBuilder0, writerConfig0, true);
      NonNsStreamWriter nonNsStreamWriter0 = new NonNsStreamWriter(iSOLatin1XmlWriter0, "JSON", writerConfig0);
      ObjectMapper objectMapper0 = new ObjectMapper();
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 419, 1914, objectMapper0, nonNsStreamWriter0);
      // Undeclared exception!
//      try { 
        toXmlGenerator0.disable((ToXmlGenerator.Feature) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      BufferRecycler bufferRecycler0 = jsonFactory0._getBufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "JSON", true);
      WriterConfig writerConfig0 = WriterConfig.createJ2MEDefaults();
      RepairingNsStreamWriter repairingNsStreamWriter0 = new RepairingNsStreamWriter((XmlWriter) null, "LlJn=)Vg.s;B+(r@", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, (-551), 1543, (ObjectCodec) null, repairingNsStreamWriter0);
//      try { 
        toXmlGenerator0._reportUnimplementedStax2("c");
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Underlying Stax XMLStreamWriter (of type com.ctc.wstx.sw.RepairingNsStreamWriter) does not implement Stax2 API natively and is missing method 'c': this breaks functionality such as indentation that relies on it. You need to upgrade to using compliant Stax implementation like Woodstox or Aalto
//         //
//         verifyException("com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      BufferRecycler bufferRecycler0 = jsonFactory0._getBufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "JSON", true);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(3);
      WriterConfig writerConfig0 = WriterConfig.createJ2MEDefaults();
      ISOLatin1XmlWriter iSOLatin1XmlWriter0 = new ISOLatin1XmlWriter(byteArrayBuilder0, writerConfig0, true);
      NonNsStreamWriter nonNsStreamWriter0 = new NonNsStreamWriter(iSOLatin1XmlWriter0, "JSON", writerConfig0);
      QName qName0 = new QName("Can not write END_ELEMENT without open START_ELEMENT", "Can not write END_ELEMENT without open START_ELEMENT");
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 0, 1, objectMapper0, nonNsStreamWriter0);
      toXmlGenerator0.setNextNameIfMissing(qName0);
      SerializedString serializedString0 = new SerializedString("JSON");
      toXmlGenerator0.writeString((SerializableString) serializedString0);
//      try { 
        toXmlGenerator0._handleStartObject();
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Trying to output second root, <Can not write END_ELEMENT without open START_ELEMENT>
//         //
//         verifyException("com.fasterxml.jackson.dataformat.xml.util.StaxUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0.CHAR_NAME_COPY_BUFFER, false);
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      ToXmlGenerator toXmlGenerator0 = null;
//      try {
        toXmlGenerator0 = new ToXmlGenerator(iOContext0, 1139, (-1), objectMapper0, (XMLStreamWriter) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.codehaus.stax2.ri.Stax2WriterAdapter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      BufferRecycler bufferRecycler0 = jsonFactory0._getBufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "JSON", true);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(1);
      WriterConfig writerConfig0 = WriterConfig.createJ2MEDefaults();
      ISOLatin1XmlWriter iSOLatin1XmlWriter0 = new ISOLatin1XmlWriter(byteArrayBuilder0, writerConfig0, true);
      NonNsStreamWriter nonNsStreamWriter0 = new NonNsStreamWriter(iSOLatin1XmlWriter0, "JSON", writerConfig0);
      QName qName0 = QName.valueOf("JSON");
      ObjectMapper objectMapper0 = new ObjectMapper();
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 0, 1, objectMapper0, nonNsStreamWriter0);
      toXmlGenerator0.setNextNameIfMissing(qName0);
      toXmlGenerator0.writeStartObject();
//      try { 
        toXmlGenerator0.writeStartObject();
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Can not start an object, expecting field name
//         //
//         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      RepairingNsStreamWriter repairingNsStreamWriter0 = new RepairingNsStreamWriter((XmlWriter) null, (String) null, writerConfig0);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, (-941), 3, (ObjectCodec) null, repairingNsStreamWriter0);
      // Undeclared exception!
//      try { 
        toXmlGenerator0.writeNull();
//        fail("Expecting exception: IllegalStateException");
      
//      } catch(IllegalStateException e) {
//         //
//         // No element/attribute name specified when trying to output element
//         //
//         verifyException("com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(2618);
      ISOLatin1XmlWriter iSOLatin1XmlWriter0 = new ISOLatin1XmlWriter(byteArrayOutputStream0, writerConfig0, false);
      SimpleNsStreamWriter simpleNsStreamWriter0 = new SimpleNsStreamWriter(iSOLatin1XmlWriter0, "JSON", writerConfig0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0.BYTE_WRITE_ENCODING_BUFFER, false);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 0, 2, (ObjectCodec) null, simpleNsStreamWriter0);
      toXmlGenerator0.writeRaw("-!bxF+-E\"8");
      assertEquals(2, toXmlGenerator0.getFormatFeatures());
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Integer integer0 = new Integer(1399);
      IOContext iOContext0 = new IOContext((BufferRecycler) null, integer0, true);
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      StreamWriter2Delegate streamWriter2Delegate0 = new StreamWriter2Delegate((XMLStreamWriter2) null);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 1399, 1399, objectMapper0, streamWriter2Delegate0);
      // Undeclared exception!
//      try { 
        toXmlGenerator0.writeString("JSON");
//        fail("Expecting exception: IllegalStateException");
      
//      } catch(IllegalStateException e) {
//         //
//         // No element/attribute name specified when trying to output element
//         //
//         verifyException("com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      BufferRecycler bufferRecycler0 = jsonFactory0._getBufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "JSON", false);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      ISOLatin1XmlWriter iSOLatin1XmlWriter0 = new ISOLatin1XmlWriter(byteArrayBuilder0, writerConfig0, false);
      NonNsStreamWriter nonNsStreamWriter0 = new NonNsStreamWriter(iSOLatin1XmlWriter0, "JSON", writerConfig0);
      QName qName0 = new QName("JSON", "JSON", "JSON");
      ObjectMapper objectMapper0 = new ObjectMapper();
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 0, 1, objectMapper0, nonNsStreamWriter0);
      boolean boolean0 = toXmlGenerator0.setNextNameIfMissing(qName0);
      assertTrue(boolean0);
      
      ToXmlGenerator toXmlGenerator1 = (ToXmlGenerator)toXmlGenerator0.useDefaultPrettyPrinter();
      toXmlGenerator0.writeStartObject();
      toXmlGenerator1._handleEndObject();
      assertEquals(1, toXmlGenerator1.getFormatFeatures());
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "JSON", true);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0, 1);
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      ISOLatin1XmlWriter iSOLatin1XmlWriter0 = new ISOLatin1XmlWriter(byteArrayBuilder0, writerConfig0, true);
      NonNsStreamWriter nonNsStreamWriter0 = new NonNsStreamWriter(iSOLatin1XmlWriter0, "JSON", writerConfig0);
      QName qName0 = new QName("JSON", "JSON", "JSON");
      ObjectMapper objectMapper0 = new ObjectMapper();
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 0, 1, objectMapper0, nonNsStreamWriter0);
      boolean boolean0 = toXmlGenerator0.setNextNameIfMissing(qName0);
      assertTrue(boolean0);
      
      toXmlGenerator0.writeStartObject();
      toXmlGenerator0._handleEndObject();
      assertEquals(1, toXmlGenerator0.getFormatFeatures());
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      BufferRecycler bufferRecycler0 = jsonFactory0._getBufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "JSON", true);
      WriterConfig writerConfig0 = WriterConfig.createJ2MEDefaults();
      SimpleNsStreamWriter simpleNsStreamWriter0 = new SimpleNsStreamWriter((XmlWriter) null, "JSON", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 0, 2, (ObjectCodec) null, simpleNsStreamWriter0);
      QName qName0 = new QName("JSON");
      toXmlGenerator0.setNextNameIfMissing(qName0);
      // Undeclared exception!
//      try { 
        toXmlGenerator0._handleStartObject();
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.ctc.wstx.sw.BaseNsStreamWriter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      BufferRecycler bufferRecycler0 = jsonFactory0._getBufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "JSON", true);
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      SimpleNsStreamWriter simpleNsStreamWriter0 = new SimpleNsStreamWriter((XmlWriter) null, "", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 3, 4, (ObjectCodec) null, simpleNsStreamWriter0);
      // Undeclared exception!
//      try { 
        toXmlGenerator0._handleStartObject();
//        fail("Expecting exception: IllegalStateException");
      
//      } catch(IllegalStateException e) {
//         //
//         // No element/attribute name specified when trying to output element
//         //
//         verifyException("com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0, 0);
      WriterConfig writerConfig0 = WriterConfig.createJ2MEDefaults();
      ISOLatin1XmlWriter iSOLatin1XmlWriter0 = new ISOLatin1XmlWriter(byteArrayBuilder0, writerConfig0, false);
      NonNsStreamWriter nonNsStreamWriter0 = new NonNsStreamWriter(iSOLatin1XmlWriter0, "8o#eu*y$<w12cK", writerConfig0);
      QName qName0 = QName.valueOf("Invalid numeric value (");
      ObjectMapper objectMapper0 = new ObjectMapper();
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, (-1582), 3, objectMapper0, nonNsStreamWriter0);
      toXmlGenerator0.setNextNameIfMissing(qName0);
      toXmlGenerator0.useDefaultPrettyPrinter();
      toXmlGenerator0.writeStartObject();
      toXmlGenerator0.writeEndObject();
//      try { 
        toXmlGenerator0.writeString("");
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Trying to output second root, <Invalid numeric value (>
//         //
//         verifyException("com.fasterxml.jackson.dataformat.xml.util.StaxUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      RepairingNsStreamWriter repairingNsStreamWriter0 = new RepairingNsStreamWriter((XmlWriter) null, "c@0NOff2}Qin", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 2, 2, (ObjectCodec) null, repairingNsStreamWriter0);
      toXmlGenerator0.writeStartArray(2);
      toXmlGenerator0.writeEndArray();
      assertEquals(2, toXmlGenerator0.getFormatFeatures());
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      BufferRecycler bufferRecycler0 = jsonFactory0._getBufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "JSON", false);
      WriterConfig writerConfig0 = WriterConfig.createJ2MEDefaults();
      NonNsStreamWriter nonNsStreamWriter0 = new NonNsStreamWriter((XmlWriter) null, "JSON", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 1, (-3722), (ObjectCodec) null, nonNsStreamWriter0);
//      try { 
        toXmlGenerator0.writeFieldName("JSON");
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Can not write a field name, expecting a value
//         //
//         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0);
      ISOLatin1XmlWriter iSOLatin1XmlWriter0 = new ISOLatin1XmlWriter(byteArrayBuilder0, writerConfig0, true);
      QName qName0 = new QName(":S0/Es_", "JSON", "");
      ObjectMapper objectMapper0 = new ObjectMapper();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
      NonNsStreamWriter nonNsStreamWriter0 = new NonNsStreamWriter(iSOLatin1XmlWriter0, "VALUE_TRUE", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 1, 1, objectMapper0, nonNsStreamWriter0);
      toXmlGenerator0.setNextNameIfMissing(qName0);
      toXmlGenerator0.writeStartObject();
      // Undeclared exception!
//      try { 
        toXmlGenerator0.writeFieldName((String) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // local part cannot be \"null\" when creating a QName
//         //
//         verifyException("javax.xml.namespace.QName", e);
//      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      ToXmlGenerator.Feature toXmlGenerator_Feature0 = ToXmlGenerator.Feature.WRITE_XML_1_1;
      boolean boolean0 = toXmlGenerator_Feature0.enabledIn(1168);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      ToXmlGenerator.Feature toXmlGenerator_Feature0 = ToXmlGenerator.Feature.WRITE_XML_1_1;
      boolean boolean0 = toXmlGenerator_Feature0.enabledIn(1399);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      ToXmlGenerator.Feature toXmlGenerator_Feature0 = ToXmlGenerator.Feature.WRITE_XML_DECLARATION;
      ObjectReader objectReader0 = objectMapper0.reader();
      FormatFeature[] formatFeatureArray0 = new FormatFeature[2];
      formatFeatureArray0[0] = (FormatFeature) toXmlGenerator_Feature0;
      // Undeclared exception!
//      try { 
        objectReader0.withoutFeatures(formatFeatureArray0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.databind.DeserializationConfig", e);
//      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      NonNsStreamWriter nonNsStreamWriter0 = new NonNsStreamWriter((XmlWriter) null, "JSON", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 3, (-3216), objectMapper0, nonNsStreamWriter0);
      toXmlGenerator0.setNextName((QName) null);
      assertEquals((-3216), toXmlGenerator0.getFormatFeatures());
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      BufferRecycler bufferRecycler0 = jsonFactory0._getBufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "JSON", false);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0);
      WriterConfig writerConfig0 = WriterConfig.createJ2MEDefaults();
      ISOLatin1XmlWriter iSOLatin1XmlWriter0 = new ISOLatin1XmlWriter(byteArrayBuilder0, writerConfig0, false);
      NonNsStreamWriter nonNsStreamWriter0 = new NonNsStreamWriter(iSOLatin1XmlWriter0, "JSON", writerConfig0);
      ObjectMapper objectMapper0 = new ObjectMapper();
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 0, 1, objectMapper0, nonNsStreamWriter0);
//      try { 
        toXmlGenerator0.close();
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Trying to write END_DOCUMENT when document has no root (ie. trying to output empty document).
//         //
//         verifyException("com.fasterxml.jackson.dataformat.xml.util.StaxUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      BufferRecycler bufferRecycler0 = jsonFactory0._getBufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "JSON", true);
      MockFileWriter mockFileWriter0 = new MockFileWriter("a+~=F'p?#bM'DFit");
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      BufferingXmlWriter bufferingXmlWriter0 = new BufferingXmlWriter(mockFileWriter0, writerConfig0, "a+~=F'p?#bM'DFit", true, byteArrayOutputStream0, 1);
      SimpleNsStreamWriter simpleNsStreamWriter0 = new SimpleNsStreamWriter(bufferingXmlWriter0, "a+~=F'p?#bM'DFit", writerConfig0);
      ObjectMapper objectMapper0 = new ObjectMapper();
      Class<Module> class0 = Module.class;
      ObjectReader objectReader0 = objectMapper0.readerFor(class0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 4, 5, objectReader0, simpleNsStreamWriter0);
      toXmlGenerator0.flush();
      assertEquals(5, toXmlGenerator0.getFormatFeatures());
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      BufferRecycler bufferRecycler0 = jsonFactory0._getBufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "JSON", true);
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      NonNsStreamWriter nonNsStreamWriter0 = new NonNsStreamWriter((XmlWriter) null, "", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, (-55453), 20, (ObjectCodec) null, nonNsStreamWriter0);
      toXmlGenerator0.flush();
      assertEquals(20, toXmlGenerator0.getFormatFeatures());
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "JSON", true);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(1);
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      ISOLatin1XmlWriter iSOLatin1XmlWriter0 = new ISOLatin1XmlWriter(byteArrayBuilder0, writerConfig0, true);
      NonNsStreamWriter nonNsStreamWriter0 = new NonNsStreamWriter(iSOLatin1XmlWriter0, "JSON", writerConfig0);
      QName qName0 = new QName("JSON", "JSON", "JSON");
      ObjectMapper objectMapper0 = new ObjectMapper();
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 0, 1, objectMapper0, nonNsStreamWriter0);
      toXmlGenerator0.setNextNameIfMissing(qName0);
      toXmlGenerator0.writeStartObject();
//      try { 
        toXmlGenerator0._verifyValueWrite((String) null);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Can not null, expecting field name
//         //
//         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      BufferRecycler bufferRecycler0 = jsonFactory0._getBufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "JSON", false);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      ISOLatin1XmlWriter iSOLatin1XmlWriter0 = new ISOLatin1XmlWriter(byteArrayBuilder0, writerConfig0, false);
      NonNsStreamWriter nonNsStreamWriter0 = new NonNsStreamWriter(iSOLatin1XmlWriter0, "JSON", writerConfig0);
      QName qName0 = new QName("JSON", "JSON", "JSON");
      ObjectMapper objectMapper0 = new ObjectMapper();
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 0, 1, objectMapper0, nonNsStreamWriter0);
      boolean boolean0 = toXmlGenerator0.setNextNameIfMissing(qName0);
      assertTrue(boolean0);
      
      toXmlGenerator0.useDefaultPrettyPrinter();
      BigInteger bigInteger0 = BigInteger.ZERO;
      toXmlGenerator0.writeNumber(bigInteger0);
      assertEquals(1, toXmlGenerator0.getFormatFeatures());
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      WriterConfig writerConfig0 = WriterConfig.createJ2MEDefaults();
      SimpleNsStreamWriter simpleNsStreamWriter0 = new SimpleNsStreamWriter((XmlWriter) null, "JSON", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 1, 0, (ObjectCodec) null, simpleNsStreamWriter0);
      QName qName0 = QName.valueOf("JSON");
      toXmlGenerator0.setNextNameIfMissing(qName0);
      toXmlGenerator0.setNextIsUnwrapped(true);
      BigInteger bigInteger0 = BigInteger.ONE;
//      try { 
        toXmlGenerator0.writeNumber(bigInteger0);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Trying to output non-whitespace characters outside main element tree (in prolog or epilog)
//         //
//         verifyException("com.fasterxml.jackson.dataformat.xml.util.StaxUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "JSON", true);
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      SimpleNsStreamWriter simpleNsStreamWriter0 = new SimpleNsStreamWriter((XmlWriter) null, "JSON", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 2, 2, (ObjectCodec) null, simpleNsStreamWriter0);
      QName qName0 = new QName("JSON");
      toXmlGenerator0.setNextNameIfMissing(qName0);
      toXmlGenerator0._nextIsAttribute = true;
      BigInteger bigInteger0 = BigInteger.TEN;
//      try { 
        toXmlGenerator0.writeNumber(bigInteger0);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Trying to write an attribute when there is no open start element.
//         //
//         verifyException("com.fasterxml.jackson.dataformat.xml.util.StaxUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      BufferRecycler bufferRecycler0 = jsonFactory0._getBufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "JSON", false);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      ISOLatin1XmlWriter iSOLatin1XmlWriter0 = new ISOLatin1XmlWriter(byteArrayBuilder0, writerConfig0, false);
      NonNsStreamWriter nonNsStreamWriter0 = new NonNsStreamWriter(iSOLatin1XmlWriter0, "JSON", writerConfig0);
      QName qName0 = new QName("JSON", "JSON", "JSON");
      ObjectMapper objectMapper0 = new ObjectMapper();
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 0, 1, objectMapper0, nonNsStreamWriter0);
      toXmlGenerator0.setNextNameIfMissing(qName0);
      BigInteger bigInteger0 = BigInteger.ZERO;
      toXmlGenerator0.writeNumber(bigInteger0);
//      try { 
        toXmlGenerator0.writeNull();
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Trying to output second root, <JSON>
//         //
//         verifyException("com.fasterxml.jackson.dataformat.xml.util.StaxUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      BufferRecycler bufferRecycler0 = jsonFactory0._getBufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "JSON", true);
      WriterConfig writerConfig0 = WriterConfig.createJ2MEDefaults();
      SimpleNsStreamWriter simpleNsStreamWriter0 = new SimpleNsStreamWriter((XmlWriter) null, "", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 0, 3, (ObjectCodec) null, simpleNsStreamWriter0);
      // Undeclared exception!
//      try { 
        toXmlGenerator0.writeNumber((BigInteger) null);
//        fail("Expecting exception: IllegalStateException");
      
//      } catch(IllegalStateException e) {
//         //
//         // No element/attribute name specified when trying to output element
//         //
//         verifyException("com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      BufferRecycler bufferRecycler0 = jsonFactory0._getBufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "JSON", false);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      ISOLatin1XmlWriter iSOLatin1XmlWriter0 = new ISOLatin1XmlWriter(byteArrayBuilder0, writerConfig0, false);
      NonNsStreamWriter nonNsStreamWriter0 = new NonNsStreamWriter(iSOLatin1XmlWriter0, "JSON", writerConfig0);
      ObjectMapper objectMapper0 = new ObjectMapper();
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 0, 1, objectMapper0, nonNsStreamWriter0);
      BigInteger bigInteger0 = BigInteger.ZERO;
      // Undeclared exception!
//      try { 
        toXmlGenerator0.writeNumber(bigInteger0);
//        fail("Expecting exception: IllegalStateException");
      
//      } catch(IllegalStateException e) {
//         //
//         // No element/attribute name specified when trying to output element
//         //
//         verifyException("com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      BufferRecycler bufferRecycler0 = jsonFactory0._getBufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      WriterConfig writerConfig0 = WriterConfig.createJ2MEDefaults();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("JSON");
      ISOLatin1XmlWriter iSOLatin1XmlWriter0 = new ISOLatin1XmlWriter(mockFileOutputStream0, writerConfig0, false);
      NonNsStreamWriter nonNsStreamWriter0 = new NonNsStreamWriter(iSOLatin1XmlWriter0, (String) null, writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 91, 91, (ObjectCodec) null, nonNsStreamWriter0);
      QName qName0 = new QName("Z?ww%\u0007LMk_GdS*X/Ff", "");
      boolean boolean0 = toXmlGenerator0.setNextNameIfMissing(qName0);
      assertTrue(boolean0);
      
      BigDecimal bigDecimal0 = new BigDecimal((long) 2);
      toXmlGenerator0.writeNumber(bigDecimal0);
      assertEquals(91, toXmlGenerator0.getFormatFeatures());
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      WriterConfig writerConfig0 = WriterConfig.createJ2MEDefaults();
      SimpleNsStreamWriter simpleNsStreamWriter0 = new SimpleNsStreamWriter((XmlWriter) null, "JSON", writerConfig0);
      QName qName0 = new QName("}\"47/Gs Qg,w}", "F", "RV93\u0002lC&Br8");
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator((IOContext) null, (-4056), 6776, (ObjectCodec) null, simpleNsStreamWriter0);
      ToXmlGenerator.Feature toXmlGenerator_Feature0 = ToXmlGenerator.Feature.WRITE_XML_1_1;
      ToXmlGenerator toXmlGenerator1 = toXmlGenerator0.disable(toXmlGenerator_Feature0);
      DefaultXmlPrettyPrinter defaultXmlPrettyPrinter0 = new DefaultXmlPrettyPrinter();
      toXmlGenerator1._xmlPrettyPrinter = (XmlPrettyPrinter) defaultXmlPrettyPrinter0;
      toXmlGenerator0.setNextNameIfMissing(qName0);
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      // Undeclared exception!
//      try { 
        toXmlGenerator1.writeNumber(bigDecimal0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.ctc.wstx.sw.BaseStreamWriter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      BufferRecycler bufferRecycler0 = jsonFactory0._getBufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "JSON", true);
      WriterConfig writerConfig0 = WriterConfig.createJ2MEDefaults();
      SimpleNsStreamWriter simpleNsStreamWriter0 = new SimpleNsStreamWriter((XmlWriter) null, "JSON", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 56319, 3, (ObjectCodec) null, simpleNsStreamWriter0);
      QName qName0 = QName.valueOf("JSON");
      toXmlGenerator0.setNextNameIfMissing(qName0);
      toXmlGenerator0.setNextIsUnwrapped(true);
      BigDecimal bigDecimal0 = BigDecimal.ONE;
//      try { 
        toXmlGenerator0.writeNumber(bigDecimal0);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Trying to output non-whitespace characters outside main element tree (in prolog or epilog)
//         //
//         verifyException("com.fasterxml.jackson.dataformat.xml.util.StaxUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      BufferRecycler bufferRecycler0 = jsonFactory0._getBufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "JSON", true);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(3);
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      ISOLatin1XmlWriter iSOLatin1XmlWriter0 = new ISOLatin1XmlWriter(byteArrayBuilder0, writerConfig0, true);
      NonNsStreamWriter nonNsStreamWriter0 = new NonNsStreamWriter(iSOLatin1XmlWriter0, "JSON", writerConfig0);
      QName qName0 = new QName("JSON", "JSON");
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 0, 1, objectMapper0, nonNsStreamWriter0);
      toXmlGenerator0.setNextNameIfMissing(qName0);
      toXmlGenerator0.setNextIsUnwrapped(true);
      BigDecimal bigDecimal0 = new BigDecimal((long) 55296);
//      try { 
        toXmlGenerator0.writeNumber(bigDecimal0);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Trying to output non-whitespace characters outside main element tree (in prolog or epilog)
//         //
//         verifyException("com.fasterxml.jackson.dataformat.xml.util.StaxUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "JSON", false);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("L9.|vK}rG?$'-E=H", false);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0, false);
      WriterConfig writerConfig0 = WriterConfig.createJ2MEDefaults();
      BufferingXmlWriter bufferingXmlWriter0 = new BufferingXmlWriter(mockPrintWriter0, writerConfig0, "A]\"m,XzB2X&kZeE", false, mockFileOutputStream0, (-612));
      NonNsStreamWriter nonNsStreamWriter0 = new NonNsStreamWriter(bufferingXmlWriter0, "JSON", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 3, 3, (ObjectCodec) null, nonNsStreamWriter0);
      toXmlGenerator0.setNextIsAttribute(true);
      QName qName0 = QName.valueOf("A]\"m,XzB2X&kZeE");
      toXmlGenerator0.setNextNameIfMissing(qName0);
      BigDecimal bigDecimal0 = BigDecimal.ONE;
//      try { 
        toXmlGenerator0.writeNumber(bigDecimal0);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Trying to write an attribute when there is no open start element.
//         //
//         verifyException("com.fasterxml.jackson.dataformat.xml.util.StaxUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      BufferRecycler bufferRecycler0 = jsonFactory0._getBufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "JSON", false);
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      SimpleNsStreamWriter simpleNsStreamWriter0 = new SimpleNsStreamWriter((XmlWriter) null, "JSON", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, (-189), (-189), (ObjectCodec) null, simpleNsStreamWriter0);
      toXmlGenerator0.setNextIsAttribute(true);
      QName qName0 = new QName("JSON", "JSON");
      toXmlGenerator0.setNextNameIfMissing(qName0);
      BigDecimal bigDecimal0 = BigDecimal.ONE;
//      try { 
        toXmlGenerator0.writeNumber(bigDecimal0);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Trying to write an attribute when there is no open start element.
//         //
//         verifyException("com.fasterxml.jackson.dataformat.xml.util.StaxUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      BufferRecycler bufferRecycler0 = jsonFactory0._getBufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "JSON", false);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0, 0);
      WriterConfig writerConfig0 = WriterConfig.createJ2MEDefaults();
      ISOLatin1XmlWriter iSOLatin1XmlWriter0 = new ISOLatin1XmlWriter(byteArrayBuilder0, writerConfig0, true);
      NonNsStreamWriter nonNsStreamWriter0 = new NonNsStreamWriter(iSOLatin1XmlWriter0, "JSON", writerConfig0);
      QName qName0 = new QName("Can not write END_ELEMENT without open START_ELEMENT");
      ObjectMapper objectMapper0 = new ObjectMapper();
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 419, 1914, objectMapper0, nonNsStreamWriter0);
      toXmlGenerator0.setNextNameIfMissing(qName0);
      BigDecimal bigDecimal0 = new BigDecimal((long) 56319);
      toXmlGenerator0.writeNumber(bigDecimal0);
      char[] charArray0 = new char[0];
//      try { 
        toXmlGenerator0.writeString(charArray0, (-3386), 56320);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Trying to output second root, <Can not write END_ELEMENT without open START_ELEMENT>
//         //
//         verifyException("com.fasterxml.jackson.dataformat.xml.util.StaxUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      BufferRecycler bufferRecycler0 = jsonFactory0._getBufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "JSON", true);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0);
      WriterConfig writerConfig0 = WriterConfig.createJ2MEDefaults();
      ISOLatin1XmlWriter iSOLatin1XmlWriter0 = new ISOLatin1XmlWriter(byteArrayBuilder0, writerConfig0, true);
      NonNsStreamWriter nonNsStreamWriter0 = new NonNsStreamWriter(iSOLatin1XmlWriter0, "JSON", writerConfig0);
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 0, 1, objectMapper0, nonNsStreamWriter0);
      // Undeclared exception!
//      try { 
        toXmlGenerator0.writeNumber((BigDecimal) null);
//        fail("Expecting exception: IllegalStateException");
      
//      } catch(IllegalStateException e) {
//         //
//         // No element/attribute name specified when trying to output element
//         //
//         verifyException("com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0, 0);
      WriterConfig writerConfig0 = WriterConfig.createJ2MEDefaults();
      ISOLatin1XmlWriter iSOLatin1XmlWriter0 = new ISOLatin1XmlWriter(byteArrayBuilder0, writerConfig0, false);
      NonNsStreamWriter nonNsStreamWriter0 = new NonNsStreamWriter(iSOLatin1XmlWriter0, "8o#eu*y$<w12cK", writerConfig0);
      QName qName0 = QName.valueOf("Invalid numeric value (");
      ObjectMapper objectMapper0 = new ObjectMapper();
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, (-1582), 3, objectMapper0, nonNsStreamWriter0);
      boolean boolean0 = toXmlGenerator0.setNextNameIfMissing(qName0);
      assertTrue(boolean0);
      
      JsonGenerator jsonGenerator0 = toXmlGenerator0.useDefaultPrettyPrinter();
      jsonGenerator0.writeNumber((float) 2);
      assertEquals(3, jsonGenerator0.getFormatFeatures());
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      BufferRecycler bufferRecycler0 = jsonFactory0._getBufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "JSON", true);
      WriterConfig writerConfig0 = WriterConfig.createJ2MEDefaults();
      SimpleNsStreamWriter simpleNsStreamWriter0 = new SimpleNsStreamWriter((XmlWriter) null, "JSON", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 0, 2, (ObjectCodec) null, simpleNsStreamWriter0);
      QName qName0 = new QName("JSON");
      Boolean boolean0 = new Boolean(true);
      toXmlGenerator0.setNextIsUnwrapped((boolean) boolean0);
      toXmlGenerator0.setNextNameIfMissing(qName0);
//      try { 
        toXmlGenerator0.writeNumber((-1.0F));
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Trying to output non-whitespace characters outside main element tree (in prolog or epilog)
//         //
//         verifyException("com.fasterxml.jackson.dataformat.xml.util.StaxUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      BufferRecycler bufferRecycler0 = jsonFactory0._getBufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "JSON", true);
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      RepairingNsStreamWriter repairingNsStreamWriter0 = new RepairingNsStreamWriter((XmlWriter) null, "", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 2, 0, (ObjectCodec) null, repairingNsStreamWriter0);
      // Undeclared exception!
//      try { 
        toXmlGenerator0.writeNumber(0.75F);
//        fail("Expecting exception: IllegalStateException");
      
//      } catch(IllegalStateException e) {
//         //
//         // No element/attribute name specified when trying to output element
//         //
//         verifyException("com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      BufferRecycler bufferRecycler0 = jsonFactory0._getBufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "JSON", true);
      WriterConfig writerConfig0 = WriterConfig.createJ2MEDefaults();
      SimpleNsStreamWriter simpleNsStreamWriter0 = new SimpleNsStreamWriter((XmlWriter) null, "JSON", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 0, 2, (ObjectCodec) null, simpleNsStreamWriter0);
      QName qName0 = new QName("JSON");
      toXmlGenerator0.setNextNameIfMissing(qName0);
      // Undeclared exception!
//      try { 
        toXmlGenerator0.writeNumber((-1.0F));
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.ctc.wstx.sw.BaseNsStreamWriter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      SimpleNsStreamWriter simpleNsStreamWriter0 = new SimpleNsStreamWriter((XmlWriter) null, "JSON", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator((IOContext) null, 2, 1, (ObjectCodec) null, simpleNsStreamWriter0);
      toXmlGenerator0.useDefaultPrettyPrinter();
      QName qName0 = QName.valueOf("JSON");
      toXmlGenerator0.setNextNameIfMissing(qName0);
      // Undeclared exception!
//      try { 
        toXmlGenerator0.writeNumber((double) 0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.ctc.wstx.sw.BaseStreamWriter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      BufferRecycler bufferRecycler0 = jsonFactory0._getBufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "JSON", false);
      WriterConfig writerConfig0 = WriterConfig.createJ2MEDefaults();
      SimpleNsStreamWriter simpleNsStreamWriter0 = new SimpleNsStreamWriter((XmlWriter) null, "JSON", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 0, 2, (ObjectCodec) null, simpleNsStreamWriter0);
      QName qName0 = new QName("");
      toXmlGenerator0.setNextNameIfMissing(qName0);
      toXmlGenerator0.setNextIsUnwrapped(true);
//      try { 
        toXmlGenerator0.writeNumber((-504.6261));
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Trying to output non-whitespace characters outside main element tree (in prolog or epilog)
//         //
//         verifyException("com.fasterxml.jackson.dataformat.xml.util.StaxUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      SimpleNsStreamWriter simpleNsStreamWriter0 = new SimpleNsStreamWriter((XmlWriter) null, "JSON", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator((IOContext) null, 2, 1, (ObjectCodec) null, simpleNsStreamWriter0);
      toXmlGenerator0._nextIsAttribute = true;
      QName qName0 = new QName("JSON", "JSON", "JSON");
      toXmlGenerator0.setNextNameIfMissing(qName0);
//      try { 
        toXmlGenerator0.writeNumber((double) 1);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Trying to write an attribute when there is no open start element.
//         //
//         verifyException("com.fasterxml.jackson.dataformat.xml.util.StaxUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      BufferRecycler bufferRecycler0 = jsonFactory0._getBufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "JSON", true);
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      SimpleNsStreamWriter simpleNsStreamWriter0 = new SimpleNsStreamWriter((XmlWriter) null, "", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 3, 2, (ObjectCodec) null, simpleNsStreamWriter0);
      // Undeclared exception!
//      try { 
        toXmlGenerator0.writeNumber((-3184.6659926));
//        fail("Expecting exception: IllegalStateException");
      
//      } catch(IllegalStateException e) {
//         //
//         // No element/attribute name specified when trying to output element
//         //
//         verifyException("com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "JSON", true);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(2);
      WriterConfig writerConfig0 = WriterConfig.createJ2MEDefaults();
      ISOLatin1XmlWriter iSOLatin1XmlWriter0 = new ISOLatin1XmlWriter(byteArrayBuilder0, writerConfig0, true);
      NonNsStreamWriter nonNsStreamWriter0 = new NonNsStreamWriter(iSOLatin1XmlWriter0, "JSON", writerConfig0);
      QName qName0 = QName.valueOf("JSON");
      ObjectMapper objectMapper0 = new ObjectMapper();
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 0, 1, objectMapper0, nonNsStreamWriter0);
      boolean boolean0 = toXmlGenerator0.setNextNameIfMissing(qName0);
      assertTrue(boolean0);
      
      JsonGenerator jsonGenerator0 = toXmlGenerator0.useDefaultPrettyPrinter();
      jsonGenerator0.writeNumber((long) 57343);
      assertEquals(1, jsonGenerator0.getFormatFeatures());
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      BufferRecycler bufferRecycler0 = jsonFactory0._getBufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "JSON", true);
      WriterConfig writerConfig0 = WriterConfig.createJ2MEDefaults();
      SimpleNsStreamWriter simpleNsStreamWriter0 = new SimpleNsStreamWriter((XmlWriter) null, "JSON", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 0, 2, (ObjectCodec) null, simpleNsStreamWriter0);
      QName qName0 = new QName("");
      toXmlGenerator0.setNextNameIfMissing(qName0);
      toXmlGenerator0.setNextIsUnwrapped(true);
//      try { 
        toXmlGenerator0.writeNumber(0L);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Trying to output non-whitespace characters outside main element tree (in prolog or epilog)
//         //
//         verifyException("com.fasterxml.jackson.dataformat.xml.util.StaxUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      FromXmlParser.Feature fromXmlParser_Feature0 = FromXmlParser.Feature.EMPTY_ELEMENT_AS_NULL;
      IOContext iOContext0 = new IOContext(bufferRecycler0, fromXmlParser_Feature0, false);
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream((OutputStream) null);
      WriterConfig writerConfig0 = WriterConfig.createJ2MEDefaults();
      AsciiXmlWriter asciiXmlWriter0 = new AsciiXmlWriter(bufferedOutputStream0, writerConfig0, false);
      NonNsStreamWriter nonNsStreamWriter0 = new NonNsStreamWriter(asciiXmlWriter0, "JSON", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 0, 0, objectMapper0, nonNsStreamWriter0);
      // Undeclared exception!
//      try { 
        toXmlGenerator0.writeNumber(0L);
//        fail("Expecting exception: IllegalStateException");
      
//      } catch(IllegalStateException e) {
//         //
//         // No element/attribute name specified when trying to output element
//         //
//         verifyException("com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      WriterConfig writerConfig0 = WriterConfig.createJ2MEDefaults();
      SimpleNsStreamWriter simpleNsStreamWriter0 = new SimpleNsStreamWriter((XmlWriter) null, "JSON", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator((IOContext) null, 0, 6144, (ObjectCodec) null, simpleNsStreamWriter0);
      toXmlGenerator0.useDefaultPrettyPrinter();
      QName qName0 = new QName(">-!<lavhEr");
      toXmlGenerator0.setNextNameIfMissing(qName0);
      // Undeclared exception!
//      try { 
        toXmlGenerator0.writeNumber(0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.ctc.wstx.sw.BaseStreamWriter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      BufferRecycler bufferRecycler0 = jsonFactory0._getBufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "JSON", true);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(3);
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      ISOLatin1XmlWriter iSOLatin1XmlWriter0 = new ISOLatin1XmlWriter(byteArrayBuilder0, writerConfig0, true);
      NonNsStreamWriter nonNsStreamWriter0 = new NonNsStreamWriter(iSOLatin1XmlWriter0, "JSON", writerConfig0);
      QName qName0 = new QName("JSON", "JSON");
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 0, 1, objectMapper0, nonNsStreamWriter0);
      toXmlGenerator0.setNextNameIfMissing(qName0);
      toXmlGenerator0.setNextIsUnwrapped(true);
//      try { 
        toXmlGenerator0.writeNumber((short)1104);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Trying to output non-whitespace characters outside main element tree (in prolog or epilog)
//         //
//         verifyException("com.fasterxml.jackson.dataformat.xml.util.StaxUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      SimpleNsStreamWriter simpleNsStreamWriter0 = new SimpleNsStreamWriter((XmlWriter) null, "JSON", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator((IOContext) null, (-809), 1538, (ObjectCodec) null, simpleNsStreamWriter0);
      QName qName0 = new QName("JSON", "JSON", "JSON");
      toXmlGenerator0.setNextIsAttribute(true);
      toXmlGenerator0.setNextNameIfMissing(qName0);
//      try { 
        toXmlGenerator0.writeNumber(1538);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Trying to write an attribute when there is no open start element.
//         //
//         verifyException("com.fasterxml.jackson.dataformat.xml.util.StaxUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      ObjectMapper objectMapper0 = new ObjectMapper();
      WriterConfig writerConfig0 = WriterConfig.createJ2MEDefaults();
      NonNsStreamWriter nonNsStreamWriter0 = new NonNsStreamWriter((XmlWriter) null, "P9!;|c>G!C'@f:", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 0, 0, objectMapper0, nonNsStreamWriter0);
      // Undeclared exception!
//      try { 
        toXmlGenerator0.writeNumber(0);
//        fail("Expecting exception: IllegalStateException");
      
//      } catch(IllegalStateException e) {
//         //
//         // No element/attribute name specified when trying to output element
//         //
//         verifyException("com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      WriterConfig writerConfig0 = WriterConfig.createJ2MEDefaults();
      SimpleNsStreamWriter simpleNsStreamWriter0 = new SimpleNsStreamWriter((XmlWriter) null, "JSON", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator((IOContext) null, 0, 1, (ObjectCodec) null, simpleNsStreamWriter0);
      QName qName0 = new QName("JSON", "JSON");
      toXmlGenerator0.useDefaultPrettyPrinter();
      toXmlGenerator0.setNextNameIfMissing(qName0);
      // Undeclared exception!
//      try { 
        toXmlGenerator0.writeBoolean(true);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.ctc.wstx.sw.BaseStreamWriter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      BufferRecycler bufferRecycler0 = jsonFactory0._getBufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "JSON", true);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(3);
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      ISOLatin1XmlWriter iSOLatin1XmlWriter0 = new ISOLatin1XmlWriter(byteArrayBuilder0, writerConfig0, true);
      NonNsStreamWriter nonNsStreamWriter0 = new NonNsStreamWriter(iSOLatin1XmlWriter0, "JSON", writerConfig0);
      QName qName0 = new QName("JSON", "JSON");
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 0, 1, objectMapper0, nonNsStreamWriter0);
      toXmlGenerator0.setNextNameIfMissing(qName0);
      toXmlGenerator0.setNextIsUnwrapped(true);
//      try { 
        toXmlGenerator0.writeBoolean(false);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Trying to output non-whitespace characters outside main element tree (in prolog or epilog)
//         //
//         verifyException("com.fasterxml.jackson.dataformat.xml.util.StaxUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      BufferRecycler bufferRecycler0 = jsonFactory0._getBufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "JSON", false);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      WriterConfig writerConfig0 = WriterConfig.createJ2MEDefaults();
      ISOLatin1XmlWriter iSOLatin1XmlWriter0 = new ISOLatin1XmlWriter(byteArrayBuilder0, writerConfig0, false);
      NonNsStreamWriter nonNsStreamWriter0 = new NonNsStreamWriter(iSOLatin1XmlWriter0, "JSON", writerConfig0);
      QName qName0 = QName.valueOf("JSON");
      ObjectMapper objectMapper0 = new ObjectMapper();
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 0, 1, objectMapper0, nonNsStreamWriter0);
      toXmlGenerator0.setNextNameIfMissing(qName0);
      toXmlGenerator0.writeStartObject();
      toXmlGenerator0.writeEndObject();
      toXmlGenerator0._nextIsAttribute = true;
//      try { 
        toXmlGenerator0.writeBoolean(false);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Trying to write an attribute when there is no open start element.
//         //
//         verifyException("com.fasterxml.jackson.dataformat.xml.util.StaxUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, false);
      ObjectMapper objectMapper0 = new ObjectMapper();
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0, 4);
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      AsciiXmlWriter asciiXmlWriter0 = new AsciiXmlWriter(byteArrayBuilder0, writerConfig0, true);
      SimpleNsStreamWriter simpleNsStreamWriter0 = new SimpleNsStreamWriter(asciiXmlWriter0, "JSON", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, (-2932), 1289, objectMapper0, simpleNsStreamWriter0);
      // Undeclared exception!
//      try { 
        toXmlGenerator0.writeBoolean(true);
//        fail("Expecting exception: IllegalStateException");
      
//      } catch(IllegalStateException e) {
//         //
//         // No element/attribute name specified when trying to output element
//         //
//         verifyException("com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      SimpleNsStreamWriter simpleNsStreamWriter0 = new SimpleNsStreamWriter((XmlWriter) null, "JSON", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator((IOContext) null, 2, 1, (ObjectCodec) null, simpleNsStreamWriter0);
      QName qName0 = new QName("JSON", "JSON", "JSON");
      toXmlGenerator0.setNextNameIfMissing(qName0);
      byte[] byteArray0 = new byte[1];
      DefaultXmlPrettyPrinter defaultXmlPrettyPrinter0 = new DefaultXmlPrettyPrinter();
      toXmlGenerator0.setPrettyPrinter(defaultXmlPrettyPrinter0);
      // Undeclared exception!
//      try { 
        toXmlGenerator0.writeBinary(byteArray0, 3, 2);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.ctc.wstx.sw.BaseStreamWriter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      BufferRecycler bufferRecycler0 = jsonFactory0._getBufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "JSON", true);
      WriterConfig writerConfig0 = WriterConfig.createJ2MEDefaults();
      SimpleNsStreamWriter simpleNsStreamWriter0 = new SimpleNsStreamWriter((XmlWriter) null, "JSON", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 0, 2, (ObjectCodec) null, simpleNsStreamWriter0);
      QName qName0 = new QName("");
      toXmlGenerator0.setNextNameIfMissing(qName0);
      toXmlGenerator0.setNextIsUnwrapped(true);
      byte[] byteArray0 = new byte[3];
//      try { 
        toXmlGenerator0.writeBinary(byteArray0, (-3786), 3);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Trying to output non-whitespace characters outside main element tree (in prolog or epilog)
//         //
//         verifyException("com.fasterxml.jackson.dataformat.xml.util.StaxUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      BufferRecycler bufferRecycler0 = jsonFactory0._getBufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "JSON", false);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      ObjectMapper objectMapper0 = new ObjectMapper();
      ISOLatin1XmlWriter iSOLatin1XmlWriter0 = new ISOLatin1XmlWriter(byteArrayBuilder0, writerConfig0, false);
      RepairingNsStreamWriter repairingNsStreamWriter0 = new RepairingNsStreamWriter(iSOLatin1XmlWriter0, "Can not ", writerConfig0);
      StreamWriterDelegate streamWriterDelegate0 = new StreamWriterDelegate(repairingNsStreamWriter0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 0, 0, objectMapper0, streamWriterDelegate0);
//      try { 
        toXmlGenerator0.writeRaw((char[]) null, 4, 230);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Underlying Stax XMLStreamWriter (of type org.codehaus.stax2.util.StreamWriterDelegate) does not implement Stax2 API natively and is missing method 'writeRaw': this breaks functionality such as indentation that relies on it. You need to upgrade to using compliant Stax implementation like Woodstox or Aalto
//         //
//         verifyException("com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      BufferRecycler bufferRecycler0 = jsonFactory0._getBufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "JSON", true);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      WriterConfig writerConfig0 = WriterConfig.createJ2MEDefaults();
      ISOLatin1XmlWriter iSOLatin1XmlWriter0 = new ISOLatin1XmlWriter(byteArrayBuilder0, writerConfig0, true);
      NonNsStreamWriter nonNsStreamWriter0 = new NonNsStreamWriter(iSOLatin1XmlWriter0, "JSON", writerConfig0);
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 0, 1, objectMapper0, nonNsStreamWriter0);
      char[] charArray0 = new char[1];
//      try { 
        toXmlGenerator0.writeRaw(charArray0, 0, 3);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Invalid null character in text to output
//         //
//         verifyException("com.fasterxml.jackson.dataformat.xml.util.StaxUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      BufferRecycler bufferRecycler0 = jsonFactory0._getBufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "JSON", true);
      WriterConfig writerConfig0 = WriterConfig.createJ2MEDefaults();
      NonNsStreamWriter nonNsStreamWriter0 = new NonNsStreamWriter((XmlWriter) null, "`-a%{]z`EWOD8[X%", writerConfig0);
      StreamWriterDelegate streamWriterDelegate0 = new StreamWriterDelegate(nonNsStreamWriter0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 1, 1, (ObjectCodec) null, streamWriterDelegate0);
//      try { 
        toXmlGenerator0.writeRaw("`-a%{]z`EWOD8[X%", 0, 281);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Underlying Stax XMLStreamWriter (of type org.codehaus.stax2.util.StreamWriterDelegate) does not implement Stax2 API natively and is missing method 'writeRaw': this breaks functionality such as indentation that relies on it. You need to upgrade to using compliant Stax implementation like Woodstox or Aalto
//         //
//         verifyException("com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(3);
      BufferingXmlWriter bufferingXmlWriter0 = new BufferingXmlWriter((Writer) null, writerConfig0, "9\"=kJ*65plW$!$", false, byteArrayBuilder0, 880);
      NonNsStreamWriter nonNsStreamWriter0 = new NonNsStreamWriter(bufferingXmlWriter0, "9\"=kJ*65plW$!$", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 0, 2, (ObjectCodec) null, nonNsStreamWriter0);
      toXmlGenerator0.writeRaw("9\"=kJ*65plW$!$", 56319, 56320);
      assertEquals(2, toXmlGenerator0.getFormatFeatures());
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      SimpleNsStreamWriter simpleNsStreamWriter0 = new SimpleNsStreamWriter((XmlWriter) null, "JSON", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator((IOContext) null, 2, 1, (ObjectCodec) null, simpleNsStreamWriter0);
      QName qName0 = QName.valueOf("JSON");
      toXmlGenerator0._nextIsAttribute = true;
      toXmlGenerator0.setNextNameIfMissing(qName0);
      char[] charArray0 = new char[1];
      // Undeclared exception!
//      try { 
        toXmlGenerator0.writeRawValue(charArray0, 3, 1);
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      BufferRecycler bufferRecycler0 = jsonFactory0._getBufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "JSON", true);
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      SimpleNsStreamWriter simpleNsStreamWriter0 = new SimpleNsStreamWriter((XmlWriter) null, "JSON", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 2, 2, (ObjectCodec) null, simpleNsStreamWriter0);
      QName qName0 = new QName("JSON");
      toXmlGenerator0.setNextNameIfMissing(qName0);
      // Undeclared exception!
//      try { 
        toXmlGenerator0.writeRawValue((char[]) null, 1, 1);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.ctc.wstx.sw.BaseNsStreamWriter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      RepairingNsStreamWriter repairingNsStreamWriter0 = new RepairingNsStreamWriter((XmlWriter) null, (String) null, writerConfig0);
      StreamWriterDelegate streamWriterDelegate0 = new StreamWriterDelegate(repairingNsStreamWriter0);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0.CHAR_TOKEN_BUFFER, true);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 1, (-2265), (ObjectCodec) null, streamWriterDelegate0);
//      try { 
        toXmlGenerator0.writeRawValue((char[]) null, 3, 5);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Underlying Stax XMLStreamWriter (of type org.codehaus.stax2.util.StreamWriterDelegate) does not implement Stax2 API natively and is missing method 'writeRawValue': this breaks functionality such as indentation that relies on it. You need to upgrade to using compliant Stax implementation like Woodstox or Aalto
//         //
//         verifyException("com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      BufferRecycler bufferRecycler0 = jsonFactory0._getBufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "JSON", true);
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      RepairingNsStreamWriter repairingNsStreamWriter0 = new RepairingNsStreamWriter((XmlWriter) null, (String) null, writerConfig0);
      char[] charArray0 = new char[2];
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 2, 4, (ObjectCodec) null, repairingNsStreamWriter0);
      // Undeclared exception!
//      try { 
        toXmlGenerator0.writeRawValue(charArray0, 2, (-3794));
//        fail("Expecting exception: IllegalStateException");
      
//      } catch(IllegalStateException e) {
//         //
//         // No element/attribute name specified when trying to output element
//         //
//         verifyException("com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      WriterConfig writerConfig0 = WriterConfig.createJ2MEDefaults();
      SimpleNsStreamWriter simpleNsStreamWriter0 = new SimpleNsStreamWriter((XmlWriter) null, "JSON", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator((IOContext) null, 2, 1, (ObjectCodec) null, simpleNsStreamWriter0);
      QName qName0 = new QName("JSON", "JSON", "JSON");
      toXmlGenerator0._nextIsAttribute = true;
      toXmlGenerator0.setNextNameIfMissing(qName0);
      // Undeclared exception!
//      try { 
        toXmlGenerator0.writeRawValue("JSON", 3, 1675);
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      WriterConfig writerConfig0 = WriterConfig.createJ2MEDefaults();
      SimpleNsStreamWriter simpleNsStreamWriter0 = new SimpleNsStreamWriter((XmlWriter) null, "JSON", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator((IOContext) null, 2, 1, (ObjectCodec) null, simpleNsStreamWriter0);
      QName qName0 = new QName("JSON", "JSON", "JSON");
      toXmlGenerator0.setNextNameIfMissing(qName0);
//      try { 
        toXmlGenerator0.writeRawValue("JSON", 3, 1675);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Unbound namespace URI 'JSON'
//         //
//         verifyException("com.fasterxml.jackson.dataformat.xml.util.StaxUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      RepairingNsStreamWriter repairingNsStreamWriter0 = new RepairingNsStreamWriter((XmlWriter) null, (String) null, writerConfig0);
      StreamWriterDelegate streamWriterDelegate0 = new StreamWriterDelegate(repairingNsStreamWriter0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator((IOContext) null, (-1767), 1299, (ObjectCodec) null, streamWriterDelegate0);
//      try { 
        toXmlGenerator0.writeRawValue("))s>oHWe^&>r~v$`'gk", (-1767), 1399);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Underlying Stax XMLStreamWriter (of type org.codehaus.stax2.util.StreamWriterDelegate) does not implement Stax2 API natively and is missing method 'writeRawValue': this breaks functionality such as indentation that relies on it. You need to upgrade to using compliant Stax implementation like Woodstox or Aalto
//         //
//         verifyException("com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      WriterConfig writerConfig0 = WriterConfig.createJ2MEDefaults();
      SimpleNsStreamWriter simpleNsStreamWriter0 = new SimpleNsStreamWriter((XmlWriter) null, "JSON", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator((IOContext) null, 2, 1, (ObjectCodec) null, simpleNsStreamWriter0);
      // Undeclared exception!
//      try { 
        toXmlGenerator0.writeRawValue("JSON", 3, 1675);
//        fail("Expecting exception: IllegalStateException");
      
//      } catch(IllegalStateException e) {
//         //
//         // No element/attribute name specified when trying to output element
//         //
//         verifyException("com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      WriterConfig writerConfig0 = WriterConfig.createJ2MEDefaults();
      SimpleNsStreamWriter simpleNsStreamWriter0 = new SimpleNsStreamWriter((XmlWriter) null, "JSON", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator((IOContext) null, 2, 2, (ObjectCodec) null, simpleNsStreamWriter0);
      QName qName0 = QName.valueOf("JSON");
      toXmlGenerator0._nextIsAttribute = true;
      toXmlGenerator0.setNextNameIfMissing(qName0);
//      try { 
        toXmlGenerator0.writeRawValue("4v*  ^");
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Trying to write an attribute when there is no open start element.
//         //
//         verifyException("com.fasterxml.jackson.dataformat.xml.util.StaxUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      BufferRecycler bufferRecycler0 = jsonFactory0._getBufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "JSON", false);
      WriterConfig writerConfig0 = WriterConfig.createJ2MEDefaults();
      QName qName0 = new QName("JSON", "JSON");
      NonNsStreamWriter nonNsStreamWriter0 = new NonNsStreamWriter((XmlWriter) null, "JSON", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, (-110), (-1), (ObjectCodec) null, nonNsStreamWriter0);
      toXmlGenerator0.setNextNameIfMissing(qName0);
      // Undeclared exception!
//      try { 
        toXmlGenerator0.writeRawValue("4v*  ^");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.ctc.wstx.sw.NonNsStreamWriter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      BufferRecycler bufferRecycler0 = jsonFactory0._getBufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      WriterConfig writerConfig0 = WriterConfig.createJ2MEDefaults();
      RepairingNsStreamWriter repairingNsStreamWriter0 = new RepairingNsStreamWriter((XmlWriter) null, "", writerConfig0);
      StreamWriterDelegate streamWriterDelegate0 = new StreamWriterDelegate(repairingNsStreamWriter0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 554, 65280, (ObjectCodec) null, streamWriterDelegate0);
//      try { 
        toXmlGenerator0.writeRawValue("JSON");
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Underlying Stax XMLStreamWriter (of type org.codehaus.stax2.util.StreamWriterDelegate) does not implement Stax2 API natively and is missing method 'writeRawValue': this breaks functionality such as indentation that relies on it. You need to upgrade to using compliant Stax implementation like Woodstox or Aalto
//         //
//         verifyException("com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      BufferRecycler bufferRecycler0 = jsonFactory0._getBufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "JSON", false);
      WriterConfig writerConfig0 = WriterConfig.createJ2MEDefaults();
      NonNsStreamWriter nonNsStreamWriter0 = new NonNsStreamWriter((XmlWriter) null, "JSON", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, (-110), (-1), (ObjectCodec) null, nonNsStreamWriter0);
      // Undeclared exception!
//      try { 
        toXmlGenerator0.writeRawValue("4v*  ^");
//        fail("Expecting exception: IllegalStateException");
      
//      } catch(IllegalStateException e) {
//         //
//         // No element/attribute name specified when trying to output element
//         //
//         verifyException("com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      BufferRecycler bufferRecycler0 = jsonFactory0._getBufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "JSON", false);
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      RepairingNsStreamWriter repairingNsStreamWriter0 = new RepairingNsStreamWriter((XmlWriter) null, "K7t;BU8C/ut'", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, (-2755), 831, (ObjectCodec) null, repairingNsStreamWriter0);
      ToXmlGenerator.Feature toXmlGenerator_Feature0 = ToXmlGenerator.Feature.WRITE_XML_DECLARATION;
      ToXmlGenerator toXmlGenerator1 = toXmlGenerator0.disable(toXmlGenerator_Feature0);
      QName qName0 = new QName("U", "iA9H");
      DefaultXmlPrettyPrinter defaultXmlPrettyPrinter0 = new DefaultXmlPrettyPrinter();
      toXmlGenerator1._xmlPrettyPrinter = (XmlPrettyPrinter) defaultXmlPrettyPrinter0;
      toXmlGenerator0.setNextNameIfMissing(qName0);
      char[] charArray0 = new char[2];
      // Undeclared exception!
//      try { 
        toXmlGenerator1.writeString(charArray0, 56319, 25);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.ctc.wstx.sw.BaseStreamWriter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      BufferRecycler bufferRecycler0 = jsonFactory0._getBufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "JSON", true);
      WriterConfig writerConfig0 = WriterConfig.createJ2MEDefaults();
      SimpleNsStreamWriter simpleNsStreamWriter0 = new SimpleNsStreamWriter((XmlWriter) null, "JSON", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 0, 2, (ObjectCodec) null, simpleNsStreamWriter0);
      QName qName0 = new QName("");
      toXmlGenerator0.setNextNameIfMissing(qName0);
      toXmlGenerator0.setNextIsUnwrapped(true);
      char[] charArray0 = new char[2];
      // Undeclared exception!
//      try { 
        toXmlGenerator0.writeString(charArray0, (-1086), 56319);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // -1086
//         //
//         verifyException("com.ctc.wstx.util.StringUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      BufferRecycler bufferRecycler0 = jsonFactory0._getBufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "JSON", true);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0, 3);
      WriterConfig writerConfig0 = WriterConfig.createJ2MEDefaults();
      ISOLatin1XmlWriter iSOLatin1XmlWriter0 = new ISOLatin1XmlWriter(byteArrayBuilder0, writerConfig0, false);
      NonNsStreamWriter nonNsStreamWriter0 = new NonNsStreamWriter(iSOLatin1XmlWriter0, "JSON", writerConfig0);
      QName qName0 = new QName("JSON");
      ObjectMapper objectMapper0 = new ObjectMapper();
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, (-1149), 2, objectMapper0, nonNsStreamWriter0);
      toXmlGenerator0.setNextNameIfMissing(qName0);
      toXmlGenerator0._nextIsAttribute = true;
      char[] charArray0 = new char[3];
      // Undeclared exception!
//      try { 
        toXmlGenerator0.writeString(charArray0, 2, 4);
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, pipedInputStream0, false);
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      DeserializationFeature deserializationFeature0 = DeserializationFeature.ADJUST_DATES_TO_CONTEXT_TIME_ZONE;
      ObjectReader objectReader0 = objectMapper0.reader(deserializationFeature0);
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      ISOLatin1XmlWriter iSOLatin1XmlWriter0 = new ISOLatin1XmlWriter(pipedOutputStream0, writerConfig0, false);
      NonNsStreamWriter nonNsStreamWriter0 = new NonNsStreamWriter(iSOLatin1XmlWriter0, (String) null, writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 2, (-2532), objectReader0, nonNsStreamWriter0);
      char[] charArray0 = new char[3];
      // Undeclared exception!
//      try { 
        toXmlGenerator0.writeString(charArray0, 56319, (-416));
//        fail("Expecting exception: IllegalStateException");
      
//      } catch(IllegalStateException e) {
//         //
//         // No element/attribute name specified when trying to output element
//         //
//         verifyException("com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "JSON", false);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(3);
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      ISOLatin1XmlWriter iSOLatin1XmlWriter0 = new ISOLatin1XmlWriter(byteArrayBuilder0, writerConfig0, false);
      NonNsStreamWriter nonNsStreamWriter0 = new NonNsStreamWriter(iSOLatin1XmlWriter0, "JSON", writerConfig0);
      QName qName0 = QName.valueOf("JSON");
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 0, 1, objectMapper0, nonNsStreamWriter0);
      boolean boolean0 = toXmlGenerator0.setNextNameIfMissing(qName0);
      assertTrue(boolean0);
      
      toXmlGenerator0.writeString("JSON");
      assertEquals(1, toXmlGenerator0.getFormatFeatures());
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      WriterConfig writerConfig0 = WriterConfig.createJ2MEDefaults();
      SimpleNsStreamWriter simpleNsStreamWriter0 = new SimpleNsStreamWriter((XmlWriter) null, "JSON", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator((IOContext) null, 0, 0, (ObjectCodec) null, simpleNsStreamWriter0);
      toXmlGenerator0._nextIsCData = true;
      QName qName0 = QName.valueOf("JSON");
      toXmlGenerator0.setNextNameIfMissing(qName0);
      toXmlGenerator0.setNextIsUnwrapped(true);
//      try { 
        toXmlGenerator0.writeString("JSON");
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Trying to output a CDATA block outside main element tree (in prolog or epilog)
//         //
//         verifyException("com.fasterxml.jackson.dataformat.xml.util.StaxUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      WriterConfig writerConfig0 = WriterConfig.createJ2MEDefaults();
      SimpleNsStreamWriter simpleNsStreamWriter0 = new SimpleNsStreamWriter((XmlWriter) null, "JSON", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator((IOContext) null, 0, 0, (ObjectCodec) null, simpleNsStreamWriter0);
      QName qName0 = QName.valueOf("JSON");
      toXmlGenerator0.setNextNameIfMissing(qName0);
      toXmlGenerator0.setNextIsUnwrapped(true);
//      try { 
        toXmlGenerator0.writeString("JSON");
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Trying to output non-whitespace characters outside main element tree (in prolog or epilog)
//         //
//         verifyException("com.fasterxml.jackson.dataformat.xml.util.StaxUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "JSON", false);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(3);
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      ISOLatin1XmlWriter iSOLatin1XmlWriter0 = new ISOLatin1XmlWriter(byteArrayBuilder0, writerConfig0, false);
      NonNsStreamWriter nonNsStreamWriter0 = new NonNsStreamWriter(iSOLatin1XmlWriter0, "JSON", writerConfig0);
      QName qName0 = QName.valueOf("JSON");
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 0, 1, objectMapper0, nonNsStreamWriter0);
      toXmlGenerator0._nextIsAttribute = true;
      toXmlGenerator0.setNextNameIfMissing(qName0);
//      try { 
        toXmlGenerator0.writeString("JSON");
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Trying to write an attribute when there is no open start element.
//         //
//         verifyException("com.fasterxml.jackson.dataformat.xml.util.StaxUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      WriterConfig writerConfig0 = WriterConfig.createJ2MEDefaults();
      SimpleNsStreamWriter simpleNsStreamWriter0 = new SimpleNsStreamWriter((XmlWriter) null, "JSON", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator((IOContext) null, 0, 0, (ObjectCodec) null, simpleNsStreamWriter0);
      QName qName0 = QName.valueOf("JSON");
      toXmlGenerator0.setNextNameIfMissing(qName0);
      // Undeclared exception!
//      try { 
        toXmlGenerator0.writeString("JSON");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.ctc.wstx.sw.BaseNsStreamWriter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0);
      WriterConfig writerConfig0 = WriterConfig.createJ2MEDefaults();
      ISOLatin1XmlWriter iSOLatin1XmlWriter0 = new ISOLatin1XmlWriter(byteArrayBuilder0, writerConfig0, false);
      NonNsStreamWriter nonNsStreamWriter0 = new NonNsStreamWriter(iSOLatin1XmlWriter0, "Current context not Object but ", writerConfig0);
      QName qName0 = new QName("Current context not Object but ");
      ObjectMapper objectMapper0 = new ObjectMapper();
      StreamWriterDelegate streamWriterDelegate0 = new StreamWriterDelegate(nonNsStreamWriter0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 2, 1497, objectMapper0, streamWriterDelegate0);
      boolean boolean0 = toXmlGenerator0.setNextNameIfMissing(qName0);
      assertTrue(boolean0);
      
      toXmlGenerator0.useDefaultPrettyPrinter();
      toXmlGenerator0.writeStartObject();
      toXmlGenerator0._handleEndObject();
      assertEquals(1497, toXmlGenerator0.getFormatFeatures());
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("JSON");
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      ISOLatin1XmlWriter iSOLatin1XmlWriter0 = new ISOLatin1XmlWriter(mockPrintStream0, writerConfig0, false);
      SimpleNsStreamWriter simpleNsStreamWriter0 = new SimpleNsStreamWriter(iSOLatin1XmlWriter0, "JSON", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, (-4387), (-4387), objectMapper0, simpleNsStreamWriter0);
//      try { 
        toXmlGenerator0._handleEndObject();
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Can not write END_ELEMENT without open START_ELEMENT
//         //
//         verifyException("com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      BufferRecycler bufferRecycler0 = jsonFactory0._getBufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "JSON", false);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0, 2);
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      ISOLatin1XmlWriter iSOLatin1XmlWriter0 = new ISOLatin1XmlWriter(byteArrayBuilder0, writerConfig0, false);
      NonNsStreamWriter nonNsStreamWriter0 = new NonNsStreamWriter(iSOLatin1XmlWriter0, "JSON", writerConfig0);
      QName qName0 = new QName("JSON", "JSON", "JSON");
      ObjectMapper objectMapper0 = new ObjectMapper();
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 3, 2, objectMapper0, nonNsStreamWriter0);
      toXmlGenerator0.setNextNameIfMissing(qName0);
      toXmlGenerator0.useDefaultPrettyPrinter();
      toXmlGenerator0.writeStartObject();
      toXmlGenerator0.close();
      assertTrue(toXmlGenerator0.inRoot());
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      BufferRecycler bufferRecycler0 = jsonFactory0._getBufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "JSON", true);
      WriterConfig writerConfig0 = WriterConfig.createJ2MEDefaults();
      SimpleNsStreamWriter simpleNsStreamWriter0 = new SimpleNsStreamWriter((XmlWriter) null, "", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, (-3722), 3, (ObjectCodec) null, simpleNsStreamWriter0);
//      try { 
        toXmlGenerator0.writeEndObject();
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Current context not Object but root
//         //
//         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      BufferRecycler bufferRecycler0 = jsonFactory0._getBufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "JSON", false);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(1);
      WriterConfig writerConfig0 = WriterConfig.createJ2MEDefaults();
      ISOLatin1XmlWriter iSOLatin1XmlWriter0 = new ISOLatin1XmlWriter(byteArrayBuilder0, writerConfig0, false);
      NonNsStreamWriter nonNsStreamWriter0 = new NonNsStreamWriter(iSOLatin1XmlWriter0, "JSON", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 1876, 56, (ObjectCodec) null, nonNsStreamWriter0);
      toXmlGenerator0.useDefaultPrettyPrinter();
      toXmlGenerator0.writeStartArray((-732));
      toXmlGenerator0.writeEndArray();
      assertEquals(56, toXmlGenerator0.getFormatFeatures());
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      BufferRecycler bufferRecycler0 = jsonFactory0._getBufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "JSON", true);
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      RepairingNsStreamWriter repairingNsStreamWriter0 = new RepairingNsStreamWriter((XmlWriter) null, (String) null, writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 2, 1, (ObjectCodec) null, repairingNsStreamWriter0);
//      try { 
        toXmlGenerator0.writeEndArray();
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Current context not Array but root
//         //
//         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      WriterConfig writerConfig0 = WriterConfig.createJ2MEDefaults();
      SimpleNsStreamWriter simpleNsStreamWriter0 = new SimpleNsStreamWriter((XmlWriter) null, "JSON", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator((IOContext) null, 2, 1, (ObjectCodec) null, simpleNsStreamWriter0);
      toXmlGenerator0.writeStartArray(3);
      // Undeclared exception!
//      try { 
        toXmlGenerator0.close();
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      BufferRecycler bufferRecycler0 = jsonFactory0._getBufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "JSON", true);
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      SimpleNsStreamWriter simpleNsStreamWriter0 = new SimpleNsStreamWriter((XmlWriter) null, "JSON", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 2, 2, (ObjectCodec) null, simpleNsStreamWriter0);
      QName qName0 = new QName("JSON", "JSON");
      toXmlGenerator0.setNextNameIfMissing(qName0);
//      try { 
        toXmlGenerator0.writeRepeatedFieldName();
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Can not write a field name, expecting a value
//         //
//         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "JSON", false);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0, 1);
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      ISOLatin1XmlWriter iSOLatin1XmlWriter0 = new ISOLatin1XmlWriter(byteArrayBuilder0, writerConfig0, false);
      NonNsStreamWriter nonNsStreamWriter0 = new NonNsStreamWriter(iSOLatin1XmlWriter0, "JSON", writerConfig0);
      QName qName0 = new QName("JSON", "JSON", "JSON");
      ObjectMapper objectMapper0 = new ObjectMapper();
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 0, 1, objectMapper0, nonNsStreamWriter0);
      boolean boolean0 = toXmlGenerator0.setNextNameIfMissing(qName0);
      assertTrue(boolean0);
      
      toXmlGenerator0.writeStartObject();
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      toXmlGenerator0.writeFieldName((SerializableString) serializedString0);
      toXmlGenerator0.writeNull();
      toXmlGenerator0.writeRepeatedFieldName();
      assertEquals(1, toXmlGenerator0.getFormatFeatures());
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      WriterConfig writerConfig0 = WriterConfig.createJ2MEDefaults();
      SimpleNsStreamWriter simpleNsStreamWriter0 = new SimpleNsStreamWriter((XmlWriter) null, "JSON", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator((IOContext) null, 2, 2, (ObjectCodec) null, simpleNsStreamWriter0);
      QName qName0 = QName.valueOf("JSON");
      DefaultXmlPrettyPrinter defaultXmlPrettyPrinter0 = new DefaultXmlPrettyPrinter();
      toXmlGenerator0.setPrettyPrinter(defaultXmlPrettyPrinter0);
      // Undeclared exception!
//      try { 
        toXmlGenerator0.finishWrappedValue(qName0, qName0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.ctc.wstx.sw.BaseStreamWriter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      BufferRecycler bufferRecycler0 = jsonFactory0._getBufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      WriterConfig writerConfig0 = WriterConfig.createJ2MEDefaults();
      RepairingNsStreamWriter repairingNsStreamWriter0 = new RepairingNsStreamWriter((XmlWriter) null, "JSON", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, (-2861), 3, (ObjectCodec) null, repairingNsStreamWriter0);
      QName qName0 = new QName("v8Dk9,Gy1#t");
//      try { 
        toXmlGenerator0.finishWrappedValue(qName0, qName0);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // No open start element, when trying to write end element
//         //
//         verifyException("com.fasterxml.jackson.dataformat.xml.util.StaxUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      BufferRecycler bufferRecycler0 = jsonFactory0._getBufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "JSON", true);
      WriterConfig writerConfig0 = WriterConfig.createJ2MEDefaults();
      SimpleNsStreamWriter simpleNsStreamWriter0 = new SimpleNsStreamWriter((XmlWriter) null, "", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 0, 3, (ObjectCodec) null, simpleNsStreamWriter0);
      toXmlGenerator0.finishWrappedValue((QName) null, (QName) null);
      assertEquals(3, toXmlGenerator0.getFormatFeatures());
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      SimpleNsStreamWriter simpleNsStreamWriter0 = new SimpleNsStreamWriter((XmlWriter) null, "F>Sn#ftH5}Y4`", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 2, 2, (ObjectCodec) null, simpleNsStreamWriter0);
      toXmlGenerator0.useDefaultPrettyPrinter();
      QName qName0 = new QName("F>Sn#ftH5}Y4`", "READ_UNKNOWN_ENUM_VALUES_AS_NULL");
      // Undeclared exception!
//      try { 
        toXmlGenerator0.startWrappedValue(qName0, qName0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.ctc.wstx.sw.BaseStreamWriter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      SimpleNsStreamWriter simpleNsStreamWriter0 = new SimpleNsStreamWriter((XmlWriter) null, "", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 3, 0, (ObjectCodec) null, simpleNsStreamWriter0);
      toXmlGenerator0.startWrappedValue((QName) null, (QName) null);
      assertEquals(0, toXmlGenerator0.getFormatFeatures());
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      BufferRecycler bufferRecycler0 = jsonFactory0._getBufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "JSON", false);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      ISOLatin1XmlWriter iSOLatin1XmlWriter0 = new ISOLatin1XmlWriter(byteArrayBuilder0, writerConfig0, false);
      NonNsStreamWriter nonNsStreamWriter0 = new NonNsStreamWriter(iSOLatin1XmlWriter0, "JSON", writerConfig0);
      QName qName0 = new QName("JSON", "JSON", "JSON");
      ObjectMapper objectMapper0 = new ObjectMapper();
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 0, 1, objectMapper0, nonNsStreamWriter0);
      boolean boolean0 = toXmlGenerator0.setNextNameIfMissing(qName0);
      boolean boolean1 = toXmlGenerator0.setNextNameIfMissing(qName0);
      assertEquals(1, toXmlGenerator0.getFormatFeatures());
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      RepairingNsStreamWriter repairingNsStreamWriter0 = new RepairingNsStreamWriter((XmlWriter) null, (String) null, writerConfig0);
      ToXmlGenerator.Feature toXmlGenerator_Feature0 = ToXmlGenerator.Feature.WRITE_XML_1_1;
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, (-941), 3, (ObjectCodec) null, repairingNsStreamWriter0);
      boolean boolean0 = toXmlGenerator0.isEnabled(toXmlGenerator_Feature0);
      assertEquals(3, toXmlGenerator0.getFormatFeatures());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      BufferRecycler bufferRecycler0 = jsonFactory0._getBufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "JSON", false);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0, (-10));
      WriterConfig writerConfig0 = WriterConfig.createJ2MEDefaults();
      ISOLatin1XmlWriter iSOLatin1XmlWriter0 = new ISOLatin1XmlWriter(byteArrayBuilder0, writerConfig0, false);
      NonNsStreamWriter nonNsStreamWriter0 = new NonNsStreamWriter(iSOLatin1XmlWriter0, "JSON", writerConfig0);
      ObjectMapper objectMapper0 = new ObjectMapper();
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 419, 1914, objectMapper0, nonNsStreamWriter0);
      ToXmlGenerator.Feature toXmlGenerator_Feature0 = ToXmlGenerator.Feature.WRITE_XML_1_1;
      toXmlGenerator0.disable(toXmlGenerator_Feature0);
      boolean boolean0 = toXmlGenerator0.isEnabled(toXmlGenerator_Feature0);
      assertEquals(1912, toXmlGenerator0.getFormatFeatures());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      BufferRecycler bufferRecycler0 = jsonFactory0._getBufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "JSON", true);
      WriterConfig writerConfig0 = WriterConfig.createJ2MEDefaults();
      SimpleNsStreamWriter simpleNsStreamWriter0 = new SimpleNsStreamWriter((XmlWriter) null, "", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 0, 3, (ObjectCodec) null, simpleNsStreamWriter0);
      assertEquals(3, toXmlGenerator0.getFormatFeatures());
      
      toXmlGenerator0.overrideFormatFeatures(57343, 56319);
      assertEquals(56319, toXmlGenerator0.getFormatFeatures());
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      BufferRecycler bufferRecycler0 = jsonFactory0._getBufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "JSON", false);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      ISOLatin1XmlWriter iSOLatin1XmlWriter0 = new ISOLatin1XmlWriter(byteArrayBuilder0, writerConfig0, false);
      NonNsStreamWriter nonNsStreamWriter0 = new NonNsStreamWriter(iSOLatin1XmlWriter0, "JSON", writerConfig0);
      StreamWriterDelegate streamWriterDelegate0 = new StreamWriterDelegate(nonNsStreamWriter0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 774, 1737, (ObjectCodec) null, streamWriterDelegate0);
      DefaultXmlPrettyPrinter defaultXmlPrettyPrinter0 = new DefaultXmlPrettyPrinter();
      toXmlGenerator0.setPrettyPrinter(defaultXmlPrettyPrinter0);
      toXmlGenerator0.initGenerator();
      assertEquals(1737, toXmlGenerator0.getFormatFeatures());
      assertEquals("1.0", nonNsStreamWriter0.getXmlVersion());
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      BufferRecycler bufferRecycler0 = jsonFactory0._getBufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "JSON", false);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(0);
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      ISOLatin1XmlWriter iSOLatin1XmlWriter0 = new ISOLatin1XmlWriter(byteArrayBuilder0, writerConfig0, false);
      NonNsStreamWriter nonNsStreamWriter0 = new NonNsStreamWriter(iSOLatin1XmlWriter0, "JSON", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 0, 3, (ObjectCodec) null, nonNsStreamWriter0);
      DefaultXmlPrettyPrinter defaultXmlPrettyPrinter0 = new DefaultXmlPrettyPrinter();
      toXmlGenerator0.setPrettyPrinter(defaultXmlPrettyPrinter0);
      toXmlGenerator0.initGenerator();
      assertEquals("1.1", nonNsStreamWriter0.getXmlVersion());
      assertEquals(3, toXmlGenerator0.getFormatFeatures());
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      ObjectMapper objectMapper0 = new ObjectMapper();
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0, 1);
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      ISOLatin1XmlWriter iSOLatin1XmlWriter0 = new ISOLatin1XmlWriter(byteArrayBuilder0, writerConfig0, true);
      NonNsStreamWriter nonNsStreamWriter0 = new NonNsStreamWriter(iSOLatin1XmlWriter0, "JSON", writerConfig0);
      StreamWriter2Delegate streamWriter2Delegate0 = new StreamWriter2Delegate(nonNsStreamWriter0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 0, 90, objectMapper0, streamWriter2Delegate0);
      toXmlGenerator0.initGenerator();
      toXmlGenerator0.initGenerator();
      assertEquals("1.1", nonNsStreamWriter0.getXmlVersion());
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      int int0 = ToXmlGenerator.Feature.collectDefaults();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      BufferRecycler bufferRecycler0 = jsonFactory0._getBufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "JSON", true);
      WriterConfig writerConfig0 = WriterConfig.createJ2MEDefaults();
      SimpleNsStreamWriter simpleNsStreamWriter0 = new SimpleNsStreamWriter((XmlWriter) null, "", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 8, (-385), (ObjectCodec) null, simpleNsStreamWriter0);
      // Undeclared exception!
//      try { 
        toXmlGenerator0.writeNumber("");
//        fail("Expecting exception: IllegalStateException");
      
//      } catch(IllegalStateException e) {
//         //
//         // No element/attribute name specified when trying to output element
//         //
//         verifyException("com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, pipedInputStream0, false);
      JsonFactory jsonFactory0 = new JsonFactory();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0, defaultSerializerProvider_Impl0, defaultDeserializationContext_Impl0);
      WriterConfig writerConfig0 = WriterConfig.createJ2MEDefaults();
      AsciiXmlWriter asciiXmlWriter0 = new AsciiXmlWriter(pipedOutputStream0, writerConfig0, false);
      SimpleNsStreamWriter simpleNsStreamWriter0 = new SimpleNsStreamWriter(asciiXmlWriter0, "JSON", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 0, 2, objectMapper0, simpleNsStreamWriter0);
      byte[] byteArray0 = new byte[6];
      // Undeclared exception!
//      try { 
        toXmlGenerator0.writeRawUTF8String(byteArray0, 1, (byte)5);
//        fail("Expecting exception: UnsupportedOperationException");
      
//      } catch(UnsupportedOperationException e) {
//         //
//         // Operation not supported by generator of type com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator
//         //
//         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      BufferRecycler bufferRecycler0 = jsonFactory0._getBufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "JSON", false);
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      SimpleNsStreamWriter simpleNsStreamWriter0 = new SimpleNsStreamWriter((XmlWriter) null, "JSON", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, (-189), (-189), (ObjectCodec) null, simpleNsStreamWriter0);
      boolean boolean0 = toXmlGenerator0.canWriteFormattedNumbers();
      assertEquals((-189), toXmlGenerator0.getFormatFeatures());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      BufferRecycler bufferRecycler0 = jsonFactory0._getBufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "JSON", false);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0, (-10));
      WriterConfig writerConfig0 = WriterConfig.createJ2MEDefaults();
      ISOLatin1XmlWriter iSOLatin1XmlWriter0 = new ISOLatin1XmlWriter(byteArrayBuilder0, writerConfig0, false);
      NonNsStreamWriter nonNsStreamWriter0 = new NonNsStreamWriter(iSOLatin1XmlWriter0, "JSON", writerConfig0);
      ObjectMapper objectMapper0 = new ObjectMapper();
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 3, 1914, objectMapper0, nonNsStreamWriter0);
      Object object0 = toXmlGenerator0.getOutputTarget();
      assertEquals(1914, toXmlGenerator0.getFormatFeatures());
      assertNotNull(object0);
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      BufferRecycler bufferRecycler0 = jsonFactory0._getBufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "JSON", true);
      WriterConfig writerConfig0 = WriterConfig.createJ2MEDefaults();
      NonNsStreamWriter nonNsStreamWriter0 = new NonNsStreamWriter((XmlWriter) null, "JSON", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 2, (-502), (ObjectCodec) null, nonNsStreamWriter0);
      // Undeclared exception!
//      try { 
        toXmlGenerator0.writeString((SerializableString) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      ObjectMapper objectMapper0 = new ObjectMapper();
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      RepairingNsStreamWriter repairingNsStreamWriter0 = new RepairingNsStreamWriter((XmlWriter) null, "JSON", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 1, 1, objectMapper0, repairingNsStreamWriter0);
      toXmlGenerator0.getStaxWriter();
      assertEquals(1, toXmlGenerator0.getFormatFeatures());
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      BufferRecycler bufferRecycler0 = jsonFactory0._getBufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "JSON", true);
      WriterConfig writerConfig0 = WriterConfig.createJ2MEDefaults();
      SimpleNsStreamWriter simpleNsStreamWriter0 = new SimpleNsStreamWriter((XmlWriter) null, "", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 0, 3, (ObjectCodec) null, simpleNsStreamWriter0);
      int int0 = toXmlGenerator0.getFormatFeatures();
      assertEquals(3, int0);
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      BufferRecycler bufferRecycler0 = jsonFactory0._getBufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "JSON", false);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0, 2);
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      ISOLatin1XmlWriter iSOLatin1XmlWriter0 = new ISOLatin1XmlWriter(byteArrayBuilder0, writerConfig0, false);
      NonNsStreamWriter nonNsStreamWriter0 = new NonNsStreamWriter(iSOLatin1XmlWriter0, "JSON", writerConfig0);
      ObjectMapper objectMapper0 = new ObjectMapper();
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 3, 2, objectMapper0, nonNsStreamWriter0);
      toXmlGenerator0.useDefaultPrettyPrinter();
      // Undeclared exception!
//      try { 
        toXmlGenerator0.writeStartObject();
//        fail("Expecting exception: IllegalStateException");
      
//      } catch(IllegalStateException e) {
//         //
//         // No element/attribute name specified when trying to output element
//         //
//         verifyException("com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      BufferRecycler bufferRecycler0 = jsonFactory0._getBufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      WriterConfig writerConfig0 = WriterConfig.createJ2MEDefaults();
      RepairingNsStreamWriter repairingNsStreamWriter0 = new RepairingNsStreamWriter((XmlWriter) null, "JSON", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 1, 2, (ObjectCodec) null, repairingNsStreamWriter0);
      SerializedString serializedString0 = new SerializedString("JSON");
      // Undeclared exception!
//      try { 
        toXmlGenerator0.writeRawValue((SerializableString) serializedString0);
//        fail("Expecting exception: UnsupportedOperationException");
      
//      } catch(UnsupportedOperationException e) {
//         //
//         // Operation not supported by generator of type com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator
//         //
//         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      ObjectMapper objectMapper0 = new ObjectMapper();
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0, 1);
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      ISOLatin1XmlWriter iSOLatin1XmlWriter0 = new ISOLatin1XmlWriter(byteArrayBuilder0, writerConfig0, true);
      NonNsStreamWriter nonNsStreamWriter0 = new NonNsStreamWriter(iSOLatin1XmlWriter0, "JSON", writerConfig0);
      StreamWriter2Delegate streamWriter2Delegate0 = new StreamWriter2Delegate(nonNsStreamWriter0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 0, 90, objectMapper0, streamWriter2Delegate0);
      QName qName0 = new QName("", "JSON");
      toXmlGenerator0.startWrappedValue(qName0, qName0);
      assertEquals(90, toXmlGenerator0.getFormatFeatures());
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      RepairingNsStreamWriter repairingNsStreamWriter0 = new RepairingNsStreamWriter((XmlWriter) null, (String) null, writerConfig0);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, (-941), 3, (ObjectCodec) null, repairingNsStreamWriter0);
      int int0 = toXmlGenerator0.getOutputBuffered();
      assertEquals(3, toXmlGenerator0.getFormatFeatures());
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      RepairingNsStreamWriter repairingNsStreamWriter0 = new RepairingNsStreamWriter((XmlWriter) null, "CfwW$C,", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator((IOContext) null, 846, (-638), (ObjectCodec) null, repairingNsStreamWriter0);
      byte[] byteArray0 = new byte[6];
      // Undeclared exception!
//      try { 
        toXmlGenerator0.writeUTF8String(byteArray0, (byte) (-1), (-1957));
//        fail("Expecting exception: UnsupportedOperationException");
      
//      } catch(UnsupportedOperationException e) {
//         //
//         // Operation not supported by generator of type com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator
//         //
//         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      BufferRecycler bufferRecycler0 = jsonFactory0._getBufferRecycler();
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      NonNsStreamWriter nonNsStreamWriter0 = new NonNsStreamWriter((XmlWriter) null, "JSON", writerConfig0);
      StreamWriterDelegate streamWriterDelegate0 = new StreamWriterDelegate(nonNsStreamWriter0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0.BYTE_WRITE_ENCODING_BUFFER, false);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 2, 2, (ObjectCodec) null, streamWriterDelegate0);
//      try { 
        toXmlGenerator0.writeRaw("overflow, value cannot be represented as 16-bit value");
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Underlying Stax XMLStreamWriter (of type org.codehaus.stax2.util.StreamWriterDelegate) does not implement Stax2 API natively and is missing method 'writeRaw': this breaks functionality such as indentation that relies on it. You need to upgrade to using compliant Stax implementation like Woodstox or Aalto
//         //
//         verifyException("com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      BufferRecycler bufferRecycler0 = jsonFactory0._getBufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "JSON", false);
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      RepairingNsStreamWriter repairingNsStreamWriter0 = new RepairingNsStreamWriter((XmlWriter) null, "JSON", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 3, 2, (ObjectCodec) null, repairingNsStreamWriter0);
//      try { 
        toXmlGenerator0.writeStringField("JSON", "");
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Can not write a field name, expecting a value
//         //
//         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "", false);
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      SimpleNsStreamWriter simpleNsStreamWriter0 = new SimpleNsStreamWriter((XmlWriter) null, "", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 2, 0, (ObjectCodec) null, simpleNsStreamWriter0);
      toXmlGenerator0.setNextIsCData(false);
      assertEquals(0, toXmlGenerator0.getFormatFeatures());
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      BufferRecycler bufferRecycler0 = jsonFactory0._getBufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "JSON", false);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0, 2);
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      ISOLatin1XmlWriter iSOLatin1XmlWriter0 = new ISOLatin1XmlWriter(byteArrayBuilder0, writerConfig0, false);
      NonNsStreamWriter nonNsStreamWriter0 = new NonNsStreamWriter(iSOLatin1XmlWriter0, "JSON", writerConfig0);
      ObjectMapper objectMapper0 = new ObjectMapper();
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 3, 2, objectMapper0, nonNsStreamWriter0);
      assertEquals(2, toXmlGenerator0.getFormatFeatures());
      
      ToXmlGenerator.Feature toXmlGenerator_Feature0 = ToXmlGenerator.Feature.WRITE_XML_1_1;
      toXmlGenerator0.configure(toXmlGenerator_Feature0, false);
      toXmlGenerator0.initGenerator();
      assertEquals(0, toXmlGenerator0.getFormatFeatures());
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      SimpleNsStreamWriter simpleNsStreamWriter0 = new SimpleNsStreamWriter((XmlWriter) null, "", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 3, 0, (ObjectCodec) null, simpleNsStreamWriter0);
      // Undeclared exception!
//      try { 
        toXmlGenerator0.writeRaw('0');
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.ctc.wstx.sw.BaseStreamWriter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      ObjectMapper objectMapper0 = new ObjectMapper();
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0, 1);
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      ISOLatin1XmlWriter iSOLatin1XmlWriter0 = new ISOLatin1XmlWriter(byteArrayBuilder0, writerConfig0, true);
      NonNsStreamWriter nonNsStreamWriter0 = new NonNsStreamWriter(iSOLatin1XmlWriter0, "JSON", writerConfig0);
      StreamWriter2Delegate streamWriter2Delegate0 = new StreamWriter2Delegate(nonNsStreamWriter0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 0, 90, objectMapper0, streamWriter2Delegate0);
      SerializedString serializedString0 = PrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
//      try { 
        toXmlGenerator0.writeFieldName((SerializableString) serializedString0);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Can not write a field name, expecting a value
//         //
//         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      NonNsStreamWriter nonNsStreamWriter0 = new NonNsStreamWriter((XmlWriter) null, "JSON", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 3, (-3216), objectMapper0, nonNsStreamWriter0);
      toXmlGenerator0.inRoot();
      assertEquals((-3216), toXmlGenerator0.getFormatFeatures());
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      ObjectMapper objectMapper0 = new ObjectMapper();
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0, 0);
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      ISOLatin1XmlWriter iSOLatin1XmlWriter0 = new ISOLatin1XmlWriter(byteArrayBuilder0, writerConfig0, true);
      NonNsStreamWriter nonNsStreamWriter0 = new NonNsStreamWriter(iSOLatin1XmlWriter0, "JSON", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, (-1527), 3, objectMapper0, nonNsStreamWriter0);
      MathContext mathContext0 = MathContext.DECIMAL32;
      BigDecimal bigDecimal0 = new BigDecimal(421.2, mathContext0);
      // Undeclared exception!
//      try { 
        toXmlGenerator0.writeNumber(bigDecimal0);
//        fail("Expecting exception: IllegalStateException");
      
//      } catch(IllegalStateException e) {
//         //
//         // No element/attribute name specified when trying to output element
//         //
//         verifyException("com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      FromXmlParser.Feature fromXmlParser_Feature0 = FromXmlParser.Feature.EMPTY_ELEMENT_AS_NULL;
      IOContext iOContext0 = new IOContext(bufferRecycler0, fromXmlParser_Feature0, false);
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream((OutputStream) null);
      WriterConfig writerConfig0 = WriterConfig.createJ2MEDefaults();
      AsciiXmlWriter asciiXmlWriter0 = new AsciiXmlWriter(bufferedOutputStream0, writerConfig0, false);
      NonNsStreamWriter nonNsStreamWriter0 = new NonNsStreamWriter(asciiXmlWriter0, "JSON", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 0, 0, objectMapper0, nonNsStreamWriter0);
      toXmlGenerator0._releaseBuffers();
      assertEquals(0, toXmlGenerator0.getFormatFeatures());
  }
}
