/*
 * This file was automatically generated by EvoSuite
 * Fri Oct 22 00:54:03 GMT 2021
 */

package com.fasterxml.jackson.dataformat.xml.ser;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.ctc.wstx.api.WriterConfig;
import com.ctc.wstx.sw.AsciiXmlWriter;
import com.ctc.wstx.sw.BufferingXmlWriter;
import com.ctc.wstx.sw.ISOLatin1XmlWriter;
import com.ctc.wstx.sw.NonNsStreamWriter;
import com.ctc.wstx.sw.RepairingNsStreamWriter;
import com.ctc.wstx.sw.SimpleNsStreamWriter;
import com.ctc.wstx.sw.XmlWriter;
import com.fasterxml.jackson.annotation.JsonAutoDetect;
import com.fasterxml.jackson.core.Base64Variant;
import com.fasterxml.jackson.core.JsonFactory;
import com.fasterxml.jackson.core.JsonGenerator;
import com.fasterxml.jackson.core.ObjectCodec;
import com.fasterxml.jackson.core.PrettyPrinter;
import com.fasterxml.jackson.core.SerializableString;
import com.fasterxml.jackson.core.io.IOContext;
import com.fasterxml.jackson.core.io.SerializedString;
import com.fasterxml.jackson.core.util.BufferRecycler;
import com.fasterxml.jackson.core.util.ByteArrayBuilder;
import com.fasterxml.jackson.core.util.DefaultPrettyPrinter;
import com.fasterxml.jackson.core.util.MinimalPrettyPrinter;
import com.fasterxml.jackson.databind.InjectableValues;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.ObjectReader;
import com.fasterxml.jackson.databind.cfg.DeserializerFactoryConfig;
import com.fasterxml.jackson.databind.deser.BeanDeserializerFactory;
import com.fasterxml.jackson.databind.deser.DefaultDeserializationContext;
import com.fasterxml.jackson.databind.node.BigIntegerNode;
import com.fasterxml.jackson.databind.ser.DefaultSerializerProvider;
import com.fasterxml.jackson.dataformat.xml.XmlPrettyPrinter;
import com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator;
import com.fasterxml.jackson.dataformat.xml.util.DefaultXmlPrettyPrinter;
import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.FileDescriptor;
import java.io.FilterOutputStream;
import java.io.IOException;
import java.io.OutputStream;
import java.io.OutputStreamWriter;
import java.io.PipedOutputStream;
import java.io.StringWriter;
import java.io.Writer;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.math.MathContext;
import java.nio.charset.Charset;
import java.nio.charset.CharsetEncoder;
import javax.xml.namespace.QName;
import javax.xml.stream.XMLStreamWriter;
import org.codehaus.stax2.XMLStreamWriter2;
import org.codehaus.stax2.ri.Stax2WriterAdapter;
import org.codehaus.stax2.util.StreamWriter2Delegate;
import org.codehaus.stax2.util.StreamWriterDelegate;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockFileWriter;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class ToXmlGenerator_ESTest extends ToXmlGenerator_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      StreamWriter2Delegate streamWriter2Delegate0 = new StreamWriter2Delegate((XMLStreamWriter2) null);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator((IOContext) null, (-524), (-524), objectMapper0, streamWriter2Delegate0);
      QName qName0 = new QName("*b", "*b");
      toXmlGenerator0.setNextName(qName0);
      toXmlGenerator0.setNextIsAttribute(true);
      byte[] byteArray0 = new byte[9];
      // Undeclared exception!
//      try { 
        toXmlGenerator0.writeBinary(byteArray0, (int) (byte)0, (int) (byte)0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.codehaus.stax2.util.StreamWriter2Delegate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      RepairingNsStreamWriter repairingNsStreamWriter0 = new RepairingNsStreamWriter((XmlWriter) null, "x]4v6$EwS6L", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator((IOContext) null, 1320, 1320, objectMapper0, repairingNsStreamWriter0);
      QName qName0 = new QName("x]4v6$EwS6L", "x]4v6$EwS6L", "x]4v6$EwS6L");
      toXmlGenerator0.setNextName(qName0);
      toXmlGenerator0.setNextIsAttribute(true);
      byte[] byteArray0 = new byte[0];
      // Undeclared exception!
//      try { 
        toXmlGenerator0.writeBinary(byteArray0, 1320, (-704));
//        fail("Expecting exception: NegativeArraySizeException");
      
//      } catch(NegativeArraySizeException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      NonNsStreamWriter nonNsStreamWriter0 = new NonNsStreamWriter((XmlWriter) null, "com.fasterxml.jackson$d?taormat.xmlser.ToXlGenerator", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator((IOContext) null, 8000, 1, objectMapper0, nonNsStreamWriter0);
      assertEquals(1, toXmlGenerator0.getFormatFeatures());
      
      toXmlGenerator0.overrideFormatFeatures(56320, 873);
      assertEquals(0, toXmlGenerator0.getFormatFeatures());
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      WriterConfig writerConfig0 = WriterConfig.createJ2MEDefaults();
      QName qName0 = QName.valueOf("-)Zyd8GcjI");
      MockFileWriter mockFileWriter0 = new MockFileWriter("-)Zyd8GcjI");
      BufferingXmlWriter bufferingXmlWriter0 = new BufferingXmlWriter(mockFileWriter0, writerConfig0, "-)Zyd8GcjI", true, byteArrayOutputStream0, (-2445));
      NonNsStreamWriter nonNsStreamWriter0 = new NonNsStreamWriter(bufferingXmlWriter0, "-)Zyd8GcjI", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator((IOContext) null, 66, 66, objectMapper0, nonNsStreamWriter0);
      toXmlGenerator0.setNextName(qName0);
      toXmlGenerator0.writeStartObject();
      toXmlGenerator0.writeFieldName("");
      assertEquals(66, toXmlGenerator0.getFormatFeatures());
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      MockPrintStream mockPrintStream0 = new MockPrintStream("com.fasterxml.j_ckspn.dNtaformat.xml.ser.ToXmlGeneAator");
      BufferingXmlWriter bufferingXmlWriter0 = new BufferingXmlWriter((Writer) null, writerConfig0, "9[7", true, mockPrintStream0, 2304);
      RepairingNsStreamWriter repairingNsStreamWriter0 = new RepairingNsStreamWriter(bufferingXmlWriter0, "9[7", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator((IOContext) null, 1320, 0, objectMapper0, repairingNsStreamWriter0);
      toXmlGenerator0._verifyValueWrite("JSON");
      assertEquals(0, toXmlGenerator0.getFormatFeatures());
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      WriterConfig writerConfig0 = WriterConfig.createJ2MEDefaults();
      QName qName0 = QName.valueOf("G)Zyd8GcjI");
      MockFileWriter mockFileWriter0 = new MockFileWriter("G)Zyd8GcjI");
      BufferingXmlWriter bufferingXmlWriter0 = new BufferingXmlWriter(mockFileWriter0, writerConfig0, "", false, byteArrayOutputStream0, 66);
      NonNsStreamWriter nonNsStreamWriter0 = new NonNsStreamWriter(bufferingXmlWriter0, "G)Zyd8GcjI", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator((IOContext) null, 66, 66, objectMapper0, nonNsStreamWriter0);
      toXmlGenerator0.setNextName(qName0);
      toXmlGenerator0.writeStartObject();
      toXmlGenerator0.writeStringField("", "");
      assertEquals(66, toXmlGenerator0.getFormatFeatures());
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      MockPrintStream mockPrintStream0 = new MockPrintStream("com.fasterxml.j_ckspn.dNtaformat.xml.ser.ToXmlGeneAator");
      ISOLatin1XmlWriter iSOLatin1XmlWriter0 = new ISOLatin1XmlWriter(mockPrintStream0, writerConfig0, true);
      NonNsStreamWriter nonNsStreamWriter0 = new NonNsStreamWriter(iSOLatin1XmlWriter0, "com.fasterxml.j_ckspn.dNtaformat.xml.ser.ToXmlGeneAator", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator((IOContext) null, 2, 1958, objectMapper0, nonNsStreamWriter0);
      QName qName0 = new QName("com.fasterxml.j_ckspn.dNtaformat.xml.ser.ToXmlGeneAator", "Kn[Bqk%", "com.fasterxml.j_ckspn.dNtaformat.xml.ser.ToXmlGeneAator");
      toXmlGenerator0.setNextName(qName0);
      toXmlGenerator0.writeNumber("com.fasterxml.j_ckspn.dNtaformat.xml.ser.ToXmlGeneAator");
      char[] charArray0 = new char[9];
//      try { 
        toXmlGenerator0.writeString(charArray0, 56224, 0);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Trying to output second root, <Kn[Bqk%>
//         //
//         verifyException("com.fasterxml.jackson.dataformat.xml.util.StaxUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      SimpleNsStreamWriter simpleNsStreamWriter0 = new SimpleNsStreamWriter((XmlWriter) null, "", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator((IOContext) null, (-655), (-655), objectMapper0, simpleNsStreamWriter0);
      QName qName0 = new QName(",l,DPPt0W,2Q=WUd", ",l,DPPt0W,2Q=WUd");
      toXmlGenerator0.setNextName(qName0);
      char[] charArray0 = new char[6];
//      try { 
        toXmlGenerator0.writeRawValue(charArray0, (-704), (-1218));
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Unbound namespace URI ',l,DPPt0W,2Q=WUd'
//         //
//         verifyException("com.fasterxml.jackson.dataformat.xml.util.StaxUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      WriterConfig writerConfig0 = WriterConfig.createJ2MEDefaults();
      AsciiXmlWriter asciiXmlWriter0 = new AsciiXmlWriter(byteArrayOutputStream0, writerConfig0, false);
      SimpleNsStreamWriter simpleNsStreamWriter0 = new SimpleNsStreamWriter(asciiXmlWriter0, "a:NvkdW8acR70X4", writerConfig0);
      QName qName0 = new QName((String) null, "a:NvkdW8acR70X4", "pd{p!)LfG4q.32pj|");
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator((IOContext) null, 1047, 1047, objectMapper0, simpleNsStreamWriter0);
      toXmlGenerator0.setNextName(qName0);
      toXmlGenerator0.writeStartObject();
      toXmlGenerator0.writeFieldId(1047);
      char[] charArray0 = new char[3];
      toXmlGenerator0.writeRawValue(charArray0, 1047, (-2631));
      assertEquals(1047, toXmlGenerator0.getFormatFeatures());
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      QName qName0 = new QName("Mismatching close element name, '", "WRITE_XML_DECLARATION");
      QName qName1 = QName.valueOf("X");
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      ISOLatin1XmlWriter iSOLatin1XmlWriter0 = new ISOLatin1XmlWriter(byteArrayOutputStream0, writerConfig0, false);
      SimpleNsStreamWriter simpleNsStreamWriter0 = new SimpleNsStreamWriter(iSOLatin1XmlWriter0, "", writerConfig0);
      StreamWriter2Delegate streamWriter2Delegate0 = new StreamWriter2Delegate(simpleNsStreamWriter0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator((IOContext) null, (-1150), 1176, objectMapper0, streamWriter2Delegate0);
      toXmlGenerator0.startWrappedValue(qName1, qName0);
//      try { 
        toXmlGenerator0.writeRawValue("", 108, 57343);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Unbound namespace URI 'Mismatching close element name, ''
//         //
//         verifyException("com.fasterxml.jackson.dataformat.xml.util.StaxUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      MockPrintStream mockPrintStream0 = new MockPrintStream("e`E<H7Y2xp##");
      ISOLatin1XmlWriter iSOLatin1XmlWriter0 = new ISOLatin1XmlWriter(mockPrintStream0, writerConfig0, true);
      NonNsStreamWriter nonNsStreamWriter0 = new NonNsStreamWriter(iSOLatin1XmlWriter0, "e`E<H7Y2xp##", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator((IOContext) null, 512, 512, objectMapper0, nonNsStreamWriter0);
      QName qName0 = new QName("e`E<H7Y2xp##", "S!ejh");
      toXmlGenerator0.startWrappedValue(qName0, qName0);
      toXmlGenerator0.writeRawValue((String) null, (-1934), (-2143));
      assertEquals(512, toXmlGenerator0.getFormatFeatures());
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      MockPrintStream mockPrintStream0 = new MockPrintStream("com.fasterxml.jackspn.dNtaformat.xml.ser.ToXmlGenerator");
      ISOLatin1XmlWriter iSOLatin1XmlWriter0 = new ISOLatin1XmlWriter(mockPrintStream0, writerConfig0, false);
      NonNsStreamWriter nonNsStreamWriter0 = new NonNsStreamWriter(iSOLatin1XmlWriter0, "com.fasterxml.jackspn.dNtaformat.xml.ser.ToXmlGenerator", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator((IOContext) null, 512, 512, objectMapper0, nonNsStreamWriter0);
      QName qName0 = new QName("O^I])W/AW=NHXl<", "O^I])W/AW=NHXl<", "O^I])W/AW=NHXl<");
      toXmlGenerator0.setNextName(qName0);
      toXmlGenerator0.writeRawValue("Apt8");
      assertEquals(512, toXmlGenerator0.getFormatFeatures());
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0.BYTE_BASE64_CODEC_BUFFER, true);
      ObjectMapper objectMapper0 = new ObjectMapper();
      WriterConfig writerConfig0 = WriterConfig.createJ2MEDefaults();
      AsciiXmlWriter asciiXmlWriter0 = new AsciiXmlWriter((OutputStream) null, writerConfig0, true);
      SimpleNsStreamWriter simpleNsStreamWriter0 = new SimpleNsStreamWriter(asciiXmlWriter0, "Can not write a field name, expecting a value", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 0, 614, objectMapper0, simpleNsStreamWriter0);
      char[] charArray0 = new char[8];
      toXmlGenerator0.writeRaw(charArray0, (-1288), (-3053));
      assertEquals(614, toXmlGenerator0.getFormatFeatures());
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(8000);
      ISOLatin1XmlWriter iSOLatin1XmlWriter0 = new ISOLatin1XmlWriter(byteArrayBuilder0, writerConfig0, false);
      NonNsStreamWriter nonNsStreamWriter0 = new NonNsStreamWriter(iSOLatin1XmlWriter0, "com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator((IOContext) null, 54052, 54052, objectMapper0, nonNsStreamWriter0);
      toXmlGenerator0.writeRaw("Can not write END_ELEMENT without open START_ELEMENT", 452, (-2907));
      assertEquals(54052, toXmlGenerator0.getFormatFeatures());
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      JsonAutoDetect.Value jsonAutoDetect_Value0 = JsonAutoDetect.Value.defaultVisibility();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("F~KVYZ", false);
      WriterConfig writerConfig0 = WriterConfig.createJ2MEDefaults();
      AsciiXmlWriter asciiXmlWriter0 = new AsciiXmlWriter(mockFileOutputStream0, writerConfig0, true);
      SimpleNsStreamWriter simpleNsStreamWriter0 = new SimpleNsStreamWriter(asciiXmlWriter0, "JSON", writerConfig0);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, jsonAutoDetect_Value0, false);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 4, 1, objectMapper0, simpleNsStreamWriter0);
      toXmlGenerator0.writeRaw('S');
      assertEquals(1, toXmlGenerator0.getFormatFeatures());
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      FilterOutputStream filterOutputStream0 = new FilterOutputStream((OutputStream) null);
      Charset charset0 = Charset.defaultCharset();
      CharsetEncoder charsetEncoder0 = charset0.newEncoder();
      OutputStreamWriter outputStreamWriter0 = new OutputStreamWriter(filterOutputStream0, charsetEncoder0);
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      BufferingXmlWriter bufferingXmlWriter0 = new BufferingXmlWriter(outputStreamWriter0, writerConfig0, "  ._)", false, (OutputStream) null, 3393);
      RepairingNsStreamWriter repairingNsStreamWriter0 = new RepairingNsStreamWriter(bufferingXmlWriter0, "  ._)", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator((IOContext) null, 3393, 2, objectMapper0, repairingNsStreamWriter0);
      QName qName0 = new QName("': this breaks functionality such as indentation that relies on it. ", "': this breaks functionality such as indentation that relies on it. ", "': this breaks functionality such as indentation that relies on it. ");
      toXmlGenerator0.setNextName(qName0);
      byte[] byteArray0 = new byte[7];
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      toXmlGenerator0.writeNumber(bigInteger0);
      assertEquals(2, toXmlGenerator0.getFormatFeatures());
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      WriterConfig writerConfig0 = WriterConfig.createJ2MEDefaults();
      QName qName0 = new QName("G)Zyd8GcjI", "G)Zyd8GcjI", "G)Zyd8GcjI");
      MockFileWriter mockFileWriter0 = new MockFileWriter("G)Zyd8GcjI");
      BufferingXmlWriter bufferingXmlWriter0 = new BufferingXmlWriter(mockFileWriter0, writerConfig0, "G)Zyd8GcjI", false, byteArrayOutputStream0, 57);
      NonNsStreamWriter nonNsStreamWriter0 = new NonNsStreamWriter(bufferingXmlWriter0, "G)Zyd8GcjI", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator((IOContext) null, 57, 57, objectMapper0, nonNsStreamWriter0);
      toXmlGenerator0.setNextName(qName0);
      toXmlGenerator0.writeNumber((BigInteger) null);
      assertEquals(57, toXmlGenerator0.getFormatFeatures());
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      SimpleNsStreamWriter simpleNsStreamWriter0 = new SimpleNsStreamWriter((XmlWriter) null, "com.ctc.wstx.cacheDTDsByPublicId", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator((IOContext) null, 706, 706, objectMapper0, simpleNsStreamWriter0);
      QName qName0 = new QName("].>^@wu{ H2A/I{", "k8^JTCBHu{W>mx", "");
      toXmlGenerator0.setNextName(qName0);
      BigInteger bigInteger0 = BigInteger.TEN;
      BigIntegerNode bigIntegerNode0 = BigIntegerNode.valueOf(bigInteger0);
      BigDecimal bigDecimal0 = bigIntegerNode0.decimalValue();
//      try { 
        toXmlGenerator0.writeNumber(bigDecimal0);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Unbound namespace URI '].>^@wu{ H2A/I{'
//         //
//         verifyException("com.fasterxml.jackson.dataformat.xml.util.StaxUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      MockPrintStream mockPrintStream0 = new MockPrintStream("com.fasterxml.jackspn.dNtaformat.xml.ser.ToXmlGenerator");
      ISOLatin1XmlWriter iSOLatin1XmlWriter0 = new ISOLatin1XmlWriter(mockPrintStream0, writerConfig0, false);
      NonNsStreamWriter nonNsStreamWriter0 = new NonNsStreamWriter(iSOLatin1XmlWriter0, "com.fasterxml.jackspn.dNtaformat.xml.ser.ToXmlGenerator", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator((IOContext) null, 512, 512, objectMapper0, nonNsStreamWriter0);
      QName qName0 = new QName("", "O(B", "com.fasterxml.jackspn.dNtaformat.xml.ser.ToXmlGenerator");
      toXmlGenerator0.setNextName(qName0);
      toXmlGenerator0.writeNumber((BigDecimal) null);
      assertEquals(512, toXmlGenerator0.getFormatFeatures());
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      MockPrintStream mockPrintStream0 = new MockPrintStream("com.fasterxml.j_ckspn.dNtaformat.xml.ser.ToXmlGeneAator");
      ISOLatin1XmlWriter iSOLatin1XmlWriter0 = new ISOLatin1XmlWriter(mockPrintStream0, writerConfig0, true);
      NonNsStreamWriter nonNsStreamWriter0 = new NonNsStreamWriter(iSOLatin1XmlWriter0, "com.fasterxml.j_ckspn.dNtaformat.xml.ser.ToXmlGeneAator", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator((IOContext) null, 486, 486, objectMapper0, nonNsStreamWriter0);
      toXmlGenerator0._nextIsUnwrapped = true;
      QName qName0 = new QName("write String value", "?~3mhRyQ");
      toXmlGenerator0.setNextName(qName0);
      toXmlGenerator0.writeNumber("");
      toXmlGenerator0.writeNumber((-2437L));
      assertEquals(486, toXmlGenerator0.getFormatFeatures());
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      WriterConfig writerConfig0 = WriterConfig.createJ2MEDefaults();
      QName qName0 = new QName("G)Zyd8GcjI", "G)Zyd8GcjI", "G)Zyd8GcjI");
      MockFileWriter mockFileWriter0 = new MockFileWriter("G)Zyd8GcjI");
      BufferingXmlWriter bufferingXmlWriter0 = new BufferingXmlWriter(mockFileWriter0, writerConfig0, "G)Zyd8GcjI", false, byteArrayOutputStream0, 57);
      NonNsStreamWriter nonNsStreamWriter0 = new NonNsStreamWriter(bufferingXmlWriter0, "G)Zyd8GcjI", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator((IOContext) null, 57, 57, objectMapper0, nonNsStreamWriter0);
      toXmlGenerator0.setNextName(qName0);
      toXmlGenerator0.writeStartObject();
      toXmlGenerator0.writeFieldId(57);
      toXmlGenerator0.writeNumber(704);
      assertEquals(57, toXmlGenerator0.getFormatFeatures());
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      AsciiXmlWriter asciiXmlWriter0 = new AsciiXmlWriter(byteArrayOutputStream0, writerConfig0, true);
      RepairingNsStreamWriter repairingNsStreamWriter0 = new RepairingNsStreamWriter(asciiXmlWriter0, "W2\"k;9G", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator((IOContext) null, 23, 23, objectMapper0, repairingNsStreamWriter0);
      QName qName0 = new QName("W2\"k;9G", "", "1\"$*0");
      toXmlGenerator0.setNextName(qName0);
      toXmlGenerator0.writeNumber((double) 23);
      assertEquals(23, toXmlGenerator0.getFormatFeatures());
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      MockPrintStream mockPrintStream0 = new MockPrintStream("com.fasterxml.j_ckspn.dNtaformat.xml.ser.ToXmlGeneAator");
      BufferingXmlWriter bufferingXmlWriter0 = new BufferingXmlWriter((Writer) null, writerConfig0, "com.fasterxml.j_ckspn.dNtaformat.xml.ser.ToXmlGeneAator", true, mockPrintStream0, 2304);
      RepairingNsStreamWriter repairingNsStreamWriter0 = new RepairingNsStreamWriter(bufferingXmlWriter0, "com.fasterxml.j_ckspn.dNtaformat.xml.ser.ToXmlGeneAator", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator((IOContext) null, 1320, 0, objectMapper0, repairingNsStreamWriter0);
      QName qName0 = new QName("write number", "write number", "write number");
      toXmlGenerator0.setNextName(qName0);
      byte[] byteArray0 = new byte[8];
      toXmlGenerator0.writeBinary((Base64Variant) null, byteArray0, 3995, (int) (byte) (-20));
      assertEquals(0, toXmlGenerator0.getFormatFeatures());
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      MockPrintStream mockPrintStream0 = new MockPrintStream("com.fasterxml.j_ckspn.dNtaformat.xml.ser.ToXmlGeneAator");
      ISOLatin1XmlWriter iSOLatin1XmlWriter0 = new ISOLatin1XmlWriter(mockPrintStream0, writerConfig0, true);
      NonNsStreamWriter nonNsStreamWriter0 = new NonNsStreamWriter(iSOLatin1XmlWriter0, "com.fasterxml.j_ckspn.dNtaformat.xml.ser.ToXmlGeneAator", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator((IOContext) null, 486, 486, objectMapper0, nonNsStreamWriter0);
      QName qName0 = new QName("com.fasterxml.j_ckspn.dNtaformat.xml.ser.ToXmlGeneAator", "com.fasterxml.j_ckspn.dNtaformat.xml.ser.ToXmlGeneAator", "com.fasterxml.j_ckspn.dNtaformat.xml.ser.ToXmlGeneAator");
      toXmlGenerator0.setNextName(qName0);
      toXmlGenerator0.writeBinary((byte[]) null, 486, 5);
      assertEquals(486, toXmlGenerator0.getFormatFeatures());
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("\",|=K2QbAqT&zN27F");
      WriterConfig writerConfig0 = WriterConfig.createJ2MEDefaults();
      ISOLatin1XmlWriter iSOLatin1XmlWriter0 = new ISOLatin1XmlWriter(mockFileOutputStream0, writerConfig0, false);
      NonNsStreamWriter nonNsStreamWriter0 = new NonNsStreamWriter(iSOLatin1XmlWriter0, "", writerConfig0);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "Maximum attribute size", false);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 486, (-1283), objectMapper0, nonNsStreamWriter0);
      QName qName0 = new QName("E?HL:ALSfh\"7+r'", "", "E?HL:ALSfh\"7+r'");
      toXmlGenerator0.setNextName(qName0);
      toXmlGenerator0.writeNumber("UTF-8");
      toXmlGenerator0.close();
      assertEquals((-1283), toXmlGenerator0.getFormatFeatures());
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      WriterConfig writerConfig0 = WriterConfig.createJ2MEDefaults();
      QName qName0 = QName.valueOf("-)Zyd8GcjI");
      MockFileWriter mockFileWriter0 = new MockFileWriter("-)Zyd8GcjI");
      BufferingXmlWriter bufferingXmlWriter0 = new BufferingXmlWriter(mockFileWriter0, writerConfig0, "", false, byteArrayOutputStream0, 66);
      NonNsStreamWriter nonNsStreamWriter0 = new NonNsStreamWriter(bufferingXmlWriter0, "-)Zyd8GcjI", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator((IOContext) null, 66, 66, objectMapper0, nonNsStreamWriter0);
      toXmlGenerator0.setNextName(qName0);
      toXmlGenerator0.writeStartObject();
      toXmlGenerator0.finishWrappedValue(qName0, qName0);
//      try { 
        toXmlGenerator0.close();
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // No open start element, when trying to write end element
//         //
//         verifyException("com.fasterxml.jackson.dataformat.xml.util.StaxUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      NonNsStreamWriter nonNsStreamWriter0 = new NonNsStreamWriter((XmlWriter) null, "com.fasterxml.jackson$d?taformat.xmlaser.ToXmlGenerator", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator((IOContext) null, 8000, 1, objectMapper0, nonNsStreamWriter0);
      assertEquals(1, toXmlGenerator0.getFormatFeatures());
      
      ToXmlGenerator.Feature toXmlGenerator_Feature0 = ToXmlGenerator.Feature.WRITE_XML_DECLARATION;
      toXmlGenerator0.disable(toXmlGenerator_Feature0);
      MinimalPrettyPrinter minimalPrettyPrinter0 = new MinimalPrettyPrinter();
      toXmlGenerator0.setPrettyPrinter(minimalPrettyPrinter0);
      assertEquals(0, toXmlGenerator0.getFormatFeatures());
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      NonNsStreamWriter nonNsStreamWriter0 = new NonNsStreamWriter((XmlWriter) null, "com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator((IOContext) null, 56489, 0, objectMapper0, nonNsStreamWriter0);
      toXmlGenerator0.overrideFormatFeatures(55296, 475);
      assertEquals(0, toXmlGenerator0.getFormatFeatures());
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      WriterConfig writerConfig0 = WriterConfig.createJ2MEDefaults();
      NonNsStreamWriter nonNsStreamWriter0 = new NonNsStreamWriter((XmlWriter) null, "@B<T]JyufPP'.V'$", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator((IOContext) null, 8000, (-979), objectMapper0, nonNsStreamWriter0);
      toXmlGenerator0.overrideFormatFeatures(65280, 938);
      assertEquals((-251), toXmlGenerator0.getFormatFeatures());
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      NonNsStreamWriter nonNsStreamWriter0 = new NonNsStreamWriter((XmlWriter) null, "com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator", writerConfig0);
      JsonFactory jsonFactory0 = new JsonFactory();
      BufferRecycler bufferRecycler0 = jsonFactory0._getBufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      StreamWriterDelegate streamWriterDelegate0 = new StreamWriterDelegate(nonNsStreamWriter0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 19, 1141, objectMapper0, streamWriterDelegate0);
      toXmlGenerator0.writeStartArray();
      toXmlGenerator0.inRoot();
      assertEquals(1141, toXmlGenerator0.getFormatFeatures());
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0.CHAR_TEXT_BUFFER, true);
      ObjectMapper objectMapper0 = new ObjectMapper();
      WriterConfig writerConfig0 = WriterConfig.createJ2MEDefaults();
      AsciiXmlWriter asciiXmlWriter0 = new AsciiXmlWriter((OutputStream) null, writerConfig0, true);
      SimpleNsStreamWriter simpleNsStreamWriter0 = new SimpleNsStreamWriter(asciiXmlWriter0, "Can not write a field name, expecting a value", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 0, 614, objectMapper0, simpleNsStreamWriter0);
      int int0 = toXmlGenerator0.getFormatFeatures();
      assertEquals(614, int0);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      NonNsStreamWriter nonNsStreamWriter0 = new NonNsStreamWriter((XmlWriter) null, "com.fasterxml.jackspn.dNtaformat.xml.ser.ToXmlGenerator", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator((IOContext) null, (-3029), (-3029), objectMapper0, nonNsStreamWriter0);
      int int0 = toXmlGenerator0.getFormatFeatures();
      assertEquals((-3029), int0);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      NonNsStreamWriter nonNsStreamWriter0 = new NonNsStreamWriter((XmlWriter) null, "com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator((IOContext) null, 55351, 55351, objectMapper0, nonNsStreamWriter0);
      ToXmlGenerator.Feature toXmlGenerator_Feature0 = ToXmlGenerator.Feature.WRITE_XML_DECLARATION;
      toXmlGenerator0.writeStartArray();
      toXmlGenerator0.enable(toXmlGenerator_Feature0);
      assertEquals(55351, toXmlGenerator0.getFormatFeatures());
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      RepairingNsStreamWriter repairingNsStreamWriter0 = new RepairingNsStreamWriter((XmlWriter) null, "nn)ISg&k10wOhW(^%4", writerConfig0);
      StreamWriterDelegate streamWriterDelegate0 = new StreamWriterDelegate(repairingNsStreamWriter0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 0, 0, (ObjectCodec) null, streamWriterDelegate0);
      assertEquals(0, toXmlGenerator0.getFormatFeatures());
      
      ToXmlGenerator.Feature toXmlGenerator_Feature0 = ToXmlGenerator.Feature.WRITE_XML_DECLARATION;
      toXmlGenerator0.enable(toXmlGenerator_Feature0);
      assertEquals(1, toXmlGenerator0.getFormatFeatures());
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      NonNsStreamWriter nonNsStreamWriter0 = new NonNsStreamWriter((XmlWriter) null, "*n&($.ss", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator((IOContext) null, 55351, 55351, objectMapper0, nonNsStreamWriter0);
      ToXmlGenerator.Feature toXmlGenerator_Feature0 = ToXmlGenerator.Feature.WRITE_XML_DECLARATION;
      toXmlGenerator0.writeStartArray();
      assertEquals(55351, toXmlGenerator0.getFormatFeatures());
      
      toXmlGenerator0.disable(toXmlGenerator_Feature0);
      assertEquals(55350, toXmlGenerator0.getFormatFeatures());
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      RepairingNsStreamWriter repairingNsStreamWriter0 = new RepairingNsStreamWriter((XmlWriter) null, "com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator((IOContext) null, 51, (-2548), objectMapper0, repairingNsStreamWriter0);
      ToXmlGenerator.Feature toXmlGenerator_Feature0 = ToXmlGenerator.Feature.WRITE_XML_1_1;
      ToXmlGenerator toXmlGenerator1 = toXmlGenerator0.disable(toXmlGenerator_Feature0);
      assertEquals((-2548), toXmlGenerator1.getFormatFeatures());
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      RepairingNsStreamWriter repairingNsStreamWriter0 = new RepairingNsStreamWriter((XmlWriter) null, "nn)ISg&k10wOhW(^%4", writerConfig0);
      StreamWriterDelegate streamWriterDelegate0 = new StreamWriterDelegate(repairingNsStreamWriter0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 0, 0, (ObjectCodec) null, streamWriterDelegate0);
      ToXmlGenerator.Feature toXmlGenerator_Feature0 = ToXmlGenerator.Feature.WRITE_XML_DECLARATION;
      toXmlGenerator0.disable(toXmlGenerator_Feature0);
      assertEquals(0, toXmlGenerator0.getFormatFeatures());
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, fileSystemHandling0, false);
      FilterOutputStream filterOutputStream0 = new FilterOutputStream((OutputStream) null);
      WriterConfig writerConfig0 = WriterConfig.createJ2MEDefaults();
      AsciiXmlWriter asciiXmlWriter0 = new AsciiXmlWriter(filterOutputStream0, writerConfig0, false);
      SimpleNsStreamWriter simpleNsStreamWriter0 = new SimpleNsStreamWriter(asciiXmlWriter0, "", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, (-1225), 613, (ObjectCodec) null, simpleNsStreamWriter0);
      assertEquals(613, toXmlGenerator0.getFormatFeatures());
      
      ToXmlGenerator.Feature toXmlGenerator_Feature0 = ToXmlGenerator.Feature.WRITE_XML_DECLARATION;
      toXmlGenerator0.disable(toXmlGenerator_Feature0);
      assertEquals(612, toXmlGenerator0.getFormatFeatures());
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      WriterConfig writerConfig0 = WriterConfig.createJ2MEDefaults();
      AsciiXmlWriter asciiXmlWriter0 = new AsciiXmlWriter(byteArrayOutputStream0, writerConfig0, false);
      SimpleNsStreamWriter simpleNsStreamWriter0 = new SimpleNsStreamWriter(asciiXmlWriter0, "a:NvkdW8acR70X4", writerConfig0);
      QName qName0 = new QName((String) null, "a:NvkdW8acR70X4", "pd{p!)LfG4q.32pj|");
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator((IOContext) null, 1047, 1047, objectMapper0, simpleNsStreamWriter0);
      toXmlGenerator0.setNextName(qName0);
      toXmlGenerator0.writeStartObject();
      ToXmlGenerator.Feature toXmlGenerator_Feature0 = ToXmlGenerator.Feature.WRITE_XML_1_1;
      toXmlGenerator0.configure(toXmlGenerator_Feature0, false);
      assertEquals(1045, toXmlGenerator0.getFormatFeatures());
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0.BYTE_WRITE_CONCAT_BUFFER, true);
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      WriterConfig writerConfig0 = WriterConfig.createJ2MEDefaults();
      AsciiXmlWriter asciiXmlWriter0 = new AsciiXmlWriter((OutputStream) null, writerConfig0, true);
      SimpleNsStreamWriter simpleNsStreamWriter0 = new SimpleNsStreamWriter(asciiXmlWriter0, "JSON", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 3, 0, objectMapper0, simpleNsStreamWriter0);
      ToXmlGenerator.Feature toXmlGenerator_Feature0 = ToXmlGenerator.Feature.WRITE_XML_DECLARATION;
      toXmlGenerator0.configure(toXmlGenerator_Feature0, false);
      assertEquals(0, toXmlGenerator0.getFormatFeatures());
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      NonNsStreamWriter nonNsStreamWriter0 = new NonNsStreamWriter((XmlWriter) null, "KRL\"j4#f4+yZ|9J", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator((IOContext) null, 8000, (-745), objectMapper0, nonNsStreamWriter0);
      ToXmlGenerator.Feature toXmlGenerator_Feature0 = ToXmlGenerator.Feature.WRITE_XML_1_1;
      ToXmlGenerator toXmlGenerator1 = toXmlGenerator0.configure(toXmlGenerator_Feature0, true);
      assertEquals((-745), toXmlGenerator1.getFormatFeatures());
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0.CHAR_NAME_COPY_BUFFER, true);
      ObjectMapper objectMapper0 = new ObjectMapper();
      WriterConfig writerConfig0 = WriterConfig.createJ2MEDefaults();
      AsciiXmlWriter asciiXmlWriter0 = new AsciiXmlWriter((OutputStream) null, writerConfig0, true);
      SimpleNsStreamWriter simpleNsStreamWriter0 = new SimpleNsStreamWriter(asciiXmlWriter0, "Can not write a field name, expecting a value", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 0, 614, objectMapper0, simpleNsStreamWriter0);
      ToXmlGenerator.Feature toXmlGenerator_Feature0 = ToXmlGenerator.Feature.WRITE_XML_DECLARATION;
      toXmlGenerator0.configure(toXmlGenerator_Feature0, false);
      assertEquals(614, toXmlGenerator0.getFormatFeatures());
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      SimpleNsStreamWriter simpleNsStreamWriter0 = new SimpleNsStreamWriter((XmlWriter) null, "1.0", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator((IOContext) null, (-1806), 8232, objectMapper0, simpleNsStreamWriter0);
      ToXmlGenerator.Feature toXmlGenerator_Feature0 = ToXmlGenerator.Feature.WRITE_XML_DECLARATION;
      toXmlGenerator0.configure(toXmlGenerator_Feature0, false);
      assertEquals(8232, toXmlGenerator0.getFormatFeatures());
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      MockPrintStream mockPrintStream0 = new MockPrintStream("com.fasterxml.j_ckspn.dNtaformat.xml.ser.ToXmlGeneAator");
      ISOLatin1XmlWriter iSOLatin1XmlWriter0 = new ISOLatin1XmlWriter(mockPrintStream0, writerConfig0, true);
      NonNsStreamWriter nonNsStreamWriter0 = new NonNsStreamWriter(iSOLatin1XmlWriter0, "com.fasterxml.j_ckspn.dNtaformat.xml.ser.ToXmlGeneAator", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator((IOContext) null, 486, 486, objectMapper0, nonNsStreamWriter0);
      toXmlGenerator0.checkNextIsUnwrapped();
      assertEquals(486, toXmlGenerator0.getFormatFeatures());
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, fileSystemHandling0, false);
      FilterOutputStream filterOutputStream0 = new FilterOutputStream((OutputStream) null);
      WriterConfig writerConfig0 = WriterConfig.createJ2MEDefaults();
      AsciiXmlWriter asciiXmlWriter0 = new AsciiXmlWriter(filterOutputStream0, writerConfig0, false);
      SimpleNsStreamWriter simpleNsStreamWriter0 = new SimpleNsStreamWriter(asciiXmlWriter0, "", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, (-1225), 613, (ObjectCodec) null, simpleNsStreamWriter0);
//      try { 
        toXmlGenerator0.writeStringField("+CBRLp7N@em{^TV", "+CBRLp7N@em{^TV");
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Can not write a field name, expecting a value
//         //
//         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      WriterConfig writerConfig0 = WriterConfig.createJ2MEDefaults();
      RepairingNsStreamWriter repairingNsStreamWriter0 = new RepairingNsStreamWriter((XmlWriter) null, "ELV+\"p,>7\"=#D_U", writerConfig0);
      QName qName0 = new QName("ELV+\"p,>7\"=#D_U");
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator((IOContext) null, (-2115), (-2115), objectMapper0, repairingNsStreamWriter0);
      toXmlGenerator0.setNextName(qName0);
      char[] charArray0 = new char[4];
      // Undeclared exception!
//      try { 
        toXmlGenerator0.writeString(charArray0, 3504, 185);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.ctc.wstx.sw.BaseNsStreamWriter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      ISOLatin1XmlWriter iSOLatin1XmlWriter0 = new ISOLatin1XmlWriter(byteArrayOutputStream0, writerConfig0, true);
      RepairingNsStreamWriter repairingNsStreamWriter0 = new RepairingNsStreamWriter(iSOLatin1XmlWriter0, "ELV+\"p,>7\"=#D_U", writerConfig0);
      QName qName0 = new QName("ELV+\"p,>7\"=#D_U");
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator((IOContext) null, (-2374), (-2374), objectMapper0, repairingNsStreamWriter0);
      toXmlGenerator0.setNextName(qName0);
      char[] charArray0 = new char[4];
      // Undeclared exception!
//      try { 
        toXmlGenerator0.writeString(charArray0, (-1328), 185);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // -1328
//         //
//         verifyException("com.ctc.wstx.sw.ISOLatin1XmlWriter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      WriterConfig writerConfig0 = WriterConfig.createJ2MEDefaults();
      QName qName0 = new QName("G)Zyd8GcjI", "G)Zyd8GcjI", "G)Zyd8GcjI");
      MockFileWriter mockFileWriter0 = new MockFileWriter("G)Zyd8GcjI");
      BufferingXmlWriter bufferingXmlWriter0 = new BufferingXmlWriter(mockFileWriter0, writerConfig0, "G)Zyd8GcjI", false, byteArrayOutputStream0, 57);
      NonNsStreamWriter nonNsStreamWriter0 = new NonNsStreamWriter(bufferingXmlWriter0, "G)Zyd8GcjI", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator((IOContext) null, 57, 57, objectMapper0, nonNsStreamWriter0);
      toXmlGenerator0.setNextName(qName0);
      toXmlGenerator0.writeStartObject();
      char[] charArray0 = new char[5];
//      try { 
        toXmlGenerator0.writeString(charArray0, 562, (-31448));
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Can not write String value, expecting field name
//         //
//         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      SimpleNsStreamWriter simpleNsStreamWriter0 = new SimpleNsStreamWriter((XmlWriter) null, "3,VBJA\"k):LAj0PXEp", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator((IOContext) null, 8012, 121, objectMapper0, simpleNsStreamWriter0);
      SerializedString serializedString0 = new SerializedString("3,VBJA\"k):LAj0PXEp");
      // Undeclared exception!
//      try { 
        toXmlGenerator0.writeString((SerializableString) serializedString0);
//        fail("Expecting exception: IllegalStateException");
      
//      } catch(IllegalStateException e) {
//         //
//         // No element/attribute name specified when trying to output element
//         //
//         verifyException("com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      NonNsStreamWriter nonNsStreamWriter0 = new NonNsStreamWriter((XmlWriter) null, "com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator", writerConfig0);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, nonNsStreamWriter0, true);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 127, 1964, objectMapper0, nonNsStreamWriter0);
      // Undeclared exception!
//      try { 
        toXmlGenerator0.writeStartObject();
//        fail("Expecting exception: IllegalStateException");
      
//      } catch(IllegalStateException e) {
//         //
//         // No element/attribute name specified when trying to output element
//         //
//         verifyException("com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      WriterConfig writerConfig0 = WriterConfig.createJ2MEDefaults();
      writerConfig0.configureForRobustness();
      QName qName0 = new QName("G)Zyd8GcjI", "G)Zyd8GcjI", "G)Zyd8GcjI");
      MockFileWriter mockFileWriter0 = new MockFileWriter("G)Zyd8GcjI");
      BufferingXmlWriter bufferingXmlWriter0 = new BufferingXmlWriter(mockFileWriter0, writerConfig0, "", false, byteArrayOutputStream0, 57);
      NonNsStreamWriter nonNsStreamWriter0 = new NonNsStreamWriter(bufferingXmlWriter0, "G)Zyd8GcjI", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator((IOContext) null, 57, 57, objectMapper0, nonNsStreamWriter0);
      toXmlGenerator0.setNextName(qName0);
//      try { 
        toXmlGenerator0.writeStartObject();
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Illegal name character ')' (code 41)
//         //
//         verifyException("com.fasterxml.jackson.dataformat.xml.util.StaxUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      ISOLatin1XmlWriter iSOLatin1XmlWriter0 = new ISOLatin1XmlWriter((OutputStream) null, writerConfig0, false);
      SimpleNsStreamWriter simpleNsStreamWriter0 = new SimpleNsStreamWriter(iSOLatin1XmlWriter0, "", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 3, 576, (ObjectCodec) null, simpleNsStreamWriter0);
      // Undeclared exception!
//      try { 
        toXmlGenerator0.writeRepeatedFieldName();
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      RepairingNsStreamWriter repairingNsStreamWriter0 = new RepairingNsStreamWriter((XmlWriter) null, "x]4v6$ESkL", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator((IOContext) null, 1320, 1320, objectMapper0, repairingNsStreamWriter0);
      QName qName0 = new QName("x]4v6$ESkL", "x]4v6$ESkL");
      toXmlGenerator0.setNextName(qName0);
      char[] charArray0 = new char[2];
      // Undeclared exception!
//      try { 
        toXmlGenerator0.writeRawValue(charArray0, 1320, (-215));
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.ctc.wstx.sw.BaseNsStreamWriter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      WriterConfig writerConfig0 = WriterConfig.createJ2MEDefaults();
      AsciiXmlWriter asciiXmlWriter0 = new AsciiXmlWriter((OutputStream) null, writerConfig0, true);
      NonNsStreamWriter nonNsStreamWriter0 = new NonNsStreamWriter(asciiXmlWriter0, "com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator", writerConfig0);
      StreamWriterDelegate streamWriterDelegate0 = new StreamWriterDelegate(nonNsStreamWriter0);
      XMLStreamWriter2 xMLStreamWriter2_0 = Stax2WriterAdapter.wrapIfNecessary(streamWriterDelegate0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator((IOContext) null, (-4005), 8000, objectMapper0, xMLStreamWriter2_0);
      // Undeclared exception!
//      try { 
        toXmlGenerator0.writeRaw((char[]) null, 2, (-169));
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      NonNsStreamWriter nonNsStreamWriter0 = new NonNsStreamWriter((XmlWriter) null, "com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator((IOContext) null, 8000, 8000, objectMapper0, nonNsStreamWriter0);
      char[] charArray0 = new char[11];
      // Undeclared exception!
//      try { 
        toXmlGenerator0.writeRaw(charArray0, 8000, 55296);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.ctc.wstx.sw.BaseStreamWriter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      MockPrintStream mockPrintStream0 = new MockPrintStream("e`E<H7Y2xp##");
      StringWriter stringWriter0 = new StringWriter();
      BufferingXmlWriter bufferingXmlWriter0 = new BufferingXmlWriter(stringWriter0, writerConfig0, "mOhcp>$=7*F3qQjCD", true, mockPrintStream0, 8000);
      NonNsStreamWriter nonNsStreamWriter0 = new NonNsStreamWriter(bufferingXmlWriter0, "mOhcp>$=7*F3qQjCD", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator((IOContext) null, 2093, 4420, objectMapper0, nonNsStreamWriter0);
      char[] charArray0 = new char[4];
      // Undeclared exception!
//      try { 
        toXmlGenerator0.writeRaw(charArray0, 1313, 1313);
//        fail("Expecting exception: IndexOutOfBoundsException");
      
//      } catch(IndexOutOfBoundsException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.io.StringWriter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      MockFile mockFile0 = new MockFile("com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0);
      ISOLatin1XmlWriter iSOLatin1XmlWriter0 = new ISOLatin1XmlWriter(mockFileOutputStream0, writerConfig0, false);
      NonNsStreamWriter nonNsStreamWriter0 = new NonNsStreamWriter(iSOLatin1XmlWriter0, "com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator((IOContext) null, 4, 641, objectMapper0, nonNsStreamWriter0);
      char[] charArray0 = new char[6];
      // Undeclared exception!
//      try { 
        toXmlGenerator0.writeRaw(charArray0, 95, 4);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(1931);
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      ISOLatin1XmlWriter iSOLatin1XmlWriter0 = new ISOLatin1XmlWriter(byteArrayBuilder0, writerConfig0, false);
      NonNsStreamWriter nonNsStreamWriter0 = new NonNsStreamWriter(iSOLatin1XmlWriter0, "x}Yy/_r7Fizt%OT", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator((IOContext) null, (-23), 1817, objectMapper0, nonNsStreamWriter0);
      // Undeclared exception!
//      try { 
        toXmlGenerator0.writeRaw("eu", 1, 1993);
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      WriterConfig writerConfig0 = WriterConfig.createJ2MEDefaults();
      MockFileWriter mockFileWriter0 = new MockFileWriter("G)Zyd8GcjI");
      BufferingXmlWriter bufferingXmlWriter0 = new BufferingXmlWriter(mockFileWriter0, writerConfig0, "G)Zyd8GcjI", true, byteArrayOutputStream0, 57);
      NonNsStreamWriter nonNsStreamWriter0 = new NonNsStreamWriter(bufferingXmlWriter0, "G)Zyd8GcjI", writerConfig0);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, (-46), 98, objectMapper0, nonNsStreamWriter0);
      // Undeclared exception!
      toXmlGenerator0.writeRaw("NUH[|xol?q", 2147483600, 2147483600);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      WriterConfig writerConfig0 = WriterConfig.createJ2MEDefaults();
      MockFileWriter mockFileWriter0 = new MockFileWriter("G)Zyd8GcjI");
      BufferingXmlWriter bufferingXmlWriter0 = new BufferingXmlWriter(mockFileWriter0, writerConfig0, "G)Zyd8GcjI", false, byteArrayOutputStream0, 57);
      NonNsStreamWriter nonNsStreamWriter0 = new NonNsStreamWriter(bufferingXmlWriter0, "G)Zyd8GcjI", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator((IOContext) null, 57, 57, objectMapper0, nonNsStreamWriter0);
      // Undeclared exception!
//      try { 
        toXmlGenerator0.writeRaw((String) null, 4178, 4);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.ctc.wstx.sw.BufferingXmlWriter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      SimpleNsStreamWriter simpleNsStreamWriter0 = new SimpleNsStreamWriter((XmlWriter) null, "", writerConfig0);
      StreamWriterDelegate streamWriterDelegate0 = new StreamWriterDelegate(simpleNsStreamWriter0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator((IOContext) null, 1336, 2552, objectMapper0, streamWriterDelegate0);
      ToXmlGenerator.Feature toXmlGenerator_Feature0 = ToXmlGenerator.Feature.WRITE_XML_1_1;
      Stax2WriterAdapter stax2WriterAdapter0 = (Stax2WriterAdapter)toXmlGenerator0._xmlWriter;
      ToXmlGenerator toXmlGenerator1 = new ToXmlGenerator((IOContext) null, 1336, (-2038), objectMapper0, stax2WriterAdapter0);
      ToXmlGenerator toXmlGenerator2 = toXmlGenerator1.enable(toXmlGenerator_Feature0);
      // Undeclared exception!
//      try { 
        toXmlGenerator2.writeRaw("");
//        fail("Expecting exception: UnsupportedOperationException");
      
//      } catch(UnsupportedOperationException e) {
//         //
//         // Not implemented
//         //
//         verifyException("org.codehaus.stax2.ri.Stax2WriterAdapter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      NonNsStreamWriter nonNsStreamWriter0 = new NonNsStreamWriter((XmlWriter) null, "com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator((IOContext) null, 8000, 1817, objectMapper0, nonNsStreamWriter0);
      // Undeclared exception!
//      try { 
        toXmlGenerator0.writeRaw("com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.ctc.wstx.sw.BaseStreamWriter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      NonNsStreamWriter nonNsStreamWriter0 = new NonNsStreamWriter((XmlWriter) null, "H!{p]INzKp273", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator((IOContext) null, 8000, 1, objectMapper0, nonNsStreamWriter0);
      // Undeclared exception!
//      try { 
        toXmlGenerator0.writeRaw('Q');
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.ctc.wstx.sw.BaseStreamWriter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      RepairingNsStreamWriter repairingNsStreamWriter0 = new RepairingNsStreamWriter((XmlWriter) null, "6EvU", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator((IOContext) null, (-1150), (-1150), objectMapper0, repairingNsStreamWriter0);
      QName qName0 = new QName("", "JT/j5}-C", "6EvU");
      toXmlGenerator0.setNextName(qName0);
      // Undeclared exception!
//      try { 
        toXmlGenerator0.writeNumber((BigDecimal) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.ctc.wstx.sw.BaseNsStreamWriter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      WriterConfig writerConfig0 = WriterConfig.createJ2MEDefaults();
      SimpleNsStreamWriter simpleNsStreamWriter0 = new SimpleNsStreamWriter((XmlWriter) null, "com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator((IOContext) null, 192, 8023, objectMapper0, simpleNsStreamWriter0);
      QName qName0 = new QName("com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator", "oaIqu|", "com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator");
      toXmlGenerator0.setNextName(qName0);
//      try { 
        toXmlGenerator0.writeNumber((BigDecimal) null);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Unbound namespace URI 'com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator'
//         //
//         verifyException("com.fasterxml.jackson.dataformat.xml.util.StaxUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      RepairingNsStreamWriter repairingNsStreamWriter0 = new RepairingNsStreamWriter((XmlWriter) null, "com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator", writerConfig0);
      QName qName0 = new QName("com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator", "{CNTpNL-^c", "com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator");
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator((IOContext) null, (-713), (-4098), objectMapper0, repairingNsStreamWriter0);
      toXmlGenerator0.setNextName(qName0);
      // Undeclared exception!
//      try { 
        toXmlGenerator0.writeNumber("{CNTpNL-^c");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.ctc.wstx.sw.BaseNsStreamWriter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(fileDescriptor0);
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      ISOLatin1XmlWriter iSOLatin1XmlWriter0 = new ISOLatin1XmlWriter(mockFileOutputStream0, writerConfig0, true);
      NonNsStreamWriter nonNsStreamWriter0 = new NonNsStreamWriter(iSOLatin1XmlWriter0, "xKJ*#,N.brrr+cD6", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator((IOContext) null, 486, 8023, (ObjectCodec) null, nonNsStreamWriter0);
      QName qName0 = new QName("com.ctc.wstx.io.WstxInputSource", "com.ctc.wstx.io.WstxInputSource", "xKJ*#,N.brrr+cD6");
      toXmlGenerator0.setNextName(qName0);
      toXmlGenerator0.writeNumber("com.ctc.wstx.io.WstxInputSource");
//      try { 
        toXmlGenerator0.writeNumber((double) 56319);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Trying to output second root, <com.ctc.wstx.io.WstxInputSource>
//         //
//         verifyException("com.fasterxml.jackson.dataformat.xml.util.StaxUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      MockPrintStream mockPrintStream0 = new MockPrintStream("com.fasterxml.j_ckspn.dNtaformat.xml.ser.ToXmlGeneAator");
      ISOLatin1XmlWriter iSOLatin1XmlWriter0 = new ISOLatin1XmlWriter(mockPrintStream0, writerConfig0, true);
      NonNsStreamWriter nonNsStreamWriter0 = new NonNsStreamWriter(iSOLatin1XmlWriter0, "com.fasterxml.j_ckspn.dNtaformat.xml.ser.ToXmlGeneAator", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator((IOContext) null, 486, 486, objectMapper0, nonNsStreamWriter0);
      QName qName0 = new QName("com.fasterxml.j_ckspn.dNtaformat.xml.ser.ToXmlGeneAator", "com.ctc.wstx.io.WstxInputSource", "com.fasterxml.j_ckspn.dNtaformat.xml.ser.ToXmlGeneAator");
      toXmlGenerator0.setNextName(qName0);
      toXmlGenerator0.writeNumber("com.fasterxml.j_ckspn.dNtaformat.xml.ser.ToXmlGeneAator");
//      try { 
        toXmlGenerator0.writeNull();
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Trying to output second root, <com.ctc.wstx.io.WstxInputSource>
//         //
//         verifyException("com.fasterxml.jackson.dataformat.xml.util.StaxUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      AsciiXmlWriter asciiXmlWriter0 = new AsciiXmlWriter(pipedOutputStream0, writerConfig0, true);
      SimpleNsStreamWriter simpleNsStreamWriter0 = new SimpleNsStreamWriter(asciiXmlWriter0, "[Visibility: getter=%s,isGetter=%s,setter=%s,creator=%s,field=%s]", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator((IOContext) null, 353, 3737, objectMapper0, simpleNsStreamWriter0);
      // Undeclared exception!
//      try { 
        toXmlGenerator0.writeFieldName((SerializableString) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      StreamWriter2Delegate streamWriter2Delegate0 = new StreamWriter2Delegate((XMLStreamWriter2) null);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator((IOContext) null, (-731), (-731), objectMapper0, streamWriter2Delegate0);
      QName qName0 = QName.valueOf("");
      toXmlGenerator0.setNextName(qName0);
      byte[] byteArray0 = new byte[2];
      // Undeclared exception!
//      try { 
        toXmlGenerator0.writeBinary((Base64Variant) null, byteArray0, 56547, (-731));
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.codehaus.stax2.util.StreamWriterDelegate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      NonNsStreamWriter nonNsStreamWriter0 = new NonNsStreamWriter((XmlWriter) null, "", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator((IOContext) null, (-943), 7, objectMapper0, nonNsStreamWriter0);
      byte[] byteArray0 = new byte[4];
      // Undeclared exception!
//      try { 
        toXmlGenerator0.writeBinary((Base64Variant) null, byteArray0, 130, 624);
//        fail("Expecting exception: IllegalStateException");
      
//      } catch(IllegalStateException e) {
//         //
//         // No element/attribute name specified when trying to output element
//         //
//         verifyException("com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      WriterConfig writerConfig0 = WriterConfig.createJ2MEDefaults();
      SimpleNsStreamWriter simpleNsStreamWriter0 = new SimpleNsStreamWriter((XmlWriter) null, "O", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator((IOContext) null, (-1589), 1598, objectMapper0, simpleNsStreamWriter0);
      QName qName0 = new QName("writeRawValue", "");
//      try { 
        toXmlGenerator0.startWrappedValue(qName0, qName0);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Unbound namespace URI 'writeRawValue'
//         //
//         verifyException("com.fasterxml.jackson.dataformat.xml.util.StaxUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      NonNsStreamWriter nonNsStreamWriter0 = new NonNsStreamWriter((XmlWriter) null, "com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator((IOContext) null, 8000, 1817, objectMapper0, nonNsStreamWriter0);
      // Undeclared exception!
//      try { 
        toXmlGenerator0.initGenerator();
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.ctc.wstx.sw.BaseStreamWriter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      AsciiXmlWriter asciiXmlWriter0 = new AsciiXmlWriter(byteArrayOutputStream0, writerConfig0, false);
      SimpleNsStreamWriter simpleNsStreamWriter0 = new SimpleNsStreamWriter(asciiXmlWriter0, "`Juix]95", writerConfig0);
      char[] charArray0 = new char[4];
      asciiXmlWriter0.writeRawAscii(charArray0, 609, (-1629));
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator((IOContext) null, 1047, 1047, objectMapper0, simpleNsStreamWriter0);
      // Undeclared exception!
//      try { 
        toXmlGenerator0.initGenerator();
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // -1629
//         //
//         verifyException("com.ctc.wstx.sw.EncodingXmlWriter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0.BYTE_WRITE_ENCODING_BUFFER, true);
      ObjectMapper objectMapper0 = new ObjectMapper();
      WriterConfig writerConfig0 = WriterConfig.createJ2MEDefaults();
      AsciiXmlWriter asciiXmlWriter0 = new AsciiXmlWriter((OutputStream) null, writerConfig0, true);
      SimpleNsStreamWriter simpleNsStreamWriter0 = new SimpleNsStreamWriter(asciiXmlWriter0, "JSON", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 3, 1351, objectMapper0, simpleNsStreamWriter0);
      // Undeclared exception!
//      try { 
        toXmlGenerator0.handleMissingName();
//        fail("Expecting exception: IllegalStateException");
      
//      } catch(IllegalStateException e) {
//         //
//         // No element/attribute name specified when trying to output element
//         //
//         verifyException("com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      WriterConfig writerConfig0 = WriterConfig.createJ2MEDefaults();
      AsciiXmlWriter asciiXmlWriter0 = new AsciiXmlWriter((OutputStream) null, writerConfig0, true);
      SimpleNsStreamWriter simpleNsStreamWriter0 = new SimpleNsStreamWriter(asciiXmlWriter0, "com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator$Feature", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator((IOContext) null, (-1), 3737, objectMapper0, simpleNsStreamWriter0);
      // Undeclared exception!
//      try { 
        toXmlGenerator0.flush();
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.ctc.wstx.sw.EncodingXmlWriter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      AsciiXmlWriter asciiXmlWriter0 = new AsciiXmlWriter(pipedOutputStream0, writerConfig0, true);
      SimpleNsStreamWriter simpleNsStreamWriter0 = new SimpleNsStreamWriter(asciiXmlWriter0, "[Visibility: getter=%s,isGetter=%s,setter=%s,creator=%s,field=%s]", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator((IOContext) null, 353, 3737, objectMapper0, simpleNsStreamWriter0);
      QName qName0 = new QName("[Visibility: getter=%s,isGetter=%s,setter=%s,creator=%s,field=%s]", "@7?&_o`^[9iUR8#/");
//      try { 
        toXmlGenerator0.finishWrappedValue(qName0, qName0);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // No open start element, when trying to write end element
//         //
//         verifyException("com.fasterxml.jackson.dataformat.xml.util.StaxUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      NonNsStreamWriter nonNsStreamWriter0 = new NonNsStreamWriter((XmlWriter) null, "com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator", writerConfig0);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0.CHAR_TEXT_BUFFER, true);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 151, 151, objectMapper0, nonNsStreamWriter0);
      // Undeclared exception!
//      try { 
        toXmlGenerator0.enable((ToXmlGenerator.Feature) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      NonNsStreamWriter nonNsStreamWriter0 = new NonNsStreamWriter((XmlWriter) null, "com.fasterxml.jackson$d?taormat.xmlser.ToXlGenerator", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator((IOContext) null, 8000, (-8), objectMapper0, nonNsStreamWriter0);
      // Undeclared exception!
//      try { 
        toXmlGenerator0.disable((ToXmlGenerator.Feature) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0.BYTE_WRITE_CONCAT_BUFFER, true);
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      Class<Object> class0 = Object.class;
      ObjectReader objectReader0 = objectMapper0.readerWithView(class0);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("JSON");
      WriterConfig writerConfig0 = WriterConfig.createJ2MEDefaults();
      AsciiXmlWriter asciiXmlWriter0 = new AsciiXmlWriter(mockFileOutputStream0, writerConfig0, true);
      RepairingNsStreamWriter repairingNsStreamWriter0 = new RepairingNsStreamWriter(asciiXmlWriter0, "JSON", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, (-1344), 3, objectReader0, repairingNsStreamWriter0);
//      try { 
        toXmlGenerator0._reportUnimplementedStax2("JSON");
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Underlying Stax XMLStreamWriter (of type com.ctc.wstx.sw.RepairingNsStreamWriter) does not implement Stax2 API natively and is missing method 'JSON': this breaks functionality such as indentation that relies on it. You need to upgrade to using compliant Stax implementation like Woodstox or Aalto
//         //
//         verifyException("com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      ObjectMapper objectMapper0 = new ObjectMapper((JsonFactory) null);
      StreamWriterDelegate streamWriterDelegate0 = new StreamWriterDelegate((XMLStreamWriter) null);
      ToXmlGenerator toXmlGenerator0 = null;
//      try {
        toXmlGenerator0 = new ToXmlGenerator(iOContext0, 2, (-1), objectMapper0, streamWriterDelegate0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.codehaus.stax2.util.StreamWriterDelegate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      RepairingNsStreamWriter repairingNsStreamWriter0 = new RepairingNsStreamWriter((XmlWriter) null, ".0", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator((IOContext) null, (-1), (-1), objectMapper0, repairingNsStreamWriter0);
      QName qName0 = new QName(".0", ".0", "");
      toXmlGenerator0.setNextName(qName0);
      byte[] byteArray0 = new byte[2];
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      // Undeclared exception!
//      try { 
        toXmlGenerator0.writeNumber(bigInteger0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.ctc.wstx.sw.BaseNsStreamWriter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      NonNsStreamWriter nonNsStreamWriter0 = new NonNsStreamWriter((XmlWriter) null, "com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator((IOContext) null, 8000, 8000, objectMapper0, nonNsStreamWriter0);
      // Undeclared exception!
//      try { 
        toXmlGenerator0.writeNull();
//        fail("Expecting exception: IllegalStateException");
      
//      } catch(IllegalStateException e) {
//         //
//         // No element/attribute name specified when trying to output element
//         //
//         verifyException("com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      AsciiXmlWriter asciiXmlWriter0 = new AsciiXmlWriter(pipedOutputStream0, writerConfig0, false);
      NonNsStreamWriter nonNsStreamWriter0 = new NonNsStreamWriter(asciiXmlWriter0, "", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator((IOContext) null, (-1947), (-1947), objectMapper0, nonNsStreamWriter0);
      toXmlGenerator0.writeRaw("");
//      try { 
        toXmlGenerator0.initGenerator();
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Can not output XML declaration, after other output has already been done.
//         //
//         verifyException("com.fasterxml.jackson.dataformat.xml.util.StaxUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      MockPrintStream mockPrintStream0 = new MockPrintStream("com.fasterxml.jackspn.dNtaformat.xml.ser.ToXmlGenerator");
      ISOLatin1XmlWriter iSOLatin1XmlWriter0 = new ISOLatin1XmlWriter(mockPrintStream0, writerConfig0, false);
      NonNsStreamWriter nonNsStreamWriter0 = new NonNsStreamWriter(iSOLatin1XmlWriter0, "com.fasterxml.jackspn.dNtaformat.xml.ser.ToXmlGenerator", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator((IOContext) null, 515, 515, objectMapper0, nonNsStreamWriter0);
      QName qName0 = new QName("}?", "S!ejh");
      toXmlGenerator0.startWrappedValue(qName0, qName0);
      toXmlGenerator0.writeString("}?");
      assertEquals(515, toXmlGenerator0.getFormatFeatures());
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      MockPrintStream mockPrintStream0 = new MockPrintStream("com.fasterxml.jackspn.dNtaformat.xml.ser.ToXmlGenerator");
      ISOLatin1XmlWriter iSOLatin1XmlWriter0 = new ISOLatin1XmlWriter(mockPrintStream0, writerConfig0, false);
      NonNsStreamWriter nonNsStreamWriter0 = new NonNsStreamWriter(iSOLatin1XmlWriter0, "com.fasterxml.jackspn.dNtaformat.xml.ser.ToXmlGenerator", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator((IOContext) null, 512, 512, objectMapper0, nonNsStreamWriter0);
      toXmlGenerator0._nextIsUnwrapped = true;
      QName qName0 = new QName("g:", "com.ctc.wstx.io.WstxInputSource", "com.fasterxml.jackspn.dNtaformat.xml.ser.ToXmlGenerator");
      toXmlGenerator0.setNextName(qName0);
//      try { 
        toXmlGenerator0.writeString("com.fasterxml.jackspn.dNtaformat.xml.ser.ToXmlGenerator");
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Trying to output non-whitespace characters outside main element tree (in prolog or epilog)
//         //
//         verifyException("com.fasterxml.jackson.dataformat.xml.util.StaxUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      MockPrintStream mockPrintStream0 = new MockPrintStream("com.fasterxml.j_ckspn.dNtaformat.xml.ser.ToXmlGeneAator");
      BufferingXmlWriter bufferingXmlWriter0 = new BufferingXmlWriter((Writer) null, writerConfig0, "9[7", true, mockPrintStream0, 2304);
      RepairingNsStreamWriter repairingNsStreamWriter0 = new RepairingNsStreamWriter(bufferingXmlWriter0, "9[7", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator((IOContext) null, 1320, 0, objectMapper0, repairingNsStreamWriter0);
      QName qName0 = new QName("write number", "write number", "");
      toXmlGenerator0.setNextName(qName0);
      toXmlGenerator0.setNextIsAttribute(true);
//      try { 
        toXmlGenerator0.writeString("9[7");
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Trying to write an attribute when there is no open start element.
//         //
//         verifyException("com.fasterxml.jackson.dataformat.xml.util.StaxUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      RepairingNsStreamWriter repairingNsStreamWriter0 = new RepairingNsStreamWriter((XmlWriter) null, "X", writerConfig0);
      QName qName0 = new QName("X", "%tF4z;`QBV>");
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator((IOContext) null, 5, (-2843), objectMapper0, repairingNsStreamWriter0);
      toXmlGenerator0.startWrappedValue((QName) null, qName0);
      // Undeclared exception!
//      try { 
        toXmlGenerator0.writeString((String) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.ctc.wstx.sw.BaseNsStreamWriter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      WriterConfig writerConfig0 = WriterConfig.createJ2MEDefaults();
      QName qName0 = new QName("G)Zyd8GcjI", "G)Zyd8GcjI", "G)Zyd8GcjI");
      MockFileWriter mockFileWriter0 = new MockFileWriter("G)Zyd8GcjI");
      BufferingXmlWriter bufferingXmlWriter0 = new BufferingXmlWriter(mockFileWriter0, writerConfig0, "G)Zyd8GcjI", false, byteArrayOutputStream0, 57);
      NonNsStreamWriter nonNsStreamWriter0 = new NonNsStreamWriter(bufferingXmlWriter0, "G)Zyd8GcjI", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator((IOContext) null, 57, 57, objectMapper0, nonNsStreamWriter0);
      toXmlGenerator0.setNextName(qName0);
      toXmlGenerator0.writeStartObject();
      toXmlGenerator0._handleEndObject();
      assertEquals(57, toXmlGenerator0.getFormatFeatures());
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      QName qName0 = new QName("com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator", "com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator", "com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator");
      RepairingNsStreamWriter repairingNsStreamWriter0 = new RepairingNsStreamWriter((XmlWriter) null, "com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator", writerConfig0);
      StreamWriter2Delegate streamWriter2Delegate0 = new StreamWriter2Delegate(repairingNsStreamWriter0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator((IOContext) null, 1296, 191, objectMapper0, streamWriter2Delegate0);
      toXmlGenerator0.setNextName(qName0);
      // Undeclared exception!
//      try { 
        toXmlGenerator0._handleStartObject();
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.ctc.wstx.sw.BaseNsStreamWriter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      WriterConfig writerConfig0 = WriterConfig.createJ2MEDefaults();
      SimpleNsStreamWriter simpleNsStreamWriter0 = new SimpleNsStreamWriter((XmlWriter) null, "H!{p]INzKp273", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator((IOContext) null, 32, 4, objectMapper0, simpleNsStreamWriter0);
//      try { 
        toXmlGenerator0.writeFieldName("H!{p]INzKp273");
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Can not write a field name, expecting a value
//         //
//         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      ToXmlGenerator.Feature toXmlGenerator_Feature0 = ToXmlGenerator.Feature.WRITE_XML_DECLARATION;
      boolean boolean0 = toXmlGenerator_Feature0.enabledIn(55296);
      assertEquals(1, toXmlGenerator_Feature0.getMask());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      ToXmlGenerator.Feature toXmlGenerator_Feature0 = ToXmlGenerator.Feature.WRITE_XML_1_1;
      boolean boolean0 = toXmlGenerator_Feature0.enabledIn(378);
      assertEquals(2, toXmlGenerator_Feature0.getMask());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      NonNsStreamWriter nonNsStreamWriter0 = new NonNsStreamWriter((XmlWriter) null, "H!{p]INzKp273", writerConfig0);
      StreamWriterDelegate streamWriterDelegate0 = new StreamWriterDelegate(nonNsStreamWriter0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator((IOContext) null, (-1187), 1434, objectMapper0, streamWriterDelegate0);
      MinimalPrettyPrinter minimalPrettyPrinter0 = new MinimalPrettyPrinter("H!{p]INzKp273");
//      try { 
        minimalPrettyPrinter0.writeObjectFieldValueSeparator(toXmlGenerator0);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Underlying Stax XMLStreamWriter (of type org.codehaus.stax2.util.StreamWriterDelegate) does not implement Stax2 API natively and is missing method 'writeRaw': this breaks functionality such as indentation that relies on it. You need to upgrade to using compliant Stax implementation like Woodstox or Aalto
//         //
//         verifyException("com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      MockPrintStream mockPrintStream0 = new MockPrintStream("com.fasterxml.j_ckspn.dNtaformat.xml.ser.ToXmlGeneAator");
      ISOLatin1XmlWriter iSOLatin1XmlWriter0 = new ISOLatin1XmlWriter(mockPrintStream0, writerConfig0, true);
      NonNsStreamWriter nonNsStreamWriter0 = new NonNsStreamWriter(iSOLatin1XmlWriter0, "com.fasterxml.j_ckspn.dNtaformat.xml.ser.ToXmlGeneAator", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator((IOContext) null, 486, 486, objectMapper0, nonNsStreamWriter0);
      // Undeclared exception!
//      try { 
        toXmlGenerator0.writeNumber("com.fasterxml.j_ckspn.dNtaformat.xml.ser.ToXmlGeneAator");
//        fail("Expecting exception: IllegalStateException");
      
//      } catch(IllegalStateException e) {
//         //
//         // No element/attribute name specified when trying to output element
//         //
//         verifyException("com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      ToXmlGenerator.Feature toXmlGenerator_Feature0 = ToXmlGenerator.Feature.WRITE_XML_DECLARATION;
      int int0 = toXmlGenerator_Feature0.getMask();
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory((DeserializerFactoryConfig) null);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0, defaultSerializerProvider_Impl0, defaultDeserializationContext_Impl0);
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      AsciiXmlWriter asciiXmlWriter0 = new AsciiXmlWriter((OutputStream) null, writerConfig0, false);
      NonNsStreamWriter nonNsStreamWriter0 = new NonNsStreamWriter(asciiXmlWriter0, "JSON", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator((IOContext) null, (-1336), 540, objectMapper0, nonNsStreamWriter0);
      byte[] byteArray0 = new byte[8];
      // Undeclared exception!
//      try { 
        toXmlGenerator0.writeUTF8String(byteArray0, 3718, (-1336));
//        fail("Expecting exception: UnsupportedOperationException");
      
//      } catch(UnsupportedOperationException e) {
//         //
//         // Operation not supported by generator of type com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator
//         //
//         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("\",|=K2QbAqT&zN27F");
      WriterConfig writerConfig0 = WriterConfig.createJ2MEDefaults();
      ISOLatin1XmlWriter iSOLatin1XmlWriter0 = new ISOLatin1XmlWriter(mockFileOutputStream0, writerConfig0, false);
      NonNsStreamWriter nonNsStreamWriter0 = new NonNsStreamWriter(iSOLatin1XmlWriter0, "", writerConfig0);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "Maximum attribute size", false);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 486, (-1283), objectMapper0, nonNsStreamWriter0);
//      try { 
        toXmlGenerator0.close();
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Trying to write END_DOCUMENT when document has no root (ie. trying to output empty document).
//         //
//         verifyException("com.fasterxml.jackson.dataformat.xml.util.StaxUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, fileSystemHandling0, false);
      WriterConfig writerConfig0 = WriterConfig.createJ2MEDefaults();
      SimpleNsStreamWriter simpleNsStreamWriter0 = new SimpleNsStreamWriter((XmlWriter) null, "", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, (-1225), 613, (ObjectCodec) null, simpleNsStreamWriter0);
//      try { 
        toXmlGenerator0.close();
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Trying to write END_DOCUMENT when document has no root (ie. trying to output empty document).
//         //
//         verifyException("com.fasterxml.jackson.dataformat.xml.util.StaxUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      WriterConfig writerConfig0 = WriterConfig.createJ2MEDefaults();
      QName qName0 = QName.valueOf("-)Zyd8GcjI");
      MockFileWriter mockFileWriter0 = new MockFileWriter("-)Zyd8GcjI");
      BufferingXmlWriter bufferingXmlWriter0 = new BufferingXmlWriter(mockFileWriter0, writerConfig0, "", false, byteArrayOutputStream0, 66);
      NonNsStreamWriter nonNsStreamWriter0 = new NonNsStreamWriter(bufferingXmlWriter0, "-)Zyd8GcjI", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator((IOContext) null, 66, 66, objectMapper0, nonNsStreamWriter0);
      toXmlGenerator0.setNextName(qName0);
      toXmlGenerator0.writeStartObject();
      // Undeclared exception!
//      try { 
        toXmlGenerator0.close();
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      WriterConfig writerConfig0 = WriterConfig.createJ2MEDefaults();
      SimpleNsStreamWriter simpleNsStreamWriter0 = new SimpleNsStreamWriter((XmlWriter) null, "H!{p]INzKp273", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator((IOContext) null, 32, 4, objectMapper0, simpleNsStreamWriter0);
      // Undeclared exception!
//      try { 
        toXmlGenerator0.close();
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      MockFile mockFile0 = new MockFile("com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0);
      ISOLatin1XmlWriter iSOLatin1XmlWriter0 = new ISOLatin1XmlWriter(mockFileOutputStream0, writerConfig0, false);
      NonNsStreamWriter nonNsStreamWriter0 = new NonNsStreamWriter(iSOLatin1XmlWriter0, "com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator((IOContext) null, 4, 641, objectMapper0, nonNsStreamWriter0);
      toXmlGenerator0.flush();
      assertEquals(641, toXmlGenerator0.getFormatFeatures());
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      NonNsStreamWriter nonNsStreamWriter0 = new NonNsStreamWriter((XmlWriter) null, "com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator((IOContext) null, 8000, 1817, objectMapper0, nonNsStreamWriter0);
      toXmlGenerator0.flush();
      assertEquals(1817, toXmlGenerator0.getFormatFeatures());
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      WriterConfig writerConfig0 = WriterConfig.createJ2MEDefaults();
      QName qName0 = new QName("G)Zyd8GcjI", "G)Zyd8GcjI", "G)Zyd8GcjI");
      MockFileWriter mockFileWriter0 = new MockFileWriter("G)Zyd8GcjI");
      BufferingXmlWriter bufferingXmlWriter0 = new BufferingXmlWriter(mockFileWriter0, writerConfig0, "", false, byteArrayOutputStream0, 57);
      NonNsStreamWriter nonNsStreamWriter0 = new NonNsStreamWriter(bufferingXmlWriter0, "G)Zyd8GcjI", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator((IOContext) null, 57, 57, objectMapper0, nonNsStreamWriter0);
      toXmlGenerator0.setNextName(qName0);
      toXmlGenerator0.writeStartObject();
      BigInteger bigInteger0 = BigInteger.ZERO;
//      try { 
        toXmlGenerator0.writeNumber(bigInteger0);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Can not write number, expecting field name
//         //
//         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      WriterConfig writerConfig0 = WriterConfig.createJ2MEDefaults();
      RepairingNsStreamWriter repairingNsStreamWriter0 = new RepairingNsStreamWriter((XmlWriter) null, "|uHi", writerConfig0);
      QName qName0 = QName.valueOf("|uHi");
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator((IOContext) null, 66, 66, objectMapper0, repairingNsStreamWriter0);
      toXmlGenerator0.setNextName(qName0);
      toXmlGenerator0.useDefaultPrettyPrinter();
      BigInteger bigInteger0 = BigInteger.ZERO;
      // Undeclared exception!
//      try { 
        toXmlGenerator0.writeNumber(bigInteger0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.ctc.wstx.sw.BaseStreamWriter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      MockPrintStream mockPrintStream0 = new MockPrintStream("com.fasterxml.j_ckspn.dNtaformat.xml.ser.ToXmlGeneAator");
      ISOLatin1XmlWriter iSOLatin1XmlWriter0 = new ISOLatin1XmlWriter(mockPrintStream0, writerConfig0, true);
      NonNsStreamWriter nonNsStreamWriter0 = new NonNsStreamWriter(iSOLatin1XmlWriter0, "com.fasterxml.j_ckspn.dNtaformat.xml.ser.ToXmlGeneAator", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator((IOContext) null, 486, 486, objectMapper0, nonNsStreamWriter0);
      toXmlGenerator0._nextIsUnwrapped = true;
      QName qName0 = new QName("com.fasterxml.j_ckspn.dNtaformat.xml.ser.ToXmlGeneAator", "com.fasterxml.j_ckspn.dNtaformat.xml.ser.ToXmlGeneAator", " in xml declaration; waited ' or \" to start a value for pseudo-attribute '");
      toXmlGenerator0.setNextName(qName0);
      byte[] byteArray0 = new byte[2];
      BigInteger bigInteger0 = new BigInteger(byteArray0);
//      try { 
        toXmlGenerator0.writeNumber(bigInteger0);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Trying to output non-whitespace characters outside main element tree (in prolog or epilog)
//         //
//         verifyException("com.fasterxml.jackson.dataformat.xml.util.StaxUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      RepairingNsStreamWriter repairingNsStreamWriter0 = new RepairingNsStreamWriter((XmlWriter) null, "x]4v6$EwS6L", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator((IOContext) null, 1320, 1320, objectMapper0, repairingNsStreamWriter0);
      QName qName0 = new QName("x]4v6$EwS6L", "x]4v6$EwS6L", "x]4v6$EwS6L");
      toXmlGenerator0.setNextName(qName0);
      toXmlGenerator0.setNextIsAttribute(true);
      BigInteger bigInteger0 = BigInteger.ZERO;
      // Undeclared exception!
//      try { 
        toXmlGenerator0.writeNumber(bigInteger0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.ctc.wstx.sw.BaseNsStreamWriter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonFactory jsonFactory0 = new JsonFactory();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0, defaultSerializerProvider_Impl0, defaultDeserializationContext_Impl0);
      StringWriter stringWriter0 = new StringWriter();
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder((BufferRecycler) null, 3);
      BufferingXmlWriter bufferingXmlWriter0 = new BufferingXmlWriter(stringWriter0, writerConfig0, "EJzFDTcaFxP|%<", false, byteArrayBuilder0, 0);
      SimpleNsStreamWriter simpleNsStreamWriter0 = new SimpleNsStreamWriter(bufferingXmlWriter0, "EJzFDTcaFxP|%<", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, (-111), 65534, objectMapper0, simpleNsStreamWriter0);
      BigInteger bigInteger0 = BigInteger.TEN;
      // Undeclared exception!
//      try { 
        toXmlGenerator0.writeNumber(bigInteger0);
//        fail("Expecting exception: IllegalStateException");
      
//      } catch(IllegalStateException e) {
//         //
//         // No element/attribute name specified when trying to output element
//         //
//         verifyException("com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      WriterConfig writerConfig0 = WriterConfig.createJ2MEDefaults();
      AsciiXmlWriter asciiXmlWriter0 = new AsciiXmlWriter((OutputStream) null, writerConfig0, true);
      RepairingNsStreamWriter repairingNsStreamWriter0 = new RepairingNsStreamWriter(asciiXmlWriter0, "", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator((IOContext) null, 342, 23, objectMapper0, repairingNsStreamWriter0);
      QName qName0 = new QName("jm3EDdjmSblp[A", "com.fasterxml.jackson.databind.deser.std.NumberDeserializers$ShortDeserializer", "(@JsonValue serializer for method ");
      toXmlGenerator0.setNextName(qName0);
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      toXmlGenerator0.writeNumber(bigDecimal0);
      assertEquals(23, toXmlGenerator0.getFormatFeatures());
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      AsciiXmlWriter asciiXmlWriter0 = new AsciiXmlWriter(byteArrayOutputStream0, writerConfig0, true);
      RepairingNsStreamWriter repairingNsStreamWriter0 = new RepairingNsStreamWriter(asciiXmlWriter0, "W2\"k;9G", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator((IOContext) null, 23, 23, objectMapper0, repairingNsStreamWriter0);
      QName qName0 = new QName("W2\"k;9G", "", "1.0");
      toXmlGenerator0.setNextName(qName0);
      BigInteger bigInteger0 = BigInteger.TEN;
      BigIntegerNode bigIntegerNode0 = BigIntegerNode.valueOf(bigInteger0);
      BigDecimal bigDecimal0 = bigIntegerNode0.decimalValue();
      toXmlGenerator0.writeNumber(bigDecimal0);
      assertEquals(23, toXmlGenerator0.getFormatFeatures());
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      RepairingNsStreamWriter repairingNsStreamWriter0 = new RepairingNsStreamWriter((XmlWriter) null, "6EvU", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator((IOContext) null, (-1150), (-1150), objectMapper0, repairingNsStreamWriter0);
      // Undeclared exception!
//      try { 
        toXmlGenerator0.writeNumber((BigDecimal) null);
//        fail("Expecting exception: IllegalStateException");
      
//      } catch(IllegalStateException e) {
//         //
//         // No element/attribute name specified when trying to output element
//         //
//         verifyException("com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      NonNsStreamWriter nonNsStreamWriter0 = new NonNsStreamWriter((XmlWriter) null, "com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator((IOContext) null, 8000, 1817, objectMapper0, nonNsStreamWriter0);
      MathContext mathContext0 = MathContext.DECIMAL64;
      BigDecimal bigDecimal0 = new BigDecimal(0.0, mathContext0);
      // Undeclared exception!
//      try { 
        toXmlGenerator0.writeNumber(bigDecimal0);
//        fail("Expecting exception: IllegalStateException");
      
//      } catch(IllegalStateException e) {
//         //
//         // No element/attribute name specified when trying to output element
//         //
//         verifyException("com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      StreamWriter2Delegate streamWriter2Delegate0 = new StreamWriter2Delegate((XMLStreamWriter2) null);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator((IOContext) null, 56320, 56320, objectMapper0, streamWriter2Delegate0);
      QName qName0 = QName.valueOf("O`fC`!\"7]|gJJW");
      DefaultXmlPrettyPrinter defaultXmlPrettyPrinter0 = new DefaultXmlPrettyPrinter();
      toXmlGenerator0._xmlPrettyPrinter = (XmlPrettyPrinter) defaultXmlPrettyPrinter0;
      toXmlGenerator0.setNextName(qName0);
      // Undeclared exception!
//      try { 
        toXmlGenerator0.writeNumber((float) 56320);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.codehaus.stax2.util.StreamWriter2Delegate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      WriterConfig writerConfig0 = WriterConfig.createJ2MEDefaults();
      MockPrintStream mockPrintStream0 = new MockPrintStream("com.fasterxml.j_ckspn.dNtaformat.xml.ser.ToXmlGeneAator");
      ISOLatin1XmlWriter iSOLatin1XmlWriter0 = new ISOLatin1XmlWriter(mockPrintStream0, writerConfig0, true);
      NonNsStreamWriter nonNsStreamWriter0 = new NonNsStreamWriter(iSOLatin1XmlWriter0, "com.fasterxml.j_ckspn.dNtaformat.xml.ser.ToXmlGeneAator", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator((IOContext) null, 486, 486, objectMapper0, nonNsStreamWriter0);
      toXmlGenerator0._nextIsUnwrapped = true;
      QName qName0 = new QName("com.fasterxml.j_ckspn.dNtaformat.xml.ser.ToXmlGeneAator", "Invalid Object Id definition for ");
      toXmlGenerator0.setNextName(qName0);
//      try { 
        toXmlGenerator0.writeNumber((float) 57343);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Trying to output non-whitespace characters outside main element tree (in prolog or epilog)
//         //
//         verifyException("com.fasterxml.jackson.dataformat.xml.util.StaxUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      StreamWriter2Delegate streamWriter2Delegate0 = new StreamWriter2Delegate((XMLStreamWriter2) null);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator((IOContext) null, (-524), (-524), objectMapper0, streamWriter2Delegate0);
      QName qName0 = new QName("*b", "*b");
      toXmlGenerator0.setNextName(qName0);
      toXmlGenerator0.setNextIsAttribute(true);
      // Undeclared exception!
//      try { 
        toXmlGenerator0.writeNumber(1435.0F);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.codehaus.stax2.util.StreamWriter2Delegate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      NonNsStreamWriter nonNsStreamWriter0 = new NonNsStreamWriter((XmlWriter) null, "com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator((IOContext) null, (-3030), (-3030), objectMapper0, nonNsStreamWriter0);
      // Undeclared exception!
//      try { 
        toXmlGenerator0.writeNumber((float) (-3030));
//        fail("Expecting exception: IllegalStateException");
      
//      } catch(IllegalStateException e) {
//         //
//         // No element/attribute name specified when trying to output element
//         //
//         verifyException("com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(4);
      WriterConfig writerConfig0 = WriterConfig.createJ2MEDefaults();
      ISOLatin1XmlWriter iSOLatin1XmlWriter0 = new ISOLatin1XmlWriter(byteArrayOutputStream0, writerConfig0, true);
      SimpleNsStreamWriter simpleNsStreamWriter0 = new SimpleNsStreamWriter(iSOLatin1XmlWriter0, "/,F&wdZ9Pf2", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator((IOContext) null, 2688, (-731), objectMapper0, simpleNsStreamWriter0);
      QName qName0 = QName.valueOf(";G");
      toXmlGenerator0.setNextName(qName0);
      toXmlGenerator0.writeNumber(1244.9547F);
//      try { 
        toXmlGenerator0._handleStartObject();
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Trying to output second root, <;G>
//         //
//         verifyException("com.fasterxml.jackson.dataformat.xml.util.StaxUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      RepairingNsStreamWriter repairingNsStreamWriter0 = new RepairingNsStreamWriter((XmlWriter) null, "9>e/ikpa", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator((IOContext) null, 1320, 3936, objectMapper0, repairingNsStreamWriter0);
      QName qName0 = new QName("9>e/ikpa", "\"ql'?Eb1Mu+-", "9>e/ikpa");
      toXmlGenerator0.setNextName(qName0);
      toXmlGenerator0.setNextIsAttribute(true);
      // Undeclared exception!
//      try { 
        toXmlGenerator0.writeNumber(1.0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.ctc.wstx.sw.BaseNsStreamWriter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      NonNsStreamWriter nonNsStreamWriter0 = new NonNsStreamWriter((XmlWriter) null, "com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator((IOContext) null, 8000, 8000, objectMapper0, nonNsStreamWriter0);
      // Undeclared exception!
//      try { 
        toXmlGenerator0.writeNumber(2628.4576);
//        fail("Expecting exception: IllegalStateException");
      
//      } catch(IllegalStateException e) {
//         //
//         // No element/attribute name specified when trying to output element
//         //
//         verifyException("com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      MockPrintStream mockPrintStream0 = new MockPrintStream("com.fasterxml.j_ckspn.dNtaformat.xml.ser.ToXmlGeneAator");
      BufferingXmlWriter bufferingXmlWriter0 = new BufferingXmlWriter((Writer) null, writerConfig0, "com.fasterxml.j_ckspn.dNtaformat.xml.ser.ToXmlGeneAator", true, mockPrintStream0, 2304);
      RepairingNsStreamWriter repairingNsStreamWriter0 = new RepairingNsStreamWriter(bufferingXmlWriter0, "com.fasterxml.j_ckspn.dNtaformat.xml.ser.ToXmlGeneAator", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator((IOContext) null, 1320, 0, objectMapper0, repairingNsStreamWriter0);
      QName qName0 = new QName("write number", "write number", "write number");
      toXmlGenerator0.setNextName(qName0);
      toXmlGenerator0.setNextIsAttribute(true);
//      try { 
        toXmlGenerator0.writeNumber((-28L));
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Trying to write an attribute when there is no open start element.
//         //
//         verifyException("com.fasterxml.jackson.dataformat.xml.util.StaxUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      SimpleNsStreamWriter simpleNsStreamWriter0 = new SimpleNsStreamWriter((XmlWriter) null, "H!{p]INzKp273", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator((IOContext) null, 32, 4, objectMapper0, simpleNsStreamWriter0);
      // Undeclared exception!
//      try { 
        toXmlGenerator0.writeNumber(1072L);
//        fail("Expecting exception: IllegalStateException");
      
//      } catch(IllegalStateException e) {
//         //
//         // No element/attribute name specified when trying to output element
//         //
//         verifyException("com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      WriterConfig writerConfig0 = WriterConfig.createJ2MEDefaults();
      RepairingNsStreamWriter repairingNsStreamWriter0 = new RepairingNsStreamWriter((XmlWriter) null, "|uHi", writerConfig0);
      QName qName0 = new QName("|uHi");
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator((IOContext) null, 66, 66, objectMapper0, repairingNsStreamWriter0);
      toXmlGenerator0.setNextName(qName0);
      // Undeclared exception!
//      try { 
        toXmlGenerator0.writeNumber((long) 66);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.ctc.wstx.sw.BaseNsStreamWriter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      MockPrintStream mockPrintStream0 = new MockPrintStream("com.fasterxml.j_ckspn.dNtaformat.xml.ser.ToXmlGeneAator");
      ISOLatin1XmlWriter iSOLatin1XmlWriter0 = new ISOLatin1XmlWriter(mockPrintStream0, writerConfig0, true);
      NonNsStreamWriter nonNsStreamWriter0 = new NonNsStreamWriter(iSOLatin1XmlWriter0, "com.fasterxml.j_ckspn.dNtaformat.xml.ser.ToXmlGeneAator", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator((IOContext) null, 486, 486, objectMapper0, nonNsStreamWriter0);
      toXmlGenerator0._nextIsUnwrapped = true;
      QName qName0 = new QName("com.fasterxml.j_ckspn.dNtaformat.xml.ser.ToXmlGeneAator", "com.fasterxml.j_ckspn.dNtaformat.xml.ser.ToXmlGeneAator", "com.fasterxml.j_ckspn.dNtaformat.xml.ser.ToXmlGeneAator");
      toXmlGenerator0.setNextName(qName0);
//      try { 
        toXmlGenerator0.writeNumber(2312);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Trying to output non-whitespace characters outside main element tree (in prolog or epilog)
//         //
//         verifyException("com.fasterxml.jackson.dataformat.xml.util.StaxUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      MockPrintStream mockPrintStream0 = new MockPrintStream("com.fasterxml.j_ckspn.dNtaformat.xml.ser.ToXmlGeneAator");
      BufferingXmlWriter bufferingXmlWriter0 = new BufferingXmlWriter((Writer) null, writerConfig0, "9[7", true, mockPrintStream0, 2304);
      RepairingNsStreamWriter repairingNsStreamWriter0 = new RepairingNsStreamWriter(bufferingXmlWriter0, "9[7", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator((IOContext) null, 1320, 0, objectMapper0, repairingNsStreamWriter0);
      QName qName0 = new QName("write number", "write number", "");
      toXmlGenerator0.setNextName(qName0);
      toXmlGenerator0.setNextIsAttribute(true);
      toXmlGenerator0.writeStartObject();
      toXmlGenerator0.writeFieldId(1320);
      toXmlGenerator0.writeNumber(0);
      assertEquals(0, toXmlGenerator0.getFormatFeatures());
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      NonNsStreamWriter nonNsStreamWriter0 = new NonNsStreamWriter((XmlWriter) null, "*n&($.ss", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator((IOContext) null, 55351, 55351, objectMapper0, nonNsStreamWriter0);
      // Undeclared exception!
//      try { 
        toXmlGenerator0.writeNumber((-576));
//        fail("Expecting exception: IllegalStateException");
      
//      } catch(IllegalStateException e) {
//         //
//         // No element/attribute name specified when trying to output element
//         //
//         verifyException("com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      RepairingNsStreamWriter repairingNsStreamWriter0 = new RepairingNsStreamWriter((XmlWriter) null, "ELV+\"p,>7\"=#D_U", writerConfig0);
      QName qName0 = new QName("ELV+\"p,>7\"=#D_U", "l-3{J`i^lc.f~]x", "k743M@tJ-Jh");
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator((IOContext) null, (-713), (-713), objectMapper0, repairingNsStreamWriter0);
      toXmlGenerator0.setNextName(qName0);
      // Undeclared exception!
//      try { 
        toXmlGenerator0.writeNull();
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.ctc.wstx.sw.BaseNsStreamWriter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      MockPrintStream mockPrintStream0 = new MockPrintStream("com.fasterxml.j_ckspn.dNtaformat.xml.ser.ToXmlGeneAator");
      ISOLatin1XmlWriter iSOLatin1XmlWriter0 = new ISOLatin1XmlWriter(mockPrintStream0, writerConfig0, true);
      NonNsStreamWriter nonNsStreamWriter0 = new NonNsStreamWriter(iSOLatin1XmlWriter0, "com.fasterxml.j_ckspn.dNtaformat.xml.ser.ToXmlGeneAator", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator((IOContext) null, 486, 486, objectMapper0, nonNsStreamWriter0);
      toXmlGenerator0._nextIsUnwrapped = true;
      QName qName0 = new QName("xbsu~S;euD_vHV@Vvy&", "xbsu~S;euD_vHV@Vvy&", "Can not write END_ELEMENT without open START_ELEMENT");
      toXmlGenerator0.setNextName(qName0);
      toXmlGenerator0.writeNull();
      assertEquals(486, toXmlGenerator0.getFormatFeatures());
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      MockPrintStream mockPrintStream0 = new MockPrintStream("com.fasterxml.j_ckspn.dNtaformat.xml.ser.ToXmlGeneAator");
      BufferingXmlWriter bufferingXmlWriter0 = new BufferingXmlWriter((Writer) null, writerConfig0, "9[7", true, mockPrintStream0, 2304);
      RepairingNsStreamWriter repairingNsStreamWriter0 = new RepairingNsStreamWriter(bufferingXmlWriter0, "9[7", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator((IOContext) null, 1320, 0, objectMapper0, repairingNsStreamWriter0);
      QName qName0 = new QName("write number", "write number", "");
      toXmlGenerator0.setNextName(qName0);
      toXmlGenerator0.setNextIsAttribute(true);
      toXmlGenerator0.writeNull();
      assertEquals(0, toXmlGenerator0.getFormatFeatures());
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      MockPrintStream mockPrintStream0 = new MockPrintStream("com.fasterxml.jackspn.dNtaformat.xml.ser.ToXmlGenerator");
      ISOLatin1XmlWriter iSOLatin1XmlWriter0 = new ISOLatin1XmlWriter(mockPrintStream0, writerConfig0, false);
      NonNsStreamWriter nonNsStreamWriter0 = new NonNsStreamWriter(iSOLatin1XmlWriter0, "com.fasterxml.jackspn.dNtaformat.xml.ser.ToXmlGenerator", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator((IOContext) null, 486, 486, objectMapper0, nonNsStreamWriter0);
      toXmlGenerator0._nextIsUnwrapped = true;
      QName qName0 = new QName("com.fasterxml.jackspn.dNtaformat.xml.ser.ToXmlGenerator", "com.ctc.wstx.io.WstxInputSource", "com.fasterxml.jackspn.dNtaformat.xml.ser.ToXmlGenerator");
      toXmlGenerator0.setNextName(qName0);
//      try { 
        toXmlGenerator0.writeBoolean(false);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Trying to output non-whitespace characters outside main element tree (in prolog or epilog)
//         //
//         verifyException("com.fasterxml.jackson.dataformat.xml.util.StaxUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      RepairingNsStreamWriter repairingNsStreamWriter0 = new RepairingNsStreamWriter((XmlWriter) null, "x]Av5J6$EwS6L", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator((IOContext) null, 1320, 1320, objectMapper0, repairingNsStreamWriter0);
      QName qName0 = new QName("x]Av5J6$EwS6L", "x]Av5J6$EwS6L", "x]Av5J6$EwS6L");
      toXmlGenerator0.setNextName(qName0);
      toXmlGenerator0.setNextIsAttribute(true);
      // Undeclared exception!
//      try { 
        toXmlGenerator0.writeBoolean(true);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.ctc.wstx.sw.BaseNsStreamWriter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("F~KVYZ", false);
      WriterConfig writerConfig0 = WriterConfig.createJ2MEDefaults();
      AsciiXmlWriter asciiXmlWriter0 = new AsciiXmlWriter(mockFileOutputStream0, writerConfig0, true);
      SimpleNsStreamWriter simpleNsStreamWriter0 = new SimpleNsStreamWriter(asciiXmlWriter0, "JSON", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 4, 5, objectMapper0, simpleNsStreamWriter0);
      // Undeclared exception!
//      try { 
        toXmlGenerator0.writeBoolean(false);
//        fail("Expecting exception: IllegalStateException");
      
//      } catch(IllegalStateException e) {
//         //
//         // No element/attribute name specified when trying to output element
//         //
//         verifyException("com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      MockPrintStream mockPrintStream0 = new MockPrintStream("com.fasterxml.j_ckspn.dNtaformat.xml.ser.ToXmlGeneAator");
      BufferingXmlWriter bufferingXmlWriter0 = new BufferingXmlWriter((Writer) null, writerConfig0, "com.fasterxml.j_ckspn.dNtaformat.xml.ser.ToXmlGeneAator", true, mockPrintStream0, 2304);
      RepairingNsStreamWriter repairingNsStreamWriter0 = new RepairingNsStreamWriter(bufferingXmlWriter0, "com.fasterxml.j_ckspn.dNtaformat.xml.ser.ToXmlGeneAator", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator((IOContext) null, 1320, 0, objectMapper0, repairingNsStreamWriter0);
      QName qName0 = new QName("write number", "write number", "write number");
      toXmlGenerator0.setNextName(qName0);
      toXmlGenerator0.writeBoolean(false);
      byte[] byteArray0 = new byte[8];
//      try { 
        toXmlGenerator0.writeBinary((Base64Variant) null, byteArray0, 3995, (int) (byte) (-20));
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Trying to output second root, <write number>
//         //
//         verifyException("com.fasterxml.jackson.dataformat.xml.util.StaxUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      StreamWriter2Delegate streamWriter2Delegate0 = new StreamWriter2Delegate((XMLStreamWriter2) null);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator((IOContext) null, (-524), (-524), objectMapper0, streamWriter2Delegate0);
      QName qName0 = new QName("*b", "*b");
      toXmlGenerator0.setNextName(qName0);
      toXmlGenerator0.setNextIsAttribute(true);
      byte[] byteArray0 = new byte[9];
      // Undeclared exception!
//      try { 
        toXmlGenerator0.writeBinary(byteArray0, (int) (byte) (-46), (int) (byte)0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.codehaus.stax2.util.StreamWriter2Delegate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      WriterConfig writerConfig0 = WriterConfig.createJ2MEDefaults();
      RepairingNsStreamWriter repairingNsStreamWriter0 = new RepairingNsStreamWriter((XmlWriter) null, "x]4v6$EwS6L", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator((IOContext) null, 327, 327, objectMapper0, repairingNsStreamWriter0);
      QName qName0 = new QName("x]4v6$EwS6L", "x]4v6$EwS6L", "x]4v6$EwS6L");
      toXmlGenerator0.setNextName(qName0);
      DefaultXmlPrettyPrinter defaultXmlPrettyPrinter0 = new DefaultXmlPrettyPrinter();
      toXmlGenerator0._xmlPrettyPrinter = (XmlPrettyPrinter) defaultXmlPrettyPrinter0;
      byte[] byteArray0 = new byte[0];
      // Undeclared exception!
//      try { 
        toXmlGenerator0.writeBinary(byteArray0, 327, (-704));
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.ctc.wstx.sw.BaseStreamWriter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      MockPrintStream mockPrintStream0 = new MockPrintStream("com.fasterxml.j_ckspn.dNtaformat.xml.ser.ToXmlGeneAator");
      ISOLatin1XmlWriter iSOLatin1XmlWriter0 = new ISOLatin1XmlWriter(mockPrintStream0, writerConfig0, true);
      NonNsStreamWriter nonNsStreamWriter0 = new NonNsStreamWriter(iSOLatin1XmlWriter0, "com.fasterxml.j_ckspn.dNtaformat.xml.ser.ToXmlGeneAator", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator((IOContext) null, 486, 486, objectMapper0, nonNsStreamWriter0);
      toXmlGenerator0._nextIsUnwrapped = true;
      QName qName0 = QName.valueOf("com.fasterxml.j_ckspn.dNtaformat.xml.ser.ToXmlGeneAator");
      toXmlGenerator0.setNextName(qName0);
      byte[] byteArray0 = new byte[0];
//      try { 
        toXmlGenerator0.writeBinary(byteArray0, 486, 486);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Trying to output non-whitespace characters outside main element tree (in prolog or epilog)
//         //
//         verifyException("com.fasterxml.jackson.dataformat.xml.util.StaxUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      MockPrintStream mockPrintStream0 = new MockPrintStream("com.fasterxml.j_ckspn.dNtaformat.xml.ser.ToXmlGeneAator");
      BufferingXmlWriter bufferingXmlWriter0 = new BufferingXmlWriter((Writer) null, writerConfig0, "9[7", true, mockPrintStream0, 2304);
      RepairingNsStreamWriter repairingNsStreamWriter0 = new RepairingNsStreamWriter(bufferingXmlWriter0, "9[7", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator((IOContext) null, 1320, 0, objectMapper0, repairingNsStreamWriter0);
      QName qName0 = new QName("write number", "write number", "");
      toXmlGenerator0.setNextName(qName0);
      toXmlGenerator0.setNextIsAttribute(true);
      byte[] byteArray0 = new byte[2];
      // Undeclared exception!
//      try { 
        toXmlGenerator0.writeBinary(byteArray0, (int) (byte)0, 465);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0.BYTE_BASE64_CODEC_BUFFER, true);
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      Class<Object> class0 = Object.class;
      ObjectReader objectReader0 = objectMapper0.readerWithView(class0);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("JSON");
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      AsciiXmlWriter asciiXmlWriter0 = new AsciiXmlWriter(mockFileOutputStream0, writerConfig0, true);
      SimpleNsStreamWriter simpleNsStreamWriter0 = new SimpleNsStreamWriter(asciiXmlWriter0, "JSON", writerConfig0);
      StreamWriterDelegate streamWriterDelegate0 = new StreamWriterDelegate(simpleNsStreamWriter0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 3, 0, objectReader0, streamWriterDelegate0);
      char[] charArray0 = new char[5];
//      try { 
        toXmlGenerator0.writeRaw(charArray0, 4, 56320);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Underlying Stax XMLStreamWriter (of type org.codehaus.stax2.util.StreamWriterDelegate) does not implement Stax2 API natively and is missing method 'writeRaw': this breaks functionality such as indentation that relies on it. You need to upgrade to using compliant Stax implementation like Woodstox or Aalto
//         //
//         verifyException("com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("\u2028", false);
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      ISOLatin1XmlWriter iSOLatin1XmlWriter0 = new ISOLatin1XmlWriter(mockFileOutputStream0, writerConfig0, false);
      NonNsStreamWriter nonNsStreamWriter0 = new NonNsStreamWriter(iSOLatin1XmlWriter0, "\u2028", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator((IOContext) null, 3501, 24, objectMapper0, nonNsStreamWriter0);
      // Undeclared exception!
      toXmlGenerator0.writeRaw((char[]) null, 2147483629, 2147483629);
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      WriterConfig writerConfig0 = WriterConfig.createJ2MEDefaults();
      NonNsStreamWriter nonNsStreamWriter0 = new NonNsStreamWriter((XmlWriter) null, "com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator", writerConfig0);
      StreamWriterDelegate streamWriterDelegate0 = new StreamWriterDelegate(nonNsStreamWriter0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator((IOContext) null, (-3029), 262144, objectMapper0, streamWriterDelegate0);
//      try { 
        toXmlGenerator0.writeRaw("", (-1151), 2168);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Underlying Stax XMLStreamWriter (of type org.codehaus.stax2.util.StreamWriterDelegate) does not implement Stax2 API natively and is missing method 'writeRaw': this breaks functionality such as indentation that relies on it. You need to upgrade to using compliant Stax implementation like Woodstox or Aalto
//         //
//         verifyException("com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      File file0 = MockFile.createTempFile("not a valid number", "not a valid number");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(file0, true);
      ISOLatin1XmlWriter iSOLatin1XmlWriter0 = new ISOLatin1XmlWriter(mockFileOutputStream0, writerConfig0, false);
      NonNsStreamWriter nonNsStreamWriter0 = new NonNsStreamWriter(iSOLatin1XmlWriter0, "", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator((IOContext) null, 2147483631, 2147483631, objectMapper0, nonNsStreamWriter0);
      // Undeclared exception!
      toXmlGenerator0.writeRaw("M-", 2147483631, 2147483631);
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      StreamWriter2Delegate streamWriter2Delegate0 = new StreamWriter2Delegate((XMLStreamWriter2) null);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator((IOContext) null, (-524), (-524), objectMapper0, streamWriter2Delegate0);
      QName qName0 = new QName("*b", "*b");
      toXmlGenerator0.setNextName(qName0);
      toXmlGenerator0.setNextIsAttribute(true);
      char[] charArray0 = new char[1];
      // Undeclared exception!
//      try { 
        toXmlGenerator0.writeRawValue(charArray0, (int) (byte)51, (int) (byte)51);
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      WriterConfig writerConfig0 = WriterConfig.createJ2MEDefaults();
      AsciiXmlWriter asciiXmlWriter0 = new AsciiXmlWriter(byteArrayOutputStream0, writerConfig0, false);
      RepairingNsStreamWriter repairingNsStreamWriter0 = new RepairingNsStreamWriter(asciiXmlWriter0, "8uiN1IMesNRr*H]S", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator((IOContext) null, 2147483626, 1320, objectMapper0, repairingNsStreamWriter0);
      QName qName0 = new QName("Underlying Stax XMLStreamWriter (of type ", "&9E:(F-iT");
      toXmlGenerator0.setNextName(qName0);
      char[] charArray0 = new char[2];
      // Undeclared exception!
//      try { 
        toXmlGenerator0.writeRawValue(charArray0, (-215), 1320);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // -215
//         //
//         verifyException("com.ctc.wstx.sw.AsciiXmlWriter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      RepairingNsStreamWriter repairingNsStreamWriter0 = new RepairingNsStreamWriter((XmlWriter) null, "nn)ISg&k10wOhW(^%4", writerConfig0);
      StreamWriterDelegate streamWriterDelegate0 = new StreamWriterDelegate(repairingNsStreamWriter0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 0, 0, (ObjectCodec) null, streamWriterDelegate0);
      char[] charArray0 = new char[3];
//      try { 
        toXmlGenerator0.writeRawValue(charArray0, 725, 2);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Underlying Stax XMLStreamWriter (of type org.codehaus.stax2.util.StreamWriterDelegate) does not implement Stax2 API natively and is missing method 'writeRawValue': this breaks functionality such as indentation that relies on it. You need to upgrade to using compliant Stax implementation like Woodstox or Aalto
//         //
//         verifyException("com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      WriterConfig writerConfig0 = WriterConfig.createJ2MEDefaults();
      AsciiXmlWriter asciiXmlWriter0 = new AsciiXmlWriter(byteArrayOutputStream0, writerConfig0, false);
      RepairingNsStreamWriter repairingNsStreamWriter0 = new RepairingNsStreamWriter(asciiXmlWriter0, "8uiN1IMesNRr*H]S", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator((IOContext) null, 2147483626, 1320, objectMapper0, repairingNsStreamWriter0);
      char[] charArray0 = new char[2];
      // Undeclared exception!
//      try { 
        toXmlGenerator0.writeRawValue(charArray0, (-215), 1320);
//        fail("Expecting exception: IllegalStateException");
      
//      } catch(IllegalStateException e) {
//         //
//         // No element/attribute name specified when trying to output element
//         //
//         verifyException("com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      StreamWriter2Delegate streamWriter2Delegate0 = new StreamWriter2Delegate((XMLStreamWriter2) null);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator((IOContext) null, (-524), (-524), objectMapper0, streamWriter2Delegate0);
      QName qName0 = new QName("*b", "*b");
      toXmlGenerator0.setNextName(qName0);
      toXmlGenerator0.setNextIsAttribute(true);
      // Undeclared exception!
//      try { 
        toXmlGenerator0.writeRawValue("*b", (int) (byte)0, 2573);
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      WriterConfig writerConfig0 = WriterConfig.createJ2MEDefaults();
      RepairingNsStreamWriter repairingNsStreamWriter0 = new RepairingNsStreamWriter((XmlWriter) null, "|uHi", writerConfig0);
      QName qName0 = new QName("|uHi");
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator((IOContext) null, 66, 66, objectMapper0, repairingNsStreamWriter0);
      toXmlGenerator0.setNextName(qName0);
      // Undeclared exception!
//      try { 
        toXmlGenerator0.writeRawValue("Hih^5Vl1]6$", (-175), 66);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.ctc.wstx.sw.BaseNsStreamWriter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      SimpleNsStreamWriter simpleNsStreamWriter0 = new SimpleNsStreamWriter((XmlWriter) null, "Failed to instantiate class ", writerConfig0);
      JsonFactory jsonFactory0 = new JsonFactory();
      BufferRecycler bufferRecycler0 = jsonFactory0._getBufferRecycler();
      StreamWriterDelegate streamWriterDelegate0 = new StreamWriterDelegate(simpleNsStreamWriter0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      InjectableValues.Std injectableValues_Std0 = new InjectableValues.Std();
      ObjectReader objectReader0 = objectMapper0.reader((InjectableValues) injectableValues_Std0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 60000, (-98), objectReader0, streamWriterDelegate0);
//      try { 
        toXmlGenerator0.writeRawValue("Failed to instantiate class ", 3, (-3445));
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Underlying Stax XMLStreamWriter (of type org.codehaus.stax2.util.StreamWriterDelegate) does not implement Stax2 API natively and is missing method 'writeRawValue': this breaks functionality such as indentation that relies on it. You need to upgrade to using compliant Stax implementation like Woodstox or Aalto
//         //
//         verifyException("com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      WriterConfig writerConfig0 = WriterConfig.createJ2MEDefaults();
      RepairingNsStreamWriter repairingNsStreamWriter0 = new RepairingNsStreamWriter((XmlWriter) null, "|uHi", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator((IOContext) null, 66, 66, objectMapper0, repairingNsStreamWriter0);
      // Undeclared exception!
//      try { 
        toXmlGenerator0.writeRawValue("Hih^5Vl1]6$", (-175), 66);
//        fail("Expecting exception: IllegalStateException");
      
//      } catch(IllegalStateException e) {
//         //
//         // No element/attribute name specified when trying to output element
//         //
//         verifyException("com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      RepairingNsStreamWriter repairingNsStreamWriter0 = new RepairingNsStreamWriter((XmlWriter) null, "[s xh&Dds`jc", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator((IOContext) null, (-1150), (-1150), objectMapper0, repairingNsStreamWriter0);
      QName qName0 = new QName("[s xh&Dds`jc", "[s xh&Dds`jc", "[s xh&Dds`jc");
      toXmlGenerator0.setNextName(qName0);
      toXmlGenerator0.setNextIsAttribute(true);
//      try { 
        toXmlGenerator0.writeRawValue("[s xh&Dds`jc");
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Trying to write an attribute when there is no open start element.
//         //
//         verifyException("com.fasterxml.jackson.dataformat.xml.util.StaxUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      RepairingNsStreamWriter repairingNsStreamWriter0 = new RepairingNsStreamWriter((XmlWriter) null, "[s xh&Dds`jc", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator((IOContext) null, (-1150), (-1150), objectMapper0, repairingNsStreamWriter0);
      QName qName0 = new QName("[s xh&Dds`jc", "[s xh&Dds`jc", "[s xh&Dds`jc");
      toXmlGenerator0.setNextName(qName0);
      // Undeclared exception!
//      try { 
        toXmlGenerator0.writeRawValue("[s xh&Dds`jc");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.ctc.wstx.sw.BaseNsStreamWriter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0.CHAR_TOKEN_BUFFER, true);
      ObjectMapper objectMapper0 = new ObjectMapper();
      WriterConfig writerConfig0 = WriterConfig.createJ2MEDefaults();
      AsciiXmlWriter asciiXmlWriter0 = new AsciiXmlWriter((OutputStream) null, writerConfig0, true);
      SimpleNsStreamWriter simpleNsStreamWriter0 = new SimpleNsStreamWriter(asciiXmlWriter0, "", writerConfig0);
      StreamWriter2Delegate streamWriter2Delegate0 = new StreamWriter2Delegate(simpleNsStreamWriter0);
      StreamWriterDelegate streamWriterDelegate0 = new StreamWriterDelegate(streamWriter2Delegate0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 614, 2, objectMapper0, streamWriterDelegate0);
//      try { 
        toXmlGenerator0.writeRawValue("Nce:k");
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Underlying Stax XMLStreamWriter (of type org.codehaus.stax2.util.StreamWriterDelegate) does not implement Stax2 API natively and is missing method 'writeRawValue': this breaks functionality such as indentation that relies on it. You need to upgrade to using compliant Stax implementation like Woodstox or Aalto
//         //
//         verifyException("com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      RepairingNsStreamWriter repairingNsStreamWriter0 = new RepairingNsStreamWriter((XmlWriter) null, "[s xh&Dds`jc", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator((IOContext) null, (-1150), (-1150), objectMapper0, repairingNsStreamWriter0);
      // Undeclared exception!
//      try { 
        toXmlGenerator0.writeRawValue("[s xh&Dds`jc");
//        fail("Expecting exception: IllegalStateException");
      
//      } catch(IllegalStateException e) {
//         //
//         // No element/attribute name specified when trying to output element
//         //
//         verifyException("com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      MockPrintStream mockPrintStream0 = new MockPrintStream("com.fasterxml.j_ckspn.dNtaformat.xml.ser.ToXmlGeneAator");
      ISOLatin1XmlWriter iSOLatin1XmlWriter0 = new ISOLatin1XmlWriter(mockPrintStream0, writerConfig0, true);
      NonNsStreamWriter nonNsStreamWriter0 = new NonNsStreamWriter(iSOLatin1XmlWriter0, "com.fasterxml.j_ckspn.dNtaformat.xml.ser.ToXmlGeneAator", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator((IOContext) null, 486, 486, objectMapper0, nonNsStreamWriter0);
      toXmlGenerator0._nextIsUnwrapped = true;
      QName qName0 = QName.valueOf("You need to upgrade to using compliant Stax implementation like Woodstox or Aalto");
      toXmlGenerator0.setNextName(qName0);
      char[] charArray0 = new char[2];
      toXmlGenerator0.writeString(charArray0, 90, 0);
      assertEquals(486, toXmlGenerator0.getFormatFeatures());
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      RepairingNsStreamWriter repairingNsStreamWriter0 = new RepairingNsStreamWriter((XmlWriter) null, "", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator((IOContext) null, 1320, 1320, objectMapper0, repairingNsStreamWriter0);
      QName qName0 = new QName("GfMXuj)M{F pv*v$o7", "", "");
      toXmlGenerator0.setNextName(qName0);
      toXmlGenerator0.setNextIsAttribute(true);
      char[] charArray0 = new char[9];
      // Undeclared exception!
//      try { 
        toXmlGenerator0.writeString(charArray0, (-544), (-287));
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      NonNsStreamWriter nonNsStreamWriter0 = new NonNsStreamWriter((XmlWriter) null, "com.fasterxml.jackson$d?taformat.xmlaser.ToXmlGenerator", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator((IOContext) null, 8000, 1, objectMapper0, nonNsStreamWriter0);
      char[] charArray0 = new char[0];
      // Undeclared exception!
//      try { 
        toXmlGenerator0.writeString(charArray0, 2, 8000);
//        fail("Expecting exception: IllegalStateException");
      
//      } catch(IllegalStateException e) {
//         //
//         // No element/attribute name specified when trying to output element
//         //
//         verifyException("com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      MockPrintStream mockPrintStream0 = new MockPrintStream("com.fasterxml.j_ckspn.dNtaformat.xml.ser.ToXmlGeneAator");
      ISOLatin1XmlWriter iSOLatin1XmlWriter0 = new ISOLatin1XmlWriter(mockPrintStream0, writerConfig0, true);
      NonNsStreamWriter nonNsStreamWriter0 = new NonNsStreamWriter(iSOLatin1XmlWriter0, "com.fasterxml.j_ckspn.dNtaformat.xml.ser.ToXmlGeneAator", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator((IOContext) null, 2, 1958, objectMapper0, nonNsStreamWriter0);
      QName qName0 = new QName("com.fasterxml.j_ckspn.dNtaformat.xml.ser.ToXmlGeneAator", "Kn[Bqk%", "com.fasterxml.j_ckspn.dNtaformat.xml.ser.ToXmlGeneAator");
      toXmlGenerator0.setNextName(qName0);
      char[] charArray0 = new char[9];
      toXmlGenerator0.writeString(charArray0, 56224, 0);
      assertEquals(1958, toXmlGenerator0.getFormatFeatures());
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      WriterConfig writerConfig0 = WriterConfig.createJ2MEDefaults();
      AsciiXmlWriter asciiXmlWriter0 = new AsciiXmlWriter(byteArrayOutputStream0, writerConfig0, false);
      SimpleNsStreamWriter simpleNsStreamWriter0 = new SimpleNsStreamWriter(asciiXmlWriter0, "a:NvkdW8acR70X4", writerConfig0);
      QName qName0 = new QName((String) null, "a:NvkdW8acR70X4", "pd{p!)LfG4q.32pj|");
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator((IOContext) null, 1047, 1047, objectMapper0, simpleNsStreamWriter0);
      toXmlGenerator0.setNextName(qName0);
      toXmlGenerator0.writeStartObject();
      toXmlGenerator0.writeFieldId(55296);
      PrettyPrinter prettyPrinter0 = toXmlGenerator0._constructDefaultPrettyPrinter();
      JsonGenerator jsonGenerator0 = toXmlGenerator0.setPrettyPrinter(prettyPrinter0);
      toXmlGenerator0.writeNull();
      // Undeclared exception!
//      try { 
        jsonGenerator0.writeStringField("a:NvkdW8acR70X4", (String) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.ctc.wstx.sw.BaseStreamWriter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      MockPrintStream mockPrintStream0 = new MockPrintStream("com.fasterxml.j_ckspn.dNtaformat.xml.ser.ToXmlGeneAator");
      BufferingXmlWriter bufferingXmlWriter0 = new BufferingXmlWriter((Writer) null, writerConfig0, "9[7", true, mockPrintStream0, 2304);
      RepairingNsStreamWriter repairingNsStreamWriter0 = new RepairingNsStreamWriter(bufferingXmlWriter0, "9[7", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator((IOContext) null, 1320, 0, objectMapper0, repairingNsStreamWriter0);
      QName qName0 = new QName("write number", "write number", "");
      toXmlGenerator0.setNextName(qName0);
      toXmlGenerator0.setNextIsAttribute(true);
      SerializedString serializedString0 = PrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
//      try { 
        toXmlGenerator0.writeString((SerializableString) serializedString0);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Trying to write an attribute when there is no open start element.
//         //
//         verifyException("com.fasterxml.jackson.dataformat.xml.util.StaxUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      WriterConfig writerConfig0 = WriterConfig.createJ2MEDefaults();
      QName qName0 = new QName("G)Zyd8GcjI");
      MockFileWriter mockFileWriter0 = new MockFileWriter("G)Zyd8GcjI");
      BufferingXmlWriter bufferingXmlWriter0 = new BufferingXmlWriter(mockFileWriter0, writerConfig0, "G)Zyd8GcjI", true, byteArrayOutputStream0, 45);
      NonNsStreamWriter nonNsStreamWriter0 = new NonNsStreamWriter(bufferingXmlWriter0, "G)Zyd8GcjI", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator((IOContext) null, 45, 45, objectMapper0, nonNsStreamWriter0);
      toXmlGenerator0.setNextName(qName0);
      toXmlGenerator0.writeStartObject();
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      toXmlGenerator0.writeFieldName((SerializableString) serializedString0);
      toXmlGenerator0.writeString((SerializableString) serializedString0);
      assertEquals(45, toXmlGenerator0.getFormatFeatures());
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      NonNsStreamWriter nonNsStreamWriter0 = new NonNsStreamWriter((XmlWriter) null, "com.fasterxml.jackson$d?taormat.xmlser.ToXlGenerator", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator((IOContext) null, 8000, (-23), objectMapper0, nonNsStreamWriter0);
//      try { 
        toXmlGenerator0._handleEndObject();
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Can not write END_ELEMENT without open START_ELEMENT
//         //
//         verifyException("com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      NonNsStreamWriter nonNsStreamWriter0 = new NonNsStreamWriter((XmlWriter) null, "com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator((IOContext) null, 8000, 1817, objectMapper0, nonNsStreamWriter0);
      // Undeclared exception!
//      try { 
        toXmlGenerator0._handleStartObject();
//        fail("Expecting exception: IllegalStateException");
      
//      } catch(IllegalStateException e) {
//         //
//         // No element/attribute name specified when trying to output element
//         //
//         verifyException("com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      NonNsStreamWriter nonNsStreamWriter0 = new NonNsStreamWriter((XmlWriter) null, "com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator((IOContext) null, 8000, 1817, objectMapper0, nonNsStreamWriter0);
//      try { 
        toXmlGenerator0.writeEndObject();
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Current context not Object but root
//         //
//         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      WriterConfig writerConfig0 = WriterConfig.createJ2MEDefaults();
      QName qName0 = QName.valueOf("-)Zyd8GcjI");
      MockFileWriter mockFileWriter0 = new MockFileWriter("-)Zyd8GcjI");
      BufferingXmlWriter bufferingXmlWriter0 = new BufferingXmlWriter(mockFileWriter0, writerConfig0, "-)Zyd8GcjI", true, byteArrayOutputStream0, (-2445));
      NonNsStreamWriter nonNsStreamWriter0 = new NonNsStreamWriter(bufferingXmlWriter0, "-)Zyd8GcjI", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator((IOContext) null, 66, 66, objectMapper0, nonNsStreamWriter0);
      toXmlGenerator0.setNextName(qName0);
      toXmlGenerator0.writeStartObject();
      toXmlGenerator0.writeEndObject();
      assertEquals(66, toXmlGenerator0.getFormatFeatures());
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      NonNsStreamWriter nonNsStreamWriter0 = new NonNsStreamWriter((XmlWriter) null, "", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator((IOContext) null, 1, 1, objectMapper0, nonNsStreamWriter0);
      MinimalPrettyPrinter minimalPrettyPrinter0 = new MinimalPrettyPrinter("");
      JsonGenerator jsonGenerator0 = toXmlGenerator0.setPrettyPrinter(minimalPrettyPrinter0);
      // Undeclared exception!
//      try { 
        jsonGenerator0.writeStartObject();
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.ctc.wstx.sw.BaseStreamWriter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      WriterConfig writerConfig0 = WriterConfig.createJ2MEDefaults();
      NonNsStreamWriter nonNsStreamWriter0 = new NonNsStreamWriter((XmlWriter) null, "com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator", writerConfig0);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, " in xml declaration; expected '>' to close the declaration", true);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 2, 64, objectMapper0, nonNsStreamWriter0);
      toXmlGenerator0.writeStartArray();
      toXmlGenerator0.useDefaultPrettyPrinter();
//      try { 
        toXmlGenerator0.close();
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Trying to write END_DOCUMENT when document has no root (ie. trying to output empty document).
//         //
//         verifyException("com.fasterxml.jackson.dataformat.xml.util.StaxUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      NonNsStreamWriter nonNsStreamWriter0 = new NonNsStreamWriter((XmlWriter) null, "com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator((IOContext) null, 8000, 1817, objectMapper0, nonNsStreamWriter0);
//      try { 
        toXmlGenerator0.writeEndArray();
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Current context not Array but root
//         //
//         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      NonNsStreamWriter nonNsStreamWriter0 = new NonNsStreamWriter((XmlWriter) null, "com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator((IOContext) null, 8000, 8000, objectMapper0, nonNsStreamWriter0);
      int[] intArray0 = new int[1];
      toXmlGenerator0.writeArray(intArray0, 512, (-1188));
      assertEquals(8000, toXmlGenerator0.getFormatFeatures());
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      RepairingNsStreamWriter repairingNsStreamWriter0 = new RepairingNsStreamWriter((XmlWriter) null, ".0", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator((IOContext) null, (-1), (-1), objectMapper0, repairingNsStreamWriter0);
      QName qName0 = new QName(".0", ".0", "");
      toXmlGenerator0.setNextName(qName0);
//      try { 
        toXmlGenerator0.writeRepeatedFieldName();
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Can not write a field name, expecting a value
//         //
//         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      WriterConfig writerConfig0 = WriterConfig.createJ2MEDefaults();
      QName qName0 = new QName("G)Zyd8GcjI", "G)Zyd8GcjI", "G)Zyd8GcjI");
      MockFileWriter mockFileWriter0 = new MockFileWriter("G)Zyd8GcjI");
      BufferingXmlWriter bufferingXmlWriter0 = new BufferingXmlWriter(mockFileWriter0, writerConfig0, "G)Zyd8GcjI", false, byteArrayOutputStream0, 57);
      NonNsStreamWriter nonNsStreamWriter0 = new NonNsStreamWriter(bufferingXmlWriter0, "G)Zyd8GcjI", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator((IOContext) null, 57, 57, objectMapper0, nonNsStreamWriter0);
      toXmlGenerator0.setNextName(qName0);
      toXmlGenerator0.writeStartObject();
      toXmlGenerator0.writeRepeatedFieldName();
      assertEquals(57, toXmlGenerator0.getFormatFeatures());
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      StreamWriter2Delegate streamWriter2Delegate0 = new StreamWriter2Delegate((XMLStreamWriter2) null);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator((IOContext) null, (-1150), (-2117), objectMapper0, streamWriter2Delegate0);
      QName qName0 = new QName("You need to upgrade to using compliant Stax implementation like Woodstox or Aalto", "");
      // Undeclared exception!
//      try { 
        toXmlGenerator0.finishWrappedValue(qName0, qName0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.codehaus.stax2.util.StreamWriterDelegate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      NonNsStreamWriter nonNsStreamWriter0 = new NonNsStreamWriter((XmlWriter) null, "com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator((IOContext) null, 8000, 8000, objectMapper0, nonNsStreamWriter0);
      toXmlGenerator0.finishWrappedValue((QName) null, (QName) null);
      assertEquals(8000, toXmlGenerator0.getFormatFeatures());
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      StreamWriter2Delegate streamWriter2Delegate0 = new StreamWriter2Delegate((XMLStreamWriter2) null);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator((IOContext) null, 2147483631, 2147483631, objectMapper0, streamWriter2Delegate0);
      DefaultXmlPrettyPrinter defaultXmlPrettyPrinter0 = new DefaultXmlPrettyPrinter();
      toXmlGenerator0.setPrettyPrinter(defaultXmlPrettyPrinter0);
      QName qName0 = new QName("", "");
      // Undeclared exception!
//      try { 
        toXmlGenerator0.startWrappedValue(qName0, qName0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.codehaus.stax2.util.StreamWriter2Delegate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      NonNsStreamWriter nonNsStreamWriter0 = new NonNsStreamWriter((XmlWriter) null, "com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator((IOContext) null, 8000, 8000, objectMapper0, nonNsStreamWriter0);
      boolean boolean0 = toXmlGenerator0.setNextNameIfMissing((QName) null);
      assertTrue(boolean0);
      assertEquals(8000, toXmlGenerator0.getFormatFeatures());
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      MockPrintStream mockPrintStream0 = new MockPrintStream("com.fasterxml.jackspn.dNtaformat.xml.ser.ToXmlGenerator");
      ISOLatin1XmlWriter iSOLatin1XmlWriter0 = new ISOLatin1XmlWriter(mockPrintStream0, writerConfig0, false);
      NonNsStreamWriter nonNsStreamWriter0 = new NonNsStreamWriter(iSOLatin1XmlWriter0, "com.fasterxml.jackspn.dNtaformat.xml.ser.ToXmlGenerator", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator((IOContext) null, 130, 130, objectMapper0, nonNsStreamWriter0);
      QName qName0 = new QName("", "O(B", "com.fasterxml.jackspn.dNtaformat.xml.ser.ToXmlGenerator");
      toXmlGenerator0.setNextName(qName0);
      boolean boolean0 = toXmlGenerator0.setNextNameIfMissing(qName0);
      assertFalse(boolean0);
      assertEquals(130, toXmlGenerator0.getFormatFeatures());
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      NonNsStreamWriter nonNsStreamWriter0 = new NonNsStreamWriter((XmlWriter) null, "H!{p]INzKp273", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator((IOContext) null, (-1187), (-1187), objectMapper0, nonNsStreamWriter0);
      ToXmlGenerator.Feature toXmlGenerator_Feature0 = ToXmlGenerator.Feature.WRITE_XML_1_1;
      ToXmlGenerator toXmlGenerator1 = toXmlGenerator0.enable(toXmlGenerator_Feature0);
      boolean boolean0 = toXmlGenerator1.isEnabled(toXmlGenerator_Feature0);
      assertEquals((-1185), toXmlGenerator0.getFormatFeatures());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      NonNsStreamWriter nonNsStreamWriter0 = new NonNsStreamWriter((XmlWriter) null, "1.0", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator((IOContext) null, 2377, 1845, objectMapper0, nonNsStreamWriter0);
      ToXmlGenerator.Feature toXmlGenerator_Feature0 = ToXmlGenerator.Feature.WRITE_XML_1_1;
      boolean boolean0 = toXmlGenerator0.isEnabled(toXmlGenerator_Feature0);
      assertFalse(boolean0);
      assertEquals(1845, toXmlGenerator0.getFormatFeatures());
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      MockPrintStream mockPrintStream0 = new MockPrintStream("e`E<H7Y2xp##");
      ISOLatin1XmlWriter iSOLatin1XmlWriter0 = new ISOLatin1XmlWriter(mockPrintStream0, writerConfig0, true);
      NonNsStreamWriter nonNsStreamWriter0 = new NonNsStreamWriter(iSOLatin1XmlWriter0, "e`E<H7Y2xp##", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator((IOContext) null, 512, 512, objectMapper0, nonNsStreamWriter0);
      toXmlGenerator0.overrideFormatFeatures(984, 984);
      assertEquals(984, toXmlGenerator0.getFormatFeatures());
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      StreamWriter2Delegate streamWriter2Delegate0 = new StreamWriter2Delegate((XMLStreamWriter2) null);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator((IOContext) null, (-731), (-731), objectMapper0, streamWriter2Delegate0);
      DefaultXmlPrettyPrinter defaultXmlPrettyPrinter0 = new DefaultXmlPrettyPrinter();
      toXmlGenerator0.setPrettyPrinter(defaultXmlPrettyPrinter0);
      QName qName0 = QName.valueOf("write Binary value");
      // Undeclared exception!
//      try { 
        toXmlGenerator0.finishWrappedValue(qName0, qName0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.codehaus.stax2.util.StreamWriter2Delegate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      ObjectMapper objectMapper0 = new ObjectMapper();
      WriterConfig writerConfig0 = WriterConfig.createJ2MEDefaults();
      AsciiXmlWriter asciiXmlWriter0 = new AsciiXmlWriter((OutputStream) null, writerConfig0, false);
      SimpleNsStreamWriter simpleNsStreamWriter0 = new SimpleNsStreamWriter(asciiXmlWriter0, "", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 55296, 0, objectMapper0, simpleNsStreamWriter0);
      toXmlGenerator0.initGenerator();
      assertEquals(0, toXmlGenerator0.getFormatFeatures());
      assertEquals("", simpleNsStreamWriter0.getEncoding());
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0.BYTE_READ_IO_BUFFER, true);
      ObjectMapper objectMapper0 = new ObjectMapper();
      WriterConfig writerConfig0 = WriterConfig.createJ2MEDefaults();
      AsciiXmlWriter asciiXmlWriter0 = new AsciiXmlWriter((OutputStream) null, writerConfig0, true);
      SimpleNsStreamWriter simpleNsStreamWriter0 = new SimpleNsStreamWriter(asciiXmlWriter0, "\"x`SFA", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 3, 3, objectMapper0, simpleNsStreamWriter0);
      toXmlGenerator0.initGenerator();
      toXmlGenerator0.initGenerator();
      assertEquals("1.1", simpleNsStreamWriter0.getXmlVersion());
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      int int0 = ToXmlGenerator.Feature.collectDefaults();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      NonNsStreamWriter nonNsStreamWriter0 = new NonNsStreamWriter((XmlWriter) null, "", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator((IOContext) null, 8000, 8000, objectMapper0, nonNsStreamWriter0);
      // Undeclared exception!
//      try { 
        toXmlGenerator0.writeRawUTF8String((byte[]) null, 57343, 55296);
//        fail("Expecting exception: UnsupportedOperationException");
      
//      } catch(UnsupportedOperationException e) {
//         //
//         // Operation not supported by generator of type com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator
//         //
//         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      AsciiXmlWriter asciiXmlWriter0 = new AsciiXmlWriter(pipedOutputStream0, writerConfig0, true);
      SimpleNsStreamWriter simpleNsStreamWriter0 = new SimpleNsStreamWriter(asciiXmlWriter0, "[Visibility: getter=%s,isGetter=%s,setter=%s,creator=%s,field=%s]", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator((IOContext) null, 353, 3737, objectMapper0, simpleNsStreamWriter0);
      boolean boolean0 = toXmlGenerator0.canWriteFormattedNumbers();
      assertEquals(3737, toXmlGenerator0.getFormatFeatures());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      NonNsStreamWriter nonNsStreamWriter0 = new NonNsStreamWriter((XmlWriter) null, "G[x\"~RA", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator((IOContext) null, 47, 47, objectMapper0, nonNsStreamWriter0);
      Object object0 = toXmlGenerator0.getOutputTarget();
      assertNotNull(object0);
      assertEquals(47, toXmlGenerator0.getFormatFeatures());
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      SimpleNsStreamWriter simpleNsStreamWriter0 = new SimpleNsStreamWriter((XmlWriter) null, "3,VBJA\"k):LAj0PXEp", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator((IOContext) null, 8000, 121, objectMapper0, simpleNsStreamWriter0);
      // Undeclared exception!
//      try { 
        toXmlGenerator0.writeString((SerializableString) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0.CHAR_TEXT_BUFFER, true);
      ObjectMapper objectMapper0 = new ObjectMapper();
      WriterConfig writerConfig0 = WriterConfig.createJ2MEDefaults();
      MockPrintStream mockPrintStream0 = new MockPrintStream("V");
      AsciiXmlWriter asciiXmlWriter0 = new AsciiXmlWriter(mockPrintStream0, writerConfig0, true);
      SimpleNsStreamWriter simpleNsStreamWriter0 = new SimpleNsStreamWriter(asciiXmlWriter0, "Can not write a field name, expecting a value", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 5, (-1204), objectMapper0, simpleNsStreamWriter0);
      toXmlGenerator0.getStaxWriter();
      assertEquals((-1204), toXmlGenerator0.getFormatFeatures());
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      SimpleNsStreamWriter simpleNsStreamWriter0 = new SimpleNsStreamWriter((XmlWriter) null, "", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator((IOContext) null, 1176, 0, objectMapper0, simpleNsStreamWriter0);
      int int0 = toXmlGenerator0.getFormatFeatures();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      ObjectMapper objectMapper0 = new ObjectMapper();
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0, 2053);
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      ISOLatin1XmlWriter iSOLatin1XmlWriter0 = new ISOLatin1XmlWriter(byteArrayBuilder0, writerConfig0, false);
      RepairingNsStreamWriter repairingNsStreamWriter0 = new RepairingNsStreamWriter(iSOLatin1XmlWriter0, "=|quOm-lY,1u8", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, (-960), (-960), objectMapper0, repairingNsStreamWriter0);
      SerializedString serializedString0 = new SerializedString("Current context not Array but ");
      // Undeclared exception!
//      try { 
        toXmlGenerator0.writeRawValue((SerializableString) serializedString0);
//        fail("Expecting exception: UnsupportedOperationException");
      
//      } catch(UnsupportedOperationException e) {
//         //
//         // Operation not supported by generator of type com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator
//         //
//         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      StreamWriter2Delegate streamWriter2Delegate0 = new StreamWriter2Delegate((XMLStreamWriter2) null);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator((IOContext) null, 2147483631, 5, objectMapper0, streamWriter2Delegate0);
      QName qName0 = new QName("<E>l+|L>&N/z^*%C", "<E>l+|L>&N/z^*%C");
      toXmlGenerator0.setNextName(qName0);
      // Undeclared exception!
//      try { 
        toXmlGenerator0.writeNumber(5);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.codehaus.stax2.util.StreamWriterDelegate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      ObjectMapper objectMapper0 = new ObjectMapper();
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      ISOLatin1XmlWriter iSOLatin1XmlWriter0 = new ISOLatin1XmlWriter((OutputStream) null, writerConfig0, true);
      NonNsStreamWriter nonNsStreamWriter0 = new NonNsStreamWriter(iSOLatin1XmlWriter0, "", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 0, 0, objectMapper0, nonNsStreamWriter0);
      int int0 = toXmlGenerator0.getOutputBuffered();
      assertEquals(0, toXmlGenerator0.getFormatFeatures());
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      NonNsStreamWriter nonNsStreamWriter0 = new NonNsStreamWriter((XmlWriter) null, "com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator", writerConfig0);
      StreamWriterDelegate streamWriterDelegate0 = new StreamWriterDelegate(nonNsStreamWriter0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator((IOContext) null, 45, 0, objectMapper0, streamWriterDelegate0);
//      try { 
        toXmlGenerator0.writeRaw("");
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Underlying Stax XMLStreamWriter (of type org.codehaus.stax2.util.StreamWriterDelegate) does not implement Stax2 API natively and is missing method 'writeRaw': this breaks functionality such as indentation that relies on it. You need to upgrade to using compliant Stax implementation like Woodstox or Aalto
//         //
//         verifyException("com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0.CHAR_TOKEN_BUFFER, true);
      ObjectMapper objectMapper0 = new ObjectMapper();
      WriterConfig writerConfig0 = WriterConfig.createJ2MEDefaults();
      AsciiXmlWriter asciiXmlWriter0 = new AsciiXmlWriter((OutputStream) null, writerConfig0, true);
      SimpleNsStreamWriter simpleNsStreamWriter0 = new SimpleNsStreamWriter(asciiXmlWriter0, "JSON", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 3, 1351, objectMapper0, simpleNsStreamWriter0);
      toXmlGenerator0.setNextIsUnwrapped(true);
      assertEquals(1351, toXmlGenerator0.getFormatFeatures());
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      NonNsStreamWriter nonNsStreamWriter0 = new NonNsStreamWriter((XmlWriter) null, "com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator((IOContext) null, 8000, 1817, objectMapper0, nonNsStreamWriter0);
      toXmlGenerator0.setNextIsCData(true);
      assertEquals(1817, toXmlGenerator0.getFormatFeatures());
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      NonNsStreamWriter nonNsStreamWriter0 = new NonNsStreamWriter((XmlWriter) null, "}#i", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator((IOContext) null, 8000, 2377, objectMapper0, nonNsStreamWriter0);
      MinimalPrettyPrinter minimalPrettyPrinter0 = new MinimalPrettyPrinter("}#i");
      JsonGenerator jsonGenerator0 = toXmlGenerator0.setPrettyPrinter(minimalPrettyPrinter0);
      // Undeclared exception!
//      try { 
        jsonGenerator0.writeStartArray();
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.ctc.wstx.sw.BaseStreamWriter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      WriterConfig writerConfig0 = WriterConfig.createJ2MEDefaults();
      MockFileWriter mockFileWriter0 = new MockFileWriter("G)Zyd8GcjI");
      BufferingXmlWriter bufferingXmlWriter0 = new BufferingXmlWriter(mockFileWriter0, writerConfig0, "G)Zyd8GcjI", true, byteArrayOutputStream0, 57);
      NonNsStreamWriter nonNsStreamWriter0 = new NonNsStreamWriter(bufferingXmlWriter0, "G)Zyd8GcjI", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator((IOContext) null, 57, 57, objectMapper0, nonNsStreamWriter0);
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
//      try { 
        toXmlGenerator0.writeFieldName((SerializableString) serializedString0);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Can not write a field name, expecting a value
//         //
//         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      NonNsStreamWriter nonNsStreamWriter0 = new NonNsStreamWriter((XmlWriter) null, "com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator", writerConfig0);
      JsonFactory jsonFactory0 = new JsonFactory();
      BufferRecycler bufferRecycler0 = jsonFactory0._getBufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      StreamWriterDelegate streamWriterDelegate0 = new StreamWriterDelegate(nonNsStreamWriter0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 19, 1141, objectMapper0, streamWriterDelegate0);
      toXmlGenerator0.inRoot();
      assertEquals(1141, toXmlGenerator0.getFormatFeatures());
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      NonNsStreamWriter nonNsStreamWriter0 = new NonNsStreamWriter((XmlWriter) null, "com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator((IOContext) null, 55351, 55351, objectMapper0, nonNsStreamWriter0);
      // Undeclared exception!
//      try { 
        toXmlGenerator0.writeString((String) null);
//        fail("Expecting exception: IllegalStateException");
      
//      } catch(IllegalStateException e) {
//         //
//         // No element/attribute name specified when trying to output element
//         //
//         verifyException("com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      NonNsStreamWriter nonNsStreamWriter0 = new NonNsStreamWriter((XmlWriter) null, "KRL\"j4#f4+yZ|9J", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator((IOContext) null, 8000, (-745), objectMapper0, nonNsStreamWriter0);
      toXmlGenerator0._releaseBuffers();
      assertEquals((-745), toXmlGenerator0.getFormatFeatures());
  }
}
