/*
 * This file was automatically generated by EvoSuite
 * Fri Oct 22 01:01:58 GMT 2021
 */

package com.fasterxml.jackson.dataformat.xml.ser;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.ctc.wstx.api.WriterConfig;
import com.ctc.wstx.sw.AsciiXmlWriter;
import com.ctc.wstx.sw.BufferingXmlWriter;
import com.ctc.wstx.sw.ISOLatin1XmlWriter;
import com.ctc.wstx.sw.NonNsStreamWriter;
import com.ctc.wstx.sw.RepairingNsStreamWriter;
import com.ctc.wstx.sw.SimpleNsStreamWriter;
import com.ctc.wstx.sw.XmlWriter;
import com.fasterxml.jackson.core.Base64Variant;
import com.fasterxml.jackson.core.JsonFactory;
import com.fasterxml.jackson.core.JsonGenerator;
import com.fasterxml.jackson.core.ObjectCodec;
import com.fasterxml.jackson.core.PrettyPrinter;
import com.fasterxml.jackson.core.SerializableString;
import com.fasterxml.jackson.core.Version;
import com.fasterxml.jackson.core.io.IOContext;
import com.fasterxml.jackson.core.io.SerializedString;
import com.fasterxml.jackson.core.util.BufferRecycler;
import com.fasterxml.jackson.core.util.ByteArrayBuilder;
import com.fasterxml.jackson.core.util.DefaultPrettyPrinter;
import com.fasterxml.jackson.core.util.MinimalPrettyPrinter;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.ObjectReader;
import com.fasterxml.jackson.databind.deser.BeanDeserializerFactory;
import com.fasterxml.jackson.databind.deser.DefaultDeserializationContext;
import com.fasterxml.jackson.databind.module.SimpleModule;
import com.fasterxml.jackson.databind.node.DoubleNode;
import com.fasterxml.jackson.databind.node.JsonNodeFactory;
import com.fasterxml.jackson.databind.ser.DefaultSerializerProvider;
import com.fasterxml.jackson.dataformat.xml.XmlPrettyPrinter;
import com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator;
import com.fasterxml.jackson.dataformat.xml.util.DefaultXmlPrettyPrinter;
import java.io.BufferedOutputStream;
import java.io.BufferedWriter;
import java.io.ByteArrayOutputStream;
import java.io.DataOutputStream;
import java.io.File;
import java.io.FileDescriptor;
import java.io.FilterOutputStream;
import java.io.IOException;
import java.io.ObjectOutputStream;
import java.io.OutputStream;
import java.io.PipedOutputStream;
import java.io.PipedWriter;
import java.io.StringWriter;
import java.io.Writer;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.time.chrono.HijrahEra;
import javax.xml.namespace.QName;
import javax.xml.stream.XMLStreamWriter;
import org.codehaus.stax2.XMLStreamWriter2;
import org.codehaus.stax2.ri.Stax2WriterAdapter;
import org.codehaus.stax2.util.StreamWriter2Delegate;
import org.codehaus.stax2.util.StreamWriterDelegate;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockFileWriter;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class ToXmlGenerator_ESTest extends ToXmlGenerator_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      ISOLatin1XmlWriter iSOLatin1XmlWriter0 = new ISOLatin1XmlWriter((OutputStream) null, writerConfig0, false);
      NonNsStreamWriter nonNsStreamWriter0 = new NonNsStreamWriter(iSOLatin1XmlWriter0, "zQNp\"f", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator((IOContext) null, (-2125), (-2125), objectMapper0, nonNsStreamWriter0);
      ToXmlGenerator.Feature toXmlGenerator_Feature0 = ToXmlGenerator.Feature.WRITE_XML_DECLARATION;
      ToXmlGenerator toXmlGenerator1 = toXmlGenerator0.enable(toXmlGenerator_Feature0);
      assertEquals((-2125), toXmlGenerator1.getFormatFeatures());
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      JsonFactory jsonFactory0 = new JsonFactory();
      BufferRecycler bufferRecycler0 = jsonFactory0._getBufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, objectMapper0, true);
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      NonNsStreamWriter nonNsStreamWriter0 = new NonNsStreamWriter((XmlWriter) null, "JSON", writerConfig0);
      StreamWriter2Delegate streamWriter2Delegate0 = new StreamWriter2Delegate(nonNsStreamWriter0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 2, 2, objectMapper0, streamWriter2Delegate0);
      toXmlGenerator0.overrideFormatFeatures((-3417), (-1));
      assertEquals((-3417), toXmlGenerator0.getFormatFeatures());
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("UTF16_BE");
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(mockFileOutputStream0);
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      ISOLatin1XmlWriter iSOLatin1XmlWriter0 = new ISOLatin1XmlWriter(objectOutputStream0, writerConfig0, true);
      NonNsStreamWriter nonNsStreamWriter0 = new NonNsStreamWriter(iSOLatin1XmlWriter0, "UTF16_BE", writerConfig0);
      StreamWriter2Delegate streamWriter2Delegate0 = new StreamWriter2Delegate(nonNsStreamWriter0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator((IOContext) null, 111, (-2151), objectMapper0, streamWriter2Delegate0);
      QName qName0 = new QName("UTF16_BE");
      boolean boolean0 = toXmlGenerator0.setNextNameIfMissing(qName0);
      assertTrue(boolean0);
      
      toXmlGenerator0.writeStartObject();
      assertEquals((-2151), toXmlGenerator0.getFormatFeatures());
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper((JsonFactory) null);
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      ISOLatin1XmlWriter iSOLatin1XmlWriter0 = new ISOLatin1XmlWriter((OutputStream) null, writerConfig0, true);
      SimpleNsStreamWriter simpleNsStreamWriter0 = new SimpleNsStreamWriter(iSOLatin1XmlWriter0, "!R{m$!}[=", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator((IOContext) null, 1796, 1796, objectMapper0, simpleNsStreamWriter0);
      toXmlGenerator0.writeRaw("!R{m$!}[=");
      assertEquals(1796, toXmlGenerator0.getFormatFeatures());
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      WriterConfig writerConfig0 = WriterConfig.createJ2MEDefaults();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("4`zpcb\"t4p`~;b=BmBo");
      ISOLatin1XmlWriter iSOLatin1XmlWriter0 = new ISOLatin1XmlWriter(mockFileOutputStream0, writerConfig0, true);
      NonNsStreamWriter nonNsStreamWriter0 = new NonNsStreamWriter(iSOLatin1XmlWriter0, "4`zpcb\"t4p`~;b=BmBo", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator((IOContext) null, 1352, 781, objectMapper0, nonNsStreamWriter0);
      QName qName0 = new QName("4`zpcb\"t4p`~;b=BmBo");
      boolean boolean0 = toXmlGenerator0.setNextNameIfMissing(qName0);
      assertTrue(boolean0);
      
      toXmlGenerator0.writeNumber(1L);
      assertEquals(781, toXmlGenerator0.getFormatFeatures());
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(")>@h0C3iR7B;!Na", true);
      WriterConfig writerConfig0 = WriterConfig.createJ2MEDefaults();
      ISOLatin1XmlWriter iSOLatin1XmlWriter0 = new ISOLatin1XmlWriter(mockFileOutputStream0, writerConfig0, true);
      RepairingNsStreamWriter repairingNsStreamWriter0 = new RepairingNsStreamWriter(iSOLatin1XmlWriter0, "", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator((IOContext) null, (-2125), 5, objectMapper0, repairingNsStreamWriter0);
      QName qName0 = new QName("", ")>@h0C3iR7B;!Na", "");
      boolean boolean0 = toXmlGenerator0.setNextNameIfMissing(qName0);
      assertTrue(boolean0);
      
      toXmlGenerator0.writeNumber(74);
      assertEquals(5, toXmlGenerator0.getFormatFeatures());
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("UTF16_BE");
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(mockFileOutputStream0);
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      ISOLatin1XmlWriter iSOLatin1XmlWriter0 = new ISOLatin1XmlWriter(objectOutputStream0, writerConfig0, true);
      NonNsStreamWriter nonNsStreamWriter0 = new NonNsStreamWriter(iSOLatin1XmlWriter0, "UTF16_BE", writerConfig0);
      StreamWriter2Delegate streamWriter2Delegate0 = new StreamWriter2Delegate(nonNsStreamWriter0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator((IOContext) null, 18, (-2151), objectMapper0, streamWriter2Delegate0);
      QName qName0 = new QName("UTF16_BE", "UTF16_BE");
      boolean boolean0 = toXmlGenerator0.setNextNameIfMissing(qName0);
      assertTrue(boolean0);
      
      toXmlGenerator0.writeStartObject((Object) "UTF16_BE");
      SerializedString serializedString0 = PrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      toXmlGenerator0.writeFieldName((SerializableString) serializedString0);
      assertEquals((-2151), toXmlGenerator0.getFormatFeatures());
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      JsonFactory jsonFactory0 = new JsonFactory();
      BufferRecycler bufferRecycler0 = jsonFactory0._getBufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, objectMapper0, false);
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      NonNsStreamWriter nonNsStreamWriter0 = new NonNsStreamWriter((XmlWriter) null, "JSON", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 1, 1, objectMapper0, nonNsStreamWriter0);
      toXmlGenerator0._verifyValueWrite("0]oFq");
      assertEquals(1, toXmlGenerator0.getFormatFeatures());
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      ToXmlGenerator.Feature toXmlGenerator_Feature0 = ToXmlGenerator.Feature.WRITE_XML_1_1;
      int int0 = toXmlGenerator_Feature0.getMask();
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("UTF16_BE");
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(mockFileOutputStream0);
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      ISOLatin1XmlWriter iSOLatin1XmlWriter0 = new ISOLatin1XmlWriter(objectOutputStream0, writerConfig0, true);
      NonNsStreamWriter nonNsStreamWriter0 = new NonNsStreamWriter(iSOLatin1XmlWriter0, "UTF16_BE", writerConfig0);
      StreamWriter2Delegate streamWriter2Delegate0 = new StreamWriter2Delegate(nonNsStreamWriter0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator((IOContext) null, 18, 18, objectMapper0, streamWriter2Delegate0);
      QName qName0 = new QName("", "");
      boolean boolean0 = toXmlGenerator0.setNextNameIfMissing(qName0);
      assertTrue(boolean0);
      
      toXmlGenerator0.writeStartObject((Object) objectOutputStream0);
      toXmlGenerator0.writeStringField("UTF16_BE", "UTF16_BE");
      assertEquals(18, toXmlGenerator0.getFormatFeatures());
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      WriterConfig writerConfig0 = WriterConfig.createJ2MEDefaults();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("4`zpcb\"t4p`~;b=BmBo", true);
      ISOLatin1XmlWriter iSOLatin1XmlWriter0 = new ISOLatin1XmlWriter(mockFileOutputStream0, writerConfig0, true);
      NonNsStreamWriter nonNsStreamWriter0 = new NonNsStreamWriter(iSOLatin1XmlWriter0, "4`zpcb\"t4p`~;b=BmBo", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator((IOContext) null, 1352, 781, objectMapper0, nonNsStreamWriter0);
      QName qName0 = new QName("4`zpcb\"t4p`~;b=BmBo");
      nonNsStreamWriter0.writeEmptyElement("4`zpcb\"t4p`~;b=BmBo", "(H,T=|_^-9]b)", "4`zpcb\"t4p`~;b=BmBo");
      toXmlGenerator0.setNextNameIfMissing(qName0);
//      try { 
        toXmlGenerator0.writeString("4`zpcb\"t4p`~;b=BmBo");
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Trying to output non-whitespace characters outside main element tree (in prolog or epilog)
//         //
//         verifyException("com.fasterxml.jackson.dataformat.xml.util.StaxUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("UTF16_BE");
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(mockFileOutputStream0);
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      ISOLatin1XmlWriter iSOLatin1XmlWriter0 = new ISOLatin1XmlWriter(objectOutputStream0, writerConfig0, true);
      NonNsStreamWriter nonNsStreamWriter0 = new NonNsStreamWriter(iSOLatin1XmlWriter0, "UTF16_BE", writerConfig0);
      StreamWriter2Delegate streamWriter2Delegate0 = new StreamWriter2Delegate(nonNsStreamWriter0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator((IOContext) null, 18, (-2151), objectMapper0, streamWriter2Delegate0);
      QName qName0 = QName.valueOf("UTF16_BE");
      boolean boolean0 = toXmlGenerator0.setNextNameIfMissing(qName0);
      assertTrue(boolean0);
      
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      toXmlGenerator0.writeString((SerializableString) serializedString0);
      assertEquals((-2151), toXmlGenerator0.getFormatFeatures());
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      QName qName0 = new QName("0f?NxL#pDo1zR|D", "0f?NxL#pDo1zR|D", "com.ctc.wstx.io.WstxInputLocation");
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(1796);
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      ISOLatin1XmlWriter iSOLatin1XmlWriter0 = new ISOLatin1XmlWriter(byteArrayOutputStream0, writerConfig0, true);
      SimpleNsStreamWriter simpleNsStreamWriter0 = new SimpleNsStreamWriter(iSOLatin1XmlWriter0, "0f?NxL#pDo1zR|D", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator((IOContext) null, 1796, 4096, objectMapper0, simpleNsStreamWriter0);
      toXmlGenerator0.setNextNameIfMissing(qName0);
//      try { 
        toXmlGenerator0.writeRawValue((char[]) null, 44, 44);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Unbound namespace URI '0f?NxL#pDo1zR|D'
//         //
//         verifyException("com.fasterxml.jackson.dataformat.xml.util.StaxUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("UY.]86_M3");
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      DataOutputStream dataOutputStream0 = new DataOutputStream(mockFileOutputStream0);
      AsciiXmlWriter asciiXmlWriter0 = new AsciiXmlWriter(dataOutputStream0, writerConfig0, false);
      RepairingNsStreamWriter repairingNsStreamWriter0 = new RepairingNsStreamWriter(asciiXmlWriter0, "UY.]86_M3", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator((IOContext) null, (-81), (-81), objectMapper0, repairingNsStreamWriter0);
      QName qName0 = new QName("UY.]86_M3", "5;OqVBw;J2L]FsMqc98", "5;OqVBw;J2L]FsMqc98");
      boolean boolean0 = toXmlGenerator0.setNextNameIfMissing(qName0);
      assertTrue(boolean0);
      
      toXmlGenerator0.writeRawValue((char[]) null, (-1), (-81));
      assertEquals((-81), toXmlGenerator0.getFormatFeatures());
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
      BufferRecycler bufferRecycler0 = jsonFactory0._getBufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0, 1);
      ISOLatin1XmlWriter iSOLatin1XmlWriter0 = new ISOLatin1XmlWriter(byteArrayBuilder0, writerConfig0, true);
      SimpleNsStreamWriter simpleNsStreamWriter0 = new SimpleNsStreamWriter(iSOLatin1XmlWriter0, "zm'K2|Kz;BuG'AdV(E", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, (-3291), (-2155), objectMapper0, simpleNsStreamWriter0);
      QName qName0 = new QName("JSON", "LF=", "j@:V2~u");
      toXmlGenerator0.setNextNameIfMissing(qName0);
//      try { 
        toXmlGenerator0.writeRawValue("LF=", 3, 460);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Unbound namespace URI 'JSON'
//         //
//         verifyException("com.fasterxml.jackson.dataformat.xml.util.StaxUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      DoubleNode doubleNode0 = DoubleNode.valueOf(1);
      IOContext iOContext0 = new IOContext(bufferRecycler0, doubleNode0, true);
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      ISOLatin1XmlWriter iSOLatin1XmlWriter0 = new ISOLatin1XmlWriter(pipedOutputStream0, writerConfig0, true);
      NonNsStreamWriter nonNsStreamWriter0 = new NonNsStreamWriter(iSOLatin1XmlWriter0, "JSON", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 3, 0, objectMapper0, nonNsStreamWriter0);
      QName qName0 = new QName("8`59`gDZ(~ hv<'", "kD8}'_{p5|");
      boolean boolean0 = toXmlGenerator0.setNextNameIfMissing(qName0);
      assertTrue(boolean0);
      
      toXmlGenerator0.writeRawValue("e!.#iH$P6HaP5`V", (-2766), (-84));
      assertEquals(0, toXmlGenerator0.getFormatFeatures());
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      QName qName0 = new QName("WRITE_XML_DECLARATION", "4s", "com.fasterxml.jackson.databind.ser.impl.PropertySerializerMap$Double");
      SimpleNsStreamWriter simpleNsStreamWriter0 = new SimpleNsStreamWriter((XmlWriter) null, "*+", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator((IOContext) null, 1844, 1844, objectMapper0, simpleNsStreamWriter0);
      toXmlGenerator0.setNextNameIfMissing(qName0);
//      try { 
        toXmlGenerator0.writeRawValue("WRITE_XML_DECLARATION");
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Unbound namespace URI 'WRITE_XML_DECLARATION'
//         //
//         verifyException("com.fasterxml.jackson.dataformat.xml.util.StaxUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      ObjectMapper objectMapper0 = new ObjectMapper((JsonFactory) null);
      FilterOutputStream filterOutputStream0 = new FilterOutputStream((OutputStream) null);
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      ISOLatin1XmlWriter iSOLatin1XmlWriter0 = new ISOLatin1XmlWriter(filterOutputStream0, writerConfig0, false);
      RepairingNsStreamWriter repairingNsStreamWriter0 = new RepairingNsStreamWriter(iSOLatin1XmlWriter0, "", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 3, 1, objectMapper0, repairingNsStreamWriter0);
      char[] charArray0 = new char[3];
      toXmlGenerator0.writeRaw(charArray0, (-239), (-2076));
      assertEquals(1, toXmlGenerator0.getFormatFeatures());
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      PipedWriter pipedWriter0 = new PipedWriter();
      WriterConfig writerConfig0 = WriterConfig.createJ2MEDefaults();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(5);
      BufferingXmlWriter bufferingXmlWriter0 = new BufferingXmlWriter(pipedWriter0, writerConfig0, "}XBkA[", true, byteArrayOutputStream0, 5);
      NonNsStreamWriter nonNsStreamWriter0 = new NonNsStreamWriter(bufferingXmlWriter0, "}XBkA[", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator((IOContext) null, 1847, 1847, objectMapper0, nonNsStreamWriter0);
      char[] charArray0 = new char[6];
//      try { 
        toXmlGenerator0.writeRaw(charArray0, 1, 1847);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Pipe not connected
//         //
//         verifyException("com.fasterxml.jackson.dataformat.xml.util.StaxUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
      BufferRecycler bufferRecycler0 = jsonFactory0._getBufferRecycler();
      File file0 = MockFile.createTempFile("4Td6", (String) null);
      MockPrintStream mockPrintStream0 = new MockPrintStream(file0);
      WriterConfig writerConfig0 = WriterConfig.createJ2MEDefaults();
      ISOLatin1XmlWriter iSOLatin1XmlWriter0 = new ISOLatin1XmlWriter(mockPrintStream0, writerConfig0, true);
      NonNsStreamWriter nonNsStreamWriter0 = new NonNsStreamWriter(iSOLatin1XmlWriter0, "4Td6", writerConfig0);
      DoubleNode doubleNode0 = new DoubleNode((-2307.461337723));
      IOContext iOContext0 = new IOContext(bufferRecycler0, doubleNode0, false);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 1, (-1765), objectMapper0, nonNsStreamWriter0);
      toXmlGenerator0.writeRaw((String) null, 784, (-1485));
      assertEquals((-1765), toXmlGenerator0.getFormatFeatures());
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper((JsonFactory) null);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(912);
      WriterConfig writerConfig0 = WriterConfig.createJ2MEDefaults();
      ISOLatin1XmlWriter iSOLatin1XmlWriter0 = new ISOLatin1XmlWriter(byteArrayBuilder0, writerConfig0, false);
      NonNsStreamWriter nonNsStreamWriter0 = new NonNsStreamWriter(iSOLatin1XmlWriter0, "", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator((IOContext) null, 2, 1656, objectMapper0, nonNsStreamWriter0);
      toXmlGenerator0.writeRaw('K');
      assertEquals(1656, toXmlGenerator0.getFormatFeatures());
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
      BufferRecycler bufferRecycler0 = jsonFactory0._getBufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(byteArrayOutputStream0);
      ISOLatin1XmlWriter iSOLatin1XmlWriter0 = new ISOLatin1XmlWriter(bufferedOutputStream0, writerConfig0, false);
      NonNsStreamWriter nonNsStreamWriter0 = new NonNsStreamWriter(iSOLatin1XmlWriter0, "", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 2, 3212, objectMapper0, nonNsStreamWriter0);
      QName qName0 = new QName("{r>zy.", "", "");
      boolean boolean0 = toXmlGenerator0.setNextNameIfMissing(qName0);
      assertTrue(boolean0);
      
      BigInteger bigInteger0 = BigInteger.ONE;
      toXmlGenerator0.writeNumber(bigInteger0);
      assertEquals(3212, toXmlGenerator0.getFormatFeatures());
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("UTF16_BE");
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(mockFileOutputStream0);
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      ISOLatin1XmlWriter iSOLatin1XmlWriter0 = new ISOLatin1XmlWriter(objectOutputStream0, writerConfig0, true);
      NonNsStreamWriter nonNsStreamWriter0 = new NonNsStreamWriter(iSOLatin1XmlWriter0, "UTF16_BE", writerConfig0);
      StreamWriter2Delegate streamWriter2Delegate0 = new StreamWriter2Delegate(nonNsStreamWriter0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator((IOContext) null, 18, (-2151), objectMapper0, streamWriter2Delegate0);
      QName qName0 = QName.valueOf("UTF16_BE");
      boolean boolean0 = toXmlGenerator0.setNextNameIfMissing(qName0);
      assertTrue(boolean0);
      
      toXmlGenerator0.writeNumber((BigInteger) null);
      assertEquals((-2151), toXmlGenerator0.getFormatFeatures());
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("UY.]86_M3");
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      ISOLatin1XmlWriter iSOLatin1XmlWriter0 = new ISOLatin1XmlWriter(mockFileOutputStream0, writerConfig0, false);
      NonNsStreamWriter nonNsStreamWriter0 = new NonNsStreamWriter(iSOLatin1XmlWriter0, "UY.]86_M3", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator((IOContext) null, (-394), (-394), objectMapper0, nonNsStreamWriter0);
      QName qName0 = new QName("nr6nZv*rO0zrRr/:_");
      toXmlGenerator0.setNextNameIfMissing(qName0);
      char[] charArray0 = new char[7];
      toXmlGenerator0.writeString(charArray0, (-6379), (-394));
      BigDecimal bigDecimal0 = new BigDecimal((double) 55296);
//      try { 
        toXmlGenerator0.writeNumber(bigDecimal0);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Trying to output second root, <nr6nZv*rO0zrRr/:_>
//         //
//         verifyException("com.fasterxml.jackson.dataformat.xml.util.StaxUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("UTF16_BE");
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(mockFileOutputStream0);
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      ISOLatin1XmlWriter iSOLatin1XmlWriter0 = new ISOLatin1XmlWriter(objectOutputStream0, writerConfig0, true);
      NonNsStreamWriter nonNsStreamWriter0 = new NonNsStreamWriter(iSOLatin1XmlWriter0, "UTF16_BE", writerConfig0);
      StreamWriter2Delegate streamWriter2Delegate0 = new StreamWriter2Delegate(nonNsStreamWriter0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator((IOContext) null, 18, (-2137), objectMapper0, streamWriter2Delegate0);
      QName qName0 = new QName("UTF16_BE", "UTF16_BE");
      boolean boolean0 = toXmlGenerator0.setNextNameIfMissing(qName0);
      assertTrue(boolean0);
      
      toXmlGenerator0.writeNumber((BigDecimal) null);
      assertEquals((-2137), toXmlGenerator0.getFormatFeatures());
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      WriterConfig writerConfig0 = WriterConfig.createJ2MEDefaults();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("4`zpcb\"t4p`~;b=BmBo");
      ISOLatin1XmlWriter iSOLatin1XmlWriter0 = new ISOLatin1XmlWriter(mockFileOutputStream0, writerConfig0, true);
      NonNsStreamWriter nonNsStreamWriter0 = new NonNsStreamWriter(iSOLatin1XmlWriter0, "4`zpcb\"t4p`~;b=BmBo", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator((IOContext) null, 1352, 781, objectMapper0, nonNsStreamWriter0);
      QName qName0 = new QName("4`zpcb\"t4p`~;b=BmBo");
      boolean boolean0 = toXmlGenerator0.setNextNameIfMissing(qName0);
      assertTrue(boolean0);
      
      toXmlGenerator0.writeNumber(0.0F);
      assertEquals(781, toXmlGenerator0.getFormatFeatures());
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      AsciiXmlWriter asciiXmlWriter0 = new AsciiXmlWriter(byteArrayOutputStream0, writerConfig0, true);
      NonNsStreamWriter nonNsStreamWriter0 = new NonNsStreamWriter(asciiXmlWriter0, "", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator((IOContext) null, 1758, 1758, (ObjectCodec) null, nonNsStreamWriter0);
      QName qName0 = new QName((String) null, "", "");
      boolean boolean0 = toXmlGenerator0.setNextNameIfMissing(qName0);
      assertTrue(boolean0);
      
      toXmlGenerator0.writeNumber(1.0);
      assertEquals(1758, toXmlGenerator0.getFormatFeatures());
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("UTF16_BE");
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(mockFileOutputStream0);
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      ISOLatin1XmlWriter iSOLatin1XmlWriter0 = new ISOLatin1XmlWriter(objectOutputStream0, writerConfig0, true);
      NonNsStreamWriter nonNsStreamWriter0 = new NonNsStreamWriter(iSOLatin1XmlWriter0, "UTF16_BE", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator((IOContext) null, 111, 0, objectMapper0, nonNsStreamWriter0);
      QName qName0 = new QName("&OFt`)SqgZA@MI]");
      boolean boolean0 = toXmlGenerator0.setNextNameIfMissing(qName0);
      assertTrue(boolean0);
      
      toXmlGenerator0.writeBoolean(false);
      assertEquals(0, toXmlGenerator0.getFormatFeatures());
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("UTF16_BE");
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(mockFileOutputStream0);
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      ISOLatin1XmlWriter iSOLatin1XmlWriter0 = new ISOLatin1XmlWriter(objectOutputStream0, writerConfig0, true);
      NonNsStreamWriter nonNsStreamWriter0 = new NonNsStreamWriter(iSOLatin1XmlWriter0, "UTF16_BE", writerConfig0);
      StreamWriter2Delegate streamWriter2Delegate0 = new StreamWriter2Delegate(nonNsStreamWriter0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator((IOContext) null, 111, (-2151), objectMapper0, streamWriter2Delegate0);
      QName qName0 = new QName("UTF16_BE");
      toXmlGenerator0.setNextNameIfMissing(qName0);
      // Undeclared exception!
//      try { 
        toXmlGenerator0.writeBoolean(true);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.codehaus.stax2.util.StreamWriter2Delegate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("UY.]86_Mjb");
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      ISOLatin1XmlWriter iSOLatin1XmlWriter0 = new ISOLatin1XmlWriter(mockFileOutputStream0, writerConfig0, false);
      NonNsStreamWriter nonNsStreamWriter0 = new NonNsStreamWriter(iSOLatin1XmlWriter0, "UY.]86_Mjb", writerConfig0);
      QName qName0 = new QName("", "0$1.INKpz/)tKr[f");
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator((IOContext) null, 1268, 4, objectMapper0, nonNsStreamWriter0);
      toXmlGenerator0.setNextNameIfMissing(qName0);
      toXmlGenerator0.writeEmbeddedObject((Object) null);
      byte[] byteArray0 = new byte[0];
//      try { 
        toXmlGenerator0.writeBinary(byteArray0, 16777215, 56319);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Trying to output non-whitespace characters outside main element tree (in prolog or epilog)
//         //
//         verifyException("com.fasterxml.jackson.dataformat.xml.util.StaxUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(187);
      ISOLatin1XmlWriter iSOLatin1XmlWriter0 = new ISOLatin1XmlWriter(byteArrayBuilder0, writerConfig0, false);
      NonNsStreamWriter nonNsStreamWriter0 = new NonNsStreamWriter(iSOLatin1XmlWriter0, "KN{].}k", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator((IOContext) null, (-65), (-1462), objectMapper0, nonNsStreamWriter0);
      QName qName0 = QName.valueOf("VALUE_FALSE");
      boolean boolean0 = toXmlGenerator0.setNextNameIfMissing(qName0);
      assertTrue(boolean0);
      
      toXmlGenerator0.writeBinary(byteArrayBuilder0.NO_BYTES);
      assertEquals((-1462), toXmlGenerator0.getFormatFeatures());
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      AsciiXmlWriter asciiXmlWriter0 = new AsciiXmlWriter(byteArrayOutputStream0, writerConfig0, false);
      RepairingNsStreamWriter repairingNsStreamWriter0 = new RepairingNsStreamWriter(asciiXmlWriter0, "", writerConfig0);
      StreamWriter2Delegate streamWriter2Delegate0 = new StreamWriter2Delegate(repairingNsStreamWriter0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator((IOContext) null, (-667), 36, objectMapper0, streamWriter2Delegate0);
      QName qName0 = new QName("", "");
      boolean boolean0 = toXmlGenerator0.setNextNameIfMissing(qName0);
      assertTrue(boolean0);
      
      toXmlGenerator0.writeBinary((byte[]) null, (-2040), 1667);
      assertEquals(36, toXmlGenerator0.getFormatFeatures());
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      ISOLatin1XmlWriter iSOLatin1XmlWriter0 = new ISOLatin1XmlWriter((OutputStream) null, writerConfig0, false);
      NonNsStreamWriter nonNsStreamWriter0 = new NonNsStreamWriter(iSOLatin1XmlWriter0, "zQNp\"f", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator((IOContext) null, (-2125), (-2125), objectMapper0, nonNsStreamWriter0);
      QName qName0 = QName.valueOf(", new = ");
      toXmlGenerator0.startWrappedValue(qName0, qName0);
      assertEquals((-2125), toXmlGenerator0.getFormatFeatures());
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("UTF16_BE");
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(mockFileOutputStream0);
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      ISOLatin1XmlWriter iSOLatin1XmlWriter0 = new ISOLatin1XmlWriter(objectOutputStream0, writerConfig0, true);
      NonNsStreamWriter nonNsStreamWriter0 = new NonNsStreamWriter(iSOLatin1XmlWriter0, "UTF16_BE", writerConfig0);
      StreamWriter2Delegate streamWriter2Delegate0 = new StreamWriter2Delegate(nonNsStreamWriter0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator((IOContext) null, 18, (-2151), objectMapper0, streamWriter2Delegate0);
      QName qName0 = QName.valueOf("UTF16_BE");
      boolean boolean0 = toXmlGenerator0.setNextNameIfMissing(qName0);
      assertTrue(boolean0);
      
      toXmlGenerator0.writeStartObject((Object) "UTF16_BE");
      toXmlGenerator0.finishWrappedValue(qName0, qName0);
      assertEquals((-2151), toXmlGenerator0.getFormatFeatures());
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("S$:NC0Qm!<");
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(mockFileOutputStream0);
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      ISOLatin1XmlWriter iSOLatin1XmlWriter0 = new ISOLatin1XmlWriter(mockFileOutputStream0, writerConfig0, true);
      NonNsStreamWriter nonNsStreamWriter0 = new NonNsStreamWriter(iSOLatin1XmlWriter0, "S$:NC0Qm!<", writerConfig0);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, objectOutputStream0, false);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 1, 3, objectMapper0, nonNsStreamWriter0);
      QName qName0 = new QName("S$:NC0Qm!<");
      toXmlGenerator0.setNextNameIfMissing(qName0);
      toXmlGenerator0.writeStartObject((Object) qName0);
      toXmlGenerator0.close();
      assertFalse(toXmlGenerator0.inRoot());
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
      BufferRecycler bufferRecycler0 = jsonFactory0._getBufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, objectMapper0, true);
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      RepairingNsStreamWriter repairingNsStreamWriter0 = new RepairingNsStreamWriter((XmlWriter) null, "JSON", writerConfig0);
      StreamWriterDelegate streamWriterDelegate0 = new StreamWriterDelegate(repairingNsStreamWriter0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 1, 0, objectMapper0, streamWriterDelegate0);
      MinimalPrettyPrinter minimalPrettyPrinter0 = new MinimalPrettyPrinter();
      JsonGenerator jsonGenerator0 = toXmlGenerator0.setPrettyPrinter(minimalPrettyPrinter0);
      assertEquals(0, jsonGenerator0.getFormatFeatures());
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("UTF16_BE");
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(mockFileOutputStream0);
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      ISOLatin1XmlWriter iSOLatin1XmlWriter0 = new ISOLatin1XmlWriter(objectOutputStream0, writerConfig0, true);
      NonNsStreamWriter nonNsStreamWriter0 = new NonNsStreamWriter(iSOLatin1XmlWriter0, "UTF16_BE", writerConfig0);
      StreamWriter2Delegate streamWriter2Delegate0 = new StreamWriter2Delegate(nonNsStreamWriter0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator((IOContext) null, 18, (-2148), objectMapper0, streamWriter2Delegate0);
      JsonGenerator jsonGenerator0 = toXmlGenerator0.setPrettyPrinter((PrettyPrinter) null);
      assertEquals((-2148), jsonGenerator0.getFormatFeatures());
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("UTF16_BE");
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(mockFileOutputStream0);
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      ISOLatin1XmlWriter iSOLatin1XmlWriter0 = new ISOLatin1XmlWriter(objectOutputStream0, writerConfig0, true);
      NonNsStreamWriter nonNsStreamWriter0 = new NonNsStreamWriter(iSOLatin1XmlWriter0, "UTF16_BE", writerConfig0);
      StreamWriter2Delegate streamWriter2Delegate0 = new StreamWriter2Delegate(nonNsStreamWriter0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator((IOContext) null, (-2138), (-2138), objectMapper0, streamWriter2Delegate0);
      toXmlGenerator0.overrideFormatFeatures((-2138), (-2138));
      assertEquals((-2138), toXmlGenerator0.getFormatFeatures());
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper((JsonFactory) null);
      StreamWriter2Delegate streamWriter2Delegate0 = new StreamWriter2Delegate((XMLStreamWriter2) null);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator((IOContext) null, 1796, 1796, objectMapper0, streamWriter2Delegate0);
      toXmlGenerator0.writeStartArray();
      toXmlGenerator0.inRoot();
      assertEquals(1796, toXmlGenerator0.getFormatFeatures());
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      MockPrintStream mockPrintStream0 = new MockPrintStream(", expecting field name");
      BufferingXmlWriter bufferingXmlWriter0 = new BufferingXmlWriter((Writer) null, writerConfig0, ", expecting field name", false, mockPrintStream0, 80);
      RepairingNsStreamWriter repairingNsStreamWriter0 = new RepairingNsStreamWriter(bufferingXmlWriter0, ", expecting field name", writerConfig0);
      StreamWriterDelegate streamWriterDelegate0 = new StreamWriterDelegate(repairingNsStreamWriter0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 1, 2, (ObjectCodec) null, streamWriterDelegate0);
      assertEquals(2, toXmlGenerator0.getFormatFeatures());
      
      ToXmlGenerator.Feature toXmlGenerator_Feature0 = ToXmlGenerator.Feature.WRITE_XML_1_1;
      ToXmlGenerator toXmlGenerator1 = toXmlGenerator0.disable(toXmlGenerator_Feature0);
      int int0 = toXmlGenerator1.getFormatFeatures();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
      BufferRecycler bufferRecycler0 = jsonFactory0._getBufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, objectMapper0, true);
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      NonNsStreamWriter nonNsStreamWriter0 = new NonNsStreamWriter((XmlWriter) null, ") now exceeds maximum, ", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, (-1602), (-573), objectMapper0, nonNsStreamWriter0);
      int int0 = toXmlGenerator0.getFormatFeatures();
      assertEquals((-573), int0);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("UTF16_BE");
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      ISOLatin1XmlWriter iSOLatin1XmlWriter0 = new ISOLatin1XmlWriter(mockFileOutputStream0, writerConfig0, false);
      NonNsStreamWriter nonNsStreamWriter0 = new NonNsStreamWriter(iSOLatin1XmlWriter0, "@TF2e$$", writerConfig0);
      StreamWriter2Delegate streamWriter2Delegate0 = new StreamWriter2Delegate(nonNsStreamWriter0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator((IOContext) null, (-1), 18, objectMapper0, streamWriter2Delegate0);
      QName qName0 = new QName((String) null, "]{n!E/");
      toXmlGenerator0.setNextNameIfMissing(qName0);
      toXmlGenerator0.writeStartObject((Object) objectMapper0);
      ToXmlGenerator.Feature toXmlGenerator_Feature0 = ToXmlGenerator.Feature.WRITE_XML_DECLARATION;
      toXmlGenerator0.enable(toXmlGenerator_Feature0);
      assertEquals(19, toXmlGenerator0.getFormatFeatures());
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      ObjectMapper objectMapper0 = new ObjectMapper();
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(2);
      WriterConfig writerConfig0 = WriterConfig.createJ2MEDefaults();
      AsciiXmlWriter asciiXmlWriter0 = new AsciiXmlWriter(byteArrayBuilder0, writerConfig0, false);
      NonNsStreamWriter nonNsStreamWriter0 = new NonNsStreamWriter(asciiXmlWriter0, "h}$,-iU$9CGelMs^K", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 0, 0, objectMapper0, nonNsStreamWriter0);
      ToXmlGenerator.Feature toXmlGenerator_Feature0 = ToXmlGenerator.Feature.WRITE_XML_1_1;
      toXmlGenerator0.enable(toXmlGenerator_Feature0);
      assertEquals(2, toXmlGenerator0.getFormatFeatures());
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("UTF16_BE");
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(mockFileOutputStream0);
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      ISOLatin1XmlWriter iSOLatin1XmlWriter0 = new ISOLatin1XmlWriter(objectOutputStream0, writerConfig0, true);
      NonNsStreamWriter nonNsStreamWriter0 = new NonNsStreamWriter(iSOLatin1XmlWriter0, "UTF16_BE", writerConfig0);
      StreamWriter2Delegate streamWriter2Delegate0 = new StreamWriter2Delegate(nonNsStreamWriter0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator((IOContext) null, 18, (-2148), objectMapper0, streamWriter2Delegate0);
      QName qName0 = new QName("UTF16_BE", "UTF16_BE");
      boolean boolean0 = toXmlGenerator0.setNextNameIfMissing(qName0);
      assertTrue(boolean0);
      
      toXmlGenerator0.writeStartObject((Object) "UTF16_BE");
      ToXmlGenerator.Feature toXmlGenerator_Feature0 = ToXmlGenerator.Feature.WRITE_XML_DECLARATION;
      ToXmlGenerator toXmlGenerator1 = toXmlGenerator0.disable(toXmlGenerator_Feature0);
      assertEquals((-2148), toXmlGenerator1.getFormatFeatures());
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      AsciiXmlWriter asciiXmlWriter0 = new AsciiXmlWriter(byteArrayOutputStream0, writerConfig0, true);
      NonNsStreamWriter nonNsStreamWriter0 = new NonNsStreamWriter(asciiXmlWriter0, "", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator((IOContext) null, 1758, 1758, (ObjectCodec) null, nonNsStreamWriter0);
      ToXmlGenerator.Feature toXmlGenerator_Feature0 = ToXmlGenerator.Feature.WRITE_XML_1_1;
      toXmlGenerator0.disable(toXmlGenerator_Feature0);
      assertEquals(1756, toXmlGenerator0.getFormatFeatures());
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      ObjectMapper objectMapper0 = new ObjectMapper();
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(2);
      WriterConfig writerConfig0 = WriterConfig.createJ2MEDefaults();
      AsciiXmlWriter asciiXmlWriter0 = new AsciiXmlWriter(byteArrayBuilder0, writerConfig0, false);
      NonNsStreamWriter nonNsStreamWriter0 = new NonNsStreamWriter(asciiXmlWriter0, "h}$,-iU$9CGelMs^K", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 0, 0, objectMapper0, nonNsStreamWriter0);
      ToXmlGenerator.Feature toXmlGenerator_Feature0 = ToXmlGenerator.Feature.WRITE_XML_1_1;
      ToXmlGenerator toXmlGenerator1 = toXmlGenerator0.disable(toXmlGenerator_Feature0);
      assertEquals(0, toXmlGenerator1.getFormatFeatures());
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper((JsonFactory) null);
      StreamWriter2Delegate streamWriter2Delegate0 = new StreamWriter2Delegate((XMLStreamWriter2) null);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator((IOContext) null, 1796, 1796, objectMapper0, streamWriter2Delegate0);
      toXmlGenerator0.writeStartArray();
      ToXmlGenerator.Feature toXmlGenerator_Feature0 = ToXmlGenerator.Feature.WRITE_XML_DECLARATION;
      ToXmlGenerator toXmlGenerator1 = toXmlGenerator0.configure(toXmlGenerator_Feature0, false);
      assertEquals(1796, toXmlGenerator1.getFormatFeatures());
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      StreamWriter2Delegate streamWriter2Delegate0 = new StreamWriter2Delegate((XMLStreamWriter2) null);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator((IOContext) null, 2170, 2170, objectMapper0, streamWriter2Delegate0);
      toXmlGenerator0._nextIsUnwrapped = true;
      toXmlGenerator0.checkNextIsUnwrapped();
      assertEquals(2170, toXmlGenerator0.getFormatFeatures());
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      NonNsStreamWriter nonNsStreamWriter0 = new NonNsStreamWriter((XmlWriter) null, "1", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, (-1880), 74, objectMapper0, nonNsStreamWriter0);
      toXmlGenerator0.checkNextIsUnwrapped();
      assertEquals(74, toXmlGenerator0.getFormatFeatures());
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("UTF16_BE");
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(mockFileOutputStream0);
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      ISOLatin1XmlWriter iSOLatin1XmlWriter0 = new ISOLatin1XmlWriter(objectOutputStream0, writerConfig0, true);
      NonNsStreamWriter nonNsStreamWriter0 = new NonNsStreamWriter(iSOLatin1XmlWriter0, "UTF16_BE", writerConfig0);
      StreamWriter2Delegate streamWriter2Delegate0 = new StreamWriter2Delegate(nonNsStreamWriter0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator((IOContext) null, 18, (-2151), objectMapper0, streamWriter2Delegate0);
      QName qName0 = new QName("UTF16_BE", "UTF16_BE");
      toXmlGenerator0.setNextNameIfMissing(qName0);
      toXmlGenerator0.writeStartObject((Object) "UTF16_BE");
      // Undeclared exception!
//      try { 
        toXmlGenerator0.writeStringField("UTF16_BE", (String) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.ctc.wstx.sw.BaseStreamWriter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("UTF16_BE");
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(mockFileOutputStream0);
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      ISOLatin1XmlWriter iSOLatin1XmlWriter0 = new ISOLatin1XmlWriter(objectOutputStream0, writerConfig0, true);
      NonNsStreamWriter nonNsStreamWriter0 = new NonNsStreamWriter(iSOLatin1XmlWriter0, "UTF16_BE", writerConfig0);
      StreamWriter2Delegate streamWriter2Delegate0 = new StreamWriter2Delegate(nonNsStreamWriter0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator((IOContext) null, 18, (-2151), objectMapper0, streamWriter2Delegate0);
      QName qName0 = QName.valueOf("UTF16_BE");
      toXmlGenerator0.setNextNameIfMissing(qName0);
      toXmlGenerator0.writeStartObject((Object) nonNsStreamWriter0);
      // Undeclared exception!
//      try { 
        toXmlGenerator0.writeStringField((String) null, "UTF16_BE");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // local part cannot be \"null\" when creating a QName
//         //
//         verifyException("javax.xml.namespace.QName", e);
//      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("j-n#/");
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(mockFileOutputStream0);
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      ISOLatin1XmlWriter iSOLatin1XmlWriter0 = new ISOLatin1XmlWriter(objectOutputStream0, writerConfig0, true);
      NonNsStreamWriter nonNsStreamWriter0 = new NonNsStreamWriter(iSOLatin1XmlWriter0, "j-n#/", writerConfig0);
      StreamWriter2Delegate streamWriter2Delegate0 = new StreamWriter2Delegate(nonNsStreamWriter0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator((IOContext) null, (-2137), (-2137), objectMapper0, streamWriter2Delegate0);
      QName qName0 = new QName("j-n#/", "j-n#/");
      toXmlGenerator0.setNextNameIfMissing(qName0);
      toXmlGenerator0.writeStartObject((Object) qName0);
//      try { 
        toXmlGenerator0.writeString("@YDNuoLI)@");
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Can not write String value, expecting field name
//         //
//         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      JsonFactory jsonFactory0 = new JsonFactory();
      BufferRecycler bufferRecycler0 = jsonFactory0._getBufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, objectMapper0, false);
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      NonNsStreamWriter nonNsStreamWriter0 = new NonNsStreamWriter((XmlWriter) null, "JSON", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 60, 1, objectMapper0, nonNsStreamWriter0);
      // Undeclared exception!
//      try { 
        toXmlGenerator0.writeString((SerializableString) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("UTF16_BE");
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(mockFileOutputStream0);
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      ISOLatin1XmlWriter iSOLatin1XmlWriter0 = new ISOLatin1XmlWriter(objectOutputStream0, writerConfig0, true);
      NonNsStreamWriter nonNsStreamWriter0 = new NonNsStreamWriter(iSOLatin1XmlWriter0, "UTF16_BE", writerConfig0);
      StreamWriter2Delegate streamWriter2Delegate0 = new StreamWriter2Delegate(nonNsStreamWriter0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator((IOContext) null, (-2138), (-2138), objectMapper0, streamWriter2Delegate0);
      QName qName0 = new QName("UTF16_BE", "UTF16_BE");
      toXmlGenerator0.setNextNameIfMissing(qName0);
      toXmlGenerator0.writeStartObject((Object) qName0);
      SerializedString serializedString0 = PrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
//      try { 
        toXmlGenerator0.writeString((SerializableString) serializedString0);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Can not write String value, expecting field name
//         //
//         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("~Y.h[6_M3");
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      ISOLatin1XmlWriter iSOLatin1XmlWriter0 = new ISOLatin1XmlWriter(mockFileOutputStream0, writerConfig0, true);
      NonNsStreamWriter nonNsStreamWriter0 = new NonNsStreamWriter(iSOLatin1XmlWriter0, "~Y.h[6_M3", writerConfig0);
      StreamWriter2Delegate streamWriter2Delegate0 = new StreamWriter2Delegate(nonNsStreamWriter0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator((IOContext) null, 111, 111, objectMapper0, streamWriter2Delegate0);
      QName qName0 = QName.valueOf("~Y.h[6_M3");
      toXmlGenerator0.setNextNameIfMissing(qName0);
      toXmlGenerator0.writeString("t@zbe:G!|+");
//      try { 
        toXmlGenerator0.writeStartObject();
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Trying to output second root, <~Y.h[6_M3>
//         //
//         verifyException("com.fasterxml.jackson.dataformat.xml.util.StaxUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("UTF16_BE");
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(mockFileOutputStream0);
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      ISOLatin1XmlWriter iSOLatin1XmlWriter0 = new ISOLatin1XmlWriter(objectOutputStream0, writerConfig0, true);
      NonNsStreamWriter nonNsStreamWriter0 = new NonNsStreamWriter(iSOLatin1XmlWriter0, "UTF16_BE", writerConfig0);
      StreamWriter2Delegate streamWriter2Delegate0 = new StreamWriter2Delegate(nonNsStreamWriter0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator((IOContext) null, 18, (-2137), objectMapper0, streamWriter2Delegate0);
      QName qName0 = new QName("UTF16_BE", "UTF16_BE");
      toXmlGenerator0.setNextNameIfMissing(qName0);
      toXmlGenerator0.writeStartObject((Object) "UTF16_BE");
//      try { 
        toXmlGenerator0.writeStartArray();
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Can not start an array, expecting field name
//         //
//         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Version version0 = new Version((-1536), 0, (-4458), ":r:ezgXaE\";n", ":r:ezgXaE\";n", ":r:ezgXaE\";n");
      SimpleModule simpleModule0 = new SimpleModule(version0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, simpleModule0, false);
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      WriterConfig writerConfig0 = WriterConfig.createJ2MEDefaults();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      BufferingXmlWriter bufferingXmlWriter0 = new BufferingXmlWriter((Writer) null, writerConfig0, "", false, byteArrayOutputStream0, 0);
      RepairingNsStreamWriter repairingNsStreamWriter0 = new RepairingNsStreamWriter(bufferingXmlWriter0, "XmczMA<$WEXB1x{d{|", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 3, 2, objectMapper0, repairingNsStreamWriter0);
      // Undeclared exception!
//      try { 
        toXmlGenerator0.writeRepeatedFieldName();
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      MockPrintStream mockPrintStream0 = new MockPrintStream("Can not create Stax reader for the Source passed -- neither reader, input stream nor system id was accessible; can not use other types of sources (like embedded SAX streams)");
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      ISOLatin1XmlWriter iSOLatin1XmlWriter0 = new ISOLatin1XmlWriter(mockPrintStream0, writerConfig0, false);
      RepairingNsStreamWriter repairingNsStreamWriter0 = new RepairingNsStreamWriter(iSOLatin1XmlWriter0, "com.fasterxml.jackson.databind.ser.std.StdKeySerializers$Default", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator((IOContext) null, 2170, 2170, objectMapper0, repairingNsStreamWriter0);
      QName qName0 = new QName("z{Aj O({~", "com.fasterxml.jackson.databind.ser.std.StdKeySerializers$Default", "write raw ;ovalue");
      toXmlGenerator0.setNextNameIfMissing(qName0);
      char[] charArray0 = new char[2];
      // Undeclared exception!
//      try { 
        toXmlGenerator0.writeRawValue(charArray0, 2170, 2170);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 2170
//         //
//         verifyException("com.ctc.wstx.sw.ISOLatin1XmlWriter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      QName qName0 = new QName("write boolean value", "IkF3dIt37fH`}");
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      AsciiXmlWriter asciiXmlWriter0 = new AsciiXmlWriter((OutputStream) null, writerConfig0, false);
      NonNsStreamWriter nonNsStreamWriter0 = new NonNsStreamWriter(asciiXmlWriter0, "&$7Rn", writerConfig0);
      StreamWriterDelegate streamWriterDelegate0 = new StreamWriterDelegate(nonNsStreamWriter0);
      XMLStreamWriter2 xMLStreamWriter2_0 = Stax2WriterAdapter.wrapIfNecessary(streamWriterDelegate0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator((IOContext) null, 5, 5, objectMapper0, xMLStreamWriter2_0);
      toXmlGenerator0.setNextNameIfMissing(qName0);
      // Undeclared exception!
//      try { 
        toXmlGenerator0.writeRawValue("com.fasterxml.jackson.databind.ser.std.StdDelegatingSerializer", 5, 4096);
//        fail("Expecting exception: UnsupportedOperationException");
      
//      } catch(UnsupportedOperationException e) {
//         //
//         // Not implemented
//         //
//         verifyException("org.codehaus.stax2.ri.Stax2WriterAdapter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      StreamWriter2Delegate streamWriter2Delegate0 = new StreamWriter2Delegate((XMLStreamWriter2) null);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator((IOContext) null, 0, 0, objectMapper0, streamWriter2Delegate0);
      char[] charArray0 = new char[6];
      streamWriter2Delegate0.setParent(streamWriter2Delegate0);
      // Undeclared exception!
//      try { 
        toXmlGenerator0.writeRaw(charArray0, 3192, 3192);
//        fail("Expecting exception: StackOverflowError");
      
//      } catch(StackOverflowError e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      HijrahEra hijrahEra0 = HijrahEra.AH;
      IOContext iOContext0 = new IOContext(bufferRecycler0, hijrahEra0, true);
      JsonFactory jsonFactory0 = new JsonFactory();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0, defaultSerializerProvider_Impl0, (DefaultDeserializationContext) null);
      StringWriter stringWriter0 = new StringWriter();
      WriterConfig writerConfig0 = WriterConfig.createJ2MEDefaults();
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0);
      BufferingXmlWriter bufferingXmlWriter0 = new BufferingXmlWriter(stringWriter0, writerConfig0, "JSON", true, byteArrayBuilder0, 95);
      SimpleNsStreamWriter simpleNsStreamWriter0 = new SimpleNsStreamWriter(bufferingXmlWriter0, "JSON", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 1, 65, objectMapper0, simpleNsStreamWriter0);
      char[] charArray0 = new char[3];
      // Undeclared exception!
//      try { 
        toXmlGenerator0.writeRaw(charArray0, 701, 57343);
//        fail("Expecting exception: IndexOutOfBoundsException");
      
//      } catch(IndexOutOfBoundsException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.io.StringWriter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      MockFileWriter mockFileWriter0 = new MockFileWriter("writeRawValue", false);
      WriterConfig writerConfig0 = WriterConfig.createJ2MEDefaults();
      BufferingXmlWriter bufferingXmlWriter0 = new BufferingXmlWriter(mockFileWriter0, writerConfig0, (String) null, false, (OutputStream) null, (-3537));
      NonNsStreamWriter nonNsStreamWriter0 = new NonNsStreamWriter(bufferingXmlWriter0, "writeRawValue", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator((IOContext) null, (-1527), (-3537), objectMapper0, nonNsStreamWriter0);
      char[] charArray0 = new char[9];
      // Undeclared exception!
//      try { 
        toXmlGenerator0.writeRaw(charArray0, 588, 5);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      WriterConfig writerConfig0 = WriterConfig.createJ2MEDefaults();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("4`zpcb\"t4p`~;b=BmBo");
      ISOLatin1XmlWriter iSOLatin1XmlWriter0 = new ISOLatin1XmlWriter(mockFileOutputStream0, writerConfig0, true);
      NonNsStreamWriter nonNsStreamWriter0 = new NonNsStreamWriter(iSOLatin1XmlWriter0, "4`zpcb\"t4p`~;b=BmBo", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator((IOContext) null, 1352, 781, objectMapper0, nonNsStreamWriter0);
      // Undeclared exception!
//      try { 
        toXmlGenerator0.writeRaw("7+p7#^", 1352, 18);
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("$VALUE!s}S");
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      ISOLatin1XmlWriter iSOLatin1XmlWriter0 = new ISOLatin1XmlWriter(mockFileOutputStream0, writerConfig0, false);
      SimpleNsStreamWriter simpleNsStreamWriter0 = new SimpleNsStreamWriter(iSOLatin1XmlWriter0, "Q)#t&", writerConfig0);
      StreamWriterDelegate streamWriterDelegate0 = new StreamWriterDelegate(simpleNsStreamWriter0);
      XMLStreamWriter2 xMLStreamWriter2_0 = Stax2WriterAdapter.wrapIfNecessary(streamWriterDelegate0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator((IOContext) null, (-2145), 1, objectMapper0, xMLStreamWriter2_0);
      // Undeclared exception!
//      try { 
        toXmlGenerator0.writeRaw("$VALUE!s}S");
//        fail("Expecting exception: UnsupportedOperationException");
      
//      } catch(UnsupportedOperationException e) {
//         //
//         // Not implemented
//         //
//         verifyException("org.codehaus.stax2.ri.Stax2WriterAdapter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "=]=sPL\"&j+7-u=a", false);
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      RepairingNsStreamWriter repairingNsStreamWriter0 = new RepairingNsStreamWriter((XmlWriter) null, "OBJECT_AND_NON_CONCRETE", writerConfig0);
      StreamWriterDelegate streamWriterDelegate0 = new StreamWriterDelegate(repairingNsStreamWriter0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, (-1099), 2, objectMapper0, streamWriterDelegate0);
      Stax2WriterAdapter stax2WriterAdapter0 = (Stax2WriterAdapter)toXmlGenerator0._xmlWriter;
      ToXmlGenerator toXmlGenerator1 = new ToXmlGenerator(iOContext0, 24, 24, objectMapper0, stax2WriterAdapter0);
      // Undeclared exception!
//      try { 
        toXmlGenerator1.writeRaw(':');
//        fail("Expecting exception: UnsupportedOperationException");
      
//      } catch(UnsupportedOperationException e) {
//         //
//         // Not implemented
//         //
//         verifyException("org.codehaus.stax2.ri.Stax2WriterAdapter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
      BufferRecycler bufferRecycler0 = jsonFactory0._getBufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, objectMapper0, true);
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      ISOLatin1XmlWriter iSOLatin1XmlWriter0 = new ISOLatin1XmlWriter((OutputStream) null, writerConfig0, false);
      SimpleNsStreamWriter simpleNsStreamWriter0 = new SimpleNsStreamWriter(iSOLatin1XmlWriter0, ")M`+0\"F?JXXM#FQ4", writerConfig0);
      StreamWriterDelegate streamWriterDelegate0 = new StreamWriterDelegate(simpleNsStreamWriter0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 2, 2, objectMapper0, streamWriterDelegate0);
//      try { 
        toXmlGenerator0.writeRaw('.');
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Underlying Stax XMLStreamWriter (of type org.codehaus.stax2.util.StreamWriterDelegate) does not implement Stax2 API natively and is missing method 'writeRaw': this breaks functionality such as indentation that relies on it. You need to upgrade to using compliant Stax implementation like Woodstox or Aalto
//         //
//         verifyException("com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper((JsonFactory) null);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0, 1);
      QName qName0 = new QName("%RpVdU#~t{dN;", "k-M&(CVB~3", "writeRawValue");
      MockFile mockFile0 = new MockFile((String) null, "}Or2rr");
      MockFileWriter mockFileWriter0 = new MockFileWriter(mockFile0, true);
      BufferedWriter bufferedWriter0 = new BufferedWriter(mockFileWriter0);
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      BufferingXmlWriter bufferingXmlWriter0 = new BufferingXmlWriter(bufferedWriter0, writerConfig0, "%RpVdU#~t{dN;", false, byteArrayBuilder0, 0);
      SimpleNsStreamWriter simpleNsStreamWriter0 = new SimpleNsStreamWriter(bufferingXmlWriter0, "start an object", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator((IOContext) null, 2, 1426, objectMapper0, simpleNsStreamWriter0);
      toXmlGenerator0.setNextNameIfMissing(qName0);
      BigInteger bigInteger0 = BigInteger.ONE;
//      try { 
        toXmlGenerator0.writeNumber(bigInteger0);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Unbound namespace URI '%RpVdU#~t{dN;'
//         //
//         verifyException("com.fasterxml.jackson.dataformat.xml.util.StaxUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
      BufferRecycler bufferRecycler0 = jsonFactory0._getBufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      NonNsStreamWriter nonNsStreamWriter0 = new NonNsStreamWriter((XmlWriter) null, "JSON", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 3, 1, objectMapper0, nonNsStreamWriter0);
      QName qName0 = new QName("JSON", "JSON", "JSON");
      toXmlGenerator0.setNextNameIfMissing(qName0);
      // Undeclared exception!
//      try { 
        toXmlGenerator0.writeNumber("]>;h&mM#VxnaVv");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.ctc.wstx.sw.NonNsStreamWriter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("You need to upgrade to using compliant Stax implementation like Woodstox or Aalto");
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      ISOLatin1XmlWriter iSOLatin1XmlWriter0 = new ISOLatin1XmlWriter(mockFileOutputStream0, writerConfig0, true);
      NonNsStreamWriter nonNsStreamWriter0 = new NonNsStreamWriter(iSOLatin1XmlWriter0, "You need to upgrade to using compliant Stax implementation like Woodstox or Aalto", writerConfig0);
      char[] charArray0 = new char[4];
      iSOLatin1XmlWriter0.writeRawAscii(charArray0, 2591, (-512));
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator((IOContext) null, 2591, 325, objectMapper0, nonNsStreamWriter0);
      QName qName0 = new QName("You need to upgrade to using compliant Stax implementation like Woodstox or Aalto", "You need to upgrade to using compliant Stax implementation like Woodstox or Aalto");
      toXmlGenerator0.setNextNameIfMissing(qName0);
      // Undeclared exception!
//      try { 
        toXmlGenerator0.writeNumber("You need to upgrade to using compliant Stax implementation like Woodstox or Aalto");
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("UTF16_BE");
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      ISOLatin1XmlWriter iSOLatin1XmlWriter0 = new ISOLatin1XmlWriter(mockFileOutputStream0, writerConfig0, false);
      NonNsStreamWriter nonNsStreamWriter0 = new NonNsStreamWriter(iSOLatin1XmlWriter0, "@TF2e$$", writerConfig0);
      StreamWriter2Delegate streamWriter2Delegate0 = new StreamWriter2Delegate(nonNsStreamWriter0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator((IOContext) null, (-1), 18, objectMapper0, streamWriter2Delegate0);
      QName qName0 = new QName((String) null, "]{n!E/");
      toXmlGenerator0.setNextNameIfMissing(qName0);
      toXmlGenerator0.writeStartObject((Object) objectMapper0);
//      try { 
        toXmlGenerator0.writeNumber((String) null);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Can not write String value, expecting field name
//         //
//         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      WriterConfig writerConfig0 = WriterConfig.createJ2MEDefaults();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("4`zpcb\"t4p`~;b=BmBo");
      ISOLatin1XmlWriter iSOLatin1XmlWriter0 = new ISOLatin1XmlWriter(mockFileOutputStream0, writerConfig0, true);
      NonNsStreamWriter nonNsStreamWriter0 = new NonNsStreamWriter(iSOLatin1XmlWriter0, "4`zpcb\"t4p`~;b=BmBo", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator((IOContext) null, 1352, 781, objectMapper0, nonNsStreamWriter0);
      QName qName0 = new QName("4`zpcb\"t4p`~;b=BmBo");
      toXmlGenerator0.setNextNameIfMissing(qName0);
      toXmlGenerator0.writeString("4`zpcb\"t4p`~;b=BmBo");
//      try { 
        toXmlGenerator0.writeNumber(2147483647L);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Trying to output second root, <4`zpcb\"t4p`~;b=BmBo>
//         //
//         verifyException("com.fasterxml.jackson.dataformat.xml.util.StaxUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0);
      WriterConfig writerConfig0 = WriterConfig.createJ2MEDefaults();
      ISOLatin1XmlWriter iSOLatin1XmlWriter0 = new ISOLatin1XmlWriter(byteArrayBuilder0, writerConfig0, false);
      SimpleNsStreamWriter simpleNsStreamWriter0 = new SimpleNsStreamWriter(iSOLatin1XmlWriter0, "6}<5_N<I9-=5XYd", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator((IOContext) null, 16, (-1567), objectMapper0, simpleNsStreamWriter0);
      QName qName0 = new QName("6}<5_N<I9-=5XYd", "com.fasterxml.jackson.databind.deser.std.ThrowableDeserializer", "Can not write END_ELEMENT without open START_ELEMENT");
      toXmlGenerator0.setNextNameIfMissing(qName0);
//      try { 
        toXmlGenerator0.writeNumber((-1766));
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Unbound namespace URI '6}<5_N<I9-=5XYd'
//         //
//         verifyException("com.fasterxml.jackson.dataformat.xml.util.StaxUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("UTF16_BE");
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(mockFileOutputStream0);
      WriterConfig writerConfig0 = WriterConfig.createJ2MEDefaults();
      ISOLatin1XmlWriter iSOLatin1XmlWriter0 = new ISOLatin1XmlWriter(objectOutputStream0, writerConfig0, true);
      NonNsStreamWriter nonNsStreamWriter0 = new NonNsStreamWriter(iSOLatin1XmlWriter0, "UTF16_BE", writerConfig0);
      StreamWriter2Delegate streamWriter2Delegate0 = new StreamWriter2Delegate(nonNsStreamWriter0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator((IOContext) null, 119, (-2150), objectMapper0, streamWriter2Delegate0);
      QName qName0 = new QName("UTF16_BE");
      toXmlGenerator0.setNextNameIfMissing(qName0);
      toXmlGenerator0.writeString("UTF16_BE");
//      try { 
        toXmlGenerator0.writeNumber((-2966.4F));
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Trying to output second root, <UTF16_BE>
//         //
//         verifyException("com.fasterxml.jackson.dataformat.xml.util.StaxUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      SimpleNsStreamWriter simpleNsStreamWriter0 = new SimpleNsStreamWriter((XmlWriter) null, "7Su`o*", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator((IOContext) null, (-1360), 3, objectMapper0, simpleNsStreamWriter0);
      QName qName0 = new QName("write boolean value", "7Su`o*", ">tCDP@");
      toXmlGenerator0.setNextNameIfMissing(qName0);
//      try { 
        toXmlGenerator0.writeNumber((double) 0);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Unbound namespace URI 'write boolean value'
//         //
//         verifyException("com.fasterxml.jackson.dataformat.xml.util.StaxUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("j-n#/");
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(mockFileOutputStream0);
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      ISOLatin1XmlWriter iSOLatin1XmlWriter0 = new ISOLatin1XmlWriter(objectOutputStream0, writerConfig0, true);
      NonNsStreamWriter nonNsStreamWriter0 = new NonNsStreamWriter(iSOLatin1XmlWriter0, "j-n#/", writerConfig0);
      StreamWriter2Delegate streamWriter2Delegate0 = new StreamWriter2Delegate(nonNsStreamWriter0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator((IOContext) null, (-2137), (-2137), objectMapper0, streamWriter2Delegate0);
      QName qName0 = new QName("j-n#/", "j-n#/");
      toXmlGenerator0.setNextNameIfMissing(qName0);
      toXmlGenerator0.writeStartObject((Object) qName0);
//      try { 
        toXmlGenerator0.writeNull();
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Can not write null value, expecting field name
//         //
//         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("UTF16_BE");
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(mockFileOutputStream0);
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      ISOLatin1XmlWriter iSOLatin1XmlWriter0 = new ISOLatin1XmlWriter(objectOutputStream0, writerConfig0, true);
      NonNsStreamWriter nonNsStreamWriter0 = new NonNsStreamWriter(iSOLatin1XmlWriter0, "UTF16_BE", writerConfig0);
      StreamWriter2Delegate streamWriter2Delegate0 = new StreamWriter2Delegate(nonNsStreamWriter0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator((IOContext) null, (-2138), (-2138), objectMapper0, streamWriter2Delegate0);
      QName qName0 = new QName("UTF16_BE", "UTF16_BE");
      toXmlGenerator0.setNextNameIfMissing(qName0);
      toXmlGenerator0.writeStartObject((Object) qName0);
      // Undeclared exception!
//      try { 
        toXmlGenerator0.writeFieldName((String) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // local part cannot be \"null\" when creating a QName
//         //
//         verifyException("javax.xml.namespace.QName", e);
//      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
      BufferRecycler bufferRecycler0 = jsonFactory0._getBufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, objectMapper0, true);
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      NonNsStreamWriter nonNsStreamWriter0 = new NonNsStreamWriter((XmlWriter) null, "JSON", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 1, 122, objectMapper0, nonNsStreamWriter0);
      SerializedString serializedString0 = new SerializedString("JSON");
//      try { 
        toXmlGenerator0.writeFieldName((SerializableString) serializedString0);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Can not write a field name, expecting a value
//         //
//         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
      BufferRecycler bufferRecycler0 = jsonFactory0._getBufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(byteArrayOutputStream0);
      AsciiXmlWriter asciiXmlWriter0 = new AsciiXmlWriter(bufferedOutputStream0, writerConfig0, false);
      NonNsStreamWriter nonNsStreamWriter0 = new NonNsStreamWriter(asciiXmlWriter0, "JSON", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 8233, (-2787), objectMapper0, nonNsStreamWriter0);
      QName qName0 = new QName("#s", "./`G0NbW(fwUIQ", "JSON");
      toXmlGenerator0.setNextNameIfMissing(qName0);
      toXmlGenerator0.writeNumber("com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator$Feature");
//      try { 
        toXmlGenerator0.writeBoolean(true);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Trying to output second root, <./`G0NbW(fwUIQ>
//         //
//         verifyException("com.fasterxml.jackson.dataformat.xml.util.StaxUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      StreamWriter2Delegate streamWriter2Delegate0 = new StreamWriter2Delegate((XMLStreamWriter2) null);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator((IOContext) null, 1797, 2504, objectMapper0, streamWriter2Delegate0);
      QName qName0 = new QName("N<&6VB");
      toXmlGenerator0.setNextNameIfMissing(qName0);
      byte[] byteArray0 = new byte[8];
      // Undeclared exception!
//      try { 
        toXmlGenerator0.writeBinary((Base64Variant) null, byteArray0, (-3652), (-1993));
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.codehaus.stax2.util.StreamWriterDelegate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      JsonFactory jsonFactory0 = new JsonFactory();
      BufferRecycler bufferRecycler0 = jsonFactory0._getBufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, objectMapper0, false);
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      NonNsStreamWriter nonNsStreamWriter0 = new NonNsStreamWriter((XmlWriter) null, "JSON", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 60, 1, objectMapper0, nonNsStreamWriter0);
      byte[] byteArray0 = new byte[3];
      // Undeclared exception!
//      try { 
        toXmlGenerator0.writeBinary((Base64Variant) null, byteArray0, 3, 1);
//        fail("Expecting exception: IllegalStateException");
      
//      } catch(IllegalStateException e) {
//         //
//         // No element/attribute name specified when trying to output element
//         //
//         verifyException("com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("UTF16_BE");
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(mockFileOutputStream0);
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      ISOLatin1XmlWriter iSOLatin1XmlWriter0 = new ISOLatin1XmlWriter(objectOutputStream0, writerConfig0, true);
      NonNsStreamWriter nonNsStreamWriter0 = new NonNsStreamWriter(iSOLatin1XmlWriter0, "UTF16_BE", writerConfig0);
      StreamWriter2Delegate streamWriter2Delegate0 = new StreamWriter2Delegate(nonNsStreamWriter0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator((IOContext) null, 18, (-2151), objectMapper0, streamWriter2Delegate0);
      QName qName0 = QName.valueOf("UTF16_BE");
      toXmlGenerator0.setNextNameIfMissing(qName0);
      toXmlGenerator0.writeStartObject((Object) "UTF16_BE");
      byte[] byteArray0 = new byte[8];
//      try { 
        toXmlGenerator0.writeBinary((Base64Variant) null, byteArray0, (-647), 55374);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Can not write Binary value, expecting field name
//         //
//         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      ISOLatin1XmlWriter iSOLatin1XmlWriter0 = new ISOLatin1XmlWriter((OutputStream) null, writerConfig0, true);
      SimpleNsStreamWriter simpleNsStreamWriter0 = new SimpleNsStreamWriter(iSOLatin1XmlWriter0, "com.fasterxml.jackson.databind.deser.DataFormatReaders$Match", writerConfig0);
      StreamWriter2Delegate streamWriter2Delegate0 = new StreamWriter2Delegate(simpleNsStreamWriter0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator((IOContext) null, (-2120), (-667), objectMapper0, streamWriter2Delegate0);
      QName qName0 = new QName("VALUE_EMBEDDED_OBJECT", "com.fasterxml.jackson.databind.deser.DataFormatReaders$Match");
//      try { 
        toXmlGenerator0.startWrappedValue(qName0, qName0);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Unbound namespace URI 'VALUE_EMBEDDED_OBJECT'
//         //
//         verifyException("com.fasterxml.jackson.dataformat.xml.util.StaxUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      StreamWriter2Delegate streamWriter2Delegate0 = new StreamWriter2Delegate((XMLStreamWriter2) null);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator((IOContext) null, 1796, 1796, objectMapper0, streamWriter2Delegate0);
      // Undeclared exception!
//      try { 
        toXmlGenerator0.isEnabled((ToXmlGenerator.Feature) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
      BufferRecycler bufferRecycler0 = jsonFactory0._getBufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, objectMapper0, true);
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      NonNsStreamWriter nonNsStreamWriter0 = new NonNsStreamWriter((XmlWriter) null, "JSON", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 3, 1, objectMapper0, nonNsStreamWriter0);
      // Undeclared exception!
//      try { 
        toXmlGenerator0.initGenerator();
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.ctc.wstx.sw.BaseStreamWriter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      File file0 = MockFile.createTempFile("v {T#", "com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer$Bucket");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(file0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0, false);
      WriterConfig writerConfig0 = WriterConfig.createJ2MEDefaults();
      BufferingXmlWriter bufferingXmlWriter0 = new BufferingXmlWriter(mockPrintWriter0, writerConfig0, (String) null, false, mockFileOutputStream0, 1405);
      NonNsStreamWriter nonNsStreamWriter0 = new NonNsStreamWriter(bufferingXmlWriter0, (String) null, writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator((IOContext) null, 1055, 321, objectMapper0, nonNsStreamWriter0);
      QName qName0 = new QName("Current context not Object but ", "", "com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer$Bucket");
      toXmlGenerator0.setNextNameIfMissing(qName0);
      toXmlGenerator0.writeRawValue("");
//      try { 
        toXmlGenerator0.initGenerator();
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Can not output XML declaration, after other output has already been done.
//         //
//         verifyException("com.fasterxml.jackson.dataformat.xml.util.StaxUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonFactory jsonFactory0 = new JsonFactory();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0, defaultSerializerProvider_Impl0, (DefaultDeserializationContext) null);
      WriterConfig writerConfig0 = WriterConfig.createJ2MEDefaults();
      SimpleNsStreamWriter simpleNsStreamWriter0 = new SimpleNsStreamWriter((XmlWriter) null, "JSON", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 3, (-1), objectMapper0, simpleNsStreamWriter0);
      // Undeclared exception!
//      try { 
        toXmlGenerator0.handleMissingName();
//        fail("Expecting exception: IllegalStateException");
      
//      } catch(IllegalStateException e) {
//         //
//         // No element/attribute name specified when trying to output element
//         //
//         verifyException("com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      ObjectMapper objectMapper0 = new ObjectMapper((JsonFactory) null);
      WriterConfig writerConfig0 = WriterConfig.createJ2MEDefaults();
      NonNsStreamWriter nonNsStreamWriter0 = new NonNsStreamWriter((XmlWriter) null, "write null value", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 55, 0, objectMapper0, nonNsStreamWriter0);
      // Undeclared exception!
//      try { 
        toXmlGenerator0.flush();
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.ctc.wstx.sw.BaseStreamWriter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("UTF16_BE");
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(mockFileOutputStream0);
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      ISOLatin1XmlWriter iSOLatin1XmlWriter0 = new ISOLatin1XmlWriter(objectOutputStream0, writerConfig0, false);
      NonNsStreamWriter nonNsStreamWriter0 = new NonNsStreamWriter(iSOLatin1XmlWriter0, "UTF16_BE", writerConfig0);
      StreamWriter2Delegate streamWriter2Delegate0 = new StreamWriter2Delegate(nonNsStreamWriter0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator((IOContext) null, (-2138), (-2138), objectMapper0, streamWriter2Delegate0);
      QName qName0 = new QName("UTF16_BE", "UTF16_BE");
      toXmlGenerator0.setNextNameIfMissing(qName0);
      toXmlGenerator0.writeStartObject((Object) qName0);
      FileSystemHandling.shouldAllThrowIOExceptions();
//      try { 
        toXmlGenerator0.flush();
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Simulated IOException
//         //
//         verifyException("com.fasterxml.jackson.dataformat.xml.util.StaxUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
      BufferRecycler bufferRecycler0 = jsonFactory0._getBufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, objectMapper0, true);
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      NonNsStreamWriter nonNsStreamWriter0 = new NonNsStreamWriter((XmlWriter) null, "JSON", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 1, 122, objectMapper0, nonNsStreamWriter0);
      // Undeclared exception!
//      try { 
        toXmlGenerator0.enable((ToXmlGenerator.Feature) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      SimpleModule simpleModule0 = new SimpleModule();
      IOContext iOContext0 = new IOContext((BufferRecycler) null, simpleModule0, false);
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(fileDescriptor0);
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      ISOLatin1XmlWriter iSOLatin1XmlWriter0 = new ISOLatin1XmlWriter(mockFileOutputStream0, writerConfig0, false);
      SimpleNsStreamWriter simpleNsStreamWriter0 = new SimpleNsStreamWriter(iSOLatin1XmlWriter0, "Current context not Object but ", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, (-2075), (-3516), (ObjectCodec) null, simpleNsStreamWriter0);
      // Undeclared exception!
//      try { 
        toXmlGenerator0.disable((ToXmlGenerator.Feature) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper((JsonFactory) null);
      StreamWriter2Delegate streamWriter2Delegate0 = new StreamWriter2Delegate((XMLStreamWriter2) null);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator((IOContext) null, 1797, 1797, objectMapper0, streamWriter2Delegate0);
      // Undeclared exception!
//      try { 
        toXmlGenerator0.configure((ToXmlGenerator.Feature) null, true);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("j-n#/");
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(mockFileOutputStream0);
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      ISOLatin1XmlWriter iSOLatin1XmlWriter0 = new ISOLatin1XmlWriter(objectOutputStream0, writerConfig0, true);
      NonNsStreamWriter nonNsStreamWriter0 = new NonNsStreamWriter(iSOLatin1XmlWriter0, "j-n#/", writerConfig0);
      StreamWriter2Delegate streamWriter2Delegate0 = new StreamWriter2Delegate(nonNsStreamWriter0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator((IOContext) null, (-2137), (-2137), objectMapper0, streamWriter2Delegate0);
      QName qName0 = new QName("j-n#/", "j-n#/", "j-n#/");
      toXmlGenerator0.setNextNameIfMissing(qName0);
      toXmlGenerator0.writeStartObject((Object) qName0);
      toXmlGenerator0.writeFieldName("j-n#/");
      toXmlGenerator0.writeNumber("j-n#/");
//      try { 
        toXmlGenerator0._verifyValueWrite("nuS");
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Can not nuS, expecting field name
//         //
//         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      ObjectMapper objectMapper0 = new ObjectMapper((JsonFactory) null);
      WriterConfig writerConfig0 = WriterConfig.createJ2MEDefaults();
      NonNsStreamWriter nonNsStreamWriter0 = new NonNsStreamWriter((XmlWriter) null, "rite nu value", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 55, 0, objectMapper0, nonNsStreamWriter0);
//      try { 
        toXmlGenerator0._reportUnimplementedStax2("Current context not Object but ");
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Underlying Stax XMLStreamWriter (of type com.ctc.wstx.sw.NonNsStreamWriter) does not implement Stax2 API natively and is missing method 'Current context not Object but ': this breaks functionality such as indentation that relies on it. You need to upgrade to using compliant Stax implementation like Woodstox or Aalto
//         //
//         verifyException("com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
      BufferRecycler bufferRecycler0 = jsonFactory0._getBufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      NonNsStreamWriter nonNsStreamWriter0 = new NonNsStreamWriter((XmlWriter) null, "JSON", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 3, 1, objectMapper0, nonNsStreamWriter0);
      QName qName0 = new QName("JSON", "JSON", "JSON");
      toXmlGenerator0.setNextNameIfMissing(qName0);
      // Undeclared exception!
//      try { 
        toXmlGenerator0._handleStartObject();
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.ctc.wstx.sw.NonNsStreamWriter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      WriterConfig writerConfig0 = WriterConfig.createJ2MEDefaults();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("4`zpcb\"t4p`~;b=BmBo", true);
      ISOLatin1XmlWriter iSOLatin1XmlWriter0 = new ISOLatin1XmlWriter(mockFileOutputStream0, writerConfig0, true);
      NonNsStreamWriter nonNsStreamWriter0 = new NonNsStreamWriter(iSOLatin1XmlWriter0, "4`zpcb\"t4p`~;b=BmBo", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator((IOContext) null, 1352, 781, objectMapper0, nonNsStreamWriter0);
      QName qName0 = new QName("4`zpcb\"t4p`~;b=BmBo");
      toXmlGenerator0.setNextNameIfMissing(qName0);
      toXmlGenerator0.writeString("4`zpcb\"t4p`~;b=BmBo");
//      try { 
        toXmlGenerator0._handleStartObject();
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Trying to output second root, <4`zpcb\"t4p`~;b=BmBo>
//         //
//         verifyException("com.fasterxml.jackson.dataformat.xml.util.StaxUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
      BufferRecycler bufferRecycler0 = jsonFactory0._getBufferRecycler();
      DoubleNode doubleNode0 = new DoubleNode((-2307.461337723));
      IOContext iOContext0 = new IOContext(bufferRecycler0, doubleNode0, false);
      ToXmlGenerator toXmlGenerator0 = null;
//      try {
        toXmlGenerator0 = new ToXmlGenerator(iOContext0, 3679, 2, objectMapper0, (XMLStreamWriter) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0.CHAR_NAME_COPY_BUFFER, true);
      ObjectMapper objectMapper0 = new ObjectMapper();
      JsonNodeFactory jsonNodeFactory0 = new JsonNodeFactory(false);
      ObjectReader objectReader0 = objectMapper0.reader(jsonNodeFactory0);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      AsciiXmlWriter asciiXmlWriter0 = new AsciiXmlWriter(byteArrayBuilder0, writerConfig0, false);
      SimpleNsStreamWriter simpleNsStreamWriter0 = new SimpleNsStreamWriter(asciiXmlWriter0, "tKeLxZP%>;{=", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 0, 192, objectReader0, simpleNsStreamWriter0);
      // Undeclared exception!
//      try { 
        toXmlGenerator0.writeNull();
//        fail("Expecting exception: IllegalStateException");
      
//      } catch(IllegalStateException e) {
//         //
//         // No element/attribute name specified when trying to output element
//         //
//         verifyException("com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      ObjectMapper objectMapper0 = new ObjectMapper((JsonFactory) null);
      WriterConfig writerConfig0 = WriterConfig.createJ2MEDefaults();
      NonNsStreamWriter nonNsStreamWriter0 = new NonNsStreamWriter((XmlWriter) null, "WRITE_XML_1_1", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 3, 1291, objectMapper0, nonNsStreamWriter0);
      // Undeclared exception!
//      try { 
        toXmlGenerator0.writeRaw("");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.ctc.wstx.sw.BaseStreamWriter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      HijrahEra hijrahEra0 = HijrahEra.AH;
      IOContext iOContext0 = new IOContext(bufferRecycler0, hijrahEra0, true);
      ObjectMapper objectMapper0 = new ObjectMapper();
      WriterConfig writerConfig0 = WriterConfig.createJ2MEDefaults();
      ISOLatin1XmlWriter iSOLatin1XmlWriter0 = new ISOLatin1XmlWriter((OutputStream) null, writerConfig0, true);
      RepairingNsStreamWriter repairingNsStreamWriter0 = new RepairingNsStreamWriter(iSOLatin1XmlWriter0, "ykp`U32@4", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 0, 1, objectMapper0, repairingNsStreamWriter0);
      // Undeclared exception!
//      try { 
        toXmlGenerator0.writeString("org.codehaus.stax2.ri.evt.DTDEventImpl");
//        fail("Expecting exception: IllegalStateException");
      
//      } catch(IllegalStateException e) {
//         //
//         // No element/attribute name specified when trying to output element
//         //
//         verifyException("com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("UTF16_BE");
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(mockFileOutputStream0);
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      ISOLatin1XmlWriter iSOLatin1XmlWriter0 = new ISOLatin1XmlWriter(objectOutputStream0, writerConfig0, true);
      NonNsStreamWriter nonNsStreamWriter0 = new NonNsStreamWriter(iSOLatin1XmlWriter0, "UTF16_BE", writerConfig0);
      StreamWriter2Delegate streamWriter2Delegate0 = new StreamWriter2Delegate(nonNsStreamWriter0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator((IOContext) null, 18, (-2151), objectMapper0, streamWriter2Delegate0);
      QName qName0 = QName.valueOf("UTF16_BE");
      boolean boolean0 = toXmlGenerator0.setNextNameIfMissing(qName0);
      assertTrue(boolean0);
      
      toXmlGenerator0.writeStartObject((Object) "UTF16_BE");
      toXmlGenerator0._handleEndObject();
      assertEquals((-2151), toXmlGenerator0.getFormatFeatures());
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      WriterConfig writerConfig0 = WriterConfig.createJ2MEDefaults();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("4`zpcb\"t4p`~;b=BmBo", true);
      ISOLatin1XmlWriter iSOLatin1XmlWriter0 = new ISOLatin1XmlWriter(mockFileOutputStream0, writerConfig0, true);
      NonNsStreamWriter nonNsStreamWriter0 = new NonNsStreamWriter(iSOLatin1XmlWriter0, "4`zpcb\"t4p`~;b=BmBo", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator((IOContext) null, 1352, 781, objectMapper0, nonNsStreamWriter0);
      QName qName0 = new QName("4`zpcb\"t4p`~;b=BmBo");
      boolean boolean0 = toXmlGenerator0.setNextNameIfMissing(qName0);
      assertTrue(boolean0);
      
      toXmlGenerator0._handleStartObject();
      assertEquals(781, toXmlGenerator0.getFormatFeatures());
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
      BufferRecycler bufferRecycler0 = jsonFactory0._getBufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, objectMapper0, true);
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      NonNsStreamWriter nonNsStreamWriter0 = new NonNsStreamWriter((XmlWriter) null, "JSON", writerConfig0);
      StreamWriterDelegate streamWriterDelegate0 = new StreamWriterDelegate(nonNsStreamWriter0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 1, 1472, objectMapper0, streamWriterDelegate0);
      // Undeclared exception!
//      try { 
        toXmlGenerator0._handleStartObject();
//        fail("Expecting exception: IllegalStateException");
      
//      } catch(IllegalStateException e) {
//         //
//         // No element/attribute name specified when trying to output element
//         //
//         verifyException("com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      ObjectMapper objectMapper0 = new ObjectMapper((JsonFactory) null);
      WriterConfig writerConfig0 = WriterConfig.createJ2MEDefaults();
      NonNsStreamWriter nonNsStreamWriter0 = new NonNsStreamWriter((XmlWriter) null, (String) null, writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 1, 842, objectMapper0, nonNsStreamWriter0);
//      try { 
        toXmlGenerator0.writeFieldName((String) null);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Can not write a field name, expecting a value
//         //
//         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      ToXmlGenerator.Feature toXmlGenerator_Feature0 = ToXmlGenerator.Feature.WRITE_XML_1_1;
      toXmlGenerator_Feature0.enabledIn(0);
      assertEquals(2, toXmlGenerator_Feature0.getMask());
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      ToXmlGenerator.Feature toXmlGenerator_Feature0 = ToXmlGenerator.Feature.WRITE_XML_1_1;
      boolean boolean0 = toXmlGenerator_Feature0.enabledIn(2);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      NonNsStreamWriter nonNsStreamWriter0 = new NonNsStreamWriter((XmlWriter) null, "1", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 1, 3, objectMapper0, nonNsStreamWriter0);
      // Undeclared exception!
//      try { 
        toXmlGenerator0.writeRaw('K');
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.ctc.wstx.sw.BaseStreamWriter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      ObjectMapper objectMapper0 = new ObjectMapper((JsonFactory) null);
      WriterConfig writerConfig0 = WriterConfig.createJ2MEDefaults();
      NonNsStreamWriter nonNsStreamWriter0 = new NonNsStreamWriter((XmlWriter) null, (String) null, writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 1, 842, objectMapper0, nonNsStreamWriter0);
      ToXmlGenerator.Feature toXmlGenerator_Feature0 = ToXmlGenerator.Feature.WRITE_XML_DECLARATION;
      toXmlGenerator0.enable(toXmlGenerator_Feature0);
      assertEquals(843, toXmlGenerator0.getFormatFeatures());
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      ToXmlGenerator.Feature toXmlGenerator_Feature0 = ToXmlGenerator.Feature.WRITE_XML_1_1;
      IOContext iOContext0 = new IOContext((BufferRecycler) null, toXmlGenerator_Feature0, false);
      JsonFactory jsonFactory0 = new JsonFactory();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0, defaultSerializerProvider_Impl0, defaultDeserializationContext_Impl0);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      WriterConfig writerConfig0 = WriterConfig.createJ2MEDefaults();
      ISOLatin1XmlWriter iSOLatin1XmlWriter0 = new ISOLatin1XmlWriter(byteArrayBuilder0, writerConfig0, false);
      RepairingNsStreamWriter repairingNsStreamWriter0 = new RepairingNsStreamWriter(iSOLatin1XmlWriter0, "JSON", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, (-469), 121, objectMapper0, repairingNsStreamWriter0);
//      try { 
        toXmlGenerator0.close();
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Trying to write END_DOCUMENT when document has no root (ie. trying to output empty document).
//         //
//         verifyException("com.fasterxml.jackson.dataformat.xml.util.StaxUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("UTF16_BE");
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(mockFileOutputStream0);
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      ISOLatin1XmlWriter iSOLatin1XmlWriter0 = new ISOLatin1XmlWriter(objectOutputStream0, writerConfig0, true);
      NonNsStreamWriter nonNsStreamWriter0 = new NonNsStreamWriter(iSOLatin1XmlWriter0, "UTF16_BE", writerConfig0);
      StreamWriter2Delegate streamWriter2Delegate0 = new StreamWriter2Delegate(nonNsStreamWriter0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator((IOContext) null, (-2137), (-2137), objectMapper0, streamWriter2Delegate0);
      QName qName0 = new QName("UTF16_BE", "UTF16_BE");
      toXmlGenerator0.setNextNameIfMissing(qName0);
      toXmlGenerator0.writeStartObject((Object) qName0);
      // Undeclared exception!
//      try { 
        toXmlGenerator0.close();
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
      BufferRecycler bufferRecycler0 = jsonFactory0._getBufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, objectMapper0, true);
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      NonNsStreamWriter nonNsStreamWriter0 = new NonNsStreamWriter((XmlWriter) null, "JSON", writerConfig0);
      StreamWriter2Delegate streamWriter2Delegate0 = new StreamWriter2Delegate(nonNsStreamWriter0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, (-3630), 2, objectMapper0, streamWriter2Delegate0);
      toXmlGenerator0.writeStartArray();
      // Undeclared exception!
//      try { 
        toXmlGenerator0.close();
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.codehaus.stax2.util.StreamWriter2Delegate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      ObjectMapper objectMapper0 = new ObjectMapper((JsonFactory) null);
      FilterOutputStream filterOutputStream0 = new FilterOutputStream((OutputStream) null);
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      ISOLatin1XmlWriter iSOLatin1XmlWriter0 = new ISOLatin1XmlWriter(filterOutputStream0, writerConfig0, false);
      RepairingNsStreamWriter repairingNsStreamWriter0 = new RepairingNsStreamWriter(iSOLatin1XmlWriter0, "", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 4, 1730, objectMapper0, repairingNsStreamWriter0);
//      try { 
        toXmlGenerator0.close();
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Trying to write END_DOCUMENT when document has no root (ie. trying to output empty document).
//         //
//         verifyException("com.fasterxml.jackson.dataformat.xml.util.StaxUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      JsonFactory jsonFactory0 = new JsonFactory();
      BufferRecycler bufferRecycler0 = jsonFactory0._getBufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, objectMapper0, true);
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      NonNsStreamWriter nonNsStreamWriter0 = new NonNsStreamWriter((XmlWriter) null, "JSON", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 2, 0, objectMapper0, nonNsStreamWriter0);
      toXmlGenerator0.flush();
      assertEquals(0, toXmlGenerator0.getFormatFeatures());
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      StreamWriter2Delegate streamWriter2Delegate0 = new StreamWriter2Delegate((XMLStreamWriter2) null);
      QName qName0 = new QName("Can not ", "Can not ", "Can not ");
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator((IOContext) null, 3492, 3492, objectMapper0, streamWriter2Delegate0);
      toXmlGenerator0.setNextNameIfMissing(qName0);
      toXmlGenerator0.useDefaultPrettyPrinter();
      BigInteger bigInteger0 = BigInteger.ONE;
      // Undeclared exception!
//      try { 
        toXmlGenerator0.writeNumber(bigInteger0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.codehaus.stax2.util.StreamWriter2Delegate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      StreamWriter2Delegate streamWriter2Delegate0 = new StreamWriter2Delegate((XMLStreamWriter2) null);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator((IOContext) null, 1808, 1808, objectMapper0, streamWriter2Delegate0);
      QName qName0 = new QName("com.ctc.wstx.io.WstxInputLocation", "com.ctc.wstx.io.WstxInputLocation", "com.ctc.wstx.io.WstxInputLocation");
      toXmlGenerator0.setNextNameIfMissing(qName0);
      toXmlGenerator0._nextIsUnwrapped = true;
      BigInteger bigInteger0 = BigInteger.TEN;
      // Undeclared exception!
//      try { 
        toXmlGenerator0.writeNumber(bigInteger0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.codehaus.stax2.util.StreamWriter2Delegate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      StreamWriter2Delegate streamWriter2Delegate0 = new StreamWriter2Delegate((XMLStreamWriter2) null);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator((IOContext) null, 1778, 1778, objectMapper0, streamWriter2Delegate0);
      toXmlGenerator0._nextIsAttribute = true;
      QName qName0 = new QName("", "");
      toXmlGenerator0.setNextNameIfMissing(qName0);
      BigInteger bigInteger0 = BigInteger.ONE;
      // Undeclared exception!
//      try { 
        toXmlGenerator0.writeNumber(bigInteger0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.codehaus.stax2.util.StreamWriter2Delegate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("UTF16_BE");
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(mockFileOutputStream0);
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      ISOLatin1XmlWriter iSOLatin1XmlWriter0 = new ISOLatin1XmlWriter(objectOutputStream0, writerConfig0, true);
      NonNsStreamWriter nonNsStreamWriter0 = new NonNsStreamWriter(iSOLatin1XmlWriter0, "UTF16_BE", writerConfig0);
      StreamWriter2Delegate streamWriter2Delegate0 = new StreamWriter2Delegate(nonNsStreamWriter0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator((IOContext) null, 18, (-2151), objectMapper0, streamWriter2Delegate0);
      // Undeclared exception!
//      try { 
        toXmlGenerator0.writeNumber((BigInteger) null);
//        fail("Expecting exception: IllegalStateException");
      
//      } catch(IllegalStateException e) {
//         //
//         // No element/attribute name specified when trying to output element
//         //
//         verifyException("com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      StreamWriter2Delegate streamWriter2Delegate0 = new StreamWriter2Delegate((XMLStreamWriter2) null);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator((IOContext) null, 3492, 3492, objectMapper0, streamWriter2Delegate0);
      BigInteger bigInteger0 = BigInteger.ONE;
      // Undeclared exception!
//      try { 
        toXmlGenerator0.writeNumber(bigInteger0);
//        fail("Expecting exception: IllegalStateException");
      
//      } catch(IllegalStateException e) {
//         //
//         // No element/attribute name specified when trying to output element
//         //
//         verifyException("com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("UY.]86_M3");
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      ISOLatin1XmlWriter iSOLatin1XmlWriter0 = new ISOLatin1XmlWriter(mockFileOutputStream0, writerConfig0, false);
      NonNsStreamWriter nonNsStreamWriter0 = new NonNsStreamWriter(iSOLatin1XmlWriter0, "UY.]86_M3", writerConfig0);
      QName qName0 = new QName("UY.]86_M3", "UY.]86_M3", "UY.]86_M3");
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator((IOContext) null, 76, 76, objectMapper0, nonNsStreamWriter0);
      boolean boolean0 = toXmlGenerator0.setNextNameIfMissing(qName0);
      assertTrue(boolean0);
      
      DoubleNode doubleNode0 = DoubleNode.valueOf(56320);
      toXmlGenerator0.writeStartObject((Object) doubleNode0);
      toXmlGenerator0.writeFieldName("UY.]86_M3");
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      toXmlGenerator0.writeNumber(bigDecimal0);
      assertEquals(76, toXmlGenerator0.getFormatFeatures());
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("j-n#/");
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(mockFileOutputStream0);
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      ISOLatin1XmlWriter iSOLatin1XmlWriter0 = new ISOLatin1XmlWriter(objectOutputStream0, writerConfig0, true);
      NonNsStreamWriter nonNsStreamWriter0 = new NonNsStreamWriter(iSOLatin1XmlWriter0, "j-n#/", writerConfig0);
      StreamWriter2Delegate streamWriter2Delegate0 = new StreamWriter2Delegate(nonNsStreamWriter0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator((IOContext) null, (-2137), (-2137), objectMapper0, streamWriter2Delegate0);
      QName qName0 = new QName("j-n#/", "j-n#/", "j-n#/");
      toXmlGenerator0.setNextNameIfMissing(qName0);
      toXmlGenerator0.writeStartObject((Object) qName0);
      toXmlGenerator0.writeFieldName("j-n#/");
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      // Undeclared exception!
//      try { 
        toXmlGenerator0.writeNumber(bigDecimal0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.codehaus.stax2.util.StreamWriter2Delegate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      StreamWriter2Delegate streamWriter2Delegate0 = new StreamWriter2Delegate((XMLStreamWriter2) null);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator((IOContext) null, (-3095), (-3095), objectMapper0, streamWriter2Delegate0);
      toXmlGenerator0._nextIsUnwrapped = true;
      QName qName0 = new QName("^5H%XoK*^c89133GI", "^5H%XoK*^c89133GI", "^5H%XoK*^c89133GI");
      toXmlGenerator0.setNextNameIfMissing(qName0);
      BigDecimal bigDecimal0 = new BigDecimal(56320);
      // Undeclared exception!
//      try { 
        toXmlGenerator0.writeNumber(bigDecimal0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.codehaus.stax2.util.StreamWriterDelegate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      StreamWriter2Delegate streamWriter2Delegate0 = new StreamWriter2Delegate((XMLStreamWriter2) null);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator((IOContext) null, (-3057), (-3057), objectMapper0, streamWriter2Delegate0);
      toXmlGenerator0._nextIsUnwrapped = true;
      QName qName0 = new QName("^5H%XoK*c89133GI", "^5H%XoK*c89133GI", "^5H%XoK*c89133GI");
      toXmlGenerator0.setNextNameIfMissing(qName0);
      BigDecimal bigDecimal0 = new BigDecimal(1000000000L);
      // Undeclared exception!
//      try { 
        toXmlGenerator0.writeNumber(bigDecimal0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.codehaus.stax2.util.StreamWriter2Delegate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      StreamWriter2Delegate streamWriter2Delegate0 = new StreamWriter2Delegate((XMLStreamWriter2) null);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator((IOContext) null, 1778, 1778, objectMapper0, streamWriter2Delegate0);
      toXmlGenerator0._nextIsAttribute = true;
      QName qName0 = new QName("", "");
      toXmlGenerator0.setNextNameIfMissing(qName0);
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      // Undeclared exception!
//      try { 
        toXmlGenerator0.writeNumber(bigDecimal0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.codehaus.stax2.util.StreamWriterDelegate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("UTF16_BE");
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(mockFileOutputStream0);
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      ISOLatin1XmlWriter iSOLatin1XmlWriter0 = new ISOLatin1XmlWriter(objectOutputStream0, writerConfig0, true);
      NonNsStreamWriter nonNsStreamWriter0 = new NonNsStreamWriter(iSOLatin1XmlWriter0, "UTF16_BE", writerConfig0);
      StreamWriter2Delegate streamWriter2Delegate0 = new StreamWriter2Delegate(nonNsStreamWriter0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator((IOContext) null, 18, (-2137), objectMapper0, streamWriter2Delegate0);
      // Undeclared exception!
//      try { 
        toXmlGenerator0.writeNumber((BigDecimal) null);
//        fail("Expecting exception: IllegalStateException");
      
//      } catch(IllegalStateException e) {
//         //
//         // No element/attribute name specified when trying to output element
//         //
//         verifyException("com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      StreamWriter2Delegate streamWriter2Delegate0 = new StreamWriter2Delegate((XMLStreamWriter2) null);
      QName qName0 = new QName("o[)0~#{i98!7 7", "o[)0~#{i98!7 7", "o[)0~#{i98!7 7");
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator((IOContext) null, 3541, 3541, objectMapper0, streamWriter2Delegate0);
      DefaultXmlPrettyPrinter defaultXmlPrettyPrinter0 = new DefaultXmlPrettyPrinter();
      toXmlGenerator0.setPrettyPrinter(defaultXmlPrettyPrinter0);
      toXmlGenerator0.setNextNameIfMissing(qName0);
      // Undeclared exception!
//      try { 
        toXmlGenerator0.writeNumber((float) 3541);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.codehaus.stax2.util.StreamWriter2Delegate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      StreamWriter2Delegate streamWriter2Delegate0 = new StreamWriter2Delegate((XMLStreamWriter2) null);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator((IOContext) null, 2170, 2170, objectMapper0, streamWriter2Delegate0);
      toXmlGenerator0._nextIsUnwrapped = true;
      QName qName0 = new QName("^5H%XoK*c89133GI", "^5H%XoK*c89133GI", "^5H%XoK*c89133GI");
      toXmlGenerator0.setNextNameIfMissing(qName0);
      // Undeclared exception!
//      try { 
        toXmlGenerator0.writeNumber((float) 2170);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.codehaus.stax2.util.StreamWriter2Delegate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      StreamWriter2Delegate streamWriter2Delegate0 = new StreamWriter2Delegate((XMLStreamWriter2) null);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator((IOContext) null, 2170, 2170, objectMapper0, streamWriter2Delegate0);
      toXmlGenerator0._nextIsAttribute = true;
      QName qName0 = new QName("^5H%XoK*c89133GI");
      toXmlGenerator0.setNextNameIfMissing(qName0);
      // Undeclared exception!
//      try { 
        toXmlGenerator0.writeNumber((float) 2170);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.codehaus.stax2.util.StreamWriter2Delegate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper((JsonFactory) null);
      StreamWriter2Delegate streamWriter2Delegate0 = new StreamWriter2Delegate((XMLStreamWriter2) null);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator((IOContext) null, 1796, 1796, objectMapper0, streamWriter2Delegate0);
      // Undeclared exception!
//      try { 
        toXmlGenerator0.writeNumber((float) 55296);
//        fail("Expecting exception: IllegalStateException");
      
//      } catch(IllegalStateException e) {
//         //
//         // No element/attribute name specified when trying to output element
//         //
//         verifyException("com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("j-n#$");
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(mockFileOutputStream0);
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      ISOLatin1XmlWriter iSOLatin1XmlWriter0 = new ISOLatin1XmlWriter(objectOutputStream0, writerConfig0, true);
      NonNsStreamWriter nonNsStreamWriter0 = new NonNsStreamWriter(iSOLatin1XmlWriter0, "j-n#$", writerConfig0);
      QName qName0 = new QName("j-n#$", "j-n#$", "j-n#$");
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator((IOContext) null, (-2137), 1712, objectMapper0, nonNsStreamWriter0);
      boolean boolean0 = toXmlGenerator0.setNextNameIfMissing(qName0);
      assertTrue(boolean0);
      
      DefaultXmlPrettyPrinter defaultXmlPrettyPrinter0 = new DefaultXmlPrettyPrinter();
      toXmlGenerator0._xmlPrettyPrinter = (XmlPrettyPrinter) defaultXmlPrettyPrinter0;
      toXmlGenerator0.writeNumber(0.0);
      assertEquals(1712, toXmlGenerator0.getFormatFeatures());
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      StreamWriter2Delegate streamWriter2Delegate0 = new StreamWriter2Delegate((XMLStreamWriter2) null);
      QName qName0 = QName.valueOf("ktm~{r");
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator((IOContext) null, 2519, 2519, objectMapper0, streamWriter2Delegate0);
      toXmlGenerator0.setNextNameIfMissing(qName0);
      toXmlGenerator0.setNextIsUnwrapped(true);
      // Undeclared exception!
//      try { 
        toXmlGenerator0.writeNumber((double) 56319);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.codehaus.stax2.util.StreamWriter2Delegate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      StreamWriter2Delegate streamWriter2Delegate0 = new StreamWriter2Delegate((XMLStreamWriter2) null);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator((IOContext) null, 1810, 1810, objectMapper0, streamWriter2Delegate0);
      QName qName0 = new QName("Unrecognized primitive type: ", "Unrecognized primitive type: ", "Unrecognized primitive type: ");
      toXmlGenerator0.setNextNameIfMissing(qName0);
      toXmlGenerator0.setNextIsAttribute(true);
      // Undeclared exception!
//      try { 
        toXmlGenerator0.writeNumber((double) 1810);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.codehaus.stax2.util.StreamWriter2Delegate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      JsonFactory jsonFactory0 = new JsonFactory();
      BufferRecycler bufferRecycler0 = jsonFactory0._getBufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, objectMapper0, true);
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      NonNsStreamWriter nonNsStreamWriter0 = new NonNsStreamWriter((XmlWriter) null, "JSON", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 2, 0, objectMapper0, nonNsStreamWriter0);
      // Undeclared exception!
//      try { 
        toXmlGenerator0.writeNumber((double) 3);
//        fail("Expecting exception: IllegalStateException");
      
//      } catch(IllegalStateException e) {
//         //
//         // No element/attribute name specified when trying to output element
//         //
//         verifyException("com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      StreamWriter2Delegate streamWriter2Delegate0 = new StreamWriter2Delegate((XMLStreamWriter2) null);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator((IOContext) null, 1838, 1838, objectMapper0, streamWriter2Delegate0);
      toXmlGenerator0.useDefaultPrettyPrinter();
      QName qName0 = new QName("write raw ;ovalue", "write raw ;ovalue", "write raw ;ovalue");
      toXmlGenerator0.setNextNameIfMissing(qName0);
      // Undeclared exception!
//      try { 
        toXmlGenerator0.writeNumber((long) 1838);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.codehaus.stax2.util.StreamWriter2Delegate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      StreamWriter2Delegate streamWriter2Delegate0 = new StreamWriter2Delegate((XMLStreamWriter2) null);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator((IOContext) null, 1838, 1838, objectMapper0, streamWriter2Delegate0);
      QName qName0 = new QName("write raw ;ovalue");
      toXmlGenerator0.setNextNameIfMissing(qName0);
      toXmlGenerator0.setNextIsUnwrapped(true);
      // Undeclared exception!
//      try { 
        toXmlGenerator0.writeNumber(134L);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.codehaus.stax2.util.StreamWriter2Delegate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("$VALUE!s}S");
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(mockFileOutputStream0);
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      ISOLatin1XmlWriter iSOLatin1XmlWriter0 = new ISOLatin1XmlWriter(objectOutputStream0, writerConfig0, false);
      NonNsStreamWriter nonNsStreamWriter0 = new NonNsStreamWriter(iSOLatin1XmlWriter0, "$VALUE!s}S", writerConfig0);
      StreamWriter2Delegate streamWriter2Delegate0 = new StreamWriter2Delegate(nonNsStreamWriter0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator((IOContext) null, (-2145), (-2145), objectMapper0, streamWriter2Delegate0);
      QName qName0 = QName.valueOf("$VALUE!s}S");
      ToXmlGenerator.Feature toXmlGenerator_Feature0 = ToXmlGenerator.Feature.WRITE_XML_DECLARATION;
      toXmlGenerator0.setNextNameIfMissing(qName0);
      ToXmlGenerator toXmlGenerator1 = toXmlGenerator0.configure(toXmlGenerator_Feature0, false);
      toXmlGenerator1._nextIsAttribute = true;
      // Undeclared exception!
//      try { 
        toXmlGenerator1.writeNumber((long) 56319);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.codehaus.stax2.util.StreamWriter2Delegate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      ObjectMapper objectMapper0 = new ObjectMapper();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      FilterOutputStream filterOutputStream0 = new FilterOutputStream(byteArrayOutputStream0);
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      AsciiXmlWriter asciiXmlWriter0 = new AsciiXmlWriter(filterOutputStream0, writerConfig0, false);
      SimpleNsStreamWriter simpleNsStreamWriter0 = new SimpleNsStreamWriter(asciiXmlWriter0, (String) null, writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 0, (-3687), objectMapper0, simpleNsStreamWriter0);
      // Undeclared exception!
//      try { 
        toXmlGenerator0.writeNumber(0L);
//        fail("Expecting exception: IllegalStateException");
      
//      } catch(IllegalStateException e) {
//         //
//         // No element/attribute name specified when trying to output element
//         //
//         verifyException("com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      StreamWriter2Delegate streamWriter2Delegate0 = new StreamWriter2Delegate((XMLStreamWriter2) null);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator((IOContext) null, 2170, 2170, objectMapper0, streamWriter2Delegate0);
      toXmlGenerator0._nextIsUnwrapped = true;
      QName qName0 = new QName("^5H%XoK*c89133GI", "^5H%XoK*c89133GI", "^5H%XoK*c89133GI");
      toXmlGenerator0.setNextNameIfMissing(qName0);
      // Undeclared exception!
//      try { 
        toXmlGenerator0.writeNumber((-1587));
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.codehaus.stax2.util.StreamWriter2Delegate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      StreamWriter2Delegate streamWriter2Delegate0 = new StreamWriter2Delegate((XMLStreamWriter2) null);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator((IOContext) null, 1778, 1778, objectMapper0, streamWriter2Delegate0);
      toXmlGenerator0._nextIsAttribute = true;
      QName qName0 = new QName("", "");
      toXmlGenerator0.setNextNameIfMissing(qName0);
      // Undeclared exception!
//      try { 
        toXmlGenerator0.writeNumber(0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.codehaus.stax2.util.StreamWriter2Delegate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
      BufferRecycler bufferRecycler0 = jsonFactory0._getBufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, objectMapper0, true);
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      NonNsStreamWriter nonNsStreamWriter0 = new NonNsStreamWriter((XmlWriter) null, "JSON", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, (-69), (-1880), objectMapper0, nonNsStreamWriter0);
      // Undeclared exception!
//      try { 
        toXmlGenerator0.writeNumber(57343);
//        fail("Expecting exception: IllegalStateException");
      
//      } catch(IllegalStateException e) {
//         //
//         // No element/attribute name specified when trying to output element
//         //
//         verifyException("com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      StreamWriter2Delegate streamWriter2Delegate0 = new StreamWriter2Delegate((XMLStreamWriter2) null);
      QName qName0 = new QName("L)ft =C>RBk");
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator((IOContext) null, (-1648), (-1648), objectMapper0, streamWriter2Delegate0);
      toXmlGenerator0.setNextNameIfMissing(qName0);
      toXmlGenerator0.useDefaultPrettyPrinter();
      // Undeclared exception!
//      try { 
        toXmlGenerator0.writeNull();
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.codehaus.stax2.util.StreamWriter2Delegate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      StreamWriter2Delegate streamWriter2Delegate0 = new StreamWriter2Delegate((XMLStreamWriter2) null);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator((IOContext) null, 2170, 2170, objectMapper0, streamWriter2Delegate0);
      toXmlGenerator0._nextIsUnwrapped = true;
      QName qName0 = new QName("^5H%XoK*c89133GI", "^5H%XoK*c89133GI", "^5H%XoK*c89133GI");
      boolean boolean0 = toXmlGenerator0.setNextNameIfMissing(qName0);
      assertTrue(boolean0);
      
      toXmlGenerator0.writeNull();
      assertEquals(2170, toXmlGenerator0.getFormatFeatures());
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      StreamWriter2Delegate streamWriter2Delegate0 = new StreamWriter2Delegate((XMLStreamWriter2) null);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator((IOContext) null, 1778, 1778, objectMapper0, streamWriter2Delegate0);
      toXmlGenerator0._nextIsAttribute = true;
      QName qName0 = new QName("", "");
      boolean boolean0 = toXmlGenerator0.setNextNameIfMissing(qName0);
      assertTrue(boolean0);
      
      toXmlGenerator0.writeEmbeddedObject((Object) null);
      assertEquals(1778, toXmlGenerator0.getFormatFeatures());
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("/ALD!s}S");
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(mockFileOutputStream0);
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      ISOLatin1XmlWriter iSOLatin1XmlWriter0 = new ISOLatin1XmlWriter(objectOutputStream0, writerConfig0, false);
      RepairingNsStreamWriter repairingNsStreamWriter0 = new RepairingNsStreamWriter(iSOLatin1XmlWriter0, "],5+jUZ[Wxw^Q&", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator((IOContext) null, (-2158), (-2158), objectMapper0, repairingNsStreamWriter0);
      QName qName0 = new QName("],5+jUZ[Wxw^Q&");
      boolean boolean0 = toXmlGenerator0.setNextNameIfMissing(qName0);
      assertTrue(boolean0);
      
      DefaultXmlPrettyPrinter defaultXmlPrettyPrinter0 = new DefaultXmlPrettyPrinter();
      toXmlGenerator0._xmlPrettyPrinter = (XmlPrettyPrinter) defaultXmlPrettyPrinter0;
      toXmlGenerator0.writeStartObject((Object) repairingNsStreamWriter0);
      toXmlGenerator0.writeFieldName("/ALD!s}S");
      toXmlGenerator0.writeBoolean(true);
      assertEquals((-2158), toXmlGenerator0.getFormatFeatures());
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      StreamWriter2Delegate streamWriter2Delegate0 = new StreamWriter2Delegate((XMLStreamWriter2) null);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator((IOContext) null, 835, 4, objectMapper0, streamWriter2Delegate0);
      QName qName0 = new QName("");
      toXmlGenerator0.setNextIsUnwrapped(true);
      toXmlGenerator0.setNextNameIfMissing(qName0);
      // Undeclared exception!
//      try { 
        toXmlGenerator0.writeBoolean(true);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.codehaus.stax2.util.StreamWriter2Delegate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      StreamWriter2Delegate streamWriter2Delegate0 = new StreamWriter2Delegate((XMLStreamWriter2) null);
      QName qName0 = new QName("K0Y7[1w3R`HGc");
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator((IOContext) null, (-6), (-6), objectMapper0, streamWriter2Delegate0);
      toXmlGenerator0._nextIsAttribute = true;
      toXmlGenerator0.setNextNameIfMissing(qName0);
      // Undeclared exception!
//      try { 
        toXmlGenerator0.writeBoolean(true);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.codehaus.stax2.util.StreamWriter2Delegate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      ObjectMapper objectMapper0 = new ObjectMapper((JsonFactory) null, defaultSerializerProvider_Impl0, defaultDeserializationContext_Impl0);
      FilterOutputStream filterOutputStream0 = new FilterOutputStream((OutputStream) null);
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      ISOLatin1XmlWriter iSOLatin1XmlWriter0 = new ISOLatin1XmlWriter(filterOutputStream0, writerConfig0, false);
      RepairingNsStreamWriter repairingNsStreamWriter0 = new RepairingNsStreamWriter(iSOLatin1XmlWriter0, "", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 3, 1, objectMapper0, repairingNsStreamWriter0);
      // Undeclared exception!
//      try { 
        toXmlGenerator0.writeBoolean(false);
//        fail("Expecting exception: IllegalStateException");
      
//      } catch(IllegalStateException e) {
//         //
//         // No element/attribute name specified when trying to output element
//         //
//         verifyException("com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      StreamWriter2Delegate streamWriter2Delegate0 = new StreamWriter2Delegate((XMLStreamWriter2) null);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator((IOContext) null, 831, 831, objectMapper0, streamWriter2Delegate0);
      QName qName0 = new QName("}%", "}%");
      toXmlGenerator0.setNextNameIfMissing(qName0);
      toXmlGenerator0.useDefaultPrettyPrinter();
      byte[] byteArray0 = new byte[1];
      // Undeclared exception!
//      try { 
        toXmlGenerator0.writeBinary(byteArray0, 55296, 831);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.codehaus.stax2.util.StreamWriter2Delegate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      StreamWriter2Delegate streamWriter2Delegate0 = new StreamWriter2Delegate((XMLStreamWriter2) null);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator((IOContext) null, 2170, 2170, objectMapper0, streamWriter2Delegate0);
      toXmlGenerator0._nextIsUnwrapped = true;
      QName qName0 = new QName("^5H%XoK*c89133GI", "^5H%XoK*c89133GI", "^5H%XoK*c89133GI");
      toXmlGenerator0.setNextNameIfMissing(qName0);
      byte[] byteArray0 = new byte[6];
      // Undeclared exception!
//      try { 
        toXmlGenerator0.writeBinary(byteArray0, (int) (byte) (-12), (int) (byte)64);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.codehaus.stax2.util.StreamWriter2Delegate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      StreamWriter2Delegate streamWriter2Delegate0 = new StreamWriter2Delegate((XMLStreamWriter2) null);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator((IOContext) null, 1778, 1778, objectMapper0, streamWriter2Delegate0);
      toXmlGenerator0._nextIsAttribute = true;
      QName qName0 = new QName("", "");
      toXmlGenerator0.setNextNameIfMissing(qName0);
      byte[] byteArray0 = new byte[0];
      // Undeclared exception!
//      try { 
        toXmlGenerator0.writeBinary(byteArray0, 56319, (-2549));
//        fail("Expecting exception: NegativeArraySizeException");
      
//      } catch(NegativeArraySizeException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      ISOLatin1XmlWriter iSOLatin1XmlWriter0 = new ISOLatin1XmlWriter((OutputStream) null, writerConfig0, false);
      NonNsStreamWriter nonNsStreamWriter0 = new NonNsStreamWriter(iSOLatin1XmlWriter0, "", writerConfig0);
      StreamWriterDelegate streamWriterDelegate0 = new StreamWriterDelegate(nonNsStreamWriter0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator((IOContext) null, 38, 118, objectMapper0, streamWriterDelegate0);
      char[] charArray0 = new char[5];
//      try { 
        toXmlGenerator0.writeRaw(charArray0, 53, 53);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Underlying Stax XMLStreamWriter (of type org.codehaus.stax2.util.StreamWriterDelegate) does not implement Stax2 API natively and is missing method 'writeRaw': this breaks functionality such as indentation that relies on it. You need to upgrade to using compliant Stax implementation like Woodstox or Aalto
//         //
//         verifyException("com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      ObjectMapper objectMapper0 = new ObjectMapper((JsonFactory) null);
      WriterConfig writerConfig0 = WriterConfig.createJ2MEDefaults();
      NonNsStreamWriter nonNsStreamWriter0 = new NonNsStreamWriter((XmlWriter) null, "write null value", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 55, 0, objectMapper0, nonNsStreamWriter0);
      char[] charArray0 = new char[8];
      // Undeclared exception!
//      try { 
        toXmlGenerator0.writeRaw(charArray0, 4, 2);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.ctc.wstx.sw.BaseStreamWriter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      JsonFactory jsonFactory0 = new JsonFactory();
      BufferRecycler bufferRecycler0 = jsonFactory0._getBufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      WriterConfig writerConfig0 = WriterConfig.createJ2MEDefaults();
      NonNsStreamWriter nonNsStreamWriter0 = new NonNsStreamWriter((XmlWriter) null, "!sLkRCT%Bp2:])Pn7", writerConfig0);
      StreamWriterDelegate streamWriterDelegate0 = new StreamWriterDelegate(nonNsStreamWriter0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 0, (-2429), objectMapper0, streamWriterDelegate0);
//      try { 
        toXmlGenerator0.writeRaw("JSON", 2, 1);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Underlying Stax XMLStreamWriter (of type org.codehaus.stax2.util.StreamWriterDelegate) does not implement Stax2 API natively and is missing method 'writeRaw': this breaks functionality such as indentation that relies on it. You need to upgrade to using compliant Stax implementation like Woodstox or Aalto
//         //
//         verifyException("com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, false);
      ObjectMapper objectMapper0 = new ObjectMapper((JsonFactory) null);
      WriterConfig writerConfig0 = WriterConfig.createJ2MEDefaults();
      NonNsStreamWriter nonNsStreamWriter0 = new NonNsStreamWriter((XmlWriter) null, (String) null, writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 842, 1951, objectMapper0, nonNsStreamWriter0);
      // Undeclared exception!
//      try { 
        toXmlGenerator0.writeRaw((String) null, (-810), (-1));
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.ctc.wstx.sw.BaseStreamWriter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      ObjectMapper objectMapper0 = new ObjectMapper();
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      AsciiXmlWriter asciiXmlWriter0 = new AsciiXmlWriter((OutputStream) null, writerConfig0, true);
      SimpleNsStreamWriter simpleNsStreamWriter0 = new SimpleNsStreamWriter(asciiXmlWriter0, "*,s-wT#lux{? 7", writerConfig0);
      StreamWriterDelegate streamWriterDelegate0 = new StreamWriterDelegate(simpleNsStreamWriter0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 0, (-65281), objectMapper0, streamWriterDelegate0);
//      try { 
        toXmlGenerator0.writeRaw("r,-mp$GK$?E8");
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Underlying Stax XMLStreamWriter (of type org.codehaus.stax2.util.StreamWriterDelegate) does not implement Stax2 API natively and is missing method 'writeRaw': this breaks functionality such as indentation that relies on it. You need to upgrade to using compliant Stax implementation like Woodstox or Aalto
//         //
//         verifyException("com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      StreamWriter2Delegate streamWriter2Delegate0 = new StreamWriter2Delegate((XMLStreamWriter2) null);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator((IOContext) null, (-1), (-1), objectMapper0, streamWriter2Delegate0);
      QName qName0 = new QName("[q&$9lk8Mx");
      toXmlGenerator0.setNextIsAttribute(true);
      toXmlGenerator0.setNextNameIfMissing(qName0);
      // Undeclared exception!
//      try { 
        toXmlGenerator0.writeRawValue((char[]) null, (-1), (-1));
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      StreamWriter2Delegate streamWriter2Delegate0 = new StreamWriter2Delegate((XMLStreamWriter2) null);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator((IOContext) null, (-1), (-1), objectMapper0, streamWriter2Delegate0);
      QName qName0 = new QName("[q&$9lk8Mx");
      toXmlGenerator0.setNextNameIfMissing(qName0);
      // Undeclared exception!
//      try { 
        toXmlGenerator0.writeRawValue((char[]) null, (-1), (-1));
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.codehaus.stax2.util.StreamWriterDelegate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper((JsonFactory) null);
      StreamWriter2Delegate streamWriter2Delegate0 = new StreamWriter2Delegate((XMLStreamWriter2) null);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator((IOContext) null, 1796, 1796, objectMapper0, streamWriter2Delegate0);
      char[] charArray0 = new char[5];
      // Undeclared exception!
//      try { 
        toXmlGenerator0.writeRawValue(charArray0, (-128), 1796);
//        fail("Expecting exception: IllegalStateException");
      
//      } catch(IllegalStateException e) {
//         //
//         // No element/attribute name specified when trying to output element
//         //
//         verifyException("com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      StreamWriter2Delegate streamWriter2Delegate0 = new StreamWriter2Delegate((XMLStreamWriter2) null);
      QName qName0 = new QName("SOAP-ENC", "SOAP-ENC", "SOAP-ENC");
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator((IOContext) null, (-2597), (-2597), objectMapper0, streamWriter2Delegate0);
      toXmlGenerator0._nextIsAttribute = true;
      toXmlGenerator0.setNextNameIfMissing(qName0);
      // Undeclared exception!
//      try { 
        toXmlGenerator0.writeRawValue("SOAP-ENC", (-2597), 57343);
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      IOContext iOContext0 = new IOContext((BufferRecycler) null, (Object) null, true);
      ObjectMapper objectMapper0 = new ObjectMapper();
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(432);
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      AsciiXmlWriter asciiXmlWriter0 = new AsciiXmlWriter(byteArrayBuilder0, writerConfig0, true);
      SimpleNsStreamWriter simpleNsStreamWriter0 = new SimpleNsStreamWriter(asciiXmlWriter0, "JSON", writerConfig0);
      StreamWriterDelegate streamWriterDelegate0 = new StreamWriterDelegate(simpleNsStreamWriter0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 1, 1, objectMapper0, streamWriterDelegate0);
//      try { 
        toXmlGenerator0.writeRawValue("", 3665, 1);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Underlying Stax XMLStreamWriter (of type org.codehaus.stax2.util.StreamWriterDelegate) does not implement Stax2 API natively and is missing method 'writeRawValue': this breaks functionality such as indentation that relies on it. You need to upgrade to using compliant Stax implementation like Woodstox or Aalto
//         //
//         verifyException("com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
      BufferRecycler bufferRecycler0 = jsonFactory0._getBufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      MockFile mockFile0 = new MockFile("[row,col,system-id]: ", "type");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      DataOutputStream dataOutputStream0 = new DataOutputStream(byteArrayBuilder0);
      BufferingXmlWriter bufferingXmlWriter0 = new BufferingXmlWriter(mockPrintWriter0, writerConfig0, "", false, dataOutputStream0, 2);
      NonNsStreamWriter nonNsStreamWriter0 = new NonNsStreamWriter(bufferingXmlWriter0, "com.fasterxml.jackson.databind.deser.std.StringArrayDeserializer", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 2, 2047, objectMapper0, nonNsStreamWriter0);
      // Undeclared exception!
//      try { 
        toXmlGenerator0.writeRawValue("", 1, 1);
//        fail("Expecting exception: IllegalStateException");
      
//      } catch(IllegalStateException e) {
//         //
//         // No element/attribute name specified when trying to output element
//         //
//         verifyException("com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      StreamWriter2Delegate streamWriter2Delegate0 = new StreamWriter2Delegate((XMLStreamWriter2) null);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator((IOContext) null, 2170, 2170, objectMapper0, streamWriter2Delegate0);
      toXmlGenerator0._nextIsAttribute = true;
      QName qName0 = new QName("^5H%XoK*c89133GI");
      toXmlGenerator0.setNextNameIfMissing(qName0);
      // Undeclared exception!
//      try { 
        toXmlGenerator0.writeRawValue("^5H%XoK*c89133GI");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.codehaus.stax2.util.StreamWriterDelegate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("UTF16_BE");
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(mockFileOutputStream0);
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      ISOLatin1XmlWriter iSOLatin1XmlWriter0 = new ISOLatin1XmlWriter(objectOutputStream0, writerConfig0, true);
      NonNsStreamWriter nonNsStreamWriter0 = new NonNsStreamWriter(iSOLatin1XmlWriter0, "UTF16_BE", writerConfig0);
      StreamWriter2Delegate streamWriter2Delegate0 = new StreamWriter2Delegate(nonNsStreamWriter0);
      StreamWriterDelegate streamWriterDelegate0 = new StreamWriterDelegate(streamWriter2Delegate0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator((IOContext) null, (-2677), (-2145), objectMapper0, streamWriterDelegate0);
//      try { 
        toXmlGenerator0.writeRawValue("UTF16_BE");
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Underlying Stax XMLStreamWriter (of type org.codehaus.stax2.util.StreamWriterDelegate) does not implement Stax2 API natively and is missing method 'writeRawValue': this breaks functionality such as indentation that relies on it. You need to upgrade to using compliant Stax implementation like Woodstox or Aalto
//         //
//         verifyException("com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      StreamWriter2Delegate streamWriter2Delegate0 = new StreamWriter2Delegate((XMLStreamWriter2) null);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator((IOContext) null, 1847, 1847, objectMapper0, streamWriter2Delegate0);
      // Undeclared exception!
//      try { 
        toXmlGenerator0.writeRawValue("com.ctc.wstx.io.WstxInputLocation");
//        fail("Expecting exception: IllegalStateException");
      
//      } catch(IllegalStateException e) {
//         //
//         // No element/attribute name specified when trying to output element
//         //
//         verifyException("com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      WriterConfig writerConfig0 = WriterConfig.createJ2MEDefaults();
      ISOLatin1XmlWriter iSOLatin1XmlWriter0 = new ISOLatin1XmlWriter((OutputStream) null, writerConfig0, true);
      SimpleNsStreamWriter simpleNsStreamWriter0 = new SimpleNsStreamWriter(iSOLatin1XmlWriter0, "false", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator((IOContext) null, 95, 95, objectMapper0, simpleNsStreamWriter0);
      QName qName0 = new QName("wX", "", "!n#@_^5?_b4az8");
      toXmlGenerator0.setNextNameIfMissing(qName0);
      toXmlGenerator0.useDefaultPrettyPrinter();
      char[] charArray0 = new char[5];
//      try { 
        toXmlGenerator0.writeString(charArray0, (-2232), (-1443));
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Unbound namespace URI 'wX'
//         //
//         verifyException("com.fasterxml.jackson.dataformat.xml.util.StaxUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      StreamWriter2Delegate streamWriter2Delegate0 = new StreamWriter2Delegate((XMLStreamWriter2) null);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator((IOContext) null, (-3062), (-3062), objectMapper0, streamWriter2Delegate0);
      toXmlGenerator0._nextIsUnwrapped = true;
      toXmlGenerator0.setNextIsCData(true);
      QName qName0 = new QName("write boolean valuee", "write boolean valuee", "write boolean valuee");
      toXmlGenerator0.setNextNameIfMissing(qName0);
      // Undeclared exception!
//      try { 
        toXmlGenerator0.writeString((char[]) null, (-3062), (-3062));
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.codehaus.stax2.util.StreamWriter2Delegate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      StreamWriter2Delegate streamWriter2Delegate0 = new StreamWriter2Delegate((XMLStreamWriter2) null);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator((IOContext) null, (-3062), (-3062), objectMapper0, streamWriter2Delegate0);
      toXmlGenerator0._nextIsUnwrapped = true;
      QName qName0 = new QName("write boolean valuee", "write boolean valuee", "write boolean valuee");
      toXmlGenerator0.setNextNameIfMissing(qName0);
      // Undeclared exception!
//      try { 
        toXmlGenerator0.writeString((char[]) null, (-3062), (-3062));
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.codehaus.stax2.util.StreamWriterDelegate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("UY.]86_Mjb");
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      ISOLatin1XmlWriter iSOLatin1XmlWriter0 = new ISOLatin1XmlWriter(mockFileOutputStream0, writerConfig0, true);
      NonNsStreamWriter nonNsStreamWriter0 = new NonNsStreamWriter(iSOLatin1XmlWriter0, "UY.]86_Mjb", writerConfig0);
      StreamWriter2Delegate streamWriter2Delegate0 = new StreamWriter2Delegate(nonNsStreamWriter0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator((IOContext) null, 2591, 2591, objectMapper0, streamWriter2Delegate0);
      toXmlGenerator0.setNextIsAttribute(true);
      QName qName0 = new QName("UY.]86_Mjb");
      toXmlGenerator0.setNextNameIfMissing(qName0);
      char[] charArray0 = new char[13];
      // Undeclared exception!
//      try { 
        toXmlGenerator0.writeString(charArray0, 2591, 2591);
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      ObjectMapper objectMapper0 = new ObjectMapper((JsonFactory) null);
      WriterConfig writerConfig0 = WriterConfig.createJ2MEDefaults();
      RepairingNsStreamWriter repairingNsStreamWriter0 = new RepairingNsStreamWriter((XmlWriter) null, "5}DZ|Y5ITxyald", writerConfig0);
      StreamWriterDelegate streamWriterDelegate0 = new StreamWriterDelegate(repairingNsStreamWriter0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 3, 779, objectMapper0, streamWriterDelegate0);
      char[] charArray0 = new char[2];
      // Undeclared exception!
//      try { 
        toXmlGenerator0.writeString(charArray0, 1796, 3);
//        fail("Expecting exception: IllegalStateException");
      
//      } catch(IllegalStateException e) {
//         //
//         // No element/attribute name specified when trying to output element
//         //
//         verifyException("com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("~YSN[6_M3");
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      ISOLatin1XmlWriter iSOLatin1XmlWriter0 = new ISOLatin1XmlWriter(mockFileOutputStream0, writerConfig0, true);
      NonNsStreamWriter nonNsStreamWriter0 = new NonNsStreamWriter(iSOLatin1XmlWriter0, "~YSN[6_M3", writerConfig0);
      StreamWriter2Delegate streamWriter2Delegate0 = new StreamWriter2Delegate(nonNsStreamWriter0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator((IOContext) null, 111, 111, objectMapper0, streamWriter2Delegate0);
      QName qName0 = new QName("~YSN[6_M3", "~YSN[6_M3", "~YSN[6_M3");
      toXmlGenerator0.setNextIsCData(true);
      boolean boolean0 = toXmlGenerator0.setNextNameIfMissing(qName0);
      assertTrue(boolean0);
      
      toXmlGenerator0.writeString("~YSN[6_M3");
      assertEquals(111, toXmlGenerator0.getFormatFeatures());
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("~YSN[6_M3");
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      ISOLatin1XmlWriter iSOLatin1XmlWriter0 = new ISOLatin1XmlWriter(mockFileOutputStream0, writerConfig0, true);
      NonNsStreamWriter nonNsStreamWriter0 = new NonNsStreamWriter(iSOLatin1XmlWriter0, "~YSN[6_M3", writerConfig0);
      StreamWriter2Delegate streamWriter2Delegate0 = new StreamWriter2Delegate(nonNsStreamWriter0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator((IOContext) null, 111, 111, objectMapper0, streamWriter2Delegate0);
      QName qName0 = new QName("~YSN[6_M3", "~YSN[6_M3", "~YSN[6_M3");
      toXmlGenerator0.useDefaultPrettyPrinter();
      toXmlGenerator0.setNextNameIfMissing(qName0);
      // Undeclared exception!
//      try { 
        toXmlGenerator0.writeString("t@zbe:G!|+");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.codehaus.stax2.util.StreamWriter2Delegate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      StreamWriter2Delegate streamWriter2Delegate0 = new StreamWriter2Delegate((XMLStreamWriter2) null);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator((IOContext) null, 2170, 2170, objectMapper0, streamWriter2Delegate0);
      toXmlGenerator0._nextIsUnwrapped = true;
      QName qName0 = new QName("^5H%XoK*c89133GI");
      toXmlGenerator0.setNextNameIfMissing(qName0);
      // Undeclared exception!
//      try { 
        toXmlGenerator0.writeString("^5H%XoK*c89133GI");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.codehaus.stax2.util.StreamWriterDelegate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      StreamWriter2Delegate streamWriter2Delegate0 = new StreamWriter2Delegate((XMLStreamWriter2) null);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator((IOContext) null, 1778, 1778, objectMapper0, streamWriter2Delegate0);
      toXmlGenerator0._nextIsAttribute = true;
      QName qName0 = new QName("C{q{JV-1ZN", "wXZC*n}Z3", "com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator$Feature");
      toXmlGenerator0.setNextNameIfMissing(qName0);
      // Undeclared exception!
//      try { 
        toXmlGenerator0.writeString("com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator$Feature");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.codehaus.stax2.util.StreamWriterDelegate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("j-n#/");
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(mockFileOutputStream0);
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      ISOLatin1XmlWriter iSOLatin1XmlWriter0 = new ISOLatin1XmlWriter(objectOutputStream0, writerConfig0, true);
      NonNsStreamWriter nonNsStreamWriter0 = new NonNsStreamWriter(iSOLatin1XmlWriter0, "j-n#/", writerConfig0);
      StreamWriter2Delegate streamWriter2Delegate0 = new StreamWriter2Delegate(nonNsStreamWriter0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator((IOContext) null, (-2137), (-2137), objectMapper0, streamWriter2Delegate0);
      QName qName0 = new QName("j-n#/", "j-n#/");
      toXmlGenerator0.setNextNameIfMissing(qName0);
      toXmlGenerator0.writeStartObject((Object) qName0);
      toXmlGenerator0.writeEndObject();
//      try { 
        toXmlGenerator0.writeNull();
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Trying to output second root, <j-n#/>
//         //
//         verifyException("com.fasterxml.jackson.dataformat.xml.util.StaxUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      ObjectMapper objectMapper0 = new ObjectMapper();
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      AsciiXmlWriter asciiXmlWriter0 = new AsciiXmlWriter(byteArrayBuilder0, writerConfig0, false);
      SimpleNsStreamWriter simpleNsStreamWriter0 = new SimpleNsStreamWriter(asciiXmlWriter0, "tKeLxZP%>;{=", writerConfig0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, asciiXmlWriter0, false);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 4, 90, objectMapper0, simpleNsStreamWriter0);
//      try { 
        toXmlGenerator0._handleEndObject();
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Can not write END_ELEMENT without open START_ELEMENT
//         //
//         verifyException("com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      ObjectMapper objectMapper0 = new ObjectMapper();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      FilterOutputStream filterOutputStream0 = new FilterOutputStream(byteArrayOutputStream0);
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      AsciiXmlWriter asciiXmlWriter0 = new AsciiXmlWriter(filterOutputStream0, writerConfig0, false);
      SimpleNsStreamWriter simpleNsStreamWriter0 = new SimpleNsStreamWriter(asciiXmlWriter0, (String) null, writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, (-3687), 3, objectMapper0, simpleNsStreamWriter0);
      // Undeclared exception!
//      try { 
        toXmlGenerator0.writeStartObject();
//        fail("Expecting exception: IllegalStateException");
      
//      } catch(IllegalStateException e) {
//         //
//         // No element/attribute name specified when trying to output element
//         //
//         verifyException("com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      ObjectMapper objectMapper0 = new ObjectMapper();
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(2);
      WriterConfig writerConfig0 = WriterConfig.createJ2MEDefaults();
      AsciiXmlWriter asciiXmlWriter0 = new AsciiXmlWriter(byteArrayBuilder0, writerConfig0, false);
      NonNsStreamWriter nonNsStreamWriter0 = new NonNsStreamWriter(asciiXmlWriter0, "h}$,-iU$9CGelMs^K", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 0, 0, objectMapper0, nonNsStreamWriter0);
//      try { 
        toXmlGenerator0.writeEndObject();
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Current context not Object but root
//         //
//         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      StreamWriter2Delegate streamWriter2Delegate0 = new StreamWriter2Delegate((XMLStreamWriter2) null);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator((IOContext) null, 1776, 1776, objectMapper0, streamWriter2Delegate0);
      toXmlGenerator0.useDefaultPrettyPrinter();
      toXmlGenerator0.writeStartArray();
      toXmlGenerator0.writeEndArray();
      assertEquals(1776, toXmlGenerator0.getFormatFeatures());
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("Cannot pass null resolver");
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      AsciiXmlWriter asciiXmlWriter0 = new AsciiXmlWriter(mockFileOutputStream0, writerConfig0, true);
      NonNsStreamWriter nonNsStreamWriter0 = new NonNsStreamWriter(asciiXmlWriter0, "", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator((IOContext) null, 2047, 2047, objectMapper0, nonNsStreamWriter0);
      QName qName0 = new QName("SF6TQ4(%vO");
      boolean boolean0 = toXmlGenerator0.setNextNameIfMissing(qName0);
      assertTrue(boolean0);
      
      toXmlGenerator0.writeStartObject((Object) "Cannot pass null resolver");
      toXmlGenerator0.writeObjectField("Cannot pass null resolver", nonNsStreamWriter0);
      assertEquals(2047, toXmlGenerator0.getFormatFeatures());
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      StreamWriter2Delegate streamWriter2Delegate0 = new StreamWriter2Delegate((XMLStreamWriter2) null);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator((IOContext) null, 1847, 1847, objectMapper0, streamWriter2Delegate0);
      QName qName0 = new QName("com.ctc.wstx.io.WstxInputLocation", "com.ctc.wstx.io.WstxInputLocation", "com.ctc.wstx.io.WstxInputLocation");
      toXmlGenerator0.setNextNameIfMissing(qName0);
//      try { 
        toXmlGenerator0.writeRepeatedFieldName();
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Can not write a field name, expecting a value
//         //
//         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("UTF16_BE");
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(mockFileOutputStream0);
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      ISOLatin1XmlWriter iSOLatin1XmlWriter0 = new ISOLatin1XmlWriter(objectOutputStream0, writerConfig0, true);
      NonNsStreamWriter nonNsStreamWriter0 = new NonNsStreamWriter(iSOLatin1XmlWriter0, "UTF16_BE", writerConfig0);
      StreamWriter2Delegate streamWriter2Delegate0 = new StreamWriter2Delegate(nonNsStreamWriter0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator((IOContext) null, 18, (-2151), objectMapper0, streamWriter2Delegate0);
      QName qName0 = QName.valueOf("UTF16_BE");
      boolean boolean0 = toXmlGenerator0.setNextNameIfMissing(qName0);
      assertTrue(boolean0);
      
      toXmlGenerator0.writeStartObject((Object) "UTF16_BE");
      toXmlGenerator0.writeRepeatedFieldName();
      assertEquals((-2151), toXmlGenerator0.getFormatFeatures());
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      StreamWriter2Delegate streamWriter2Delegate0 = new StreamWriter2Delegate((XMLStreamWriter2) null);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator((IOContext) null, 224, 224, objectMapper0, streamWriter2Delegate0);
      toXmlGenerator0.useDefaultPrettyPrinter();
      QName qName0 = QName.valueOf("com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator");
      // Undeclared exception!
//      try { 
        toXmlGenerator0.finishWrappedValue(qName0, qName0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.codehaus.stax2.util.StreamWriter2Delegate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper((JsonFactory) null);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      WriterConfig writerConfig0 = WriterConfig.createJ2MEDefaults();
      ISOLatin1XmlWriter iSOLatin1XmlWriter0 = new ISOLatin1XmlWriter(byteArrayBuilder0, writerConfig0, true);
      RepairingNsStreamWriter repairingNsStreamWriter0 = new RepairingNsStreamWriter(iSOLatin1XmlWriter0, "JSON", writerConfig0);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Version version0 = new Version(2, 2, 3, "JSON", "JSON", "B<$)=+&CzWZWlu.2nq");
      SimpleModule simpleModule0 = new SimpleModule(version0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, simpleModule0, true);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 0, 4, objectMapper0, repairingNsStreamWriter0);
      QName qName0 = QName.valueOf("");
//      try { 
        toXmlGenerator0.finishWrappedValue(qName0, qName0);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // No open start element, when trying to write end element
//         //
//         verifyException("com.fasterxml.jackson.dataformat.xml.util.StaxUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0.BYTE_READ_IO_BUFFER, false);
      ObjectMapper objectMapper0 = new ObjectMapper((JsonFactory) null);
      WriterConfig writerConfig0 = WriterConfig.createJ2MEDefaults();
      RepairingNsStreamWriter repairingNsStreamWriter0 = new RepairingNsStreamWriter((XmlWriter) null, "5}DZ|Y5ITxyald", writerConfig0);
      StreamWriterDelegate streamWriterDelegate0 = new StreamWriterDelegate(repairingNsStreamWriter0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 1, 1, objectMapper0, streamWriterDelegate0);
      toXmlGenerator0.finishWrappedValue((QName) null, (QName) null);
      assertEquals(1, toXmlGenerator0.getFormatFeatures());
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      StreamWriter2Delegate streamWriter2Delegate0 = new StreamWriter2Delegate((XMLStreamWriter2) null);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator((IOContext) null, 2584, 2584, objectMapper0, streamWriter2Delegate0);
      DefaultXmlPrettyPrinter defaultXmlPrettyPrinter0 = new DefaultXmlPrettyPrinter();
      toXmlGenerator0._xmlPrettyPrinter = (XmlPrettyPrinter) defaultXmlPrettyPrinter0;
      QName qName0 = new QName(") does not implement Stax2 API natively and is missing method '", ") does not implement Stax2 API natively and is missing method '");
      // Undeclared exception!
//      try { 
        toXmlGenerator0.startWrappedValue(qName0, qName0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.codehaus.stax2.util.StreamWriter2Delegate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("$VALUE!s}S");
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      ISOLatin1XmlWriter iSOLatin1XmlWriter0 = new ISOLatin1XmlWriter(mockFileOutputStream0, writerConfig0, false);
      SimpleNsStreamWriter simpleNsStreamWriter0 = new SimpleNsStreamWriter(iSOLatin1XmlWriter0, "Q)#t&", writerConfig0);
      StreamWriterDelegate streamWriterDelegate0 = new StreamWriterDelegate(simpleNsStreamWriter0);
      XMLStreamWriter2 xMLStreamWriter2_0 = Stax2WriterAdapter.wrapIfNecessary(streamWriterDelegate0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator((IOContext) null, (-2145), 1, objectMapper0, xMLStreamWriter2_0);
      QName qName0 = QName.valueOf("Can not ");
      toXmlGenerator0.startWrappedValue((QName) null, qName0);
      assertEquals(1, toXmlGenerator0.getFormatFeatures());
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      StreamWriter2Delegate streamWriter2Delegate0 = new StreamWriter2Delegate((XMLStreamWriter2) null);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator((IOContext) null, 2170, 2170, objectMapper0, streamWriter2Delegate0);
      QName qName0 = new QName("^5H%XoK*c89133GI", "^5H%XoK*c89133GI", "^5H%XoK*c89133GI");
      boolean boolean0 = toXmlGenerator0.setNextNameIfMissing(qName0);
      boolean boolean1 = toXmlGenerator0.setNextNameIfMissing(qName0);
      assertFalse(boolean1 == boolean0);
      assertEquals(2170, toXmlGenerator0.getFormatFeatures());
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      JsonFactory jsonFactory0 = new JsonFactory();
      BufferRecycler bufferRecycler0 = jsonFactory0._getBufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, objectMapper0, true);
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      NonNsStreamWriter nonNsStreamWriter0 = new NonNsStreamWriter((XmlWriter) null, "JSON", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 2, 0, objectMapper0, nonNsStreamWriter0);
      ToXmlGenerator.Feature toXmlGenerator_Feature0 = ToXmlGenerator.Feature.WRITE_XML_DECLARATION;
      ToXmlGenerator toXmlGenerator1 = toXmlGenerator0.configure(toXmlGenerator_Feature0, false);
      assertEquals(0, toXmlGenerator1.getFormatFeatures());
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      MockFileWriter mockFileWriter0 = new MockFileWriter("writeRawValue", false);
      WriterConfig writerConfig0 = WriterConfig.createJ2MEDefaults();
      BufferingXmlWriter bufferingXmlWriter0 = new BufferingXmlWriter(mockFileWriter0, writerConfig0, (String) null, false, (OutputStream) null, (-3537));
      NonNsStreamWriter nonNsStreamWriter0 = new NonNsStreamWriter(bufferingXmlWriter0, "writeRawValue", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator((IOContext) null, (-1527), (-3537), objectMapper0, nonNsStreamWriter0);
      ToXmlGenerator.Feature toXmlGenerator_Feature0 = ToXmlGenerator.Feature.WRITE_XML_1_1;
      boolean boolean0 = toXmlGenerator0.isEnabled(toXmlGenerator_Feature0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, objectMapper0, true);
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      NonNsStreamWriter nonNsStreamWriter0 = new NonNsStreamWriter((XmlWriter) null, "JSON", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, (-69), (-1880), objectMapper0, nonNsStreamWriter0);
      ToXmlGenerator.Feature toXmlGenerator_Feature0 = ToXmlGenerator.Feature.WRITE_XML_DECLARATION;
      boolean boolean0 = toXmlGenerator0.isEnabled(toXmlGenerator_Feature0);
      assertFalse(boolean0);
      assertEquals((-1880), toXmlGenerator0.getFormatFeatures());
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper((JsonFactory) null);
      StreamWriter2Delegate streamWriter2Delegate0 = new StreamWriter2Delegate((XMLStreamWriter2) null);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator((IOContext) null, 1796, 1796, objectMapper0, streamWriter2Delegate0);
      toXmlGenerator0.overrideFormatFeatures(2, 2);
      assertEquals(1798, toXmlGenerator0.getFormatFeatures());
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      JsonFactory jsonFactory0 = new JsonFactory();
      BufferRecycler bufferRecycler0 = jsonFactory0._getBufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, objectMapper0, true);
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      NonNsStreamWriter nonNsStreamWriter0 = new NonNsStreamWriter((XmlWriter) null, "JSON", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 2, 0, objectMapper0, nonNsStreamWriter0);
      JsonGenerator jsonGenerator0 = toXmlGenerator0.overrideFormatFeatures(2673, 2);
      assertEquals(0, jsonGenerator0.getFormatFeatures());
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      ISOLatin1XmlWriter iSOLatin1XmlWriter0 = new ISOLatin1XmlWriter((OutputStream) null, writerConfig0, true);
      NonNsStreamWriter nonNsStreamWriter0 = new NonNsStreamWriter(iSOLatin1XmlWriter0, "VW^\"R;l)CxPjV", writerConfig0);
      StreamWriterDelegate streamWriterDelegate0 = new StreamWriterDelegate(nonNsStreamWriter0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator((IOContext) null, 3107, 3107, objectMapper0, streamWriterDelegate0);
      toXmlGenerator0.useDefaultPrettyPrinter();
      toXmlGenerator0.initGenerator();
      assertEquals("1.1", nonNsStreamWriter0.getXmlVersion());
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      ISOLatin1XmlWriter iSOLatin1XmlWriter0 = new ISOLatin1XmlWriter((OutputStream) null, writerConfig0, true);
      NonNsStreamWriter nonNsStreamWriter0 = new NonNsStreamWriter(iSOLatin1XmlWriter0, "", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator((IOContext) null, 1847, 1847, objectMapper0, nonNsStreamWriter0);
      toXmlGenerator0.useDefaultPrettyPrinter();
      toXmlGenerator0.initGenerator();
      assertEquals("UTF-8", nonNsStreamWriter0.getEncoding());
      assertEquals("1.1", nonNsStreamWriter0.getXmlVersion());
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
      BufferRecycler bufferRecycler0 = jsonFactory0._getBufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, objectMapper0, true);
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      NonNsStreamWriter nonNsStreamWriter0 = new NonNsStreamWriter((XmlWriter) null, "JSON", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, (-69), (-1880), objectMapper0, nonNsStreamWriter0);
      toXmlGenerator0.initGenerator();
      assertEquals((-1880), toXmlGenerator0.getFormatFeatures());
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      JsonFactory jsonFactory0 = new JsonFactory();
      BufferRecycler bufferRecycler0 = jsonFactory0._getBufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, objectMapper0, true);
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      ISOLatin1XmlWriter iSOLatin1XmlWriter0 = new ISOLatin1XmlWriter(byteArrayOutputStream0, writerConfig0, true);
      SimpleNsStreamWriter simpleNsStreamWriter0 = new SimpleNsStreamWriter(iSOLatin1XmlWriter0, "", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 0, 1017, objectMapper0, simpleNsStreamWriter0);
      ToXmlGenerator.Feature toXmlGenerator_Feature0 = ToXmlGenerator.Feature.WRITE_XML_1_1;
      toXmlGenerator0.configure(toXmlGenerator_Feature0, true);
      toXmlGenerator0.initGenerator();
      assertEquals("UTF-8", simpleNsStreamWriter0.getEncoding());
      assertEquals("1.1", simpleNsStreamWriter0.getXmlVersion());
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0, 2);
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      ISOLatin1XmlWriter iSOLatin1XmlWriter0 = new ISOLatin1XmlWriter(byteArrayBuilder0, writerConfig0, false);
      NonNsStreamWriter nonNsStreamWriter0 = new NonNsStreamWriter(iSOLatin1XmlWriter0, "1.0", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator((IOContext) null, 3, 1, objectMapper0, nonNsStreamWriter0);
      toXmlGenerator0.initGenerator();
      toXmlGenerator0.initGenerator();
      assertEquals(1, toXmlGenerator0.getFormatFeatures());
      assertEquals("1.0", nonNsStreamWriter0.getXmlVersion());
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      int int0 = ToXmlGenerator.Feature.collectDefaults();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      ObjectMapper objectMapper0 = new ObjectMapper((JsonFactory) null);
      FilterOutputStream filterOutputStream0 = new FilterOutputStream((OutputStream) null);
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      ISOLatin1XmlWriter iSOLatin1XmlWriter0 = new ISOLatin1XmlWriter(filterOutputStream0, writerConfig0, false);
      RepairingNsStreamWriter repairingNsStreamWriter0 = new RepairingNsStreamWriter(iSOLatin1XmlWriter0, "", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 3, 1, objectMapper0, repairingNsStreamWriter0);
      // Undeclared exception!
//      try { 
        toXmlGenerator0.writeNumber("IM-Qy)]qZFo`.*s");
//        fail("Expecting exception: IllegalStateException");
      
//      } catch(IllegalStateException e) {
//         //
//         // No element/attribute name specified when trying to output element
//         //
//         verifyException("com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper((JsonFactory) null);
      StreamWriter2Delegate streamWriter2Delegate0 = new StreamWriter2Delegate((XMLStreamWriter2) null);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator((IOContext) null, 1806, 1806, objectMapper0, streamWriter2Delegate0);
      byte[] byteArray0 = new byte[9];
      // Undeclared exception!
//      try { 
        toXmlGenerator0.writeRawUTF8String(byteArray0, 1796, (byte)4);
//        fail("Expecting exception: UnsupportedOperationException");
      
//      } catch(UnsupportedOperationException e) {
//         //
//         // Operation not supported by generator of type com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator
//         //
//         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      StreamWriter2Delegate streamWriter2Delegate0 = new StreamWriter2Delegate((XMLStreamWriter2) null);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator((IOContext) null, 224, 224, objectMapper0, streamWriter2Delegate0);
      boolean boolean0 = toXmlGenerator0.canWriteFormattedNumbers();
      assertEquals(224, toXmlGenerator0.getFormatFeatures());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
      BufferRecycler bufferRecycler0 = jsonFactory0._getBufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, objectMapper0, true);
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      NonNsStreamWriter nonNsStreamWriter0 = new NonNsStreamWriter((XmlWriter) null, "JSON", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, (-69), (-1880), objectMapper0, nonNsStreamWriter0);
      Object object0 = toXmlGenerator0.getOutputTarget();
      assertEquals((-1880), toXmlGenerator0.getFormatFeatures());
      assertNotNull(object0);
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("UTF16_BE");
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(mockFileOutputStream0);
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      ISOLatin1XmlWriter iSOLatin1XmlWriter0 = new ISOLatin1XmlWriter(objectOutputStream0, writerConfig0, true);
      NonNsStreamWriter nonNsStreamWriter0 = new NonNsStreamWriter(iSOLatin1XmlWriter0, "UTF16_BE", writerConfig0);
      StreamWriter2Delegate streamWriter2Delegate0 = new StreamWriter2Delegate(nonNsStreamWriter0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator((IOContext) null, 18, (-2151), objectMapper0, streamWriter2Delegate0);
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      // Undeclared exception!
//      try { 
        toXmlGenerator0.writeString((SerializableString) serializedString0);
//        fail("Expecting exception: IllegalStateException");
      
//      } catch(IllegalStateException e) {
//         //
//         // No element/attribute name specified when trying to output element
//         //
//         verifyException("com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      JsonFactory jsonFactory0 = new JsonFactory();
      BufferRecycler bufferRecycler0 = jsonFactory0._getBufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, objectMapper0, true);
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      ISOLatin1XmlWriter iSOLatin1XmlWriter0 = new ISOLatin1XmlWriter(byteArrayOutputStream0, writerConfig0, true);
      SimpleNsStreamWriter simpleNsStreamWriter0 = new SimpleNsStreamWriter(iSOLatin1XmlWriter0, "", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 0, 1017, objectMapper0, simpleNsStreamWriter0);
      toXmlGenerator0.getStaxWriter();
      assertEquals(1017, toXmlGenerator0.getFormatFeatures());
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      ToXmlGenerator.Feature toXmlGenerator_Feature0 = ToXmlGenerator.Feature.WRITE_XML_1_1;
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, toXmlGenerator_Feature0, false);
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      WriterConfig writerConfig0 = WriterConfig.createJ2MEDefaults();
      ISOLatin1XmlWriter iSOLatin1XmlWriter0 = new ISOLatin1XmlWriter(byteArrayBuilder0, writerConfig0, false);
      RepairingNsStreamWriter repairingNsStreamWriter0 = new RepairingNsStreamWriter(iSOLatin1XmlWriter0, "Unrecognized field \"%s\" (class %s), not marked as ignorable", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 0, 3, objectMapper0, repairingNsStreamWriter0);
      int int0 = toXmlGenerator0.getFormatFeatures();
      assertEquals(3, int0);
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      JsonFactory jsonFactory0 = new JsonFactory();
      BufferRecycler bufferRecycler0 = jsonFactory0._getBufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, objectMapper0, true);
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      NonNsStreamWriter nonNsStreamWriter0 = new NonNsStreamWriter((XmlWriter) null, "JSON", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 2, 0, objectMapper0, nonNsStreamWriter0);
      toXmlGenerator0._constructDefaultPrettyPrinter();
      assertEquals(0, toXmlGenerator0.getFormatFeatures());
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
      BufferRecycler bufferRecycler0 = jsonFactory0._getBufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, objectMapper0, true);
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      NonNsStreamWriter nonNsStreamWriter0 = new NonNsStreamWriter((XmlWriter) null, "JSON", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 3, 2, objectMapper0, nonNsStreamWriter0);
      SerializedString serializedString0 = new SerializedString("JSON");
      // Undeclared exception!
//      try { 
        toXmlGenerator0.writeRawValue((SerializableString) serializedString0);
//        fail("Expecting exception: UnsupportedOperationException");
      
//      } catch(UnsupportedOperationException e) {
//         //
//         // Operation not supported by generator of type com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator
//         //
//         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      ObjectMapper objectMapper0 = new ObjectMapper((JsonFactory) null, defaultSerializerProvider_Impl0, defaultDeserializationContext_Impl0);
      FilterOutputStream filterOutputStream0 = new FilterOutputStream((OutputStream) null);
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      ISOLatin1XmlWriter iSOLatin1XmlWriter0 = new ISOLatin1XmlWriter(filterOutputStream0, writerConfig0, false);
      RepairingNsStreamWriter repairingNsStreamWriter0 = new RepairingNsStreamWriter(iSOLatin1XmlWriter0, "", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 1, 2, objectMapper0, repairingNsStreamWriter0);
      toXmlGenerator0.setNextName((QName) null);
      assertEquals(2, toXmlGenerator0.getFormatFeatures());
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0.BYTE_READ_IO_BUFFER, false);
      ObjectMapper objectMapper0 = new ObjectMapper((JsonFactory) null);
      WriterConfig writerConfig0 = WriterConfig.createJ2MEDefaults();
      RepairingNsStreamWriter repairingNsStreamWriter0 = new RepairingNsStreamWriter((XmlWriter) null, "5}DZ|Y5ITxyald", writerConfig0);
      StreamWriterDelegate streamWriterDelegate0 = new StreamWriterDelegate(repairingNsStreamWriter0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 1, 1, objectMapper0, streamWriterDelegate0);
      int int0 = toXmlGenerator0.getOutputBuffered();
      assertEquals((-1), int0);
      assertEquals(1, toXmlGenerator0.getFormatFeatures());
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "", true);
      JsonFactory jsonFactory0 = new JsonFactory();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0, defaultSerializerProvider_Impl0, defaultDeserializationContext_Impl0);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0);
      WriterConfig writerConfig0 = WriterConfig.createJ2MEDefaults();
      AsciiXmlWriter asciiXmlWriter0 = new AsciiXmlWriter(byteArrayBuilder0, writerConfig0, true);
      NonNsStreamWriter nonNsStreamWriter0 = new NonNsStreamWriter(asciiXmlWriter0, "I5jnNZ~|dCto)F=", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 1, (-1797), objectMapper0, nonNsStreamWriter0);
      // Undeclared exception!
//      try { 
        toXmlGenerator0.writeUTF8String(byteArrayBuilder0.NO_BYTES, 57343, 1219);
//        fail("Expecting exception: UnsupportedOperationException");
      
//      } catch(UnsupportedOperationException e) {
//         //
//         // Operation not supported by generator of type com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator
//         //
//         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
      BufferRecycler bufferRecycler0 = jsonFactory0._getBufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, objectMapper0, true);
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      NonNsStreamWriter nonNsStreamWriter0 = new NonNsStreamWriter((XmlWriter) null, "tFjCfV.>P/~5#", writerConfig0);
      StreamWriterDelegate streamWriterDelegate0 = new StreamWriterDelegate(nonNsStreamWriter0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 1, 3, objectMapper0, streamWriterDelegate0);
//      try { 
        toXmlGenerator0.writeRawValue((char[]) null, 2001, 1380);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Underlying Stax XMLStreamWriter (of type org.codehaus.stax2.util.StreamWriterDelegate) does not implement Stax2 API natively and is missing method 'writeRawValue': this breaks functionality such as indentation that relies on it. You need to upgrade to using compliant Stax implementation like Woodstox or Aalto
//         //
//         verifyException("com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, false);
      ObjectMapper objectMapper0 = new ObjectMapper((JsonFactory) null);
      WriterConfig writerConfig0 = WriterConfig.createJ2MEDefaults();
      NonNsStreamWriter nonNsStreamWriter0 = new NonNsStreamWriter((XmlWriter) null, "", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 2, 2, objectMapper0, nonNsStreamWriter0);
//      try { 
        toXmlGenerator0.writeStringField("Current event not START_ELEMENT", "com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer");
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Can not write a field name, expecting a value
//         //
//         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
      BufferRecycler bufferRecycler0 = jsonFactory0._getBufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, objectMapper0, true);
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      NonNsStreamWriter nonNsStreamWriter0 = new NonNsStreamWriter((XmlWriter) null, "JSON", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, (-69), (-1880), objectMapper0, nonNsStreamWriter0);
      ToXmlGenerator.Feature toXmlGenerator_Feature0 = ToXmlGenerator.Feature.WRITE_XML_DECLARATION;
      toXmlGenerator0.disable(toXmlGenerator_Feature0);
      assertEquals((-1880), toXmlGenerator0.getFormatFeatures());
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      ObjectMapper objectMapper0 = new ObjectMapper((JsonFactory) null);
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      NonNsStreamWriter nonNsStreamWriter0 = new NonNsStreamWriter((XmlWriter) null, (String) null, writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 1, 1, objectMapper0, nonNsStreamWriter0);
      MinimalPrettyPrinter minimalPrettyPrinter0 = new MinimalPrettyPrinter();
      JsonGenerator jsonGenerator0 = toXmlGenerator0.setPrettyPrinter(minimalPrettyPrinter0);
      // Undeclared exception!
//      try { 
        jsonGenerator0.writeStartObject();
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.ctc.wstx.sw.BaseStreamWriter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
      BufferRecycler bufferRecycler0 = jsonFactory0._getBufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, objectMapper0, true);
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      NonNsStreamWriter nonNsStreamWriter0 = new NonNsStreamWriter((XmlWriter) null, "JSON", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, (-1880), 2, objectMapper0, nonNsStreamWriter0);
      // Undeclared exception!
//      try { 
        toXmlGenerator0.writeFieldName((SerializableString) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, objectMapper0, true);
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      NonNsStreamWriter nonNsStreamWriter0 = new NonNsStreamWriter((XmlWriter) null, "JSON", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, (-69), (-1880), objectMapper0, nonNsStreamWriter0);
      toXmlGenerator0.inRoot();
      assertEquals((-1880), toXmlGenerator0.getFormatFeatures());
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      ObjectMapper objectMapper0 = new ObjectMapper((JsonFactory) null, defaultSerializerProvider_Impl0, defaultDeserializationContext_Impl0);
      FilterOutputStream filterOutputStream0 = new FilterOutputStream((OutputStream) null);
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      ISOLatin1XmlWriter iSOLatin1XmlWriter0 = new ISOLatin1XmlWriter(filterOutputStream0, writerConfig0, false);
      RepairingNsStreamWriter repairingNsStreamWriter0 = new RepairingNsStreamWriter(iSOLatin1XmlWriter0, "", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 1, 2, objectMapper0, repairingNsStreamWriter0);
      BigDecimal bigDecimal0 = new BigDecimal((-1087));
      // Undeclared exception!
//      try { 
        toXmlGenerator0.writeNumber(bigDecimal0);
//        fail("Expecting exception: IllegalStateException");
      
//      } catch(IllegalStateException e) {
//         //
//         // No element/attribute name specified when trying to output element
//         //
//         verifyException("com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      NonNsStreamWriter nonNsStreamWriter0 = new NonNsStreamWriter((XmlWriter) null, "1", writerConfig0);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, objectMapper0, false);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, (-3232), 2, objectMapper0, nonNsStreamWriter0);
      toXmlGenerator0._releaseBuffers();
      assertEquals(2, toXmlGenerator0.getFormatFeatures());
  }
}
