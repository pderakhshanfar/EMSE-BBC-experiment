/*
 * This file was automatically generated by EvoSuite
 * Fri Oct 22 01:01:36 GMT 2021
 */

package com.fasterxml.jackson.dataformat.xml.ser;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.ctc.wstx.api.WriterConfig;
import com.ctc.wstx.sw.AsciiXmlWriter;
import com.ctc.wstx.sw.BufferingXmlWriter;
import com.ctc.wstx.sw.ISOLatin1XmlWriter;
import com.ctc.wstx.sw.NonNsStreamWriter;
import com.ctc.wstx.sw.RepairingNsStreamWriter;
import com.ctc.wstx.sw.SimpleNsStreamWriter;
import com.ctc.wstx.sw.XmlWriter;
import com.fasterxml.jackson.annotation.ObjectIdGenerator;
import com.fasterxml.jackson.core.Base64Variant;
import com.fasterxml.jackson.core.FormatSchema;
import com.fasterxml.jackson.core.JsonFactory;
import com.fasterxml.jackson.core.JsonGenerator;
import com.fasterxml.jackson.core.ObjectCodec;
import com.fasterxml.jackson.core.PrettyPrinter;
import com.fasterxml.jackson.core.SerializableString;
import com.fasterxml.jackson.core.io.IOContext;
import com.fasterxml.jackson.core.io.SerializedString;
import com.fasterxml.jackson.core.util.BufferRecycler;
import com.fasterxml.jackson.core.util.ByteArrayBuilder;
import com.fasterxml.jackson.core.util.DefaultPrettyPrinter;
import com.fasterxml.jackson.core.util.MinimalPrettyPrinter;
import com.fasterxml.jackson.databind.JavaType;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.ObjectReader;
import com.fasterxml.jackson.databind.PropertyName;
import com.fasterxml.jackson.databind.cfg.DeserializerFactoryConfig;
import com.fasterxml.jackson.databind.deser.BeanDeserializerFactory;
import com.fasterxml.jackson.databind.deser.DefaultDeserializationContext;
import com.fasterxml.jackson.databind.module.SimpleModule;
import com.fasterxml.jackson.databind.node.JsonNodeFactory;
import com.fasterxml.jackson.databind.ser.DefaultSerializerProvider;
import com.fasterxml.jackson.databind.ser.impl.ObjectIdWriter;
import com.fasterxml.jackson.databind.type.MapType;
import com.fasterxml.jackson.databind.type.SimpleType;
import com.fasterxml.jackson.databind.type.TypeBindings;
import com.fasterxml.jackson.dataformat.xml.XmlPrettyPrinter;
import com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator;
import com.fasterxml.jackson.dataformat.xml.util.DefaultXmlPrettyPrinter;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.ByteArrayOutputStream;
import java.io.DataOutputStream;
import java.io.File;
import java.io.FileDescriptor;
import java.io.IOException;
import java.io.OutputStream;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.PipedWriter;
import java.io.Writer;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.util.Locale;
import javax.xml.namespace.QName;
import javax.xml.stream.XMLStreamWriter;
import org.codehaus.stax2.XMLStreamWriter2;
import org.codehaus.stax2.util.StreamWriter2Delegate;
import org.codehaus.stax2.util.StreamWriterDelegate;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockFileWriter;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class ToXmlGenerator_ESTest extends ToXmlGenerator_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      StreamWriter2Delegate streamWriter2Delegate0 = new StreamWriter2Delegate((XMLStreamWriter2) null);
      QName qName0 = new QName("Current context not Object but ");
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator((IOContext) null, 3, 2, objectMapper0, streamWriter2Delegate0);
      toXmlGenerator0.setNextNameIfMissing(qName0);
      toXmlGenerator0.setNextIsAttribute(true);
      byte[] byteArray0 = new byte[1];
      // Undeclared exception!
//      try { 
        toXmlGenerator0.writeBinary(byteArray0, 0, 1000);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      StreamWriter2Delegate streamWriter2Delegate0 = new StreamWriter2Delegate((XMLStreamWriter2) null);
      QName qName0 = new QName("g-v#vH\"@@v");
      ObjectMapper objectMapper0 = new ObjectMapper();
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator((IOContext) null, 3, (-1620), objectMapper0, streamWriter2Delegate0);
      toXmlGenerator0.setNextNameIfMissing(qName0);
      toXmlGenerator0.setNextIsAttribute(true);
      byte[] byteArray0 = new byte[0];
      // Undeclared exception!
//      try { 
        toXmlGenerator0.writeBinary(byteArray0, (-3582), (-1853));
//        fail("Expecting exception: NegativeArraySizeException");
      
//      } catch(NegativeArraySizeException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      WriterConfig writerConfig0 = WriterConfig.createJ2MEDefaults();
      QName qName0 = new QName("^F<NW<x'QN~=%.`qg");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("^F<NW<x'QN~=%.`qg");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("^F<NW<x'QN~=%.`qg");
      BufferingXmlWriter bufferingXmlWriter0 = new BufferingXmlWriter(mockPrintWriter0, writerConfig0, "^F<NW<x'QN~=%.`qg", true, mockFileOutputStream0, 157);
      RepairingNsStreamWriter repairingNsStreamWriter0 = new RepairingNsStreamWriter(bufferingXmlWriter0, "^F<NW<x'QN~=%.`qg", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator((IOContext) null, 157, 157, objectMapper0, repairingNsStreamWriter0);
      boolean boolean0 = toXmlGenerator0.setNextNameIfMissing(qName0);
      assertTrue(boolean0);
      
      toXmlGenerator0.writeStartObject();
      toXmlGenerator0.writeRepeatedFieldName();
      toXmlGenerator0.writeNumber(2);
      assertEquals(157, toXmlGenerator0.getFormatFeatures());
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      WriterConfig writerConfig0 = WriterConfig.createJ2MEDefaults();
      QName qName0 = new QName("^F<NW<x'QN~=8%.`qg", "^F<NW<x'QN~=8%.`qg");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("^F<NW<x'QN~=8%.`qg");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("^F<NW<x'QN~=8%.`qg", true);
      BufferingXmlWriter bufferingXmlWriter0 = new BufferingXmlWriter(mockPrintWriter0, writerConfig0, "^F<NW<x'QN~=8%.`qg", true, mockFileOutputStream0, 89);
      RepairingNsStreamWriter repairingNsStreamWriter0 = new RepairingNsStreamWriter(bufferingXmlWriter0, "^F<NW<x'QN~=8%.`qg", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator((IOContext) null, 89, 89, objectMapper0, repairingNsStreamWriter0);
      boolean boolean0 = toXmlGenerator0.setNextNameIfMissing(qName0);
      assertTrue(boolean0);
      
      toXmlGenerator0.writeStartObject();
      Class<Locale> class0 = Locale.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      JavaType[] javaTypeArray0 = new JavaType[4];
      javaTypeArray0[2] = (JavaType) simpleType0;
      javaTypeArray0[3] = (JavaType) simpleType0;
      MapType mapType0 = MapType.construct((Class<?>) class0, (TypeBindings) null, (JavaType) simpleType0, javaTypeArray0, javaTypeArray0[3], javaTypeArray0[2]);
      PropertyName propertyName0 = PropertyName.construct("Mm*|]/TaG@<2{-4%*h", "Current context not Array but ");
      ObjectIdGenerator<BufferedInputStream> objectIdGenerator0 = (ObjectIdGenerator<BufferedInputStream>) mock(ObjectIdGenerator.class, new ViolatedAssumptionAnswer());
      ObjectIdWriter objectIdWriter0 = ObjectIdWriter.construct(mapType0, propertyName0, objectIdGenerator0, true);
      SerializedString serializedString0 = (SerializedString)objectIdWriter0.propertyName;
      toXmlGenerator0.writeFieldName((SerializableString) serializedString0);
      assertEquals(89, toXmlGenerator0.getFormatFeatures());
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      WriterConfig writerConfig0 = WriterConfig.createJ2MEDefaults();
      QName qName0 = new QName("", "", "^F<NW<x'QN~=%.`qg");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("HG6EdrP_?D[");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("^F<NW<x'QN~=%.`qg");
      BufferingXmlWriter bufferingXmlWriter0 = new BufferingXmlWriter(mockPrintWriter0, writerConfig0, "", true, mockFileOutputStream0, 157);
      RepairingNsStreamWriter repairingNsStreamWriter0 = new RepairingNsStreamWriter(bufferingXmlWriter0, "Qs", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator((IOContext) null, 157, 157, objectMapper0, repairingNsStreamWriter0);
      boolean boolean0 = toXmlGenerator0.setNextNameIfMissing(qName0);
      assertTrue(boolean0);
      
      toXmlGenerator0.writeStartObject();
      toXmlGenerator0.writeEndObject();
      assertEquals(157, toXmlGenerator0.getFormatFeatures());
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      SimpleModule simpleModule0 = new SimpleModule();
      IOContext iOContext0 = new IOContext(bufferRecycler0, simpleModule0, false);
      WriterConfig writerConfig0 = WriterConfig.createJ2MEDefaults();
      NonNsStreamWriter nonNsStreamWriter0 = new NonNsStreamWriter((XmlWriter) null, "", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 2, 2, (ObjectCodec) null, nonNsStreamWriter0);
      toXmlGenerator0.writeStartArray();
      toXmlGenerator0.writeEndArray();
      assertEquals(2, toXmlGenerator0.getFormatFeatures());
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      AsciiXmlWriter asciiXmlWriter0 = new AsciiXmlWriter(byteArrayOutputStream0, writerConfig0, true);
      NonNsStreamWriter nonNsStreamWriter0 = new NonNsStreamWriter(asciiXmlWriter0, "", writerConfig0);
      ObjectMapper objectMapper0 = new ObjectMapper();
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator((IOContext) null, 448, 132, objectMapper0, nonNsStreamWriter0);
      QName qName0 = new QName("!", "");
      boolean boolean0 = toXmlGenerator0.setNextNameIfMissing(qName0);
      assertTrue(boolean0);
      
      toXmlGenerator0.writeBoolean(true);
      assertEquals(132, toXmlGenerator0.getFormatFeatures());
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      StreamWriter2Delegate streamWriter2Delegate0 = new StreamWriter2Delegate((XMLStreamWriter2) null);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator((IOContext) null, 1, 1, objectMapper0, streamWriter2Delegate0);
      toXmlGenerator0._verifyValueWrite("");
      assertEquals(1, toXmlGenerator0.getFormatFeatures());
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      QName qName0 = QName.valueOf("]dYP]n*zXoCHq)");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("]dYP]n*zXoCHq)");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("P=1rs`5XU^9Szg");
      BufferingXmlWriter bufferingXmlWriter0 = new BufferingXmlWriter(mockPrintWriter0, writerConfig0, "]dYP]n*zXoCHq)", false, mockFileOutputStream0, 2472);
      RepairingNsStreamWriter repairingNsStreamWriter0 = new RepairingNsStreamWriter(bufferingXmlWriter0, "com.fasterxml.jackson.#ataformat.xml.sem.ToXmlGenerator", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator((IOContext) null, 2472, 2472, objectMapper0, repairingNsStreamWriter0);
      boolean boolean0 = toXmlGenerator0.setNextNameIfMissing(qName0);
      assertTrue(boolean0);
      
      toXmlGenerator0._handleStartObject();
      assertEquals(2472, toXmlGenerator0.getFormatFeatures());
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      ToXmlGenerator.Feature toXmlGenerator_Feature0 = ToXmlGenerator.Feature.WRITE_XML_DECLARATION;
      int int0 = toXmlGenerator_Feature0.getMask();
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      WriterConfig writerConfig0 = WriterConfig.createJ2MEDefaults();
      QName qName0 = new QName("^F<NW<x'QN~=%.`qg");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("^F<NW<x'QN~=%.`qg");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("^F<NW<x'QN~=%.`qg");
      BufferingXmlWriter bufferingXmlWriter0 = new BufferingXmlWriter(mockPrintWriter0, writerConfig0, "^F<NW<x'QN~=%.`qg", true, mockFileOutputStream0, 157);
      RepairingNsStreamWriter repairingNsStreamWriter0 = new RepairingNsStreamWriter(bufferingXmlWriter0, "^F<NW<x'QN~=%.`qg", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator((IOContext) null, 157, 157, objectMapper0, repairingNsStreamWriter0);
      boolean boolean0 = toXmlGenerator0.setNextNameIfMissing(qName0);
      assertTrue(boolean0);
      
      toXmlGenerator0.writeStartObject();
      toXmlGenerator0.writeStringField("^F<NW<x'QN~=%.`qg", "^F<NW<x'QN~=%.`qg");
      assertEquals(157, toXmlGenerator0.getFormatFeatures());
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(fileDescriptor0);
      WriterConfig writerConfig0 = WriterConfig.createJ2MEDefaults();
      ISOLatin1XmlWriter iSOLatin1XmlWriter0 = new ISOLatin1XmlWriter(mockFileOutputStream0, writerConfig0, true);
      SimpleNsStreamWriter simpleNsStreamWriter0 = new SimpleNsStreamWriter(iSOLatin1XmlWriter0, "Can not write a field name, expecting a value", writerConfig0);
      StreamWriter2Delegate streamWriter2Delegate0 = new StreamWriter2Delegate(simpleNsStreamWriter0);
      QName qName0 = QName.valueOf("INCONCLUSIVE");
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator((IOContext) null, 6000, 1454, (ObjectCodec) null, streamWriter2Delegate0);
      boolean boolean0 = toXmlGenerator0.setNextNameIfMissing(qName0);
      assertTrue(boolean0);
      
      toXmlGenerator0.writeString((char[]) null, 2970, (-17));
      assertEquals(1454, toXmlGenerator0.getFormatFeatures());
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      QName qName0 = new QName(" of constructor ", ", expecting field name");
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0);
      WriterConfig writerConfig0 = WriterConfig.createJ2MEDefaults();
      ISOLatin1XmlWriter iSOLatin1XmlWriter0 = new ISOLatin1XmlWriter(byteArrayBuilder0, writerConfig0, false);
      NonNsStreamWriter nonNsStreamWriter0 = new NonNsStreamWriter(iSOLatin1XmlWriter0, "", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 1, 3, (ObjectCodec) null, nonNsStreamWriter0);
      toXmlGenerator0.setNextNameIfMissing(qName0);
      char[] charArray0 = new char[6];
//      try { 
        toXmlGenerator0.writeRawValue(charArray0, 2, 3);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Invalid null character in text to output
//         //
//         verifyException("com.fasterxml.jackson.dataformat.xml.util.StaxUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(fileDescriptor0);
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      AsciiXmlWriter asciiXmlWriter0 = new AsciiXmlWriter(mockFileOutputStream0, writerConfig0, false);
      NonNsStreamWriter nonNsStreamWriter0 = new NonNsStreamWriter(asciiXmlWriter0, "\r*(Qm-%NiRM.!", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 2, 0, (ObjectCodec) null, nonNsStreamWriter0);
      QName qName0 = new QName("", "");
      boolean boolean0 = toXmlGenerator0.setNextNameIfMissing(qName0);
      assertTrue(boolean0);
      
      char[] charArray0 = new char[3];
      toXmlGenerator0.writeRawValue(charArray0, 101, (-1507));
      assertEquals(0, toXmlGenerator0.getFormatFeatures());
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      WriterConfig writerConfig0 = WriterConfig.createJ2MEDefaults();
      QName qName0 = new QName("]dYP]6#:z>oC%2q)", "]dYP]6#:z>oC%2q)");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("]dYP]6#:z>oC%2q)");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("P=1rs`5XU^9Szg");
      BufferingXmlWriter bufferingXmlWriter0 = new BufferingXmlWriter(mockPrintWriter0, writerConfig0, "]dYP]6#:z>oC%2q)", true, mockFileOutputStream0, 2405);
      RepairingNsStreamWriter repairingNsStreamWriter0 = new RepairingNsStreamWriter(bufferingXmlWriter0, "com.fasterxml.jackson.#ataformat.xml.sem.ToXmlGenerator", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator((IOContext) null, 2405, 2405, objectMapper0, repairingNsStreamWriter0);
      toXmlGenerator0.setNextNameIfMissing(qName0);
      SerializedString serializedString0 = PrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      toXmlGenerator0.writeString((SerializableString) serializedString0);
//      try { 
        toXmlGenerator0.writeRawValue("com.fasterxml.jackson.#ataformat.xml.sem.ToXmlGenerator", (-1716), 2);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Trying to output second root, <]dYP]6#:z>oC%2q)>
//         //
//         verifyException("com.fasterxml.jackson.dataformat.xml.util.StaxUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      QName qName0 = QName.valueOf("cgDWM'Ix6&uBCu");
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      BufferingXmlWriter bufferingXmlWriter0 = new BufferingXmlWriter((Writer) null, writerConfig0, "methodName", false, byteArrayOutputStream0, 3);
      RepairingNsStreamWriter repairingNsStreamWriter0 = new RepairingNsStreamWriter(bufferingXmlWriter0, "cgDWM'Ix6&uBCu", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator((IOContext) null, 2, 1, (ObjectCodec) null, repairingNsStreamWriter0);
      boolean boolean0 = toXmlGenerator0.setNextNameIfMissing(qName0);
      assertTrue(boolean0);
      
      toXmlGenerator0.writeRawValue("t2!?Ajw{eU$_`u3G", 816, (-1357));
      assertEquals(1, toXmlGenerator0.getFormatFeatures());
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      QName qName0 = new QName("Undeclared namespace prefix \"{0}\" (for attribute \"{1}\")", "Undeclared namespace prefix \"{0}\" (for attribute \"{1}\")");
      AsciiXmlWriter asciiXmlWriter0 = new AsciiXmlWriter((OutputStream) null, writerConfig0, true);
      SimpleNsStreamWriter simpleNsStreamWriter0 = new SimpleNsStreamWriter(asciiXmlWriter0, "Current context not Object but ", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 0, 1, (ObjectCodec) null, simpleNsStreamWriter0);
      toXmlGenerator0.setNextNameIfMissing(qName0);
//      try { 
        toXmlGenerator0.writeRawValue("Current context not Object but ");
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Unbound namespace URI 'Undeclared namespace prefix \"{0}\" (for attribute \"{1}\")'
//         //
//         verifyException("com.fasterxml.jackson.dataformat.xml.util.StaxUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      QName qName0 = QName.valueOf("]dYP]n*zXoCHq)");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("]dYP]n*zXoCHq)");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("P=1rs`5XU^9Szg");
      BufferingXmlWriter bufferingXmlWriter0 = new BufferingXmlWriter(mockPrintWriter0, writerConfig0, "]dYP]n*zXoCHq)", false, mockFileOutputStream0, 2472);
      RepairingNsStreamWriter repairingNsStreamWriter0 = new RepairingNsStreamWriter(bufferingXmlWriter0, "com.fasterxml.jacks}n.#ataformat.xml.sem.ToXmlGenerator", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator((IOContext) null, 2472, 2472, objectMapper0, repairingNsStreamWriter0);
      boolean boolean0 = toXmlGenerator0.setNextNameIfMissing(qName0);
      assertTrue(boolean0);
      
      toXmlGenerator0.writeRawValue("P=1rs`5XU^9Szg");
      assertEquals(2472, toXmlGenerator0.getFormatFeatures());
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      ObjectMapper objectMapper0 = new ObjectMapper();
      PipedWriter pipedWriter0 = new PipedWriter();
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0);
      BufferingXmlWriter bufferingXmlWriter0 = new BufferingXmlWriter(pipedWriter0, writerConfig0, (String) null, false, byteArrayBuilder0, 0);
      SimpleNsStreamWriter simpleNsStreamWriter0 = new SimpleNsStreamWriter(bufferingXmlWriter0, "{:lW", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 0, 2, objectMapper0, simpleNsStreamWriter0);
      char[] charArray0 = new char[9];
      toXmlGenerator0.writeRaw(charArray0, 2, 5);
      assertEquals(2, toXmlGenerator0.getFormatFeatures());
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      SimpleModule simpleModule0 = new SimpleModule();
      IOContext iOContext0 = new IOContext(bufferRecycler0, simpleModule0, false);
      MockPrintStream mockPrintStream0 = new MockPrintStream("Current context not Object but ");
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      ISOLatin1XmlWriter iSOLatin1XmlWriter0 = new ISOLatin1XmlWriter(mockPrintStream0, writerConfig0, false);
      NonNsStreamWriter nonNsStreamWriter0 = new NonNsStreamWriter(iSOLatin1XmlWriter0, "Current context not Object but ", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, (-2299), 3, (ObjectCodec) null, nonNsStreamWriter0);
      toXmlGenerator0.writeRaw("js@LbKS\u0003:", 0, (-339));
      assertEquals(3, toXmlGenerator0.getFormatFeatures());
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      ObjectMapper objectMapper0 = new ObjectMapper();
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0);
      ISOLatin1XmlWriter iSOLatin1XmlWriter0 = new ISOLatin1XmlWriter(byteArrayBuilder0, writerConfig0, false);
      NonNsStreamWriter nonNsStreamWriter0 = new NonNsStreamWriter(iSOLatin1XmlWriter0, "write String value", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 3, 3, objectMapper0, nonNsStreamWriter0);
      toXmlGenerator0.writeRaw('Y');
      assertEquals(3, toXmlGenerator0.getFormatFeatures());
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      StreamWriter2Delegate streamWriter2Delegate0 = new StreamWriter2Delegate((XMLStreamWriter2) null);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator((IOContext) null, 2, 2, objectMapper0, streamWriter2Delegate0);
      QName qName0 = new QName("Internal error: no handler for property with internal id ");
      ToXmlGenerator.Feature toXmlGenerator_Feature0 = ToXmlGenerator.Feature.WRITE_XML_1_1;
      ToXmlGenerator toXmlGenerator1 = toXmlGenerator0.enable(toXmlGenerator_Feature0);
      toXmlGenerator1._nextIsAttribute = true;
      boolean boolean0 = toXmlGenerator1.setNextNameIfMissing(qName0);
      assertTrue(boolean0);
      
      toXmlGenerator0.writeNumber((BigInteger) null);
      assertEquals(2, toXmlGenerator0.getFormatFeatures());
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(0);
      WriterConfig writerConfig0 = WriterConfig.createJ2MEDefaults();
      AsciiXmlWriter asciiXmlWriter0 = new AsciiXmlWriter(byteArrayOutputStream0, writerConfig0, true);
      NonNsStreamWriter nonNsStreamWriter0 = new NonNsStreamWriter(asciiXmlWriter0, "", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 653, 1, (ObjectCodec) null, nonNsStreamWriter0);
      QName qName0 = new QName("{@pk4b.n#xZQ", "");
      boolean boolean0 = toXmlGenerator0.setNextNameIfMissing(qName0);
      assertTrue(boolean0);
      
      toXmlGenerator0.writeNumber((BigDecimal) null);
      assertEquals(1, toXmlGenerator0.getFormatFeatures());
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      MockPrintStream mockPrintStream0 = new MockPrintStream(pipedOutputStream0, true);
      AsciiXmlWriter asciiXmlWriter0 = new AsciiXmlWriter(mockPrintStream0, writerConfig0, true);
      NonNsStreamWriter nonNsStreamWriter0 = new NonNsStreamWriter(asciiXmlWriter0, "", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator((IOContext) null, 0, 3, (ObjectCodec) null, nonNsStreamWriter0);
      QName qName0 = new QName("Can not write END_ELEMENT without open START_ELEMENT");
      toXmlGenerator0.startWrappedValue(qName0, qName0);
      toXmlGenerator0.writeNumber("");
      assertEquals(3, toXmlGenerator0.getFormatFeatures());
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      QName qName0 = QName.valueOf("]dYP]n*zXoCHq)");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("]dYP]n*zXoCHq)");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("P=1rs`5XU^9Szg");
      BufferingXmlWriter bufferingXmlWriter0 = new BufferingXmlWriter(mockPrintWriter0, writerConfig0, "&q8zz(@X+", false, mockFileOutputStream0, 2472);
      RepairingNsStreamWriter repairingNsStreamWriter0 = new RepairingNsStreamWriter(bufferingXmlWriter0, "com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator((IOContext) null, 2472, (-2106), objectMapper0, repairingNsStreamWriter0);
      boolean boolean0 = toXmlGenerator0.setNextNameIfMissing(qName0);
      assertTrue(boolean0);
      
      toXmlGenerator0.writeNumber((float) 55296);
      assertEquals((-2106), toXmlGenerator0.getFormatFeatures());
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("ZH/6^EEyg", false);
      BufferingXmlWriter bufferingXmlWriter0 = new BufferingXmlWriter((Writer) null, writerConfig0, "FF',", false, mockFileOutputStream0, (-306));
      NonNsStreamWriter nonNsStreamWriter0 = new NonNsStreamWriter(bufferingXmlWriter0, "FF',", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator((IOContext) null, 0, (-2336), (ObjectCodec) null, nonNsStreamWriter0);
      QName qName0 = new QName("ZH/6^EEyg", "kSQ>,,<bZle0|+k,w");
      boolean boolean0 = toXmlGenerator0.setNextNameIfMissing(qName0);
      assertTrue(boolean0);
      
      toXmlGenerator0.writeNumber(4.9E-324);
      assertEquals((-2336), toXmlGenerator0.getFormatFeatures());
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      SimpleNsStreamWriter simpleNsStreamWriter0 = new SimpleNsStreamWriter((XmlWriter) null, (String) null, writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 0, 3, (ObjectCodec) null, simpleNsStreamWriter0);
      QName qName0 = new QName("\"+5>s0K", "");
      toXmlGenerator0.setNextNameIfMissing(qName0);
//      try { 
        toXmlGenerator0.writeBoolean(true);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Unbound namespace URI '\"+5>s0K'
//         //
//         verifyException("com.fasterxml.jackson.dataformat.xml.util.StaxUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      QName qName0 = new QName("]dYP]n*zXoCHq)", "]dYP]n*zXoCHq)");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("]dYP]n*zXoCHq)");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("P=1rs`5XU^9Szg");
      BufferingXmlWriter bufferingXmlWriter0 = new BufferingXmlWriter(mockPrintWriter0, writerConfig0, "]dYP]n*zXoCHq)", false, mockFileOutputStream0, 2472);
      RepairingNsStreamWriter repairingNsStreamWriter0 = new RepairingNsStreamWriter(bufferingXmlWriter0, "com.fasterxml.jackson.#ataformat.xml.sem.ToXmlGenerator", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator((IOContext) null, 2472, 2472, objectMapper0, repairingNsStreamWriter0);
      toXmlGenerator0.setNextNameIfMissing(qName0);
      SerializedString serializedString0 = PrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      toXmlGenerator0.writeString((SerializableString) serializedString0);
      byte[] byteArray0 = new byte[4];
//      try { 
        toXmlGenerator0.writeBinary(byteArray0, 56320, 56319);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Trying to output second root, <]dYP]n*zXoCHq)>
//         //
//         verifyException("com.fasterxml.jackson.dataformat.xml.util.StaxUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      WriterConfig writerConfig0 = WriterConfig.createJ2MEDefaults();
      MockPrintStream mockPrintStream0 = new MockPrintStream("Curren context not Arra but ");
      ISOLatin1XmlWriter iSOLatin1XmlWriter0 = new ISOLatin1XmlWriter(mockPrintStream0, writerConfig0, true);
      IOContext iOContext0 = new IOContext(bufferRecycler0, mockPrintStream0, true);
      NonNsStreamWriter nonNsStreamWriter0 = new NonNsStreamWriter(iSOLatin1XmlWriter0, "6HgtZ8", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 0, (-1238), (ObjectCodec) null, nonNsStreamWriter0);
      QName qName0 = QName.valueOf("n$");
      boolean boolean0 = toXmlGenerator0.setNextNameIfMissing(qName0);
      assertTrue(boolean0);
      
      byte[] byteArray0 = new byte[5];
      toXmlGenerator0.writeBinary(byteArray0, 2, 2);
      assertEquals((-1238), toXmlGenerator0.getFormatFeatures());
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      File file0 = MockFile.createTempFile("AK)e;", "");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(file0, true);
      WriterConfig writerConfig0 = WriterConfig.createJ2MEDefaults();
      ISOLatin1XmlWriter iSOLatin1XmlWriter0 = new ISOLatin1XmlWriter(mockFileOutputStream0, writerConfig0, false);
      SimpleNsStreamWriter simpleNsStreamWriter0 = new SimpleNsStreamWriter(iSOLatin1XmlWriter0, "", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator((IOContext) null, 2, 3, objectMapper0, simpleNsStreamWriter0);
      QName qName0 = new QName("");
      boolean boolean0 = toXmlGenerator0.setNextNameIfMissing(qName0);
      assertTrue(boolean0);
      
      toXmlGenerator0.writeBinary((byte[]) null, 3, 2359);
      assertEquals(3, toXmlGenerator0.getFormatFeatures());
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      WriterConfig writerConfig0 = WriterConfig.createJ2MEDefaults();
      QName qName0 = new QName("^F<NW<x'QN~=%.`qg");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("^F<NW<x'QN~=%.`qg");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("^F<NW<x'QN~=%.`qg");
      BufferingXmlWriter bufferingXmlWriter0 = new BufferingXmlWriter(mockPrintWriter0, writerConfig0, "^F<NW<x'QN~=%.`qg", true, mockFileOutputStream0, 157);
      RepairingNsStreamWriter repairingNsStreamWriter0 = new RepairingNsStreamWriter(bufferingXmlWriter0, "^F<NW<x'QN~=%.`qg", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator((IOContext) null, 157, 157, objectMapper0, repairingNsStreamWriter0);
      boolean boolean0 = toXmlGenerator0.setNextNameIfMissing(qName0);
      assertTrue(boolean0);
      
      toXmlGenerator0.writeStartObject();
      toXmlGenerator0.finishWrappedValue(qName0, qName0);
      assertEquals(157, toXmlGenerator0.getFormatFeatures());
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      ObjectMapper objectMapper0 = new ObjectMapper();
      PipedWriter pipedWriter0 = new PipedWriter();
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0);
      BufferingXmlWriter bufferingXmlWriter0 = new BufferingXmlWriter(pipedWriter0, writerConfig0, "wP[g]Q=&+H/BcR*", false, byteArrayBuilder0, 2);
      NonNsStreamWriter nonNsStreamWriter0 = new NonNsStreamWriter(bufferingXmlWriter0, "write Binary value", writerConfig0);
      StreamWriter2Delegate streamWriter2Delegate0 = new StreamWriter2Delegate(nonNsStreamWriter0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 1947, (-380), objectMapper0, streamWriter2Delegate0);
      JsonGenerator jsonGenerator0 = toXmlGenerator0.setPrettyPrinter((PrettyPrinter) null);
      assertEquals((-380), jsonGenerator0.getFormatFeatures());
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      ObjectMapper objectMapper0 = new ObjectMapper();
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0);
      DataOutputStream dataOutputStream0 = new DataOutputStream(byteArrayBuilder0);
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(dataOutputStream0, 1);
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      AsciiXmlWriter asciiXmlWriter0 = new AsciiXmlWriter(bufferedOutputStream0, writerConfig0, false);
      RepairingNsStreamWriter repairingNsStreamWriter0 = new RepairingNsStreamWriter(asciiXmlWriter0, (String) null, writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator((IOContext) null, 0, 3, objectMapper0, repairingNsStreamWriter0);
      assertEquals(3, toXmlGenerator0.getFormatFeatures());
      
      toXmlGenerator0.overrideFormatFeatures(55296, 143);
      assertEquals(0, toXmlGenerator0.getFormatFeatures());
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(3);
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      AsciiXmlWriter asciiXmlWriter0 = new AsciiXmlWriter(byteArrayBuilder0, writerConfig0, false);
      RepairingNsStreamWriter repairingNsStreamWriter0 = new RepairingNsStreamWriter(asciiXmlWriter0, (String) null, writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, (-83), (-1320), (ObjectCodec) null, repairingNsStreamWriter0);
      toXmlGenerator0.overrideFormatFeatures(57343, 57343);
      assertEquals((-1), toXmlGenerator0.getFormatFeatures());
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      WriterConfig writerConfig0 = WriterConfig.createJ2MEDefaults();
      QName qName0 = new QName("^F<NW<x'QN~=%.`qg");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("^F<NW<x'QN~=%.`qg");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("^F<NW<x'QN~=%.`qg");
      BufferingXmlWriter bufferingXmlWriter0 = new BufferingXmlWriter(mockPrintWriter0, writerConfig0, "^F<NW<x'QN~=%.`qg", true, mockFileOutputStream0, 157);
      RepairingNsStreamWriter repairingNsStreamWriter0 = new RepairingNsStreamWriter(bufferingXmlWriter0, "^F<NW<x'QN~=%.`qg", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator((IOContext) null, 157, 157, objectMapper0, repairingNsStreamWriter0);
      boolean boolean0 = toXmlGenerator0.setNextNameIfMissing(qName0);
      assertTrue(boolean0);
      
      toXmlGenerator0.writeStartObject();
      toXmlGenerator0.inRoot();
      assertEquals(157, toXmlGenerator0.getFormatFeatures());
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      NonNsStreamWriter nonNsStreamWriter0 = new NonNsStreamWriter((XmlWriter) null, "com.ctc.wstx.api.WriterConfig", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 1, 0, (ObjectCodec) null, nonNsStreamWriter0);
      int int0 = toXmlGenerator0.getFormatFeatures();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      SimpleNsStreamWriter simpleNsStreamWriter0 = new SimpleNsStreamWriter((XmlWriter) null, "GHsadeO", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, (-1), (-654), (ObjectCodec) null, simpleNsStreamWriter0);
      int int0 = toXmlGenerator0.getFormatFeatures();
      assertEquals((-654), int0);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(0);
      WriterConfig writerConfig0 = WriterConfig.createJ2MEDefaults();
      AsciiXmlWriter asciiXmlWriter0 = new AsciiXmlWriter(byteArrayOutputStream0, writerConfig0, false);
      NonNsStreamWriter nonNsStreamWriter0 = new NonNsStreamWriter(asciiXmlWriter0, "", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 3424, 1, (ObjectCodec) null, nonNsStreamWriter0);
      ToXmlGenerator.Feature toXmlGenerator_Feature0 = ToXmlGenerator.Feature.WRITE_XML_1_1;
      QName qName0 = new QName("", "");
      toXmlGenerator0.setNextNameIfMissing(qName0);
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      toXmlGenerator0.writeNumber(bigDecimal0);
      toXmlGenerator0.close();
      toXmlGenerator0.enable(toXmlGenerator_Feature0);
      assertEquals(6, byteArrayOutputStream0.size());
      assertEquals(3, toXmlGenerator0.getFormatFeatures());
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      WriterConfig writerConfig0 = WriterConfig.createJ2MEDefaults();
      QName qName0 = new QName("", "", "^F<NW<x'QN~=%.`qg");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("start an object");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("Qs");
      BufferingXmlWriter bufferingXmlWriter0 = new BufferingXmlWriter(mockPrintWriter0, writerConfig0, "?", true, mockFileOutputStream0, 3084);
      RepairingNsStreamWriter repairingNsStreamWriter0 = new RepairingNsStreamWriter(bufferingXmlWriter0, "", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator((IOContext) null, 3084, 157, objectMapper0, repairingNsStreamWriter0);
      toXmlGenerator0.setNextNameIfMissing(qName0);
      toXmlGenerator0.writeStartObject();
      ToXmlGenerator.Feature toXmlGenerator_Feature0 = ToXmlGenerator.Feature.WRITE_XML_1_1;
      toXmlGenerator0.enable(toXmlGenerator_Feature0);
      assertEquals(159, toXmlGenerator0.getFormatFeatures());
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("ZH/6^EEyg", false);
      BufferingXmlWriter bufferingXmlWriter0 = new BufferingXmlWriter((Writer) null, writerConfig0, "FF',", false, mockFileOutputStream0, (-306));
      NonNsStreamWriter nonNsStreamWriter0 = new NonNsStreamWriter(bufferingXmlWriter0, "FF',", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator((IOContext) null, 0, (-2336), (ObjectCodec) null, nonNsStreamWriter0);
      ToXmlGenerator.Feature toXmlGenerator_Feature0 = ToXmlGenerator.Feature.WRITE_XML_1_1;
      toXmlGenerator0.enable(toXmlGenerator_Feature0);
      assertEquals((-2334), toXmlGenerator0.getFormatFeatures());
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      StreamWriter2Delegate streamWriter2Delegate0 = new StreamWriter2Delegate((XMLStreamWriter2) null);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, (-2777), 5, (ObjectCodec) null, streamWriter2Delegate0);
      ToXmlGenerator.Feature toXmlGenerator_Feature0 = ToXmlGenerator.Feature.WRITE_XML_DECLARATION;
      ToXmlGenerator toXmlGenerator1 = toXmlGenerator0.enable(toXmlGenerator_Feature0);
      assertEquals(5, toXmlGenerator1.getFormatFeatures());
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      WriterConfig writerConfig0 = WriterConfig.createJ2MEDefaults();
      QName qName0 = new QName("^F<NW<x'QN~=%.`qg");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("^F<NW<x'QN~=%.`qg");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("^F<NW<x'QN~=%.`qg");
      BufferingXmlWriter bufferingXmlWriter0 = new BufferingXmlWriter(mockPrintWriter0, writerConfig0, "^F<NW<x'QN~=%.`qg", true, mockFileOutputStream0, 157);
      RepairingNsStreamWriter repairingNsStreamWriter0 = new RepairingNsStreamWriter(bufferingXmlWriter0, "^F<NW<x'QN~=%.`qg", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator((IOContext) null, 157, 157, objectMapper0, repairingNsStreamWriter0);
      boolean boolean0 = toXmlGenerator0.setNextNameIfMissing(qName0);
      assertTrue(boolean0);
      
      toXmlGenerator0.writeStartObject();
      ToXmlGenerator.Feature toXmlGenerator_Feature0 = ToXmlGenerator.Feature.WRITE_XML_1_1;
      ToXmlGenerator toXmlGenerator1 = toXmlGenerator0.disable(toXmlGenerator_Feature0);
      assertEquals(157, toXmlGenerator1.getFormatFeatures());
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      WriterConfig writerConfig0 = WriterConfig.createJ2MEDefaults();
      RepairingNsStreamWriter repairingNsStreamWriter0 = new RepairingNsStreamWriter((XmlWriter) null, (String) null, writerConfig0);
      StreamWriterDelegate streamWriterDelegate0 = new StreamWriterDelegate(repairingNsStreamWriter0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator((IOContext) null, (-3119), (-3119), objectMapper0, streamWriterDelegate0);
      ToXmlGenerator.Feature toXmlGenerator_Feature0 = ToXmlGenerator.Feature.WRITE_XML_1_1;
      ToXmlGenerator toXmlGenerator1 = toXmlGenerator0.disable(toXmlGenerator_Feature0);
      assertEquals((-3119), toXmlGenerator1.getFormatFeatures());
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      ObjectMapper objectMapper0 = new ObjectMapper();
      StreamWriter2Delegate streamWriter2Delegate0 = new StreamWriter2Delegate((XMLStreamWriter2) null);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 0, 2, objectMapper0, streamWriter2Delegate0);
      assertEquals(2, toXmlGenerator0.getFormatFeatures());
      
      ToXmlGenerator.Feature toXmlGenerator_Feature0 = ToXmlGenerator.Feature.WRITE_XML_1_1;
      toXmlGenerator0.disable(toXmlGenerator_Feature0);
      assertEquals(0, toXmlGenerator0.getFormatFeatures());
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      BufferingXmlWriter bufferingXmlWriter0 = new BufferingXmlWriter((Writer) null, writerConfig0, "", true, byteArrayOutputStream0, 1);
      NonNsStreamWriter nonNsStreamWriter0 = new NonNsStreamWriter(bufferingXmlWriter0, "", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 2, 3, (ObjectCodec) null, nonNsStreamWriter0);
      toXmlGenerator0.writeStartArray();
      ToXmlGenerator.Feature toXmlGenerator_Feature0 = ToXmlGenerator.Feature.WRITE_XML_DECLARATION;
      toXmlGenerator0.configure(toXmlGenerator_Feature0, false);
      assertEquals(2, toXmlGenerator0.getFormatFeatures());
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      NonNsStreamWriter nonNsStreamWriter0 = new NonNsStreamWriter((XmlWriter) null, "Can not write END_ELEMENT without open START_ELEMENT", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 1, 0, (ObjectCodec) null, nonNsStreamWriter0);
      ToXmlGenerator.Feature toXmlGenerator_Feature0 = ToXmlGenerator.Feature.WRITE_XML_DECLARATION;
      ToXmlGenerator toXmlGenerator1 = toXmlGenerator0.configure(toXmlGenerator_Feature0, false);
      assertEquals(0, toXmlGenerator1.getFormatFeatures());
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0.BYTE_BASE64_CODEC_BUFFER, true);
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      NonNsStreamWriter nonNsStreamWriter0 = new NonNsStreamWriter((XmlWriter) null, "", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 1, (-1772), (ObjectCodec) null, nonNsStreamWriter0);
      ToXmlGenerator.Feature toXmlGenerator_Feature0 = ToXmlGenerator.Feature.WRITE_XML_1_1;
      toXmlGenerator0.configure(toXmlGenerator_Feature0, true);
      assertEquals((-1770), toXmlGenerator0.getFormatFeatures());
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      MockPrintStream mockPrintStream0 = new MockPrintStream(pipedOutputStream0, true);
      AsciiXmlWriter asciiXmlWriter0 = new AsciiXmlWriter(mockPrintStream0, writerConfig0, true);
      NonNsStreamWriter nonNsStreamWriter0 = new NonNsStreamWriter(asciiXmlWriter0, "", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator((IOContext) null, 0, 3, (ObjectCodec) null, nonNsStreamWriter0);
      ToXmlGenerator.Feature toXmlGenerator_Feature0 = ToXmlGenerator.Feature.WRITE_XML_DECLARATION;
      toXmlGenerator0.configure(toXmlGenerator_Feature0, false);
      assertEquals(2, toXmlGenerator0.getFormatFeatures());
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      StreamWriter2Delegate streamWriter2Delegate0 = new StreamWriter2Delegate((XMLStreamWriter2) null);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator((IOContext) null, 2787, 2787, (ObjectCodec) null, streamWriter2Delegate0);
      toXmlGenerator0.setNextIsUnwrapped(true);
      boolean boolean0 = toXmlGenerator0.checkNextIsUnwrapped();
      assertTrue(boolean0);
      assertEquals(2787, toXmlGenerator0.getFormatFeatures());
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      MockFileWriter mockFileWriter0 = new MockFileWriter("com.ctc.wstx.dtd.DTDSubset", true);
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      MockPrintStream mockPrintStream0 = new MockPrintStream("com.ctc.wstx.dtd.DTDSubset");
      BufferingXmlWriter bufferingXmlWriter0 = new BufferingXmlWriter(mockFileWriter0, writerConfig0, "com.ctc.wstx.dtd.DTDSubset", true, mockPrintStream0, 2);
      NonNsStreamWriter nonNsStreamWriter0 = new NonNsStreamWriter(bufferingXmlWriter0, "write number", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, (-1456), (-1456), (ObjectCodec) null, nonNsStreamWriter0);
      toXmlGenerator0.checkNextIsUnwrapped();
      assertEquals((-1456), toXmlGenerator0.getFormatFeatures());
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      SimpleNsStreamWriter simpleNsStreamWriter0 = new SimpleNsStreamWriter((XmlWriter) null, "c!LH*fTyrCe~D]:mb", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 3, 1, (ObjectCodec) null, simpleNsStreamWriter0);
      toXmlGenerator0._constructDefaultPrettyPrinter();
      assertEquals(1, toXmlGenerator0.getFormatFeatures());
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      WriterConfig writerConfig0 = WriterConfig.createJ2MEDefaults();
      QName qName0 = new QName("H-5=");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("^F<NW<x'QN~=%.`qg");
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      BufferingXmlWriter bufferingXmlWriter0 = new BufferingXmlWriter(mockPrintWriter0, writerConfig0, "'3", true, pipedOutputStream0, 2302);
      RepairingNsStreamWriter repairingNsStreamWriter0 = new RepairingNsStreamWriter(bufferingXmlWriter0, "", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator((IOContext) null, 1262, 352, objectMapper0, repairingNsStreamWriter0);
      toXmlGenerator0.setNextNameIfMissing(qName0);
      toXmlGenerator0.writeStartObject();
      // Undeclared exception!
//      try { 
        toXmlGenerator0.writeStringField("^F<NW<x'QN~=%.`qg", (String) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.ctc.wstx.sw.BaseStreamWriter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      WriterConfig writerConfig0 = WriterConfig.createJ2MEDefaults();
      QName qName0 = new QName("", "", "^F<NW<x'QN~=%.`qg");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("HG6EdrP_?D[");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("Qs");
      BufferingXmlWriter bufferingXmlWriter0 = new BufferingXmlWriter(mockPrintWriter0, writerConfig0, "", true, mockFileOutputStream0, 157);
      RepairingNsStreamWriter repairingNsStreamWriter0 = new RepairingNsStreamWriter(bufferingXmlWriter0, "", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator((IOContext) null, 157, 157, objectMapper0, repairingNsStreamWriter0);
      toXmlGenerator0.setNextNameIfMissing(qName0);
      toXmlGenerator0.writeStartObject();
      // Undeclared exception!
//      try { 
        toXmlGenerator0.writeStringField((String) null, (String) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // local part cannot be \"null\" when creating a QName
//         //
//         verifyException("javax.xml.namespace.QName", e);
//      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      StreamWriter2Delegate streamWriter2Delegate0 = new StreamWriter2Delegate((XMLStreamWriter2) null);
      QName qName0 = QName.valueOf("");
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator((IOContext) null, 1, 42, objectMapper0, streamWriter2Delegate0);
      toXmlGenerator0.setNextNameIfMissing(qName0);
      toXmlGenerator0.setNextIsAttribute(true);
      char[] charArray0 = new char[4];
      // Undeclared exception!
//      try { 
        toXmlGenerator0.writeString(charArray0, 4, 1);
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      QName qName0 = new QName("AwC_P+:`&QN>b&,++q", "AwC_P+:`&QN>b&,++q");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(":vEKanS\"<P(", false);
      WriterConfig writerConfig0 = WriterConfig.createJ2MEDefaults();
      AsciiXmlWriter asciiXmlWriter0 = new AsciiXmlWriter(mockFileOutputStream0, writerConfig0, false);
      NonNsStreamWriter nonNsStreamWriter0 = new NonNsStreamWriter(asciiXmlWriter0, "UTF-8", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator((IOContext) null, 405, (-77), (ObjectCodec) null, nonNsStreamWriter0);
      toXmlGenerator0.setNextNameIfMissing(qName0);
      toXmlGenerator0.writeNumber((long) 56319);
//      try { 
        toXmlGenerator0.writeString((char[]) null, 57343, 3);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Trying to output second root, <AwC_P+:`&QN>b&,++q>
//         //
//         verifyException("com.fasterxml.jackson.dataformat.xml.util.StaxUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      StreamWriter2Delegate streamWriter2Delegate0 = new StreamWriter2Delegate((XMLStreamWriter2) null);
      QName qName0 = new QName(", expecting field name");
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator((IOContext) null, 2787, 8174, (ObjectCodec) null, streamWriter2Delegate0);
      toXmlGenerator0.setNextNameIfMissing(qName0);
      SerializedString serializedString0 = PrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      // Undeclared exception!
//      try { 
        toXmlGenerator0.writeString((SerializableString) serializedString0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.codehaus.stax2.util.StreamWriterDelegate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      QName qName0 = new QName("]dYP]n*zXoCHq)");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("]dYP]n*zXoCHq)");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("P=1rs`5XU^9Szg");
      BufferingXmlWriter bufferingXmlWriter0 = new BufferingXmlWriter(mockPrintWriter0, writerConfig0, "]dYP]n*zXoCHq)", false, mockFileOutputStream0, 2472);
      RepairingNsStreamWriter repairingNsStreamWriter0 = new RepairingNsStreamWriter(bufferingXmlWriter0, "com.fasterxml.jackson.#ataformat.fmIBsem.ToXmlGenerator", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator((IOContext) null, 2472, 2472, objectMapper0, repairingNsStreamWriter0);
      toXmlGenerator0.setNextNameIfMissing(qName0);
      SerializedString serializedString0 = PrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      BigInteger bigInteger0 = BigInteger.ZERO;
      toXmlGenerator0.writeNumber(bigInteger0);
//      try { 
        toXmlGenerator0.writeString((SerializableString) serializedString0);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Trying to output second root, <]dYP]n*zXoCHq)>
//         //
//         verifyException("com.fasterxml.jackson.dataformat.xml.util.StaxUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      SimpleModule simpleModule0 = new SimpleModule();
      IOContext iOContext0 = new IOContext(bufferRecycler0, simpleModule0, false);
      WriterConfig writerConfig0 = WriterConfig.createJ2MEDefaults();
      NonNsStreamWriter nonNsStreamWriter0 = new NonNsStreamWriter((XmlWriter) null, "", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 1, 0, (ObjectCodec) null, nonNsStreamWriter0);
      MinimalPrettyPrinter minimalPrettyPrinter0 = new MinimalPrettyPrinter("");
      toXmlGenerator0.setPrettyPrinter(minimalPrettyPrinter0);
      // Undeclared exception!
//      try { 
        toXmlGenerator0.writeStartArray();
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.ctc.wstx.sw.BaseStreamWriter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      ObjectMapper objectMapper0 = new ObjectMapper();
      PipedWriter pipedWriter0 = new PipedWriter();
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0);
      BufferingXmlWriter bufferingXmlWriter0 = new BufferingXmlWriter(pipedWriter0, writerConfig0, (String) null, false, byteArrayBuilder0, 0);
      SimpleNsStreamWriter simpleNsStreamWriter0 = new SimpleNsStreamWriter(bufferingXmlWriter0, "{:lW", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 0, 2, objectMapper0, simpleNsStreamWriter0);
      // Undeclared exception!
//      try { 
        toXmlGenerator0.writeRepeatedFieldName();
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      StreamWriter2Delegate streamWriter2Delegate0 = new StreamWriter2Delegate((XMLStreamWriter2) null);
      QName qName0 = new QName("u");
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator((IOContext) null, 1, 2, objectMapper0, streamWriter2Delegate0);
      toXmlGenerator0.setNextNameIfMissing(qName0);
      toXmlGenerator0.setNextIsAttribute(true);
      char[] charArray0 = new char[0];
      // Undeclared exception!
//      try { 
        toXmlGenerator0.writeRawValue(charArray0, 257, 3);
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      MockPrintStream mockPrintStream0 = new MockPrintStream(pipedOutputStream0, true);
      AsciiXmlWriter asciiXmlWriter0 = new AsciiXmlWriter(mockPrintStream0, writerConfig0, true);
      NonNsStreamWriter nonNsStreamWriter0 = new NonNsStreamWriter(asciiXmlWriter0, "", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator((IOContext) null, 0, 3, (ObjectCodec) null, nonNsStreamWriter0);
      QName qName0 = new QName("Can not write END_ELEMENT without open START_ELEMENT");
      toXmlGenerator0.startWrappedValue(qName0, qName0);
      char[] charArray0 = new char[0];
      // Undeclared exception!
//      try { 
        toXmlGenerator0.writeRawValue(charArray0, 831, 56319);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 831
//         //
//         verifyException("com.ctc.wstx.sw.AsciiXmlWriter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      AsciiXmlWriter asciiXmlWriter0 = new AsciiXmlWriter(byteArrayBuilder0, writerConfig0, false);
      NonNsStreamWriter nonNsStreamWriter0 = new NonNsStreamWriter(asciiXmlWriter0, "Current context not Object but ", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator((IOContext) null, 1, 1891, objectMapper0, nonNsStreamWriter0);
      // Undeclared exception!
//      try { 
        toXmlGenerator0.writeRaw((char[]) null, 55296, 127);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.ctc.wstx.sw.AsciiXmlWriter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      MockFileWriter mockFileWriter0 = new MockFileWriter("com.ctc.wstx.dtd.DTDSubset", true);
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      MockPrintStream mockPrintStream0 = new MockPrintStream("com.ctc.wstx.dtd.DTDSubset");
      BufferingXmlWriter bufferingXmlWriter0 = new BufferingXmlWriter(mockFileWriter0, writerConfig0, "com.ctc.wstx.dtd.DTDSubset", true, mockPrintStream0, 2);
      SimpleNsStreamWriter simpleNsStreamWriter0 = new SimpleNsStreamWriter(bufferingXmlWriter0, "", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 2, 0, (ObjectCodec) null, simpleNsStreamWriter0);
      char[] charArray0 = new char[2];
      // Undeclared exception!
//      try { 
        toXmlGenerator0.writeRaw(charArray0, 0, 4099);
//        fail("Expecting exception: IndexOutOfBoundsException");
      
//      } catch(IndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      ObjectMapper objectMapper0 = new ObjectMapper();
      PipedWriter pipedWriter0 = new PipedWriter();
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0);
      BufferingXmlWriter bufferingXmlWriter0 = new BufferingXmlWriter(pipedWriter0, writerConfig0, (String) null, false, byteArrayBuilder0, 0);
      SimpleNsStreamWriter simpleNsStreamWriter0 = new SimpleNsStreamWriter(bufferingXmlWriter0, "{:lW", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 0, 2, objectMapper0, simpleNsStreamWriter0);
      // Undeclared exception!
//      try { 
        toXmlGenerator0.writeRaw("{:lW", (-516), 56319);
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      StreamWriter2Delegate streamWriter2Delegate0 = new StreamWriter2Delegate((XMLStreamWriter2) null);
      streamWriter2Delegate0.setParent(streamWriter2Delegate0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator((IOContext) null, 1, 0, (ObjectCodec) null, streamWriter2Delegate0);
      // Undeclared exception!
//      try { 
        toXmlGenerator0.writeRaw("`", 1, 2);
//        fail("Expecting exception: StackOverflowError");
      
//      } catch(StackOverflowError e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      MockFileWriter mockFileWriter0 = new MockFileWriter("com.ctc.wstx.dtd.DTDSubset", true);
      WriterConfig writerConfig0 = WriterConfig.createJ2MEDefaults();
      MockPrintStream mockPrintStream0 = new MockPrintStream("com.ctc.wstx.dtd.DTDSubset");
      BufferingXmlWriter bufferingXmlWriter0 = new BufferingXmlWriter(mockFileWriter0, writerConfig0, "com.ctc.wstx.dtd.DTDSubset", true, mockPrintStream0, 2);
      SimpleNsStreamWriter simpleNsStreamWriter0 = new SimpleNsStreamWriter(bufferingXmlWriter0, "", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 2, 4, (ObjectCodec) null, simpleNsStreamWriter0);
      // Undeclared exception!
//      try { 
        toXmlGenerator0.writeRaw((String) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.ctc.wstx.sw.BaseStreamWriter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
      ObjectMapper objectMapper0 = new ObjectMapper();
      PipedWriter pipedWriter0 = new PipedWriter();
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0);
      BufferingXmlWriter bufferingXmlWriter0 = new BufferingXmlWriter(pipedWriter0, writerConfig0, (String) null, true, byteArrayBuilder0, 0);
      SimpleNsStreamWriter simpleNsStreamWriter0 = new SimpleNsStreamWriter(bufferingXmlWriter0, "com.ctc.wstx.api.WriterConfig", writerConfig0);
      StreamWriterDelegate streamWriterDelegate0 = new StreamWriterDelegate(simpleNsStreamWriter0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 3, 1, objectMapper0, streamWriterDelegate0);
//      try { 
        toXmlGenerator0.writeRaw('+');
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Underlying Stax XMLStreamWriter (of type org.codehaus.stax2.util.StreamWriterDelegate) does not implement Stax2 API natively and is missing method 'writeRaw': this breaks functionality such as indentation that relies on it. You need to upgrade to using compliant Stax implementation like Woodstox or Aalto
//         //
//         verifyException("com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      QName qName0 = new QName("w8-+=mzvFketUl:", "rG*tCOk-09wqa%(B)");
      SimpleNsStreamWriter simpleNsStreamWriter0 = new SimpleNsStreamWriter((XmlWriter) null, "ww3*'46WlFG", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator((IOContext) null, 55296, 55296, objectMapper0, simpleNsStreamWriter0);
      toXmlGenerator0.setNextNameIfMissing(qName0);
      BigInteger bigInteger0 = BigInteger.ZERO;
//      try { 
        toXmlGenerator0.writeNumber(bigInteger0);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Unbound namespace URI 'w8-+=mzvFketUl:'
//         //
//         verifyException("com.fasterxml.jackson.dataformat.xml.util.StaxUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(0);
      WriterConfig writerConfig0 = WriterConfig.createJ2MEDefaults();
      AsciiXmlWriter asciiXmlWriter0 = new AsciiXmlWriter(byteArrayOutputStream0, writerConfig0, true);
      NonNsStreamWriter nonNsStreamWriter0 = new NonNsStreamWriter(asciiXmlWriter0, "", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 3424, 1, (ObjectCodec) null, nonNsStreamWriter0);
      QName qName0 = new QName("", "");
      toXmlGenerator0.setNextNameIfMissing(qName0);
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      toXmlGenerator0.writeNumber(bigDecimal0);
//      try { 
        toXmlGenerator0.writeNumber(bigDecimal0);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Trying to output second root, <>
//         //
//         verifyException("com.fasterxml.jackson.dataformat.xml.util.StaxUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      ObjectMapper objectMapper0 = new ObjectMapper();
      StreamWriter2Delegate streamWriter2Delegate0 = new StreamWriter2Delegate((XMLStreamWriter2) null);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 0, 2, objectMapper0, streamWriter2Delegate0);
      QName qName0 = QName.valueOf("default");
      toXmlGenerator0.setNextNameIfMissing(qName0);
      // Undeclared exception!
//      try { 
        toXmlGenerator0.writeNumber("default");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.codehaus.stax2.util.StreamWriterDelegate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      SimpleNsStreamWriter simpleNsStreamWriter0 = new SimpleNsStreamWriter((XmlWriter) null, "s'Lo", writerConfig0);
      QName qName0 = new QName("s'Lo", "^}wF;#~S8=-");
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator((IOContext) null, 56320, 56320, objectMapper0, simpleNsStreamWriter0);
      toXmlGenerator0.setNextNameIfMissing(qName0);
//      try { 
        toXmlGenerator0.writeNumber("eaitsW0A>pJbq%");
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Unbound namespace URI 's'Lo'
//         //
//         verifyException("com.fasterxml.jackson.dataformat.xml.util.StaxUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      SimpleNsStreamWriter simpleNsStreamWriter0 = new SimpleNsStreamWriter((XmlWriter) null, (String) null, writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 0, 3, (ObjectCodec) null, simpleNsStreamWriter0);
      QName qName0 = new QName("\"+5>s0K", "");
      toXmlGenerator0.setNextNameIfMissing(qName0);
//      try { 
        toXmlGenerator0.writeNumber(64975);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Unbound namespace URI '\"+5>s0K'
//         //
//         verifyException("com.fasterxml.jackson.dataformat.xml.util.StaxUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      QName qName0 = new QName("]dYP]n*:z>oCq)", "]dYP]n*:z>oCq)");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("]dYP]n*:z>oCq)");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("P=1rs`5XU^9Szg");
      BufferingXmlWriter bufferingXmlWriter0 = new BufferingXmlWriter(mockPrintWriter0, writerConfig0, "]dYP]n*:z>oCq)", true, mockFileOutputStream0, 2450);
      RepairingNsStreamWriter repairingNsStreamWriter0 = new RepairingNsStreamWriter(bufferingXmlWriter0, "com.fasterxml.jackson.#ataformat.xml.sem.ToXmlGenerator", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator((IOContext) null, 2450, 2450, objectMapper0, repairingNsStreamWriter0);
      toXmlGenerator0.setNextNameIfMissing(qName0);
      SerializedString serializedString0 = PrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      toXmlGenerator0.writeString((SerializableString) serializedString0);
//      try { 
        toXmlGenerator0.writeNumber((-1966.8071F));
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Trying to output second root, <]dYP]n*:z>oCq)>
//         //
//         verifyException("com.fasterxml.jackson.dataformat.xml.util.StaxUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      ObjectMapper objectMapper0 = new ObjectMapper();
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      QName qName0 = new QName("]dYP]n*:z>oCq)", "]dYP]n*:z>oCq)");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("]dYP]n*:z>oCq)");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("Can not write a field name, expecting a value");
      BufferingXmlWriter bufferingXmlWriter0 = new BufferingXmlWriter(mockPrintWriter0, writerConfig0, (String) null, false, mockFileOutputStream0, (-3773));
      RepairingNsStreamWriter repairingNsStreamWriter0 = new RepairingNsStreamWriter(bufferingXmlWriter0, "", writerConfig0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, (-1), 2810, objectMapper0, repairingNsStreamWriter0);
      toXmlGenerator0.setNextNameIfMissing(qName0);
      SerializedString serializedString0 = PrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      toXmlGenerator0.writeString((SerializableString) serializedString0);
//      try { 
        toXmlGenerator0.writeNumber((double) 2810);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Trying to output second root, <]dYP]n*:z>oCq)>
//         //
//         verifyException("com.fasterxml.jackson.dataformat.xml.util.StaxUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0, (-439));
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      AsciiXmlWriter asciiXmlWriter0 = new AsciiXmlWriter(byteArrayBuilder0, writerConfig0, true);
      SimpleNsStreamWriter simpleNsStreamWriter0 = new SimpleNsStreamWriter(asciiXmlWriter0, "#(1+F}ZMH3", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator((IOContext) null, 1488, 691, (ObjectCodec) null, simpleNsStreamWriter0);
      QName qName0 = new QName("[]1Noj5gu&y", "Bfw5'zBRuT6Br");
      toXmlGenerator0.setNextNameIfMissing(qName0);
//      try { 
        toXmlGenerator0.writeNull();
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Unbound namespace URI '[]1Noj5gu&y'
//         //
//         verifyException("com.fasterxml.jackson.dataformat.xml.util.StaxUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      DefaultXmlPrettyPrinter defaultXmlPrettyPrinter0 = new DefaultXmlPrettyPrinter();
      IOContext iOContext0 = new IOContext(bufferRecycler0, defaultXmlPrettyPrinter0, false);
      JsonFactory jsonFactory0 = new JsonFactory();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory((DeserializerFactoryConfig) null);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0, defaultSerializerProvider_Impl0, defaultDeserializationContext_Impl0);
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      SimpleNsStreamWriter simpleNsStreamWriter0 = new SimpleNsStreamWriter((XmlWriter) null, "JSON", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 0, 3, objectMapper0, simpleNsStreamWriter0);
//      try { 
        toXmlGenerator0.writeFieldName("JSON");
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Can not write a field name, expecting a value
//         //
//         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      IOContext iOContext0 = new IOContext((BufferRecycler) null, (Object) null, true);
      ObjectMapper objectMapper0 = new ObjectMapper();
      MockPrintStream mockPrintStream0 = new MockPrintStream("write boolean value");
      WriterConfig writerConfig0 = WriterConfig.createJ2MEDefaults();
      ISOLatin1XmlWriter iSOLatin1XmlWriter0 = new ISOLatin1XmlWriter(mockPrintStream0, writerConfig0, true);
      NonNsStreamWriter nonNsStreamWriter0 = new NonNsStreamWriter(iSOLatin1XmlWriter0, "JSON", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 51, 5, objectMapper0, nonNsStreamWriter0);
      // Undeclared exception!
//      try { 
        toXmlGenerator0.writeFieldName((SerializableString) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      MockFileWriter mockFileWriter0 = new MockFileWriter("com.ctc.wstx.dtd.DTDSubset", true);
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      MockPrintStream mockPrintStream0 = new MockPrintStream("com.ctc.wstx.dtd.DTDSubset");
      BufferingXmlWriter bufferingXmlWriter0 = new BufferingXmlWriter(mockFileWriter0, writerConfig0, "com.ctc.wstx.dtd.DTDSubset", true, mockPrintStream0, 2);
      SimpleNsStreamWriter simpleNsStreamWriter0 = new SimpleNsStreamWriter(bufferingXmlWriter0, "", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 2, 0, (ObjectCodec) null, simpleNsStreamWriter0);
      SerializedString serializedString0 = new SerializedString("com.ctc.wstx.dtd.DTDSubset");
//      try { 
        toXmlGenerator0.writeFieldName((SerializableString) serializedString0);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Can not write a field name, expecting a value
//         //
//         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      WriterConfig writerConfig0 = WriterConfig.createJ2MEDefaults();
      QName qName0 = new QName("^F<NW<x'QN~=%.`qg");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("^F<NW<x'QN~=%.`qg");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("^F<NW<x'QN~=%.`qg");
      BufferingXmlWriter bufferingXmlWriter0 = new BufferingXmlWriter(mockPrintWriter0, writerConfig0, "^F<NW<x'QN~=%.`qg", true, mockFileOutputStream0, 157);
      RepairingNsStreamWriter repairingNsStreamWriter0 = new RepairingNsStreamWriter(bufferingXmlWriter0, "^F<NW<x'QN~=%.`qg", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator((IOContext) null, 157, 157, objectMapper0, repairingNsStreamWriter0);
      toXmlGenerator0.setNextNameIfMissing(qName0);
      toXmlGenerator0.writeStartObject();
//      try { 
        toXmlGenerator0.writeBoolean(true);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Can not write boolean value, expecting field name
//         //
//         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      StreamWriter2Delegate streamWriter2Delegate0 = new StreamWriter2Delegate((XMLStreamWriter2) null);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator((IOContext) null, 3, 2, objectMapper0, streamWriter2Delegate0);
      QName qName0 = QName.valueOf("default");
      toXmlGenerator0.setNextNameIfMissing(qName0);
      byte[] byteArray0 = new byte[7];
      // Undeclared exception!
//      try { 
        toXmlGenerator0.writeBinary((Base64Variant) null, byteArray0, 1, (-1));
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.codehaus.stax2.util.StreamWriterDelegate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      ObjectMapper objectMapper0 = new ObjectMapper();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      ISOLatin1XmlWriter iSOLatin1XmlWriter0 = new ISOLatin1XmlWriter(pipedOutputStream0, writerConfig0, false);
      NonNsStreamWriter nonNsStreamWriter0 = new NonNsStreamWriter(iSOLatin1XmlWriter0, "_W:bA", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, (-3195), (-3195), objectMapper0, nonNsStreamWriter0);
      byte[] byteArray0 = new byte[1];
      // Undeclared exception!
//      try { 
        toXmlGenerator0.writeBinary((Base64Variant) null, byteArray0, 2, 1);
//        fail("Expecting exception: IllegalStateException");
      
//      } catch(IllegalStateException e) {
//         //
//         // No element/attribute name specified when trying to output element
//         //
//         verifyException("com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      WriterConfig writerConfig0 = WriterConfig.createJ2MEDefaults();
      SimpleNsStreamWriter simpleNsStreamWriter0 = new SimpleNsStreamWriter((XmlWriter) null, "s'Lo", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator((IOContext) null, 56320, 56320, objectMapper0, simpleNsStreamWriter0);
      QName qName0 = new QName("s'Lo", "s'Lo", "s'Lo");
//      try { 
        toXmlGenerator0.startWrappedValue(qName0, qName0);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Unbound namespace URI 's'Lo'
//         //
//         verifyException("com.fasterxml.jackson.dataformat.xml.util.StaxUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      StreamWriter2Delegate streamWriter2Delegate0 = new StreamWriter2Delegate((XMLStreamWriter2) null);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator((IOContext) null, 0, 0, (ObjectCodec) null, streamWriter2Delegate0);
      // Undeclared exception!
//      try { 
        toXmlGenerator0.isEnabled((ToXmlGenerator.Feature) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      SimpleNsStreamWriter simpleNsStreamWriter0 = new SimpleNsStreamWriter((XmlWriter) null, "com.ctc.wstx.dtd.DTDSubset", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 13, (-4053), (ObjectCodec) null, simpleNsStreamWriter0);
      // Undeclared exception!
//      try { 
        toXmlGenerator0.initGenerator();
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.ctc.wstx.sw.BaseStreamWriter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      MockPrintStream mockPrintStream0 = new MockPrintStream(" >");
      ISOLatin1XmlWriter iSOLatin1XmlWriter0 = new ISOLatin1XmlWriter(mockPrintStream0, writerConfig0, true);
      SimpleNsStreamWriter simpleNsStreamWriter0 = new SimpleNsStreamWriter(iSOLatin1XmlWriter0, " >", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 3, 2, (ObjectCodec) null, simpleNsStreamWriter0);
      simpleNsStreamWriter0.writeEmptyElement(" >");
//      try { 
        toXmlGenerator0.initGenerator();
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Can not output XML declaration, after other output has already been done.
//         //
//         verifyException("com.fasterxml.jackson.dataformat.xml.util.StaxUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      ObjectMapper objectMapper0 = new ObjectMapper();
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0);
      ISOLatin1XmlWriter iSOLatin1XmlWriter0 = new ISOLatin1XmlWriter(byteArrayBuilder0, writerConfig0, false);
      NonNsStreamWriter nonNsStreamWriter0 = new NonNsStreamWriter(iSOLatin1XmlWriter0, "write String value", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 3, 3, objectMapper0, nonNsStreamWriter0);
      // Undeclared exception!
//      try { 
        toXmlGenerator0.handleMissingName();
//        fail("Expecting exception: IllegalStateException");
      
//      } catch(IllegalStateException e) {
//         //
//         // No element/attribute name specified when trying to output element
//         //
//         verifyException("com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      SimpleNsStreamWriter simpleNsStreamWriter0 = new SimpleNsStreamWriter((XmlWriter) null, "s'Lo", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator((IOContext) null, 56319, 2789, objectMapper0, simpleNsStreamWriter0);
      // Undeclared exception!
//      try { 
        toXmlGenerator0.flush();
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.ctc.wstx.sw.BaseStreamWriter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      MockFileWriter mockFileWriter0 = new MockFileWriter("com.ctc.wstx.dtd.DTDSubset", true);
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      MockPrintStream mockPrintStream0 = new MockPrintStream("com.ctc.wstx.dtd.DTDSubset");
      BufferingXmlWriter bufferingXmlWriter0 = new BufferingXmlWriter(mockFileWriter0, writerConfig0, "com.ctc.wstx.dtd.DTDSubset", true, mockPrintStream0, 2);
      char[] charArray0 = new char[1];
      FileSystemHandling.shouldAllThrowIOExceptions();
      mockFileWriter0.write(charArray0);
      SimpleNsStreamWriter simpleNsStreamWriter0 = new SimpleNsStreamWriter(bufferingXmlWriter0, "", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, (-3873), 3, (ObjectCodec) null, simpleNsStreamWriter0);
//      try { 
        toXmlGenerator0.flush();
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Simulated IOException
//         //
//         verifyException("com.fasterxml.jackson.dataformat.xml.util.StaxUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      NonNsStreamWriter nonNsStreamWriter0 = new NonNsStreamWriter((XmlWriter) null, "", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 1, 2, (ObjectCodec) null, nonNsStreamWriter0);
      QName qName0 = new QName("", "7K~CYD4b15w");
//      try { 
        toXmlGenerator0.finishWrappedValue(qName0, qName0);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // No open start element, when trying to write end element
//         //
//         verifyException("com.fasterxml.jackson.dataformat.xml.util.StaxUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      WriterConfig writerConfig0 = WriterConfig.createJ2MEDefaults();
      MockPrintStream mockPrintStream0 = new MockPrintStream("F'k");
      ISOLatin1XmlWriter iSOLatin1XmlWriter0 = new ISOLatin1XmlWriter(mockPrintStream0, writerConfig0, false);
      RepairingNsStreamWriter repairingNsStreamWriter0 = new RepairingNsStreamWriter(iSOLatin1XmlWriter0, ".4qK?Wk!`%Y|~^M", writerConfig0);
      StreamWriterDelegate streamWriterDelegate0 = new StreamWriterDelegate(repairingNsStreamWriter0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 1014, 3, (ObjectCodec) null, streamWriterDelegate0);
      // Undeclared exception!
//      try { 
        toXmlGenerator0.enable((ToXmlGenerator.Feature) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      ObjectMapper objectMapper0 = new ObjectMapper();
      StreamWriter2Delegate streamWriter2Delegate0 = new StreamWriter2Delegate((XMLStreamWriter2) null);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(pipedInputStream0, 3);
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferedInputStream0, false);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 2, (-738), objectMapper0, streamWriter2Delegate0);
      // Undeclared exception!
//      try { 
        toXmlGenerator0.disable((ToXmlGenerator.Feature) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      ObjectMapper objectMapper0 = new ObjectMapper();
      StreamWriter2Delegate streamWriter2Delegate0 = new StreamWriter2Delegate((XMLStreamWriter2) null);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(pipedInputStream0, 3);
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferedInputStream0, false);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 2, (-738), objectMapper0, streamWriter2Delegate0);
      // Undeclared exception!
//      try { 
        toXmlGenerator0.configure((ToXmlGenerator.Feature) null, false);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      WriterConfig writerConfig0 = WriterConfig.createJ2MEDefaults();
      RepairingNsStreamWriter repairingNsStreamWriter0 = new RepairingNsStreamWriter((XmlWriter) null, (String) null, writerConfig0);
      StreamWriterDelegate streamWriterDelegate0 = new StreamWriterDelegate(repairingNsStreamWriter0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator((IOContext) null, (-3119), (-3119), objectMapper0, streamWriterDelegate0);
//      try { 
        toXmlGenerator0._reportUnimplementedStax2("J]]+Y7!YXxC_a-TNHK");
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Underlying Stax XMLStreamWriter (of type org.codehaus.stax2.util.StreamWriterDelegate) does not implement Stax2 API natively and is missing method 'J]]+Y7!YXxC_a-TNHK': this breaks functionality such as indentation that relies on it. You need to upgrade to using compliant Stax implementation like Woodstox or Aalto
//         //
//         verifyException("com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      QName qName0 = QName.valueOf("]dYP]n*zXoCHq)");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("]dYP]n*zXoCHq)");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("P=1rs`5XU^9Szg");
      BufferingXmlWriter bufferingXmlWriter0 = new BufferingXmlWriter(mockPrintWriter0, writerConfig0, "&q8zz(@X+", false, mockFileOutputStream0, 2472);
      RepairingNsStreamWriter repairingNsStreamWriter0 = new RepairingNsStreamWriter(bufferingXmlWriter0, "com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator((IOContext) null, 2472, (-2106), objectMapper0, repairingNsStreamWriter0);
      toXmlGenerator0.setNextNameIfMissing(qName0);
      BigInteger bigInteger0 = BigInteger.ZERO;
      toXmlGenerator0.writeNumber(bigInteger0);
//      try { 
        toXmlGenerator0._handleStartObject();
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Trying to output second root, <]dYP]n*zXoCHq)>
//         //
//         verifyException("com.fasterxml.jackson.dataformat.xml.util.StaxUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "write boolean value", false);
      JsonFactory jsonFactory0 = new JsonFactory();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0, defaultSerializerProvider_Impl0, (DefaultDeserializationContext) null);
      ToXmlGenerator toXmlGenerator0 = null;
//      try {
        toXmlGenerator0 = new ToXmlGenerator(iOContext0, 0, 0, objectMapper0, (XMLStreamWriter) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      WriterConfig writerConfig0 = WriterConfig.createJ2MEDefaults();
      QName qName0 = QName.valueOf("^F<NW<x'QN~=%.`qg");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("^F<NW<x'QN~=%.`qg");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("^F<NW<x'QN~=%.`qg");
      BufferingXmlWriter bufferingXmlWriter0 = new BufferingXmlWriter(mockPrintWriter0, writerConfig0, "^F<NW<x'QN~=%.`qg", true, mockFileOutputStream0, 157);
      RepairingNsStreamWriter repairingNsStreamWriter0 = new RepairingNsStreamWriter(bufferingXmlWriter0, "^F<NW<x'QN~=%.`qg", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator((IOContext) null, 157, 157, objectMapper0, repairingNsStreamWriter0);
      toXmlGenerator0.setNextNameIfMissing(qName0);
      toXmlGenerator0.writeStartObject();
//      try { 
        toXmlGenerator0.writeStartObject();
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Can not start an object, expecting field name
//         //
//         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      BufferingXmlWriter bufferingXmlWriter0 = new BufferingXmlWriter((Writer) null, writerConfig0, "", true, byteArrayOutputStream0, 0);
      NonNsStreamWriter nonNsStreamWriter0 = new NonNsStreamWriter(bufferingXmlWriter0, "Hild975NcKNj>z,", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 2, 2, (ObjectCodec) null, nonNsStreamWriter0);
      // Undeclared exception!
//      try { 
        toXmlGenerator0.writeNumber((long) 0);
//        fail("Expecting exception: IllegalStateException");
      
//      } catch(IllegalStateException e) {
//         //
//         // No element/attribute name specified when trying to output element
//         //
//         verifyException("com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      BufferRecycler bufferRecycler0 = jsonFactory0._getBufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, jsonFactory0, true);
      ObjectMapper objectMapper0 = new ObjectMapper();
      WriterConfig writerConfig0 = WriterConfig.createJ2MEDefaults();
      ISOLatin1XmlWriter iSOLatin1XmlWriter0 = new ISOLatin1XmlWriter((OutputStream) null, writerConfig0, true);
      NonNsStreamWriter nonNsStreamWriter0 = new NonNsStreamWriter(iSOLatin1XmlWriter0, "JSON", writerConfig0);
      StreamWriterDelegate streamWriterDelegate0 = new StreamWriterDelegate(nonNsStreamWriter0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 2, 56296, objectMapper0, streamWriterDelegate0);
      // Undeclared exception!
//      try { 
        toXmlGenerator0.writeNull();
//        fail("Expecting exception: IllegalStateException");
      
//      } catch(IllegalStateException e) {
//         //
//         // No element/attribute name specified when trying to output element
//         //
//         verifyException("com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      MockFileWriter mockFileWriter0 = new MockFileWriter("com.ctc.wstx.dtd.DTDubset", true);
      WriterConfig writerConfig0 = WriterConfig.createJ2MEDefaults();
      MockPrintStream mockPrintStream0 = new MockPrintStream("Sl?h%3WHKTMUg_U&n|");
      BufferingXmlWriter bufferingXmlWriter0 = new BufferingXmlWriter(mockFileWriter0, writerConfig0, "KS", true, mockPrintStream0, 1);
      SimpleNsStreamWriter simpleNsStreamWriter0 = new SimpleNsStreamWriter(bufferingXmlWriter0, "Sl?h%3WHKTMUg_U&n|", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 38, 2, (ObjectCodec) null, simpleNsStreamWriter0);
      toXmlGenerator0.writeRaw("Sl?h%3WHKTMUg_U&n|");
      assertEquals(2, toXmlGenerator0.getFormatFeatures());
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0);
      WriterConfig writerConfig0 = WriterConfig.createJ2MEDefaults();
      ISOLatin1XmlWriter iSOLatin1XmlWriter0 = new ISOLatin1XmlWriter(byteArrayBuilder0, writerConfig0, false);
      NonNsStreamWriter nonNsStreamWriter0 = new NonNsStreamWriter(iSOLatin1XmlWriter0, "", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, (-5384), 1, (ObjectCodec) null, nonNsStreamWriter0);
      // Undeclared exception!
//      try { 
        toXmlGenerator0.writeString("");
//        fail("Expecting exception: IllegalStateException");
      
//      } catch(IllegalStateException e) {
//         //
//         // No element/attribute name specified when trying to output element
//         //
//         verifyException("com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      StreamWriter2Delegate streamWriter2Delegate0 = new StreamWriter2Delegate((XMLStreamWriter2) null);
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 1, 1, (ObjectCodec) null, streamWriter2Delegate0);
      QName qName0 = new QName("i8", "i8");
      toXmlGenerator0.setNextName(qName0);
      // Undeclared exception!
//      try { 
        toXmlGenerator0._handleStartObject();
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.codehaus.stax2.util.StreamWriterDelegate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      MockPrintStream mockPrintStream0 = new MockPrintStream("\">");
      ISOLatin1XmlWriter iSOLatin1XmlWriter0 = new ISOLatin1XmlWriter(mockPrintStream0, writerConfig0, false);
      SimpleNsStreamWriter simpleNsStreamWriter0 = new SimpleNsStreamWriter(iSOLatin1XmlWriter0, "\">", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 3, 2, (ObjectCodec) null, simpleNsStreamWriter0);
      // Undeclared exception!
//      try { 
        toXmlGenerator0._handleStartObject();
//        fail("Expecting exception: IllegalStateException");
      
//      } catch(IllegalStateException e) {
//         //
//         // No element/attribute name specified when trying to output element
//         //
//         verifyException("com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      ObjectMapper objectMapper0 = new ObjectMapper();
      StreamWriter2Delegate streamWriter2Delegate0 = new StreamWriter2Delegate((XMLStreamWriter2) null);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 0, 2, objectMapper0, streamWriter2Delegate0);
      long[] longArray0 = new long[8];
      DefaultXmlPrettyPrinter defaultXmlPrettyPrinter0 = new DefaultXmlPrettyPrinter();
      toXmlGenerator0.setPrettyPrinter(defaultXmlPrettyPrinter0);
      toXmlGenerator0.writeArray(longArray0, 3, (-261));
      assertEquals(2, toXmlGenerator0.getFormatFeatures());
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      MockPrintStream mockPrintStream0 = new MockPrintStream("\">");
      ISOLatin1XmlWriter iSOLatin1XmlWriter0 = new ISOLatin1XmlWriter(mockPrintStream0, writerConfig0, false);
      SimpleNsStreamWriter simpleNsStreamWriter0 = new SimpleNsStreamWriter(iSOLatin1XmlWriter0, "\">", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 3, 2, (ObjectCodec) null, simpleNsStreamWriter0);
      toXmlGenerator0.useDefaultPrettyPrinter();
      toXmlGenerator0.initGenerator();
      assertEquals("1.1", simpleNsStreamWriter0.getXmlVersion());
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      ToXmlGenerator.Feature toXmlGenerator_Feature0 = ToXmlGenerator.Feature.WRITE_XML_DECLARATION;
      boolean boolean0 = toXmlGenerator_Feature0.enabledIn(1108);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      ToXmlGenerator.Feature toXmlGenerator_Feature0 = ToXmlGenerator.Feature.WRITE_XML_DECLARATION;
      boolean boolean0 = toXmlGenerator_Feature0.enabledIn(1263);
      assertTrue(boolean0);
      assertEquals(1, toXmlGenerator_Feature0.getMask());
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      BufferingXmlWriter bufferingXmlWriter0 = new BufferingXmlWriter((Writer) null, writerConfig0, "", true, byteArrayOutputStream0, 1);
      NonNsStreamWriter nonNsStreamWriter0 = new NonNsStreamWriter(bufferingXmlWriter0, "", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 2, 3, (ObjectCodec) null, nonNsStreamWriter0);
//      try { 
        toXmlGenerator0.close();
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Trying to write END_DOCUMENT when document has no root (ie. trying to output empty document).
//         //
//         verifyException("com.fasterxml.jackson.dataformat.xml.util.StaxUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      QName qName0 = new QName("^F<NW<x'QN~=%.`qg");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("^F<NW<x'QN~=%.`qg");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("^F<NW<x'QN~=%.`qg", false);
      BufferingXmlWriter bufferingXmlWriter0 = new BufferingXmlWriter(mockPrintWriter0, writerConfig0, "^F<NW<x'QN~=%.`qg", false, mockFileOutputStream0, 126);
      RepairingNsStreamWriter repairingNsStreamWriter0 = new RepairingNsStreamWriter(bufferingXmlWriter0, "^F<NW<x'QN~=%.`qg", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator((IOContext) null, 126, 126, objectMapper0, repairingNsStreamWriter0);
      toXmlGenerator0.setNextNameIfMissing(qName0);
      toXmlGenerator0.writeStartObject();
      // Undeclared exception!
//      try { 
        toXmlGenerator0.close();
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(0);
      WriterConfig writerConfig0 = WriterConfig.createJ2MEDefaults();
      AsciiXmlWriter asciiXmlWriter0 = new AsciiXmlWriter(byteArrayOutputStream0, writerConfig0, true);
      NonNsStreamWriter nonNsStreamWriter0 = new NonNsStreamWriter(asciiXmlWriter0, "", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 3424, 1, (ObjectCodec) null, nonNsStreamWriter0);
//      try { 
        toXmlGenerator0.close();
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Trying to write END_DOCUMENT when document has no root (ie. trying to output empty document).
//         //
//         verifyException("com.fasterxml.jackson.dataformat.xml.util.StaxUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      StreamWriter2Delegate streamWriter2Delegate0 = new StreamWriter2Delegate((XMLStreamWriter2) null);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator((IOContext) null, 1, 0, (ObjectCodec) null, streamWriter2Delegate0);
      toXmlGenerator0.flush();
      assertEquals(0, toXmlGenerator0.getFormatFeatures());
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      WriterConfig writerConfig0 = WriterConfig.createJ2MEDefaults();
      QName qName0 = new QName("F<NW<x'QN~=8%.`qg", "F<NW<x'QN~=8%.`qg");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("F<NW<x'QN~=8%.`qg");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("F<NW<x'QN~=8%.`qg");
      BufferingXmlWriter bufferingXmlWriter0 = new BufferingXmlWriter(mockPrintWriter0, writerConfig0, "F<NW<x'QN~=8%.`qg", false, mockFileOutputStream0, 157);
      RepairingNsStreamWriter repairingNsStreamWriter0 = new RepairingNsStreamWriter(bufferingXmlWriter0, "F<NW<x'QN~=8%.`qg", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator((IOContext) null, 157, 157, objectMapper0, repairingNsStreamWriter0);
      toXmlGenerator0.setNextNameIfMissing(qName0);
      toXmlGenerator0.writeStartObject();
//      try { 
        toXmlGenerator0._verifyValueWrite("write String value");
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Can not write String value, expecting field name
//         //
//         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      StreamWriter2Delegate streamWriter2Delegate0 = new StreamWriter2Delegate((XMLStreamWriter2) null);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator((IOContext) null, 1, 0, objectMapper0, streamWriter2Delegate0);
      DefaultXmlPrettyPrinter defaultXmlPrettyPrinter0 = new DefaultXmlPrettyPrinter();
      toXmlGenerator0._xmlPrettyPrinter = (XmlPrettyPrinter) defaultXmlPrettyPrinter0;
      QName qName0 = QName.valueOf("methodName");
      toXmlGenerator0.setNextNameIfMissing(qName0);
      BigInteger bigInteger0 = BigInteger.ZERO;
      // Undeclared exception!
//      try { 
        toXmlGenerator0.writeNumber(bigInteger0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.codehaus.stax2.util.StreamWriter2Delegate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      StreamWriter2Delegate streamWriter2Delegate0 = new StreamWriter2Delegate((XMLStreamWriter2) null);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator((IOContext) null, 3, 2, objectMapper0, streamWriter2Delegate0);
      toXmlGenerator0.setNextIsUnwrapped(true);
      QName qName0 = new QName("|jMGki0W-@u#G8s*K]", "|jMGki0W-@u#G8s*K]", "|jMGki0W-@u#G8s*K]");
      toXmlGenerator0.setNextNameIfMissing(qName0);
      BigInteger bigInteger0 = BigInteger.ZERO;
      // Undeclared exception!
//      try { 
        toXmlGenerator0.writeNumber(bigInteger0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.codehaus.stax2.util.StreamWriter2Delegate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      StreamWriter2Delegate streamWriter2Delegate0 = new StreamWriter2Delegate((XMLStreamWriter2) null);
      QName qName0 = new QName("");
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator((IOContext) null, 3, 2, objectMapper0, streamWriter2Delegate0);
      toXmlGenerator0.setNextNameIfMissing(qName0);
      toXmlGenerator0.setNextIsAttribute(true);
      BigInteger bigInteger0 = BigInteger.ONE;
      // Undeclared exception!
//      try { 
        toXmlGenerator0.writeNumber(bigInteger0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.codehaus.stax2.util.StreamWriter2Delegate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("]dYP]n*zXoCHq)");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("P=1rs`5XU^9Szg");
      BufferingXmlWriter bufferingXmlWriter0 = new BufferingXmlWriter(mockPrintWriter0, writerConfig0, "]dYP]n*zXoCHq)", false, mockFileOutputStream0, 2472);
      RepairingNsStreamWriter repairingNsStreamWriter0 = new RepairingNsStreamWriter(bufferingXmlWriter0, "com.fasterxml.jackson.#ataformat.xml.sem.ToXmlGenerator", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator((IOContext) null, 2472, 2472, objectMapper0, repairingNsStreamWriter0);
      // Undeclared exception!
//      try { 
        toXmlGenerator0.writeNumber((BigInteger) null);
//        fail("Expecting exception: IllegalStateException");
      
//      } catch(IllegalStateException e) {
//         //
//         // No element/attribute name specified when trying to output element
//         //
//         verifyException("com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      StreamWriter2Delegate streamWriter2Delegate0 = new StreamWriter2Delegate((XMLStreamWriter2) null);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator((IOContext) null, 3, 2, objectMapper0, streamWriter2Delegate0);
      BigInteger bigInteger0 = BigInteger.ONE;
      // Undeclared exception!
//      try { 
        toXmlGenerator0.writeNumber(bigInteger0);
//        fail("Expecting exception: IllegalStateException");
      
//      } catch(IllegalStateException e) {
//         //
//         // No element/attribute name specified when trying to output element
//         //
//         verifyException("com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(0);
      WriterConfig writerConfig0 = WriterConfig.createJ2MEDefaults();
      AsciiXmlWriter asciiXmlWriter0 = new AsciiXmlWriter(byteArrayOutputStream0, writerConfig0, true);
      NonNsStreamWriter nonNsStreamWriter0 = new NonNsStreamWriter(asciiXmlWriter0, "", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 3424, 1, (ObjectCodec) null, nonNsStreamWriter0);
      QName qName0 = new QName("", "");
      toXmlGenerator0.setNextNameIfMissing(qName0);
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      toXmlGenerator0.writeNumber(bigDecimal0);
//      try { 
        toXmlGenerator0.writeNumber((-2962L));
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Trying to output second root, <>
//         //
//         verifyException("com.fasterxml.jackson.dataformat.xml.util.StaxUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(2);
      WriterConfig writerConfig0 = WriterConfig.createJ2MEDefaults();
      AsciiXmlWriter asciiXmlWriter0 = new AsciiXmlWriter(byteArrayOutputStream0, writerConfig0, false);
      NonNsStreamWriter nonNsStreamWriter0 = new NonNsStreamWriter(asciiXmlWriter0, "", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 1, (-2567), (ObjectCodec) null, nonNsStreamWriter0);
      QName qName0 = new QName("", "");
      boolean boolean0 = toXmlGenerator0.setNextNameIfMissing(qName0);
      assertTrue(boolean0);
      
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      toXmlGenerator0.writeNumber(bigDecimal0);
      assertEquals((-2567), toXmlGenerator0.getFormatFeatures());
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      StreamWriter2Delegate streamWriter2Delegate0 = new StreamWriter2Delegate((XMLStreamWriter2) null);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator((IOContext) null, 3, 0, (ObjectCodec) null, streamWriter2Delegate0);
      toXmlGenerator0.useDefaultPrettyPrinter();
      QName qName0 = new QName("2", "2");
      toXmlGenerator0.setNextNameIfMissing(qName0);
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      // Undeclared exception!
//      try { 
        toXmlGenerator0.writeNumber(bigDecimal0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.codehaus.stax2.util.StreamWriter2Delegate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      StreamWriter2Delegate streamWriter2Delegate0 = new StreamWriter2Delegate((XMLStreamWriter2) null);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator((IOContext) null, 3, 2, objectMapper0, streamWriter2Delegate0);
      toXmlGenerator0.setNextIsUnwrapped(true);
      QName qName0 = new QName("|jMGki0W-@u#G8s*K]", "|jMGki0W-@u#G8s*K]", "|jMGki0W-@u#G8s*K]");
      toXmlGenerator0.setNextNameIfMissing(qName0);
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.WRITE_BIGDECIMAL_AS_PLAIN;
      toXmlGenerator0.enable(jsonGenerator_Feature0);
      BigDecimal bigDecimal0 = new BigDecimal(57343);
      // Undeclared exception!
//      try { 
        toXmlGenerator0.writeNumber(bigDecimal0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.codehaus.stax2.util.StreamWriterDelegate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      StreamWriter2Delegate streamWriter2Delegate0 = new StreamWriter2Delegate((XMLStreamWriter2) null);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator((IOContext) null, 3, 2, objectMapper0, streamWriter2Delegate0);
      toXmlGenerator0.setNextIsUnwrapped(true);
      QName qName0 = new QName("|jMGki0W-@u#G8s*K]", "|jMGki0W-@u#G8s*K]", "|jMGki0W-@u#G8s*K]");
      toXmlGenerator0.setNextNameIfMissing(qName0);
      BigDecimal bigDecimal0 = new BigDecimal(57343);
      // Undeclared exception!
//      try { 
        toXmlGenerator0.writeNumber(bigDecimal0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.codehaus.stax2.util.StreamWriter2Delegate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      StreamWriter2Delegate streamWriter2Delegate0 = new StreamWriter2Delegate((XMLStreamWriter2) null);
      QName qName0 = new QName("", "", "a{(j=kqu<j!Y`");
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator((IOContext) null, 2374, 1, objectMapper0, streamWriter2Delegate0);
      toXmlGenerator0.setNextIsAttribute(true);
      toXmlGenerator0.setNextNameIfMissing(qName0);
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      // Undeclared exception!
//      try { 
        toXmlGenerator0.writeNumber(bigDecimal0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.codehaus.stax2.util.StreamWriterDelegate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      StreamWriter2Delegate streamWriter2Delegate0 = new StreamWriter2Delegate((XMLStreamWriter2) null);
      QName qName0 = QName.valueOf("");
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator((IOContext) null, 1, 4, objectMapper0, streamWriter2Delegate0);
      toXmlGenerator0.setNextNameIfMissing(qName0);
      toXmlGenerator0.setNextIsAttribute(true);
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      // Undeclared exception!
//      try { 
        toXmlGenerator0.writeNumber(bigDecimal0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.codehaus.stax2.util.StreamWriter2Delegate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(0);
      WriterConfig writerConfig0 = WriterConfig.createJ2MEDefaults();
      AsciiXmlWriter asciiXmlWriter0 = new AsciiXmlWriter(byteArrayOutputStream0, writerConfig0, true);
      NonNsStreamWriter nonNsStreamWriter0 = new NonNsStreamWriter(asciiXmlWriter0, "", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 653, 1, (ObjectCodec) null, nonNsStreamWriter0);
      // Undeclared exception!
//      try { 
        toXmlGenerator0.writeNumber((BigDecimal) null);
//        fail("Expecting exception: IllegalStateException");
      
//      } catch(IllegalStateException e) {
//         //
//         // No element/attribute name specified when trying to output element
//         //
//         verifyException("com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      StreamWriter2Delegate streamWriter2Delegate0 = new StreamWriter2Delegate((XMLStreamWriter2) null);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator((IOContext) null, 3, 2, objectMapper0, streamWriter2Delegate0);
      BigDecimal bigDecimal0 = new BigDecimal(57343);
      // Undeclared exception!
//      try { 
        toXmlGenerator0.writeNumber(bigDecimal0);
//        fail("Expecting exception: IllegalStateException");
      
//      } catch(IllegalStateException e) {
//         //
//         // No element/attribute name specified when trying to output element
//         //
//         verifyException("com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      StreamWriter2Delegate streamWriter2Delegate0 = new StreamWriter2Delegate((XMLStreamWriter2) null);
      QName qName0 = new QName("com.fasterxml.jack.n.core.util.Defa)ltPrettPrinter$NopIndent!r");
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator((IOContext) null, 2, 0, objectMapper0, streamWriter2Delegate0);
      toXmlGenerator0.setNextNameIfMissing(qName0);
      toXmlGenerator0.useDefaultPrettyPrinter();
      // Undeclared exception!
//      try { 
        toXmlGenerator0.writeNumber((float) 1);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.codehaus.stax2.util.StreamWriter2Delegate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      StreamWriter2Delegate streamWriter2Delegate0 = new StreamWriter2Delegate((XMLStreamWriter2) null);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator((IOContext) null, 2, 3, objectMapper0, streamWriter2Delegate0);
      QName qName0 = QName.valueOf("e(qxDNvv@RMyE0Yl");
      toXmlGenerator0._nextIsUnwrapped = true;
      toXmlGenerator0.setNextNameIfMissing(qName0);
      // Undeclared exception!
//      try { 
        toXmlGenerator0.writeNumber((float) 0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.codehaus.stax2.util.StreamWriter2Delegate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      StreamWriter2Delegate streamWriter2Delegate0 = new StreamWriter2Delegate((XMLStreamWriter2) null);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator((IOContext) null, 1, 0, (ObjectCodec) null, streamWriter2Delegate0);
      toXmlGenerator0._nextIsAttribute = true;
      QName qName0 = new QName("");
      toXmlGenerator0.setNextNameIfMissing(qName0);
      // Undeclared exception!
//      try { 
        toXmlGenerator0.writeNumber((float) 2);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.codehaus.stax2.util.StreamWriter2Delegate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      ObjectMapper objectMapper0 = new ObjectMapper();
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0);
      ISOLatin1XmlWriter iSOLatin1XmlWriter0 = new ISOLatin1XmlWriter(byteArrayBuilder0, writerConfig0, false);
      NonNsStreamWriter nonNsStreamWriter0 = new NonNsStreamWriter(iSOLatin1XmlWriter0, "write String value", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 0, 2, objectMapper0, nonNsStreamWriter0);
      // Undeclared exception!
//      try { 
        toXmlGenerator0.writeNumber(0.0F);
//        fail("Expecting exception: IllegalStateException");
      
//      } catch(IllegalStateException e) {
//         //
//         // No element/attribute name specified when trying to output element
//         //
//         verifyException("com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      StreamWriter2Delegate streamWriter2Delegate0 = new StreamWriter2Delegate((XMLStreamWriter2) null);
      QName qName0 = new QName("com.fasterxml.jack.n.core.util.Defa)ltPrettPrinter$NopIndent!r");
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator((IOContext) null, 2, 0, objectMapper0, streamWriter2Delegate0);
      toXmlGenerator0.setNextNameIfMissing(qName0);
      JsonGenerator jsonGenerator0 = toXmlGenerator0.useDefaultPrettyPrinter();
      // Undeclared exception!
//      try { 
        jsonGenerator0.writeNumber(0.0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.codehaus.stax2.util.StreamWriter2Delegate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      StreamWriter2Delegate streamWriter2Delegate0 = new StreamWriter2Delegate((XMLStreamWriter2) null);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator((IOContext) null, 3, 2, (ObjectCodec) null, streamWriter2Delegate0);
      QName qName0 = new QName("y;dbKp=yT!yK]", "y;dbKp=yT!yK]", "y;dbKp=yT!yK]");
      toXmlGenerator0.setNextNameIfMissing(qName0);
      toXmlGenerator0._nextIsUnwrapped = true;
      // Undeclared exception!
//      try { 
        toXmlGenerator0.writeNumber(820.34769852);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.codehaus.stax2.util.StreamWriter2Delegate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      StreamWriter2Delegate streamWriter2Delegate0 = new StreamWriter2Delegate((XMLStreamWriter2) null);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator((IOContext) null, 1, 1, (ObjectCodec) null, streamWriter2Delegate0);
      toXmlGenerator0.setNextIsAttribute(true);
      QName qName0 = new QName("n5~3~fr.", "n5~3~fr.", "n5~3~fr.");
      toXmlGenerator0.setNextNameIfMissing(qName0);
      // Undeclared exception!
//      try { 
        toXmlGenerator0.writeNumber((double) 1);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.codehaus.stax2.util.StreamWriter2Delegate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      ObjectMapper objectMapper0 = new ObjectMapper();
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0);
      AsciiXmlWriter asciiXmlWriter0 = new AsciiXmlWriter(byteArrayBuilder0, writerConfig0, false);
      SimpleNsStreamWriter simpleNsStreamWriter0 = new SimpleNsStreamWriter(asciiXmlWriter0, (String) null, writerConfig0);
      StreamWriter2Delegate streamWriter2Delegate0 = new StreamWriter2Delegate(simpleNsStreamWriter0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 1, 1, objectMapper0, streamWriter2Delegate0);
      // Undeclared exception!
//      try { 
        toXmlGenerator0.writeNumber(Double.NaN);
//        fail("Expecting exception: IllegalStateException");
      
//      } catch(IllegalStateException e) {
//         //
//         // No element/attribute name specified when trying to output element
//         //
//         verifyException("com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      StreamWriter2Delegate streamWriter2Delegate0 = new StreamWriter2Delegate((XMLStreamWriter2) null);
      QName qName0 = new QName("N#mk/*y8vA|=Cbfoi");
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator((IOContext) null, 0, 2, objectMapper0, streamWriter2Delegate0);
      toXmlGenerator0.setNextNameIfMissing(qName0);
      toXmlGenerator0.useDefaultPrettyPrinter();
      // Undeclared exception!
//      try { 
        toXmlGenerator0.writeNumber((long) 2);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.codehaus.stax2.util.StreamWriter2Delegate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      StreamWriter2Delegate streamWriter2Delegate0 = new StreamWriter2Delegate((XMLStreamWriter2) null);
      QName qName0 = new QName("%Ue", "YV6N`P|y");
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator((IOContext) null, (-2044), 1, (ObjectCodec) null, streamWriter2Delegate0);
      ToXmlGenerator.Feature toXmlGenerator_Feature0 = ToXmlGenerator.Feature.WRITE_XML_DECLARATION;
      ToXmlGenerator toXmlGenerator1 = toXmlGenerator0.configure(toXmlGenerator_Feature0, true);
      toXmlGenerator1.setNextNameIfMissing(qName0);
      toXmlGenerator1._nextIsUnwrapped = true;
      // Undeclared exception!
//      try { 
        toXmlGenerator1.writeNumber((long) 3);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.codehaus.stax2.util.StreamWriter2Delegate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      StreamWriter2Delegate streamWriter2Delegate0 = new StreamWriter2Delegate((XMLStreamWriter2) null);
      QName qName0 = new QName(" ~6", " ~6", " ~6");
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator((IOContext) null, 2, 0, objectMapper0, streamWriter2Delegate0);
      toXmlGenerator0.setNextNameIfMissing(qName0);
      toXmlGenerator0.setNextIsAttribute(true);
      // Undeclared exception!
//      try { 
        toXmlGenerator0.writeNumber((-2792L));
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.codehaus.stax2.util.StreamWriter2Delegate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      StreamWriter2Delegate streamWriter2Delegate0 = new StreamWriter2Delegate((XMLStreamWriter2) null);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator((IOContext) null, 1, 0, (ObjectCodec) null, streamWriter2Delegate0);
      DefaultXmlPrettyPrinter defaultXmlPrettyPrinter0 = new DefaultXmlPrettyPrinter();
      toXmlGenerator0.setPrettyPrinter(defaultXmlPrettyPrinter0);
      QName qName0 = new QName("write boolean value");
      toXmlGenerator0.setNextNameIfMissing(qName0);
      // Undeclared exception!
//      try { 
        toXmlGenerator0.writeNumber(1);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.codehaus.stax2.util.StreamWriter2Delegate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      StreamWriter2Delegate streamWriter2Delegate0 = new StreamWriter2Delegate((XMLStreamWriter2) null);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator((IOContext) null, 3, 2, objectMapper0, streamWriter2Delegate0);
      QName qName0 = QName.valueOf("default");
      toXmlGenerator0.setNextNameIfMissing(qName0);
      ToXmlGenerator.Feature toXmlGenerator_Feature0 = ToXmlGenerator.Feature.WRITE_XML_1_1;
      ToXmlGenerator toXmlGenerator1 = toXmlGenerator0.configure(toXmlGenerator_Feature0, true);
      toXmlGenerator1._nextIsUnwrapped = true;
      // Undeclared exception!
//      try { 
        toXmlGenerator0.writeNumber(3242);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.codehaus.stax2.util.StreamWriter2Delegate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      ObjectMapper objectMapper0 = new ObjectMapper();
      StreamWriter2Delegate streamWriter2Delegate0 = new StreamWriter2Delegate((XMLStreamWriter2) null);
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 1730, 0, objectMapper0, streamWriter2Delegate0);
      QName qName0 = QName.valueOf("");
      toXmlGenerator0.setNextNameIfMissing(qName0);
      toXmlGenerator0.setNextIsAttribute(true);
      // Undeclared exception!
//      try { 
        toXmlGenerator0.writeNumber(3253);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.codehaus.stax2.util.StreamWriter2Delegate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      ObjectMapper objectMapper0 = new ObjectMapper();
      PipedWriter pipedWriter0 = new PipedWriter();
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0);
      BufferingXmlWriter bufferingXmlWriter0 = new BufferingXmlWriter(pipedWriter0, writerConfig0, (String) null, false, byteArrayBuilder0, 0);
      SimpleNsStreamWriter simpleNsStreamWriter0 = new SimpleNsStreamWriter(bufferingXmlWriter0, "{:lW", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 0, 2, objectMapper0, simpleNsStreamWriter0);
      // Undeclared exception!
//      try { 
        toXmlGenerator0.writeNumber(0);
//        fail("Expecting exception: IllegalStateException");
      
//      } catch(IllegalStateException e) {
//         //
//         // No element/attribute name specified when trying to output element
//         //
//         verifyException("com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      NonNsStreamWriter nonNsStreamWriter0 = new NonNsStreamWriter((XmlWriter) null, "Can not write END_ELEMENT without open START_ELEMENT", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 1, 0, (ObjectCodec) null, nonNsStreamWriter0);
      QName qName0 = new QName("Can not write END_ELEMENT without open START_ELEMENT");
      DefaultXmlPrettyPrinter defaultXmlPrettyPrinter0 = new DefaultXmlPrettyPrinter();
      toXmlGenerator0._xmlPrettyPrinter = (XmlPrettyPrinter) defaultXmlPrettyPrinter0;
      toXmlGenerator0.setNextName(qName0);
      // Undeclared exception!
//      try { 
        toXmlGenerator0.writeNull();
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.ctc.wstx.sw.BaseStreamWriter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      StreamWriter2Delegate streamWriter2Delegate0 = new StreamWriter2Delegate((XMLStreamWriter2) null);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator((IOContext) null, 1, 0, (ObjectCodec) null, streamWriter2Delegate0);
      toXmlGenerator0._nextIsUnwrapped = true;
      QName qName0 = QName.valueOf(":~,Am!Hix");
      boolean boolean0 = toXmlGenerator0.setNextNameIfMissing(qName0);
      assertTrue(boolean0);
      
      toXmlGenerator0.writeNull();
      assertEquals(0, toXmlGenerator0.getFormatFeatures());
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      DataOutputStream dataOutputStream0 = new DataOutputStream((OutputStream) null);
      WriterConfig writerConfig0 = WriterConfig.createJ2MEDefaults();
      ISOLatin1XmlWriter iSOLatin1XmlWriter0 = new ISOLatin1XmlWriter(dataOutputStream0, writerConfig0, false);
      SimpleNsStreamWriter simpleNsStreamWriter0 = new SimpleNsStreamWriter(iSOLatin1XmlWriter0, "<>az+)L", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator((IOContext) null, 1, 2677, (ObjectCodec) null, simpleNsStreamWriter0);
      toXmlGenerator0._nextIsAttribute = true;
      QName qName0 = QName.valueOf("SeAHk{G+z)$IW#Ve<");
      boolean boolean0 = toXmlGenerator0.setNextNameIfMissing(qName0);
      assertTrue(boolean0);
      
      toXmlGenerator0.writeNull();
      assertEquals(2677, toXmlGenerator0.getFormatFeatures());
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      StreamWriter2Delegate streamWriter2Delegate0 = new StreamWriter2Delegate((XMLStreamWriter2) null);
      QName qName0 = QName.valueOf("MA(Z-%K1d");
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator((IOContext) null, 0, 3, (ObjectCodec) null, streamWriter2Delegate0);
      toXmlGenerator0.setNextIsUnwrapped(true);
      toXmlGenerator0.setNextNameIfMissing(qName0);
      // Undeclared exception!
//      try { 
        toXmlGenerator0.writeBoolean(true);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.codehaus.stax2.util.StreamWriter2Delegate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      StreamWriter2Delegate streamWriter2Delegate0 = new StreamWriter2Delegate((XMLStreamWriter2) null);
      QName qName0 = new QName("", "");
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator((IOContext) null, 1, 1, objectMapper0, streamWriter2Delegate0);
      toXmlGenerator0.setNextNameIfMissing(qName0);
      toXmlGenerator0.setNextIsAttribute(true);
      // Undeclared exception!
//      try { 
        toXmlGenerator0.writeBoolean(true);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.codehaus.stax2.util.StreamWriter2Delegate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      SimpleModule simpleModule0 = new SimpleModule();
      IOContext iOContext0 = new IOContext(bufferRecycler0, simpleModule0, false);
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      NonNsStreamWriter nonNsStreamWriter0 = new NonNsStreamWriter((XmlWriter) null, "", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 1, 5, (ObjectCodec) null, nonNsStreamWriter0);
      // Undeclared exception!
//      try { 
        toXmlGenerator0.writeBoolean(false);
//        fail("Expecting exception: IllegalStateException");
      
//      } catch(IllegalStateException e) {
//         //
//         // No element/attribute name specified when trying to output element
//         //
//         verifyException("com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      StreamWriter2Delegate streamWriter2Delegate0 = new StreamWriter2Delegate((XMLStreamWriter2) null);
      QName qName0 = new QName("", "");
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator((IOContext) null, 1, 36, objectMapper0, streamWriter2Delegate0);
      toXmlGenerator0.setNextNameIfMissing(qName0);
      toXmlGenerator0.setNextIsAttribute(true);
      byte[] byteArray0 = new byte[1];
      // Undeclared exception!
//      try { 
        toXmlGenerator0.writeBinary(byteArray0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.codehaus.stax2.util.StreamWriter2Delegate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      StreamWriter2Delegate streamWriter2Delegate0 = new StreamWriter2Delegate((XMLStreamWriter2) null);
      QName qName0 = new QName("");
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator((IOContext) null, 1, 4, objectMapper0, streamWriter2Delegate0);
      toXmlGenerator0.setNextNameIfMissing(qName0);
      toXmlGenerator0.setNextIsAttribute(true);
      byte[] byteArray0 = new byte[4];
      // Undeclared exception!
//      try { 
        toXmlGenerator0.writeBinary(byteArray0, 0, 0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.codehaus.stax2.util.StreamWriter2Delegate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      StreamWriter2Delegate streamWriter2Delegate0 = new StreamWriter2Delegate((XMLStreamWriter2) null);
      QName qName0 = new QName("com.fasterxml.jack.n.core.util.Defa)ltPrettPrinter$NopIndent!r");
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator((IOContext) null, 2, 0, objectMapper0, streamWriter2Delegate0);
      toXmlGenerator0.setNextNameIfMissing(qName0);
      toXmlGenerator0.useDefaultPrettyPrinter();
      byte[] byteArray0 = new byte[1];
      // Undeclared exception!
//      try { 
        toXmlGenerator0.writeBinary(byteArray0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.codehaus.stax2.util.StreamWriter2Delegate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      StreamWriter2Delegate streamWriter2Delegate0 = new StreamWriter2Delegate((XMLStreamWriter2) null);
      QName qName0 = new QName("E;qalE#4U/&-E", "E;qalE#4U/&-E", "E;qalE#4U/&-E");
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator((IOContext) null, 3, 2, objectMapper0, streamWriter2Delegate0);
      toXmlGenerator0.setNextNameIfMissing(qName0);
      toXmlGenerator0.setNextIsUnwrapped(true);
      byte[] byteArray0 = new byte[1];
      // Undeclared exception!
//      try { 
        toXmlGenerator0.writeBinary(byteArray0, 3, 3);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.codehaus.stax2.util.StreamWriter2Delegate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      StreamWriter2Delegate streamWriter2Delegate0 = new StreamWriter2Delegate((XMLStreamWriter2) null);
      QName qName0 = new QName("");
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator((IOContext) null, 3, 2, objectMapper0, streamWriter2Delegate0);
      toXmlGenerator0.setNextNameIfMissing(qName0);
      toXmlGenerator0.setNextIsAttribute(true);
      byte[] byteArray0 = new byte[8];
      // Undeclared exception!
//      try { 
        toXmlGenerator0.writeBinary(byteArray0, 3, 3);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.codehaus.stax2.util.StreamWriter2Delegate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, true);
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      MockPrintStream mockPrintStream0 = new MockPrintStream("null default attribute value");
      ISOLatin1XmlWriter iSOLatin1XmlWriter0 = new ISOLatin1XmlWriter(mockPrintStream0, writerConfig0, true);
      SimpleNsStreamWriter simpleNsStreamWriter0 = new SimpleNsStreamWriter(iSOLatin1XmlWriter0, "com.ctc.wstx.sr.AttributeCollector", writerConfig0);
      StreamWriterDelegate streamWriterDelegate0 = new StreamWriterDelegate(simpleNsStreamWriter0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 0, 2, (ObjectCodec) null, streamWriterDelegate0);
//      try { 
        toXmlGenerator0.writeRaw((char[]) null, 56319, 2);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Underlying Stax XMLStreamWriter (of type org.codehaus.stax2.util.StreamWriterDelegate) does not implement Stax2 API natively and is missing method 'writeRaw': this breaks functionality such as indentation that relies on it. You need to upgrade to using compliant Stax implementation like Woodstox or Aalto
//         //
//         verifyException("com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(2);
      WriterConfig writerConfig0 = WriterConfig.createJ2MEDefaults();
      AsciiXmlWriter asciiXmlWriter0 = new AsciiXmlWriter(byteArrayOutputStream0, writerConfig0, false);
      NonNsStreamWriter nonNsStreamWriter0 = new NonNsStreamWriter(asciiXmlWriter0, "", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 1, (-2567), (ObjectCodec) null, nonNsStreamWriter0);
      char[] charArray0 = new char[8];
//      try { 
        toXmlGenerator0.writeRaw(charArray0, 2, 2);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Invalid null character in text to output
//         //
//         verifyException("com.fasterxml.jackson.dataformat.xml.util.StaxUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      NonNsStreamWriter nonNsStreamWriter0 = new NonNsStreamWriter((XmlWriter) null, "com.ctc.wstx.dtd.DTDubset", writerConfig0);
      StreamWriterDelegate streamWriterDelegate0 = new StreamWriterDelegate(nonNsStreamWriter0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 0, 3, (ObjectCodec) null, streamWriterDelegate0);
//      try { 
        toXmlGenerator0.writeRaw("", 3, (-2386));
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Underlying Stax XMLStreamWriter (of type org.codehaus.stax2.util.StreamWriterDelegate) does not implement Stax2 API natively and is missing method 'writeRaw': this breaks functionality such as indentation that relies on it. You need to upgrade to using compliant Stax implementation like Woodstox or Aalto
//         //
//         verifyException("com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      NonNsStreamWriter nonNsStreamWriter0 = new NonNsStreamWriter((XmlWriter) null, "com.ctc.wstx.api.WriterConfig", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 1, 0, (ObjectCodec) null, nonNsStreamWriter0);
      // Undeclared exception!
//      try { 
        toXmlGenerator0.writeRaw("com.ctc.wstx.api.WriterConfig", 1, 1);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.ctc.wstx.sw.BaseStreamWriter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      StreamWriter2Delegate streamWriter2Delegate0 = new StreamWriter2Delegate((XMLStreamWriter2) null);
      QName qName0 = new QName("", "");
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator((IOContext) null, 3, 2, objectMapper0, streamWriter2Delegate0);
      toXmlGenerator0.setNextNameIfMissing(qName0);
      toXmlGenerator0.setNextIsAttribute(true);
      // Undeclared exception!
//      try { 
        toXmlGenerator0.writeRawValue((char[]) null, 1, 0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      ObjectMapper objectMapper0 = new ObjectMapper();
      PipedWriter pipedWriter0 = new PipedWriter();
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0);
      BufferingXmlWriter bufferingXmlWriter0 = new BufferingXmlWriter(pipedWriter0, writerConfig0, (String) null, false, byteArrayBuilder0, 0);
      SimpleNsStreamWriter simpleNsStreamWriter0 = new SimpleNsStreamWriter(bufferingXmlWriter0, "com.ctc.wstx.api.WriterConfig", writerConfig0);
      StreamWriterDelegate streamWriterDelegate0 = new StreamWriterDelegate(simpleNsStreamWriter0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 3, 1, objectMapper0, streamWriterDelegate0);
//      try { 
        toXmlGenerator0.writeRawValue((char[]) null, (-2270), (-1105));
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Underlying Stax XMLStreamWriter (of type org.codehaus.stax2.util.StreamWriterDelegate) does not implement Stax2 API natively and is missing method 'writeRawValue': this breaks functionality such as indentation that relies on it. You need to upgrade to using compliant Stax implementation like Woodstox or Aalto
//         //
//         verifyException("com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      StreamWriter2Delegate streamWriter2Delegate0 = new StreamWriter2Delegate((XMLStreamWriter2) null);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator((IOContext) null, 2787, 2787, (ObjectCodec) null, streamWriter2Delegate0);
      char[] charArray0 = new char[3];
      // Undeclared exception!
//      try { 
        toXmlGenerator0.writeRawValue(charArray0, 85, 2);
//        fail("Expecting exception: IllegalStateException");
      
//      } catch(IllegalStateException e) {
//         //
//         // No element/attribute name specified when trying to output element
//         //
//         verifyException("com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      StreamWriter2Delegate streamWriter2Delegate0 = new StreamWriter2Delegate((XMLStreamWriter2) null);
      QName qName0 = new QName("u");
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator((IOContext) null, 1, 2, objectMapper0, streamWriter2Delegate0);
      toXmlGenerator0.setNextNameIfMissing(qName0);
      toXmlGenerator0.setNextIsAttribute(true);
      // Undeclared exception!
//      try { 
        toXmlGenerator0.writeRawValue("u", 57343, (-1462));
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      StreamWriter2Delegate streamWriter2Delegate0 = new StreamWriter2Delegate((XMLStreamWriter2) null);
      QName qName0 = new QName("u");
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator((IOContext) null, 1, 2, objectMapper0, streamWriter2Delegate0);
      toXmlGenerator0.setNextNameIfMissing(qName0);
      // Undeclared exception!
//      try { 
        toXmlGenerator0.writeRawValue("u", 57343, (-1462));
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.codehaus.stax2.util.StreamWriterDelegate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
      ObjectMapper objectMapper0 = new ObjectMapper();
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      AsciiXmlWriter asciiXmlWriter0 = new AsciiXmlWriter((OutputStream) null, writerConfig0, true);
      NonNsStreamWriter nonNsStreamWriter0 = new NonNsStreamWriter(asciiXmlWriter0, "JSON", writerConfig0);
      StreamWriterDelegate streamWriterDelegate0 = new StreamWriterDelegate(nonNsStreamWriter0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 5433, 1, objectMapper0, streamWriterDelegate0);
//      try { 
        toXmlGenerator0.writeRawValue("JSON", 102, (-1));
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Underlying Stax XMLStreamWriter (of type org.codehaus.stax2.util.StreamWriterDelegate) does not implement Stax2 API natively and is missing method 'writeRawValue': this breaks functionality such as indentation that relies on it. You need to upgrade to using compliant Stax implementation like Woodstox or Aalto
//         //
//         verifyException("com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      StreamWriter2Delegate streamWriter2Delegate0 = new StreamWriter2Delegate((XMLStreamWriter2) null);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator((IOContext) null, 1, 2, objectMapper0, streamWriter2Delegate0);
      // Undeclared exception!
//      try { 
        toXmlGenerator0.writeRawValue("u", 57343, (-1462));
//        fail("Expecting exception: IllegalStateException");
      
//      } catch(IllegalStateException e) {
//         //
//         // No element/attribute name specified when trying to output element
//         //
//         verifyException("com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      StreamWriter2Delegate streamWriter2Delegate0 = new StreamWriter2Delegate((XMLStreamWriter2) null);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator((IOContext) null, 1, 0, (ObjectCodec) null, streamWriter2Delegate0);
      QName qName0 = new QName("~-Y**~!", "~-Y**~!");
      toXmlGenerator0._nextIsAttribute = true;
      toXmlGenerator0.setNextNameIfMissing(qName0);
      // Undeclared exception!
//      try { 
        toXmlGenerator0.writeRawValue("~-Y**~!");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.codehaus.stax2.util.StreamWriterDelegate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
      WriterConfig writerConfig0 = WriterConfig.createJ2MEDefaults();
      SimpleNsStreamWriter simpleNsStreamWriter0 = new SimpleNsStreamWriter((XmlWriter) null, "JSON", writerConfig0);
      StreamWriterDelegate streamWriterDelegate0 = new StreamWriterDelegate(simpleNsStreamWriter0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 0, (-1913), (ObjectCodec) null, streamWriterDelegate0);
//      try { 
        toXmlGenerator0.writeRawValue("JSON");
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Underlying Stax XMLStreamWriter (of type org.codehaus.stax2.util.StreamWriterDelegate) does not implement Stax2 API natively and is missing method 'writeRawValue': this breaks functionality such as indentation that relies on it. You need to upgrade to using compliant Stax implementation like Woodstox or Aalto
//         //
//         verifyException("com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      StreamWriter2Delegate streamWriter2Delegate0 = new StreamWriter2Delegate((XMLStreamWriter2) null);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator((IOContext) null, 1, 0, (ObjectCodec) null, streamWriter2Delegate0);
      // Undeclared exception!
//      try { 
        toXmlGenerator0.writeRawValue("~-Y**~!");
//        fail("Expecting exception: IllegalStateException");
      
//      } catch(IllegalStateException e) {
//         //
//         // No element/attribute name specified when trying to output element
//         //
//         verifyException("com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      StreamWriter2Delegate streamWriter2Delegate0 = new StreamWriter2Delegate((XMLStreamWriter2) null);
      QName qName0 = new QName("com.fasterxml.jack.n.core.util.Defa)ltPrettPrinter$NopIndent!r");
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator((IOContext) null, 2, 0, objectMapper0, streamWriter2Delegate0);
      toXmlGenerator0.setNextNameIfMissing(qName0);
      toXmlGenerator0.useDefaultPrettyPrinter();
      char[] charArray0 = new char[6];
      // Undeclared exception!
//      try { 
        toXmlGenerator0.writeString(charArray0, (-1205), 2);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.codehaus.stax2.util.StreamWriter2Delegate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      StreamWriter2Delegate streamWriter2Delegate0 = new StreamWriter2Delegate((XMLStreamWriter2) null);
      QName qName0 = QName.valueOf("V");
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator((IOContext) null, 2, 1, (ObjectCodec) null, streamWriter2Delegate0);
      toXmlGenerator0.setNextNameIfMissing(qName0);
      toXmlGenerator0.setNextIsUnwrapped(true);
      // Undeclared exception!
//      try { 
        toXmlGenerator0.writeString((char[]) null, 1, 1);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.codehaus.stax2.util.StreamWriterDelegate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      MockFileWriter mockFileWriter0 = new MockFileWriter("com.ctc.wstx.dtd.DTDSubset", true);
      WriterConfig writerConfig0 = WriterConfig.createJ2MEDefaults();
      MockPrintStream mockPrintStream0 = new MockPrintStream("com.ctc.wstx.dtd.DTDSubset");
      BufferingXmlWriter bufferingXmlWriter0 = new BufferingXmlWriter(mockFileWriter0, writerConfig0, "com.ctc.wstx.dtd.DTDSubset", true, mockPrintStream0, 2);
      char[] charArray0 = new char[1];
      SimpleNsStreamWriter simpleNsStreamWriter0 = new SimpleNsStreamWriter(bufferingXmlWriter0, "", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, (-3873), 3, (ObjectCodec) null, simpleNsStreamWriter0);
      // Undeclared exception!
//      try { 
        toXmlGenerator0.writeString(charArray0, 0, 3);
//        fail("Expecting exception: IllegalStateException");
      
//      } catch(IllegalStateException e) {
//         //
//         // No element/attribute name specified when trying to output element
//         //
//         verifyException("com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      QName qName0 = new QName("^F<NW<x'QN~=%.`qg");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("^F<NW<x'QN~=%.`qg");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("^F<NW<x'QN~=%.`qg");
      BufferingXmlWriter bufferingXmlWriter0 = new BufferingXmlWriter(mockPrintWriter0, writerConfig0, "^F<NW<x'QN~=%.`qg", false, mockFileOutputStream0, 126);
      RepairingNsStreamWriter repairingNsStreamWriter0 = new RepairingNsStreamWriter(bufferingXmlWriter0, "^F<NW<x'QN~=%.`qg", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator((IOContext) null, (-796), 2385, objectMapper0, repairingNsStreamWriter0);
      toXmlGenerator0.useDefaultPrettyPrinter();
      boolean boolean0 = toXmlGenerator0.setNextNameIfMissing(qName0);
      assertTrue(boolean0);
      
      toXmlGenerator0.writeStartObject();
      toXmlGenerator0.writeRepeatedFieldName();
      toXmlGenerator0.writeString("BuvNfvO");
      assertEquals(2385, toXmlGenerator0.getFormatFeatures());
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      StreamWriter2Delegate streamWriter2Delegate0 = new StreamWriter2Delegate((XMLStreamWriter2) null);
      QName qName0 = QName.valueOf("38jz*I");
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator((IOContext) null, 2775, 2775, (ObjectCodec) null, streamWriter2Delegate0);
      toXmlGenerator0.setNextNameIfMissing(qName0);
      toXmlGenerator0.setNextIsCData(true);
      toXmlGenerator0.setNextIsUnwrapped(true);
      // Undeclared exception!
//      try { 
        toXmlGenerator0.writeString("38jz*I");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.codehaus.stax2.util.StreamWriterDelegate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      StreamWriter2Delegate streamWriter2Delegate0 = new StreamWriter2Delegate((XMLStreamWriter2) null);
      QName qName0 = new QName("");
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator((IOContext) null, 2787, 2787, (ObjectCodec) null, streamWriter2Delegate0);
      toXmlGenerator0.setNextNameIfMissing(qName0);
      toXmlGenerator0.setNextIsUnwrapped(true);
      // Undeclared exception!
//      try { 
        toXmlGenerator0.writeString("");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.codehaus.stax2.util.StreamWriterDelegate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      DataOutputStream dataOutputStream0 = new DataOutputStream((OutputStream) null);
      WriterConfig writerConfig0 = WriterConfig.createJ2MEDefaults();
      ISOLatin1XmlWriter iSOLatin1XmlWriter0 = new ISOLatin1XmlWriter(dataOutputStream0, writerConfig0, false);
      SimpleNsStreamWriter simpleNsStreamWriter0 = new SimpleNsStreamWriter(iSOLatin1XmlWriter0, "<>az+)L", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator((IOContext) null, 1, 2677, (ObjectCodec) null, simpleNsStreamWriter0);
      toXmlGenerator0._nextIsAttribute = true;
      QName qName0 = QName.valueOf("SeAHk{G+z)$IW#Ve<");
      toXmlGenerator0.setNextNameIfMissing(qName0);
//      try { 
        toXmlGenerator0.writeString("SeAHk{G+z)$IW#Ve<");
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Trying to write an attribute when there is no open start element.
//         //
//         verifyException("com.fasterxml.jackson.dataformat.xml.util.StaxUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      QName qName0 = new QName("^F<NW<x'QN~=%.`qg");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("^F<NW<x'QN~=%.`qg");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("^F<NW<x'QN~=%.`qg");
      BufferingXmlWriter bufferingXmlWriter0 = new BufferingXmlWriter(mockPrintWriter0, writerConfig0, "^F<NW<x'QN~=%.`qg", false, mockFileOutputStream0, 126);
      RepairingNsStreamWriter repairingNsStreamWriter0 = new RepairingNsStreamWriter(bufferingXmlWriter0, "^F<NW<x'QN~=%.`qg", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator((IOContext) null, (-796), 2385, objectMapper0, repairingNsStreamWriter0);
      toXmlGenerator0.useDefaultPrettyPrinter();
      boolean boolean0 = toXmlGenerator0.setNextNameIfMissing(qName0);
      assertTrue(boolean0);
      
      toXmlGenerator0.writeStartObject();
      toXmlGenerator0._handleEndObject();
      assertEquals(2385, toXmlGenerator0.getFormatFeatures());
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      QName qName0 = new QName("^F<NW<x'QN~=%.`qg");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("^F<NW<x'QN~=%.`qg");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("^F<NW<x'QN~=%.`qg");
      BufferingXmlWriter bufferingXmlWriter0 = new BufferingXmlWriter(mockPrintWriter0, writerConfig0, "^F<NW<x'QN~=%.`qg", false, mockFileOutputStream0, 126);
      RepairingNsStreamWriter repairingNsStreamWriter0 = new RepairingNsStreamWriter(bufferingXmlWriter0, "^F<NW<x'QN~=%.`qg", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator((IOContext) null, (-796), 2385, objectMapper0, repairingNsStreamWriter0);
      boolean boolean0 = toXmlGenerator0.setNextNameIfMissing(qName0);
      assertTrue(boolean0);
      
      toXmlGenerator0.writeStartObject();
      toXmlGenerator0._handleEndObject();
      assertEquals(2385, toXmlGenerator0.getFormatFeatures());
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("]dYP]n*zXoCHq)");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("P=1rs`5XU^9Szg");
      BufferingXmlWriter bufferingXmlWriter0 = new BufferingXmlWriter(mockPrintWriter0, writerConfig0, "]dYP]n*zXoCHq)", false, mockFileOutputStream0, 2472);
      RepairingNsStreamWriter repairingNsStreamWriter0 = new RepairingNsStreamWriter(bufferingXmlWriter0, "com.fasterxml.jackson.#ataformat.xml.sem.ToXmlGenerator", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator((IOContext) null, 2472, 2472, objectMapper0, repairingNsStreamWriter0);
//      try { 
        toXmlGenerator0._handleEndObject();
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Can not write END_ELEMENT without open START_ELEMENT
//         //
//         verifyException("com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("]dYP]n*zXoCHq)");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("P=1rs`5XU^9Szg");
      BufferingXmlWriter bufferingXmlWriter0 = new BufferingXmlWriter(mockPrintWriter0, writerConfig0, "]dYP]n*zXoCHq)", false, mockFileOutputStream0, 2472);
      RepairingNsStreamWriter repairingNsStreamWriter0 = new RepairingNsStreamWriter(bufferingXmlWriter0, "com.fasterxml.jacks}n.#ataformat.xml.sem.ToXmlGenerator", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator((IOContext) null, 2472, 2472, objectMapper0, repairingNsStreamWriter0);
//      try { 
        toXmlGenerator0.writeEndObject();
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Current context not Object but root
//         //
//         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      MockFileWriter mockFileWriter0 = new MockFileWriter("com.ctc.wstx.dtd.DTDSubset", true);
      WriterConfig writerConfig0 = WriterConfig.createJ2MEDefaults();
      MockPrintStream mockPrintStream0 = new MockPrintStream("com.ctc.wstx.dtd.DTDSubset");
      BufferingXmlWriter bufferingXmlWriter0 = new BufferingXmlWriter(mockFileWriter0, writerConfig0, "com.ctc.wstx.dtd.DTDSubset", true, mockPrintStream0, 2);
      SimpleNsStreamWriter simpleNsStreamWriter0 = new SimpleNsStreamWriter(bufferingXmlWriter0, "", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, (-3873), 3, (ObjectCodec) null, simpleNsStreamWriter0);
//      try { 
        toXmlGenerator0.writeEndArray();
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Current context not Array but root
//         //
//         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      SimpleNsStreamWriter simpleNsStreamWriter0 = new SimpleNsStreamWriter((XmlWriter) null, "c!LH*fTyrCe~D]:mb", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 3, 1, (ObjectCodec) null, simpleNsStreamWriter0);
      JsonGenerator jsonGenerator0 = toXmlGenerator0.useDefaultPrettyPrinter();
      toXmlGenerator0.writeStartArray();
//      try { 
        jsonGenerator0.close();
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Trying to write END_DOCUMENT when document has no root (ie. trying to output empty document).
//         //
//         verifyException("com.fasterxml.jackson.dataformat.xml.util.StaxUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      ObjectMapper objectMapper0 = new ObjectMapper();
      StreamWriter2Delegate streamWriter2Delegate0 = new StreamWriter2Delegate((XMLStreamWriter2) null);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 0, 2, objectMapper0, streamWriter2Delegate0);
      QName qName0 = QName.valueOf("default");
      toXmlGenerator0.setNextNameIfMissing(qName0);
//      try { 
        toXmlGenerator0.writeRepeatedFieldName();
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Can not write a field name, expecting a value
//         //
//         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      StreamWriter2Delegate streamWriter2Delegate0 = new StreamWriter2Delegate((XMLStreamWriter2) null);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator((IOContext) null, 3, 0, (ObjectCodec) null, streamWriter2Delegate0);
      DefaultXmlPrettyPrinter defaultXmlPrettyPrinter0 = new DefaultXmlPrettyPrinter();
      toXmlGenerator0._xmlPrettyPrinter = (XmlPrettyPrinter) defaultXmlPrettyPrinter0;
      QName qName0 = new QName("");
      // Undeclared exception!
//      try { 
        toXmlGenerator0.finishWrappedValue(qName0, qName0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.codehaus.stax2.util.StreamWriter2Delegate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      StreamWriter2Delegate streamWriter2Delegate0 = new StreamWriter2Delegate((XMLStreamWriter2) null);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator((IOContext) null, 2, 0, objectMapper0, streamWriter2Delegate0);
      toXmlGenerator0.finishWrappedValue((QName) null, (QName) null);
      assertEquals(0, toXmlGenerator0.getFormatFeatures());
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      NonNsStreamWriter nonNsStreamWriter0 = new NonNsStreamWriter((XmlWriter) null, "Can not write END_ELEMENT without open START_ELEMENT", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 1, 0, (ObjectCodec) null, nonNsStreamWriter0);
      QName qName0 = new QName("Can not write END_ELEMENT without open START_ELEMENT");
      DefaultXmlPrettyPrinter defaultXmlPrettyPrinter0 = new DefaultXmlPrettyPrinter();
      toXmlGenerator0._xmlPrettyPrinter = (XmlPrettyPrinter) defaultXmlPrettyPrinter0;
      // Undeclared exception!
//      try { 
        toXmlGenerator0.startWrappedValue(qName0, qName0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.ctc.wstx.sw.BaseStreamWriter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      MockPrintStream mockPrintStream0 = new MockPrintStream("com.ctc.wstx.dtd.DTDSubset");
      ISOLatin1XmlWriter iSOLatin1XmlWriter0 = new ISOLatin1XmlWriter(mockPrintStream0, writerConfig0, true);
      SimpleNsStreamWriter simpleNsStreamWriter0 = new SimpleNsStreamWriter(iSOLatin1XmlWriter0, "", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, (-1), (-1319), (ObjectCodec) null, simpleNsStreamWriter0);
      toXmlGenerator0.startWrappedValue((QName) null, (QName) null);
      assertEquals((-1319), toXmlGenerator0.getFormatFeatures());
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      StreamWriter2Delegate streamWriter2Delegate0 = new StreamWriter2Delegate((XMLStreamWriter2) null);
      QName qName0 = new QName("u");
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator((IOContext) null, 1, 2, objectMapper0, streamWriter2Delegate0);
      boolean boolean0 = toXmlGenerator0.setNextNameIfMissing(qName0);
      boolean boolean1 = toXmlGenerator0.setNextNameIfMissing(qName0);
      assertEquals(2, toXmlGenerator0.getFormatFeatures());
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      SimpleNsStreamWriter simpleNsStreamWriter0 = new SimpleNsStreamWriter((XmlWriter) null, "GHsadeO", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, (-1), (-654), (ObjectCodec) null, simpleNsStreamWriter0);
      ToXmlGenerator.Feature toXmlGenerator_Feature0 = ToXmlGenerator.Feature.WRITE_XML_1_1;
      boolean boolean0 = toXmlGenerator0.isEnabled(toXmlGenerator_Feature0);
      assertTrue(boolean0);
      assertEquals((-654), toXmlGenerator0.getFormatFeatures());
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      SimpleModule simpleModule0 = new SimpleModule();
      IOContext iOContext0 = new IOContext(bufferRecycler0, simpleModule0, false);
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      NonNsStreamWriter nonNsStreamWriter0 = new NonNsStreamWriter((XmlWriter) null, "", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 1, 5, (ObjectCodec) null, nonNsStreamWriter0);
      ToXmlGenerator.Feature toXmlGenerator_Feature0 = ToXmlGenerator.Feature.WRITE_XML_1_1;
      boolean boolean0 = toXmlGenerator0.isEnabled(toXmlGenerator_Feature0);
      assertEquals(5, toXmlGenerator0.getFormatFeatures());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(3);
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      AsciiXmlWriter asciiXmlWriter0 = new AsciiXmlWriter(byteArrayBuilder0, writerConfig0, false);
      RepairingNsStreamWriter repairingNsStreamWriter0 = new RepairingNsStreamWriter(asciiXmlWriter0, (String) null, writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 2, 1000, (ObjectCodec) null, repairingNsStreamWriter0);
      toXmlGenerator0.overrideFormatFeatures(56320, 55296);
      assertEquals(56296, toXmlGenerator0.getFormatFeatures());
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      StreamWriter2Delegate streamWriter2Delegate0 = new StreamWriter2Delegate((XMLStreamWriter2) null);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator((IOContext) null, 2, 3, objectMapper0, streamWriter2Delegate0);
      ToXmlGenerator.Feature toXmlGenerator_Feature0 = ToXmlGenerator.Feature.WRITE_XML_DECLARATION;
      ToXmlGenerator toXmlGenerator1 = toXmlGenerator0.configure(toXmlGenerator_Feature0, false);
      toXmlGenerator1.overrideFormatFeatures(3858, 175);
      assertEquals(2, toXmlGenerator0.getFormatFeatures());
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectReader objectReader0 = objectMapper0.reader((FormatSchema) null);
      WriterConfig writerConfig0 = WriterConfig.createJ2MEDefaults();
      NonNsStreamWriter nonNsStreamWriter0 = new NonNsStreamWriter((XmlWriter) null, (String) null, writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator((IOContext) null, 1259, 1259, objectReader0, nonNsStreamWriter0);
      DefaultPrettyPrinter defaultPrettyPrinter0 = new DefaultPrettyPrinter((String) null);
      toXmlGenerator0.setPrettyPrinter(defaultPrettyPrinter0);
      // Undeclared exception!
//      try { 
        toXmlGenerator0.writeStartObject();
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.ctc.wstx.sw.BaseStreamWriter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      WriterConfig writerConfig0 = WriterConfig.createJ2MEDefaults();
      MockPrintStream mockPrintStream0 = new MockPrintStream("hV^1][Zxb]/uLI?");
      ISOLatin1XmlWriter iSOLatin1XmlWriter0 = new ISOLatin1XmlWriter(mockPrintStream0, writerConfig0, true);
      SimpleNsStreamWriter simpleNsStreamWriter0 = new SimpleNsStreamWriter(iSOLatin1XmlWriter0, "#urren context not Arra but-", writerConfig0);
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.withExactBigDecimals(true);
      ObjectReader objectReader0 = objectMapper0.reader(jsonNodeFactory0);
      StreamWriterDelegate streamWriterDelegate0 = new StreamWriterDelegate(simpleNsStreamWriter0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator((IOContext) null, 0, 2, objectReader0, streamWriterDelegate0);
      toXmlGenerator0.useDefaultPrettyPrinter();
      toXmlGenerator0.initGenerator();
      assertEquals("1.1", simpleNsStreamWriter0.getXmlVersion());
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      ObjectMapper objectMapper0 = new ObjectMapper();
      PipedWriter pipedWriter0 = new PipedWriter();
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0);
      BufferingXmlWriter bufferingXmlWriter0 = new BufferingXmlWriter(pipedWriter0, writerConfig0, (String) null, true, byteArrayBuilder0, 3);
      SimpleNsStreamWriter simpleNsStreamWriter0 = new SimpleNsStreamWriter(bufferingXmlWriter0, (String) null, writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 2, 4, objectMapper0, simpleNsStreamWriter0);
      ToXmlGenerator.Feature toXmlGenerator_Feature0 = ToXmlGenerator.Feature.WRITE_XML_DECLARATION;
      toXmlGenerator0.enable(toXmlGenerator_Feature0);
      toXmlGenerator0.initGenerator();
      assertEquals(5, toXmlGenerator0.getFormatFeatures());
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      ObjectMapper objectMapper0 = new ObjectMapper();
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      ISOLatin1XmlWriter iSOLatin1XmlWriter0 = new ISOLatin1XmlWriter((OutputStream) null, writerConfig0, true);
      SimpleNsStreamWriter simpleNsStreamWriter0 = new SimpleNsStreamWriter(iSOLatin1XmlWriter0, "^xTR?,`U]9>5}!a+H", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 2, (-3630), objectMapper0, simpleNsStreamWriter0);
      toXmlGenerator0.initGenerator();
      toXmlGenerator0.initGenerator();
      assertEquals("1.1", simpleNsStreamWriter0.getXmlVersion());
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      StreamWriter2Delegate streamWriter2Delegate0 = new StreamWriter2Delegate((XMLStreamWriter2) null);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator((IOContext) null, 2, 0, objectMapper0, streamWriter2Delegate0);
      toXmlGenerator0.initGenerator();
      assertEquals(0, toXmlGenerator0.getFormatFeatures());
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      int int0 = ToXmlGenerator.Feature.collectDefaults();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      SimpleNsStreamWriter simpleNsStreamWriter0 = new SimpleNsStreamWriter((XmlWriter) null, "s'Lo", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator((IOContext) null, 56320, 56320, objectMapper0, simpleNsStreamWriter0);
      // Undeclared exception!
//      try { 
        toXmlGenerator0.writeNumber("eaitsW0A>pJbq%");
//        fail("Expecting exception: IllegalStateException");
      
//      } catch(IllegalStateException e) {
//         //
//         // No element/attribute name specified when trying to output element
//         //
//         verifyException("com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      ObjectMapper objectMapper0 = new ObjectMapper();
      PipedWriter pipedWriter0 = new PipedWriter();
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0);
      BufferingXmlWriter bufferingXmlWriter0 = new BufferingXmlWriter(pipedWriter0, writerConfig0, (String) null, false, byteArrayBuilder0, 0);
      SimpleNsStreamWriter simpleNsStreamWriter0 = new SimpleNsStreamWriter(bufferingXmlWriter0, "{:lW", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 0, 2, objectMapper0, simpleNsStreamWriter0);
      // Undeclared exception!
//      try { 
        toXmlGenerator0.writeRawUTF8String(byteArrayBuilder0.NO_BYTES, 3, 56320);
//        fail("Expecting exception: UnsupportedOperationException");
      
//      } catch(UnsupportedOperationException e) {
//         //
//         // Operation not supported by generator of type com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator
//         //
//         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      AsciiXmlWriter asciiXmlWriter0 = new AsciiXmlWriter(byteArrayBuilder0, writerConfig0, false);
      NonNsStreamWriter nonNsStreamWriter0 = new NonNsStreamWriter(asciiXmlWriter0, "Current context not Object but ", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator((IOContext) null, 1, 1891, objectMapper0, nonNsStreamWriter0);
      boolean boolean0 = toXmlGenerator0.canWriteFormattedNumbers();
      assertEquals(1891, toXmlGenerator0.getFormatFeatures());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      MockPrintStream mockPrintStream0 = new MockPrintStream("com.ctc.wstx.dtd.DTDSubset");
      ISOLatin1XmlWriter iSOLatin1XmlWriter0 = new ISOLatin1XmlWriter(mockPrintStream0, writerConfig0, true);
      SimpleNsStreamWriter simpleNsStreamWriter0 = new SimpleNsStreamWriter(iSOLatin1XmlWriter0, "com.ctc.wstx.dtd.DTDSubset", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 227, 1, (ObjectCodec) null, simpleNsStreamWriter0);
      Object object0 = toXmlGenerator0.getOutputTarget();
      assertEquals(1, toXmlGenerator0.getFormatFeatures());
      assertNotNull(object0);
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("]dYP]n*:z>oCq)");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("P=1rs`5XU^9Szg");
      BufferingXmlWriter bufferingXmlWriter0 = new BufferingXmlWriter(mockPrintWriter0, writerConfig0, "]dYP]n*:z>oCq)", true, mockFileOutputStream0, 2405);
      RepairingNsStreamWriter repairingNsStreamWriter0 = new RepairingNsStreamWriter(bufferingXmlWriter0, "com.fasterxml.jackson.#ataformat.xml.sem.ToXmlGenerator", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator((IOContext) null, 2405, 2405, objectMapper0, repairingNsStreamWriter0);
      SerializedString serializedString0 = PrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      // Undeclared exception!
//      try { 
        toXmlGenerator0.writeString((SerializableString) serializedString0);
//        fail("Expecting exception: IllegalStateException");
      
//      } catch(IllegalStateException e) {
//         //
//         // No element/attribute name specified when trying to output element
//         //
//         verifyException("com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      ObjectMapper objectMapper0 = new ObjectMapper();
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      NonNsStreamWriter nonNsStreamWriter0 = new NonNsStreamWriter((XmlWriter) null, "write String value", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 2, 7, objectMapper0, nonNsStreamWriter0);
      toXmlGenerator0.getStaxWriter();
      assertEquals(7, toXmlGenerator0.getFormatFeatures());
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      ObjectMapper objectMapper0 = new ObjectMapper();
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0);
      ISOLatin1XmlWriter iSOLatin1XmlWriter0 = new ISOLatin1XmlWriter(byteArrayBuilder0, writerConfig0, false);
      NonNsStreamWriter nonNsStreamWriter0 = new NonNsStreamWriter(iSOLatin1XmlWriter0, "write String value", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 3, 3, objectMapper0, nonNsStreamWriter0);
      int int0 = toXmlGenerator0.getFormatFeatures();
      assertEquals(3, int0);
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("^F<NW<x'QN~=%.`qg");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("^F<NW<x'QN~=%.`qg");
      BufferingXmlWriter bufferingXmlWriter0 = new BufferingXmlWriter(mockPrintWriter0, writerConfig0, "^F<NW<x'QN~=%.`qg", false, mockFileOutputStream0, 126);
      RepairingNsStreamWriter repairingNsStreamWriter0 = new RepairingNsStreamWriter(bufferingXmlWriter0, "^F<NW<x'QN~=%.`qg", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator((IOContext) null, (-796), 2385, objectMapper0, repairingNsStreamWriter0);
      toXmlGenerator0.useDefaultPrettyPrinter();
      // Undeclared exception!
//      try { 
        toXmlGenerator0.writeStartObject();
//        fail("Expecting exception: IllegalStateException");
      
//      } catch(IllegalStateException e) {
//         //
//         // No element/attribute name specified when trying to output element
//         //
//         verifyException("com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      SimpleNsStreamWriter simpleNsStreamWriter0 = new SimpleNsStreamWriter((XmlWriter) null, "c!LH*fTyrCe~D]:mb", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator((IOContext) null, 0, 0, (ObjectCodec) null, simpleNsStreamWriter0);
      int int0 = toXmlGenerator0.getOutputBuffered();
      assertEquals(0, toXmlGenerator0.getFormatFeatures());
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      ObjectMapper objectMapper0 = new ObjectMapper();
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0);
      ISOLatin1XmlWriter iSOLatin1XmlWriter0 = new ISOLatin1XmlWriter(byteArrayBuilder0, writerConfig0, false);
      NonNsStreamWriter nonNsStreamWriter0 = new NonNsStreamWriter(iSOLatin1XmlWriter0, "write String value", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 3, 3, objectMapper0, nonNsStreamWriter0);
      // Undeclared exception!
//      try { 
        toXmlGenerator0.writeUTF8String(byteArrayBuilder0.NO_BYTES, 1870, 3);
//        fail("Expecting exception: UnsupportedOperationException");
      
//      } catch(UnsupportedOperationException e) {
//         //
//         // Operation not supported by generator of type com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator
//         //
//         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      WriterConfig writerConfig0 = WriterConfig.createJ2MEDefaults();
      MockPrintStream mockPrintStream0 = new MockPrintStream("F'k");
      ISOLatin1XmlWriter iSOLatin1XmlWriter0 = new ISOLatin1XmlWriter(mockPrintStream0, writerConfig0, false);
      RepairingNsStreamWriter repairingNsStreamWriter0 = new RepairingNsStreamWriter(iSOLatin1XmlWriter0, ".4qK?Wk!`%Y|~^M", writerConfig0);
      StreamWriterDelegate streamWriterDelegate0 = new StreamWriterDelegate(repairingNsStreamWriter0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 1014, 3, (ObjectCodec) null, streamWriterDelegate0);
//      try { 
        toXmlGenerator0.writeRaw("F'k");
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Underlying Stax XMLStreamWriter (of type org.codehaus.stax2.util.StreamWriterDelegate) does not implement Stax2 API natively and is missing method 'writeRaw': this breaks functionality such as indentation that relies on it. You need to upgrade to using compliant Stax implementation like Woodstox or Aalto
//         //
//         verifyException("com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      WriterConfig writerConfig0 = WriterConfig.createJ2MEDefaults();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("HG6EdrP_?D[");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("Qs");
      BufferingXmlWriter bufferingXmlWriter0 = new BufferingXmlWriter(mockPrintWriter0, writerConfig0, "", true, mockFileOutputStream0, 157);
      RepairingNsStreamWriter repairingNsStreamWriter0 = new RepairingNsStreamWriter(bufferingXmlWriter0, "", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator((IOContext) null, 157, 157, objectMapper0, repairingNsStreamWriter0);
//      try { 
        toXmlGenerator0.writeStringField((String) null, (String) null);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Can not write a field name, expecting a value
//         //
//         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      NonNsStreamWriter nonNsStreamWriter0 = new NonNsStreamWriter((XmlWriter) null, "", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 2, 1, (ObjectCodec) null, nonNsStreamWriter0);
      // Undeclared exception!
//      try { 
        toXmlGenerator0.writeRaw('w');
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.ctc.wstx.sw.BaseStreamWriter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      WriterConfig writerConfig0 = WriterConfig.createJ2MEDefaults();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("^F<NW<x'QN~=%.`qg");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("^F<NW<x'QN~=%.`qg");
      BufferingXmlWriter bufferingXmlWriter0 = new BufferingXmlWriter(mockPrintWriter0, writerConfig0, "^F<NW<x'QN~=%.`qg", true, mockFileOutputStream0, 157);
      RepairingNsStreamWriter repairingNsStreamWriter0 = new RepairingNsStreamWriter(bufferingXmlWriter0, "^F<NW<x'QN~=%.`qg", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator((IOContext) null, 157, 157, objectMapper0, repairingNsStreamWriter0);
      toXmlGenerator0.inRoot();
      assertEquals(157, toXmlGenerator0.getFormatFeatures());
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      BufferingXmlWriter bufferingXmlWriter0 = new BufferingXmlWriter((Writer) null, writerConfig0, "E{[4SeA&SI1Y]8@WT=", true, byteArrayOutputStream0, 2);
      SimpleNsStreamWriter simpleNsStreamWriter0 = new SimpleNsStreamWriter(bufferingXmlWriter0, "Hild975NcKNj>z,", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 1000, 5, (ObjectCodec) null, simpleNsStreamWriter0);
      toXmlGenerator0._releaseBuffers();
      assertEquals(5, toXmlGenerator0.getFormatFeatures());
  }
}
