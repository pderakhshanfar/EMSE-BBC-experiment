/*
 * This file was automatically generated by EvoSuite
 * Sun Oct 24 06:26:38 GMT 2021
 */

package com.fasterxml.jackson.dataformat.xml.ser;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.ctc.wstx.api.WriterConfig;
import com.ctc.wstx.sw.AsciiXmlWriter;
import com.ctc.wstx.sw.BufferingXmlWriter;
import com.ctc.wstx.sw.ISOLatin1XmlWriter;
import com.ctc.wstx.sw.NonNsStreamWriter;
import com.ctc.wstx.sw.RepairingNsStreamWriter;
import com.ctc.wstx.sw.SimpleNsStreamWriter;
import com.ctc.wstx.sw.XmlWriter;
import com.fasterxml.jackson.core.Base64Variant;
import com.fasterxml.jackson.core.FormatFeature;
import com.fasterxml.jackson.core.JsonEncoding;
import com.fasterxml.jackson.core.JsonFactory;
import com.fasterxml.jackson.core.JsonGenerator;
import com.fasterxml.jackson.core.ObjectCodec;
import com.fasterxml.jackson.core.PrettyPrinter;
import com.fasterxml.jackson.core.SerializableString;
import com.fasterxml.jackson.core.io.IOContext;
import com.fasterxml.jackson.core.io.SerializedString;
import com.fasterxml.jackson.core.util.BufferRecycler;
import com.fasterxml.jackson.core.util.ByteArrayBuilder;
import com.fasterxml.jackson.core.util.DefaultPrettyPrinter;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.ObjectReader;
import com.fasterxml.jackson.databind.deser.BeanDeserializerFactory;
import com.fasterxml.jackson.databind.deser.DefaultDeserializationContext;
import com.fasterxml.jackson.databind.node.MissingNode;
import com.fasterxml.jackson.databind.ser.DefaultSerializerProvider;
import com.fasterxml.jackson.dataformat.xml.XmlPrettyPrinter;
import com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator;
import com.fasterxml.jackson.dataformat.xml.util.DefaultXmlPrettyPrinter;
import java.io.BufferedOutputStream;
import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.IOException;
import java.io.ObjectOutputStream;
import java.io.OutputStream;
import java.io.OutputStreamWriter;
import java.io.PipedOutputStream;
import java.io.Writer;
import java.math.BigDecimal;
import java.math.BigInteger;
import javax.xml.namespace.QName;
import javax.xml.stream.XMLStreamWriter;
import org.codehaus.stax2.XMLStreamWriter2;
import org.codehaus.stax2.ri.Stax2WriterAdapter;
import org.codehaus.stax2.util.StreamWriter2Delegate;
import org.codehaus.stax2.util.StreamWriterDelegate;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class ToXmlGenerator_ESTest extends ToXmlGenerator_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      StreamWriter2Delegate streamWriter2Delegate0 = new StreamWriter2Delegate((XMLStreamWriter2) null);
      IOContext iOContext0 = new IOContext((BufferRecycler) null, (Object) null, true);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 0, 0, (ObjectCodec) null, streamWriter2Delegate0);
      QName qName0 = QName.valueOf("'fJ//||//)s");
      toXmlGenerator0.setNextIsAttribute(true);
      toXmlGenerator0.setNextNameIfMissing(qName0);
      byte[] byteArray0 = new byte[9];
      // Undeclared exception!
//      try { 
        toXmlGenerator0.writeBinary((Base64Variant) null, byteArray0, 0, (int) (byte)0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.codehaus.stax2.util.StreamWriter2Delegate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      StreamWriter2Delegate streamWriter2Delegate0 = new StreamWriter2Delegate((XMLStreamWriter2) null);
      IOContext iOContext0 = new IOContext((BufferRecycler) null, (Object) null, true);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 2326, 859, (ObjectCodec) null, streamWriter2Delegate0);
      QName qName0 = new QName("'sfJ//|o|/</)s.", "'sfJ//|o|/</)s.", "'; empty String is not a valid name");
      toXmlGenerator0.setNextIsAttribute(true);
      toXmlGenerator0.setNextNameIfMissing(qName0);
      byte[] byteArray0 = new byte[9];
      // Undeclared exception!
//      try { 
        toXmlGenerator0.writeBinary(byteArray0, (-1582), 16384);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      MockFile mockFile0 = new MockFile("m=P3-zpS8h8S");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0);
      WriterConfig writerConfig0 = WriterConfig.createJ2MEDefaults();
      ISOLatin1XmlWriter iSOLatin1XmlWriter0 = new ISOLatin1XmlWriter(mockPrintStream0, writerConfig0, false);
      NonNsStreamWriter nonNsStreamWriter0 = new NonNsStreamWriter(iSOLatin1XmlWriter0, "start an object", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator((IOContext) null, 1448, 3740, (ObjectCodec) null, nonNsStreamWriter0);
      QName qName0 = new QName("start an object", "com.fasterxml.jackson.databind.ser.std.TimeZoneSerializer");
      boolean boolean0 = toXmlGenerator0.setNextNameIfMissing(qName0);
      assertTrue(boolean0);
      
      toXmlGenerator0.writeStartObject();
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      toXmlGenerator0.writeFieldName((SerializableString) serializedString0);
      toXmlGenerator0.writeNumber("com.fasterxml.jackson.databind.ser.std.TimeZoneSerializer");
      toXmlGenerator0.writeFieldName("com.fasterxml.jackson.databind.ser.std.TimeZoneSerializer");
      assertEquals(3740, toXmlGenerator0.getFormatFeatures());
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      StreamWriter2Delegate streamWriter2Delegate0 = new StreamWriter2Delegate((XMLStreamWriter2) null);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator((IOContext) null, 3, 1, (ObjectCodec) null, streamWriter2Delegate0);
      toXmlGenerator0._verifyValueWrite((String) null);
      assertEquals(1, toXmlGenerator0.getFormatFeatures());
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      StreamWriter2Delegate streamWriter2Delegate0 = new StreamWriter2Delegate((XMLStreamWriter2) null);
      IOContext iOContext0 = new IOContext(bufferRecycler0, streamWriter2Delegate0, true);
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      ISOLatin1XmlWriter iSOLatin1XmlWriter0 = new ISOLatin1XmlWriter((OutputStream) null, writerConfig0, true);
      RepairingNsStreamWriter repairingNsStreamWriter0 = new RepairingNsStreamWriter(iSOLatin1XmlWriter0, "", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 5, 3, (ObjectCodec) null, repairingNsStreamWriter0);
      QName qName0 = new QName("", "");
      boolean boolean0 = toXmlGenerator0.setNextNameIfMissing(qName0);
      assertTrue(boolean0);
      
      toXmlGenerator0.writeStartObject();
      toXmlGenerator0.writeStringField("CHARACTERS", ";<-V0F54M{rVte");
      assertEquals(3, toXmlGenerator0.getFormatFeatures());
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      WriterConfig writerConfig0 = WriterConfig.createJ2MEDefaults();
      AsciiXmlWriter asciiXmlWriter0 = new AsciiXmlWriter(byteArrayBuilder0, writerConfig0, true);
      QName qName0 = new QName("Expected non-null NS URI, but current token not a START_ELEMENT or END_ELEMENT (was ", "Invalid input: JSON Pointer expression must start with '/': \"", "");
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      SimpleNsStreamWriter simpleNsStreamWriter0 = new SimpleNsStreamWriter(asciiXmlWriter0, (String) null, writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator((IOContext) null, 15360, 15360, objectMapper0, simpleNsStreamWriter0);
      toXmlGenerator0.setNextNameIfMissing(qName0);
//      try { 
        toXmlGenerator0.writeRawValue((char[]) null, (-217), 55296);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Unbound namespace URI 'Expected non-null NS URI, but current token not a START_ELEMENT or END_ELEMENT (was '
//         //
//         verifyException("com.fasterxml.jackson.dataformat.xml.util.StaxUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      WriterConfig writerConfig0 = WriterConfig.createJ2MEDefaults();
      AsciiXmlWriter asciiXmlWriter0 = new AsciiXmlWriter(byteArrayBuilder0, writerConfig0, true);
      SimpleNsStreamWriter simpleNsStreamWriter0 = new SimpleNsStreamWriter(asciiXmlWriter0, "write Binary value", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator((IOContext) null, (-1856), 1720, (ObjectCodec) null, simpleNsStreamWriter0);
      QName qName0 = new QName("", "write Binary value");
      boolean boolean0 = toXmlGenerator0.setNextNameIfMissing(qName0);
      assertTrue(boolean0);
      
      toXmlGenerator0.writeRawValue((char[]) null, (-1856), (-3192));
      assertEquals(1720, toXmlGenerator0.getFormatFeatures());
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      ObjectMapper objectMapper0 = new ObjectMapper();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      MockPrintStream mockPrintStream0 = new MockPrintStream(byteArrayOutputStream0, false);
      WriterConfig writerConfig0 = WriterConfig.createJ2MEDefaults();
      ISOLatin1XmlWriter iSOLatin1XmlWriter0 = new ISOLatin1XmlWriter(mockPrintStream0, writerConfig0, true);
      RepairingNsStreamWriter repairingNsStreamWriter0 = new RepairingNsStreamWriter(iSOLatin1XmlWriter0, "3/nWN`K9<Ttf\"V", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 1934, 4, objectMapper0, repairingNsStreamWriter0);
      QName qName0 = new QName("3/nWN`K9<Ttf\"V");
      toXmlGenerator0.setNextName(qName0);
      toXmlGenerator0.writeNumber("3/nWN`K9<Ttf\"V");
//      try { 
        toXmlGenerator0.writeRawValue("3/nWN`K9<Ttf\"V", 2, 3881);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Trying to output second root, <3/nWN`K9<Ttf\"V>
//         //
//         verifyException("com.fasterxml.jackson.dataformat.xml.util.StaxUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      MockPrintStream mockPrintStream0 = new MockPrintStream(byteArrayOutputStream0, false);
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      ISOLatin1XmlWriter iSOLatin1XmlWriter0 = new ISOLatin1XmlWriter(mockPrintStream0, writerConfig0, false);
      RepairingNsStreamWriter repairingNsStreamWriter0 = new RepairingNsStreamWriter(iSOLatin1XmlWriter0, "3/nWNfK9wC<Ttf\"V", writerConfig0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, iSOLatin1XmlWriter0, false);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 1, 1, (ObjectCodec) null, repairingNsStreamWriter0);
      QName qName0 = QName.valueOf("3/nWNfK9wC<Ttf\"V");
      toXmlGenerator0.setNextName(qName0);
      toXmlGenerator0.writeRawValue("", 1, (-5343));
      assertEquals(1, toXmlGenerator0.getFormatFeatures());
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(byteArrayOutputStream0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(objectOutputStream0);
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      MockPrintStream mockPrintStream0 = new MockPrintStream(objectOutputStream0, true);
      BufferingXmlWriter bufferingXmlWriter0 = new BufferingXmlWriter(mockPrintWriter0, writerConfig0, (String) null, false, mockPrintStream0, 2);
      NonNsStreamWriter nonNsStreamWriter0 = new NonNsStreamWriter(bufferingXmlWriter0, (String) null, writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator((IOContext) null, 0, 2061, (ObjectCodec) null, nonNsStreamWriter0);
      QName qName0 = new QName("D2U'TA8C?/Fs");
      boolean boolean0 = toXmlGenerator0.setNextNameIfMissing(qName0);
      assertTrue(boolean0);
      
      toXmlGenerator0.writeRawValue("c.u.@C$fGD^q");
      assertEquals(2061, toXmlGenerator0.getFormatFeatures());
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      WriterConfig writerConfig0 = WriterConfig.createJ2MEDefaults();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      AsciiXmlWriter asciiXmlWriter0 = new AsciiXmlWriter(pipedOutputStream0, writerConfig0, true);
      RepairingNsStreamWriter repairingNsStreamWriter0 = new RepairingNsStreamWriter(asciiXmlWriter0, (String) null, writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator((IOContext) null, 2, 2, (ObjectCodec) null, repairingNsStreamWriter0);
      char[] charArray0 = new char[3];
//      try { 
        toXmlGenerator0.writeRaw(charArray0, 0, 2);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Invalid null character in text to output
//         //
//         verifyException("com.fasterxml.jackson.dataformat.xml.util.StaxUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      WriterConfig writerConfig0 = WriterConfig.createJ2MEDefaults();
      ISOLatin1XmlWriter iSOLatin1XmlWriter0 = new ISOLatin1XmlWriter((OutputStream) null, writerConfig0, true);
      RepairingNsStreamWriter repairingNsStreamWriter0 = new RepairingNsStreamWriter(iSOLatin1XmlWriter0, "JSON", writerConfig0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, iSOLatin1XmlWriter0, true);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 1, (-1291), objectMapper0, repairingNsStreamWriter0);
      toXmlGenerator0.writeRaw("JSON", 2, (-1000));
      assertEquals((-1291), toXmlGenerator0.getFormatFeatures());
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, false);
      ObjectMapper objectMapper0 = new ObjectMapper();
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      AsciiXmlWriter asciiXmlWriter0 = new AsciiXmlWriter(byteArrayBuilder0, writerConfig0, false);
      SimpleNsStreamWriter simpleNsStreamWriter0 = new SimpleNsStreamWriter(asciiXmlWriter0, "1Om3gI.c-F8", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 497, 1, objectMapper0, simpleNsStreamWriter0);
      toXmlGenerator0.writeRaw('w');
      assertEquals(1, toXmlGenerator0.getFormatFeatures());
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      MockFile mockFile0 = new MockFile("com.fasterxml.jackson.databind.deser.impl.ExternalTypeHandler");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0);
      WriterConfig writerConfig0 = WriterConfig.createJ2MEDefaults();
      ISOLatin1XmlWriter iSOLatin1XmlWriter0 = new ISOLatin1XmlWriter(mockFileOutputStream0, writerConfig0, false);
      NonNsStreamWriter nonNsStreamWriter0 = new NonNsStreamWriter(iSOLatin1XmlWriter0, "nW", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator((IOContext) null, 96, 96, (ObjectCodec) null, nonNsStreamWriter0);
      QName qName0 = QName.valueOf("nW");
      boolean boolean0 = toXmlGenerator0.setNextNameIfMissing(qName0);
      assertTrue(boolean0);
      
      toXmlGenerator0.writeNumber((BigDecimal) null);
      assertEquals(96, toXmlGenerator0.getFormatFeatures());
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      ObjectMapper objectMapper0 = new ObjectMapper();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      MockPrintStream mockPrintStream0 = new MockPrintStream(byteArrayOutputStream0, true);
      WriterConfig writerConfig0 = WriterConfig.createJ2MEDefaults();
      ISOLatin1XmlWriter iSOLatin1XmlWriter0 = new ISOLatin1XmlWriter(mockPrintStream0, writerConfig0, true);
      RepairingNsStreamWriter repairingNsStreamWriter0 = new RepairingNsStreamWriter(iSOLatin1XmlWriter0, "ei", writerConfig0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, iSOLatin1XmlWriter0, true);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 1, 0, objectMapper0, repairingNsStreamWriter0);
      QName qName0 = new QName("ei", "ei", "ei");
      toXmlGenerator0.setNextName(qName0);
      toXmlGenerator0.writeNumber((long) 2);
      assertEquals(0, toXmlGenerator0.getFormatFeatures());
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      WriterConfig writerConfig0 = WriterConfig.createJ2MEDefaults();
      AsciiXmlWriter asciiXmlWriter0 = new AsciiXmlWriter(byteArrayBuilder0, writerConfig0, false);
      RepairingNsStreamWriter repairingNsStreamWriter0 = new RepairingNsStreamWriter(asciiXmlWriter0, (String) null, writerConfig0);
      QName qName0 = new QName((String) null, "");
      IOContext iOContext0 = new IOContext((BufferRecycler) null, (Object) null, true);
      ObjectMapper objectMapper0 = new ObjectMapper();
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 0, 0, objectMapper0, repairingNsStreamWriter0);
      boolean boolean0 = toXmlGenerator0.setNextNameIfMissing(qName0);
      assertTrue(boolean0);
      
      toXmlGenerator0.writeNumber(1167);
      assertEquals(0, toXmlGenerator0.getFormatFeatures());
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      ObjectMapper objectMapper0 = new ObjectMapper();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      MockPrintStream mockPrintStream0 = new MockPrintStream(byteArrayOutputStream0, true);
      WriterConfig writerConfig0 = WriterConfig.createJ2MEDefaults();
      ISOLatin1XmlWriter iSOLatin1XmlWriter0 = new ISOLatin1XmlWriter(mockPrintStream0, writerConfig0, true);
      RepairingNsStreamWriter repairingNsStreamWriter0 = new RepairingNsStreamWriter(iSOLatin1XmlWriter0, "ei", writerConfig0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, iSOLatin1XmlWriter0, true);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 1, 0, objectMapper0, repairingNsStreamWriter0);
      QName qName0 = new QName("ei", "ei", "ei");
      toXmlGenerator0.setNextName(qName0);
      toXmlGenerator0.writeNumber((float) 3);
      assertEquals(0, toXmlGenerator0.getFormatFeatures());
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      ISOLatin1XmlWriter iSOLatin1XmlWriter0 = new ISOLatin1XmlWriter(pipedOutputStream0, writerConfig0, true);
      RepairingNsStreamWriter repairingNsStreamWriter0 = new RepairingNsStreamWriter(iSOLatin1XmlWriter0, "", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator((IOContext) null, 3, 2513, objectMapper0, repairingNsStreamWriter0);
      QName qName0 = new QName("BLKYHODplr");
      toXmlGenerator0.setNextNameIfMissing(qName0);
      byte[] byteArray0 = new byte[4];
      toXmlGenerator0.writeBinary(byteArray0);
//      try { 
        toXmlGenerator0.writeBinary(byteArray0, 4452, (-897));
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Trying to output second root, <BLKYHODplr>
//         //
//         verifyException("com.fasterxml.jackson.dataformat.xml.util.StaxUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0);
      AsciiXmlWriter asciiXmlWriter0 = new AsciiXmlWriter(byteArrayBuilder0, writerConfig0, false);
      RepairingNsStreamWriter repairingNsStreamWriter0 = new RepairingNsStreamWriter(asciiXmlWriter0, "com.fasterxml.jackson.databind.deser.impl.ExternalTypeHandler", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator((IOContext) null, (-687), (-687), (ObjectCodec) null, repairingNsStreamWriter0);
      QName qName0 = QName.valueOf("'fJ//||//)s");
      boolean boolean0 = toXmlGenerator0.setNextNameIfMissing(qName0);
      assertTrue(boolean0);
      
      toXmlGenerator0.writeBinary((Base64Variant) null, byteArrayBuilder0.NO_BYTES, 3, 0);
      assertEquals((-687), toXmlGenerator0.getFormatFeatures());
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      MockFile mockFile0 = new MockFile("m=P3-zpS8h8S");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0);
      WriterConfig writerConfig0 = WriterConfig.createJ2MEDefaults();
      ISOLatin1XmlWriter iSOLatin1XmlWriter0 = new ISOLatin1XmlWriter(mockPrintStream0, writerConfig0, false);
      NonNsStreamWriter nonNsStreamWriter0 = new NonNsStreamWriter(iSOLatin1XmlWriter0, "start an object", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator((IOContext) null, 1448, 3740, (ObjectCodec) null, nonNsStreamWriter0);
      QName qName0 = new QName(" for node '", "m=P3-zpS8h8S");
      boolean boolean0 = toXmlGenerator0.setNextNameIfMissing(qName0);
      assertTrue(boolean0);
      
      toXmlGenerator0.writeStartObject();
      toXmlGenerator0.finishWrappedValue(qName0, qName0);
      assertEquals(3740, toXmlGenerator0.getFormatFeatures());
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      MissingNode missingNode0 = MissingNode.getInstance();
      IOContext iOContext0 = new IOContext(bufferRecycler0, missingNode0, false);
      ObjectMapper objectMapper0 = new ObjectMapper();
      StreamWriter2Delegate streamWriter2Delegate0 = new StreamWriter2Delegate((XMLStreamWriter2) null);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 0, 2, objectMapper0, streamWriter2Delegate0);
      assertEquals(2, toXmlGenerator0.getFormatFeatures());
      
      toXmlGenerator0.overrideFormatFeatures(0, 3);
      assertEquals(0, toXmlGenerator0.getFormatFeatures());
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      MissingNode missingNode0 = MissingNode.getInstance();
      IOContext iOContext0 = new IOContext(bufferRecycler0, missingNode0, false);
      ObjectMapper objectMapper0 = new ObjectMapper();
      StreamWriter2Delegate streamWriter2Delegate0 = new StreamWriter2Delegate((XMLStreamWriter2) null);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 239, (-1000), objectMapper0, streamWriter2Delegate0);
      JsonGenerator jsonGenerator0 = toXmlGenerator0.overrideFormatFeatures((-1067), 0);
      assertEquals((-1000), jsonGenerator0.getFormatFeatures());
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("/NPXaR7I{[dl(F/UP", true);
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      ISOLatin1XmlWriter iSOLatin1XmlWriter0 = new ISOLatin1XmlWriter(mockFileOutputStream0, writerConfig0, false);
      NonNsStreamWriter nonNsStreamWriter0 = new NonNsStreamWriter(iSOLatin1XmlWriter0, "/NPXaR7I{[dl(F/UP", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator((IOContext) null, 95, 55326, (ObjectCodec) null, nonNsStreamWriter0);
      toXmlGenerator0.writeStartArray();
      toXmlGenerator0.inRoot();
      assertEquals(55326, toXmlGenerator0.getFormatFeatures());
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      MissingNode missingNode0 = MissingNode.getInstance();
      IOContext iOContext0 = new IOContext(bufferRecycler0, missingNode0, false);
      ObjectMapper objectMapper0 = new ObjectMapper();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      WriterConfig writerConfig0 = WriterConfig.createJ2MEDefaults();
      ISOLatin1XmlWriter iSOLatin1XmlWriter0 = new ISOLatin1XmlWriter(byteArrayOutputStream0, writerConfig0, true);
      RepairingNsStreamWriter repairingNsStreamWriter0 = new RepairingNsStreamWriter(iSOLatin1XmlWriter0, "M4ddg%}sQx;N", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 2, 2, objectMapper0, repairingNsStreamWriter0);
      assertEquals(2, toXmlGenerator0.getFormatFeatures());
      
      ToXmlGenerator.Feature toXmlGenerator_Feature0 = ToXmlGenerator.Feature.WRITE_XML_1_1;
      toXmlGenerator0.configure(toXmlGenerator_Feature0, false);
      int int0 = toXmlGenerator0.getFormatFeatures();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      JsonFactory jsonFactory0 = new JsonFactory();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0, defaultSerializerProvider_Impl0, (DefaultDeserializationContext) null);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0);
      WriterConfig writerConfig0 = WriterConfig.createJ2MEDefaults();
      AsciiXmlWriter asciiXmlWriter0 = new AsciiXmlWriter(byteArrayBuilder0, writerConfig0, false);
      SimpleNsStreamWriter simpleNsStreamWriter0 = new SimpleNsStreamWriter(asciiXmlWriter0, "IgVsxN(L3%S", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 1, (-1088), objectMapper0, simpleNsStreamWriter0);
      int int0 = toXmlGenerator0.getFormatFeatures();
      assertEquals((-1088), int0);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      StreamWriter2Delegate streamWriter2Delegate0 = new StreamWriter2Delegate((XMLStreamWriter2) null);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator((IOContext) null, 2, 1, (ObjectCodec) null, streamWriter2Delegate0);
      toXmlGenerator0.writeStartArray(2);
      ToXmlGenerator.Feature toXmlGenerator_Feature0 = ToXmlGenerator.Feature.WRITE_XML_1_1;
      toXmlGenerator0.enable(toXmlGenerator_Feature0);
      assertEquals(3, toXmlGenerator0.getFormatFeatures());
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory((ObjectCodec) null);
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      WriterConfig writerConfig0 = WriterConfig.createJ2MEDefaults();
      SimpleNsStreamWriter simpleNsStreamWriter0 = new SimpleNsStreamWriter((XmlWriter) null, "com.fasterxml.jackson.databind.ser.BeanSerializer", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator((IOContext) null, 0, 0, objectMapper0, simpleNsStreamWriter0);
      assertEquals(0, toXmlGenerator0.getFormatFeatures());
      
      ToXmlGenerator.Feature toXmlGenerator_Feature0 = ToXmlGenerator.Feature.WRITE_XML_DECLARATION;
      toXmlGenerator0.enable(toXmlGenerator_Feature0);
      assertEquals(1, toXmlGenerator0.getFormatFeatures());
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      WriterConfig writerConfig0 = WriterConfig.createJ2MEDefaults();
      AsciiXmlWriter asciiXmlWriter0 = new AsciiXmlWriter((OutputStream) null, writerConfig0, true);
      RepairingNsStreamWriter repairingNsStreamWriter0 = new RepairingNsStreamWriter(asciiXmlWriter0, "G=C", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, (-424), 78, (ObjectCodec) null, repairingNsStreamWriter0);
      assertEquals(78, toXmlGenerator0.getFormatFeatures());
      
      ToXmlGenerator.Feature toXmlGenerator_Feature0 = ToXmlGenerator.Feature.WRITE_XML_DECLARATION;
      toXmlGenerator0.enable(toXmlGenerator_Feature0);
      assertEquals(79, toXmlGenerator0.getFormatFeatures());
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, false);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(3);
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      AsciiXmlWriter asciiXmlWriter0 = new AsciiXmlWriter(byteArrayBuilder0, writerConfig0, false);
      NonNsStreamWriter nonNsStreamWriter0 = new NonNsStreamWriter(asciiXmlWriter0, "write raw value", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 2, 4096, objectMapper0, nonNsStreamWriter0);
      ToXmlGenerator.Feature toXmlGenerator_Feature0 = ToXmlGenerator.Feature.WRITE_XML_1_1;
      QName qName0 = new QName("");
      toXmlGenerator0.startWrappedValue(qName0, qName0);
      toXmlGenerator0.close();
      ToXmlGenerator toXmlGenerator1 = toXmlGenerator0.disable(toXmlGenerator_Feature0);
      assertEquals(4096, toXmlGenerator1.getFormatFeatures());
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("com.fasterxml.jackson.databind.deser.impl.ExternalTypeHandler");
      WriterConfig writerConfig0 = WriterConfig.createJ2MEDefaults();
      ISOLatin1XmlWriter iSOLatin1XmlWriter0 = new ISOLatin1XmlWriter(mockFileOutputStream0, writerConfig0, false);
      NonNsStreamWriter nonNsStreamWriter0 = new NonNsStreamWriter(iSOLatin1XmlWriter0, "com.fasterxml.jackson.databind.deser.impl.ExternalTypeHandler", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator((IOContext) null, 126, 126, (ObjectCodec) null, nonNsStreamWriter0);
      QName qName0 = QName.valueOf("com.fasterxml.jackson.databind.deser.impl.ExternalTypeHandler");
      toXmlGenerator0.setNextNameIfMissing(qName0);
      toXmlGenerator0.writeStartObject();
      ToXmlGenerator.Feature toXmlGenerator_Feature0 = ToXmlGenerator.Feature.WRITE_XML_1_1;
      toXmlGenerator0.disable(toXmlGenerator_Feature0);
      assertEquals(124, toXmlGenerator0.getFormatFeatures());
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      WriterConfig writerConfig0 = WriterConfig.createJ2MEDefaults();
      ISOLatin1XmlWriter iSOLatin1XmlWriter0 = new ISOLatin1XmlWriter((OutputStream) null, writerConfig0, true);
      RepairingNsStreamWriter repairingNsStreamWriter0 = new RepairingNsStreamWriter(iSOLatin1XmlWriter0, "JSON", writerConfig0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, iSOLatin1XmlWriter0, true);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 1, (-1291), objectMapper0, repairingNsStreamWriter0);
      ToXmlGenerator.Feature toXmlGenerator_Feature0 = ToXmlGenerator.Feature.WRITE_XML_1_1;
      ToXmlGenerator toXmlGenerator1 = toXmlGenerator0.disable(toXmlGenerator_Feature0);
      assertEquals((-1291), toXmlGenerator1.getFormatFeatures());
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory((ObjectCodec) null);
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      WriterConfig writerConfig0 = WriterConfig.createJ2MEDefaults();
      SimpleNsStreamWriter simpleNsStreamWriter0 = new SimpleNsStreamWriter((XmlWriter) null, "com.fasterxml.jackson.databind.ser.BeanSerializer", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator((IOContext) null, 0, 0, objectMapper0, simpleNsStreamWriter0);
      ToXmlGenerator.Feature toXmlGenerator_Feature0 = ToXmlGenerator.Feature.WRITE_XML_DECLARATION;
      toXmlGenerator0.disable(toXmlGenerator_Feature0);
      assertEquals(0, toXmlGenerator0.getFormatFeatures());
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      WriterConfig writerConfig0 = WriterConfig.createJ2MEDefaults();
      AsciiXmlWriter asciiXmlWriter0 = new AsciiXmlWriter((OutputStream) null, writerConfig0, true);
      RepairingNsStreamWriter repairingNsStreamWriter0 = new RepairingNsStreamWriter(asciiXmlWriter0, "G=C", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, (-424), 78, (ObjectCodec) null, repairingNsStreamWriter0);
      ToXmlGenerator.Feature toXmlGenerator_Feature0 = ToXmlGenerator.Feature.WRITE_XML_DECLARATION;
      toXmlGenerator0.disable(toXmlGenerator_Feature0);
      assertEquals(78, toXmlGenerator0.getFormatFeatures());
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, false);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(3);
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      AsciiXmlWriter asciiXmlWriter0 = new AsciiXmlWriter(byteArrayBuilder0, writerConfig0, false);
      NonNsStreamWriter nonNsStreamWriter0 = new NonNsStreamWriter(asciiXmlWriter0, "write raw value", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 2, 4096, objectMapper0, nonNsStreamWriter0);
      ToXmlGenerator.Feature toXmlGenerator_Feature0 = ToXmlGenerator.Feature.WRITE_XML_1_1;
      QName qName0 = new QName("");
      toXmlGenerator0.startWrappedValue(qName0, qName0);
      toXmlGenerator0.close();
      ToXmlGenerator toXmlGenerator1 = toXmlGenerator0.configure(toXmlGenerator_Feature0, false);
      assertEquals(4096, toXmlGenerator1.getFormatFeatures());
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      MissingNode missingNode0 = MissingNode.getInstance();
      IOContext iOContext0 = new IOContext(bufferRecycler0, missingNode0, true);
      ObjectMapper objectMapper0 = new ObjectMapper();
      StreamWriter2Delegate streamWriter2Delegate0 = new StreamWriter2Delegate((XMLStreamWriter2) null);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 0, 2, objectMapper0, streamWriter2Delegate0);
      toXmlGenerator0.writeStartArray(5);
      assertEquals(2, toXmlGenerator0.getFormatFeatures());
      
      ToXmlGenerator.Feature toXmlGenerator_Feature0 = ToXmlGenerator.Feature.WRITE_XML_DECLARATION;
      toXmlGenerator0.configure(toXmlGenerator_Feature0, true);
      assertEquals(3, toXmlGenerator0.getFormatFeatures());
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      StreamWriter2Delegate streamWriter2Delegate0 = new StreamWriter2Delegate((XMLStreamWriter2) null);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator((IOContext) null, 55296, 55296, (ObjectCodec) null, streamWriter2Delegate0);
      toXmlGenerator0.setNextIsUnwrapped(true);
      boolean boolean0 = toXmlGenerator0.checkNextIsUnwrapped();
      assertEquals(55296, toXmlGenerator0.getFormatFeatures());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      StreamWriter2Delegate streamWriter2Delegate0 = new StreamWriter2Delegate((XMLStreamWriter2) null);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator((IOContext) null, 56319, 56319, (ObjectCodec) null, streamWriter2Delegate0);
      toXmlGenerator0.checkNextIsUnwrapped();
      assertEquals(56319, toXmlGenerator0.getFormatFeatures());
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      MockFile mockFile0 = new MockFile("m=P3-zpS8h8S");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0);
      WriterConfig writerConfig0 = WriterConfig.createJ2MEDefaults();
      ISOLatin1XmlWriter iSOLatin1XmlWriter0 = new ISOLatin1XmlWriter(mockPrintStream0, writerConfig0, false);
      NonNsStreamWriter nonNsStreamWriter0 = new NonNsStreamWriter(iSOLatin1XmlWriter0, "start an object", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator((IOContext) null, 1448, 3740, (ObjectCodec) null, nonNsStreamWriter0);
      QName qName0 = new QName(" for node '", "m=P3-zpS8h8S");
      toXmlGenerator0.setNextNameIfMissing(qName0);
      toXmlGenerator0.writeStartObject();
      // Undeclared exception!
//      try { 
        toXmlGenerator0.writeStringField((String) null, ">rQx0d~q.[RgT]");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // local part cannot be \"null\" when creating a QName
//         //
//         verifyException("javax.xml.namespace.QName", e);
//      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      DefaultXmlPrettyPrinter defaultXmlPrettyPrinter0 = new DefaultXmlPrettyPrinter();
      IOContext iOContext0 = new IOContext(bufferRecycler0, defaultXmlPrettyPrinter0, false);
      ObjectMapper objectMapper0 = new ObjectMapper();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      MockPrintStream mockPrintStream0 = new MockPrintStream(byteArrayOutputStream0, false);
      WriterConfig writerConfig0 = WriterConfig.createJ2MEDefaults();
      ISOLatin1XmlWriter iSOLatin1XmlWriter0 = new ISOLatin1XmlWriter(mockPrintStream0, writerConfig0, true);
      RepairingNsStreamWriter repairingNsStreamWriter0 = new RepairingNsStreamWriter(iSOLatin1XmlWriter0, "3/nWN`K9<Ttf\"V", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 2, 2, objectMapper0, repairingNsStreamWriter0);
      QName qName0 = new QName("3/nWN`K9<Ttf\"V");
      toXmlGenerator0.setNextName(qName0);
      char[] charArray0 = new char[5];
      // Undeclared exception!
//      try { 
        toXmlGenerator0.writeString(charArray0, 55296, 3);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 55296
//         //
//         verifyException("com.ctc.wstx.sw.ISOLatin1XmlWriter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      MockFile mockFile0 = new MockFile("start an object");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0);
      WriterConfig writerConfig0 = WriterConfig.createJ2MEDefaults();
      ISOLatin1XmlWriter iSOLatin1XmlWriter0 = new ISOLatin1XmlWriter(mockPrintStream0, writerConfig0, false);
      NonNsStreamWriter nonNsStreamWriter0 = new NonNsStreamWriter(iSOLatin1XmlWriter0, ".)gF3Y;Fr0zDHL]GVGS8", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator((IOContext) null, 3, 1, (ObjectCodec) null, nonNsStreamWriter0);
      QName qName0 = new QName(" for node '", "$VALUES");
      toXmlGenerator0.setNextNameIfMissing(qName0);
      toXmlGenerator0.writeNumber((BigInteger) null);
//      try { 
        toXmlGenerator0.writeString((char[]) null, 1, (-2163));
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // No open start element, when trying to write end element
//         //
//         verifyException("com.fasterxml.jackson.dataformat.xml.util.StaxUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      ObjectMapper objectMapper0 = new ObjectMapper();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      MockPrintStream mockPrintStream0 = new MockPrintStream(byteArrayOutputStream0, false);
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      ISOLatin1XmlWriter iSOLatin1XmlWriter0 = new ISOLatin1XmlWriter(mockPrintStream0, writerConfig0, false);
      RepairingNsStreamWriter repairingNsStreamWriter0 = new RepairingNsStreamWriter(iSOLatin1XmlWriter0, "ei", writerConfig0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, iSOLatin1XmlWriter0, false);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 1, 0, objectMapper0, repairingNsStreamWriter0);
      QName qName0 = QName.valueOf("ei");
      toXmlGenerator0.setNextName(qName0);
      toXmlGenerator0.writeNumber("ei");
//      try { 
        toXmlGenerator0.writeString("ei");
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Trying to output second root, <ei>
//         //
//         verifyException("com.fasterxml.jackson.dataformat.xml.util.StaxUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("1zsaTKph%A!1");
      WriterConfig writerConfig0 = WriterConfig.createJ2MEDefaults();
      AsciiXmlWriter asciiXmlWriter0 = new AsciiXmlWriter(mockPrintStream0, writerConfig0, false);
      RepairingNsStreamWriter repairingNsStreamWriter0 = new RepairingNsStreamWriter(asciiXmlWriter0, (String) null, writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 0, 0, objectMapper0, repairingNsStreamWriter0);
      // Undeclared exception!
//      try { 
        toXmlGenerator0.writeString((SerializableString) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      StreamWriter2Delegate streamWriter2Delegate0 = new StreamWriter2Delegate((XMLStreamWriter2) null);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator((IOContext) null, 2, 0, (ObjectCodec) null, streamWriter2Delegate0);
      QName qName0 = new QName("D2U'TA8C?/Fs");
      toXmlGenerator0.setNextNameIfMissing(qName0);
      // Undeclared exception!
//      try { 
        toXmlGenerator0.writeStartObject();
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("com.fasterxml.jacs0n.databind.deser.Ampl.ExternalTypeHandler");
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      ISOLatin1XmlWriter iSOLatin1XmlWriter0 = new ISOLatin1XmlWriter(mockFileOutputStream0, writerConfig0, true);
      NonNsStreamWriter nonNsStreamWriter0 = new NonNsStreamWriter(iSOLatin1XmlWriter0, "com.fasterxml.jacs0n.databind.deser.Ampl.ExternalTypeHandler", writerConfig0);
      char[] charArray0 = new char[2];
      iSOLatin1XmlWriter0.writeRawAscii(charArray0, (-16), (-3327));
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator((IOContext) null, (-16), (-16), (ObjectCodec) null, nonNsStreamWriter0);
      QName qName0 = new QName("com.fasterxml.jacs0n.databind.deser.Ampl.ExternalTypeHandler", "com.fasterxml.jacs0n.databind.deser.Ampl.ExternalTypeHandler", "com.fasterxml.jacs0n.databind.deser.Ampl.ExternalTypeHandler");
      toXmlGenerator0.setNextNameIfMissing(qName0);
      // Undeclared exception!
//      try { 
        toXmlGenerator0.writeStartObject();
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      MockFile mockFile0 = new MockFile("start an object");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0);
      WriterConfig writerConfig0 = WriterConfig.createJ2MEDefaults();
      ISOLatin1XmlWriter iSOLatin1XmlWriter0 = new ISOLatin1XmlWriter(mockPrintStream0, writerConfig0, false);
      NonNsStreamWriter nonNsStreamWriter0 = new NonNsStreamWriter(iSOLatin1XmlWriter0, ".)gF3Y;Fr0zDHL]GVGS8", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator((IOContext) null, 3, 1, (ObjectCodec) null, nonNsStreamWriter0);
      QName qName0 = new QName(" for node '", "$VALUES");
      toXmlGenerator0.setNextNameIfMissing(qName0);
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      toXmlGenerator0.writeNumber(bigDecimal0);
//      try { 
        toXmlGenerator0.writeStartObject();
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Trying to output second root, <$VALUES>
//         //
//         verifyException("com.fasterxml.jackson.dataformat.xml.util.StaxUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectReader objectReader0 = objectMapper0.reader((Base64Variant) null);
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      NonNsStreamWriter nonNsStreamWriter0 = new NonNsStreamWriter((XmlWriter) null, "org.codehaus.stax2.ri.typed.AsciiValueEncoder", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 1, 0, objectReader0, nonNsStreamWriter0);
      // Undeclared exception!
//      try { 
        toXmlGenerator0.writeRepeatedFieldName();
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      StreamWriter2Delegate streamWriter2Delegate0 = new StreamWriter2Delegate((XMLStreamWriter2) null);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator((IOContext) null, 2, 2, (ObjectCodec) null, streamWriter2Delegate0);
      QName qName0 = new QName("v*@.(Gyf-O@N\u0000Y");
      toXmlGenerator0.setNextIsAttribute(true);
      toXmlGenerator0.setNextNameIfMissing(qName0);
      char[] charArray0 = new char[1];
      // Undeclared exception!
//      try { 
        toXmlGenerator0.writeRawValue(charArray0, 3, 3);
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      ObjectMapper objectMapper0 = new ObjectMapper();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      MockPrintStream mockPrintStream0 = new MockPrintStream(byteArrayOutputStream0, false);
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      ISOLatin1XmlWriter iSOLatin1XmlWriter0 = new ISOLatin1XmlWriter(mockPrintStream0, writerConfig0, false);
      RepairingNsStreamWriter repairingNsStreamWriter0 = new RepairingNsStreamWriter(iSOLatin1XmlWriter0, "ei", writerConfig0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, iSOLatin1XmlWriter0, false);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 1, 0, objectMapper0, repairingNsStreamWriter0);
      QName qName0 = QName.valueOf("ei");
      toXmlGenerator0.setNextName(qName0);
      char[] charArray0 = new char[7];
      // Undeclared exception!
//      try { 
        toXmlGenerator0.writeRawValue(charArray0, 2607, 2);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 2607
//         //
//         verifyException("com.ctc.wstx.sw.ISOLatin1XmlWriter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      MissingNode missingNode0 = MissingNode.getInstance();
      IOContext iOContext0 = new IOContext(bufferRecycler0, missingNode0, false);
      ObjectMapper objectMapper0 = new ObjectMapper();
      WriterConfig writerConfig0 = WriterConfig.createJ2MEDefaults();
      RepairingNsStreamWriter repairingNsStreamWriter0 = new RepairingNsStreamWriter((XmlWriter) null, "", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 0, (-245), objectMapper0, repairingNsStreamWriter0);
      char[] charArray0 = new char[1];
      // Undeclared exception!
//      try { 
        toXmlGenerator0.writeRaw(charArray0, 2, 1);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.ctc.wstx.sw.BaseStreamWriter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      OutputStreamWriter outputStreamWriter0 = new OutputStreamWriter(byteArrayOutputStream0);
      WriterConfig writerConfig0 = WriterConfig.createJ2MEDefaults();
      BufferingXmlWriter bufferingXmlWriter0 = new BufferingXmlWriter(outputStreamWriter0, writerConfig0, "start an object", true, byteArrayOutputStream0, (-1096));
      NonNsStreamWriter nonNsStreamWriter0 = new NonNsStreamWriter(bufferingXmlWriter0, "", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator((IOContext) null, 2, 1, (ObjectCodec) null, nonNsStreamWriter0);
      char[] charArray0 = new char[4];
      // Undeclared exception!
//      try { 
        toXmlGenerator0.writeRaw(charArray0, 227, 3243);
//        fail("Expecting exception: IndexOutOfBoundsException");
      
//      } catch(IndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      DefaultXmlPrettyPrinter defaultXmlPrettyPrinter0 = new DefaultXmlPrettyPrinter();
      IOContext iOContext0 = new IOContext(bufferRecycler0, defaultXmlPrettyPrinter0, false);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      ISOLatin1XmlWriter iSOLatin1XmlWriter0 = new ISOLatin1XmlWriter(byteArrayBuilder0, writerConfig0, false);
      RepairingNsStreamWriter repairingNsStreamWriter0 = new RepairingNsStreamWriter(iSOLatin1XmlWriter0, "", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 3, 968, (ObjectCodec) null, repairingNsStreamWriter0);
      char[] charArray0 = new char[5];
      // Undeclared exception!
//      try { 
        toXmlGenerator0.writeRaw(charArray0, 968, 2);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 968
//         //
//         verifyException("com.ctc.wstx.sw.ISOLatin1XmlWriter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("com.fasterxml.jackson.databind.deser.impl.ExternalTypeHandler");
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      AsciiXmlWriter asciiXmlWriter0 = new AsciiXmlWriter(mockFileOutputStream0, writerConfig0, false);
      RepairingNsStreamWriter repairingNsStreamWriter0 = new RepairingNsStreamWriter(asciiXmlWriter0, "", writerConfig0);
      StreamWriterDelegate streamWriterDelegate0 = new StreamWriterDelegate(repairingNsStreamWriter0);
      XMLStreamWriter2 xMLStreamWriter2_0 = Stax2WriterAdapter.wrapIfNecessary(streamWriterDelegate0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator((IOContext) null, 15360, (-2), (ObjectCodec) null, xMLStreamWriter2_0);
      // Undeclared exception!
//      try { 
        toXmlGenerator0.writeRaw("write String value", (-930), (-2));
//        fail("Expecting exception: UnsupportedOperationException");
      
//      } catch(UnsupportedOperationException e) {
//         //
//         // Not implemented
//         //
//         verifyException("org.codehaus.stax2.ri.Stax2WriterAdapter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      ObjectMapper objectMapper0 = new ObjectMapper();
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      ISOLatin1XmlWriter iSOLatin1XmlWriter0 = new ISOLatin1XmlWriter(byteArrayBuilder0, writerConfig0, true);
      RepairingNsStreamWriter repairingNsStreamWriter0 = new RepairingNsStreamWriter(iSOLatin1XmlWriter0, "\"FdP", writerConfig0);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArrayBuilder0.NO_BYTES, 3, 454);
      IOContext iOContext0 = new IOContext(bufferRecycler0, byteArrayInputStream0, true);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 3, 454, objectMapper0, repairingNsStreamWriter0);
      // Undeclared exception!
//      try { 
        toXmlGenerator0.writeRaw("FX", 5, 1);
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      DefaultXmlPrettyPrinter defaultXmlPrettyPrinter0 = new DefaultXmlPrettyPrinter();
      IOContext iOContext0 = new IOContext(bufferRecycler0, defaultXmlPrettyPrinter0, false);
      StreamWriter2Delegate streamWriter2Delegate0 = new StreamWriter2Delegate((XMLStreamWriter2) null);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 1, 1, (ObjectCodec) null, streamWriter2Delegate0);
      // Undeclared exception!
//      try { 
        toXmlGenerator0.writeRaw("0Xbg");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.codehaus.stax2.util.StreamWriter2Delegate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      StreamWriter2Delegate streamWriter2Delegate0 = new StreamWriter2Delegate((XMLStreamWriter2) null);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator((IOContext) null, 57343, 57343, (ObjectCodec) null, streamWriter2Delegate0);
      streamWriter2Delegate0.setParent(streamWriter2Delegate0);
      QName qName0 = new QName("' not re|ognizQd");
      toXmlGenerator0.setNextName(qName0);
      BigInteger bigInteger0 = BigInteger.ONE;
      // Undeclared exception!
//      try { 
        toXmlGenerator0.writeNumber(bigInteger0);
//        fail("Expecting exception: StackOverflowError");
      
//      } catch(StackOverflowError e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      ObjectMapper objectMapper0 = new ObjectMapper();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      MockPrintStream mockPrintStream0 = new MockPrintStream(byteArrayOutputStream0, false);
      WriterConfig writerConfig0 = WriterConfig.createJ2MEDefaults();
      ISOLatin1XmlWriter iSOLatin1XmlWriter0 = new ISOLatin1XmlWriter(mockPrintStream0, writerConfig0, false);
      RepairingNsStreamWriter repairingNsStreamWriter0 = new RepairingNsStreamWriter(iSOLatin1XmlWriter0, "ei", writerConfig0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, iSOLatin1XmlWriter0, false);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 1, 0, objectMapper0, repairingNsStreamWriter0);
      QName qName0 = new QName("ei", "0/N0`zB((mNu9[Z");
      toXmlGenerator0.setNextName(qName0);
      toXmlGenerator0.writeNumber("0/N0`zB((mNu9[Z");
      BigInteger bigInteger0 = BigInteger.ONE;
//      try { 
        toXmlGenerator0.writeNumber(bigInteger0);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Trying to output second root, <0/N0`zB((mNu9[Z>
//         //
//         verifyException("com.fasterxml.jackson.dataformat.xml.util.StaxUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      MockPrintStream mockPrintStream0 = new MockPrintStream(byteArrayOutputStream0, true);
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      ISOLatin1XmlWriter iSOLatin1XmlWriter0 = new ISOLatin1XmlWriter(mockPrintStream0, writerConfig0, true);
      RepairingNsStreamWriter repairingNsStreamWriter0 = new RepairingNsStreamWriter(iSOLatin1XmlWriter0, "3/nWN`K9wC<Ttf\"V", writerConfig0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, iSOLatin1XmlWriter0, true);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 1, 1, (ObjectCodec) null, repairingNsStreamWriter0);
      QName qName0 = QName.valueOf("3/nWN`K9wC<Ttf\"V");
      toXmlGenerator0.setNextName(qName0);
      toXmlGenerator0.writeString((char[]) null, 3, 0);
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
//      try { 
        toXmlGenerator0.writeNumber(bigDecimal0);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Trying to output second root, <3/nWN`K9wC<Ttf\"V>
//         //
//         verifyException("com.fasterxml.jackson.dataformat.xml.util.StaxUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      StreamWriter2Delegate streamWriter2Delegate0 = new StreamWriter2Delegate((XMLStreamWriter2) null);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator((IOContext) null, 1, 1, (ObjectCodec) null, streamWriter2Delegate0);
      QName qName0 = new QName("]q-6.mKw~S<bI3", "]q-6.mKw~S<bI3");
      toXmlGenerator0.setNextNameIfMissing(qName0);
      // Undeclared exception!
//      try { 
        toXmlGenerator0.writeNumber("PRpIE:TY");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("com.fasterxml.jackson.databind.deser.impl.ExternalTypeHandler");
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      ISOLatin1XmlWriter iSOLatin1XmlWriter0 = new ISOLatin1XmlWriter(mockFileOutputStream0, writerConfig0, false);
      NonNsStreamWriter nonNsStreamWriter0 = new NonNsStreamWriter(iSOLatin1XmlWriter0, "com.fasterxml.jackson.databind.deser.impl.ExternalTypeHandler", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator((IOContext) null, 167, 167, (ObjectCodec) null, nonNsStreamWriter0);
      char[] charArray0 = new char[6];
      iSOLatin1XmlWriter0.writeRawAscii(charArray0, 2584, (-1));
      QName qName0 = QName.valueOf("com.fasterxml.jackson.databind.deser.impl.ExternalTypeHandler");
      toXmlGenerator0.setNextNameIfMissing(qName0);
      // Undeclared exception!
//      try { 
        toXmlGenerator0.writeNumber("com.fasterxml.jackson.databind.deser.impl.ExternalTypeHandler");
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      ObjectMapper objectMapper0 = new ObjectMapper();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      MockPrintStream mockPrintStream0 = new MockPrintStream(byteArrayOutputStream0, false);
      WriterConfig writerConfig0 = WriterConfig.createJ2MEDefaults();
      writerConfig0.configureForRobustness();
      ISOLatin1XmlWriter iSOLatin1XmlWriter0 = new ISOLatin1XmlWriter(mockPrintStream0, writerConfig0, false);
      RepairingNsStreamWriter repairingNsStreamWriter0 = new RepairingNsStreamWriter(iSOLatin1XmlWriter0, "ei", writerConfig0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, iSOLatin1XmlWriter0, false);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 1, 0, objectMapper0, repairingNsStreamWriter0);
      QName qName0 = new QName("ei", "0/N0`zB((mNu9[Z");
      toXmlGenerator0.setNextName(qName0);
//      try { 
        toXmlGenerator0.writeNumber("0/N0`zB((mNu9[Z");
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Illegal first name character '0' (code 48)
//         //
//         verifyException("com.fasterxml.jackson.dataformat.xml.util.StaxUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      MockFile mockFile0 = new MockFile("start an object");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0);
      WriterConfig writerConfig0 = WriterConfig.createJ2MEDefaults();
      ISOLatin1XmlWriter iSOLatin1XmlWriter0 = new ISOLatin1XmlWriter(mockPrintStream0, writerConfig0, false);
      NonNsStreamWriter nonNsStreamWriter0 = new NonNsStreamWriter(iSOLatin1XmlWriter0, ".)gF3Y;Fr0zDHL]GVGS8", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator((IOContext) null, 3, 1, (ObjectCodec) null, nonNsStreamWriter0);
      QName qName0 = new QName(" for node '", "$VALUES");
      toXmlGenerator0.setNextNameIfMissing(qName0);
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      toXmlGenerator0.writeNumber(bigDecimal0);
//      try { 
        toXmlGenerator0.writeNumber((-3508L));
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Trying to output second root, <$VALUES>
//         //
//         verifyException("com.fasterxml.jackson.dataformat.xml.util.StaxUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      AsciiXmlWriter asciiXmlWriter0 = new AsciiXmlWriter((OutputStream) null, writerConfig0, true);
      SimpleNsStreamWriter simpleNsStreamWriter0 = new SimpleNsStreamWriter(asciiXmlWriter0, "WRITE_NULL_MAP_VALUES", writerConfig0);
      StreamWriter2Delegate streamWriter2Delegate0 = new StreamWriter2Delegate(simpleNsStreamWriter0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator((IOContext) null, 2, (-2909), (ObjectCodec) null, streamWriter2Delegate0);
      QName qName0 = new QName("WRITE_NULL_MAP_VALUES", "");
      toXmlGenerator0.setNextNameIfMissing(qName0);
//      try { 
        toXmlGenerator0.writeNumber(55296);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Unbound namespace URI 'WRITE_NULL_MAP_VALUES'
//         //
//         verifyException("com.fasterxml.jackson.dataformat.xml.util.StaxUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      StreamWriter2Delegate streamWriter2Delegate0 = new StreamWriter2Delegate((XMLStreamWriter2) null);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator((IOContext) null, 57343, 57343, (ObjectCodec) null, streamWriter2Delegate0);
      streamWriter2Delegate0.setParent(streamWriter2Delegate0);
      QName qName0 = new QName("' not re|ognizQd");
      toXmlGenerator0.setNextName(qName0);
      // Undeclared exception!
//      try { 
        toXmlGenerator0.writeNumber((float) 57343);
//        fail("Expecting exception: StackOverflowError");
      
//      } catch(StackOverflowError e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      MockFile mockFile0 = new MockFile("com.fasterxml.jackson.databind.deser.impl.ExternalTypeHandler");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0);
      WriterConfig writerConfig0 = WriterConfig.createJ2MEDefaults();
      ISOLatin1XmlWriter iSOLatin1XmlWriter0 = new ISOLatin1XmlWriter(mockFileOutputStream0, writerConfig0, false);
      NonNsStreamWriter nonNsStreamWriter0 = new NonNsStreamWriter(iSOLatin1XmlWriter0, "i@5wd", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator((IOContext) null, 96, 96, (ObjectCodec) null, nonNsStreamWriter0);
      QName qName0 = QName.valueOf("i@5wd");
      toXmlGenerator0.setNextNameIfMissing(qName0);
      toXmlGenerator0.writeStartObject();
//      try { 
        toXmlGenerator0.writeNumber(0.0F);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Can not write number, expecting field name
//         //
//         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      WriterConfig writerConfig0 = WriterConfig.createJ2MEDefaults();
      ISOLatin1XmlWriter iSOLatin1XmlWriter0 = new ISOLatin1XmlWriter(byteArrayBuilder0, writerConfig0, false);
      SimpleNsStreamWriter simpleNsStreamWriter0 = new SimpleNsStreamWriter(iSOLatin1XmlWriter0, "Internal error: non-element parent node (", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator((IOContext) null, 1325, (-1031), (ObjectCodec) null, simpleNsStreamWriter0);
      QName qName0 = new QName("Internal error: non-element parent node (", "");
      toXmlGenerator0.setNextNameIfMissing(qName0);
//      try { 
        toXmlGenerator0.writeNumber((double) (-1031));
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Unbound namespace URI 'Internal error: non-element parent node ('
//         //
//         verifyException("com.fasterxml.jackson.dataformat.xml.util.StaxUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
      ObjectMapper objectMapper0 = new ObjectMapper();
      WriterConfig writerConfig0 = WriterConfig.createJ2MEDefaults();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      BufferingXmlWriter bufferingXmlWriter0 = new BufferingXmlWriter((Writer) null, writerConfig0, "", true, byteArrayOutputStream0, 1);
      RepairingNsStreamWriter repairingNsStreamWriter0 = new RepairingNsStreamWriter(bufferingXmlWriter0, (String) null, writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 0, 5390, objectMapper0, repairingNsStreamWriter0);
      // Undeclared exception!
//      try { 
        toXmlGenerator0.writeFieldName((SerializableString) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      MockPrintStream mockPrintStream0 = new MockPrintStream(byteArrayOutputStream0, true);
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      ISOLatin1XmlWriter iSOLatin1XmlWriter0 = new ISOLatin1XmlWriter(mockPrintStream0, writerConfig0, true);
      RepairingNsStreamWriter repairingNsStreamWriter0 = new RepairingNsStreamWriter(iSOLatin1XmlWriter0, "3/nWNfK9wC<Ttf\"V", writerConfig0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, iSOLatin1XmlWriter0, true);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 1, 1, (ObjectCodec) null, repairingNsStreamWriter0);
      QName qName0 = QName.valueOf("3/nWNfK9wC<Ttf\"V");
      toXmlGenerator0.setNextNameIfMissing(qName0);
      toXmlGenerator0.writeNumber((double) 1);
//      try { 
        toXmlGenerator0.writeBoolean(true);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Trying to output second root, <3/nWNfK9wC<Ttf\"V>
//         //
//         verifyException("com.fasterxml.jackson.dataformat.xml.util.StaxUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      StreamWriter2Delegate streamWriter2Delegate0 = new StreamWriter2Delegate((XMLStreamWriter2) null);
      QName qName0 = QName.valueOf("iJ+b*6@vSI,c6?5R%s>");
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator((IOContext) null, (-1077), 1011, (ObjectCodec) null, streamWriter2Delegate0);
      toXmlGenerator0.setNextIsAttribute(true);
      toXmlGenerator0.setNextNameIfMissing(qName0);
      byte[] byteArray0 = new byte[8];
      // Undeclared exception!
//      try { 
        toXmlGenerator0.writeBinary((Base64Variant) null, byteArray0, 649, (int) (byte) (-69));
//        fail("Expecting exception: NegativeArraySizeException");
      
//      } catch(NegativeArraySizeException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      StreamWriter2Delegate streamWriter2Delegate0 = new StreamWriter2Delegate((XMLStreamWriter2) null);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator((IOContext) null, 56319, 56319, (ObjectCodec) null, streamWriter2Delegate0);
      // Undeclared exception!
//      try { 
        toXmlGenerator0.isEnabled((ToXmlGenerator.Feature) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      MissingNode missingNode0 = MissingNode.getInstance();
      IOContext iOContext0 = new IOContext(bufferRecycler0, missingNode0, false);
      ObjectMapper objectMapper0 = new ObjectMapper();
      StreamWriter2Delegate streamWriter2Delegate0 = new StreamWriter2Delegate((XMLStreamWriter2) null);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 0, 2, objectMapper0, streamWriter2Delegate0);
      // Undeclared exception!
//      try { 
        toXmlGenerator0.initGenerator();
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.codehaus.stax2.util.StreamWriterDelegate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      AsciiXmlWriter asciiXmlWriter0 = new AsciiXmlWriter(pipedOutputStream0, writerConfig0, false);
      RepairingNsStreamWriter repairingNsStreamWriter0 = new RepairingNsStreamWriter(asciiXmlWriter0, (String) null, writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator((IOContext) null, 0, 2, (ObjectCodec) null, repairingNsStreamWriter0);
      char[] charArray0 = new char[9];
      asciiXmlWriter0.writeRawAscii(charArray0, 0, (-895));
      // Undeclared exception!
//      try { 
        toXmlGenerator0.initGenerator();
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // -895
//         //
//         verifyException("com.ctc.wstx.sw.EncodingXmlWriter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      MissingNode missingNode0 = MissingNode.getInstance();
      IOContext iOContext0 = new IOContext(bufferRecycler0, missingNode0, false);
      ObjectMapper objectMapper0 = new ObjectMapper();
      StreamWriter2Delegate streamWriter2Delegate0 = new StreamWriter2Delegate((XMLStreamWriter2) null);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 0, 2, objectMapper0, streamWriter2Delegate0);
      // Undeclared exception!
//      try { 
        toXmlGenerator0.handleMissingName();
//        fail("Expecting exception: IllegalStateException");
      
//      } catch(IllegalStateException e) {
//         //
//         // No element/attribute name specified when trying to output element
//         //
//         verifyException("com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      DefaultXmlPrettyPrinter defaultXmlPrettyPrinter0 = new DefaultXmlPrettyPrinter();
      IOContext iOContext0 = new IOContext(bufferRecycler0, defaultXmlPrettyPrinter0, false);
      StreamWriter2Delegate streamWriter2Delegate0 = new StreamWriter2Delegate((XMLStreamWriter2) null);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 1341, 1, (ObjectCodec) null, streamWriter2Delegate0);
      // Undeclared exception!
//      try { 
        toXmlGenerator0.flush();
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.codehaus.stax2.util.StreamWriterDelegate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      MissingNode missingNode0 = MissingNode.getInstance();
      IOContext iOContext0 = new IOContext(bufferRecycler0, missingNode0, false);
      ObjectMapper objectMapper0 = new ObjectMapper();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      WriterConfig writerConfig0 = WriterConfig.createJ2MEDefaults();
      ISOLatin1XmlWriter iSOLatin1XmlWriter0 = new ISOLatin1XmlWriter(byteArrayOutputStream0, writerConfig0, true);
      RepairingNsStreamWriter repairingNsStreamWriter0 = new RepairingNsStreamWriter(iSOLatin1XmlWriter0, "M4ddg%}sQx;N", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 2, 2, objectMapper0, repairingNsStreamWriter0);
      // Undeclared exception!
//      try { 
        toXmlGenerator0.enable((ToXmlGenerator.Feature) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory((ObjectCodec) null);
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      WriterConfig writerConfig0 = WriterConfig.createJ2MEDefaults();
      SimpleNsStreamWriter simpleNsStreamWriter0 = new SimpleNsStreamWriter((XmlWriter) null, "com.fasterxml.jackson.databind.ser.BeanSerializer", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator((IOContext) null, 0, 0, objectMapper0, simpleNsStreamWriter0);
      // Undeclared exception!
//      try { 
        toXmlGenerator0.disable((ToXmlGenerator.Feature) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      MissingNode missingNode0 = MissingNode.getInstance();
      IOContext iOContext0 = new IOContext(bufferRecycler0, missingNode0, false);
      ObjectMapper objectMapper0 = new ObjectMapper();
      StreamWriter2Delegate streamWriter2Delegate0 = new StreamWriter2Delegate((XMLStreamWriter2) null);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 1, (-857), objectMapper0, streamWriter2Delegate0);
      // Undeclared exception!
//      try { 
        toXmlGenerator0.configure((ToXmlGenerator.Feature) null, true);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      MissingNode missingNode0 = MissingNode.getInstance();
      IOContext iOContext0 = new IOContext(bufferRecycler0, missingNode0, false);
      ObjectMapper objectMapper0 = new ObjectMapper();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      WriterConfig writerConfig0 = WriterConfig.createJ2MEDefaults();
      ISOLatin1XmlWriter iSOLatin1XmlWriter0 = new ISOLatin1XmlWriter(byteArrayOutputStream0, writerConfig0, true);
      SimpleNsStreamWriter simpleNsStreamWriter0 = new SimpleNsStreamWriter(iSOLatin1XmlWriter0, "s/r'^wZO|OfY##cE kE", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 37, 3798, objectMapper0, simpleNsStreamWriter0);
//      try { 
        toXmlGenerator0.close();
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Trying to write END_DOCUMENT when document has no root (ie. trying to output empty document).
//         //
//         verifyException("com.fasterxml.jackson.dataformat.xml.util.StaxUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      MockFile mockFile0 = new MockFile("start an object");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0);
      WriterConfig writerConfig0 = WriterConfig.createJ2MEDefaults();
      ISOLatin1XmlWriter iSOLatin1XmlWriter0 = new ISOLatin1XmlWriter(mockPrintStream0, writerConfig0, false);
      NonNsStreamWriter nonNsStreamWriter0 = new NonNsStreamWriter(iSOLatin1XmlWriter0, "start an object", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator((IOContext) null, 1448, 2, (ObjectCodec) null, nonNsStreamWriter0);
      QName qName0 = new QName(" for node '", "start an object");
      toXmlGenerator0.setNextNameIfMissing(qName0);
      toXmlGenerator0.writeStartObject();
//      try { 
        toXmlGenerator0._verifyValueWrite(" for node '");
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Can not  for node ', expecting field name
//         //
//         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      ObjectMapper objectMapper0 = new ObjectMapper();
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      IOContext iOContext0 = new IOContext(bufferRecycler0, writerConfig0, false);
      AsciiXmlWriter asciiXmlWriter0 = new AsciiXmlWriter(byteArrayBuilder0, writerConfig0, false);
      NonNsStreamWriter nonNsStreamWriter0 = new NonNsStreamWriter(asciiXmlWriter0, "", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 1, 2, objectMapper0, nonNsStreamWriter0);
//      try { 
        toXmlGenerator0._reportUnimplementedStax2("");
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Underlying Stax XMLStreamWriter (of type com.ctc.wstx.sw.NonNsStreamWriter) does not implement Stax2 API natively and is missing method '': this breaks functionality such as indentation that relies on it. You need to upgrade to using compliant Stax implementation like Woodstox or Aalto
//         //
//         verifyException("com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      StreamWriter2Delegate streamWriter2Delegate0 = new StreamWriter2Delegate((XMLStreamWriter2) null);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator((IOContext) null, 2, 0, (ObjectCodec) null, streamWriter2Delegate0);
      QName qName0 = new QName("D2U'TA8C?/Fs", "D2U'TA8C?/Fs");
      toXmlGenerator0.setNextNameIfMissing(qName0);
      // Undeclared exception!
//      try { 
        toXmlGenerator0._handleStartObject();
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      ObjectMapper objectMapper0 = new ObjectMapper();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      MockPrintStream mockPrintStream0 = new MockPrintStream(byteArrayOutputStream0, true);
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      ISOLatin1XmlWriter iSOLatin1XmlWriter0 = new ISOLatin1XmlWriter(mockPrintStream0, writerConfig0, true);
      RepairingNsStreamWriter repairingNsStreamWriter0 = new RepairingNsStreamWriter(iSOLatin1XmlWriter0, "ei", writerConfig0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, iSOLatin1XmlWriter0, true);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 1, 0, objectMapper0, repairingNsStreamWriter0);
      QName qName0 = new QName("ei", "/N0zB((mNu9[Z");
      toXmlGenerator0.setNextName(qName0);
      toXmlGenerator0.writeNumber("/N0zB((mNu9[Z");
//      try { 
        toXmlGenerator0._handleStartObject();
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Trying to output second root, </N0zB((mNu9[Z>
//         //
//         verifyException("com.fasterxml.jackson.dataformat.xml.util.StaxUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
      ObjectMapper objectMapper0 = new ObjectMapper();
      ToXmlGenerator toXmlGenerator0 = null;
//      try {
        toXmlGenerator0 = new ToXmlGenerator(iOContext0, 0, 1, objectMapper0, (XMLStreamWriter) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("com.fasterxml.jackson.databind.deser.impl.ExternalTypeHandler");
      WriterConfig writerConfig0 = WriterConfig.createJ2MEDefaults();
      ISOLatin1XmlWriter iSOLatin1XmlWriter0 = new ISOLatin1XmlWriter(mockFileOutputStream0, writerConfig0, false);
      NonNsStreamWriter nonNsStreamWriter0 = new NonNsStreamWriter(iSOLatin1XmlWriter0, "com.fasterxml.jackson.databind.deser.impl.ExternalTypeHandler", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator((IOContext) null, 126, 126, (ObjectCodec) null, nonNsStreamWriter0);
      QName qName0 = QName.valueOf("com.fasterxml.jackson.databind.deser.impl.ExternalTypeHandler");
      toXmlGenerator0.setNextNameIfMissing(qName0);
      toXmlGenerator0.writeStartObject();
      byte[] byteArray0 = new byte[2];
//      try { 
        toXmlGenerator0.writeBinary((Base64Variant) null, byteArray0, (int) (byte)103, 1949);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Can not write Binary value, expecting field name
//         //
//         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("1zsaTKph%A!1");
      WriterConfig writerConfig0 = WriterConfig.createJ2MEDefaults();
      AsciiXmlWriter asciiXmlWriter0 = new AsciiXmlWriter(mockPrintStream0, writerConfig0, false);
      RepairingNsStreamWriter repairingNsStreamWriter0 = new RepairingNsStreamWriter(asciiXmlWriter0, (String) null, writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 1, 3, objectMapper0, repairingNsStreamWriter0);
      // Undeclared exception!
//      try { 
        toXmlGenerator0.writeNull();
//        fail("Expecting exception: IllegalStateException");
      
//      } catch(IllegalStateException e) {
//         //
//         // No element/attribute name specified when trying to output element
//         //
//         verifyException("com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      BufferRecycler bufferRecycler0 = jsonFactory0._getBufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, jsonFactory0, false);
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      ISOLatin1XmlWriter iSOLatin1XmlWriter0 = new ISOLatin1XmlWriter((OutputStream) null, writerConfig0, true);
      RepairingNsStreamWriter repairingNsStreamWriter0 = new RepairingNsStreamWriter(iSOLatin1XmlWriter0, "JSON", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 1, (-1291), objectMapper0, repairingNsStreamWriter0);
      toXmlGenerator0.writeRaw("JSON");
//      try { 
        toXmlGenerator0.initGenerator();
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Can not output XML declaration, after other output has already been done.
//         //
//         verifyException("com.fasterxml.jackson.dataformat.xml.util.StaxUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      MockFile mockFile0 = new MockFile("start an object");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0);
      WriterConfig writerConfig0 = WriterConfig.createJ2MEDefaults();
      ISOLatin1XmlWriter iSOLatin1XmlWriter0 = new ISOLatin1XmlWriter(mockPrintStream0, writerConfig0, false);
      NonNsStreamWriter nonNsStreamWriter0 = new NonNsStreamWriter(iSOLatin1XmlWriter0, "start an object", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator((IOContext) null, 1448, 2, (ObjectCodec) null, nonNsStreamWriter0);
      QName qName0 = new QName(" for node '", "start an object");
      boolean boolean0 = toXmlGenerator0.setNextNameIfMissing(qName0);
      assertTrue(boolean0);
      
      toXmlGenerator0.writeStartObject();
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      toXmlGenerator0.writeFieldName((SerializableString) serializedString0);
      toXmlGenerator0.writeString("start an object");
      assertEquals(2, toXmlGenerator0.getFormatFeatures());
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      StreamWriter2Delegate streamWriter2Delegate0 = new StreamWriter2Delegate((XMLStreamWriter2) null);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator((IOContext) null, 55296, 55296, (ObjectCodec) null, streamWriter2Delegate0);
      QName qName0 = new QName("'N:a\"k-YGqNl:Y4A;", "'N:a\"k-YGqNl:Y4A;", "'N:a\"k-YGqNl:Y4A;");
      toXmlGenerator0.setNextNameIfMissing(qName0);
      // Undeclared exception!
//      try { 
        toXmlGenerator0.writeString("ZQl5");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      DefaultXmlPrettyPrinter defaultXmlPrettyPrinter0 = new DefaultXmlPrettyPrinter();
      IOContext iOContext0 = new IOContext(bufferRecycler0, defaultXmlPrettyPrinter0, false);
      StreamWriter2Delegate streamWriter2Delegate0 = new StreamWriter2Delegate((XMLStreamWriter2) null);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 3, 642, (ObjectCodec) null, streamWriter2Delegate0);
      // Undeclared exception!
//      try { 
        toXmlGenerator0.writeString((String) null);
//        fail("Expecting exception: IllegalStateException");
      
//      } catch(IllegalStateException e) {
//         //
//         // No element/attribute name specified when trying to output element
//         //
//         verifyException("com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      MockFile mockFile0 = new MockFile("com.fasterxml.jackson.databind.deser.impl.ExternalTypeHandler");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0);
      WriterConfig writerConfig0 = WriterConfig.createJ2MEDefaults();
      ISOLatin1XmlWriter iSOLatin1XmlWriter0 = new ISOLatin1XmlWriter(mockFileOutputStream0, writerConfig0, false);
      NonNsStreamWriter nonNsStreamWriter0 = new NonNsStreamWriter(iSOLatin1XmlWriter0, "com.fasterxml.jackson.databind.deser.impl.ExternalTypeHandler", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator((IOContext) null, 96, 96, (ObjectCodec) null, nonNsStreamWriter0);
      QName qName0 = QName.valueOf("com.fasterxml.jackson.databind.deser.impl.ExternalTypeHandler");
      boolean boolean0 = toXmlGenerator0.setNextNameIfMissing(qName0);
      assertTrue(boolean0);
      
      toXmlGenerator0.writeStartObject();
      toXmlGenerator0._handleEndObject();
      assertEquals(96, toXmlGenerator0.getFormatFeatures());
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      StreamWriter2Delegate streamWriter2Delegate0 = new StreamWriter2Delegate((XMLStreamWriter2) null);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator((IOContext) null, 32768, 0, objectMapper0, streamWriter2Delegate0);
      // Undeclared exception!
//      try { 
        toXmlGenerator0._handleStartObject();
//        fail("Expecting exception: IllegalStateException");
      
//      } catch(IllegalStateException e) {
//         //
//         // No element/attribute name specified when trying to output element
//         //
//         verifyException("com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      MockFile mockFile0 = new MockFile("com.fasterxml.jackson.databind.deser.impl.ExternalTypeHandler");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0);
      WriterConfig writerConfig0 = WriterConfig.createJ2MEDefaults();
      ISOLatin1XmlWriter iSOLatin1XmlWriter0 = new ISOLatin1XmlWriter(mockFileOutputStream0, writerConfig0, false);
      NonNsStreamWriter nonNsStreamWriter0 = new NonNsStreamWriter(iSOLatin1XmlWriter0, "i@5wd", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator((IOContext) null, 96, 96, (ObjectCodec) null, nonNsStreamWriter0);
      QName qName0 = QName.valueOf("i@5wd");
      toXmlGenerator0.setNextNameIfMissing(qName0);
      toXmlGenerator0.writeStartObject();
      toXmlGenerator0.writeEndObject();
//      try { 
        toXmlGenerator0.writeNumber(0.0F);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Trying to output second root, <i@5wd>
//         //
//         verifyException("com.fasterxml.jackson.dataformat.xml.util.StaxUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      StreamWriter2Delegate streamWriter2Delegate0 = new StreamWriter2Delegate((XMLStreamWriter2) null);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator((IOContext) null, 3, 1, (ObjectCodec) null, streamWriter2Delegate0);
      toXmlGenerator0.writeStartArray(1);
      toXmlGenerator0.writeEndArray();
      assertEquals(1, toXmlGenerator0.getFormatFeatures());
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      DefaultXmlPrettyPrinter defaultXmlPrettyPrinter0 = new DefaultXmlPrettyPrinter();
      IOContext iOContext0 = new IOContext(bufferRecycler0, defaultXmlPrettyPrinter0, false);
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      MockPrintStream mockPrintStream0 = new MockPrintStream("kxz)\"dL3MR?]0>]RF2");
      AsciiXmlWriter asciiXmlWriter0 = new AsciiXmlWriter(mockPrintStream0, writerConfig0, false);
      RepairingNsStreamWriter repairingNsStreamWriter0 = new RepairingNsStreamWriter(asciiXmlWriter0, "kxz)\"dL3MR?]0>]RF2", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 277, 1, (ObjectCodec) null, repairingNsStreamWriter0);
//      try { 
        toXmlGenerator0.writeFieldName("=Uuj.f!*LjNsL)");
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Can not write a field name, expecting a value
//         //
//         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("com.fasterxml.jackson.databind.deser.impl.ExternalTypeHandler");
      WriterConfig writerConfig0 = WriterConfig.createJ2MEDefaults();
      ISOLatin1XmlWriter iSOLatin1XmlWriter0 = new ISOLatin1XmlWriter(mockFileOutputStream0, writerConfig0, false);
      NonNsStreamWriter nonNsStreamWriter0 = new NonNsStreamWriter(iSOLatin1XmlWriter0, "com.fasterxml.jackson.databind.deser.impl.ExternalTypeHandler", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator((IOContext) null, 126, 126, (ObjectCodec) null, nonNsStreamWriter0);
      QName qName0 = QName.valueOf("com.fasterxml.jackson.databind.deser.impl.ExternalTypeHandler");
      boolean boolean0 = toXmlGenerator0.setNextNameIfMissing(qName0);
      assertTrue(boolean0);
      
      toXmlGenerator0.writeStartObject();
      toXmlGenerator0.writeObjectField(") Exceeded", (Object) null);
      assertEquals(126, toXmlGenerator0.getFormatFeatures());
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      ToXmlGenerator.Feature toXmlGenerator_Feature0 = ToXmlGenerator.Feature.WRITE_XML_DECLARATION;
      boolean boolean0 = toXmlGenerator_Feature0.enabledIn(0);
      assertFalse(boolean0);
      assertEquals(1, toXmlGenerator_Feature0.getMask());
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      ToXmlGenerator.Feature toXmlGenerator_Feature0 = ToXmlGenerator.Feature.WRITE_XML_DECLARATION;
      boolean boolean0 = toXmlGenerator_Feature0.enabledIn(643);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      JsonFactory jsonFactory0 = new JsonFactory();
      ToXmlGenerator.Feature toXmlGenerator_Feature0 = ToXmlGenerator.Feature.WRITE_XML_DECLARATION;
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      ObjectReader objectReader0 = objectMapper0.readerForUpdating(jsonEncoding0);
      ObjectReader objectReader1 = objectReader0.without((FormatFeature) toXmlGenerator_Feature0);
      assertNotSame(objectReader1, objectReader0);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      DefaultXmlPrettyPrinter defaultXmlPrettyPrinter0 = new DefaultXmlPrettyPrinter();
      IOContext iOContext0 = new IOContext(bufferRecycler0, defaultXmlPrettyPrinter0, false);
      StreamWriter2Delegate streamWriter2Delegate0 = new StreamWriter2Delegate((XMLStreamWriter2) null);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, (-2356), (-2356), (ObjectCodec) null, streamWriter2Delegate0);
      // Undeclared exception!
//      try { 
        toXmlGenerator0.close();
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.codehaus.stax2.util.StreamWriterDelegate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      MissingNode missingNode0 = MissingNode.getInstance();
      IOContext iOContext0 = new IOContext(bufferRecycler0, missingNode0, true);
      ObjectMapper objectMapper0 = new ObjectMapper();
      StreamWriter2Delegate streamWriter2Delegate0 = new StreamWriter2Delegate((XMLStreamWriter2) null);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 0, 2, objectMapper0, streamWriter2Delegate0);
      // Undeclared exception!
//      try { 
        toXmlGenerator0.close();
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.codehaus.stax2.util.StreamWriter2Delegate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      ISOLatin1XmlWriter iSOLatin1XmlWriter0 = new ISOLatin1XmlWriter(pipedOutputStream0, writerConfig0, false);
      RepairingNsStreamWriter repairingNsStreamWriter0 = new RepairingNsStreamWriter(iSOLatin1XmlWriter0, "", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator((IOContext) null, (-2508), (-340), (ObjectCodec) null, repairingNsStreamWriter0);
      toXmlGenerator0.flush();
      assertEquals((-340), toXmlGenerator0.getFormatFeatures());
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      MissingNode missingNode0 = MissingNode.getInstance();
      IOContext iOContext0 = new IOContext(bufferRecycler0, missingNode0, false);
      ObjectMapper objectMapper0 = new ObjectMapper();
      StreamWriter2Delegate streamWriter2Delegate0 = new StreamWriter2Delegate((XMLStreamWriter2) null);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 227, 0, objectMapper0, streamWriter2Delegate0);
      toXmlGenerator0.flush();
      assertEquals(0, toXmlGenerator0.getFormatFeatures());
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      MockFile mockFile0 = new MockFile("start an object");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0);
      WriterConfig writerConfig0 = WriterConfig.createJ2MEDefaults();
      ISOLatin1XmlWriter iSOLatin1XmlWriter0 = new ISOLatin1XmlWriter(mockPrintStream0, writerConfig0, false);
      NonNsStreamWriter nonNsStreamWriter0 = new NonNsStreamWriter(iSOLatin1XmlWriter0, "start an object", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator((IOContext) null, 1448, 2, (ObjectCodec) null, nonNsStreamWriter0);
      QName qName0 = new QName(" for node '", "start an object");
      toXmlGenerator0.setNextNameIfMissing(qName0);
      toXmlGenerator0.writeStartObject();
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
//      try { 
        toXmlGenerator0.writeString((SerializableString) serializedString0);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Can not write String value, expecting field name
//         //
//         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      StreamWriter2Delegate streamWriter2Delegate0 = new StreamWriter2Delegate((XMLStreamWriter2) null);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator((IOContext) null, 3, 1, (ObjectCodec) null, streamWriter2Delegate0);
      QName qName0 = QName.valueOf("com.fasterxmH.jackson.core.base.GeneratorBase");
      toXmlGenerator0.setNextNameIfMissing(qName0);
      toXmlGenerator0._nextIsUnwrapped = true;
      BigInteger bigInteger0 = BigInteger.ONE;
      // Undeclared exception!
//      try { 
        toXmlGenerator0.writeNumber(bigInteger0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.codehaus.stax2.util.StreamWriter2Delegate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      StreamWriter2Delegate streamWriter2Delegate0 = new StreamWriter2Delegate((XMLStreamWriter2) null);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator((IOContext) null, 56319, 56319, (ObjectCodec) null, streamWriter2Delegate0);
      QName qName0 = new QName("'sfJ//|o|/</)s.", "'sfJ//|o|/</)s.", "'sfJ//|o|/</)s.");
      toXmlGenerator0.setNextIsAttribute(true);
      toXmlGenerator0.setNextNameIfMissing(qName0);
      BigInteger bigInteger0 = BigInteger.ZERO;
      // Undeclared exception!
//      try { 
        toXmlGenerator0.writeNumber(bigInteger0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.codehaus.stax2.util.StreamWriter2Delegate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      WriterConfig writerConfig0 = WriterConfig.createJ2MEDefaults();
      AsciiXmlWriter asciiXmlWriter0 = new AsciiXmlWriter(byteArrayBuilder0, writerConfig0, true);
      RepairingNsStreamWriter repairingNsStreamWriter0 = new RepairingNsStreamWriter(asciiXmlWriter0, (String) null, writerConfig0);
      QName qName0 = new QName((String) null, "inb`_J2;s(}C");
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator((IOContext) null, 1664, 1664, (ObjectCodec) null, repairingNsStreamWriter0);
      boolean boolean0 = toXmlGenerator0.setNextNameIfMissing(qName0);
      assertTrue(boolean0);
      
      BigInteger bigInteger0 = BigInteger.ZERO;
      toXmlGenerator0.writeNumber(bigInteger0);
      assertEquals(1664, toXmlGenerator0.getFormatFeatures());
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      MockFile mockFile0 = new MockFile("start an object");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0);
      WriterConfig writerConfig0 = WriterConfig.createJ2MEDefaults();
      ISOLatin1XmlWriter iSOLatin1XmlWriter0 = new ISOLatin1XmlWriter(mockPrintStream0, writerConfig0, false);
      NonNsStreamWriter nonNsStreamWriter0 = new NonNsStreamWriter(iSOLatin1XmlWriter0, ".)gF3Y;Fr0zDHL]GVGS8", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator((IOContext) null, 3, 1, (ObjectCodec) null, nonNsStreamWriter0);
      // Undeclared exception!
//      try { 
        toXmlGenerator0.writeNumber((BigInteger) null);
//        fail("Expecting exception: IllegalStateException");
      
//      } catch(IllegalStateException e) {
//         //
//         // No element/attribute name specified when trying to output element
//         //
//         verifyException("com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      WriterConfig writerConfig0 = WriterConfig.createJ2MEDefaults();
      AsciiXmlWriter asciiXmlWriter0 = new AsciiXmlWriter(byteArrayBuilder0, writerConfig0, true);
      RepairingNsStreamWriter repairingNsStreamWriter0 = new RepairingNsStreamWriter(asciiXmlWriter0, (String) null, writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator((IOContext) null, 1664, 1664, (ObjectCodec) null, repairingNsStreamWriter0);
      BigInteger bigInteger0 = BigInteger.ZERO;
      // Undeclared exception!
//      try { 
        toXmlGenerator0.writeNumber(bigInteger0);
//        fail("Expecting exception: IllegalStateException");
      
//      } catch(IllegalStateException e) {
//         //
//         // No element/attribute name specified when trying to output element
//         //
//         verifyException("com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      MockPrintStream mockPrintStream0 = new MockPrintStream(byteArrayOutputStream0, true);
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      AsciiXmlWriter asciiXmlWriter0 = new AsciiXmlWriter(mockPrintStream0, writerConfig0, false);
      RepairingNsStreamWriter repairingNsStreamWriter0 = new RepairingNsStreamWriter(asciiXmlWriter0, "s", writerConfig0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
      JsonFactory jsonFactory0 = new JsonFactory();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0, defaultSerializerProvider_Impl0, defaultDeserializationContext_Impl0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 110, 2, objectMapper0, repairingNsStreamWriter0);
      QName qName0 = QName.valueOf("s");
      toXmlGenerator0.setNextName(qName0);
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      toXmlGenerator0.writeNumber(bigDecimal0);
      assertEquals(2, toXmlGenerator0.getFormatFeatures());
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      StreamWriter2Delegate streamWriter2Delegate0 = new StreamWriter2Delegate((XMLStreamWriter2) null);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator((IOContext) null, 55296, 55296, (ObjectCodec) null, streamWriter2Delegate0);
      PrettyPrinter prettyPrinter0 = toXmlGenerator0._constructDefaultPrettyPrinter();
      toXmlGenerator0.setPrettyPrinter(prettyPrinter0);
      QName qName0 = new QName("l@", "l@");
      toXmlGenerator0.setNextNameIfMissing(qName0);
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      // Undeclared exception!
//      try { 
        toXmlGenerator0.writeNumber(bigDecimal0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.codehaus.stax2.util.StreamWriter2Delegate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      StreamWriter2Delegate streamWriter2Delegate0 = new StreamWriter2Delegate((XMLStreamWriter2) null);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator((IOContext) null, 57343, 57343, (ObjectCodec) null, streamWriter2Delegate0);
      QName qName0 = new QName("UTF-8");
      toXmlGenerator0.setNextNameIfMissing(qName0);
      toXmlGenerator0.setNextIsUnwrapped(true);
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      // Undeclared exception!
//      try { 
        toXmlGenerator0.writeNumber(bigDecimal0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.codehaus.stax2.util.StreamWriterDelegate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      StreamWriter2Delegate streamWriter2Delegate0 = new StreamWriter2Delegate((XMLStreamWriter2) null);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator((IOContext) null, 56320, 56320, (ObjectCodec) null, streamWriter2Delegate0);
      QName qName0 = new QName("UTF-8");
      toXmlGenerator0.setNextNameIfMissing(qName0);
      toXmlGenerator0.setNextIsUnwrapped(true);
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      // Undeclared exception!
//      try { 
        toXmlGenerator0.writeNumber(bigDecimal0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.codehaus.stax2.util.StreamWriter2Delegate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      StreamWriter2Delegate streamWriter2Delegate0 = new StreamWriter2Delegate((XMLStreamWriter2) null);
      IOContext iOContext0 = new IOContext((BufferRecycler) null, (Object) null, true);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 60, (-1824), (ObjectCodec) null, streamWriter2Delegate0);
      QName qName0 = new QName("%hR19b", "%hR19b", "%hR19b");
      toXmlGenerator0.setNextIsAttribute(true);
      toXmlGenerator0.setNextNameIfMissing(qName0);
      BigDecimal bigDecimal0 = new BigDecimal(0.0);
      // Undeclared exception!
//      try { 
        toXmlGenerator0.writeNumber(bigDecimal0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.codehaus.stax2.util.StreamWriter2Delegate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      StreamWriter2Delegate streamWriter2Delegate0 = new StreamWriter2Delegate((XMLStreamWriter2) null);
      IOContext iOContext0 = new IOContext((BufferRecycler) null, (Object) null, true);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 116, 116, (ObjectCodec) null, streamWriter2Delegate0);
      QName qName0 = new QName("%hR19b", "%hR19b", "%hR19b");
      toXmlGenerator0.setNextIsAttribute(true);
      toXmlGenerator0.setNextNameIfMissing(qName0);
      BigDecimal bigDecimal0 = new BigDecimal((double) 116);
      // Undeclared exception!
//      try { 
        toXmlGenerator0.writeNumber(bigDecimal0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.codehaus.stax2.util.StreamWriterDelegate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      MockFile mockFile0 = new MockFile("start an object");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0);
      WriterConfig writerConfig0 = WriterConfig.createJ2MEDefaults();
      ISOLatin1XmlWriter iSOLatin1XmlWriter0 = new ISOLatin1XmlWriter(mockPrintStream0, writerConfig0, false);
      NonNsStreamWriter nonNsStreamWriter0 = new NonNsStreamWriter(iSOLatin1XmlWriter0, ".)gF3Y;Fr0zDHL]GVGS8", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator((IOContext) null, 3, 1, (ObjectCodec) null, nonNsStreamWriter0);
      QName qName0 = new QName(" for node '", "$VALUES");
      toXmlGenerator0.setNextNameIfMissing(qName0);
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      toXmlGenerator0.writeNumber(bigDecimal0);
//      try { 
        toXmlGenerator0.writeNull();
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Trying to output second root, <$VALUES>
//         //
//         verifyException("com.fasterxml.jackson.dataformat.xml.util.StaxUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      MissingNode missingNode0 = MissingNode.getInstance();
      IOContext iOContext0 = new IOContext(bufferRecycler0, missingNode0, false);
      ObjectMapper objectMapper0 = new ObjectMapper();
      StreamWriter2Delegate streamWriter2Delegate0 = new StreamWriter2Delegate((XMLStreamWriter2) null);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 227, 0, objectMapper0, streamWriter2Delegate0);
      // Undeclared exception!
//      try { 
        toXmlGenerator0.writeNumber((BigDecimal) null);
//        fail("Expecting exception: IllegalStateException");
      
//      } catch(IllegalStateException e) {
//         //
//         // No element/attribute name specified when trying to output element
//         //
//         verifyException("com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      MockFile mockFile0 = new MockFile("start an object");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0);
      WriterConfig writerConfig0 = WriterConfig.createJ2MEDefaults();
      ISOLatin1XmlWriter iSOLatin1XmlWriter0 = new ISOLatin1XmlWriter(mockPrintStream0, writerConfig0, false);
      NonNsStreamWriter nonNsStreamWriter0 = new NonNsStreamWriter(iSOLatin1XmlWriter0, ".)gF3Y;Fr0zDHL]GVGS8", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator((IOContext) null, 3, 1, (ObjectCodec) null, nonNsStreamWriter0);
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      // Undeclared exception!
//      try { 
        toXmlGenerator0.writeNumber(bigDecimal0);
//        fail("Expecting exception: IllegalStateException");
      
//      } catch(IllegalStateException e) {
//         //
//         // No element/attribute name specified when trying to output element
//         //
//         verifyException("com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      StreamWriter2Delegate streamWriter2Delegate0 = new StreamWriter2Delegate((XMLStreamWriter2) null);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator((IOContext) null, 3, 1, (ObjectCodec) null, streamWriter2Delegate0);
      DefaultXmlPrettyPrinter defaultXmlPrettyPrinter0 = new DefaultXmlPrettyPrinter();
      toXmlGenerator0.setPrettyPrinter(defaultXmlPrettyPrinter0);
      QName qName0 = QName.valueOf("Ke1UX*OC0(");
      toXmlGenerator0.setNextNameIfMissing(qName0);
      // Undeclared exception!
//      try { 
        toXmlGenerator0.writeNumber((float) 2);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.codehaus.stax2.util.StreamWriter2Delegate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      StreamWriter2Delegate streamWriter2Delegate0 = new StreamWriter2Delegate((XMLStreamWriter2) null);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator((IOContext) null, 56319, 56319, (ObjectCodec) null, streamWriter2Delegate0);
      QName qName0 = new QName("rj:Gw`[X{2H");
      toXmlGenerator0.setNextIsAttribute(true);
      toXmlGenerator0.setNextNameIfMissing(qName0);
      // Undeclared exception!
//      try { 
        toXmlGenerator0.writeNumber(1.0F);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.codehaus.stax2.util.StreamWriter2Delegate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      MissingNode missingNode0 = MissingNode.getInstance();
      IOContext iOContext0 = new IOContext(bufferRecycler0, missingNode0, false);
      ObjectMapper objectMapper0 = new ObjectMapper();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      WriterConfig writerConfig0 = WriterConfig.createJ2MEDefaults();
      ISOLatin1XmlWriter iSOLatin1XmlWriter0 = new ISOLatin1XmlWriter(byteArrayOutputStream0, writerConfig0, true);
      RepairingNsStreamWriter repairingNsStreamWriter0 = new RepairingNsStreamWriter(iSOLatin1XmlWriter0, "M4ddg%}sQx;N", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 2, 2, objectMapper0, repairingNsStreamWriter0);
      // Undeclared exception!
//      try { 
        toXmlGenerator0.writeNumber(0.0F);
//        fail("Expecting exception: IllegalStateException");
      
//      } catch(IllegalStateException e) {
//         //
//         // No element/attribute name specified when trying to output element
//         //
//         verifyException("com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      StreamWriter2Delegate streamWriter2Delegate0 = new StreamWriter2Delegate((XMLStreamWriter2) null);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator((IOContext) null, 1, 0, (ObjectCodec) null, streamWriter2Delegate0);
      PrettyPrinter prettyPrinter0 = toXmlGenerator0._constructDefaultPrettyPrinter();
      toXmlGenerator0.setPrettyPrinter(prettyPrinter0);
      QName qName0 = new QName("", "C&");
      toXmlGenerator0.setNextNameIfMissing(qName0);
      // Undeclared exception!
//      try { 
        toXmlGenerator0.writeNumber((double) 2);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.codehaus.stax2.util.StreamWriter2Delegate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      StreamWriter2Delegate streamWriter2Delegate0 = new StreamWriter2Delegate((XMLStreamWriter2) null);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator((IOContext) null, 56320, 56320, (ObjectCodec) null, streamWriter2Delegate0);
      QName qName0 = new QName("'sfJ//|o|/</)s.", "'sfJ//|o|/</)s.");
      toXmlGenerator0.setNextIsUnwrapped(true);
      toXmlGenerator0.setNextNameIfMissing(qName0);
      // Undeclared exception!
//      try { 
        toXmlGenerator0.writeNumber((double) 56320);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.codehaus.stax2.util.StreamWriter2Delegate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      StreamWriter2Delegate streamWriter2Delegate0 = new StreamWriter2Delegate((XMLStreamWriter2) null);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator((IOContext) null, 57343, 57343, (ObjectCodec) null, streamWriter2Delegate0);
      QName qName0 = new QName("WRITE_XML_DECLARATION", "WRITE_XML_DECLARATION");
      toXmlGenerator0.setNextIsAttribute(true);
      toXmlGenerator0.setNextNameIfMissing(qName0);
      // Undeclared exception!
//      try { 
        toXmlGenerator0.writeNumber((double) 57343);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.codehaus.stax2.util.StreamWriter2Delegate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("7zc$p'", false);
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(mockFileOutputStream0);
      WriterConfig writerConfig0 = WriterConfig.createJ2MEDefaults();
      AsciiXmlWriter asciiXmlWriter0 = new AsciiXmlWriter(objectOutputStream0, writerConfig0, false);
      NonNsStreamWriter nonNsStreamWriter0 = new NonNsStreamWriter(asciiXmlWriter0, "v!W7Z", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator((IOContext) null, 1, 5, (ObjectCodec) null, nonNsStreamWriter0);
      QName qName0 = new QName("", "w,|z4H");
      toXmlGenerator0.setNextNameIfMissing(qName0);
      toXmlGenerator0.writeNumber(0.0);
//      try { 
        toXmlGenerator0.startWrappedValue(qName0, qName0);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Trying to output second root, <w,|z4H>
//         //
//         verifyException("com.fasterxml.jackson.dataformat.xml.util.StaxUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      StreamWriter2Delegate streamWriter2Delegate0 = new StreamWriter2Delegate((XMLStreamWriter2) null);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator((IOContext) null, 3, 1, (ObjectCodec) null, streamWriter2Delegate0);
      QName qName0 = new QName("com.fasterxmH.jckson.core.base.GeneratorBase", "com.fasterxmH.jckson.core.base.GeneratorBase");
      toXmlGenerator0.setNextNameIfMissing(qName0);
      toXmlGenerator0._nextIsUnwrapped = true;
      // Undeclared exception!
//      try { 
        toXmlGenerator0.writeNumber(0L);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.codehaus.stax2.util.StreamWriter2Delegate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      StreamWriter2Delegate streamWriter2Delegate0 = new StreamWriter2Delegate((XMLStreamWriter2) null);
      IOContext iOContext0 = new IOContext((BufferRecycler) null, (Object) null, true);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 2326, 859, (ObjectCodec) null, streamWriter2Delegate0);
      QName qName0 = new QName("'sfJ//|o|/</)s.", "'sfJ//|o|/</)s.", "'; empty String is not a valid name");
      toXmlGenerator0.setNextIsAttribute(true);
      toXmlGenerator0.setNextNameIfMissing(qName0);
      // Undeclared exception!
//      try { 
        toXmlGenerator0.writeNumber((-9223372036854775808L));
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.codehaus.stax2.util.StreamWriter2Delegate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      WriterConfig writerConfig0 = WriterConfig.createJ2MEDefaults();
      AsciiXmlWriter asciiXmlWriter0 = new AsciiXmlWriter((OutputStream) null, writerConfig0, true);
      RepairingNsStreamWriter repairingNsStreamWriter0 = new RepairingNsStreamWriter(asciiXmlWriter0, "G=C", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, (-424), 78, (ObjectCodec) null, repairingNsStreamWriter0);
      // Undeclared exception!
//      try { 
        toXmlGenerator0.writeNumber((-1L));
//        fail("Expecting exception: IllegalStateException");
      
//      } catch(IllegalStateException e) {
//         //
//         // No element/attribute name specified when trying to output element
//         //
//         verifyException("com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      StreamWriter2Delegate streamWriter2Delegate0 = new StreamWriter2Delegate((XMLStreamWriter2) null);
      QName qName0 = new QName(",0)KS", ",0)KS", "");
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator((IOContext) null, 55296, 55296, (ObjectCodec) null, streamWriter2Delegate0);
      ToXmlGenerator.Feature toXmlGenerator_Feature0 = ToXmlGenerator.Feature.WRITE_XML_DECLARATION;
      ToXmlGenerator toXmlGenerator1 = toXmlGenerator0.enable(toXmlGenerator_Feature0);
      DefaultXmlPrettyPrinter defaultXmlPrettyPrinter0 = new DefaultXmlPrettyPrinter();
      toXmlGenerator1._xmlPrettyPrinter = (XmlPrettyPrinter) defaultXmlPrettyPrinter0;
      toXmlGenerator1.setNextNameIfMissing(qName0);
      // Undeclared exception!
//      try { 
        toXmlGenerator1.writeNumber(1476);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.codehaus.stax2.util.StreamWriter2Delegate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      StreamWriter2Delegate streamWriter2Delegate0 = new StreamWriter2Delegate((XMLStreamWriter2) null);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator((IOContext) null, 3, 1, (ObjectCodec) null, streamWriter2Delegate0);
      QName qName0 = new QName("com.fasterxmH.jckson.core.base.GeneratorBase", "com.fasterxmH.jckson.core.base.GeneratorBase");
      toXmlGenerator0.setNextNameIfMissing(qName0);
      toXmlGenerator0._nextIsUnwrapped = true;
      // Undeclared exception!
//      try { 
        toXmlGenerator0.writeNumber(100000);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.codehaus.stax2.util.StreamWriter2Delegate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      StreamWriter2Delegate streamWriter2Delegate0 = new StreamWriter2Delegate((XMLStreamWriter2) null);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator((IOContext) null, 56319, 56319, (ObjectCodec) null, streamWriter2Delegate0);
      toXmlGenerator0.setNextIsAttribute(true);
      QName qName0 = new QName("in,#ZDFs", "in,#ZDFs", "in,#ZDFs");
      toXmlGenerator0.setNextNameIfMissing(qName0);
      // Undeclared exception!
//      try { 
        toXmlGenerator0.writeNumber(56319);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.codehaus.stax2.util.StreamWriter2Delegate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      DefaultXmlPrettyPrinter defaultXmlPrettyPrinter0 = new DefaultXmlPrettyPrinter();
      IOContext iOContext0 = new IOContext(bufferRecycler0, defaultXmlPrettyPrinter0, false);
      StreamWriter2Delegate streamWriter2Delegate0 = new StreamWriter2Delegate((XMLStreamWriter2) null);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 1341, 1, (ObjectCodec) null, streamWriter2Delegate0);
      // Undeclared exception!
//      try { 
        toXmlGenerator0.writeNumber((-2068));
//        fail("Expecting exception: IllegalStateException");
      
//      } catch(IllegalStateException e) {
//         //
//         // No element/attribute name specified when trying to output element
//         //
//         verifyException("com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      StreamWriter2Delegate streamWriter2Delegate0 = new StreamWriter2Delegate((XMLStreamWriter2) null);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator((IOContext) null, 3, 1, (ObjectCodec) null, streamWriter2Delegate0);
      toXmlGenerator0.useDefaultPrettyPrinter();
      QName qName0 = new QName("");
      toXmlGenerator0.setNextNameIfMissing(qName0);
      // Undeclared exception!
//      try { 
        toXmlGenerator0.writeNull();
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.codehaus.stax2.util.StreamWriter2Delegate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      StreamWriter2Delegate streamWriter2Delegate0 = new StreamWriter2Delegate((XMLStreamWriter2) null);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator((IOContext) null, 3, 1, (ObjectCodec) null, streamWriter2Delegate0);
      QName qName0 = new QName("com.fasterxmH.jckson.core.base.GeneratorBase", "com.fasterxmH.jckson.core.base.GeneratorBase");
      boolean boolean0 = toXmlGenerator0.setNextNameIfMissing(qName0);
      assertTrue(boolean0);
      
      toXmlGenerator0._nextIsUnwrapped = true;
      toXmlGenerator0.writeBinary((byte[]) null, 57343, 2);
      assertEquals(1, toXmlGenerator0.getFormatFeatures());
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      StreamWriter2Delegate streamWriter2Delegate0 = new StreamWriter2Delegate((XMLStreamWriter2) null);
      IOContext iOContext0 = new IOContext((BufferRecycler) null, (Object) null, true);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 110, 110, (ObjectCodec) null, streamWriter2Delegate0);
      QName qName0 = new QName("'fJ//||//)s", "'fJ//||//)s");
      toXmlGenerator0.setNextIsAttribute(true);
      boolean boolean0 = toXmlGenerator0.setNextNameIfMissing(qName0);
      assertTrue(boolean0);
      
      toXmlGenerator0.writeNull();
      assertEquals(110, toXmlGenerator0.getFormatFeatures());
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      StreamWriter2Delegate streamWriter2Delegate0 = new StreamWriter2Delegate((XMLStreamWriter2) null);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator((IOContext) null, 56319, 56319, (ObjectCodec) null, streamWriter2Delegate0);
      QName qName0 = new QName("'sfJ//|o|/</)s.", "'sfJ//|o|/</)s.");
      toXmlGenerator0.useDefaultPrettyPrinter();
      toXmlGenerator0.setNextNameIfMissing(qName0);
      // Undeclared exception!
//      try { 
        toXmlGenerator0.writeBoolean(true);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.codehaus.stax2.util.StreamWriter2Delegate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      StreamWriter2Delegate streamWriter2Delegate0 = new StreamWriter2Delegate((XMLStreamWriter2) null);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator((IOContext) null, 57343, 57343, (ObjectCodec) null, streamWriter2Delegate0);
      QName qName0 = new QName("WRITE_XML_DCARATION", "WRITE_XML_DCARATION", "WRITE_XML_DCARATION");
      toXmlGenerator0.setNextIsUnwrapped(true);
      toXmlGenerator0.setNextNameIfMissing(qName0);
      // Undeclared exception!
//      try { 
        toXmlGenerator0.writeBoolean(true);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.codehaus.stax2.util.StreamWriter2Delegate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      StreamWriter2Delegate streamWriter2Delegate0 = new StreamWriter2Delegate((XMLStreamWriter2) null);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator((IOContext) null, 55296, 55296, (ObjectCodec) null, streamWriter2Delegate0);
      toXmlGenerator0._nextIsAttribute = true;
      QName qName0 = new QName("WRITE_XML_DCARATION", "WRITE_XML_DCARATION");
      toXmlGenerator0.setNextNameIfMissing(qName0);
      // Undeclared exception!
//      try { 
        toXmlGenerator0.writeBoolean(true);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.codehaus.stax2.util.StreamWriter2Delegate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      WriterConfig writerConfig0 = WriterConfig.createJ2MEDefaults();
      AsciiXmlWriter asciiXmlWriter0 = new AsciiXmlWriter((OutputStream) null, writerConfig0, true);
      RepairingNsStreamWriter repairingNsStreamWriter0 = new RepairingNsStreamWriter(asciiXmlWriter0, "You need to upgrade to using compliant Stax implementation like Woodstox or Aalto", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator((IOContext) null, 443, 443, objectMapper0, repairingNsStreamWriter0);
      // Undeclared exception!
//      try { 
        toXmlGenerator0.writeBoolean(true);
//        fail("Expecting exception: IllegalStateException");
      
//      } catch(IllegalStateException e) {
//         //
//         // No element/attribute name specified when trying to output element
//         //
//         verifyException("com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      ISOLatin1XmlWriter iSOLatin1XmlWriter0 = new ISOLatin1XmlWriter(pipedOutputStream0, writerConfig0, false);
      RepairingNsStreamWriter repairingNsStreamWriter0 = new RepairingNsStreamWriter(iSOLatin1XmlWriter0, "", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator((IOContext) null, (-2508), (-340), (ObjectCodec) null, repairingNsStreamWriter0);
      QName qName0 = new QName(";,c5<v");
      toXmlGenerator0.setNextNameIfMissing(qName0);
      toXmlGenerator0.writeBoolean(true);
//      try { 
        toXmlGenerator0.flush();
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Pipe not connected
//         //
//         verifyException("com.fasterxml.jackson.dataformat.xml.util.StaxUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      StreamWriter2Delegate streamWriter2Delegate0 = new StreamWriter2Delegate((XMLStreamWriter2) null);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator((IOContext) null, 2, 2, (ObjectCodec) null, streamWriter2Delegate0);
      QName qName0 = new QName("USE_THREAD_LOCAL_FOR_BUFFER_RECYCLING", "<!--");
      toXmlGenerator0.setNextIsAttribute(true);
      toXmlGenerator0.setNextNameIfMissing(qName0);
      byte[] byteArray0 = new byte[0];
      // Undeclared exception!
//      try { 
        toXmlGenerator0.writeBinary((Base64Variant) null, byteArray0, 0, 1);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      StreamWriter2Delegate streamWriter2Delegate0 = new StreamWriter2Delegate((XMLStreamWriter2) null);
      IOContext iOContext0 = new IOContext((BufferRecycler) null, (Object) null, true);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 2326, 859, (ObjectCodec) null, streamWriter2Delegate0);
      QName qName0 = new QName("'sfJ//|o|/</)s.", "'sfJ//|o|/</)s.", "'; empty String is not a valid name");
      toXmlGenerator0.setNextIsAttribute(true);
      toXmlGenerator0.setNextNameIfMissing(qName0);
      byte[] byteArray0 = new byte[8];
      // Undeclared exception!
//      try { 
        toXmlGenerator0.writeBinary(byteArray0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.codehaus.stax2.util.StreamWriter2Delegate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      StreamWriter2Delegate streamWriter2Delegate0 = new StreamWriter2Delegate((XMLStreamWriter2) null);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator((IOContext) null, (-1), (-1), (ObjectCodec) null, streamWriter2Delegate0);
      QName qName0 = QName.valueOf("");
      toXmlGenerator0.setNextNameIfMissing(qName0);
      byte[] byteArray0 = new byte[6];
      toXmlGenerator0.useDefaultPrettyPrinter();
      // Undeclared exception!
//      try { 
        toXmlGenerator0.writeBinary(byteArray0, (-1), (int) (byte)49);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.codehaus.stax2.util.StreamWriter2Delegate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      StreamWriter2Delegate streamWriter2Delegate0 = new StreamWriter2Delegate((XMLStreamWriter2) null);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator((IOContext) null, 0, 2, (ObjectCodec) null, streamWriter2Delegate0);
      QName qName0 = new QName("\"]qALkBuZ3:e*+U)k@'");
      toXmlGenerator0.setNextNameIfMissing(qName0);
      byte[] byteArray0 = new byte[4];
      toXmlGenerator0.setNextIsUnwrapped(true);
      // Undeclared exception!
//      try { 
        toXmlGenerator0.writeBinary(byteArray0, (-3300), 1);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.codehaus.stax2.util.StreamWriter2Delegate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("com.fasterxml.jackson.databind.deser.impl.ExternalTypeHandler");
      WriterConfig writerConfig0 = WriterConfig.createJ2MEDefaults();
      ISOLatin1XmlWriter iSOLatin1XmlWriter0 = new ISOLatin1XmlWriter(mockFileOutputStream0, writerConfig0, false);
      NonNsStreamWriter nonNsStreamWriter0 = new NonNsStreamWriter(iSOLatin1XmlWriter0, "com.fasterxml.jackson.databind.deser.impl.ExternalTypeHandler", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator((IOContext) null, 126, 126, (ObjectCodec) null, nonNsStreamWriter0);
      byte[] byteArray0 = new byte[2];
      // Undeclared exception!
//      try { 
        toXmlGenerator0.writeBinary((Base64Variant) null, byteArray0, (int) (byte)103, 1949);
//        fail("Expecting exception: IllegalStateException");
      
//      } catch(IllegalStateException e) {
//         //
//         // No element/attribute name specified when trying to output element
//         //
//         verifyException("com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      WriterConfig writerConfig0 = WriterConfig.createJ2MEDefaults();
      SimpleNsStreamWriter simpleNsStreamWriter0 = new SimpleNsStreamWriter((XmlWriter) null, "1.1", writerConfig0);
      StreamWriterDelegate streamWriterDelegate0 = new StreamWriterDelegate(simpleNsStreamWriter0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 27, (-3017), (ObjectCodec) null, streamWriterDelegate0);
      char[] charArray0 = new char[6];
//      try { 
        toXmlGenerator0.writeRaw(charArray0, 2205, 3);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Underlying Stax XMLStreamWriter (of type org.codehaus.stax2.util.StreamWriterDelegate) does not implement Stax2 API natively and is missing method 'writeRaw': this breaks functionality such as indentation that relies on it. You need to upgrade to using compliant Stax implementation like Woodstox or Aalto
//         //
//         verifyException("com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      MissingNode missingNode0 = MissingNode.getInstance();
      IOContext iOContext0 = new IOContext(bufferRecycler0, missingNode0, false);
      ObjectMapper objectMapper0 = new ObjectMapper();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      WriterConfig writerConfig0 = WriterConfig.createJ2MEDefaults();
      ISOLatin1XmlWriter iSOLatin1XmlWriter0 = new ISOLatin1XmlWriter(byteArrayOutputStream0, writerConfig0, false);
      RepairingNsStreamWriter repairingNsStreamWriter0 = new RepairingNsStreamWriter(iSOLatin1XmlWriter0, "n{1a", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, (-15), 1, objectMapper0, repairingNsStreamWriter0);
      toXmlGenerator0.writeRaw((char[]) null, (-1190), (-1190));
      assertEquals(1, toXmlGenerator0.getFormatFeatures());
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(0);
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      AsciiXmlWriter asciiXmlWriter0 = new AsciiXmlWriter(byteArrayOutputStream0, writerConfig0, true);
      RepairingNsStreamWriter repairingNsStreamWriter0 = new RepairingNsStreamWriter(asciiXmlWriter0, (String) null, writerConfig0);
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext((BufferRecycler) null, object0, true);
      StreamWriterDelegate streamWriterDelegate0 = new StreamWriterDelegate(repairingNsStreamWriter0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 0, 1, (ObjectCodec) null, streamWriterDelegate0);
//      try { 
        toXmlGenerator0.writeRaw("", 1536, 1536);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Underlying Stax XMLStreamWriter (of type org.codehaus.stax2.util.StreamWriterDelegate) does not implement Stax2 API natively and is missing method 'writeRaw': this breaks functionality such as indentation that relies on it. You need to upgrade to using compliant Stax implementation like Woodstox or Aalto
//         //
//         verifyException("com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      MissingNode missingNode0 = MissingNode.getInstance();
      IOContext iOContext0 = new IOContext(bufferRecycler0, missingNode0, false);
      ObjectMapper objectMapper0 = new ObjectMapper();
      StreamWriter2Delegate streamWriter2Delegate0 = new StreamWriter2Delegate((XMLStreamWriter2) null);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 3, 840, objectMapper0, streamWriter2Delegate0);
      // Undeclared exception!
//      try { 
        toXmlGenerator0.writeRaw("v(b&&5yAT:Y:ig7W", 950, 1284);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.codehaus.stax2.util.StreamWriter2Delegate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      MissingNode missingNode0 = MissingNode.getInstance();
      IOContext iOContext0 = new IOContext(bufferRecycler0, missingNode0, false);
      ObjectMapper objectMapper0 = new ObjectMapper();
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      ISOLatin1XmlWriter iSOLatin1XmlWriter0 = new ISOLatin1XmlWriter((OutputStream) null, writerConfig0, false);
      RepairingNsStreamWriter repairingNsStreamWriter0 = new RepairingNsStreamWriter(iSOLatin1XmlWriter0, "T", writerConfig0);
      StreamWriterDelegate streamWriterDelegate0 = new StreamWriterDelegate(repairingNsStreamWriter0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 1678, (-2031), objectMapper0, streamWriterDelegate0);
//      try { 
        toXmlGenerator0.writeRaw("T");
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Underlying Stax XMLStreamWriter (of type org.codehaus.stax2.util.StreamWriterDelegate) does not implement Stax2 API natively and is missing method 'writeRaw': this breaks functionality such as indentation that relies on it. You need to upgrade to using compliant Stax implementation like Woodstox or Aalto
//         //
//         verifyException("com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      StreamWriter2Delegate streamWriter2Delegate0 = new StreamWriter2Delegate((XMLStreamWriter2) null);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator((IOContext) null, 1, 0, (ObjectCodec) null, streamWriter2Delegate0);
      QName qName0 = new QName("", "");
      toXmlGenerator0.setNextNameIfMissing(qName0);
      // Undeclared exception!
//      try { 
        toXmlGenerator0.writeRawValue((char[]) null, 2, 1);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      WriterConfig writerConfig0 = WriterConfig.createJ2MEDefaults();
      ISOLatin1XmlWriter iSOLatin1XmlWriter0 = new ISOLatin1XmlWriter((OutputStream) null, writerConfig0, true);
      RepairingNsStreamWriter repairingNsStreamWriter0 = new RepairingNsStreamWriter(iSOLatin1XmlWriter0, "JSON", writerConfig0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, iSOLatin1XmlWriter0, true);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 1, (-1291), objectMapper0, repairingNsStreamWriter0);
      // Undeclared exception!
//      try { 
        toXmlGenerator0.writeRawValue((char[]) null, 3, 56320);
//        fail("Expecting exception: IllegalStateException");
      
//      } catch(IllegalStateException e) {
//         //
//         // No element/attribute name specified when trying to output element
//         //
//         verifyException("com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      StreamWriter2Delegate streamWriter2Delegate0 = new StreamWriter2Delegate((XMLStreamWriter2) null);
      QName qName0 = new QName("A{Ja4", "A{Ja4", "");
      ObjectMapper objectMapper0 = new ObjectMapper();
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator((IOContext) null, (-1), 539, objectMapper0, streamWriter2Delegate0);
      toXmlGenerator0.setNextNameIfMissing(qName0);
      toXmlGenerator0.setNextIsAttribute(true);
      // Undeclared exception!
//      try { 
        toXmlGenerator0.writeRawValue("com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator", (-1), (-1));
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      StreamWriter2Delegate streamWriter2Delegate0 = new StreamWriter2Delegate((XMLStreamWriter2) null);
      QName qName0 = new QName("A{Ja4", "A{Ja4", "");
      ObjectMapper objectMapper0 = new ObjectMapper();
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator((IOContext) null, (-1), 539, objectMapper0, streamWriter2Delegate0);
      toXmlGenerator0.setNextNameIfMissing(qName0);
      // Undeclared exception!
//      try { 
        toXmlGenerator0.writeRawValue("com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator", (-1), (-1));
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      WriterConfig writerConfig0 = WriterConfig.createJ2MEDefaults();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("#", false);
      ISOLatin1XmlWriter iSOLatin1XmlWriter0 = new ISOLatin1XmlWriter(mockFileOutputStream0, writerConfig0, true);
      SimpleNsStreamWriter simpleNsStreamWriter0 = new SimpleNsStreamWriter(iSOLatin1XmlWriter0, "", writerConfig0);
      StreamWriterDelegate streamWriterDelegate0 = new StreamWriterDelegate(simpleNsStreamWriter0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator((IOContext) null, (-520), 55296, (ObjectCodec) null, streamWriterDelegate0);
//      try { 
        toXmlGenerator0.writeRawValue((String) null, 1, (-1129));
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Underlying Stax XMLStreamWriter (of type org.codehaus.stax2.util.StreamWriterDelegate) does not implement Stax2 API natively and is missing method 'writeRawValue': this breaks functionality such as indentation that relies on it. You need to upgrade to using compliant Stax implementation like Woodstox or Aalto
//         //
//         verifyException("com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      ObjectMapper objectMapper0 = new ObjectMapper();
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      ISOLatin1XmlWriter iSOLatin1XmlWriter0 = new ISOLatin1XmlWriter(byteArrayBuilder0, writerConfig0, true);
      RepairingNsStreamWriter repairingNsStreamWriter0 = new RepairingNsStreamWriter(iSOLatin1XmlWriter0, "\"FdP", writerConfig0);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArrayBuilder0.NO_BYTES, 3, 454);
      IOContext iOContext0 = new IOContext(bufferRecycler0, byteArrayInputStream0, true);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 3, 454, objectMapper0, repairingNsStreamWriter0);
      // Undeclared exception!
//      try { 
        toXmlGenerator0.writeRawValue("\"FdP", 56319, 3141);
//        fail("Expecting exception: IllegalStateException");
      
//      } catch(IllegalStateException e) {
//         //
//         // No element/attribute name specified when trying to output element
//         //
//         verifyException("com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      StreamWriter2Delegate streamWriter2Delegate0 = new StreamWriter2Delegate((XMLStreamWriter2) null);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator((IOContext) null, 0, 3, (ObjectCodec) null, streamWriter2Delegate0);
      QName qName0 = new QName("null reader");
      toXmlGenerator0.setNextNameIfMissing(qName0);
      toXmlGenerator0._nextIsAttribute = true;
      // Undeclared exception!
//      try { 
        toXmlGenerator0.writeRawValue("");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.codehaus.stax2.util.StreamWriterDelegate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(500);
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(byteArrayBuilder0);
      WriterConfig writerConfig0 = WriterConfig.createJ2MEDefaults();
      ISOLatin1XmlWriter iSOLatin1XmlWriter0 = new ISOLatin1XmlWriter(bufferedOutputStream0, writerConfig0, true);
      SimpleNsStreamWriter simpleNsStreamWriter0 = new SimpleNsStreamWriter(iSOLatin1XmlWriter0, (String) null, writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 1, 2, (ObjectCodec) null, simpleNsStreamWriter0);
      QName qName0 = new QName("6mE`-tK5#R", "D2U'TA8C?/Fs");
      toXmlGenerator0.setNextNameIfMissing(qName0);
//      try { 
        toXmlGenerator0.writeRawValue((String) null);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Unbound namespace URI '6mE`-tK5#R'
//         //
//         verifyException("com.fasterxml.jackson.dataformat.xml.util.StaxUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      RepairingNsStreamWriter repairingNsStreamWriter0 = new RepairingNsStreamWriter((XmlWriter) null, "", writerConfig0);
      StreamWriterDelegate streamWriterDelegate0 = new StreamWriterDelegate(repairingNsStreamWriter0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 2, 2, (ObjectCodec) null, streamWriterDelegate0);
//      try { 
        toXmlGenerator0.writeRawValue((String) null);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Underlying Stax XMLStreamWriter (of type org.codehaus.stax2.util.StreamWriterDelegate) does not implement Stax2 API natively and is missing method 'writeRawValue': this breaks functionality such as indentation that relies on it. You need to upgrade to using compliant Stax implementation like Woodstox or Aalto
//         //
//         verifyException("com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(500);
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(byteArrayBuilder0);
      WriterConfig writerConfig0 = WriterConfig.createJ2MEDefaults();
      ISOLatin1XmlWriter iSOLatin1XmlWriter0 = new ISOLatin1XmlWriter(bufferedOutputStream0, writerConfig0, true);
      SimpleNsStreamWriter simpleNsStreamWriter0 = new SimpleNsStreamWriter(iSOLatin1XmlWriter0, (String) null, writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 1, 2, (ObjectCodec) null, simpleNsStreamWriter0);
      // Undeclared exception!
//      try { 
        toXmlGenerator0.writeRawValue((String) null);
//        fail("Expecting exception: IllegalStateException");
      
//      } catch(IllegalStateException e) {
//         //
//         // No element/attribute name specified when trying to output element
//         //
//         verifyException("com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      MockPrintStream mockPrintStream0 = new MockPrintStream(byteArrayOutputStream0, true);
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      ISOLatin1XmlWriter iSOLatin1XmlWriter0 = new ISOLatin1XmlWriter(mockPrintStream0, writerConfig0, true);
      RepairingNsStreamWriter repairingNsStreamWriter0 = new RepairingNsStreamWriter(iSOLatin1XmlWriter0, "3/nWN`K9wC<Ttf\"V", writerConfig0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, iSOLatin1XmlWriter0, true);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 1, 1, (ObjectCodec) null, repairingNsStreamWriter0);
      QName qName0 = QName.valueOf("3/nWN`K9wC<Ttf\"V");
      toXmlGenerator0.setNextName(qName0);
      toXmlGenerator0.setNextIsCData(true);
      toXmlGenerator0.writeString((char[]) null, 3, 0);
      assertEquals(1, toXmlGenerator0.getFormatFeatures());
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      StreamWriter2Delegate streamWriter2Delegate0 = new StreamWriter2Delegate((XMLStreamWriter2) null);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator((IOContext) null, 56320, 56320, (ObjectCodec) null, streamWriter2Delegate0);
      PrettyPrinter prettyPrinter0 = toXmlGenerator0._constructDefaultPrettyPrinter();
      QName qName0 = new QName("'3sfJ//|o|/</)s.", "'3sfJ//|o|/</)s.");
      toXmlGenerator0.setNextNameIfMissing(qName0);
      toXmlGenerator0.setPrettyPrinter(prettyPrinter0);
      // Undeclared exception!
//      try { 
        toXmlGenerator0.writeString((char[]) null, 56320, 56320);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.codehaus.stax2.util.StreamWriter2Delegate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      StreamWriter2Delegate streamWriter2Delegate0 = new StreamWriter2Delegate((XMLStreamWriter2) null);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator((IOContext) null, 3, 1, (ObjectCodec) null, streamWriter2Delegate0);
      QName qName0 = new QName("!/Bsf|+", "!/Bsf|+");
      toXmlGenerator0._nextIsCData = true;
      toXmlGenerator0.setNextNameIfMissing(qName0);
      toXmlGenerator0._nextIsUnwrapped = true;
      // Undeclared exception!
//      try { 
        toXmlGenerator0.writeString((char[]) null, 1410, 3);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.codehaus.stax2.util.StreamWriter2Delegate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      StreamWriter2Delegate streamWriter2Delegate0 = new StreamWriter2Delegate((XMLStreamWriter2) null);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator((IOContext) null, 3, 1, (ObjectCodec) null, streamWriter2Delegate0);
      QName qName0 = new QName("!/Bsf|+", "!/Bsf|+");
      toXmlGenerator0.setNextNameIfMissing(qName0);
      toXmlGenerator0._nextIsUnwrapped = true;
      // Undeclared exception!
//      try { 
        toXmlGenerator0.writeString((char[]) null, 1410, 3);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.codehaus.stax2.util.StreamWriterDelegate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      StreamWriter2Delegate streamWriter2Delegate0 = new StreamWriter2Delegate((XMLStreamWriter2) null);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator((IOContext) null, 55296, 54, (ObjectCodec) null, streamWriter2Delegate0);
      QName qName0 = new QName("kWQ");
      toXmlGenerator0.setNextName(qName0);
      toXmlGenerator0.setNextIsAttribute(true);
      // Undeclared exception!
//      try { 
        toXmlGenerator0.writeString((char[]) null, (-2556), 515);
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("1zsaTKph%A!1");
      WriterConfig writerConfig0 = WriterConfig.createJ2MEDefaults();
      AsciiXmlWriter asciiXmlWriter0 = new AsciiXmlWriter(mockPrintStream0, writerConfig0, false);
      RepairingNsStreamWriter repairingNsStreamWriter0 = new RepairingNsStreamWriter(asciiXmlWriter0, (String) null, writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 1, 3, objectMapper0, repairingNsStreamWriter0);
      char[] charArray0 = new char[0];
      // Undeclared exception!
//      try { 
        toXmlGenerator0.writeString(charArray0, (-516), 128);
//        fail("Expecting exception: IllegalStateException");
      
//      } catch(IllegalStateException e) {
//         //
//         // No element/attribute name specified when trying to output element
//         //
//         verifyException("com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      ObjectMapper objectMapper0 = new ObjectMapper();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      MockPrintStream mockPrintStream0 = new MockPrintStream(byteArrayOutputStream0, false);
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      ISOLatin1XmlWriter iSOLatin1XmlWriter0 = new ISOLatin1XmlWriter(mockPrintStream0, writerConfig0, false);
      RepairingNsStreamWriter repairingNsStreamWriter0 = new RepairingNsStreamWriter(iSOLatin1XmlWriter0, "ei", writerConfig0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, iSOLatin1XmlWriter0, false);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 1, 0, objectMapper0, repairingNsStreamWriter0);
      QName qName0 = QName.valueOf("ei");
      toXmlGenerator0.setNextName(qName0);
      DefaultXmlPrettyPrinter defaultXmlPrettyPrinter0 = new DefaultXmlPrettyPrinter();
      toXmlGenerator0.setPrettyPrinter(defaultXmlPrettyPrinter0);
      toXmlGenerator0.writeString("ei");
      assertEquals(0, toXmlGenerator0.getFormatFeatures());
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      StreamWriter2Delegate streamWriter2Delegate0 = new StreamWriter2Delegate((XMLStreamWriter2) null);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator((IOContext) null, 55296, 55296, (ObjectCodec) null, streamWriter2Delegate0);
      toXmlGenerator0.setNextIsUnwrapped(true);
      toXmlGenerator0.setNextIsCData(true);
      QName qName0 = new QName("'N:a\"k-YGqNl:Y4A;", "'N:a\"k-YGqNl:Y4A;", "'N:a\"k-YGqNl:Y4A;");
      toXmlGenerator0.setNextNameIfMissing(qName0);
      // Undeclared exception!
//      try { 
        toXmlGenerator0.writeString("ZQl5");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.codehaus.stax2.util.StreamWriterDelegate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      StreamWriter2Delegate streamWriter2Delegate0 = new StreamWriter2Delegate((XMLStreamWriter2) null);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator((IOContext) null, 55296, 55296, (ObjectCodec) null, streamWriter2Delegate0);
      toXmlGenerator0.setNextIsUnwrapped(true);
      QName qName0 = new QName("'N:a\"k-YGqNl:Y4A;", "'N:a\"k-YGqNl:Y4A;", "'N:a\"k-YGqNl:Y4A;");
      toXmlGenerator0.setNextNameIfMissing(qName0);
      // Undeclared exception!
//      try { 
        toXmlGenerator0.writeString("ZQl5");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.codehaus.stax2.util.StreamWriterDelegate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      StreamWriter2Delegate streamWriter2Delegate0 = new StreamWriter2Delegate((XMLStreamWriter2) null);
      IOContext iOContext0 = new IOContext((BufferRecycler) null, (Object) null, true);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 2326, 2326, (ObjectCodec) null, streamWriter2Delegate0);
      QName qName0 = QName.valueOf("'sfJ//|o|/</)s.");
      toXmlGenerator0.setNextIsAttribute(true);
      toXmlGenerator0.setNextNameIfMissing(qName0);
      // Undeclared exception!
//      try { 
        toXmlGenerator0.writeString("MVzKy./6f`M4LW4");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.codehaus.stax2.util.StreamWriterDelegate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      MockFile mockFile0 = new MockFile("start an object");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0);
      WriterConfig writerConfig0 = WriterConfig.createJ2MEDefaults();
      ISOLatin1XmlWriter iSOLatin1XmlWriter0 = new ISOLatin1XmlWriter(mockPrintStream0, writerConfig0, false);
      NonNsStreamWriter nonNsStreamWriter0 = new NonNsStreamWriter(iSOLatin1XmlWriter0, ".)gF3Y;Fr0zDHL]GVGS8", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator((IOContext) null, 3, 1, (ObjectCodec) null, nonNsStreamWriter0);
      QName qName0 = new QName(" for node '", " for node '");
      boolean boolean0 = toXmlGenerator0.setNextNameIfMissing(qName0);
      assertTrue(boolean0);
      
      toXmlGenerator0.writeStartObject();
      toXmlGenerator0._handleStartObject();
      toXmlGenerator0._handleEndObject();
      assertEquals(1, toXmlGenerator0.getFormatFeatures());
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      MissingNode missingNode0 = MissingNode.getInstance();
      IOContext iOContext0 = new IOContext(bufferRecycler0, missingNode0, false);
      ObjectMapper objectMapper0 = new ObjectMapper();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      WriterConfig writerConfig0 = WriterConfig.createJ2MEDefaults();
      ISOLatin1XmlWriter iSOLatin1XmlWriter0 = new ISOLatin1XmlWriter(byteArrayOutputStream0, writerConfig0, false);
      RepairingNsStreamWriter repairingNsStreamWriter0 = new RepairingNsStreamWriter(iSOLatin1XmlWriter0, "n{1a", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, (-15), 1, objectMapper0, repairingNsStreamWriter0);
//      try { 
        toXmlGenerator0._handleEndObject();
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Can not write END_ELEMENT without open START_ELEMENT
//         //
//         verifyException("com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      StreamWriter2Delegate streamWriter2Delegate0 = new StreamWriter2Delegate((XMLStreamWriter2) null);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator((IOContext) null, 3, 1, (ObjectCodec) null, streamWriter2Delegate0);
//      try { 
        toXmlGenerator0.writeEndObject();
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Current context not Object but root
//         //
//         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("com.fasterxml.jackson.databind.deser.impl.ExternalTypeHandler");
      WriterConfig writerConfig0 = WriterConfig.createJ2MEDefaults();
      ISOLatin1XmlWriter iSOLatin1XmlWriter0 = new ISOLatin1XmlWriter(mockFileOutputStream0, writerConfig0, false);
      NonNsStreamWriter nonNsStreamWriter0 = new NonNsStreamWriter(iSOLatin1XmlWriter0, "com.fasterxml.jackson.databind.deser.impl.ExternalTypeHandler", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator((IOContext) null, 126, 126, (ObjectCodec) null, nonNsStreamWriter0);
      QName qName0 = QName.valueOf("com.fasterxml.jackson.databind.deser.impl.ExternalTypeHandler");
      toXmlGenerator0.setNextNameIfMissing(qName0);
      toXmlGenerator0.writeStartObject();
      // Undeclared exception!
//      try { 
        toXmlGenerator0.close();
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      StreamWriter2Delegate streamWriter2Delegate0 = new StreamWriter2Delegate((XMLStreamWriter2) null);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator((IOContext) null, 3, 1, (ObjectCodec) null, streamWriter2Delegate0);
      DefaultXmlPrettyPrinter defaultXmlPrettyPrinter0 = new DefaultXmlPrettyPrinter();
      toXmlGenerator0.setPrettyPrinter(defaultXmlPrettyPrinter0);
      // Undeclared exception!
//      try { 
        toXmlGenerator0.writeStartObject();
//        fail("Expecting exception: IllegalStateException");
      
//      } catch(IllegalStateException e) {
//         //
//         // No element/attribute name specified when trying to output element
//         //
//         verifyException("com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0.BYTE_BASE64_CODEC_BUFFER, false);
      WriterConfig writerConfig0 = WriterConfig.createJ2MEDefaults();
      ISOLatin1XmlWriter iSOLatin1XmlWriter0 = new ISOLatin1XmlWriter((OutputStream) null, writerConfig0, false);
      NonNsStreamWriter nonNsStreamWriter0 = new NonNsStreamWriter(iSOLatin1XmlWriter0, "K[DL_UXp/", writerConfig0);
      StreamWriter2Delegate streamWriter2Delegate0 = new StreamWriter2Delegate(nonNsStreamWriter0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 21, 21, (ObjectCodec) null, streamWriter2Delegate0);
//      try { 
        toXmlGenerator0.writeEndArray();
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Current context not Array but root
//         //
//         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      StreamWriter2Delegate streamWriter2Delegate0 = new StreamWriter2Delegate((XMLStreamWriter2) null);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator((IOContext) null, 1, 0, (ObjectCodec) null, streamWriter2Delegate0);
      double[] doubleArray0 = new double[3];
      toXmlGenerator0.useDefaultPrettyPrinter();
      toXmlGenerator0.writeArray(doubleArray0, 1, 0);
      assertEquals(0, toXmlGenerator0.getFormatFeatures());
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      StreamWriter2Delegate streamWriter2Delegate0 = new StreamWriter2Delegate((XMLStreamWriter2) null);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator((IOContext) null, (-1581), (-1581), (ObjectCodec) null, streamWriter2Delegate0);
      toXmlGenerator0.writeStartArray((-978));
      // Undeclared exception!
//      try { 
        toXmlGenerator0.close();
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      StreamWriter2Delegate streamWriter2Delegate0 = new StreamWriter2Delegate((XMLStreamWriter2) null);
      QName qName0 = new QName("O}UXK>mBm7rGh#y|b", "O}UXK>mBm7rGh#y|b");
      IOContext iOContext0 = new IOContext(bufferRecycler0, streamWriter2Delegate0, true);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 0, (-1), (ObjectCodec) null, streamWriter2Delegate0);
      toXmlGenerator0.setNextNameIfMissing(qName0);
//      try { 
        toXmlGenerator0.writeRepeatedFieldName();
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Can not write a field name, expecting a value
//         //
//         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("com.fasterxml.jackson.databind.deser.impl.ExternalTypeHandler");
      WriterConfig writerConfig0 = WriterConfig.createJ2MEDefaults();
      ISOLatin1XmlWriter iSOLatin1XmlWriter0 = new ISOLatin1XmlWriter(mockFileOutputStream0, writerConfig0, false);
      NonNsStreamWriter nonNsStreamWriter0 = new NonNsStreamWriter(iSOLatin1XmlWriter0, "com.fasterxml.jackson.databind.deser.impl.ExternalTypeHandler", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator((IOContext) null, 126, 126, (ObjectCodec) null, nonNsStreamWriter0);
      QName qName0 = QName.valueOf("com.fasterxml.jackson.databind.deser.impl.ExternalTypeHandler");
      boolean boolean0 = toXmlGenerator0.setNextNameIfMissing(qName0);
      assertTrue(boolean0);
      
      toXmlGenerator0.writeStartObject();
      toXmlGenerator0.writeRepeatedFieldName();
      assertEquals(126, toXmlGenerator0.getFormatFeatures());
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      StreamWriter2Delegate streamWriter2Delegate0 = new StreamWriter2Delegate((XMLStreamWriter2) null);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator((IOContext) null, 1, 3, (ObjectCodec) null, streamWriter2Delegate0);
      DefaultXmlPrettyPrinter defaultXmlPrettyPrinter0 = new DefaultXmlPrettyPrinter();
      toXmlGenerator0._xmlPrettyPrinter = (XmlPrettyPrinter) defaultXmlPrettyPrinter0;
      QName qName0 = new QName("JA", "JA", "JA");
      // Undeclared exception!
//      try { 
        toXmlGenerator0.finishWrappedValue(qName0, qName0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.codehaus.stax2.util.StreamWriter2Delegate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      AsciiXmlWriter asciiXmlWriter0 = new AsciiXmlWriter((OutputStream) null, writerConfig0, true);
      RepairingNsStreamWriter repairingNsStreamWriter0 = new RepairingNsStreamWriter(asciiXmlWriter0, "", writerConfig0);
      StreamWriter2Delegate streamWriter2Delegate0 = new StreamWriter2Delegate(repairingNsStreamWriter0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator((IOContext) null, 2, (-65281), (ObjectCodec) null, streamWriter2Delegate0);
      QName qName0 = QName.valueOf("");
//      try { 
        toXmlGenerator0.finishWrappedValue(qName0, qName0);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // No open start element, when trying to write end element
//         //
//         verifyException("com.fasterxml.jackson.dataformat.xml.util.StaxUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      StreamWriter2Delegate streamWriter2Delegate0 = new StreamWriter2Delegate((XMLStreamWriter2) null);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator((IOContext) null, (-1581), (-1581), (ObjectCodec) null, streamWriter2Delegate0);
      toXmlGenerator0.finishWrappedValue((QName) null, (QName) null);
      assertEquals((-1581), toXmlGenerator0.getFormatFeatures());
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      StreamWriter2Delegate streamWriter2Delegate0 = new StreamWriter2Delegate((XMLStreamWriter2) null);
      QName qName0 = new QName("~Fr@`a[t{\"+/+YB4");
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator((IOContext) null, (-2327), (-2327), (ObjectCodec) null, streamWriter2Delegate0);
      toXmlGenerator0.useDefaultPrettyPrinter();
      // Undeclared exception!
//      try { 
        toXmlGenerator0.startWrappedValue(qName0, qName0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.codehaus.stax2.util.StreamWriter2Delegate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      DefaultXmlPrettyPrinter defaultXmlPrettyPrinter0 = new DefaultXmlPrettyPrinter();
      IOContext iOContext0 = new IOContext(bufferRecycler0, defaultXmlPrettyPrinter0, false);
      StreamWriter2Delegate streamWriter2Delegate0 = new StreamWriter2Delegate((XMLStreamWriter2) null);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 1341, 1, (ObjectCodec) null, streamWriter2Delegate0);
      QName qName0 = new QName("");
      toXmlGenerator0.startWrappedValue((QName) null, qName0);
      assertEquals(1, toXmlGenerator0.getFormatFeatures());
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      StreamWriter2Delegate streamWriter2Delegate0 = new StreamWriter2Delegate((XMLStreamWriter2) null);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator((IOContext) null, 3, 1, (ObjectCodec) null, streamWriter2Delegate0);
      QName qName0 = new QName("com.fasterxmH.jckson.core.base.GeneratorBase", "com.fasterxmH.jckson.core.base.GeneratorBase");
      boolean boolean0 = toXmlGenerator0.setNextNameIfMissing(qName0);
      boolean boolean1 = toXmlGenerator0.setNextNameIfMissing(qName0);
      assertFalse(boolean1 == boolean0);
      assertEquals(1, toXmlGenerator0.getFormatFeatures());
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      ToXmlGenerator.Feature toXmlGenerator_Feature0 = ToXmlGenerator.Feature.WRITE_XML_1_1;
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      DefaultXmlPrettyPrinter defaultXmlPrettyPrinter0 = new DefaultXmlPrettyPrinter();
      IOContext iOContext0 = new IOContext(bufferRecycler0, defaultXmlPrettyPrinter0, false);
      StreamWriter2Delegate streamWriter2Delegate0 = new StreamWriter2Delegate((XMLStreamWriter2) null);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, (-2356), (-2356), (ObjectCodec) null, streamWriter2Delegate0);
      toXmlGenerator0.configure(toXmlGenerator_Feature0, true);
      assertEquals((-2354), toXmlGenerator0.getFormatFeatures());
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      ToXmlGenerator.Feature toXmlGenerator_Feature0 = ToXmlGenerator.Feature.WRITE_XML_1_1;
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      DefaultXmlPrettyPrinter defaultXmlPrettyPrinter0 = new DefaultXmlPrettyPrinter();
      IOContext iOContext0 = new IOContext(bufferRecycler0, defaultXmlPrettyPrinter0, false);
      StreamWriter2Delegate streamWriter2Delegate0 = new StreamWriter2Delegate((XMLStreamWriter2) null);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, (-1), (-1), (ObjectCodec) null, streamWriter2Delegate0);
      boolean boolean0 = toXmlGenerator0.isEnabled(toXmlGenerator_Feature0);
      assertEquals((-1), toXmlGenerator0.getFormatFeatures());
      assertTrue(boolean0);
      assertEquals(2, toXmlGenerator_Feature0.getMask());
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectReader objectReader0 = objectMapper0.reader((Base64Variant) null);
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      ToXmlGenerator.Feature toXmlGenerator_Feature0 = ToXmlGenerator.Feature.WRITE_XML_DECLARATION;
      RepairingNsStreamWriter repairingNsStreamWriter0 = new RepairingNsStreamWriter((XmlWriter) null, "*WBV!ms>#a=4)E,b", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 3003, 76, objectReader0, repairingNsStreamWriter0);
      boolean boolean0 = toXmlGenerator0.isEnabled(toXmlGenerator_Feature0);
      assertEquals(76, toXmlGenerator0.getFormatFeatures());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      MissingNode missingNode0 = MissingNode.getInstance();
      IOContext iOContext0 = new IOContext(bufferRecycler0, missingNode0, false);
      ObjectMapper objectMapper0 = new ObjectMapper();
      StreamWriter2Delegate streamWriter2Delegate0 = new StreamWriter2Delegate((XMLStreamWriter2) null);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 0, 2, objectMapper0, streamWriter2Delegate0);
      assertEquals(2, toXmlGenerator0.getFormatFeatures());
      
      toXmlGenerator0.overrideFormatFeatures(15, 3);
      assertEquals(3, toXmlGenerator0.getFormatFeatures());
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      MissingNode missingNode0 = MissingNode.getInstance();
      IOContext iOContext0 = new IOContext(bufferRecycler0, missingNode0, true);
      ObjectMapper objectMapper0 = new ObjectMapper();
      StreamWriter2Delegate streamWriter2Delegate0 = new StreamWriter2Delegate((XMLStreamWriter2) null);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 1982, (-15), objectMapper0, streamWriter2Delegate0);
      DefaultPrettyPrinter defaultPrettyPrinter0 = new DefaultPrettyPrinter("");
      JsonGenerator jsonGenerator0 = toXmlGenerator0.setPrettyPrinter(defaultPrettyPrinter0);
      // Undeclared exception!
//      try { 
        jsonGenerator0.writeStartArray();
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.codehaus.stax2.util.StreamWriter2Delegate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      AsciiXmlWriter asciiXmlWriter0 = new AsciiXmlWriter(pipedOutputStream0, writerConfig0, true);
      RepairingNsStreamWriter repairingNsStreamWriter0 = new RepairingNsStreamWriter(asciiXmlWriter0, (String) null, writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator((IOContext) null, 2, 2, (ObjectCodec) null, repairingNsStreamWriter0);
      DefaultXmlPrettyPrinter defaultXmlPrettyPrinter0 = new DefaultXmlPrettyPrinter();
      toXmlGenerator0._xmlPrettyPrinter = (XmlPrettyPrinter) defaultXmlPrettyPrinter0;
      toXmlGenerator0.initGenerator();
      assertEquals("1.1", repairingNsStreamWriter0.getXmlVersion());
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      BufferRecycler bufferRecycler0 = jsonFactory0._getBufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, jsonFactory0, false);
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      ISOLatin1XmlWriter iSOLatin1XmlWriter0 = new ISOLatin1XmlWriter((OutputStream) null, writerConfig0, true);
      RepairingNsStreamWriter repairingNsStreamWriter0 = new RepairingNsStreamWriter(iSOLatin1XmlWriter0, "JSON", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 1, (-1291), objectMapper0, repairingNsStreamWriter0);
      ToXmlGenerator.Feature toXmlGenerator_Feature0 = ToXmlGenerator.Feature.WRITE_XML_1_1;
      toXmlGenerator0.enable(toXmlGenerator_Feature0);
      toXmlGenerator0.initGenerator();
      assertEquals("1.1", repairingNsStreamWriter0.getXmlVersion());
      assertEquals((-1289), toXmlGenerator0.getFormatFeatures());
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      BufferRecycler bufferRecycler0 = jsonFactory0._getBufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, jsonFactory0, false);
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      ISOLatin1XmlWriter iSOLatin1XmlWriter0 = new ISOLatin1XmlWriter((OutputStream) null, writerConfig0, true);
      RepairingNsStreamWriter repairingNsStreamWriter0 = new RepairingNsStreamWriter(iSOLatin1XmlWriter0, "JSON", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 1, (-1291), objectMapper0, repairingNsStreamWriter0);
      toXmlGenerator0.initGenerator();
      toXmlGenerator0.initGenerator();
      assertEquals((-1291), toXmlGenerator0.getFormatFeatures());
      assertEquals("1.0", repairingNsStreamWriter0.getXmlVersion());
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      DefaultXmlPrettyPrinter defaultXmlPrettyPrinter0 = new DefaultXmlPrettyPrinter();
      IOContext iOContext0 = new IOContext(bufferRecycler0, defaultXmlPrettyPrinter0, false);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      ISOLatin1XmlWriter iSOLatin1XmlWriter0 = new ISOLatin1XmlWriter(byteArrayBuilder0, writerConfig0, true);
      RepairingNsStreamWriter repairingNsStreamWriter0 = new RepairingNsStreamWriter(iSOLatin1XmlWriter0, ") does not implement Stax2 API natively and is missing method '", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 14, 0, (ObjectCodec) null, repairingNsStreamWriter0);
      toXmlGenerator0.initGenerator();
      assertEquals(0, toXmlGenerator0.getFormatFeatures());
      assertEquals("1.0", repairingNsStreamWriter0.getXmlVersion());
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      int int0 = ToXmlGenerator.Feature.collectDefaults();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      ToXmlGenerator.Feature toXmlGenerator_Feature0 = ToXmlGenerator.Feature.WRITE_XML_1_1;
      boolean boolean0 = toXmlGenerator_Feature0.enabledByDefault();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      MockFile mockFile0 = new MockFile("m=P3-zpS8h8S");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0);
      WriterConfig writerConfig0 = WriterConfig.createJ2MEDefaults();
      ISOLatin1XmlWriter iSOLatin1XmlWriter0 = new ISOLatin1XmlWriter(mockPrintStream0, writerConfig0, false);
      NonNsStreamWriter nonNsStreamWriter0 = new NonNsStreamWriter(iSOLatin1XmlWriter0, "start an object", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator((IOContext) null, 1448, 3740, (ObjectCodec) null, nonNsStreamWriter0);
      // Undeclared exception!
//      try { 
        toXmlGenerator0.writeNumber("com.fasterxml.jackson.databind.ser.std.TimeZoneSerializer");
//        fail("Expecting exception: IllegalStateException");
      
//      } catch(IllegalStateException e) {
//         //
//         // No element/attribute name specified when trying to output element
//         //
//         verifyException("com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      MockFile mockFile0 = new MockFile("start an object");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0);
      WriterConfig writerConfig0 = WriterConfig.createJ2MEDefaults();
      ISOLatin1XmlWriter iSOLatin1XmlWriter0 = new ISOLatin1XmlWriter(mockPrintStream0, writerConfig0, false);
      NonNsStreamWriter nonNsStreamWriter0 = new NonNsStreamWriter(iSOLatin1XmlWriter0, "start an object", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator((IOContext) null, 1448, 2, (ObjectCodec) null, nonNsStreamWriter0);
      ToXmlGenerator.Feature toXmlGenerator_Feature0 = ToXmlGenerator.Feature.WRITE_XML_1_1;
      toXmlGenerator0.enable(toXmlGenerator_Feature0);
      assertEquals(2, toXmlGenerator0.getFormatFeatures());
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      MockFile mockFile0 = new MockFile("com.fasterxml.jackson.databind.deser.impl.ExternalTypeHandler");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0);
      WriterConfig writerConfig0 = WriterConfig.createJ2MEDefaults();
      ISOLatin1XmlWriter iSOLatin1XmlWriter0 = new ISOLatin1XmlWriter(mockFileOutputStream0, writerConfig0, false);
      NonNsStreamWriter nonNsStreamWriter0 = new NonNsStreamWriter(iSOLatin1XmlWriter0, "com.fasterxml.jackson.databind.deser.impl.ExternalTypeHandler", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator((IOContext) null, 96, 96, (ObjectCodec) null, nonNsStreamWriter0);
      // Undeclared exception!
//      try { 
        toXmlGenerator0.writeRawUTF8String((byte[]) null, 98, 98);
//        fail("Expecting exception: UnsupportedOperationException");
      
//      } catch(UnsupportedOperationException e) {
//         //
//         // Operation not supported by generator of type com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator
//         //
//         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "YO@\u0004VZ#M(", false);
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("JSON", false);
      WriterConfig writerConfig0 = WriterConfig.createJ2MEDefaults();
      ISOLatin1XmlWriter iSOLatin1XmlWriter0 = new ISOLatin1XmlWriter(mockFileOutputStream0, writerConfig0, false);
      RepairingNsStreamWriter repairingNsStreamWriter0 = new RepairingNsStreamWriter(iSOLatin1XmlWriter0, "YO@\u0004VZ#M(", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 3, 1, objectMapper0, repairingNsStreamWriter0);
      boolean boolean0 = toXmlGenerator0.canWriteFormattedNumbers();
      assertTrue(boolean0);
      assertEquals(1, toXmlGenerator0.getFormatFeatures());
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      StreamWriter2Delegate streamWriter2Delegate0 = new StreamWriter2Delegate((XMLStreamWriter2) null);
      IOContext iOContext0 = mock(IOContext.class, new ViolatedAssumptionAnswer());
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 3, (-3798), (ObjectCodec) null, streamWriter2Delegate0);
      Object object0 = toXmlGenerator0.getOutputTarget();
      assertEquals((-3798), toXmlGenerator0.getFormatFeatures());
      assertNotNull(object0);
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      MockFile mockFile0 = new MockFile("start an object");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0);
      WriterConfig writerConfig0 = WriterConfig.createJ2MEDefaults();
      ISOLatin1XmlWriter iSOLatin1XmlWriter0 = new ISOLatin1XmlWriter(mockPrintStream0, writerConfig0, false);
      NonNsStreamWriter nonNsStreamWriter0 = new NonNsStreamWriter(iSOLatin1XmlWriter0, "start an object", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator((IOContext) null, 1448, 2, (ObjectCodec) null, nonNsStreamWriter0);
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      // Undeclared exception!
//      try { 
        toXmlGenerator0.writeString((SerializableString) serializedString0);
//        fail("Expecting exception: IllegalStateException");
      
//      } catch(IllegalStateException e) {
//         //
//         // No element/attribute name specified when trying to output element
//         //
//         verifyException("com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      BufferRecycler bufferRecycler0 = jsonFactory0._getBufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, jsonFactory0, false);
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      ISOLatin1XmlWriter iSOLatin1XmlWriter0 = new ISOLatin1XmlWriter((OutputStream) null, writerConfig0, true);
      RepairingNsStreamWriter repairingNsStreamWriter0 = new RepairingNsStreamWriter(iSOLatin1XmlWriter0, "JSON", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 1, (-1291), objectMapper0, repairingNsStreamWriter0);
      toXmlGenerator0.getStaxWriter();
      assertEquals((-1291), toXmlGenerator0.getFormatFeatures());
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("1zsaTKph%A!1");
      WriterConfig writerConfig0 = WriterConfig.createJ2MEDefaults();
      AsciiXmlWriter asciiXmlWriter0 = new AsciiXmlWriter(mockPrintStream0, writerConfig0, false);
      RepairingNsStreamWriter repairingNsStreamWriter0 = new RepairingNsStreamWriter(asciiXmlWriter0, (String) null, writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 1, 3, objectMapper0, repairingNsStreamWriter0);
      int int0 = toXmlGenerator0.getFormatFeatures();
      assertEquals(3, int0);
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      StreamWriter2Delegate streamWriter2Delegate0 = new StreamWriter2Delegate((XMLStreamWriter2) null);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator((IOContext) null, 1, 0, (ObjectCodec) null, streamWriter2Delegate0);
      toXmlGenerator0.useDefaultPrettyPrinter();
      QName qName0 = new QName("yL p{)aeaQpK3", "yL p{)aeaQpK3");
      toXmlGenerator0.setNextNameIfMissing(qName0);
      BigInteger bigInteger0 = BigInteger.ONE;
      // Undeclared exception!
//      try { 
        toXmlGenerator0.writeNumber(bigInteger0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.codehaus.stax2.util.StreamWriter2Delegate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("7rc$rP", true);
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(mockFileOutputStream0);
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      AsciiXmlWriter asciiXmlWriter0 = new AsciiXmlWriter(objectOutputStream0, writerConfig0, true);
      NonNsStreamWriter nonNsStreamWriter0 = new NonNsStreamWriter(asciiXmlWriter0, "v!W7Z", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator((IOContext) null, 1, 5, (ObjectCodec) null, nonNsStreamWriter0);
      // Undeclared exception!
//      try { 
        toXmlGenerator0.writeRawValue((SerializableString) null);
//        fail("Expecting exception: UnsupportedOperationException");
      
//      } catch(UnsupportedOperationException e) {
//         //
//         // Operation not supported by generator of type com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator
//         //
//         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      MockFile mockFile0 = new MockFile("start an object");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0);
      WriterConfig writerConfig0 = WriterConfig.createJ2MEDefaults();
      ISOLatin1XmlWriter iSOLatin1XmlWriter0 = new ISOLatin1XmlWriter(mockPrintStream0, writerConfig0, false);
      NonNsStreamWriter nonNsStreamWriter0 = new NonNsStreamWriter(iSOLatin1XmlWriter0, "start an object", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator((IOContext) null, 1448, 2, (ObjectCodec) null, nonNsStreamWriter0);
      QName qName0 = new QName(" for node '", "start an object");
      boolean boolean0 = toXmlGenerator0.setNextNameIfMissing(qName0);
      assertTrue(boolean0);
      
      toXmlGenerator0.writeStartObject();
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      toXmlGenerator0.writeFieldName((SerializableString) serializedString0);
      toXmlGenerator0.writeString((SerializableString) serializedString0);
      assertEquals(2, toXmlGenerator0.getFormatFeatures());
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("1zsaTKph%A!1");
      WriterConfig writerConfig0 = WriterConfig.createJ2MEDefaults();
      AsciiXmlWriter asciiXmlWriter0 = new AsciiXmlWriter(mockPrintStream0, writerConfig0, false);
      RepairingNsStreamWriter repairingNsStreamWriter0 = new RepairingNsStreamWriter(asciiXmlWriter0, (String) null, writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 1, 3, objectMapper0, repairingNsStreamWriter0);
      int int0 = toXmlGenerator0.getOutputBuffered();
      assertEquals((-1), int0);
      assertEquals(3, toXmlGenerator0.getFormatFeatures());
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      BufferRecycler bufferRecycler0 = jsonFactory0._getBufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, jsonFactory0, false);
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      ISOLatin1XmlWriter iSOLatin1XmlWriter0 = new ISOLatin1XmlWriter((OutputStream) null, writerConfig0, true);
      RepairingNsStreamWriter repairingNsStreamWriter0 = new RepairingNsStreamWriter(iSOLatin1XmlWriter0, "JSON", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 1, (-1291), objectMapper0, repairingNsStreamWriter0);
      byte[] byteArray0 = new byte[5];
      // Undeclared exception!
//      try { 
        toXmlGenerator0.writeUTF8String(byteArray0, 0, 0);
//        fail("Expecting exception: UnsupportedOperationException");
      
//      } catch(UnsupportedOperationException e) {
//         //
//         // Operation not supported by generator of type com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator
//         //
//         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonFactory jsonFactory0 = new JsonFactory((ObjectCodec) null);
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      WriterConfig writerConfig0 = WriterConfig.createJ2MEDefaults();
      RepairingNsStreamWriter repairingNsStreamWriter0 = new RepairingNsStreamWriter((XmlWriter) null, "JSON", writerConfig0);
      StreamWriterDelegate streamWriterDelegate0 = new StreamWriterDelegate(repairingNsStreamWriter0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 0, (-2450), objectMapper0, streamWriterDelegate0);
      char[] charArray0 = new char[1];
//      try { 
        toXmlGenerator0.writeRawValue(charArray0, 0, 0);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Underlying Stax XMLStreamWriter (of type org.codehaus.stax2.util.StreamWriterDelegate) does not implement Stax2 API natively and is missing method 'writeRawValue': this breaks functionality such as indentation that relies on it. You need to upgrade to using compliant Stax implementation like Woodstox or Aalto
//         //
//         verifyException("com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      StreamWriter2Delegate streamWriter2Delegate0 = new StreamWriter2Delegate((XMLStreamWriter2) null);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator((IOContext) null, 56320, 56320, (ObjectCodec) null, streamWriter2Delegate0);
      toXmlGenerator0.setNextIsUnwrapped(true);
      QName qName0 = new QName("'sfJ//|o|/</1sN");
      toXmlGenerator0.setNextNameIfMissing(qName0);
      // Undeclared exception!
//      try { 
        toXmlGenerator0.writeNumber((float) 56320);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.codehaus.stax2.util.StreamWriter2Delegate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      MissingNode missingNode0 = MissingNode.getInstance();
      IOContext iOContext0 = new IOContext(bufferRecycler0, missingNode0, false);
      ObjectMapper objectMapper0 = new ObjectMapper();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      WriterConfig writerConfig0 = WriterConfig.createJ2MEDefaults();
      ISOLatin1XmlWriter iSOLatin1XmlWriter0 = new ISOLatin1XmlWriter(byteArrayOutputStream0, writerConfig0, true);
      RepairingNsStreamWriter repairingNsStreamWriter0 = new RepairingNsStreamWriter(iSOLatin1XmlWriter0, "M4ddg%}sQx;N", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 2, 2, objectMapper0, repairingNsStreamWriter0);
//      try { 
        toXmlGenerator0.writeStringField((String) null, "write null value");
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Can not write a field name, expecting a value
//         //
//         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      DefaultXmlPrettyPrinter defaultXmlPrettyPrinter0 = new DefaultXmlPrettyPrinter();
      IOContext iOContext0 = new IOContext(bufferRecycler0, defaultXmlPrettyPrinter0, false);
      StreamWriter2Delegate streamWriter2Delegate0 = new StreamWriter2Delegate((XMLStreamWriter2) null);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 2, 1, (ObjectCodec) null, streamWriter2Delegate0);
      // Undeclared exception!
//      try { 
        toXmlGenerator0.writeRaw('l');
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.codehaus.stax2.util.StreamWriter2Delegate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      MockFile mockFile0 = new MockFile("start an object");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0);
      WriterConfig writerConfig0 = WriterConfig.createJ2MEDefaults();
      ISOLatin1XmlWriter iSOLatin1XmlWriter0 = new ISOLatin1XmlWriter(mockPrintStream0, writerConfig0, false);
      NonNsStreamWriter nonNsStreamWriter0 = new NonNsStreamWriter(iSOLatin1XmlWriter0, "start an object", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator((IOContext) null, 1448, 2, (ObjectCodec) null, nonNsStreamWriter0);
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
//      try { 
        toXmlGenerator0.writeFieldName((SerializableString) serializedString0);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Can not write a field name, expecting a value
//         //
//         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      MissingNode missingNode0 = MissingNode.getInstance();
      IOContext iOContext0 = new IOContext(bufferRecycler0, missingNode0, false);
      ObjectMapper objectMapper0 = new ObjectMapper();
      StreamWriter2Delegate streamWriter2Delegate0 = new StreamWriter2Delegate((XMLStreamWriter2) null);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 227, 0, objectMapper0, streamWriter2Delegate0);
      toXmlGenerator0.inRoot();
      assertEquals(0, toXmlGenerator0.getFormatFeatures());
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      StreamWriter2Delegate streamWriter2Delegate0 = new StreamWriter2Delegate((XMLStreamWriter2) null);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator((IOContext) null, 1, 0, (ObjectCodec) null, streamWriter2Delegate0);
      // Undeclared exception!
//      try { 
        toXmlGenerator0.writeNumber((double) 3);
//        fail("Expecting exception: IllegalStateException");
      
//      } catch(IllegalStateException e) {
//         //
//         // No element/attribute name specified when trying to output element
//         //
//         verifyException("com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(0);
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      AsciiXmlWriter asciiXmlWriter0 = new AsciiXmlWriter(byteArrayOutputStream0, writerConfig0, true);
      RepairingNsStreamWriter repairingNsStreamWriter0 = new RepairingNsStreamWriter(asciiXmlWriter0, (String) null, writerConfig0);
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext((BufferRecycler) null, object0, true);
      StreamWriterDelegate streamWriterDelegate0 = new StreamWriterDelegate(repairingNsStreamWriter0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 0, 1, (ObjectCodec) null, streamWriterDelegate0);
      toXmlGenerator0._releaseBuffers();
      assertEquals(1, toXmlGenerator0.getFormatFeatures());
  }
}
