/*
 * This file was automatically generated by EvoSuite
 * Fri Jul 30 08:20:00 GMT 2021
 */

package org.jsoup.helper;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedInputStream;
import java.io.DataInputStream;
import java.io.File;
import java.io.IOException;
import java.io.InputStream;
import java.io.PipedInputStream;
import java.io.PushbackInputStream;
import java.net.InetAddress;
import java.net.MalformedURLException;
import java.net.ProtocolException;
import java.net.Proxy;
import java.net.URL;
import java.net.URLStreamHandler;
import java.net.UnknownServiceException;
import java.nio.charset.IllegalCharsetNameException;
import java.util.Collection;
import java.util.ConcurrentModificationException;
import java.util.HashMap;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.Map;
import javax.net.ssl.SSLSocketFactory;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileInputStream;
import org.evosuite.runtime.mock.java.net.MockInetAddress;
import org.evosuite.runtime.mock.java.net.MockInetSocketAddress;
import org.evosuite.runtime.mock.java.net.MockURL;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.EvoSuiteURL;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.evosuite.runtime.testdata.NetworkHandling;
import org.jsoup.Connection;
import org.jsoup.helper.HttpConnection;
import org.jsoup.parser.Parser;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class HttpConnection_ESTest extends HttpConnection_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      Connection connection0 = httpConnection0.maxBodySize(0);
      assertSame(connection0, httpConnection0);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
      assertEquals(30000, httpConnection_Request0.timeout());
      
      httpConnection_Request0.timeout(0);
      assertEquals(0, httpConnection_Request0.timeout());
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      Connection connection0 = httpConnection0.header("+g21m}ox6/{pvu", "%#4");
      assertSame(httpConnection0, connection0);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
      httpConnection_Request0.timeout(2125);
      assertEquals(2125, httpConnection_Request0.timeout());
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
      httpConnection_Request0.sslSocketFactory((SSLSocketFactory) null);
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertEquals(1048576, httpConnection_Request0.maxBodySize());
      assertEquals(30000, httpConnection_Request0.timeout());
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertTrue(httpConnection_Request0.followRedirects());
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
      httpConnection_Request0.sslSocketFactory();
      assertEquals(1048576, httpConnection_Request0.maxBodySize());
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertTrue(httpConnection_Request0.followRedirects());
      assertEquals(30000, httpConnection_Request0.timeout());
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
      Connection.Request connection_Request0 = httpConnection_Request0.requestBody(">eBJ8hy?N;h");
      assertTrue(connection_Request0.followRedirects());
      assertFalse(connection_Request0.ignoreContentType());
      assertEquals(1048576, connection_Request0.maxBodySize());
      assertEquals("UTF-8", connection_Request0.postDataCharset());
      assertEquals(30000, connection_Request0.timeout());
      assertFalse(connection_Request0.ignoreHttpErrors());
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
      httpConnection_Request0.requestBody();
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertTrue(httpConnection_Request0.followRedirects());
      assertEquals(1048576, httpConnection_Request0.maxBodySize());
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertEquals(30000, httpConnection_Request0.timeout());
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
      Proxy proxy0 = Proxy.NO_PROXY;
      HttpConnection.Request httpConnection_Request1 = httpConnection_Request0.proxy(proxy0);
      assertEquals(30000, httpConnection_Request1.timeout());
      assertFalse(httpConnection_Request1.ignoreHttpErrors());
      assertEquals(1048576, httpConnection_Request1.maxBodySize());
      assertFalse(httpConnection_Request1.ignoreContentType());
      assertEquals("UTF-8", httpConnection_Request1.postDataCharset());
      assertTrue(httpConnection_Request1.followRedirects());
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
      HttpConnection.Request httpConnection_Request1 = httpConnection_Request0.proxy("org.jsoup.select.evaluator$allelements", 160);
      assertEquals(30000, httpConnection_Request1.timeout());
      assertEquals(1048576, httpConnection_Request1.maxBodySize());
      assertFalse(httpConnection_Request1.ignoreContentType());
      assertEquals("UTF-8", httpConnection_Request1.postDataCharset());
      assertTrue(httpConnection_Request1.followRedirects());
      assertFalse(httpConnection_Request1.ignoreHttpErrors());
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
      httpConnection_Request0.proxy();
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertTrue(httpConnection_Request0.followRedirects());
      assertEquals(1048576, httpConnection_Request0.maxBodySize());
      assertEquals(30000, httpConnection_Request0.timeout());
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
      // Undeclared exception!
//      try { 
        httpConnection_Request0.postDataCharset("");
//        fail("Expecting exception: IllegalCharsetNameException");
      
//      } catch(IllegalCharsetNameException e) {
//         //
//         // 
//         //
//         verifyException("java.nio.charset.Charset", e);
//      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
      String string0 = httpConnection_Request0.postDataCharset();
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertEquals("UTF-8", string0);
      assertEquals(1048576, httpConnection_Request0.maxBodySize());
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertTrue(httpConnection_Request0.followRedirects());
      assertEquals(30000, httpConnection_Request0.timeout());
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
      Parser parser0 = Parser.xmlParser();
      HttpConnection.Request httpConnection_Request1 = httpConnection_Request0.parser(parser0);
      assertEquals(30000, httpConnection_Request1.timeout());
      assertEquals(1048576, httpConnection_Request1.maxBodySize());
      assertEquals("UTF-8", httpConnection_Request1.postDataCharset());
      assertFalse(httpConnection_Request1.ignoreContentType());
      assertFalse(httpConnection_Request1.ignoreHttpErrors());
      assertTrue(httpConnection_Request1.followRedirects());
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
      httpConnection_Request0.parser();
      assertEquals(30000, httpConnection_Request0.timeout());
      assertTrue(httpConnection_Request0.followRedirects());
      assertEquals(1048576, httpConnection_Request0.maxBodySize());
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
      httpConnection_Request0.maxBodySize(120);
      assertEquals(120, httpConnection_Request0.maxBodySize());
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
      int int0 = httpConnection_Request0.maxBodySize();
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertEquals(30000, httpConnection_Request0.timeout());
      assertTrue(httpConnection_Request0.followRedirects());
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertEquals(1048576, int0);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
      boolean boolean0 = httpConnection_Request0.ignoreHttpErrors();
      assertTrue(httpConnection_Request0.followRedirects());
      assertEquals(1048576, httpConnection_Request0.maxBodySize());
      assertFalse(boolean0);
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertEquals(30000, httpConnection_Request0.timeout());
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
      Connection.Request connection_Request0 = httpConnection_Request0.ignoreContentType(false);
      assertEquals(30000, connection_Request0.timeout());
      assertFalse(connection_Request0.ignoreHttpErrors());
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertTrue(connection_Request0.followRedirects());
      assertEquals("UTF-8", connection_Request0.postDataCharset());
      assertEquals(1048576, connection_Request0.maxBodySize());
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
      assertTrue(httpConnection_Request0.followRedirects());
      
      httpConnection_Request0.followRedirects(false);
      assertFalse(httpConnection_Request0.followRedirects());
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
      HttpConnection.KeyVal httpConnection_KeyVal0 = HttpConnection.KeyVal.create("0  Ti+,Y@", "3_y/l*;yN(");
      HttpConnection.Request httpConnection_Request1 = httpConnection_Request0.data((Connection.KeyVal) httpConnection_KeyVal0);
      assertTrue(httpConnection_Request1.followRedirects());
      assertEquals(30000, httpConnection_Request1.timeout());
      assertEquals(1048576, httpConnection_Request1.maxBodySize());
      assertEquals("UTF-8", httpConnection_Request1.postDataCharset());
      assertFalse(httpConnection_Request1.ignoreContentType());
      assertEquals("3_y/l*;yN(", httpConnection_KeyVal0.value());
      assertFalse(httpConnection_Request1.ignoreHttpErrors());
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      HttpConnection.KeyVal httpConnection_KeyVal0 = HttpConnection.KeyVal.create("multipart/form-data", "");
      httpConnection_KeyVal0.hasInputStream();
      assertEquals("", httpConnection_KeyVal0.value());
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      EvoSuiteURL evoSuiteURL0 = new EvoSuiteURL("http://www.someFakeButWellFormedURL.org/fooExample?Content-Type=Content-Type");
      NetworkHandling.createRemoteTextFile(evoSuiteURL0, "6)I`xk");
      Connection connection0 = HttpConnection.connect(uRL0);
      connection0.data("Content-Type", "Content-Type");
      Connection.Request connection_Request0 = connection0.request();
      HttpConnection.Response httpConnection_Response0 = HttpConnection.Response.execute(connection_Request0);
      HttpConnection.Response.execute(connection_Request0, httpConnection_Response0);
      // Undeclared exception!
//      try { 
        httpConnection_Response0.body();
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // java.io.IOException: Stream closed
//         //
//         verifyException("org.jsoup.helper.HttpConnection$Response", e);
//      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      EvoSuiteURL evoSuiteURL0 = new EvoSuiteURL("http://www.someFakeButWellFormedURL.org/fooExample?Content-Type=Content-Type");
      NetworkHandling.createRemoteTextFile(evoSuiteURL0, "6)f`jkC");
      Connection connection0 = HttpConnection.connect(uRL0);
      Connection connection1 = connection0.data("Content-Type", "Content-Type");
      Connection.Request connection_Request0 = connection1.request();
      HttpConnection.Response httpConnection_Response0 = HttpConnection.Response.execute(connection_Request0);
      httpConnection_Response0.bodyStream();
      assertFalse(connection_Request0.ignoreHttpErrors());
      assertEquals(1048576, connection_Request0.maxBodySize());
      assertEquals(30000, connection_Request0.timeout());
      assertTrue(connection_Request0.followRedirects());
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      EvoSuiteURL evoSuiteURL0 = new EvoSuiteURL("http://www.someFakeButWellFormedURL.org/fooExample?Content-Type=Content-Type");
      NetworkHandling.createRemoteTextFile(evoSuiteURL0, "6)I`xkC");
      Connection connection0 = HttpConnection.connect(uRL0);
      connection0.data("Content-Type", "Content-Type");
      Connection.Request connection_Request0 = connection0.request();
      assertEquals(1048576, connection_Request0.maxBodySize());
      
      HttpConnection.Response httpConnection_Response0 = HttpConnection.Response.execute(connection_Request0);
      httpConnection_Response0.bodyAsBytes();
      assertFalse(connection_Request0.ignoreHttpErrors());
      assertEquals(30000, connection_Request0.timeout());
      assertTrue(connection_Request0.followRedirects());
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      hashMap0.put("Content-Encoding", "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_11_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/53.0.2785.143 Safari/537.36");
      Connection connection0 = httpConnection0.data((Map<String, String>) hashMap0);
      assertSame(httpConnection0, connection0);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      Connection connection0 = HttpConnection.connect(uRL0);
      Connection connection1 = connection0.url(uRL0);
      assertSame(connection1, connection0);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      Connection connection0 = httpConnection0.url("http:/");
      assertSame(httpConnection0, connection0);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      httpConnection0.response((Connection.Response) null);
      Connection.Response connection_Response0 = httpConnection0.response();
      assertNull(connection_Response0);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      EvoSuiteURL evoSuiteURL0 = new EvoSuiteURL("http://www.someFakeButWellFormedURL.org/fooExample?Content-Type=Content-Type");
      NetworkHandling.createRemoteTextFile(evoSuiteURL0, "6)I`xkC");
      Connection connection0 = HttpConnection.connect(uRL0);
      Connection connection1 = connection0.data("Content-Type", "Content-Type");
      connection1.get();
      Connection.Response connection_Response0 = connection1.response();
      assertNull(connection_Response0.contentType());
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      httpConnection0.request((Connection.Request) null);
      Connection.Request connection_Request0 = httpConnection0.request();
      assertNull(connection_Request0);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      Connection connection0 = HttpConnection.connect(uRL0);
      connection0.ignoreContentType(true);
      Connection.Request connection_Request0 = connection0.request();
      assertTrue(connection_Request0.ignoreContentType());
      assertTrue(connection_Request0.followRedirects());
      assertEquals(1048576, connection_Request0.maxBodySize());
      assertEquals("UTF-8", connection_Request0.postDataCharset());
      assertEquals(30000, connection_Request0.timeout());
      assertFalse(connection_Request0.ignoreHttpErrors());
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      EvoSuiteURL evoSuiteURL0 = new EvoSuiteURL("http://www.someFakeButWellFormedURL.org/fooExample?Content-Type=Content-Type");
      NetworkHandling.createRemoteTextFile(evoSuiteURL0, ")f`jkC");
      Connection connection0 = HttpConnection.connect(uRL0);
      Connection connection1 = connection0.data("Content-Type", "Content-Type");
      Connection.Response connection_Response0 = connection1.execute();
      assertEquals("OK", connection_Response0.statusMessage());
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      URL uRL0 = HttpConnection.encodeUrl((URL) null);
      assertNull(uRL0);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL0 = MockURL.URL("application/x-www-form-urlencoded", "mozilla/5.0 (macintosh; intel mac os x 10_11_6) applewebkit/537.36 (khtml, like gecko) chrome/53.0.2785.143 safari/537.36", 128, "org.jsoup.select.Evaluator$AttributeWithValueContaining", uRLStreamHandler0);
      URL uRL1 = HttpConnection.encodeUrl(uRL0);
      assertNull(uRL1.getQuery());
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(pipedInputStream0);
      httpConnection0.data("uwpK6g", "http:/", (InputStream) pushbackInputStream0);
      Connection.KeyVal connection_KeyVal0 = httpConnection0.data("uwpK6g");
      assertEquals("http:/", connection_KeyVal0.value());
      assertNotNull(connection_KeyVal0);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Connection connection0 = HttpConnection.connect("http:/");
      assertNotNull(connection0);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      Connection connection0 = httpConnection0.request((Connection.Request) null);
      // Undeclared exception!
//      try { 
        connection0.userAgent("Content-Encoding");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.jsoup.helper.HttpConnection", e);
//      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      // Undeclared exception!
//      try { 
        httpConnection0.userAgent((String) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // User agent must not be null
//         //
//         verifyException("org.jsoup.helper.Validate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      httpConnection0.request((Connection.Request) null);
      URL uRL0 = MockURL.getFileExample();
      // Undeclared exception!
//      try { 
        httpConnection0.url(uRL0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.jsoup.helper.HttpConnection", e);
//      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      Connection connection0 = HttpConnection.connect(uRL0);
      Connection connection1 = connection0.request((Connection.Request) null);
      // Undeclared exception!
//      try { 
        connection1.timeout(30000);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.jsoup.helper.HttpConnection", e);
//      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      httpConnection0.request((Connection.Request) null);
      // Undeclared exception!
//      try { 
        httpConnection0.sslSocketFactory((SSLSocketFactory) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.jsoup.helper.HttpConnection", e);
//      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      httpConnection0.request((Connection.Request) null);
      // Undeclared exception!
//      try { 
        httpConnection0.requestBody("Content-Encoding");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.jsoup.helper.HttpConnection", e);
//      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      httpConnection0.request((Connection.Request) null);
      // Undeclared exception!
//      try { 
        httpConnection0.referrer("Content-Type");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.jsoup.helper.HttpConnection", e);
//      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      // Undeclared exception!
//      try { 
        httpConnection0.referrer((String) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Referrer must not be null
//         //
//         verifyException("org.jsoup.helper.Validate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      httpConnection0.request((Connection.Request) null);
      Proxy.Type proxy_Type0 = Proxy.Type.SOCKS;
      InetAddress inetAddress0 = MockInetAddress.getLoopbackAddress();
      MockInetSocketAddress mockInetSocketAddress0 = new MockInetSocketAddress(inetAddress0, 65533);
      Proxy proxy0 = new Proxy(proxy_Type0, mockInetSocketAddress0);
      // Undeclared exception!
//      try { 
        httpConnection0.proxy(proxy0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.jsoup.helper.HttpConnection", e);
//      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      // Undeclared exception!
//      try { 
        httpConnection0.proxy((String) null, 192);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // hostname can't be null
//         //
//         verifyException("java.net.InetSocketAddress", e);
//      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      // Undeclared exception!
//      try { 
        httpConnection0.postDataCharset("multipart/form-data");
//        fail("Expecting exception: IllegalCharsetNameException");
      
//      } catch(IllegalCharsetNameException e) {
//         //
//         // multipart/form-data
//         //
//         verifyException("java.nio.charset.Charset", e);
//      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      Connection connection0 = HttpConnection.connect(uRL0);
      Connection connection1 = connection0.request((Connection.Request) null);
      // Undeclared exception!
//      try { 
        connection1.postDataCharset("application/x-www-form-urlencoded");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.jsoup.helper.HttpConnection", e);
//      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      // Undeclared exception!
//      try { 
        httpConnection0.postDataCharset((String) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Charset must not be null
//         //
//         verifyException("org.jsoup.helper.Validate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
      Connection connection0 = HttpConnection.connect(uRL0);
//      try { 
        connection0.post();
//        fail("Expecting exception: MalformedURLException");
      
//      } catch(MalformedURLException e) {
//         //
//         // Only http & https protocols supported
//         //
//         verifyException("org.jsoup.helper.HttpConnection$Response", e);
//      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      httpConnection0.request((Connection.Request) null);
      // Undeclared exception!
//      try { 
        httpConnection0.post();
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.jsoup.helper.HttpConnection", e);
//      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      // Undeclared exception!
//      try { 
        httpConnection0.post();
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // URL must be specified to connect
//         //
//         verifyException("org.jsoup.helper.Validate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      httpConnection0.request((Connection.Request) null);
      Connection.Method connection_Method0 = Connection.Method.TRACE;
      // Undeclared exception!
//      try { 
        httpConnection0.method(connection_Method0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.jsoup.helper.HttpConnection", e);
//      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      httpConnection0.request((Connection.Request) null);
      // Undeclared exception!
//      try { 
        httpConnection0.maxBodySize(191);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.jsoup.helper.HttpConnection", e);
//      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      httpConnection0.request((Connection.Request) null);
      // Undeclared exception!
//      try { 
        httpConnection0.ignoreHttpErrors(false);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.jsoup.helper.HttpConnection", e);
//      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      httpConnection0.request((Connection.Request) null);
      // Undeclared exception!
//      try { 
        httpConnection0.ignoreContentType(true);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.jsoup.helper.HttpConnection", e);
//      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      // Undeclared exception!
//      try { 
        httpConnection0.headers((Map<String, String>) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Header map must not be null
//         //
//         verifyException("org.jsoup.helper.Validate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      httpConnection0.request((Connection.Request) null);
      // Undeclared exception!
//      try { 
        httpConnection0.header("Content-Type", "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_11_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/53.0.2785.143 Safari/537.36");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.jsoup.helper.HttpConnection", e);
//      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      // Undeclared exception!
//      try { 
        httpConnection0.header((String) null, (String) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Header name must not be empty
//         //
//         verifyException("org.jsoup.helper.Validate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
      Connection connection0 = HttpConnection.connect(uRL0);
//      try { 
        connection0.get();
//        fail("Expecting exception: MalformedURLException");
      
//      } catch(MalformedURLException e) {
//         //
//         // Only http & https protocols supported
//         //
//         verifyException("org.jsoup.helper.HttpConnection$Response", e);
//      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      httpConnection0.request((Connection.Request) null);
      // Undeclared exception!
//      try { 
        httpConnection0.get();
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.jsoup.helper.HttpConnection", e);
//      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      Connection connection0 = HttpConnection.connect(uRL0);
      Proxy proxy0 = Proxy.NO_PROXY;
      connection0.proxy(proxy0);
//      try { 
        connection0.get();
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // java.lang.UnsupportedOperationException: Method not implemented.
//         //
//         verifyException("org.evosuite.runtime.mock.java.net.MockURL", e);
//      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      httpConnection0.request((Connection.Request) null);
      // Undeclared exception!
//      try { 
        httpConnection0.followRedirects(true);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.jsoup.helper.HttpConnection", e);
//      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      Connection connection0 = HttpConnection.connect(uRL0);
      Connection.Method connection_Method0 = Connection.Method.PATCH;
      connection0.method(connection_Method0);
//      try { 
        connection0.execute();
//        fail("Expecting exception: ProtocolException");
      
//      } catch(ProtocolException e) {
//         //
//         // Invalid HTTP method: PATCH
//         //
//         verifyException("org.evosuite.runtime.mock.java.net.EvoHttpURLConnection", e);
//      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      // Undeclared exception!
//      try { 
        httpConnection0.execute();
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // URL must be specified to connect
//         //
//         verifyException("org.jsoup.helper.Validate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      Connection connection0 = HttpConnection.connect(uRL0);
      connection0.proxy("xd2'@Cm;?oi", 798);
//      try { 
        connection0.execute();
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // java.lang.UnsupportedOperationException: Method not implemented.
//         //
//         verifyException("org.evosuite.runtime.mock.java.net.MockURL", e);
//      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      httpConnection0.request((Connection.Request) null);
      String[] stringArray0 = new String[8];
      stringArray0[0] = "Content-Type";
      stringArray0[1] = "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_11_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/53.0.2785.143 Safari/537.36";
      // Undeclared exception!
//      try { 
        httpConnection0.data(stringArray0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.jsoup.helper.HttpConnection", e);
//      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      Connection connection0 = HttpConnection.connect(uRL0);
      Connection connection1 = connection0.data("Content-Type", "Content-Type");
      Connection.Request connection_Request0 = connection0.request();
      Collection<Connection.KeyVal> collection0 = connection_Request0.data();
      // Undeclared exception!
//      try { 
        connection1.data(collection0);
//        fail("Expecting exception: ConcurrentModificationException");
      
//      } catch(ConcurrentModificationException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.util.ArrayList$Itr", e);
//      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      Connection connection0 = HttpConnection.connect(uRL0);
      Connection connection1 = connection0.request((Connection.Request) null);
      // Undeclared exception!
//      try { 
        connection1.data("Mozilla/5.0 (Macintosh; Intel Mac OS X 10_11_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/53.0.2785.143 Safari/537.36", "set-cookie", (InputStream) null, "J,PIm[!vAp72LGF");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.jsoup.helper.HttpConnection", e);
//      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      // Undeclared exception!
//      try { 
        httpConnection0.data(">&t[=w/=]z#", (String) null, (InputStream) null, (String) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Data value must not be null
//         //
//         verifyException("org.jsoup.helper.Validate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      Connection connection0 = HttpConnection.connect(uRL0);
      Connection connection1 = connection0.request((Connection.Request) null);
      // Undeclared exception!
//      try { 
        connection1.data("Content-Type", "*US3zqY}]c", (InputStream) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.jsoup.helper.HttpConnection", e);
//      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      httpConnection0.request((Connection.Request) null);
      // Undeclared exception!
//      try { 
        httpConnection0.data("l2!=k", "/v/bYC");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.jsoup.helper.HttpConnection", e);
//      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      // Undeclared exception!
//      try { 
        httpConnection0.data((String) null, (String) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Data key must not be empty
//         //
//         verifyException("org.jsoup.helper.Validate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      httpConnection0.request((Connection.Request) null);
      // Undeclared exception!
//      try { 
        httpConnection0.data("/Gy3F");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.jsoup.helper.HttpConnection", e);
//      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      // Undeclared exception!
//      try { 
        httpConnection0.data((String) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Data key must not be empty
//         //
//         verifyException("org.jsoup.helper.Validate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      // Undeclared exception!
//      try { 
        httpConnection0.cookies((Map<String, String>) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Cookie map must not be null
//         //
//         verifyException("org.jsoup.helper.Validate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      Connection connection0 = HttpConnection.connect(uRL0);
      Connection connection1 = connection0.request((Connection.Request) null);
      // Undeclared exception!
//      try { 
        connection1.cookie("multipart/form-data", "multipart/form-data");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.jsoup.helper.HttpConnection", e);
//      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      // Undeclared exception!
//      try { 
        httpConnection0.cookie((String) null, (String) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Cookie name must not be empty
//         //
//         verifyException("org.jsoup.helper.Validate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      // Undeclared exception!
//      try { 
        HttpConnection.connect((URL) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // URL must not be null
//         //
//         verifyException("org.jsoup.helper.Validate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      EvoSuiteURL evoSuiteURL0 = new EvoSuiteURL("http://www.someFakeButWellFormedURL.org/fooExample?Content-Type=Content-Type");
      NetworkHandling.createRemoteTextFile(evoSuiteURL0, "6)I`xkC");
      Connection connection0 = HttpConnection.connect(uRL0);
      connection0.data("Content-Type", "Content-Type");
      Connection.Request connection_Request0 = connection0.request();
      HttpConnection.Response httpConnection_Response0 = HttpConnection.Response.execute(connection_Request0);
      connection0.data("6)I`xkC", "6)I`xkC", (InputStream) null, "Content-Type");
//      try { 
        HttpConnection.Response.execute(connection_Request0, httpConnection_Response0);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // HTTP error fetching URL
//         //
//         verifyException("org.jsoup.helper.HttpConnection$Response", e);
//      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(pipedInputStream0);
      HttpConnection.KeyVal httpConnection_KeyVal0 = HttpConnection.KeyVal.create("\"", "org.jsoup.nodes.NodeUtils", (InputStream) pushbackInputStream0);
      assertEquals("\"", httpConnection_KeyVal0.key());
      
      httpConnection_KeyVal0.key("Too many redirects occurred trying to load URL %s");
      assertEquals("org.jsoup.nodes.NodeUtils", httpConnection_KeyVal0.value());
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      HttpConnection.Response httpConnection_Response0 = new HttpConnection.Response();
      HttpConnection.Response httpConnection_Response1 = (HttpConnection.Response)httpConnection_Response0.header("font", "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_11_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/53.0.2785.143 Safari/537.36");
      assertNull(httpConnection_Response1.contentType());
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      // Undeclared exception!
//      try { 
        httpConnection0.url("application/x-www-form-urlencoded");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Malformed URL: application/x-www-form-urlencoded
//         //
//         verifyException("org.jsoup.helper.HttpConnection", e);
//      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      // Undeclared exception!
//      try { 
        httpConnection0.url((URL) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // URL must not be null
//         //
//         verifyException("org.jsoup.helper.Validate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      HttpConnection.KeyVal httpConnection_KeyVal0 = HttpConnection.KeyVal.create("0  Ti+,Y@", "3_y/l*;yN(");
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream((InputStream) null);
      HttpConnection.KeyVal httpConnection_KeyVal1 = httpConnection_KeyVal0.inputStream((InputStream) bufferedInputStream0);
      assertEquals("0  Ti+,Y@", httpConnection_KeyVal1.key());
      assertEquals("3_y/l*;yN(", httpConnection_KeyVal1.value());
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(pipedInputStream0);
      HttpConnection.KeyVal httpConnection_KeyVal0 = HttpConnection.KeyVal.create("\"", "org.jsoup.nodes.NodeUtils", (InputStream) pushbackInputStream0);
      assertEquals("org.jsoup.nodes.NodeUtils", httpConnection_KeyVal0.value());
      
      httpConnection_KeyVal0.value("raO*");
      assertEquals("\"", httpConnection_KeyVal0.key());
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("Content-Encoding/multipart/form-data");
      byte[] byteArray0 = new byte[2];
      FileSystemHandling.appendDataToFile(evoSuiteFile0, byteArray0);
      MockFile mockFile0 = new MockFile("Content-Encoding", "multipart/form-data");
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(mockFile0);
      HttpConnection.KeyVal httpConnection_KeyVal0 = HttpConnection.KeyVal.create("multipart/form-data", "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_11_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/53.0.2785.143 Safari/537.36", (InputStream) mockFileInputStream0);
      String string0 = httpConnection_KeyVal0.key();
      assertEquals("multipart/form-data", string0);
      assertEquals("Mozilla/5.0 (Macintosh; Intel Mac OS X 10_11_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/53.0.2785.143 Safari/537.36", httpConnection_KeyVal0.value());
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL0 = MockURL.URL("Content-Type", "xNhED9t6U$1K7A5f`}", 0, "Data key value pairs must not be null", uRLStreamHandler0);
      HttpConnection.Request httpConnection_Request1 = (HttpConnection.Request)httpConnection_Request0.url(uRL0);
      assertFalse(httpConnection_Request1.ignoreContentType());
      assertEquals("UTF-8", httpConnection_Request1.postDataCharset());
      assertEquals(30000, httpConnection_Request1.timeout());
      assertEquals(1048576, httpConnection_Request1.maxBodySize());
      assertTrue(httpConnection_Request1.followRedirects());
      assertFalse(httpConnection_Request1.ignoreHttpErrors());
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      HttpConnection.KeyVal httpConnection_KeyVal0 = HttpConnection.KeyVal.create(":gt(%d)", " ");
      String string0 = httpConnection_KeyVal0.value();
      assertEquals(":gt(%d)", httpConnection_KeyVal0.key());
      assertEquals(" ", string0);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      HttpConnection.Response httpConnection_Response0 = new HttpConnection.Response();
      String string0 = httpConnection_Response0.contentType();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      HttpConnection.KeyVal httpConnection_KeyVal0 = HttpConnection.KeyVal.create(":gt(%d)", " ");
      Connection.KeyVal connection_KeyVal0 = httpConnection_KeyVal0.contentType(":gt(%d)");
      assertEquals(":gt(%d)", connection_KeyVal0.key());
      assertEquals(" ", connection_KeyVal0.value());
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      EvoSuiteURL evoSuiteURL0 = new EvoSuiteURL("http://www.someFakeButWellFormedURL.org/fooExample?Content-Type=Content-Type");
      NetworkHandling.createRemoteTextFile(evoSuiteURL0, "6g)I`xkC");
      Connection connection0 = HttpConnection.connect(uRL0);
      Connection connection1 = connection0.data("Content-Type", "Content-Type");
      Connection.Request connection_Request0 = connection0.request();
      HttpConnection.Response httpConnection_Response0 = new HttpConnection.Response();
      HttpConnection.Response.execute(connection_Request0, httpConnection_Response0);
      connection1.data("qDF2E'K58#6]D||", "2npLVDH>");
//      try { 
        connection0.get();
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // HTTP error fetching URL
//         //
//         verifyException("org.jsoup.helper.HttpConnection$Response", e);
//      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      Connection connection0 = HttpConnection.connect(uRL0);
      connection0.cookie("u/AgW8LhFu", "u/AgW8LhFu");
      connection0.cookie("application/x-www-form-urlencoded", "Content-Enc5oding");
//      try { 
        connection0.post();
//        fail("Expecting exception: UnknownServiceException");
      
//      } catch(UnknownServiceException e) {
//         //
//         // protocol doesn't support output
//         //
//         verifyException("org.evosuite.runtime.mock.java.net.EvoHttpURLConnection", e);
//      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      Connection connection0 = HttpConnection.connect(uRL0);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      DataInputStream dataInputStream0 = new DataInputStream(pipedInputStream0);
      connection0.data("Content-Encoding", "Content-Encoding", (InputStream) dataInputStream0);
//      try { 
        connection0.post();
//        fail("Expecting exception: UnknownServiceException");
      
//      } catch(UnknownServiceException e) {
//         //
//         // protocol doesn't support output
//         //
//         verifyException("org.evosuite.runtime.mock.java.net.EvoHttpURLConnection", e);
//      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      HttpConnection.Response httpConnection_Response0 = new HttpConnection.Response();
      HttpConnection.Response httpConnection_Response1 = new HttpConnection.Response();
      httpConnection_Response1.addHeader("=kM} ", "=kM} ");
      Map<String, List<String>> map0 = httpConnection_Response1.headers;
      httpConnection_Response0.processResponseHeaders(map0);
      assertEquals(0, httpConnection_Response0.statusCode());
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      HttpConnection.Response httpConnection_Response0 = new HttpConnection.Response();
      httpConnection_Response0.addHeader("set-cookie", (String) null);
      Map<String, List<String>> map0 = httpConnection_Response0.headers;
      // Undeclared exception!
//      try { 
        httpConnection_Response0.processResponseHeaders(map0);
//        fail("Expecting exception: ConcurrentModificationException");
      
//      } catch(ConcurrentModificationException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.util.ArrayList$Itr", e);
//      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      HttpConnection.Response httpConnection_Response0 = new HttpConnection.Response();
      httpConnection_Response0.addHeader("set-cookie", ".X\"|=^3{Cid4");
      Map<String, List<String>> map0 = httpConnection_Response0.headers;
      // Undeclared exception!
//      try { 
        httpConnection_Response0.processResponseHeaders(map0);
//        fail("Expecting exception: ConcurrentModificationException");
      
//      } catch(ConcurrentModificationException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.util.ArrayList$Itr", e);
//      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      HttpConnection.Response httpConnection_Response0 = new HttpConnection.Response();
      HashMap<String, List<String>> hashMap0 = new HashMap<String, List<String>>();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      hashMap0.put((String) null, linkedList0);
      httpConnection_Response0.processResponseHeaders(hashMap0);
      assertEquals(1, hashMap0.size());
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      Connection connection0 = HttpConnection.connect(uRL0);
      Proxy proxy0 = Proxy.NO_PROXY;
      connection0.proxy(proxy0);
//      try { 
        connection0.post();
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // java.lang.UnsupportedOperationException: Method not implemented.
//         //
//         verifyException("org.evosuite.runtime.mock.java.net.MockURL", e);
//      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      EvoSuiteURL evoSuiteURL0 = new EvoSuiteURL("http://www.someFakeButWellFormedURL.org/fooExample?Content-Type=Content-Type");
      NetworkHandling.createRemoteTextFile(evoSuiteURL0, "6)I`xkC");
      Connection connection0 = HttpConnection.connect(uRL0);
      connection0.data("Content-Type", "Content-Type");
      Connection.Request connection_Request0 = connection0.request();
      HttpConnection.Response httpConnection_Response0 = new HttpConnection.Response();
      HttpConnection.Response httpConnection_Response1 = HttpConnection.Response.execute(connection_Request0, httpConnection_Response0);
      String string0 = httpConnection_Response1.body();
      assertEquals(30000, connection_Request0.timeout());
      assertFalse(connection_Request0.ignoreHttpErrors());
      assertEquals(1048576, connection_Request0.maxBodySize());
      assertEquals("6)I`xkC", string0);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      EvoSuiteURL evoSuiteURL0 = new EvoSuiteURL("http://www.someFakeButWellFormedURL.org/fooExample?Content-Type=Content-Type");
      NetworkHandling.createRemoteTextFile(evoSuiteURL0, "6)I`xkC");
      Connection connection0 = HttpConnection.connect(uRL0);
      connection0.data("Content-Type", "Content-Type");
      Connection.Request connection_Request0 = connection0.request();
      HttpConnection.Response httpConnection_Response0 = new HttpConnection.Response();
      HttpConnection.Response httpConnection_Response1 = HttpConnection.Response.execute(connection_Request0, httpConnection_Response0);
      HttpConnection.Response httpConnection_Response2 = httpConnection_Response1.charset("|i*2d,=eZxa!^=mn");
      // Undeclared exception!
//      try { 
        httpConnection_Response2.body();
//        fail("Expecting exception: IllegalCharsetNameException");
      
//      } catch(IllegalCharsetNameException e) {
//         //
//         // |i*2d,=eZxa!^=mn
//         //
//         verifyException("java.nio.charset.Charset", e);
//      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      EvoSuiteURL evoSuiteURL0 = new EvoSuiteURL("http://www.someFakeButWellFormedURL.org/fooExample?Content-Type=Content-Type");
      NetworkHandling.createRemoteTextFile(evoSuiteURL0, "6)f`jkC");
      Connection connection0 = HttpConnection.connect(uRL0);
      connection0.data("Content-Type", "Content-Type");
      Connection.Request connection_Request0 = connection0.request();
      HttpConnection.Response httpConnection_Response0 = new HttpConnection.Response();
      HttpConnection.Response httpConnection_Response1 = HttpConnection.Response.execute(connection_Request0, httpConnection_Response0);
      httpConnection_Response1.bufferUp();
      httpConnection_Response1.bufferUp();
      assertTrue(connection_Request0.followRedirects());
      assertEquals(1048576, connection_Request0.maxBodySize());
      assertFalse(connection_Request0.ignoreContentType());
      assertEquals("UTF-8", connection_Request0.postDataCharset());
      assertEquals(30000, connection_Request0.timeout());
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      EvoSuiteURL evoSuiteURL0 = new EvoSuiteURL("http://www.someFakeButWellFormedURL.org/fooExample?Content-Type=Content-Type");
      NetworkHandling.createRemoteTextFile(evoSuiteURL0, "6)I`xkC");
      Connection connection0 = HttpConnection.connect(uRL0);
      connection0.data("Content-Type", "Content-Type");
      Connection.Request connection_Request0 = connection0.request();
      HttpConnection.Response httpConnection_Response0 = new HttpConnection.Response();
      HttpConnection.Response httpConnection_Response1 = HttpConnection.Response.execute(connection_Request0, httpConnection_Response0);
      Connection.Response connection_Response0 = httpConnection_Response1.bufferUp();
      connection_Response0.parse();
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      EvoSuiteURL evoSuiteURL0 = new EvoSuiteURL("http://www.someFakeButWellFormedURL.org/fooExample?Content-Type=Content-Type");
      NetworkHandling.createRemoteTextFile(evoSuiteURL0, "6)I`xkC");
      Connection connection0 = HttpConnection.connect(uRL0);
      connection0.data("Content-Type", "Content-Type");
      Connection.Request connection_Request0 = connection0.request();
      HttpConnection.Response httpConnection_Response0 = new HttpConnection.Response();
      Connection.Method connection_Method0 = Connection.Method.HEAD;
      connection_Request0.method(connection_Method0);
      HttpConnection.Response.execute(connection_Request0, httpConnection_Response0);
      assertEquals("UTF-8", connection_Request0.postDataCharset());
      assertFalse(connection_Request0.ignoreContentType());
      assertTrue(connection_Request0.followRedirects());
      assertEquals(30000, connection_Request0.timeout());
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      Connection connection0 = HttpConnection.connect(uRL0);
      Connection.Request connection_Request0 = connection0.request();
      connection_Request0.ignoreHttpErrors(true);
      HttpConnection.Response httpConnection_Response0 = new HttpConnection.Response();
//      try { 
        HttpConnection.Response.execute(connection_Request0, httpConnection_Response0);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Could not find: www.someFakeButWellFormedURL.org
//         //
//         verifyException("org.evosuite.runtime.mock.java.net.EvoHttpURLConnection", e);
//      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      Connection connection0 = HttpConnection.connect(uRL0);
      Connection connection1 = connection0.data("Content-Type", "Content-Type");
      connection1.requestBody("application/x-www-form-urlencoded");
//      try { 
        connection0.post();
//        fail("Expecting exception: UnknownServiceException");
      
//      } catch(UnknownServiceException e) {
//         //
//         // protocol doesn't support output
//         //
//         verifyException("org.evosuite.runtime.mock.java.net.EvoHttpURLConnection", e);
//      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      Connection connection0 = HttpConnection.connect(uRL0);
      Connection connection1 = connection0.data("Content-Type", "Content-Type");
//      try { 
        connection1.post();
//        fail("Expecting exception: UnknownServiceException");
      
//      } catch(UnknownServiceException e) {
//         //
//         // protocol doesn't support output
//         //
//         verifyException("org.evosuite.runtime.mock.java.net.EvoHttpURLConnection", e);
//      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      Connection connection0 = HttpConnection.connect(uRL0);
      Connection connection1 = connection0.requestBody("application/x-www-form-urlencoded");
      // Undeclared exception!
//      try { 
        connection1.get();
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Cannot set a request body for HTTP method GET
//         //
//         verifyException("org.jsoup.helper.Validate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
      Connection connection0 = HttpConnection.connect(uRL0);
//      try { 
        connection0.execute();
//        fail("Expecting exception: MalformedURLException");
      
//      } catch(MalformedURLException e) {
//         //
//         // Only http & https protocols supported
//         //
//         verifyException("org.jsoup.helper.HttpConnection$Response", e);
//      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      Connection connection0 = httpConnection0.postDataCharset("default");
      assertSame(httpConnection0, connection0);
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      Connection connection0 = httpConnection0.timeout(120);
      assertSame(httpConnection0, connection0);
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      Connection connection0 = HttpConnection.connect(uRL0);
      Connection.Request connection_Request0 = connection0.request();
      HttpConnection.Response httpConnection_Response0 = new HttpConnection.Response();
      HttpConnection.Response httpConnection_Response1 = (HttpConnection.Response)httpConnection_Response0.cookie("6)I`xkC", "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_11_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/53.0.2785.143 Safari/537.36");
//      try { 
        HttpConnection.Response.execute(connection_Request0, httpConnection_Response1);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // HTTP error fetching URL
//         //
//         verifyException("org.jsoup.helper.HttpConnection$Response", e);
//      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      hashMap0.put("8o3", "z,6/th?,}`;9tk.r");
      Connection connection0 = httpConnection0.cookies(hashMap0);
      assertSame(httpConnection0, connection0);
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      hashMap0.putIfAbsent("+r", "+r");
      HttpConnection httpConnection0 = new HttpConnection();
      Connection connection0 = httpConnection0.headers(hashMap0);
      assertSame(httpConnection0, connection0);
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      httpConnection0.data("Content-Encoding", "Content-Encoding");
      Connection.KeyVal connection_KeyVal0 = httpConnection0.data("Content-Encoding");
      assertEquals("Content-Encoding", connection_KeyVal0.value());
      assertNotNull(connection_KeyVal0);
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      Connection connection0 = httpConnection0.data("application/x-www-form-urlencoded", "application/x-www-form-urlencoded");
      Connection.KeyVal connection_KeyVal0 = connection0.data("Content-Encoding");
      assertNull(connection_KeyVal0);
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      LinkedHashSet<Connection.KeyVal> linkedHashSet0 = new LinkedHashSet<Connection.KeyVal>();
      linkedHashSet0.add((Connection.KeyVal) null);
      // Undeclared exception!
//      try { 
        httpConnection0.data((Collection<Connection.KeyVal>) linkedHashSet0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Key val must not be null
//         //
//         verifyException("org.jsoup.helper.Validate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      LinkedList<Connection.KeyVal> linkedList0 = new LinkedList<Connection.KeyVal>();
      Connection connection0 = httpConnection0.data((Collection<Connection.KeyVal>) linkedList0);
      assertSame(httpConnection0, connection0);
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      String[] stringArray0 = new String[2];
      // Undeclared exception!
//      try { 
        httpConnection0.data(stringArray0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Data key must not be empty
//         //
//         verifyException("org.jsoup.helper.Validate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      String[] stringArray0 = new String[0];
      Connection connection0 = httpConnection0.data(stringArray0);
      assertSame(connection0, httpConnection0);
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      String[] stringArray0 = new String[1];
      // Undeclared exception!
//      try { 
        httpConnection0.data(stringArray0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Must supply an even number of key value pairs
//         //
//         verifyException("org.jsoup.helper.Validate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      hashMap0.put((String) null, "Content-Encoding");
      // Undeclared exception!
//      try { 
        httpConnection0.data((Map<String, String>) hashMap0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Data key must not be empty
//         //
//         verifyException("org.jsoup.helper.Validate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      HttpConnection.KeyVal httpConnection_KeyVal0 = HttpConnection.KeyVal.create(":gt(%d)", " ");
      String string0 = httpConnection_KeyVal0.toString();
      assertEquals(":gt(%d)= ", string0);
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      MockFile mockFile0 = new MockFile("j9vopp5vp5u(V", "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_11_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/53.0.2785.143 Safari/537.36");
      File file0 = MockFile.createTempFile("Content-Type", "j9vopp5vp5u(V", (File) mockFile0);
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(file0);
      HttpConnection.KeyVal httpConnection_KeyVal0 = HttpConnection.KeyVal.create("^+kqb-y|5Y9[9Q", "malformed url: ", (InputStream) mockFileInputStream0);
      httpConnection_KeyVal0.contentType();
      assertEquals("^+kqb-y|5Y9[9Q", httpConnection_KeyVal0.key());
      assertEquals("malformed url: ", httpConnection_KeyVal0.value());
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(pipedInputStream0);
      HttpConnection.KeyVal httpConnection_KeyVal0 = HttpConnection.KeyVal.create("\"", "org.jsoup.nodes.NodeUtils", (InputStream) pushbackInputStream0);
      httpConnection_KeyVal0.inputStream();
      assertEquals("\"", httpConnection_KeyVal0.key());
      assertEquals("org.jsoup.nodes.NodeUtils", httpConnection_KeyVal0.value());
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      HttpConnection.Response httpConnection_Response0 = new HttpConnection.Response();
      int int0 = httpConnection_Response0.statusCode();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      HttpConnection.Response httpConnection_Response0 = new HttpConnection.Response();
      String string0 = httpConnection_Response0.charset();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      Connection.Response connection_Response0 = httpConnection0.response();
      String string0 = connection_Response0.statusMessage();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      Connection connection0 = httpConnection0.referrer("multipart/form-data");
      assertSame(httpConnection0, connection0);
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      Connection connection0 = httpConnection0.header("Content-Encoding", (String) null);
      assertSame(connection0, httpConnection0);
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
      URL uRL1 = HttpConnection.encodeUrl(uRL0);
      assertNotSame(uRL1, uRL0);
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      // Undeclared exception!
//      try { 
        httpConnection0.data("", "", (InputStream) pipedInputStream0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Data key must not be empty
//         //
//         verifyException("org.jsoup.helper.Validate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      // Undeclared exception!
//      try { 
        httpConnection0.timeout((-589));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Timeout milliseconds must be 0 (infinite) or greater
//         //
//         verifyException("org.jsoup.helper.Validate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      // Undeclared exception!
//      try { 
        httpConnection0.postDataCharset("Content-Type");
//        fail("Expecting exception: IllegalCharsetNameException");
      
//      } catch(IllegalCharsetNameException e) {
//         //
//         // Content-Type
//         //
//         verifyException("org.jsoup.helper.HttpConnection$Request", e);
//      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      // Undeclared exception!
//      try { 
        HttpConnection.connect("Content-Type");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Malformed URL: Content-Type
//         //
//         verifyException("org.jsoup.helper.HttpConnection", e);
//      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      Connection connection0 = httpConnection0.userAgent("Mozilla/5.0 (Macintosh; Intel Mac OS X 10_11_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/53.0.2785.143 Safari/537.36");
      assertSame(connection0, httpConnection0);
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      // Undeclared exception!
//      try { 
        httpConnection0.maxBodySize((-2194));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // maxSize must be 0 (unlimited) or larger
//         //
//         verifyException("org.jsoup.helper.Validate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      HttpConnection.Response httpConnection_Response0 = new HttpConnection.Response();
      HttpConnection.Response httpConnection_Response1 = (HttpConnection.Response)httpConnection_Response0.removeCookie("Malformed URL: ");
      assertNull(httpConnection_Response1.contentType());
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      Connection connection0 = HttpConnection.connect(uRL0);
      Connection.Request connection_Request0 = connection0.request();
      boolean boolean0 = connection_Request0.followRedirects();
      assertTrue(boolean0);
      assertEquals(30000, connection_Request0.timeout());
      assertEquals("UTF-8", connection_Request0.postDataCharset());
      assertFalse(connection_Request0.ignoreContentType());
      assertFalse(connection_Request0.ignoreHttpErrors());
      assertEquals(1048576, connection_Request0.maxBodySize());
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      Connection connection0 = HttpConnection.connect(uRL0);
//      try { 
        connection0.execute();
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // HTTP error fetching URL
//         //
//         verifyException("org.jsoup.helper.HttpConnection$Response", e);
//      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      Parser parser0 = Parser.xmlParser();
      Connection connection0 = httpConnection0.parser(parser0);
      assertSame(connection0, httpConnection0);
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
      boolean boolean0 = httpConnection_Request0.ignoreContentType();
      assertEquals(30000, httpConnection_Request0.timeout());
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertFalse(boolean0);
      assertTrue(httpConnection_Request0.followRedirects());
      assertEquals(1048576, httpConnection_Request0.maxBodySize());
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      Connection connection0 = httpConnection0.sslSocketFactory((SSLSocketFactory) null);
      assertSame(httpConnection0, connection0);
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
      int int0 = httpConnection_Request0.timeout();
      assertEquals(1048576, httpConnection_Request0.maxBodySize());
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertTrue(httpConnection_Request0.followRedirects());
      assertEquals(30000, int0);
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      httpConnection0.ignoreHttpErrors(true);
      Connection.Request connection_Request0 = httpConnection0.request();
      assertTrue(connection_Request0.followRedirects());
      assertFalse(connection_Request0.ignoreContentType());
      assertEquals(1048576, connection_Request0.maxBodySize());
      assertEquals("UTF-8", connection_Request0.postDataCharset());
      assertEquals(30000, connection_Request0.timeout());
      assertTrue(connection_Request0.ignoreHttpErrors());
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      httpConnection0.followRedirects(false);
      Connection.Request connection_Request0 = httpConnection0.request();
      assertFalse(connection_Request0.followRedirects());
      assertEquals(30000, connection_Request0.timeout());
      assertEquals("UTF-8", connection_Request0.postDataCharset());
      assertEquals(1048576, connection_Request0.maxBodySize());
      assertFalse(connection_Request0.ignoreContentType());
  }
}
