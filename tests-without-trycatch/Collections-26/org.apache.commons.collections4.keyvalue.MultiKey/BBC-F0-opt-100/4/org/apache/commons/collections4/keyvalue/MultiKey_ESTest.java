/*
 * This file was automatically generated by EvoSuite
 * Wed Oct 13 20:48:01 GMT 2021
 */

package org.apache.commons.collections4.keyvalue;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.lang.reflect.Array;
import org.apache.commons.collections4.keyvalue.MultiKey;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class MultiKey_ESTest extends MultiKey_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Integer[] integerArray0 = new Integer[0];
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integerArray0);
      multiKey0.toString();
      MultiKey<String> multiKey1 = new MultiKey<String>("IIR)\"43iFPgT", "", "Ce@p0xPBp8X", "IIR)\"43iFPgT", "");
      multiKey1.equals("Ce@p0xPBp8X");
      MultiKey<String>[] multiKeyArray0 = (MultiKey<String>[]) Array.newInstance(MultiKey.class, 9);
      multiKeyArray0[0] = multiKey1;
      multiKeyArray0[1] = multiKey1;
      multiKeyArray0[2] = multiKey1;
      multiKeyArray0[3] = multiKey1;
      multiKeyArray0[4] = multiKey1;
      multiKeyArray0[5] = multiKey1;
      multiKeyArray0[6] = multiKey1;
      multiKeyArray0[7] = multiKey1;
      multiKeyArray0[8] = multiKey1;
      MultiKey<MultiKey<String>> multiKey2 = new MultiKey<MultiKey<String>>(multiKeyArray0, false);
      multiKey2.toString();
      multiKey1.toString();
      multiKey1.toString();
      multiKey1.equals(multiKey1);
      int int0 = multiKey1.size();
      assertEquals(5, int0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("@*N]F4$xS%?yk*h", "@*N]F4$xS%?yk*h", "@*N]F4$xS%?yk*h");
      MultiKey<String> multiKey1 = new MultiKey<String>((String) null, "@*N]F4$xS%?yk*h");
      Integer[] integerArray0 = new Integer[1];
      Integer integer0 = new Integer(6);
      integerArray0[0] = integer0;
      MultiKey<Integer> multiKey2 = new MultiKey<Integer>(integerArray0);
      MultiKey<Object> multiKey3 = new MultiKey<Object>(integerArray0);
      boolean boolean0 = multiKey2.equals(multiKey3);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      MultiKey<Object> multiKey0 = new MultiKey<Object>(objectArray0, true);
      multiKey0.toString();
      MultiKey<String>[] multiKeyArray0 = (MultiKey<String>[]) Array.newInstance(MultiKey.class, 0);
      MultiKey<MultiKey<String>> multiKey1 = new MultiKey<MultiKey<String>>(multiKeyArray0);
      int int0 = multiKey1.size();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("@*N]F4$xS%?yk*h", "@*N]F4$xS%?yk*h");
      Object[] objectArray0 = new Object[0];
      MultiKey<Object> multiKey1 = new MultiKey<Object>(objectArray0, false);
      multiKey1.toString();
      multiKey1.toString();
      multiKey1.getKeys();
      Object[] objectArray1 = multiKey1.getKeys();
      assertNotSame(objectArray1, objectArray0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("Z=#aE%\"n;]lvb$s,{A", "Z=#aE%\"n;]lvb$s,{A", "The array of keys must not be null", "The array of keys must not be null", "The array of keys must not be null");
      MultiKey<MultiKey<String>> multiKey1 = new MultiKey<MultiKey<String>>(multiKey0, multiKey0, multiKey0, multiKey0);
      multiKey1.toString();
      multiKey1.getKeys();
      boolean boolean0 = multiKey0.equals("The array of keys must not be null");
      assertFalse(boolean0);
      
      multiKey1.toString();
      multiKey0.toString();
      multiKey0.toString();
      MultiKey<Object> multiKey2 = new MultiKey<Object>(multiKey1, (Object) null, "org.apache.commons.collections4.keyvalue.MultiKey");
      String string0 = multiKey0.toString();
      assertEquals("MultiKey[Z=#aE%\"n;]lvb$s,{A, Z=#aE%\"n;]lvb$s,{A, The array of keys must not be null, The array of keys must not be null, The array of keys must not be null]", string0);
      
      multiKey0.hashCode();
      multiKey2.getKey(2);
      MultiKey<String> multiKey3 = new MultiKey<String>("MultiKey", "org.apache.commons.collections4.keyvalue.MultiKey", "", (String) null, "MultiKey");
      boolean boolean1 = multiKey0.equals(multiKey3);
      assertFalse(boolean1);
      
      multiKey2.getKey(0);
      assertFalse(multiKey0.equals((Object)multiKey3));
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Object[] objectArray0 = new Object[8];
      Object object0 = new Object();
      objectArray0[0] = object0;
      MultiKey<Object> multiKey0 = new MultiKey<Object>(objectArray0);
      multiKey0.getKey(5);
      objectArray0[1] = null;
      Object object1 = new Object();
      objectArray0[2] = object1;
      Object object2 = new Object();
      objectArray0[3] = object2;
      MultiKey<Object> multiKey1 = new MultiKey<Object>(object1, (Object) null, (Object) null);
      // Undeclared exception!
//      try { 
        multiKey1.getKey(5);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 5
//         //
//         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
//      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      boolean boolean0 = true;
      MultiKey<Integer> multiKey0 = null;
//      try {
        multiKey0 = new MultiKey<Integer>((Integer[]) null, true);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // The array of keys must not be null
//         //
//         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
//      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      int int0 = 1;
      Integer integer0 = new Integer(1);
      MultiKey<Object> multiKey0 = new MultiKey<Object>(integer0, "");
      multiKey0.toString();
      MultiKey<String> multiKey1 = new MultiKey<String>("", "", "", "");
      multiKey1.toString();
      multiKey1.hashCode();
      multiKey1.toString();
      MultiKey<MultiKey<String>> multiKey2 = new MultiKey<MultiKey<String>>(multiKey1, multiKey1, multiKey1, multiKey1);
      multiKey2.toString();
      multiKey2.toString();
      multiKey2.toString();
      MultiKey<Integer> multiKey3 = null;
//      try {
        multiKey3 = new MultiKey<Integer>((Integer[]) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // The array of keys must not be null
//         //
//         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
//      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Integer[] integerArray0 = new Integer[2];
      int int0 = 1;
      Integer integer0 = new Integer(1);
      integerArray0[0] = integer0;
      Integer integer1 = new Integer(1);
      integerArray0[1] = integer1;
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integerArray0, true);
      multiKey0.toString();
      Integer integer2 = new Integer(1);
      MultiKey<Object> multiKey1 = new MultiKey<Object>(integerArray0);
      multiKey1.toString();
      Object object0 = multiKey1.getKey(int0);
      MultiKey<Object> multiKey2 = new MultiKey<Object>(integer2, object0, multiKey1);
      multiKey2.toString();
      multiKey2.size();
      multiKey2.toString();
      MultiKey<String> multiKey3 = new MultiKey<String>("/@I z(3A|y(4@MLJK9", "/@I z(3A|y(4@MLJK9");
      String string0 = multiKey3.toString();
      assertEquals("MultiKey[/@I z(3A|y(4@MLJK9, /@I z(3A|y(4@MLJK9]", string0);
      
      int int1 = multiKey3.hashCode();
      assertFalse(int1 == int0);
      
      multiKey2.getKey(int0);
      boolean boolean0 = multiKey3.equals("MultiKey[1, 1]");
      assertFalse(boolean0);
      
      multiKey1.getKey(0);
      assertFalse(multiKey1.equals((Object)multiKey2));
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("", "");
      multiKey0.toString();
      multiKey0.size();
      MultiKey<Object>[] multiKeyArray0 = (MultiKey<Object>[]) Array.newInstance(MultiKey.class, 8);
      Integer integer0 = new Integer((-1));
      MultiKey<Object> multiKey1 = new MultiKey<Object>("", integer0, "MultiKey[, ]");
      multiKeyArray0[0] = multiKey1;
      MultiKey<Object> multiKey2 = new MultiKey<Object>(multiKey0, multiKey0);
      multiKeyArray0[1] = multiKey2;
      String string0 = "";
      String string1 = "";
      MultiKey<String> multiKey3 = new MultiKey<String>("The array of keys must not be null", "", "", "");
      // Undeclared exception!
//      try { 
        multiKey3.getKey(1316);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 1316
//         //
//         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
//      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("Z=#aE%\"n;]lvb$s,{A", "Z=#aE%\"n;]lvb$s,{A", "The array of keys must not be null", "The array of keys must not be null", "The array of keys must not be null");
      MultiKey<MultiKey<String>> multiKey1 = new MultiKey<MultiKey<String>>(multiKey0, multiKey0, multiKey0, multiKey0);
      multiKey1.toString();
      multiKey1.getKeys();
      multiKey0.equals("The array of keys must not be null");
      multiKey1.toString();
      multiKey0.toString();
      multiKey0.toString();
      MultiKey<Object> multiKey2 = new MultiKey<Object>(multiKey1, (Object) null, "org.apache.commons.collections4.keyvalue.MultiKey");
      multiKey0.toString();
      multiKey2.size();
      String string0 = multiKey0.toString();
      assertEquals("MultiKey[Z=#aE%\"n;]lvb$s,{A, Z=#aE%\"n;]lvb$s,{A, The array of keys must not be null, The array of keys must not be null, The array of keys must not be null]", string0);
      
      boolean boolean0 = multiKey0.equals("");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      String[] stringArray0 = new String[6];
      stringArray0[0] = ",um/>FGYK5d1@}Ng";
      stringArray0[1] = "SXzps`KD|+_`8]Ye";
      stringArray0[2] = "&3Z6h)ToY/0p/1";
      stringArray0[3] = "O$vXyO,K";
      stringArray0[4] = "aM&*8MyB+vLyEi";
      stringArray0[5] = "";
      MultiKey<String> multiKey0 = new MultiKey<String>(stringArray0, false);
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.size();
      MultiKey<Object> multiKey1 = new MultiKey<Object>(stringArray0);
      multiKey1.toString();
      multiKey1.toString();
      multiKey1.getKey(0);
      Integer integer0 = new Integer(0);
      Integer integer1 = new Integer(4);
      MultiKey<Integer> multiKey2 = new MultiKey<Integer>(integer0, integer0, integer1, integer0, (Integer) null);
      // Undeclared exception!
//      try { 
        multiKey2.getKey(947);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 947
//         //
//         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
//      }
  }
}
