/*
 * This file was automatically generated by EvoSuite
 * Wed Oct 13 20:49:37 GMT 2021
 */

package org.apache.commons.collections4.keyvalue;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.lang.reflect.Array;
import org.apache.commons.collections4.keyvalue.MultiKey;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class MultiKey_ESTest extends MultiKey_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Object object0 = new Object();
      MultiKey<Object> multiKey0 = new MultiKey<Object>(object0, object0);
      multiKey0.toString();
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = object0;
      objectArray0[1] = (Object) multiKey0;
      objectArray0[2] = (Object) multiKey0;
      MultiKey<Object> multiKey1 = new MultiKey<Object>(objectArray0);
      Object object1 = multiKey1.getKey(2);
      boolean boolean0 = multiKey0.equals(object1);
      assertTrue(boolean0);
      assertFalse(multiKey1.equals((Object)multiKey0));
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Integer integer0 = new Integer(3);
      int int0 = 18;
      Integer integer1 = new Integer(18);
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integer0, integer1, integer0, integer1, integer0);
      Integer[] integerArray0 = new Integer[6];
      integerArray0[0] = integer1;
      integerArray0[1] = integer1;
      integerArray0[2] = integer1;
      integerArray0[3] = integer0;
      integerArray0[4] = (Integer) int0;
      integerArray0[5] = integer0;
      MultiKey<Integer> multiKey1 = new MultiKey<Integer>(integerArray0);
      MultiKey<Object> multiKey2 = new MultiKey<Object>(integerArray0);
      multiKey1.equals(multiKey2);
      assertFalse(multiKey1.equals((Object)multiKey0));
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      String[] stringArray0 = new String[0];
      MultiKey<String> multiKey0 = new MultiKey<String>(stringArray0);
      multiKey0.toString();
      String[] stringArray1 = multiKey0.getKeys();
      assertEquals(0, stringArray1.length);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      MultiKey<Object> multiKey0 = null;
//      try {
        multiKey0 = new MultiKey<Object>((Object[]) null, true);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // The array of keys must not be null
//         //
//         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
//      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Integer integer0 = new Integer(0);
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integer0, integer0, integer0, integer0);
      MultiKey<String> multiKey1 = new MultiKey<String>("The array of keys must not be null", (String) null, "The array of keys must not be null", (String) null, (String) null);
      multiKey1.hashCode();
      Integer integer1 = new Integer((-1733));
      Object object0 = new Object();
      multiKey1.toString();
      multiKey1.toString();
      MultiKey<Object> multiKey2 = new MultiKey<Object>(multiKey1, integer1, object0, (Object) null);
      multiKey2.toString();
      multiKey0.toString();
      multiKey2.toString();
      multiKey2.toString();
      multiKey2.toString();
      multiKey2.getKeys();
      multiKey1.hashCode();
      boolean boolean0 = multiKey1.equals(multiKey0);
      assertFalse(boolean0);
      
      multiKey1.toString();
      multiKey2.getKeys();
      multiKey1.toString();
      MultiKey<MultiKey<Object>> multiKey3 = new MultiKey<MultiKey<Object>>(multiKey2, multiKey2);
      multiKey3.toString();
      multiKey3.getKeys();
      MultiKey<MultiKey<String>> multiKey4 = new MultiKey<MultiKey<String>>(multiKey1, multiKey1);
      multiKey4.toString();
      multiKey4.hashCode();
      multiKey1.equals((Object) null);
      Object object1 = new Object();
      boolean boolean1 = multiKey0.equals(object1);
      assertFalse(boolean1);
      
      MultiKey<String> multiKey5 = multiKey4.getKey(0);
      multiKey0.toString();
      String string0 = multiKey5.toString();
      assertEquals("MultiKey[The array of keys must not be null, null, The array of keys must not be null, null, null]", string0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = null;
      objectArray0[1] = null;
      objectArray0[2] = null;
      objectArray0[3] = null;
      objectArray0[4] = null;
      objectArray0[5] = null;
      objectArray0[6] = null;
      MultiKey<Object> multiKey0 = new MultiKey<Object>(objectArray0, true);
      multiKey0.getKey(1);
      MultiKey<String> multiKey1 = new MultiKey<String>((String) null, (String) null);
      multiKey1.getKey(0);
      MultiKey<Object> multiKey2 = new MultiKey<Object>((Object) null, (Object) null, multiKey0, multiKey0, (Object) null);
      Integer integer0 = new Integer(0);
      MultiKey<Object> multiKey3 = new MultiKey<Object>((Object) null, multiKey2, integer0, objectArray0[6]);
      assertFalse(multiKey3.equals((Object)multiKey2));
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("", "", "1b)`m/<w;hQV=", "");
      Object[] objectArray0 = new Object[0];
      MultiKey<Object> multiKey1 = new MultiKey<Object>(objectArray0, false);
      multiKey1.size();
      Integer integer0 = new Integer(38);
      Integer integer1 = new Integer(0);
      MultiKey<Integer> multiKey2 = new MultiKey<Integer>(integer0, (Integer) null, integer1, integer0, integer1);
      Integer integer2 = multiKey2.getKey(0);
      assertNotNull(integer2);
      
      boolean boolean0 = multiKey0.equals("");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Object[] objectArray0 = new Object[9];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      MultiKey<String> multiKey0 = new MultiKey<String>("", "");
      multiKey0.getKey(0);
      objectArray0[2] = (Object) "";
      multiKey0.getKey(0);
      objectArray0[3] = (Object) "";
      Object object2 = new Object();
      objectArray0[4] = object2;
      MultiKey<String> multiKey1 = new MultiKey<String>("", "", "", "");
      MultiKey<Object> multiKey2 = new MultiKey<Object>(multiKey1, "", objectArray0[3], (Object) null);
      Object object3 = multiKey2.getKey(0);
      objectArray0[5] = object3;
      Object object4 = new Object();
      objectArray0[6] = object4;
      multiKey2.getKey(1);
      objectArray0[7] = (Object) "";
      multiKey1.getKey(1);
      objectArray0[8] = (Object) "";
      MultiKey<Object> multiKey3 = new MultiKey<Object>(objectArray0);
      int int0 = multiKey3.size();
      assertEquals(9, int0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      String[] stringArray0 = null;
      MultiKey<String> multiKey0 = null;
//      try {
        multiKey0 = new MultiKey<String>((String[]) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // The array of keys must not be null
//         //
//         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
//      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("", "", "", (String) null);
      multiKey0.getKey(0);
      MultiKey<Object> multiKey1 = new MultiKey<Object>(multiKey0, "", "", multiKey0);
      // Undeclared exception!
//      try { 
        multiKey1.getKey((-1));
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // -1
//         //
//         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
//      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Integer integer0 = new Integer((-1763));
      Integer integer1 = new Integer((-1763));
      Integer integer2 = new Integer((-1763));
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integer0, integer0, integer1, integer2);
      multiKey0.toString();
      boolean boolean0 = multiKey0.equals(integer1);
      assertFalse(boolean0);
      
      MultiKey<String>[] multiKeyArray0 = (MultiKey<String>[]) Array.newInstance(MultiKey.class, 9);
      MultiKey<String> multiKey1 = new MultiKey<String>("MultiKey[-1763, -1763, -1763, -1763]", "9*zpvjsD:ucd<x8e.k", "$6GW<I", "", "Kkw`j!_%");
      multiKeyArray0[0] = multiKey1;
      MultiKey<String> multiKey2 = new MultiKey<String>("9*zpvjsD:ucd<x8e.k", "MultiKey[-1763, -1763, -1763, -1763]");
      multiKeyArray0[1] = multiKey2;
      MultiKey<String> multiKey3 = new MultiKey<String>("Kkw`j!_%", "[v[I*");
      multiKeyArray0[2] = multiKey3;
      MultiKey<String> multiKey4 = new MultiKey<String>("MultiKey", "x@POI.KpQ=", "<!x}'`^^qY", "x@POI.KpQ=");
      multiKeyArray0[3] = multiKey4;
      MultiKey<String> multiKey5 = new MultiKey<String>("", "sGQvG({_iT,{-3y,", "");
      multiKeyArray0[4] = multiKey5;
      String[] stringArray0 = new String[9];
      stringArray0[0] = "MultiKey";
      stringArray0[1] = "9*zpvjsD:ucd<x8e.k";
      stringArray0[2] = "$6GW<I";
      stringArray0[3] = "sGQvG({_iT,{-3y,";
      stringArray0[4] = "<!x}'`^^qY";
      stringArray0[5] = "";
      stringArray0[6] = "";
      stringArray0[7] = "sGQvG({_iT,{-3y,";
      stringArray0[8] = "";
      MultiKey<String> multiKey6 = new MultiKey<String>(stringArray0);
      multiKeyArray0[5] = multiKey6;
      MultiKey<String> multiKey7 = new MultiKey<String>("", "sGQvG({_iT,{-3y,");
      multiKeyArray0[6] = multiKey7;
      MultiKey<String> multiKey8 = new MultiKey<String>("", "MultiKey", "", "MultiKey");
      multiKeyArray0[7] = multiKey8;
      MultiKey<String> multiKey9 = new MultiKey<String>(stringArray0);
      multiKeyArray0[8] = multiKey9;
      MultiKey<MultiKey<String>> multiKey10 = new MultiKey<MultiKey<String>>(multiKeyArray0, false);
      String string0 = multiKey10.toString();
      assertEquals("MultiKey[MultiKey[MultiKey[-1763, -1763, -1763, -1763], 9*zpvjsD:ucd<x8e.k, $6GW<I, , Kkw`j!_%], MultiKey[9*zpvjsD:ucd<x8e.k, MultiKey[-1763, -1763, -1763, -1763]], MultiKey[Kkw`j!_%, [v[I*], MultiKey[MultiKey, x@POI.KpQ=, <!x}'`^^qY, x@POI.KpQ=], MultiKey[, sGQvG({_iT,{-3y,, ], MultiKey[MultiKey, 9*zpvjsD:ucd<x8e.k, $6GW<I, sGQvG({_iT,{-3y,, <!x}'`^^qY, , , sGQvG({_iT,{-3y,, ], MultiKey[, sGQvG({_iT,{-3y,], MultiKey[, MultiKey, , MultiKey], MultiKey[MultiKey, 9*zpvjsD:ucd<x8e.k, $6GW<I, sGQvG({_iT,{-3y,, <!x}'`^^qY, , , sGQvG({_iT,{-3y,, ]]", string0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Object[] objectArray0 = new Object[4];
      Integer[] integerArray0 = new Integer[6];
      Integer integer0 = new Integer((-3226));
      integerArray0[0] = integer0;
      Integer integer1 = new Integer((int) integerArray0[0]);
      integerArray0[1] = integer1;
      Integer integer2 = new Integer((int) integerArray0[0]);
      integerArray0[2] = integer2;
      int int0 = 0;
      Integer integer3 = new Integer(0);
      integerArray0[3] = integer3;
      Integer integer4 = new Integer(int0);
      integerArray0[4] = integer4;
      Integer integer5 = new Integer(int0);
      integerArray0[5] = integer5;
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integerArray0);
      Integer integer6 = multiKey0.getKey(0);
      objectArray0[0] = (Object) integer6;
      Integer integer7 = multiKey0.getKey(0);
      objectArray0[1] = (Object) integer7;
      Integer integer8 = multiKey0.getKey(0);
      objectArray0[2] = (Object) integer8;
      Integer integer9 = new Integer((-1));
      MultiKey<Object> multiKey1 = new MultiKey<Object>(integer4, objectArray0[2], integer7, (Object) null, integer9);
      Object object0 = multiKey1.getKey(0);
      objectArray0[3] = object0;
      MultiKey<Object> multiKey2 = new MultiKey<Object>(objectArray0, true);
      MultiKey<MultiKey<Object>> multiKey3 = new MultiKey<MultiKey<Object>>(multiKey2, multiKey2, multiKey2);
      assertEquals(3, multiKey3.size());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Integer integer0 = new Integer(1884);
      Integer integer1 = new Integer(1);
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integer0, integer1);
      String[] stringArray0 = new String[9];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "";
      stringArray0[3] = "";
      stringArray0[4] = "NL''0";
      String string0 = "The array of keys must not be null";
      stringArray0[5] = "The array of keys must not be null";
      stringArray0[6] = "G3`8B}/q}+3f0-G3";
      stringArray0[7] = "cC'&;`9?Qk_tEKSo.g";
      stringArray0[8] = "W1l3I}7<^R[5iv";
      MultiKey<String> multiKey1 = new MultiKey<String>(stringArray0, false);
      // Undeclared exception!
//      try { 
        multiKey1.getKey(854);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 854
//         //
//         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
//      }
  }
}
