/*
 * This file was automatically generated by EvoSuite
 * Fri Oct 22 17:40:23 GMT 2021
 */

package org.apache.commons.collections4.keyvalue;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.lang.reflect.Array;
import org.apache.commons.collections4.keyvalue.MultiKey;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class MultiKey_ESTest extends MultiKey_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Object object0 = new Object();
      MultiKey<Object> multiKey0 = new MultiKey<Object>(object0, (Object) null);
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.getKeys();
      multiKey0.size();
      MultiKey<Object>[] multiKeyArray0 = (MultiKey<Object>[]) Array.newInstance(MultiKey.class, 5);
      MultiKey<Object> multiKey1 = new MultiKey<Object>(object0, "MultiKey[java.lang.Object@27019393, null]");
      multiKey1.toString();
      multiKeyArray0[0] = multiKey1;
      multiKeyArray0[1] = multiKey0;
      multiKeyArray0[2] = multiKey0;
      multiKeyArray0[3] = multiKey0;
      String string0 = multiKey1.toString();
      multiKeyArray0[4] = multiKey0;
      multiKey0.toString();
      MultiKey<MultiKey<Object>> multiKey2 = new MultiKey<MultiKey<Object>>(multiKeyArray0);
      multiKey2.size();
      multiKey1.size();
      multiKey0.equals(multiKey0);
      multiKey1.getKeys();
      String[] stringArray0 = new String[4];
      stringArray0[0] = "lHDRG,A}-0=]B,_}T/";
      stringArray0[1] = "MultiKey[java.lang.Object@27019393, MultiKey[java.lang.Object@27019393, null]]";
      stringArray0[2] = "MultiKey[java.lang.Object@27019393, null]";
      stringArray0[3] = "MultiKey[java.lang.Object@27019393, null]";
      MultiKey<String> multiKey3 = new MultiKey<String>(stringArray0, true);
      String string1 = multiKey3.toString();
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Integer[] integerArray0 = new Integer[0];
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integerArray0);
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.size();
      MultiKey<Object> multiKey1 = new MultiKey<Object>((Object[]) integerArray0, true);
      multiKey1.getKeys();
      multiKey1.toString();
      multiKey1.toString();
      multiKey0.toString();
      multiKey1.toString();
      MultiKey<String> multiKey2 = new MultiKey<String>((String) null, (String) null, "", "MultiKey[]");
      multiKey2.toString();
      multiKey2.toString();
      multiKey2.size();
      multiKey2.size();
      multiKey1.getKeys();
      multiKey0.size();
      multiKey0.toString();
      multiKey0.toString();
      multiKey1.size();
      multiKey1.getKeys();
      multiKey2.toString();
      MultiKey<MultiKey<Object>> multiKey3 = new MultiKey<MultiKey<Object>>(multiKey1, multiKey1);
      multiKey3.toString();
      multiKey3.toString();
      multiKey3.toString();
      multiKey0.toString();
      multiKey1.toString();
      multiKey0.equals("MultiKey[]");
      multiKey0.equals("MultiKey[]");
      boolean boolean0 = multiKey2.equals("MultiKey[]");
      assertFalse(boolean0);
      
      String string0 = multiKey0.toString();
      assertEquals("MultiKey[]", string0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      String string0 = "The array of keys must not be null";
      Object[] objectArray0 = null;
      boolean boolean0 = false;
      MultiKey<Object> multiKey0 = null;
//      try {
        multiKey0 = new MultiKey<Object>((Object[]) null, false);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // The array of keys must not be null
//         //
//         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
//      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Integer integer0 = new Integer(1);
      Integer integer1 = new Integer(1);
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integer0, integer1);
      multiKey0.getKey(0);
      MultiKey<String> multiKey1 = new MultiKey<String>("", "", "", "");
      multiKey1.toString();
      MultiKey<String>[] multiKeyArray0 = (MultiKey<String>[]) Array.newInstance(MultiKey.class, 0);
      MultiKey<MultiKey<String>> multiKey2 = new MultiKey<MultiKey<String>>(multiKeyArray0, true);
      String string0 = multiKey2.toString();
      assertEquals("MultiKey[]", string0);
      
      multiKey2.size();
      MultiKey<Object> multiKey3 = new MultiKey<Object>((Object[]) multiKeyArray0, true);
      Integer integer2 = new Integer(1);
      Integer integer3 = new Integer(9);
      boolean boolean0 = multiKey3.equals(integer3);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Integer integer0 = new Integer(0);
      int int0 = 0;
      Integer integer1 = new Integer(0);
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integer0, integer0, integer0, integer1);
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.hashCode();
      MultiKey<Object> multiKey1 = null;
//      try {
        multiKey1 = new MultiKey<Object>((Object[]) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // The array of keys must not be null
//         //
//         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
//      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("LqC2iJd", "", "LqC2iJd");
      multiKey0.toString();
      multiKey0.hashCode();
      MultiKey<Object> multiKey1 = new MultiKey<Object>(multiKey0, multiKey0);
      multiKey1.getKeys();
      Integer integer0 = new Integer(3349);
      Integer integer1 = new Integer(1);
      Integer integer2 = new Integer(2974);
      MultiKey<Integer> multiKey2 = new MultiKey<Integer>(integer0, integer1, integer2);
      multiKey0.toString();
      multiKey2.toString();
      multiKey2.toString();
      multiKey2.toString();
      multiKey2.toString();
      String string0 = multiKey0.toString();
      assertEquals("MultiKey[LqC2iJd, , LqC2iJd]", string0);
      
      boolean boolean0 = multiKey0.equals("MultiKey[3349, 1, 2974]");
      assertFalse(boolean0);
      
      multiKey1.size();
      multiKey1.hashCode();
      Integer integer3 = new Integer(2974);
      Integer integer4 = new Integer(1);
      MultiKey<Integer> multiKey3 = new MultiKey<Integer>(integer1, integer3, integer4, integer3);
      boolean boolean1 = multiKey1.equals(multiKey3);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Integer integer0 = new Integer(16);
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integer0, integer0, (Integer) null);
      Integer integer1 = new Integer(16);
      multiKey0.toString();
      multiKey0.equals(integer1);
      Object object0 = new Object();
      MultiKey<Object> multiKey1 = new MultiKey<Object>(object0, multiKey0, object0);
      Integer integer2 = new Integer(16);
      Integer integer3 = new Integer(16);
      MultiKey<Integer> multiKey2 = new MultiKey<Integer>(integer1, integer2, (Integer) null, integer3);
      multiKey1.toString();
      MultiKey<Object> multiKey3 = new MultiKey<Object>("", multiKey2);
      multiKey3.toString();
      multiKey2.toString();
      MultiKey<MultiKey<Object>> multiKey4 = new MultiKey<MultiKey<Object>>(multiKey1, multiKey1, multiKey1, multiKey1, multiKey3);
      multiKey4.toString();
      multiKey1.toString();
      multiKey2.toString();
      multiKey4.size();
      // Undeclared exception!
//      try { 
        multiKey0.getKey(5);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 5
//         //
//         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
//      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("", "");
      Integer[] integerArray0 = new Integer[9];
      int int0 = (-114);
      Integer integer0 = new Integer((-114));
      integerArray0[0] = integer0;
      Integer integer1 = new Integer(int0);
      integerArray0[1] = integer1;
      Integer integer2 = new Integer(1187);
      integerArray0[2] = integer2;
      int int1 = 0;
      Integer integer3 = new Integer(0);
      integerArray0[3] = integer3;
      Integer integer4 = new Integer(int1);
      integerArray0[4] = integer4;
      Integer integer5 = new Integer((-1));
      integerArray0[5] = integer5;
      Integer integer6 = new Integer((-1119));
      integerArray0[6] = integer6;
      Integer integer7 = new Integer(int1);
      integerArray0[7] = integer7;
      Integer integer8 = new Integer(2480);
      integerArray0[8] = integer8;
      MultiKey<Integer> multiKey1 = new MultiKey<Integer>(integerArray0, false);
      Integer[] integerArray1 = multiKey1.getKeys();
      assertFalse(integerArray1.equals((Object)integerArray0));
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Object[] objectArray0 = new Object[5];
      Integer integer0 = new Integer((-321));
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integer0, integer0, (Integer) null, integer0);
      int int0 = 2;
      multiKey0.getKey(2);
      objectArray0[0] = (Object) null;
      MultiKey<String> multiKey1 = new MultiKey<String>("p$s&vV7'K*8<G", "p$s&vV7'K*8<G", "", "", "");
      multiKey1.getKey(2);
      MultiKey<Object> multiKey2 = new MultiKey<Object>((Object) null, "", multiKey0);
      // Undeclared exception!
//      try { 
        multiKey2.getKey((-321));
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // -321
//         //
//         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
//      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      String[] stringArray0 = new String[4];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "}xWm$%<h|Pfq-8";
      stringArray0[3] = "";
      MultiKey<String> multiKey0 = new MultiKey<String>(stringArray0, true);
      Integer[] integerArray0 = new Integer[5];
      Integer integer0 = new Integer((-844));
      integerArray0[0] = integer0;
      Integer integer1 = new Integer((int) integerArray0[0]);
      integerArray0[1] = integer1;
      Integer integer2 = new Integer(3);
      integerArray0[2] = integer2;
      Integer integer3 = new Integer((-1354));
      integerArray0[3] = integer3;
      Integer integer4 = new Integer(0);
      integerArray0[4] = integer4;
      MultiKey<Integer> multiKey1 = new MultiKey<Integer>(integerArray0, true);
      Integer[] integerArray1 = multiKey1.getKeys();
      assertFalse(integerArray1.equals((Object)integerArray0));
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      String string0 = "-|(Z|X";
      Object[] objectArray0 = new Object[4];
      Object object0 = new Object();
      objectArray0[0] = object0;
      objectArray0[1] = (Object) "-|(Z|X";
      Object object1 = new Object();
      objectArray0[2] = object1;
      objectArray0[3] = (Object) "-|(Z|X";
      MultiKey<Object> multiKey0 = new MultiKey<Object>(objectArray0);
      int int0 = (-4968);
      // Undeclared exception!
//      try { 
        multiKey0.getKey((-4968));
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // -4968
//         //
//         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
//      }
  }
}
