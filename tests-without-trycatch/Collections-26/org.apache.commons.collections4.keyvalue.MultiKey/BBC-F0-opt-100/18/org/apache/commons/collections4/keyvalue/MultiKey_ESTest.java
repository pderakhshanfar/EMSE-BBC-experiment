/*
 * This file was automatically generated by EvoSuite
 * Wed Oct 20 12:37:16 GMT 2021
 */

package org.apache.commons.collections4.keyvalue;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.lang.reflect.Array;
import org.apache.commons.collections4.keyvalue.MultiKey;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class MultiKey_ESTest extends MultiKey_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("", "", (String) null, "", "");
      Object[] objectArray0 = new Object[0];
      MultiKey<Object> multiKey1 = new MultiKey<Object>(objectArray0);
      Object[] objectArray1 = multiKey1.getKeys();
      assertNotSame(objectArray1, objectArray0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("", "", "");
      multiKey0.toString();
      multiKey0.toString();
      Object object0 = new Object();
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = object0;
      objectArray0[1] = (Object) "";
      objectArray0[2] = (Object) "";
      objectArray0[3] = object0;
      MultiKey<Object> multiKey1 = new MultiKey<Object>(objectArray0, true);
      MultiKey<MultiKey<Object>> multiKey2 = new MultiKey<MultiKey<Object>>(multiKey1, multiKey1, multiKey1);
      Object object1 = multiKey2.getKey(2);
      multiKey1.equals(object1);
      MultiKey<Integer> multiKey3 = new MultiKey<Integer>((Integer) null, (Integer) null, (Integer) null, (Integer) null);
      multiKey3.size();
      multiKey0.toString();
      // Undeclared exception!
//      try { 
        multiKey1.getKey((-769));
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // -769
//         //
//         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
//      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      boolean boolean0 = false;
      MultiKey<Object> multiKey0 = null;
//      try {
        multiKey0 = new MultiKey<Object>((Object[]) null, false);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // The array of keys must not be null
//         //
//         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
//      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("-W7`e:I[m|0B ", "", "cI/sLgzcs[im5XD)P");
      multiKey0.toString();
      multiKey0.toString();
      Object object0 = new Object();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.hashCode();
      int int0 = multiKey0.size();
      Object[] objectArray0 = new Object[0];
      MultiKey<Object> multiKey1 = new MultiKey<Object>(objectArray0, false);
      int int1 = multiKey1.size();
      assertFalse(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Integer integer0 = new Integer(869);
      Integer integer1 = new Integer(869);
      MultiKey<Object> multiKey0 = new MultiKey<Object>(integer0, integer0, (Object) null, ">}&Ipt*AUO>%)'", integer1);
      Integer[] integerArray0 = new Integer[4];
      integerArray0[0] = integer0;
      integerArray0[1] = integer1;
      integerArray0[2] = integer0;
      integerArray0[3] = integer1;
      MultiKey<Integer> multiKey1 = new MultiKey<Integer>(integerArray0);
      MultiKey<Object> multiKey2 = new MultiKey<Object>((Object[]) integerArray0, true);
      multiKey1.equals(multiKey2);
      MultiKey<String> multiKey3 = new MultiKey<String>("*r{0y8q3-!k^'.", "e jXPSFpB", "@jz");
      multiKey3.size();
      multiKey3.toString();
      multiKey3.toString();
      multiKey0.getKeys();
      multiKey3.equals("*r{0y8q3-!k^'.");
      multiKey2.equals(integer0);
      multiKey2.size();
      MultiKey<Object>[] multiKeyArray0 = (MultiKey<Object>[]) Array.newInstance(MultiKey.class, 2);
      multiKeyArray0[0] = multiKey0;
      multiKeyArray0[1] = multiKey0;
      MultiKey<MultiKey<Object>> multiKey4 = new MultiKey<MultiKey<Object>>(multiKeyArray0, false);
      MultiKey<Object>[] multiKeyArray1 = multiKey4.getKeys();
      assertEquals(2, multiKeyArray1.length);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Integer[] integerArray0 = new Integer[0];
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integerArray0, true);
      MultiKey<String> multiKey1 = new MultiKey<String>("", "");
      multiKey1.hashCode();
      MultiKey<String> multiKey2 = new MultiKey<String>("", "");
      String string0 = multiKey2.toString();
      assertEquals("MultiKey[, ]", string0);
      
      MultiKey<Object> multiKey3 = new MultiKey<Object>("", multiKey2, "");
      multiKey3.hashCode();
      Integer integer0 = new Integer(1564);
      boolean boolean0 = multiKey2.equals(integer0);
      assertFalse(boolean0);
      
      MultiKey<String>[] multiKeyArray0 = (MultiKey<String>[]) Array.newInstance(MultiKey.class, 8);
      multiKeyArray0[0] = multiKey1;
      multiKeyArray0[1] = multiKey1;
      multiKeyArray0[2] = multiKey2;
      multiKeyArray0[3] = multiKey2;
      multiKeyArray0[4] = multiKey1;
      multiKeyArray0[5] = multiKey2;
      multiKeyArray0[6] = multiKey2;
      String[] stringArray0 = new String[9];
      stringArray0[0] = "MultiKey[, ]";
      stringArray0[1] = "";
      stringArray0[2] = "MultiKey[, ]";
      stringArray0[3] = "MultiKey[, ]";
      stringArray0[4] = "";
      stringArray0[5] = "";
      stringArray0[6] = "";
      stringArray0[7] = "MultiKey[, ]";
      stringArray0[8] = "";
      MultiKey<String> multiKey4 = new MultiKey<String>(stringArray0);
      multiKeyArray0[7] = multiKey4;
      MultiKey<MultiKey<String>> multiKey5 = new MultiKey<MultiKey<String>>(multiKeyArray0, false);
      boolean boolean1 = multiKey5.equals(multiKey2);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Integer integer0 = new Integer(0);
      Integer integer1 = new Integer(0);
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integer0, integer1);
      MultiKey<MultiKey<Integer>> multiKey1 = new MultiKey<MultiKey<Integer>>(multiKey0, multiKey0, multiKey0);
      multiKey1.getKey(0);
      String string0 = null;
      MultiKey<String> multiKey2 = new MultiKey<String>((String) null, (String) null, (String) null, "");
      multiKey2.getKey(1);
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) integer0;
      objectArray0[1] = (Object) null;
      Object object0 = new Object();
      objectArray0[2] = object0;
      Integer integer2 = new Integer(1334);
      Integer integer3 = new Integer(1);
      Integer integer4 = new Integer((-921));
      Integer integer5 = new Integer((-4895));
      MultiKey<Integer> multiKey3 = new MultiKey<Integer>(integer2, integer3, integer4, integer4, integer5);
      // Undeclared exception!
//      try { 
        multiKey3.getKey((-4895));
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // -4895
//         //
//         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
//      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      MultiKey<Object> multiKey0 = null;
//      try {
        multiKey0 = new MultiKey<Object>((Object[]) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // The array of keys must not be null
//         //
//         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
//      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Object[] objectArray0 = new Object[1];
      String[] stringArray0 = new String[3];
      stringArray0[0] = "";
      stringArray0[1] = "]/Q>Kx$iT'SUfX;}ga";
      stringArray0[2] = "";
      MultiKey<String> multiKey0 = new MultiKey<String>(stringArray0);
      multiKey0.getKey(0);
      objectArray0[0] = (Object) "";
      MultiKey<Object> multiKey1 = new MultiKey<Object>(objectArray0, true);
      Integer[] integerArray0 = new Integer[1];
      Integer integer0 = new Integer(548);
      integerArray0[0] = integer0;
      MultiKey<Integer> multiKey2 = new MultiKey<Integer>(integerArray0, true);
      // Undeclared exception!
//      try { 
        multiKey2.getKey(1204);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 1204
//         //
//         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
//      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("org.apache.commons.collections4.keyvalue.MultiKey", "org.apache.commons.collections4.keyvalue.MultiKey", "Q");
      Integer integer0 = new Integer((-794));
      Integer integer1 = new Integer((-794));
      Integer integer2 = new Integer((-530));
      MultiKey<Integer> multiKey1 = new MultiKey<Integer>(integer0, (Integer) null, integer1, integer2);
      multiKey1.toString();
      MultiKey<Object> multiKey2 = new MultiKey<Object>(multiKey0, multiKey1, integer2, (Object) null);
      multiKey1.toString();
      multiKey1.toString();
      multiKey2.toString();
      multiKey0.toString();
      multiKey2.toString();
      multiKey0.toString();
      multiKey1.toString();
      multiKey2.toString();
      multiKey2.equals((Object) null);
      multiKey2.getKey(0);
      multiKey0.hashCode();
      multiKey0.hashCode();
      multiKey1.equals((Object) null);
      multiKey0.size();
      multiKey0.toString();
      multiKey0.toString();
      multiKey2.getKeys();
      multiKey0.equals("MultiKey[org.apache.commons.collections4.keyvalue.MultiKey, org.apache.commons.collections4.keyvalue.MultiKey, Q]");
      multiKey2.equals("Q");
      multiKey2.size();
      MultiKey<Object>[] multiKeyArray0 = (MultiKey<Object>[]) Array.newInstance(MultiKey.class, 9);
      multiKeyArray0[0] = multiKey2;
      multiKeyArray0[1] = multiKey2;
      multiKeyArray0[2] = multiKey2;
      multiKeyArray0[3] = multiKey2;
      multiKeyArray0[4] = multiKey2;
      multiKeyArray0[5] = multiKey2;
      multiKeyArray0[6] = multiKey2;
      multiKeyArray0[7] = multiKey2;
      multiKeyArray0[8] = multiKey2;
      MultiKey<MultiKey<Object>> multiKey3 = new MultiKey<MultiKey<Object>>(multiKeyArray0, true);
      MultiKey<Object>[] multiKeyArray1 = multiKey3.getKeys();
      assertNotSame(multiKeyArray1, multiKeyArray0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("5fXrlp^h(", (String) null, "");
      multiKey0.toString();
      multiKey0.toString();
      MultiKey<String> multiKey1 = new MultiKey<String>("5MmVkm^!)9[uj\"3tlq+", (String) null, "auEK.=Y6X+/mF");
      multiKey1.toString();
      Object object0 = multiKey1.getKey(0);
      assertNotNull(object0);
      
      boolean boolean0 = multiKey0.equals("5MmVkm^!)9[uj\"3tlq+");
      assertFalse(boolean0);
      
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) "5MmVkm^!)9[uj\"3tlq+";
      MultiKey<Object> multiKey2 = new MultiKey<Object>(objectArray0, false);
      String string0 = multiKey2.toString();
      assertEquals("MultiKey[5MmVkm^!)9[uj\"3tlq+]", string0);
  }
}
