/*
 * This file was automatically generated by EvoSuite
 * Wed Oct 13 20:48:55 GMT 2021
 */

package org.apache.commons.collections4.keyvalue;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.lang.reflect.Array;
import org.apache.commons.collections4.keyvalue.MultiKey;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class MultiKey_ESTest extends MultiKey_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("", "", "", "");
      MultiKey<String>[] multiKeyArray0 = (MultiKey<String>[]) Array.newInstance(MultiKey.class, 1);
      multiKeyArray0[0] = multiKey0;
      MultiKey<MultiKey<String>> multiKey1 = new MultiKey<MultiKey<String>>(multiKeyArray0);
      MultiKey<MultiKey<Object>> multiKey2 = new MultiKey<MultiKey<Object>>((MultiKey<Object>) null, (MultiKey<Object>) null, (MultiKey<Object>) null, (MultiKey<Object>) null);
      multiKey2.toString();
      String string0 = multiKey2.toString();
      assertEquals("MultiKey[null, null, null, null]", string0);
      
      MultiKey<MultiKey<Object>> multiKey3 = new MultiKey<MultiKey<Object>>((MultiKey<Object>) null, (MultiKey<Object>) null, (MultiKey<Object>) null, (MultiKey<Object>) null, (MultiKey<Object>) null);
      assertFalse(multiKey3.equals((Object)multiKey2));
      
      boolean boolean0 = multiKey0.equals(multiKey0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      String[] stringArray0 = new String[4];
      MultiKey<String> multiKey0 = new MultiKey<String>("", "");
      Object object0 = new Object();
      MultiKey<String> multiKey1 = new MultiKey<String>(stringArray0);
      Integer[] integerArray0 = new Integer[2];
      int int0 = (-1);
      Integer integer0 = new Integer((-1));
      integerArray0[0] = integer0;
      Integer integer1 = new Integer(int0);
      integerArray0[1] = integer1;
      MultiKey<Integer> multiKey2 = new MultiKey<Integer>(integerArray0);
      MultiKey<Object> multiKey3 = new MultiKey<Object>("", multiKey1, (Object) null, multiKey2, (Object) null);
      multiKey3.toString();
      multiKey3.toString();
      MultiKey<Object> multiKey4 = null;
//      try {
        multiKey4 = new MultiKey<Object>((Object[]) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // The array of keys must not be null
//         //
//         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
//      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Object object0 = new Object();
      Integer integer0 = new Integer(75);
      Object object1 = new Object();
      MultiKey<Object> multiKey0 = new MultiKey<Object>(object0, object0, integer0, object1);
      MultiKey<Object>[] multiKeyArray0 = (MultiKey<Object>[]) Array.newInstance(MultiKey.class, 3);
      multiKeyArray0[0] = multiKey0;
      multiKeyArray0[1] = multiKey0;
      multiKeyArray0[2] = multiKey0;
      MultiKey<MultiKey<Object>> multiKey1 = new MultiKey<MultiKey<Object>>(multiKeyArray0, false);
      multiKey1.toString();
      MultiKey<String> multiKey2 = new MultiKey<String>("", "MultiKey[MultiKey[java.lang.Object@e68814e, java.lang.Object@e68814e, 75, java.lang.Object@65ea80aa], MultiKey[java.lang.Object@e68814e, java.lang.Object@e68814e, 75, java.lang.Object@65ea80aa], MultiKey[java.lang.Object@e68814e, java.lang.Object@e68814e, 75, java.lang.Object@65ea80aa]]", "g*z2>z\"hV~8u0~");
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) multiKey0;
      objectArray0[1] = (Object) multiKey0;
      objectArray0[2] = (Object) "g*z2>z\"hV~8u0~";
      objectArray0[3] = (Object) multiKey2;
      objectArray0[4] = (Object) multiKey0;
      objectArray0[5] = object1;
      objectArray0[6] = (Object) multiKey0;
      objectArray0[7] = (Object) multiKey0;
      MultiKey<Object> multiKey3 = new MultiKey<Object>(objectArray0);
      MultiKey<Object> multiKey4 = new MultiKey<Object>(multiKey0, integer0, multiKey2, multiKey3);
      boolean boolean0 = multiKey2.equals(multiKey4);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Object[] objectArray0 = new Object[2];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      MultiKey<Object> multiKey0 = new MultiKey<Object>(objectArray0, false);
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      MultiKey<String> multiKey1 = new MultiKey<String>((String) null, "MultiKey[java.lang.Object@4a8b82db, java.lang.Object@45264aba]", (String) null);
      multiKey1.toString();
      multiKey1.toString();
      multiKey0.toString();
      multiKey1.size();
      multiKey1.toString();
      multiKey0.equals(object1);
      MultiKey<MultiKey<String>> multiKey2 = new MultiKey<MultiKey<String>>(multiKey1, multiKey1, multiKey1);
      multiKey2.toString();
      multiKey2.toString();
      Integer integer0 = new Integer(3);
      Object object2 = new Object();
      MultiKey<Object> multiKey3 = new MultiKey<Object>((Object) null, integer0, object2);
      int int0 = 0;
      multiKey3.toString();
      multiKey3.toString();
      multiKey3.getKey(0);
      multiKey1.equals((Object) null);
      int int1 = 2276;
      // Undeclared exception!
//      try { 
        multiKey0.getKey(2276);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 2276
//         //
//         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
//      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      String string0 = "GBRQ<FO44";
      MultiKey<String> multiKey0 = new MultiKey<String>((String) null, "GBRQ<FO44", "GBRQ<FO44", "");
      multiKey0.toString();
      MultiKey<Integer> multiKey1 = null;
//      try {
        multiKey1 = new MultiKey<Integer>((Integer[]) null, false);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // The array of keys must not be null
//         //
//         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
//      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      String[] stringArray0 = new String[0];
      boolean boolean0 = false;
      MultiKey<String> multiKey0 = new MultiKey<String>(stringArray0, false);
      multiKey0.toString();
      MultiKey<Object> multiKey1 = new MultiKey<Object>(stringArray0);
      multiKey1.getKeys();
      multiKey0.toString();
      multiKey0.size();
      // Undeclared exception!
//      try { 
        multiKey0.getKey(0);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 0
//         //
//         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
//      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Integer[] integerArray0 = new Integer[0];
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integerArray0, false);
      Integer integer0 = new Integer((-514));
      MultiKey<Object> multiKey1 = new MultiKey<Object>(multiKey0, multiKey0, multiKey0, integer0);
      multiKey1.toString();
      MultiKey<String> multiKey2 = new MultiKey<String>("MultiKey", "", "MultiKey", "The array of keys must not be null");
      // Undeclared exception!
//      try { 
        multiKey2.getKey((-514));
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // -514
//         //
//         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
//      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Integer integer0 = new Integer(4);
      Integer integer1 = new Integer(4);
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integer0, integer0, integer0, integer0, integer1);
      multiKey0.equals(integer0);
      Integer integer2 = new Integer(0);
      Integer integer3 = new Integer(4);
      multiKey0.toString();
      MultiKey<String> multiKey1 = new MultiKey<String>("", "", "", "", "");
      multiKey1.toString();
      multiKey1.getKey(4);
      MultiKey<Object> multiKey2 = new MultiKey<Object>(integer2, multiKey0, integer3, "");
      multiKey2.equals("");
      multiKey2.toString();
      int int0 = 3094;
      multiKey1.toString();
      // Undeclared exception!
//      try { 
        multiKey0.getKey(3094);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 3094
//         //
//         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
//      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("MultiKey", "mg(5.T<*~tPx5b", "5");
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.size();
      Integer integer0 = new Integer(36);
      Integer integer1 = new Integer(3);
      MultiKey<Integer> multiKey1 = new MultiKey<Integer>(integer0, integer1, integer1, integer0, integer1);
      String string0 = multiKey1.toString();
      assertEquals("MultiKey[36, 3, 3, 36, 3]", string0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Integer integer0 = new Integer(0);
      MultiKey<Object> multiKey0 = new MultiKey<Object>(" nd%B#V", " nd%B#V", integer0, integer0, integer0);
      multiKey0.toString();
      multiKey0.toString();
      MultiKey<MultiKey<Object>> multiKey1 = new MultiKey<MultiKey<Object>>(multiKey0, multiKey0);
      multiKey1.toString();
      MultiKey<MultiKey<String>> multiKey2 = new MultiKey<MultiKey<String>>((MultiKey<String>) null, (MultiKey<String>) null, (MultiKey<String>) null, (MultiKey<String>) null, (MultiKey<String>) null);
      multiKey2.toString();
      multiKey2.getKeys();
      multiKey0.hashCode();
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("/fRD%&;s(7.", "/fRD%&;s(7.", "");
      multiKey0.toString();
      MultiKey<MultiKey<String>> multiKey1 = new MultiKey<MultiKey<String>>(multiKey0, (MultiKey<String>) null, (MultiKey<String>) null, multiKey0);
      multiKey1.toString();
      multiKey1.toString();
      MultiKey<MultiKey<Object>> multiKey2 = new MultiKey<MultiKey<Object>>((MultiKey<Object>) null, (MultiKey<Object>) null);
      multiKey2.toString();
      multiKey2.toString();
      String string0 = multiKey2.toString();
      assertEquals("MultiKey[null, null]", string0);
      
      boolean boolean0 = multiKey2.equals((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Integer integer0 = new Integer(1373);
      Integer integer1 = new Integer((-690));
      Integer integer2 = new Integer(0);
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integer0, integer1, integer2, integer0, integer2);
      String[] stringArray0 = new String[5];
      stringArray0[0] = "_l[O' 1Dvn=7aorB`s4";
      stringArray0[1] = "+ln-y";
      stringArray0[2] = "A'[J";
      stringArray0[3] = "'9e-";
      stringArray0[4] = "4}e)vki-Kudf75v(U,";
      MultiKey<String> multiKey1 = new MultiKey<String>(stringArray0);
      Integer integer3 = new Integer(1154);
      boolean boolean0 = multiKey1.equals(integer3);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      String[] stringArray0 = new String[9];
      stringArray0[0] = " iu#'_I$T8)*h";
      stringArray0[1] = "";
      stringArray0[2] = "";
      stringArray0[3] = "";
      stringArray0[4] = "The array of keys must not be null";
      stringArray0[5] = "";
      stringArray0[6] = "XR&v5GF";
      stringArray0[7] = "";
      stringArray0[8] = "0w}%UGGpy";
      MultiKey<String> multiKey0 = new MultiKey<String>(stringArray0);
      multiKey0.hashCode();
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      String[] stringArray0 = new String[6];
      stringArray0[0] = "";
      stringArray0[1] = "e]";
      stringArray0[2] = "";
      stringArray0[3] = "";
      stringArray0[4] = "";
      stringArray0[5] = "";
      MultiKey<String> multiKey0 = new MultiKey<String>(stringArray0);
      int int0 = 1749;
      // Undeclared exception!
//      try { 
        multiKey0.getKey(1749);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 1749
//         //
//         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
//      }
  }
}
