/*
 * This file was automatically generated by EvoSuite
 * Fri Oct 22 17:54:12 GMT 2021
 */

package org.apache.commons.collections4.keyvalue;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.lang.reflect.Array;
import org.apache.commons.collections4.keyvalue.MultiKey;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class MultiKey_ESTest extends MultiKey_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Integer integer0 = new Integer((-39));
      Integer[] integerArray0 = new Integer[0];
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integerArray0);
      multiKey0.toString();
      Integer[] integerArray1 = multiKey0.getKeys();
      assertEquals(0, integerArray1.length);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Integer integer0 = new Integer(0);
      MultiKey<String> multiKey0 = new MultiKey<String>("MultiKey", "MultiKey", "MultiKey", "MultiKey");
      MultiKey<Integer> multiKey1 = new MultiKey<Integer>(integer0, integer0);
      MultiKey<Integer>[] multiKeyArray0 = (MultiKey<Integer>[]) Array.newInstance(MultiKey.class, 4);
      multiKeyArray0[0] = multiKey1;
      multiKeyArray0[1] = multiKey1;
      multiKeyArray0[2] = multiKey1;
      multiKeyArray0[3] = multiKey1;
      MultiKey<MultiKey<Integer>> multiKey2 = new MultiKey<MultiKey<Integer>>(multiKeyArray0, true);
      Object object0 = multiKey2.getKey(0);
      boolean boolean0 = multiKey1.equals(object0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Object object0 = new Object();
      String[] stringArray0 = new String[3];
      stringArray0[0] = "";
      stringArray0[1] = "? ";
      stringArray0[2] = " 5~2j2{";
      MultiKey<String> multiKey0 = new MultiKey<String>(stringArray0);
      MultiKey<String> multiKey1 = new MultiKey<String>("", "", "oaP|Sj_HLR", "", "? ");
      MultiKey<Object> multiKey2 = new MultiKey<Object>(object0, multiKey0, multiKey1, "? ");
      multiKey2.size();
      Integer integer0 = new Integer(4);
      multiKey0.toString();
      MultiKey<String> multiKey3 = new MultiKey<String>(" 5~2j2{", "", "");
      Integer integer1 = new Integer(0);
      Integer integer2 = new Integer((-2812));
      Integer integer3 = new Integer(941);
      Integer integer4 = new Integer((-2812));
      MultiKey<Integer> multiKey4 = new MultiKey<Integer>(integer1, integer4);
      multiKey4.toString();
      String string0 = multiKey4.toString();
      assertEquals("MultiKey[0, -2812]", string0);
      
      Object object1 = new Object();
      MultiKey<Object> multiKey5 = new MultiKey<Object>(stringArray0);
      MultiKey<Object> multiKey6 = new MultiKey<Object>(stringArray0);
      MultiKey<Object> multiKey7 = new MultiKey<Object>(integer4, integer3, multiKey6, "MultiKey[, ? ,  5~2j2{]", multiKey4);
      MultiKey<String> multiKey8 = new MultiKey<String>("", "? ");
      Object object2 = new Object();
      boolean boolean0 = multiKey5.equals(multiKey6);
      assertTrue(boolean0);
      assertFalse(multiKey6.equals((Object)multiKey2));
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      String[] stringArray0 = new String[2];
      stringArray0[0] = "s]`0VML";
      stringArray0[1] = "?lvJV4";
      MultiKey<String> multiKey0 = new MultiKey<String>("s]`0VML", "?lvJV4", "?lvJV4");
      multiKey0.toString();
      Integer[] integerArray0 = new Integer[3];
      Integer integer0 = new Integer(9);
      integerArray0[0] = integer0;
      Integer integer1 = new Integer(3);
      integerArray0[1] = integer1;
      Integer integer2 = new Integer(9);
      integerArray0[2] = integer2;
      MultiKey<Integer> multiKey1 = new MultiKey<Integer>(integerArray0, true);
      multiKey1.equals(integer1);
      MultiKey<Object>[] multiKeyArray0 = (MultiKey<Object>[]) Array.newInstance(MultiKey.class, 0);
      MultiKey<MultiKey<Object>> multiKey2 = new MultiKey<MultiKey<Object>>(multiKeyArray0);
      multiKey2.size();
      multiKey0.toString();
      // Undeclared exception!
//      try { 
        multiKey0.getKey((-1164));
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // -1164
//         //
//         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
//      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Object object0 = new Object();
      String[] stringArray0 = new String[3];
      stringArray0[0] = "";
      stringArray0[1] = "? ";
      stringArray0[2] = " 5~2j2{";
      MultiKey<String> multiKey0 = new MultiKey<String>(stringArray0);
      MultiKey<String> multiKey1 = new MultiKey<String>("", "", "oaP|Sj_HLR", "", "? ");
      MultiKey<Object> multiKey2 = new MultiKey<Object>(object0, multiKey0, multiKey1, "? ");
      multiKey2.size();
      Integer integer0 = new Integer(4);
      multiKey0.toString();
      MultiKey<String> multiKey3 = new MultiKey<String>(" 5~2j2{", "", "");
      multiKey1.toString();
      multiKey3.toString();
      boolean boolean0 = multiKey1.equals(multiKey0);
      assertFalse(boolean0);
      
      Integer integer1 = new Integer(4);
      MultiKey<Integer> multiKey4 = new MultiKey<Integer>(integer0, integer0, integer0, integer1);
      String string0 = multiKey4.toString();
      assertEquals("MultiKey[4, 4, 4, 4]", string0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Integer integer0 = new Integer(1);
      Integer integer1 = new Integer(1);
      MultiKey<Object> multiKey0 = new MultiKey<Object>(integer0, integer1);
      multiKey0.toString();
      multiKey0.getKeys();
      multiKey0.hashCode();
      String[] stringArray0 = new String[6];
      stringArray0[0] = "MultiKey[1, 1]";
      stringArray0[1] = "MultiKey[1, 1]";
      stringArray0[2] = "MultiKey[1, 1]";
      stringArray0[3] = "MultiKey[1, 1]";
      stringArray0[4] = "MultiKey[1, 1]";
      stringArray0[5] = "MultiKey[1, 1]";
      MultiKey<String> multiKey1 = new MultiKey<String>(stringArray0);
      String string0 = multiKey1.toString();
      assertEquals("MultiKey[MultiKey[1, 1], MultiKey[1, 1], MultiKey[1, 1], MultiKey[1, 1], MultiKey[1, 1], MultiKey[1, 1]]", string0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Integer integer0 = new Integer(0);
      MultiKey<Object> multiKey0 = new MultiKey<Object>((Object) null, integer0, integer0);
      multiKey0.getKey(0);
      String[] stringArray0 = new String[4];
      stringArray0[0] = "IpXbae8u )Y >OD";
      stringArray0[1] = "";
      stringArray0[2] = "O\"+;o]#E}f.]t";
      stringArray0[3] = "";
      MultiKey<String> multiKey1 = new MultiKey<String>(stringArray0);
      // Undeclared exception!
//      try { 
        multiKey1.getKey((-78));
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // -78
//         //
//         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
//      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Object object0 = new Object();
      MultiKey<Object> multiKey0 = new MultiKey<Object>(object0, "", "", "", (Object) null);
      Object[] objectArray0 = new Object[3];
      Object object1 = multiKey0.getKey(0);
      objectArray0[0] = object1;
      objectArray0[1] = (Object) "";
      Integer integer0 = new Integer(0);
      MultiKey<Integer> multiKey1 = new MultiKey<Integer>(integer0, integer0, integer0);
      multiKey1.toString();
      int int0 = 0;
      multiKey1.toString();
      Integer integer1 = multiKey1.getKey(0);
      objectArray0[2] = (Object) integer1;
      multiKey1.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      MultiKey<Object> multiKey2 = new MultiKey<Object>(objectArray0);
      multiKey2.toString();
      multiKey0.toString();
      MultiKey<MultiKey<Object>> multiKey3 = new MultiKey<MultiKey<Object>>(multiKey0, multiKey0, multiKey2);
      multiKey3.toString();
      multiKey3.toString();
      multiKey3.toString();
      MultiKey<MultiKey<Integer>> multiKey4 = null;
//      try {
        multiKey4 = new MultiKey<MultiKey<Integer>>((MultiKey<Integer>[]) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // The array of keys must not be null
//         //
//         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
//      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      MultiKey<String> multiKey0 = null;
//      try {
        multiKey0 = new MultiKey<String>((String[]) null, false);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // The array of keys must not be null
//         //
//         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
//      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Object[] objectArray0 = new Object[1];
      Object object0 = new Object();
      objectArray0[0] = object0;
      MultiKey<Object> multiKey0 = new MultiKey<Object>(objectArray0, false);
      Object object1 = new Object();
      multiKey0.equals(object1);
      // Undeclared exception!
//      try { 
        multiKey0.getKey((-1));
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // -1
//         //
//         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
//      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Integer integer0 = new Integer((-2811));
      MultiKey<Object> multiKey0 = new MultiKey<Object>(integer0, integer0, integer0, integer0);
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.getKeys();
      multiKey0.size();
      MultiKey<Integer> multiKey1 = new MultiKey<Integer>(integer0, integer0);
      String string0 = multiKey1.toString();
      assertEquals("MultiKey[-2811, -2811]", string0);
      
      multiKey1.size();
      MultiKey<String> multiKey2 = new MultiKey<String>("MultiKey[-2811, -2811, -2811, -2811]", "l!cXBQ", "X,kw;pc/Yk@oq!:.", "");
      String string1 = multiKey2.getKey(2);
      assertEquals("X,kw;pc/Yk@oq!:.", string1);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("vQ~iei", "");
      Integer integer0 = new Integer((-1061));
      MultiKey<Object> multiKey1 = new MultiKey<Object>(integer0, (Object) null, (Object) null, "vQ~iei");
      int int0 = multiKey1.size();
      assertEquals(4, int0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      MultiKey<Object> multiKey0 = new MultiKey<Object>((Object) null, (Object) null);
      multiKey0.toString();
      MultiKey<String> multiKey1 = new MultiKey<String>("v\"_i~)d0f", "v\"_i~)d0f");
      Object object0 = new Object();
      Integer integer0 = new Integer(0);
      MultiKey<Object> multiKey2 = new MultiKey<Object>((Object) null, object0, integer0, (Object) null);
      MultiKey<Object> multiKey3 = new MultiKey<Object>(multiKey2, "v\"_i~)d0f", multiKey2);
      multiKey3.getKey(0);
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) multiKey0;
      objectArray0[1] = (Object) multiKey2;
      MultiKey<Object> multiKey4 = new MultiKey<Object>(objectArray0);
      multiKey4.getKey(0);
      String string0 = "";
      Integer integer1 = new Integer(0);
      Integer integer2 = new Integer(0);
      MultiKey<Integer> multiKey5 = new MultiKey<Integer>(integer1, integer2);
      int int0 = 1321;
      // Undeclared exception!
//      try { 
        multiKey5.getKey(1321);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 1321
//         //
//         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
//      }
  }
}
