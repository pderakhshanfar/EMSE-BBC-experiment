/*
 * This file was automatically generated by EvoSuite
 * Wed Oct 20 12:39:28 GMT 2021
 */

package org.apache.commons.collections4.keyvalue;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.lang.reflect.Array;
import org.apache.commons.collections4.keyvalue.MultiKey;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class MultiKey_ESTest extends MultiKey_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("", "");
      String string0 = multiKey0.toString();
      assertEquals("MultiKey[, ]", string0);
      
      MultiKey<Object> multiKey1 = new MultiKey<Object>(multiKey0, "", "");
      multiKey0.size();
      String[] stringArray0 = new String[8];
      MultiKey<String> multiKey2 = new MultiKey<String>(stringArray0, false);
      MultiKey<String> multiKey3 = new MultiKey<String>("", "MultiKey[, ]", "%B", "+'TtAexWH?3", "");
      MultiKey<String> multiKey4 = new MultiKey<String>("", "MultiKey[, ]", "", "iJUk6mxN|^d/vF]l'", "");
      MultiKey<Object> multiKey5 = new MultiKey<Object>(multiKey2, multiKey0, multiKey1);
      Object object0 = multiKey5.getKey(2);
      boolean boolean0 = multiKey1.equals(object0);
      assertTrue(boolean0);
      
      multiKey5.size();
      assertFalse(multiKey5.equals((Object)multiKey1));
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Object[] objectArray0 = new Object[1];
      Object object0 = new Object();
      objectArray0[0] = object0;
      MultiKey<Object> multiKey0 = new MultiKey<Object>(objectArray0, false);
      multiKey0.size();
      MultiKey<Object> multiKey1 = new MultiKey<Object>(objectArray0, false);
      multiKey1.toString();
      multiKey1.toString();
      multiKey1.toString();
      multiKey1.toString();
      multiKey1.toString();
      multiKey0.equals(multiKey1);
      Integer integer0 = new Integer(1);
      Integer integer1 = new Integer(1);
      Integer integer2 = new Integer(1);
      MultiKey<Integer> multiKey2 = new MultiKey<Integer>(integer0, integer1, integer1, integer2);
      multiKey2.size();
      // Undeclared exception!
//      try { 
        multiKey2.getKey((-2896));
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // -2896
//         //
//         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
//      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Integer integer0 = new Integer(0);
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) integer0;
      MultiKey<String> multiKey0 = new MultiKey<String>("", "", "", "i;T#[ON/aB)");
      multiKey0.toString();
      MultiKey<Object> multiKey1 = new MultiKey<Object>("", "", multiKey0);
      String[] stringArray0 = new String[4];
      stringArray0[1] = "MultiKey[, , , i;T#[ON/aB)]";
      stringArray0[2] = "";
      stringArray0[3] = "i;T#[ON/aB)";
      MultiKey<String> multiKey2 = new MultiKey<String>(stringArray0, true);
      multiKey2.size();
      MultiKey<String> multiKey3 = new MultiKey<String>(stringArray0, true);
      MultiKey<Object> multiKey4 = new MultiKey<Object>((Object[]) stringArray0, true);
      multiKey4.getKey(0);
      MultiKey<Object> multiKey5 = new MultiKey<Object>("", (Object) null);
      // Undeclared exception!
//      try { 
        multiKey5.getKey(4);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 4
//         //
//         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
//      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      MultiKey<Object>[] multiKeyArray0 = (MultiKey<Object>[]) Array.newInstance(MultiKey.class, 0);
      MultiKey<MultiKey<Object>> multiKey0 = new MultiKey<MultiKey<Object>>(multiKeyArray0);
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.getKeys();
      Integer integer0 = new Integer((-2580));
      Integer integer1 = new Integer((-2580));
      Integer integer2 = new Integer((-2580));
      Integer integer3 = new Integer((-2580));
      MultiKey<Integer> multiKey1 = new MultiKey<Integer>(integer0, integer1, integer2, (Integer) null, integer3);
      multiKey1.toString();
      multiKey1.hashCode();
      MultiKey<String> multiKey2 = new MultiKey<String>("jMM=<t1NhJbG?=+6x\"%", ";", "MultiKey[]", "");
      multiKey2.hashCode();
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      MultiKey<String>[] multiKeyArray0 = (MultiKey<String>[]) Array.newInstance(MultiKey.class, 0);
      MultiKey<MultiKey<String>> multiKey0 = new MultiKey<MultiKey<String>>(multiKeyArray0);
      MultiKey<Object> multiKey1 = new MultiKey<Object>((Object[]) multiKeyArray0, true);
      int int0 = multiKey1.size();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      String[] stringArray0 = new String[4];
      stringArray0[0] = "^uw]^7)v%?FC6HR~I";
      stringArray0[1] = "g|>/-";
      stringArray0[2] = "MultiKey";
      stringArray0[3] = "";
      MultiKey<String> multiKey0 = new MultiKey<String>(stringArray0, false);
      multiKey0.toString();
      Integer integer0 = new Integer(0);
      MultiKey<Integer> multiKey1 = new MultiKey<Integer>(integer0, integer0, integer0);
      multiKey1.toString();
      boolean boolean0 = multiKey0.equals(multiKey1);
      assertFalse(boolean0);
      
      MultiKey<String> multiKey2 = new MultiKey<String>("SR", "", "04?#Z[e_n9'X7MV|la.");
      multiKey2.getKey(0);
      Integer integer1 = new Integer(1);
      MultiKey<String> multiKey3 = new MultiKey<String>("i?/Rny`*Rq,`DHx'Y", "SR");
      Object object0 = multiKey3.getKey(0);
      assertEquals("i?/Rny`*Rq,`DHx'Y", object0);
      
      multiKey3.toString();
      multiKey3.toString();
      multiKey3.toString();
      MultiKey<Object> multiKey4 = new MultiKey<Object>("g|>/-", "SR", integer1, "i?/Rny`*Rq,`DHx'Y");
      String string0 = multiKey4.toString();
      assertEquals("MultiKey[g|>/-, SR, 1, i?/Rny`*Rq,`DHx'Y]", string0);
      
      multiKey4.hashCode();
      multiKey2.hashCode();
      assertFalse(multiKey2.equals((Object)multiKey0));
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      MultiKey<String> multiKey0 = null;
//      try {
        multiKey0 = new MultiKey<String>((String[]) null, true);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // The array of keys must not be null
//         //
//         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
//      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Object object0 = new Object();
      int int0 = 0;
      Integer integer0 = new Integer(0);
      MultiKey<Object> multiKey0 = new MultiKey<Object>(object0, integer0, integer0);
      int int1 = multiKey0.hashCode();
      assertFalse(int1 == int0);
      
      String[] stringArray0 = new String[4];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "The array of keys must not be null";
      stringArray0[3] = "";
      MultiKey<String> multiKey1 = new MultiKey<String>(stringArray0);
      multiKey1.getKeys();
      Integer[] integerArray0 = new Integer[5];
      integerArray0[0] = integer0;
      integerArray0[1] = integer0;
      integerArray0[2] = integer0;
      integerArray0[3] = integer0;
      Integer integer1 = new Integer(int0);
      integerArray0[4] = integer1;
      MultiKey<Integer> multiKey2 = new MultiKey<Integer>(integerArray0, false);
      String string0 = multiKey2.toString();
      assertEquals("MultiKey[0, 0, 0, 0, 0]", string0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      MultiKey<Object> multiKey0 = null;
//      try {
        multiKey0 = new MultiKey<Object>((Object[]) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // The array of keys must not be null
//         //
//         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
//      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Integer integer0 = new Integer(0);
      Integer integer1 = new Integer(0);
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integer0, integer1, integer1, integer0);
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.equals(integer1);
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) "MultiKey[0, 0, 0, 0]";
      objectArray0[1] = (Object) "MultiKey[0, 0, 0, 0]";
      objectArray0[2] = (Object) integer0;
      objectArray0[3] = (Object) "MultiKey[0, 0, 0, 0]";
      MultiKey<Object> multiKey1 = new MultiKey<Object>(objectArray0, true);
      MultiKey<Object> multiKey2 = new MultiKey<Object>(objectArray0);
      multiKey1.toString();
      MultiKey<MultiKey<Object>> multiKey3 = new MultiKey<MultiKey<Object>>(multiKey1, multiKey2, multiKey2, multiKey2);
      multiKey3.toString();
      Object object0 = multiKey3.getKey(0);
      Object object1 = new Object();
      Object object2 = new Object();
      MultiKey<Object> multiKey4 = new MultiKey<Object>(object0, objectArray0[1], object1, object2, objectArray0[1]);
      MultiKey<MultiKey<Object>> multiKey5 = new MultiKey<MultiKey<Object>>(multiKey4, multiKey1);
      multiKey5.equals(objectArray0[2]);
      multiKey2.hashCode();
      String[] stringArray0 = new String[3];
      stringArray0[0] = "MultiKey[0, 0, 0, 0]";
      stringArray0[1] = "MultiKey[0, 0, 0, 0]";
      stringArray0[2] = "MultiKey[0, 0, 0, 0]";
      MultiKey<String> multiKey6 = new MultiKey<String>(stringArray0);
      multiKey6.hashCode();
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Object[] objectArray0 = new Object[6];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      Object object2 = new Object();
      objectArray0[2] = object2;
      Object object3 = new Object();
      objectArray0[3] = object3;
      Integer[] integerArray0 = new Integer[0];
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integerArray0, false);
      int int0 = (-1570);
      // Undeclared exception!
//      try { 
        multiKey0.getKey((-1570));
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // -1570
//         //
//         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
//      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      String string0 = "";
      MultiKey<String> multiKey0 = new MultiKey<String>((String) null, (String) null, "", "");
      multiKey0.equals((Object) null);
      MultiKey<Object> multiKey1 = new MultiKey<Object>((Object) null, "", (Object) null);
      // Undeclared exception!
//      try { 
        multiKey1.getKey((-804));
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // -804
//         //
//         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
//      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Integer integer0 = new Integer(5);
      Integer integer1 = new Integer(0);
      int int0 = 0;
      Integer integer2 = new Integer(0);
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integer0, integer0, integer1, integer2);
      multiKey0.toString();
      MultiKey<String> multiKey1 = new MultiKey<String>("^zHv", "^zHv", "");
      multiKey1.toString();
      multiKey1.size();
      // Undeclared exception!
//      try { 
        multiKey1.getKey(5);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 5
//         //
//         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
//      }
  }
}
