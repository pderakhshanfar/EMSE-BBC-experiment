/*
 * This file was automatically generated by EvoSuite
 * Wed Oct 20 12:27:32 GMT 2021
 */

package org.apache.commons.collections4.keyvalue;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.collections4.keyvalue.MultiKey;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class MultiKey_ESTest extends MultiKey_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("<", "<", "<");
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) multiKey0;
      objectArray0[1] = (Object) multiKey0;
      objectArray0[2] = (Object) "<";
      MultiKey<Object> multiKey1 = new MultiKey<Object>(objectArray0, false);
      multiKey1.getKeys();
      multiKey1.getKeys();
      boolean boolean0 = multiKey0.equals(objectArray0[0]);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      MultiKey<Object> multiKey0 = new MultiKey<Object>(".", ".");
      Integer[] integerArray0 = new Integer[0];
      MultiKey<Integer> multiKey1 = new MultiKey<Integer>(integerArray0, false);
      int int0 = multiKey1.size();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Object object0 = new Object();
      MultiKey<Object> multiKey0 = new MultiKey<Object>(object0, object0);
      Integer[] integerArray0 = new Integer[6];
      Integer integer0 = new Integer((-911));
      integerArray0[0] = integer0;
      Integer integer1 = new Integer(18);
      integerArray0[1] = integer1;
      Integer integer2 = new Integer((-3659));
      integerArray0[2] = integer2;
      Integer integer3 = new Integer(18);
      integerArray0[3] = integer3;
      Integer integer4 = new Integer(237);
      integerArray0[4] = integer4;
      Integer integer5 = new Integer((-3659));
      integerArray0[5] = integer5;
      MultiKey<Integer> multiKey1 = new MultiKey<Integer>(integerArray0);
      MultiKey<Object> multiKey2 = new MultiKey<Object>((Object[]) integerArray0, false);
      boolean boolean0 = multiKey1.equals(multiKey2);
      boolean boolean1 = multiKey2.equals(multiKey0);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      MultiKey<Object> multiKey0 = new MultiKey<Object>(objectArray0);
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.equals((Object) null);
      multiKey0.getKeys();
      Integer[] integerArray0 = new Integer[3];
      Integer integer0 = new Integer(0);
      integerArray0[0] = integer0;
      Integer integer1 = new Integer(0);
      integerArray0[1] = integer1;
      Integer integer2 = new Integer(0);
      integerArray0[2] = integer2;
      MultiKey<Integer> multiKey1 = new MultiKey<Integer>(integerArray0, true);
      multiKey1.toString();
      multiKey1.toString();
      multiKey1.toString();
      multiKey1.equals(" s-8Vi}hCk9");
      multiKey1.size();
      MultiKey<String> multiKey2 = new MultiKey<String>("-#_@[", "MultiKey[]", "MultiKey[0, 0, 0]", "-#_@[", "");
      multiKey2.toString();
      // Undeclared exception!
//      try { 
        multiKey2.getKey(3352);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 3352
//         //
//         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
//      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      String string0 = "`pFeBf ep5g'";
      int int0 = (-1086);
      Integer integer0 = new Integer((-1086));
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integer0, integer0, integer0, integer0);
      MultiKey<Object> multiKey1 = null;
//      try {
        multiKey1 = new MultiKey<Object>((Object[]) null, false);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // The array of keys must not be null
//         //
//         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
//      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Object[] objectArray0 = new Object[5];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      Object object2 = new Object();
      objectArray0[2] = object2;
      Object object3 = new Object();
      objectArray0[3] = object3;
      Object object4 = new Object();
      objectArray0[4] = object4;
      MultiKey<Object> multiKey0 = new MultiKey<Object>(objectArray0);
      multiKey0.toString();
      multiKey0.toString();
      MultiKey<String> multiKey1 = null;
//      try {
        multiKey1 = new MultiKey<String>((String[]) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // The array of keys must not be null
//         //
//         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
//      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Object[] objectArray0 = new Object[5];
      MultiKey<Object> multiKey0 = new MultiKey<Object>(objectArray0);
      MultiKey<MultiKey<Object>> multiKey1 = new MultiKey<MultiKey<Object>>(multiKey0, multiKey0, multiKey0, multiKey0, multiKey0);
      MultiKey<Object> multiKey2 = multiKey1.getKey(0);
      objectArray0[0] = (Object) multiKey2;
      Integer integer0 = new Integer(754);
      Integer integer1 = new Integer(3);
      MultiKey<Integer> multiKey3 = new MultiKey<Integer>((Integer) null, integer0, integer1);
      multiKey3.getKey(0);
      objectArray0[1] = (Object) null;
      // Undeclared exception!
//      try { 
        multiKey0.getKey(754);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 754
//         //
//         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
//      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      String[] stringArray0 = new String[1];
      stringArray0[0] = "NmV.'4PAWFh(l2VhUE ";
      MultiKey<String> multiKey0 = new MultiKey<String>(stringArray0);
      MultiKey<Object> multiKey1 = new MultiKey<Object>("NmV.'4PAWFh(l2VhUE ", "NmV.'4PAWFh(l2VhUE ", "[,Cw0x,2!/WE[vI", "NmV.'4PAWFh(l2VhUE ");
      multiKey1.getKey(0);
      multiKey0.toString();
      MultiKey<Object> multiKey2 = new MultiKey<Object>(multiKey0, "NmV.'4PAWFh(l2VhUE ", "NmV.'4PAWFh(l2VhUE ", "NmV.'4PAWFh(l2VhUE ", "NmV.'4PAWFh(l2VhUE ");
      multiKey0.equals(multiKey1);
      MultiKey<MultiKey<String>> multiKey3 = new MultiKey<MultiKey<String>>(multiKey0, multiKey0);
      multiKey3.hashCode();
      multiKey2.hashCode();
      String[] stringArray1 = multiKey0.getKeys();
      multiKey1.equals(multiKey3);
      multiKey2.toString();
      multiKey0.hashCode();
      MultiKey<Object> multiKey4 = new MultiKey<Object>((Object[]) stringArray1, false);
      int int0 = 1;
      Integer integer0 = new Integer(1);
      Integer integer1 = new Integer(1);
      Integer integer2 = new Integer(1);
      MultiKey<Integer> multiKey5 = new MultiKey<Integer>(integer0, integer1, integer2);
      // Undeclared exception!
//      try { 
        multiKey5.getKey((-1493));
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // -1493
//         //
//         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
//      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("q$*,-", "q$*,-", (String) null);
      MultiKey<Object> multiKey1 = new MultiKey<Object>(multiKey0, (Object) null, multiKey0);
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) multiKey0;
      objectArray0[1] = (Object) "q$*,-";
      objectArray0[2] = (Object) multiKey1;
      objectArray0[3] = (Object) "q$*,-";
      objectArray0[4] = (Object) null;
      objectArray0[5] = (Object) multiKey0;
      MultiKey<Object> multiKey2 = new MultiKey<Object>(objectArray0, false);
      MultiKey<MultiKey<Object>> multiKey3 = new MultiKey<MultiKey<Object>>(multiKey1, multiKey1, multiKey1, multiKey1, multiKey2);
      Integer integer0 = new Integer((-87));
      Integer integer1 = new Integer(0);
      Integer integer2 = new Integer(0);
      Integer integer3 = new Integer((-87));
      MultiKey<Integer> multiKey4 = new MultiKey<Integer>(integer0, integer1, integer2, integer3);
      int int0 = multiKey4.size();
      assertEquals(4, int0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>((String) null, (String) null, (String) null, "");
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.equals("MultiKey[null, null, null, ]");
      MultiKey<String> multiKey1 = new MultiKey<String>("", "9HfK3VY");
      int int0 = 0;
      multiKey1.getKey(0);
      Object[] objectArray0 = new Object[0];
      MultiKey<Object> multiKey2 = new MultiKey<Object>(objectArray0);
      MultiKey<MultiKey<Object>> multiKey3 = new MultiKey<MultiKey<Object>>(multiKey2, multiKey2, multiKey2, multiKey2, multiKey2);
      // Undeclared exception!
//      try { 
        multiKey3.getKey((-1875));
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // -1875
//         //
//         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
//      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Object[] objectArray0 = new Object[2];
      int int0 = 28;
      Integer integer0 = new Integer(28);
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integer0, integer0);
      // Undeclared exception!
//      try { 
        multiKey0.getKey(28);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 28
//         //
//         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
//      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("", "", "org.apache.commons.collections4.keyvalue.MultiKey");
      multiKey0.toString();
      MultiKey<Object> multiKey1 = new MultiKey<Object>("", (Object) null, (Object) null, (Object) null);
      multiKey1.toString();
      multiKey1.toString();
      multiKey1.toString();
      multiKey1.hashCode();
      Integer integer0 = new Integer(0);
      Integer integer1 = new Integer(0);
      MultiKey<Integer> multiKey2 = new MultiKey<Integer>(integer0, integer0, integer1, integer0, integer1);
      Integer[] integerArray0 = new Integer[7];
      integerArray0[0] = integer0;
      integerArray0[1] = integer1;
      integerArray0[2] = integer1;
      integerArray0[3] = integer1;
      integerArray0[4] = integer0;
      integerArray0[5] = integer1;
      integerArray0[6] = integer0;
      MultiKey<Integer> multiKey3 = new MultiKey<Integer>(integerArray0);
      MultiKey<MultiKey<Integer>> multiKey4 = new MultiKey<MultiKey<Integer>>(multiKey2, multiKey3, multiKey2);
      multiKey4.hashCode();
  }
}
