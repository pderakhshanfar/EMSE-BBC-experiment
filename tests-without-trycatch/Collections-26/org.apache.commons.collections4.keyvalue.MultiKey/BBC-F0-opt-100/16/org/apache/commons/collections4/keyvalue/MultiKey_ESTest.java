/*
 * This file was automatically generated by EvoSuite
 * Wed Oct 20 12:31:36 GMT 2021
 */

package org.apache.commons.collections4.keyvalue;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.lang.reflect.Array;
import org.apache.commons.collections4.keyvalue.MultiKey;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class MultiKey_ESTest extends MultiKey_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Integer integer0 = new Integer(0);
      Integer integer1 = new Integer(1);
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integer0, integer1, integer0);
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.hashCode();
      Object object0 = new Object();
      Object object1 = new Object();
      MultiKey<Object> multiKey1 = new MultiKey<Object>("MultiKey[0, 1, 0]", (Object) null, object0, object1, "MultiKey[0, 1, 0]");
      multiKey1.toString();
      boolean boolean0 = multiKey1.equals(multiKey1);
      assertTrue(boolean0);
      
      String string0 = multiKey0.toString();
      assertEquals("MultiKey[0, 1, 0]", string0);
      
      multiKey1.getKey(0);
      Object object2 = multiKey1.getKey(0);
      assertNotNull(object2);
      
      Object[] objectArray0 = new Object[3];
      objectArray0[1] = (Object) "MultiKey[MultiKey[0, 1, 0], null, java.lang.Object@5c702316, java.lang.Object@4b8e35c5, MultiKey[0, 1, 0]]";
      objectArray0[2] = (Object) "MultiKey[0, 1, 0]";
      MultiKey<Object> multiKey2 = new MultiKey<Object>(objectArray0, true);
      MultiKey<MultiKey<Object>> multiKey3 = new MultiKey<MultiKey<Object>>(multiKey1, multiKey1, multiKey2);
      multiKey3.toString();
      multiKey3.getKeys();
      multiKey2.toString();
      assertFalse(multiKey2.equals((Object)multiKey1));
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>((String) null, (String) null);
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) multiKey0;
      Object object0 = new Object();
      objectArray0[1] = object0;
      objectArray0[2] = (Object) null;
      objectArray0[3] = (Object) multiKey0;
      objectArray0[4] = (Object) multiKey0;
      objectArray0[5] = (Object) null;
      objectArray0[6] = (Object) multiKey0;
      objectArray0[7] = (Object) null;
      MultiKey<Object> multiKey1 = new MultiKey<Object>(objectArray0);
      MultiKey<Object> multiKey2 = new MultiKey<Object>(objectArray0, true);
      multiKey2.toString();
      boolean boolean0 = multiKey1.equals(multiKey2);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Integer[] integerArray0 = new Integer[4];
      int int0 = 0;
      Integer integer0 = new Integer(0);
      integerArray0[0] = integer0;
      Integer integer1 = new Integer(int0);
      integerArray0[1] = integer1;
      Integer integer2 = new Integer(0);
      Integer integer3 = new Integer(1092);
      integerArray0[3] = integer3;
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integerArray0, true);
      multiKey0.toString();
      MultiKey<String> multiKey1 = new MultiKey<String>("BFl|xE\"[9", "BFl|xE\"[9", "BFl|xE\"[9", "BFl|xE\"[9");
      String string0 = multiKey1.toString();
      assertEquals("MultiKey[BFl|xE\"[9, BFl|xE\"[9, BFl|xE\"[9, BFl|xE\"[9]", string0);
      
      MultiKey<Integer> multiKey2 = new MultiKey<Integer>(integer1, integerArray0[3], integer2);
      MultiKey<Integer> multiKey3 = new MultiKey<Integer>(integerArray0);
      multiKey0.equals(multiKey3);
      assertFalse(multiKey3.equals((Object)multiKey2));
      assertFalse(multiKey0.equals((Object)multiKey2));
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("", "", "", (String) null, "");
      Object[] objectArray0 = new Object[0];
      MultiKey<Object> multiKey1 = new MultiKey<Object>(objectArray0, true);
      multiKey1.toString();
      multiKey1.equals((Object) null);
      int int0 = multiKey1.size();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Integer integer0 = new Integer(3);
      Integer integer1 = new Integer(3);
      Integer integer2 = new Integer(3);
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>((Integer) null, integer1, integer2, integer2);
      multiKey0.toString();
      multiKey0.equals(integer2);
      MultiKey<Object>[] multiKeyArray0 = (MultiKey<Object>[]) Array.newInstance(MultiKey.class, 0);
      MultiKey<MultiKey<Object>> multiKey1 = new MultiKey<MultiKey<Object>>(multiKeyArray0);
      MultiKey<Object>[] multiKeyArray1 = multiKey1.getKeys();
      assertNotSame(multiKeyArray0, multiKeyArray1);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Integer integer0 = new Integer(0);
      Integer integer1 = new Integer(1);
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integer0, integer1, integer0);
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.hashCode();
      Object object0 = new Object();
      Object object1 = new Object();
      MultiKey<Object> multiKey1 = new MultiKey<Object>("MultiKey[0, 1, 0]", (Object) null, object0, object1, "MultiKey[0, 1, 0]");
      multiKey1.toString();
      MultiKey<Object> multiKey2 = new MultiKey<Object>("MultiKey[0, 1, 0]", "MultiKey[0, 1, 0]", multiKey1);
      boolean boolean0 = multiKey2.equals(multiKey1);
      assertFalse(boolean0);
      
      String string0 = multiKey0.toString();
      assertEquals("MultiKey[0, 1, 0]", string0);
      
      multiKey2.getKey(0);
      multiKey2.getKey(0);
      Object[] objectArray0 = new Object[3];
      objectArray0[1] = (Object) "MultiKey[MultiKey[0, 1, 0], null, java.lang.Object@24afe254, java.lang.Object@3f2ba61a, MultiKey[0, 1, 0]]";
      objectArray0[2] = (Object) "MultiKey[0, 1, 0]";
      MultiKey<Object> multiKey3 = new MultiKey<Object>(objectArray0, true);
      MultiKey<MultiKey<Object>> multiKey4 = new MultiKey<MultiKey<Object>>(multiKey1, multiKey2, multiKey3);
      multiKey4.getKeys();
      Object object2 = multiKey3.getKey(0);
      assertNull(object2);
      assertFalse(multiKey3.equals((Object)multiKey2));
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      MultiKey<Integer>[] multiKeyArray0 = (MultiKey<Integer>[]) Array.newInstance(MultiKey.class, 8);
      int int0 = 0;
      Integer integer0 = new Integer(0);
      int int1 = 841;
      Integer integer1 = new Integer(841);
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integer0, integer0, integer0, integer1);
      multiKeyArray0[0] = multiKey0;
      int int2 = 0;
      Integer integer2 = new Integer(0);
      MultiKey<Integer> multiKey1 = new MultiKey<Integer>(integer1, (Integer) null, integer2);
      multiKeyArray0[1] = multiKey1;
      Integer[] integerArray0 = null;
      boolean boolean0 = false;
      MultiKey<Integer> multiKey2 = null;
//      try {
        multiKey2 = new MultiKey<Integer>((Integer[]) null, false);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // The array of keys must not be null
//         //
//         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
//      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Integer integer0 = new Integer(0);
      Integer integer1 = new Integer(1);
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integer0, integer1, integer0);
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.hashCode();
      Object object0 = new Object();
      Object object1 = new Object();
      MultiKey<Object> multiKey1 = new MultiKey<Object>("MultiKey[0, 1, 0]", (Object) null, object0, object1, "MultiKey[0, 1, 0]");
      multiKey1.toString();
      MultiKey<Object> multiKey2 = new MultiKey<Object>("MultiKey[0, 1, 0]", "MultiKey[0, 1, 0]", multiKey1);
      boolean boolean0 = multiKey2.equals(multiKey1);
      assertFalse(boolean0);
      
      String string0 = multiKey0.toString();
      assertEquals("MultiKey[0, 1, 0]", string0);
      
      multiKey2.getKey(0);
      multiKey2.getKey(0);
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) "MultiKey[0, 1, 0]";
      objectArray0[1] = (Object) "MultiKey[MultiKey[0, 1, 0], null, java.lang.Object@513f6e34, java.lang.Object@261a02a6, MultiKey[0, 1, 0]]";
      objectArray0[2] = (Object) "MultiKey[0, 1, 0]";
      MultiKey<Object> multiKey3 = new MultiKey<Object>(objectArray0, true);
      MultiKey<MultiKey<Object>> multiKey4 = new MultiKey<MultiKey<Object>>(multiKey1, multiKey2, multiKey3);
      multiKey4.getKeys();
      assertFalse(multiKey3.equals((Object)multiKey2));
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Integer[] integerArray0 = new Integer[1];
      Integer integer0 = new Integer(0);
      integerArray0[0] = integer0;
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integerArray0);
      // Undeclared exception!
//      try { 
        multiKey0.getKey((-216));
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // -216
//         //
//         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
//      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      String[] stringArray0 = new String[5];
      stringArray0[0] = "jEbL561A@K1sN25";
      stringArray0[1] = "e]7uUiC@_.U";
      stringArray0[2] = "";
      stringArray0[3] = "The array of keys must not be null";
      stringArray0[4] = "Dd";
      MultiKey<String> multiKey0 = new MultiKey<String>(stringArray0, true);
      multiKey0.toString();
      MultiKey<Object> multiKey1 = new MultiKey<Object>("", "The array of keys must not be null", "");
      multiKey1.toString();
      multiKey1.toString();
      multiKey1.toString();
      multiKey1.toString();
      multiKey1.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey1.toString();
      multiKey1.equals("The array of keys must not be null");
      multiKey0.toString();
      multiKey0.toString();
      multiKey1.getKeys();
      multiKey0.toString();
      multiKey0.equals("Dd");
      multiKey0.hashCode();
      multiKey1.toString();
      multiKey0.hashCode();
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Object[] objectArray0 = new Object[7];
      MultiKey<String> multiKey0 = new MultiKey<String>("]8Os.^%i]Mh$", "", "", "");
      int int0 = (-1432);
      // Undeclared exception!
//      try { 
        multiKey0.getKey((-1432));
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // -1432
//         //
//         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
//      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("", "", "[W@>s,oz<\u0006-87[dq", "", "MultiKey");
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.equals("MultiKey");
      Object[] objectArray0 = new Object[1];
      multiKey0.toString();
      objectArray0[0] = (Object) "MultiKey";
      MultiKey<Object> multiKey1 = new MultiKey<Object>(objectArray0, true);
      multiKey1.toString();
      multiKey0.toString();
      multiKey1.toString();
      multiKey1.toString();
      multiKey1.size();
      multiKey0.getKey(0);
      MultiKey<MultiKey<Object>> multiKey2 = null;
//      try {
        multiKey2 = new MultiKey<MultiKey<Object>>((MultiKey<Object>[]) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // The array of keys must not be null
//         //
//         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
//      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Object[] objectArray0 = new Object[8];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      Object object2 = new Object();
      objectArray0[2] = object2;
      Object object3 = new Object();
      objectArray0[3] = object3;
      Object object4 = new Object();
      objectArray0[4] = object4;
      Object object5 = new Object();
      objectArray0[5] = object5;
      Object object6 = new Object();
      objectArray0[6] = object6;
      Object object7 = new Object();
      objectArray0[7] = object7;
      MultiKey<Object> multiKey0 = new MultiKey<Object>(objectArray0, false);
      // Undeclared exception!
//      try { 
        multiKey0.getKey(3808);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 3808
//         //
//         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
//      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Integer integer0 = new Integer(1018);
      Integer integer1 = new Integer(1018);
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integer0, integer1);
      int int0 = 0;
      Object object0 = multiKey0.getKey(0);
      Object object1 = null;
      Integer integer2 = new Integer(106);
      MultiKey<Object> multiKey1 = new MultiKey<Object>((Object) null, integer1, object0);
      // Undeclared exception!
//      try { 
        multiKey1.getKey(210);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 210
//         //
//         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
//      }
  }
}
