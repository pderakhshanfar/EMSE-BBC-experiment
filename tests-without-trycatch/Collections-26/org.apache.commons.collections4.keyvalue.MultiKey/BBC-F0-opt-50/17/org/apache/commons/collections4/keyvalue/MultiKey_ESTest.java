/*
 * This file was automatically generated by EvoSuite
 * Wed Oct 20 12:35:36 GMT 2021
 */

package org.apache.commons.collections4.keyvalue;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.lang.reflect.Array;
import org.apache.commons.collections4.keyvalue.MultiKey;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class MultiKey_ESTest extends MultiKey_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("\"&yLNrvO", "\"&yLNrvO", "", "\"&yLNrvO");
      Integer[] integerArray0 = new Integer[0];
      MultiKey<Integer> multiKey1 = new MultiKey<Integer>(integerArray0, false);
      multiKey1.getKeys();
      // Undeclared exception!
//      try { 
        multiKey0.getKey(2826);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 2826
//         //
//         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
//      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      Integer integer0 = new Integer((-224));
      Integer integer1 = new Integer((-224));
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integer0, integer1, integer0, integer1, (Integer) null);
      multiKey0.size();
      String[] stringArray0 = new String[0];
      MultiKey<String> multiKey1 = new MultiKey<String>(stringArray0);
      multiKey1.size();
      MultiKey<Object> multiKey2 = new MultiKey<Object>(stringArray0);
      String string0 = multiKey2.toString();
      assertEquals("MultiKey[]", string0);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      Object[] objectArray0 = new Object[6];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      Object object2 = new Object();
      objectArray0[2] = object2;
      Object object3 = new Object();
      objectArray0[3] = object3;
      Object object4 = new Object();
      objectArray0[4] = object4;
      Object object5 = new Object();
      objectArray0[5] = object5;
      MultiKey<Object> multiKey0 = new MultiKey<Object>(objectArray0);
      Object object6 = new Object();
      MultiKey<Object> multiKey1 = new MultiKey<Object>(object6, object5);
      MultiKey<MultiKey<Object>> multiKey2 = new MultiKey<MultiKey<Object>>(multiKey0, multiKey0, multiKey0, multiKey1, multiKey1);
      MultiKey<MultiKey<Object>> multiKey3 = new MultiKey<MultiKey<Object>>(multiKey0, multiKey0, multiKey0, multiKey0, multiKey0);
      MultiKey<String> multiKey4 = new MultiKey<String>("", "=mSpb", "x>YrXjzV3,", "");
      MultiKey<Object> multiKey5 = new MultiKey<Object>("", (Object) null, multiKey1, "x>YrXjzV3,", "");
      Object object7 = multiKey5.getKey(1);
      assertNull(object7);
      
      MultiKey<String> multiKey6 = new MultiKey<String>("=mSpb", "", "x>YrXjzV3,", "},}j^]??MmS&.RwZ", "");
      multiKey6.getKey(0);
      boolean boolean0 = multiKey3.equals("=mSpb");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      Integer integer0 = new Integer(0);
      Integer integer1 = new Integer(2);
      Object object0 = new Object();
      Object object1 = new Object();
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) integer0;
      objectArray0[1] = (Object) integer0;
      objectArray0[2] = object1;
      objectArray0[3] = (Object) integer0;
      objectArray0[4] = object0;
      objectArray0[5] = (Object) integer1;
      objectArray0[6] = (Object) integer1;
      objectArray0[7] = (Object) integer1;
      objectArray0[8] = (Object) integer0;
      MultiKey<Object> multiKey0 = new MultiKey<Object>(objectArray0);
      Object object2 = new Object();
      String[] stringArray0 = new String[6];
      stringArray0[0] = "Y";
      stringArray0[1] = "";
      stringArray0[2] = "Y";
      stringArray0[3] = "";
      stringArray0[4] = "";
      stringArray0[5] = "";
      MultiKey<String> multiKey1 = new MultiKey<String>(stringArray0);
      MultiKey<Object> multiKey2 = new MultiKey<Object>(multiKey0, (Object) null);
      multiKey0.toString();
      MultiKey<MultiKey<Object>> multiKey3 = new MultiKey<MultiKey<Object>>(multiKey0, multiKey0, multiKey0, multiKey2, multiKey2);
      boolean boolean0 = multiKey3.equals(multiKey0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      Object[] objectArray0 = new Object[6];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      Object object2 = new Object();
      objectArray0[2] = object2;
      MultiKey<Object> multiKey0 = new MultiKey<Object>(objectArray0);
      multiKey0.toString();
      Integer integer0 = new Integer((-2501));
      boolean boolean0 = multiKey0.equals(multiKey0);
      Integer integer1 = new Integer((-2706));
      boolean boolean1 = multiKey0.equals(integer1);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      MultiKey<Object> multiKey0 = new MultiKey<Object>("", "", "", "");
      MultiKey<String> multiKey1 = null;
//      try {
        multiKey1 = new MultiKey<String>((String[]) null, false);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // The array of keys must not be null
//         //
//         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
//      }
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      MultiKey<Object> multiKey0 = new MultiKey<Object>((Object) null, (Object) null);
      multiKey0.toString();
      multiKey0.toString();
      boolean boolean0 = multiKey0.equals("MultiKey[null, null]");
      assertFalse(boolean0);
      
      multiKey0.toString();
      MultiKey<Integer>[] multiKeyArray0 = (MultiKey<Integer>[]) Array.newInstance(MultiKey.class, 8);
      Integer integer0 = new Integer(0);
      MultiKey<Integer> multiKey1 = new MultiKey<Integer>(integer0, (Integer) null, integer0);
      multiKeyArray0[0] = multiKey1;
      Integer integer1 = new Integer(0);
      Integer integer2 = new Integer(0);
      Integer integer3 = new Integer(0);
      MultiKey<Integer> multiKey2 = new MultiKey<Integer>(integer1, (Integer) null, integer2, integer3);
      multiKeyArray0[1] = multiKey2;
      Integer integer4 = new Integer((-5185));
      Integer integer5 = new Integer((-810));
      Integer integer6 = new Integer(3787);
      MultiKey<Integer> multiKey3 = new MultiKey<Integer>(integer4, integer5, integer6);
      multiKeyArray0[2] = multiKey3;
      Integer integer7 = new Integer(0);
      Integer integer8 = new Integer(0);
      MultiKey<Integer> multiKey4 = new MultiKey<Integer>(integer7, integer8);
      multiKeyArray0[3] = multiKey4;
      Integer integer9 = new Integer(2);
      MultiKey<Integer> multiKey5 = new MultiKey<Integer>(integer3, integer9);
      multiKeyArray0[4] = multiKey5;
      Integer integer10 = new Integer((-5185));
      Integer integer11 = new Integer(0);
      Integer integer12 = new Integer(65);
      MultiKey<Integer> multiKey6 = new MultiKey<Integer>(integer10, integer11, (Integer) null, integer12);
      multiKeyArray0[5] = multiKey6;
      Integer[] integerArray0 = new Integer[7];
      integerArray0[0] = integer5;
      integerArray0[1] = integer1;
      integerArray0[2] = integer9;
      integerArray0[3] = integer0;
      integerArray0[4] = integer4;
      integerArray0[5] = null;
      integerArray0[6] = null;
      MultiKey<Integer> multiKey7 = new MultiKey<Integer>(integerArray0);
      multiKeyArray0[6] = multiKey7;
      Integer integer13 = new Integer(3135);
      Integer integer14 = new Integer((-810));
      MultiKey<Integer> multiKey8 = new MultiKey<Integer>(integer13, integer14, (Integer) null);
      multiKeyArray0[7] = multiKey8;
      MultiKey<MultiKey<Integer>> multiKey9 = new MultiKey<MultiKey<Integer>>(multiKeyArray0, false);
      String string0 = multiKey9.toString();
      assertEquals("MultiKey[MultiKey[0, null, 0], MultiKey[0, null, 0, 0], MultiKey[-5185, -810, 3787], MultiKey[0, 0], MultiKey[0, 2], MultiKey[-5185, 0, null, 65], MultiKey[-810, 0, 2, 0, -5185, null, null], MultiKey[3135, -810, null]]", string0);
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      String string0 = "DPPArB";
      String string1 = "org.apache.commons.collections4.keyvalue.MultiKey";
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) "DPPArB";
      objectArray0[1] = (Object) "org.apache.commons.collections4.keyvalue.MultiKey";
      objectArray0[2] = (Object) "org.apache.commons.collections4.keyvalue.MultiKey";
      MultiKey<Object> multiKey0 = new MultiKey<Object>(objectArray0);
      multiKey0.getKey(0);
      Integer integer0 = new Integer(2770);
      multiKey0.toString();
      Object object0 = new Object();
      MultiKey<Object> multiKey1 = new MultiKey<Object>("DPPArB", "org.apache.commons.collections4.keyvalue.MultiKey", "DPPArB", integer0, object0);
      multiKey0.toString();
      multiKey1.toString();
      multiKey1.toString();
      multiKey1.size();
      multiKey1.toString();
      multiKey1.toString();
      multiKey1.getKeys();
      MultiKey<Integer> multiKey2 = new MultiKey<Integer>(integer0, integer0);
      multiKey1.toString();
      multiKey2.hashCode();
      multiKey2.toString();
      multiKey2.toString();
      MultiKey<MultiKey<Integer>> multiKey3 = new MultiKey<MultiKey<Integer>>(multiKey2, multiKey2, multiKey2, multiKey2, multiKey2);
      // Undeclared exception!
//      try { 
        multiKey3.getKey(5);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 5
//         //
//         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
//      }
  }

  @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      MultiKey<String> multiKey0 = null;
//      try {
        multiKey0 = new MultiKey<String>((String[]) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // The array of keys must not be null
//         //
//         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
//      }
  }
}
