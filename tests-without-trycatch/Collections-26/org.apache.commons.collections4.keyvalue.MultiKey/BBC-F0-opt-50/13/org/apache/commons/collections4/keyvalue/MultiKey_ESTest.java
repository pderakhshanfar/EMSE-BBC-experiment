/*
 * This file was automatically generated by EvoSuite
 * Wed Oct 20 12:23:36 GMT 2021
 */

package org.apache.commons.collections4.keyvalue;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.lang.reflect.Array;
import org.apache.commons.collections4.keyvalue.MultiKey;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class MultiKey_ESTest extends MultiKey_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Integer integer0 = new Integer(2148);
      Integer integer1 = new Integer(3451);
      Integer integer2 = new Integer((-171));
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integer0, integer1, integer1, integer2);
      multiKey0.size();
      String[] stringArray0 = new String[1];
      MultiKey<String> multiKey1 = new MultiKey<String>(stringArray0);
      multiKey1.toString();
      String string0 = multiKey1.toString();
      assertEquals("MultiKey[null]", string0);
      
      boolean boolean0 = multiKey1.equals(multiKey1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      MultiKey<String>[] multiKeyArray0 = (MultiKey<String>[]) Array.newInstance(MultiKey.class, 3);
      MultiKey<String> multiKey0 = new MultiKey<String>((String) null, (String) null);
      multiKeyArray0[0] = multiKey0;
      MultiKey<String> multiKey1 = new MultiKey<String>("", "8gt)wv1|l&", "", "", "org.apache.commons.collections4.keyvalue.MultiKey");
      multiKeyArray0[1] = multiKey1;
      MultiKey<String> multiKey2 = new MultiKey<String>("org.apache.commons.collections4.keyvalue.MultiKey", "{ ", "org.apache.commons.collections4.keyvalue.MultiKey", "The array of keys must not be null", (String) null);
      assertFalse(multiKey2.equals((Object)multiKey0));
      
      multiKeyArray0[2] = multiKey2;
      MultiKey<MultiKey<String>> multiKey3 = new MultiKey<MultiKey<String>>(multiKeyArray0);
      MultiKey<Object> multiKey4 = new MultiKey<Object>((Object[]) multiKeyArray0, false);
      boolean boolean0 = multiKey3.equals(multiKey4);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Integer integer0 = new Integer((-43));
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integer0, integer0);
      MultiKey<Object>[] multiKeyArray0 = (MultiKey<Object>[]) Array.newInstance(MultiKey.class, 0);
      MultiKey<MultiKey<Object>> multiKey1 = new MultiKey<MultiKey<Object>>(multiKeyArray0, true);
      MultiKey<Object>[] multiKeyArray1 = multiKey1.getKeys();
      assertNotSame(multiKeyArray0, multiKeyArray1);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Integer integer0 = new Integer(2148);
      MultiKey<Object> multiKey0 = new MultiKey<Object>(integer0, integer0, integer0);
      multiKey0.toString();
      multiKey0.toString();
      boolean boolean0 = multiKey0.equals(integer0);
      assertFalse(boolean0);
      
      Integer integer1 = new Integer(3451);
      Integer integer2 = new Integer((-171));
      MultiKey<Integer> multiKey1 = new MultiKey<Integer>(integer0, integer1, integer1, integer2);
      multiKey1.size();
      String[] stringArray0 = new String[1];
      stringArray0[0] = "MultiKey[2148, 2148, 2148]";
      MultiKey<String> multiKey2 = new MultiKey<String>(stringArray0);
      String string0 = multiKey2.toString();
      assertEquals("MultiKey[MultiKey[2148, 2148, 2148]]", string0);
      
      MultiKey<String> multiKey3 = new MultiKey<String>(stringArray0, false);
      boolean boolean1 = multiKey2.equals(multiKey3);
      assertFalse(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      String[] stringArray0 = new String[0];
      MultiKey<String> multiKey0 = new MultiKey<String>(stringArray0);
      multiKey0.toString();
      MultiKey<Object> multiKey1 = new MultiKey<Object>((Object[]) stringArray0, false);
      int int0 = multiKey1.size();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Integer integer0 = new Integer((-23));
      Integer integer1 = new Integer(0);
      Integer integer2 = new Integer((-525));
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>((Integer) null, (Integer) null, integer1, integer2, integer0);
      multiKey0.toString();
      multiKey0.toString();
      Integer integer3 = new Integer(2368);
      Object object0 = new Object();
      Integer integer4 = new Integer(1867);
      MultiKey<Object> multiKey1 = new MultiKey<Object>((Object) null, integer3, object0, integer4);
      multiKey1.toString();
      multiKey0.toString();
      multiKey0.equals(multiKey1);
      MultiKey<String> multiKey2 = new MultiKey<String>("MultiKey", "Czxc(}^Xe,D", (String) null, "MultiKey[null, null, 0, -525, -23]", "");
      multiKey2.toString();
      multiKey2.hashCode();
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      String[] stringArray0 = null;
      Integer[] integerArray0 = null;
      MultiKey<Integer> multiKey0 = null;
//      try {
        multiKey0 = new MultiKey<Integer>((Integer[]) null, false);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // The array of keys must not be null
//         //
//         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
//      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Object[] objectArray0 = new Object[8];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      MultiKey<Object> multiKey0 = new MultiKey<Object>(objectArray0, true);
      Integer[] integerArray0 = new Integer[4];
      int int0 = 0;
      Integer integer0 = new Integer(0);
      integerArray0[0] = integer0;
      Integer integer1 = new Integer(0);
      integerArray0[1] = integer1;
      Integer integer2 = new Integer(int0);
      integerArray0[2] = integer2;
      Integer integer3 = new Integer(int0);
      integerArray0[3] = integer3;
      MultiKey<Integer> multiKey1 = new MultiKey<Integer>(integerArray0);
      MultiKey<Object> multiKey2 = new MultiKey<Object>(object1, object0, object0, multiKey0, multiKey1);
      Object object2 = multiKey2.getKey(int0);
      objectArray0[2] = object2;
      Integer integer4 = multiKey1.getKey(0);
      objectArray0[3] = (Object) integer4;
      Object object3 = new Object();
      objectArray0[4] = object3;
      MultiKey<String> multiKey3 = new MultiKey<String>("", "BJTt;QKL@&ygCN", (String) null);
      multiKey3.getKey(2);
      objectArray0[5] = (Object) null;
      String[] stringArray0 = new String[4];
      stringArray0[0] = null;
      stringArray0[1] = "BJTt;QKL@&ygCN";
      stringArray0[2] = null;
      stringArray0[3] = "";
      MultiKey<String> multiKey4 = new MultiKey<String>(stringArray0);
      multiKey4.getKey(0);
      objectArray0[6] = (Object) null;
      // Undeclared exception!
//      try { 
        multiKey0.getKey(72);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 72
//         //
//         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
//      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      MultiKey<String> multiKey0 = null;
//      try {
        multiKey0 = new MultiKey<String>((String[]) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // The array of keys must not be null
//         //
//         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
//      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Integer integer0 = new Integer(2152);
      MultiKey<Object> multiKey0 = new MultiKey<Object>(integer0, integer0, integer0);
      Object[] objectArray0 = multiKey0.getKeys();
      assertEquals(3, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Object[] objectArray0 = new Object[5];
      MultiKey<String> multiKey0 = new MultiKey<String>("", "e'\"D=?q:~((fij6uk");
      multiKey0.getKey(0);
      objectArray0[0] = (Object) "";
      Integer[] integerArray0 = new Integer[1];
      Integer integer0 = new Integer(5);
      integerArray0[0] = integer0;
      MultiKey<Integer> multiKey1 = new MultiKey<Integer>(integerArray0, false);
      Integer integer1 = multiKey1.getKey(0);
      objectArray0[1] = (Object) integer1;
      Object object0 = new Object();
      objectArray0[2] = object0;
      MultiKey<Object> multiKey2 = new MultiKey<Object>("", multiKey1, "", integer1);
      MultiKey<MultiKey<Object>> multiKey3 = new MultiKey<MultiKey<Object>>(multiKey2, multiKey2);
      MultiKey<Object> multiKey4 = multiKey3.getKey(1);
      objectArray0[3] = (Object) multiKey4;
      Object object1 = new Object();
      objectArray0[4] = object1;
      MultiKey<Object> multiKey5 = new MultiKey<Object>(objectArray0);
      multiKey5.getKey(0);
      int int0 = multiKey5.size();
      assertEquals(5, int0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      String[] stringArray0 = new String[2];
      stringArray0[0] = "";
      stringArray0[1] = "";
      MultiKey<String> multiKey0 = new MultiKey<String>(stringArray0);
      multiKey0.hashCode();
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      MultiKey<Object>[] multiKeyArray0 = (MultiKey<Object>[]) Array.newInstance(MultiKey.class, 7);
      MultiKey<String> multiKey0 = new MultiKey<String>(":AdNv", ":AdNv", ":AdNv");
      MultiKey<Object> multiKey1 = new MultiKey<Object>(":AdNv", multiKey0);
      multiKeyArray0[0] = multiKey1;
      MultiKey<Object> multiKey2 = new MultiKey<Object>(multiKey1, multiKey1, ":AdNv", ":AdNv", ":AdNv");
      multiKeyArray0[1] = multiKey2;
      Object object0 = new Object();
      Integer integer0 = new Integer(1);
      MultiKey<Object> multiKey3 = new MultiKey<Object>(multiKey0, object0, integer0);
      multiKeyArray0[2] = multiKey3;
      Object object1 = new Object();
      MultiKey<Object> multiKey4 = new MultiKey<Object>(object1, multiKey2);
      multiKeyArray0[3] = multiKey4;
      Integer integer1 = new Integer((-2977));
      Integer integer2 = new Integer((-2977));
      MultiKey<Object> multiKey5 = new MultiKey<Object>((Object[]) multiKeyArray0, false);
      MultiKey<Object> multiKey6 = new MultiKey<Object>("", integer1, integer2, multiKey5);
      multiKeyArray0[4] = multiKey6;
      MultiKey<Object> multiKey7 = new MultiKey<Object>("", "");
      multiKeyArray0[5] = multiKey7;
      Object object2 = new Object();
      Integer[] integerArray0 = new Integer[3];
      integerArray0[0] = integer0;
      integerArray0[1] = integer0;
      integerArray0[2] = integer2;
      MultiKey<Integer> multiKey8 = new MultiKey<Integer>(integerArray0);
      Object object3 = multiKey8.getKey(0);
      MultiKey<Object> multiKey9 = new MultiKey<Object>(object2, integer1, object3);
      multiKeyArray0[6] = multiKey9;
      MultiKey<MultiKey<Object>> multiKey10 = new MultiKey<MultiKey<Object>>(multiKeyArray0, false);
      MultiKey<Object> multiKey11 = multiKey10.getKey(1);
      assertEquals(5, multiKey11.size());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Object object0 = new Object();
      MultiKey<Object> multiKey0 = new MultiKey<Object>(object0, object0, object0, object0, object0);
      multiKey0.equals(object0);
      MultiKey<Object> multiKey1 = null;
      multiKey0.toString();
      Integer integer0 = new Integer(0);
      MultiKey<Integer> multiKey2 = new MultiKey<Integer>(integer0, integer0);
      // Undeclared exception!
//      try { 
        multiKey2.getKey((-858));
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // -858
//         //
//         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
//      }
  }
}
