/*
 * This file was automatically generated by EvoSuite
 * Fri Oct 22 17:39:53 GMT 2021
 */

package org.apache.commons.collections4.keyvalue;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.lang.reflect.Array;
import org.apache.commons.collections4.keyvalue.MultiKey;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class MultiKey_ESTest extends MultiKey_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("2Dm~uu^}:`=z", "zK*;P!4GFPO?, W%6$3]", "org.apache.commons.collections4.keyvalue.MultiKey", "2Dm~uu^}:`=z", "MultiKey");
      MultiKey<Integer>[] multiKeyArray0 = (MultiKey<Integer>[]) Array.newInstance(MultiKey.class, 0);
      MultiKey<MultiKey<Integer>> multiKey1 = new MultiKey<MultiKey<Integer>>(multiKeyArray0, false);
      MultiKey<Integer>[] multiKeyArray1 = multiKey1.getKeys();
      assertFalse(multiKeyArray1.equals((Object)multiKeyArray0));
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>((String) null, "@]5", (String) null);
      String[] stringArray0 = new String[0];
      MultiKey<String> multiKey1 = new MultiKey<String>(stringArray0, false);
      MultiKey<String> multiKey2 = new MultiKey<String>(stringArray0, false);
      MultiKey<MultiKey<String>> multiKey3 = new MultiKey<MultiKey<String>>(multiKey1, multiKey2, multiKey1);
      multiKey3.toString();
      multiKey3.hashCode();
      MultiKey<String> multiKey4 = new MultiKey<String>((String) null, (String) null, "BN9w\"{lY?'_", (String) null, "MultiKey[MultiKey[], MultiKey[], MultiKey[]]");
      multiKey0.equals(multiKey4);
      multiKey1.toString();
      MultiKey<String> multiKey5 = new MultiKey<String>(stringArray0, false);
      multiKey5.size();
      MultiKey<String> multiKey6 = new MultiKey<String>(stringArray0, true);
      MultiKey<String> multiKey7 = new MultiKey<String>(stringArray0);
      MultiKey<MultiKey<String>> multiKey8 = new MultiKey<MultiKey<String>>(multiKey6, multiKey7, multiKey5);
      multiKey3.toString();
      multiKey8.hashCode();
      MultiKey<String> multiKey9 = new MultiKey<String>("", "", "", ",@/2-Jg?]iSiKsl*+", "Po{n.");
      multiKey6.equals("Bz.,V'rg{X|");
      MultiKey<Object> multiKey10 = new MultiKey<Object>((Object[]) stringArray0, true);
      multiKey10.toString();
      // Undeclared exception!
//      try { 
        multiKey10.getKey(0);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 0
//         //
//         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
//      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>(">]<7{.(R`", "Gr|T\";ERDtY\"Er");
      boolean boolean0 = multiKey0.equals(multiKey0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>(">]<7{.(R`", "Gr|T\";ERDtY\"Er");
      String string0 = "bxe1yiM";
      multiKey0.toString();
      multiKey0.size();
      MultiKey<MultiKey<String>> multiKey1 = new MultiKey<MultiKey<String>>(multiKey0, multiKey0, multiKey0);
      MultiKey<String> multiKey2 = new MultiKey<String>("", ">]<7{.(R`", "MultiKey[>]<7{.(R`, Gr|T\";ERDtY\"Er]");
      multiKey2.toString();
      multiKey1.toString();
      multiKey1.hashCode();
      MultiKey<String> multiKey3 = null;
//      try {
        multiKey3 = new MultiKey<String>((String[]) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // The array of keys must not be null
//         //
//         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
//      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Integer integer0 = new Integer(0);
      Integer integer1 = new Integer(1076);
      Integer integer2 = new Integer(0);
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integer0, integer1, integer2, integer0);
      multiKey0.toString();
      Integer integer3 = new Integer(0);
      Integer integer4 = new Integer(0);
      Integer integer5 = new Integer(2);
      MultiKey<Integer> multiKey1 = new MultiKey<Integer>(integer1, integer5);
      multiKey1.toString();
      Integer integer6 = new Integer(9);
      Integer[] integerArray0 = new Integer[0];
      MultiKey<Integer> multiKey2 = new MultiKey<Integer>(integerArray0);
      MultiKey<String> multiKey3 = new MultiKey<String>("", "", "");
      multiKey2.equals(multiKey3);
      MultiKey<Object> multiKey4 = new MultiKey<Object>(integerArray0);
      multiKey4.hashCode();
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Object[] objectArray0 = new Object[7];
      Object object0 = new Object();
      objectArray0[0] = object0;
      MultiKey<String> multiKey0 = new MultiKey<String>((String) null, "");
      multiKey0.getKey(0);
      objectArray0[1] = (Object) null;
      multiKey0.getKey(0);
      objectArray0[2] = (Object) null;
      Object object1 = new Object();
      objectArray0[3] = object1;
      MultiKey<Object> multiKey1 = new MultiKey<Object>(objectArray0);
      Object object2 = new Object();
      MultiKey<Object> multiKey2 = new MultiKey<Object>(multiKey1, objectArray0[1], object1, objectArray0[1], object2);
      Object object3 = multiKey2.getKey(0);
      objectArray0[4] = object3;
      Object object4 = multiKey2.getKey(0);
      objectArray0[5] = object4;
      multiKey1.toString();
      int int0 = 1049;
      // Undeclared exception!
//      try { 
        multiKey0.getKey(1049);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 1049
//         //
//         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
//      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      String[] stringArray0 = null;
      MultiKey<String> multiKey0 = null;
//      try {
        multiKey0 = new MultiKey<String>((String[]) null, true);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // The array of keys must not be null
//         //
//         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
//      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Integer integer0 = new Integer(0);
      Integer integer1 = new Integer(0);
      Integer integer2 = new Integer(0);
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integer0, integer1, integer0, integer2, integer2);
      String string0 = multiKey0.toString();
      assertEquals("MultiKey[0, 0, 0, 0, 0]", string0);
      
      MultiKey<String> multiKey1 = new MultiKey<String>("", "0,qQ~AA9`j4", "u9rj");
      String string1 = multiKey1.getKey(0);
      assertEquals("", string1);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Integer integer0 = new Integer(0);
      Integer integer1 = new Integer(1076);
      Integer integer2 = new Integer(0);
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integer0, integer1, integer2, integer0);
      multiKey0.toString();
      Object object0 = multiKey0.getKey(0);
      assertEquals(0, object0);
      
      String string0 = multiKey0.toString();
      assertEquals("MultiKey[0, 1076, 0, 0]", string0);
      
      Object object1 = new Object();
      MultiKey<Object> multiKey1 = new MultiKey<Object>(object1, (Object) null, integer0);
      multiKey1.toString();
      MultiKey<Object> multiKey2 = new MultiKey<Object>(object0, integer0, multiKey0, (Object) null, multiKey1);
      multiKey2.hashCode();
      MultiKey<MultiKey<Object>> multiKey3 = new MultiKey<MultiKey<Object>>(multiKey2, multiKey2);
      Object object2 = new Object();
      boolean boolean0 = multiKey3.equals(object2);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Integer integer0 = new Integer((-1277));
      Integer integer1 = new Integer((-929));
      Integer integer2 = new Integer(0);
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integer0, integer1, integer2, (Integer) null);
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) null;
      objectArray0[1] = (Object) integer0;
      objectArray0[2] = (Object) null;
      objectArray0[3] = (Object) null;
      objectArray0[4] = (Object) null;
      objectArray0[5] = (Object) integer1;
      MultiKey<Object> multiKey1 = new MultiKey<Object>(objectArray0, true);
      multiKey1.toString();
      multiKey1.toString();
      MultiKey<Integer>[] multiKeyArray0 = (MultiKey<Integer>[]) Array.newInstance(MultiKey.class, 6);
      multiKeyArray0[0] = multiKey0;
      multiKeyArray0[1] = multiKey0;
      multiKeyArray0[2] = multiKey0;
      multiKeyArray0[3] = multiKey0;
      multiKeyArray0[4] = multiKey0;
      multiKeyArray0[5] = multiKey0;
      MultiKey<MultiKey<Integer>> multiKey2 = new MultiKey<MultiKey<Integer>>(multiKeyArray0, false);
      MultiKey<Integer>[] multiKeyArray1 = multiKey2.getKeys();
      assertFalse(multiKeyArray1.equals((Object)multiKeyArray0));
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Integer[] integerArray0 = new Integer[0];
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integerArray0);
      multiKey0.toString();
      multiKey0.toString();
      int int0 = 455;
      // Undeclared exception!
//      try { 
        multiKey0.getKey(455);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 455
//         //
//         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
//      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("", "", "", "$~H/4n|Ya)1]y(@JH2");
      multiKey0.toString();
      multiKey0.toString();
      Integer integer0 = new Integer((-487));
      Integer integer1 = new Integer((-487));
      Integer integer2 = new Integer(0);
      MultiKey<Integer> multiKey1 = new MultiKey<Integer>(integer0, integer1, integer2);
      MultiKey<Object> multiKey2 = new MultiKey<Object>(multiKey1, multiKey0, multiKey0);
      // Undeclared exception!
//      try { 
        multiKey2.getKey((-487));
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // -487
//         //
//         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
//      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      MultiKey<Object> multiKey0 = new MultiKey<Object>("", "");
      MultiKey<Object> multiKey1 = new MultiKey<Object>("", multiKey0);
      multiKey1.toString();
      Integer integer0 = new Integer((-1));
      Integer integer1 = new Integer((-1));
      MultiKey<Integer> multiKey2 = new MultiKey<Integer>(integer0, integer0, integer1, integer0, integer0);
      multiKey2.toString();
      multiKey2.toString();
      multiKey2.getKey(0);
      MultiKey<String> multiKey3 = new MultiKey<String>("", (String) null, "");
      multiKey3.hashCode();
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Object[] objectArray0 = new Object[2];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      MultiKey<Object> multiKey0 = new MultiKey<Object>(objectArray0, true);
      int int0 = multiKey0.size();
      assertEquals(2, int0);
  }
}
