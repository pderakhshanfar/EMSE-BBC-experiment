/*
 * This file was automatically generated by EvoSuite
 * Wed Oct 13 20:48:53 GMT 2021
 */

package org.apache.commons.collections4.keyvalue;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.collections4.keyvalue.MultiKey;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class MultiKey_ESTest extends MultiKey_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      MultiKey<Object> multiKey0 = new MultiKey<Object>((Object) null, (Object) null, (Object) null, (Object) null, (Object) null);
      boolean boolean0 = multiKey0.equals(multiKey0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("mq", (String) null, "");
      multiKey0.toString();
      MultiKey<String> multiKey1 = new MultiKey<String>("mq", (String) null);
      Integer integer0 = new Integer(3);
      Integer integer1 = new Integer((-3718));
      String[] stringArray0 = new String[6];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "";
      stringArray0[3] = "";
      stringArray0[4] = null;
      stringArray0[5] = null;
      MultiKey<String> multiKey2 = new MultiKey<String>(stringArray0);
      MultiKey<Object> multiKey3 = new MultiKey<Object>(multiKey1, integer0, integer1, multiKey2);
      Object object0 = new Object();
      Object object1 = new Object();
      multiKey3.toString();
      boolean boolean0 = multiKey3.equals(object1);
      MultiKey<String> multiKey4 = new MultiKey<String>("", "", "", "40,U^N5@J8\"%&}?8", stringArray0[4]);
      multiKey1.toString();
      MultiKey<String> multiKey5 = new MultiKey<String>(stringArray0[4], "");
      String string0 = multiKey4.toString();
      assertEquals("MultiKey[, , , 40,U^N5@J8\"%&}?8, null]", string0);
      
      MultiKey<MultiKey<String>> multiKey6 = new MultiKey<MultiKey<String>>(multiKey2, multiKey0, multiKey5, multiKey2);
      Object[] objectArray0 = multiKey3.getKeys();
      MultiKey<Object> multiKey7 = new MultiKey<Object>(objectArray0);
      boolean boolean1 = multiKey3.equals(multiKey7);
      assertFalse(boolean1 == boolean0);
      assertFalse(multiKey2.equals((Object)multiKey5));
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>((String) null, (String) null, (String) null, "");
      multiKey0.getKey(1);
      MultiKey<Object> multiKey1 = new MultiKey<Object>((Object) null, (Object) null, "");
      multiKey1.size();
      String[] stringArray0 = new String[8];
      stringArray0[0] = "";
      stringArray0[1] = null;
      stringArray0[2] = "";
      stringArray0[3] = "";
      stringArray0[4] = "";
      stringArray0[5] = "";
      stringArray0[6] = "";
      stringArray0[7] = null;
      MultiKey<String> multiKey2 = new MultiKey<String>(stringArray0);
      multiKey2.getKey(1);
      Object object0 = new Object();
      MultiKey<Object> multiKey3 = new MultiKey<Object>(stringArray0);
      assertEquals(8, multiKey3.size());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      String[] stringArray0 = new String[0];
      MultiKey<String> multiKey0 = new MultiKey<String>(stringArray0);
      multiKey0.getKeys();
      multiKey0.toString();
      int int0 = 0;
      // Undeclared exception!
//      try { 
        multiKey0.getKey(0);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 0
//         //
//         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
//      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      String[] stringArray0 = new String[0];
      MultiKey<String> multiKey0 = new MultiKey<String>(stringArray0, false);
      MultiKey<Object> multiKey1 = new MultiKey<Object>(stringArray0);
      int int0 = multiKey1.size();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Object object0 = new Object();
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = object0;
      objectArray0[1] = object0;
      objectArray0[2] = object0;
      objectArray0[3] = object0;
      objectArray0[4] = object0;
      objectArray0[5] = object0;
      objectArray0[6] = object0;
      MultiKey<Object> multiKey0 = new MultiKey<Object>(objectArray0);
      Object object1 = multiKey0.getKey(0);
      MultiKey<Object> multiKey1 = new MultiKey<Object>(object0, object1);
      multiKey0.toString();
      multiKey1.getKeys();
      Integer integer0 = new Integer(0);
      Integer integer1 = new Integer(0);
      Integer integer2 = new Integer(0);
      Integer integer3 = new Integer(0);
      MultiKey<Integer> multiKey2 = new MultiKey<Integer>(integer0, integer0, integer1, integer2, integer3);
      multiKey2.hashCode();
      MultiKey<String> multiKey3 = new MultiKey<String>("MultiKey[java.lang.Object@4661ed59, java.lang.Object@4661ed59, java.lang.Object@4661ed59, java.lang.Object@4661ed59, java.lang.Object@4661ed59, java.lang.Object@4661ed59, java.lang.Object@4661ed59]", "The array of keys must not be null", "");
      int int0 = multiKey3.size();
      assertEquals(3, int0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      MultiKey<Object> multiKey0 = new MultiKey<Object>((Object) null, (Object) null);
      assertEquals(2, multiKey0.size());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("", "it\"qg3.a@ C@/(", "xp4kYXF", "", "The array of keys must not be null");
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.hashCode();
      Integer integer0 = new Integer(0);
      MultiKey<Object> multiKey1 = new MultiKey<Object>("xp4kYXF", "", "MultiKey[, it\"qg3.a@ C@/(, xp4kYXF, , The array of keys must not be null]", integer0);
      MultiKey<Object> multiKey2 = new MultiKey<Object>("MultiKey[, it\"qg3.a@ C@/(, xp4kYXF, , The array of keys must not be null]", multiKey1);
      Object[] objectArray0 = multiKey2.getKeys();
      assertEquals(2, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Integer integer0 = new Integer((-996));
      Integer integer1 = new Integer((-1747));
      Integer integer2 = new Integer((-996));
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integer0, integer1, integer1, integer2, integer1);
      // Undeclared exception!
//      try { 
        multiKey0.getKey((-1747));
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // -1747
//         //
//         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
//      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      String[] stringArray0 = new String[6];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "Pv/u C! -({ L";
      stringArray0[3] = "MultiKey";
      stringArray0[4] = "MultiKey";
      stringArray0[5] = "4U~rL=(>-P`m5vh";
      MultiKey<String> multiKey0 = new MultiKey<String>(stringArray0);
      MultiKey<Object> multiKey1 = new MultiKey<Object>((Object[]) stringArray0, false);
      Integer integer0 = new Integer(2870);
      Integer integer1 = new Integer(0);
      Integer integer2 = new Integer(2870);
      MultiKey<Integer> multiKey2 = new MultiKey<Integer>(integer0, integer1, integer2);
      boolean boolean0 = multiKey1.equals(multiKey2);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      MultiKey<Object> multiKey0 = null;
//      try {
        multiKey0 = new MultiKey<Object>((Object[]) null, true);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // The array of keys must not be null
//         //
//         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
//      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Object object0 = new Object();
      int int0 = 0;
      Integer integer0 = new Integer(0);
      MultiKey<Integer> multiKey0 = null;
//      try {
        multiKey0 = new MultiKey<Integer>((Integer[]) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // The array of keys must not be null
//         //
//         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
//      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Integer integer0 = new Integer((-1939));
      MultiKey<Object> multiKey0 = new MultiKey<Object>(integer0, integer0, integer0);
      multiKey0.hashCode();
      String[] stringArray0 = new String[8];
      stringArray0[0] = "";
      stringArray0[1] = "-[*0oF=b1.1r";
      stringArray0[2] = "";
      stringArray0[3] = ";PnU*uzu~e+x8";
      stringArray0[4] = "~(jtFq%-xx #";
      stringArray0[5] = "";
      stringArray0[6] = "qHOD_q%$X";
      stringArray0[7] = "";
      MultiKey<String> multiKey1 = new MultiKey<String>(stringArray0, true);
      int int0 = multiKey1.size();
      assertEquals(8, int0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Integer integer0 = new Integer(0);
      Integer integer1 = new Integer(1);
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integer0, integer1);
      multiKey0.hashCode();
      MultiKey<String> multiKey1 = new MultiKey<String>("", "");
      String string0 = multiKey1.toString();
      assertEquals("MultiKey[, ]", string0);
      
      Integer integer2 = new Integer(0);
      boolean boolean0 = multiKey0.equals(integer2);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("w\"Dgl&w%} MJGJ6", "");
      MultiKey<MultiKey<String>> multiKey1 = new MultiKey<MultiKey<String>>(multiKey0, multiKey0, multiKey0, multiKey0);
      assertEquals(4, multiKey1.size());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Integer[] integerArray0 = new Integer[3];
      int int0 = 122;
      Integer integer0 = new Integer(122);
      integerArray0[0] = integer0;
      Integer integer1 = new Integer(int0);
      integerArray0[1] = integer1;
      Integer integer2 = new Integer(0);
      integerArray0[2] = integer2;
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integerArray0);
      String string0 = multiKey0.toString();
      assertEquals("MultiKey[122, 122, 0]", string0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Object object0 = new Object();
      Object object1 = new Object();
      MultiKey<Object> multiKey0 = new MultiKey<Object>(object0, object1);
      int int0 = (-1);
      // Undeclared exception!
//      try { 
        multiKey0.getKey((-1));
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // -1
//         //
//         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
//      }
  }
}
