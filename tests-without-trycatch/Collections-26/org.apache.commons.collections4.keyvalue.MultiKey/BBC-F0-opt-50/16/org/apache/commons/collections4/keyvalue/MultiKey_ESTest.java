/*
 * This file was automatically generated by EvoSuite
 * Wed Oct 20 12:28:29 GMT 2021
 */

package org.apache.commons.collections4.keyvalue;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.lang.reflect.Array;
import org.apache.commons.collections4.keyvalue.MultiKey;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class MultiKey_ESTest extends MultiKey_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("", "", "", "", "");
      MultiKey<String> multiKey1 = new MultiKey<String>("", "", "");
      MultiKey<MultiKey<String>> multiKey2 = new MultiKey<MultiKey<String>>(multiKey0, multiKey0, multiKey1, multiKey1, multiKey1);
      multiKey0.equals(multiKey0);
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) "";
      objectArray0[1] = (Object) multiKey1;
      objectArray0[2] = (Object) multiKey2;
      objectArray0[3] = (Object) multiKey2;
      objectArray0[4] = (Object) "";
      objectArray0[5] = (Object) multiKey0;
      objectArray0[6] = (Object) multiKey2;
      Object object0 = new Object();
      objectArray0[7] = object0;
      MultiKey<Object> multiKey3 = new MultiKey<Object>(objectArray0, false);
      multiKey3.hashCode();
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>((String) null, (String) null, (String) null, (String) null, (String) null);
      MultiKey<Object>[] multiKeyArray0 = (MultiKey<Object>[]) Array.newInstance(MultiKey.class, 2);
      MultiKey<Object> multiKey1 = new MultiKey<Object>(multiKey0, (Object) null);
      multiKeyArray0[0] = multiKey1;
      MultiKey<Object> multiKey2 = new MultiKey<Object>((Object[]) multiKeyArray0, false);
      multiKeyArray0[1] = multiKey2;
      MultiKey<MultiKey<Object>> multiKey3 = new MultiKey<MultiKey<Object>>(multiKeyArray0);
      boolean boolean0 = multiKey3.equals(multiKey2);
      assertFalse(multiKey2.equals((Object)multiKey1));
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Integer integer0 = new Integer(0);
      Object[] objectArray0 = new Object[0];
      MultiKey<Object> multiKey0 = new MultiKey<Object>(objectArray0);
      Object[] objectArray1 = multiKey0.getKeys();
      assertFalse(objectArray1.equals((Object)objectArray0));
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      String[] stringArray0 = new String[1];
      stringArray0[0] = "oOl@=]?";
      MultiKey<String> multiKey0 = new MultiKey<String>(stringArray0);
      multiKey0.size();
      MultiKey<Object> multiKey1 = new MultiKey<Object>((Object[]) stringArray0, true);
      MultiKey<Object> multiKey2 = new MultiKey<Object>(stringArray0);
      MultiKey<MultiKey<Object>> multiKey3 = new MultiKey<MultiKey<Object>>(multiKey1, multiKey1, multiKey1, multiKey2);
      multiKey3.toString();
      boolean boolean0 = multiKey0.equals(multiKey2);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Integer integer0 = new Integer(0);
      Integer integer1 = new Integer(3);
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integer0, integer1);
      multiKey0.toString();
      multiKey0.equals(integer0);
      multiKey0.toString();
      Object object0 = new Object();
      Integer integer2 = new Integer(0);
      MultiKey<Object> multiKey1 = new MultiKey<Object>("MultiKey[0, 3]", "MultiKey[0, 3]", "", integer2);
      MultiKey<MultiKey<Object>> multiKey2 = new MultiKey<MultiKey<Object>>(multiKey1, multiKey1);
      multiKey2.equals(multiKey1);
      int int0 = multiKey1.size();
      assertEquals(4, int0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Object[] objectArray0 = new Object[5];
      Integer integer0 = new Integer(1);
      Integer integer1 = new Integer(1);
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>((Integer) null, integer0, integer1);
      multiKey0.getKey(0);
      objectArray0[0] = (Object) null;
      Object object0 = new Object();
      objectArray0[1] = object0;
      Object object1 = new Object();
      objectArray0[2] = object1;
      Integer[] integerArray0 = new Integer[0];
      boolean boolean0 = true;
      MultiKey<Integer> multiKey1 = new MultiKey<Integer>(integerArray0, true);
      // Undeclared exception!
//      try { 
        multiKey1.getKey(1);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 1
//         //
//         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
//      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Integer integer0 = new Integer(0);
      Integer integer1 = new Integer(3);
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integer0, integer1);
      MultiKey<String> multiKey1 = new MultiKey<String>("", "3b4RJEuiCIpmc4;?pI", (String) null, "");
      // Undeclared exception!
//      try { 
        multiKey1.getKey((-1));
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // -1
//         //
//         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
//      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      int int0 = 0;
      Integer integer0 = new Integer(0);
      MultiKey<Object> multiKey0 = new MultiKey<Object>(integer0, integer0);
      MultiKey<String> multiKey1 = null;
//      try {
        multiKey1 = new MultiKey<String>((String[]) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // The array of keys must not be null
//         //
//         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
//      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Object[] objectArray0 = new Object[2];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Integer integer0 = new Integer(2);
      MultiKey<Object> multiKey0 = new MultiKey<Object>(object0, integer0, integer0);
      Object object1 = multiKey0.getKey(2);
      objectArray0[1] = object1;
      MultiKey<Object> multiKey1 = new MultiKey<Object>(objectArray0);
      Integer integer1 = new Integer(2);
      multiKey1.equals(integer1);
      Integer[] integerArray0 = new Integer[6];
      integerArray0[0] = integer0;
      Integer integer2 = new Integer(1296);
      integerArray0[1] = integer2;
      integerArray0[2] = integer0;
      integerArray0[3] = integer1;
      integerArray0[4] = integer1;
      integerArray0[5] = integer1;
      MultiKey<Integer> multiKey2 = new MultiKey<Integer>(integerArray0, true);
      int int0 = multiKey2.size();
      assertEquals(6, int0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("", "Xw^bw'W\"+x'MPz:D", "");
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      MultiKey<Object> multiKey1 = new MultiKey<Object>("", multiKey0);
      multiKey1.hashCode();
      multiKey1.toString();
      multiKey1.getKey(0);
      multiKey1.equals("Xw^bw'W\"+x'MPz:D");
      multiKey1.toString();
      // Undeclared exception!
//      try { 
        multiKey0.getKey((-1));
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // -1
//         //
//         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
//      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Integer integer0 = new Integer(0);
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integer0, integer0, integer0);
      boolean boolean0 = multiKey0.equals(integer0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      String string0 = "";
      String string1 = "";
      MultiKey<String> multiKey0 = new MultiKey<String>("", "", "", "", "");
      MultiKey<String> multiKey1 = new MultiKey<String>("", "", "");
      boolean boolean0 = false;
      MultiKey<String> multiKey2 = null;
//      try {
        multiKey2 = new MultiKey<String>((String[]) null, false);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // The array of keys must not be null
//         //
//         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
//      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      int int0 = 1;
      Integer integer0 = new Integer(1);
      MultiKey<Object> multiKey0 = new MultiKey<Object>(integer0, integer0, integer0, "/hm{bM!rj3N;", "/hm{bM!rj3N;");
      String[] stringArray0 = new String[0];
      MultiKey<String> multiKey1 = new MultiKey<String>(stringArray0);
      multiKey1.size();
      // Undeclared exception!
//      try { 
        multiKey1.getKey(7);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 7
//         //
//         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
//      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>(":B|e&4UCS{1p'Rrd", "3\"bWki.6C", "");
      multiKey0.toString();
      Object object0 = new Object();
      Object object1 = new Object();
      Object object2 = new Object();
      MultiKey<Object> multiKey1 = new MultiKey<Object>(object0, object0, object1, object2);
      multiKey0.toString();
      multiKey1.getKeys();
      multiKey1.toString();
      MultiKey<MultiKey<Object>> multiKey2 = new MultiKey<MultiKey<Object>>(multiKey1, multiKey1);
      multiKey2.size();
      // Undeclared exception!
//      try { 
        multiKey0.getKey((-983));
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // -983
//         //
//         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
//      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Object[] objectArray0 = new Object[2];
      Object object0 = new Object();
      MultiKey<Object> multiKey0 = new MultiKey<Object>(object0, object0, object0);
      int int0 = (-966);
      // Undeclared exception!
//      try { 
        multiKey0.getKey((-966));
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // -966
//         //
//         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
//      }
  }
}
