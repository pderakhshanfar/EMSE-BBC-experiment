/*
 * This file was automatically generated by EvoSuite
 * Wed Oct 13 20:49:18 GMT 2021
 */

package org.apache.commons.collections4.keyvalue;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.lang.reflect.Array;
import org.apache.commons.collections4.keyvalue.MultiKey;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class MultiKey_ESTest extends MultiKey_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("@qmW*", "@qmW*", "@qmW*", "@qmW*");
      Integer[] integerArray0 = new Integer[0];
      Integer integer0 = new Integer(4);
      MultiKey<Integer> multiKey1 = new MultiKey<Integer>(integer0, integer0);
      MultiKey<Object> multiKey2 = new MultiKey<Object>((Object) null, multiKey1);
      Object object0 = new Object();
      Object object1 = new Object();
      Object object2 = new Object();
      boolean boolean0 = multiKey2.equals(multiKey2);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("MultiKey", "MultiKey");
      multiKey0.toString();
      Integer[] integerArray0 = new Integer[0];
      MultiKey<Integer> multiKey1 = new MultiKey<Integer>(integerArray0);
      Integer[] integerArray1 = multiKey1.getKeys();
      assertNotSame(integerArray0, integerArray1);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("MultiKey", "MultiKey");
      Integer[] integerArray0 = new Integer[0];
      MultiKey<Integer> multiKey1 = new MultiKey<Integer>(integerArray0, true);
      int int0 = multiKey1.size();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Integer[] integerArray0 = null;
      MultiKey<Integer> multiKey0 = null;
//      try {
        multiKey0 = new MultiKey<Integer>((Integer[]) null, false);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // The array of keys must not be null
//         //
//         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
//      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      MultiKey<Integer> multiKey0 = null;
//      try {
        multiKey0 = new MultiKey<Integer>((Integer[]) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // The array of keys must not be null
//         //
//         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
//      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      MultiKey<Integer>[] multiKeyArray0 = (MultiKey<Integer>[]) Array.newInstance(MultiKey.class, 7);
      Integer integer0 = new Integer((-1266));
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integer0, integer0);
      multiKeyArray0[0] = multiKey0;
      Integer[] integerArray0 = new Integer[1];
      integerArray0[0] = integer0;
      MultiKey<Integer> multiKey1 = new MultiKey<Integer>(integerArray0);
      multiKeyArray0[1] = multiKey1;
      MultiKey<Integer> multiKey2 = new MultiKey<Integer>(integerArray0);
      multiKeyArray0[2] = multiKey2;
      MultiKey<Integer> multiKey3 = new MultiKey<Integer>(integerArray0);
      multiKeyArray0[3] = multiKey3;
      MultiKey<Integer> multiKey4 = new MultiKey<Integer>(integerArray0[0], integerArray0[0]);
      assertTrue(multiKey4.equals((Object)multiKey0));
      
      multiKeyArray0[4] = multiKey4;
      Integer integer1 = new Integer(2);
      Integer integer2 = new Integer((-2421));
      MultiKey<Integer> multiKey5 = new MultiKey<Integer>(integer1, integer0, integer2, integer2);
      multiKeyArray0[5] = multiKey5;
      Integer integer3 = new Integer(2);
      Integer integer4 = new Integer((-382));
      Integer integer5 = new Integer(0);
      Integer integer6 = new Integer((-939));
      MultiKey<Integer> multiKey6 = new MultiKey<Integer>(integer3, integerArray0[0], integer4, integer5, integer6);
      multiKeyArray0[6] = multiKey6;
      MultiKey<MultiKey<Integer>> multiKey7 = new MultiKey<MultiKey<Integer>>(multiKeyArray0, false);
      String[] stringArray0 = new String[3];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "WrJ1++z'=q4|TO;t[-";
      MultiKey<String> multiKey8 = new MultiKey<String>(stringArray0);
      Object object0 = multiKey8.getKey(1);
      assertEquals("", object0);
      
      boolean boolean0 = multiKey7.equals("");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("", "MultiKey", "org.apache.commons.collections4.keyvalue.MultiKey", "MultiKey");
      multiKey0.toString();
      multiKey0.toString();
      Integer integer0 = new Integer(52);
      MultiKey<Object> multiKey1 = new MultiKey<Object>(multiKey0, integer0, integer0);
      multiKey1.toString();
      multiKey1.toString();
      multiKey1.toString();
      multiKey1.toString();
      Integer integer1 = new Integer(513);
      Integer integer2 = new Integer(0);
      MultiKey<Integer> multiKey2 = new MultiKey<Integer>(integer0, integer1, integer2);
      multiKey2.toString();
      multiKey1.equals(multiKey2);
      multiKey1.toString();
      // Undeclared exception!
//      try { 
        multiKey2.getKey(513);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 513
//         //
//         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
//      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      MultiKey<Object>[] multiKeyArray0 = (MultiKey<Object>[]) Array.newInstance(MultiKey.class, 8);
      Integer integer0 = new Integer(0);
      MultiKey<Object> multiKey0 = new MultiKey<Object>("Qz*(", "Qz*(", "Qz*(", integer0);
      multiKeyArray0[0] = multiKey0;
      Integer integer1 = new Integer(0);
      MultiKey<Object> multiKey1 = new MultiKey<Object>(integer1, integer1);
      multiKeyArray0[1] = multiKey1;
      MultiKey<Object> multiKey2 = new MultiKey<Object>((Object[]) multiKeyArray0, true);
      multiKeyArray0[2] = multiKey2;
      MultiKey<Object> multiKey3 = new MultiKey<Object>((Object[]) multiKeyArray0, true);
      multiKeyArray0[3] = multiKey3;
      String[] stringArray0 = new String[5];
      stringArray0[0] = "Qz*(";
      stringArray0[1] = "Qz*(";
      stringArray0[2] = "Qz*(";
      stringArray0[3] = "Qz*(";
      stringArray0[4] = "Qz*(";
      MultiKey<String> multiKey4 = new MultiKey<String>(stringArray0);
      Integer integer2 = new Integer((-1));
      Integer integer3 = new Integer((-1));
      MultiKey<Integer> multiKey5 = new MultiKey<Integer>(integer2, integer0, integer0, integer3, integer1);
      Object object0 = multiKey5.getKey(0);
      Object object1 = new Object();
      MultiKey<Object> multiKey6 = new MultiKey<Object>(multiKey4, object0, object1);
      multiKeyArray0[4] = multiKey6;
      MultiKey<Object> multiKey7 = new MultiKey<Object>((Object[]) stringArray0, true);
      multiKeyArray0[5] = multiKey7;
      MultiKey<String> multiKey8 = new MultiKey<String>("o>", "@9-/s{Zg`~.jK?gSV");
      multiKey8.getKey(0);
      MultiKey<Object> multiKey9 = new MultiKey<Object>("Qz*(", "o>", multiKey1);
      multiKeyArray0[6] = multiKey9;
      MultiKey<Object> multiKey10 = new MultiKey<Object>(multiKey2, "Qz*(", object0, (Object) null, multiKey9);
      multiKeyArray0[7] = multiKey10;
      MultiKey<MultiKey<Object>> multiKey11 = new MultiKey<MultiKey<Object>>(multiKeyArray0);
      multiKey11.hashCode();
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Object[] objectArray0 = new Object[8];
      Object object0 = new Object();
      objectArray0[0] = object0;
      MultiKey<String> multiKey0 = new MultiKey<String>("", "tWM3ux?,b6,N", "WnZDZrRKSIPhG", "", "");
      multiKey0.getKey(3);
      objectArray0[1] = (Object) "";
      Object object1 = new Object();
      objectArray0[2] = object1;
      Object object2 = new Object();
      objectArray0[3] = object2;
      Object object3 = new Object();
      objectArray0[4] = object3;
      Object object4 = new Object();
      objectArray0[5] = object4;
      Object object5 = new Object();
      objectArray0[6] = object5;
      Integer integer0 = new Integer(0);
      Integer integer1 = new Integer(4);
      MultiKey<Integer> multiKey1 = new MultiKey<Integer>((Integer) null, integer0, integer1);
      multiKey1.getKey(0);
      objectArray0[7] = (Object) null;
      MultiKey<Object> multiKey2 = new MultiKey<Object>(objectArray0, false);
      assertEquals(8, multiKey2.size());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("", "", "", "", "");
      multiKey0.toString();
      Integer integer0 = new Integer(0);
      MultiKey<Integer> multiKey1 = new MultiKey<Integer>(integer0, integer0, integer0);
      multiKey1.toString();
      multiKey1.toString();
      multiKey1.getKey(0);
      Object[] objectArray0 = new Object[3];
      Object object0 = new Object();
      objectArray0[0] = object0;
      objectArray0[1] = (Object) multiKey0;
      objectArray0[2] = (Object) multiKey0;
      MultiKey<Object> multiKey2 = new MultiKey<Object>(objectArray0, true);
      MultiKey<MultiKey<Object>> multiKey3 = new MultiKey<MultiKey<Object>>(multiKey2, multiKey2, multiKey2, multiKey2, multiKey2);
      int int0 = multiKey3.size();
      assertEquals(5, int0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Object[] objectArray0 = new Object[4];
      Integer integer0 = new Integer(0);
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integer0, integer0, integer0, integer0);
      // Undeclared exception!
//      try { 
        multiKey0.getKey((-1));
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // -1
//         //
//         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
//      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      int int0 = 0;
      Integer integer0 = new Integer(0);
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integer0, integer0);
      Object[] objectArray0 = new Object[9];
      String[] stringArray0 = new String[7];
      stringArray0[0] = "-xQ74>FzK]AFj";
      stringArray0[1] = "";
      stringArray0[2] = "";
      stringArray0[3] = ";%";
      stringArray0[4] = "agqk_g";
      stringArray0[5] = "";
      stringArray0[6] = "";
      MultiKey<String> multiKey1 = new MultiKey<String>(stringArray0, false);
      // Undeclared exception!
//      try { 
        multiKey1.getKey(1558);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 1558
//         //
//         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
//      }
  }
}
