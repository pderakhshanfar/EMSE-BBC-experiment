/*
 * This file was automatically generated by EvoSuite
 * Wed Oct 20 12:36:41 GMT 2021
 */

package org.apache.commons.collections4.keyvalue;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.collections4.keyvalue.MultiKey;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class MultiKey_ESTest extends MultiKey_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Object object0 = new Object();
      MultiKey<Object> multiKey0 = new MultiKey<Object>(object0, object0, object0, (Object) null, "");
      multiKey0.toString();
      multiKey0.toString();
      Integer[] integerArray0 = new Integer[0];
      MultiKey<Integer> multiKey1 = new MultiKey<Integer>(integerArray0);
      Integer integer0 = new Integer(0);
      Integer integer1 = new Integer(1);
      Integer integer2 = new Integer(1);
      multiKey1.toString();
      MultiKey<Integer> multiKey2 = new MultiKey<Integer>(integer0, integer1, integer2);
      multiKey2.toString();
      boolean boolean0 = multiKey1.equals(multiKey2);
      assertFalse(boolean0);
      
      MultiKey<String> multiKey3 = new MultiKey<String>("", "");
      multiKey3.toString();
      multiKey3.toString();
      String string0 = multiKey3.toString();
      assertEquals("MultiKey[, ]", string0);
      
      multiKey3.size();
      multiKey3.getKey(0);
      multiKey0.size();
      multiKey0.size();
      MultiKey<MultiKey<Object>> multiKey4 = new MultiKey<MultiKey<Object>>(multiKey0, multiKey0, multiKey0, multiKey0);
      multiKey4.size();
      multiKey1.getKeys();
      assertFalse(multiKey1.equals((Object)multiKey2));
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Integer integer0 = new Integer(0);
      Object[] objectArray0 = new Object[0];
      MultiKey<Object> multiKey0 = new MultiKey<Object>(objectArray0);
      int int0 = multiKey0.size();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Integer integer0 = new Integer(1);
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integer0, integer0, integer0);
      multiKey0.toString();
      String[] stringArray0 = new String[0];
      MultiKey<String> multiKey1 = new MultiKey<String>(stringArray0);
      multiKey1.toString();
      multiKey1.hashCode();
      multiKey1.toString();
      Integer integer1 = new Integer(0);
      MultiKey<Object> multiKey2 = new MultiKey<Object>("MultiKey[]", integer1);
      String string0 = multiKey2.toString();
      assertEquals("MultiKey[MultiKey[], 0]", string0);
      
      boolean boolean0 = multiKey2.equals(integer0);
      MultiKey<Object> multiKey3 = new MultiKey<Object>("MultiKey[]", "MultiKey[1, 1, 1]");
      Integer integer2 = new Integer(2561);
      MultiKey<String> multiKey4 = new MultiKey<String>("MultiKey[]", "STF]B", "\u0001{5o070g6^");
      MultiKey<MultiKey<Integer>> multiKey5 = new MultiKey<MultiKey<Integer>>(multiKey0, multiKey0);
      Integer integer3 = new Integer(2561);
      Integer integer4 = new Integer(4898);
      Integer integer5 = new Integer((-1124));
      MultiKey<Integer> multiKey6 = new MultiKey<Integer>(integer1, integer3, integer4, integer5);
      Integer integer6 = new Integer((-1124));
      MultiKey<Object> multiKey7 = new MultiKey<Object>("MultiKey[MultiKey[], 0]", multiKey0, "MultiKey[]", integer6);
      Object object0 = multiKey7.getKey(1);
      boolean boolean1 = multiKey0.equals(object0);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Integer integer0 = new Integer(3);
      Integer integer1 = new Integer(3);
      Integer integer2 = new Integer((-866));
      Integer[] integerArray0 = new Integer[8];
      integerArray0[0] = integer1;
      integerArray0[1] = integer2;
      integerArray0[2] = integer2;
      integerArray0[3] = integer2;
      integerArray0[4] = integer1;
      integerArray0[5] = integer0;
      integerArray0[6] = integer1;
      integerArray0[7] = integer2;
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integerArray0);
      MultiKey<Object> multiKey1 = new MultiKey<Object>(integerArray0);
      boolean boolean0 = multiKey0.equals(multiKey1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Integer integer0 = new Integer(1188);
      MultiKey<Object> multiKey0 = new MultiKey<Object>((Object) null, integer0);
      multiKey0.getKey(0);
      multiKey0.toString();
      Object object0 = new Object();
      multiKey0.equals(object0);
      MultiKey<String> multiKey1 = new MultiKey<String>(":)XOE720]Ij=e^", ":)XOE720]Ij=e^");
      int int0 = multiKey1.size();
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      int int0 = 1;
      Integer integer0 = new Integer(1);
      String string0 = "\\m,FPdxkbpSF}Yl_VGt";
      Object object0 = new Object();
      MultiKey<Object> multiKey0 = new MultiKey<Object>(integer0, "m,FPdxkbpSF}Yl_VGt", "m,FPdxkbpSF}Yl_VGt", "m,FPdxkbpSF}Yl_VGt", object0);
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      MultiKey<String> multiKey1 = null;
//      try {
        multiKey1 = new MultiKey<String>((String[]) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // The array of keys must not be null
//         //
//         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
//      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("$i8n3+nk`j4lO=Bt*.", "", "", "$i8n3+nk`j4lO=Bt*.", "");
      multiKey0.getKey(0);
      MultiKey<Object> multiKey1 = null;
//      try {
        multiKey1 = new MultiKey<Object>((Object[]) null, true);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // The array of keys must not be null
//         //
//         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
//      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Integer integer0 = new Integer(1656);
      Object object0 = new Object();
      MultiKey<Object> multiKey0 = new MultiKey<Object>(integer0, object0);
      multiKey0.toString();
      Integer integer1 = new Integer(1656);
      multiKey0.toString();
      MultiKey<Integer> multiKey1 = new MultiKey<Integer>(integer0, integer1);
      multiKey1.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey1.equals(object0);
      multiKey1.toString();
      multiKey0.getKeys();
      int int0 = multiKey1.size();
      String[] stringArray0 = new String[0];
      MultiKey<String> multiKey2 = new MultiKey<String>(stringArray0);
      multiKey2.equals("MultiKey[1656, 1656]");
      int int1 = multiKey1.hashCode();
      assertFalse(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Integer[] integerArray0 = new Integer[3];
      Integer integer0 = new Integer(595);
      integerArray0[0] = integer0;
      Integer integer1 = new Integer((-1508));
      integerArray0[1] = integer1;
      Integer integer2 = new Integer((-1508));
      integerArray0[2] = integer2;
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integerArray0);
      Object object0 = multiKey0.getKey(1);
      Object object1 = new Object();
      MultiKey<Object> multiKey1 = new MultiKey<Object>(object0, object1, integerArray0[0], object0);
      MultiKey<MultiKey<Object>> multiKey2 = new MultiKey<MultiKey<Object>>(multiKey1, multiKey1);
      assertEquals(2, multiKey2.size());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("zh]^Dv&Gl:(CpsN@ote", "zh]^Dv&Gl:(CpsN@ote", "zh]^Dv&Gl:(CpsN@ote", "", "");
      multiKey0.getKey(0);
      Integer integer0 = new Integer(0);
      MultiKey<Integer> multiKey1 = new MultiKey<Integer>(integer0, (Integer) null, integer0);
      MultiKey<String> multiKey2 = new MultiKey<String>("zh]^Dv&Gl:(CpsN@ote", "", "", "N");
      boolean boolean0 = multiKey1.equals(multiKey2);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      String string0 = "-/0&/&HmP\\># ";
      MultiKey<String> multiKey0 = new MultiKey<String>("-/0&/&HmP># ", "-/0&/&HmP># ", "-/0&/&HmP># ", "", "");
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.hashCode();
      multiKey0.hashCode();
      multiKey0.toString();
      Object object0 = null;
      MultiKey<Object> multiKey1 = new MultiKey<Object>((Object) null, "-/0&/&HmP># ", "r~|GHbXpM");
      // Undeclared exception!
//      try { 
        multiKey1.getKey((-767));
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // -767
//         //
//         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
//      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Object[] objectArray0 = new Object[6];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      Object object2 = new Object();
      objectArray0[2] = object2;
      MultiKey<Object> multiKey0 = new MultiKey<Object>(objectArray0, true);
      Object object3 = multiKey0.getKey(0);
      objectArray0[3] = object3;
      Object object4 = new Object();
      objectArray0[4] = object4;
      multiKey0.toString();
      String[] stringArray0 = new String[2];
      stringArray0[0] = "";
      stringArray0[1] = "}2VrP+";
      MultiKey<String> multiKey1 = new MultiKey<String>(stringArray0);
      // Undeclared exception!
//      try { 
        multiKey1.getKey((-1860));
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // -1860
//         //
//         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
//      }
  }
}
