/*
 * This file was automatically generated by EvoSuite
 * Fri Oct 22 17:42:14 GMT 2021
 */

package org.apache.commons.collections4.keyvalue;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.lang.reflect.Array;
import org.apache.commons.collections4.keyvalue.MultiKey;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class MultiKey_ESTest extends MultiKey_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("LU3.RX_K9b!93Wy", "LU3.RX_K9b!93Wy", "", "g+{d)y:/aI{1d", "g+{d)y:/aI{1d");
      MultiKey<Object> multiKey1 = new MultiKey<Object>(multiKey0, "g+{d)y:/aI{1d", multiKey0, "g+{d)y:/aI{1d", multiKey0);
      Object object0 = multiKey1.getKey(0);
      boolean boolean0 = multiKey0.equals(object0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("", "");
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) multiKey0;
      MultiKey<Object> multiKey1 = new MultiKey<Object>(objectArray0);
      boolean boolean0 = multiKey1.equals("");
      multiKey1.toString();
      String string0 = multiKey1.toString();
      assertEquals("MultiKey[MultiKey[, ]]", string0);
      
      MultiKey<String> multiKey2 = new MultiKey<String>("/t\"FT/p`w{]?|,^IC", "MultiKey[MultiKey[, ]]", "MultiKey", "", "");
      assertFalse(multiKey2.equals((Object)multiKey0));
      
      MultiKey<Object> multiKey3 = new MultiKey<Object>(objectArray0, false);
      boolean boolean1 = multiKey1.equals(multiKey3);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("w6YvG7+;f8g}j=", "w6YvG7+;f8g}j=", "@:{\fC-");
      multiKey0.toString();
      multiKey0.toString();
      MultiKey<MultiKey<String>> multiKey1 = new MultiKey<MultiKey<String>>(multiKey0, multiKey0, multiKey0, multiKey0);
      multiKey1.toString();
      multiKey1.toString();
      Integer integer0 = new Integer((-262));
      Integer integer1 = new Integer(3);
      Integer integer2 = new Integer(7);
      Integer integer3 = new Integer((-1657));
      Integer integer4 = new Integer(0);
      MultiKey<Integer> multiKey2 = new MultiKey<Integer>(integer0, integer1, integer2, integer3, integer4);
      multiKey2.toString();
      Object object0 = new Object();
      multiKey2.equals(object0);
      MultiKey<Object>[] multiKeyArray0 = (MultiKey<Object>[]) Array.newInstance(MultiKey.class, 0);
      MultiKey<MultiKey<Object>> multiKey3 = new MultiKey<MultiKey<Object>>(multiKeyArray0);
      multiKey3.toString();
      multiKey3.toString();
      multiKey3.getKeys();
      multiKey3.equals(integer1);
      multiKey2.size();
      // Undeclared exception!
//      try { 
        multiKey3.getKey(0);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 0
//         //
//         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
//      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>(".=iJB6ZCjBe4", ".=iJB6ZCjBe4", "", "", ".=iJB6ZCjBe4");
      MultiKey<Object> multiKey1 = new MultiKey<Object>("", "", ".=iJB6ZCjBe4", "");
      multiKey1.getKeys();
      MultiKey<String> multiKey2 = new MultiKey<String>("R(yMjJiY>>fq}{]y77F", "xQH,U#dHJ&qNa", "org.apache.commons.collections4.keyvalue.MultiKey");
      MultiKey<String> multiKey3 = new MultiKey<String>("R(yMjJiY>>fq}{]y77F", ".=iJB6ZCjBe4", (String) null, "R(yMjJiY>>fq}{]y77F");
      MultiKey<String> multiKey4 = new MultiKey<String>("", "xQH,U#dHJ&qNa", "R(yMjJiY>>fq}{]y77F", (String) null);
      MultiKey<String> multiKey5 = new MultiKey<String>(".=iJB6ZCjBe4", "");
      String[] stringArray0 = new String[0];
      MultiKey<String> multiKey6 = new MultiKey<String>(stringArray0, false);
      MultiKey<Object> multiKey7 = new MultiKey<Object>((Object[]) stringArray0, false);
      boolean boolean0 = multiKey7.equals("R(yMjJiY>>fq}{]y77F");
      assertFalse(boolean0);
      
      Integer integer0 = new Integer(8);
      Integer integer1 = new Integer(4);
      MultiKey<Object> multiKey8 = new MultiKey<Object>(integer0, "", integer1, multiKey3);
      multiKey8.toString();
      String string0 = multiKey6.toString();
      assertEquals("MultiKey[]", string0);
      
      MultiKey<String> multiKey9 = new MultiKey<String>("p*Q@:J6_gtv:o~U}W\"", "MultiKey", "org.apache.commons.collections4.keyvalue.MultiKey", (String) null, "");
      boolean boolean1 = multiKey8.equals(multiKey6);
      assertFalse(boolean1);
      
      multiKey7.size();
      assertFalse(multiKey7.equals((Object)multiKey8));
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      String[] stringArray0 = new String[5];
      MultiKey<String> multiKey0 = new MultiKey<String>(stringArray0, true);
      MultiKey<String> multiKey1 = new MultiKey<String>("n<CJ`2w[<Mg", "org.apache.commons.collections4.keyvalue.MultiKey", "org.apache.commons.collections4.keyvalue.MultiKey");
      MultiKey<String> multiKey2 = new MultiKey<String>("rI", "", "org.apache.commons.collections4.keyvalue.MultiKey", "rI");
      MultiKey<String> multiKey3 = new MultiKey<String>("l", "l", "6j$EzQglEPGB$mJd", "");
      MultiKey<String> multiKey4 = new MultiKey<String>("n<CJ`2w[<Mg", "org.apache.commons.collections4.keyvalue.MultiKey");
      MultiKey<String> multiKey5 = new MultiKey<String>(stringArray0, true);
      MultiKey<Object> multiKey6 = new MultiKey<Object>((Object[]) stringArray0, true);
      multiKey6.equals(multiKey0);
      multiKey6.toString();
      MultiKey<String> multiKey7 = new MultiKey<String>("org.apache.commons.collections4.keyvalue.MultiKey", "'x5", "h7.5urAp", "", "MultiKey[null, null, null, null, null]");
      multiKey6.equals("");
      Object[] objectArray0 = multiKey6.getKeys();
      assertEquals(5, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      MultiKey<String>[] multiKeyArray0 = (MultiKey<String>[]) Array.newInstance(MultiKey.class, 6);
      String[] stringArray0 = new String[2];
      stringArray0[0] = "";
      stringArray0[1] = "";
      MultiKey<String> multiKey0 = new MultiKey<String>(stringArray0, false);
      multiKeyArray0[0] = multiKey0;
      MultiKey<String> multiKey1 = new MultiKey<String>("", "", "org.apache.commons.collections4.keyvalue.MultiKey");
      multiKeyArray0[1] = multiKey1;
      MultiKey<String> multiKey2 = new MultiKey<String>("org.apache.commons.collections4.keyvalue.MultiKey", "", "org.apache.commons.collections4.keyvalue.MultiKey", "");
      multiKeyArray0[2] = multiKey2;
      MultiKey<String> multiKey3 = new MultiKey<String>("", "", "", "");
      multiKeyArray0[3] = multiKey3;
      MultiKey<String> multiKey4 = new MultiKey<String>("", "");
      multiKeyArray0[4] = multiKey4;
      MultiKey<String> multiKey5 = new MultiKey<String>(stringArray0, false);
      assertTrue(multiKey5.equals((Object)multiKey0));
      
      multiKeyArray0[5] = multiKey5;
      MultiKey<MultiKey<String>> multiKey6 = new MultiKey<MultiKey<String>>(multiKeyArray0);
      boolean boolean0 = multiKey6.equals("w[;l:TqFj+|");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Object object0 = new Object();
      Object object1 = new Object();
      MultiKey<Object> multiKey0 = new MultiKey<Object>(object0, object0, (Object) null, object1);
      multiKey0.toString();
      multiKey0.toString();
      MultiKey<Object> multiKey1 = new MultiKey<Object>(object0, multiKey0);
      multiKey1.toString();
      multiKey1.size();
      Object object2 = multiKey0.getKey(2);
      assertNull(object2);
      
      Integer integer0 = new Integer(2);
      multiKey1.toString();
      Integer integer1 = new Integer(2);
      multiKey0.toString();
      multiKey0.toString();
      multiKey1.toString();
      Integer integer2 = new Integer(2);
      MultiKey<Integer> multiKey2 = new MultiKey<Integer>(integer0, (Integer) null, integer1, integer2);
      String string0 = multiKey2.toString();
      assertEquals("MultiKey[2, null, 2, 2]", string0);
      
      MultiKey<String>[] multiKeyArray0 = (MultiKey<String>[]) Array.newInstance(MultiKey.class, 7);
      MultiKey<String> multiKey3 = new MultiKey<String>("yp^R", "MultiKey[java.lang.Object@69ee86b3, java.lang.Object@69ee86b3, null, java.lang.Object@471fef0a]", "", "MultiKey[java.lang.Object@69ee86b3, java.lang.Object@69ee86b3, null, java.lang.Object@471fef0a]");
      multiKeyArray0[0] = multiKey3;
      MultiKey<String> multiKey4 = new MultiKey<String>("yp^R", (String) null, "y(6?v_eZ9bw", "yp^R", "");
      multiKeyArray0[1] = multiKey4;
      MultiKey<String> multiKey5 = new MultiKey<String>("MultiKey[java.lang.Object@69ee86b3, MultiKey[java.lang.Object@69ee86b3, java.lang.Object@69ee86b3, null, java.lang.Object@471fef0a]]", "y,Eo~MW[D{rAo[^j");
      multiKeyArray0[2] = multiKey5;
      MultiKey<String> multiKey6 = new MultiKey<String>("", "", "", "MultiKey[java.lang.Object@69ee86b3, java.lang.Object@69ee86b3, null, java.lang.Object@471fef0a]", "");
      multiKeyArray0[3] = multiKey6;
      MultiKey<String> multiKey7 = new MultiKey<String>("", "The array of keys must not be null");
      multiKeyArray0[4] = multiKey7;
      MultiKey<String> multiKey8 = new MultiKey<String>("^vZGD?tacN~gs", "(?!");
      multiKeyArray0[5] = multiKey8;
      String[] stringArray0 = new String[3];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = null;
      MultiKey<String> multiKey9 = new MultiKey<String>(stringArray0, true);
      multiKeyArray0[6] = multiKey9;
      MultiKey<MultiKey<String>> multiKey10 = new MultiKey<MultiKey<String>>(multiKeyArray0);
      boolean boolean0 = multiKey10.equals(multiKey1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Integer integer0 = new Integer(2);
      Object object0 = new Object();
      MultiKey<Object> multiKey0 = new MultiKey<Object>(integer0, integer0, object0);
      multiKey0.toString();
      multiKey0.hashCode();
      multiKey0.getKey(0);
      int int0 = 3857;
      // Undeclared exception!
//      try { 
        multiKey0.getKey(3857);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 3857
//         //
//         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
//      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Integer integer0 = new Integer((-672));
      Integer integer1 = new Integer((-1));
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integer0, integer1, integer0, integer0);
      multiKey0.toString();
      MultiKey<String> multiKey1 = null;
//      try {
        multiKey1 = new MultiKey<String>((String[]) null, false);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // The array of keys must not be null
//         //
//         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
//      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Integer integer0 = new Integer(1);
      Integer integer1 = new Integer((-4055));
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integer0, integer1);
      Integer integer2 = multiKey0.getKey(1);
      assertEquals((-4055), (int)integer2);
      
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) integer1;
      objectArray0[1] = (Object) multiKey0;
      objectArray0[2] = (Object) multiKey0;
      objectArray0[3] = (Object) integer0;
      objectArray0[4] = (Object) multiKey0;
      objectArray0[5] = (Object) integer1;
      objectArray0[6] = (Object) integer1;
      MultiKey<Object> multiKey1 = new MultiKey<Object>(objectArray0, true);
      boolean boolean0 = multiKey1.equals(objectArray0[1]);
      assertFalse(boolean0);
      
      multiKey1.size();
      MultiKey<String> multiKey2 = new MultiKey<String>("K!/$[C", "", "", "", "z2%M/i");
      String string0 = multiKey2.toString();
      assertEquals("MultiKey[K!/$[C, , , , z2%M/i]", string0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>(".=iJB6ZCjBe4", ".=iJB6ZCjBe4", "", "", ".=iJB6ZCjBe4");
      MultiKey<Object> multiKey1 = new MultiKey<Object>("", "", ".=iJB6ZCjBe4", "");
      multiKey1.toString();
      multiKey1.getKeys();
      int int0 = 1;
      multiKey1.getKey(1);
      multiKey0.toString();
      int int1 = (-1701);
      // Undeclared exception!
//      try { 
        multiKey0.getKey((-1701));
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // -1701
//         //
//         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
//      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      String string0 = ",!l&Lgv.Kot:P/}F\"";
      MultiKey<String> multiKey0 = new MultiKey<String>(",!l&Lgv.Kot:P/}F\"", "MultiKey", (String) null);
      multiKey0.toString();
      multiKey0.size();
      Object object0 = new Object();
      MultiKey<Object> multiKey1 = null;
//      try {
        multiKey1 = new MultiKey<Object>((Object[]) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // The array of keys must not be null
//         //
//         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
//      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("UO\"fH*W8L3`Qt;R<", "The array of keys must not be null");
      int int0 = multiKey0.size();
      assertEquals(2, int0);
  }
}
