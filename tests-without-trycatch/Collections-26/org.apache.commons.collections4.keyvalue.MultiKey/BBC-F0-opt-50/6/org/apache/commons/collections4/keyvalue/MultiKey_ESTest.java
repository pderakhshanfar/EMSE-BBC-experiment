/*
 * This file was automatically generated by EvoSuite
 * Wed Oct 13 20:48:58 GMT 2021
 */

package org.apache.commons.collections4.keyvalue;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.lang.reflect.Array;
import org.apache.commons.collections4.keyvalue.MultiKey;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class MultiKey_ESTest extends MultiKey_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      String[] stringArray0 = new String[0];
      MultiKey<String> multiKey0 = new MultiKey<String>(stringArray0, true);
      int int0 = multiKey0.size();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Integer[] integerArray0 = new Integer[4];
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integerArray0);
      MultiKey<Object> multiKey1 = new MultiKey<Object>(multiKey0, multiKey0, integerArray0[0]);
      Object[] objectArray0 = multiKey1.getKeys();
      assertEquals(3, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>((Integer) null, (Integer) null, (Integer) null, (Integer) null);
      Object object0 = multiKey0.getKey(0);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("MultiKey[null, 0]", "", "", ">^::Z| PXmFk");
      String string0 = multiKey0.getKey(0);
      assertEquals("MultiKey[null, 0]", string0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      MultiKey<Integer> multiKey0 = null;
//      try {
        multiKey0 = new MultiKey<Integer>((Integer[]) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // The array of keys must not be null
//         //
//         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
//      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Integer[] integerArray0 = new Integer[4];
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integerArray0);
      MultiKey<Object> multiKey1 = new MultiKey<Object>(multiKey0, multiKey0, integerArray0[0]);
      boolean boolean0 = multiKey1.equals(multiKey1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Integer integer0 = new Integer(12);
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integer0, integer0, integer0);
      MultiKey<Integer>[] multiKeyArray0 = (MultiKey<Integer>[]) Array.newInstance(MultiKey.class, 3);
      multiKeyArray0[0] = multiKey0;
      MultiKey<MultiKey<Integer>> multiKey1 = new MultiKey<MultiKey<Integer>>(multiKeyArray0, false);
      MultiKey<Object> multiKey2 = new MultiKey<Object>(multiKeyArray0);
      boolean boolean0 = multiKey1.equals(multiKey2);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>((String) null, (String) null, "]I?&XR(DP{~K;OCAGx", "MultiKey[null, 7]");
      boolean boolean0 = multiKey0.equals("n5]$j/;Vl60(A+n>)");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      MultiKey<String> multiKey0 = null;
//      try {
        multiKey0 = new MultiKey<String>((String[]) null, false);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // The array of keys must not be null
//         //
//         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
//      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("tuh0I>bP:K", "tuh0I>bP:K", "tuh0I>bP:K", "tuh0I>bP:K", "tuh0I>bP:K");
      MultiKey<Object> multiKey1 = new MultiKey<Object>("tuh0I>bP:K", multiKey0, "tuh0I>bP:K");
      MultiKey<Object> multiKey2 = new MultiKey<Object>(multiKey1, multiKey1);
      assertFalse(multiKey2.equals((Object)multiKey1));
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Object[] objectArray0 = new Object[3];
      MultiKey<Object> multiKey0 = new MultiKey<Object>(objectArray0);
      int int0 = multiKey0.size();
      assertEquals(3, int0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Integer[] integerArray0 = new Integer[0];
      MultiKey<Object> multiKey0 = new MultiKey<Object>(integerArray0);
      // Undeclared exception!
//      try { 
        multiKey0.getKey(1);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 1
//         //
//         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
//      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("k}yZCTTgL", "MultiKey", "MultiKey[java.lang.Object@2f820566, java.lang.Object@6dbdfed9, java.lang.Object@53f2772d]", "aJP");
      multiKey0.hashCode();
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Integer[] integerArray0 = new Integer[0];
      MultiKey<Object> multiKey0 = new MultiKey<Object>(integerArray0);
      Object[] objectArray0 = multiKey0.getKeys();
      assertEquals(0, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      MultiKey<Object>[] multiKeyArray0 = (MultiKey<Object>[]) Array.newInstance(MultiKey.class, 6);
      MultiKey<MultiKey<Object>> multiKey0 = new MultiKey<MultiKey<Object>>(multiKeyArray0);
      String string0 = multiKey0.toString();
      assertEquals("MultiKey[null, null, null, null, null, null]", string0);
  }
}
