/*
 * This file was automatically generated by EvoSuite
 * Wed Oct 20 12:40:07 GMT 2021
 */

package org.apache.commons.collections4.keyvalue;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.lang.reflect.Array;
import org.apache.commons.collections4.keyvalue.MultiKey;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class MultiKey_ESTest extends MultiKey_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      MultiKey<Object> multiKey0 = new MultiKey<Object>("YU8NV&V!pGmjRck(", "YU8NV&V!pGmjRck(", "YU8NV&V!pGmjRck(", "YU8NV&V!pGmjRck(");
      Object[] objectArray0 = new Object[0];
      MultiKey<Object> multiKey1 = new MultiKey<Object>(objectArray0, true);
      MultiKey<MultiKey<Object>> multiKey2 = new MultiKey<MultiKey<Object>>(multiKey0, multiKey1);
      MultiKey multiKey3 = (MultiKey)multiKey2.getKey(0);
      Object object0 = new Object();
      MultiKey<Object> multiKey4 = new MultiKey<Object>(multiKey3, "YU8NV&V!pGmjRck(", object0);
      MultiKey<MultiKey<Object>> multiKey5 = new MultiKey<MultiKey<Object>>(multiKey0, multiKey0, multiKey1, multiKey4, multiKey4);
      MultiKey<Object> multiKey6 = new MultiKey<Object>(multiKey5, multiKey2, multiKey4);
      MultiKey multiKey7 = (MultiKey)multiKey6.getKey(0);
      boolean boolean0 = multiKey5.equals(multiKey7);
      assertTrue(boolean0);
      
      multiKey3.getKey(0);
      MultiKey<Object> multiKey8 = new MultiKey<Object>(multiKey1, "YU8NV&V!pGmjRck(", multiKey4, object0);
      assertFalse(multiKey8.equals((Object)multiKey1));
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Object object0 = new Object();
      MultiKey<String> multiKey0 = new MultiKey<String>("", "");
      MultiKey<Object> multiKey1 = new MultiKey<Object>("", "");
      multiKey1.equals(multiKey0);
      int int0 = multiKey0.size();
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      MultiKey<Object> multiKey0 = new MultiKey<Object>("YU8NV&V!pGmjRck(", "YU8NV&V!pGmjRck(", "YU8NV&V!pGmjRck(", "YU8NV&V!pGmjRck(");
      Object[] objectArray0 = new Object[0];
      MultiKey<Object> multiKey1 = new MultiKey<Object>(objectArray0, true);
      MultiKey<MultiKey<Object>> multiKey2 = new MultiKey<MultiKey<Object>>(multiKey0, multiKey1);
      Object object0 = multiKey2.getKey(0);
      Object object1 = new Object();
      MultiKey<Object> multiKey3 = new MultiKey<Object>(object0, "YU8NV&V!pGmjRck(", object1);
      MultiKey<MultiKey<Object>> multiKey4 = new MultiKey<MultiKey<Object>>(multiKey0, multiKey0, multiKey1, multiKey3, multiKey3);
      MultiKey<Object> multiKey5 = new MultiKey<Object>(object1, multiKey0, "YU8NV&V!pGmjRck(", object0);
      Object object2 = multiKey5.getKey(0);
      multiKey4.equals(object2);
      multiKey1.toString();
      multiKey0.size();
      Integer[] integerArray0 = new Integer[0];
      MultiKey<Integer> multiKey6 = new MultiKey<Integer>(integerArray0, true);
      multiKey6.getKeys();
      int int0 = multiKey6.size();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Integer integer0 = new Integer(0);
      Object object0 = new Object();
      MultiKey<Object> multiKey0 = new MultiKey<Object>(integer0, object0);
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.getKeys();
      MultiKey<String> multiKey1 = new MultiKey<String>("", "");
      multiKey1.toString();
      multiKey1.toString();
      multiKey1.toString();
      multiKey1.toString();
      multiKey1.equals("");
      MultiKey<Object>[] multiKeyArray0 = (MultiKey<Object>[]) Array.newInstance(MultiKey.class, 0);
      MultiKey<MultiKey<Object>> multiKey2 = new MultiKey<MultiKey<Object>>(multiKeyArray0);
      multiKey2.toString();
      multiKey1.toString();
      multiKey2.size();
      multiKey0.getKeys();
      Integer[] integerArray0 = new Integer[6];
      integerArray0[0] = integer0;
      integerArray0[1] = integer0;
      integerArray0[2] = integer0;
      integerArray0[3] = integer0;
      integerArray0[4] = integer0;
      integerArray0[5] = integer0;
      MultiKey<Integer> multiKey3 = new MultiKey<Integer>(integerArray0);
      multiKey3.getKeys();
      multiKey2.toString();
      multiKey0.getKeys();
      int int0 = multiKey3.size();
      assertEquals(6, int0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Integer integer0 = new Integer(1948);
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integer0, integer0);
      Integer integer1 = new Integer(1948);
      Integer integer2 = new Integer(1948);
      Integer integer3 = new Integer(1948);
      MultiKey<Integer> multiKey1 = new MultiKey<Integer>(integer1, integer2, integer2, integer3);
      MultiKey<MultiKey<Integer>> multiKey2 = new MultiKey<MultiKey<Integer>>(multiKey0, multiKey0, multiKey1, multiKey1, multiKey0);
      multiKey2.getKeys();
      multiKey1.toString();
      MultiKey<String> multiKey3 = new MultiKey<String>("", "", "");
      multiKey3.toString();
      multiKey3.equals(multiKey1);
      // Undeclared exception!
//      try { 
        multiKey1.getKey(1948);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 1948
//         //
//         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
//      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Object object0 = new Object();
      MultiKey<Object> multiKey0 = null;
//      try {
        multiKey0 = new MultiKey<Object>((Object[]) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // The array of keys must not be null
//         //
//         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
//      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("l", "");
      MultiKey<Object> multiKey1 = null;
//      try {
        multiKey1 = new MultiKey<Object>((Object[]) null, true);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // The array of keys must not be null
//         //
//         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
//      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Integer integer0 = new Integer(0);
      Integer integer1 = new Integer(0);
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integer0, integer1, (Integer) null);
      String[] stringArray0 = new String[4];
      stringArray0[0] = "`?o,'`<[!p<";
      stringArray0[1] = "";
      stringArray0[2] = "";
      stringArray0[3] = ";AzfVP:6(XdS{;:";
      MultiKey<String> multiKey1 = new MultiKey<String>(stringArray0, false);
      String[] stringArray1 = multiKey1.getKeys();
      assertEquals(4, stringArray1.length);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      MultiKey<Object> multiKey0 = new MultiKey<Object>((Object) null, (Object) null, (Object) null, (Object) null, (Object) null);
      String string0 = multiKey0.toString();
      assertEquals("MultiKey[null, null, null, null, null]", string0);
      
      MultiKey<String>[] multiKeyArray0 = (MultiKey<String>[]) Array.newInstance(MultiKey.class, 7);
      MultiKey<String> multiKey1 = new MultiKey<String>("MultiKey[null, null, null, null, null]", "MultiKey[null, null, null, null, null]");
      multiKeyArray0[0] = multiKey1;
      MultiKey<String> multiKey2 = new MultiKey<String>("Q^MUO3*ziD3v49l71s", "Q^MUO3*ziD3v49l71s", "MultiKey[null, null, null, null, null]", "Q^MUO3*ziD3v49l71s");
      multiKeyArray0[1] = multiKey2;
      MultiKey<String> multiKey3 = new MultiKey<String>("MultiKey[null, null, null, null, null]", "lR`J ", "org.apache.commons.collections4.keyvalue.MultiKey");
      multiKeyArray0[2] = multiKey3;
      MultiKey<String> multiKey4 = new MultiKey<String>("lR`J ", "WR\"|i!e= d#?GV9(");
      multiKeyArray0[3] = multiKey4;
      MultiKey<String> multiKey5 = new MultiKey<String>("MultiKey[null, null, null, null, null]", "lR`J ", "org.apache.commons.collections4.keyvalue.MultiKey");
      multiKeyArray0[4] = multiKey5;
      String[] stringArray0 = new String[7];
      stringArray0[0] = "WR\"|i!e= d#?GV9(";
      stringArray0[1] = "lR`J ";
      stringArray0[2] = "lR`J ";
      stringArray0[3] = "The array of keys must not be null";
      stringArray0[4] = "org.apache.commons.collections4.keyvalue.MultiKey";
      stringArray0[5] = "RjWvF2JN+7`5E";
      stringArray0[6] = "MultiKey[null, null, null, null, null]";
      MultiKey<String> multiKey6 = new MultiKey<String>(stringArray0, true);
      multiKeyArray0[5] = multiKey6;
      MultiKey<String> multiKey7 = new MultiKey<String>("", "", "", "lR`J ");
      multiKeyArray0[6] = multiKey7;
      MultiKey<MultiKey<String>> multiKey8 = new MultiKey<MultiKey<String>>(multiKeyArray0);
      Object object0 = new Object();
      boolean boolean0 = multiKey8.equals(object0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Integer integer0 = new Integer(0);
      Object object0 = new Object();
      Integer[] integerArray0 = new Integer[7];
      integerArray0[0] = integer0;
      integerArray0[1] = integer0;
      integerArray0[2] = integer0;
      integerArray0[3] = integer0;
      integerArray0[4] = integer0;
      integerArray0[5] = integer0;
      integerArray0[6] = integer0;
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integerArray0);
      // Undeclared exception!
//      try { 
        multiKey0.getKey(1943);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 1943
//         //
//         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
//      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Object[] objectArray0 = new Object[4];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      Object object2 = new Object();
      objectArray0[2] = object2;
      Object object3 = new Object();
      objectArray0[3] = object3;
      MultiKey<Object> multiKey0 = new MultiKey<Object>(objectArray0);
      String string0 = multiKey0.toString();
      multiKey0.toString();
      MultiKey<Integer> multiKey1 = new MultiKey<Integer>((Integer) null, (Integer) null, (Integer) null);
      multiKey1.toString();
      multiKey1.getKey(0);
      MultiKey<String> multiKey2 = new MultiKey<String>("MultiKey[java.lang.Object@65e2c829, java.lang.Object@3f8bd3fd, java.lang.Object@d4f11b3, java.lang.Object@4b52a10a]", "", "");
      multiKey2.toString();
      multiKey2.toString();
      multiKey2.toString();
      multiKey2.toString();
      multiKey0.size();
      multiKey0.getKey(0);
      multiKey0.size();
      multiKey2.hashCode();
      multiKey2.equals("n &](4X3 y}%OjG");
      String string1 = multiKey2.toString();
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("", "2f@!~6,$v'zp_@i[ii", "", "", "4oZu");
      String string0 = multiKey0.getKey(0);
      assertEquals("", string0);
  }
}
