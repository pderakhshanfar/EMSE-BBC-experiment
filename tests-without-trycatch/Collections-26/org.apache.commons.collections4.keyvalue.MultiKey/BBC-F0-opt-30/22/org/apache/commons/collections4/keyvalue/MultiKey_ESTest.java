/*
 * This file was automatically generated by EvoSuite
 * Fri Oct 22 17:30:43 GMT 2021
 */

package org.apache.commons.collections4.keyvalue;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.collections4.keyvalue.MultiKey;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class MultiKey_ESTest extends MultiKey_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Integer integer0 = new Integer(0);
      Integer integer1 = new Integer(0);
      Integer integer2 = new Integer(0);
      Integer integer3 = new Integer(0);
      Object[] objectArray0 = new Object[9];
      objectArray0[4] = (Object) integer3;
      objectArray0[8] = (Object) integer0;
      MultiKey<Object> multiKey0 = new MultiKey<Object>(objectArray0, false);
      multiKey0.toString();
      multiKey0.getKey(0);
      multiKey0.getKeys();
      Object object0 = multiKey0.getKey(0);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("MultiKey", "MultiKey", "MultiKey", "MultiKey");
      Integer[] integerArray0 = new Integer[1];
      MultiKey<Integer> multiKey1 = new MultiKey<Integer>(integerArray0, false);
      Integer integer0 = new Integer(0);
      MultiKey<Integer> multiKey2 = new MultiKey<Integer>(integer0, integer0);
      MultiKey<Object> multiKey3 = new MultiKey<Object>(multiKey1, "MultiKey", multiKey1, multiKey2, multiKey2);
      Integer integer1 = new Integer((-1812));
      multiKey2.toString();
      multiKey3.toString();
      boolean boolean0 = multiKey3.equals(multiKey3);
      assertTrue(boolean0);
      
      MultiKey<MultiKey<Object>> multiKey4 = new MultiKey<MultiKey<Object>>(multiKey3, multiKey3, multiKey3, multiKey3, multiKey3);
      String string0 = multiKey4.toString();
      assertEquals("MultiKey[MultiKey[MultiKey[null], MultiKey, MultiKey[null], MultiKey[0, 0], MultiKey[0, 0]], MultiKey[MultiKey[null], MultiKey, MultiKey[null], MultiKey[0, 0], MultiKey[0, 0]], MultiKey[MultiKey[null], MultiKey, MultiKey[null], MultiKey[0, 0], MultiKey[0, 0]], MultiKey[MultiKey[null], MultiKey, MultiKey[null], MultiKey[0, 0], MultiKey[0, 0]], MultiKey[MultiKey[null], MultiKey, MultiKey[null], MultiKey[0, 0], MultiKey[0, 0]]]", string0);
      
      multiKey4.getKeys();
      multiKey0.hashCode();
      Integer integer2 = new Integer((-1812));
      MultiKey<Integer> multiKey5 = new MultiKey<Integer>(integer2, integer2, integer0);
      assertFalse(multiKey5.equals((Object)multiKey1));
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("MultiKey", "MultiKey", "MultiKey", "MultiKey");
      Integer[] integerArray0 = new Integer[14];
      MultiKey<Integer> multiKey1 = new MultiKey<Integer>(integerArray0, false);
      Integer integer0 = new Integer(0);
      MultiKey<Integer> multiKey2 = new MultiKey<Integer>(integer0, integer0);
      MultiKey<String> multiKey3 = new MultiKey<String>("iNh|FyMiWf", "MultiKey", "iNh|FyMiWf");
      String[] stringArray0 = new String[4];
      stringArray0[0] = "iNh|FyMiWf";
      stringArray0[1] = "";
      stringArray0[2] = "iNh|FyMiWf";
      stringArray0[3] = "MultiKey";
      MultiKey<String> multiKey4 = new MultiKey<String>(stringArray0, false);
      MultiKey<String> multiKey5 = new MultiKey<String>(stringArray0);
      multiKey4.equals(multiKey5);
      assertFalse(multiKey5.equals((Object)multiKey0));
      assertFalse(multiKey4.equals((Object)multiKey0));
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Integer[] integerArray0 = new Integer[0];
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integerArray0);
      Integer integer0 = new Integer(5);
      Integer integer1 = new Integer((-86));
      Integer integer2 = new Integer(5);
      Integer integer3 = new Integer(5);
      MultiKey<Integer> multiKey1 = new MultiKey<Integer>(integer2, integer2, integer3, integer0);
      multiKey0.toString();
      MultiKey<Object> multiKey2 = new MultiKey<Object>((Object[]) integerArray0, false);
      multiKey2.size();
      multiKey2.hashCode();
      MultiKey<String> multiKey3 = new MultiKey<String>("org.apache.commons.collections4.keyvalue.MultiKey", "8.9(r)sYqvUEM&:Uw", "gn:gF0wG2u|szv$", (String) null, (String) null);
      // Undeclared exception!
//      try { 
        multiKey3.getKey((-3378));
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // -3378
//         //
//         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
//      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Integer[] integerArray0 = new Integer[0];
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integerArray0);
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.hashCode();
      multiKey0.toString();
      Object object0 = new Object();
      multiKey0.equals(object0);
      MultiKey<Object> multiKey1 = new MultiKey<Object>(integerArray0);
      Object[] objectArray0 = multiKey1.getKeys();
      assertEquals(0, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      int int0 = 0;
      Integer integer0 = new Integer(0);
      Integer integer1 = new Integer(0);
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integer0, integer1);
      MultiKey<Integer> multiKey1 = null;
//      try {
        multiKey1 = new MultiKey<Integer>((Integer[]) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // The array of keys must not be null
//         //
//         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
//      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Integer integer0 = new Integer((-1504));
      Integer integer1 = new Integer((-1504));
      Integer integer2 = new Integer(0);
      Integer integer3 = new Integer(0);
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integer0, integer1, integer2, integer3);
      multiKey0.toString();
      multiKey0.size();
      Integer integer4 = new Integer(0);
      Integer integer5 = new Integer(0);
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) "MultiKey[-1504, -1504, 0, 0]";
      objectArray0[1] = (Object) multiKey0;
      objectArray0[2] = (Object) integer0;
      objectArray0[3] = (Object) integer0;
      objectArray0[4] = (Object) integer5;
      objectArray0[5] = (Object) "MultiKey[-1504, -1504, 0, 0]";
      objectArray0[6] = (Object) multiKey0;
      objectArray0[7] = (Object) integer1;
      objectArray0[8] = (Object) integer2;
      MultiKey<Object> multiKey1 = new MultiKey<Object>(objectArray0, true);
      multiKey1.getKey(0);
      MultiKey<String> multiKey2 = new MultiKey<String>("MultiKey[-1504, -1504, 0, 0]", "MultiKey[-1504, -1504, 0, 0]");
      multiKey2.getKey(1);
      MultiKey<Object> multiKey3 = new MultiKey<Object>(integer5, integer5, "MultiKey[-1504, -1504, 0, 0]", "MultiKey[-1504, -1504, 0, 0]", "MultiKey[-1504, -1504, 0, 0]");
      Object object0 = multiKey3.getKey(0);
      MultiKey<Object> multiKey4 = new MultiKey<Object>(integer3, integer4, object0, (Object) null);
      int int0 = multiKey4.size();
      assertEquals(4, int0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Object[] objectArray0 = new Object[7];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      Object object2 = new Object();
      objectArray0[2] = object2;
      Object object3 = new Object();
      objectArray0[3] = object3;
      MultiKey<Object> multiKey0 = new MultiKey<Object>(object0, object3);
      MultiKey<MultiKey<Object>> multiKey1 = new MultiKey<MultiKey<Object>>(multiKey0, multiKey0, multiKey0, multiKey0);
      MultiKey<Object> multiKey2 = multiKey1.getKey(0);
      objectArray0[4] = (Object) multiKey2;
      MultiKey<Integer> multiKey3 = null;
//      try {
        multiKey3 = new MultiKey<Integer>((Integer[]) null, true);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // The array of keys must not be null
//         //
//         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
//      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      String[] stringArray0 = new String[0];
      MultiKey<String> multiKey0 = new MultiKey<String>(stringArray0);
      MultiKey<Object> multiKey1 = new MultiKey<Object>((Object[]) stringArray0, true);
      multiKey1.toString();
      multiKey1.getKeys();
      Integer[] integerArray0 = new Integer[2];
      int int0 = 0;
      Integer integer0 = new Integer(0);
      integerArray0[0] = integer0;
      Integer integer1 = new Integer(int0);
      integerArray0[1] = integer1;
      MultiKey<Integer> multiKey2 = new MultiKey<Integer>(integerArray0);
      Integer[] integerArray1 = multiKey2.getKeys();
      assertFalse(integerArray1.equals((Object)integerArray0));
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      boolean boolean0 = true;
      MultiKey<Object> multiKey0 = new MultiKey<Object>(objectArray0, true);
      int int0 = (-1);
      // Undeclared exception!
//      try { 
        multiKey0.getKey((-1));
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // -1
//         //
//         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
//      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("MultiKey", "MultiKey", "MultiKey", "MultiKey");
      Integer[] integerArray0 = new Integer[0];
      MultiKey<Integer> multiKey1 = new MultiKey<Integer>(integerArray0, false);
      Integer integer0 = new Integer(0);
      MultiKey<Integer> multiKey2 = new MultiKey<Integer>(integer0, integer0);
      MultiKey<Object> multiKey3 = new MultiKey<Object>(multiKey1, "MultiKey", multiKey1, multiKey2, multiKey2);
      Integer integer1 = new Integer((-1812));
      MultiKey<Object> multiKey4 = new MultiKey<Object>(multiKey3, (Object) null, integer1, integer0);
      multiKey3.equals(multiKey4);
      MultiKey<MultiKey<Object>> multiKey5 = new MultiKey<MultiKey<Object>>(multiKey4, multiKey4, multiKey4);
      String string0 = multiKey5.toString();
      multiKey5.getKeys();
      multiKey0.hashCode();
      String string1 = multiKey0.getKey(3);
      assertFalse(string1.equals((Object)string0));
  }
}
