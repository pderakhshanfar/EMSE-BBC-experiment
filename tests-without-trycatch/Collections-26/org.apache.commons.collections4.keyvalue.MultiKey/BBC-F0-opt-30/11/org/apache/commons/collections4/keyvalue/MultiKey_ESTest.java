/*
 * This file was automatically generated by EvoSuite
 * Wed Oct 20 12:15:05 GMT 2021
 */

package org.apache.commons.collections4.keyvalue;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.lang.reflect.Array;
import org.apache.commons.collections4.keyvalue.MultiKey;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class MultiKey_ESTest extends MultiKey_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("MwM7mb'0}D<Ih", "MwM7mb'0}D<Ih", "", "^Xs#E]T");
      Integer[] integerArray0 = new Integer[0];
      MultiKey<Integer> multiKey1 = new MultiKey<Integer>(integerArray0);
      Integer[] integerArray1 = multiKey1.getKeys();
      assertNotSame(integerArray0, integerArray1);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("k8eP(`);OzqrQ2\"", "k8eP(`);OzqrQ2\"", "k8eP(`);OzqrQ2\"", "k8eP(`);OzqrQ2\"");
      String string0 = multiKey0.toString();
      assertEquals("MultiKey[k8eP(`);OzqrQ2\", k8eP(`);OzqrQ2\", k8eP(`);OzqrQ2\", k8eP(`);OzqrQ2\"]", string0);
      
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) "k8eP(`);OzqrQ2\"";
      MultiKey<Object> multiKey1 = new MultiKey<Object>(objectArray0);
      MultiKey<MultiKey<Object>> multiKey2 = new MultiKey<MultiKey<Object>>(multiKey1, multiKey1);
      Object object0 = multiKey2.getKey(1);
      boolean boolean0 = multiKey1.equals(object0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Integer integer0 = new Integer(0);
      Integer integer1 = new Integer((-2583));
      Integer integer2 = new Integer((-1666));
      Integer integer3 = new Integer((-2583));
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integer2, integer2, integer1, integer3);
      MultiKey<Integer>[] multiKeyArray0 = (MultiKey<Integer>[]) Array.newInstance(MultiKey.class, 7);
      multiKeyArray0[0] = multiKey0;
      multiKeyArray0[1] = multiKey0;
      multiKeyArray0[2] = multiKey0;
      multiKeyArray0[3] = multiKey0;
      multiKeyArray0[4] = multiKey0;
      multiKeyArray0[5] = multiKey0;
      multiKeyArray0[6] = multiKey0;
      MultiKey<MultiKey<Integer>> multiKey1 = new MultiKey<MultiKey<Integer>>(multiKeyArray0);
      MultiKey<MultiKey<Integer>> multiKey2 = new MultiKey<MultiKey<Integer>>(multiKey0, multiKey0, multiKey0, multiKey0, multiKey0);
      Object object0 = new Object();
      String string0 = multiKey0.toString();
      assertEquals("MultiKey[-1666, -1666, -2583, -2583]", string0);
      
      Integer integer4 = new Integer((-2583));
      MultiKey<Object> multiKey3 = new MultiKey<Object>(multiKey0, "whEG|9T", object0, integer4, "whEG|9T");
      boolean boolean0 = multiKey2.equals(multiKey3);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Object object0 = new Object();
      Integer integer0 = new Integer((-551));
      MultiKey<Object> multiKey0 = new MultiKey<Object>(object0, "", "", integer0, "");
      int int0 = 6;
      Integer integer1 = new Integer(6);
      Integer integer2 = new Integer(6);
      MultiKey<Integer> multiKey1 = new MultiKey<Integer>(integer0, integer1, integer1, integer2, integer0);
      Integer[] integerArray0 = new Integer[6];
      integerArray0[0] = integer2;
      integerArray0[1] = integer2;
      integerArray0[2] = integer1;
      integerArray0[3] = integer1;
      integerArray0[4] = integer0;
      integerArray0[5] = integer2;
      String string0 = multiKey1.toString();
      assertEquals("MultiKey[-551, 6, 6, 6, -551]", string0);
      
      MultiKey<Integer> multiKey2 = new MultiKey<Integer>(integerArray0, true);
      boolean boolean0 = multiKey2.equals(multiKey1);
      assertFalse(boolean0);
      
      Integer integer3 = new Integer(int0);
      boolean boolean1 = multiKey2.equals(integer3);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Object[] objectArray0 = new Object[9];
      MultiKey<Object> multiKey0 = new MultiKey<Object>(objectArray0);
      multiKey0.getKey(0);
      objectArray0[0] = null;
      Object object0 = new Object();
      objectArray0[1] = object0;
      multiKey0.getKey(0);
      objectArray0[2] = null;
      MultiKey<String> multiKey1 = new MultiKey<String>((String) null, (String) null, "The array of keys must not be null");
      multiKey1.getKey(0);
      objectArray0[3] = (Object) null;
      multiKey0.toString();
      multiKey0.toString();
      Object object1 = new Object();
      objectArray0[4] = object1;
      Object object2 = new Object();
      objectArray0[5] = object2;
      Object object3 = new Object();
      objectArray0[6] = object3;
      multiKey0.toString();
      int int0 = (-1);
      multiKey1.toString();
      // Undeclared exception!
//      try { 
        multiKey1.getKey((-1));
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // -1
//         //
//         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
//      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Object object0 = new Object();
      MultiKey<Object> multiKey0 = new MultiKey<Object>(object0, object0, (Object) null, (Object) null, object0);
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      MultiKey<MultiKey<Object>> multiKey1 = new MultiKey<MultiKey<Object>>(multiKey0, multiKey0);
      Integer integer0 = new Integer(4);
      Integer integer1 = new Integer(4);
      MultiKey<Integer> multiKey2 = new MultiKey<Integer>(integer0, integer1, integer0);
      multiKey0.toString();
      multiKey0.toString();
      multiKey2.toString();
      MultiKey<Object> multiKey3 = null;
//      try {
        multiKey3 = new MultiKey<Object>((Object[]) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // The array of keys must not be null
//         //
//         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
//      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      String[] stringArray0 = new String[0];
      MultiKey<String> multiKey0 = new MultiKey<String>(stringArray0, true);
      multiKey0.size();
      Object object0 = new Object();
      MultiKey<String> multiKey1 = new MultiKey<String>(stringArray0);
      // Undeclared exception!
//      try { 
        multiKey1.getKey(0);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 0
//         //
//         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
//      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      String[] stringArray0 = new String[2];
      stringArray0[0] = "";
      stringArray0[1] = "";
      MultiKey<String> multiKey0 = new MultiKey<String>(stringArray0);
      multiKey0.toString();
      multiKey0.size();
      Object object0 = new Object();
      MultiKey<Object> multiKey1 = new MultiKey<Object>(object0, object0);
      multiKey1.toString();
      // Undeclared exception!
//      try { 
        multiKey1.getKey(2);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 2
//         //
//         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
//      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      String string0 = "";
      String string1 = "M<(P\"vP(~";
      MultiKey<String> multiKey0 = new MultiKey<String>("+/*.N1Xs7~4nP>c-", "", "+/*.N1Xs7~4nP>c-", "M<(P\"vP(~", "M<(P\"vP(~");
      multiKey0.toString();
      Integer integer0 = new Integer((-1874));
      Integer integer1 = new Integer((-425));
      Integer integer2 = new Integer((-1874));
      MultiKey<Integer> multiKey1 = new MultiKey<Integer>(integer0, integer1, integer2);
      multiKey1.toString();
      // Undeclared exception!
//      try { 
        multiKey1.getKey((-1874));
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // -1874
//         //
//         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
//      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Object[] objectArray0 = new Object[8];
      Object object0 = new Object();
      objectArray0[0] = object0;
      MultiKey<String> multiKey0 = new MultiKey<String>("@)5chV[+c}", "@)5chV[+c}", "");
      MultiKey<MultiKey<String>> multiKey1 = new MultiKey<MultiKey<String>>(multiKey0, multiKey0, multiKey0, multiKey0, multiKey0);
      MultiKey<String> multiKey2 = multiKey1.getKey(0);
      objectArray0[1] = (Object) multiKey2;
      String string0 = multiKey0.getKey(1);
      objectArray0[2] = (Object) "@)5chV[+c}";
      Object object1 = new Object();
      objectArray0[3] = object1;
      Object object2 = new Object();
      objectArray0[4] = object2;
      Object object3 = new Object();
      objectArray0[5] = object3;
      Integer integer0 = new Integer(0);
      Integer integer1 = new Integer(0);
      Integer integer2 = new Integer(134);
      Integer integer3 = new Integer(376);
      MultiKey<Integer> multiKey3 = new MultiKey<Integer>(integer0, integer0, integer1, integer2, integer3);
      Integer integer4 = multiKey3.getKey(3);
      objectArray0[6] = (Object) integer4;
      MultiKey<Object> multiKey4 = new MultiKey<Object>((Object) null, "@)5chV[+c}", "@)5chV[+c}");
      multiKey4.getKey(2);
      objectArray0[7] = (Object) "@)5chV[+c}";
      MultiKey<Object> multiKey5 = new MultiKey<Object>(objectArray0);
      String string1 = multiKey5.toString();
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Integer integer0 = new Integer(1);
      Integer integer1 = new Integer(1);
      Integer integer2 = new Integer((-1969));
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integer0, integer1, integer0, integer2);
      multiKey0.toString();
      multiKey0.hashCode();
      String[] stringArray0 = new String[8];
      stringArray0[0] = "MultiKey[1, 1, 1, -1969]";
      stringArray0[1] = "MultiKey[1, 1, 1, -1969]";
      stringArray0[2] = "MultiKey[1, 1, 1, -1969]";
      stringArray0[3] = "MultiKey[1, 1, 1, -1969]";
      stringArray0[4] = "MultiKey[1, 1, 1, -1969]";
      stringArray0[5] = "MultiKey[1, 1, 1, -1969]";
      stringArray0[6] = "";
      stringArray0[7] = "MultiKey[1, 1, 1, -1969]";
      MultiKey<String> multiKey1 = new MultiKey<String>(stringArray0, false);
      multiKey1.toString();
      multiKey1.hashCode();
      Integer integer3 = new Integer(0);
      MultiKey<Integer> multiKey2 = new MultiKey<Integer>(integer1, integer3, (Integer) null, integer0, (Integer) null);
      MultiKey<Object> multiKey3 = new MultiKey<Object>(integer0, multiKey2);
      multiKey3.hashCode();
      MultiKey<Object> multiKey4 = new MultiKey<Object>((Object[]) stringArray0, false);
      Integer integer4 = new Integer(0);
      Integer integer5 = new Integer((-161));
      MultiKey<Object> multiKey5 = new MultiKey<Object>(multiKey4, integer4, integer5);
      Object object0 = multiKey5.getKey(1);
      multiKey3.equals(object0);
      MultiKey<MultiKey<Object>> multiKey6 = new MultiKey<MultiKey<Object>>(multiKey4, multiKey4, multiKey4, multiKey4, multiKey3);
      multiKey6.getKeys();
      MultiKey<MultiKey<Integer>> multiKey7 = null;
//      try {
        multiKey7 = new MultiKey<MultiKey<Integer>>((MultiKey<Integer>[]) null, false);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // The array of keys must not be null
//         //
//         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
//      }
  }
}
