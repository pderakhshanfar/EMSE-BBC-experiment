/*
 * This file was automatically generated by EvoSuite
 * Fri Oct 22 17:40:09 GMT 2021
 */

package org.apache.commons.collections4.keyvalue;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.lang.reflect.Array;
import org.apache.commons.collections4.keyvalue.MultiKey;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class MultiKey_ESTest extends MultiKey_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>((String) null, "", "2$(e9", "sTVa@}N5C[t");
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) multiKey0;
      objectArray0[1] = (Object) "sTVa@}N5C[t";
      objectArray0[2] = (Object) multiKey0;
      objectArray0[3] = (Object) "2$(e9";
      objectArray0[4] = (Object) multiKey0;
      MultiKey<Object> multiKey1 = new MultiKey<Object>(objectArray0);
      MultiKey<MultiKey<Object>> multiKey2 = new MultiKey<MultiKey<Object>>(multiKey1, multiKey1, multiKey1, multiKey1, multiKey1);
      Object object0 = multiKey2.getKey(2);
      boolean boolean0 = multiKey1.equals(object0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("V4W}S-4H@~Pn", "H", "!D}-TG|X//", "!D}-TG|X//");
      MultiKey<Object>[] multiKeyArray0 = (MultiKey<Object>[]) Array.newInstance(MultiKey.class, 0);
      MultiKey<MultiKey<Object>> multiKey1 = new MultiKey<MultiKey<Object>>(multiKeyArray0);
      MultiKey<Object>[] multiKeyArray1 = multiKey1.getKeys();
      assertEquals(0, multiKeyArray1.length);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Integer integer0 = new Integer((-1251));
      MultiKey<String> multiKey0 = new MultiKey<String>("YBi`v", "8-&{]R6Zl0Eu", "YBi`v");
      String string0 = "";
      MultiKey<String> multiKey1 = new MultiKey<String>("8-&{]R6Zl0Eu", "", "", "YBi`v", "YBi`v");
      MultiKey<String> multiKey2 = new MultiKey<String>("8-&{]R6Zl0Eu", "", "");
      MultiKey<MultiKey<String>> multiKey3 = null;
//      try {
        multiKey3 = new MultiKey<MultiKey<String>>((MultiKey<String>[]) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // The array of keys must not be null
//         //
//         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
//      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Integer integer0 = new Integer(4);
      Integer integer1 = new Integer((-490));
      Integer integer2 = new Integer((-490));
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integer0, integer1, integer2, integer1, integer1);
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) multiKey0;
      objectArray0[1] = (Object) integer0;
      objectArray0[2] = (Object) integer0;
      objectArray0[3] = (Object) integer1;
      objectArray0[4] = (Object) multiKey0;
      objectArray0[5] = (Object) integer2;
      objectArray0[6] = (Object) integer2;
      MultiKey<Object> multiKey1 = new MultiKey<Object>(objectArray0, false);
      MultiKey<MultiKey<Object>> multiKey2 = new MultiKey<MultiKey<Object>>(multiKey1, multiKey1, multiKey1, multiKey1, multiKey1);
      multiKey2.toString();
      MultiKey<String> multiKey3 = new MultiKey<String>("?Pa%3", "?Pa%3", "BD.blb", (String) null, "MultiKey[MultiKey[MultiKey[4, -490, -490, -490, -490], 4, 4, -490, MultiKey[4, -490, -490, -490, -490], -490, -490], MultiKey[MultiKey[4, -490, -490, -490, -490], 4, 4, -490, MultiKey[4, -490, -490, -490, -490], -490, -490], MultiKey[MultiKey[4, -490, -490, -490, -490], 4, 4, -490, MultiKey[4, -490, -490, -490, -490], -490, -490], MultiKey[MultiKey[4, -490, -490, -490, -490], 4, 4, -490, MultiKey[4, -490, -490, -490, -490], -490, -490], MultiKey[MultiKey[4, -490, -490, -490, -490], 4, 4, -490, MultiKey[4, -490, -490, -490, -490], -490, -490]]");
      multiKey3.toString();
      multiKey3.getKey(0);
      String string0 = multiKey3.getKey(3);
      assertNull(string0);
      
      multiKey3.size();
      multiKey1.getKeys();
      String string1 = multiKey1.toString();
      assertEquals("MultiKey[MultiKey[4, -490, -490, -490, -490], 4, 4, -490, MultiKey[4, -490, -490, -490, -490], -490, -490]", string1);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("mntrvmiYk/sPbk3CP", "mntrvmiYk/sPbk3CP", "mntrvmiYk/sPbk3CP", (String) null, (String) null);
      MultiKey<String> multiKey1 = new MultiKey<String>("mntrvmiYk/sPbk3CP", (String) null, "", "wd_PcE");
      boolean boolean0 = multiKey0.equals(multiKey1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      MultiKey<Object> multiKey0 = new MultiKey<Object>(objectArray0, false);
      int int0 = multiKey0.size();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Integer integer0 = new Integer(1);
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integer0, integer0);
      MultiKey<Object> multiKey1 = new MultiKey<Object>(multiKey0, integer0, integer0, integer0);
      MultiKey<String>[] multiKeyArray0 = (MultiKey<String>[]) Array.newInstance(MultiKey.class, 3);
      MultiKey<String> multiKey2 = new MultiKey<String>("YBi`v", "8-&{]R6Zl0Eu", "k.wDr|U'!");
      multiKeyArray0[0] = multiKey2;
      MultiKey<String> multiKey3 = new MultiKey<String>(":[;,fb7_kS", "k.wDr|U'!", ":[;,fb7_kS", "3Xtq Wwx!:{m", "k.wDr|U'!");
      multiKeyArray0[1] = multiKey3;
      MultiKey<String> multiKey4 = new MultiKey<String>("k.wDr|U'!", "#q/M0Zj6jeGY", "8-&{]R6Zl0Eu");
      multiKeyArray0[2] = multiKey4;
      MultiKey<MultiKey<String>> multiKey5 = new MultiKey<MultiKey<String>>(multiKeyArray0);
      String string0 = multiKey5.toString();
      assertEquals("MultiKey[MultiKey[YBi`v, 8-&{]R6Zl0Eu, k.wDr|U'!], MultiKey[:[;,fb7_kS, k.wDr|U'!, :[;,fb7_kS, 3Xtq Wwx!:{m, k.wDr|U'!], MultiKey[k.wDr|U'!, #q/M0Zj6jeGY, 8-&{]R6Zl0Eu]]", string0);
      
      multiKey1.hashCode();
      multiKey1.getKeys();
      String string1 = multiKey4.getKey(1);
      assertEquals("#q/M0Zj6jeGY", string1);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      String[] stringArray0 = new String[7];
      stringArray0[0] = "S*XLAFX8";
      stringArray0[1] = "zHW/*TMTG[%";
      stringArray0[2] = "";
      stringArray0[3] = "";
      stringArray0[4] = "UjDmuLs/Td.U:]";
      stringArray0[5] = "Vc29mE/C[";
      stringArray0[6] = "Rd53a!Ls%#o)a8wPfVG";
      MultiKey<String> multiKey0 = new MultiKey<String>(stringArray0);
      MultiKey<MultiKey<String>> multiKey1 = new MultiKey<MultiKey<String>>(multiKey0, multiKey0);
      multiKey0.toString();
      multiKey1.toString();
      multiKey1.size();
      multiKey1.toString();
      MultiKey<Object> multiKey2 = new MultiKey<Object>((Object[]) stringArray0, false);
      multiKey2.getKey(2);
      multiKey2.toString();
      MultiKey<Object> multiKey3 = new MultiKey<Object>(multiKey1, "The array of keys must not be null", "MultiKey[MultiKey[S*XLAFX8, zHW/*TMTG[%, , , UjDmuLs/Td.U:], Vc29mE/C[, Rd53a!Ls%#o)a8wPfVG], MultiKey[S*XLAFX8, zHW/*TMTG[%, , , UjDmuLs/Td.U:], Vc29mE/C[, Rd53a!Ls%#o)a8wPfVG]]");
      String string0 = multiKey3.toString();
      assertEquals("MultiKey[MultiKey[MultiKey[S*XLAFX8, zHW/*TMTG[%, , , UjDmuLs/Td.U:], Vc29mE/C[, Rd53a!Ls%#o)a8wPfVG], MultiKey[S*XLAFX8, zHW/*TMTG[%, , , UjDmuLs/Td.U:], Vc29mE/C[, Rd53a!Ls%#o)a8wPfVG]], The array of keys must not be null, MultiKey[MultiKey[S*XLAFX8, zHW/*TMTG[%, , , UjDmuLs/Td.U:], Vc29mE/C[, Rd53a!Ls%#o)a8wPfVG], MultiKey[S*XLAFX8, zHW/*TMTG[%, , , UjDmuLs/Td.U:], Vc29mE/C[, Rd53a!Ls%#o)a8wPfVG]]]", string0);
      
      MultiKey<Object> multiKey4 = new MultiKey<Object>("", multiKey3, "zHW/*TMTG[%");
      multiKey4.hashCode();
      boolean boolean0 = multiKey4.equals("The array of keys must not be null");
      assertFalse(boolean0);
      
      multiKey4.hashCode();
      multiKey0.size();
      Integer integer0 = new Integer(7);
      Integer integer1 = new Integer(2);
      MultiKey<Integer> multiKey5 = new MultiKey<Integer>(integer0, integer1, integer0);
      Integer integer2 = multiKey5.getKey(1);
      assertEquals(2, (int)integer2);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Object[] objectArray0 = new Object[5];
      Object object0 = new Object();
      objectArray0[0] = object0;
      MultiKey<String> multiKey0 = new MultiKey<String>("", "", "", "", "");
      multiKey0.getKey(1);
      objectArray0[1] = (Object) "";
      Object object1 = new Object();
      objectArray0[2] = object1;
      Object object2 = new Object();
      objectArray0[3] = object2;
      Integer[] integerArray0 = new Integer[2];
      Integer integer0 = new Integer((-3436));
      integerArray0[0] = integer0;
      Integer integer1 = new Integer(1);
      integerArray0[1] = integer1;
      MultiKey<Integer> multiKey1 = new MultiKey<Integer>(integerArray0, true);
      // Undeclared exception!
//      try { 
        multiKey1.getKey((-3248));
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // -3248
//         //
//         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
//      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Object[] objectArray0 = new Object[3];
      MultiKey<String>[] multiKeyArray0 = (MultiKey<String>[]) Array.newInstance(MultiKey.class, 9);
      MultiKey<String> multiKey0 = new MultiKey<String>("", "");
      multiKeyArray0[0] = multiKey0;
      String string0 = "\"Xnpj^4";
      MultiKey<String> multiKey1 = new MultiKey<String>("", "JSPm/Q", "\"Xnpj^4");
      multiKeyArray0[1] = multiKey1;
      MultiKey<String> multiKey2 = new MultiKey<String>("VEZTPK}i", "[t,afTB>26&g4&h]", "MultiKey", "\"Xnpj^4", "");
      multiKeyArray0[2] = multiKey2;
      String[] stringArray0 = new String[1];
      stringArray0[0] = "";
      MultiKey<String> multiKey3 = new MultiKey<String>(stringArray0);
      multiKeyArray0[3] = multiKey3;
      MultiKey<String> multiKey4 = new MultiKey<String>("", "JSPm/Q");
      multiKeyArray0[4] = multiKey4;
      MultiKey<String> multiKey5 = new MultiKey<String>("MultiKey", "JSPm/Q", "", (String) null, "JSPm/Q");
      multiKeyArray0[5] = multiKey5;
      MultiKey<String> multiKey6 = new MultiKey<String>("", "\"Xnpj^4");
      multiKeyArray0[6] = multiKey6;
      String string1 = "";
      MultiKey<String> multiKey7 = new MultiKey<String>((String) null, "kOAxj", "v/pmg/fWseE HEV", "");
      multiKeyArray0[7] = multiKey7;
      MultiKey<String> multiKey8 = new MultiKey<String>("[t,afTB>26&g4&h]", "U", "", "", "vMyj");
      multiKeyArray0[8] = multiKey8;
      MultiKey<MultiKey<String>> multiKey9 = new MultiKey<MultiKey<String>>(multiKeyArray0, false);
      // Undeclared exception!
//      try { 
        multiKey9.getKey(239);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 239
//         //
//         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
//      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("-Th-px'", "-Th-px'");
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.equals("-Th-px'");
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      Object[] objectArray0 = new Object[0];
      MultiKey<Object> multiKey1 = new MultiKey<Object>(objectArray0, false);
      multiKey1.toString();
      multiKey1.toString();
      multiKey1.toString();
      multiKey1.toString();
      // Undeclared exception!
//      try { 
        multiKey1.getKey((-1249));
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // -1249
//         //
//         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
//      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Integer[] integerArray0 = new Integer[7];
      Integer integer0 = new Integer((-1814));
      integerArray0[0] = integer0;
      Integer integer1 = new Integer(0);
      integerArray0[1] = integer1;
      Integer integer2 = new Integer((-1814));
      integerArray0[2] = integer2;
      Integer integer3 = new Integer(2);
      integerArray0[3] = integer3;
      int int0 = (-1);
      Integer integer4 = new Integer((-1));
      integerArray0[4] = integer4;
      Integer integer5 = new Integer(int0);
      integerArray0[5] = integer5;
      Integer integer6 = new Integer((int) integerArray0[0]);
      integerArray0[6] = integer6;
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integerArray0, false);
      String[] stringArray0 = new String[5];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "";
      stringArray0[3] = "";
      stringArray0[4] = "";
      MultiKey<String> multiKey1 = new MultiKey<String>(stringArray0);
      Integer integer7 = new Integer((-1814));
      MultiKey<Object> multiKey2 = new MultiKey<Object>("", "", multiKey1, integer7);
      String string0 = multiKey2.toString();
      assertEquals("MultiKey[, , MultiKey[, , , , ], -1814]", string0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      String string0 = "";
      MultiKey<String> multiKey0 = new MultiKey<String>("", "", "", "");
      multiKey0.toString();
      multiKey0.hashCode();
      Integer integer0 = new Integer(0);
      Integer integer1 = new Integer(0);
      Integer integer2 = new Integer(589);
      MultiKey<Integer> multiKey1 = new MultiKey<Integer>(integer0, integer1, integer2);
      multiKey1.getKey(0);
      String string1 = null;
      multiKey0.toString();
      multiKey0.toString();
      MultiKey<String> multiKey2 = new MultiKey<String>("", "");
      multiKey0.toString();
      multiKey2.toString();
      // Undeclared exception!
//      try { 
        multiKey2.getKey((-589));
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // -589
//         //
//         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
//      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      MultiKey<MultiKey<Integer>> multiKey0 = new MultiKey<MultiKey<Integer>>((MultiKey<Integer>) null, (MultiKey<Integer>) null);
      String[] stringArray0 = new String[6];
      stringArray0[0] = "";
      stringArray0[1] = "lVr\"?Qo";
      stringArray0[2] = "The array of keys must not be null";
      stringArray0[3] = "jg`J0z>GwS@)hI";
      stringArray0[4] = "org.apache.commons.collections4.keyvalue.MultiKey";
      stringArray0[5] = "";
      MultiKey<String> multiKey1 = new MultiKey<String>(stringArray0);
      // Undeclared exception!
//      try { 
        multiKey1.getKey(3022);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 3022
//         //
//         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
//      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      MultiKey<Integer> multiKey0 = null;
//      try {
        multiKey0 = new MultiKey<Integer>((Integer[]) null, false);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // The array of keys must not be null
//         //
//         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
//      }
  }
}
