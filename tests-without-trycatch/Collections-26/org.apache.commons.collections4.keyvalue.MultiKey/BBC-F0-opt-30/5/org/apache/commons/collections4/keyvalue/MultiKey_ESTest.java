/*
 * This file was automatically generated by EvoSuite
 * Wed Oct 13 20:48:11 GMT 2021
 */

package org.apache.commons.collections4.keyvalue;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.lang.reflect.Array;
import org.apache.commons.collections4.keyvalue.MultiKey;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class MultiKey_ESTest extends MultiKey_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("", "", "", "");
      MultiKey<String> multiKey1 = new MultiKey<String>("", "");
      MultiKey<String>[] multiKeyArray0 = (MultiKey<String>[]) Array.newInstance(MultiKey.class, 3);
      multiKeyArray0[0] = multiKey1;
      multiKeyArray0[1] = multiKey0;
      multiKeyArray0[2] = multiKey0;
      MultiKey<MultiKey<String>> multiKey2 = new MultiKey<MultiKey<String>>(multiKeyArray0, true);
      MultiKey<String> multiKey3 = multiKey2.getKey(1);
      boolean boolean0 = multiKey1.equals("");
      Object object0 = new Object();
      MultiKey<Object> multiKey4 = new MultiKey<Object>(multiKey3, multiKey1, object0, multiKey1, multiKey1);
      Object object1 = multiKey4.getKey(1);
      boolean boolean1 = multiKey1.equals(object1);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Integer[] integerArray0 = new Integer[0];
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integerArray0);
      Integer integer0 = new Integer(81);
      Integer integer1 = new Integer(81);
      Integer integer2 = new Integer((-954));
      Integer integer3 = new Integer((-650));
      MultiKey<Integer> multiKey1 = new MultiKey<Integer>(integer0, integer3, integer2, integer0, integer1);
      MultiKey<MultiKey<Integer>> multiKey2 = new MultiKey<MultiKey<Integer>>(multiKey1, multiKey1, multiKey0);
      Integer integer4 = new Integer(81);
      Integer integer5 = new Integer(2246);
      MultiKey<Integer> multiKey3 = new MultiKey<Integer>(integer4, integer5, integer2, integer4, integer1);
      Integer integer6 = new Integer(81);
      MultiKey<Integer> multiKey4 = new MultiKey<Integer>(integer0, integer6, (Integer) null);
      multiKey4.toString();
      MultiKey<String> multiKey5 = new MultiKey<String>((String) null, "MultiKey[81, 81, null]", "p`_AxYt");
      multiKey5.getKey(0);
      Object object0 = new Object();
      multiKey2.equals(object0);
      // Undeclared exception!
//      try { 
        multiKey0.getKey((-954));
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // -954
//         //
//         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
//      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Integer integer0 = new Integer(473);
      Integer integer1 = new Integer(473);
      Integer integer2 = new Integer(473);
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integer1, integer1, integer0);
      multiKey0.toString();
      Integer integer3 = new Integer(473);
      MultiKey<Object> multiKey1 = new MultiKey<Object>(integer0, multiKey0, integer3);
      multiKey0.toString();
      multiKey1.toString();
      multiKey1.toString();
      multiKey1.toString();
      multiKey1.toString();
      boolean boolean0 = multiKey1.equals((Object) null);
      assertFalse(boolean0);
      
      multiKey1.toString();
      multiKey0.hashCode();
      multiKey1.getKeys();
      int int0 = new Integer(473);
      multiKey0.toString();
      MultiKey<String>[] multiKeyArray0 = (MultiKey<String>[]) Array.newInstance(MultiKey.class, 4);
      MultiKey<String> multiKey2 = new MultiKey<String>("MultiKey[473, MultiKey[473, 473, 473], 473]", "MultiKey[473, 473, 473]", "MultiKey[473, MultiKey[473, 473, 473], 473]", "0>)");
      multiKeyArray0[0] = multiKey2;
      MultiKey<String> multiKey3 = new MultiKey<String>("MultiKey[473, 473, 473]", "#u71TT{*@6,CEa1^");
      multiKeyArray0[1] = multiKey3;
      String string0 = multiKey2.toString();
      assertEquals("MultiKey[MultiKey[473, MultiKey[473, 473, 473], 473], MultiKey[473, 473, 473], MultiKey[473, MultiKey[473, 473, 473], 473], 0>)]", string0);
      
      MultiKey<String> multiKey4 = new MultiKey<String>("", "MultiKey[473, 473, 473]");
      multiKeyArray0[2] = multiKey4;
      String[] stringArray0 = new String[2];
      stringArray0[0] = "MultiKey[473, MultiKey[473, 473, 473], 473]";
      stringArray0[1] = "";
      MultiKey<String> multiKey5 = new MultiKey<String>(stringArray0);
      MultiKey<String> multiKey6 = new MultiKey<String>(stringArray0);
      MultiKey<Object> multiKey7 = new MultiKey<Object>(stringArray0);
      boolean boolean1 = multiKey6.equals(multiKey7);
      assertFalse(multiKey7.equals((Object)multiKey1));
      assertFalse(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Integer[] integerArray0 = new Integer[0];
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integerArray0, true);
      Object[] objectArray0 = new Object[0];
      multiKey0.toString();
      multiKey0.toString();
      MultiKey<Object> multiKey1 = new MultiKey<Object>(objectArray0, false);
      multiKey1.toString();
      multiKey0.toString();
      multiKey1.size();
      multiKey1.getKeys();
      multiKey0.equals("MultiKey[]");
      MultiKey<String> multiKey2 = new MultiKey<String>("MultiKey[]", ")#_!-y6e", "T#^:D}DV4l(@jDG@7");
      multiKey1.toString();
      int int0 = multiKey2.size();
      multiKey2.toString();
      int int1 = multiKey1.size();
      multiKey2.toString();
      String string0 = multiKey1.toString();
      assertEquals("MultiKey[]", string0);
      
      int int2 = multiKey2.hashCode();
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      
      Object object0 = new Object();
      boolean boolean0 = multiKey1.equals(object0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Object object0 = new Object();
      String string0 = "";
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) "";
      objectArray0[1] = (Object) "";
      objectArray0[2] = (Object) "";
      objectArray0[3] = (Object) "";
      objectArray0[4] = object0;
      objectArray0[5] = object0;
      objectArray0[6] = object0;
      objectArray0[7] = (Object) "";
      objectArray0[8] = (Object) "";
      MultiKey<Object> multiKey0 = new MultiKey<Object>(objectArray0);
      int int0 = 5;
      Object object1 = multiKey0.getKey(5);
      MultiKey<Object> multiKey1 = new MultiKey<Object>(object0, object1);
      // Undeclared exception!
//      try { 
        multiKey1.getKey((-3025));
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // -3025
//         //
//         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
//      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Integer[] integerArray0 = null;
      MultiKey<Integer> multiKey0 = null;
//      try {
        multiKey0 = new MultiKey<Integer>((Integer[]) null, false);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // The array of keys must not be null
//         //
//         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
//      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Integer[] integerArray0 = new Integer[0];
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integerArray0);
      int int0 = multiKey0.size();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Integer integer0 = new Integer((-219));
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integer0, integer0, (Integer) null);
      multiKey0.toString();
      multiKey0.equals(integer0);
      MultiKey<String> multiKey1 = new MultiKey<String>("MultiKey[-219, -219, null]", (String) null, "MultiKey[-219, -219, null]", "");
      multiKey1.toString();
      multiKey1.toString();
      multiKey1.toString();
      multiKey1.toString();
      multiKey1.hashCode();
      Object object0 = new Object();
      MultiKey<Object> multiKey2 = new MultiKey<Object>(object0, "MultiKey[MultiKey[-219, -219, null], null, MultiKey[-219, -219, null], ]");
      multiKey1.toString();
      int int0 = multiKey2.size();
      multiKey1.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey2.toString();
      multiKey0.equals("MultiKey[-219, -219, null]");
      int int1 = multiKey0.size();
      assertFalse(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      String[] stringArray0 = new String[6];
      stringArray0[0] = "llQXP@0jQ`ug";
      stringArray0[1] = "3";
      stringArray0[2] = "";
      stringArray0[3] = "<Nmq (+fF";
      stringArray0[4] = "P9GX'$}@U";
      stringArray0[5] = "AG?OorIn";
      MultiKey<String> multiKey0 = new MultiKey<String>(stringArray0);
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      MultiKey<Object> multiKey1 = null;
//      try {
        multiKey1 = new MultiKey<Object>((Object[]) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // The array of keys must not be null
//         //
//         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
//      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Integer integer0 = new Integer(0);
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integer0, integer0);
      multiKey0.toString();
      MultiKey<String> multiKey1 = new MultiKey<String>("e 8L3pi6", "", "", "org.apache.commons.collections4.keyvalue.MultiKey");
      multiKey1.equals("e 8L3pi6");
      multiKey1.toString();
      Integer integer1 = new Integer(0);
      MultiKey<Integer> multiKey2 = new MultiKey<Integer>(integer1, integer0, integer0);
      MultiKey<Object> multiKey3 = new MultiKey<Object>(multiKey1, multiKey2, "e 8L3pi6");
      multiKey3.toString();
      multiKey3.toString();
      boolean boolean0 = multiKey3.equals("e 8L3pi6");
      assertFalse(boolean0);
      
      String string0 = multiKey1.toString();
      assertEquals("MultiKey[e 8L3pi6, , , org.apache.commons.collections4.keyvalue.MultiKey]", string0);
      
      multiKey3.getKeys();
      MultiKey<String>[] multiKeyArray0 = (MultiKey<String>[]) Array.newInstance(MultiKey.class, 4);
      multiKeyArray0[0] = multiKey1;
      multiKeyArray0[1] = multiKey1;
      multiKeyArray0[2] = multiKey1;
      MultiKey<String> multiKey4 = new MultiKey<String>("(+9zqhJ~-2N5", " eiW*f^HC?ji%vI", "(+9zqhJ~-2N5");
      multiKeyArray0[3] = multiKey4;
      MultiKey<MultiKey<String>> multiKey5 = new MultiKey<MultiKey<String>>(multiKeyArray0);
      multiKey5.hashCode();
      multiKey3.size();
      assertFalse(multiKey1.equals((Object)multiKey4));
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      String[] stringArray0 = new String[4];
      stringArray0[0] = "zE{y}9*3hp.";
      stringArray0[1] = "/2;h!iRy+`qOr>Fe";
      stringArray0[2] = "";
      stringArray0[3] = "";
      MultiKey<String> multiKey0 = new MultiKey<String>(stringArray0, false);
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      MultiKey<Object> multiKey1 = new MultiKey<Object>(stringArray0);
      multiKey1.getKeys();
      multiKey1.toString();
      multiKey1.hashCode();
      // Undeclared exception!
//      try { 
        multiKey0.getKey(1136);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 1136
//         //
//         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
//      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      MultiKey<String>[] multiKeyArray0 = (MultiKey<String>[]) Array.newInstance(MultiKey.class, 1);
      String[] stringArray0 = new String[0];
      MultiKey<String> multiKey0 = new MultiKey<String>(stringArray0);
      multiKeyArray0[0] = multiKey0;
      MultiKey<MultiKey<String>> multiKey1 = new MultiKey<MultiKey<String>>(multiKeyArray0);
      MultiKey<Object> multiKey2 = new MultiKey<Object>(multiKey0, "Cbm8S]RMgW_kRm");
      multiKey2.toString();
      Integer[] integerArray0 = new Integer[0];
      MultiKey<Integer> multiKey3 = new MultiKey<Integer>(integerArray0);
      multiKey3.hashCode();
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Object object0 = new Object();
      String[] stringArray0 = new String[1];
      stringArray0[0] = "";
      MultiKey<String> multiKey0 = new MultiKey<String>(stringArray0, true);
      Object object1 = new Object();
      MultiKey<Object> multiKey1 = new MultiKey<Object>(object0, object0, multiKey0, multiKey0, object1);
      multiKey1.toString();
      MultiKey<Object> multiKey2 = new MultiKey<Object>(object1, "MultiKey[java.lang.Object@52830e50, java.lang.Object@52830e50, MultiKey[], MultiKey[], java.lang.Object@7dfbabb0]", multiKey0, multiKey1);
      multiKey2.toString();
      MultiKey<MultiKey<Object>> multiKey3 = new MultiKey<MultiKey<Object>>(multiKey1, multiKey1, multiKey1, multiKey2, multiKey1);
      multiKey3.getKeys();
      multiKey2.hashCode();
      Integer[] integerArray0 = new Integer[1];
      Integer integer0 = new Integer(1276);
      integerArray0[0] = integer0;
      MultiKey<Integer> multiKey4 = new MultiKey<Integer>(integerArray0);
      Integer integer1 = multiKey4.getKey(0);
      assertEquals(1276, (int)integer1);
  }
}
