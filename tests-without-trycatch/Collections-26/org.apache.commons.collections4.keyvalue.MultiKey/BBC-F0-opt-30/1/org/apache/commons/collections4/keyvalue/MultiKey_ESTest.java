/*
 * This file was automatically generated by EvoSuite
 * Wed Oct 13 20:45:19 GMT 2021
 */

package org.apache.commons.collections4.keyvalue;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.collections4.keyvalue.MultiKey;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class MultiKey_ESTest extends MultiKey_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      MultiKey<Object> multiKey0 = new MultiKey<Object>("", "");
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) multiKey0;
      objectArray0[1] = (Object) multiKey0;
      objectArray0[2] = (Object) multiKey0;
      objectArray0[3] = (Object) multiKey0;
      objectArray0[4] = (Object) multiKey0;
      MultiKey<Object> multiKey1 = new MultiKey<Object>(objectArray0);
      Object object0 = multiKey1.getKey(3);
      boolean boolean0 = multiKey0.equals(object0);
      assertFalse(multiKey1.equals((Object)multiKey0));
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("rG}", "rG}", "rG}", "rG}");
      multiKey0.toString();
      Object[] objectArray0 = new Object[0];
      MultiKey<Object> multiKey1 = new MultiKey<Object>(objectArray0);
      int int0 = multiKey1.size();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Object[] objectArray0 = new Object[5];
      MultiKey<Object> multiKey0 = new MultiKey<Object>(objectArray0);
      multiKey0.getKey(0);
      Integer integer0 = new Integer(4);
      Object object0 = new Object();
      Object object1 = new Object();
      MultiKey<Object> multiKey1 = new MultiKey<Object>(object1, objectArray0[0], objectArray0[0], objectArray0[0]);
      MultiKey<Object> multiKey2 = new MultiKey<Object>((Object) null, multiKey1);
      multiKey2.toString();
      int int0 = multiKey1.size();
      assertEquals(4, int0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Object[] objectArray0 = new Object[20];
      objectArray0[0] = (Object) "8Z}";
      objectArray0[1] = (Object) "8Z}";
      MultiKey<Object> multiKey0 = new MultiKey<Object>(objectArray0);
      multiKey0.getKey(0);
      Integer integer0 = new Integer(4);
      Object object0 = new Object();
      Object object1 = new Object();
      MultiKey<Object> multiKey1 = new MultiKey<Object>(object1, objectArray0[0], objectArray0[0], objectArray0[0]);
      MultiKey<Object> multiKey2 = new MultiKey<Object>((Object) null, multiKey1);
      multiKey2.hashCode();
      Integer integer1 = new Integer(0);
      Integer integer2 = new Integer(9);
      Integer integer3 = new Integer(0);
      Integer integer4 = new Integer(9);
      MultiKey<Integer> multiKey3 = new MultiKey<Integer>(integer3, integer1, integer4, integer0, integer1);
      MultiKey<Object> multiKey4 = new MultiKey<Object>(objectArray0, true);
      boolean boolean0 = multiKey3.equals(multiKey4);
      assertFalse(boolean0);
      
      Integer integer5 = new Integer(4);
      MultiKey<String> multiKey5 = new MultiKey<String>("8Z}", "", "8Z}");
      Integer integer6 = new Integer(0);
      boolean boolean1 = multiKey5.equals(integer6);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("Fk", "&5JNx/<5&A", ":EoE=TC?P");
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.size();
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) "MultiKey[Fk, &5JNx/<5&A, :EoE=TC?P]";
      objectArray0[1] = (Object) "MultiKey[Fk, &5JNx/<5&A, :EoE=TC?P]";
      objectArray0[2] = (Object) "MultiKey[Fk, &5JNx/<5&A, :EoE=TC?P]";
      objectArray0[3] = (Object) "Fk";
      MultiKey<Object> multiKey1 = new MultiKey<Object>(objectArray0);
      multiKey1.equals("MultiKey[Fk, &5JNx/<5&A, :EoE=TC?P]");
      MultiKey<String> multiKey2 = null;
//      try {
        multiKey2 = new MultiKey<String>((String[]) null, false);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // The array of keys must not be null
//         //
//         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
//      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      MultiKey<String> multiKey0 = null;
//      try {
        multiKey0 = new MultiKey<String>((String[]) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // The array of keys must not be null
//         //
//         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
//      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Integer integer0 = new Integer(0);
      Integer integer1 = new Integer(0);
      Integer integer2 = new Integer(1);
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integer0, integer0, integer1, integer0, integer2);
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      MultiKey<Object> multiKey1 = new MultiKey<Object>(integer0, multiKey0);
      multiKey1.getKeys();
      multiKey1.size();
      String[] stringArray0 = new String[0];
      MultiKey<String> multiKey2 = new MultiKey<String>(stringArray0);
      String[] stringArray1 = multiKey2.getKeys();
      assertNotSame(stringArray0, stringArray1);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("`U&DE-CM0Et!c+_qRh`", "`U&DE-CM0Et!c+_qRh`", "`U&DE-CM0Et!c+_qRh`", "`U&DE-CM0Et!c+_qRh`");
      MultiKey<String> multiKey1 = new MultiKey<String>("y|`4|'i", "`H|?&");
      String[] stringArray0 = new String[4];
      stringArray0[0] = "`U&DE-CM0Et!c+_qRh`";
      stringArray0[1] = "y|`4|'i";
      stringArray0[2] = "`H|?&";
      stringArray0[3] = "`H|?&";
      MultiKey<String> multiKey2 = new MultiKey<String>(stringArray0);
      Object object0 = multiKey2.getKey(0);
      assertEquals("`U&DE-CM0Et!c+_qRh`", object0);
      
      Integer integer0 = new Integer((-2230));
      Object object1 = new Object();
      MultiKey<Object> multiKey3 = new MultiKey<Object>("`U&DE-CM0Et!c+_qRh`", "`U&DE-CM0Et!c+_qRh`", integer0, object1);
      MultiKey<Object> multiKey4 = new MultiKey<Object>("`U&DE-CM0Et!c+_qRh`", multiKey1, multiKey3, multiKey2);
      multiKey4.hashCode();
      Integer integer1 = new Integer((-2230));
      Integer integer2 = new Integer((-2230));
      MultiKey<Integer> multiKey5 = new MultiKey<Integer>(integer0, integer0, integer0, integer1, integer2);
      multiKey5.equals("`H|?&");
      Integer integer3 = new Integer(0);
      boolean boolean0 = multiKey2.equals(integer3);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Object[] objectArray0 = new Object[5];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      Object object2 = new Object();
      objectArray0[2] = object2;
      String[] stringArray0 = new String[0];
      MultiKey<String> multiKey0 = new MultiKey<String>(stringArray0, false);
      multiKey0.toString();
      Object object3 = new Object();
      MultiKey<Object> multiKey1 = new MultiKey<Object>((Object) null, object0, (Object) null, multiKey0, object3);
      multiKey0.toString();
      // Undeclared exception!
//      try { 
        multiKey1.getKey((-1));
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // -1
//         //
//         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
//      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Object[] objectArray0 = new Object[3];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      Object object2 = new Object();
      objectArray0[2] = object2;
      MultiKey<Object> multiKey0 = new MultiKey<Object>(objectArray0);
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.hashCode();
      multiKey0.toString();
      String[] stringArray0 = new String[9];
      stringArray0[0] = "MultiKey[java.lang.Object@2f37b480, java.lang.Object@63ae8911, java.lang.Object@5eaa5991]";
      stringArray0[1] = "MultiKey[java.lang.Object@2f37b480, java.lang.Object@63ae8911, java.lang.Object@5eaa5991]";
      stringArray0[2] = "MultiKey[java.lang.Object@2f37b480, java.lang.Object@63ae8911, java.lang.Object@5eaa5991]";
      stringArray0[3] = "MultiKey[java.lang.Object@2f37b480, java.lang.Object@63ae8911, java.lang.Object@5eaa5991]";
      stringArray0[4] = "MultiKey[java.lang.Object@2f37b480, java.lang.Object@63ae8911, java.lang.Object@5eaa5991]";
      stringArray0[5] = "MultiKey[java.lang.Object@2f37b480, java.lang.Object@63ae8911, java.lang.Object@5eaa5991]";
      stringArray0[6] = "MultiKey[java.lang.Object@2f37b480, java.lang.Object@63ae8911, java.lang.Object@5eaa5991]";
      multiKey0.toString();
      stringArray0[7] = "MultiKey[java.lang.Object@2f37b480, java.lang.Object@63ae8911, java.lang.Object@5eaa5991]";
      stringArray0[8] = "MultiKey[java.lang.Object@2f37b480, java.lang.Object@63ae8911, java.lang.Object@5eaa5991]";
      MultiKey<String> multiKey1 = new MultiKey<String>(stringArray0, true);
      multiKey1.toString();
      MultiKey<MultiKey<String>> multiKey2 = new MultiKey<MultiKey<String>>(multiKey1, multiKey1, multiKey1);
      multiKey2.toString();
      multiKey2.toString();
      // Undeclared exception!
//      try { 
        multiKey0.getKey((-1));
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // -1
//         //
//         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
//      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Integer[] integerArray0 = new Integer[1];
      Integer integer0 = new Integer(0);
      integerArray0[0] = integer0;
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integerArray0);
      assertEquals(1, multiKey0.size());
  }
}
