/*
 * This file was automatically generated by EvoSuite
 * Wed Oct 13 20:49:40 GMT 2021
 */

package org.apache.commons.collections4.keyvalue;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.lang.reflect.Array;
import org.apache.commons.collections4.keyvalue.MultiKey;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class MultiKey_ESTest extends MultiKey_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>((String) null, (String) null, (String) null);
      Object object0 = new Object();
      boolean boolean0 = multiKey0.equals(multiKey0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      Object object0 = new Object();
      Object object1 = new Object();
      MultiKey<Object> multiKey0 = new MultiKey<Object>(object0, object1, "");
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) "";
      objectArray0[1] = objectArray0[0];
      objectArray0[2] = object1;
      objectArray0[3] = (Object) multiKey0;
      MultiKey<Object> multiKey1 = new MultiKey<Object>(objectArray0);
      multiKey1.getKey(3);
      multiKey1.toString();
      multiKey1.toString();
      multiKey1.toString();
      multiKey1.toString();
      MultiKey<Object> multiKey2 = new MultiKey<Object>(objectArray0, true);
      multiKey0.hashCode();
      MultiKey<String>[] multiKeyArray0 = (MultiKey<String>[]) Array.newInstance(MultiKey.class, 5);
      MultiKey<MultiKey<String>> multiKey3 = new MultiKey<MultiKey<String>>(multiKeyArray0, true);
      MultiKey<String> multiKey4 = multiKey3.getKey(0);
      assertNull(multiKey4);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      MultiKey<Object> multiKey0 = new MultiKey<Object>(objectArray0, true);
      Object object0 = new Object();
      multiKey0.equals(object0);
      MultiKey<String> multiKey1 = new MultiKey<String>("p.z:TvQ", "", (String) null, "", "");
      multiKey1.toString();
      multiKey1.toString();
      multiKey0.toString();
      MultiKey<String> multiKey2 = new MultiKey<String>(" %eKQ-w]<R;]1b", " %eKQ-w]<R;]1b", "The array of keys must not be null", "The array of keys must not be null");
      multiKey1.equals(multiKey2);
      multiKey2.toString();
      multiKey2.getKey(1);
      multiKey0.hashCode();
      multiKey0.toString();
      multiKey0.toString();
      Integer integer0 = new Integer((-1300));
      Integer integer1 = new Integer((-1300));
      Object[] objectArray1 = multiKey0.getKeys();
      assertNotSame(objectArray1, objectArray0);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      MultiKey<Object> multiKey0 = new MultiKey<Object>(objectArray0, true);
      int int0 = multiKey0.size();
      MultiKey<String> multiKey1 = new MultiKey<String>("", "N`L%wQ[k=o:", "");
      boolean boolean0 = multiKey1.equals((Object) null);
      assertFalse(boolean0);
      
      MultiKey<MultiKey<Object>> multiKey2 = new MultiKey<MultiKey<Object>>(multiKey0, multiKey0, multiKey0);
      multiKey2.toString();
      multiKey0.size();
      Integer integer0 = new Integer(0);
      Integer integer1 = new Integer(452);
      Integer integer2 = new Integer(452);
      MultiKey<Integer> multiKey3 = new MultiKey<Integer>(integer0, integer1, integer2);
      String string0 = multiKey3.toString();
      assertEquals("MultiKey[0, 452, 452]", string0);
      
      int int1 = multiKey3.hashCode();
      assertFalse(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      Integer integer0 = new Integer(3);
      Integer integer1 = new Integer(3);
      Integer integer2 = new Integer(3);
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integer0, integer0, integer0, integer1, integer2);
      multiKey0.toString();
      multiKey0.toString();
      MultiKey<MultiKey<Integer>> multiKey1 = new MultiKey<MultiKey<Integer>>(multiKey0, multiKey0, multiKey0, multiKey0, multiKey0);
      multiKey1.toString();
      multiKey1.toString();
      multiKey1.toString();
      Integer integer3 = new Integer((-1757));
      MultiKey<Object> multiKey2 = new MultiKey<Object>(integer3, multiKey0, integer3, "MultiKey[3, 3, 3, 3, 3]");
      multiKey1.toString();
      MultiKey<MultiKey<Object>> multiKey3 = new MultiKey<MultiKey<Object>>(multiKey2, multiKey2);
      multiKey3.toString();
      multiKey3.toString();
      multiKey3.toString();
      multiKey2.toString();
      multiKey3.getKeys();
      multiKey2.toString();
      int int0 = multiKey2.size();
      int int1 = multiKey2.hashCode();
      assertFalse(int1 == int0);
      
      MultiKey<String> multiKey4 = new MultiKey<String>("", "MultiKey[MultiKey[3, 3, 3, 3, 3], MultiKey[3, 3, 3, 3, 3], MultiKey[3, 3, 3, 3, 3], MultiKey[3, 3, 3, 3, 3], MultiKey[3, 3, 3, 3, 3]]", "ukn`;DCd.AzoN:T]0<R");
      multiKey4.toString();
      MultiKey<Object> multiKey5 = new MultiKey<Object>((Object) null, (Object) null, "@00_ANpsj8OV-");
      boolean boolean0 = multiKey4.equals(multiKey5);
      assertFalse(boolean0);
      
      multiKey5.toString();
      multiKey2.getKeys();
      String string0 = multiKey2.toString();
      assertEquals("MultiKey[-1757, MultiKey[3, 3, 3, 3, 3], -1757, MultiKey[3, 3, 3, 3, 3]]", string0);
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      MultiKey<Integer> multiKey0 = null;
//      try {
        multiKey0 = new MultiKey<Integer>((Integer[]) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // The array of keys must not be null
//         //
//         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
//      }
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      MultiKey<Object> multiKey0 = new MultiKey<Object>(objectArray0);
      multiKey0.toString();
      MultiKey<Integer> multiKey1 = null;
//      try {
        multiKey1 = new MultiKey<Integer>((Integer[]) null, false);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // The array of keys must not be null
//         //
//         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
//      }
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      Object[] objectArray0 = new Object[1];
      Object object0 = new Object();
      objectArray0[0] = object0;
      MultiKey<Object> multiKey0 = new MultiKey<Object>(objectArray0, false);
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.hashCode();
      MultiKey<String> multiKey1 = new MultiKey<String>("MultiKey[java.lang.Object@180f587b]", "MultiKey[java.lang.Object@180f587b]", "", "[^ :i.cn", "");
      multiKey1.toString();
      multiKey1.getKey(4);
      Integer integer0 = new Integer(1406);
      MultiKey<Integer> multiKey2 = new MultiKey<Integer>(integer0, (Integer) null);
      Object object1 = new Object();
      boolean boolean0 = multiKey2.equals(object1);
      assertFalse(boolean0);
      
      String string0 = multiKey2.toString();
      assertEquals("MultiKey[1406, null]", string0);
  }

  @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      Object object0 = new Object();
      Object object1 = new Object();
      MultiKey<Object> multiKey0 = new MultiKey<Object>(object0, object1, "");
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) "";
      objectArray0[1] = objectArray0[0];
      objectArray0[2] = object1;
      objectArray0[3] = (Object) multiKey0;
      MultiKey<Object> multiKey1 = new MultiKey<Object>(objectArray0);
      Object object2 = multiKey1.getKey(3);
      multiKey1.toString();
      MultiKey<String> multiKey2 = new MultiKey<String>("", "");
      multiKey1.toString();
      multiKey1.toString();
      multiKey1.toString();
      multiKey2.toString();
      MultiKey<Object> multiKey3 = new MultiKey<Object>(object2, (Object) null, objectArray0[3], multiKey2);
      MultiKey<Object> multiKey4 = new MultiKey<Object>(objectArray0, true);
      MultiKey<MultiKey<Object>> multiKey5 = new MultiKey<MultiKey<Object>>(multiKey0, multiKey0, multiKey3, multiKey4, multiKey3);
      multiKey5.toString();
      multiKey2.toString();
      multiKey4.toString();
      multiKey3.toString();
      multiKey5.toString();
      multiKey2.toString();
      multiKey5.getKeys();
      multiKey0.hashCode();
      multiKey2.size();
      MultiKey<String>[] multiKeyArray0 = (MultiKey<String>[]) Array.newInstance(MultiKey.class, 5);
      multiKeyArray0[0] = multiKey2;
      MultiKey<String> multiKey6 = new MultiKey<String>("MultiKey[MultiKey[java.lang.Object@62b00965, java.lang.Object@6e8f134f, ], MultiKey[java.lang.Object@62b00965, java.lang.Object@6e8f134f, ], MultiKey[MultiKey[java.lang.Object@62b00965, java.lang.Object@6e8f134f, ], null, MultiKey[java.lang.Object@62b00965, java.lang.Object@6e8f134f, ], MultiKey[, ]], MultiKey[, , java.lang.Object@6e8f134f, MultiKey[java.lang.Object@62b00965, java.lang.Object@6e8f134f, ]], MultiKey[MultiKey[java.lang.Object@62b00965, java.lang.Object@6e8f134f, ], null, MultiKey[java.lang.Object@62b00965, java.lang.Object@6e8f134f, ], MultiKey[, ]]]", (String) null, "MultiKey[, , java.lang.Object@6e8f134f, MultiKey[java.lang.Object@62b00965, java.lang.Object@6e8f134f, ]]");
      multiKeyArray0[1] = multiKey6;
      multiKeyArray0[2] = multiKey2;
      multiKeyArray0[3] = multiKey2;
      multiKeyArray0[4] = multiKey2;
      MultiKey<MultiKey<String>> multiKey7 = new MultiKey<MultiKey<String>>(multiKeyArray0, false);
      MultiKey<String> multiKey8 = multiKey7.getKey(0);
      assertNotSame(multiKey8, multiKey6);
  }

  @Test(timeout = 4000)
  public void test9()  throws Throwable  {
      MultiKey<Object> multiKey0 = new MultiKey<Object>("89e-(&zt6'", "89e-(&zt6'");
      multiKey0.toString();
      multiKey0.toString();
      String[] stringArray0 = new String[4];
      stringArray0[0] = "89e-(&zt6'";
      stringArray0[1] = "89e-(&zt6'";
      stringArray0[2] = "89e-(&zt6'";
      stringArray0[3] = "89e-(&zt6'";
      MultiKey<String> multiKey1 = new MultiKey<String>(stringArray0);
      multiKey0.toString();
      multiKey0.toString();
      multiKey1.toString();
      multiKey1.toString();
      multiKey0.toString();
      multiKey1.toString();
      multiKey1.toString();
      int int0 = (-277);
      // Undeclared exception!
//      try { 
        multiKey0.getKey((-277));
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // -277
//         //
//         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
//      }
  }
}
