/*
 * This file was automatically generated by EvoSuite
 * Wed Oct 13 20:50:01 GMT 2021
 */

package org.apache.commons.collections4.keyvalue;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.lang.reflect.Array;
import org.apache.commons.collections4.keyvalue.MultiKey;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class MultiKey_ESTest extends MultiKey_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) "?rhH1]d0RsERcwa?";
      MultiKey<Object> multiKey0 = new MultiKey<Object>(objectArray0);
      Integer integer0 = new Integer((-555));
      Object object0 = new Object();
      MultiKey<String> multiKey1 = new MultiKey<String>("?rhH1]d0RsERcwa?", "1N9xE");
      Object object1 = new Object();
      MultiKey<Object> multiKey2 = new MultiKey<Object>(multiKey1, object0, "1N9xE", object1);
      Object object2 = new Object();
      MultiKey<Object> multiKey3 = new MultiKey<Object>(object2, object2);
      multiKey0.hashCode();
      Integer integer1 = new Integer(0);
      multiKey0.equals(multiKey0);
      multiKey2.getKeys();
      MultiKey<Integer> multiKey4 = new MultiKey<Integer>(integer0, integer1, integer0);
      multiKey4.size();
      MultiKey<MultiKey<Integer>> multiKey5 = new MultiKey<MultiKey<Integer>>(multiKey4, multiKey4, multiKey4);
      MultiKey<String> multiKey6 = new MultiKey<String>("1;13K++<@euQR^agE", "?rhH1]d0RsERcwa?", "?rhH1]d0RsERcwa?");
      multiKey6.toString();
      // Undeclared exception!
//      try { 
        multiKey3.getKey(9);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 9
//         //
//         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
//      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      MultiKey<Object> multiKey0 = new MultiKey<Object>(objectArray0, true);
      multiKey0.getKeys();
      Object object0 = new Object();
      Integer integer0 = new Integer((-10));
      Integer integer1 = new Integer((-10));
      MultiKey<Integer> multiKey1 = new MultiKey<Integer>(integer0, integer0, integer1);
      MultiKey<Object> multiKey2 = new MultiKey<Object>(object0, integer1);
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.equals(object0);
      MultiKey<String> multiKey3 = new MultiKey<String>("MultiKey[]", "MultiKey[]", "MultiKey", "(`O)Asv2SfG7+\"", "");
      multiKey2.toString();
      Integer[] integerArray0 = new Integer[2];
      integerArray0[0] = integer1;
      integerArray0[1] = integer1;
      MultiKey<Integer> multiKey4 = new MultiKey<Integer>(integerArray0);
      multiKey1.getKey(0);
      multiKey3.toString();
      MultiKey<Object>[] multiKeyArray0 = (MultiKey<Object>[]) Array.newInstance(MultiKey.class, 2);
      multiKeyArray0[0] = multiKey0;
      multiKeyArray0[1] = multiKey2;
      MultiKey<MultiKey<Object>> multiKey5 = new MultiKey<MultiKey<Object>>(multiKeyArray0, false);
      int int0 = multiKey5.size();
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("", "FM[zr\"[9rgk?");
      MultiKey<Object>[] multiKeyArray0 = (MultiKey<Object>[]) Array.newInstance(MultiKey.class, 0);
      MultiKey<MultiKey<Object>> multiKey1 = new MultiKey<MultiKey<Object>>(multiKeyArray0, false);
      MultiKey<MultiKey<Object>> multiKey2 = new MultiKey<MultiKey<Object>>(multiKeyArray0);
      int int0 = multiKey2.size();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      String[] stringArray0 = new String[4];
      stringArray0[0] = "The array of keys must not be null";
      stringArray0[1] = "The array of keys must not be null";
      stringArray0[2] = "";
      stringArray0[3] = "}";
      MultiKey<String> multiKey0 = new MultiKey<String>(stringArray0);
      MultiKey<String> multiKey1 = new MultiKey<String>("The array of keys must not be null", "}");
      MultiKey<Object> multiKey2 = new MultiKey<Object>((Object[]) stringArray0, true);
      multiKey0.equals(multiKey2);
      String string0 = multiKey0.toString();
      assertEquals("MultiKey[The array of keys must not be null, The array of keys must not be null, , }]", string0);
      
      multiKey2.getKey(2);
      multiKey0.getKeys();
      assertFalse(multiKey0.equals((Object)multiKey1));
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      MultiKey<String> multiKey0 = null;
//      try {
        multiKey0 = new MultiKey<String>((String[]) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // The array of keys must not be null
//         //
//         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
//      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      MultiKey<Object> multiKey0 = null;
//      try {
        multiKey0 = new MultiKey<Object>((Object[]) null, false);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // The array of keys must not be null
//         //
//         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
//      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      MultiKey<Object> multiKey0 = new MultiKey<Object>((Object) null, (Object) null, (Object) null);
      MultiKey<String> multiKey1 = new MultiKey<String>("XR~L'6!{Q&-", "XR~L'6!{Q&-");
      multiKey1.toString();
      multiKey1.toString();
      multiKey0.toString();
      multiKey1.toString();
      multiKey1.toString();
      multiKey1.getKey(1);
      multiKey0.size();
      multiKey0.toString();
      multiKey0.size();
      multiKey0.toString();
      multiKey0.getKey(0);
      Integer[] integerArray0 = new Integer[3];
      Integer integer0 = new Integer((-1229));
      integerArray0[0] = integer0;
      Integer integer1 = new Integer(0);
      integerArray0[1] = integer1;
      Integer integer2 = new Integer(0);
      integerArray0[2] = integer2;
      MultiKey<Integer> multiKey2 = new MultiKey<Integer>(integerArray0, false);
      multiKey2.toString();
      multiKey0.hashCode();
      multiKey2.getKeys();
      multiKey0.toString();
      String string0 = multiKey0.toString();
      assertEquals("MultiKey[null, null, null]", string0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Object[] objectArray0 = new Object[6];
      String[] stringArray0 = new String[5];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "";
      stringArray0[3] = "}QbI~_SPE";
      stringArray0[4] = "";
      MultiKey<String> multiKey0 = new MultiKey<String>(stringArray0, false);
      multiKey0.getKey(0);
      Object object0 = new Object();
      MultiKey<String> multiKey1 = new MultiKey<String>(stringArray0);
      multiKey1.getKey(0);
      MultiKey<Object> multiKey2 = new MultiKey<Object>("", multiKey0, object0, "");
      multiKey2.getKey(0);
      objectArray0[0] = (Object) "";
      multiKey2.getKey(0);
      objectArray0[1] = (Object) "";
      Object object1 = new Object();
      objectArray0[2] = object1;
      Object object2 = new Object();
      objectArray0[3] = object2;
      Object object3 = new Object();
      objectArray0[4] = object3;
      Object object4 = new Object();
      objectArray0[5] = object4;
      MultiKey<Object> multiKey3 = new MultiKey<Object>(objectArray0, false);
      assertEquals(6, multiKey3.size());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("", "", "g!V'", "(,H/", "");
      MultiKey<Object> multiKey1 = new MultiKey<Object>(multiKey0, "");
      multiKey1.toString();
      MultiKey<String> multiKey2 = new MultiKey<String>("g!V'", "(,H/", "", "");
      multiKey2.toString();
      MultiKey<String> multiKey3 = new MultiKey<String>("", "");
      multiKey3.toString();
      multiKey3.toString();
      MultiKey<MultiKey<String>> multiKey4 = new MultiKey<MultiKey<String>>(multiKey2, multiKey2, multiKey2, multiKey2, multiKey3);
      multiKey4.hashCode();
      multiKey0.hashCode();
      // Undeclared exception!
//      try { 
        multiKey1.getKey((-1936));
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // -1936
//         //
//         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
//      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Integer integer0 = new Integer(1507);
      Integer integer1 = new Integer(1507);
      Integer integer2 = new Integer(4);
      Integer integer3 = new Integer(1870);
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integer0, integer1, integer0, integer2, integer3);
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.equals(integer0);
      MultiKey<String> multiKey1 = new MultiKey<String>("", "", "");
      multiKey1.toString();
      Integer integer4 = new Integer((-2054));
      boolean boolean0 = multiKey1.equals(integer4);
      assertFalse(boolean0);
      
      Integer integer5 = new Integer((-1849));
      MultiKey<Object> multiKey2 = new MultiKey<Object>("MultiKey[1507, 1507, 1507, 4, 1870]", integer5, "MultiKey[1507, 1507, 1507, 4, 1870]", "");
      String string0 = multiKey2.toString();
      assertEquals("MultiKey[MultiKey[1507, 1507, 1507, 4, 1870], -1849, MultiKey[1507, 1507, 1507, 4, 1870], ]", string0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("", ".T$a", "", "");
      int int0 = multiKey0.size();
      MultiKey<Object> multiKey1 = new MultiKey<Object>("5YIBzr/6Sdia8>Pz", ".T$a", "5YIBzr/6Sdia8>Pz");
      multiKey1.getKey(1);
      multiKey1.getKey(0);
      multiKey1.size();
      MultiKey<MultiKey<Object>> multiKey2 = new MultiKey<MultiKey<Object>>(multiKey1, multiKey1, multiKey1, multiKey1, multiKey1);
      int int1 = multiKey2.size();
      assertFalse(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      String[] stringArray0 = new String[0];
      MultiKey<String> multiKey0 = new MultiKey<String>(stringArray0);
      MultiKey<String> multiKey1 = new MultiKey<String>("", "");
      boolean boolean0 = multiKey0.equals(multiKey1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Integer integer0 = new Integer(584);
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integer0, integer0, integer0, integer0, integer0);
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) integer0;
      objectArray0[1] = (Object) integer0;
      objectArray0[2] = (Object) multiKey0;
      objectArray0[3] = (Object) integer0;
      objectArray0[4] = (Object) multiKey0;
      MultiKey<Object> multiKey1 = new MultiKey<Object>(objectArray0);
      // Undeclared exception!
//      try { 
        multiKey1.getKey(584);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 584
//         //
//         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
//      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Object object0 = new Object();
      MultiKey<Object> multiKey0 = new MultiKey<Object>(object0, object0, object0);
      String[] stringArray0 = new String[7];
      stringArray0[0] = "kbW2,{C >>2j5SI@!";
      stringArray0[1] = "kbW2,{C >>2j5SI@!";
      stringArray0[2] = "kbW2,{C >>2j5SI@!";
      stringArray0[3] = "kbW2,{C >>2j5SI@!";
      stringArray0[4] = "kbW2,{C >>2j5SI@!";
      stringArray0[5] = "kbW2,{C >>2j5SI@!";
      stringArray0[6] = "kbW2,{C >>2j5SI@!";
      MultiKey<String> multiKey1 = new MultiKey<String>(stringArray0);
      multiKey1.getKey(0);
      MultiKey<Object> multiKey2 = new MultiKey<Object>(multiKey0, "kbW2,{C >>2j5SI@!", "kbW2,{C >>2j5SI@!", "kbW2,{C >>2j5SI@!");
      boolean boolean0 = multiKey2.equals("kbW2,{C >>2j5SI@!");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      String string0 = "";
      String string1 = "6*D>@Oi[3;\\xt";
      MultiKey<String> multiKey0 = new MultiKey<String>("", "", "", "6*D>@Oi[3;xt");
      Object[] objectArray0 = new Object[8];
      MultiKey<MultiKey<String>> multiKey1 = new MultiKey<MultiKey<String>>(multiKey0, multiKey0, multiKey0, multiKey0, multiKey0);
      // Undeclared exception!
//      try { 
        multiKey1.getKey(438);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 438
//         //
//         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
//      }
  }
}
