/*
 * This file was automatically generated by EvoSuite
 * Wed Oct 20 12:22:33 GMT 2021
 */

package org.apache.commons.collections4.keyvalue;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.lang.reflect.Array;
import org.apache.commons.collections4.keyvalue.MultiKey;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class MultiKey_ESTest extends MultiKey_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      MultiKey<Object>[] multiKeyArray0 = (MultiKey<Object>[]) Array.newInstance(MultiKey.class, 6);
      MultiKey<String> multiKey0 = new MultiKey<String>("", "", "");
      MultiKey<Object> multiKey1 = new MultiKey<Object>((Object) null, multiKey0);
      multiKeyArray0[0] = multiKey1;
      MultiKey<Object> multiKey2 = new MultiKey<Object>(multiKeyArray0);
      multiKeyArray0[1] = multiKey2;
      Integer integer0 = new Integer(0);
      Integer[] integerArray0 = new Integer[5];
      integerArray0[0] = integer0;
      integerArray0[1] = integer0;
      Integer integer1 = new Integer(0);
      integerArray0[2] = integer1;
      integerArray0[3] = integer0;
      integerArray0[4] = integer0;
      MultiKey<Integer> multiKey3 = new MultiKey<Integer>(integerArray0);
      Object object0 = multiKey3.getKey(0);
      MultiKey<Object> multiKey4 = new MultiKey<Object>(integer0, object0);
      multiKeyArray0[2] = multiKey4;
      MultiKey<Object> multiKey5 = new MultiKey<Object>(integerArray0);
      multiKeyArray0[3] = multiKey5;
      MultiKey<Object> multiKey6 = new MultiKey<Object>("", "", multiKey2, "", "[w;5ps'y*");
      multiKeyArray0[4] = multiKey6;
      Object object1 = new Object();
      MultiKey<MultiKey<Object>> multiKey7 = new MultiKey<MultiKey<Object>>(multiKeyArray0, false);
      multiKey7.size();
      multiKey2.equals(multiKey2);
      // Undeclared exception!
//      try { 
        multiKey5.getKey(372);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 372
//         //
//         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
//      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("HMKY;Dn2\"-", (String) null);
      multiKey0.toString();
      multiKey0.toString();
      MultiKey<MultiKey<String>> multiKey1 = new MultiKey<MultiKey<String>>(multiKey0, multiKey0, multiKey0, multiKey0);
      String string0 = multiKey1.toString();
      assertEquals("MultiKey[MultiKey[HMKY;Dn2\"-, null], MultiKey[HMKY;Dn2\"-, null], MultiKey[HMKY;Dn2\"-, null], MultiKey[HMKY;Dn2\"-, null]]", string0);
      
      boolean boolean0 = multiKey1.equals((Object) null);
      assertFalse(boolean0);
      
      multiKey0.size();
      Object[] objectArray0 = new Object[0];
      MultiKey<Object> multiKey2 = new MultiKey<Object>(objectArray0);
      MultiKey<String> multiKey3 = new MultiKey<String>("HMKY;Dn2\"-", (String) null, "", "", "");
      Object object0 = new Object();
      MultiKey<Object> multiKey4 = new MultiKey<Object>("org.apache.commons.collections4.keyvalue.MultiKey", object0);
      multiKey2.getKeys();
      multiKey4.size();
      assertFalse(multiKey4.equals((Object)multiKey2));
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      MultiKey<Object>[] multiKeyArray0 = (MultiKey<Object>[]) Array.newInstance(MultiKey.class, 6);
      MultiKey<String> multiKey0 = new MultiKey<String>("", "", "");
      MultiKey<Object> multiKey1 = new MultiKey<Object>((Object) null, multiKey0);
      multiKeyArray0[0] = multiKey1;
      MultiKey<Object> multiKey2 = new MultiKey<Object>(multiKeyArray0);
      multiKeyArray0[1] = multiKey2;
      Integer integer0 = new Integer(0);
      Integer[] integerArray0 = new Integer[5];
      integerArray0[0] = integer0;
      integerArray0[1] = integer0;
      Integer integer1 = new Integer(0);
      integerArray0[2] = integer1;
      integerArray0[3] = integer0;
      integerArray0[4] = integer0;
      MultiKey<Integer> multiKey3 = new MultiKey<Integer>(integerArray0);
      Object object0 = multiKey3.getKey(0);
      MultiKey<Object> multiKey4 = new MultiKey<Object>(integer0, object0);
      multiKeyArray0[2] = multiKey4;
      MultiKey<Object> multiKey5 = new MultiKey<Object>(integerArray0);
      multiKeyArray0[3] = multiKey5;
      MultiKey<Object> multiKey6 = new MultiKey<Object>("", "", multiKey2, "", "[w;5ps'y*");
      multiKeyArray0[4] = multiKey6;
      Object object1 = new Object();
      MultiKey<Object> multiKey7 = new MultiKey<Object>(object1, "[w;5ps'y*", "Pi#|o;}@:4");
      multiKeyArray0[5] = multiKey7;
      MultiKey<MultiKey<Object>> multiKey8 = new MultiKey<MultiKey<Object>>(multiKeyArray0, false);
      boolean boolean0 = multiKey8.equals(multiKey2);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("T6zE`>WDglPE,3", "");
      Integer integer0 = new Integer(0);
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) multiKey0;
      multiKey0.toString();
      objectArray0[1] = (Object) "T6zE`>WDglPE,3";
      objectArray0[2] = (Object) "";
      MultiKey<Object> multiKey1 = new MultiKey<Object>(objectArray0);
      multiKey1.toString();
      MultiKey<Object> multiKey2 = new MultiKey<Object>(integer0, "_2b26@H/6~u-PJ{bz4", multiKey0, multiKey1);
      multiKey2.toString();
      boolean boolean0 = multiKey2.equals(multiKey0);
      assertFalse(boolean0);
      
      multiKey0.toString();
      multiKey0.toString();
      multiKey1.toString();
      MultiKey<MultiKey<Object>> multiKey3 = new MultiKey<MultiKey<Object>>(multiKey1, multiKey1, multiKey1, multiKey1);
      String string0 = multiKey3.toString();
      assertEquals("MultiKey[MultiKey[MultiKey[T6zE`>WDglPE,3, ], T6zE`>WDglPE,3, ], MultiKey[MultiKey[T6zE`>WDglPE,3, ], T6zE`>WDglPE,3, ], MultiKey[MultiKey[T6zE`>WDglPE,3, ], T6zE`>WDglPE,3, ], MultiKey[MultiKey[T6zE`>WDglPE,3, ], T6zE`>WDglPE,3, ]]", string0);
      
      multiKey3.getKey(0);
      Integer integer1 = new Integer(0);
      Integer integer2 = new Integer(0);
      MultiKey<Integer> multiKey4 = new MultiKey<Integer>((Integer) null, (Integer) null, integer1, integer2);
      multiKey4.hashCode();
      String string1 = multiKey0.getKey(0);
      assertEquals("T6zE`>WDglPE,3", string1);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Object object0 = new Object();
      Object object1 = new Object();
      MultiKey<Object> multiKey0 = new MultiKey<Object>(object0, (Object) null, object0, object1);
      MultiKey<Object>[] multiKeyArray0 = (MultiKey<Object>[]) Array.newInstance(MultiKey.class, 6);
      multiKeyArray0[0] = multiKey0;
      multiKeyArray0[1] = multiKey0;
      multiKeyArray0[2] = multiKey0;
      multiKeyArray0[3] = multiKey0;
      Object object2 = new Object();
      Object object3 = new Object();
      Object object4 = new Object();
      MultiKey<String> multiKey1 = new MultiKey<String>("XeAV,;nu0_'AzmHl5rq", "", "");
      multiKey1.getKey(0);
      MultiKey<Object> multiKey2 = new MultiKey<Object>((Object) null, "XeAV,;nu0_'AzmHl5rq");
      multiKey2.getKey(0);
      MultiKey<Object> multiKey3 = new MultiKey<Object>(object3, multiKey0, object4, (Object) null);
      Object object5 = multiKey3.getKey(0);
      MultiKey<Object> multiKey4 = new MultiKey<Object>(object2, object5, (Object) null, (Object) null, "");
      multiKeyArray0[4] = multiKey4;
      Object object6 = new Object();
      MultiKey<Object> multiKey5 = new MultiKey<Object>("XeAV,;nu0_'AzmHl5rq", (Object) null, object6);
      multiKeyArray0[5] = multiKey5;
      MultiKey<MultiKey<Object>> multiKey6 = new MultiKey<MultiKey<Object>>(multiKeyArray0, false);
      int int0 = multiKey6.size();
      assertEquals(6, int0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      MultiKey<Object>[] multiKeyArray0 = (MultiKey<Object>[]) Array.newInstance(MultiKey.class, 7);
      MultiKey<Object> multiKey0 = new MultiKey<Object>((Object[]) multiKeyArray0, false);
      multiKeyArray0[0] = multiKey0;
      Integer integer0 = new Integer(0);
      Integer integer1 = new Integer(0);
      MultiKey<Integer> multiKey1 = new MultiKey<Integer>(integer0, (Integer) null, integer1, (Integer) null);
      Object object0 = multiKey1.getKey(0);
      MultiKey<Object> multiKey2 = new MultiKey<Object>(object0, multiKey1, (Object) null);
      Integer integer2 = new Integer((-2750));
      MultiKey<Object> multiKey3 = new MultiKey<Object>(multiKey0, multiKey2, integer2);
      multiKeyArray0[1] = multiKey3;
      Integer integer3 = new Integer(1);
      Integer integer4 = new Integer(1347);
      MultiKey<Object>[] multiKeyArray1 = (MultiKey<Object>[]) Array.newInstance(MultiKey.class, 4);
      multiKeyArray1[0] = multiKey3;
      multiKeyArray1[1] = multiKey0;
      multiKeyArray1[2] = multiKey3;
      MultiKey<Object> multiKey4 = new MultiKey<Object>(integer1, integer3, multiKey0);
      multiKeyArray1[3] = multiKey4;
      MultiKey<MultiKey<Object>> multiKey5 = new MultiKey<MultiKey<Object>>(multiKeyArray1, true);
      Object object1 = multiKey5.getKey(1);
      MultiKey<Object> multiKey6 = new MultiKey<Object>(integer4, (Object) null, (Object) null, object1);
      MultiKey<Object> multiKey7 = new MultiKey<Object>(integer3, object0, integer3, multiKey6, multiKey4);
      multiKeyArray0[2] = multiKey7;
      Integer integer5 = new Integer(1);
      Integer integer6 = new Integer(1);
      MultiKey<Object> multiKey8 = new MultiKey<Object>(integer0, integer5, multiKey7, multiKey3, integer6);
      MultiKey<Object> multiKey9 = new MultiKey<Object>(integer2, multiKey8, multiKey0, integer3);
      multiKeyArray0[3] = multiKey9;
      MultiKey<Object> multiKey10 = new MultiKey<Object>(multiKeyArray1);
      multiKeyArray0[4] = multiKey10;
      MultiKey<Object> multiKey11 = new MultiKey<Object>((Object[]) multiKeyArray0, true);
      multiKeyArray0[5] = multiKey11;
      MultiKey<Object> multiKey12 = new MultiKey<Object>((Object[]) multiKeyArray1, true);
      multiKeyArray0[6] = multiKey12;
      MultiKey<MultiKey<Object>> multiKey13 = new MultiKey<MultiKey<Object>>(multiKeyArray0, true);
      assertFalse(multiKey13.equals((Object)multiKey5));
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      String[] stringArray0 = new String[3];
      stringArray0[0] = "6@/V>0P;D)$-87";
      stringArray0[1] = "";
      stringArray0[2] = "";
      MultiKey<String> multiKey0 = new MultiKey<String>(stringArray0);
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      MultiKey<MultiKey<String>> multiKey1 = new MultiKey<MultiKey<String>>(multiKey0, multiKey0, multiKey0, multiKey0, multiKey0);
      multiKey1.toString();
      multiKey1.toString();
      multiKey1.toString();
      multiKey1.toString();
      String[] stringArray1 = multiKey0.getKeys();
      MultiKey<Object> multiKey2 = new MultiKey<Object>(stringArray1);
      multiKey2.size();
      multiKey2.getKeys();
      multiKey0.toString();
      multiKey0.size();
      multiKey2.size();
      // Undeclared exception!
//      try { 
        multiKey0.getKey(2122);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 2122
//         //
//         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
//      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("HMKY;Dn2\"-", (String) null);
      multiKey0.toString();
      multiKey0.toString();
      MultiKey<MultiKey<String>> multiKey1 = new MultiKey<MultiKey<String>>(multiKey0, multiKey0, multiKey0, multiKey0);
      multiKey1.toString();
      multiKey1.equals((Object) null);
      multiKey0.size();
      Object[] objectArray0 = new Object[0];
      MultiKey<Object> multiKey2 = new MultiKey<Object>(objectArray0);
      multiKey2.toString();
      multiKey2.size();
      Object object0 = new Object();
      multiKey1.toString();
      multiKey2.equals(object0);
      // Undeclared exception!
//      try { 
        multiKey2.getKey(2);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 2
//         //
//         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
//      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      MultiKey<String> multiKey0 = null;
//      try {
        multiKey0 = new MultiKey<String>((String[]) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // The array of keys must not be null
//         //
//         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
//      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("", "", "");
      multiKey0.toString();
      multiKey0.hashCode();
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      MultiKey<Object> multiKey0 = null;
//      try {
        multiKey0 = new MultiKey<Object>((Object[]) null, true);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // The array of keys must not be null
//         //
//         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
//      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      String string0 = "";
      Object[] objectArray0 = new Object[0];
      MultiKey<Object> multiKey0 = new MultiKey<Object>(objectArray0, false);
      MultiKey<Object> multiKey1 = new MultiKey<Object>("", multiKey0, multiKey0, multiKey0, "");
      // Undeclared exception!
//      try { 
        multiKey1.getKey((-597));
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // -597
//         //
//         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
//      }
  }
}
