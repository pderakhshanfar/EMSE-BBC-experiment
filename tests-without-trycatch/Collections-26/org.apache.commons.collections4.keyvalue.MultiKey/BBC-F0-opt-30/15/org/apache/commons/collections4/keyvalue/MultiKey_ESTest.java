/*
 * This file was automatically generated by EvoSuite
 * Wed Oct 20 12:26:49 GMT 2021
 */

package org.apache.commons.collections4.keyvalue;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.lang.reflect.Array;
import org.apache.commons.collections4.keyvalue.MultiKey;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class MultiKey_ESTest extends MultiKey_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Integer[] integerArray0 = new Integer[2];
      Integer integer0 = new Integer(3);
      integerArray0[0] = integer0;
      Integer integer1 = new Integer(1);
      integerArray0[1] = integer1;
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integerArray0);
      multiKey0.toString();
      String string0 = multiKey0.toString();
      assertEquals("MultiKey[3, 1]", string0);
      
      multiKey0.getKey(1);
      MultiKey<Object> multiKey1 = new MultiKey<Object>("", "");
      Object object0 = new Object();
      boolean boolean0 = multiKey1.equals(object0);
      MultiKey<String>[] multiKeyArray0 = (MultiKey<String>[]) Array.newInstance(MultiKey.class, 7);
      MultiKey<String> multiKey2 = new MultiKey<String>("", "", "");
      multiKeyArray0[0] = multiKey2;
      MultiKey<String> multiKey3 = new MultiKey<String>("D", "hw=4S6(S8EWS2");
      multiKeyArray0[1] = multiKey3;
      MultiKey<String> multiKey4 = new MultiKey<String>("", "The array of keys must not be null");
      multiKeyArray0[2] = multiKey4;
      MultiKey<String> multiKey5 = new MultiKey<String>("", "The array of keys must not be null", "!Z}7$MEpyP", "hw=4S6(S8EWS2");
      multiKeyArray0[3] = multiKey5;
      MultiKey<String> multiKey6 = new MultiKey<String>("", "", "", "O2[|WnaeU\"D", "");
      boolean boolean1 = multiKey5.equals(multiKey5);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("j", "j", "j", "j", "j");
      MultiKey<String>[] multiKeyArray0 = (MultiKey<String>[]) Array.newInstance(MultiKey.class, 9);
      multiKeyArray0[0] = multiKey0;
      multiKeyArray0[1] = multiKey0;
      multiKeyArray0[2] = multiKey0;
      multiKeyArray0[3] = multiKey0;
      multiKeyArray0[4] = multiKey0;
      multiKeyArray0[5] = multiKey0;
      multiKeyArray0[6] = multiKey0;
      multiKeyArray0[7] = multiKey0;
      multiKeyArray0[8] = multiKey0;
      MultiKey<MultiKey<String>> multiKey1 = new MultiKey<MultiKey<String>>(multiKeyArray0, true);
      MultiKey<Object> multiKey2 = new MultiKey<Object>(multiKeyArray0);
      boolean boolean0 = multiKey1.equals(multiKey2);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Integer integer0 = new Integer(7);
      Object[] objectArray0 = new Object[0];
      MultiKey<Object> multiKey0 = new MultiKey<Object>(objectArray0, false);
      MultiKey<Object>[] multiKeyArray0 = (MultiKey<Object>[]) Array.newInstance(MultiKey.class, 5);
      multiKeyArray0[0] = multiKey0;
      multiKeyArray0[1] = multiKey0;
      multiKeyArray0[2] = multiKey0;
      multiKey0.toString();
      multiKeyArray0[3] = multiKey0;
      multiKeyArray0[4] = multiKey0;
      MultiKey<MultiKey<Object>> multiKey1 = new MultiKey<MultiKey<Object>>(multiKeyArray0);
      multiKey1.getKeys();
      String[] stringArray0 = new String[0];
      MultiKey<String> multiKey2 = new MultiKey<String>(stringArray0);
      int int0 = multiKey2.size();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      MultiKey<Object> multiKey0 = new MultiKey<Object>(objectArray0, true);
      boolean boolean0 = multiKey0.equals("Bg{6M");
      assertFalse(boolean0);
      
      MultiKey<String> multiKey1 = new MultiKey<String>("X$", "Bg{6M");
      multiKey1.size();
      String string0 = multiKey1.toString();
      assertEquals("MultiKey[X$, Bg{6M]", string0);
      
      multiKey0.getKeys();
      Integer integer0 = new Integer(2);
      Integer integer1 = new Integer((-2575));
      Integer integer2 = new Integer(0);
      MultiKey<Integer> multiKey2 = new MultiKey<Integer>(integer2, integer2);
      Integer integer3 = new Integer(471);
      MultiKey<Integer> multiKey3 = new MultiKey<Integer>(integer2, (Integer) null);
      boolean boolean1 = multiKey2.equals(multiKey3);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Integer integer0 = new Integer(1);
      MultiKey<Object> multiKey0 = new MultiKey<Object>("", integer0);
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.size();
      multiKey0.toString();
      MultiKey<MultiKey<Object>> multiKey1 = new MultiKey<MultiKey<Object>>(multiKey0, multiKey0, multiKey0, multiKey0);
      multiKey1.toString();
      multiKey1.toString();
      multiKey1.toString();
      multiKey1.toString();
      multiKey1.getKeys();
      multiKey0.hashCode();
      multiKey0.getKey(0);
      multiKey0.toString();
      MultiKey<String> multiKey2 = null;
//      try {
        multiKey2 = new MultiKey<String>((String[]) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // The array of keys must not be null
//         //
//         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
//      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Object[] objectArray0 = new Object[3];
      MultiKey<Object> multiKey0 = new MultiKey<Object>((Object) null, (Object) null);
      multiKey0.toString();
      multiKey0.getKey(1);
      objectArray0[0] = null;
      MultiKey<Object>[] multiKeyArray0 = (MultiKey<Object>[]) Array.newInstance(MultiKey.class, 1);
      multiKeyArray0[0] = multiKey0;
      boolean boolean0 = false;
      MultiKey<MultiKey<Object>> multiKey1 = new MultiKey<MultiKey<Object>>(multiKeyArray0, false);
      // Undeclared exception!
//      try { 
        multiKey1.getKey(1);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 1
//         //
//         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
//      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Integer[] integerArray0 = null;
      boolean boolean0 = false;
      MultiKey<Integer> multiKey0 = null;
//      try {
        multiKey0 = new MultiKey<Integer>((Integer[]) null, false);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // The array of keys must not be null
//         //
//         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
//      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("", "", "aArpVX7Dk");
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.hashCode();
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) "MultiKey[, , aArpVX7Dk]";
      objectArray0[1] = (Object) "aArpVX7Dk";
      objectArray0[2] = (Object) "MultiKey[, , aArpVX7Dk]";
      objectArray0[3] = (Object) "";
      objectArray0[4] = (Object) "MultiKey[, , aArpVX7Dk]";
      objectArray0[5] = (Object) "MultiKey[, , aArpVX7Dk]";
      objectArray0[6] = (Object) "aArpVX7Dk";
      MultiKey<Object> multiKey1 = new MultiKey<Object>(objectArray0);
      boolean boolean0 = multiKey1.equals("");
      assertFalse(boolean0);
      
      Integer[] integerArray0 = new Integer[2];
      Integer integer0 = new Integer((-3776));
      integerArray0[0] = integer0;
      Integer integer1 = new Integer(0);
      integerArray0[1] = integer1;
      MultiKey<Integer> multiKey2 = new MultiKey<Integer>(integerArray0, false);
      String string0 = multiKey2.toString();
      assertEquals("MultiKey[-3776, 0]", string0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      String[] stringArray0 = new String[2];
      stringArray0[0] = "";
      stringArray0[1] = "";
      MultiKey<String> multiKey0 = new MultiKey<String>(stringArray0);
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      MultiKey<Object> multiKey1 = new MultiKey<Object>(stringArray0);
      multiKey1.toString();
      multiKey1.toString();
      multiKey1.toString();
      multiKey1.getKeys();
      Integer integer0 = new Integer(3);
      Integer integer1 = new Integer((-516));
      multiKey1.toString();
      MultiKey<Integer> multiKey2 = new MultiKey<Integer>(integer0, integer0, integer0, integer1, (Integer) null);
      String string0 = multiKey2.toString();
      assertEquals("MultiKey[3, 3, 3, -516, null]", string0);
      
      MultiKey<MultiKey<Object>> multiKey3 = new MultiKey<MultiKey<Object>>(multiKey1, multiKey1, multiKey1, multiKey1);
      boolean boolean0 = multiKey3.equals((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Integer[] integerArray0 = new Integer[5];
      Integer integer0 = new Integer(5713);
      integerArray0[0] = integer0;
      int int0 = 0;
      Integer integer1 = new Integer(0);
      integerArray0[1] = integer1;
      Integer integer2 = new Integer((-100));
      integerArray0[2] = integer2;
      Integer integer3 = new Integer(int0);
      integerArray0[3] = integer3;
      Integer integer4 = new Integer(5713);
      integerArray0[4] = integer4;
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integerArray0, false);
      Integer[] integerArray1 = multiKey0.getKeys();
      MultiKey<Object> multiKey1 = new MultiKey<Object>(integerArray1);
      multiKey1.size();
      String[] stringArray0 = new String[2];
      stringArray0[0] = "z!gP%<,[Zk";
      stringArray0[1] = "";
      MultiKey<String> multiKey2 = new MultiKey<String>(stringArray0, false);
      String string0 = multiKey2.getKey(0);
      assertEquals("z!gP%<,[Zk", string0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      MultiKey<Object> multiKey0 = new MultiKey<Object>((Object) null, (Object) null);
      MultiKey<String> multiKey1 = new MultiKey<String>("MultiKey", "MultiKey", "MultiKey", "MultiKey", "MultiKey");
      MultiKey<Object> multiKey2 = new MultiKey<Object>(multiKey0, multiKey1);
      int int0 = 0;
      Object object0 = multiKey2.getKey(0);
      multiKey1.equals(object0);
      multiKey2.toString();
      multiKey0.toString();
      multiKey2.toString();
      multiKey1.toString();
      multiKey0.getKeys();
      multiKey0.toString();
      multiKey2.hashCode();
      multiKey2.size();
      multiKey2.equals(object0);
      multiKey2.size();
      Integer[] integerArray0 = new Integer[9];
      Integer integer0 = new Integer(0);
      integerArray0[0] = integer0;
      Integer integer1 = new Integer(4);
      integerArray0[1] = integer1;
      Integer integer2 = new Integer(int0);
      integerArray0[2] = integer2;
      Integer integer3 = new Integer((-1339));
      integerArray0[3] = integer3;
      Integer integer4 = new Integer(2);
      integerArray0[4] = integer4;
      Integer integer5 = new Integer(5);
      integerArray0[5] = integer5;
      Integer integer6 = new Integer(789);
      integerArray0[6] = integer6;
      Integer integer7 = new Integer(2);
      integerArray0[7] = integer7;
      Integer integer8 = new Integer((-949));
      integerArray0[8] = integer8;
      MultiKey<Integer> multiKey3 = new MultiKey<Integer>(integerArray0);
      Integer[] integerArray1 = multiKey3.getKeys();
      assertNotSame(integerArray0, integerArray1);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Object[] objectArray0 = new Object[9];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      Integer[] integerArray0 = new Integer[2];
      Integer integer0 = new Integer(0);
      integerArray0[0] = integer0;
      Integer integer1 = new Integer(0);
      integerArray0[1] = integer1;
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integerArray0);
      // Undeclared exception!
//      try { 
        multiKey0.getKey(1544);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 1544
//         //
//         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
//      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Object object0 = new Object();
      Integer integer0 = new Integer(142);
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integer0, integer0);
      int int0 = (-1);
      // Undeclared exception!
//      try { 
        multiKey0.getKey((-1));
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // -1
//         //
//         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
//      }
  }
}
