/*
 * This file was automatically generated by EvoSuite
 * Wed Oct 13 20:46:45 GMT 2021
 */

package org.apache.commons.collections4.keyvalue;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.lang.reflect.Array;
import org.apache.commons.collections4.keyvalue.MultiKey;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class MultiKey_ESTest extends MultiKey_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("6Jg9qyM9k_%", "6Jg9qyM9k_%", "6Jg9qyM9k_%");
      boolean boolean0 = multiKey0.equals(multiKey0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      MultiKey<String>[] multiKeyArray0 = (MultiKey<String>[]) Array.newInstance(MultiKey.class, 0);
      MultiKey<MultiKey<String>> multiKey0 = new MultiKey<MultiKey<String>>(multiKeyArray0);
      MultiKey<String>[] multiKeyArray1 = multiKey0.getKeys();
      assertNotSame(multiKeyArray0, multiKeyArray1);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Integer integer0 = new Integer(2405);
      MultiKey<Object> multiKey0 = new MultiKey<Object>(integer0, integer0);
      Integer integer1 = new Integer(2405);
      MultiKey<Integer> multiKey1 = new MultiKey<Integer>(integer0, integer1);
      boolean boolean0 = multiKey1.equals(multiKey0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      MultiKey<Object> multiKey0 = null;
//      try {
        multiKey0 = new MultiKey<Object>((Object[]) null, false);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // The array of keys must not be null
//         //
//         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
//      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Integer[] integerArray0 = new Integer[8];
      int int0 = 0;
      Integer integer0 = new Integer(0);
      integerArray0[0] = integer0;
      Integer integer1 = new Integer(0);
      integerArray0[1] = integer1;
      Integer integer2 = new Integer(0);
      integerArray0[2] = integer2;
      Integer integer3 = new Integer(3);
      integerArray0[3] = integer3;
      Integer integer4 = new Integer(int0);
      integerArray0[4] = integer4;
      Integer integer5 = new Integer(0);
      integerArray0[5] = integer5;
      int int1 = (-1);
      Integer integer6 = new Integer((-1));
      integerArray0[6] = integer6;
      Integer integer7 = new Integer(2845);
      integerArray0[7] = integer7;
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integerArray0);
      multiKey0.size();
      MultiKey<Object> multiKey1 = new MultiKey<Object>((Object[]) integerArray0, false);
      MultiKey<Object> multiKey2 = new MultiKey<Object>("(KSBD", integer4, multiKey1);
      Object object0 = new Object();
      MultiKey<Object> multiKey3 = new MultiKey<Object>(int1, object0, multiKey2, int0, integer4);
      boolean boolean0 = multiKey2.equals(multiKey3);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Integer integer0 = new Integer((-3109));
      Integer integer1 = new Integer((-3109));
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integer0, integer0, integer0, integer1);
      multiKey0.toString();
      MultiKey<String> multiKey1 = new MultiKey<String>("", "", "");
      multiKey1.toString();
      multiKey1.size();
      MultiKey<Object> multiKey2 = null;
//      try {
        multiKey2 = new MultiKey<Object>((Object[]) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // The array of keys must not be null
//         //
//         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
//      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Integer integer0 = new Integer(0);
      Integer integer1 = new Integer(251);
      Integer integer2 = new Integer((-3563));
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integer0, integer1, integer2);
      multiKey0.toString();
      Integer integer3 = new Integer(2113);
      multiKey0.equals(integer3);
      MultiKey<String> multiKey1 = new MultiKey<String>("", "[V");
      multiKey1.size();
      Object[] objectArray0 = new Object[0];
      MultiKey<Object> multiKey2 = new MultiKey<Object>(objectArray0, false);
      multiKey1.toString();
      multiKey2.toString();
      multiKey1.toString();
      multiKey2.size();
      multiKey1.toString();
      multiKey2.size();
      // Undeclared exception!
//      try { 
        multiKey1.getKey((-2458));
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // -2458
//         //
//         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
//      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Integer integer0 = new Integer(5);
      MultiKey<Object> multiKey0 = new MultiKey<Object>(integer0, integer0);
      multiKey0.toString();
      multiKey0.hashCode();
      MultiKey<String> multiKey1 = new MultiKey<String>((String) null, "MultiKey[5, 5]");
      multiKey0.toString();
      String string0 = multiKey1.getKey(0);
      assertNull(string0);
      
      Integer[] integerArray0 = new Integer[7];
      integerArray0[0] = integer0;
      integerArray0[1] = integer0;
      integerArray0[2] = integer0;
      integerArray0[3] = integer0;
      integerArray0[4] = integer0;
      integerArray0[5] = integer0;
      integerArray0[6] = integer0;
      MultiKey<Integer> multiKey2 = new MultiKey<Integer>(integerArray0, false);
      multiKey2.hashCode();
      String string1 = multiKey0.toString();
      assertEquals("MultiKey[5, 5]", string1);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Object[] objectArray0 = new Object[4];
      MultiKey<String> multiKey0 = new MultiKey<String>("H", "8_-%M,o|", "8_-%M,o|");
      multiKey0.getKey(0);
      Integer integer0 = new Integer(0);
      multiKey0.toString();
      MultiKey<Object> multiKey1 = new MultiKey<Object>("H", integer0, "+", "H");
      multiKey1.getKey(0);
      objectArray0[0] = (Object) "H";
      Object object0 = new Object();
      objectArray0[1] = object0;
      Object object1 = new Object();
      objectArray0[2] = object1;
      Object object2 = new Object();
      multiKey1.toString();
      multiKey0.toString();
      objectArray0[3] = object2;
      multiKey0.toString();
      boolean boolean0 = false;
      MultiKey<Object> multiKey2 = new MultiKey<Object>(objectArray0, false);
      multiKey1.toString();
      multiKey2.toString();
      multiKey2.toString();
      // Undeclared exception!
//      try { 
        multiKey2.getKey((-700));
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // -700
//         //
//         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
//      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Integer integer0 = new Integer(0);
      Integer integer1 = new Integer((-1327));
      Integer integer2 = new Integer(0);
      Integer integer3 = new Integer((-1566));
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integer0, integer1, integer2, integer3, integer1);
      multiKey0.toString();
      multiKey0.hashCode();
      multiKey0.equals("MultiKey[0, -1327, 0, -1566, -1327]");
      MultiKey<String> multiKey1 = new MultiKey<String>("MultiKey[0, -1327, 0, -1566, -1327]", "MultiKey[0, -1327, 0, -1566, -1327]", "", "", "");
      multiKey1.hashCode();
      MultiKey<Integer>[] multiKeyArray0 = (MultiKey<Integer>[]) Array.newInstance(MultiKey.class, 8);
      multiKeyArray0[0] = multiKey0;
      multiKeyArray0[1] = multiKey0;
      multiKeyArray0[2] = multiKey0;
      multiKeyArray0[3] = multiKey0;
      multiKeyArray0[4] = multiKey0;
      multiKeyArray0[5] = multiKey0;
      multiKeyArray0[6] = multiKey0;
      multiKeyArray0[7] = multiKey0;
      MultiKey<MultiKey<Integer>> multiKey2 = new MultiKey<MultiKey<Integer>>(multiKeyArray0);
      multiKey2.hashCode();
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("vE}C,qk!O=J+LFW", "vE}C,qk!O=J+LFW", "vE}C,qk!O=J+LFW");
      Object object0 = new Object();
      String[] stringArray0 = new String[0];
      MultiKey<String> multiKey1 = new MultiKey<String>(stringArray0);
      int int0 = (-2975);
      // Undeclared exception!
//      try { 
        multiKey1.getKey((-2975));
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // -2975
//         //
//         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
//      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Object object0 = new Object();
      Integer[] integerArray0 = new Integer[2];
      Integer integer0 = new Integer(0);
      integerArray0[0] = integer0;
      Integer integer1 = new Integer((-258));
      integerArray0[1] = integer1;
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integerArray0, true);
      MultiKey<Object> multiKey1 = new MultiKey<Object>(object0, multiKey0);
      multiKey0.toString();
      MultiKey<MultiKey<Object>> multiKey2 = new MultiKey<MultiKey<Object>>(multiKey1, multiKey1, multiKey1, multiKey1);
      MultiKey<String> multiKey3 = new MultiKey<String>((String) null, (String) null, (String) null);
      multiKey3.size();
      // Undeclared exception!
//      try { 
        multiKey1.getKey(2);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 2
//         //
//         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
//      }
  }
}
