/*
 * This file was automatically generated by EvoSuite
 * Fri Oct 22 17:42:46 GMT 2021
 */

package org.apache.commons.collections4.keyvalue;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.lang.reflect.Array;
import org.apache.commons.collections4.keyvalue.MultiKey;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class MultiKey_ESTest extends MultiKey_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("+{", "+{");
      multiKey0.toString();
      multiKey0.size();
      Object[] objectArray0 = new Object[0];
      MultiKey<Object> multiKey1 = new MultiKey<Object>(objectArray0, false);
      Object[] objectArray1 = multiKey1.getKeys();
      assertNotSame(objectArray0, objectArray1);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Integer integer0 = new Integer(2161);
      MultiKey<String> multiKey0 = new MultiKey<String>("v", (String) null, "=W{OAn9@Uo5e(", "v", "W 9I&9|'cNyDZ|#u ;Z");
      multiKey0.toString();
      Integer integer1 = new Integer(2161);
      Integer integer2 = new Integer(993);
      MultiKey<Integer> multiKey1 = new MultiKey<Integer>(integer2, integer2, integer1);
      MultiKey<Object> multiKey2 = new MultiKey<Object>("U", (Object) null, multiKey1, integer1, "W 9I&9|'cNyDZ|#u ;Z");
      String[] stringArray0 = new String[0];
      MultiKey<String> multiKey3 = new MultiKey<String>(stringArray0, false);
      MultiKey<String> multiKey4 = new MultiKey<String>((String) null, (String) null, "U");
      multiKey4.toString();
      multiKey4.toString();
      int int0 = multiKey3.size();
      int int1 = multiKey4.hashCode();
      assertFalse(int1 == int0);
      
      String string0 = multiKey4.toString();
      assertEquals("MultiKey[null, null, U]", string0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Object[] objectArray0 = new Object[4];
      MultiKey<Object> multiKey0 = new MultiKey<Object>(objectArray0, true);
      multiKey0.getKey(0);
      objectArray0[0] = null;
      Object object0 = new Object();
      objectArray0[1] = object0;
      multiKey0.getKey(0);
      objectArray0[2] = null;
      MultiKey<MultiKey<Object>> multiKey1 = new MultiKey<MultiKey<Object>>(multiKey0, multiKey0, multiKey0, multiKey0, multiKey0);
      MultiKey<Object> multiKey2 = multiKey1.getKey(0);
      objectArray0[3] = (Object) multiKey2;
      MultiKey<Object> multiKey3 = new MultiKey<Object>(objectArray0);
      multiKey1.toString();
      MultiKey<Object> multiKey4 = new MultiKey<Object>(multiKey1, (Object) null);
      MultiKey<MultiKey<Object>> multiKey5 = new MultiKey<MultiKey<Object>>(multiKey3, multiKey3, multiKey4);
      multiKey5.toString();
      multiKey3.toString();
      multiKey5.hashCode();
      MultiKey<String> multiKey6 = null;
//      try {
        multiKey6 = new MultiKey<String>((String[]) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // The array of keys must not be null
//         //
//         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
//      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Integer integer0 = new Integer(2328);
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integer0, integer0, integer0, integer0, integer0);
      multiKey0.toString();
      multiKey0.equals(integer0);
      MultiKey<String> multiKey1 = new MultiKey<String>("MultiKey[2328, 2328, 2328, 2328, 2328]", "d`SEvJSk`4]/S82", "MultiKey", "hs^%Pc");
      multiKey1.toString();
      multiKey1.toString();
      Object object0 = new Object();
      String string0 = "";
      MultiKey<Object> multiKey2 = null;
//      try {
        multiKey2 = new MultiKey<Object>((Object[]) null, false);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // The array of keys must not be null
//         //
//         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
//      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      MultiKey<String>[] multiKeyArray0 = (MultiKey<String>[]) Array.newInstance(MultiKey.class, 2);
      MultiKey<String> multiKey0 = new MultiKey<String>("", "");
      multiKey0.toString();
      multiKeyArray0[0] = multiKey0;
      multiKey0.toString();
      MultiKey<String> multiKey1 = new MultiKey<String>("", "");
      multiKeyArray0[1] = multiKey1;
      MultiKey<MultiKey<String>> multiKey2 = new MultiKey<MultiKey<String>>(multiKeyArray0);
      multiKey0.toString();
      multiKey2.toString();
      MultiKey<Object> multiKey3 = new MultiKey<Object>((Object[]) multiKeyArray0, true);
      multiKey0.toString();
      multiKey0.toString();
      multiKey3.size();
      multiKey3.toString();
      multiKey2.getKeys();
      multiKey0.toString();
      multiKey3.getKeys();
      multiKey0.toString();
      multiKey3.toString();
      String string0 = multiKey3.toString();
      assertEquals("MultiKey[MultiKey[, ], MultiKey[, ]]", string0);
      
      multiKey0.getKey(0);
      boolean boolean0 = multiKey0.equals(multiKey0);
      assertTrue(multiKey0.equals((Object)multiKey1));
      
      String[] stringArray0 = new String[6];
      stringArray0[0] = "";
      stringArray0[1] = "MultiKey[, ]";
      stringArray0[2] = "MultiKey[, ]";
      stringArray0[3] = "MultiKey[, ]";
      stringArray0[4] = "MultiKey[, ]";
      stringArray0[5] = "MultiKey[MultiKey[, ], MultiKey[, ]]";
      MultiKey<String> multiKey4 = new MultiKey<String>(stringArray0);
      boolean boolean1 = multiKey3.equals(multiKey4);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Integer integer0 = new Integer(0);
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integer0, integer0);
      Integer[] integerArray0 = new Integer[5];
      integerArray0[0] = integer0;
      integerArray0[1] = integer0;
      multiKey0.toString();
      integerArray0[2] = integer0;
      integerArray0[3] = integer0;
      integerArray0[4] = integer0;
      MultiKey<Integer> multiKey1 = new MultiKey<Integer>(integerArray0, true);
      multiKey0.equals(multiKey1);
      MultiKey<String>[] multiKeyArray0 = (MultiKey<String>[]) Array.newInstance(MultiKey.class, 6);
      MultiKey<String> multiKey2 = new MultiKey<String>("MultiKey[0, 0]", "");
      multiKeyArray0[0] = multiKey2;
      String[] stringArray0 = new String[3];
      stringArray0[0] = "";
      stringArray0[1] = "MultiKey[0, 0]";
      stringArray0[2] = "MultiKey[0, 0]";
      MultiKey<String> multiKey3 = new MultiKey<String>(stringArray0, false);
      multiKeyArray0[1] = multiKey3;
      MultiKey<String> multiKey4 = new MultiKey<String>("The array of keys must not be null", "", "IGf9?E<", ")Q<7S");
      multiKeyArray0[2] = multiKey4;
      MultiKey<String> multiKey5 = new MultiKey<String>("MultiKey[0, 0]", "The array of keys must not be null", "<d.^wC", "Jb", "QAy?UqW#xYyCOtmb}");
      multiKeyArray0[3] = multiKey5;
      MultiKey<String> multiKey6 = new MultiKey<String>("", "V^+m Tff%l/.mr", "<d.^wC", "org.apache.commons.collections4.keyvalue.MultiKey", "QAy?UqW#xYyCOtmb}");
      multiKeyArray0[4] = multiKey6;
      MultiKey<String> multiKey7 = new MultiKey<String>("!38FfR.bYO2/", "", "Je_#e>psV0?.0[o", (String) null);
      multiKeyArray0[5] = multiKey7;
      MultiKey<MultiKey<String>> multiKey8 = new MultiKey<MultiKey<String>>(multiKeyArray0);
      multiKey8.hashCode();
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Object object0 = new Object();
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = object0;
      objectArray0[1] = object0;
      objectArray0[2] = object0;
      objectArray0[3] = object0;
      objectArray0[4] = object0;
      MultiKey<Object> multiKey0 = new MultiKey<Object>(objectArray0, false);
      MultiKey<Object> multiKey1 = new MultiKey<Object>(object0, object0, multiKey0, object0);
      // Undeclared exception!
//      try { 
        multiKey1.getKey(2280);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 2280
//         //
//         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
//      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      String string0 = "";
      Object object0 = new Object();
      MultiKey<Object> multiKey0 = new MultiKey<Object>((Object) null, "", object0, object0);
      multiKey0.toString();
      multiKey0.toString();
      MultiKey<MultiKey<Object>> multiKey1 = new MultiKey<MultiKey<Object>>(multiKey0, multiKey0);
      multiKey1.toString();
      int int0 = (-2207);
      // Undeclared exception!
//      try { 
        multiKey0.getKey((-2207));
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // -2207
//         //
//         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
//      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Integer integer0 = new Integer(0);
      Integer integer1 = new Integer(2);
      Integer integer2 = new Integer(2);
      Integer integer3 = new Integer(0);
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integer0, (Integer) null, integer1, integer2, integer3);
      Integer integer4 = new Integer(0);
      MultiKey<Integer> multiKey1 = new MultiKey<Integer>(integer4, (Integer) null, (Integer) null);
      MultiKey<MultiKey<Integer>> multiKey2 = new MultiKey<MultiKey<Integer>>(multiKey0, multiKey1, multiKey0, multiKey1);
      boolean boolean0 = multiKey2.equals(multiKey1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      MultiKey<Object> multiKey0 = null;
//      try {
        multiKey0 = new MultiKey<Object>((Object[]) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // The array of keys must not be null
//         //
//         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
//      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>(" 6E", " 6E", "*N(1M", "The array of keys must not be null");
      String[] stringArray0 = new String[7];
      stringArray0[0] = "*N(1M";
      stringArray0[1] = "The array of keys must not be null";
      stringArray0[2] = " 6E";
      stringArray0[3] = "The array of keys must not be null";
      stringArray0[4] = " 6E";
      stringArray0[5] = " 6E";
      stringArray0[6] = "~nu5M$OlyUUh}~MzJ?q";
      MultiKey<String> multiKey1 = new MultiKey<String>(stringArray0);
      boolean boolean0 = multiKey0.equals(multiKey1);
      assertFalse(boolean0);
  }
}
