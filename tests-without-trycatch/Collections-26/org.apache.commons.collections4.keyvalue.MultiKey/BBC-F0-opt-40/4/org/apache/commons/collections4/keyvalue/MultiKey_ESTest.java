/*
 * This file was automatically generated by EvoSuite
 * Wed Oct 13 20:48:13 GMT 2021
 */

package org.apache.commons.collections4.keyvalue;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.lang.reflect.Array;
import org.apache.commons.collections4.keyvalue.MultiKey;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class MultiKey_ESTest extends MultiKey_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Integer integer0 = new Integer(4);
      Integer integer1 = new Integer(4);
      Object object0 = new Object();
      Object object1 = new Object();
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integer1, integer1);
      MultiKey<Object> multiKey1 = new MultiKey<Object>(integer1, object1);
      Integer integer2 = new Integer((-2295));
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) multiKey1;
      objectArray0[1] = (Object) multiKey1;
      objectArray0[2] = object1;
      objectArray0[3] = (Object) integer2;
      objectArray0[4] = (Object) multiKey0;
      MultiKey<Object> multiKey2 = new MultiKey<Object>(objectArray0, false);
      Object[] objectArray1 = new Object[9];
      objectArray1[0] = (Object) integer1;
      objectArray1[1] = (Object) "vPuhfu";
      objectArray1[2] = (Object) integer2;
      objectArray1[3] = object1;
      objectArray1[4] = (Object) multiKey2;
      objectArray1[5] = (Object) multiKey1;
      objectArray1[6] = (Object) multiKey1;
      objectArray1[7] = (Object) multiKey0;
      objectArray1[8] = (Object) "vPuhfu";
      MultiKey<Object> multiKey3 = new MultiKey<Object>(objectArray1, false);
      MultiKey<Object> multiKey4 = new MultiKey<Object>(multiKey2, "vPuhfu", multiKey0, multiKey3);
      boolean boolean0 = multiKey1.equals(objectArray1[6]);
      assertTrue(boolean0);
      assertFalse(multiKey1.equals((Object)multiKey4));
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      String[] stringArray0 = new String[3];
      stringArray0[0] = "%)Wp-5V<]";
      stringArray0[1] = "%)Wp-5V<]";
      stringArray0[2] = "%)Wp-5V<]";
      MultiKey<String> multiKey0 = new MultiKey<String>(stringArray0, true);
      MultiKey<String> multiKey1 = new MultiKey<String>("%)Wp-5V<]", "4( j9hz/?MuE5I||Rz");
      MultiKey<String> multiKey2 = new MultiKey<String>("", ";Fq%#dphMH'q^,}U^", "%)Wp-5V<]", "on0uwt1Kl1NPFj");
      MultiKey<String> multiKey3 = new MultiKey<String>("O", "%)Wp-5V<]", "%)Wp-5V<]");
      assertFalse(multiKey3.equals((Object)multiKey1));
      
      MultiKey<String>[] multiKeyArray0 = (MultiKey<String>[]) Array.newInstance(MultiKey.class, 2);
      multiKeyArray0[0] = multiKey0;
      multiKeyArray0[1] = multiKey2;
      MultiKey<MultiKey<String>> multiKey4 = new MultiKey<MultiKey<String>>(multiKeyArray0);
      MultiKey<Object> multiKey5 = new MultiKey<Object>(multiKeyArray0);
      boolean boolean0 = multiKey4.equals(multiKey5);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Integer integer0 = new Integer((-245));
      Integer integer1 = new Integer(2008);
      Integer integer2 = new Integer(0);
      Integer[] integerArray0 = new Integer[8];
      integerArray0[0] = integer1;
      integerArray0[1] = integer0;
      integerArray0[2] = integer2;
      integerArray0[3] = integer1;
      integerArray0[4] = integer1;
      integerArray0[5] = integer1;
      integerArray0[6] = integer2;
      integerArray0[7] = integer0;
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integerArray0);
      multiKey0.toString();
      MultiKey<Object> multiKey1 = new MultiKey<Object>((Object[]) integerArray0, false);
      multiKey0.equals(multiKey1);
      MultiKey<String> multiKey2 = new MultiKey<String>("", "");
      multiKey2.hashCode();
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      MultiKey<Object> multiKey0 = new MultiKey<Object>(objectArray0, false);
      multiKey0.size();
      String[] stringArray0 = new String[6];
      stringArray0[0] = "0/;*0";
      stringArray0[1] = "7e![1E";
      stringArray0[2] = ">+`v++b_4T";
      stringArray0[3] = "ZFm]cS?H /;g<hkF8[";
      stringArray0[4] = "qr tpr}";
      stringArray0[5] = "s)h=#Z2p^c2kCC-z";
      MultiKey<String> multiKey1 = new MultiKey<String>(stringArray0, true);
      boolean boolean0 = multiKey1.equals("qr tpr}");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Integer integer0 = new Integer((-1957));
      Integer integer1 = new Integer(0);
      Integer integer2 = new Integer(2755);
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integer0, integer0, integer1, integer2, (Integer) null);
      MultiKey<Object> multiKey1 = null;
//      try {
        multiKey1 = new MultiKey<Object>((Object[]) null, true);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // The array of keys must not be null
//         //
//         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
//      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Integer integer0 = new Integer((-1957));
      Integer integer1 = new Integer(0);
      Integer integer2 = new Integer((-1957));
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>((Integer) null, integer1, integer0, (Integer) null, integer1);
      Integer integer3 = multiKey0.getKey(0);
      assertNull(integer3);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      String[] stringArray0 = new String[0];
      MultiKey<String> multiKey0 = new MultiKey<String>(stringArray0);
      multiKey0.toString();
      Object object0 = new Object();
      multiKey0.toString();
      Object object1 = new Object();
      MultiKey<Object> multiKey1 = new MultiKey<Object>(object0, "MultiKey[]", object1);
      multiKey1.toString();
      multiKey1.toString();
      multiKey0.toString();
      multiKey0.hashCode();
      multiKey1.toString();
      multiKey0.getKeys();
      multiKey1.toString();
      int int0 = 1681;
      // Undeclared exception!
//      try { 
        multiKey1.getKey(1681);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 1681
//         //
//         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
//      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      MultiKey<Integer> multiKey0 = null;
//      try {
        multiKey0 = new MultiKey<Integer>((Integer[]) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // The array of keys must not be null
//         //
//         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
//      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      MultiKey<Object> multiKey0 = new MultiKey<Object>("x", (Object) null);
      String[] stringArray0 = new String[8];
      stringArray0[0] = "";
      stringArray0[1] = "x";
      multiKey0.toString();
      stringArray0[2] = "x";
      stringArray0[3] = "";
      stringArray0[4] = "x";
      stringArray0[5] = "x";
      stringArray0[6] = "x";
      stringArray0[7] = "x";
      multiKey0.toString();
      MultiKey<String> multiKey1 = new MultiKey<String>(stringArray0, true);
      multiKey1.getKey(0);
      multiKey1.toString();
      multiKey1.size();
      multiKey1.toString();
      multiKey0.toString();
      multiKey1.toString();
      multiKey0.getKey(0);
      // Undeclared exception!
//      try { 
        multiKey0.getKey(8);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 8
//         //
//         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
//      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Integer integer0 = new Integer((-2385));
      int int0 = (-1);
      Integer integer1 = new Integer((-1));
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integer0, (Integer) null, integer1, (Integer) null, (Integer) null);
      // Undeclared exception!
//      try { 
        multiKey0.getKey((-1));
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // -1
//         //
//         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
//      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Object object0 = new Object();
      Integer integer0 = new Integer(2);
      Integer integer1 = new Integer(2);
      Integer integer2 = new Integer(0);
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integer0, integer1, integer2);
      Object object1 = new Object();
      MultiKey<Object> multiKey1 = new MultiKey<Object>((Object) null, (Object) null, object1);
      MultiKey<Object> multiKey2 = new MultiKey<Object>(object0, multiKey0, multiKey1);
      multiKey0.toString();
      multiKey1.toString();
      multiKey2.toString();
      MultiKey<MultiKey<Object>> multiKey3 = new MultiKey<MultiKey<Object>>(multiKey2, multiKey1);
      multiKey1.toString();
      multiKey3.toString();
      multiKey3.toString();
      multiKey1.toString();
      multiKey3.toString();
      multiKey3.size();
      multiKey2.size();
      multiKey3.toString();
      multiKey1.equals("MultiKey");
      String string0 = multiKey0.toString();
      assertEquals("MultiKey[2, 2, 0]", string0);
      
      multiKey3.equals(object0);
      String[] stringArray0 = new String[3];
      stringArray0[0] = "MultiKey[2, 2, 0]";
      stringArray0[1] = "MultiKey[2, 2, 0]";
      multiKey3.toString();
      stringArray0[2] = "MultiKey[MultiKey[java.lang.Object@193ccebe, MultiKey[2, 2, 0], MultiKey[null, null, java.lang.Object@1d08e95d]], MultiKey[null, null, java.lang.Object@1d08e95d]]";
      MultiKey<String> multiKey4 = new MultiKey<String>(stringArray0, false);
      boolean boolean0 = multiKey2.equals(multiKey4);
      assertFalse(boolean0);
      
      boolean boolean1 = multiKey4.equals("MultiKey[2, 2, 0]");
      assertFalse(boolean1);
      
      multiKey1.getKeys();
      assertFalse(multiKey1.equals((Object)multiKey2));
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Object[] objectArray0 = new Object[8];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      Object object2 = new Object();
      objectArray0[2] = object2;
      Object object3 = new Object();
      objectArray0[3] = object3;
      Object object4 = new Object();
      objectArray0[4] = object4;
      Object object5 = new Object();
      objectArray0[5] = object5;
      Integer integer0 = new Integer(2);
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integer0, integer0, integer0, integer0);
      Integer integer1 = multiKey0.getKey(2);
      objectArray0[6] = (Object) integer1;
      Object object6 = new Object();
      objectArray0[7] = object6;
      MultiKey<Object> multiKey1 = new MultiKey<Object>(objectArray0, false);
      MultiKey<Object> multiKey2 = new MultiKey<Object>(objectArray0);
      MultiKey<Object> multiKey3 = new MultiKey<Object>(multiKey1, multiKey2);
      MultiKey<MultiKey<Object>> multiKey4 = new MultiKey<MultiKey<Object>>(multiKey3, multiKey3, multiKey1, multiKey1);
      assertEquals(4, multiKey4.size());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      String[] stringArray0 = new String[1];
      stringArray0[0] = "";
      MultiKey<String> multiKey0 = new MultiKey<String>(stringArray0, false);
      Integer[] integerArray0 = new Integer[2];
      Integer integer0 = new Integer((-2660));
      integerArray0[0] = integer0;
      Integer integer1 = new Integer(1);
      integerArray0[1] = integer1;
      MultiKey<Integer> multiKey1 = new MultiKey<Integer>(integerArray0, true);
      multiKey1.hashCode();
      multiKey1.getKeys();
      String string0 = multiKey1.toString();
      assertEquals("MultiKey[-2660, 1]", string0);
  }
}
