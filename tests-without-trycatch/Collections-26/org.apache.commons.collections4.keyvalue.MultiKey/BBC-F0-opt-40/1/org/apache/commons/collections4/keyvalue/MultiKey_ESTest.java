/*
 * This file was automatically generated by EvoSuite
 * Wed Oct 13 20:45:23 GMT 2021
 */

package org.apache.commons.collections4.keyvalue;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.lang.reflect.Array;
import org.apache.commons.collections4.keyvalue.MultiKey;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class MultiKey_ESTest extends MultiKey_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("FK^crr", "FK^crr");
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) multiKey0;
      objectArray0[1] = (Object) multiKey0;
      MultiKey<Object> multiKey1 = new MultiKey<Object>(objectArray0, true);
      String string0 = multiKey1.toString();
      assertEquals("MultiKey[MultiKey[FK^crr, FK^crr], MultiKey[FK^crr, FK^crr]]", string0);
      
      boolean boolean0 = multiKey0.equals(objectArray0[0]);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      MultiKey<Integer> multiKey0 = null;
//      try {
        multiKey0 = new MultiKey<Integer>((Integer[]) null, true);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // The array of keys must not be null
//         //
//         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
//      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      MultiKey<Object> multiKey0 = new MultiKey<Object>(objectArray0);
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.getKeys();
      multiKey0.hashCode();
      multiKey0.toString();
      MultiKey<String> multiKey1 = new MultiKey<String>((String) null, "MultiKey[]", "MultiKey[]", "MultiKey[]");
      int int0 = multiKey1.size();
      assertEquals(4, int0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      String[] stringArray0 = new String[8];
      stringArray0[0] = "zd8z<(fu-ZHWl";
      stringArray0[1] = "CL&1";
      String string0 = "";
      stringArray0[2] = "";
      stringArray0[3] = "'8fTxEI%PLQP,4FwL/";
      stringArray0[4] = "";
      stringArray0[5] = "";
      stringArray0[6] = "['2U<;)v|b2u{";
      stringArray0[7] = "|^";
      MultiKey<String> multiKey0 = new MultiKey<String>(stringArray0);
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.equals("zd8z<(fu-ZHWl");
      Integer[] integerArray0 = null;
      MultiKey<Integer> multiKey1 = null;
//      try {
        multiKey1 = new MultiKey<Integer>((Integer[]) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // The array of keys must not be null
//         //
//         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
//      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("Y{QyXQ#'fa", "Y{QyXQ#'fa", "2C/OvaELB,N>'JQM:n", "");
      MultiKey<String> multiKey1 = new MultiKey<String>("", "Y{QyXQ#'fa");
      multiKey1.toString();
      multiKey1.toString();
      boolean boolean0 = multiKey0.equals(multiKey1);
      assertFalse(boolean0);
      
      MultiKey<Object> multiKey2 = new MultiKey<Object>(multiKey0, "", "");
      multiKey0.toString();
      multiKey1.toString();
      multiKey2.hashCode();
      Integer integer0 = new Integer(1);
      Integer integer1 = new Integer(0);
      multiKey2.toString();
      Integer integer2 = new Integer(619);
      MultiKey<Integer> multiKey3 = new MultiKey<Integer>(integer0, integer1, integer2, integer1, integer1);
      multiKey3.toString();
      multiKey3.toString();
      multiKey2.hashCode();
      multiKey2.toString();
      multiKey3.toString();
      multiKey2.hashCode();
      multiKey1.toString();
      String string0 = multiKey1.toString();
      assertEquals("MultiKey[, Y{QyXQ#'fa]", string0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Object[] objectArray0 = new Object[9];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      String[] stringArray0 = new String[9];
      stringArray0[0] = "";
      stringArray0[1] = "7r";
      stringArray0[2] = "";
      stringArray0[3] = "%au";
      stringArray0[4] = "MultiKey";
      stringArray0[5] = "@`";
      stringArray0[6] = "%3;*0b6(m~r";
      String string0 = "";
      stringArray0[7] = "";
      stringArray0[8] = "k";
      MultiKey<String> multiKey0 = new MultiKey<String>(stringArray0, true);
      int int0 = 0;
      multiKey0.getKey(0);
      objectArray0[2] = (Object) "";
      Object object2 = new Object();
      objectArray0[3] = object2;
      Integer integer0 = new Integer(0);
      MultiKey<Integer> multiKey1 = new MultiKey<Integer>((Integer) null, integer0, (Integer) null);
      multiKey1.getKey(0);
      objectArray0[4] = (Object) null;
      // Undeclared exception!
//      try { 
        multiKey0.getKey((-1776));
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // -1776
//         //
//         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
//      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Integer integer0 = new Integer(1);
      MultiKey<String> multiKey0 = new MultiKey<String>("Yb<_~-1%.7+@F", "", "L:o9\"x|DI-kCO^Sgo!", "(UEo1$eM%R2Bd(30");
      multiKey0.toString();
      multiKey0.toString();
      MultiKey<Object> multiKey1 = new MultiKey<Object>(integer0, integer0, multiKey0);
      MultiKey<String> multiKey2 = new MultiKey<String>("L:o9\"x|DI-kCO^Sgo!", "", "MultiKey[Yb<_~-1%.7+@F, , L:o9\"x|DI-kCO^Sgo!, (UEo1$eM%R2Bd(30]", "");
      Object object0 = multiKey2.getKey(1);
      assertEquals("", object0);
      
      MultiKey<Object> multiKey3 = new MultiKey<Object>("", integer0, integer0);
      multiKey3.toString();
      multiKey3.toString();
      String string0 = multiKey2.toString();
      assertEquals("MultiKey[L:o9\"x|DI-kCO^Sgo!, , MultiKey[Yb<_~-1%.7+@F, , L:o9\"x|DI-kCO^Sgo!, (UEo1$eM%R2Bd(30], ]", string0);
      
      multiKey3.getKey(0);
      boolean boolean0 = multiKey1.equals("");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      String[] stringArray0 = new String[5];
      stringArray0[0] = "n>&Z|,W6<i>";
      String string0 = "org.apache.commons.collections4.keyvalue.MultiKey";
      stringArray0[1] = "org.apache.commons.collections4.keyvalue.MultiKey";
      stringArray0[2] = "";
      stringArray0[3] = "PGVkY8YyyW.vh>(V}";
      stringArray0[4] = "";
      MultiKey<String> multiKey0 = new MultiKey<String>(stringArray0, false);
      MultiKey<Integer>[] multiKeyArray0 = (MultiKey<Integer>[]) Array.newInstance(MultiKey.class, 5);
      Integer integer0 = new Integer(2064);
      Integer integer1 = new Integer(144);
      Integer integer2 = new Integer(2064);
      MultiKey<Integer> multiKey1 = new MultiKey<Integer>(integer0, integer1, integer2);
      multiKeyArray0[0] = multiKey1;
      Integer integer3 = new Integer(2064);
      MultiKey<Integer> multiKey2 = new MultiKey<Integer>(integer3, (Integer) null, (Integer) null, integer1);
      multiKeyArray0[1] = multiKey2;
      Integer integer4 = new Integer(2064);
      Integer integer5 = new Integer(0);
      Integer integer6 = new Integer(2064);
      MultiKey<Integer> multiKey3 = new MultiKey<Integer>(integer4, integer1, integer5, integer6);
      multiKeyArray0[2] = multiKey3;
      MultiKey<Integer> multiKey4 = new MultiKey<Integer>(integer0, integer4);
      multiKeyArray0[3] = multiKey4;
      Integer integer7 = new Integer(144);
      MultiKey<Integer> multiKey5 = new MultiKey<Integer>(integer7, integer0);
      multiKeyArray0[4] = multiKey5;
      MultiKey<MultiKey<Integer>> multiKey6 = new MultiKey<MultiKey<Integer>>(multiKeyArray0);
      // Undeclared exception!
//      try { 
        multiKey6.getKey(126);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 126
//         //
//         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
//      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Object object0 = new Object();
      Object object1 = new Object();
      MultiKey<Object> multiKey0 = new MultiKey<Object>(object0, object1, object0, object0, object1);
      multiKey0.getKeys();
      multiKey0.toString();
      String[] stringArray0 = new String[8];
      stringArray0[0] = "MultiKey[java.lang.Object@270493a7, java.lang.Object@bb065b5, java.lang.Object@270493a7, java.lang.Object@270493a7, java.lang.Object@bb065b5]";
      stringArray0[1] = "MultiKey[java.lang.Object@270493a7, java.lang.Object@bb065b5, java.lang.Object@270493a7, java.lang.Object@270493a7, java.lang.Object@bb065b5]";
      stringArray0[2] = "MultiKey[java.lang.Object@270493a7, java.lang.Object@bb065b5, java.lang.Object@270493a7, java.lang.Object@270493a7, java.lang.Object@bb065b5]";
      stringArray0[3] = "MultiKey[java.lang.Object@270493a7, java.lang.Object@bb065b5, java.lang.Object@270493a7, java.lang.Object@270493a7, java.lang.Object@bb065b5]";
      stringArray0[4] = "MultiKey[java.lang.Object@270493a7, java.lang.Object@bb065b5, java.lang.Object@270493a7, java.lang.Object@270493a7, java.lang.Object@bb065b5]";
      stringArray0[5] = "MultiKey[java.lang.Object@270493a7, java.lang.Object@bb065b5, java.lang.Object@270493a7, java.lang.Object@270493a7, java.lang.Object@bb065b5]";
      stringArray0[6] = "MultiKey[java.lang.Object@270493a7, java.lang.Object@bb065b5, java.lang.Object@270493a7, java.lang.Object@270493a7, java.lang.Object@bb065b5]";
      stringArray0[7] = "MultiKey[java.lang.Object@270493a7, java.lang.Object@bb065b5, java.lang.Object@270493a7, java.lang.Object@270493a7, java.lang.Object@bb065b5]";
      MultiKey<String> multiKey1 = new MultiKey<String>(stringArray0, true);
      multiKey1.toString();
      MultiKey<MultiKey<String>> multiKey2 = new MultiKey<MultiKey<String>>(multiKey1, multiKey1, multiKey1, multiKey1);
      multiKey1.toString();
      multiKey2.toString();
      multiKey2.toString();
      multiKey1.toString();
      multiKey1.toString();
      multiKey2.size();
      multiKey1.toString();
      multiKey1.getKey(0);
      // Undeclared exception!
//      try { 
        multiKey0.getKey(1953);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 1953
//         //
//         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
//      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>(" nRs.E&", " nRs.E&", " nRs.E&");
      multiKey0.toString();
      MultiKey<Object> multiKey1 = new MultiKey<Object>("!\"", multiKey0);
      multiKey0.toString();
      multiKey1.hashCode();
      MultiKey<MultiKey<Object>> multiKey2 = new MultiKey<MultiKey<Object>>(multiKey1, multiKey1, multiKey1, multiKey1);
      multiKey2.toString();
      multiKey1.toString();
      multiKey0.toString();
      multiKey1.toString();
      multiKey0.toString();
      multiKey0.toString();
      // Undeclared exception!
//      try { 
        multiKey2.getKey((-1));
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // -1
//         //
//         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
//      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Object[] objectArray0 = new Object[5];
      Object object0 = new Object();
      objectArray0[0] = object0;
      MultiKey<Object> multiKey0 = new MultiKey<Object>((Object) null, object0, object0, (Object) null);
      int int0 = 5;
      // Undeclared exception!
//      try { 
        multiKey0.getKey(5);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 5
//         //
//         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
//      }
  }
}
