/*
 * This file was automatically generated by EvoSuite
 * Wed Oct 20 12:23:28 GMT 2021
 */

package org.apache.commons.collections4.keyvalue;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.lang.reflect.Array;
import org.apache.commons.collections4.keyvalue.MultiKey;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class MultiKey_ESTest extends MultiKey_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("05*[D?n#iy", "05*[D?n#iy", "05*[D?n#iy", "05*[D?n#iy", "05*[D?n#iy");
      Object object0 = new Object();
      Object[] objectArray0 = new Object[7];
      Object object1 = new Object();
      objectArray0[0] = object1;
      objectArray0[1] = (Object) "05*[D?n#iy";
      objectArray0[3] = (Object) "05*[D?n#iy";
      objectArray0[4] = (Object) multiKey0;
      objectArray0[5] = object0;
      objectArray0[6] = (Object) "05*[D?n#iy";
      MultiKey<Object> multiKey1 = new MultiKey<Object>(objectArray0);
      MultiKey<String> multiKey2 = new MultiKey<String>("", "M;h>1coDJ<)5]");
      Integer integer0 = new Integer(1);
      Object object2 = new Object();
      MultiKey<Object> multiKey3 = new MultiKey<Object>(multiKey2, integer0, object2);
      boolean boolean0 = multiKey1.equals(multiKey1);
      assertTrue(boolean0);
      
      MultiKey<Object> multiKey4 = new MultiKey<Object>(object0, object2, objectArray0[1], objectArray0[2]);
      multiKey4.hashCode();
      String[] stringArray0 = new String[3];
      stringArray0[0] = "";
      stringArray0[1] = "M;h>1coDJ<)5]";
      stringArray0[2] = "";
      MultiKey<String> multiKey5 = new MultiKey<String>(stringArray0);
      MultiKey<String> multiKey6 = new MultiKey<String>(stringArray0);
      MultiKey<MultiKey<String>> multiKey7 = new MultiKey<MultiKey<String>>(multiKey0, multiKey5, multiKey2, multiKey0);
      String string0 = multiKey7.toString();
      assertEquals("MultiKey[MultiKey[05*[D?n#iy, 05*[D?n#iy, 05*[D?n#iy, 05*[D?n#iy, 05*[D?n#iy], MultiKey[, M;h>1coDJ<)5], ], MultiKey[, M;h>1coDJ<)5]], MultiKey[05*[D?n#iy, 05*[D?n#iy, 05*[D?n#iy, 05*[D?n#iy, 05*[D?n#iy]]", string0);
      assertFalse(multiKey2.equals((Object)multiKey6));
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("", "%-j_", "%-j_", "", (String) null);
      MultiKey<Object>[] multiKeyArray0 = (MultiKey<Object>[]) Array.newInstance(MultiKey.class, 0);
      MultiKey<MultiKey<Object>> multiKey1 = new MultiKey<MultiKey<Object>>(multiKeyArray0);
      MultiKey<Object>[] multiKeyArray1 = multiKey1.getKeys();
      assertEquals(0, multiKeyArray1.length);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = null;
      objectArray0[1] = null;
      objectArray0[2] = null;
      objectArray0[3] = null;
      objectArray0[4] = null;
      objectArray0[5] = null;
      objectArray0[6] = null;
      objectArray0[7] = null;
      objectArray0[8] = null;
      MultiKey<Object> multiKey0 = new MultiKey<Object>(objectArray0, false);
      multiKey0.getKey(1);
      MultiKey<Object> multiKey1 = new MultiKey<Object>((Object) null, (Object) null);
      String string0 = multiKey1.toString();
      assertEquals("MultiKey[null, null]", string0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      MultiKey<Object> multiKey0 = new MultiKey<Object>((Object) null, (Object) null, (Object) null, (Object) null, (Object) null);
      multiKey0.equals((Object) null);
      Integer[] integerArray0 = new Integer[0];
      MultiKey<Integer> multiKey1 = new MultiKey<Integer>(integerArray0, false);
      multiKey1.toString();
      multiKey1.toString();
      multiKey1.hashCode();
      int int0 = multiKey1.size();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Integer[] integerArray0 = new Integer[4];
      int int0 = 1;
      Integer integer0 = new Integer(1);
      integerArray0[0] = integer0;
      Integer integer1 = new Integer(1);
      integerArray0[1] = integer1;
      Integer integer2 = new Integer(int0);
      integerArray0[2] = integer2;
      Integer integer3 = new Integer(int0);
      integerArray0[3] = integer3;
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integerArray0, false);
      multiKey0.getKey(int0);
      MultiKey<Object> multiKey1 = new MultiKey<Object>(integerArray0);
      multiKey1.toString();
      boolean boolean0 = multiKey0.equals(multiKey1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Object object0 = new Object();
      MultiKey<Object> multiKey0 = new MultiKey<Object>(object0, "", object0, "", "");
      Integer integer0 = new Integer(0);
      MultiKey<Object> multiKey1 = new MultiKey<Object>(integer0, multiKey0);
      multiKey0.equals(multiKey1);
      String[] stringArray0 = new String[9];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "";
      stringArray0[3] = "";
      stringArray0[4] = "";
      stringArray0[5] = "";
      stringArray0[6] = "";
      stringArray0[7] = "";
      stringArray0[8] = "";
      MultiKey<String> multiKey2 = new MultiKey<String>(stringArray0, false);
      String string0 = multiKey2.getKey(0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      String string0 = "";
      MultiKey<Object> multiKey0 = new MultiKey<Object>("", "", "");
      Integer integer0 = new Integer(5268);
      int int0 = 0;
      Integer integer1 = new Integer(0);
      Integer integer2 = new Integer(1);
      multiKey0.toString();
      MultiKey<Integer> multiKey1 = new MultiKey<Integer>(integer0, integer0, integer0, integer1, integer2);
      multiKey0.toString();
      multiKey1.toString();
      // Undeclared exception!
//      try { 
        multiKey1.getKey((-1035));
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // -1035
//         //
//         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
//      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      String[] stringArray0 = new String[1];
      String string0 = "bSC";
      stringArray0[0] = "bSC";
      MultiKey<String> multiKey0 = new MultiKey<String>(stringArray0, true);
      MultiKey<Object> multiKey1 = new MultiKey<Object>(stringArray0);
      multiKey1.toString();
      multiKey1.size();
      MultiKey<MultiKey<Object>> multiKey2 = null;
//      try {
        multiKey2 = new MultiKey<MultiKey<Object>>((MultiKey<Object>[]) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // The array of keys must not be null
//         //
//         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
//      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Integer integer0 = new Integer((-1458));
      Integer integer1 = new Integer((-127));
      Integer integer2 = new Integer((-127));
      Integer integer3 = new Integer((-1458));
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integer0, integer1, integer2, integer3, integer3);
      multiKey0.toString();
      multiKey0.toString();
      Object object0 = null;
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) integer0;
      objectArray0[1] = (Object) integer2;
      objectArray0[2] = (Object) integer2;
      objectArray0[3] = (Object) integer0;
      MultiKey<Object> multiKey1 = new MultiKey<Object>(objectArray0, false);
      // Undeclared exception!
//      try { 
        multiKey1.getKey((-127));
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // -127
//         //
//         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
//      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      String[] stringArray0 = new String[4];
      stringArray0[0] = "";
      stringArray0[1] = "*63?6s\"T?{cV";
      stringArray0[2] = "-c@";
      stringArray0[3] = "ON8T7v[a[`K";
      MultiKey<String> multiKey0 = new MultiKey<String>(stringArray0);
      int int0 = multiKey0.size();
      assertEquals(4, int0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      String[] stringArray0 = null;
      MultiKey<String> multiKey0 = null;
//      try {
        multiKey0 = new MultiKey<String>((String[]) null, true);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // The array of keys must not be null
//         //
//         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
//      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      MultiKey<Object>[] multiKeyArray0 = (MultiKey<Object>[]) Array.newInstance(MultiKey.class, 1);
      Integer integer0 = new Integer((-305));
      Integer integer1 = new Integer((-305));
      Object object0 = new Object();
      MultiKey<Object> multiKey0 = new MultiKey<Object>(integer0, integer1, object0, integer0, object0);
      multiKey0.toString();
      multiKeyArray0[0] = multiKey0;
      MultiKey<MultiKey<Object>> multiKey1 = new MultiKey<MultiKey<Object>>(multiKeyArray0, true);
      multiKey1.toString();
      // Undeclared exception!
//      try { 
        multiKey0.getKey((-305));
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // -305
//         //
//         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
//      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("", "");
      multiKey0.toString();
      multiKey0.toString();
      String string0 = multiKey0.toString();
      assertEquals("MultiKey[, ]", string0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      String[] stringArray0 = new String[5];
      stringArray0[0] = "";
      stringArray0[1] = "JqIX,RRT7";
      stringArray0[2] = "JD=]T~W|1n!";
      stringArray0[3] = "";
      stringArray0[4] = "1]+C";
      MultiKey<String> multiKey0 = new MultiKey<String>(stringArray0, true);
      String string0 = multiKey0.toString();
      assertEquals("MultiKey[, JqIX,RRT7, JD=]T~W|1n!, , 1]+C]", string0);
      
      int int0 = 0;
      multiKey0.getKey(0);
      multiKey0.equals("");
      Integer[] integerArray0 = new Integer[6];
      Integer integer0 = new Integer((-2068));
      integerArray0[0] = integer0;
      Integer integer1 = new Integer(0);
      integerArray0[1] = integer1;
      Integer integer2 = new Integer(int0);
      integerArray0[2] = integer2;
      Integer integer3 = new Integer(0);
      integerArray0[3] = integer3;
      Integer integer4 = new Integer(int0);
      integerArray0[4] = integer4;
      Integer integer5 = new Integer(1);
      integerArray0[5] = integer5;
      MultiKey<Integer> multiKey1 = new MultiKey<Integer>(integerArray0);
      Object object0 = multiKey1.getKey(int0);
      assertEquals((-2068), object0);
      
      boolean boolean0 = multiKey0.equals(object0);
      assertFalse(boolean0);
  }
}
