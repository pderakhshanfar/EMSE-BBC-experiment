/*
 * This file was automatically generated by EvoSuite
 * Fri Oct 22 17:39:50 GMT 2021
 */

package org.apache.commons.collections4.keyvalue;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.collections4.keyvalue.MultiKey;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class MultiKey_ESTest extends MultiKey_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Integer integer0 = new Integer(1418);
      String[] stringArray0 = new String[0];
      MultiKey<String> multiKey0 = new MultiKey<String>(stringArray0);
      int int0 = multiKey0.size();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("", "MultiKey", "6%pL*p;", "JI{v");
      MultiKey<MultiKey<String>> multiKey1 = new MultiKey<MultiKey<String>>(multiKey0, multiKey0, multiKey0, multiKey0, multiKey0);
      Object object0 = multiKey1.getKey(0);
      boolean boolean0 = multiKey0.equals(object0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      MultiKey<Object> multiKey0 = new MultiKey<Object>(objectArray0, true);
      multiKey0.toString();
      MultiKey<MultiKey<Object>> multiKey1 = new MultiKey<MultiKey<Object>>(multiKey0, multiKey0, multiKey0, multiKey0);
      multiKey0.getKeys();
      Integer integer0 = new Integer(0);
      Integer integer1 = new Integer(0);
      Integer integer2 = new Integer(5);
      MultiKey<Integer> multiKey2 = new MultiKey<Integer>(integer0, integer0, integer2, integer0);
      MultiKey<Integer> multiKey3 = new MultiKey<Integer>(integer1, integer2);
      MultiKey<String> multiKey4 = new MultiKey<String>("/uz|aP(Tv", "MultiKey[]", "xe^E93XgvHPcL");
      int int0 = (-549);
      // Undeclared exception!
//      try { 
        multiKey4.getKey((-549));
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // -549
//         //
//         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
//      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Integer[] integerArray0 = new Integer[9];
      int int0 = (-1);
      Integer integer0 = new Integer((-1));
      integerArray0[0] = integer0;
      Integer integer1 = new Integer(int0);
      integerArray0[1] = integer1;
      Integer integer2 = new Integer((-1));
      integerArray0[2] = integer2;
      Integer integer3 = new Integer(int0);
      integerArray0[3] = integer3;
      Integer integer4 = new Integer(int0);
      integerArray0[4] = integer4;
      Integer integer5 = new Integer((-1));
      integerArray0[5] = integer5;
      Integer integer6 = new Integer(int0);
      integerArray0[6] = integer6;
      Integer integer7 = new Integer(int0);
      integerArray0[7] = integer7;
      Integer integer8 = new Integer(int0);
      integerArray0[8] = integer8;
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integerArray0);
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      MultiKey<Object> multiKey1 = new MultiKey<Object>((Object[]) integerArray0, false);
      multiKey1.toString();
      multiKey1.toString();
      MultiKey<Object> multiKey2 = new MultiKey<Object>((Object[]) integerArray0, false);
      multiKey2.toString();
      multiKey2.toString();
      multiKey1.equals(multiKey2);
      int int1 = multiKey2.hashCode();
      assertFalse(int1 == int0);
      
      MultiKey<String> multiKey3 = new MultiKey<String>("", "MultiKey[-1, -1, -1, -1, -1, -1, -1, -1, -1]", "MultiKey[-1, -1, -1, -1, -1, -1, -1, -1, -1]", "MultiKey[-1, -1, -1, -1, -1, -1, -1, -1, -1]", "MultiKey[-1, -1, -1, -1, -1, -1, -1, -1, -1]");
      String string0 = multiKey3.toString();
      assertEquals("MultiKey[, MultiKey[-1, -1, -1, -1, -1, -1, -1, -1, -1], MultiKey[-1, -1, -1, -1, -1, -1, -1, -1, -1], MultiKey[-1, -1, -1, -1, -1, -1, -1, -1, -1], MultiKey[-1, -1, -1, -1, -1, -1, -1, -1, -1]]", string0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>((String) null, (String) null, (String) null, "", (String) null);
      String string0 = multiKey0.toString();
      assertEquals("MultiKey[null, null, null, , null]", string0);
      
      MultiKey<Object> multiKey1 = new MultiKey<Object>((Object) null, (Object) null);
      Integer integer0 = new Integer((-2400));
      MultiKey<Object> multiKey2 = new MultiKey<Object>("", (Object) null, integer0);
      multiKey2.getKey(0);
      Object object0 = new Object();
      MultiKey<Object> multiKey3 = new MultiKey<Object>(multiKey1, "", integer0, object0);
      multiKey3.getKeys();
      Integer integer1 = new Integer(0);
      Integer integer2 = new Integer((-2400));
      MultiKey<Integer> multiKey4 = new MultiKey<Integer>(integer0, integer0, integer1, integer2);
      boolean boolean0 = multiKey4.equals((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      MultiKey<Object> multiKey0 = null;
//      try {
        multiKey0 = new MultiKey<Object>((Object[]) null, true);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // The array of keys must not be null
//         //
//         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
//      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      MultiKey<String> multiKey0 = null;
//      try {
        multiKey0 = new MultiKey<String>((String[]) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // The array of keys must not be null
//         //
//         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
//      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Integer[] integerArray0 = new Integer[9];
      int int0 = 0;
      Integer integer0 = new Integer(0);
      integerArray0[0] = integer0;
      Integer integer1 = new Integer(0);
      integerArray0[1] = integer1;
      Integer integer2 = new Integer((-1613));
      integerArray0[2] = integer2;
      Integer integer3 = new Integer(3);
      integerArray0[3] = integer3;
      Integer integer4 = new Integer(int0);
      integerArray0[4] = integer4;
      Integer integer5 = new Integer(548);
      integerArray0[5] = integer5;
      Integer integer6 = new Integer(355);
      integerArray0[6] = integer6;
      Integer integer7 = new Integer((int) integerArray0[5]);
      integerArray0[7] = integer7;
      Integer integer8 = new Integer((int) integerArray0[5]);
      integerArray0[8] = integer8;
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integerArray0, false);
      String string0 = multiKey0.toString();
      assertEquals("MultiKey[0, 0, -1613, 3, 0, 548, 355, 548, 548]", string0);
      
      multiKey0.getKeys();
      Object object0 = new Object();
      MultiKey<Object> multiKey1 = new MultiKey<Object>(object0, (Object) null);
      MultiKey<Integer> multiKey2 = new MultiKey<Integer>((Integer) null, integer4);
      boolean boolean0 = multiKey1.equals(multiKey2);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Integer[] integerArray0 = new Integer[1];
      Integer integer0 = new Integer(0);
      integerArray0[0] = integer0;
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integerArray0);
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      MultiKey<Object> multiKey1 = new MultiKey<Object>(multiKey0, integer0, "MultiKey[0]", integer0, "MultiKey[0]");
      multiKey1.toString();
      multiKey1.toString();
      multiKey1.toString();
      MultiKey<MultiKey<Object>> multiKey2 = new MultiKey<MultiKey<Object>>(multiKey1, multiKey1);
      multiKey2.toString();
      multiKey2.toString();
      multiKey2.toString();
      multiKey2.hashCode();
      MultiKey<String> multiKey3 = new MultiKey<String>("MultiKey[0]", "MultiKey[MultiKey[0], 0, MultiKey[0], 0, MultiKey[0]]", "", "MultiKey[0]", "MultiKey[MultiKey[0], 0, MultiKey[0], 0, MultiKey[0]]");
      multiKey3.hashCode();
      multiKey1.equals("MultiKey[0]");
      multiKey1.toString();
      MultiKey<String> multiKey4 = new MultiKey<String>("A@]B.z9g(", "MultiKey[0]", "$:O%}PnV)60::f8(~", "MultiKey[0]", "e`");
      multiKey4.toString();
      multiKey4.toString();
      MultiKey<MultiKey<String>> multiKey5 = new MultiKey<MultiKey<String>>(multiKey3, multiKey4, multiKey4);
      int int0 = multiKey5.size();
      multiKey1.hashCode();
      multiKey0.getKey(0);
      multiKey1.hashCode();
      multiKey1.hashCode();
      multiKey1.getKeys();
      multiKey0.toString();
      int int1 = multiKey0.hashCode();
      assertFalse(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Integer integer0 = new Integer(1418);
      Integer integer1 = new Integer(1418);
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integer0, integer1);
      String string0 = multiKey0.toString();
      assertEquals("MultiKey[1418, 1418]", string0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Integer integer0 = new Integer((-1957));
      Integer integer1 = new Integer((-1957));
      Integer integer2 = new Integer((-1957));
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integer0, integer1, integer2, integer1);
      multiKey0.toString();
      int int0 = 503;
      // Undeclared exception!
//      try { 
        multiKey0.getKey(503);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 503
//         //
//         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
//      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Object[] objectArray0 = new Object[7];
      MultiKey<Object> multiKey0 = new MultiKey<Object>(objectArray0);
      multiKey0.getKey(0);
      objectArray0[0] = null;
      Object object0 = new Object();
      objectArray0[1] = object0;
      Object object1 = new Object();
      objectArray0[2] = object1;
      MultiKey<Object> multiKey1 = new MultiKey<Object>((Object) null, object1, (Object) null, (Object) null);
      // Undeclared exception!
//      try { 
        multiKey1.getKey((-677));
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // -677
//         //
//         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
//      }
  }
}
