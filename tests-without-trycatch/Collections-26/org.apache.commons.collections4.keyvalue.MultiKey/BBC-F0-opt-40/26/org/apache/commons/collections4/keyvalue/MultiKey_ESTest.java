/*
 * This file was automatically generated by EvoSuite
 * Fri Oct 22 17:42:29 GMT 2021
 */

package org.apache.commons.collections4.keyvalue;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.lang.reflect.Array;
import org.apache.commons.collections4.keyvalue.MultiKey;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class MultiKey_ESTest extends MultiKey_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      MultiKey<Object>[] multiKeyArray0 = (MultiKey<Object>[]) Array.newInstance(MultiKey.class, 0);
      MultiKey<MultiKey<Object>> multiKey0 = new MultiKey<MultiKey<Object>>(multiKeyArray0);
      MultiKey<Object>[] multiKeyArray1 = multiKey0.getKeys();
      assertNotSame(multiKeyArray0, multiKeyArray1);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      String[] stringArray0 = new String[0];
      MultiKey<String> multiKey0 = new MultiKey<String>(stringArray0);
      MultiKey<Object> multiKey1 = new MultiKey<Object>((Object[]) stringArray0, true);
      multiKey1.hashCode();
      int int0 = multiKey0.size();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>((String) null, (String) null);
      MultiKey<Object>[] multiKeyArray0 = (MultiKey<Object>[]) Array.newInstance(MultiKey.class, 3);
      Integer integer0 = new Integer(2495);
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) integer0;
      objectArray0[1] = (Object) multiKey0;
      MultiKey<Object> multiKey1 = new MultiKey<Object>(objectArray0, true);
      Object object0 = multiKey1.getKey(0);
      MultiKey<Object> multiKey2 = new MultiKey<Object>((Object) null, integer0, object0, "");
      multiKeyArray0[0] = multiKey2;
      Object object1 = new Object();
      MultiKey<Object> multiKey3 = new MultiKey<Object>(multiKey0, objectArray0[0], object1);
      multiKeyArray0[1] = multiKey3;
      MultiKey<Object> multiKey4 = new MultiKey<Object>(objectArray0, false);
      multiKeyArray0[2] = multiKey4;
      MultiKey<MultiKey<Object>> multiKey5 = new MultiKey<MultiKey<Object>>(multiKeyArray0);
      multiKey5.toString();
      multiKey5.toString();
      boolean boolean0 = multiKey2.equals(multiKey2);
      assertTrue(boolean0);
      assertFalse(multiKey2.equals((Object)multiKey4));
      
      Integer integer1 = new Integer(2495);
      MultiKey<Integer> multiKey6 = new MultiKey<Integer>(integer0, integer0, integer1, integer0);
      String string0 = multiKey6.toString();
      assertEquals("MultiKey[2495, 2495, 2495, 2495]", string0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>((String) null, (String) null);
      multiKey0.size();
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) multiKey0;
      objectArray0[1] = (Object) multiKey0;
      objectArray0[2] = (Object) null;
      objectArray0[3] = (Object) multiKey0;
      objectArray0[4] = (Object) null;
      MultiKey<Object> multiKey1 = new MultiKey<Object>(objectArray0);
      MultiKey<Object> multiKey2 = new MultiKey<Object>(objectArray0);
      boolean boolean0 = multiKey1.equals(multiKey2);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      MultiKey<Object>[] multiKeyArray0 = (MultiKey<Object>[]) Array.newInstance(MultiKey.class, 3);
      Object object0 = new Object();
      MultiKey<Object> multiKey0 = new MultiKey<Object>(object0, object0);
      multiKeyArray0[0] = multiKey0;
      MultiKey<Object> multiKey1 = new MultiKey<Object>(multiKey0, multiKey0, multiKey0, multiKey0);
      multiKeyArray0[1] = multiKey1;
      multiKey1.toString();
      Object object1 = new Object();
      MultiKey<Object> multiKey2 = new MultiKey<Object>(object1, object0);
      multiKey2.toString();
      multiKeyArray0[2] = multiKey2;
      MultiKey<MultiKey<Object>> multiKey3 = new MultiKey<MultiKey<Object>>(multiKeyArray0, true);
      multiKey3.toString();
      MultiKey<MultiKey<Integer>> multiKey4 = new MultiKey<MultiKey<Integer>>((MultiKey<Integer>) null, (MultiKey<Integer>) null, (MultiKey<Integer>) null);
      multiKey4.size();
      multiKey0.hashCode();
      multiKey2.hashCode();
      multiKey3.getKeys();
      String[] stringArray0 = new String[6];
      stringArray0[0] = "MultiKey[MultiKey[java.lang.Object@324bcfae, java.lang.Object@324bcfae], MultiKey[MultiKey[java.lang.Object@324bcfae, java.lang.Object@324bcfae], MultiKey[java.lang.Object@324bcfae, java.lang.Object@324bcfae], MultiKey[java.lang.Object@324bcfae, java.lang.Object@324bcfae], MultiKey[java.lang.Object@324bcfae, java.lang.Object@324bcfae]], MultiKey[java.lang.Object@525b8190, java.lang.Object@324bcfae]]";
      stringArray0[1] = "MultiKey[java.lang.Object@525b8190, java.lang.Object@324bcfae]";
      stringArray0[2] = "";
      stringArray0[3] = "MultiKey[MultiKey[java.lang.Object@324bcfae, java.lang.Object@324bcfae], MultiKey[MultiKey[java.lang.Object@324bcfae, java.lang.Object@324bcfae], MultiKey[java.lang.Object@324bcfae, java.lang.Object@324bcfae], MultiKey[java.lang.Object@324bcfae, java.lang.Object@324bcfae], MultiKey[java.lang.Object@324bcfae, java.lang.Object@324bcfae]], MultiKey[java.lang.Object@525b8190, java.lang.Object@324bcfae]]";
      stringArray0[4] = "MultiKey[MultiKey[java.lang.Object@324bcfae, java.lang.Object@324bcfae], MultiKey[MultiKey[java.lang.Object@324bcfae, java.lang.Object@324bcfae], MultiKey[java.lang.Object@324bcfae, java.lang.Object@324bcfae], MultiKey[java.lang.Object@324bcfae, java.lang.Object@324bcfae], MultiKey[java.lang.Object@324bcfae, java.lang.Object@324bcfae]], MultiKey[java.lang.Object@525b8190, java.lang.Object@324bcfae]]";
      stringArray0[5] = "MultiKey[MultiKey[java.lang.Object@324bcfae, java.lang.Object@324bcfae], MultiKey[MultiKey[java.lang.Object@324bcfae, java.lang.Object@324bcfae], MultiKey[java.lang.Object@324bcfae, java.lang.Object@324bcfae], MultiKey[java.lang.Object@324bcfae, java.lang.Object@324bcfae], MultiKey[java.lang.Object@324bcfae, java.lang.Object@324bcfae]], MultiKey[java.lang.Object@525b8190, java.lang.Object@324bcfae]]";
      MultiKey<String> multiKey5 = new MultiKey<String>(stringArray0);
      boolean boolean0 = multiKey5.equals(multiKey2);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Object object0 = new Object();
      MultiKey<Object> multiKey0 = new MultiKey<Object>(object0, object0, (Object) null, (Object) null);
      multiKey0.toString();
      multiKey0.getKey(0);
      multiKey0.toString();
      MultiKey<String> multiKey1 = new MultiKey<String>((String) null, "vU n-(@:1zyUv`AYD$");
      multiKey1.toString();
      multiKey1.toString();
      String string0 = multiKey1.getKey(0);
      assertNull(string0);
      
      String string1 = multiKey1.toString();
      assertEquals("MultiKey[null, vU n-(@:1zyUv`AYD$]", string1);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      MultiKey<Object> multiKey0 = null;
//      try {
        multiKey0 = new MultiKey<Object>((Object[]) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // The array of keys must not be null
//         //
//         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
//      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Object object0 = new Object();
      MultiKey<Object> multiKey0 = new MultiKey<Object>(object0, object0);
      MultiKey<String> multiKey1 = new MultiKey<String>("", "", "", "mM16/0^P/xk", "J");
      multiKey1.toString();
      MultiKey<MultiKey<String>> multiKey2 = new MultiKey<MultiKey<String>>(multiKey1, multiKey1, multiKey1);
      multiKey2.toString();
      multiKey2.getKeys();
      multiKey0.getKey(0);
      int int0 = multiKey0.size();
      int int1 = multiKey0.hashCode();
      assertFalse(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("*s>..~", "M5!z\"Gv*m", "M5!z\"Gv*m");
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) "*s>..~";
      objectArray0[1] = (Object) "M5!z\"Gv*m";
      objectArray0[2] = (Object) multiKey0;
      objectArray0[3] = (Object) "M5!z\"Gv*m";
      objectArray0[4] = (Object) "M5!z\"Gv*m";
      MultiKey<Object> multiKey1 = new MultiKey<Object>(objectArray0);
      String string0 = multiKey1.toString();
      assertEquals("MultiKey[*s>..~, M5!z\"Gv*m, MultiKey[*s>..~, M5!z\"Gv*m, M5!z\"Gv*m], M5!z\"Gv*m, M5!z\"Gv*m]", string0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Object[] objectArray0 = new Object[6];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      Object object2 = new Object();
      objectArray0[2] = object2;
      MultiKey<String>[] multiKeyArray0 = (MultiKey<String>[]) Array.newInstance(MultiKey.class, 1);
      MultiKey<String> multiKey0 = new MultiKey<String>("", "", "2*<&7", "2*<&7");
      multiKeyArray0[0] = multiKey0;
      MultiKey<MultiKey<String>> multiKey1 = new MultiKey<MultiKey<String>>(multiKeyArray0, false);
      int int0 = 376;
      // Undeclared exception!
//      try { 
        multiKey1.getKey(376);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 376
//         //
//         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
//      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      MultiKey<MultiKey<Integer>> multiKey0 = new MultiKey<MultiKey<Integer>>((MultiKey<Integer>) null, (MultiKey<Integer>) null, (MultiKey<Integer>) null, (MultiKey<Integer>) null);
      Object[] objectArray0 = new Object[3];
      Object object0 = new Object();
      objectArray0[0] = object0;
      objectArray0[1] = (Object) null;
      objectArray0[2] = (Object) null;
      MultiKey<Object> multiKey1 = new MultiKey<Object>(objectArray0);
      MultiKey<MultiKey<Object>> multiKey2 = new MultiKey<MultiKey<Object>>((MultiKey<Object>) null, multiKey1, (MultiKey<Object>) null, multiKey1, (MultiKey<Object>) null);
      multiKey2.hashCode();
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Integer integer0 = new Integer(0);
      Integer integer1 = new Integer(0);
      Integer integer2 = new Integer(0);
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integer0, integer1, integer2, integer0);
      String[] stringArray0 = new String[7];
      stringArray0[0] = "";
      stringArray0[1] = "The array of keys must not be null";
      stringArray0[2] = "";
      stringArray0[3] = "";
      stringArray0[4] = "";
      stringArray0[5] = "]&uG";
      stringArray0[6] = "X\"84@gBDwG";
      MultiKey<String> multiKey1 = new MultiKey<String>(stringArray0, true);
      int int0 = multiKey1.size();
      assertEquals(7, int0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Integer integer0 = new Integer(2409);
      Integer integer1 = new Integer(2409);
      int int0 = 1525;
      Integer integer2 = new Integer(1525);
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integer0, integer1, integer1, integer2, integer2);
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) integer0;
      objectArray0[1] = (Object) "MultiKey[2409, 2409, 2409, 1525, 1525]";
      multiKey0.toString();
      MultiKey<Object> multiKey1 = new MultiKey<Object>(objectArray0, false);
      multiKey1.equals(integer0);
      multiKey1.toString();
      multiKey1.toString();
      MultiKey<String> multiKey2 = null;
//      try {
        multiKey2 = new MultiKey<String>((String[]) null, false);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // The array of keys must not be null
//         //
//         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
//      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Object[] objectArray0 = new Object[5];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      Object object2 = new Object();
      objectArray0[2] = object2;
      Object object3 = new Object();
      objectArray0[3] = object3;
      Object object4 = new Object();
      objectArray0[4] = object4;
      MultiKey<Object> multiKey0 = new MultiKey<Object>(objectArray0, true);
      multiKey0.toString();
      multiKey0.equals(object1);
      Integer integer0 = new Integer(1);
      Integer integer1 = new Integer(0);
      MultiKey<Integer> multiKey1 = new MultiKey<Integer>(integer0, integer1);
      MultiKey<String> multiKey2 = new MultiKey<String>("MultiKey", "MultiKey[java.lang.Object@149d5db1, java.lang.Object@4c393f1f, java.lang.Object@25d1da30, java.lang.Object@65d76c69, java.lang.Object@1bd9c5b7]", "XpExJ2O7", "cIexC'+[(mi2VT");
      multiKey2.getKey(1);
      boolean boolean0 = multiKey1.equals("MultiKey[java.lang.Object@149d5db1, java.lang.Object@4c393f1f, java.lang.Object@25d1da30, java.lang.Object@65d76c69, java.lang.Object@1bd9c5b7]");
      assertFalse(boolean0);
  }
}
