/*
 * This file was automatically generated by EvoSuite
 * Wed Oct 20 12:25:15 GMT 2021
 */

package org.apache.commons.collections4.keyvalue;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.collections4.keyvalue.MultiKey;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class MultiKey_ESTest extends MultiKey_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      MultiKey<Object> multiKey0 = new MultiKey<Object>("", "");
      multiKey0.toString();
      String[] stringArray0 = new String[0];
      MultiKey<String> multiKey1 = new MultiKey<String>(stringArray0, true);
      multiKey1.toString();
      multiKey1.getKeys();
      MultiKey<MultiKey<String>> multiKey2 = new MultiKey<MultiKey<String>>(multiKey1, multiKey1, multiKey1, multiKey1);
      int int0 = (-3162);
      // Undeclared exception!
//      try { 
        multiKey2.getKey((-3162));
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // -3162
//         //
//         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
//      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Integer integer0 = new Integer(0);
      MultiKey<String> multiKey0 = new MultiKey<String>("The array of keys must not be null", "The array of keys must not be null", "The array of keys must not be null");
      Object object0 = new Object();
      MultiKey<Object> multiKey1 = new MultiKey<Object>(multiKey0, multiKey0, integer0, object0);
      multiKey1.toString();
      MultiKey<String> multiKey2 = new MultiKey<String>("The array of keys must not be null", "");
      multiKey0.toString();
      multiKey2.toString();
      multiKey0.toString();
      multiKey0.getKey(2);
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) multiKey2;
      objectArray0[2] = (Object) multiKey1;
      objectArray0[3] = (Object) "The array of keys must not be null";
      String string0 = multiKey2.toString();
      assertEquals("MultiKey[The array of keys must not be null, ]", string0);
      
      objectArray0[4] = (Object) "";
      objectArray0[5] = (Object) "MultiKey[The array of keys must not be null, The array of keys must not be null, The array of keys must not be null]";
      MultiKey<Object> multiKey3 = new MultiKey<Object>(objectArray0, true);
      Object object1 = multiKey3.getKey(0);
      boolean boolean0 = multiKey2.equals(object1);
      assertTrue(boolean0);
      
      multiKey0.getKey(2);
      assertFalse(multiKey0.equals((Object)multiKey2));
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("org.apache.commons.collections4.keyvalue.MultiKey", "MLc!ccDUO]VB*C1>[", "Q)", "org.apache.commons.collections4.keyvalue.MultiKey", "MLc!ccDUO]VB*C1>[");
      Object[] objectArray0 = new Object[0];
      MultiKey<Object> multiKey1 = new MultiKey<Object>(objectArray0, false);
      multiKey1.toString();
      int int0 = multiKey1.size();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Object[] objectArray0 = new Object[8];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      Object object2 = new Object();
      MultiKey<Object> multiKey0 = new MultiKey<Object>((Object) null, (Object) null, object1, object2);
      multiKey0.getKey(1);
      objectArray0[1] = null;
      multiKey0.getKey(0);
      objectArray0[2] = null;
      MultiKey<String> multiKey1 = new MultiKey<String>((String) null, (String) null, "");
      MultiKey<MultiKey<String>> multiKey2 = new MultiKey<MultiKey<String>>(multiKey1, multiKey1, multiKey1, multiKey1, multiKey1);
      // Undeclared exception!
//      try { 
        multiKey2.getKey(504);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 504
//         //
//         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
//      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Integer integer0 = new Integer(3134);
      Integer integer1 = new Integer(0);
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integer0, integer1);
      multiKey0.toString();
      MultiKey<String> multiKey1 = null;
//      try {
        multiKey1 = new MultiKey<String>((String[]) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // The array of keys must not be null
//         //
//         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
//      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      String[] stringArray0 = null;
      MultiKey<String> multiKey0 = null;
//      try {
        multiKey0 = new MultiKey<String>((String[]) null, true);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // The array of keys must not be null
//         //
//         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
//      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Integer integer0 = new Integer(4);
      Integer integer1 = new Integer(4);
      Integer integer2 = new Integer((-1));
      Integer integer3 = new Integer(0);
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integer0, integer0, integer1, integer2, integer3);
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) integer0;
      MultiKey<Object> multiKey1 = new MultiKey<Object>(objectArray0);
      multiKey1.toString();
      multiKey1.toString();
      multiKey1.toString();
      multiKey1.getKeys();
      String string0 = multiKey1.toString();
      assertEquals("MultiKey[4]", string0);
      
      MultiKey<String> multiKey2 = new MultiKey<String>((String) null, "SE", "*ROnlN?tHH5NN<6Q{W\"", "vvqkz^4[cK&}aECG-0", (String) null);
      multiKey2.hashCode();
      MultiKey<MultiKey<String>> multiKey3 = new MultiKey<MultiKey<String>>(multiKey2, multiKey2, multiKey2);
      multiKey3.equals("MultiKey[4, 4, 4, -1, 0]");
      boolean boolean0 = multiKey0.equals("*ROnlN?tHH5NN<6Q{W\"");
      assertFalse(boolean0);
      
      boolean boolean1 = multiKey0.equals(multiKey1);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("", "9k*.k");
      Object object0 = new Object();
      String[] stringArray0 = new String[8];
      stringArray0[0] = "";
      stringArray0[1] = "JLRk^X?H";
      stringArray0[2] = "9k*.k";
      stringArray0[3] = "org.apache.commons.collections4.keyvalue.MultiKey";
      stringArray0[4] = "9k*.k";
      stringArray0[5] = "";
      stringArray0[6] = "";
      stringArray0[7] = "";
      MultiKey<String> multiKey1 = new MultiKey<String>(stringArray0);
      MultiKey<Object> multiKey2 = new MultiKey<Object>(multiKey0, multiKey0, object0, multiKey1, object0);
      assertEquals(5, multiKey2.size());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("d^sJC`[8654+l%", "d^sJC`[8654+l%", "'>9[+ZC");
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.hashCode();
      multiKey0.size();
      multiKey0.hashCode();
      Object[] objectArray0 = new Object[6];
      MultiKey<Object> multiKey1 = new MultiKey<Object>("d^sJC`[8654+l%", "'>9[+ZC");
      // Undeclared exception!
//      try { 
        multiKey1.getKey(3);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 3
//         //
//         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
//      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("", "?$x[D", "", "", "");
      multiKey0.toString();
      multiKey0.getKey(0);
      MultiKey<String> multiKey1 = new MultiKey<String>("", "", "", "");
      multiKey0.toString();
      multiKey1.toString();
      multiKey1.toString();
      multiKey1.toString();
      MultiKey<Object> multiKey2 = new MultiKey<Object>(multiKey0, "", (Object) null, "", multiKey1);
      multiKey1.toString();
      multiKey0.toString();
      multiKey2.toString();
      multiKey2.toString();
      multiKey1.toString();
      multiKey2.toString();
      multiKey2.hashCode();
      multiKey2.equals("");
      Integer integer0 = new Integer(472);
      Integer integer1 = new Integer(0);
      MultiKey<Integer> multiKey3 = new MultiKey<Integer>(integer0, integer0, integer1, integer1);
      multiKey3.hashCode();
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Object[] objectArray0 = new Object[5];
      MultiKey<String> multiKey0 = new MultiKey<String>("wybK)=IlBWlL08,Q", "wybK)=IlBWlL08,Q", "wybK)=IlBWlL08,Q", "wybK)=IlBWlL08,Q");
      int int0 = 0;
      multiKey0.getKey(0);
      objectArray0[0] = (Object) "wybK)=IlBWlL08,Q";
      // Undeclared exception!
//      try { 
        multiKey0.getKey((-1168));
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // -1168
//         //
//         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
//      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("lZq^Z^x.SVIC,9", "lZq^Z^x.SVIC,9", "g.p$r.>pbqDj3Z");
      Integer[] integerArray0 = new Integer[8];
      Integer integer0 = new Integer((-311));
      integerArray0[0] = integer0;
      Integer integer1 = new Integer((-2263));
      integerArray0[1] = integer1;
      int int0 = (-1);
      Integer integer2 = new Integer((-1));
      integerArray0[2] = integer2;
      Integer integer3 = new Integer((-1));
      integerArray0[3] = integer3;
      Integer integer4 = new Integer(0);
      integerArray0[4] = integer4;
      Integer integer5 = new Integer(0);
      integerArray0[5] = integer5;
      Integer integer6 = new Integer(int0);
      integerArray0[6] = integer6;
      Integer integer7 = new Integer(int0);
      integerArray0[7] = integer7;
      MultiKey<Integer> multiKey1 = new MultiKey<Integer>(integerArray0, true);
      // Undeclared exception!
//      try { 
        multiKey1.getKey(int0);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // -1
//         //
//         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
//      }
  }
}
