/*
 * This file was automatically generated by EvoSuite
 * Wed Oct 13 20:48:43 GMT 2021
 */

package org.apache.commons.collections4.keyvalue;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.lang.reflect.Array;
import org.apache.commons.collections4.keyvalue.MultiKey;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class MultiKey_ESTest extends MultiKey_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Integer integer0 = new Integer(3);
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integer0, integer0);
      String[] stringArray0 = new String[0];
      MultiKey<String> multiKey1 = new MultiKey<String>(stringArray0, false);
      int int0 = multiKey1.size();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Object[] objectArray0 = new Object[5];
      MultiKey<Integer>[] multiKeyArray0 = (MultiKey<Integer>[]) Array.newInstance(MultiKey.class, 9);
      Integer integer0 = new Integer((-146));
      Integer integer1 = new Integer(3);
      Integer integer2 = new Integer(3);
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integer1, integer0, integer1, integer2);
      multiKeyArray0[1] = multiKey0;
      Integer integer3 = new Integer((-146));
      MultiKey<Integer> multiKey1 = new MultiKey<Integer>(integer3, integer2);
      multiKeyArray0[2] = multiKey1;
      Integer integer4 = new Integer(3);
      Integer integer5 = new Integer(3595);
      Integer integer6 = new Integer((-146));
      Integer integer7 = new Integer(3);
      Integer integer8 = new Integer(3595);
      Integer integer9 = new Integer((-146));
      MultiKey<Integer> multiKey2 = new MultiKey<Integer>(integer9, (Integer) null, integer5);
      multiKeyArray0[5] = multiKey2;
      Integer integer10 = new Integer(3);
      MultiKey<Integer> multiKey3 = new MultiKey<Integer>(integer9, integer10);
      multiKeyArray0[6] = multiKey3;
      Integer integer11 = new Integer(1);
      MultiKey<Integer> multiKey4 = new MultiKey<Integer>(integer11, integer10, integer8, integer9);
      multiKeyArray0[7] = multiKey4;
      Integer integer12 = new Integer(3595);
      Integer integer13 = new Integer((-1));
      MultiKey<Integer> multiKey5 = new MultiKey<Integer>(integer12, integer13);
      multiKeyArray0[8] = multiKey5;
      MultiKey<MultiKey<Integer>> multiKey6 = new MultiKey<MultiKey<Integer>>(multiKeyArray0, false);
      multiKey6.getKey(0);
      objectArray0[0] = (Object) null;
      MultiKey<Object> multiKey7 = new MultiKey<Object>(multiKey0, multiKey2, multiKey1, integer4);
      MultiKey<Object> multiKey8 = new MultiKey<Object>(multiKey7, multiKey0);
      Object object0 = multiKey8.getKey(1);
      objectArray0[1] = object0;
      Object object1 = new Object();
      objectArray0[2] = object1;
      String[] stringArray0 = new String[3];
      stringArray0[1] = "";
      stringArray0[2] = "H!ePb}";
      MultiKey<String> multiKey9 = new MultiKey<String>(stringArray0, true);
      // Undeclared exception!
//      try { 
        multiKey9.getKey(3260);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 3260
//         //
//         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
//      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("hG4wx48o", "?q<'/~P.L");
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) "hG4wx48o";
      objectArray0[1] = (Object) "?q<'/~P.L";
      objectArray0[2] = (Object) multiKey0;
      objectArray0[3] = (Object) "hG4wx48o";
      objectArray0[4] = (Object) "hG4wx48o";
      MultiKey<Object> multiKey1 = new MultiKey<Object>(objectArray0, true);
      multiKey1.toString();
      String string0 = multiKey1.toString();
      assertEquals("MultiKey[hG4wx48o, ?q<'/~P.L, MultiKey[hG4wx48o, ?q<'/~P.L], hG4wx48o, hG4wx48o]", string0);
      
      boolean boolean0 = multiKey0.equals(objectArray0[2]);
      Object object0 = new Object();
      Integer integer0 = new Integer(1);
      MultiKey<Object> multiKey2 = new MultiKey<Object>("hG4wx48o", integer0, "MultiKey[hG4wx48o, ?q<'/~P.L, MultiKey[hG4wx48o, ?q<'/~P.L], hG4wx48o, hG4wx48o]", "MultiKey[hG4wx48o, ?q<'/~P.L, MultiKey[hG4wx48o, ?q<'/~P.L], hG4wx48o, hG4wx48o]");
      multiKey2.size();
      Integer integer1 = new Integer(1);
      Integer integer2 = new Integer(4);
      Integer integer3 = new Integer((-1935));
      Integer integer4 = new Integer(5);
      MultiKey<Integer> multiKey3 = new MultiKey<Integer>(integer2, integer3, integer4);
      MultiKey<String> multiKey4 = new MultiKey<String>("?q<'/~P.L", "?q<'/~P.L", (String) null, "?q<'/~P.L", "");
      Integer integer5 = new Integer((-1254));
      boolean boolean1 = multiKey3.equals(integer5);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Object object0 = new Object();
      Integer integer0 = new Integer(0);
      Object object1 = new Object();
      MultiKey<Object> multiKey0 = new MultiKey<Object>("z}4.]*&b", integer0, "z}4.]*&b", object1);
      multiKey0.toString();
      MultiKey<Object> multiKey1 = new MultiKey<Object>(object0, object0, "z}4.]*&b", multiKey0);
      multiKey1.size();
      String[] stringArray0 = new String[0];
      MultiKey<String> multiKey2 = new MultiKey<String>(stringArray0);
      MultiKey<String> multiKey3 = new MultiKey<String>(stringArray0, false);
      MultiKey<MultiKey<String>> multiKey4 = new MultiKey<MultiKey<String>>((MultiKey<String>) null, (MultiKey<String>) null, multiKey2, multiKey3);
      boolean boolean0 = multiKey4.equals(multiKey0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("", "", "", "MultiKey");
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      Integer integer0 = new Integer(3472);
      Integer integer1 = new Integer(3472);
      MultiKey<Integer> multiKey1 = new MultiKey<Integer>(integer0, integer1);
      multiKey1.toString();
      multiKey1.getKey(0);
      Object[] objectArray0 = new Object[0];
      MultiKey<Object> multiKey2 = new MultiKey<Object>(objectArray0);
      multiKey2.toString();
      multiKey2.toString();
      multiKey2.toString();
      multiKey2.getKeys();
      multiKey1.hashCode();
      multiKey1.toString();
      multiKey2.getKeys();
      MultiKey<MultiKey<Integer>> multiKey3 = new MultiKey<MultiKey<Integer>>(multiKey1, multiKey1);
      multiKey3.toString();
      multiKey0.toString();
      String string0 = multiKey2.toString();
      assertEquals("MultiKey[]", string0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      String string0 = "";
      Object object0 = new Object();
      boolean boolean0 = true;
      MultiKey<String> multiKey0 = null;
//      try {
        multiKey0 = new MultiKey<String>((String[]) null, true);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // The array of keys must not be null
//         //
//         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
//      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Integer integer0 = new Integer(3221);
      Integer integer1 = new Integer(0);
      Integer integer2 = new Integer(0);
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integer0, integer0, integer0, integer1, integer2);
      multiKey0.equals(integer1);
      String[] stringArray0 = new String[3];
      stringArray0[0] = "";
      stringArray0[1] = "l";
      stringArray0[2] = "c.,VWst";
      MultiKey<String> multiKey1 = new MultiKey<String>(stringArray0, false);
      multiKey1.toString();
      String[] stringArray1 = multiKey1.getKeys();
      assertFalse(stringArray1.equals((Object)stringArray0));
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      MultiKey<Object> multiKey0 = null;
//      try {
        multiKey0 = new MultiKey<Object>((Object[]) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // The array of keys must not be null
//         //
//         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
//      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("Bu?O;p<<!y :B2wc", "d'v#OAqWy4iE1", "Bu?O;p<<!y :B2wc", "Bu?O;p<<!y :B2wc", "d'v#OAqWy4iE1");
      MultiKey<Object> multiKey1 = new MultiKey<Object>(multiKey0, (Object) null, multiKey0);
      boolean boolean0 = multiKey1.equals((Object) null);
      assertFalse(boolean0);
      
      multiKey1.getKeys();
      Integer[] integerArray0 = new Integer[9];
      int int0 = 1;
      Integer integer0 = new Integer(1);
      integerArray0[0] = integer0;
      Integer integer1 = new Integer(1277);
      integerArray0[1] = integer1;
      Integer integer2 = new Integer(1);
      integerArray0[2] = integer2;
      int int1 = 3;
      Integer integer3 = new Integer(3);
      integerArray0[3] = integer3;
      Integer integer4 = new Integer(int0);
      integerArray0[4] = integer4;
      Integer integer5 = new Integer(int1);
      integerArray0[5] = integer5;
      Integer integer6 = new Integer(3);
      integerArray0[6] = integer6;
      Integer integer7 = new Integer(0);
      integerArray0[7] = integer7;
      Integer integer8 = new Integer(0);
      integerArray0[8] = integer8;
      MultiKey<Integer> multiKey2 = new MultiKey<Integer>(integerArray0);
      String string0 = multiKey2.toString();
      assertEquals("MultiKey[1, 1277, 1, 3, 1, 3, 3, 0, 0]", string0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Integer integer0 = new Integer(1);
      MultiKey<Object> multiKey0 = new MultiKey<Object>(integer0, (Object) null, integer0);
      Object[] objectArray0 = multiKey0.getKeys();
      assertEquals(3, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Integer[] integerArray0 = new Integer[2];
      Integer integer0 = new Integer(0);
      integerArray0[0] = integer0;
      Integer integer1 = new Integer(0);
      integerArray0[1] = integer1;
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integerArray0);
      multiKey0.toString();
      multiKey0.hashCode();
      multiKey0.size();
      Integer integer2 = new Integer(0);
      MultiKey<Object> multiKey1 = new MultiKey<Object>(integer0, integer2, integer1, integer0);
      multiKey1.toString();
      multiKey1.size();
      MultiKey<String> multiKey2 = new MultiKey<String>((String) null, "", "v%R_;X*Unfp", "");
      // Undeclared exception!
//      try { 
        multiKey2.getKey(3059);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 3059
//         //
//         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
//      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("~)wZN>#;v`!LJ&/\"/T", "~)wZN>#;v`!LJ&/\"/T", "~)wZN>#;v`!LJ&/\"/T", "~)wZN>#;v`!LJ&/\"/T", "~)wZN>#;v`!LJ&/\"/T");
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.getKey(0);
      multiKey0.size();
      Object object0 = new Object();
      MultiKey<Object> multiKey1 = new MultiKey<Object>("MultiKey[~)wZN>#;v`!LJ&/\"/T, ~)wZN>#;v`!LJ&/\"/T, ~)wZN>#;v`!LJ&/\"/T, ~)wZN>#;v`!LJ&/\"/T, ~)wZN>#;v`!LJ&/\"/T]", "MultiKey[~)wZN>#;v`!LJ&/\"/T, ~)wZN>#;v`!LJ&/\"/T, ~)wZN>#;v`!LJ&/\"/T, ~)wZN>#;v`!LJ&/\"/T, ~)wZN>#;v`!LJ&/\"/T]", "", object0, "MultiKey[~)wZN>#;v`!LJ&/\"/T, ~)wZN>#;v`!LJ&/\"/T, ~)wZN>#;v`!LJ&/\"/T, ~)wZN>#;v`!LJ&/\"/T, ~)wZN>#;v`!LJ&/\"/T]");
      // Undeclared exception!
//      try { 
        multiKey1.getKey(5);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 5
//         //
//         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
//      }
  }
}
