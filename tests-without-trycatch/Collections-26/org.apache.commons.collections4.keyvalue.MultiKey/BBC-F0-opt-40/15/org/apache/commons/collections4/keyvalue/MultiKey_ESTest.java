/*
 * This file was automatically generated by EvoSuite
 * Wed Oct 20 12:26:35 GMT 2021
 */

package org.apache.commons.collections4.keyvalue;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.collections4.keyvalue.MultiKey;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class MultiKey_ESTest extends MultiKey_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("+N", "}p~F5I6L,I!@75p", "+N");
      MultiKey<MultiKey<String>> multiKey1 = new MultiKey<MultiKey<String>>(multiKey0, multiKey0, multiKey0, multiKey0, multiKey0);
      Object object0 = multiKey1.getKey(0);
      boolean boolean0 = multiKey0.equals(object0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("\"vn", "\"vn", "\"vn", "\"vn");
      multiKey0.equals("\"vn");
      Integer[] integerArray0 = new Integer[0];
      MultiKey<Integer> multiKey1 = new MultiKey<Integer>(integerArray0, false);
      int int0 = multiKey1.size();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Object object0 = new Object();
      String[] stringArray0 = new String[7];
      stringArray0[0] = "\"vn";
      stringArray0[1] = "\"vn";
      stringArray0[2] = "\"vn";
      stringArray0[3] = "\"vn";
      stringArray0[4] = "\"vn";
      stringArray0[5] = "\"vn";
      stringArray0[6] = "\"vn";
      MultiKey<String> multiKey0 = new MultiKey<String>(stringArray0);
      MultiKey<String> multiKey1 = new MultiKey<String>(stringArray0, false);
      boolean boolean0 = multiKey0.equals(multiKey1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Integer integer0 = new Integer((-1325));
      MultiKey<String> multiKey0 = new MultiKey<String>("P", (String) null, "P", "");
      Integer integer1 = new Integer((-1325));
      Integer integer2 = new Integer(0);
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) multiKey0;
      objectArray0[1] = (Object) null;
      objectArray0[2] = (Object) "B{lG52";
      MultiKey<Object> multiKey1 = new MultiKey<Object>(objectArray0);
      MultiKey<Object> multiKey2 = new MultiKey<Object>("D?:@H,4~5k6v~obJO", integer0, multiKey1);
      String[] stringArray0 = new String[8];
      stringArray0[0] = null;
      stringArray0[1] = "P";
      stringArray0[2] = "";
      stringArray0[3] = null;
      stringArray0[4] = "";
      stringArray0[5] = "oU!";
      stringArray0[6] = "oU!";
      stringArray0[7] = "P";
      MultiKey<String> multiKey3 = new MultiKey<String>(stringArray0, true);
      multiKey3.getKey(0);
      MultiKey<Object> multiKey4 = new MultiKey<Object>((Object) null, "oU!", objectArray0[0]);
      MultiKey<Object> multiKey5 = new MultiKey<Object>(integer2, multiKey2, (Object) null, multiKey4);
      assertEquals(4, multiKey5.size());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      MultiKey<MultiKey<Object>> multiKey0 = null;
//      try {
        multiKey0 = new MultiKey<MultiKey<Object>>((MultiKey<Object>[]) null, false);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // The array of keys must not be null
//         //
//         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
//      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      MultiKey<Object> multiKey0 = null;
//      try {
        multiKey0 = new MultiKey<Object>((Object[]) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // The array of keys must not be null
//         //
//         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
//      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("", "@mD2StD,", "");
      multiKey0.toString();
      multiKey0.toString();
      Integer[] integerArray0 = new Integer[0];
      MultiKey<Integer> multiKey1 = new MultiKey<Integer>(integerArray0, false);
      multiKey1.getKeys();
      Object object0 = new Object();
      MultiKey<Object> multiKey2 = new MultiKey<Object>(multiKey0, object0);
      multiKey2.hashCode();
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      String[] stringArray0 = new String[8];
      stringArray0[0] = "d1^Pw:";
      stringArray0[1] = "";
      stringArray0[2] = "t=#Jm";
      stringArray0[3] = "";
      stringArray0[4] = "";
      stringArray0[5] = "";
      stringArray0[6] = "P|2.;asH-/i1";
      stringArray0[7] = "OP&Gtv+t=~SAhjS'Fg";
      MultiKey<String> multiKey0 = new MultiKey<String>(stringArray0);
      Integer integer0 = new Integer((-3264));
      Object object0 = new Object();
      MultiKey<Object> multiKey1 = new MultiKey<Object>(integer0, "!,]Rlm$", object0, "OP&Gtv+t=~SAhjS'Fg", "P|2.;asH-/i1");
      multiKey1.toString();
      boolean boolean0 = multiKey0.equals(multiKey1);
      assertFalse(boolean0);
      
      Integer integer1 = new Integer(0);
      Integer integer2 = new Integer(2429);
      multiKey0.toString();
      Integer integer3 = new Integer(510);
      Integer integer4 = new Integer(1435);
      MultiKey<Integer> multiKey2 = new MultiKey<Integer>(integer1, integer2, integer3, integer4, integer2);
      String string0 = multiKey2.toString();
      assertEquals("MultiKey[0, 2429, 510, 1435, 2429]", string0);
      
      Object object1 = multiKey2.getKey(0);
      assertEquals(0, object1);
      
      boolean boolean1 = multiKey0.equals(object1);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Integer integer0 = new Integer((-1));
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integer0, integer0);
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) integer0;
      objectArray0[1] = (Object) integer0;
      objectArray0[2] = (Object) integer0;
      MultiKey<Object> multiKey1 = new MultiKey<Object>(objectArray0, false);
      multiKey1.toString();
      int int0 = multiKey1.size();
      multiKey1.hashCode();
      MultiKey<String> multiKey2 = new MultiKey<String>("", "Rjz", "", "Rjz", "");
      int int1 = multiKey2.size();
      assertFalse(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("n%*uK'l%6Q^D3$\"", (String) null, "n%*uK'l%6Q^D3$\"", "n%*uK'l%6Q^D3$\"", "# uss0\"p>[x");
      multiKey0.toString();
      multiKey0.toString();
      String string0 = multiKey0.toString();
      assertEquals("MultiKey[n%*uK'l%6Q^D3$\", null, n%*uK'l%6Q^D3$\", n%*uK'l%6Q^D3$\", # uss0\"p>[x]", string0);
      
      multiKey0.hashCode();
      Integer integer0 = new Integer(0);
      Integer integer1 = new Integer(0);
      Integer integer2 = new Integer(0);
      Integer integer3 = new Integer(0);
      MultiKey<Integer> multiKey1 = new MultiKey<Integer>(integer0, integer0, integer1, integer2, integer3);
      Integer integer4 = multiKey1.getKey(0);
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) multiKey0;
      objectArray0[1] = (Object) multiKey0;
      objectArray0[2] = (Object) integer4;
      MultiKey<Object> multiKey2 = new MultiKey<Object>(objectArray0, false);
      boolean boolean0 = multiKey2.equals("0");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Integer integer0 = new Integer((-51));
      Integer integer1 = new Integer(0);
      MultiKey<Object> multiKey0 = new MultiKey<Object>(integer1, "");
      multiKey0.getKey(0);
      Integer integer2 = new Integer((-1637));
      Integer integer3 = new Integer(888);
      MultiKey<Integer> multiKey1 = new MultiKey<Integer>(integer2, integer2, integer2, integer3);
      MultiKey<MultiKey<Integer>> multiKey2 = new MultiKey<MultiKey<Integer>>(multiKey1, multiKey1, multiKey1);
      // Undeclared exception!
//      try { 
        multiKey2.getKey((-1637));
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // -1637
//         //
//         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
//      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Object object0 = new Object();
      Object object1 = new Object();
      MultiKey<Object> multiKey0 = new MultiKey<Object>(object0, object1, object0, object1, object0);
      multiKey0.equals(object0);
      MultiKey<MultiKey<Object>> multiKey1 = new MultiKey<MultiKey<Object>>(multiKey0, multiKey0, multiKey0);
      multiKey1.toString();
      int int0 = (-866);
      // Undeclared exception!
//      try { 
        multiKey1.getKey((-866));
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // -866
//         //
//         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
//      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("", "", "", "", "");
      Integer integer0 = new Integer((-1));
      MultiKey<Integer> multiKey1 = new MultiKey<Integer>(integer0, integer0, integer0);
      multiKey1.hashCode();
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Object object0 = new Object();
      MultiKey<Object> multiKey0 = new MultiKey<Object>(object0, ":$A^");
      multiKey0.toString();
      multiKey0.equals("9g!`#-e");
      Integer integer0 = new Integer(0);
      multiKey0.toString();
      MultiKey<Integer> multiKey1 = new MultiKey<Integer>(integer0, integer0);
      multiKey1.hashCode();
      String[] stringArray0 = new String[2];
      stringArray0[0] = "MultiKey[java.lang.Object@4fcd850d, :$A^]";
      stringArray0[1] = "MultiKey[java.lang.Object@4fcd850d, :$A^]";
      MultiKey<String> multiKey2 = new MultiKey<String>(stringArray0, false);
      multiKey2.toString();
      multiKey2.toString();
      multiKey0.toString();
      MultiKey<Object> multiKey3 = new MultiKey<Object>(multiKey1, "MultiKey[java.lang.Object@4fcd850d, :$A^]");
      MultiKey<MultiKey<Object>> multiKey4 = new MultiKey<MultiKey<Object>>(multiKey0, multiKey0, multiKey0, multiKey0, multiKey3);
      Object object1 = new Object();
      boolean boolean0 = multiKey4.equals(object1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      String[] stringArray0 = new String[9];
      stringArray0[0] = "EEEs#}#";
      stringArray0[1] = "";
      stringArray0[2] = "fcfvmL)ir+*/oUI\"";
      stringArray0[3] = "";
      stringArray0[4] = "";
      stringArray0[5] = "^lZL/R";
      stringArray0[6] = "@k'8B9sze`EH>4";
      stringArray0[7] = "org.apache.commons.collections4.keyvalue.MultiKey";
      stringArray0[8] = "PK";
      MultiKey<String> multiKey0 = new MultiKey<String>(stringArray0, false);
      MultiKey<Object> multiKey1 = new MultiKey<Object>(stringArray0);
      multiKey1.getKey(0);
      Object[] objectArray0 = multiKey1.getKeys();
      assertEquals(9, objectArray0.length);
  }
}
