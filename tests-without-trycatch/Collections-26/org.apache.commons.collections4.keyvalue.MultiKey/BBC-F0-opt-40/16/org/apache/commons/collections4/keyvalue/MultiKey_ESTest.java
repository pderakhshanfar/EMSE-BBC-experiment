/*
 * This file was automatically generated by EvoSuite
 * Wed Oct 20 12:28:03 GMT 2021
 */

package org.apache.commons.collections4.keyvalue;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.lang.reflect.Array;
import org.apache.commons.collections4.keyvalue.MultiKey;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class MultiKey_ESTest extends MultiKey_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      MultiKey<Object> multiKey0 = new MultiKey<Object>("", (Object) null);
      multiKey0.toString();
      MultiKey<Object> multiKey1 = new MultiKey<Object>("", multiKey0);
      boolean boolean0 = multiKey0.equals(multiKey0);
      assertTrue(boolean0);
      assertFalse(multiKey0.equals((Object)multiKey1));
      
      String[] stringArray0 = new String[1];
      stringArray0[0] = "";
      MultiKey<String> multiKey2 = new MultiKey<String>(stringArray0, true);
      String string0 = multiKey2.toString();
      assertEquals("MultiKey[]", string0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Integer integer0 = new Integer(0);
      Integer integer1 = new Integer(0);
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integer0, integer1, integer0, integer0, integer0);
      multiKey0.equals(integer1);
      Integer integer2 = new Integer(8);
      Integer integer3 = new Integer(8);
      Integer integer4 = new Integer(8);
      Integer integer5 = new Integer(8);
      MultiKey<Integer> multiKey1 = new MultiKey<Integer>(integer3, integer4, integer2, integer5);
      Integer integer6 = new Integer(3);
      Object[] objectArray0 = new Object[16];
      objectArray0[1] = (Object) integer6;
      objectArray0[2] = (Object) integer5;
      objectArray0[3] = (Object) multiKey1;
      objectArray0[4] = (Object) integer2;
      Object[] objectArray1 = new Object[0];
      MultiKey<Object> multiKey2 = new MultiKey<Object>(objectArray1, false);
      int int0 = multiKey2.size();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Integer integer0 = new Integer(0);
      Integer integer1 = new Integer(0);
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integer0, integer1, integer0, integer0, integer0);
      multiKey0.equals(integer1);
      multiKey0.toString();
      multiKey0.toString();
      String string0 = "*!oSe";
      MultiKey<String> multiKey1 = new MultiKey<String>("*!oSe", "*!oSe");
      multiKey1.toString();
      MultiKey<Integer> multiKey2 = new MultiKey<Integer>(integer1, integer0, integer1, integer1, integer1);
      multiKey0.equals(multiKey2);
      int int0 = 2898;
      Integer integer2 = new Integer(2898);
      MultiKey<Object> multiKey3 = null;
//      try {
        multiKey3 = new MultiKey<Object>((Object[]) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // The array of keys must not be null
//         //
//         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
//      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      MultiKey<Object>[] multiKeyArray0 = (MultiKey<Object>[]) Array.newInstance(MultiKey.class, 8);
      MultiKey<Object> multiKey0 = new MultiKey<Object>((Object) null, (Object) null);
      multiKeyArray0[0] = multiKey0;
      MultiKey<Object> multiKey1 = new MultiKey<Object>((Object) null, "09*tS9s6(/\"");
      multiKeyArray0[1] = multiKey1;
      MultiKey<Object> multiKey2 = new MultiKey<Object>("09*tS9s6(/\"", multiKey0);
      multiKeyArray0[2] = multiKey2;
      MultiKey<Object> multiKey3 = new MultiKey<Object>(multiKeyArray0);
      multiKeyArray0[3] = multiKey3;
      Integer integer0 = new Integer((-832));
      MultiKey<Object> multiKey4 = new MultiKey<Object>("09*tS9s6(/\"", "09*tS9s6(/\"", integer0);
      multiKeyArray0[4] = multiKey4;
      Integer integer1 = new Integer(1);
      Object object0 = new Object();
      Object object1 = new Object();
      MultiKey<Object> multiKey5 = new MultiKey<Object>(object1, (Object) null);
      MultiKey<Object> multiKey6 = new MultiKey<Object>(multiKey2, integer1, (Object) null, object0, multiKey5);
      multiKeyArray0[5] = multiKey6;
      MultiKey<Object> multiKey7 = new MultiKey<Object>(multiKeyArray0);
      multiKeyArray0[6] = multiKey7;
      MultiKey<Object> multiKey8 = new MultiKey<Object>(multiKey1, (Object) null, multiKey1, multiKey4, object0);
      multiKeyArray0[7] = multiKey8;
      MultiKey<MultiKey<Object>> multiKey9 = new MultiKey<MultiKey<Object>>(multiKeyArray0, false);
      boolean boolean0 = multiKey9.equals(multiKey3);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Integer integer0 = new Integer(0);
      Integer integer1 = new Integer(853);
      Integer integer2 = new Integer(3359);
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integer0, integer0, integer1, integer2);
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) integer2;
      objectArray0[1] = (Object) "MultiKey[0, 0, 853, 3359]";
      objectArray0[2] = (Object) integer0;
      objectArray0[3] = (Object) "MultiKey[0, 0, 853, 3359]";
      objectArray0[4] = (Object) "MultiKey[0, 0, 853, 3359]";
      objectArray0[5] = (Object) "MultiKey[0, 0, 853, 3359]";
      objectArray0[6] = (Object) "MultiKey[0, 0, 853, 3359]";
      objectArray0[7] = (Object) "MultiKey[0, 0, 853, 3359]";
      MultiKey<Object> multiKey1 = new MultiKey<Object>(objectArray0);
      multiKey1.getKey(0);
      Integer integer3 = new Integer(853);
      Integer integer4 = new Integer(0);
      MultiKey<Integer> multiKey2 = new MultiKey<Integer>(integer2, integer1, integer3, integer0, integer4);
      multiKey2.toString();
      multiKey0.equals(multiKey2);
      String[] stringArray0 = new String[4];
      stringArray0[0] = "MultiKey[0, 0, 853, 3359]";
      stringArray0[1] = "MultiKey[0, 0, 853, 3359]";
      stringArray0[2] = "-!86,8Jk`'NGQg*yu";
      stringArray0[3] = "";
      MultiKey<String> multiKey3 = new MultiKey<String>(stringArray0, false);
      int int0 = multiKey3.size();
      assertEquals(4, int0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      MultiKey<String> multiKey0 = null;
//      try {
        multiKey0 = new MultiKey<String>((String[]) null, true);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // The array of keys must not be null
//         //
//         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
//      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Object object0 = new Object();
      Integer integer0 = new Integer(0);
      MultiKey<Object> multiKey0 = new MultiKey<Object>((Object) null, object0, (Object) null, (Object) null, integer0);
      MultiKey<String> multiKey1 = new MultiKey<String>("", "");
      multiKey1.toString();
      multiKey1.toString();
      multiKey1.toString();
      multiKey1.toString();
      multiKey1.toString();
      multiKey1.hashCode();
      multiKey1.getKey(0);
      multiKey0.getKey(0);
      Integer integer1 = new Integer((-1977));
      MultiKey<Integer> multiKey2 = new MultiKey<Integer>(integer0, integer1, integer0);
      multiKey2.toString();
      multiKey2.toString();
      multiKey1.toString();
      multiKey2.toString();
      multiKey2.toString();
      multiKey0.getKeys();
      multiKey1.toString();
      multiKey2.equals("MultiKey[, ]");
      multiKey1.hashCode();
      MultiKey<MultiKey<String>> multiKey3 = new MultiKey<MultiKey<String>>(multiKey1, multiKey1, multiKey1, multiKey1, multiKey1);
      multiKey3.hashCode();
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Integer integer0 = new Integer(0);
      Integer integer1 = new Integer(0);
      Integer integer2 = new Integer(0);
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integer0, integer1, integer1, integer2);
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      MultiKey<Object> multiKey1 = new MultiKey<Object>(integer1, integer2, integer0);
      multiKey1.toString();
      multiKey1.toString();
      multiKey1.getKey(0);
      multiKey1.getKeys();
      String[] stringArray0 = new String[0];
      MultiKey<String> multiKey2 = new MultiKey<String>(stringArray0);
      multiKey2.toString();
      multiKey2.toString();
      multiKey2.getKeys();
      multiKey1.size();
      // Undeclared exception!
//      try { 
        multiKey2.getKey(0);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 0
//         //
//         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
//      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Object[] objectArray0 = new Object[6];
      Object object0 = new Object();
      objectArray0[0] = object0;
      String[] stringArray0 = new String[4];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "h}";
      stringArray0[3] = "&Uvd{o$pR2";
      MultiKey<String> multiKey0 = new MultiKey<String>(stringArray0, true);
      multiKey0.getKey(0);
      objectArray0[1] = (Object) "";
      Object object1 = new Object();
      objectArray0[2] = object1;
      MultiKey<Object> multiKey1 = new MultiKey<Object>(object0, "", "", (Object) null, object0);
      multiKey1.getKey(1);
      objectArray0[3] = (Object) "";
      Object object2 = new Object();
      objectArray0[4] = object2;
      Object object3 = new Object();
      objectArray0[5] = object3;
      MultiKey<Object> multiKey2 = new MultiKey<Object>(objectArray0);
      boolean boolean0 = multiKey2.equals("&Uvd{o$pR2");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      String string0 = "";
      MultiKey<String> multiKey0 = new MultiKey<String>("", "", "", "");
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.equals("");
      int int0 = (-1);
      Integer integer0 = new Integer((-1));
      MultiKey<Integer> multiKey1 = new MultiKey<Integer>(integer0, integer0);
      multiKey1.toString();
      int int1 = (-1823);
      // Undeclared exception!
//      try { 
        multiKey1.getKey((-1823));
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // -1823
//         //
//         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
//      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("usf7B/,", "usf7B/,", "usf7B/,", "usf7B/,");
      multiKey0.toString();
      multiKey0.size();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.hashCode();
      multiKey0.toString();
      MultiKey<MultiKey<String>> multiKey1 = new MultiKey<MultiKey<String>>(multiKey0, multiKey0);
      multiKey1.toString();
      multiKey1.toString();
      // Undeclared exception!
//      try { 
        multiKey1.getKey(4);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 4
//         //
//         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
//      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      MultiKey<Object> multiKey0 = new MultiKey<Object>(",0MPu,,4Y}q#", ",0MPu,,4Y}q#");
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.hashCode();
      multiKey0.toString();
      multiKey0.toString();
      int int0 = 1;
      multiKey0.getKey(1);
      MultiKey<MultiKey<Object>> multiKey1 = new MultiKey<MultiKey<Object>>(multiKey0, multiKey0, multiKey0);
      // Undeclared exception!
//      try { 
        multiKey1.getKey((-1));
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // -1
//         //
//         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
//      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Object[] objectArray0 = new Object[2];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      MultiKey<Object> multiKey0 = new MultiKey<Object>(objectArray0);
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.getKeys();
      MultiKey<String> multiKey1 = new MultiKey<String>("MultiKey[java.lang.Object@551b27d0, java.lang.Object@371b538f]", "MultiKey[java.lang.Object@551b27d0, java.lang.Object@371b538f]");
      multiKey1.hashCode();
      multiKey0.size();
      MultiKey<MultiKey<Object>> multiKey2 = new MultiKey<MultiKey<Object>>(multiKey0, multiKey0, multiKey0);
      int int0 = (-692);
      // Undeclared exception!
//      try { 
        multiKey2.getKey((-692));
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // -692
//         //
//         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
//      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Object[] objectArray0 = new Object[6];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Integer integer0 = new Integer(1993);
      Integer integer1 = new Integer(5);
      Integer integer2 = new Integer(5);
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integer0, integer1, integer2, integer1, integer0);
      int int0 = 0;
      Integer integer3 = multiKey0.getKey(0);
      objectArray0[1] = (Object) integer3;
      Object object1 = new Object();
      objectArray0[2] = object1;
      // Undeclared exception!
//      try { 
        multiKey0.getKey(1993);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 1993
//         //
//         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
//      }
  }
}
