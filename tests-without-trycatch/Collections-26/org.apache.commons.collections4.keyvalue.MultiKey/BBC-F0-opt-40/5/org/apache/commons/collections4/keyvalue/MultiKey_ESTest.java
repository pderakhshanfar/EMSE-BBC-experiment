/*
 * This file was automatically generated by EvoSuite
 * Wed Oct 13 20:48:44 GMT 2021
 */

package org.apache.commons.collections4.keyvalue;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.lang.reflect.Array;
import org.apache.commons.collections4.keyvalue.MultiKey;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class MultiKey_ESTest extends MultiKey_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      MultiKey<MultiKey<Integer>> multiKey0 = new MultiKey<MultiKey<Integer>>((MultiKey<Integer>) null, (MultiKey<Integer>) null, (MultiKey<Integer>) null);
      boolean boolean0 = multiKey0.equals((Object) null);
      MultiKey<String> multiKey1 = new MultiKey<String>("_", "_", "_");
      multiKey1.toString();
      multiKey1.equals((Object) null);
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) null;
      objectArray0[2] = (Object) null;
      objectArray0[3] = (Object) multiKey1;
      objectArray0[4] = (Object) multiKey1;
      Object object0 = new Object();
      MultiKey<Object> multiKey2 = new MultiKey<Object>(objectArray0[3], objectArray0[2], objectArray0[4], objectArray0[4], objectArray0[0]);
      Integer integer0 = new Integer(7);
      Object object1 = new Object();
      Object object2 = new Object();
      String string0 = multiKey1.toString();
      assertEquals("MultiKey[_, _, _]", string0);
      
      String[] stringArray0 = new String[9];
      stringArray0[0] = "_";
      stringArray0[1] = "MultiKey[_, _, _]";
      stringArray0[2] = null;
      stringArray0[3] = "MultiKey[_, _, _]";
      stringArray0[4] = "";
      stringArray0[5] = "_";
      stringArray0[3] = null;
      stringArray0[7] = null;
      MultiKey<String> multiKey3 = new MultiKey<String>(stringArray0);
      multiKey3.getKeys();
      boolean boolean1 = multiKey1.equals(objectArray0[4]);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("", "", "", "");
      multiKey0.toString();
      Object[] objectArray0 = new Object[0];
      MultiKey<Object> multiKey1 = new MultiKey<Object>(objectArray0);
      multiKey1.size();
      multiKey1.equals("");
      int int0 = multiKey1.size();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("", "");
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) multiKey0;
      objectArray0[1] = (Object) "";
      objectArray0[2] = (Object) multiKey0;
      objectArray0[3] = (Object) multiKey0;
      objectArray0[4] = (Object) multiKey0;
      objectArray0[5] = (Object) multiKey0;
      objectArray0[6] = (Object) multiKey0;
      objectArray0[7] = (Object) "";
      objectArray0[8] = (Object) multiKey0;
      MultiKey<Object> multiKey1 = new MultiKey<Object>(objectArray0, true);
      MultiKey<Object> multiKey2 = new MultiKey<Object>(objectArray0);
      boolean boolean0 = multiKey1.equals(multiKey2);
      assertTrue(boolean0);
      
      MultiKey<Object> multiKey3 = new MultiKey<Object>(objectArray0);
      MultiKey<MultiKey<Object>> multiKey4 = new MultiKey<MultiKey<Object>>(multiKey3, multiKey3, multiKey2);
      String string0 = multiKey4.toString();
      assertEquals("MultiKey[MultiKey[MultiKey[, ], , MultiKey[, ], MultiKey[, ], MultiKey[, ], MultiKey[, ], MultiKey[, ], , MultiKey[, ]], MultiKey[MultiKey[, ], , MultiKey[, ], MultiKey[, ], MultiKey[, ], MultiKey[, ], MultiKey[, ], , MultiKey[, ]], MultiKey[MultiKey[, ], , MultiKey[, ], MultiKey[, ], MultiKey[, ], MultiKey[, ], MultiKey[, ], , MultiKey[, ]]]", string0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      String[] stringArray0 = new String[0];
      MultiKey<String> multiKey0 = new MultiKey<String>(stringArray0);
      multiKey0.toString();
      MultiKey<MultiKey<String>> multiKey1 = new MultiKey<MultiKey<String>>(multiKey0, multiKey0, multiKey0);
      multiKey1.toString();
      Object object0 = new Object();
      Integer integer0 = new Integer((-1));
      MultiKey<Object> multiKey2 = new MultiKey<Object>(object0, "", "MultiKey[MultiKey[], MultiKey[], MultiKey[]]", integer0, "MultiKey[]");
      Integer integer1 = new Integer((-1));
      MultiKey<Integer> multiKey3 = new MultiKey<Integer>(integer0, integer1);
      MultiKey<Object> multiKey4 = new MultiKey<Object>("MultiKey[MultiKey[], MultiKey[], MultiKey[]]", multiKey2, multiKey2, multiKey3, integer1);
      multiKey4.equals(multiKey0);
      MultiKey<String> multiKey5 = new MultiKey<String>(stringArray0);
      multiKey5.toString();
      MultiKey<String> multiKey6 = new MultiKey<String>(stringArray0);
      String[] stringArray1 = multiKey6.getKeys();
      assertNotSame(stringArray0, stringArray1);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Object object0 = new Object();
      MultiKey<Object> multiKey0 = new MultiKey<Object>("8w+jPZ(ie/O%PQ&@J", object0);
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) "8w+jPZ(ie/O%PQ&@J";
      objectArray0[1] = (Object) multiKey0;
      MultiKey<Object> multiKey1 = new MultiKey<Object>(objectArray0);
      multiKey1.getKey(0);
      MultiKey<Object> multiKey2 = new MultiKey<Object>((Object) null, "8w+jPZ(ie/O%PQ&@J", objectArray0[1]);
      multiKey2.toString();
      multiKey2.toString();
      MultiKey<Object> multiKey3 = new MultiKey<Object>(multiKey0, "8w+jPZ(ie/O%PQ&@J", "", "8w+jPZ(ie/O%PQ&@J", multiKey2);
      multiKey3.toString();
      multiKey3.toString();
      String[] stringArray0 = new String[7];
      stringArray0[0] = "8w+jPZ(ie/O%PQ&@J";
      stringArray0[1] = "MultiKey[null, 8w+jPZ(ie/O%PQ&@J, MultiKey[8w+jPZ(ie/O%PQ&@J, java.lang.Object@23eb1e28]]";
      stringArray0[2] = "MultiKey[null, 8w+jPZ(ie/O%PQ&@J, MultiKey[8w+jPZ(ie/O%PQ&@J, java.lang.Object@23eb1e28]]";
      stringArray0[3] = "MultiKey[null, 8w+jPZ(ie/O%PQ&@J, MultiKey[8w+jPZ(ie/O%PQ&@J, java.lang.Object@23eb1e28]]";
      stringArray0[4] = "8w+jPZ(ie/O%PQ&@J";
      stringArray0[5] = "MultiKey[null, 8w+jPZ(ie/O%PQ&@J, MultiKey[8w+jPZ(ie/O%PQ&@J, java.lang.Object@23eb1e28]]";
      stringArray0[6] = "MultiKey[null, 8w+jPZ(ie/O%PQ&@J, MultiKey[8w+jPZ(ie/O%PQ&@J, java.lang.Object@23eb1e28]]";
      MultiKey<String> multiKey4 = new MultiKey<String>(stringArray0, false);
      multiKey4.toString();
      multiKey0.equals(multiKey4);
      Integer integer0 = new Integer(1592);
      Integer integer1 = new Integer((-948));
      Integer integer2 = new Integer(0);
      Integer integer3 = new Integer(1592);
      MultiKey<Integer> multiKey5 = new MultiKey<Integer>(integer0, integer1, integer0, integer2, integer3);
      multiKey5.hashCode();
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      String[] stringArray0 = null;
      MultiKey<String> multiKey0 = null;
//      try {
        multiKey0 = new MultiKey<String>((String[]) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // The array of keys must not be null
//         //
//         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
//      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      int int0 = 1349;
      Integer integer0 = new Integer(1349);
      Integer integer1 = new Integer(1349);
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integer0, integer1);
      multiKey0.hashCode();
      multiKey0.toString();
      String[] stringArray0 = new String[2];
      stringArray0[0] = "";
      stringArray0[1] = "o";
      MultiKey<String> multiKey1 = new MultiKey<String>(stringArray0);
      multiKey1.size();
      multiKey0.size();
      multiKey0.equals("o");
      // Undeclared exception!
//      try { 
        multiKey0.getKey((-268));
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // -268
//         //
//         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
//      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Object object0 = new Object();
      Object object1 = new Object();
      Integer integer0 = new Integer(0);
      MultiKey<Object> multiKey0 = new MultiKey<Object>(object0, object0, object1, integer0, object1);
      multiKey0.toString();
      MultiKey<String> multiKey1 = new MultiKey<String>("rw\"*16oP]Yi7Jbg+;l/", "45>To}ln`SWf0GqY", "");
      multiKey1.hashCode();
      MultiKey<MultiKey<String>> multiKey2 = new MultiKey<MultiKey<String>>(multiKey1, multiKey1, multiKey1, multiKey1);
      multiKey2.getKeys();
      Object[] objectArray0 = multiKey0.getKeys();
      assertEquals(5, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      MultiKey<MultiKey<Integer>> multiKey0 = new MultiKey<MultiKey<Integer>>((MultiKey<Integer>) null, (MultiKey<Integer>) null, (MultiKey<Integer>) null);
      multiKey0.equals((Object) null);
      MultiKey<String> multiKey1 = new MultiKey<String>("", "", "");
      String string0 = multiKey1.toString();
      assertEquals("MultiKey[, , ]", string0);
      
      boolean boolean0 = multiKey1.equals((Object) null);
      assertFalse(boolean0);
      
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) null;
      objectArray0[1] = (Object) "";
      objectArray0[2] = (Object) null;
      objectArray0[3] = (Object) multiKey1;
      objectArray0[4] = (Object) multiKey1;
      Object object0 = new Object();
      objectArray0[5] = object0;
      MultiKey<Object> multiKey2 = new MultiKey<Object>(objectArray0, false);
      multiKey2.getKey(0);
      MultiKey<Object> multiKey3 = new MultiKey<Object>((Object) null, object0, (Object) null, "MultiKey[, , ]");
      Object object1 = new Object();
      MultiKey<Object> multiKey4 = new MultiKey<Object>(object1, (Object) null);
      MultiKey<MultiKey<Object>> multiKey5 = new MultiKey<MultiKey<Object>>(multiKey3, multiKey2, multiKey2, multiKey4, multiKey2);
      MultiKey<Object> multiKey6 = multiKey5.getKey(0);
      assertEquals(4, multiKey6.size());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      String[] stringArray0 = new String[0];
      MultiKey<String> multiKey0 = new MultiKey<String>(stringArray0);
      multiKey0.toString();
      MultiKey<MultiKey<String>> multiKey1 = new MultiKey<MultiKey<String>>(multiKey0, multiKey0, multiKey0);
      multiKey1.toString();
      multiKey1.toString();
      multiKey1.hashCode();
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      String[] stringArray0 = new String[1];
      stringArray0[0] = "";
      MultiKey<String> multiKey0 = new MultiKey<String>(stringArray0, true);
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.hashCode();
      MultiKey<Integer> multiKey1 = null;
//      try {
        multiKey1 = new MultiKey<Integer>((Integer[]) null, false);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // The array of keys must not be null
//         //
//         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
//      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Integer integer0 = new Integer(0);
      Integer integer1 = new Integer(0);
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integer0, integer1);
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      MultiKey<Object>[] multiKeyArray0 = (MultiKey<Object>[]) Array.newInstance(MultiKey.class, 3);
      MultiKey<Object> multiKey1 = new MultiKey<Object>(integer0, (Object) null, "MultiKey[0, 0]");
      multiKeyArray0[0] = multiKey1;
      Integer integer2 = new Integer((-1256));
      MultiKey<Object> multiKey2 = new MultiKey<Object>(integer2, "MultiKey[0, 0]", multiKey1);
      multiKeyArray0[1] = multiKey2;
      Integer integer3 = new Integer(1001);
      MultiKey<Integer> multiKey3 = new MultiKey<Integer>(integer0, integer3);
      // Undeclared exception!
//      try { 
        multiKey3.getKey(1001);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 1001
//         //
//         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
//      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Object[] objectArray0 = new Object[1];
      Integer[] integerArray0 = new Integer[0];
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integerArray0, true);
      int int0 = (-1839);
      multiKey0.toString();
      // Undeclared exception!
//      try { 
        multiKey0.getKey((-1839));
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // -1839
//         //
//         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
//      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Integer integer0 = new Integer(3124);
      Integer integer1 = new Integer(1147);
      Integer integer2 = new Integer(4);
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integer0, integer1, integer2);
      multiKey0.toString();
      multiKey0.hashCode();
      multiKey0.toString();
      String[] stringArray0 = new String[6];
      stringArray0[0] = "MultiKey[3124, 1147, 4]";
      stringArray0[1] = "MultiKey[3124, 1147, 4]";
      stringArray0[2] = "MultiKey[3124, 1147, 4]";
      stringArray0[3] = "MultiKey[3124, 1147, 4]";
      stringArray0[4] = "MultiKey[3124, 1147, 4]";
      stringArray0[5] = "MultiKey[3124, 1147, 4]";
      MultiKey<String> multiKey1 = new MultiKey<String>(stringArray0, false);
      multiKey1.hashCode();
  }
}
