/*
 * This file was automatically generated by EvoSuite
 * Wed Oct 13 20:49:58 GMT 2021
 */

package org.apache.commons.collections4.keyvalue;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.lang.reflect.Array;
import org.apache.commons.collections4.keyvalue.MultiKey;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class MultiKey_ESTest extends MultiKey_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("l(&<7o?Z(omh?PP6P", "Z,", " EQs");
      Object[] objectArray0 = new Object[0];
      MultiKey<Object> multiKey1 = new MultiKey<Object>(objectArray0, true);
      int int0 = multiKey1.size();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("", "AN7-&VFg/?X");
      multiKey0.toString();
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) "MultiKey[, AN7-&VFg/?X]";
      objectArray0[1] = (Object) multiKey0;
      objectArray0[2] = (Object) "org.apache.commons.collections4.keyvalue.MultiKey";
      objectArray0[3] = (Object) multiKey0;
      objectArray0[4] = (Object) "";
      MultiKey<Object> multiKey1 = new MultiKey<Object>(objectArray0);
      String[] stringArray0 = new String[3];
      stringArray0[0] = "org.apache.commons.collections4.keyvalue.MultiKey";
      stringArray0[1] = "org.apache.commons.collections4.keyvalue.MultiKey";
      stringArray0[2] = "org.apache.commons.collections4.keyvalue.MultiKey";
      MultiKey<String> multiKey2 = new MultiKey<String>(stringArray0);
      multiKey2.toString();
      multiKey1.equals(multiKey2);
      MultiKey<Integer> multiKey3 = null;
//      try {
        multiKey3 = new MultiKey<Integer>((Integer[]) null, false);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // The array of keys must not be null
//         //
//         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
//      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Object object0 = new Object();
      MultiKey<Object> multiKey0 = new MultiKey<Object>(object0, object0);
      boolean boolean0 = multiKey0.equals(multiKey0);
      String[] stringArray0 = new String[7];
      stringArray0[1] = "<=}!}*,7%l*";
      stringArray0[2] = "";
      multiKey0.toString();
      stringArray0[3] = "jIFI05_:CX/xg'";
      stringArray0[4] = "";
      stringArray0[5] = "MultiKey";
      MultiKey<Object> multiKey1 = new MultiKey<Object>(stringArray0);
      multiKey0.toString();
      Integer integer0 = new Integer(0);
      Object object1 = new Object();
      boolean boolean1 = multiKey0.equals(object1);
      assertFalse(boolean1 == boolean0);
      
      String string0 = multiKey1.toString();
      assertEquals("MultiKey[null, <=}!}*,7%l*, , jIFI05_:CX/xg', , MultiKey, null]", string0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      MultiKey<Integer> multiKey0 = null;
//      try {
        multiKey0 = new MultiKey<Integer>((Integer[]) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // The array of keys must not be null
//         //
//         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
//      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Object[] objectArray0 = new Object[8];
      MultiKey<Object> multiKey0 = new MultiKey<Object>("", "", "", "", "");
      MultiKey<Object> multiKey1 = new MultiKey<Object>(objectArray0, false);
      MultiKey<MultiKey<Object>> multiKey2 = new MultiKey<MultiKey<Object>>(multiKey0, multiKey1, multiKey0, multiKey1);
      MultiKey<Object> multiKey3 = multiKey2.getKey(3);
      objectArray0[0] = (Object) multiKey3;
      Object object0 = new Object();
      objectArray0[1] = object0;
      multiKey3.getKey(3);
      objectArray0[2] = null;
      int int0 = 0;
      multiKey0.getKey(0);
      objectArray0[3] = (Object) "";
      Integer integer0 = new Integer(3);
      Integer integer1 = new Integer(0);
      MultiKey<Integer> multiKey4 = new MultiKey<Integer>(integer0, integer1);
      // Undeclared exception!
//      try { 
        multiKey4.getKey(1894);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 1894
//         //
//         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
//      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      boolean boolean0 = false;
      MultiKey<Integer> multiKey0 = null;
//      try {
        multiKey0 = new MultiKey<Integer>((Integer[]) null, false);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // The array of keys must not be null
//         //
//         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
//      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      MultiKey<Object> multiKey0 = new MultiKey<Object>(objectArray0);
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.getKeys();
      Integer integer0 = new Integer((-236));
      MultiKey<Integer> multiKey1 = new MultiKey<Integer>(integer0, integer0);
      String string0 = multiKey1.toString();
      assertEquals("MultiKey[-236, -236]", string0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      MultiKey<Object> multiKey0 = new MultiKey<Object>((Object) null, (Object) null);
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.getKeys();
      multiKey0.size();
      Integer[] integerArray0 = new Integer[7];
      Integer integer0 = new Integer(2);
      integerArray0[0] = integer0;
      Integer integer1 = new Integer(2);
      integerArray0[1] = integer1;
      Integer integer2 = new Integer((-212));
      integerArray0[2] = integer2;
      Integer integer3 = new Integer(2);
      integerArray0[3] = integer3;
      Integer integer4 = new Integer((int) integerArray0[1]);
      integerArray0[4] = integer4;
      int int0 = 4;
      Integer integer5 = new Integer(4);
      integerArray0[5] = integer5;
      Integer integer6 = new Integer((int) integerArray0[3]);
      integerArray0[6] = integer6;
      MultiKey<Integer> multiKey1 = new MultiKey<Integer>(integerArray0, true);
      multiKey1.toString();
      multiKey1.size();
      Integer integer7 = new Integer((-212));
      multiKey0.equals(integer7);
      boolean boolean0 = multiKey0.equals(int0);
      assertFalse(boolean0);
      
      String string0 = multiKey1.toString();
      assertEquals("MultiKey[2, 2, -212, 2, 2, 4, 2]", string0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("", "", "8]B*", "E{v~\"lD%N_g+]ai4b8");
      Object[] objectArray0 = new Object[2];
      Object object0 = new Object();
      objectArray0[0] = object0;
      objectArray0[1] = (Object) multiKey0;
      MultiKey<Object> multiKey1 = new MultiKey<Object>(objectArray0, true);
      multiKey0.toString();
      multiKey1.getKey(0);
      multiKey0.getKey(0);
      multiKey0.toString();
      multiKey1.toString();
      int int0 = 3777;
      // Undeclared exception!
//      try { 
        multiKey1.getKey(3777);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 3777
//         //
//         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
//      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      MultiKey<String>[] multiKeyArray0 = (MultiKey<String>[]) Array.newInstance(MultiKey.class, 9);
      MultiKey<String> multiKey0 = new MultiKey<String>("wu>m?U7gnm", "wu>m?U7gnm", "", "Azh5H23cEcHh");
      multiKeyArray0[0] = multiKey0;
      String[] stringArray0 = new String[2];
      stringArray0[0] = "Azh5H23cEcHh";
      stringArray0[1] = "";
      MultiKey<String> multiKey1 = new MultiKey<String>(stringArray0, false);
      multiKeyArray0[1] = multiKey1;
      MultiKey<String> multiKey2 = new MultiKey<String>(stringArray0, false);
      multiKeyArray0[2] = multiKey2;
      MultiKey<String> multiKey3 = new MultiKey<String>(stringArray0, false);
      multiKeyArray0[3] = multiKey3;
      MultiKey<String> multiKey4 = new MultiKey<String>("?8[k]i6J~l", "", "wu>m?U7gnm", "^^2UK-E", "Azh5H23cEcHh");
      multiKeyArray0[4] = multiKey4;
      MultiKey<String> multiKey5 = new MultiKey<String>(stringArray0, true);
      multiKeyArray0[5] = multiKey5;
      MultiKey<String> multiKey6 = new MultiKey<String>("", "", "", "^^2UK-E", (String) null);
      multiKeyArray0[6] = multiKey6;
      MultiKey<String> multiKey7 = new MultiKey<String>("", "", (String) null);
      multiKeyArray0[7] = multiKey7;
      MultiKey<String> multiKey8 = new MultiKey<String>("v*K;]kw0O*9", "");
      multiKeyArray0[8] = multiKey8;
      MultiKey<MultiKey<String>> multiKey9 = new MultiKey<MultiKey<String>>(multiKeyArray0);
      // Undeclared exception!
//      try { 
        multiKey9.getKey((-289));
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // -289
//         //
//         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
//      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Integer[] integerArray0 = new Integer[4];
      int int0 = 0;
      Integer integer0 = new Integer(0);
      integerArray0[0] = integer0;
      Integer integer1 = new Integer(int0);
      integerArray0[1] = integer1;
      Integer integer2 = new Integer(int0);
      integerArray0[2] = integer2;
      Integer integer3 = new Integer(int0);
      integerArray0[3] = integer3;
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integerArray0);
      assertEquals(4, multiKey0.size());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Object object0 = null;
      Integer integer0 = new Integer(0);
      MultiKey<Object> multiKey0 = new MultiKey<Object>((Object) null, (Object) null, (Object) null, "", integer0);
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.hashCode();
      multiKey0.toString();
      MultiKey<String> multiKey1 = new MultiKey<String>("MultiKey[null, null, null, , 0]", "", "", "MultiKey[null, null, null, , 0]");
      multiKey1.hashCode();
      multiKey0.hashCode();
      multiKey1.toString();
      multiKey1.size();
      multiKey1.hashCode();
      multiKey0.size();
      multiKey0.toString();
      int int0 = (-1841);
      multiKey0.toString();
      Integer integer1 = new Integer((-1841));
      MultiKey<Integer> multiKey2 = new MultiKey<Integer>(integer0, integer0, integer1, integer1);
      // Undeclared exception!
//      try { 
        multiKey2.getKey(5);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 5
//         //
//         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
//      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Object object0 = new Object();
      Integer integer0 = new Integer(1);
      MultiKey<Object> multiKey0 = new MultiKey<Object>(object0, integer0);
      multiKey0.getKeys();
      multiKey0.toString();
      String string0 = "o=;ek";
      String string1 = "5$ehF,a[M2*hl/CZ";
      Integer integer1 = new Integer((-1349));
      MultiKey<Object> multiKey1 = new MultiKey<Object>("o=;ek", integer1);
      multiKey1.toString();
      // Undeclared exception!
//      try { 
        multiKey1.getKey((-2793));
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // -2793
//         //
//         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
//      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Integer integer0 = new Integer(2031);
      Integer integer1 = new Integer(0);
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integer0, integer1);
      String string0 = multiKey0.toString();
      assertEquals("MultiKey[2031, 0]", string0);
  }
}
