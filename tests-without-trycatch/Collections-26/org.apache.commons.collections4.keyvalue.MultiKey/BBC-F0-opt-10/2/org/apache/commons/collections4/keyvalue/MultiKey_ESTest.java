/*
 * This file was automatically generated by EvoSuite
 * Wed Oct 13 20:46:38 GMT 2021
 */

package org.apache.commons.collections4.keyvalue;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.lang.reflect.Array;
import org.apache.commons.collections4.keyvalue.MultiKey;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class MultiKey_ESTest extends MultiKey_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("", "");
      MultiKey<Object> multiKey1 = new MultiKey<Object>("", multiKey0, multiKey0);
      MultiKey<MultiKey<Object>> multiKey2 = new MultiKey<MultiKey<Object>>(multiKey1, multiKey1);
      String string0 = multiKey2.toString();
      assertEquals("MultiKey[MultiKey[, MultiKey[, ], MultiKey[, ]], MultiKey[, MultiKey[, ], MultiKey[, ]]]", string0);
      
      Object object0 = multiKey2.getKey(0);
      boolean boolean0 = multiKey1.equals(object0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      String[] stringArray0 = new String[0];
      MultiKey<String> multiKey0 = new MultiKey<String>(stringArray0);
      multiKey0.toString();
      multiKey0.getKeys();
      multiKey0.size();
      MultiKey<Integer>[] multiKeyArray0 = (MultiKey<Integer>[]) Array.newInstance(MultiKey.class, 4);
      Integer integer0 = new Integer(0);
      Integer integer1 = new Integer(0);
      MultiKey<Integer> multiKey1 = new MultiKey<Integer>(integer0, integer1, integer0);
      multiKeyArray0[0] = multiKey1;
      Integer integer2 = new Integer(9);
      MultiKey<Integer> multiKey2 = new MultiKey<Integer>(integer1, integer1, integer0, integer2);
      multiKeyArray0[1] = multiKey2;
      Integer integer3 = new Integer(0);
      Integer integer4 = new Integer(0);
      MultiKey<Integer> multiKey3 = new MultiKey<Integer>((Integer) null, integer1, integer3, integer4, integer2);
      multiKeyArray0[2] = multiKey3;
      Integer integer5 = new Integer((-1831));
      Integer integer6 = new Integer(3302);
      MultiKey<Integer> multiKey4 = new MultiKey<Integer>((Integer) null, integer5, integer6);
      multiKeyArray0[3] = multiKey4;
      MultiKey<MultiKey<Integer>> multiKey5 = new MultiKey<MultiKey<Integer>>(multiKeyArray0);
      MultiKey<Integer>[] multiKeyArray1 = multiKey5.getKeys();
      assertNotSame(multiKeyArray0, multiKeyArray1);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Object object0 = new Object();
      MultiKey<Object> multiKey0 = new MultiKey<Object>(object0, object0);
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.size();
      multiKey0.toString();
      multiKey0.getKeys();
      multiKey0.toString();
      MultiKey<Object>[] multiKeyArray0 = (MultiKey<Object>[]) Array.newInstance(MultiKey.class, 1);
      multiKeyArray0[0] = multiKey0;
      MultiKey<MultiKey<Object>> multiKey1 = new MultiKey<MultiKey<Object>>(multiKeyArray0, false);
      multiKey1.getKey(0);
      MultiKey<Object> multiKey2 = new MultiKey<Object>("MultiKey[java.lang.Object@53682ef5, java.lang.Object@53682ef5]", multiKey1, "MultiKey[java.lang.Object@53682ef5, java.lang.Object@53682ef5]", object0);
      Integer integer0 = new Integer((-658));
      Integer integer1 = new Integer(1);
      MultiKey<Object> multiKey3 = new MultiKey<Object>(integer1, multiKey2, "MultiKey[java.lang.Object@53682ef5, java.lang.Object@53682ef5]");
      MultiKey<Object> multiKey4 = new MultiKey<Object>(multiKeyArray0);
      Integer integer2 = new Integer(14);
      Integer integer3 = new Integer((-1892));
      MultiKey<Object> multiKey5 = new MultiKey<Object>("MultiKey[java.lang.Object@53682ef5, java.lang.Object@53682ef5]", integer3);
      MultiKey<MultiKey<Object>> multiKey6 = new MultiKey<MultiKey<Object>>(multiKeyArray0);
      multiKey1.getKey(0);
      boolean boolean0 = multiKey4.equals(multiKey6);
      assertFalse(multiKey4.equals((Object)multiKey2));
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Object object0 = new Object();
      MultiKey<Object> multiKey0 = new MultiKey<Object>(object0, object0);
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.size();
      multiKey0.toString();
      Object[] objectArray0 = multiKey0.getKeys();
      multiKey0.toString();
      multiKey0.toString();
      MultiKey<Object> multiKey1 = new MultiKey<Object>(objectArray0);
      boolean boolean0 = multiKey0.equals(multiKey1);
      assertTrue(boolean0);
      
      MultiKey<Object> multiKey2 = new MultiKey<Object>("MultiKey[java.lang.Object@50c48ea4, java.lang.Object@50c48ea4]", "MultiKey[java.lang.Object@50c48ea4, java.lang.Object@50c48ea4]");
      MultiKey<Object> multiKey3 = new MultiKey<Object>("MultiKey[java.lang.Object@50c48ea4, java.lang.Object@50c48ea4]", "$.", multiKey2);
      multiKey3.size();
      multiKey3.toString();
      assertFalse(multiKey3.equals((Object)multiKey2));
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>((String) null, "");
      multiKey0.toString();
      multiKey0.toString();
      MultiKey<Object> multiKey1 = new MultiKey<Object>((Object) null, (Object) null, multiKey0, (Object) null, (Object) null);
      multiKey1.toString();
      multiKey1.toString();
      MultiKey<MultiKey<Object>> multiKey2 = new MultiKey<MultiKey<Object>>((MultiKey<Object>) null, (MultiKey<Object>) null, (MultiKey<Object>) null, multiKey1);
      multiKey2.toString();
      multiKey2.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey2.hashCode();
      int int0 = 3;
      multiKey1.getKey(3);
      multiKey1.toString();
      multiKey1.getKey(3);
      multiKey1.hashCode();
      multiKey1.size();
      multiKey0.toString();
      multiKey1.toString();
      int int1 = (-1539);
      // Undeclared exception!
//      try { 
        multiKey1.getKey((-1539));
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // -1539
//         //
//         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
//      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Integer integer0 = new Integer(1);
      Integer integer1 = new Integer((-1445));
      Integer integer2 = new Integer(0);
      Integer integer3 = new Integer(1);
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integer0, integer1, integer2, integer3);
      multiKey0.toString();
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) integer0;
      objectArray0[1] = (Object) integer3;
      multiKey0.toString();
      MultiKey<Object> multiKey1 = new MultiKey<Object>(objectArray0, true);
      String string0 = "org.apache.commons.collections4.keyvalue.MultiKey";
      multiKey1.toString();
      multiKey1.toString();
      multiKey0.toString();
      multiKey1.equals("org.apache.commons.collections4.keyvalue.MultiKey");
      multiKey1.toString();
      multiKey0.size();
      MultiKey<MultiKey<Integer>> multiKey2 = null;
//      try {
        multiKey2 = new MultiKey<MultiKey<Integer>>((MultiKey<Integer>[]) null, true);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // The array of keys must not be null
//         //
//         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
//      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Integer integer0 = new Integer(0);
      Integer integer1 = new Integer(0);
      Integer integer2 = new Integer(0);
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integer0, integer1, integer2);
      multiKey0.size();
      multiKey0.toString();
      String string0 = "dtbcG~ -5~3{|";
      multiKey0.equals("dtbcG~ -5~3{|");
      MultiKey<Object> multiKey1 = null;
//      try {
        multiKey1 = new MultiKey<Object>((Object[]) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // The array of keys must not be null
//         //
//         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
//      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      String[] stringArray0 = new String[3];
      stringArray0[0] = "aXmfY,eL)&)N Fe_DX}";
      stringArray0[1] = "";
      stringArray0[2] = "wR[]Zz[PgOibR";
      MultiKey<String> multiKey0 = new MultiKey<String>(stringArray0);
      Object object0 = new Object();
      Integer[] integerArray0 = new Integer[1];
      Integer integer0 = new Integer(3);
      integerArray0[0] = integer0;
      MultiKey<Integer> multiKey1 = new MultiKey<Integer>(integerArray0, true);
      Object object1 = new Object();
      Object object2 = new Object();
      MultiKey<Object> multiKey2 = new MultiKey<Object>((Object[]) stringArray0, true);
      MultiKey<Object> multiKey3 = new MultiKey<Object>("", object1, object2, multiKey2, multiKey2);
      MultiKey<Object> multiKey4 = new MultiKey<Object>(object0, multiKey1, multiKey3, "wR[]Zz[PgOibR");
      // Undeclared exception!
//      try { 
        multiKey4.getKey((-1629));
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // -1629
//         //
//         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
//      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      String[] stringArray0 = new String[8];
      stringArray0[0] = "XC<d]2;D{a";
      stringArray0[1] = "yw*>'DKyn;q;";
      stringArray0[2] = "Vj6]TIUI5K*-Z[cZ";
      stringArray0[3] = "";
      String string0 = "MultiKey";
      stringArray0[4] = "MultiKey";
      stringArray0[5] = "+/ZDC1uL{JUDXS";
      stringArray0[6] = "J,d}NS";
      stringArray0[7] = "#N%qPu>H,G-}!+AeC";
      MultiKey<String> multiKey0 = new MultiKey<String>(stringArray0, true);
      multiKey0.toString();
      String[] stringArray1 = multiKey0.getKeys();
      MultiKey<String> multiKey1 = new MultiKey<String>(stringArray1);
      multiKey1.toString();
      int int0 = (-286);
      multiKey1.toString();
      // Undeclared exception!
//      try { 
        multiKey1.getKey((-286));
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // -286
//         //
//         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
//      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Integer[] integerArray0 = new Integer[0];
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integerArray0, true);
      multiKey0.toString();
      multiKey0.size();
      MultiKey<String> multiKey1 = new MultiKey<String>("", "", "");
      multiKey0.toString();
      multiKey1.toString();
      Object object0 = new Object();
      MultiKey<Object> multiKey2 = new MultiKey<Object>(multiKey0, object0, "");
      multiKey2.toString();
      multiKey2.toString();
      Object object1 = multiKey2.getKey(0);
      multiKey1.equals(object1);
      multiKey1.hashCode();
      multiKey0.toString();
      // Undeclared exception!
//      try { 
        multiKey2.getKey((-3017));
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // -3017
//         //
//         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
//      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("org.apache.commons.collections4.keyvalue.MultiKey", "", "");
      multiKey0.toString();
      Integer integer0 = new Integer(672);
      MultiKey<Integer> multiKey1 = new MultiKey<Integer>(integer0, integer0);
      multiKey1.toString();
      multiKey1.toString();
      MultiKey<Object> multiKey2 = new MultiKey<Object>("MultiKey[672, 672]", "");
      multiKey2.hashCode();
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Object[] objectArray0 = new Object[5];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      Object object2 = new Object();
      objectArray0[2] = object2;
      MultiKey<Object> multiKey0 = new MultiKey<Object>(objectArray0);
      Object object3 = multiKey0.getKey(0);
      objectArray0[3] = object3;
      multiKey0.toString();
      // Undeclared exception!
//      try { 
        multiKey0.getKey(3191);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 3191
//         //
//         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
//      }
  }
}
