/*
 * This file was automatically generated by EvoSuite
 * Wed Oct 20 12:16:00 GMT 2021
 */

package org.apache.commons.collections4.keyvalue;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.lang.reflect.Array;
import org.apache.commons.collections4.keyvalue.MultiKey;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class MultiKey_ESTest extends MultiKey_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      int int0 = 9;
      Integer integer0 = new Integer(9);
      Integer integer1 = new Integer((-2414));
      Integer integer2 = new Integer((-2414));
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integer0, integer0, integer1, integer2);
      Integer integer3 = new Integer(2);
      MultiKey<Integer> multiKey1 = new MultiKey<Integer>(integer1, integer3, integer3, integer1, integer3);
      Integer[] integerArray0 = new Integer[9];
      integerArray0[0] = integer0;
      integerArray0[1] = integer1;
      integerArray0[2] = integer0;
      integerArray0[3] = (Integer) int0;
      integerArray0[4] = integer2;
      integerArray0[5] = integer2;
      integerArray0[6] = integer2;
      Integer integer4 = new Integer((-1));
      integerArray0[7] = integer4;
      Integer integer5 = new Integer((int) integerArray0[6]);
      integerArray0[8] = (Integer) int0;
      MultiKey<Integer> multiKey2 = new MultiKey<Integer>(integerArray0);
      MultiKey<Object> multiKey3 = new MultiKey<Object>(multiKey1, multiKey2, multiKey2);
      boolean boolean0 = multiKey3.equals(multiKey3);
      assertTrue(boolean0);
      
      multiKey2.getKeys();
      assertFalse(multiKey2.equals((Object)multiKey0));
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      MultiKey<Integer>[] multiKeyArray0 = (MultiKey<Integer>[]) Array.newInstance(MultiKey.class, 7);
      Integer integer0 = new Integer(1505);
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>((Integer) null, integer0, (Integer) null);
      multiKeyArray0[0] = multiKey0;
      Integer integer1 = new Integer(918);
      Integer integer2 = new Integer(918);
      Integer integer3 = new Integer(918);
      MultiKey<Integer> multiKey1 = new MultiKey<Integer>((Integer) null, (Integer) null, integer1, integer2, integer3);
      multiKeyArray0[1] = multiKey1;
      Integer[] integerArray0 = new Integer[0];
      MultiKey<Integer> multiKey2 = new MultiKey<Integer>(integer0, integer1, (Integer) null);
      multiKeyArray0[2] = multiKey2;
      Integer integer4 = new Integer(1269);
      MultiKey<Integer> multiKey3 = new MultiKey<Integer>(integer1, integer0, (Integer) null, integer4);
      multiKeyArray0[3] = multiKey3;
      multiKey1.toString();
      Integer integer5 = new Integer(1);
      MultiKey<String> multiKey4 = new MultiKey<String>("MultiKey[null, null, 918, 918, 918]", "", (String) null, (String) null);
      boolean boolean0 = multiKey1.equals(multiKey4);
      assertFalse(boolean0);
      
      MultiKey<Object> multiKey5 = new MultiKey<Object>((Object[]) multiKeyArray0, false);
      multiKey5.getKey(6);
      String string0 = multiKey0.toString();
      assertEquals("MultiKey[null, 1505, null]", string0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      MultiKey<Object> multiKey0 = new MultiKey<Object>(objectArray0, true);
      int int0 = multiKey0.size();
      MultiKey<String> multiKey1 = new MultiKey<String>("", "");
      multiKey1.hashCode();
      Integer integer0 = new Integer((-4472));
      Integer integer1 = new Integer((-4472));
      MultiKey<Integer> multiKey2 = new MultiKey<Integer>((Integer) null, integer0, integer1, (Integer) null, integer1);
      int int1 = multiKey2.size();
      assertFalse(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      int int0 = (-22);
      Integer integer0 = new Integer((-22));
      MultiKey<Object> multiKey0 = new MultiKey<Object>(integer0, integer0, integer0);
      multiKey0.size();
      String[] stringArray0 = new String[5];
      stringArray0[0] = "";
      stringArray0[1] = "b7VL4U&#SWSJHfyx8i";
      stringArray0[2] = "MultiKey";
      stringArray0[3] = "AkX{g";
      stringArray0[4] = "U2c%-";
      MultiKey<String> multiKey1 = new MultiKey<String>(stringArray0);
      multiKey1.toString();
      MultiKey<MultiKey<Object>> multiKey2 = null;
//      try {
        multiKey2 = new MultiKey<MultiKey<Object>>((MultiKey<Object>[]) null, true);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // The array of keys must not be null
//         //
//         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
//      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Object object0 = new Object();
      MultiKey<Object> multiKey0 = new MultiKey<Object>(object0, object0, object0, (Object) null, (Object) null);
      multiKey0.toString();
      multiKey0.toString();
      MultiKey<String> multiKey1 = new MultiKey<String>("Jf\")o|'", "", "", "Jf\")o|'");
      multiKey1.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey1.hashCode();
      multiKey0.getKeys();
      multiKey1.size();
      int int0 = (-44);
      // Undeclared exception!
//      try { 
        multiKey1.getKey((-44));
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // -44
//         //
//         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
//      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      int int0 = 0;
      Integer integer0 = new Integer(0);
      Integer integer1 = new Integer(2);
      MultiKey<String> multiKey0 = null;
//      try {
        multiKey0 = new MultiKey<String>((String[]) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // The array of keys must not be null
//         //
//         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
//      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("_RZJS.`KJ0.:Ww", (String) null, "", (String) null, (String) null);
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      Integer[] integerArray0 = new Integer[0];
      MultiKey<Integer> multiKey1 = new MultiKey<Integer>(integerArray0);
      Integer[] integerArray1 = multiKey1.getKeys();
      MultiKey<Object> multiKey2 = new MultiKey<Object>((Object[]) integerArray1, false);
      Integer integer0 = new Integer((-2126));
      boolean boolean0 = multiKey2.equals(integer0);
      assertFalse(boolean0);
      
      multiKey2.hashCode();
      MultiKey<String>[] multiKeyArray0 = (MultiKey<String>[]) Array.newInstance(MultiKey.class, 3);
      multiKeyArray0[0] = multiKey0;
      multiKeyArray0[1] = multiKey0;
      multiKeyArray0[2] = multiKey0;
      MultiKey<MultiKey<String>> multiKey3 = new MultiKey<MultiKey<String>>(multiKeyArray0, false);
      String string0 = multiKey3.toString();
      assertEquals("MultiKey[MultiKey[_RZJS.`KJ0.:Ww, null, , null, null], MultiKey[_RZJS.`KJ0.:Ww, null, , null, null], MultiKey[_RZJS.`KJ0.:Ww, null, , null, null]]", string0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      String string0 = "";
      String string1 = "W8_K=";
      String string2 = "The array of keys must not be null";
      MultiKey<String> multiKey0 = new MultiKey<String>("", "YiD7!SX#jXGey5|", "W8_K=", "", "The array of keys must not be null");
      multiKey0.toString();
      multiKey0.toString();
      Object[] objectArray0 = new Object[5];
      multiKey0.toString();
      objectArray0[0] = (Object) "The array of keys must not be null";
      objectArray0[1] = (Object) "";
      objectArray0[2] = (Object) "YiD7!SX#jXGey5|";
      Object object0 = new Object();
      objectArray0[3] = object0;
      objectArray0[4] = (Object) "W8_K=";
      MultiKey<Object> multiKey1 = new MultiKey<Object>(objectArray0, false);
      multiKey1.toString();
      multiKey1.getKey(0);
      Integer integer0 = new Integer(0);
      MultiKey<Integer> multiKey2 = new MultiKey<Integer>(integer0, integer0);
      multiKey2.toString();
      multiKey2.hashCode();
      multiKey1.toString();
      MultiKey<Object> multiKey3 = new MultiKey<Object>(objectArray0, false);
      multiKey3.toString();
      multiKey1.equals(multiKey3);
      multiKey0.getKey(2);
      multiKey2.toString();
      // Undeclared exception!
//      try { 
        multiKey2.getKey((-427));
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // -427
//         //
//         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
//      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      MultiKey<Integer>[] multiKeyArray0 = (MultiKey<Integer>[]) Array.newInstance(MultiKey.class, 7);
      Integer integer0 = new Integer(1505);
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>((Integer) null, integer0, (Integer) null, (Integer) null);
      multiKeyArray0[0] = multiKey0;
      Integer integer1 = new Integer(918);
      Integer integer2 = new Integer(918);
      Integer integer3 = new Integer(918);
      MultiKey<Integer> multiKey1 = new MultiKey<Integer>((Integer) null, (Integer) null, integer1, integer2, integer3);
      multiKeyArray0[1] = multiKey1;
      Integer[] integerArray0 = new Integer[0];
      MultiKey<Integer> multiKey2 = new MultiKey<Integer>(integerArray0, false);
      multiKeyArray0[2] = multiKey2;
      Integer integer4 = new Integer(1269);
      MultiKey<Integer> multiKey3 = new MultiKey<Integer>(integer1, integer0, (Integer) null, integer4);
      multiKeyArray0[3] = multiKey3;
      Integer integer5 = new Integer(1);
      MultiKey<Integer> multiKey4 = new MultiKey<Integer>(integer3, integer2, integer0, integer5);
      multiKeyArray0[4] = multiKey4;
      MultiKey<Integer> multiKey5 = new MultiKey<Integer>(integer1, integer1);
      multiKeyArray0[5] = multiKey5;
      Integer integer6 = new Integer(1);
      Integer integer7 = new Integer(0);
      Integer integer8 = new Integer(1505);
      Integer integer9 = new Integer(918);
      MultiKey<Integer> multiKey6 = new MultiKey<Integer>((Integer) null, integer6, integer7, integer8, integer9);
      multiKeyArray0[6] = multiKey6;
      MultiKey<MultiKey<Integer>> multiKey7 = new MultiKey<MultiKey<Integer>>(multiKeyArray0);
      boolean boolean0 = multiKey7.equals((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Object[] objectArray0 = new Object[2];
      String[] stringArray0 = new String[9];
      stringArray0[0] = "";
      stringArray0[1] = "uh ";
      stringArray0[2] = "";
      stringArray0[3] = "4#Inr>[";
      stringArray0[4] = "";
      stringArray0[5] = "";
      stringArray0[6] = "";
      stringArray0[7] = "X6G/FF]5m";
      stringArray0[8] = "";
      MultiKey<String> multiKey0 = new MultiKey<String>(stringArray0);
      multiKey0.getKey(0);
      objectArray0[0] = (Object) "";
      multiKey0.getKey(0);
      objectArray0[1] = (Object) "";
      MultiKey<Object> multiKey1 = new MultiKey<Object>(objectArray0);
      assertEquals(2, multiKey1.size());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("<qT8 $*", "", "UcZ?9<H", (String) null);
      MultiKey<MultiKey<String>> multiKey1 = new MultiKey<MultiKey<String>>(multiKey0, multiKey0, multiKey0);
      multiKey1.toString();
      multiKey1.hashCode();
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      String[] stringArray0 = new String[4];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "@`'\"DqNY\"-[Miq$@<Q8";
      stringArray0[3] = "";
      MultiKey<String> multiKey0 = new MultiKey<String>(stringArray0, true);
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.equals("@`'\"DqNY\"-[Miq$@<Q8");
      multiKey0.toString();
      MultiKey<Object> multiKey1 = new MultiKey<Object>((Object[]) stringArray0, false);
      multiKey1.equals("MultiKey[, , @`'\"DqNY\"-[Miq$@<Q8, ]");
      MultiKey<String> multiKey2 = new MultiKey<String>((String) null, "org.apache.commons.collections4.keyvalue.MultiKey", "", "");
      multiKey1.toString();
      multiKey2.toString();
      MultiKey<MultiKey<String>> multiKey3 = new MultiKey<MultiKey<String>>(multiKey0, multiKey0, multiKey0, multiKey0, multiKey2);
      int int0 = multiKey3.size();
      Object object0 = new Object();
      multiKey1.equals(object0);
      Integer[] integerArray0 = new Integer[8];
      Integer integer0 = new Integer(2539);
      integerArray0[0] = integer0;
      Integer integer1 = new Integer(5);
      integerArray0[1] = integer1;
      Integer integer2 = new Integer((int) integerArray0[0]);
      integerArray0[2] = integer2;
      Integer integer3 = new Integer((int) integerArray0[1]);
      integerArray0[3] = integer3;
      Integer integer4 = new Integer((int) integerArray0[0]);
      integerArray0[4] = integer4;
      Integer integer5 = new Integer((int) integerArray0[1]);
      integerArray0[5] = integer5;
      Integer integer6 = new Integer((int) integerArray0[3]);
      integerArray0[6] = integer6;
      Integer integer7 = new Integer((-1269));
      integerArray0[7] = integer7;
      MultiKey<Integer> multiKey4 = new MultiKey<Integer>(integerArray0, false);
      int int1 = multiKey4.hashCode();
      assertFalse(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Object[] objectArray0 = new Object[9];
      int int0 = 1333;
      Integer integer0 = new Integer(1333);
      Integer integer1 = new Integer(1333);
      Integer integer2 = new Integer((-427));
      int int1 = 4;
      Integer integer3 = new Integer(4);
      Integer integer4 = new Integer(241);
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integer0, integer1, integer2, integer3, integer4);
      // Undeclared exception!
//      try { 
        multiKey0.getKey((-1));
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // -1
//         //
//         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
//      }
  }
}
