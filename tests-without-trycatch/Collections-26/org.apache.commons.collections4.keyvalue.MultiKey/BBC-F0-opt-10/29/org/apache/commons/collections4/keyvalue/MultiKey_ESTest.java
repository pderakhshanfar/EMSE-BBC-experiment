/*
 * This file was automatically generated by EvoSuite
 * Fri Oct 22 17:52:28 GMT 2021
 */

package org.apache.commons.collections4.keyvalue;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.lang.reflect.Array;
import org.apache.commons.collections4.keyvalue.MultiKey;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class MultiKey_ESTest extends MultiKey_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Integer integer0 = new Integer(1411);
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integer0, integer0, integer0, integer0);
      multiKey0.toString();
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = null;
      objectArray0[1] = (Object) integer0;
      objectArray0[2] = null;
      MultiKey<Object> multiKey1 = new MultiKey<Object>(objectArray0, false);
      multiKey1.toString();
      Object object0 = new Object();
      MultiKey<Object> multiKey2 = new MultiKey<Object>(multiKey0, (Object) null, multiKey1, object0, multiKey0);
      multiKey2.toString();
      multiKey2.toString();
      String[] stringArray0 = new String[0];
      MultiKey<String> multiKey3 = new MultiKey<String>(stringArray0, false);
      multiKey3.size();
      // Undeclared exception!
//      try { 
        multiKey0.getKey(2156);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 2156
//         //
//         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
//      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("(R#", "(R#", "", "");
      String string0 = multiKey0.toString();
      Object object0 = new Object();
      MultiKey<Object> multiKey1 = new MultiKey<Object>("The array of keys must not be null", "MultiKey[(R#, (R#, , ]", "", object0);
      multiKey1.equals("MultiKey[(R#, (R#, , ]");
      Integer integer0 = new Integer((-1864));
      MultiKey<String> multiKey2 = new MultiKey<String>("%fFG5}N]uBuSKh;$o", (String) null, (String) null);
      multiKey1.equals(multiKey1);
      Integer integer1 = new Integer((-1864));
      Integer integer2 = new Integer((-1864));
      Integer integer3 = new Integer((-614));
      Integer integer4 = new Integer(18);
      Integer integer5 = new Integer(18);
      Integer integer6 = new Integer(1967);
      Integer integer7 = new Integer((-4710));
      MultiKey<Integer> multiKey3 = new MultiKey<Integer>(integer4, integer5, integer6, integer5, integer7);
      String string1 = multiKey1.toString();
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Integer integer0 = new Integer(0);
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integer0, integer0);
      MultiKey<MultiKey<Integer>> multiKey1 = new MultiKey<MultiKey<Integer>>(multiKey0, multiKey0, multiKey0, multiKey0);
      multiKey1.toString();
      multiKey1.toString();
      Integer integer1 = new Integer(0);
      multiKey0.toString();
      boolean boolean0 = multiKey1.equals(integer1);
      assertFalse(boolean0);
      
      String string0 = multiKey1.toString();
      assertEquals("MultiKey[MultiKey[0, 0], MultiKey[0, 0], MultiKey[0, 0], MultiKey[0, 0]]", string0);
      
      MultiKey<String> multiKey2 = new MultiKey<String>("", "MultiKey[MultiKey[0, 0], MultiKey[0, 0], MultiKey[0, 0], MultiKey[0, 0]]", "MultiKey[MultiKey[0, 0], MultiKey[0, 0], MultiKey[0, 0], MultiKey[0, 0]]", "", "");
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) "MultiKey[0, 0]";
      objectArray0[1] = (Object) multiKey0;
      objectArray0[2] = (Object) "MultiKey[0, 0]";
      objectArray0[3] = (Object) integer1;
      objectArray0[4] = (Object) "MultiKey[MultiKey[0, 0], MultiKey[0, 0], MultiKey[0, 0], MultiKey[0, 0]]";
      objectArray0[5] = (Object) "MultiKey[0, 0]";
      objectArray0[6] = (Object) "MultiKey[MultiKey[0, 0], MultiKey[0, 0], MultiKey[0, 0], MultiKey[0, 0]]";
      MultiKey<Object> multiKey3 = new MultiKey<Object>(objectArray0);
      MultiKey<Object> multiKey4 = new MultiKey<Object>(multiKey2, multiKey3, "MultiKey[MultiKey[0, 0], MultiKey[0, 0], MultiKey[0, 0], MultiKey[0, 0]]", objectArray0[3]);
      MultiKey<MultiKey<String>> multiKey5 = new MultiKey<MultiKey<String>>((MultiKey<String>) null, (MultiKey<String>) null);
      MultiKey<String>[] multiKeyArray0 = (MultiKey<String>[]) Array.newInstance(MultiKey.class, 0);
      MultiKey<MultiKey<String>> multiKey6 = new MultiKey<MultiKey<String>>(multiKeyArray0, true);
      multiKey6.getKeys();
      assertFalse(multiKey6.equals((Object)multiKey5));
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      MultiKey<Object> multiKey0 = new MultiKey<Object>(objectArray0, true);
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      MultiKey<Object> multiKey1 = new MultiKey<Object>((Object) null, (Object) null, multiKey0, multiKey0);
      Integer[] integerArray0 = new Integer[2];
      Integer integer0 = new Integer(3);
      integerArray0[0] = integer0;
      Integer integer1 = new Integer(1095);
      integerArray0[1] = integer1;
      MultiKey<Integer> multiKey2 = new MultiKey<Integer>(integerArray0);
      MultiKey<Object> multiKey3 = new MultiKey<Object>(integer1, integer1, "MultiKey[]", "MultiKey[]", (Object) null);
      multiKey2.equals(multiKey3);
      MultiKey<String> multiKey4 = new MultiKey<String>("BEG/", "MultiKey[]", "");
      int int0 = multiKey4.size();
      assertEquals(3, int0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("^7YTxRKhH0(,UAC", "^7YTxRKhH0(,UAC", "^7YTxRKhH0(,UAC", "^7YTxRKhH0(,UAC", "");
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.size();
      MultiKey<Object> multiKey1 = null;
//      try {
        multiKey1 = new MultiKey<Object>((Object[]) null, true);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // The array of keys must not be null
//         //
//         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
//      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Object[] objectArray0 = new Object[2];
      Object object0 = new Object();
      objectArray0[0] = object0;
      MultiKey<String> multiKey0 = new MultiKey<String>((String) null, (String) null, (String) null, (String) null);
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.getKey(0);
      objectArray0[1] = (Object) null;
      multiKey0.toString();
      MultiKey<Object> multiKey1 = new MultiKey<Object>(objectArray0);
      multiKey1.toString();
      multiKey1.toString();
      multiKey1.toString();
      multiKey0.toString();
      multiKey1.toString();
      multiKey1.size();
      multiKey0.toString();
      int int0 = 521;
      // Undeclared exception!
//      try { 
        multiKey0.getKey(521);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 521
//         //
//         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
//      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Integer integer0 = new Integer(0);
      MultiKey<Object> multiKey0 = new MultiKey<Object>("", "", integer0, (Object) null, integer0);
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.getKeys();
      multiKey0.hashCode();
      MultiKey<String> multiKey1 = new MultiKey<String>("m*|oKmL^tC}?E[-", "Q-", "", "m*|oKmL^tC}?E[-", "Q-");
      multiKey1.toString();
      multiKey1.toString();
      multiKey1.toString();
      multiKey1.getKey(0);
      multiKey0.toString();
      multiKey0.equals("");
      multiKey1.hashCode();
      int int0 = multiKey0.size();
      assertEquals(5, int0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      String[] stringArray0 = new String[2];
      stringArray0[0] = "";
      stringArray0[1] = "/u@Sh+a+h`+\"5Hc'{";
      MultiKey<String> multiKey0 = new MultiKey<String>(stringArray0, true);
      Object object0 = new Object();
      multiKey0.equals(object0);
      multiKey0.getKeys();
      multiKey0.hashCode();
      MultiKey<Object> multiKey1 = new MultiKey<Object>((Object) null, "");
      multiKey1.hashCode();
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Object object0 = new Object();
      Integer integer0 = new Integer(1889);
      MultiKey<Object> multiKey0 = new MultiKey<Object>(object0, object0, integer0);
      Integer integer1 = new Integer((-1743));
      Integer integer2 = new Integer((-1743));
      MultiKey<Integer> multiKey1 = new MultiKey<Integer>(integer0, integer1, integer0, integer2);
      multiKey1.hashCode();
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      String string0 = "";
      MultiKey<String> multiKey0 = new MultiKey<String>("", "");
      multiKey0.toString();
      multiKey0.toString();
      Integer[] integerArray0 = null;
      MultiKey<Integer> multiKey1 = null;
//      try {
        multiKey1 = new MultiKey<Integer>((Integer[]) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // The array of keys must not be null
//         //
//         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
//      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      MultiKey<Object>[] multiKeyArray0 = (MultiKey<Object>[]) Array.newInstance(MultiKey.class, 1);
      Integer integer0 = new Integer((-1));
      Object object0 = new Object();
      MultiKey<Object> multiKey0 = new MultiKey<Object>(integer0, object0);
      multiKeyArray0[0] = multiKey0;
      MultiKey<MultiKey<Object>> multiKey1 = new MultiKey<MultiKey<Object>>(multiKeyArray0, false);
      assertEquals(1, multiKey1.size());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      String[] stringArray0 = new String[8];
      stringArray0[0] = "The array of keys must not be null";
      stringArray0[1] = "z/\"\"]~8Orl<1";
      stringArray0[2] = "";
      stringArray0[3] = "863K%";
      stringArray0[4] = "";
      stringArray0[5] = "";
      stringArray0[6] = "MultiKey";
      stringArray0[7] = "";
      MultiKey<String> multiKey0 = new MultiKey<String>(stringArray0);
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.equals("");
      MultiKey<Object> multiKey1 = new MultiKey<Object>("", "");
      multiKey1.toString();
      multiKey1.toString();
      multiKey1.toString();
      multiKey1.getKeys();
      Integer integer0 = new Integer((-2551));
      Integer integer1 = new Integer(0);
      MultiKey<Integer> multiKey2 = new MultiKey<Integer>(integer0, integer1, integer0);
      multiKey2.toString();
      multiKey2.size();
      String[] stringArray1 = multiKey0.getKeys();
      assertFalse(stringArray1.equals((Object)stringArray0));
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      int int0 = 1876;
      Integer integer0 = new Integer(1876);
      Integer integer1 = new Integer(1876);
      Integer integer2 = new Integer(1876);
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integer0, integer1, integer0, integer1, integer2);
      // Undeclared exception!
//      try { 
        multiKey0.getKey(1876);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 1876
//         //
//         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
//      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Integer integer0 = new Integer(0);
      Integer integer1 = new Integer(0);
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integer0, integer1, integer1, integer0);
      MultiKey<MultiKey<Integer>> multiKey1 = new MultiKey<MultiKey<Integer>>(multiKey0, multiKey0, multiKey0);
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) integer0;
      objectArray0[1] = (Object) multiKey0;
      objectArray0[2] = (Object) multiKey1;
      objectArray0[3] = (Object) multiKey1;
      objectArray0[4] = (Object) multiKey0;
      MultiKey<Object> multiKey2 = new MultiKey<Object>(objectArray0);
      MultiKey<MultiKey<Object>> multiKey3 = new MultiKey<MultiKey<Object>>(multiKey2, multiKey2);
      String string0 = multiKey3.toString();
      assertEquals("MultiKey[MultiKey[0, MultiKey[0, 0, 0, 0], MultiKey[MultiKey[0, 0, 0, 0], MultiKey[0, 0, 0, 0], MultiKey[0, 0, 0, 0]], MultiKey[MultiKey[0, 0, 0, 0], MultiKey[0, 0, 0, 0], MultiKey[0, 0, 0, 0]], MultiKey[0, 0, 0, 0]], MultiKey[0, MultiKey[0, 0, 0, 0], MultiKey[MultiKey[0, 0, 0, 0], MultiKey[0, 0, 0, 0], MultiKey[0, 0, 0, 0]], MultiKey[MultiKey[0, 0, 0, 0], MultiKey[0, 0, 0, 0], MultiKey[0, 0, 0, 0]], MultiKey[0, 0, 0, 0]]]", string0);
  }
}
