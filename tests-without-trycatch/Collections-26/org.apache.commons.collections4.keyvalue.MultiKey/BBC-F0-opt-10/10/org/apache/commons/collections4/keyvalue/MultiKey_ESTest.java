/*
 * This file was automatically generated by EvoSuite
 * Wed Oct 13 20:50:04 GMT 2021
 */

package org.apache.commons.collections4.keyvalue;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.lang.reflect.Array;
import org.apache.commons.collections4.keyvalue.MultiKey;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class MultiKey_ESTest extends MultiKey_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Integer integer0 = new Integer((-17));
      MultiKey<Object> multiKey0 = new MultiKey<Object>(integer0, integer0);
      MultiKey<MultiKey<Object>> multiKey1 = new MultiKey<MultiKey<Object>>(multiKey0, multiKey0, multiKey0, multiKey0, multiKey0);
      String[] stringArray0 = new String[0];
      MultiKey<String> multiKey2 = new MultiKey<String>(stringArray0, false);
      String[] stringArray1 = multiKey2.getKeys();
      assertFalse(stringArray1.equals((Object)stringArray0));
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("", "", "", "");
      MultiKey<MultiKey<String>> multiKey1 = new MultiKey<MultiKey<String>>(multiKey0, multiKey0, multiKey0);
      multiKey1.getKeys();
      multiKey0.size();
      MultiKey<MultiKey<Integer>> multiKey2 = null;
//      try {
        multiKey2 = new MultiKey<MultiKey<Integer>>((MultiKey<Integer>[]) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // The array of keys must not be null
//         //
//         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
//      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Integer integer0 = new Integer(155);
      Integer integer1 = new Integer(0);
      Integer integer2 = new Integer(0);
      Integer integer3 = new Integer((-1));
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integer0, integer0, integer1, integer2, integer3);
      multiKey0.toString();
      Object object0 = new Object();
      Integer integer4 = new Integer(0);
      MultiKey<Object> multiKey1 = new MultiKey<Object>(object0, integer4);
      multiKey1.toString();
      multiKey1.toString();
      multiKey1.size();
      MultiKey<String> multiKey2 = new MultiKey<String>("", "");
      multiKey2.hashCode();
      String string0 = multiKey2.toString();
      assertEquals("MultiKey[, ]", string0);
      
      MultiKey<Object>[] multiKeyArray0 = (MultiKey<Object>[]) Array.newInstance(MultiKey.class, 9);
      multiKeyArray0[0] = multiKey1;
      multiKeyArray0[1] = multiKey1;
      multiKeyArray0[2] = multiKey1;
      multiKeyArray0[3] = multiKey1;
      multiKeyArray0[4] = multiKey1;
      multiKeyArray0[5] = multiKey1;
      multiKeyArray0[6] = multiKey1;
      multiKeyArray0[7] = multiKey1;
      multiKeyArray0[8] = multiKey1;
      MultiKey<MultiKey<Object>> multiKey3 = new MultiKey<MultiKey<Object>>(multiKeyArray0);
      multiKey3.getKey(2);
      MultiKey<String>[] multiKeyArray1 = (MultiKey<String>[]) Array.newInstance(MultiKey.class, 5);
      multiKeyArray1[0] = multiKey2;
      multiKeyArray1[1] = multiKey2;
      multiKeyArray1[2] = multiKey2;
      MultiKey<String> multiKey4 = new MultiKey<String>("", "MultiKey[java.lang.Object@147b48b3, 0]", "", "", "gy<kiTYhS0%m");
      multiKeyArray1[3] = multiKey4;
      multiKeyArray1[4] = multiKey2;
      MultiKey<MultiKey<String>> multiKey5 = new MultiKey<MultiKey<String>>(multiKeyArray1);
      Object object1 = multiKey5.getKey(0);
      boolean boolean0 = multiKey2.equals(object1);
      assertTrue(boolean0);
      assertFalse(multiKey2.equals((Object)multiKey4));
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      MultiKey<MultiKey<Object>> multiKey0 = null;
//      try {
        multiKey0 = new MultiKey<MultiKey<Object>>((MultiKey<Object>[]) null, false);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // The array of keys must not be null
//         //
//         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
//      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Object[] objectArray0 = new Object[2];
      MultiKey<String> multiKey0 = new MultiKey<String>((String) null, (String) null, (String) null, "", "ie1~.66s3LmY");
      multiKey0.getKey(0);
      objectArray0[0] = (Object) null;
      Object object0 = new Object();
      MultiKey<Object> multiKey1 = new MultiKey<Object>((Object) null, (Object) null, object0, "ie1~.66s3LmY");
      multiKey1.getKey(0);
      objectArray0[1] = null;
      MultiKey<Object> multiKey2 = new MultiKey<Object>(objectArray0, true);
      assertEquals(2, multiKey2.size());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Integer integer0 = null;
      Integer integer1 = new Integer(2345);
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>((Integer) null, (Integer) null, integer1);
      MultiKey<MultiKey<Integer>> multiKey1 = new MultiKey<MultiKey<Integer>>((MultiKey<Integer>) null, (MultiKey<Integer>) null, multiKey0, (MultiKey<Integer>) null, multiKey0);
      // Undeclared exception!
//      try { 
        multiKey1.getKey(2345);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 2345
//         //
//         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
//      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("", "", "ZYhp=-C5IS", "");
      multiKey0.getKey(0);
      MultiKey<String> multiKey1 = new MultiKey<String>("", "^{P11vHe_LM }", "Mh:]:l1py`J#Xk&x ");
      multiKey1.getKey(0);
      MultiKey<Object> multiKey2 = new MultiKey<Object>("", "");
      multiKey2.hashCode();
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("B{jW}v]Y<63CDqce*", "At#si+N!sf~:BX?nW");
      multiKey0.equals("At#si+N!sf~:BX?nW");
      Integer integer0 = new Integer((-1845));
      Integer integer1 = new Integer((-1845));
      MultiKey<Integer> multiKey1 = new MultiKey<Integer>(integer0, integer0, integer1);
      multiKey1.toString();
      multiKey1.toString();
      int int0 = multiKey1.size();
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) "MultiKey[-1845, -1845, -1845]";
      objectArray0[1] = (Object) multiKey1;
      objectArray0[2] = (Object) multiKey1;
      objectArray0[3] = (Object) integer0;
      MultiKey<Object> multiKey2 = new MultiKey<Object>(objectArray0, true);
      multiKey2.toString();
      multiKey2.size();
      MultiKey<String>[] multiKeyArray0 = (MultiKey<String>[]) Array.newInstance(MultiKey.class, 7);
      multiKeyArray0[0] = multiKey0;
      multiKeyArray0[1] = multiKey0;
      MultiKey<String> multiKey3 = new MultiKey<String>("MultiKey[-1845, -1845, -1845]", (String) null, "At#si+N!sf~:BX?nW");
      multiKeyArray0[2] = multiKey3;
      multiKeyArray0[3] = multiKey0;
      multiKeyArray0[4] = multiKey0;
      multiKeyArray0[5] = multiKey0;
      multiKeyArray0[6] = multiKey0;
      MultiKey<MultiKey<String>> multiKey4 = new MultiKey<MultiKey<String>>(multiKeyArray0, false);
      int int1 = multiKey4.hashCode();
      assertFalse(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Integer[] integerArray0 = new Integer[2];
      Integer integer0 = new Integer(2667);
      integerArray0[0] = integer0;
      Integer integer1 = new Integer((int) integerArray0[0]);
      integerArray0[1] = integer1;
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integerArray0, true);
      MultiKey<Object> multiKey1 = new MultiKey<Object>(multiKey0, (Object) null, (Object) null, (Object) null);
      multiKey0.toString();
      multiKey1.hashCode();
      multiKey1.toString();
      String string0 = "";
      MultiKey<String> multiKey2 = new MultiKey<String>("MultiKey", "MultiKey", "", "MultiKey");
      multiKey2.equals(multiKey1);
      multiKey1.hashCode();
      // Undeclared exception!
//      try { 
        multiKey2.getKey((int) integerArray0[1]);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 2667
//         //
//         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
//      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Integer integer0 = new Integer(3832);
      Integer integer1 = new Integer(0);
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integer0, integer1);
      multiKey0.toString();
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) integer0;
      objectArray0[1] = (Object) integer1;
      objectArray0[2] = (Object) integer1;
      objectArray0[3] = (Object) integer0;
      objectArray0[4] = (Object) integer1;
      objectArray0[5] = (Object) integer1;
      objectArray0[6] = (Object) integer0;
      MultiKey<Object> multiKey1 = new MultiKey<Object>(objectArray0);
      multiKey1.toString();
      multiKey0.toString();
      MultiKey<Object> multiKey2 = new MultiKey<Object>(multiKey1, objectArray0[2], "NbG#2$wM/2:h", integer1);
      multiKey2.hashCode();
      String[] stringArray0 = new String[4];
      stringArray0[0] = "NbG#2$wM/2:h";
      stringArray0[1] = "MultiKey[3832, 0, 0, 3832, 0, 0, 3832]";
      stringArray0[2] = "MultiKey[3832, 0]";
      multiKey1.toString();
      stringArray0[3] = "NbG#2$wM/2:h";
      MultiKey<String> multiKey3 = new MultiKey<String>(stringArray0, true);
      multiKey3.toString();
      String string0 = multiKey3.toString();
      assertEquals("MultiKey[NbG#2$wM/2:h, MultiKey[3832, 0, 0, 3832, 0, 0, 3832], MultiKey[3832, 0], NbG#2$wM/2:h]", string0);
      
      multiKey3.getKeys();
      Object object0 = multiKey2.getKey(3);
      assertEquals(0, object0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Integer integer0 = new Integer(0);
      Integer integer1 = new Integer((-10));
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integer0, integer1, integer0);
      multiKey0.toString();
      String[] stringArray0 = new String[9];
      stringArray0[0] = "MultiKey[0, -10, 0]";
      stringArray0[1] = "MultiKey[0, -10, 0]";
      stringArray0[2] = "MultiKey[0, -10, 0]";
      stringArray0[3] = "MultiKey[0, -10, 0]";
      stringArray0[4] = "MultiKey[0, -10, 0]";
      stringArray0[5] = "MultiKey[0, -10, 0]";
      stringArray0[6] = "MultiKey[0, -10, 0]";
      stringArray0[7] = "MultiKey[0, -10, 0]";
      stringArray0[8] = "MultiKey[0, -10, 0]";
      MultiKey<String> multiKey1 = new MultiKey<String>(stringArray0, false);
      // Undeclared exception!
//      try { 
        multiKey1.getKey((-10));
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // -10
//         //
//         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
//      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Integer[] integerArray0 = new Integer[7];
      int int0 = 0;
      Integer integer0 = new Integer(0);
      integerArray0[0] = integer0;
      Integer integer1 = new Integer(int0);
      integerArray0[1] = integer1;
      Integer integer2 = new Integer(723);
      integerArray0[2] = integer2;
      Integer integer3 = new Integer((-113));
      integerArray0[3] = integer3;
      Integer integer4 = new Integer((-545));
      integerArray0[4] = integer4;
      int int1 = 115;
      Integer integer5 = new Integer(115);
      integerArray0[5] = integer5;
      Integer integer6 = new Integer(int1);
      integerArray0[6] = integer6;
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integerArray0);
      String string0 = multiKey0.toString();
      assertEquals("MultiKey[0, 0, 723, -113, -545, 115, 115]", string0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Object object0 = new Object();
      MultiKey<Object> multiKey0 = new MultiKey<Object>(object0, object0, "EA<tX8U6#:");
      multiKey0.toString();
      multiKey0.toString();
      String[] stringArray0 = new String[0];
      MultiKey<String> multiKey1 = new MultiKey<String>(stringArray0, true);
      multiKey1.toString();
      String string0 = multiKey1.toString();
      assertEquals("MultiKey[]", string0);
      
      multiKey1.size();
      boolean boolean0 = multiKey1.equals(object0);
      assertFalse(boolean0);
  }
}
