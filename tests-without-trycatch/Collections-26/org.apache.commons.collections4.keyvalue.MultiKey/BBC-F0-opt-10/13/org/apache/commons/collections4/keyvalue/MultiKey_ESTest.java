/*
 * This file was automatically generated by EvoSuite
 * Wed Oct 20 12:21:24 GMT 2021
 */

package org.apache.commons.collections4.keyvalue;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.lang.reflect.Array;
import org.apache.commons.collections4.keyvalue.MultiKey;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class MultiKey_ESTest extends MultiKey_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("MultiKey", "MultiKey", "MultiKey", "MultiKey", "MultiKey");
      Object object0 = new Object();
      Object object1 = new Object();
      MultiKey<Integer> multiKey1 = new MultiKey<Integer>((Integer) null, (Integer) null, (Integer) null);
      boolean boolean0 = multiKey1.equals(multiKey0);
      MultiKey<Object> multiKey2 = new MultiKey<Object>((Object) null, multiKey0);
      Object object2 = new Object();
      Integer integer0 = new Integer(1);
      boolean boolean1 = multiKey2.equals(multiKey2);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      String string0 = "MultiKey";
      MultiKey<String> multiKey0 = new MultiKey<String>("MultiKey", "MultiKey", "MultiKey", "MultiKey", "MultiKey");
      Object object0 = new Object();
      MultiKey<Integer> multiKey1 = null;
//      try {
        multiKey1 = new MultiKey<Integer>((Integer[]) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // The array of keys must not be null
//         //
//         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
//      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      MultiKey<String>[] multiKeyArray0 = (MultiKey<String>[]) Array.newInstance(MultiKey.class, 7);
      MultiKey<String> multiKey0 = new MultiKey<String>("/ZZ", "/ZZ", "/ZZ", "<&vSZx,BAGC^;S#N4P", "FeEG");
      multiKeyArray0[0] = multiKey0;
      MultiKey<String> multiKey1 = new MultiKey<String>("FeEG", "G>c'z+yjI}_*f", "/ZZ");
      multiKeyArray0[1] = multiKey1;
      MultiKey<String> multiKey2 = new MultiKey<String>("G>c'z+yjI}_*f", "/ZZ", "G>c'z+yjI}_*f");
      multiKeyArray0[2] = multiKey2;
      MultiKey<String> multiKey3 = new MultiKey<String>("z8~Q}HRAg)vY\"", "G>c'z+yjI}_*f", "/ZZ", "z8~Q}HRAg)vY\"", "");
      multiKeyArray0[3] = multiKey3;
      String[] stringArray0 = new String[0];
      MultiKey<String> multiKey4 = new MultiKey<String>(stringArray0, true);
      multiKeyArray0[4] = multiKey4;
      MultiKey<String> multiKey5 = new MultiKey<String>("<&vSZx,BAGC^;S#N4P", "K\"U6#AucE", "FeEG", "G>c'z+yjI}_*f");
      multiKeyArray0[5] = multiKey5;
      MultiKey<String> multiKey6 = new MultiKey<String>(stringArray0, true);
      multiKeyArray0[6] = multiKey6;
      MultiKey<String> multiKey7 = new MultiKey<String>("<&vSZx,BAGC^;S#N4P", "<&vSZx,BAGC^;S#N4P", "G>c'z+yjI}_*f");
      multiKey7.toString();
      MultiKey<Object> multiKey8 = new MultiKey<Object>(stringArray0);
      int int0 = multiKey8.size();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      MultiKey<Integer> multiKey0 = null;
//      try {
        multiKey0 = new MultiKey<Integer>((Integer[]) null, true);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // The array of keys must not be null
//         //
//         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
//      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      MultiKey<Object> multiKey0 = new MultiKey<Object>((Object) null, (Object) null);
      MultiKey<MultiKey<Object>> multiKey1 = new MultiKey<MultiKey<Object>>(multiKey0, multiKey0);
      multiKey1.toString();
      multiKey1.toString();
      multiKey1.toString();
      multiKey1.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.getKeys();
      multiKey0.equals("MultiKey[MultiKey[null, null], MultiKey[null, null]]");
      Integer integer0 = new Integer(2562);
      MultiKey<Integer> multiKey2 = new MultiKey<Integer>(integer0, integer0, integer0);
      multiKey2.hashCode();
      multiKey2.toString();
      multiKey0.size();
      multiKey2.equals("MultiKey[null, null]");
      multiKey1.toString();
      multiKey0.toString();
      MultiKey<String> multiKey3 = new MultiKey<String>("MultiKey[MultiKey[null, null], MultiKey[null, null]]", "");
      // Undeclared exception!
//      try { 
        multiKey3.getKey(2);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 2
//         //
//         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
//      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("", "", "MultiKey", "");
      MultiKey<String> multiKey1 = new MultiKey<String>("MultiKey", "MultiKey", "0k:=,W#8zad;", "N9g=E:", "");
      String string0 = multiKey1.toString();
      assertEquals("MultiKey[MultiKey, MultiKey, 0k:=,W#8zad;, N9g=E:, ]", string0);
      
      multiKey1.getKey(0);
      MultiKey<Object> multiKey2 = new MultiKey<Object>("MultiKey", "");
      boolean boolean0 = multiKey2.equals(multiKey0);
      assertFalse(boolean0);
      
      Object object0 = multiKey2.getKey(0);
      assertEquals("MultiKey", object0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Object[] objectArray0 = new Object[8];
      MultiKey<Object> multiKey0 = new MultiKey<Object>(objectArray0, false);
      multiKey0.getKey(0);
      objectArray0[0] = null;
      String[] stringArray0 = new String[4];
      stringArray0[0] = "+,9\"F14Aq";
      stringArray0[1] = "bs/ngw";
      stringArray0[2] = "";
      stringArray0[3] = "";
      MultiKey<String> multiKey1 = new MultiKey<String>(stringArray0);
      String string0 = multiKey1.getKey(0);
      assertEquals("+,9\"F14Aq", string0);
      
      objectArray0[1] = (Object) "+,9\"F14Aq";
      Object object0 = new Object();
      objectArray0[2] = object0;
      Object object1 = new Object();
      objectArray0[3] = object1;
      Object object2 = new Object();
      objectArray0[4] = object2;
      multiKey0.getKey(0);
      objectArray0[5] = null;
      Object object3 = new Object();
      objectArray0[6] = object3;
      multiKey0.getKey(0);
      objectArray0[7] = null;
      MultiKey<Object> multiKey2 = new MultiKey<Object>(objectArray0, false);
      assertTrue(multiKey2.equals((Object)multiKey0));
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>(")[ b*", "", ")[ b*", "vhFgQP$UDq9'\"U", "");
      Integer[] integerArray0 = new Integer[0];
      MultiKey<Integer> multiKey1 = new MultiKey<Integer>(integerArray0);
      multiKey1.getKeys();
      MultiKey<MultiKey<Integer>> multiKey2 = new MultiKey<MultiKey<Integer>>(multiKey1, multiKey1, multiKey1, multiKey1);
      multiKey1.toString();
      multiKey0.toString();
      multiKey2.hashCode();
      multiKey0.toString();
      // Undeclared exception!
//      try { 
        multiKey1.getKey((-2983));
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // -2983
//         //
//         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
//      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      String string0 = ":j=6m=Yn'}k82]!;eb";
      MultiKey<String> multiKey0 = new MultiKey<String>(":j=6m=Yn'}k82]!;eb", ":j=6m=Yn'}k82]!;eb", "MultiKey", "MultiKey");
      multiKey0.toString();
      multiKey0.toString();
      MultiKey<MultiKey<String>> multiKey1 = new MultiKey<MultiKey<String>>(multiKey0, multiKey0, multiKey0, multiKey0, multiKey0);
      multiKey1.toString();
      Integer integer0 = new Integer((-909));
      Integer integer1 = new Integer(1859);
      Integer integer2 = new Integer(0);
      MultiKey<Integer> multiKey2 = new MultiKey<Integer>(integer0, integer1, integer2);
      multiKey2.toString();
      multiKey2.equals("MultiKey[:j=6m=Yn'}k82]!;eb, :j=6m=Yn'}k82]!;eb, MultiKey, MultiKey]");
      Object object0 = new Object();
      MultiKey<Object> multiKey3 = null;
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) multiKey2;
      objectArray0[1] = (Object) integer0;
      objectArray0[2] = (Object) "MultiKey[-909, 1859, 0]";
      MultiKey<Object> multiKey4 = new MultiKey<Object>(objectArray0);
      MultiKey<Object> multiKey5 = new MultiKey<Object>(objectArray0, false);
      MultiKey<MultiKey<Object>> multiKey6 = new MultiKey<MultiKey<Object>>((MultiKey<Object>) null, (MultiKey<Object>) null, multiKey4, (MultiKey<Object>) null, multiKey5);
      // Undeclared exception!
//      try { 
        multiKey6.getKey(1859);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 1859
//         //
//         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
//      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      String[] stringArray0 = new String[7];
      stringArray0[0] = "#y0A7D]J4XCHC1";
      stringArray0[1] = "}t]S>`\"E&:vW8W0";
      stringArray0[2] = "";
      stringArray0[3] = "";
      stringArray0[4] = "";
      stringArray0[5] = "The array of keys must not be null";
      stringArray0[6] = "";
      MultiKey<String> multiKey0 = new MultiKey<String>(stringArray0, true);
      String[] stringArray1 = multiKey0.getKeys();
      assertNotSame(stringArray1, stringArray0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("", "7,l:`VHX~__R,j5", "/4jPJq@a");
      assertEquals(3, multiKey0.size());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Object[] objectArray0 = new Object[3];
      Object object0 = new Object();
      MultiKey<Object> multiKey0 = new MultiKey<Object>((Object) null, object0);
      // Undeclared exception!
//      try { 
        multiKey0.getKey(3625);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 3625
//         //
//         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
//      }
  }
}
