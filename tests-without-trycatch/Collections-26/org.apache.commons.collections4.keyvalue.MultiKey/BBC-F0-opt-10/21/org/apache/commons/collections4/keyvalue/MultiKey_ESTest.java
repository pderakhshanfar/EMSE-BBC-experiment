/*
 * This file was automatically generated by EvoSuite
 * Fri Oct 22 17:29:49 GMT 2021
 */

package org.apache.commons.collections4.keyvalue;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.collections4.keyvalue.MultiKey;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class MultiKey_ESTest extends MultiKey_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Integer integer0 = new Integer((-10));
      MultiKey<Object> multiKey0 = new MultiKey<Object>(integer0, integer0, integer0, integer0);
      Integer[] integerArray0 = new Integer[0];
      MultiKey<Integer> multiKey1 = new MultiKey<Integer>(integerArray0);
      int int0 = multiKey1.size();
      MultiKey<String> multiKey2 = new MultiKey<String>("", "", (String) null, "n", "The array of keys must not be null");
      int int1 = multiKey2.size();
      assertFalse(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("5e", "5e", "");
      boolean boolean0 = multiKey0.equals(multiKey0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("H{(K", "\"; S;YkCdUG", "\"; S;YkCdUG");
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) "H{(K";
      objectArray0[1] = (Object) multiKey0;
      objectArray0[2] = (Object) "\"; S;YkCdUG";
      objectArray0[3] = (Object) multiKey0;
      objectArray0[4] = (Object) "\"; S;YkCdUG";
      objectArray0[5] = (Object) multiKey0;
      objectArray0[6] = (Object) multiKey0;
      objectArray0[7] = (Object) "\"; S;YkCdUG";
      objectArray0[8] = (Object) "\"; S;YkCdUG";
      MultiKey<Object> multiKey1 = new MultiKey<Object>(objectArray0);
      MultiKey<Object> multiKey2 = new MultiKey<Object>(objectArray0);
      boolean boolean0 = multiKey1.equals(multiKey2);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("\"; S;YkCdUG", "\"; S;YkCdUG", "\"; S;YkCdUG", "\"; S;YkCdUG", "\"; S;YkCdUG");
      Integer[] integerArray0 = new Integer[0];
      MultiKey<Integer> multiKey1 = new MultiKey<Integer>(integerArray0, true);
      Integer[] integerArray1 = multiKey1.getKeys();
      assertNotSame(integerArray0, integerArray1);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      String[] stringArray0 = new String[12];
      stringArray0[9] = "";
      stringArray0[1] = "";
      stringArray0[2] = "";
      stringArray0[3] = "S=M}(QSqcf'{";
      stringArray0[4] = "";
      MultiKey<String> multiKey0 = new MultiKey<String>("", "");
      Object object0 = new Object();
      Object object1 = new Object();
      MultiKey<Object> multiKey1 = new MultiKey<Object>(object0, object1, "");
      MultiKey<Object> multiKey2 = new MultiKey<Object>(multiKey0, multiKey1);
      MultiKey<Object> multiKey3 = new MultiKey<Object>(stringArray0);
      multiKey0.equals(object0);
      MultiKey<Object> multiKey4 = new MultiKey<Object>(multiKey1, "", "", multiKey0);
      boolean boolean0 = multiKey4.equals("");
      boolean boolean1 = multiKey3.equals((Object) null);
      assertFalse(multiKey3.equals((Object)multiKey4));
      assertFalse(boolean1);
      
      MultiKey<String> multiKey5 = new MultiKey<String>("", "");
      boolean boolean2 = multiKey0.equals(multiKey5);
      assertFalse(boolean2 == boolean0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("Ag+s=", "Ag+s=", "H{(K", (String) null, "w&A");
      String[] stringArray0 = new String[6];
      stringArray0[0] = "Ag+s=";
      stringArray0[1] = null;
      stringArray0[2] = "w&A";
      stringArray0[3] = "";
      stringArray0[4] = "H{(K";
      stringArray0[5] = null;
      MultiKey<String> multiKey1 = new MultiKey<String>(stringArray0);
      multiKey1.toString();
      String string0 = "G-.O5{H";
      MultiKey<String> multiKey2 = new MultiKey<String>("H{(K", "vl$UP,");
      MultiKey<String> multiKey3 = new MultiKey<String>(stringArray0);
      multiKey3.getKey(1);
      MultiKey<Object> multiKey4 = new MultiKey<Object>((Object[]) stringArray0, true);
      Integer integer0 = new Integer(1);
      Integer integer1 = new Integer(4);
      MultiKey<Integer> multiKey5 = new MultiKey<Integer>(integer0, integer1, integer0, integer0, integer0);
      MultiKey<MultiKey<Integer>> multiKey6 = new MultiKey<MultiKey<Integer>>(multiKey5, multiKey5, multiKey5);
      // Undeclared exception!
//      try { 
        multiKey6.getKey((-1212));
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // -1212
//         //
//         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
//      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("r8w#3/*YX9pwEUR]i", "r8w#3/*YX9pwEUR]i", "r8w#3/*YX9pwEUR]i", "r8w#3/*YX9pwEUR]i");
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) "r8w#3/*YX9pwEUR]i";
      objectArray0[1] = (Object) multiKey0;
      objectArray0[2] = (Object) multiKey0;
      objectArray0[3] = (Object) multiKey0;
      objectArray0[4] = (Object) "r8w#3/*YX9pwEUR]i";
      multiKey0.getKey(0);
      objectArray0[5] = (Object) "r8w#3/*YX9pwEUR]i";
      objectArray0[6] = (Object) multiKey0;
      MultiKey<Object> multiKey1 = new MultiKey<Object>(objectArray0);
      Integer integer0 = new Integer(0);
      boolean boolean0 = multiKey0.equals(integer0);
      assertFalse(boolean0);
      
      Integer integer1 = new Integer((-222));
      Integer integer2 = new Integer((-157));
      Integer integer3 = new Integer((-157));
      Integer integer4 = new Integer(1427);
      Integer integer5 = new Integer((-1));
      Integer[] integerArray0 = new Integer[3];
      integerArray0[0] = integer4;
      integerArray0[1] = integer3;
      integerArray0[2] = integer2;
      MultiKey<Integer> multiKey2 = new MultiKey<Integer>(integerArray0, false);
      MultiKey<MultiKey<Integer>> multiKey3 = new MultiKey<MultiKey<Integer>>(multiKey2, multiKey2, multiKey2, multiKey2, multiKey2);
      boolean boolean1 = multiKey1.equals(objectArray0[6]);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Object object0 = new Object();
      Integer integer0 = new Integer(2170);
      MultiKey<Object> multiKey0 = new MultiKey<Object>(object0, object0, object0, integer0, (Object) null);
      multiKey0.toString();
      MultiKey<Integer> multiKey1 = null;
//      try {
        multiKey1 = new MultiKey<Integer>((Integer[]) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // The array of keys must not be null
//         //
//         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
//      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("nxU", "");
      MultiKey<Object> multiKey1 = null;
//      try {
        multiKey1 = new MultiKey<Object>((Object[]) null, true);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // The array of keys must not be null
//         //
//         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
//      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("", ",T$h`x=crQUz]W ", "CG9", (String) null, "=xavS$}[Sm$G");
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.hashCode();
      MultiKey<MultiKey<Object>> multiKey1 = new MultiKey<MultiKey<Object>>((MultiKey<Object>) null, (MultiKey<Object>) null);
      multiKey1.toString();
      multiKey1.toString();
      multiKey1.toString();
      multiKey1.toString();
      multiKey1.toString();
      Integer[] integerArray0 = new Integer[1];
      Integer integer0 = new Integer(0);
      integerArray0[0] = integer0;
      MultiKey<Integer> multiKey2 = new MultiKey<Integer>(integerArray0);
      multiKey2.toString();
      multiKey2.toString();
      multiKey2.size();
      multiKey2.toString();
      multiKey0.toString();
      multiKey2.getKeys();
      multiKey0.toString();
      String string0 = multiKey2.toString();
      assertEquals("MultiKey[0]", string0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Object[] objectArray0 = new Object[1];
      String string0 = "cF4r-Jpri lAlcT";
      Object object0 = null;
      MultiKey<Object> multiKey0 = new MultiKey<Object>("cF4r-Jpri lAlcT", "cF4r-Jpri lAlcT", (Object) null);
      multiKey0.toString();
      // Undeclared exception!
//      try { 
        multiKey0.getKey(1379);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 1379
//         //
//         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
//      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Object object0 = new Object();
      MultiKey<Object> multiKey0 = new MultiKey<Object>(object0, object0, object0);
      String[] stringArray0 = new String[7];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "";
      stringArray0[3] = "";
      stringArray0[4] = "B@Xmgp++ |z";
      stringArray0[5] = "5O^ N/LQ-p9jMxSG1";
      stringArray0[6] = "The array of keys must not be null";
      MultiKey<String> multiKey1 = new MultiKey<String>(stringArray0);
      multiKey1.hashCode();
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      String[] stringArray0 = new String[3];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "";
      MultiKey<String> multiKey0 = new MultiKey<String>(stringArray0, false);
      Object object0 = new Object();
      MultiKey<Object> multiKey1 = new MultiKey<Object>(object0, "", multiKey0);
      multiKey0.toString();
      multiKey1.toString();
      multiKey0.toString();
      multiKey1.toString();
      boolean boolean0 = multiKey1.equals("");
      assertFalse(boolean0);
      
      MultiKey<MultiKey<Object>> multiKey2 = new MultiKey<MultiKey<Object>>(multiKey1, multiKey1, multiKey1, multiKey1, multiKey1);
      int int0 = multiKey2.size();
      Integer[] integerArray0 = new Integer[4];
      Integer integer0 = new Integer(1697);
      multiKey0.toString();
      integerArray0[0] = integer0;
      Integer integer1 = new Integer((-3249));
      integerArray0[1] = integer1;
      Integer integer2 = new Integer(1314);
      integerArray0[2] = integer2;
      Integer integer3 = new Integer(89);
      integerArray0[3] = integer3;
      MultiKey<Integer> multiKey3 = new MultiKey<Integer>(integerArray0, false);
      String string0 = multiKey3.toString();
      assertEquals("MultiKey[1697, -3249, 1314, 89]", string0);
      
      int int1 = multiKey3.hashCode();
      assertFalse(int1 == int0);
      
      multiKey1.getKey(0);
      int int2 = multiKey1.size();
      int int3 = multiKey0.hashCode();
      assertFalse(int3 == int2);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Object[] objectArray0 = new Object[2];
      MultiKey<String> multiKey0 = new MultiKey<String>("r8w#3/*YX9pwEUR]i", "");
      MultiKey<Object> multiKey1 = new MultiKey<Object>(multiKey0, "");
      // Undeclared exception!
//      try { 
        multiKey1.getKey(843);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 843
//         //
//         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
//      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Object object0 = new Object();
      Integer integer0 = new Integer((-413));
      MultiKey<Object> multiKey0 = new MultiKey<Object>(object0, object0, integer0, integer0, object0);
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      String string0 = multiKey0.toString();
      multiKey0.hashCode();
      MultiKey<String> multiKey1 = new MultiKey<String>("", "The array of keys must not be null", "", "MultiKey[java.lang.Object@5d9e14d3, java.lang.Object@5d9e14d3, -413, -413, java.lang.Object@5d9e14d3]", "MultiKey[java.lang.Object@5d9e14d3, java.lang.Object@5d9e14d3, -413, -413, java.lang.Object@5d9e14d3]");
      String string1 = multiKey1.toString();
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Object[] objectArray0 = new Object[6];
      MultiKey<String> multiKey0 = new MultiKey<String>("HHA[?dm8>c3AA){m", "HHA[?dm8>c3AA){m", "MmC(qsH|e", "", "~0%o&kh");
      multiKey0.getKey(0);
      objectArray0[0] = (Object) "HHA[?dm8>c3AA){m";
      Integer integer0 = new Integer(0);
      Integer integer1 = new Integer((-749));
      Integer integer2 = new Integer((-1426));
      MultiKey<Integer> multiKey1 = new MultiKey<Integer>(integer0, integer1, integer2, integer1);
      // Undeclared exception!
//      try { 
        multiKey1.getKey(5);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 5
//         //
//         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
//      }
  }
}
