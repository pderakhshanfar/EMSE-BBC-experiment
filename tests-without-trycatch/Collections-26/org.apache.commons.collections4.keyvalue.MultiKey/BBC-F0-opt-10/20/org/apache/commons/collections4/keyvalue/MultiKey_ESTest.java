/*
 * This file was automatically generated by EvoSuite
 * Wed Oct 20 12:39:42 GMT 2021
 */

package org.apache.commons.collections4.keyvalue;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.lang.reflect.Array;
import org.apache.commons.collections4.keyvalue.MultiKey;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class MultiKey_ESTest extends MultiKey_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Object object0 = new Object();
      MultiKey<Object> multiKey0 = new MultiKey<Object>(object0, object0, object0);
      boolean boolean0 = multiKey0.equals(multiKey0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      MultiKey<Object>[] multiKeyArray0 = (MultiKey<Object>[]) Array.newInstance(MultiKey.class, 0);
      MultiKey<MultiKey<Object>> multiKey0 = new MultiKey<MultiKey<Object>>(multiKeyArray0, false);
      multiKey0.getKeys();
      int int0 = (-1);
      String string0 = "N;+};]";
      String string1 = "ay9%\\";
      MultiKey<String> multiKey1 = new MultiKey<String>("N;+};]", "ay9%", "N;+};]");
      MultiKey<MultiKey<String>> multiKey2 = new MultiKey<MultiKey<String>>(multiKey1, multiKey1, multiKey1, multiKey1, multiKey1);
      // Undeclared exception!
//      try { 
        multiKey2.getKey((-1));
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // -1
//         //
//         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
//      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Integer integer0 = new Integer(1106);
      String[] stringArray0 = new String[3];
      stringArray0[0] = "";
      stringArray0[1] = "-*i^,@_wjp7D";
      stringArray0[2] = "$b6sn`";
      MultiKey<String> multiKey0 = new MultiKey<String>(stringArray0, true);
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.getKey(0);
      MultiKey<Object> multiKey1 = new MultiKey<Object>((Object[]) stringArray0, false);
      boolean boolean0 = multiKey0.equals(multiKey1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      MultiKey<Integer> multiKey0 = null;
//      try {
        multiKey0 = new MultiKey<Integer>((Integer[]) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // The array of keys must not be null
//         //
//         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
//      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      MultiKey<Object> multiKey0 = new MultiKey<Object>(objectArray0);
      multiKey0.toString();
      String string0 = multiKey0.toString();
      assertEquals("MultiKey[]", string0);
      
      int int0 = multiKey0.size();
      MultiKey<String> multiKey1 = new MultiKey<String>("", "", "");
      MultiKey<MultiKey<String>> multiKey2 = new MultiKey<MultiKey<String>>(multiKey1, multiKey1, multiKey1, multiKey1, multiKey1);
      multiKey2.size();
      Integer integer0 = new Integer(5);
      MultiKey<Integer> multiKey3 = new MultiKey<Integer>(integer0, integer0);
      int int1 = multiKey3.hashCode();
      assertTrue(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Integer integer0 = new Integer(0);
      Integer integer1 = new Integer(1);
      Integer integer2 = new Integer((-327));
      Integer integer3 = new Integer(2509);
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integer0, integer1, integer2, integer3, integer2);
      Integer integer4 = new Integer(2509);
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) integer0;
      objectArray0[1] = (Object) integer0;
      objectArray0[2] = (Object) integer1;
      objectArray0[3] = (Object) integer1;
      objectArray0[4] = (Object) integer2;
      objectArray0[5] = (Object) integer3;
      objectArray0[6] = (Object) integer4;
      MultiKey<Object> multiKey1 = new MultiKey<Object>(objectArray0);
      // Undeclared exception!
//      try { 
        multiKey1.getKey(2509);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 2509
//         //
//         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
//      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Object object0 = new Object();
      MultiKey<Object> multiKey0 = new MultiKey<Object>(object0, object0, object0, "");
      multiKey0.toString();
      Object object1 = new Object();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.equals(object1);
      multiKey0.getKeys();
      multiKey0.equals("MultiKey[java.lang.Object@f3630ba, java.lang.Object@f3630ba, java.lang.Object@f3630ba, ]");
      multiKey0.toString();
      Object object2 = new Object();
      boolean boolean0 = multiKey0.equals(object2);
      assertFalse(boolean0);
      
      MultiKey<Object> multiKey1 = new MultiKey<Object>(object0, "MultiKey[java.lang.Object@f3630ba, java.lang.Object@f3630ba, java.lang.Object@f3630ba, ]");
      boolean boolean1 = multiKey0.equals(multiKey1);
      assertFalse(boolean1);
      
      multiKey0.hashCode();
      multiKey1.toString();
      MultiKey<Object>[] multiKeyArray0 = (MultiKey<Object>[]) Array.newInstance(MultiKey.class, 2);
      multiKeyArray0[0] = multiKey1;
      multiKeyArray0[1] = multiKey1;
      MultiKey<MultiKey<Object>> multiKey2 = new MultiKey<MultiKey<Object>>(multiKeyArray0, false);
      multiKey2.size();
      multiKey1.size();
      assertFalse(multiKey1.equals((Object)multiKey0));
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      MultiKey<MultiKey<String>> multiKey0 = null;
//      try {
        multiKey0 = new MultiKey<MultiKey<String>>((MultiKey<String>[]) null, true);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // The array of keys must not be null
//         //
//         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
//      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("0g+^JYo8", "org.apache.commons.collections4.keyvalue.MultiKey");
      multiKey0.equals("");
      MultiKey<String> multiKey1 = new MultiKey<String>("", "egTC<Js", "pK_`Ac", "org.apache.commons.collections4.keyvalue.MultiKey");
      Integer[] integerArray0 = new Integer[7];
      Integer integer0 = new Integer((-2415));
      integerArray0[0] = integer0;
      Integer integer1 = new Integer((-434));
      integerArray0[1] = integer1;
      Integer integer2 = new Integer((-3228));
      integerArray0[2] = integer2;
      Integer integer3 = new Integer((-2415));
      integerArray0[3] = integer3;
      Integer integer4 = new Integer((int) integerArray0[0]);
      integerArray0[4] = integer4;
      Integer integer5 = new Integer(1012);
      integerArray0[5] = integer5;
      Integer integer6 = new Integer((-5784));
      integerArray0[6] = integer6;
      MultiKey<Integer> multiKey2 = new MultiKey<Integer>(integerArray0, false);
      MultiKey<Object> multiKey3 = new MultiKey<Object>("org.apache.commons.collections4.keyvalue.MultiKey", "", multiKey1, multiKey1, multiKey2);
      // Undeclared exception!
//      try { 
        multiKey3.getKey(361);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 361
//         //
//         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
//      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Integer integer0 = new Integer(397);
      MultiKey<Object> multiKey0 = new MultiKey<Object>((Object) null, integer0);
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.size();
      String[] stringArray0 = new String[6];
      stringArray0[0] = "MultiKey[null, 397]";
      stringArray0[1] = "MultiKey[null, 397]";
      stringArray0[2] = "VJf^}eBQ-NQy+O<XWt";
      stringArray0[3] = "MultiKey[null, 397]";
      stringArray0[4] = "";
      stringArray0[5] = "MultiKey[null, 397]";
      MultiKey<String> multiKey1 = new MultiKey<String>(stringArray0, true);
      multiKey1.getKeys();
      Integer integer1 = new Integer(2);
      Integer integer2 = new Integer(2);
      int int0 = 3;
      Integer integer3 = new Integer(3);
      MultiKey<Integer> multiKey2 = new MultiKey<Integer>(integer0, integer1, integer2, integer3);
      Integer integer4 = new Integer(3);
      MultiKey<String>[] multiKeyArray0 = (MultiKey<String>[]) Array.newInstance(MultiKey.class, 2);
      multiKeyArray0[0] = multiKey1;
      multiKeyArray0[1] = multiKey1;
      MultiKey<MultiKey<String>> multiKey3 = new MultiKey<MultiKey<String>>(multiKeyArray0, true);
      // Undeclared exception!
//      try { 
        multiKey3.getKey(397);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 397
//         //
//         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
//      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("The array of keys must not be null", "+u9Tbt*ra\"ZmBF9u:9f", "+u9Tbt*ra\"ZmBF9u:9f", "Go@?%ud");
      multiKey0.toString();
      multiKey0.toString();
      MultiKey<String> multiKey1 = new MultiKey<String>("MultiKey[The array of keys must not be null, +u9Tbt*ra\"ZmBF9u:9f, +u9Tbt*ra\"ZmBF9u:9f, Go@?%ud]", "+u9Tbt*ra\"ZmBF9u:9f");
      multiKey1.toString();
      int int0 = (-1);
      Integer integer0 = new Integer((-1));
      MultiKey<Object> multiKey2 = new MultiKey<Object>(multiKey1, multiKey1, (Object) null, integer0);
      multiKey2.hashCode();
      MultiKey<Object>[] multiKeyArray0 = (MultiKey<Object>[]) Array.newInstance(MultiKey.class, 6);
      multiKeyArray0[0] = multiKey2;
      multiKeyArray0[1] = multiKey2;
      multiKeyArray0[2] = multiKey2;
      multiKeyArray0[3] = multiKey2;
      multiKeyArray0[4] = multiKey2;
      multiKeyArray0[5] = multiKey2;
      multiKey2.toString();
      MultiKey<MultiKey<Object>> multiKey3 = new MultiKey<MultiKey<Object>>(multiKeyArray0, true);
      Integer integer1 = new Integer((-1));
      multiKey3.toString();
      MultiKey<Integer> multiKey4 = new MultiKey<Integer>(integer0, integer1);
      // Undeclared exception!
//      try { 
        multiKey4.getKey((-1));
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // -1
//         //
//         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
//      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Object[] objectArray0 = new Object[5];
      Object object0 = new Object();
      objectArray0[0] = object0;
      objectArray0[1] = (Object) null;
      objectArray0[2] = (Object) null;
      objectArray0[3] = (Object) null;
      objectArray0[4] = (Object) null;
      MultiKey<Object> multiKey0 = new MultiKey<Object>(objectArray0, false);
      Integer integer0 = new Integer(0);
      MultiKey<Object> multiKey1 = new MultiKey<Object>((Object) null, multiKey0, object0, integer0);
      multiKey1.getKey(0);
      MultiKey<Object> multiKey2 = new MultiKey<Object>((Object) null, (Object) null, objectArray0[1]);
      assertFalse(multiKey2.equals((Object)multiKey1));
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Object[] objectArray0 = new Object[8];
      String string0 = "d*$<TpFX3@\"zLE";
      MultiKey<String> multiKey0 = new MultiKey<String>("d*$<TpFX3@\"zLE", (String) null);
      MultiKey<Object> multiKey1 = new MultiKey<Object>(multiKey0, multiKey0, multiKey0, "d*$<TpFX3@\"zLE");
      Object object0 = multiKey1.getKey(0);
      MultiKey<Object> multiKey2 = new MultiKey<Object>(multiKey0, "d*$<TpFX3@\"zLE", object0, "d*$<TpFX3@\"zLE", "d*$<TpFX3@\"zLE");
      MultiKey<MultiKey<Object>> multiKey3 = new MultiKey<MultiKey<Object>>(multiKey2, multiKey2);
      MultiKey<Object> multiKey4 = multiKey3.getKey(0);
      objectArray0[0] = (Object) multiKey4;
      multiKey0.getKey(0);
      objectArray0[1] = (Object) "d*$<TpFX3@\"zLE";
      Object object1 = new Object();
      objectArray0[2] = object1;
      Integer integer0 = new Integer(0);
      MultiKey<Integer> multiKey5 = new MultiKey<Integer>(integer0, integer0, integer0, integer0);
      Integer integer1 = multiKey5.getKey(0);
      objectArray0[3] = (Object) integer1;
      multiKey0.getKey(0);
      objectArray0[4] = (Object) "d*$<TpFX3@\"zLE";
      MultiKey<String> multiKey6 = new MultiKey<String>("", "d*$<TpFX3@\"zLE", (String) null, "Z%g%5Z");
      int int0 = (-3180);
      // Undeclared exception!
//      try { 
        multiKey6.getKey((-3180));
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // -3180
//         //
//         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
//      }
  }
}
