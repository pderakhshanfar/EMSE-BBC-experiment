/*
 * This file was automatically generated by EvoSuite
 * Wed Oct 20 12:37:29 GMT 2021
 */

package org.apache.commons.collections4.keyvalue;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.lang.reflect.Array;
import org.apache.commons.collections4.keyvalue.MultiKey;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class MultiKey_ESTest extends MultiKey_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("\"AtqD0W5U4^h1g.", "\"AtqD0W5U4^h1g.");
      String[] stringArray0 = new String[0];
      MultiKey<String> multiKey1 = new MultiKey<String>(stringArray0);
      MultiKey<MultiKey<String>> multiKey2 = new MultiKey<MultiKey<String>>(multiKey0, multiKey0, multiKey0, multiKey1);
      Object object0 = multiKey2.getKey(0);
      boolean boolean0 = multiKey0.equals(object0);
      assertTrue(boolean0);
      assertFalse(multiKey1.equals((Object)multiKey0));
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Object[] objectArray0 = new Object[5];
      Object object0 = new Object();
      MultiKey<Object> multiKey0 = new MultiKey<Object>(object0, object0);
      multiKey0.hashCode();
      MultiKey<MultiKey<Object>> multiKey1 = new MultiKey<MultiKey<Object>>(multiKey0, multiKey0, multiKey0);
      Object object1 = new Object();
      MultiKey<Object> multiKey2 = new MultiKey<Object>(multiKey0, multiKey0, object1);
      multiKey2.toString();
      multiKey2.toString();
      boolean boolean0 = multiKey1.equals(multiKey2);
      assertFalse(boolean0);
      
      MultiKey<String> multiKey3 = new MultiKey<String>("The array of keys must not be null", "5", "The array of keys must not be null", "5", "The array of keys must not be null");
      String string0 = multiKey3.toString();
      assertEquals("MultiKey[The array of keys must not be null, 5, The array of keys must not be null, 5, The array of keys must not be null]", string0);
      
      multiKey3.size();
      multiKey2.getKeys();
      Integer[] integerArray0 = new Integer[9];
      Integer integer0 = new Integer(1314);
      integerArray0[0] = integer0;
      Integer integer1 = new Integer(0);
      MultiKey<String> multiKey4 = new MultiKey<String>("MultiKey[MultiKey[java.lang.Object@50fb5d7b, java.lang.Object@50fb5d7b], MultiKey[java.lang.Object@50fb5d7b, java.lang.Object@50fb5d7b], java.lang.Object@6110563b]", ":Vu^%t", "5", "The array of keys must not be null");
      assertFalse(multiKey4.equals((Object)multiKey3));
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>((String) null, (String) null);
      MultiKey<String> multiKey1 = new MultiKey<String>((String) null, (String) null);
      boolean boolean0 = multiKey1.equals(multiKey0);
      assertTrue(boolean0);
      
      Object[] objectArray0 = new Object[0];
      MultiKey<Object> multiKey2 = new MultiKey<Object>(objectArray0);
      String string0 = multiKey2.toString();
      assertEquals("MultiKey[]", string0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("qcmq>~)G!nL.5FH", "", "", "", "^Nim0/\"i#qM");
      Integer integer0 = new Integer(0);
      Integer integer1 = new Integer((-1));
      Integer integer2 = new Integer(1);
      Integer integer3 = new Integer(1);
      MultiKey<Integer> multiKey1 = new MultiKey<Integer>(integer0, integer1, integer2, integer3);
      multiKey1.equals("qcmq>~)G!nL.5FH");
      multiKey1.toString();
      multiKey0.toString();
      multiKey1.toString();
      Integer integer4 = new Integer(1);
      multiKey1.equals(integer4);
      multiKey0.toString();
      multiKey0.equals("qcmq>~)G!nL.5FH");
      Integer integer5 = new Integer((-1));
      multiKey0.equals(integer5);
      Object[] objectArray0 = new Object[0];
      MultiKey<Object> multiKey2 = new MultiKey<Object>(objectArray0);
      multiKey2.toString();
      multiKey2.getKeys();
      // Undeclared exception!
//      try { 
        multiKey0.getKey((-1));
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // -1
//         //
//         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
//      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Object object0 = new Object();
      String string0 = "";
      MultiKey<String> multiKey0 = new MultiKey<String>((String) null, "", "I}[6xeW");
      multiKey0.toString();
      MultiKey<Object> multiKey1 = new MultiKey<Object>(object0, "MultiKey[null, , I}[6xeW]");
      Integer integer0 = new Integer(1);
      multiKey1.equals(integer0);
      Integer integer1 = new Integer(1);
      Integer integer2 = new Integer(1);
      Integer integer3 = new Integer(1);
      MultiKey<Integer> multiKey2 = new MultiKey<Integer>(integer3, integer0);
      MultiKey<Integer> multiKey3 = null;
//      try {
        multiKey3 = new MultiKey<Integer>((Integer[]) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // The array of keys must not be null
//         //
//         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
//      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Integer[] integerArray0 = new Integer[0];
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integerArray0, false);
      multiKey0.toString();
      MultiKey<Object> multiKey1 = new MultiKey<Object>(integerArray0);
      int int0 = multiKey1.size();
      multiKey1.toString();
      MultiKey<String> multiKey2 = new MultiKey<String>("", "", (String) null, "The array of keys must not be null", "");
      MultiKey<MultiKey<String>> multiKey3 = new MultiKey<MultiKey<String>>(multiKey2, multiKey2);
      int int1 = multiKey3.size();
      assertFalse(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Object[] objectArray0 = new Object[1];
      Object object0 = new Object();
      objectArray0[0] = object0;
      MultiKey<Object> multiKey0 = new MultiKey<Object>(objectArray0, false);
      multiKey0.hashCode();
      MultiKey<MultiKey<Object>> multiKey1 = new MultiKey<MultiKey<Object>>(multiKey0, multiKey0, multiKey0);
      Object object1 = new Object();
      MultiKey<Object> multiKey2 = new MultiKey<Object>(object1, (Object) null);
      multiKey2.toString();
      multiKey2.toString();
      boolean boolean0 = multiKey1.equals(multiKey2);
      assertFalse(boolean0);
      
      MultiKey<String> multiKey3 = new MultiKey<String>("The array of keys must not be null", "5", "The array of keys must not be null", "5", "The array of keys must not be null");
      multiKey3.size();
      multiKey2.getKeys();
      Integer[] integerArray0 = new Integer[9];
      Integer integer0 = new Integer(1314);
      integerArray0[0] = integer0;
      Integer integer1 = new Integer(0);
      integerArray0[1] = integer1;
      Integer integer2 = new Integer(1314);
      integerArray0[2] = integer2;
      Integer integer3 = new Integer(5);
      integerArray0[3] = integer3;
      Integer integer4 = new Integer(0);
      integerArray0[4] = integer4;
      Integer integer5 = new Integer(5);
      integerArray0[5] = integer5;
      Integer integer6 = new Integer((int) integerArray0[2]);
      integerArray0[6] = integer6;
      Integer integer7 = new Integer((int) integerArray0[0]);
      integerArray0[7] = integer7;
      Integer integer8 = new Integer(5);
      integerArray0[8] = integer8;
      MultiKey<Integer> multiKey4 = new MultiKey<Integer>(integerArray0);
      String string0 = multiKey4.toString();
      assertEquals("MultiKey[1314, 0, 1314, 5, 0, 5, 1314, 1314, 5]", string0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      MultiKey<String> multiKey0 = null;
//      try {
        multiKey0 = new MultiKey<String>((String[]) null, true);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // The array of keys must not be null
//         //
//         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
//      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Object[] objectArray0 = new Object[7];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Integer integer0 = new Integer(0);
      MultiKey<Object> multiKey0 = new MultiKey<Object>((Object) null, object0, integer0, (Object) null, (Object) null);
      multiKey0.getKey(0);
      objectArray0[1] = null;
      Object object1 = new Object();
      objectArray0[2] = object1;
      String[] stringArray0 = new String[5];
      stringArray0[0] = null;
      stringArray0[1] = null;
      stringArray0[2] = null;
      stringArray0[3] = null;
      stringArray0[4] = null;
      MultiKey<String> multiKey1 = new MultiKey<String>(stringArray0, true);
      multiKey1.getKey(0);
      objectArray0[3] = (Object) null;
      // Undeclared exception!
//      try { 
        multiKey1.getKey((-498));
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // -498
//         //
//         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
//      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("", "", "", "");
      Object object0 = new Object();
      MultiKey<String> multiKey1 = new MultiKey<String>("", "4nt", "");
      MultiKey<Object> multiKey2 = new MultiKey<Object>("", object0, multiKey1);
      boolean boolean0 = multiKey2.equals(multiKey1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      String[] stringArray0 = new String[9];
      stringArray0[0] = "";
      stringArray0[1] = "dj/,QA}ZxHAERW(u.Ax";
      stringArray0[2] = "/\"H!pxI]*l";
      stringArray0[3] = "X1Ku1N$";
      stringArray0[4] = "WuTN7Vo1<+#}NB!P4[M";
      stringArray0[5] = "|H;wt@(no";
      stringArray0[6] = "95dQuh%'K,";
      stringArray0[7] = "a&:3q`Omh";
      stringArray0[8] = "";
      MultiKey<String> multiKey0 = new MultiKey<String>(stringArray0, true);
      Integer[] integerArray0 = new Integer[1];
      int int0 = 5;
      Integer integer0 = new Integer(5);
      integerArray0[0] = integer0;
      MultiKey<Integer> multiKey1 = new MultiKey<Integer>(integerArray0, true);
      multiKey1.toString();
      multiKey1.equals("a&:3q`Omh");
      Integer integer1 = new Integer(0);
      Object object0 = new Object();
      MultiKey<Object> multiKey2 = new MultiKey<Object>(integer1, "dj/,QA}ZxHAERW(u.Ax", "95dQuh%'K,", "", object0);
      multiKey2.toString();
      multiKey2.equals((Object) null);
      // Undeclared exception!
//      try { 
        multiKey2.getKey(int0);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 5
//         //
//         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
//      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Object[] objectArray0 = new Object[7];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      Integer integer0 = new Integer((-1));
      int int0 = (-5128);
      Integer integer1 = new Integer((-5128));
      Integer integer2 = new Integer((-5128));
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integer0, integer0, integer1, integer2);
      // Undeclared exception!
//      try { 
        multiKey0.getKey((-5128));
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // -5128
//         //
//         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
//      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Integer[] integerArray0 = new Integer[8];
      int int0 = 0;
      Integer integer0 = new Integer(0);
      integerArray0[0] = integer0;
      Integer integer1 = new Integer(0);
      integerArray0[1] = integer1;
      Integer integer2 = new Integer(0);
      integerArray0[2] = integer2;
      Integer integer3 = new Integer(int0);
      integerArray0[3] = integer3;
      Integer integer4 = new Integer(int0);
      integerArray0[4] = integer4;
      Integer integer5 = new Integer(int0);
      integerArray0[5] = integer5;
      Integer integer6 = new Integer(0);
      integerArray0[6] = integer6;
      Integer integer7 = new Integer(0);
      integerArray0[7] = integer7;
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integerArray0);
      MultiKey<Object> multiKey1 = new MultiKey<Object>(multiKey0, int0, int0, (Object) null, "");
      int int1 = multiKey1.hashCode();
      assertFalse(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      String[] stringArray0 = new String[0];
      MultiKey<String> multiKey0 = new MultiKey<String>(stringArray0, false);
      // Undeclared exception!
//      try { 
        multiKey0.getKey(0);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 0
//         //
//         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
//      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      MultiKey<Object>[] multiKeyArray0 = (MultiKey<Object>[]) Array.newInstance(MultiKey.class, 5);
      MultiKey<String> multiKey0 = new MultiKey<String>("org.apache.commons.collections4.keyvalue.MultiKey", "org.apache.commons.collections4.keyvalue.MultiKey", "org.apache.commons.collections4.keyvalue.MultiKey");
      multiKey0.getKey(0);
      MultiKey<Object> multiKey1 = new MultiKey<Object>((Object) null, "org.apache.commons.collections4.keyvalue.MultiKey");
      multiKeyArray0[0] = multiKey1;
      MultiKey<String> multiKey2 = new MultiKey<String>("org.apache.commons.collections4.keyvalue.MultiKey", "", "");
      multiKey2.getKey(0);
      Object object0 = new Object();
      Integer integer0 = new Integer((-214));
      Integer integer1 = new Integer(0);
      MultiKey<Integer> multiKey3 = new MultiKey<Integer>(integer0, integer1);
      MultiKey<Object> multiKey4 = new MultiKey<Object>((Object[]) multiKeyArray0, true);
      MultiKey<Object> multiKey5 = new MultiKey<Object>("org.apache.commons.collections4.keyvalue.MultiKey", object0, multiKey3, multiKey4, integer0);
      multiKeyArray0[1] = multiKey5;
      MultiKey<Object> multiKey6 = new MultiKey<Object>(multiKeyArray0);
      multiKeyArray0[2] = multiKey6;
      Integer integer2 = new Integer(0);
      Integer integer3 = new Integer((-214));
      MultiKey<Object> multiKey7 = new MultiKey<Object>(integer2, integer2, multiKey5, integer3, "");
      multiKeyArray0[3] = multiKey7;
      MultiKey<Object> multiKey8 = new MultiKey<Object>(multiKey7, (Object) null);
      multiKeyArray0[4] = multiKey8;
      MultiKey<MultiKey<Object>> multiKey9 = new MultiKey<MultiKey<Object>>(multiKeyArray0);
      assertEquals(5, multiKey9.size());
  }
}
