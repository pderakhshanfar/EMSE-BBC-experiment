/*
 * This file was automatically generated by EvoSuite
 * Wed Oct 13 20:44:29 GMT 2021
 */

package org.apache.commons.collections4.keyvalue;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.lang.reflect.Array;
import org.apache.commons.collections4.keyvalue.MultiKey;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class MultiKey_ESTest extends MultiKey_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("", "", "");
      MultiKey<String> multiKey1 = new MultiKey<String>((String) null, "", (String) null, (String) null, "8|z3@\"f");
      MultiKey<MultiKey<String>> multiKey2 = new MultiKey<MultiKey<String>>(multiKey0, multiKey0, multiKey0, multiKey0, multiKey0);
      Object object0 = multiKey2.getKey(3);
      boolean boolean0 = multiKey0.equals(object0);
      assertTrue(boolean0);
      assertFalse(multiKey0.equals((Object)multiKey1));
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("", "", "b,vT+a!E");
      multiKey0.toString();
      Integer integer0 = new Integer(19);
      Integer integer1 = new Integer(19);
      MultiKey<String> multiKey1 = null;
//      try {
        multiKey1 = new MultiKey<String>((String[]) null, false);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // The array of keys must not be null
//         //
//         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
//      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Object[] objectArray0 = new Object[2];
      MultiKey<Object> multiKey0 = new MultiKey<Object>(objectArray0, true);
      MultiKey<MultiKey<Object>> multiKey1 = new MultiKey<MultiKey<Object>>(multiKey0, multiKey0, multiKey0);
      MultiKey<String> multiKey2 = new MultiKey<String>("The array of keys must not be null", "The array of keys must not be null", "", "tr", "tr");
      multiKey0.toString();
      multiKey2.size();
      Integer[] integerArray0 = new Integer[4];
      Integer integer0 = new Integer(5);
      integerArray0[0] = integer0;
      Integer integer1 = new Integer(15);
      integerArray0[1] = integer1;
      Integer integer2 = new Integer(1597);
      integerArray0[2] = integer2;
      Integer integer3 = new Integer(5);
      integerArray0[3] = integer3;
      MultiKey<Integer> multiKey3 = new MultiKey<Integer>(integerArray0);
      MultiKey<Integer> multiKey4 = new MultiKey<Integer>(integerArray0);
      multiKey4.toString();
      multiKey3.hashCode();
      String string0 = multiKey0.toString();
      assertEquals("MultiKey[null, null]", string0);
      
      multiKey0.hashCode();
      MultiKey<String> multiKey5 = new MultiKey<String>("", "~0AD*~/m8qD4", "MultiKey[null, null]");
      MultiKey<Object> multiKey6 = new MultiKey<Object>("L2B]4g~7]", multiKey5);
      boolean boolean0 = multiKey2.equals(multiKey6);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      MultiKey<Object> multiKey0 = new MultiKey<Object>(objectArray0, true);
      int int0 = multiKey0.size();
      Integer integer0 = new Integer(0);
      MultiKey<Integer> multiKey1 = new MultiKey<Integer>(integer0, integer0);
      multiKey1.equals("f1");
      String[] stringArray0 = new String[3];
      stringArray0[0] = "f1";
      stringArray0[1] = "The array of keys must not be null";
      stringArray0[2] = "f1";
      MultiKey<String> multiKey2 = new MultiKey<String>(stringArray0, true);
      MultiKey<Object> multiKey3 = new MultiKey<Object>("f1", multiKey2, (Object) null, "The array of keys must not be null");
      multiKey3.getKey(0);
      boolean boolean0 = multiKey0.equals("f1");
      assertFalse(boolean0);
      
      multiKey0.getKeys();
      MultiKey<Object>[] multiKeyArray0 = (MultiKey<Object>[]) Array.newInstance(MultiKey.class, 0);
      MultiKey<MultiKey<Object>> multiKey4 = new MultiKey<MultiKey<Object>>(multiKeyArray0, false);
      int int1 = multiKey4.hashCode();
      assertTrue(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      MultiKey<Object> multiKey0 = null;
//      try {
        multiKey0 = new MultiKey<Object>((Object[]) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // The array of keys must not be null
//         //
//         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
//      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("MI'@`A9X_Q,3N+", "MI'@`A9X_Q,3N+", "");
      multiKey0.getKey(0);
      multiKey0.toString();
      MultiKey<String> multiKey1 = new MultiKey<String>("", "MI'@`A9X_Q,3N+");
      MultiKey<Object> multiKey2 = new MultiKey<Object>("MI'@`A9X_Q,3N+", "MI'@`A9X_Q,3N+", multiKey1, "", multiKey0);
      multiKey2.getKey(0);
      multiKey2.toString();
      Integer integer0 = new Integer(0);
      MultiKey<Object> multiKey3 = new MultiKey<Object>("MI'@`A9X_Q,3N+", "MI'@`A9X_Q,3N+", integer0, "MI'@`A9X_Q,3N+", multiKey1);
      Integer integer1 = new Integer((-1174));
      Integer integer2 = new Integer(671);
      MultiKey<Integer> multiKey4 = new MultiKey<Integer>(integer1, integer2, integer2, integer0);
      Integer integer3 = multiKey4.getKey(0);
      assertEquals((-1174), (int)integer3);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Object[] objectArray0 = new Object[1];
      MultiKey<Object> multiKey0 = new MultiKey<Object>(objectArray0, false);
      multiKey0.getKey(0);
      objectArray0[0] = null;
      MultiKey<Object> multiKey1 = new MultiKey<Object>(objectArray0);
      Object[] objectArray1 = multiKey1.getKeys();
      assertNotSame(objectArray0, objectArray1);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Integer integer0 = new Integer(0);
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integer0, integer0);
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.hashCode();
      MultiKey<Object> multiKey1 = new MultiKey<Object>("MultiKey[0, 0]", "MultiKey[0, 0]", (Object) null, integer0, multiKey0);
      String string0 = "";
      Object object0 = new Object();
      MultiKey<Object>[] multiKeyArray0 = (MultiKey<Object>[]) Array.newInstance(MultiKey.class, 9);
      multiKeyArray0[0] = multiKey1;
      Integer integer1 = new Integer(0);
      Integer integer2 = new Integer(0);
      MultiKey<Object> multiKey2 = new MultiKey<Object>(multiKey1, integer2);
      MultiKey<Object> multiKey3 = new MultiKey<Object>(integer1, "MultiKey[0, 0]", multiKey2, (Object) null, (Object) null);
      multiKeyArray0[1] = multiKey3;
      multiKeyArray0[2] = multiKey1;
      multiKeyArray0[3] = multiKey1;
      multiKeyArray0[4] = multiKey1;
      multiKeyArray0[5] = multiKey1;
      MultiKey<Object> multiKey4 = new MultiKey<Object>(multiKeyArray0);
      multiKeyArray0[6] = multiKey4;
      multiKeyArray0[7] = multiKey1;
      multiKeyArray0[8] = multiKey1;
      MultiKey<MultiKey<Object>> multiKey5 = new MultiKey<MultiKey<Object>>(multiKeyArray0, false);
      // Undeclared exception!
//      try { 
        multiKey5.getKey((-1934));
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // -1934
//         //
//         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
//      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      String string0 = "";
      MultiKey<String> multiKey0 = new MultiKey<String>("", "");
      Integer integer0 = new Integer(1);
      Integer integer1 = new Integer(1);
      int int0 = 1854;
      Integer integer2 = new Integer(1854);
      Integer integer3 = new Integer(1);
      MultiKey<Integer> multiKey1 = new MultiKey<Integer>(integer0, integer1, integer2, integer3);
      // Undeclared exception!
//      try { 
        multiKey1.getKey(2149);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 2149
//         //
//         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
//      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      String[] stringArray0 = new String[2];
      stringArray0[0] = "kaB";
      stringArray0[1] = "";
      MultiKey<String> multiKey0 = new MultiKey<String>(stringArray0);
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.hashCode();
      Integer integer0 = new Integer((-1126));
      Integer integer1 = new Integer((-2022));
      MultiKey<Integer> multiKey1 = new MultiKey<Integer>((Integer) null, (Integer) null, integer0, integer1);
      multiKey1.toString();
      Object object0 = new Object();
      multiKey1.equals(object0);
      Integer integer2 = new Integer(0);
      MultiKey<Object> multiKey2 = new MultiKey<Object>(integer2, integer2, "");
      multiKey2.toString();
      multiKey2.toString();
      multiKey2.toString();
      multiKey2.toString();
      multiKey2.toString();
      multiKey2.size();
      multiKey2.hashCode();
      multiKey0.getKeys();
      Object[] objectArray0 = multiKey2.getKeys();
      assertEquals(3, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      String[] stringArray0 = new String[5];
      stringArray0[0] = "< #3\"3_oB&Zk";
      stringArray0[1] = "";
      stringArray0[2] = "";
      stringArray0[3] = "#I0m@Ny !N";
      stringArray0[4] = "t)";
      MultiKey<String> multiKey0 = new MultiKey<String>(stringArray0);
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      int int0 = multiKey0.size();
      MultiKey<Object> multiKey1 = new MultiKey<Object>((Object[]) stringArray0, true);
      Object object0 = new Object();
      MultiKey<Object> multiKey2 = new MultiKey<Object>((Object[]) stringArray0, false);
      Object object1 = new Object();
      MultiKey<Object> multiKey3 = new MultiKey<Object>(multiKey1, object0, multiKey2, object1);
      int int1 = multiKey3.hashCode();
      assertFalse(int1 == int0);
  }
}
