/*
 * This file was automatically generated by EvoSuite
 * Wed Oct 20 12:15:09 GMT 2021
 */

package org.apache.commons.collections4.keyvalue;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.lang.reflect.Array;
import org.apache.commons.collections4.keyvalue.MultiKey;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class MultiKey_ESTest extends MultiKey_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Object object0 = new Object();
      MultiKey<Object> multiKey0 = new MultiKey<Object>(object0, object0, object0);
      Object object1 = new Object();
      boolean boolean0 = multiKey0.equals(multiKey0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("`y6H~ xWo,+/_ZoNz\"<", "`y6H~ xWo,+/_ZoNz\"<");
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) multiKey0;
      MultiKey<Object> multiKey1 = new MultiKey<Object>(objectArray0);
      MultiKey<Object> multiKey2 = new MultiKey<Object>(objectArray0);
      String string0 = multiKey2.toString();
      assertEquals("MultiKey[MultiKey[`y6H~ xWo,+/_ZoNz\"<, `y6H~ xWo,+/_ZoNz\"<]]", string0);
      
      boolean boolean0 = multiKey1.equals(multiKey2);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("", (String) null, (String) null, "n{isdPJ+h>/|o{3YS>:", "");
      Object[] objectArray0 = new Object[0];
      MultiKey<Object> multiKey1 = new MultiKey<Object>(objectArray0);
      multiKey1.getKeys();
      Integer integer0 = new Integer(1000);
      Integer integer1 = new Integer(1000);
      Integer integer2 = new Integer(1000);
      MultiKey<Integer> multiKey2 = new MultiKey<Integer>(integer0, integer1, integer2);
      int int0 = multiKey2.size();
      assertEquals(3, int0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Integer[] integerArray0 = new Integer[1];
      Integer integer0 = new Integer(1708);
      integerArray0[0] = integer0;
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integerArray0, true);
      MultiKey<MultiKey<Integer>> multiKey1 = new MultiKey<MultiKey<Integer>>(multiKey0, multiKey0);
      multiKey1.toString();
      multiKey1.toString();
      multiKey1.toString();
      String[] stringArray0 = new String[0];
      MultiKey<String> multiKey2 = new MultiKey<String>(stringArray0, true);
      multiKey2.toString();
      multiKey0.toString();
      multiKey2.toString();
      multiKey0.equals("");
      multiKey2.toString();
      multiKey2.toString();
      multiKey2.size();
      // Undeclared exception!
//      try { 
        multiKey2.getKey(1708);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 1708
//         //
//         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
//      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Integer integer0 = new Integer(935);
      Object object0 = new Object();
      Integer integer1 = new Integer(0);
      MultiKey<String> multiKey0 = new MultiKey<String>("~Z>d.$B]", "k:w9SC:V5VYJ:E*", "", "");
      Object object1 = new Object();
      MultiKey<Object> multiKey1 = new MultiKey<Object>(object0, "~Z>d.$B]", multiKey0, object1, integer0);
      MultiKey<Object> multiKey2 = new MultiKey<Object>(integer0, object0, integer1, "~Z>d.$B]", multiKey1);
      boolean boolean0 = multiKey2.equals(multiKey1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      int int0 = 1;
      Integer integer0 = new Integer(1);
      Integer integer1 = new Integer(1);
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integer0, integer0, integer1);
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      Integer integer2 = multiKey0.getKey(1);
      MultiKey<Object>[] multiKeyArray0 = (MultiKey<Object>[]) Array.newInstance(MultiKey.class, 6);
      Object object0 = new Object();
      MultiKey<Object> multiKey1 = new MultiKey<Object>("MultiKey[1, 1, 1]", integer0, multiKey0);
      MultiKey<Object> multiKey2 = new MultiKey<Object>(object0, "MultiKey[1, 1, 1]", multiKey1, multiKey1, integer2);
      multiKeyArray0[0] = multiKey2;
      boolean boolean0 = false;
      MultiKey<Integer> multiKey3 = null;
//      try {
        multiKey3 = new MultiKey<Integer>((Integer[]) null, false);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // The array of keys must not be null
//         //
//         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
//      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Object[] objectArray0 = new Object[5];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Integer integer0 = new Integer(0);
      Integer integer1 = new Integer(0);
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integer0, integer1, integer0);
      Integer[] integerArray0 = new Integer[0];
      MultiKey<Integer> multiKey1 = new MultiKey<Integer>(integerArray0);
      MultiKey<MultiKey<Integer>> multiKey2 = new MultiKey<MultiKey<Integer>>(multiKey0, multiKey1, multiKey1, multiKey0, multiKey0);
      MultiKey<Integer> multiKey3 = multiKey2.getKey(0);
      multiKey1.toString();
      objectArray0[1] = (Object) multiKey3;
      Integer integer2 = new Integer(0);
      Integer integer3 = new Integer(0);
      MultiKey<Object> multiKey4 = new MultiKey<Object>(objectArray0[1], integer2, integer3, multiKey1);
      int int0 = 0;
      Object object1 = multiKey4.getKey(0);
      objectArray0[2] = object1;
      MultiKey<String> multiKey5 = new MultiKey<String>((String) null, (String) null, "The array of keys must not be null", (String) null);
      multiKey5.getKey(0);
      objectArray0[3] = (Object) null;
      Object object2 = new Object();
      objectArray0[4] = object2;
      MultiKey<Object> multiKey6 = new MultiKey<Object>(objectArray0);
      multiKey6.toString();
      // Undeclared exception!
//      try { 
        multiKey0.getKey((-1007));
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // -1007
//         //
//         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
//      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      MultiKey<Object> multiKey0 = null;
//      try {
        multiKey0 = new MultiKey<Object>((Object[]) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // The array of keys must not be null
//         //
//         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
//      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Integer integer0 = new Integer((-1354));
      Integer integer1 = new Integer((-1354));
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integer0, integer1, integer1, integer0);
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      MultiKey<Object> multiKey1 = new MultiKey<Object>("MultiKey[-1354, -1354, -1354, -1354]", "", ":;n15O&M}p", "", "MultiKey[-1354, -1354, -1354, -1354]");
      multiKey1.hashCode();
      MultiKey<String> multiKey2 = new MultiKey<String>("z*'rg=zNjk", "[qu}XpFR((e");
      multiKey2.toString();
      multiKey2.size();
      MultiKey<String>[] multiKeyArray0 = (MultiKey<String>[]) Array.newInstance(MultiKey.class, 0);
      MultiKey<MultiKey<String>> multiKey3 = new MultiKey<MultiKey<String>>(multiKeyArray0);
      // Undeclared exception!
//      try { 
        multiKey3.getKey(1499);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 1499
//         //
//         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
//      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      String[] stringArray0 = new String[8];
      stringArray0[0] = "pcU.7=5";
      stringArray0[1] = "}w$FG^8vFSQ";
      stringArray0[2] = "";
      stringArray0[3] = "";
      stringArray0[4] = "G";
      stringArray0[5] = "cv$%vcGk";
      stringArray0[6] = "]mcNp";
      stringArray0[7] = "";
      MultiKey<String> multiKey0 = new MultiKey<String>(stringArray0);
      multiKey0.toString();
      MultiKey<MultiKey<String>> multiKey1 = new MultiKey<MultiKey<String>>(multiKey0, multiKey0, multiKey0);
      Object object0 = new Object();
      multiKey1.equals(object0);
      multiKey0.toString();
      multiKey0.getKeys();
      multiKey0.toString();
      String string0 = "9DAcm,";
      MultiKey<Object> multiKey2 = new MultiKey<Object>((Object[]) stringArray0, false);
      // Undeclared exception!
//      try { 
        multiKey2.getKey(169);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 169
//         //
//         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
//      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("", (String) null, "-r'MIDtV");
      MultiKey<String> multiKey1 = new MultiKey<String>(" U9)|{ T25N)", "");
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) " U9)|{ T25N)";
      objectArray0[1] = (Object) "-r'MIDtV";
      multiKey1.toString();
      objectArray0[2] = (Object) "";
      objectArray0[3] = (Object) "";
      objectArray0[4] = (Object) null;
      objectArray0[5] = (Object) " U9)|{ T25N)";
      objectArray0[6] = (Object) " U9)|{ T25N)";
      objectArray0[7] = (Object) multiKey0;
      MultiKey<Object> multiKey2 = new MultiKey<Object>(objectArray0, true);
      multiKey2.getKey(0);
      MultiKey<Object> multiKey3 = new MultiKey<Object>(multiKey0, multiKey1, "", " U9)|{ T25N)", "");
      MultiKey<MultiKey<String>> multiKey4 = new MultiKey<MultiKey<String>>(multiKey0, multiKey0, multiKey0, multiKey1);
      multiKey4.hashCode();
      Object[] objectArray1 = multiKey2.getKeys();
      assertNotSame(objectArray1, objectArray0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Object object0 = null;
      String[] stringArray0 = new String[8];
      stringArray0[0] = ":!w`-@]3q%XYzFLs1";
      String string0 = "";
      stringArray0[1] = "";
      stringArray0[2] = "h#ex4\"s";
      stringArray0[3] = "<a";
      stringArray0[4] = "The array of keys must not be null";
      stringArray0[5] = "";
      stringArray0[6] = "";
      stringArray0[7] = "";
      MultiKey<String> multiKey0 = new MultiKey<String>(stringArray0);
      MultiKey<MultiKey<String>> multiKey1 = new MultiKey<MultiKey<String>>(multiKey0, multiKey0);
      // Undeclared exception!
//      try { 
        multiKey1.getKey((-3265));
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // -3265
//         //
//         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
//      }
  }
}
