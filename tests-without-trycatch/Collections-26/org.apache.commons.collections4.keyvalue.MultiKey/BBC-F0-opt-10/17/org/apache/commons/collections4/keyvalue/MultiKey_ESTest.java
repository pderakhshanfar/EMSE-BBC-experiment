/*
 * This file was automatically generated by EvoSuite
 * Wed Oct 20 12:33:11 GMT 2021
 */

package org.apache.commons.collections4.keyvalue;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.collections4.keyvalue.MultiKey;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class MultiKey_ESTest extends MultiKey_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Integer[] integerArray0 = new Integer[0];
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integerArray0);
      MultiKey<String> multiKey1 = new MultiKey<String>("", "The array of keys must not be null", "j", "", "The array of keys must not be null");
      MultiKey<MultiKey<String>> multiKey2 = new MultiKey<MultiKey<String>>(multiKey1, multiKey1);
      MultiKey<Object> multiKey3 = new MultiKey<Object>((Object[]) integerArray0, false);
      multiKey0.equals(multiKey3);
      multiKey0.size();
      String string0 = multiKey1.toString();
      assertEquals("MultiKey[, The array of keys must not be null, j, , The array of keys must not be null]", string0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Integer integer0 = new Integer((-2345));
      Integer[] integerArray0 = new Integer[1];
      integerArray0[0] = null;
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integerArray0);
      MultiKey<String> multiKey1 = new MultiKey<String>("org.apache.commons.collections4.keyvalue.MultiKey", "", "", "", "");
      MultiKey<MultiKey<String>> multiKey2 = new MultiKey<MultiKey<String>>(multiKey1, multiKey1);
      MultiKey<MultiKey<Object>> multiKey3 = new MultiKey<MultiKey<Object>>((MultiKey<Object>) null, (MultiKey<Object>) null, (MultiKey<Object>) null);
      multiKey3.getKey(1);
      Integer integer1 = new Integer((-2379));
      boolean boolean0 = multiKey0.equals(integer1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("+", "j", "j", "");
      Object[] objectArray0 = new Object[0];
      MultiKey<Object> multiKey1 = new MultiKey<Object>(objectArray0);
      Object[] objectArray1 = multiKey1.getKeys();
      assertEquals(0, objectArray1.length);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      int int0 = 0;
      Integer integer0 = new Integer(0);
      MultiKey<String> multiKey0 = new MultiKey<String>("", "", "");
      multiKey0.toString();
      boolean boolean0 = multiKey0.equals(multiKey0);
      assertTrue(boolean0);
      
      Integer[] integerArray0 = new Integer[5];
      Integer integer1 = new Integer(0);
      integerArray0[0] = integer1;
      integerArray0[1] = integer0;
      integerArray0[2] = integer0;
      integerArray0[3] = integer0;
      integerArray0[4] = integer0;
      multiKey0.toString();
      MultiKey<Integer> multiKey1 = new MultiKey<Integer>(integerArray0, true);
      multiKey1.getKey(int0);
      String string0 = multiKey1.toString();
      assertEquals("MultiKey[0, 0, 0, 0, 0]", string0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      String[] stringArray0 = new String[5];
      stringArray0[0] = "RmFIYOp!`._Ml @u";
      stringArray0[1] = "";
      stringArray0[2] = "T[N>[szlOlq9`AEn.";
      stringArray0[3] = "org.apache.commons.collections4.keyvalue.MultiKey";
      stringArray0[4] = "R/\"VEx";
      MultiKey<String> multiKey0 = new MultiKey<String>(stringArray0, false);
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.hashCode();
      Integer integer0 = new Integer(1);
      Integer integer1 = new Integer(0);
      MultiKey<Integer> multiKey1 = new MultiKey<Integer>(integer0, integer1, integer1);
      multiKey1.toString();
      multiKey1.getKey(0);
      MultiKey<Object> multiKey2 = new MultiKey<Object>(stringArray0);
      boolean boolean0 = multiKey2.equals(multiKey0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("Ht", "EBGTn`8MDWQ6t|", "EBGTn`8MDWQ6t|", "Ht", "xRAo/=DL$0y:UH");
      multiKey0.getKey(0);
      MultiKey<Object> multiKey1 = new MultiKey<Object>("Ht", "EBGTn`8MDWQ6t|");
      multiKey1.toString();
      multiKey1.toString();
      multiKey0.toString();
      multiKey1.toString();
      multiKey1.toString();
      multiKey1.getKeys();
      multiKey1.getKeys();
      multiKey1.toString();
      multiKey0.toString();
      multiKey1.size();
      multiKey0.toString();
      multiKey1.toString();
      multiKey0.toString();
      multiKey1.equals("MultiKey[Ht, EBGTn`8MDWQ6t|]");
      multiKey0.toString();
      multiKey1.toString();
      multiKey0.toString();
      // Undeclared exception!
//      try { 
        multiKey1.getKey((-1));
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // -1
//         //
//         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
//      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("rNM1R;a-VxSN\"|Q,Ua-", "]G*;XJgL. %");
      multiKey0.toString();
      MultiKey<MultiKey<String>> multiKey1 = new MultiKey<MultiKey<String>>(multiKey0, multiKey0, multiKey0, multiKey0);
      multiKey1.toString();
      multiKey1.toString();
      multiKey1.toString();
      multiKey1.size();
      Integer[] integerArray0 = null;
      multiKey0.toString();
      MultiKey<Integer> multiKey2 = null;
//      try {
        multiKey2 = new MultiKey<Integer>((Integer[]) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // The array of keys must not be null
//         //
//         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
//      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Object[] objectArray0 = new Object[7];
      String string0 = "7'5M<";
      MultiKey<String> multiKey0 = new MultiKey<String>("7'5M<", "7'5M<");
      int int0 = 205;
      // Undeclared exception!
//      try { 
        multiKey0.getKey(205);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 205
//         //
//         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
//      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Integer integer0 = new Integer(674);
      Integer integer1 = new Integer((-226));
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integer0, integer1, integer0, integer0, integer0);
      multiKey0.toString();
      boolean boolean0 = multiKey0.equals(integer1);
      assertFalse(boolean0);
      
      String[] stringArray0 = new String[0];
      MultiKey<String> multiKey1 = new MultiKey<String>(stringArray0, false);
      String string0 = multiKey1.toString();
      assertEquals("MultiKey[]", string0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      String[] stringArray0 = new String[1];
      String string0 = "oQ qy0o2sj1";
      stringArray0[0] = "oQ qy0o2sj1";
      boolean boolean0 = false;
      MultiKey<String> multiKey0 = new MultiKey<String>(stringArray0, false);
      Object[] objectArray0 = new Object[0];
      MultiKey<Object> multiKey1 = new MultiKey<Object>(objectArray0);
      Object[] objectArray1 = new Object[8];
      MultiKey<MultiKey<String>> multiKey2 = new MultiKey<MultiKey<String>>(multiKey0, multiKey0, multiKey0, multiKey0);
      // Undeclared exception!
//      try { 
        multiKey2.getKey((-3625));
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // -3625
//         //
//         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
//      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Integer[] integerArray0 = new Integer[5];
      Integer integer0 = new Integer((-402));
      integerArray0[0] = integer0;
      Integer integer1 = new Integer((int) integerArray0[0]);
      integerArray0[1] = integer1;
      Integer integer2 = new Integer(0);
      integerArray0[2] = integer2;
      Integer integer3 = new Integer(1782);
      integerArray0[3] = integer3;
      Integer integer4 = new Integer(0);
      integerArray0[4] = integer4;
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integerArray0);
      assertEquals(5, multiKey0.size());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("GzWp6mSbe%iyn3H", "GzWp6mSbe%iyn3H", "GzWp6mSbe%iyn3H", "", "h&PP<$wbFjHV");
      Integer integer0 = new Integer(1368);
      Integer integer1 = new Integer(317);
      Integer integer2 = new Integer(1082);
      MultiKey<Integer> multiKey1 = new MultiKey<Integer>(integer0, integer1, integer2);
      MultiKey<Object> multiKey2 = new MultiKey<Object>("", "h&PP<$wbFjHV", multiKey0, integer1, "h&PP<$wbFjHV");
      MultiKey<Object> multiKey3 = new MultiKey<Object>("h&PP<$wbFjHV", "`,T>Nxw D RC/.xMd ", multiKey2);
      boolean boolean0 = multiKey1.equals(multiKey3);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      MultiKey<Integer> multiKey0 = null;
//      try {
        multiKey0 = new MultiKey<Integer>((Integer[]) null, false);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // The array of keys must not be null
//         //
//         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
//      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      String string0 = "fYORi";
      String string1 = "";
      MultiKey<String> multiKey0 = new MultiKey<String>("fYORi", "fYORi", "fYORi", "", "fYORi");
      Object object0 = null;
      MultiKey<Object> multiKey1 = new MultiKey<Object>("fYORi", "fYORi", multiKey0, (Object) null);
      multiKey1.toString();
      multiKey0.toString();
      multiKey0.toString();
      // Undeclared exception!
//      try { 
        multiKey1.getKey((-763));
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // -763
//         //
//         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
//      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Integer integer0 = new Integer(2);
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integer0, (Integer) null, (Integer) null);
      multiKey0.hashCode();
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("", "org.apache.commons.collections4.keyvalue.MultiKey", (String) null, "", (String) null);
      multiKey0.hashCode();
  }
}
