/*
 * This file was automatically generated by EvoSuite
 * Wed Oct 13 20:48:23 GMT 2021
 */

package org.apache.commons.collections4.keyvalue;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.collections4.keyvalue.MultiKey;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class MultiKey_ESTest extends MultiKey_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>((String) null, "%evAG<aH]N@oP- =\"");
      multiKey0.toString();
      Integer integer0 = new Integer(2000);
      multiKey0.equals(integer0);
      MultiKey<Object> multiKey1 = new MultiKey<Object>((Object) null, "MultiKey[null, %evAG<aH]N@oP- =\"]", multiKey0, (Object) null, "");
      multiKey1.toString();
      Integer integer1 = new Integer((-1));
      multiKey1.toString();
      Integer integer2 = new Integer(2000);
      Integer integer3 = new Integer((-1));
      MultiKey<Integer> multiKey2 = new MultiKey<Integer>(integer0, integer3, integer3, integer3);
      multiKey2.toString();
      boolean boolean0 = multiKey2.equals("%evAG<aH]N@oP- =\"");
      Integer integer4 = new Integer(4);
      Integer integer5 = new Integer((-11));
      Integer integer6 = new Integer(2);
      Integer integer7 = new Integer(3003);
      Integer integer8 = new Integer(2000);
      Integer integer9 = new Integer(32);
      Integer integer10 = new Integer(2057);
      MultiKey<Integer> multiKey3 = new MultiKey<Integer>(integer0, integer8, integer9, integer10, integer5);
      String string0 = multiKey3.toString();
      assertEquals("MultiKey[2000, 2000, 32, 2057, -11]", string0);
      
      MultiKey<Integer> multiKey4 = new MultiKey<Integer>(integer1, integer0, integer1);
      MultiKey<MultiKey<Integer>> multiKey5 = new MultiKey<MultiKey<Integer>>(multiKey4, multiKey4);
      boolean boolean1 = multiKey5.equals(multiKey5);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("", (String) null, "pFJJd`.RxTp@J@6]Q@j", (String) null, (String) null);
      Integer[] integerArray0 = new Integer[0];
      MultiKey<Integer> multiKey1 = new MultiKey<Integer>(integerArray0);
      int int0 = multiKey1.size();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Object[] objectArray0 = new Object[1];
      Object object0 = new Object();
      objectArray0[0] = object0;
      MultiKey<Object> multiKey0 = new MultiKey<Object>(objectArray0, false);
      multiKey0.toString();
      multiKey0.size();
      Integer[] integerArray0 = new Integer[0];
      MultiKey<Integer> multiKey1 = new MultiKey<Integer>(integerArray0, false);
      multiKey1.getKeys();
      boolean boolean0 = multiKey1.equals((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Object object0 = new Object();
      int int0 = (-3259);
      Integer integer0 = new Integer((-3259));
      String[] stringArray0 = new String[0];
      MultiKey<String> multiKey0 = new MultiKey<String>(stringArray0, false);
      Object object1 = new Object();
      MultiKey<Object> multiKey1 = new MultiKey<Object>(object0, integer0, multiKey0, object1);
      multiKey1.toString();
      multiKey1.toString();
      multiKey1.toString();
      multiKey0.toString();
      multiKey1.hashCode();
      multiKey0.toString();
      multiKey1.toString();
      multiKey1.toString();
      multiKey0.toString();
      MultiKey<Integer> multiKey2 = null;
//      try {
        multiKey2 = new MultiKey<Integer>((Integer[]) null, false);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // The array of keys must not be null
//         //
//         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
//      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      MultiKey<MultiKey<String>> multiKey0 = null;
//      try {
        multiKey0 = new MultiKey<MultiKey<String>>((MultiKey<String>[]) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // The array of keys must not be null
//         //
//         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
//      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Integer[] integerArray0 = new Integer[6];
      Integer integer0 = new Integer(3226);
      integerArray0[0] = integer0;
      Integer integer1 = new Integer(3226);
      integerArray0[1] = integer1;
      Integer integer2 = new Integer(3226);
      integerArray0[2] = integer2;
      Integer integer3 = new Integer(3);
      integerArray0[3] = integer3;
      Integer integer4 = new Integer(3226);
      integerArray0[4] = integer4;
      Integer integer5 = new Integer((int) integerArray0[4]);
      integerArray0[5] = integer5;
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integerArray0, false);
      multiKey0.toString();
      Integer integer6 = new Integer((int) integerArray0[4]);
      MultiKey<Object> multiKey1 = new MultiKey<Object>(integer6, (Object) null, "kpm>m`*q{'Rc$Cua");
      multiKey1.hashCode();
      Object[] objectArray0 = multiKey1.getKeys();
      assertEquals(3, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Integer integer0 = new Integer((-1926));
      Integer integer1 = new Integer(3070);
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integer0, integer1);
      MultiKey<Object> multiKey1 = new MultiKey<Object>(multiKey0, integer0);
      multiKey1.toString();
      MultiKey<Object> multiKey2 = new MultiKey<Object>(multiKey1, (Object) null, multiKey1);
      Object object0 = new Object();
      MultiKey<Object> multiKey3 = new MultiKey<Object>(multiKey0, (Object) null, object0);
      MultiKey<Object> multiKey4 = new MultiKey<Object>(multiKey2, multiKey1, multiKey1, multiKey0, multiKey3);
      multiKey2.toString();
      MultiKey<String> multiKey5 = new MultiKey<String>((String) null, "", "", "pS|'9VD]G", "");
      multiKey5.hashCode();
      MultiKey<MultiKey<Integer>> multiKey6 = new MultiKey<MultiKey<Integer>>(multiKey0, multiKey0, multiKey0);
      multiKey6.hashCode();
      multiKey4.equals("");
      multiKey5.toString();
      Integer integer2 = new Integer(0);
      Integer integer3 = new Integer(3070);
      multiKey5.toString();
      MultiKey<Integer> multiKey7 = new MultiKey<Integer>(integer2, integer3);
      multiKey7.toString();
      multiKey4.equals(multiKey7);
      multiKey6.hashCode();
      multiKey5.hashCode();
      multiKey3.equals(multiKey2);
      // Undeclared exception!
//      try { 
        multiKey5.getKey(878);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 878
//         //
//         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
//      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>((String) null, (String) null, "^^E%", "");
      multiKey0.getKey(0);
      String string0 = multiKey0.toString();
      Object object0 = new Object();
      MultiKey<Object> multiKey1 = new MultiKey<Object>("Y2a,oZ0 M_eU_OD", "Y2a,oZ0 M_eU_OD", "Y2a,oZ0 M_eU_OD", (Object) null, object0);
      multiKey1.toString();
      MultiKey<MultiKey<Object>> multiKey2 = new MultiKey<MultiKey<Object>>(multiKey1, multiKey1);
      String string1 = multiKey2.toString();
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Object[] objectArray0 = new Object[5];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      int int0 = 714;
      Integer integer0 = new Integer(714);
      MultiKey<Object> multiKey0 = new MultiKey<Object>((Object) null, (Object) null, object0, integer0);
      // Undeclared exception!
//      try { 
        multiKey0.getKey(714);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 714
//         //
//         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
//      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Integer[] integerArray0 = new Integer[6];
      int int0 = 1;
      Integer integer0 = new Integer(1);
      integerArray0[0] = integer0;
      int int1 = 0;
      Integer integer1 = new Integer(0);
      integerArray0[1] = integer1;
      Integer integer2 = new Integer(int0);
      integerArray0[2] = integer2;
      Integer integer3 = new Integer(int1);
      integerArray0[3] = integer3;
      Integer integer4 = new Integer(int0);
      integerArray0[4] = integer4;
      Integer integer5 = new Integer(2666);
      integerArray0[5] = integer5;
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integerArray0);
      multiKey0.toString();
      multiKey0.size();
      Object object0 = new Object();
      MultiKey<Object> multiKey1 = new MultiKey<Object>(object0, "");
      multiKey1.toString();
      multiKey1.toString();
      Object object1 = multiKey1.getKey(0);
      assertSame(object0, object1);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      String[] stringArray0 = new String[6];
      stringArray0[0] = "MultiKey";
      stringArray0[1] = "";
      stringArray0[2] = "_=DJ5C";
      stringArray0[3] = "";
      stringArray0[4] = "SBzEw_uj";
      stringArray0[5] = "";
      MultiKey<String> multiKey0 = new MultiKey<String>(stringArray0);
      assertEquals(6, multiKey0.size());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Integer[] integerArray0 = new Integer[2];
      Integer integer0 = new Integer(2457);
      integerArray0[0] = integer0;
      Integer integer1 = new Integer((int) integerArray0[0]);
      integerArray0[1] = integer1;
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integerArray0, false);
      assertEquals(2, multiKey0.size());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Integer integer0 = new Integer((-1596));
      Integer integer1 = new Integer((-1596));
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integer0, (Integer) null, (Integer) null, (Integer) null, integer1);
      assertEquals(5, multiKey0.size());
  }
}
