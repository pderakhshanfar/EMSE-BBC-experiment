/*
 * This file was automatically generated by EvoSuite
 * Fri Oct 22 17:51:45 GMT 2021
 */

package org.apache.commons.collections4.keyvalue;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.lang.reflect.Array;
import org.apache.commons.collections4.keyvalue.MultiKey;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class MultiKey_ESTest extends MultiKey_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>((String) null, (String) null, (String) null);
      multiKey0.toString();
      MultiKey<String>[] multiKeyArray0 = (MultiKey<String>[]) Array.newInstance(MultiKey.class, 0);
      MultiKey<MultiKey<String>> multiKey1 = new MultiKey<MultiKey<String>>(multiKeyArray0);
      MultiKey<String>[] multiKeyArray1 = multiKey1.getKeys();
      assertFalse(multiKeyArray1.equals((Object)multiKeyArray0));
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>((String) null, "GxdP%8oW", "");
      String string0 = multiKey0.toString();
      assertEquals("MultiKey[null, GxdP%8oW, ]", string0);
      
      multiKey0.size();
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) "MultiKey[null, GxdP%8oW, ]";
      objectArray0[1] = (Object) multiKey0;
      objectArray0[2] = (Object) "";
      objectArray0[3] = (Object) multiKey0;
      objectArray0[4] = (Object) null;
      objectArray0[5] = (Object) multiKey0;
      objectArray0[6] = (Object) "MultiKey[null, GxdP%8oW, ]";
      MultiKey<Object> multiKey1 = new MultiKey<Object>(objectArray0);
      Object object0 = multiKey1.getKey(3);
      boolean boolean0 = multiKey0.equals(object0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("", "", "", "", "");
      boolean boolean0 = true;
      MultiKey<Integer> multiKey1 = null;
//      try {
        multiKey1 = new MultiKey<Integer>((Integer[]) null, true);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // The array of keys must not be null
//         //
//         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
//      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("fRZq' ", "", "", "");
      multiKey0.toString();
      Integer integer0 = new Integer((-1));
      MultiKey<Integer> multiKey1 = new MultiKey<Integer>((Integer) null, integer0, (Integer) null);
      String string0 = multiKey1.toString();
      assertEquals("MultiKey[null, -1, null]", string0);
      
      Integer integer1 = new Integer((-1));
      Integer integer2 = new Integer((-1));
      Object object0 = new Object();
      MultiKey<Object> multiKey2 = new MultiKey<Object>("MultiKey", "", integer1, (Object) null);
      MultiKey<Object> multiKey3 = new MultiKey<Object>(object0, multiKey2, "fRZq' ", integer1, multiKey1);
      multiKey3.toString();
      multiKey3.hashCode();
      boolean boolean0 = multiKey1.equals(multiKey3);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      MultiKey<Object>[] multiKeyArray0 = (MultiKey<Object>[]) Array.newInstance(MultiKey.class, 0);
      MultiKey<MultiKey<Object>> multiKey0 = new MultiKey<MultiKey<Object>>(multiKeyArray0);
      multiKey0.toString();
      Integer integer0 = new Integer(0);
      Integer integer1 = new Integer(102);
      Integer integer2 = new Integer(0);
      Integer integer3 = new Integer(0);
      MultiKey<Integer> multiKey1 = new MultiKey<Integer>(integer0, integer1, integer2, integer3);
      MultiKey<String> multiKey2 = new MultiKey<String>("", "", "VHH*", "");
      multiKey2.toString();
      multiKey2.getKey(0);
      multiKey2.toString();
      multiKey1.equals("");
      multiKey1.toString();
      MultiKey<MultiKey<String>> multiKey3 = new MultiKey<MultiKey<String>>(multiKey2, multiKey2);
      multiKey2.toString();
      multiKey3.toString();
      multiKey3.toString();
      multiKey3.toString();
      multiKey3.toString();
      multiKey3.toString();
      multiKey3.getKeys();
      boolean boolean0 = multiKey1.equals(integer0);
      assertFalse(boolean0);
      
      multiKey1.toString();
      multiKey2.hashCode();
      multiKey2.hashCode();
      Integer integer4 = multiKey1.getKey(0);
      assertEquals(0, (int)integer4);
      
      multiKey1.toString();
      String string0 = multiKey2.toString();
      assertEquals("MultiKey[, , VHH*, ]", string0);
      
      multiKey2.size();
      multiKey0.size();
      multiKey1.size();
      assertTrue(integer2.equals((Object)integer4));
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      String[] stringArray0 = new String[5];
      stringArray0[0] = "16&U9h7Po34h";
      stringArray0[1] = "";
      stringArray0[2] = "";
      stringArray0[3] = "`7_a?U";
      stringArray0[4] = "e%?EN2DEuiki=&uZJX";
      MultiKey<String> multiKey0 = new MultiKey<String>(stringArray0, false);
      MultiKey<MultiKey<String>> multiKey1 = new MultiKey<MultiKey<String>>(multiKey0, (MultiKey<String>) null, multiKey0, (MultiKey<String>) null, multiKey0);
      MultiKey<String> multiKey2 = multiKey1.getKey(3);
      assertNull(multiKey2);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Object[] objectArray0 = new Object[4];
      Object object0 = new Object();
      MultiKey<String> multiKey0 = new MultiKey<String>("Y'YkaPUY!Gr5HHU_^V", "", "");
      MultiKey<Object> multiKey1 = new MultiKey<Object>(object0, object0, multiKey0, "Y'YkaPUY!Gr5HHU_^V");
      Object object1 = multiKey1.getKey(0);
      objectArray0[0] = object1;
      Object object2 = new Object();
      objectArray0[1] = object2;
      MultiKey<Integer> multiKey2 = null;
//      try {
        multiKey2 = new MultiKey<Integer>((Integer[]) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // The array of keys must not be null
//         //
//         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
//      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("", "x{9:&zJL ", "");
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      MultiKey<Object> multiKey1 = new MultiKey<Object>("x{9:&zJL ", "x{9:&zJL ", (Object) null);
      multiKey1.toString();
      multiKey0.toString();
      multiKey1.toString();
      multiKey0.toString();
      multiKey1.toString();
      multiKey1.toString();
      int int0 = 2050;
      Integer integer0 = new Integer(2050);
      MultiKey<Integer> multiKey2 = new MultiKey<Integer>(integer0, integer0);
      multiKey2.hashCode();
      Object object0 = new Object();
      multiKey1.equals(object0);
      multiKey0.toString();
      multiKey1.toString();
      // Undeclared exception!
//      try { 
        multiKey0.getKey(4);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 4
//         //
//         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
//      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      String[] stringArray0 = new String[5];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "`";
      stringArray0[3] = "";
      stringArray0[4] = ">(T.&gj-H";
      MultiKey<String> multiKey0 = new MultiKey<String>(stringArray0, true);
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      int int0 = multiKey0.size();
      assertEquals(5, int0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Object object0 = new Object();
      Integer integer0 = new Integer(0);
      MultiKey<Object> multiKey0 = new MultiKey<Object>(object0, integer0, integer0);
      String string0 = multiKey0.toString();
      String string1 = multiKey0.toString();
      assertTrue(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("t)mZIg", "WB,],P<wS `", "t)mZIg", "", "IU#?b6");
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) "WB,],P<wS `";
      objectArray0[1] = (Object) multiKey0;
      objectArray0[2] = (Object) "WB,],P<wS `";
      objectArray0[3] = (Object) "t)mZIg";
      int int0 = 1207;
      // Undeclared exception!
//      try { 
        multiKey0.getKey(1207);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 1207
//         //
//         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
//      }
  }
}
