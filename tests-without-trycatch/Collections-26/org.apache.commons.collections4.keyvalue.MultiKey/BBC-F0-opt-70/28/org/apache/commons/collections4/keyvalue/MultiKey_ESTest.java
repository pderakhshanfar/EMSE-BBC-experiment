/*
 * This file was automatically generated by EvoSuite
 * Fri Oct 22 17:51:27 GMT 2021
 */

package org.apache.commons.collections4.keyvalue;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.lang.reflect.Array;
import org.apache.commons.collections4.keyvalue.MultiKey;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class MultiKey_ESTest extends MultiKey_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      MultiKey<Object> multiKey0 = new MultiKey<Object>("", "");
      multiKey0.toString();
      multiKey0.toString();
      MultiKey<String> multiKey1 = new MultiKey<String>("", "", (String) null, (String) null, (String) null);
      multiKey1.toString();
      MultiKey<Object> multiKey2 = new MultiKey<Object>(multiKey0, multiKey1, (Object) null);
      multiKey2.toString();
      multiKey1.toString();
      multiKey2.toString();
      multiKey0.toString();
      multiKey1.toString();
      multiKey1.equals((Object) null);
      multiKey2.equals("");
      MultiKey<MultiKey<String>> multiKey3 = new MultiKey<MultiKey<String>>(multiKey1, multiKey1);
      multiKey3.hashCode();
      Object object0 = new Object();
      multiKey1.equals(object0);
      multiKey0.size();
      String string0 = multiKey0.toString();
      assertEquals("MultiKey[, ]", string0);
      
      MultiKey<Object>[] multiKeyArray0 = (MultiKey<Object>[]) Array.newInstance(MultiKey.class, 6);
      multiKeyArray0[0] = multiKey0;
      MultiKey<Object> multiKey4 = new MultiKey<Object>("MultiKey[, , null, null, null]", object0, "MultiKey[, , null, null, null]", "MultiKey[MultiKey[, ], MultiKey[, , null, null, null], null]");
      Object object1 = new Object();
      boolean boolean0 = multiKey4.equals(object1);
      Integer integer0 = new Integer(1);
      boolean boolean1 = multiKey0.equals(multiKey0);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("pEMDmTT/_#HO", "pEMDmTT/_#HO", "pEMDmTT/_#HO");
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.hashCode();
      Object object0 = new Object();
      MultiKey<String> multiKey1 = new MultiKey<String>("", "", "MultiKey[pEMDmTT/_#HO, pEMDmTT/_#HO, pEMDmTT/_#HO]", "~}P", "");
      MultiKey<MultiKey<String>> multiKey2 = null;
//      try {
        multiKey2 = new MultiKey<MultiKey<String>>((MultiKey<String>[]) null, true);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // The array of keys must not be null
//         //
//         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
//      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      int int0 = 0;
      Integer integer0 = new Integer(0);
      Integer integer1 = new Integer(0);
      MultiKey<Object>[] multiKeyArray0 = (MultiKey<Object>[]) Array.newInstance(MultiKey.class, 5);
      MultiKey<Object> multiKey0 = new MultiKey<Object>(multiKeyArray0);
      multiKey0.getKey(0);
      MultiKey<Object> multiKey1 = new MultiKey<Object>("", (Object) null, (Object) null);
      multiKeyArray0[0] = multiKey1;
      Integer integer2 = new Integer(0);
      MultiKey<Integer> multiKey2 = new MultiKey<Integer>(integer1, integer1, integer2);
      multiKeyArray0[1] = multiKey0;
      String string0 = "I";
      Object object0 = new Object();
      MultiKey<Object> multiKey3 = new MultiKey<Object>("I", object0);
      Integer integer3 = new Integer((-688));
      Object object1 = new Object();
      MultiKey<Object> multiKey4 = new MultiKey<Object>(multiKey3, integer3, multiKey1, object1);
      MultiKey<Object> multiKey5 = new MultiKey<Object>(multiKeyArray0);
      // Undeclared exception!
//      try { 
        multiKey5.getKey((-688));
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // -688
//         //
//         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
//      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("eus/rNlI4N&K3$K?mCR", "", "");
      multiKey0.toString();
      multiKey0.toString();
      MultiKey<MultiKey<String>> multiKey1 = new MultiKey<MultiKey<String>>(multiKey0, multiKey0);
      multiKey1.toString();
      multiKey1.hashCode();
      Object[] objectArray0 = new Object[0];
      MultiKey<Object> multiKey2 = new MultiKey<Object>(objectArray0);
      multiKey2.toString();
      multiKey1.toString();
      multiKey2.getKeys();
      int int0 = multiKey2.size();
      int int1 = multiKey0.hashCode();
      assertFalse(int1 == int0);
      
      Integer integer0 = new Integer(0);
      Integer integer1 = new Integer(0);
      MultiKey<Integer> multiKey3 = new MultiKey<Integer>(integer0, integer1);
      multiKey3.equals(integer0);
      multiKey0.toString();
      multiKey3.toString();
      multiKey1.toString();
      boolean boolean0 = multiKey3.equals("MultiKey[eus/rNlI4N&K3$K?mCR, , ]");
      assertFalse(boolean0);
      
      multiKey2.getKeys();
      int int2 = multiKey2.hashCode();
      assertTrue(int2 == int0);
      
      MultiKey<Object> multiKey4 = new MultiKey<Object>(objectArray0, false);
      MultiKey<MultiKey<Object>> multiKey5 = new MultiKey<MultiKey<Object>>(multiKey2, multiKey4, multiKey4, multiKey2);
      String string0 = multiKey5.toString();
      assertEquals("MultiKey[MultiKey[], MultiKey[], MultiKey[], MultiKey[]]", string0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Integer integer0 = new Integer((-1));
      MultiKey<Object> multiKey0 = new MultiKey<Object>((Object) null, "XH,^", "XH,^", "XH,^", integer0);
      MultiKey<MultiKey<Object>> multiKey1 = new MultiKey<MultiKey<Object>>(multiKey0, multiKey0, multiKey0);
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = null;
      objectArray0[1] = (Object) multiKey1;
      multiKey0.toString();
      objectArray0[2] = (Object) integer0;
      objectArray0[3] = (Object) multiKey1;
      objectArray0[4] = (Object) multiKey0;
      objectArray0[5] = (Object) multiKey1;
      objectArray0[6] = null;
      multiKey0.toString();
      MultiKey<Object> multiKey2 = new MultiKey<Object>(objectArray0);
      multiKey1.equals(multiKey2);
      Integer integer1 = new Integer(1070);
      Integer integer2 = new Integer(1);
      MultiKey<Integer> multiKey3 = new MultiKey<Integer>(integer1, integer1, integer2);
      multiKey3.getKey(0);
      multiKey2.getKeys();
      MultiKey<String>[] multiKeyArray0 = (MultiKey<String>[]) Array.newInstance(MultiKey.class, 3);
      MultiKey<String> multiKey4 = new MultiKey<String>("", "MultiKey[null, XH,^, XH,^, XH,^, -1]", "XH,^");
      multiKeyArray0[0] = multiKey4;
      MultiKey<String> multiKey5 = new MultiKey<String>("", "6Y+", "");
      multiKeyArray0[1] = multiKey5;
      MultiKey<String> multiKey6 = new MultiKey<String>("", (String) null, "", (String) null, (String) null);
      multiKeyArray0[2] = multiKey6;
      MultiKey<MultiKey<String>> multiKey7 = new MultiKey<MultiKey<String>>(multiKeyArray0, true);
      multiKey7.hashCode();
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Integer integer0 = new Integer(2998);
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integer0, integer0, integer0);
      multiKey0.toString();
      MultiKey<Object> multiKey1 = new MultiKey<Object>(multiKey0, integer0);
      multiKey1.toString();
      multiKey1.toString();
      multiKey1.size();
      MultiKey<String> multiKey2 = new MultiKey<String>("'/HoJ&", "");
      multiKey2.toString();
      multiKey0.toString();
      MultiKey<MultiKey<String>> multiKey3 = new MultiKey<MultiKey<String>>(multiKey2, multiKey2);
      multiKey3.toString();
      // Undeclared exception!
//      try { 
        multiKey3.getKey(2);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 2
//         //
//         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
//      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      String[] stringArray0 = new String[7];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "Jl7[f";
      stringArray0[3] = "F;BU^KV'Dc<[xb";
      stringArray0[4] = "";
      stringArray0[5] = "";
      stringArray0[6] = "";
      MultiKey<String> multiKey0 = new MultiKey<String>(stringArray0);
      MultiKey<Integer> multiKey1 = new MultiKey<Integer>((Integer) null, (Integer) null);
      multiKey1.hashCode();
      multiKey1.toString();
      multiKey1.toString();
      Object object0 = new Object();
      boolean boolean0 = multiKey1.equals(object0);
      assertFalse(boolean0);
      
      MultiKey<Object> multiKey2 = new MultiKey<Object>(stringArray0);
      String string0 = multiKey2.toString();
      assertEquals("MultiKey[, , Jl7[f, F;BU^KV'Dc<[xb, , , ]", string0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>((String) null, (String) null, (String) null);
      multiKey0.hashCode();
      multiKey0.toString();
      Object object0 = new Object();
      MultiKey<Object> multiKey1 = new MultiKey<Object>(object0, multiKey0);
      multiKey1.getKeys();
      multiKey0.toString();
      MultiKey<MultiKey<Object>> multiKey2 = new MultiKey<MultiKey<Object>>(multiKey1, multiKey1, multiKey1, multiKey1, multiKey1);
      multiKey0.toString();
      // Undeclared exception!
//      try { 
        multiKey2.getKey(1603);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 1603
//         //
//         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
//      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      MultiKey<Object> multiKey0 = null;
//      try {
        multiKey0 = new MultiKey<Object>((Object[]) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // The array of keys must not be null
//         //
//         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
//      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>((String) null, (String) null);
      MultiKey<Object> multiKey1 = new MultiKey<Object>("r", multiKey0, "r");
      multiKey1.toString();
      multiKey1.hashCode();
      Integer integer0 = new Integer(4);
      multiKey0.toString();
      int int0 = 2;
      Integer integer1 = new Integer(2);
      Integer integer2 = new Integer(2);
      MultiKey<Integer> multiKey2 = new MultiKey<Integer>(integer0, integer0, integer1, integer2, (Integer) null);
      int int1 = (-472);
      // Undeclared exception!
//      try { 
        multiKey2.getKey((-472));
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // -472
//         //
//         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
//      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Integer[] integerArray0 = new Integer[7];
      int int0 = 0;
      Integer integer0 = new Integer(0);
      integerArray0[0] = integer0;
      Integer integer1 = new Integer(int0);
      integerArray0[1] = integer1;
      Integer integer2 = new Integer(0);
      integerArray0[2] = integer2;
      Integer integer3 = new Integer(int0);
      integerArray0[3] = integer3;
      Integer integer4 = new Integer(int0);
      integerArray0[4] = integer4;
      Integer integer5 = new Integer(int0);
      integerArray0[5] = integer5;
      Integer integer6 = new Integer(1808);
      integerArray0[6] = integer6;
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integerArray0);
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      MultiKey<Object> multiKey1 = new MultiKey<Object>(":FT", "MultiKey[0, 0, 0, 0, 0, 0, 1808]");
      multiKey1.toString();
      multiKey1.toString();
      multiKey1.toString();
      multiKey1.hashCode();
      int int1 = multiKey1.hashCode();
      assertFalse(int1 == int0);
      
      MultiKey<String> multiKey2 = new MultiKey<String>("MultiKey[:FT, MultiKey[0, 0, 0, 0, 0, 0, 1808]]", "MultiKey[0, 0, 0, 0, 0, 0, 1808]");
      String string0 = multiKey2.toString();
      assertEquals("MultiKey[MultiKey[:FT, MultiKey[0, 0, 0, 0, 0, 0, 1808]], MultiKey[0, 0, 0, 0, 0, 0, 1808]]", string0);
      
      int int2 = multiKey2.hashCode();
      assertFalse(int2 == int0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Object[] objectArray0 = new Object[8];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      Object object2 = new Object();
      objectArray0[2] = object2;
      Object object3 = new Object();
      objectArray0[3] = object3;
      Object object4 = new Object();
      objectArray0[4] = object4;
      Object object5 = new Object();
      objectArray0[5] = object5;
      Object object6 = new Object();
      objectArray0[6] = object6;
      Object object7 = new Object();
      objectArray0[7] = object7;
      MultiKey<Object> multiKey0 = new MultiKey<Object>(objectArray0, true);
      Object object8 = new Object();
      Integer integer0 = new Integer(4);
      MultiKey<Integer> multiKey1 = new MultiKey<Integer>(integer0, integer0, integer0);
      MultiKey<Object> multiKey2 = new MultiKey<Object>(objectArray0);
      Object object9 = multiKey2.getKey(4);
      MultiKey<Object> multiKey3 = new MultiKey<Object>(object8, multiKey1, object9, object1);
      MultiKey<MultiKey<Object>> multiKey4 = new MultiKey<MultiKey<Object>>(multiKey0, multiKey0, multiKey3, multiKey3, multiKey2);
      // Undeclared exception!
//      try { 
        multiKey4.getKey((-1026));
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // -1026
//         //
//         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
//      }
  }
}
