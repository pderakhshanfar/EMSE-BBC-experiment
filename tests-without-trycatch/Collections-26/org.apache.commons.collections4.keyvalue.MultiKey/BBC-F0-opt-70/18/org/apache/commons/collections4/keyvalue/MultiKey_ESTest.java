/*
 * This file was automatically generated by EvoSuite
 * Wed Oct 20 12:36:38 GMT 2021
 */

package org.apache.commons.collections4.keyvalue;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.lang.reflect.Array;
import org.apache.commons.collections4.keyvalue.MultiKey;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class MultiKey_ESTest extends MultiKey_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      MultiKey<Object> multiKey0 = new MultiKey<Object>("", "", "");
      String string0 = multiKey0.toString();
      assertEquals("MultiKey[, , ]", string0);
      
      boolean boolean0 = multiKey0.equals(multiKey0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      MultiKey<Integer>[] multiKeyArray0 = (MultiKey<Integer>[]) Array.newInstance(MultiKey.class, 0);
      MultiKey<MultiKey<Integer>> multiKey0 = new MultiKey<MultiKey<Integer>>(multiKeyArray0);
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.size();
      MultiKey<Object> multiKey1 = new MultiKey<Object>((Object[]) multiKeyArray0, true);
      multiKey1.size();
      multiKey1.equals("MultiKey[]");
      String[] stringArray0 = new String[2];
      stringArray0[0] = "MultiKey[]";
      stringArray0[1] = "MultiKey[]";
      MultiKey<String> multiKey2 = new MultiKey<String>(stringArray0, false);
      multiKey2.getKeys();
      Object[] objectArray0 = multiKey1.getKeys();
      assertEquals(0, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Integer[] integerArray0 = new Integer[3];
      int int0 = 7;
      Integer integer0 = new Integer(7);
      integerArray0[0] = integer0;
      Integer integer1 = new Integer(int0);
      integerArray0[1] = integer1;
      Integer integer2 = new Integer(7);
      integerArray0[2] = integer2;
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integerArray0, true);
      Integer[] integerArray1 = multiKey0.getKeys();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      MultiKey<Object> multiKey1 = new MultiKey<Object>((Object[]) integerArray1, true);
      multiKey1.toString();
      multiKey1.toString();
      multiKey0.toString();
      multiKey1.toString();
      multiKey0.equals(multiKey1);
      MultiKey<String> multiKey2 = new MultiKey<String>("MultiKey[7, 7, 7]", "MultiKey[7, 7, 7]");
      multiKey2.toString();
      multiKey0.toString();
      Integer integer3 = new Integer(int0);
      Integer integer4 = new Integer(int0);
      Integer integer5 = new Integer(int0);
      Object object0 = new Object();
      MultiKey<Object> multiKey3 = new MultiKey<Object>(integer3, integer4, integer5, object0);
      // Undeclared exception!
//      try { 
        multiKey3.getKey(8);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 8
//         //
//         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
//      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Integer integer0 = new Integer((-290));
      MultiKey<Object> multiKey0 = new MultiKey<Object>(integer0, integer0, integer0);
      Integer integer1 = new Integer((-290));
      MultiKey<String> multiKey1 = new MultiKey<String>("Gz|'8KfRN*b", "", "-", "Gz|'8KfRN*b");
      MultiKey<String> multiKey2 = new MultiKey<String>("~}CD]j", "", "Gz|'8KfRN*b", "8j}j=eWrDt&oVGslW");
      multiKey2.getKey(2);
      MultiKey<Object> multiKey3 = new MultiKey<Object>("-", integer1, "Gz|'8KfRN*b", (Object) null, multiKey1);
      MultiKey<Object> multiKey4 = new MultiKey<Object>((Object) null, (Object) null, "Gz|'8KfRN*b", "8j}j=eWrDt&oVGslW", (Object) null);
      multiKey4.getKey(1);
      MultiKey<Object> multiKey5 = new MultiKey<Object>((Object) null, (Object) null, "-");
      String string0 = multiKey5.toString();
      assertEquals("MultiKey[null, null, -]", string0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      String[] stringArray0 = new String[0];
      MultiKey<String> multiKey0 = new MultiKey<String>(stringArray0, false);
      multiKey0.size();
      Integer[] integerArray0 = new Integer[6];
      Integer integer0 = new Integer(0);
      integerArray0[0] = integer0;
      Integer integer1 = new Integer((int) integerArray0[0]);
      integerArray0[1] = integer1;
      Integer integer2 = new Integer(0);
      integerArray0[2] = integer2;
      Integer integer3 = new Integer((int) integerArray0[2]);
      integerArray0[3] = integer3;
      int int0 = 0;
      Integer integer4 = new Integer(0);
      integerArray0[4] = integer4;
      Integer integer5 = new Integer(int0);
      integerArray0[5] = integer5;
      MultiKey<Integer> multiKey1 = new MultiKey<Integer>(integerArray0, false);
      int int1 = multiKey1.size();
      assertEquals(6, int1);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Integer integer0 = new Integer(0);
      Object object0 = new Object();
      MultiKey<Object> multiKey0 = new MultiKey<Object>(object0, "", object0);
      MultiKey<Object> multiKey1 = new MultiKey<Object>(integer0, integer0, integer0, object0, multiKey0);
      multiKey1.toString();
      multiKey0.toString();
      multiKey1.toString();
      multiKey0.toString();
      multiKey1.toString();
      multiKey1.toString();
      multiKey0.getKeys();
      multiKey1.toString();
      multiKey1.toString();
      multiKey0.size();
      MultiKey<String> multiKey2 = new MultiKey<String>("MultiKey[java.lang.Object@65e6bb4c, , java.lang.Object@65e6bb4c]", "");
      multiKey2.hashCode();
      int int0 = multiKey0.size();
      int int1 = multiKey1.size();
      assertFalse(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      String[] stringArray0 = new String[2];
      stringArray0[0] = "-G&r5ZUi'L:B2";
      stringArray0[1] = "%+?K\"u";
      MultiKey<String> multiKey0 = new MultiKey<String>(stringArray0, false);
      Object object0 = new Object();
      boolean boolean0 = multiKey0.equals(object0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Integer integer0 = new Integer(408);
      Integer integer1 = new Integer(408);
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integer0, integer0, integer1, integer0, integer0);
      multiKey0.toString();
      multiKey0.hashCode();
      Integer[] integerArray0 = new Integer[7];
      Integer integer2 = new Integer(408);
      integerArray0[0] = integer2;
      integerArray0[1] = integer1;
      integerArray0[2] = integer0;
      integerArray0[3] = integer0;
      integerArray0[4] = integer1;
      integerArray0[5] = integer0;
      integerArray0[6] = integer1;
      MultiKey<Integer> multiKey1 = new MultiKey<Integer>(integerArray0, false);
      MultiKey<Object> multiKey2 = new MultiKey<Object>(multiKey1, integer0, (Object) null, integer2);
      // Undeclared exception!
//      try { 
        multiKey2.getKey((int) integerArray0[1]);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 408
//         //
//         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
//      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Object object0 = new Object();
      int int0 = (-1);
      Integer integer0 = new Integer((-1));
      MultiKey<Object> multiKey0 = new MultiKey<Object>(object0, integer0, object0);
      multiKey0.toString();
      multiKey0.toString();
      MultiKey<Object> multiKey1 = new MultiKey<Object>(multiKey0, object0);
      multiKey0.toString();
      multiKey1.toString();
      multiKey0.toString();
      multiKey1.toString();
      multiKey1.size();
      multiKey1.toString();
      // Undeclared exception!
//      try { 
        multiKey1.getKey(2819);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 2819
//         //
//         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
//      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      String string0 = "";
      String string1 = "";
      MultiKey<String> multiKey0 = new MultiKey<String>("", "", "");
      multiKey0.toString();
      multiKey0.toString();
      MultiKey<Object> multiKey1 = null;
//      try {
        multiKey1 = new MultiKey<Object>((Object[]) null, true);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // The array of keys must not be null
//         //
//         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
//      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      MultiKey<Object> multiKey0 = null;
//      try {
        multiKey0 = new MultiKey<Object>((Object[]) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // The array of keys must not be null
//         //
//         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
//      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = null;
      objectArray0[1] = null;
      objectArray0[2] = null;
      objectArray0[3] = null;
      objectArray0[4] = null;
      MultiKey<Object> multiKey0 = new MultiKey<Object>(objectArray0);
      MultiKey<Object> multiKey1 = new MultiKey<Object>((Object) null, (Object) null, multiKey0, (Object) null);
      Object object0 = new Object();
      Integer integer0 = new Integer(5);
      MultiKey<Object> multiKey2 = new MultiKey<Object>(object0, integer0);
      MultiKey<MultiKey<Object>> multiKey3 = new MultiKey<MultiKey<Object>>(multiKey1, multiKey1, multiKey2);
      multiKey3.toString();
      multiKey2.toString();
      multiKey3.toString();
      multiKey3.toString();
      multiKey3.equals(multiKey1);
      multiKey3.toString();
      multiKey3.toString();
      multiKey2.toString();
      MultiKey<String> multiKey4 = new MultiKey<String>("nv.EVjQ?%F", "MultiKey[MultiKey[null, null, MultiKey[null, null, null, null, null], null], MultiKey[null, null, MultiKey[null, null, null, null, null], null], MultiKey[java.lang.Object@4862c60f, 5]]", "`QH5y'0}gUyIWum|h", "", "MultiKey[java.lang.Object@4862c60f, 5]");
      multiKey4.hashCode();
      multiKey2.toString();
      int int0 = multiKey2.size();
      int int1 = multiKey4.hashCode();
      assertFalse(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("", "");
      String string0 = multiKey0.getKey(1);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Object[] objectArray0 = new Object[1];
      String[] stringArray0 = new String[4];
      stringArray0[0] = "~<oEdV(z-?^mI($";
      stringArray0[1] = "W`fiMfSrf;/AM+`ZTa";
      stringArray0[2] = "eVrpg?'{e80NmSn!;";
      stringArray0[3] = "The array of keys must not be null";
      MultiKey<String> multiKey0 = new MultiKey<String>(stringArray0);
      multiKey0.getKey(0);
      objectArray0[0] = (Object) "~<oEdV(z-?^mI($";
      MultiKey<Object> multiKey1 = new MultiKey<Object>(objectArray0);
      assertEquals(1, multiKey1.size());
  }
}
