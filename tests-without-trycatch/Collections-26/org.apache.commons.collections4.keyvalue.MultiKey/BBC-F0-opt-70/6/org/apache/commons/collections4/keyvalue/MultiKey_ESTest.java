/*
 * This file was automatically generated by EvoSuite
 * Wed Oct 13 20:48:29 GMT 2021
 */

package org.apache.commons.collections4.keyvalue;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.lang.reflect.Array;
import org.apache.commons.collections4.keyvalue.MultiKey;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class MultiKey_ESTest extends MultiKey_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>((String) null, "!muR, &FD", "", "[?$pR*7WLHv", (String) null);
      MultiKey<Object> multiKey1 = new MultiKey<Object>(multiKey0, (Object) null);
      multiKey1.equals("G9d&>KF{R rEi");
      String[] stringArray0 = new String[6];
      stringArray0[0] = null;
      stringArray0[1] = "!muR, &FD";
      stringArray0[2] = "!muR, &FD";
      stringArray0[3] = "";
      stringArray0[4] = "[?$pR*7WLHv";
      stringArray0[5] = "!muR, &FD";
      MultiKey<String> multiKey2 = new MultiKey<String>(stringArray0, true);
      multiKey1.equals(multiKey1);
      MultiKey<Integer>[] multiKeyArray0 = (MultiKey<Integer>[]) Array.newInstance(MultiKey.class, 7);
      Integer[] integerArray0 = new Integer[0];
      MultiKey<Integer> multiKey3 = new MultiKey<Integer>(integerArray0, true);
      multiKeyArray0[0] = multiKey3;
      int int0 = (-916);
      Integer integer0 = new Integer((-916));
      MultiKey<Object> multiKey4 = new MultiKey<Object>((Object) null, "G9d&>KF{R rEi", "!muR, &FD");
      // Undeclared exception!
//      try { 
        multiKey4.getKey((-916));
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // -916
//         //
//         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
//      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Integer integer0 = new Integer(0);
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) integer0;
      objectArray0[1] = (Object) integer0;
      objectArray0[2] = (Object) integer0;
      objectArray0[3] = (Object) integer0;
      objectArray0[4] = (Object) integer0;
      MultiKey<Object> multiKey0 = new MultiKey<Object>(objectArray0, false);
      Object object0 = multiKey0.getKey(0);
      MultiKey<Integer> multiKey1 = new MultiKey<Integer>(integer0, (Integer) null, (Integer) null);
      multiKey1.getKey(1);
      MultiKey<Object> multiKey2 = new MultiKey<Object>(object0, (Object) null, objectArray0[4], (Object) null);
      String string0 = multiKey2.toString();
      assertEquals("MultiKey[0, null, 0, null]", string0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      String[] stringArray0 = new String[5];
      stringArray0[0] = "";
      stringArray0[1] = "Xrc2Iixf";
      stringArray0[2] = "qO?Rvch@GKs<7Q";
      stringArray0[4] = "hImqF?\u0002)i;2Gy\"Wi";
      MultiKey<String> multiKey0 = new MultiKey<String>(stringArray0);
      multiKey0.toString();
      MultiKey<String> multiKey1 = new MultiKey<String>(stringArray0);
      boolean boolean0 = multiKey1.equals(multiKey0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("", "MultiKey", "");
      MultiKey<Integer>[] multiKeyArray0 = (MultiKey<Integer>[]) Array.newInstance(MultiKey.class, 0);
      MultiKey<MultiKey<Integer>> multiKey1 = new MultiKey<MultiKey<Integer>>(multiKeyArray0, false);
      MultiKey<MultiKey<Integer>> multiKey2 = new MultiKey<MultiKey<Integer>>(multiKeyArray0, true);
      int int0 = multiKey2.size();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      MultiKey<String> multiKey0 = null;
//      try {
        multiKey0 = new MultiKey<String>((String[]) null, false);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // The array of keys must not be null
//         //
//         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
//      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      MultiKey<Object> multiKey0 = new MultiKey<Object>(objectArray0);
      multiKey0.getKeys();
      String[] stringArray0 = new String[2];
      stringArray0[0] = "%^kF3/a=JhJ],";
      stringArray0[1] = "q@Q&!~C)vcZWYC=R";
      MultiKey<String> multiKey1 = new MultiKey<String>(stringArray0);
      boolean boolean0 = multiKey1.equals("q@Q&!~C)vcZWYC=R");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Integer integer0 = new Integer(1);
      MultiKey<Object> multiKey0 = new MultiKey<Object>(integer0, integer0, integer0);
      multiKey0.toString();
      multiKey0.hashCode();
      multiKey0.toString();
      multiKey0.toString();
      MultiKey<Integer> multiKey1 = new MultiKey<Integer>(integer0, integer0, integer0, integer0);
      multiKey1.toString();
      multiKey1.toString();
      multiKey1.hashCode();
      multiKey1.toString();
      multiKey1.toString();
      multiKey1.toString();
      multiKey1.toString();
      Object object0 = new Object();
      boolean boolean0 = multiKey1.equals(object0);
      assertFalse(boolean0);
      
      MultiKey<String> multiKey2 = new MultiKey<String>("MultiKey[1, 1, 1]", "MultiKey[1, 1, 1]", "MultiKey[1, 1, 1]");
      String string0 = multiKey2.toString();
      assertEquals("MultiKey[MultiKey[1, 1, 1], MultiKey[1, 1, 1], MultiKey[1, 1, 1]]", string0);
      
      multiKey2.size();
      multiKey2.size();
      String[] stringArray0 = new String[9];
      stringArray0[0] = "MultiKey[1, 1, 1]";
      stringArray0[1] = "MultiKey[MultiKey[1, 1, 1], MultiKey[1, 1, 1], MultiKey[1, 1, 1]]";
      stringArray0[2] = "MultiKey[1, 1, 1]";
      stringArray0[3] = "MultiKey[1, 1, 1, 1]";
      stringArray0[4] = "MultiKey[1, 1, 1, 1]";
      stringArray0[5] = "MultiKey[1, 1, 1, 1]";
      stringArray0[6] = "MultiKey[1, 1, 1, 1]";
      stringArray0[7] = "MultiKey[1, 1, 1, 1]";
      stringArray0[8] = "MultiKey[MultiKey[1, 1, 1], MultiKey[1, 1, 1], MultiKey[1, 1, 1]]";
      MultiKey<String> multiKey3 = new MultiKey<String>(stringArray0);
      MultiKey<MultiKey<String>> multiKey4 = new MultiKey<MultiKey<String>>(multiKey2, multiKey3, multiKey3);
      MultiKey multiKey5 = (MultiKey)multiKey4.getKey(0);
      boolean boolean1 = multiKey1.equals(multiKey5);
      assertEquals(3, multiKey5.size());
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Object object0 = new Object();
      MultiKey<Object> multiKey0 = new MultiKey<Object>(object0, object0);
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      Integer integer0 = new Integer((-4502));
      MultiKey<Integer> multiKey1 = new MultiKey<Integer>(integer0, integer0);
      multiKey0.toString();
      multiKey0.toString();
      multiKey1.toString();
      multiKey1.toString();
      multiKey1.toString();
      multiKey1.size();
      multiKey1.toString();
      MultiKey<String> multiKey2 = new MultiKey<String>("", "ylB.hFi\u00059v+td", "MultiKey[java.lang.Object@7af85957, java.lang.Object@7af85957]");
      multiKey2.toString();
      multiKey2.toString();
      multiKey0.equals("");
      multiKey1.hashCode();
      multiKey0.toString();
      multiKey0.equals("");
      multiKey0.getKeys();
      multiKey0.size();
      // Undeclared exception!
//      try { 
        multiKey0.getKey((-4502));
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // -4502
//         //
//         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
//      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      MultiKey<Object> multiKey0 = null;
//      try {
        multiKey0 = new MultiKey<Object>((Object[]) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // The array of keys must not be null
//         //
//         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
//      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      String[] stringArray0 = new String[4];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "'~J3dB^LO]nYi;Od";
      stringArray0[3] = "";
      MultiKey<String> multiKey0 = new MultiKey<String>(stringArray0);
      multiKey0.toString();
      Integer integer0 = new Integer(937);
      Integer integer1 = new Integer(299);
      MultiKey<Integer> multiKey1 = new MultiKey<Integer>(integer0, integer1, integer1, integer1);
      multiKey1.toString();
      multiKey1.toString();
      multiKey1.toString();
      multiKey1.getKey(0);
      Integer integer2 = new Integer(1);
      MultiKey<Object> multiKey2 = new MultiKey<Object>("MultiKey[937, 299, 299, 299]", (Object) null, integer2);
      MultiKey<MultiKey<Object>> multiKey3 = new MultiKey<MultiKey<Object>>(multiKey2, multiKey2);
      multiKey3.toString();
      Object object0 = multiKey3.getKey(1);
      MultiKey<Object> multiKey4 = new MultiKey<Object>("", object0, "", multiKey0, "");
      multiKey2.toString();
      multiKey4.toString();
      multiKey3.toString();
      multiKey4.size();
      MultiKey<MultiKey<Integer>> multiKey5 = new MultiKey<MultiKey<Integer>>(multiKey1, multiKey1, multiKey1);
      multiKey5.toString();
      multiKey5.size();
      // Undeclared exception!
//      try { 
        multiKey0.getKey(5);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 5
//         //
//         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
//      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      String[] stringArray0 = new String[5];
      stringArray0[0] = "";
      stringArray0[1] = "Xrc2Iixf";
      stringArray0[2] = "qO?Rvch@GKs<7Q";
      stringArray0[3] = "";
      stringArray0[4] = "hImqF?\u0002)i;2Gy\"Wi";
      MultiKey<String> multiKey0 = new MultiKey<String>(stringArray0);
      MultiKey<Object> multiKey1 = new MultiKey<Object>(multiKey0, "hImqF?\u0002)i;2Gy\"Wi");
      String string0 = multiKey1.toString();
      assertEquals("MultiKey[MultiKey[, Xrc2Iixf, qO?Rvch@GKs<7Q, , hImqF?\u0002)i;2Gy\"Wi], hImqF?\u0002)i;2Gy\"Wi]", string0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("", "PC3mYAG,rA", "", "PC3mYAG,rA");
      Integer[] integerArray0 = new Integer[9];
      Integer integer0 = new Integer((-233));
      integerArray0[0] = integer0;
      Integer integer1 = new Integer((-233));
      integerArray0[1] = integer1;
      Integer integer2 = new Integer(991);
      integerArray0[2] = integer2;
      Integer integer3 = new Integer(5);
      integerArray0[3] = integer3;
      Integer integer4 = new Integer((-634));
      integerArray0[4] = integer4;
      Integer integer5 = new Integer(0);
      integerArray0[5] = integer5;
      Integer integer6 = new Integer((-32));
      integerArray0[6] = integer6;
      Integer integer7 = new Integer((-74));
      integerArray0[7] = integer7;
      Integer integer8 = new Integer(0);
      integerArray0[8] = integer8;
      MultiKey<Integer> multiKey1 = new MultiKey<Integer>(integerArray0);
      Integer[] integerArray1 = multiKey1.getKeys();
      assertNotSame(integerArray0, integerArray1);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Object[] objectArray0 = new Object[5];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      Object object2 = new Object();
      objectArray0[2] = object2;
      Object object3 = new Object();
      objectArray0[3] = object3;
      Object object4 = new Object();
      objectArray0[4] = object4;
      MultiKey<Object> multiKey0 = new MultiKey<Object>(objectArray0, true);
      MultiKey<Object> multiKey1 = new MultiKey<Object>(multiKey0, object2, object2, multiKey0);
      // Undeclared exception!
//      try { 
        multiKey1.getKey((-2496));
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // -2496
//         //
//         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
//      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      MultiKey<Object> multiKey0 = new MultiKey<Object>("", "");
      String[] stringArray0 = new String[8];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "";
      stringArray0[3] = "Km4:[aap84X| u";
      stringArray0[4] = "";
      stringArray0[5] = "G9d&>KF{R rEi";
      stringArray0[6] = "";
      stringArray0[7] = "";
      MultiKey<String> multiKey1 = new MultiKey<String>(stringArray0);
      boolean boolean0 = multiKey1.equals("");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      String[] stringArray0 = new String[1];
      stringArray0[0] = "TH?";
      MultiKey<String> multiKey0 = new MultiKey<String>(stringArray0);
      MultiKey<Integer>[] multiKeyArray0 = (MultiKey<Integer>[]) Array.newInstance(MultiKey.class, 5);
      Integer integer0 = new Integer((-3282));
      MultiKey<Integer> multiKey1 = new MultiKey<Integer>((Integer) null, integer0, (Integer) null, integer0, (Integer) null);
      multiKeyArray0[0] = multiKey1;
      Integer integer1 = new Integer((-3282));
      MultiKey<Integer> multiKey2 = new MultiKey<Integer>((Integer) null, integer0, integer0, integer1);
      multiKeyArray0[1] = multiKey2;
      Integer[] integerArray0 = new Integer[8];
      integerArray0[0] = integer1;
      integerArray0[1] = null;
      integerArray0[2] = null;
      integerArray0[3] = integer0;
      Integer integer2 = new Integer(0);
      integerArray0[4] = integer2;
      integerArray0[5] = integer0;
      integerArray0[6] = integer0;
      integerArray0[7] = null;
      MultiKey<Integer> multiKey3 = new MultiKey<Integer>(integerArray0);
      multiKeyArray0[2] = multiKey3;
      Integer integer3 = new Integer((-1280));
      MultiKey<Integer> multiKey4 = new MultiKey<Integer>(integer3, integer3, integerArray0[1]);
      multiKeyArray0[3] = multiKey4;
      Integer integer4 = new Integer(0);
      MultiKey<Integer> multiKey5 = new MultiKey<Integer>(integer2, integer4);
      multiKeyArray0[4] = multiKey5;
      MultiKey<MultiKey<Integer>> multiKey6 = new MultiKey<MultiKey<Integer>>(multiKeyArray0, false);
      int int0 = multiKey6.size();
      assertEquals(5, int0);
  }
}
