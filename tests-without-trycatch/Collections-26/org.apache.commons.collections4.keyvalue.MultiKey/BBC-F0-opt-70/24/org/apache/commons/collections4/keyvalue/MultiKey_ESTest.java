/*
 * This file was automatically generated by EvoSuite
 * Fri Oct 22 17:40:27 GMT 2021
 */

package org.apache.commons.collections4.keyvalue;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.lang.reflect.Array;
import org.apache.commons.collections4.keyvalue.MultiKey;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class MultiKey_ESTest extends MultiKey_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("~4sKsc2t{Zd", "~4sKsc2t{Zd", "~4sKsc2t{Zd");
      Object[] objectArray0 = new Object[2];
      multiKey0.toString();
      multiKey0.toString();
      objectArray0[0] = (Object) "~4sKsc2t{Zd";
      objectArray0[1] = (Object) multiKey0;
      MultiKey<Object> multiKey1 = new MultiKey<Object>(objectArray0);
      multiKey1.toString();
      multiKey1.toString();
      multiKey1.toString();
      multiKey1.toString();
      Object object0 = multiKey1.getKey(1);
      multiKey0.equals(object0);
      String[] stringArray0 = new String[3];
      stringArray0[0] = "";
      stringArray0[1] = "~4sKsc2t{Zd";
      stringArray0[2] = "MultiKey[~4sKsc2t{Zd, MultiKey[~4sKsc2t{Zd, ~4sKsc2t{Zd, ~4sKsc2t{Zd]]";
      MultiKey<String> multiKey2 = new MultiKey<String>(stringArray0, false);
      MultiKey<MultiKey<String>> multiKey3 = new MultiKey<MultiKey<String>>(multiKey0, multiKey2, multiKey0);
      multiKey3.toString();
      multiKey0.size();
      Integer[] integerArray0 = new Integer[5];
      Integer integer0 = new Integer(705);
      integerArray0[0] = integer0;
      Integer integer1 = new Integer((int) integerArray0[0]);
      integerArray0[1] = integer1;
      Integer integer2 = new Integer((-2233));
      integerArray0[2] = integer2;
      Integer integer3 = new Integer((int) integerArray0[2]);
      integerArray0[3] = integer3;
      Integer integer4 = new Integer(3);
      integerArray0[4] = integer4;
      MultiKey<Integer> multiKey4 = new MultiKey<Integer>(integerArray0);
      int int0 = multiKey4.size();
      assertEquals(5, int0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) "no5o`Zs81lA<8";
      MultiKey<Object> multiKey0 = new MultiKey<Object>(objectArray0, false);
      multiKey0.toString();
      MultiKey<Object> multiKey1 = new MultiKey<Object>(multiKey0, multiKey0);
      MultiKey<MultiKey<Object>> multiKey2 = new MultiKey<MultiKey<Object>>(multiKey0, multiKey0);
      multiKey0.toString();
      boolean boolean0 = multiKey2.equals(multiKey1);
      assertTrue(boolean0);
      
      MultiKey<String> multiKey3 = new MultiKey<String>("no5o`Zs81lA<8", "MultiKey[no5o`Zs81lA<8]", "", "");
      Object object0 = new Object();
      MultiKey<String> multiKey4 = new MultiKey<String>("no5o`Zs81lA<8", "X}i;m");
      String string0 = multiKey4.toString();
      assertEquals("MultiKey[no5o`Zs81lA<8, X}i;m]", string0);
      
      MultiKey<String> multiKey5 = new MultiKey<String>("", (String) null, (String) null, "MultiKey", "MultiKey[no5o`Zs81lA<8]");
      multiKey0.getKeys();
      assertFalse(multiKey0.equals((Object)multiKey1));
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>((Integer) null, (Integer) null);
      multiKey0.toString();
      Object[] objectArray0 = new Object[0];
      MultiKey<Object> multiKey1 = new MultiKey<Object>(objectArray0, true);
      multiKey1.equals((Object) null);
      multiKey0.size();
      MultiKey<String> multiKey2 = new MultiKey<String>("ycf/&4zBz", "MultiKey[null, null]", "v{n`f`4)WD", "x4cWYSXk)I,w/m", "ycf/&4zBz");
      multiKey2.toString();
      multiKey1.toString();
      multiKey2.getKey(2);
      multiKey1.size();
      Object[] objectArray1 = multiKey1.getKeys();
      assertFalse(objectArray1.equals((Object)objectArray0));
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Integer[] integerArray0 = new Integer[2];
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integerArray0, true);
      MultiKey<Object> multiKey1 = new MultiKey<Object>((Object[]) integerArray0, false);
      boolean boolean0 = multiKey0.equals(multiKey1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Integer integer0 = new Integer((-3731));
      MultiKey<Object> multiKey0 = new MultiKey<Object>(integer0, integer0, integer0);
      Integer[] integerArray0 = new Integer[0];
      MultiKey<Integer> multiKey1 = new MultiKey<Integer>(integerArray0, true);
      Integer[] integerArray1 = multiKey1.getKeys();
      assertEquals(0, integerArray1.length);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Object object0 = new Object();
      MultiKey<String> multiKey0 = new MultiKey<String>((String) null, (String) null, (String) null, (String) null, (String) null);
      multiKey0.getKey(4);
      MultiKey<Object> multiKey1 = new MultiKey<Object>(object0, (Object) null);
      multiKey1.toString();
      multiKey1.toString();
      multiKey1.equals((Object) null);
      multiKey1.toString();
      multiKey0.hashCode();
      Integer integer0 = new Integer(3654);
      Integer integer1 = new Integer(3654);
      multiKey0.toString();
      multiKey0.toString();
      Integer integer2 = new Integer(4);
      MultiKey<Integer> multiKey2 = new MultiKey<Integer>(integer0, integer0, integer1, (Integer) null, integer2);
      Object object1 = new Object();
      multiKey2.equals(object1);
      // Undeclared exception!
//      try { 
        multiKey0.getKey(3654);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 3654
//         //
//         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
//      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("", "", "", "", "");
      Integer integer0 = new Integer((-2851));
      String string0 = multiKey0.toString();
      assertEquals("MultiKey[, , , , ]", string0);
      
      MultiKey<Integer> multiKey1 = new MultiKey<Integer>(integer0, integer0, integer0);
      boolean boolean0 = multiKey1.equals(multiKey0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>((Integer) null, (Integer) null);
      multiKey0.toString();
      Object[] objectArray0 = new Object[0];
      MultiKey<Object> multiKey1 = new MultiKey<Object>(objectArray0, true);
      multiKey1.toString();
      multiKey1.equals((Object) null);
      multiKey0.size();
      MultiKey<String> multiKey2 = new MultiKey<String>("ycf/&4zBz", "MultiKey[]", "v{n`f`4)WD", "x4cWYSXk)I,w/m", "ycf/&4zBz");
      multiKey2.toString();
      multiKey2.toString();
      multiKey1.toString();
      // Undeclared exception!
//      try { 
        multiKey2.getKey((-221));
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // -221
//         //
//         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
//      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      String string0 = "IZ]ap?tW''IgfC.";
      MultiKey<String> multiKey0 = new MultiKey<String>("IZ]ap?tW''IgfC.", "IZ]ap?tW''IgfC.", "IZ]ap?tW''IgfC.");
      multiKey0.getKey(0);
      MultiKey<Object> multiKey1 = new MultiKey<Object>("IZ]ap?tW''IgfC.", multiKey0, (Object) null);
      multiKey1.toString();
      multiKey1.toString();
      multiKey1.toString();
      multiKey1.hashCode();
      Integer[] integerArray0 = new Integer[2];
      Integer integer0 = new Integer(0);
      integerArray0[0] = integer0;
      Integer integer1 = new Integer(0);
      integerArray0[1] = integer1;
      MultiKey<Integer> multiKey2 = new MultiKey<Integer>(integerArray0);
      multiKey2.toString();
      multiKey2.size();
      MultiKey<MultiKey<String>> multiKey3 = new MultiKey<MultiKey<String>>(multiKey0, multiKey0, multiKey0, multiKey0, multiKey0);
      multiKey3.getKeys();
      // Undeclared exception!
//      try { 
        multiKey1.getKey((-1));
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // -1
//         //
//         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
//      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Integer integer0 = new Integer((-927));
      Integer integer1 = new Integer((-927));
      Integer integer2 = new Integer((-927));
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integer0, integer1, integer2);
      multiKey0.toString();
      multiKey0.getKey(1);
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) integer2;
      MultiKey<Object> multiKey1 = new MultiKey<Object>(objectArray0, true);
      multiKey1.toString();
      multiKey1.toString();
      // Undeclared exception!
//      try { 
        multiKey1.getKey(1);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 1
//         //
//         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
//      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Object[] objectArray0 = new Object[1];
      Object object0 = new Object();
      objectArray0[0] = object0;
      MultiKey<Object> multiKey0 = new MultiKey<Object>(objectArray0);
      Integer integer0 = new Integer(1936);
      Integer integer1 = new Integer(0);
      multiKey0.toString();
      multiKey0.toString();
      Integer integer2 = new Integer(1936);
      Integer integer3 = new Integer(1936);
      MultiKey<Integer> multiKey1 = new MultiKey<Integer>(integer0, integer1, integer2, integer3, integer2);
      multiKey1.toString();
      multiKey1.toString();
      multiKey1.size();
      Object[] objectArray1 = multiKey0.getKeys();
      assertFalse(objectArray1.equals((Object)objectArray0));
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Integer integer0 = null;
      int int0 = 533;
      Integer integer1 = new Integer(533);
      Integer integer2 = new Integer(533);
      Integer integer3 = new Integer(533);
      Integer integer4 = new Integer(0);
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>((Integer) null, integer1, integer2, integer3, integer4);
      MultiKey<String> multiKey1 = null;
//      try {
        multiKey1 = new MultiKey<String>((String[]) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // The array of keys must not be null
//         //
//         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
//      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      MultiKey<String> multiKey0 = null;
//      try {
        multiKey0 = new MultiKey<String>((String[]) null, true);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // The array of keys must not be null
//         //
//         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
//      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      String string0 = "X<Z).ds\\u4%";
      MultiKey<Object>[] multiKeyArray0 = (MultiKey<Object>[]) Array.newInstance(MultiKey.class, 9);
      int int0 = (-1866);
      Integer integer0 = new Integer((-1866));
      MultiKey<String> multiKey0 = new MultiKey<String>(string0, "P[v", "P[v", "P[v");
      MultiKey<Object> multiKey1 = new MultiKey<Object>("P[v", integer0, multiKey0, "P[v");
      multiKeyArray0[0] = multiKey1;
      Object object0 = new Object();
      Object object1 = new Object();
      Object object2 = new Object();
      MultiKey<Object> multiKey2 = new MultiKey<Object>("", object1, multiKey0, object2);
      int int1 = 2;
      Integer integer1 = new Integer(2);
      MultiKey<Object> multiKey3 = new MultiKey<Object>(object0, string0, multiKey2, integer1);
      multiKeyArray0[1] = multiKey3;
      Integer integer2 = new Integer((-1866));
      MultiKey<Object> multiKey4 = new MultiKey<Object>(multiKey3, multiKey1, multiKey1, integer2);
      multiKeyArray0[2] = multiKey4;
      Integer integer3 = new Integer((-1866));
      MultiKey<MultiKey<Object>> multiKey5 = new MultiKey<MultiKey<Object>>(multiKey2, multiKey1, multiKey1, multiKey3);
      // Undeclared exception!
//      try { 
        multiKey5.getKey((-1866));
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // -1866
//         //
//         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
//      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Integer integer0 = new Integer((-476));
      Integer[] integerArray0 = new Integer[2];
      integerArray0[0] = integer0;
      Integer integer1 = new Integer((int) integerArray0[0]);
      integerArray0[1] = integer1;
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integerArray0);
      // Undeclared exception!
//      try { 
        multiKey0.getKey((int) integerArray0[1]);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // -476
//         //
//         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
//      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      MultiKey<Object> multiKey0 = new MultiKey<Object>(objectArray0, true);
      int int0 = 0;
      // Undeclared exception!
//      try { 
        multiKey0.getKey(0);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 0
//         //
//         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
//      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Object object0 = new Object();
      MultiKey<Object> multiKey0 = new MultiKey<Object>(object0, object0, object0);
      String string0 = multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.equals(object0);
      multiKey0.toString();
      multiKey0.getKeys();
      multiKey0.getKeys();
      String string1 = multiKey0.toString();
      assertTrue(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Object object0 = new Object();
      String string0 = null;
      MultiKey<Object> multiKey0 = new MultiKey<Object>((Object) null, (Object) null, object0, (Object) null, (Object) null);
      int int0 = 3658;
      // Undeclared exception!
//      try { 
        multiKey0.getKey(3658);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 3658
//         //
//         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
//      }
  }
}
