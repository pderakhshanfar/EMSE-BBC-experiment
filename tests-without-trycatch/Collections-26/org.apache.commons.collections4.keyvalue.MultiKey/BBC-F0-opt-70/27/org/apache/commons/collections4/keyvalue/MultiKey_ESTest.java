/*
 * This file was automatically generated by EvoSuite
 * Fri Oct 22 17:50:25 GMT 2021
 */

package org.apache.commons.collections4.keyvalue;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.lang.reflect.Array;
import org.apache.commons.collections4.keyvalue.MultiKey;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class MultiKey_ESTest extends MultiKey_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Integer[] integerArray0 = new Integer[7];
      Integer integer0 = new Integer((-2752));
      integerArray0[0] = integer0;
      Integer integer1 = new Integer((-2695));
      integerArray0[1] = integer1;
      Integer integer2 = new Integer((int) integerArray0[1]);
      integerArray0[2] = integer2;
      int int0 = 5;
      Integer integer3 = new Integer(5);
      integerArray0[3] = integer3;
      Integer integer4 = new Integer((-2695));
      integerArray0[4] = integer4;
      Integer integer5 = new Integer(int0);
      integerArray0[5] = integer5;
      Integer integer6 = new Integer(1);
      integerArray0[6] = integer6;
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integerArray0, true);
      multiKey0.toString();
      multiKey0.size();
      String[] stringArray0 = new String[0];
      MultiKey<String> multiKey1 = new MultiKey<String>(stringArray0, true);
      multiKey1.size();
      multiKey1.toString();
      MultiKey<Object> multiKey2 = new MultiKey<Object>(multiKey1, "org.apache.commons.collections4.keyvalue.MultiKey", int0, "", "MultiKey[-2752, -2695, -2695, 5, -2695, 5, 1]");
      multiKey2.size();
      // Undeclared exception!
//      try { 
        multiKey2.getKey(848);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 848
//         //
//         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
//      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("o?_K4Wt6", "o?_K4Wt6");
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.size();
      Integer integer0 = new Integer(2);
      Integer integer1 = new Integer(5);
      MultiKey<Integer> multiKey1 = new MultiKey<Integer>((Integer) null, integer0, (Integer) null, integer1);
      multiKey1.toString();
      multiKey0.toString();
      multiKey1.toString();
      multiKey1.toString();
      Integer integer2 = new Integer((-74));
      MultiKey<MultiKey<String>> multiKey2 = new MultiKey<MultiKey<String>>(multiKey0, multiKey0, multiKey0);
      Object object0 = multiKey2.getKey(2);
      multiKey1.toString();
      multiKey0.equals(object0);
      MultiKey<MultiKey<Integer>> multiKey3 = new MultiKey<MultiKey<Integer>>(multiKey1, multiKey1, multiKey1);
      multiKey3.toString();
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) "MultiKey[o?_K4Wt6, o?_K4Wt6]";
      objectArray0[1] = (Object) "MultiKey[null, 2, null, 5]";
      objectArray0[2] = (Object) "o?_K4Wt6";
      objectArray0[3] = (Object) multiKey1;
      MultiKey<Object> multiKey4 = new MultiKey<Object>(objectArray0);
      Object[] objectArray1 = multiKey4.getKeys();
      assertFalse(objectArray1.equals((Object)objectArray0));
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Object object0 = new Object();
      MultiKey<Object> multiKey0 = new MultiKey<Object>(object0, object0, object0, object0);
      Integer integer0 = new Integer((-398));
      Integer integer1 = new Integer((-398));
      MultiKey<Integer> multiKey1 = new MultiKey<Integer>((Integer) null, integer0, integer1);
      multiKey1.toString();
      String[] stringArray0 = new String[0];
      MultiKey<String> multiKey2 = new MultiKey<String>(stringArray0, false);
      multiKey2.toString();
      multiKey1.toString();
      MultiKey<Object> multiKey3 = new MultiKey<Object>(integer1, (Object) null, (Object) null);
      MultiKey<Object> multiKey4 = new MultiKey<Object>((Object[]) stringArray0, false);
      multiKey4.getKeys();
      multiKey3.size();
      MultiKey<String> multiKey5 = new MultiKey<String>(stringArray0, false);
      Integer integer2 = new Integer((-398));
      MultiKey<Object> multiKey6 = new MultiKey<Object>(multiKey3, multiKey5, "MultiKey[null, -398, -398]", integer2, (Object) null);
      MultiKey<MultiKey<Object>> multiKey7 = new MultiKey<MultiKey<Object>>(multiKey6, multiKey0, multiKey6);
      multiKey3.toString();
      // Undeclared exception!
//      try { 
        multiKey7.getKey(3);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 3
//         //
//         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
//      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Object object0 = new Object();
      Integer integer0 = new Integer((-1565));
      MultiKey<String> multiKey0 = new MultiKey<String>("", "Z|Ps4P^OSm<7d(cMaqc", "");
      Integer integer1 = new Integer((-1565));
      Integer integer2 = new Integer(2);
      MultiKey<Integer> multiKey1 = new MultiKey<Integer>(integer1, integer1, integer2);
      MultiKey<String> multiKey2 = new MultiKey<String>("", "", "");
      boolean boolean0 = multiKey1.equals(multiKey2);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      MultiKey<Object> multiKey0 = null;
//      try {
        multiKey0 = new MultiKey<Object>((Object[]) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // The array of keys must not be null
//         //
//         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
//      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      MultiKey<Object> multiKey0 = new MultiKey<Object>((Object) null, (Object) null, (Object) null);
      MultiKey<Object> multiKey1 = new MultiKey<Object>("quM>RN", "quM>RN");
      MultiKey<Object> multiKey2 = null;
//      try {
        multiKey2 = new MultiKey<Object>((Object[]) null, true);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // The array of keys must not be null
//         //
//         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
//      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      MultiKey<Object>[] multiKeyArray0 = (MultiKey<Object>[]) Array.newInstance(MultiKey.class, 9);
      Object[] objectArray0 = new Object[5];
      int int0 = (-2650);
      Integer integer0 = new Integer((-2650));
      Integer integer1 = new Integer((-2650));
      Integer integer2 = new Integer((-2650));
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integer0, integer1, integer2, integer2, integer1);
      int int1 = 0;
      Integer integer3 = multiKey0.getKey(0);
      objectArray0[0] = (Object) integer3;
      boolean boolean0 = false;
      MultiKey<Object> multiKey1 = new MultiKey<Object>((Object[]) multiKeyArray0, false);
      multiKey1.getKey(0);
      objectArray0[1] = null;
      Object object0 = new Object();
      objectArray0[2] = object0;
      String string0 = "";
      String string1 = "";
      MultiKey<String> multiKey2 = new MultiKey<String>("", "", "", "", "");
      multiKey2.getKey(0);
      objectArray0[3] = (Object) "";
      Object object1 = new Object();
      objectArray0[4] = object1;
      MultiKey<Object> multiKey3 = new MultiKey<Object>(objectArray0);
      multiKeyArray0[0] = multiKey3;
      Integer integer4 = new Integer(0);
      Integer integer5 = new Integer(0);
      MultiKey<Object> multiKey4 = new MultiKey<Object>("", object0, integer4, integer5, "");
      multiKeyArray0[1] = multiKey4;
      MultiKey<Object> multiKey5 = new MultiKey<Object>(multiKeyArray0);
      multiKeyArray0[2] = multiKey5;
      Object[] objectArray1 = new Object[6];
      int int2 = (-2867);
      // Undeclared exception!
//      try { 
        multiKey1.getKey((-2867));
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // -2867
//         //
//         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
//      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Integer integer0 = new Integer(0);
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) integer0;
      objectArray0[1] = (Object) integer0;
      objectArray0[2] = (Object) integer0;
      objectArray0[3] = (Object) integer0;
      objectArray0[4] = (Object) integer0;
      MultiKey<Object> multiKey0 = new MultiKey<Object>(objectArray0, false);
      MultiKey<MultiKey<Object>> multiKey1 = new MultiKey<MultiKey<Object>>(multiKey0, multiKey0);
      multiKey1.toString();
      multiKey0.toString();
      MultiKey<Object> multiKey2 = multiKey1.getKey(0);
      objectArray0[5] = (Object) multiKey2;
      MultiKey<Object> multiKey3 = new MultiKey<Object>(objectArray0);
      MultiKey<Object> multiKey4 = new MultiKey<Object>(integer0, integer0, integer0, multiKey3, objectArray0[2]);
      multiKey4.getKeys();
      multiKey4.getKeys();
      MultiKey<String> multiKey5 = new MultiKey<String>("", "", "MultiKey[0, 0, 0, 0, 0, null]", "YOV$[+:u#qxU+");
      // Undeclared exception!
//      try { 
        multiKey5.getKey(953);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 953
//         //
//         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
//      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      int int0 = 184;
      Integer integer0 = new Integer(184);
      MultiKey<Object> multiKey0 = new MultiKey<Object>(integer0, (Object) null, integer0, integer0);
      multiKey0.hashCode();
      multiKey0.toString();
      multiKey0.toString();
      // Undeclared exception!
//      try { 
        multiKey0.getKey((-4587));
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // -4587
//         //
//         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
//      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Integer integer0 = new Integer(0);
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integer0, integer0, integer0);
      MultiKey<Object> multiKey1 = new MultiKey<Object>(integer0, multiKey0, integer0);
      multiKey1.getKeys();
      MultiKey<Object>[] multiKeyArray0 = (MultiKey<Object>[]) Array.newInstance(MultiKey.class, 7);
      multiKeyArray0[0] = multiKey1;
      multiKeyArray0[1] = multiKey1;
      multiKeyArray0[2] = multiKey1;
      multiKeyArray0[3] = multiKey1;
      multiKeyArray0[4] = multiKey1;
      multiKeyArray0[5] = multiKey1;
      MultiKey<Object> multiKey2 = new MultiKey<Object>(multiKeyArray0);
      multiKeyArray0[6] = multiKey2;
      MultiKey<MultiKey<Object>> multiKey3 = new MultiKey<MultiKey<Object>>(multiKeyArray0, false);
      String string0 = multiKey3.toString();
      assertEquals("MultiKey[MultiKey[0, MultiKey[0, 0, 0], 0], MultiKey[0, MultiKey[0, 0, 0], 0], MultiKey[0, MultiKey[0, 0, 0], 0], MultiKey[0, MultiKey[0, 0, 0], 0], MultiKey[0, MultiKey[0, 0, 0], 0], MultiKey[0, MultiKey[0, 0, 0], 0], MultiKey[MultiKey[0, MultiKey[0, 0, 0], 0], MultiKey[0, MultiKey[0, 0, 0], 0], MultiKey[0, MultiKey[0, 0, 0], 0], MultiKey[0, MultiKey[0, 0, 0], 0], MultiKey[0, MultiKey[0, 0, 0], 0], MultiKey[0, MultiKey[0, 0, 0], 0], null]]", string0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      MultiKey<Object> multiKey0 = new MultiKey<Object>("z/", "Va3l:]");
      multiKey0.toString();
      multiKey0.equals("z/");
      Integer[] integerArray0 = new Integer[2];
      Integer integer0 = new Integer(5);
      integerArray0[0] = integer0;
      Integer integer1 = new Integer(5);
      integerArray0[1] = integer1;
      MultiKey<Integer> multiKey1 = new MultiKey<Integer>(integerArray0);
      multiKey1.toString();
      multiKey1.toString();
      String[] stringArray0 = new String[9];
      stringArray0[0] = "Va3l:]";
      stringArray0[1] = "MultiKey[z/, Va3l:]]";
      stringArray0[2] = "MultiKey[z/, Va3l:]]";
      stringArray0[3] = "MultiKey[5, 5]";
      stringArray0[4] = "MultiKey[z/, Va3l:]]";
      stringArray0[5] = "Va3l:]";
      stringArray0[6] = "MultiKey[5, 5]";
      stringArray0[7] = "MultiKey[z/, Va3l:]]";
      stringArray0[8] = "Va3l:]";
      MultiKey<String> multiKey2 = new MultiKey<String>(stringArray0, false);
      int int0 = multiKey2.size();
      assertEquals(9, int0);
  }
}
