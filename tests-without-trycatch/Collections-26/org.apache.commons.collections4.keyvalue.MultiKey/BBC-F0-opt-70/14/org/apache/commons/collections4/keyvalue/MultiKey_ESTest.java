/*
 * This file was automatically generated by EvoSuite
 * Wed Oct 20 12:25:13 GMT 2021
 */

package org.apache.commons.collections4.keyvalue;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.collections4.keyvalue.MultiKey;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class MultiKey_ESTest extends MultiKey_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      String[] stringArray0 = new String[0];
      MultiKey<String> multiKey0 = new MultiKey<String>(stringArray0, true);
      multiKey0.size();
      Integer integer0 = new Integer(0);
      Integer integer1 = new Integer(1151);
      Integer integer2 = new Integer(0);
      MultiKey<Integer> multiKey1 = new MultiKey<Integer>(integer0, integer0, integer0, integer1, integer2);
      multiKey1.toString();
      multiKey1.toString();
      multiKey1.getKey(0);
      Integer integer3 = new Integer((-149));
      MultiKey<Integer> multiKey2 = new MultiKey<Integer>((Integer) null, (Integer) null, integer3, integer3);
      multiKey2.toString();
      Object object0 = new Object();
      MultiKey<String> multiKey3 = new MultiKey<String>("MultiKey[0, 0, 0, 1151, 0]", "org.apache.commons.collections4.keyvalue.MultiKey");
      MultiKey<Object> multiKey4 = new MultiKey<Object>(stringArray0);
      multiKey4.getKeys();
      Object[] objectArray0 = multiKey4.getKeys();
      assertNotSame(stringArray0, objectArray0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Object object0 = new Object();
      MultiKey<String> multiKey0 = new MultiKey<String>("", "", "", "", "");
      String string0 = multiKey0.toString();
      assertEquals("MultiKey[, , , , ]", string0);
      
      Integer integer0 = new Integer((-1));
      Integer integer1 = new Integer(7);
      MultiKey<Object> multiKey1 = new MultiKey<Object>(multiKey0, integer0, multiKey0, integer1, multiKey0);
      Object object1 = multiKey1.getKey(0);
      boolean boolean0 = multiKey0.equals(object1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("MultiKey", "HN+w22");
      Integer integer0 = new Integer(0);
      Integer integer1 = new Integer(2);
      int int0 = 7;
      Integer integer2 = new Integer(7);
      Integer integer3 = new Integer(7);
      Integer integer4 = new Integer(2);
      Integer[] integerArray0 = new Integer[3];
      integerArray0[0] = integer3;
      integerArray0[1] = integer4;
      Integer integer5 = new Integer(0);
      integerArray0[2] = integer5;
      MultiKey<Integer> multiKey1 = new MultiKey<Integer>(integerArray0);
      Object object0 = new Object();
      Integer integer6 = new Integer(8);
      Integer integer7 = new Integer((-580));
      Integer integer8 = new Integer((-3983));
      Integer integer9 = new Integer((-1));
      MultiKey<Object> multiKey2 = new MultiKey<Object>(integer3, integer7, integer8, int0, integer9);
      String string0 = multiKey2.toString();
      assertEquals("MultiKey[7, -580, -3983, 7, -1]", string0);
      
      MultiKey<Integer> multiKey3 = new MultiKey<Integer>((Integer) null, integer5, integer8);
      Object object1 = multiKey3.getKey(0);
      assertNull(object1);
      
      boolean boolean0 = multiKey1.equals("MultiKey");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      String[] stringArray0 = new String[7];
      stringArray0[0] = "j.";
      stringArray0[1] = "";
      String string0 = "?Xcm=!k0z";
      stringArray0[2] = "?Xcm=!k0z";
      stringArray0[3] = "";
      stringArray0[4] = "MultiKey";
      stringArray0[5] = "";
      stringArray0[6] = "The array of keys must not be null";
      MultiKey<String> multiKey0 = new MultiKey<String>(stringArray0);
      MultiKey<MultiKey<String>> multiKey1 = null;
//      try {
        multiKey1 = new MultiKey<MultiKey<String>>((MultiKey<String>[]) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // The array of keys must not be null
//         //
//         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
//      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      String[] stringArray0 = new String[0];
      MultiKey<String> multiKey0 = new MultiKey<String>(stringArray0, true);
      multiKey0.size();
      Integer integer0 = new Integer(0);
      Integer integer1 = new Integer(1151);
      Integer integer2 = new Integer(0);
      MultiKey<Integer> multiKey1 = new MultiKey<Integer>(integer0, integer0, integer0, integer1, integer2);
      multiKey1.toString();
      multiKey1.getKey(0);
      Integer integer3 = new Integer((-149));
      MultiKey<Integer> multiKey2 = new MultiKey<Integer>((Integer) null, (Integer) null, integer3, integer3);
      MultiKey<Object> multiKey3 = new MultiKey<Object>(multiKey2, "", integer2);
      multiKey3.size();
      MultiKey<MultiKey<String>> multiKey4 = new MultiKey<MultiKey<String>>(multiKey0, multiKey0);
      multiKey4.equals("");
      MultiKey<String> multiKey5 = new MultiKey<String>(stringArray0, true);
      // Undeclared exception!
//      try { 
        multiKey5.getKey(2);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 2
//         //
//         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
//      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      String string0 = "HN+w22";
      MultiKey<String> multiKey0 = new MultiKey<String>("MultiKey", "HN+w22");
      int int0 = 0;
      Integer integer0 = new Integer(0);
      Integer integer1 = new Integer(2);
      Integer integer2 = new Integer(2132);
      Integer integer3 = new Integer(0);
      MultiKey<Integer> multiKey1 = new MultiKey<Integer>(integer0, integer1, integer2, integer3);
      Integer integer4 = new Integer((-1));
      multiKey1.toString();
      multiKey0.toString();
      MultiKey<Integer> multiKey2 = new MultiKey<Integer>(integer3, integer1, integer1, integer0, integer4);
      multiKey1.equals(multiKey2);
      Object[] objectArray0 = new Object[0];
      MultiKey<Object> multiKey3 = new MultiKey<Object>(objectArray0, true);
      Integer integer5 = new Integer(0);
      MultiKey<Object> multiKey4 = new MultiKey<Object>(integer5, multiKey1);
      // Undeclared exception!
//      try { 
        multiKey4.getKey((-1));
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // -1
//         //
//         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
//      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      MultiKey<Object> multiKey0 = null;
//      try {
        multiKey0 = new MultiKey<Object>((Object[]) null, true);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // The array of keys must not be null
//         //
//         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
//      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Object object0 = new Object();
      MultiKey<Object> multiKey0 = new MultiKey<Object>(object0, (Object) null, "", "");
      Object object1 = new Object();
      MultiKey<Object> multiKey1 = new MultiKey<Object>(multiKey0, object1, object0);
      multiKey1.toString();
      multiKey1.toString();
      multiKey1.size();
      Integer integer0 = new Integer(0);
      Integer integer1 = new Integer((-1));
      Integer integer2 = new Integer((-683));
      Integer integer3 = new Integer((-1594));
      MultiKey<Integer> multiKey2 = new MultiKey<Integer>(integer0, integer1, integer1, integer2, integer3);
      String string0 = multiKey2.toString();
      assertEquals("MultiKey[0, -1, -1, -683, -1594]", string0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Integer integer0 = new Integer(0);
      Integer integer1 = new Integer(0);
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integer0, integer1);
      multiKey0.toString();
      String string0 = multiKey0.toString();
      assertEquals("MultiKey[0, 0]", string0);
      
      String[] stringArray0 = new String[9];
      stringArray0[0] = "MultiKey[0, 0]";
      stringArray0[1] = "MultiKey[0, 0]";
      stringArray0[2] = "MultiKey[0, 0]";
      stringArray0[3] = "MultiKey[0, 0]";
      stringArray0[4] = "MultiKey[0, 0]";
      stringArray0[5] = "MultiKey[0, 0]";
      stringArray0[6] = "MultiKey[0, 0]";
      stringArray0[7] = "MultiKey[0, 0]";
      stringArray0[8] = "MultiKey[0, 0]";
      MultiKey<String> multiKey1 = new MultiKey<String>(stringArray0);
      boolean boolean0 = multiKey1.equals("MultiKey[0, 0]");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Integer[] integerArray0 = new Integer[4];
      Integer integer0 = new Integer(197);
      integerArray0[0] = integer0;
      Integer integer1 = new Integer((int) integerArray0[0]);
      integerArray0[1] = integer1;
      Integer integer2 = new Integer(3);
      integerArray0[2] = integer2;
      Integer integer3 = new Integer(3);
      integerArray0[3] = integer3;
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integerArray0);
      multiKey0.toString();
      multiKey0.toString();
      MultiKey<Object> multiKey1 = new MultiKey<Object>(integerArray0);
      multiKey1.toString();
      multiKey1.toString();
      multiKey1.getKeys();
      multiKey1.getKeys();
      multiKey0.hashCode();
      String[] stringArray0 = new String[1];
      stringArray0[0] = "MultiKey[197, 197, 3, 3]";
      MultiKey<String> multiKey2 = new MultiKey<String>(stringArray0, false);
      String[] stringArray1 = multiKey2.getKeys();
      assertEquals(1, stringArray1.length);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      String[] stringArray0 = new String[2];
      stringArray0[0] = "";
      stringArray0[1] = "_~!0IF6/2C;_e62k";
      MultiKey<String> multiKey0 = new MultiKey<String>(stringArray0);
      int int0 = multiKey0.size();
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Object object0 = new Object();
      MultiKey<Object> multiKey0 = new MultiKey<Object>(object0, object0);
      // Undeclared exception!
//      try { 
        multiKey0.getKey((-490));
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // -490
//         //
//         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
//      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Object object0 = new Object();
      Object object1 = new Object();
      Object object2 = new Object();
      String[] stringArray0 = new String[9];
      stringArray0[0] = "YIP}jIU7Ej<?Vc^YL";
      stringArray0[1] = "QWp~$!9c";
      stringArray0[2] = "MultiKey";
      stringArray0[3] = "7-g1\">SG@ciXuX[W";
      stringArray0[4] = "O`\"c*YC?Xpn|iK[i4";
      stringArray0[5] = "";
      stringArray0[6] = "ipEz@-6F_-k2Z";
      stringArray0[7] = "";
      stringArray0[8] = "";
      MultiKey<String> multiKey0 = new MultiKey<String>(stringArray0, true);
      multiKey0.getKey(0);
      MultiKey<Object> multiKey1 = new MultiKey<Object>(object1, object2, object1, "YIP}jIU7Ej<?Vc^YL");
      Object object3 = new Object();
      MultiKey<Object> multiKey2 = new MultiKey<Object>(stringArray0);
      MultiKey<Object> multiKey3 = new MultiKey<Object>(object0, object1, multiKey1, object3, multiKey2);
      MultiKey<Object> multiKey4 = new MultiKey<Object>("", "QWp~$!9c");
      multiKey4.getKey(0);
      MultiKey<Object> multiKey5 = new MultiKey<Object>(multiKey3, "", "");
      assertEquals(3, multiKey5.size());
  }
}
