/*
 * This file was automatically generated by EvoSuite
 * Wed Oct 20 12:40:34 GMT 2021
 */

package org.apache.commons.collections4.keyvalue;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.lang.reflect.Array;
import org.apache.commons.collections4.keyvalue.MultiKey;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class MultiKey_ESTest extends MultiKey_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      Integer[] integerArray0 = new Integer[0];
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integerArray0);
      MultiKey<Object> multiKey1 = new MultiKey<Object>(multiKey0, multiKey0, multiKey0, multiKey0);
      multiKey1.toString();
      MultiKey<MultiKey<Object>> multiKey2 = new MultiKey<MultiKey<Object>>(multiKey1, multiKey1, multiKey1, multiKey1);
      String[] stringArray0 = new String[9];
      stringArray0[0] = "";
      stringArray0[1] = "MultiKey[MultiKey[], MultiKey[], MultiKey[], MultiKey[]]";
      stringArray0[2] = "";
      stringArray0[3] = "MultiKey[MultiKey[], MultiKey[], MultiKey[], MultiKey[]]";
      stringArray0[4] = "MultiKey[MultiKey[], MultiKey[], MultiKey[], MultiKey[]]";
      stringArray0[5] = "MultiKey[MultiKey[], MultiKey[], MultiKey[], MultiKey[]]";
      stringArray0[6] = "MultiKey[MultiKey[], MultiKey[], MultiKey[], MultiKey[]]";
      stringArray0[7] = "MultiKey[MultiKey[], MultiKey[], MultiKey[], MultiKey[]]";
      stringArray0[8] = "MultiKey[MultiKey[], MultiKey[], MultiKey[], MultiKey[]]";
      MultiKey<String> multiKey3 = new MultiKey<String>(stringArray0);
      multiKey3.getKey(0);
      Object object0 = new Object();
      MultiKey<Object> multiKey4 = new MultiKey<Object>((Object) null, multiKey1);
      multiKey4.getKey(0);
      MultiKey<String> multiKey5 = new MultiKey<String>("!k=", "", "sD9V", "MultiKey[MultiKey[], MultiKey[], MultiKey[], MultiKey[]]", "MultiKey[MultiKey[], MultiKey[], MultiKey[], MultiKey[]]");
      Object object1 = new Object();
      MultiKey<Object> multiKey6 = new MultiKey<Object>("Q)ly@R", object0, (Object) null, multiKey5, object1);
      String string0 = multiKey4.toString();
      assertEquals("MultiKey[null, MultiKey[MultiKey[], MultiKey[], MultiKey[], MultiKey[]]]", string0);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      Integer[] integerArray0 = null;
      MultiKey<Integer> multiKey0 = null;
//      try {
        multiKey0 = new MultiKey<Integer>((Integer[]) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // The array of keys must not be null
//         //
//         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
//      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      String[] stringArray0 = new String[2];
      stringArray0[0] = "";
      stringArray0[1] = "xN>L";
      MultiKey<String> multiKey0 = new MultiKey<String>(stringArray0);
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.equals("xN>L");
      multiKey0.getKey(0);
      Integer[] integerArray0 = new Integer[0];
      MultiKey<Integer> multiKey1 = new MultiKey<Integer>(integerArray0, true);
      multiKey1.toString();
      multiKey1.getKeys();
      multiKey1.size();
      multiKey1.toString();
      // Undeclared exception!
//      try { 
        multiKey0.getKey((-170));
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // -170
//         //
//         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
//      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      MultiKey<Object>[] multiKeyArray0 = (MultiKey<Object>[]) Array.newInstance(MultiKey.class, 0);
      MultiKey<MultiKey<Object>> multiKey0 = new MultiKey<MultiKey<Object>>(multiKeyArray0, false);
      multiKey0.hashCode();
      Integer integer0 = new Integer((-1));
      Integer integer1 = new Integer((-1));
      MultiKey<Integer> multiKey1 = new MultiKey<Integer>(integer0, integer1, integer0);
      multiKey1.toString();
      MultiKey<String> multiKey2 = new MultiKey<String>("*WIl", (String) null);
      MultiKey<MultiKey<String>> multiKey3 = new MultiKey<MultiKey<String>>(multiKey2, multiKey2, multiKey2, multiKey2);
      multiKey3.toString();
      multiKey3.equals((Object) null);
      MultiKey<Integer>[] multiKeyArray1 = (MultiKey<Integer>[]) Array.newInstance(MultiKey.class, 7);
      multiKeyArray1[0] = multiKey1;
      multiKeyArray1[1] = multiKey1;
      multiKeyArray1[2] = multiKey1;
      multiKey2.toString();
      multiKeyArray1[3] = multiKey1;
      multiKeyArray1[4] = multiKey1;
      multiKeyArray1[5] = multiKey1;
      multiKey1.toString();
      multiKey1.toString();
      Integer integer2 = new Integer((-1));
      Integer integer3 = new Integer((-2162));
      MultiKey<Integer> multiKey4 = new MultiKey<Integer>((Integer) null, integer0, integer0, integer2, integer3);
      multiKeyArray1[6] = multiKey4;
      MultiKey<MultiKey<Integer>> multiKey5 = new MultiKey<MultiKey<Integer>>(multiKeyArray1);
      int int0 = multiKey5.size();
      multiKey2.size();
      multiKey0.size();
      int int1 = multiKey2.size();
      assertFalse(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      Object[] objectArray0 = new Object[4];
      MultiKey<Integer>[] multiKeyArray0 = (MultiKey<Integer>[]) Array.newInstance(MultiKey.class, 2);
      Integer integer0 = new Integer((-3419));
      Integer integer1 = new Integer(1);
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integer0, integer1);
      multiKeyArray0[0] = multiKey0;
      Integer integer2 = new Integer(1);
      MultiKey<Integer> multiKey1 = new MultiKey<Integer>(integer0, integer1, integer1, integer2, integer2);
      multiKeyArray0[1] = multiKey1;
      MultiKey<MultiKey<Integer>> multiKey2 = new MultiKey<MultiKey<Integer>>(multiKeyArray0);
      MultiKey<Integer> multiKey3 = multiKey2.getKey(1);
      objectArray0[0] = (Object) multiKey3;
      Object object0 = new Object();
      objectArray0[1] = object0;
      Object object1 = new Object();
      objectArray0[2] = object1;
      MultiKey<Object> multiKey4 = new MultiKey<Object>("qbF$PG", object1);
      multiKey4.getKey(0);
      objectArray0[3] = (Object) "qbF$PG";
      MultiKey<Object> multiKey5 = new MultiKey<Object>(objectArray0, true);
      multiKey0.toString();
      MultiKey<Object> multiKey6 = new MultiKey<Object>("qbF$PG", multiKey1, (Object) null);
      MultiKey<MultiKey<Object>> multiKey7 = new MultiKey<MultiKey<Object>>(multiKey5, multiKey5, multiKey6, multiKey4);
      multiKey7.equals(object1);
      multiKey1.equals(multiKey1);
      multiKey1.toString();
      multiKey3.toString();
      String[] stringArray0 = new String[1];
      multiKey0.toString();
      stringArray0[0] = "MultiKey[-3419, 1, 1, 1, 1]";
      MultiKey<String> multiKey8 = new MultiKey<String>(stringArray0);
      String[] stringArray1 = multiKey8.getKeys();
      assertNotSame(stringArray1, stringArray0);
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("org.apache.commons.collections4.keyvalue.MultiKey", "org.apache.commons.collections4.keyvalue.MultiKey", "org.apache.commons.collections4.keyvalue.MultiKey");
      multiKey0.getKey(0);
      Integer integer0 = new Integer(158);
      multiKey0.toString();
      MultiKey<Integer> multiKey1 = new MultiKey<Integer>(integer0, integer0);
      // Undeclared exception!
//      try { 
        multiKey1.getKey((-1256));
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // -1256
//         //
//         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
//      }
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      MultiKey<Object> multiKey0 = new MultiKey<Object>((Object) null, (Object) null, (Object) null, "{3Wed");
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.hashCode();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      String[] stringArray0 = new String[5];
      stringArray0[0] = "MultiKey[null, null, null, {3Wed]";
      stringArray0[1] = "MultiKey[null, null, null, {3Wed]";
      stringArray0[2] = "MultiKey[null, null, null, {3Wed]";
      stringArray0[3] = "MultiKey[null, null, null, {3Wed]";
      stringArray0[4] = "MultiKey[null, null, null, {3Wed]";
      MultiKey<String> multiKey1 = new MultiKey<String>(stringArray0);
      multiKey1.getKeys();
      multiKey0.toString();
      MultiKey<Integer> multiKey2 = null;
//      try {
        multiKey2 = new MultiKey<Integer>((Integer[]) null, true);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // The array of keys must not be null
//         //
//         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
//      }
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      Object[] objectArray0 = new Object[3];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      Object object2 = new Object();
      objectArray0[2] = object2;
      MultiKey<Object> multiKey0 = new MultiKey<Object>(objectArray0);
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.size();
      multiKey0.toString();
      MultiKey<String> multiKey1 = new MultiKey<String>("r!/6K&7QZ9=-X}z^IE", "org.apache.commons.collections4.keyvalue.MultiKey", "MultiKey[java.lang.Object@37b9e596, java.lang.Object@2fb6050f, java.lang.Object@742447b]", "r!/6K&7QZ9=-X}z^IE", "MultiKey[java.lang.Object@37b9e596, java.lang.Object@2fb6050f, java.lang.Object@742447b]");
      multiKey1.toString();
      boolean boolean0 = multiKey1.equals(multiKey0);
      assertFalse(boolean0);
      
      Integer integer0 = new Integer(1);
      Integer integer1 = new Integer(1);
      MultiKey<Integer> multiKey2 = new MultiKey<Integer>(integer0, integer1);
      MultiKey<MultiKey<Integer>> multiKey3 = new MultiKey<MultiKey<Integer>>(multiKey2, multiKey2, multiKey2);
      Integer integer2 = new Integer(3);
      boolean boolean1 = multiKey3.equals(integer2);
      assertFalse(boolean1);
  }
}
