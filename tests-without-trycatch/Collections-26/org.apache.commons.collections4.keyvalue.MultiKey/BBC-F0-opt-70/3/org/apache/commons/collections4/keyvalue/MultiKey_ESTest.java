/*
 * This file was automatically generated by EvoSuite
 * Wed Oct 13 20:47:18 GMT 2021
 */

package org.apache.commons.collections4.keyvalue;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.lang.reflect.Array;
import org.apache.commons.collections4.keyvalue.MultiKey;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class MultiKey_ESTest extends MultiKey_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      MultiKey<Object> multiKey0 = new MultiKey<Object>(objectArray0);
      int int0 = multiKey0.size();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      MultiKey<Object> multiKey0 = new MultiKey<Object>(objectArray0, false);
      Object[] objectArray1 = multiKey0.getKeys();
      assertNotSame(objectArray0, objectArray1);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("xn&N;g}_j", "xn&N;g}_j", "xn&N;g}_j", "MultiKey");
      Integer integer0 = new Integer(1828);
      MultiKey<Object> multiKey1 = new MultiKey<Object>(multiKey0, multiKey0);
      MultiKey<Object> multiKey2 = new MultiKey<Object>(integer0, "xn&N;g}_j", integer0, multiKey1, "MultiKey");
      Object object0 = multiKey2.getKey(4);
      assertEquals("MultiKey", object0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("", "", "V@H=jT`");
      // Undeclared exception!
//      try { 
        multiKey0.getKey(1595);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 1595
//         //
//         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
//      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      MultiKey<Integer> multiKey0 = null;
//      try {
        multiKey0 = new MultiKey<Integer>((Integer[]) null, false);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // The array of keys must not be null
//         //
//         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
//      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      MultiKey<Object> multiKey0 = new MultiKey<Object>(objectArray0, false);
      Object object0 = new Object();
      boolean boolean0 = multiKey0.equals(object0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("YMkSE6kGOan~%3g`i", "YMkSE6kGOan~%3g`i", "YMkSE6kGOan~%3g`i");
      boolean boolean0 = multiKey0.equals(multiKey0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Integer integer0 = new Integer(0);
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integer0, integer0, integer0, integer0, integer0);
      MultiKey<String> multiKey1 = new MultiKey<String>("MultiKey[0, 0, 0, 4300, 4300]", "");
      MultiKey<Object> multiKey2 = new MultiKey<Object>((Object) null, multiKey0, "MultiKey[0, 0, 0, 4300, 4300]", multiKey0);
      boolean boolean0 = multiKey2.equals(multiKey1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      MultiKey<Object> multiKey0 = null;
//      try {
        multiKey0 = new MultiKey<Object>((Object[]) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // The array of keys must not be null
//         //
//         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
//      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      MultiKey<Object>[] multiKeyArray0 = (MultiKey<Object>[]) Array.newInstance(MultiKey.class, 6);
      MultiKey<MultiKey<Object>> multiKey0 = new MultiKey<MultiKey<Object>>(multiKeyArray0, false);
      int int0 = multiKey0.size();
      assertEquals(6, int0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      MultiKey<Object> multiKey0 = new MultiKey<Object>((Object) null, "", (Object) null, "");
      Object object0 = multiKey0.getKey(0);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("xn&N;g}_j", "xn&N;g}_j", "xn&N;g}_j", "MultiKey");
      MultiKey<Object> multiKey1 = new MultiKey<Object>(multiKey0, multiKey0);
      multiKey1.hashCode();
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Integer integer0 = new Integer(0);
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integer0, integer0, integer0, integer0, integer0);
      String string0 = multiKey0.toString();
      assertEquals("MultiKey[0, 0, 0, 0, 0]", string0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Integer integer0 = new Integer(0);
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integer0, integer0, integer0, integer0, integer0);
      MultiKey<Object> multiKey1 = new MultiKey<Object>((Object) null, multiKey0, "MultiKey[0, 0, 0, 4300, 4300]", multiKey0);
      Object[] objectArray0 = multiKey1.getKeys();
      assertEquals(4, objectArray0.length);
  }
}
