/*
 * This file was automatically generated by EvoSuite
 * Wed Oct 20 12:35:53 GMT 2021
 */

package org.apache.commons.collections4.keyvalue;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.lang.reflect.Array;
import org.apache.commons.collections4.keyvalue.MultiKey;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class MultiKey_ESTest extends MultiKey_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("", "", "", "");
      multiKey0.toString();
      multiKey0.equals(multiKey0);
      int int0 = multiKey0.size();
      assertEquals(4, int0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("", "", "", "");
      multiKey0.toString();
      Object[] objectArray0 = new Object[0];
      MultiKey<Object> multiKey1 = new MultiKey<Object>(objectArray0);
      int int0 = multiKey1.size();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Integer integer0 = new Integer(79);
      Integer integer1 = new Integer(79);
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integer0, integer1);
      MultiKey<Object> multiKey1 = new MultiKey<Object>("", "", multiKey0, "");
      multiKey1.equals("");
      MultiKey<String>[] multiKeyArray0 = (MultiKey<String>[]) Array.newInstance(MultiKey.class, 0);
      MultiKey<MultiKey<String>> multiKey2 = new MultiKey<MultiKey<String>>(multiKeyArray0);
      MultiKey<String>[] multiKeyArray1 = multiKey2.getKeys();
      assertEquals(0, multiKeyArray1.length);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Object object0 = new Object();
      MultiKey<Object> multiKey0 = new MultiKey<Object>(object0, object0, "MultiKey", object0);
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      Object object1 = new Object();
      multiKey0.equals(object1);
      multiKey0.hashCode();
      MultiKey<MultiKey<Object>> multiKey1 = null;
//      try {
        multiKey1 = new MultiKey<MultiKey<Object>>((MultiKey<Object>[]) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // The array of keys must not be null
//         //
//         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
//      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("", "");
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.getKey(0);
      multiKey0.size();
      Integer[] integerArray0 = new Integer[1];
      Integer integer0 = new Integer((-1750));
      integerArray0[0] = integer0;
      boolean boolean0 = true;
      MultiKey<Integer> multiKey1 = new MultiKey<Integer>(integerArray0, true);
      multiKey1.size();
      multiKey0.size();
      MultiKey<Object>[] multiKeyArray0 = (MultiKey<Object>[]) Array.newInstance(MultiKey.class, 3);
      MultiKey<Integer>[] multiKeyArray1 = (MultiKey<Integer>[]) Array.newInstance(MultiKey.class, 2);
      multiKeyArray1[0] = multiKey1;
      multiKeyArray1[1] = multiKey1;
      MultiKey<MultiKey<Integer>> multiKey2 = new MultiKey<MultiKey<Integer>>(multiKeyArray1);
      // Undeclared exception!
//      try { 
        multiKey2.getKey(2);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 2
//         //
//         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
//      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Object object0 = new Object();
      MultiKey<Object> multiKey0 = new MultiKey<Object>("", "");
      multiKey0.toString();
      multiKey0.toString();
      MultiKey<Object> multiKey1 = new MultiKey<Object>(object0, object0, object0, object0, multiKey0);
      multiKey1.equals(multiKey0);
      Object[] objectArray0 = new Object[0];
      MultiKey<Object> multiKey2 = new MultiKey<Object>(objectArray0);
      // Undeclared exception!
//      try { 
        multiKey2.getKey(2);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 2
//         //
//         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
//      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      MultiKey<Object>[] multiKeyArray0 = (MultiKey<Object>[]) Array.newInstance(MultiKey.class, 7);
      Object object0 = null;
      MultiKey<Object> multiKey0 = new MultiKey<Object>(multiKeyArray0);
      MultiKey<Object> multiKey1 = new MultiKey<Object>((Object) null, (Object) null, (Object) null, multiKey0);
      multiKeyArray0[0] = multiKey1;
      String string0 = "/^1hi8=5i$SL^`?";
      MultiKey<Object> multiKey2 = new MultiKey<Object>(multiKey1, multiKey0, "/^1hi8=5i$SL^`?", multiKey1);
      multiKeyArray0[1] = multiKey2;
      int int0 = 440;
      Integer integer0 = new Integer(440);
      MultiKey<Integer> multiKey3 = new MultiKey<Integer>(integer0, integer0);
      // Undeclared exception!
//      try { 
        multiKey3.getKey(440);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 440
//         //
//         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
//      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      String string0 = "";
      MultiKey<String> multiKey0 = new MultiKey<String>("r(4D#VCzU`A0Cr.,", "r(4D#VCzU`A0Cr.,", "");
      multiKey0.toString();
      MultiKey<Object> multiKey1 = new MultiKey<Object>(multiKey0, multiKey0);
      multiKey1.toString();
      MultiKey<Object>[] multiKeyArray0 = (MultiKey<Object>[]) Array.newInstance(MultiKey.class, 6);
      MultiKey<Object> multiKey2 = new MultiKey<Object>((Object[]) multiKeyArray0, true);
      multiKey1.toString();
      MultiKey<Object> multiKey3 = new MultiKey<Object>("MultiKey[r(4D#VCzU`A0Cr.,, r(4D#VCzU`A0Cr.,, ]", multiKey2, "MultiKey[MultiKey[r(4D#VCzU`A0Cr.,, r(4D#VCzU`A0Cr.,, ], MultiKey[r(4D#VCzU`A0Cr.,, r(4D#VCzU`A0Cr.,, ]]", "MultiKey[MultiKey[r(4D#VCzU`A0Cr.,, r(4D#VCzU`A0Cr.,, ], MultiKey[r(4D#VCzU`A0Cr.,, r(4D#VCzU`A0Cr.,, ]]");
      multiKeyArray0[0] = multiKey3;
      multiKeyArray0[1] = multiKey1;
      multiKeyArray0[2] = multiKey1;
      multiKey1.toString();
      multiKeyArray0[3] = multiKey1;
      multiKey3.toString();
      multiKeyArray0[4] = multiKey1;
      multiKeyArray0[5] = multiKey1;
      multiKey1.toString();
      MultiKey<MultiKey<Object>> multiKey4 = new MultiKey<MultiKey<Object>>(multiKeyArray0, true);
      multiKey4.hashCode();
      // Undeclared exception!
//      try { 
        multiKey1.getKey(23);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 23
//         //
//         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
//      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      MultiKey<Object> multiKey0 = new MultiKey<Object>((Object) null, (Object) null, (Object) null);
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.getKey(0);
      MultiKey<Object> multiKey1 = new MultiKey<Object>((Object) null, (Object) null, (Object) null, (Object) null, (Object) null);
      multiKey1.toString();
      multiKey0.toString();
      multiKey1.toString();
      multiKey1.toString();
      multiKey1.getKeys();
      MultiKey<String> multiKey2 = new MultiKey<String>("", "", "", "", "");
      multiKey2.equals("");
      Integer integer0 = new Integer((-101));
      multiKey2.toString();
      multiKey2.toString();
      multiKey2.toString();
      multiKey2.toString();
      MultiKey<Integer> multiKey3 = new MultiKey<Integer>(integer0, integer0);
      multiKey3.hashCode();
      multiKey3.toString();
      multiKey3.toString();
      multiKey2.toString();
      multiKey0.toString();
      multiKey2.hashCode();
      multiKey0.equals("");
      multiKey3.getKey(0);
      String string0 = multiKey2.getKey(0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      MultiKey<MultiKey<Integer>> multiKey0 = null;
//      try {
        multiKey0 = new MultiKey<MultiKey<Integer>>((MultiKey<Integer>[]) null, false);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // The array of keys must not be null
//         //
//         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
//      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Object[] objectArray0 = new Object[5];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      Integer[] integerArray0 = new Integer[8];
      int int0 = 0;
      Integer integer0 = new Integer(0);
      integerArray0[0] = integer0;
      Integer integer1 = new Integer((-1061));
      integerArray0[1] = integer1;
      Integer integer2 = new Integer((-1061));
      integerArray0[2] = integer2;
      Integer integer3 = new Integer((-2231));
      integerArray0[3] = integer3;
      Integer integer4 = new Integer(0);
      integerArray0[4] = integer4;
      Integer integer5 = new Integer(int0);
      integerArray0[5] = integer5;
      Integer integer6 = new Integer(0);
      integerArray0[6] = integer6;
      Integer integer7 = new Integer((-68));
      integerArray0[7] = integer7;
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integerArray0, true);
      Integer integer8 = multiKey0.getKey(0);
      objectArray0[2] = (Object) integer8;
      Object object2 = new Object();
      objectArray0[3] = object2;
      // Undeclared exception!
//      try { 
        multiKey0.getKey((-2231));
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // -2231
//         //
//         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
//      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("`+FL+nfC", "`+FL+nfC", "`+FL+nfC");
      // Undeclared exception!
//      try { 
        multiKey0.getKey((-1));
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // -1
//         //
//         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
//      }
  }
}
