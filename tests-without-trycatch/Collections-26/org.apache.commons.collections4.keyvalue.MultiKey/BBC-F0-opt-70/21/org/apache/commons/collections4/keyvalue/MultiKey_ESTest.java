/*
 * This file was automatically generated by EvoSuite
 * Fri Oct 22 17:30:22 GMT 2021
 */

package org.apache.commons.collections4.keyvalue;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.lang.reflect.Array;
import org.apache.commons.collections4.keyvalue.MultiKey;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class MultiKey_ESTest extends MultiKey_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>(")hT}/5]lf 5wE#", "", ")hT}/5]lf 5wE#");
      multiKey0.toString();
      Integer[] integerArray0 = new Integer[0];
      MultiKey<Integer> multiKey1 = new MultiKey<Integer>(integerArray0, true);
      int int0 = multiKey1.size();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Integer integer0 = new Integer(15);
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>((Integer) null, (Integer) null, (Integer) null, integer0);
      multiKey0.toString();
      multiKey0.toString();
      MultiKey<MultiKey<Integer>> multiKey1 = new MultiKey<MultiKey<Integer>>(multiKey0, multiKey0, multiKey0, multiKey0);
      Integer integer1 = new Integer(15);
      boolean boolean0 = multiKey1.equals(integer1);
      assertFalse(boolean0);
      
      MultiKey<String> multiKey2 = new MultiKey<String>("2|_Q", "");
      MultiKey<String> multiKey3 = new MultiKey<String>("OOLcJtD_md4eGJ", ".I2J>XKdVx", ")^bP/M");
      MultiKey<String> multiKey4 = new MultiKey<String>("OOLcJtD_md4eGJ", "2|_Q", ")^bP/M", "MultiKey[null, null, null, 15]", "dgCtn3U*o");
      MultiKey<String>[] multiKeyArray0 = (MultiKey<String>[]) Array.newInstance(MultiKey.class, 0);
      MultiKey<MultiKey<String>> multiKey5 = new MultiKey<MultiKey<String>>(multiKeyArray0);
      multiKey5.getKeys();
      Integer integer2 = new Integer(3735);
      Integer integer3 = new Integer(15);
      Integer integer4 = new Integer((-1522));
      Integer integer5 = new Integer((-1));
      Integer integer6 = new Integer((-979));
      MultiKey<Integer> multiKey6 = new MultiKey<Integer>((Integer) null, integer6);
      String string0 = multiKey0.toString();
      assertEquals("MultiKey[null, null, null, 15]", string0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Integer integer0 = new Integer(2);
      Integer integer1 = new Integer((-1354));
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>((Integer) null, (Integer) null, integer0, (Integer) null, integer1);
      multiKey0.toString();
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) integer0;
      Object object0 = new Object();
      objectArray0[1] = object0;
      objectArray0[2] = (Object) multiKey0;
      objectArray0[3] = (Object) "k?x-2'jBhlAhr";
      MultiKey<Object> multiKey1 = new MultiKey<Object>(objectArray0, true);
      boolean boolean0 = multiKey0.equals(objectArray0[2]);
      assertTrue(boolean0);
      
      MultiKey<Object> multiKey2 = new MultiKey<Object>(objectArray0);
      multiKey2.toString();
      multiKey1.toString();
      MultiKey<String> multiKey3 = new MultiKey<String>("'F'_n~'U", "q-8Zk:<dfF]HE*", "q-8Zk:<dfF]HE*", "l");
      String string0 = multiKey3.getKey(2);
      assertEquals("q-8Zk:<dfF]HE*", string0);
      
      String string1 = multiKey3.toString();
      assertEquals("MultiKey['F'_n~'U, q-8Zk:<dfF]HE*, q-8Zk:<dfF]HE*, l]", string1);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      String[] stringArray0 = new String[8];
      stringArray0[0] = "1CoVE-";
      stringArray0[1] = "";
      stringArray0[2] = "y;`$G9,/*+F+~";
      String string0 = "[V\"X%(?B z'piz6";
      stringArray0[3] = "[V\"X%(?B z'piz6";
      stringArray0[4] = "<N1In*MMNm[MJ";
      stringArray0[5] = "";
      stringArray0[6] = "";
      stringArray0[7] = "";
      MultiKey<String> multiKey0 = new MultiKey<String>(stringArray0);
      multiKey0.toString();
      Object object0 = new Object();
      multiKey0.toString();
      MultiKey<Object> multiKey1 = new MultiKey<Object>("", object0, "L9b9]?aYYR[+6 %0Tr", "", "");
      multiKey1.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey1.toString();
      MultiKey<String> multiKey2 = new MultiKey<String>(stringArray0);
      multiKey0.toString();
      multiKey2.getKey(0);
      MultiKey<Integer> multiKey3 = null;
//      try {
        multiKey3 = new MultiKey<Integer>((Integer[]) null, true);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // The array of keys must not be null
//         //
//         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
//      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Integer integer0 = new Integer(0);
      Integer integer1 = new Integer(0);
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integer0, integer1);
      Object[] objectArray0 = new Object[1];
      multiKey0.toString();
      objectArray0[0] = (Object) multiKey0;
      MultiKey<Object> multiKey1 = new MultiKey<Object>(objectArray0, true);
      boolean boolean0 = multiKey1.equals(objectArray0[0]);
      assertFalse(boolean0);
      
      multiKey0.equals(integer0);
      String[] stringArray0 = new String[0];
      multiKey0.toString();
      multiKey1.toString();
      MultiKey<String> multiKey2 = new MultiKey<String>(stringArray0);
      multiKey2.toString();
      String string0 = multiKey1.toString();
      assertEquals("MultiKey[MultiKey[0, 0]]", string0);
      
      multiKey1.hashCode();
      boolean boolean1 = multiKey0.equals((Object) null);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Object object0 = new Object();
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) objectArray0;
      objectArray0[1] = null;
      objectArray0[2] = object0;
      objectArray0[3] = object0;
      objectArray0[4] = null;
      objectArray0[5] = object0;
      MultiKey<Object> multiKey0 = new MultiKey<Object>(objectArray0);
      Object object1 = multiKey0.getKey(0);
      MultiKey<Object> multiKey1 = new MultiKey<Object>(object0, object0, (Object) null, object1, objectArray0[1]);
      assertEquals(5, multiKey1.size());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      MultiKey<Object> multiKey0 = null;
//      try {
        multiKey0 = new MultiKey<Object>((Object[]) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // The array of keys must not be null
//         //
//         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
//      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>((String) null, (String) null, (String) null);
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) multiKey0;
      objectArray0[1] = (Object) multiKey0;
      MultiKey<Object> multiKey1 = new MultiKey<Object>(objectArray0, true);
      int int0 = (-440);
      // Undeclared exception!
//      try { 
        multiKey1.getKey((-440));
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // -440
//         //
//         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
//      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("MzK`I/|k}U$j77pU=(", "J\"_;|pYTZG#LQ", "MzK`I/|k}U$j77pU=(", "MzK`I/|k}U$j77pU=(");
      multiKey0.size();
      Integer[] integerArray0 = new Integer[7];
      Integer integer0 = new Integer(4);
      integerArray0[0] = integer0;
      Integer integer1 = new Integer((int) integerArray0[0]);
      integerArray0[1] = integer1;
      Integer integer2 = new Integer(0);
      integerArray0[2] = integer2;
      Integer integer3 = new Integer(0);
      integerArray0[3] = integer3;
      Integer integer4 = new Integer(0);
      integerArray0[4] = integer4;
      Integer integer5 = new Integer(4);
      integerArray0[5] = integer5;
      Integer integer6 = new Integer(0);
      integerArray0[6] = integer6;
      MultiKey<Integer> multiKey1 = new MultiKey<Integer>(integerArray0, true);
      Integer[] integerArray1 = multiKey1.getKeys();
      assertEquals(7, integerArray1.length);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Object[] objectArray0 = new Object[1];
      Integer integer0 = new Integer(1473);
      MultiKey<Object> multiKey0 = new MultiKey<Object>((Object) null, integer0);
      multiKey0.toString();
      multiKey0.getKey(0);
      objectArray0[0] = null;
      MultiKey<Object> multiKey1 = new MultiKey<Object>(objectArray0);
      multiKey1.toString();
      multiKey1.size();
      Integer integer1 = new Integer(1473);
      multiKey1.equals(integer1);
      multiKey0.size();
      Integer integer2 = new Integer(1);
      Integer integer3 = new Integer(2);
      MultiKey<Integer> multiKey2 = new MultiKey<Integer>(integer1, integer2, integer2, integer3, integer1);
      multiKey2.toString();
      MultiKey<MultiKey<Integer>> multiKey3 = new MultiKey<MultiKey<Integer>>(multiKey2, multiKey2, multiKey2, multiKey2);
      multiKey3.toString();
      multiKey1.hashCode();
      String[] stringArray0 = new String[6];
      stringArray0[0] = "MultiKey[null]";
      stringArray0[1] = "MultiKey[MultiKey[1473, 1, 1, 2, 1473], MultiKey[1473, 1, 1, 2, 1473], MultiKey[1473, 1, 1, 2, 1473], MultiKey[1473, 1, 1, 2, 1473]]";
      stringArray0[2] = "MultiKey[null]";
      stringArray0[3] = "MultiKey[null, 1473]";
      stringArray0[4] = "MultiKey[null]";
      stringArray0[5] = "_&LI:nQRy~X?";
      multiKey0.toString();
      MultiKey<String> multiKey4 = new MultiKey<String>(stringArray0);
      multiKey4.toString();
      // Undeclared exception!
//      try { 
        multiKey4.getKey(1473);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 1473
//         //
//         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
//      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Object[] objectArray0 = new Object[4];
      Object object0 = new Object();
      MultiKey<Object> multiKey0 = new MultiKey<Object>(object0, ";Odt5H");
      int int0 = 2355;
      // Undeclared exception!
//      try { 
        multiKey0.getKey(2355);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 2355
//         //
//         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
//      }
  }
}
