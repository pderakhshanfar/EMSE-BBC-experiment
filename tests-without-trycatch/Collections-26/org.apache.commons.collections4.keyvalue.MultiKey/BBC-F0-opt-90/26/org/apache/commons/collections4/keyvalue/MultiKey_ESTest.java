/*
 * This file was automatically generated by EvoSuite
 * Fri Oct 22 17:43:53 GMT 2021
 */

package org.apache.commons.collections4.keyvalue;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.collections4.keyvalue.MultiKey;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class MultiKey_ESTest extends MultiKey_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Object object0 = new Object();
      MultiKey<String> multiKey0 = new MultiKey<String>("H16!%]qO i8dLPp%$,]", "H16!%]qO i8dLPp%$,]");
      multiKey0.toString();
      multiKey0.toString();
      MultiKey<Object> multiKey1 = new MultiKey<Object>(object0, object0, multiKey0, object0);
      multiKey0.toString();
      multiKey1.toString();
      multiKey1.getKeys();
      multiKey1.toString();
      multiKey0.toString();
      Integer[] integerArray0 = new Integer[0];
      MultiKey<Integer> multiKey2 = new MultiKey<Integer>(integerArray0, false);
      multiKey2.toString();
      multiKey0.toString();
      multiKey1.toString();
      multiKey2.toString();
      multiKey2.size();
      multiKey1.getKey(0);
      MultiKey<MultiKey<String>> multiKey3 = new MultiKey<MultiKey<String>>(multiKey0, multiKey0);
      multiKey1.toString();
      multiKey3.toString();
      MultiKey<String> multiKey4 = multiKey3.getKey(0);
      multiKey4.toString();
      multiKey0.toString();
      multiKey3.toString();
      multiKey1.toString();
      multiKey1.size();
      // Undeclared exception!
//      try { 
        multiKey0.getKey((-1));
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // -1
//         //
//         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
//      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      String[] stringArray0 = new String[2];
      stringArray0[0] = "MultiKey";
      stringArray0[1] = "";
      MultiKey<String> multiKey0 = new MultiKey<String>(stringArray0);
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      Integer[] integerArray0 = new Integer[0];
      MultiKey<Integer> multiKey1 = new MultiKey<Integer>(integerArray0);
      multiKey1.getKeys();
      // Undeclared exception!
//      try { 
        multiKey0.getKey(2);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 2
//         //
//         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
//      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("sF:cpO;", "sF:cpO;", "sF:cpO;");
      MultiKey<MultiKey<String>> multiKey1 = new MultiKey<MultiKey<String>>(multiKey0, multiKey0, multiKey0, multiKey0, multiKey0);
      Integer integer0 = new Integer((-952));
      Integer integer1 = new Integer((-952));
      MultiKey<Object> multiKey2 = new MultiKey<Object>(multiKey1, multiKey1, integer1);
      Object object0 = multiKey2.getKey(0);
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = object0;
      objectArray0[1] = (Object) integer1;
      objectArray0[2] = object0;
      objectArray0[3] = (Object) multiKey2;
      Object object1 = new Object();
      objectArray0[4] = objectArray0[2];
      MultiKey<Object> multiKey3 = new MultiKey<Object>(objectArray0);
      MultiKey<Object> multiKey4 = new MultiKey<Object>(multiKey3, integer0, objectArray0[0]);
      multiKey3.toString();
      MultiKey<MultiKey<String>> multiKey5 = new MultiKey<MultiKey<String>>(multiKey0, multiKey0);
      boolean boolean0 = multiKey1.equals(objectArray0[4]);
      assertFalse(multiKey1.equals((Object)multiKey5));
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Object object0 = new Object();
      MultiKey<Object> multiKey0 = new MultiKey<Object>("6rp8_VlA'8L>t", "6rp8_VlA'8L>t", "6rp8_VlA'8L>t", object0);
      multiKey0.toString();
      multiKey0.toString();
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) "MultiKey[6rp8_VlA'8L>t, 6rp8_VlA'8L>t, 6rp8_VlA'8L>t, java.lang.Object@6c61224f]";
      objectArray0[1] = (Object) "6rp8_VlA'8L>t";
      objectArray0[3] = (Object) "MultiKey[6rp8_VlA'8L>t, 6rp8_VlA'8L>t, 6rp8_VlA'8L>t, java.lang.Object@6c61224f]";
      objectArray0[4] = (Object) "6rp8_VlA'8L>t";
      objectArray0[5] = object0;
      objectArray0[6] = (Object) "6rp8_VlA'8L>t";
      MultiKey<Object> multiKey1 = new MultiKey<Object>(objectArray0);
      multiKey1.toString();
      Integer integer0 = new Integer(3);
      Integer integer1 = new Integer(2);
      Integer integer2 = new Integer(2);
      Integer integer3 = new Integer(2);
      MultiKey<Integer> multiKey2 = new MultiKey<Integer>(integer0, integer2, integer3);
      String string0 = multiKey2.toString();
      assertEquals("MultiKey[3, 2, 2]", string0);
      
      MultiKey<String> multiKey3 = new MultiKey<String>("MultiKey[3, 2, 2]", "6rp8_VlA'8L>t", "% UTj3Gx+=l<qKY", "%@", "bq");
      MultiKey<Object> multiKey4 = new MultiKey<Object>(multiKey3, multiKey3, "% UTj3Gx+=l<qKY", "% UTj3Gx+=l<qKY", objectArray0[2]);
      Object object1 = multiKey4.getKey(3);
      assertNotNull(object1);
      
      Integer integer4 = new Integer(2);
      boolean boolean0 = multiKey2.equals(multiKey0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Object[] objectArray0 = new Object[6];
      Object object0 = new Object();
      objectArray0[0] = object0;
      MultiKey<Object> multiKey0 = new MultiKey<Object>(objectArray0, false);
      MultiKey<Integer> multiKey1 = null;
//      try {
        multiKey1 = new MultiKey<Integer>((Integer[]) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // The array of keys must not be null
//         //
//         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
//      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("*\"K.iC=C)A*Q6", "*\"K.iC=C)A*Q6", "EhmZ1-{hnUiX{Qb");
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.getKey(0);
      MultiKey<String> multiKey1 = new MultiKey<String>((String) null, "@xC#S:/HS", "*\"K.iC=C)A*Q6", "");
      multiKey1.getKey(0);
      Integer integer0 = new Integer((-4512));
      Integer[] integerArray0 = new Integer[6];
      integerArray0[0] = integer0;
      integerArray0[1] = integer0;
      integerArray0[2] = integer0;
      integerArray0[3] = integer0;
      integerArray0[4] = integer0;
      integerArray0[5] = integer0;
      MultiKey<Integer> multiKey2 = new MultiKey<Integer>(integerArray0, false);
      Object object0 = multiKey2.getKey(0);
      MultiKey<Object> multiKey3 = new MultiKey<Object>((Object) null, integer0, object0);
      multiKey3.hashCode();
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Integer integer0 = new Integer(1590);
      MultiKey<Object> multiKey0 = new MultiKey<Object>(integer0, (Object) null);
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.getKeys();
      multiKey0.hashCode();
      MultiKey<MultiKey<String>> multiKey1 = null;
//      try {
        multiKey1 = new MultiKey<MultiKey<String>>((MultiKey<String>[]) null, true);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // The array of keys must not be null
//         //
//         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
//      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Integer integer0 = new Integer((-1));
      Object object0 = new Object();
      MultiKey<Object> multiKey0 = new MultiKey<Object>(integer0, integer0, object0);
      String[] stringArray0 = new String[9];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "";
      stringArray0[3] = "org.apache.commons.collections4.keyvalue.MultiKey";
      stringArray0[4] = "";
      stringArray0[5] = "pNVo]mPhw#Bjs^ j";
      stringArray0[6] = "@rEhHhu1=FU(";
      stringArray0[7] = "Q~Y` RU";
      stringArray0[8] = "sa`h)\"V$t2r5?ir70";
      MultiKey<String> multiKey1 = new MultiKey<String>(stringArray0);
      boolean boolean0 = multiKey1.equals("org.apache.commons.collections4.keyvalue.MultiKey");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      String[] stringArray0 = new String[5];
      stringArray0[0] = "3UxzJH[~=j?FP&$";
      stringArray0[1] = "G.<)fGB+Y1sc1|AT";
      stringArray0[2] = "_L<";
      stringArray0[3] = "vn*dc*Z";
      stringArray0[4] = "";
      MultiKey<String> multiKey0 = new MultiKey<String>(stringArray0, true);
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      Integer[] integerArray0 = new Integer[4];
      Integer integer0 = new Integer(161);
      integerArray0[0] = integer0;
      Integer integer1 = new Integer((int) integerArray0[0]);
      integerArray0[1] = integer1;
      Integer integer2 = new Integer(2379);
      integerArray0[2] = integer2;
      Integer integer3 = new Integer(0);
      integerArray0[3] = integer3;
      MultiKey<Integer> multiKey1 = new MultiKey<Integer>(integerArray0, true);
      multiKey1.hashCode();
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Integer[] integerArray0 = new Integer[2];
      Integer integer0 = new Integer(1932);
      integerArray0[0] = integer0;
      Integer integer1 = new Integer((int) integerArray0[0]);
      integerArray0[1] = integer1;
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integerArray0, false);
      Integer integer2 = new Integer((int) integerArray0[0]);
      Integer integer3 = new Integer(1932);
      Integer integer4 = new Integer(2302);
      MultiKey<Object> multiKey1 = new MultiKey<Object>(integer2, integer3, integer4);
      // Undeclared exception!
//      try { 
        multiKey1.getKey((int) integerArray0[1]);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 1932
//         //
//         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
//      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Integer integer0 = new Integer(0);
      Integer integer1 = new Integer(1314);
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integer0, integer0, integer0, integer1);
      multiKey0.toString();
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) multiKey0;
      objectArray0[1] = (Object) integer0;
      objectArray0[2] = (Object) multiKey0;
      objectArray0[3] = (Object) multiKey0;
      MultiKey<Object> multiKey1 = new MultiKey<Object>(objectArray0);
      multiKey1.toString();
      multiKey1.size();
      String string0 = multiKey1.toString();
      assertEquals("MultiKey[MultiKey[0, 0, 0, 1314], 0, MultiKey[0, 0, 0, 1314], MultiKey[0, 0, 0, 1314]]", string0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("wht", "", "", "", "wht");
      Object object0 = new Object();
      MultiKey<String> multiKey1 = new MultiKey<String>("", "", "");
      MultiKey<Object> multiKey2 = new MultiKey<Object>(multiKey0, object0, multiKey1, "", multiKey1);
      Object object1 = new Object();
      MultiKey<Object> multiKey3 = new MultiKey<Object>(multiKey2, multiKey1, object1);
      multiKey3.toString();
      MultiKey<Object> multiKey4 = new MultiKey<Object>(object0, (Object) null, multiKey2, multiKey3);
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) "wht";
      objectArray0[1] = (Object) multiKey4;
      multiKey4.toString();
      multiKey2.toString();
      objectArray0[2] = object0;
      objectArray0[3] = (Object) multiKey1;
      objectArray0[4] = (Object) multiKey0;
      MultiKey<Object> multiKey5 = new MultiKey<Object>(objectArray0);
      multiKey3.toString();
      int int0 = (-1);
      Integer integer0 = new Integer((-1));
      Integer integer1 = new Integer((-1213));
      Integer integer2 = new Integer((-1));
      MultiKey<Integer> multiKey6 = new MultiKey<Integer>(integer0, integer1, integer2);
      multiKey6.toString();
      MultiKey<Object> multiKey7 = new MultiKey<Object>(multiKey2, multiKey0, multiKey4, multiKey5, multiKey6);
      // Undeclared exception!
//      try { 
        multiKey7.getKey((-1213));
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // -1213
//         //
//         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
//      }
  }
}
