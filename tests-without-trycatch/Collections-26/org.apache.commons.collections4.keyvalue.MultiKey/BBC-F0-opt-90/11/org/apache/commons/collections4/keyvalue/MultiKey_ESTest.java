/*
 * This file was automatically generated by EvoSuite
 * Wed Oct 20 12:15:54 GMT 2021
 */

package org.apache.commons.collections4.keyvalue;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.lang.reflect.Array;
import org.apache.commons.collections4.keyvalue.MultiKey;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class MultiKey_ESTest extends MultiKey_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      int int0 = 1;
      Integer integer0 = new Integer(1);
      MultiKey<Object> multiKey0 = new MultiKey<Object>((Object) null, (Object) null, integer0, (Object) null, (Object) null);
      Object object0 = new Object();
      MultiKey<Object> multiKey1 = new MultiKey<Object>(multiKey0, object0);
      MultiKey<Object> multiKey2 = new MultiKey<Object>((Object) null, multiKey1, object0);
      MultiKey<String> multiKey3 = new MultiKey<String>("{^BbC!'tQ0~I\"", "{^BbC!'tQ0~I\"", (String) null);
      multiKey3.toString();
      multiKey2.getKeys();
      Integer integer1 = new Integer((-648));
      multiKey0.toString();
      Integer integer2 = new Integer(1);
      Integer integer3 = new Integer((-48));
      MultiKey<Integer> multiKey4 = new MultiKey<Integer>(integer1, integer2, integer3, integer1);
      Integer[] integerArray0 = new Integer[11];
      integerArray0[0] = integer3;
      integerArray0[1] = integer2;
      integerArray0[2] = integer2;
      MultiKey<Integer> multiKey5 = new MultiKey<Integer>(integerArray0);
      Integer integer4 = new Integer((-648));
      MultiKey<Integer> multiKey6 = new MultiKey<Integer>(integer3, integer4, integer1);
      Integer integer5 = new Integer(int0);
      Integer integer6 = new Integer(0);
      MultiKey<Integer> multiKey7 = new MultiKey<Integer>((Integer) int0, integer3, (Integer) int0, integer5, integer6);
      MultiKey<MultiKey<Integer>> multiKey8 = new MultiKey<MultiKey<Integer>>(multiKey6, multiKey5, multiKey7);
      multiKey8.getKeys();
      multiKey0.getKey(1);
      MultiKey<MultiKey<String>> multiKey9 = new MultiKey<MultiKey<String>>(multiKey3, multiKey3, multiKey3, multiKey3);
      multiKey9.size();
      Object[] objectArray0 = multiKey0.getKeys();
      assertEquals(5, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("MultiKey", "p");
      MultiKey<Integer>[] multiKeyArray0 = (MultiKey<Integer>[]) Array.newInstance(MultiKey.class, 0);
      MultiKey<MultiKey<Integer>> multiKey1 = new MultiKey<MultiKey<Integer>>(multiKeyArray0);
      MultiKey<Integer>[] multiKeyArray1 = multiKey1.getKeys();
      assertNotSame(multiKeyArray0, multiKeyArray1);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Integer integer0 = new Integer(0);
      Integer integer1 = new Integer(0);
      Object object0 = new Object();
      MultiKey<Object> multiKey0 = new MultiKey<Object>(integer0, integer1, object0);
      multiKey0.toString();
      MultiKey<Object>[] multiKeyArray0 = (MultiKey<Object>[]) Array.newInstance(MultiKey.class, 4);
      multiKeyArray0[0] = multiKey0;
      multiKeyArray0[1] = multiKey0;
      multiKeyArray0[2] = multiKey0;
      multiKeyArray0[3] = multiKey0;
      MultiKey<MultiKey<Object>> multiKey1 = new MultiKey<MultiKey<Object>>(multiKeyArray0);
      multiKey1.toString();
      multiKey1.getKeys();
      Integer integer2 = new Integer((-1092));
      Integer integer3 = new Integer((-1));
      Integer integer4 = new Integer(5536);
      MultiKey<Integer> multiKey2 = new MultiKey<Integer>(integer4, integer2, integer4, integer2);
      Integer[] integerArray0 = new Integer[9];
      integerArray0[0] = integer0;
      integerArray0[1] = integer1;
      integerArray0[2] = integer3;
      integerArray0[3] = integer3;
      integerArray0[4] = null;
      integerArray0[5] = integer4;
      String string0 = multiKey2.toString();
      assertEquals("MultiKey[5536, -1092, 5536, -1092]", string0);
      
      integerArray0[6] = integer2;
      integerArray0[7] = null;
      integerArray0[8] = integer1;
      MultiKey<Integer> multiKey3 = new MultiKey<Integer>(integerArray0, true);
      MultiKey<MultiKey<Integer>> multiKey4 = new MultiKey<MultiKey<Integer>>(multiKey2, multiKey2, multiKey2);
      multiKey4.getKeys();
      multiKey2.size();
      assertFalse(multiKey2.equals((Object)multiKey3));
      
      boolean boolean0 = multiKey0.equals(multiKey0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("", (String) null, (String) null, "", "");
      String string0 = "";
      MultiKey<String> multiKey1 = new MultiKey<String>("", "");
      multiKey1.toString();
      MultiKey<Object> multiKey2 = new MultiKey<Object>((Object) null, "");
      MultiKey<Object> multiKey3 = null;
//      try {
        multiKey3 = new MultiKey<Object>((Object[]) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // The array of keys must not be null
//         //
//         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
//      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      MultiKey<String> multiKey0 = null;
//      try {
        multiKey0 = new MultiKey<String>((String[]) null, false);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // The array of keys must not be null
//         //
//         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
//      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>(":Ag90/R:vqyx2Vo", "", "", "", "");
      MultiKey<String> multiKey1 = new MultiKey<String>("", "");
      multiKey1.getKey(0);
      MultiKey<Object> multiKey2 = new MultiKey<Object>(multiKey0, "", "");
      assertEquals(3, multiKey2.size());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Integer integer0 = new Integer(1272);
      Integer integer1 = new Integer(0);
      Integer integer2 = new Integer(0);
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integer0, integer0, integer1, integer2);
      multiKey0.toString();
      Integer integer3 = new Integer((-1));
      MultiKey<Object> multiKey1 = new MultiKey<Object>(integer2, (Object) null, integer3, integer3);
      multiKey1.toString();
      String[] stringArray0 = new String[0];
      multiKey1.toString();
      MultiKey<String> multiKey2 = new MultiKey<String>(stringArray0);
      multiKey2.size();
      multiKey1.getKeys();
      multiKey2.toString();
      // Undeclared exception!
//      try { 
        multiKey2.getKey(0);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 0
//         //
//         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
//      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Integer integer0 = new Integer((-1652));
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integer0, integer0, integer0, integer0);
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      boolean boolean0 = multiKey0.equals((Object) null);
      assertFalse(boolean0);
      
      MultiKey<String> multiKey1 = new MultiKey<String>("MultiKey[-1652, -1652, -1652, -1652]", "=9M`:YBW", "MultiKey[-1652, -1652, -1652, -1652]", "", (String) null);
      multiKey1.toString();
      multiKey0.toString();
      String string0 = multiKey1.toString();
      assertEquals("MultiKey[MultiKey[-1652, -1652, -1652, -1652], =9M`:YBW, MultiKey[-1652, -1652, -1652, -1652], , null]", string0);
      
      multiKey1.size();
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) "MultiKey[-1652, -1652, -1652, -1652]";
      objectArray0[1] = (Object) "MultiKey[MultiKey[-1652, -1652, -1652, -1652], =9M`:YBW, MultiKey[-1652, -1652, -1652, -1652], , null]";
      objectArray0[2] = (Object) integer0;
      objectArray0[3] = (Object) "MultiKey[-1652, -1652, -1652, -1652]";
      objectArray0[4] = (Object) "=9M`:YBW";
      objectArray0[5] = (Object) multiKey0;
      objectArray0[6] = (Object) "MultiKey[-1652, -1652, -1652, -1652]";
      MultiKey<Object> multiKey2 = new MultiKey<Object>(objectArray0, false);
      multiKey2.hashCode();
      Integer integer1 = new Integer((-1652));
      Integer integer2 = new Integer(2032);
      MultiKey<Object> multiKey3 = new MultiKey<Object>(integer1, integer2);
      MultiKey<MultiKey<Object>> multiKey4 = new MultiKey<MultiKey<Object>>(multiKey2, multiKey2, multiKey3, multiKey3, multiKey2);
      MultiKey<String> multiKey5 = new MultiKey<String>("", "MultiKey[-1652, -1652, -1652, -1652]");
      boolean boolean1 = multiKey4.equals(multiKey5);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("[`S'S4NqQ%Wo'Ro", "pt4YpPhWZ$Cc't", "pt4YpPhWZ$Cc't");
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) "pt4YpPhWZ$Cc't";
      objectArray0[1] = (Object) "[`S'S4NqQ%Wo'Ro";
      multiKey0.toString();
      objectArray0[2] = (Object) "[`S'S4NqQ%Wo'Ro";
      Object object0 = new Object();
      objectArray0[3] = object0;
      objectArray0[4] = (Object) "pt4YpPhWZ$Cc't";
      objectArray0[5] = (Object) "[`S'S4NqQ%Wo'Ro";
      objectArray0[6] = (Object) "[`S'S4NqQ%Wo'Ro";
      objectArray0[7] = (Object) "[`S'S4NqQ%Wo'Ro";
      objectArray0[8] = (Object) multiKey0;
      MultiKey<Object> multiKey1 = new MultiKey<Object>(objectArray0);
      multiKey1.toString();
      Integer integer0 = new Integer(283);
      MultiKey<Integer> multiKey2 = new MultiKey<Integer>(integer0, integer0);
      multiKey0.toString();
      // Undeclared exception!
//      try { 
        multiKey2.getKey(283);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 283
//         //
//         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
//      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("3LeLoZwm%!", "C!", "MultiKey", (String) null, "C!");
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      int int0 = multiKey0.size();
      int int1 = multiKey0.size();
      assertTrue(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Integer integer0 = new Integer(0);
      Integer integer1 = new Integer(0);
      Integer integer2 = new Integer(0);
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integer0, integer1, integer2);
      String string0 = "I! l~";
      MultiKey<String> multiKey1 = new MultiKey<String>("I! l~", "b0lp^1O+o1:/", "MJ?+");
      // Undeclared exception!
//      try { 
        multiKey1.getKey((-804));
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // -804
//         //
//         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
//      }
  }
}
