/*
 * This file was automatically generated by EvoSuite
 * Wed Oct 20 12:17:49 GMT 2021
 */

package org.apache.commons.collections4.keyvalue;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.lang.reflect.Array;
import org.apache.commons.collections4.keyvalue.MultiKey;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class MultiKey_ESTest extends MultiKey_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>((String) null, (String) null, (String) null);
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.getKey(2);
      MultiKey<Object> multiKey1 = new MultiKey<Object>((Object) null, (Object) null, (Object) null, (Object) null);
      MultiKey<MultiKey<Object>> multiKey2 = new MultiKey<MultiKey<Object>>(multiKey1, multiKey1, multiKey1, multiKey1, multiKey1);
      String string0 = multiKey2.toString();
      assertEquals("MultiKey[MultiKey[null, null, null, null], MultiKey[null, null, null, null], MultiKey[null, null, null, null], MultiKey[null, null, null, null], MultiKey[null, null, null, null]]", string0);
      
      MultiKey<String> multiKey3 = new MultiKey<String>("", "I'3aOj:0g~~|6E,#St4", "_jBemN@V8k{,<ZX");
      MultiKey<String>[] multiKeyArray0 = (MultiKey<String>[]) Array.newInstance(MultiKey.class, 9);
      multiKeyArray0[0] = multiKey0;
      multiKeyArray0[1] = multiKey3;
      multiKeyArray0[2] = multiKey3;
      multiKeyArray0[3] = multiKey0;
      multiKeyArray0[4] = multiKey0;
      multiKeyArray0[5] = multiKey3;
      multiKeyArray0[0] = multiKey3;
      multiKeyArray0[7] = multiKey3;
      multiKeyArray0[8] = multiKey3;
      MultiKey<MultiKey<String>> multiKey4 = new MultiKey<MultiKey<String>>(multiKeyArray0, true);
      Object object0 = multiKey4.getKey(2);
      boolean boolean0 = multiKey3.equals(object0);
      assertTrue(boolean0);
      assertFalse(multiKey3.equals((Object)multiKey0));
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      Integer integer0 = new Integer(3);
      Integer integer1 = new Integer(3);
      Integer integer2 = new Integer(0);
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integer0, integer1, integer0, integer2);
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) integer0;
      objectArray0[1] = (Object) multiKey0;
      objectArray0[2] = (Object) multiKey0;
      objectArray0[3] = (Object) multiKey0;
      objectArray0[4] = (Object) integer0;
      objectArray0[5] = (Object) integer1;
      objectArray0[6] = (Object) integer0;
      objectArray0[7] = (Object) integer2;
      objectArray0[8] = (Object) integer1;
      MultiKey<Object> multiKey1 = new MultiKey<Object>(objectArray0);
      multiKey1.toString();
      String string0 = multiKey0.toString();
      assertEquals("MultiKey[3, 3, 3, 0]", string0);
      
      Object[] objectArray1 = multiKey1.getKeys();
      multiKey0.size();
      Integer integer3 = multiKey0.getKey(3);
      MultiKey<String> multiKey2 = new MultiKey<String>("MultiKey[3, MultiKey[3, 3, 3, 0], MultiKey[3, 3, 3, 0], MultiKey[3, 3, 3, 0], 3, 3, 3, 0, 3]", "zuD", "");
      boolean boolean0 = multiKey2.equals("");
      assertFalse(boolean0);
      
      MultiKey<Object> multiKey3 = new MultiKey<Object>(objectArray1, true);
      boolean boolean1 = multiKey1.equals(multiKey3);
      Integer[] integerArray0 = new Integer[5];
      integerArray0[0] = integer1;
      integerArray0[1] = integer0;
      integerArray0[2] = integer1;
      integerArray0[3] = integer3;
      integerArray0[4] = integer0;
      MultiKey<Integer> multiKey4 = new MultiKey<Integer>(integerArray0);
      boolean boolean2 = multiKey2.equals(multiKey4);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>((String) null, (String) null, (String) null, (String) null, (String) null);
      multiKey0.getKey(2);
      MultiKey<Object> multiKey1 = new MultiKey<Object>((Object) null, (Object) null, (Object) null, (Object) null);
      MultiKey<MultiKey<Object>> multiKey2 = new MultiKey<MultiKey<Object>>(multiKey1, multiKey1, multiKey1, multiKey1, multiKey1);
      MultiKey<Object> multiKey3 = new MultiKey<Object>((Object) null, (Object) null, multiKey0, multiKey1);
      MultiKey<MultiKey<Object>> multiKey4 = new MultiKey<MultiKey<Object>>(multiKey1, multiKey3, multiKey1, multiKey3, multiKey3);
      boolean boolean0 = multiKey4.equals(multiKey2);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>((String) null, (String) null, (String) null);
      multiKey0.getKey(2);
      MultiKey<Object> multiKey1 = new MultiKey<Object>((Object) null, (Object) null, (Object) null, (Object) null);
      MultiKey<MultiKey<Object>> multiKey2 = new MultiKey<MultiKey<Object>>(multiKey1, multiKey1, multiKey1, multiKey1, multiKey1);
      boolean boolean0 = multiKey2.equals(multiKey0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      MultiKey<Object> multiKey0 = null;
//      try {
        multiKey0 = new MultiKey<Object>((Object[]) null, true);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // The array of keys must not be null
//         //
//         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
//      }
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      String[] stringArray0 = new String[0];
      MultiKey<String> multiKey0 = new MultiKey<String>(stringArray0);
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.hashCode();
      multiKey0.size();
      Integer integer0 = new Integer(0);
      MultiKey<Integer> multiKey1 = new MultiKey<Integer>(integer0, integer0);
      multiKey1.toString();
      multiKey1.toString();
      multiKey1.toString();
      Integer integer1 = new Integer(0);
      multiKey1.toString();
      MultiKey<Object> multiKey2 = new MultiKey<Object>("MultiKey[0, 0]", integer1, "MultiKey[]", integer0);
      multiKey0.toString();
      multiKey2.toString();
      multiKey2.toString();
      multiKey2.toString();
      multiKey1.toString();
      multiKey2.size();
      multiKey1.size();
      multiKey0.getKeys();
      multiKey1.hashCode();
      multiKey1.hashCode();
      multiKey0.hashCode();
      // Undeclared exception!
//      try { 
        multiKey1.getKey(2);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 2
//         //
//         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
//      }
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      MultiKey<String> multiKey0 = null;
//      try {
        multiKey0 = new MultiKey<String>((String[]) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // The array of keys must not be null
//         //
//         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
//      }
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      Object[] objectArray0 = new Object[9];
      MultiKey<Object> multiKey0 = new MultiKey<Object>(objectArray0);
      multiKey0.getKey(5);
      objectArray0[0] = null;
      Object object0 = new Object();
      objectArray0[1] = object0;
      Object object1 = new Object();
      objectArray0[2] = object1;
      multiKey0.getKey(5);
      objectArray0[3] = null;
      Object object2 = new Object();
      objectArray0[4] = object2;
      multiKey0.getKey(4);
      objectArray0[5] = null;
      Object object3 = new Object();
      objectArray0[6] = object3;
      Object object4 = new Object();
      objectArray0[7] = object4;
      MultiKey<Object>[] multiKeyArray0 = (MultiKey<Object>[]) Array.newInstance(MultiKey.class, 1);
      MultiKey<String> multiKey1 = new MultiKey<String>("", "");
      // Undeclared exception!
//      try { 
        multiKey1.getKey(5);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 5
//         //
//         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
//      }
  }

  @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      Integer integer0 = new Integer((-1203));
      Integer integer1 = new Integer((-679));
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integer0, integer1);
      multiKey0.toString();
      multiKey0.toString();
      MultiKey<String>[] multiKeyArray0 = (MultiKey<String>[]) Array.newInstance(MultiKey.class, 3);
      MultiKey<String> multiKey1 = new MultiKey<String>("", ";UH8It9o", "");
      multiKeyArray0[0] = multiKey1;
      MultiKey<String> multiKey2 = new MultiKey<String>("m&", ";UH8It9o", "", "<Tl\"");
      multiKeyArray0[1] = multiKey2;
      MultiKey<String> multiKey3 = new MultiKey<String>("t#Q69:N:D5o~!Za", "", "", "MultiKey[-1203, -679]");
      multiKey2.toString();
      multiKey0.toString();
      multiKeyArray0[2] = multiKey3;
      multiKey2.toString();
      MultiKey<MultiKey<String>> multiKey4 = new MultiKey<MultiKey<String>>(multiKeyArray0, true);
      String string0 = multiKey3.toString();
      multiKey4.toString();
      multiKey3.toString();
      String string1 = multiKey1.toString();
      assertEquals("MultiKey[, ;UH8It9o, ]", string1);
      
      multiKey4.size();
      Integer integer2 = new Integer(3);
      multiKey1.equals(integer2);
      boolean boolean0 = multiKey0.equals("MultiKey[-1203, -679]");
      assertFalse(boolean0);
      
      Integer integer3 = new Integer(0);
      MultiKey<Object> multiKey5 = new MultiKey<Object>("MultiKey[t#Q69:N:D5o~!Za, , , MultiKey[-1203, -679]]", "MultiKey[t#Q69:N:D5o~!Za, , , MultiKey[-1203, -679]]", "MultiKey[t#Q69:N:D5o~!Za, , , MultiKey[-1203, -679]]", integer3);
      Object object0 = multiKey5.getKey(0);
      assertTrue(object0.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test9()  throws Throwable  {
      Object object0 = new Object();
      MultiKey<Object> multiKey0 = new MultiKey<Object>(object0, object0);
      Integer integer0 = new Integer(1);
      Integer integer1 = new Integer(1);
      multiKey0.toString();
      MultiKey<Integer> multiKey1 = new MultiKey<Integer>(integer0, integer0, integer0, integer0, integer1);
      multiKey1.size();
      String[] stringArray0 = new String[1];
      multiKey1.toString();
      stringArray0[0] = "";
      MultiKey<String> multiKey2 = new MultiKey<String>(stringArray0);
      multiKey2.toString();
      multiKey2.toString();
      multiKey2.size();
      multiKey2.toString();
      multiKey2.toString();
      multiKey0.toString();
      multiKey1.toString();
      multiKey2.toString();
      multiKey0.getKey(1);
      multiKey0.toString();
      multiKey2.toString();
      multiKey0.toString();
      multiKey2.size();
      multiKey0.toString();
      multiKey0.hashCode();
      multiKey0.getKeys();
      multiKey0.toString();
      multiKey0.getKeys();
      multiKey1.toString();
      multiKey1.size();
      multiKey2.size();
      // Undeclared exception!
//      try { 
        multiKey2.getKey(1);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 1
//         //
//         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
//      }
  }
}
