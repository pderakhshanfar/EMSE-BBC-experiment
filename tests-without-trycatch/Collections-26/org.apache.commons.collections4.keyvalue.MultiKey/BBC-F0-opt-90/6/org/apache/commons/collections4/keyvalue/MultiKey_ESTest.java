/*
 * This file was automatically generated by EvoSuite
 * Wed Oct 13 20:49:28 GMT 2021
 */

package org.apache.commons.collections4.keyvalue;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.lang.reflect.Array;
import org.apache.commons.collections4.keyvalue.MultiKey;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class MultiKey_ESTest extends MultiKey_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("lY+$w", "f8?-b*", "lY+$w", "f8?-b*", "/\"L;v/h.>z9");
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) multiKey0;
      objectArray0[1] = (Object) multiKey0;
      objectArray0[2] = (Object) "lY+$w";
      objectArray0[3] = (Object) "lY+$w";
      objectArray0[4] = (Object) multiKey0;
      objectArray0[5] = (Object) "f8?-b*";
      MultiKey<Object> multiKey1 = new MultiKey<Object>(objectArray0, false);
      String string0 = multiKey1.toString();
      assertEquals("MultiKey[MultiKey[lY+$w, f8?-b*, lY+$w, f8?-b*, /\"L;v/h.>z9], MultiKey[lY+$w, f8?-b*, lY+$w, f8?-b*, /\"L;v/h.>z9], lY+$w, lY+$w, MultiKey[lY+$w, f8?-b*, lY+$w, f8?-b*, /\"L;v/h.>z9], f8?-b*]", string0);
      
      Object object0 = multiKey1.getKey(4);
      boolean boolean0 = multiKey0.equals(object0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>((String) null, "Ax", (String) null);
      multiKey0.toString();
      Integer[] integerArray0 = new Integer[0];
      MultiKey<Integer> multiKey1 = new MultiKey<Integer>(integerArray0);
      multiKey1.toString();
      int int0 = multiKey1.size();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      MultiKey<Object> multiKey0 = new MultiKey<Object>(objectArray0, true);
      multiKey0.toString();
      multiKey0.toString();
      Integer integer0 = new Integer(3);
      multiKey0.equals(integer0);
      multiKey0.toString();
      MultiKey<String>[] multiKeyArray0 = (MultiKey<String>[]) Array.newInstance(MultiKey.class, 0);
      MultiKey<MultiKey<String>> multiKey1 = new MultiKey<MultiKey<String>>(multiKeyArray0, false);
      multiKey1.toString();
      multiKey1.equals(multiKey0);
      MultiKey<Integer> multiKey2 = new MultiKey<Integer>(integer0, integer0, integer0);
      multiKey2.toString();
      String string0 = multiKey2.toString();
      assertEquals("MultiKey[3, 3, 3]", string0);
      
      multiKey2.size();
      boolean boolean0 = multiKey0.equals("MultiKey[]");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      MultiKey<Object> multiKey0 = new MultiKey<Object>(objectArray0, false);
      multiKey0.toString();
      String[] stringArray0 = new String[4];
      stringArray0[0] = "<jlKCm,dBt$Jwfd@*";
      stringArray0[1] = "<jlKCm,dBt$Jwfd@*";
      stringArray0[2] = "MultiKey[]";
      stringArray0[3] = "<jlKCm,dBt$Jwfd@*";
      MultiKey<String> multiKey1 = new MultiKey<String>(stringArray0);
      multiKey1.toString();
      multiKey0.toString();
      multiKey1.toString();
      MultiKey<MultiKey<Object>> multiKey2 = new MultiKey<MultiKey<Object>>(multiKey0, multiKey0, multiKey0);
      multiKey1.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey2.toString();
      multiKey2.toString();
      Integer[] integerArray0 = new Integer[0];
      MultiKey<Integer> multiKey3 = new MultiKey<Integer>(integerArray0);
      multiKey3.toString();
      multiKey3.toString();
      multiKey3.toString();
      multiKey3.toString();
      multiKey3.equals("MultiKey[]");
      Integer integer0 = new Integer((-1833));
      multiKey0.hashCode();
      multiKey0.equals("MultiKey[]");
      multiKey3.equals(multiKey1);
      multiKey0.toString();
      multiKey0.equals("MultiKey[]");
      Object[] objectArray1 = multiKey0.getKeys();
      assertNotSame(objectArray0, objectArray1);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Integer integer0 = new Integer(622);
      Integer integer1 = new Integer(0);
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) "?dO2**FG=";
      objectArray0[1] = (Object) integer0;
      objectArray0[2] = (Object) integer1;
      objectArray0[3] = (Object) integer0;
      objectArray0[4] = (Object) integer0;
      objectArray0[5] = (Object) "<jlKCm,dBt$Jwfd@*";
      MultiKey<Object> multiKey0 = new MultiKey<Object>(objectArray0);
      MultiKey<Object> multiKey1 = new MultiKey<Object>("<jlKCm,dBt$Jwfd@*", integer0, integer1, multiKey0, objectArray0[0]);
      Object object0 = new Object();
      MultiKey<Object> multiKey2 = new MultiKey<Object>(multiKey1, object0, "?dO2**FG=", object0);
      MultiKey<Object> multiKey3 = null;
//      try {
        multiKey3 = new MultiKey<Object>((Object[]) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // The array of keys must not be null
//         //
//         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
//      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>((String) null, (String) null, (String) null);
      multiKey0.getKey(0);
      Integer integer0 = new Integer(0);
      MultiKey<Integer> multiKey1 = new MultiKey<Integer>(integer0, integer0, integer0, integer0);
      Object object0 = multiKey1.getKey(2);
      MultiKey<Object> multiKey2 = new MultiKey<Object>((Object) null, object0, (Object) null, object0, "L5");
      Object object1 = new Object();
      boolean boolean0 = multiKey2.equals(object1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Object object0 = new Object();
      MultiKey<Object> multiKey0 = new MultiKey<Object>(object0, object0, object0);
      Object object1 = multiKey0.getKey(0);
      MultiKey<MultiKey<Object>> multiKey1 = new MultiKey<MultiKey<Object>>(multiKey0, multiKey0, multiKey0, multiKey0, multiKey0);
      multiKey1.toString();
      Object object2 = multiKey1.getKey(0);
      MultiKey<Object> multiKey2 = new MultiKey<Object>(object1, object2, multiKey1);
      multiKey2.toString();
      String[] stringArray0 = new String[9];
      stringArray0[0] = "";
      stringArray0[1] = "I_?]'ZMR-,L)*";
      stringArray0[2] = "";
      stringArray0[3] = "";
      stringArray0[4] = "";
      stringArray0[5] = "";
      stringArray0[6] = "";
      stringArray0[7] = "u~Z}*93l";
      stringArray0[8] = "";
      MultiKey<String> multiKey3 = new MultiKey<String>(stringArray0);
      Object object3 = new Object();
      Integer integer0 = new Integer(0);
      MultiKey<String> multiKey4 = new MultiKey<String>(stringArray0);
      MultiKey<Object> multiKey5 = new MultiKey<Object>(integer0, multiKey4, object3);
      Object object4 = multiKey5.getKey(0);
      MultiKey<Object> multiKey6 = new MultiKey<Object>((Object) null, "", object3, object4);
      boolean boolean0 = multiKey3.equals(multiKey6);
      assertTrue(multiKey4.equals((Object)multiKey3));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Object[] objectArray0 = new Object[3];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object[] objectArray1 = new Object[6];
      objectArray1[0] = object0;
      Object object1 = new Object();
      objectArray1[1] = object1;
      Object object2 = new Object();
      objectArray1[2] = object2;
      objectArray1[3] = object0;
      objectArray1[4] = object0;
      objectArray1[5] = object0;
      MultiKey<Object> multiKey0 = new MultiKey<Object>(objectArray1, true);
      Object object3 = multiKey0.getKey(0);
      objectArray0[1] = object3;
      MultiKey<String> multiKey1 = new MultiKey<String>("", "", "");
      multiKey1.getKey(0);
      objectArray0[2] = (Object) "";
      MultiKey<Object> multiKey2 = new MultiKey<Object>(objectArray0);
      MultiKey<Object> multiKey3 = new MultiKey<Object>(object0, object0);
      MultiKey<Object> multiKey4 = new MultiKey<Object>(multiKey2, multiKey3, multiKey3, objectArray0[2]);
      multiKey3.toString();
      multiKey4.toString();
      multiKey1.size();
      multiKey1.equals((Object) null);
      multiKey4.size();
      Integer integer0 = new Integer(3);
      MultiKey<Integer> multiKey5 = new MultiKey<Integer>(integer0, integer0);
      multiKey5.size();
      multiKey1.getKey(2);
      // Undeclared exception!
//      try { 
        multiKey3.getKey((-1425));
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // -1425
//         //
//         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
//      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>((String) null, (String) null, "org.apache.commons.collections4.keyvalue.MultiKey", "org.apache.commons.collections4.keyvalue.MultiKey", "org.apache.commons.collections4.keyvalue.MultiKey");
      MultiKey<Object> multiKey1 = new MultiKey<Object>(multiKey0, (Object) null, multiKey0);
      multiKey1.toString();
      MultiKey<MultiKey<String>> multiKey2 = new MultiKey<MultiKey<String>>(multiKey0, multiKey0, multiKey0, multiKey0);
      multiKey0.toString();
      // Undeclared exception!
//      try { 
        multiKey2.getKey((-1904));
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // -1904
//         //
//         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
//      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      String[] stringArray0 = new String[6];
      stringArray0[0] = "org.apache.commons.collections4.keyvalue.MultiKey";
      stringArray0[1] = "";
      stringArray0[2] = "20*/";
      stringArray0[3] = "l)8";
      stringArray0[4] = "UOgd%";
      String string0 = "QvMB=o!atcR";
      stringArray0[5] = "QvMB=o!atcR";
      MultiKey<String> multiKey0 = new MultiKey<String>(stringArray0, false);
      multiKey0.equals("iJk`cf+,Pq[");
      multiKey0.toString();
      multiKey0.toString();
      MultiKey<MultiKey<String>> multiKey1 = new MultiKey<MultiKey<String>>(multiKey0, multiKey0, multiKey0);
      multiKey1.toString();
      multiKey0.size();
      // Undeclared exception!
//      try { 
        multiKey0.getKey(6);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 6
//         //
//         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
//      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Object object0 = new Object();
      Integer[] integerArray0 = new Integer[2];
      Integer integer0 = new Integer(1145);
      integerArray0[0] = integer0;
      Integer integer1 = new Integer((int) integerArray0[0]);
      integerArray0[1] = integer1;
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integerArray0, false);
      Object object1 = new Object();
      MultiKey<Object>[] multiKeyArray0 = (MultiKey<Object>[]) Array.newInstance(MultiKey.class, 1);
      Integer integer2 = new Integer(1145);
      Integer integer3 = new Integer((-2374));
      Object object2 = new Object();
      Object object3 = new Object();
      MultiKey<Object> multiKey1 = new MultiKey<Object>(object3, integer3, integer3);
      int int0 = 3;
      // Undeclared exception!
//      try { 
        multiKey1.getKey(3);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 3
//         //
//         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
//      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      MultiKey<Object> multiKey0 = new MultiKey<Object>("nq_R^K", "nq_R^K");
      multiKey0.toString();
      multiKey0.getKeys();
      String[] stringArray0 = new String[5];
      stringArray0[0] = "nq_R^K";
      stringArray0[1] = "nq_R^K";
      stringArray0[2] = "nq_R^K";
      stringArray0[3] = "nq_R^K";
      stringArray0[4] = "nq_R^K";
      MultiKey<String> multiKey1 = new MultiKey<String>(stringArray0);
      multiKey1.toString();
      multiKey1.toString();
      MultiKey<MultiKey<String>> multiKey2 = new MultiKey<MultiKey<String>>(multiKey1, multiKey1, multiKey1, multiKey1, multiKey1);
      multiKey2.size();
      multiKey1.toString();
      multiKey0.hashCode();
      multiKey2.getKeys();
      multiKey1.hashCode();
      multiKey1.hashCode();
      // Undeclared exception!
//      try { 
        multiKey1.getKey(5);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 5
//         //
//         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
//      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Integer integer0 = new Integer(1260);
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>((Integer) null, integer0, integer0);
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.size();
      String[] stringArray0 = null;
      multiKey0.toString();
      MultiKey<String> multiKey1 = null;
//      try {
        multiKey1 = new MultiKey<String>((String[]) null, true);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // The array of keys must not be null
//         //
//         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
//      }
  }
}
