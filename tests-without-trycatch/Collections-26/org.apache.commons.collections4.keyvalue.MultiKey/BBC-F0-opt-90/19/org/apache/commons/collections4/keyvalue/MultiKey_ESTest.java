/*
 * This file was automatically generated by EvoSuite
 * Wed Oct 20 12:38:51 GMT 2021
 */

package org.apache.commons.collections4.keyvalue;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.lang.reflect.Array;
import org.apache.commons.collections4.keyvalue.MultiKey;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class MultiKey_ESTest extends MultiKey_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      String[] stringArray0 = new String[9];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "m/0eojWe1H8CJd";
      stringArray0[3] = "org.apache.commons.collections4.keyvalue.MultiKey";
      stringArray0[4] = "n9Ky]Aqus%";
      stringArray0[5] = "6?|HbEz";
      stringArray0[6] = "";
      stringArray0[7] = "'57/9|";
      stringArray0[8] = "m>Ns4)?SaUx_kgD*|";
      MultiKey<String> multiKey0 = new MultiKey<String>(stringArray0);
      multiKey0.toString();
      multiKey0.equals(multiKey0);
      MultiKey<Integer> multiKey1 = null;
//      try {
        multiKey1 = new MultiKey<Integer>((Integer[]) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // The array of keys must not be null
//         //
//         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
//      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Integer integer0 = new Integer((-3364));
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integer0, integer0);
      String[] stringArray0 = new String[9];
      stringArray0[0] = "k.@Nt*oER|[Zc";
      stringArray0[1] = "";
      stringArray0[2] = "k.@Nt*oER|[Zc";
      stringArray0[3] = "k.@Nt*oER|[Zc";
      stringArray0[4] = "k.@Nt*oER|[Zc";
      stringArray0[5] = "org.apache.commons.collections4.keyvalue.MultiKey";
      stringArray0[6] = "k.@Nt*oER|[Zc";
      stringArray0[7] = "k.@Nt*oER|[Zc";
      stringArray0[8] = "k.@Nt*oER|[Zc";
      MultiKey<String> multiKey1 = new MultiKey<String>(stringArray0, true);
      MultiKey<Object> multiKey2 = new MultiKey<Object>("k.@Nt*oER|[Zc", "k.@Nt*oER|[Zc", multiKey1, (Object) null, (Object) null);
      multiKey2.getKey(4);
      MultiKey<Object> multiKey3 = new MultiKey<Object>(multiKey0, multiKey0, (Object) null);
      Integer integer1 = new Integer(4);
      MultiKey<Object> multiKey4 = new MultiKey<Object>(multiKey3, integer1, multiKey2, "k.@Nt*oER|[Zc");
      boolean boolean0 = multiKey2.equals(multiKey3);
      assertFalse(boolean0);
      
      Integer integer2 = new Integer(9);
      Integer integer3 = new Integer((-3008));
      Integer integer4 = new Integer((-3008));
      Integer integer5 = new Integer(2746);
      Integer integer6 = new Integer(4);
      MultiKey<Integer> multiKey5 = new MultiKey<Integer>(integer4, integer5, integer0, integer6, integer6);
      String string0 = multiKey0.toString();
      assertEquals("MultiKey[-3364, -3364]", string0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      String[] stringArray0 = new String[9];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "m/0eojWe1H8CJd";
      stringArray0[3] = "org.apache.commons.collections4.keyvalue.MultiKey";
      stringArray0[4] = "n9Ky]Aqus%";
      stringArray0[5] = "6?|HbEz";
      stringArray0[6] = "";
      stringArray0[7] = "'57/9|";
      stringArray0[8] = "m>Ns4)?SaUx_kgD*|";
      MultiKey<String> multiKey0 = new MultiKey<String>(stringArray0);
      MultiKey<String> multiKey1 = new MultiKey<String>("", "org.apache.commons.collections4.keyvalue.MultiKey");
      boolean boolean0 = multiKey0.equals(multiKey1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Integer[] integerArray0 = new Integer[0];
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integerArray0, true);
      multiKey0.toString();
      MultiKey<Object> multiKey1 = new MultiKey<Object>((Object[]) integerArray0, true);
      multiKey1.toString();
      multiKey1.getKeys();
      multiKey1.getKeys();
      String[] stringArray0 = new String[7];
      multiKey1.toString();
      multiKey0.toString();
      stringArray0[0] = "MultiKey[]";
      multiKey0.toString();
      stringArray0[1] = "MultiKey[]";
      stringArray0[2] = "MultiKey[]";
      stringArray0[3] = "MultiKey[]";
      stringArray0[4] = "MultiKey[]";
      stringArray0[5] = "MultiKey[]";
      stringArray0[6] = "MultiKey[]";
      MultiKey<String> multiKey2 = new MultiKey<String>(stringArray0);
      multiKey2.toString();
      multiKey1.size();
      multiKey2.toString();
      multiKey0.size();
      MultiKey<Integer>[] multiKeyArray0 = (MultiKey<Integer>[]) Array.newInstance(MultiKey.class, 9);
      multiKeyArray0[0] = multiKey0;
      multiKeyArray0[1] = multiKey0;
      multiKeyArray0[2] = multiKey0;
      multiKeyArray0[3] = multiKey0;
      multiKeyArray0[4] = multiKey0;
      multiKeyArray0[5] = multiKey0;
      multiKeyArray0[6] = multiKey0;
      Integer integer0 = new Integer((-860));
      Integer integer1 = new Integer((-860));
      MultiKey<Integer> multiKey3 = new MultiKey<Integer>(integer0, (Integer) null, integer0, integer1);
      multiKeyArray0[7] = multiKey3;
      Integer integer2 = new Integer(0);
      Integer integer3 = new Integer((-860));
      Integer integer4 = new Integer(0);
      MultiKey<Integer> multiKey4 = new MultiKey<Integer>(integer2, integer3, integer4, integer4);
      multiKeyArray0[8] = multiKey4;
      MultiKey<MultiKey<Integer>> multiKey5 = new MultiKey<MultiKey<Integer>>(multiKeyArray0);
      MultiKey<Integer>[] multiKeyArray1 = multiKey5.getKeys();
      assertFalse(multiKeyArray1.equals((Object)multiKeyArray0));
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      String[] stringArray0 = new String[7];
      stringArray0[0] = "MultiKey";
      stringArray0[1] = "";
      stringArray0[2] = "";
      stringArray0[3] = "9se";
      stringArray0[4] = "";
      stringArray0[5] = "(5tsN~;]nKo";
      stringArray0[6] = "";
      MultiKey<String> multiKey0 = new MultiKey<String>(stringArray0, false);
      String[] stringArray1 = multiKey0.getKeys();
      assertNotSame(stringArray0, stringArray1);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      String[] stringArray0 = new String[1];
      stringArray0[0] = "]h";
      MultiKey<String> multiKey0 = new MultiKey<String>(stringArray0, true);
      MultiKey<Object> multiKey1 = new MultiKey<Object>(multiKey0, "]h", "]h", "]h", "");
      multiKey1.toString();
      multiKey0.toString();
      multiKey1.hashCode();
      int int0 = (-1088);
      // Undeclared exception!
//      try { 
        multiKey0.getKey((-1088));
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // -1088
//         //
//         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
//      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Integer integer0 = new Integer(0);
      int int0 = 0;
      Integer integer1 = new Integer(0);
      Integer integer2 = null;
      Integer integer3 = new Integer(0);
      int int1 = 3944;
      Integer integer4 = new Integer(3944);
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integer0, integer1, (Integer) null, integer3, integer4);
      multiKey0.toString();
      String[] stringArray0 = null;
      MultiKey<String> multiKey1 = null;
//      try {
        multiKey1 = new MultiKey<String>((String[]) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // The array of keys must not be null
//         //
//         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
//      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      MultiKey<Object> multiKey0 = new MultiKey<Object>("", "");
      multiKey0.toString();
      multiKey0.hashCode();
      MultiKey<String> multiKey1 = new MultiKey<String>("v3?&FY}>e_=", "v3?&FY}>e_=", "MultiKey[, ]", "");
      String string0 = multiKey1.toString();
      assertEquals("MultiKey[v3?&FY}>e_=, v3?&FY}>e_=, MultiKey[, ], ]", string0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      String string0 = null;
      MultiKey<String> multiKey0 = new MultiKey<String>((String) null, (String) null, (String) null);
      Object object0 = new Object();
      Object object1 = null;
      MultiKey<String> multiKey1 = new MultiKey<String>("", "sxX-", "", "", "Kn;w.a");
      MultiKey<Object> multiKey2 = null;
//      try {
        multiKey2 = new MultiKey<Object>((Object[]) null, false);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // The array of keys must not be null
//         //
//         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
//      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Object[] objectArray0 = new Object[4];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      Object object2 = new Object();
      objectArray0[2] = object2;
      Object object3 = new Object();
      objectArray0[3] = object3;
      MultiKey<Object> multiKey0 = new MultiKey<Object>(objectArray0);
      Object object4 = new Object();
      boolean boolean0 = multiKey0.equals(object4);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Object object0 = new Object();
      Integer integer0 = new Integer(0);
      MultiKey<Object> multiKey0 = new MultiKey<Object>("The array of keys must not be null", object0, integer0);
      MultiKey<Object> multiKey1 = new MultiKey<Object>(multiKey0, multiKey0);
      multiKey1.hashCode();
      Integer integer1 = new Integer((-468));
      multiKey1.toString();
      MultiKey<Integer> multiKey2 = new MultiKey<Integer>(integer1, integer0, integer1, (Integer) null, integer0);
      multiKey2.toString();
      multiKey2.getKey(1);
      MultiKey<Object> multiKey3 = new MultiKey<Object>("The array of keys must not be null", integer0);
      // Undeclared exception!
//      try { 
        multiKey3.getKey(748);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 748
//         //
//         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
//      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Object[] objectArray0 = new Object[1];
      Object object0 = new Object();
      objectArray0[0] = object0;
      MultiKey<Object> multiKey0 = new MultiKey<Object>(objectArray0);
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.getKey(0);
      multiKey0.toString();
      multiKey0.size();
      // Undeclared exception!
//      try { 
        multiKey0.getKey(1);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 1
//         //
//         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
//      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Integer integer0 = new Integer((-3364));
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integer0, integer0);
      multiKey0.toString();
      String string0 = multiKey0.toString();
      assertEquals("MultiKey[-3364, -3364]", string0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Integer integer0 = new Integer(0);
      Integer integer1 = new Integer(0);
      Integer integer2 = new Integer(3);
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integer0, integer1, integer2, integer0, integer0);
      Object object0 = multiKey0.getKey(0);
      MultiKey<Object> multiKey1 = new MultiKey<Object>((Object) null, object0);
      assertEquals(2, multiKey1.size());
  }
}
