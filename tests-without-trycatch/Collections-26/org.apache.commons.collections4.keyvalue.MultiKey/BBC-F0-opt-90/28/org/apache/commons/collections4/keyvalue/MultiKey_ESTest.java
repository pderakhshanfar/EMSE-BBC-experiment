/*
 * This file was automatically generated by EvoSuite
 * Fri Oct 22 17:51:41 GMT 2021
 */

package org.apache.commons.collections4.keyvalue;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.collections4.keyvalue.MultiKey;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class MultiKey_ESTest extends MultiKey_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("The array of keys must not be null", "'._n'}0X-v");
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) "}";
      objectArray0[1] = (Object) "The array of keys must not be null";
      objectArray0[2] = (Object) "}";
      objectArray0[3] = (Object) "The array of keys must not be null";
      objectArray0[4] = (Object) multiKey0;
      MultiKey<Object> multiKey1 = new MultiKey<Object>(objectArray0);
      Object object0 = multiKey1.getKey(4);
      boolean boolean0 = multiKey0.equals(object0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("", "");
      Object[] objectArray0 = new Object[2];
      MultiKey<MultiKey<Object>> multiKey1 = new MultiKey<MultiKey<Object>>((MultiKey<Object>) null, (MultiKey<Object>) null, (MultiKey<Object>) null, (MultiKey<Object>) null);
      multiKey1.getKey(1);
      objectArray0[0] = (Object) null;
      objectArray0[1] = (Object) "";
      MultiKey<Object> multiKey2 = new MultiKey<Object>(objectArray0, true);
      Object object0 = new Object();
      MultiKey<Object> multiKey3 = new MultiKey<Object>("", multiKey1);
      Object object1 = multiKey3.getKey(1);
      Integer integer0 = new Integer(1);
      MultiKey<Integer> multiKey4 = new MultiKey<Integer>(integer0, integer0, integer0);
      Object object2 = new Object();
      MultiKey<Object> multiKey5 = new MultiKey<Object>(multiKey1, object0);
      MultiKey<String> multiKey6 = new MultiKey<String>("<jo", "<jo", "<jo", "", ")Q8OAu!");
      MultiKey<Object> multiKey7 = new MultiKey<Object>((Object) null, object0, multiKey2, multiKey6, (Object) null);
      MultiKey<Object> multiKey8 = new MultiKey<Object>(object1, multiKey5, multiKey7, object2, objectArray0[0]);
      Integer integer1 = new Integer(1);
      MultiKey<Object> multiKey9 = new MultiKey<Object>(multiKey8, integer1);
      multiKey8.toString();
      Object object3 = new Object();
      MultiKey<Object> multiKey10 = new MultiKey<Object>(objectArray0, true);
      MultiKey<Object> multiKey11 = new MultiKey<Object>((Object) null, objectArray0[0], object3, multiKey9, multiKey10);
      multiKey11.getKey(0);
      multiKey7.equals((Object) null);
      Integer integer2 = new Integer((-1));
      boolean boolean0 = multiKey2.equals(integer2);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      String string0 = "&jW`vbWN";
      MultiKey<String> multiKey0 = new MultiKey<String>("(Nedb5", "&jW`vbWN", "&jW`vbWN");
      Integer[] integerArray0 = new Integer[0];
      MultiKey<Integer> multiKey1 = new MultiKey<Integer>(integerArray0, false);
      multiKey1.getKeys();
      multiKey1.size();
      MultiKey<MultiKey<String>> multiKey2 = new MultiKey<MultiKey<String>>(multiKey0, multiKey0, multiKey0);
      multiKey1.toString();
      multiKey2.getKeys();
      // Undeclared exception!
//      try { 
        multiKey1.getKey(0);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 0
//         //
//         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
//      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>(")=Ad?y~2cQ", ")=Ad?y~2cQ", ")=Ad?y~2cQ");
      MultiKey<MultiKey<String>> multiKey1 = new MultiKey<MultiKey<String>>(multiKey0, (MultiKey<String>) null, (MultiKey<String>) null, multiKey0);
      multiKey1.toString();
      multiKey1.toString();
      multiKey1.toString();
      multiKey1.toString();
      String string0 = multiKey1.toString();
      assertEquals("MultiKey[MultiKey[)=Ad?y~2cQ, )=Ad?y~2cQ, )=Ad?y~2cQ], null, null, MultiKey[)=Ad?y~2cQ, )=Ad?y~2cQ, )=Ad?y~2cQ]]", string0);
      
      multiKey1.equals((Object) null);
      boolean boolean0 = multiKey0.equals("K?]*4G");
      assertFalse(boolean0);
      
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) "K?]*4G";
      objectArray0[1] = (Object) "MultiKey[MultiKey[)=Ad?y~2cQ, )=Ad?y~2cQ, )=Ad?y~2cQ], null, null, MultiKey[)=Ad?y~2cQ, )=Ad?y~2cQ, )=Ad?y~2cQ]]";
      MultiKey<Object> multiKey2 = new MultiKey<Object>(objectArray0, false);
      Object object0 = new Object();
      MultiKey<Object> multiKey3 = new MultiKey<Object>(object0, multiKey0);
      boolean boolean1 = multiKey2.equals(multiKey3);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      String string0 = null;
      Integer integer0 = new Integer((-929));
      MultiKey<Integer> multiKey0 = null;
//      try {
        multiKey0 = new MultiKey<Integer>((Integer[]) null, true);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // The array of keys must not be null
//         //
//         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
//      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Object[] objectArray0 = new Object[4];
      Object object0 = new Object();
      objectArray0[0] = object0;
      String[] stringArray0 = new String[8];
      stringArray0[0] = "org.apache.commons.collections4.keyvalue.MultiKey";
      stringArray0[1] = "";
      stringArray0[2] = "YU\"";
      stringArray0[3] = "";
      stringArray0[4] = "Ma&%_q;FBi;fG!-o&";
      stringArray0[5] = "";
      stringArray0[6] = "";
      stringArray0[7] = "";
      MultiKey<String> multiKey0 = new MultiKey<String>(stringArray0, false);
      Object object1 = new Object();
      Integer integer0 = new Integer(0);
      Integer integer1 = new Integer((-1335));
      MultiKey<Object> multiKey1 = new MultiKey<Object>(object0, integer1, (Object) null);
      MultiKey<Object> multiKey2 = new MultiKey<Object>(multiKey0, object1, integer0, multiKey1, "YU\"");
      MultiKey<MultiKey<Object>> multiKey3 = new MultiKey<MultiKey<Object>>(multiKey2, multiKey2, multiKey2);
      MultiKey<Object> multiKey4 = multiKey3.getKey(0);
      objectArray0[1] = (Object) multiKey4;
      Integer integer2 = new Integer((-1));
      Integer integer3 = new Integer((-1335));
      Integer integer4 = new Integer((-1));
      MultiKey<Integer> multiKey5 = new MultiKey<Integer>(integer2, integer1, integer3, integer4);
      // Undeclared exception!
//      try { 
        multiKey5.getKey((-1));
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // -1
//         //
//         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
//      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      String[] stringArray0 = new String[9];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "{ZEHzVn";
      stringArray0[3] = "";
      stringArray0[4] = "";
      stringArray0[5] = "0V";
      stringArray0[6] = "p]Kbc+lY/*Z>";
      stringArray0[7] = "0g`4[{|;/4n8";
      stringArray0[8] = "Wh";
      MultiKey<String> multiKey0 = new MultiKey<String>(stringArray0);
      multiKey0.hashCode();
      Integer integer0 = new Integer(3);
      Integer integer1 = new Integer(3);
      MultiKey<Integer> multiKey1 = new MultiKey<Integer>(integer0, integer1, integer0, integer0, (Integer) null);
      MultiKey<MultiKey<Integer>> multiKey2 = new MultiKey<MultiKey<Integer>>(multiKey1, multiKey1, multiKey1);
      // Undeclared exception!
//      try { 
        multiKey2.getKey(3);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 3
//         //
//         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
//      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>((Integer) null, (Integer) null, (Integer) null, (Integer) null);
      multiKey0.toString();
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) null;
      MultiKey<Object> multiKey1 = new MultiKey<Object>(objectArray0);
      multiKey1.toString();
      multiKey1.getKeys();
      MultiKey<String> multiKey2 = null;
//      try {
        multiKey2 = new MultiKey<String>((String[]) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // The array of keys must not be null
//         //
//         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
//      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Integer integer0 = new Integer(1951);
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integer0, integer0);
      MultiKey<String> multiKey1 = new MultiKey<String>("MultiKey", "2cT5$yH`qC! 6sS", "fRKS", "(~");
      String[] stringArray0 = new String[6];
      stringArray0[0] = "2cT5$yH`qC! 6sS";
      stringArray0[1] = "MultiKey";
      stringArray0[2] = "MultiKey";
      stringArray0[3] = "MultiKey";
      stringArray0[4] = "2cT5$yH`qC! 6sS";
      stringArray0[5] = "2cT5$yH`qC! 6sS";
      MultiKey<String> multiKey2 = new MultiKey<String>(stringArray0);
      multiKey2.toString();
      MultiKey<MultiKey<String>> multiKey3 = new MultiKey<MultiKey<String>>(multiKey1, multiKey2, multiKey1, multiKey1, multiKey1);
      int int0 = multiKey3.size();
      assertEquals(5, int0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Integer integer0 = new Integer(0);
      Integer integer1 = new Integer(0);
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integer0, integer1);
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.hashCode();
      Integer integer2 = new Integer((-1212));
      MultiKey<Integer> multiKey1 = new MultiKey<Integer>(integer0, integer2);
      multiKey1.toString();
      MultiKey<MultiKey<Integer>> multiKey2 = new MultiKey<MultiKey<Integer>>(multiKey0, multiKey1, multiKey1);
      multiKey2.toString();
      multiKey2.equals(integer1);
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) "MultiKey[0, 0]";
      objectArray0[1] = (Object) multiKey1;
      objectArray0[2] = (Object) "MultiKey[0, 0]";
      objectArray0[3] = (Object) "MultiKey[0, 0]";
      objectArray0[4] = (Object) multiKey0;
      MultiKey<Object> multiKey3 = new MultiKey<Object>(objectArray0);
      multiKey3.toString();
      multiKey3.equals("");
      MultiKey<String> multiKey4 = new MultiKey<String>("", "MultiKey[0, 0]");
      multiKey4.hashCode();
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      String[] stringArray0 = null;
      MultiKey<String> multiKey0 = null;
//      try {
        multiKey0 = new MultiKey<String>((String[]) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // The array of keys must not be null
//         //
//         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
//      }
  }
}
