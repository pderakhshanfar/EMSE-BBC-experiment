/*
 * This file was automatically generated by EvoSuite
 * Wed Oct 13 20:49:18 GMT 2021
 */

package org.apache.commons.collections4.keyvalue;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.collections4.keyvalue.MultiKey;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class MultiKey_ESTest extends MultiKey_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      Object object0 = new Object();
      Integer integer0 = new Integer(451);
      MultiKey<Object> multiKey0 = new MultiKey<Object>(integer0, (Object) null, object0);
      multiKey0.toString();
      boolean boolean0 = multiKey0.equals(multiKey0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      String[] stringArray0 = new String[0];
      MultiKey<String> multiKey0 = new MultiKey<String>(stringArray0, true);
      MultiKey<Object> multiKey1 = new MultiKey<Object>(stringArray0);
      Object[] objectArray0 = multiKey1.getKeys();
      assertEquals(0, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      String[] stringArray0 = new String[0];
      MultiKey<String> multiKey0 = new MultiKey<String>(stringArray0, true);
      multiKey0.toString();
      MultiKey<MultiKey<String>> multiKey1 = new MultiKey<MultiKey<String>>(multiKey0, multiKey0);
      multiKey1.getKeys();
      int int0 = multiKey0.size();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      Integer integer0 = new Integer(0);
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>((Integer) null, integer0, (Integer) null, (Integer) null);
      MultiKey<String> multiKey1 = new MultiKey<String>("_SIE>^T#fP\u0006|TVB", "_SIE>^T#fP\u0006|TVB", "_SIE>^T#fP\u0006|TVB", "_SIE>^T#fP\u0006|TVB", "w|I99!");
      multiKey0.toString();
      multiKey1.getKey(0);
      MultiKey<Object> multiKey2 = new MultiKey<Object>(multiKey0, "_SIE>^T#fP\u0006|TVB", multiKey0);
      multiKey2.toString();
      MultiKey<String> multiKey3 = null;
//      try {
        multiKey3 = new MultiKey<String>((String[]) null, false);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // The array of keys must not be null
//         //
//         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
//      }
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      Integer integer0 = new Integer(0);
      Object[] objectArray0 = new Object[0];
      MultiKey<Object> multiKey0 = new MultiKey<Object>(objectArray0);
      MultiKey<Object> multiKey1 = new MultiKey<Object>("", integer0, multiKey0);
      multiKey1.getKey(0);
      multiKey0.toString();
      MultiKey<Object> multiKey2 = new MultiKey<Object>("", "");
      multiKey2.getKey(0);
      MultiKey<String> multiKey3 = null;
//      try {
        multiKey3 = new MultiKey<String>((String[]) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // The array of keys must not be null
//         //
//         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
//      }
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      Integer[] integerArray0 = new Integer[6];
      int int0 = 1;
      Integer integer0 = new Integer(1);
      integerArray0[0] = integer0;
      Integer integer1 = new Integer(int0);
      integerArray0[1] = integer1;
      Integer integer2 = new Integer(2);
      integerArray0[2] = integer2;
      Integer integer3 = new Integer(2);
      integerArray0[3] = integer3;
      Integer integer4 = new Integer(int0);
      integerArray0[4] = integer4;
      Integer integer5 = new Integer(4);
      integerArray0[5] = integer5;
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integerArray0, true);
      Object object0 = multiKey0.getKey(int0);
      MultiKey<Object> multiKey1 = new MultiKey<Object>("", object0);
      multiKey1.toString();
      String string0 = multiKey1.toString();
      assertEquals("MultiKey[, 1]", string0);
      
      MultiKey<String> multiKey2 = new MultiKey<String>("", "6r/;3v6BwmlHh(j?", (String) null, "zw!4?a57q77", "6r/;3v6BwmlHh(j?");
      multiKey0.toString();
      multiKey2.toString();
      boolean boolean0 = multiKey1.equals(multiKey2);
      assertFalse(boolean0);
      
      boolean boolean1 = multiKey2.equals(integer4);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      Integer[] integerArray0 = new Integer[5];
      int int0 = 0;
      Integer integer0 = new Integer(0);
      integerArray0[0] = integer0;
      Integer integer1 = new Integer((-373));
      integerArray0[1] = integer1;
      Integer integer2 = new Integer(0);
      integerArray0[2] = integer2;
      Integer integer3 = new Integer(0);
      integerArray0[3] = integer3;
      Integer integer4 = new Integer(int0);
      integerArray0[4] = integer4;
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integerArray0);
      MultiKey<String> multiKey1 = new MultiKey<String>("", "(k>e?1SNok0y|&!");
      multiKey1.toString();
      multiKey1.toString();
      multiKey1.toString();
      multiKey1.getKey(0);
      multiKey0.toString();
      Integer integer5 = new Integer(1298);
      multiKey0.toString();
      MultiKey<Object> multiKey2 = new MultiKey<Object>(multiKey0, integer5, (Object) null);
      multiKey0.toString();
      multiKey2.size();
      multiKey0.getKeys();
      multiKey2.size();
      // Undeclared exception!
//      try { 
        multiKey1.getKey(3);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 3
//         //
//         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
//      }
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>((String) null, (String) null, (String) null, "Z'K<2");
      MultiKey<String> multiKey1 = new MultiKey<String>((String) null, "B@Hq4T*WAgGw", "B@Hq4T*WAgGw", "B@Hq4T*WAgGw", "B@Hq4T*WAgGw");
      multiKey1.toString();
      multiKey0.toString();
      MultiKey<Object> multiKey2 = new MultiKey<Object>(multiKey0, (Object) null, multiKey1, "B@Hq4T*WAgGw", (Object) null);
      multiKey0.toString();
      multiKey2.toString();
      multiKey2.size();
      Integer[] integerArray0 = new Integer[3];
      int int0 = 1;
      multiKey0.toString();
      Integer integer0 = new Integer(1);
      integerArray0[0] = integer0;
      Integer integer1 = new Integer(int0);
      integerArray0[1] = integer1;
      multiKey0.toString();
      multiKey1.toString();
      multiKey2.toString();
      multiKey0.toString();
      Integer integer2 = new Integer(int0);
      integerArray0[2] = integer2;
      MultiKey<Integer> multiKey3 = new MultiKey<Integer>(integerArray0, false);
      multiKey3.toString();
      multiKey3.toString();
      multiKey2.toString();
      multiKey2.size();
      multiKey2.toString();
      multiKey0.toString();
      multiKey1.hashCode();
      multiKey2.equals("MultiKey[1, 1, 1]");
      multiKey0.hashCode();
      MultiKey<Integer> multiKey4 = new MultiKey<Integer>(integerArray0);
      MultiKey<MultiKey<Integer>> multiKey5 = new MultiKey<MultiKey<Integer>>(multiKey3, multiKey4, multiKey4, multiKey4, multiKey3);
      int int1 = multiKey5.size();
      assertFalse(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      Integer[] integerArray0 = new Integer[5];
      int int0 = 4;
      Integer integer0 = new Integer(4);
      integerArray0[0] = integer0;
      Integer integer1 = new Integer(int0);
      integerArray0[1] = integer1;
      Integer integer2 = new Integer(int0);
      integerArray0[2] = integer2;
      Integer integer3 = new Integer(int0);
      integerArray0[3] = integer3;
      Integer integer4 = new Integer(int0);
      integerArray0[4] = integer4;
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integerArray0);
      assertEquals(5, multiKey0.size());
  }

  @Test(timeout = 4000)
  public void test9()  throws Throwable  {
      Object object0 = new Object();
      Object object1 = new Object();
      MultiKey<Object> multiKey0 = new MultiKey<Object>((Object) null, (Object) null, object0, object1);
      multiKey0.getKey(0);
      MultiKey<Object> multiKey1 = new MultiKey<Object>((Object) null, (Object) null);
      int int0 = multiKey1.size();
      assertEquals(2, int0);
  }
}
