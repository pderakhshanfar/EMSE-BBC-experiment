/*
 * This file was automatically generated by EvoSuite
 * Wed Oct 20 12:37:01 GMT 2021
 */

package org.apache.commons.collections4.keyvalue;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.lang.reflect.Array;
import org.apache.commons.collections4.keyvalue.MultiKey;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class MultiKey_ESTest extends MultiKey_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      Object[] objectArray0 = new Object[4];
      MultiKey<Object> multiKey0 = new MultiKey<Object>(objectArray0);
      multiKey0.equals(multiKey0);
      int int0 = multiKey0.size();
      assertEquals(4, int0);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      Object[] objectArray0 = new Object[4];
      MultiKey<Object> multiKey0 = new MultiKey<Object>(objectArray0);
      MultiKey<Object> multiKey1 = new MultiKey<Object>(objectArray0, false);
      multiKey0.equals(multiKey1);
      int int0 = multiKey0.size();
      assertEquals(4, int0);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      Integer integer0 = new Integer(637);
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>((Integer) null, (Integer) null, (Integer) null, integer0);
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      Integer integer1 = new Integer((-1));
      MultiKey<Integer> multiKey1 = new MultiKey<Integer>((Integer) null, integer1);
      Object[] objectArray0 = new Object[0];
      MultiKey<Object> multiKey2 = new MultiKey<Object>(objectArray0);
      int int0 = multiKey2.size();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      String string0 = "#$oKGw:~KND";
      Object object0 = new Object();
      Integer integer0 = new Integer(1);
      MultiKey<Object> multiKey0 = new MultiKey<Object>((Object) null, (Object) null, "#$oKGw:~KND", object0, integer0);
      multiKey0.getKey(1);
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) integer0;
      objectArray0[1] = (Object) integer0;
      objectArray0[2] = (Object) null;
      objectArray0[3] = (Object) null;
      objectArray0[4] = (Object) "#$oKGw:~KND";
      objectArray0[5] = object0;
      MultiKey<Object> multiKey1 = new MultiKey<Object>(objectArray0);
      Object object1 = multiKey1.getKey(0);
      MultiKey<Object> multiKey2 = new MultiKey<Object>((Object) null, object0, object0, object1, object1);
      multiKey0.toString();
      String string1 = null;
      MultiKey<String> multiKey3 = new MultiKey<String>("", "");
      MultiKey<Object> multiKey4 = new MultiKey<Object>(objectArray0, false);
      // Undeclared exception!
//      try { 
        multiKey4.getKey((-1012));
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // -1012
//         //
//         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
//      }
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      Object object0 = new Object();
      MultiKey<String> multiKey0 = new MultiKey<String>("", "", "");
      MultiKey<Object> multiKey1 = new MultiKey<Object>(object0, object0, multiKey0);
      multiKey1.toString();
      multiKey0.toString();
      multiKey1.equals("");
      multiKey0.toString();
      multiKey1.equals("");
      multiKey1.toString();
      multiKey0.getKey(0);
      MultiKey<Integer> multiKey2 = null;
//      try {
        multiKey2 = new MultiKey<Integer>((Integer[]) null, false);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // The array of keys must not be null
//         //
//         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
//      }
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      String[] stringArray0 = new String[0];
      MultiKey<String> multiKey0 = new MultiKey<String>(stringArray0, false);
      multiKey0.toString();
      multiKey0.getKeys();
      String[] stringArray1 = multiKey0.getKeys();
      assertNotSame(stringArray1, stringArray0);
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      Integer integer0 = new Integer(637);
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>((Integer) null, (Integer) null, (Integer) null, integer0);
      multiKey0.toString();
      multiKey0.size();
      Integer integer1 = new Integer((-2361));
      Integer integer2 = new Integer(1359);
      MultiKey<Object> multiKey1 = new MultiKey<Object>((Object) null, integer2);
      multiKey1.toString();
      multiKey1.toString();
      multiKey1.toString();
      MultiKey<Object> multiKey2 = new MultiKey<Object>(integer1, "MultiKey[null, null, null, 637]", integer1, (Object) null, multiKey1);
      multiKey1.toString();
      MultiKey<MultiKey<Object>> multiKey3 = new MultiKey<MultiKey<Object>>(multiKey2, multiKey1, multiKey1);
      multiKey3.size();
      multiKey2.toString();
      multiKey2.toString();
      multiKey0.equals(multiKey2);
      multiKey0.toString();
      multiKey2.getKeys();
      Integer integer3 = new Integer(3);
      MultiKey<Integer> multiKey4 = new MultiKey<Integer>(integer3, integer1);
      multiKey4.toString();
      multiKey4.toString();
      multiKey4.toString();
      multiKey3.equals(multiKey4);
      // Undeclared exception!
//      try { 
        multiKey2.getKey(1359);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 1359
//         //
//         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
//      }
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      MultiKey<String> multiKey0 = null;
//      try {
        multiKey0 = new MultiKey<String>((String[]) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // The array of keys must not be null
//         //
//         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
//      }
  }

  @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      Object object0 = new Object();
      MultiKey<Object> multiKey0 = new MultiKey<Object>(object0, (Object) null, "R(AYs9_v");
      multiKey0.toString();
      // Undeclared exception!
//      try { 
        multiKey0.getKey((-3179));
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // -3179
//         //
//         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
//      }
  }

  @Test(timeout = 4000)
  public void test9()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("", "", " 8Kw-$", "", " 8Kw-$");
      multiKey0.equals("");
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) "";
      objectArray0[1] = (Object) " 8Kw-$";
      objectArray0[2] = (Object) "";
      objectArray0[3] = (Object) multiKey0;
      String[] stringArray0 = new String[8];
      stringArray0[0] = " 8Kw-$";
      stringArray0[1] = " 8Kw-$";
      stringArray0[2] = "";
      stringArray0[3] = " 8Kw-$";
      stringArray0[4] = " 8Kw-$";
      stringArray0[5] = " 8Kw-$";
      stringArray0[6] = "";
      stringArray0[7] = "";
      MultiKey<String> multiKey1 = new MultiKey<String>(stringArray0, true);
      multiKey1.getKey(0);
      MultiKey<Object> multiKey2 = new MultiKey<Object>(" 8Kw-$", " 8Kw-$");
      multiKey2.getKey(0);
      objectArray0[4] = (Object) " 8Kw-$";
      objectArray0[5] = (Object) multiKey0;
      objectArray0[6] = (Object) " 8Kw-$";
      objectArray0[7] = (Object) "";
      MultiKey<Object> multiKey3 = new MultiKey<Object>(objectArray0);
      int int0 = multiKey3.size();
      MultiKey<Object>[] multiKeyArray0 = (MultiKey<Object>[]) Array.newInstance(MultiKey.class, 6);
      multiKeyArray0[0] = multiKey3;
      MultiKey<Object> multiKey4 = new MultiKey<Object>(multiKeyArray0);
      multiKeyArray0[1] = multiKey4;
      multiKeyArray0[2] = multiKey2;
      multiKeyArray0[3] = multiKey3;
      multiKeyArray0[4] = multiKey3;
      multiKeyArray0[5] = multiKey3;
      MultiKey<MultiKey<Object>> multiKey5 = new MultiKey<MultiKey<Object>>(multiKeyArray0, true);
      int int1 = multiKey5.hashCode();
      assertFalse(int1 == int0);
  }
}
