/*
 * This file was automatically generated by EvoSuite
 * Fri Oct 22 17:30:33 GMT 2021
 */

package org.apache.commons.collections4.keyvalue;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.lang.reflect.Array;
import org.apache.commons.collections4.keyvalue.MultiKey;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class MultiKey_ESTest extends MultiKey_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("org.apache.commons.collections4.keyvalue.MultiKey", "", "b6V9R :/G<Op", "");
      MultiKey<String> multiKey1 = new MultiKey<String>("zWj9rB,;[6\"!>W", (String) null);
      MultiKey<MultiKey<String>> multiKey2 = new MultiKey<MultiKey<String>>(multiKey0, multiKey1, multiKey1);
      multiKey2.toString();
      multiKey2.equals("zWj9rB,;[6\"!>W");
      multiKey0.size();
      Integer integer0 = new Integer(2214);
      Integer integer1 = new Integer(844);
      MultiKey<Object> multiKey3 = new MultiKey<Object>(integer0, multiKey1, integer1, "b6V9R :/G<Op", (Object) null);
      Integer integer2 = new Integer(1);
      MultiKey<Object> multiKey4 = new MultiKey<Object>(integer2, multiKey0);
      multiKey0.equals((Object) null);
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) "b6V9R :/G<Op";
      objectArray0[1] = (Object) multiKey3;
      objectArray0[2] = (Object) multiKey3;
      objectArray0[3] = (Object) "b6V9R :/G<Op";
      objectArray0[4] = (Object) integer2;
      objectArray0[5] = (Object) integer2;
      String string0 = multiKey3.toString();
      assertEquals("MultiKey[2214, MultiKey[zWj9rB,;[6\"!>W, null], 844, b6V9R :/G<Op, null]", string0);
      
      Object object0 = new Object();
      objectArray0[6] = object0;
      objectArray0[7] = (Object) integer1;
      MultiKey<Object> multiKey5 = new MultiKey<Object>(objectArray0, false);
      Object object1 = multiKey5.getKey(4);
      boolean boolean0 = multiKey3.equals(object1);
      boolean boolean1 = multiKey3.equals(objectArray0[2]);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("org.apache.commons.collections4.keyvalue.MultiKey", "", "b6V9R :/G<Op", "");
      MultiKey<MultiKey<String>> multiKey1 = new MultiKey<MultiKey<String>>(multiKey0, multiKey0, multiKey0);
      multiKey1.toString();
      Object object0 = new Object();
      boolean boolean0 = multiKey1.equals("zWj9rB,;[6\"!>W");
      multiKey0.size();
      Integer integer0 = new Integer(4);
      MultiKey<Object> multiKey2 = new MultiKey<Object>(integer0, "~ 3Q&A$", multiKey0, (Object) null, "~ 3Q&A$");
      String string0 = multiKey2.toString();
      assertEquals("MultiKey[4, ~ 3Q&A$, MultiKey[org.apache.commons.collections4.keyvalue.MultiKey, , b6V9R :/G<Op, ], null, ~ 3Q&A$]", string0);
      
      MultiKey<Integer>[] multiKeyArray0 = (MultiKey<Integer>[]) Array.newInstance(MultiKey.class, 4);
      MultiKey<Integer> multiKey3 = new MultiKey<Integer>(integer0, integer0, integer0, (Integer) null);
      multiKeyArray0[0] = multiKey3;
      Integer integer1 = new Integer(4);
      MultiKey<Integer> multiKey4 = new MultiKey<Integer>((Integer) null, (Integer) null, integer1, integer0, integer0);
      multiKeyArray0[1] = multiKey4;
      Integer[] integerArray0 = new Integer[0];
      MultiKey<Integer> multiKey5 = new MultiKey<Integer>(integerArray0, true);
      multiKeyArray0[2] = multiKey5;
      Integer integer2 = new Integer(4);
      Integer integer3 = new Integer((-3704));
      Integer integer4 = new Integer(1);
      MultiKey<Integer> multiKey6 = new MultiKey<Integer>(integer2, integer3, integer4, integer4);
      multiKeyArray0[3] = multiKey6;
      MultiKey<MultiKey<Integer>> multiKey7 = new MultiKey<MultiKey<Integer>>(multiKeyArray0);
      MultiKey<Object> multiKey8 = new MultiKey<Object>(multiKeyArray0);
      boolean boolean1 = multiKey7.equals(multiKey8);
      assertFalse(multiKey8.equals((Object)multiKey2));
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      MultiKey<Object> multiKey0 = new MultiKey<Object>("S", "S", "S", "S");
      Integer[] integerArray0 = new Integer[0];
      MultiKey<Integer> multiKey1 = new MultiKey<Integer>(integerArray0);
      int int0 = multiKey1.size();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("", "", "[KVef:Mfqdr", "[KVef:Mfqdr");
      multiKey0.toString();
      multiKey0.size();
      MultiKey<Object>[] multiKeyArray0 = (MultiKey<Object>[]) Array.newInstance(MultiKey.class, 0);
      MultiKey<MultiKey<Object>> multiKey1 = new MultiKey<MultiKey<Object>>(multiKeyArray0);
      MultiKey<Object>[] multiKeyArray1 = multiKey1.getKeys();
      assertNotSame(multiKeyArray1, multiKeyArray0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Integer[] integerArray0 = new Integer[5];
      Integer integer0 = new Integer(1);
      integerArray0[0] = integer0;
      Integer integer1 = new Integer(1);
      integerArray0[1] = integer1;
      Integer integer2 = new Integer((-4047));
      integerArray0[2] = integer2;
      Integer integer3 = new Integer((-1366));
      integerArray0[3] = integer3;
      Integer integer4 = new Integer((-1070));
      integerArray0[4] = integer4;
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integerArray0);
      String string0 = multiKey0.toString();
      assertEquals("MultiKey[1, 1, -4047, -1366, -1070]", string0);
      
      MultiKey<Integer> multiKey1 = new MultiKey<Integer>(integerArray0, true);
      boolean boolean0 = multiKey0.equals(multiKey1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Integer integer0 = new Integer(1142);
      MultiKey<Object> multiKey0 = new MultiKey<Object>(integer0, integer0);
      multiKey0.size();
      String[] stringArray0 = new String[6];
      stringArray0[0] = "";
      stringArray0[1] = "_";
      stringArray0[2] = "";
      stringArray0[3] = "U";
      stringArray0[4] = "";
      stringArray0[5] = "";
      MultiKey<String> multiKey1 = new MultiKey<String>(stringArray0);
      MultiKey<MultiKey<String>> multiKey2 = new MultiKey<MultiKey<String>>(multiKey1, multiKey1, multiKey1, multiKey1, multiKey1);
      Object object0 = multiKey2.getKey(0);
      boolean boolean0 = multiKey0.equals(object0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Object[] objectArray0 = new Object[4];
      MultiKey<Object> multiKey0 = new MultiKey<Object>(objectArray0, false);
      multiKey0.getKey(0);
      objectArray0[0] = null;
      Integer integer0 = new Integer(0);
      Integer integer1 = new Integer(1);
      MultiKey<Integer> multiKey1 = new MultiKey<Integer>(integer0, integer1, integer0, integer1);
      Integer integer2 = multiKey1.getKey(0);
      objectArray0[1] = (Object) integer2;
      Object object0 = multiKey0.getKey(1);
      assertNotNull(object0);
      
      objectArray0[2] = object0;
      Object object1 = new Object();
      objectArray0[3] = object1;
      MultiKey<Object> multiKey2 = new MultiKey<Object>(objectArray0);
      multiKey2.size();
      multiKey1.getKey(1);
      multiKey2.size();
      assertTrue(multiKey2.equals((Object)multiKey0));
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      MultiKey<Object> multiKey0 = null;
//      try {
        multiKey0 = new MultiKey<Object>((Object[]) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // The array of keys must not be null
//         //
//         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
//      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Object[] objectArray0 = new Object[4];
      Object object0 = new Object();
      objectArray0[0] = object0;
      boolean boolean0 = true;
      MultiKey<String> multiKey0 = null;
//      try {
        multiKey0 = new MultiKey<String>((String[]) null, true);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // The array of keys must not be null
//         //
//         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
//      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      String[] stringArray0 = new String[4];
      stringArray0[0] = "8jd_EMPM24}N\"Y^";
      stringArray0[1] = "";
      stringArray0[2] = "KKL}UFE6Tm\"&nDNf";
      stringArray0[3] = "";
      MultiKey<String> multiKey0 = new MultiKey<String>(stringArray0, false);
      multiKey0.toString();
      multiKey0.getKeys();
      Integer integer0 = new Integer(2);
      Integer integer1 = new Integer(0);
      MultiKey<Object> multiKey1 = new MultiKey<Object>("", "KKL}UFE6Tm\"&nDNf", "8jd_EMPM24}N\"Y^", "8jd_EMPM24}N\"Y^", (Object) null);
      multiKey1.getKey(0);
      MultiKey<Object> multiKey2 = new MultiKey<Object>(integer1, "");
      MultiKey<Object> multiKey3 = new MultiKey<Object>(integer0, integer0, "", multiKey2);
      multiKey3.getKeys();
      multiKey3.hashCode();
      MultiKey<Integer> multiKey4 = new MultiKey<Integer>(integer0, integer0, integer1, integer0, integer0);
      String string0 = multiKey4.toString();
      assertEquals("MultiKey[2, 2, 0, 2, 2]", string0);
      
      Object object0 = multiKey3.getKey(1);
      assertEquals(2, object0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Integer[] integerArray0 = new Integer[6];
      Integer integer0 = new Integer((-3552));
      integerArray0[0] = integer0;
      Integer integer1 = new Integer((int) integerArray0[0]);
      integerArray0[1] = integer1;
      int int0 = 72;
      Integer integer2 = new Integer(72);
      integerArray0[2] = integer2;
      Integer integer3 = new Integer(72);
      integerArray0[3] = integer3;
      Integer integer4 = new Integer(5);
      integerArray0[4] = integer4;
      Integer integer5 = new Integer(72);
      integerArray0[5] = integer5;
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integerArray0);
      int int1 = multiKey0.size();
      Integer integer6 = new Integer(1720);
      MultiKey<Object> multiKey1 = new MultiKey<Object>((Object[]) integerArray0, true);
      MultiKey<Object> multiKey2 = new MultiKey<Object>(integer6, int0, integer4, multiKey1);
      MultiKey<Object> multiKey3 = new MultiKey<Object>(multiKey2, "");
      MultiKey<MultiKey<Object>> multiKey4 = new MultiKey<MultiKey<Object>>(multiKey3, multiKey3, multiKey3);
      multiKey4.toString();
      MultiKey<String> multiKey5 = new MultiKey<String>("MultiKey[MultiKey[MultiKey[1720, 72, 5, MultiKey[-3552, -3552, 72, 72, 5, 72]], ], MultiKey[MultiKey[1720, 72, 5, MultiKey[-3552, -3552, 72, 72, 5, 72]], ], MultiKey[MultiKey[1720, 72, 5, MultiKey[-3552, -3552, 72, 72, 5, 72]], ]]", (String) null, "");
      multiKey5.toString();
      multiKey0.size();
      int int2 = multiKey5.hashCode();
      assertFalse(int2 == int1);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Object[] objectArray0 = new Object[8];
      String[] stringArray0 = new String[4];
      stringArray0[0] = "X%}epz";
      stringArray0[1] = "OX(J!aRFD";
      stringArray0[2] = "!R";
      stringArray0[3] = "-@c$@J";
      MultiKey<String> multiKey0 = new MultiKey<String>(stringArray0, true);
      multiKey0.getKey(0);
      objectArray0[0] = (Object) "X%}epz";
      int int0 = 3214;
      // Undeclared exception!
//      try { 
        multiKey0.getKey(3214);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 3214
//         //
//         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
//      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      MultiKey<Object>[] multiKeyArray0 = (MultiKey<Object>[]) Array.newInstance(MultiKey.class, 1);
      Integer integer0 = new Integer((-3083));
      Integer integer1 = new Integer(1307);
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integer0, integer0, integer1, integer1);
      // Undeclared exception!
//      try { 
        multiKey0.getKey((-480));
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // -480
//         //
//         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
//      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      String string0 = null;
      MultiKey<String> multiKey0 = new MultiKey<String>(" Pm", " Pm", "eW", (String) null, (String) null);
      multiKey0.hashCode();
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) "eW";
      objectArray0[1] = (Object) " Pm";
      objectArray0[2] = (Object) "eW";
      objectArray0[3] = (Object) "eW";
      objectArray0[4] = (Object) "eW";
      objectArray0[5] = (Object) null;
      objectArray0[6] = (Object) " Pm";
      MultiKey<Object> multiKey1 = new MultiKey<Object>(objectArray0);
      multiKey1.toString();
      multiKey1.toString();
      Object object0 = new Object();
      multiKey1.equals(object0);
      MultiKey<String> multiKey2 = new MultiKey<String>("eW", "MultiKey[eW,  Pm, eW, eW, eW, null,  Pm]", ")mOCJ/>RXMH5Y)=");
      // Undeclared exception!
//      try { 
        multiKey2.getKey((-1));
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // -1
//         //
//         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
//      }
  }
}
