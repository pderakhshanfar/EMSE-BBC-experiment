/*
 * This file was automatically generated by EvoSuite
 * Wed Oct 13 20:53:40 GMT 2021
 */

package org.apache.commons.collections4.keyvalue;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.lang.reflect.Array;
import org.apache.commons.collections4.keyvalue.MultiKey;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class MultiKey_ESTest extends MultiKey_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      MultiKey<String>[] multiKeyArray0 = (MultiKey<String>[]) Array.newInstance(MultiKey.class, 1);
      Integer integer0 = new Integer(3);
      MultiKey<Object> multiKey0 = new MultiKey<Object>(integer0, "", "", integer0);
      Object object0 = multiKey0.getKey(3);
      MultiKey<Object> multiKey1 = new MultiKey<Object>(multiKeyArray0);
      MultiKey<Object> multiKey2 = new MultiKey<Object>((Object) null, integer0, object0, multiKey1, "");
      MultiKey<MultiKey<Object>> multiKey3 = new MultiKey<MultiKey<Object>>(multiKey2, multiKey2);
      multiKey3.toString();
      multiKey2.toString();
      Integer integer1 = new Integer(3);
      MultiKey<Object> multiKey4 = new MultiKey<Object>(integer0, "", integer1);
      boolean boolean0 = multiKey3.equals(multiKey4);
      assertFalse(boolean0);
      
      Integer integer2 = new Integer((-1318));
      MultiKey<Integer> multiKey5 = new MultiKey<Integer>(integer1, integer0);
      multiKey5.toString();
      String string0 = multiKey5.toString();
      assertEquals("MultiKey[3, 3]", string0);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      Integer integer0 = new Integer(0);
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integer0, integer0);
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      Integer integer1 = new Integer((-444));
      Integer integer2 = new Integer(0);
      Integer integer3 = new Integer((-444));
      Integer integer4 = new Integer(0);
      MultiKey<Integer> multiKey1 = new MultiKey<Integer>(integer1, integer2, integer3, integer0, integer4);
      Object object0 = multiKey1.getKey(0);
      MultiKey<Object> multiKey2 = new MultiKey<Object>(object0, integer0, multiKey1);
      multiKey2.size();
      MultiKey<Object>[] multiKeyArray0 = (MultiKey<Object>[]) Array.newInstance(MultiKey.class, 2);
      multiKeyArray0[0] = multiKey2;
      multiKey2.toString();
      multiKeyArray0[1] = multiKey2;
      multiKey1.toString();
      multiKey2.toString();
      multiKey1.toString();
      MultiKey<MultiKey<Object>> multiKey3 = new MultiKey<MultiKey<Object>>(multiKeyArray0, false);
      multiKey2.toString();
      multiKey3.toString();
      multiKey3.getKeys();
      multiKey2.size();
      multiKey2.size();
      multiKey3.toString();
      String string0 = multiKey2.toString();
      assertEquals("MultiKey[-444, 0, MultiKey[-444, 0, -444, 0, 0]]", string0);
      
      MultiKey<String> multiKey4 = new MultiKey<String>("MultiKey[-444, 0, -444, 0, 0]", "MultiKey[MultiKey[-444, 0, MultiKey[-444, 0, -444, 0, 0]], MultiKey[-444, 0, MultiKey[-444, 0, -444, 0, 0]]]", "");
      multiKey4.size();
      boolean boolean0 = multiKey2.equals("MultiKey[-444, 0, MultiKey[-444, 0, -444, 0, 0]]");
      boolean boolean1 = multiKey2.equals(multiKey2);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      Object[] objectArray0 = new Object[9];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      Object object2 = new Object();
      MultiKey<Object> multiKey0 = new MultiKey<Object>((Object) null, object1, object2);
      multiKey0.getKey(0);
      objectArray0[2] = null;
      Object object3 = new Object();
      objectArray0[3] = object3;
      multiKey0.getKey(0);
      objectArray0[4] = null;
      Integer integer0 = new Integer((-3082));
      MultiKey<Integer> multiKey1 = new MultiKey<Integer>((Integer) null, (Integer) null, (Integer) null, (Integer) null, integer0);
      MultiKey<MultiKey<Integer>> multiKey2 = new MultiKey<MultiKey<Integer>>(multiKey1, multiKey1);
      // Undeclared exception!
//      try { 
        multiKey2.getKey((-3082));
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // -3082
//         //
//         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
//      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      String[] stringArray0 = new String[0];
      MultiKey<String> multiKey0 = new MultiKey<String>(stringArray0, false);
      int int0 = multiKey0.size();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      Object[] objectArray0 = null;
      MultiKey<Object> multiKey0 = null;
//      try {
        multiKey0 = new MultiKey<Object>((Object[]) null, false);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // The array of keys must not be null
//         //
//         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
//      }
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      Integer integer0 = new Integer(0);
      Integer integer1 = new Integer((-1044));
      Integer integer2 = new Integer(0);
      Integer integer3 = new Integer(0);
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integer0, integer1, integer2, integer3);
      MultiKey<String> multiKey1 = new MultiKey<String>("", "9P+}Lf^mV@IAX;7k`pX");
      multiKey1.toString();
      multiKey1.toString();
      multiKey1.toString();
      multiKey1.toString();
      MultiKey<String>[] multiKeyArray0 = (MultiKey<String>[]) Array.newInstance(MultiKey.class, 1);
      multiKeyArray0[0] = multiKey1;
      MultiKey<MultiKey<String>> multiKey2 = new MultiKey<MultiKey<String>>(multiKeyArray0);
      MultiKey<String> multiKey3 = multiKey2.getKey(0);
      assertSame(multiKey3, multiKey1);
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("{0b.4 }$7*2n?BV7Y9", "{0b.4 }$7*2n?BV7Y9", "{0b.4 }$7*2n?BV7Y9");
      multiKey0.size();
      multiKey0.equals("{0b.4 }$7*2n?BV7Y9");
      Integer integer0 = new Integer((-3020));
      Integer integer1 = new Integer(0);
      Integer integer2 = new Integer(1397);
      MultiKey<Integer> multiKey1 = new MultiKey<Integer>(integer0, integer1, integer2, (Integer) null);
      multiKey1.hashCode();
      multiKey0.toString();
      multiKey1.size();
      multiKey0.toString();
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) "MultiKey[{0b.4 }$7*2n?BV7Y9, {0b.4 }$7*2n?BV7Y9, {0b.4 }$7*2n?BV7Y9]";
      MultiKey<Object> multiKey2 = new MultiKey<Object>(objectArray0);
      Object[] objectArray1 = multiKey2.getKeys();
      assertNotSame(objectArray0, objectArray1);
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      MultiKey<Object> multiKey0 = new MultiKey<Object>(objectArray0);
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.getKeys();
      multiKey0.toString();
      multiKey0.toString();
      MultiKey<MultiKey<Object>> multiKey1 = null;
//      try {
        multiKey1 = new MultiKey<MultiKey<Object>>((MultiKey<Object>[]) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // The array of keys must not be null
//         //
//         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
//      }
  }

  @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      MultiKey<Object>[] multiKeyArray0 = (MultiKey<Object>[]) Array.newInstance(MultiKey.class, 3);
      Object object0 = new Object();
      Object object1 = new Object();
      MultiKey<Object> multiKey0 = new MultiKey<Object>(object0, (Object) null, object1, object1);
      multiKeyArray0[0] = multiKey0;
      Object object2 = new Object();
      MultiKey<String> multiKey1 = new MultiKey<String>("org.apache.commons.collections4.keyvalue.MultiKey", "org.apache.commons.collections4.keyvalue.MultiKey", "");
      MultiKey<String> multiKey2 = new MultiKey<String>("", "org.apache.commons.collections4.keyvalue.MultiKey", "");
      MultiKey<Object> multiKey3 = new MultiKey<Object>(object2, (Object) null, multiKey1, multiKey2, "");
      multiKeyArray0[1] = multiKey3;
      String[] stringArray0 = new String[7];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "";
      stringArray0[3] = "";
      stringArray0[4] = "";
      stringArray0[5] = "";
      stringArray0[6] = "";
      MultiKey<String> multiKey4 = new MultiKey<String>(stringArray0);
      MultiKey<Object> multiKey5 = new MultiKey<Object>("", multiKey4, "");
      multiKeyArray0[2] = multiKey5;
      MultiKey<MultiKey<Object>> multiKey6 = new MultiKey<MultiKey<Object>>(multiKeyArray0, false);
      Integer integer0 = new Integer(0);
      multiKey6.equals(integer0);
      multiKey5.toString();
      Integer integer1 = new Integer(0);
      Integer integer2 = new Integer(0);
      Integer integer3 = new Integer(0);
      MultiKey<Integer> multiKey7 = new MultiKey<Integer>(integer1, integer2, integer2, integer3);
      multiKey7.hashCode();
  }

  @Test(timeout = 4000)
  public void test9()  throws Throwable  {
      Integer integer0 = new Integer(3531);
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integer0, (Integer) null, integer0, (Integer) null, (Integer) null);
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.hashCode();
      MultiKey<String> multiKey1 = new MultiKey<String>("0 T'", "0 T'", "");
      multiKey1.toString();
      multiKey1.toString();
      multiKey1.toString();
      multiKey1.hashCode();
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) "";
      objectArray0[1] = (Object) "MultiKey[0 T', 0 T', ]";
      objectArray0[2] = (Object) null;
      MultiKey<Object> multiKey2 = new MultiKey<Object>(objectArray0);
      // Undeclared exception!
//      try { 
        multiKey2.getKey(3531);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 3531
//         //
//         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
//      }
  }
}
