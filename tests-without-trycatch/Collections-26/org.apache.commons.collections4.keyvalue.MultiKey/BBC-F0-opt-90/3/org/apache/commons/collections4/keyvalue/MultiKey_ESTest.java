/*
 * This file was automatically generated by EvoSuite
 * Wed Oct 13 20:47:36 GMT 2021
 */

package org.apache.commons.collections4.keyvalue;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.lang.reflect.Array;
import org.apache.commons.collections4.keyvalue.MultiKey;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class MultiKey_ESTest extends MultiKey_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("Yh}R&+dNB63MP#{ZHl", "");
      MultiKey<String> multiKey1 = new MultiKey<String>("", "(~jOuxy\"Z18K@RA/", "U9a}-w\"x%vU@gU6_WP");
      MultiKey<MultiKey<String>> multiKey2 = new MultiKey<MultiKey<String>>(multiKey0, multiKey1, multiKey0, multiKey0);
      String[] stringArray0 = new String[0];
      MultiKey<String> multiKey3 = new MultiKey<String>(stringArray0, true);
      String string0 = multiKey3.toString();
      assertEquals("MultiKey[]", string0);
      
      MultiKey<Object> multiKey4 = new MultiKey<Object>("", "");
      Integer integer0 = new Integer((-416));
      MultiKey<Object> multiKey5 = new MultiKey<Object>(integer0, (Object) null);
      boolean boolean0 = multiKey0.equals(multiKey0);
      assertTrue(boolean0);
      assertFalse(multiKey0.equals((Object)multiKey3));
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("eg", "", "eg");
      MultiKey<MultiKey<String>> multiKey1 = new MultiKey<MultiKey<String>>(multiKey0, multiKey0, multiKey0, multiKey0);
      multiKey1.size();
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) multiKey0;
      objectArray0[1] = (Object) "";
      objectArray0[2] = (Object) multiKey1;
      MultiKey<Object> multiKey2 = new MultiKey<Object>(objectArray0, true);
      multiKey2.getKeys();
      MultiKey<String> multiKey3 = new MultiKey<String>("eg", "", "eg");
      boolean boolean0 = multiKey0.equals(multiKey3);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Integer integer0 = new Integer((-1));
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>((Integer) null, integer0);
      MultiKey<String>[] multiKeyArray0 = (MultiKey<String>[]) Array.newInstance(MultiKey.class, 0);
      MultiKey<MultiKey<String>> multiKey1 = new MultiKey<MultiKey<String>>(multiKeyArray0);
      multiKey1.size();
      MultiKey<Object> multiKey2 = new MultiKey<Object>((Object[]) multiKeyArray0, false);
      multiKey2.getKeys();
      Integer integer1 = new Integer((-1368));
      Integer integer2 = new Integer(1);
      MultiKey<Integer> multiKey3 = new MultiKey<Integer>(integer2, (Integer) null);
      MultiKey<String> multiKey4 = new MultiKey<String>("", "1>g,N)OT-1.nkj2GFm", "nYcGqmg)>", "M?N [`?:C", "hg<]5d#OuIs");
      multiKey4.toString();
      multiKey4.toString();
      multiKey2.toString();
      MultiKey<String> multiKey5 = new MultiKey<String>("hg<]5d#OuIs", "", (String) null, "1>g,N)OT-1.nkj2GFm", "hg<]5d#OuIs");
      boolean boolean0 = multiKey4.equals(multiKey5);
      assertFalse(boolean0);
      
      multiKey5.toString();
      multiKey2.toString();
      MultiKey<MultiKey<Object>> multiKey6 = new MultiKey<MultiKey<Object>>((MultiKey<Object>) null, (MultiKey<Object>) null, multiKey2, (MultiKey<Object>) null, multiKey2);
      String string0 = multiKey6.toString();
      assertEquals("MultiKey[null, null, MultiKey[], null, MultiKey[]]", string0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Object object0 = new Object();
      MultiKey<Object> multiKey0 = new MultiKey<Object>(object0, object0, object0, object0, object0);
      MultiKey<String> multiKey1 = new MultiKey<String>("", "", "");
      MultiKey<String> multiKey2 = new MultiKey<String>("", "zuVf}\"_");
      MultiKey<MultiKey<String>> multiKey3 = new MultiKey<MultiKey<String>>(multiKey1, multiKey2, multiKey2, multiKey2, multiKey1);
      MultiKey<MultiKey<String>> multiKey4 = new MultiKey<MultiKey<String>>(multiKey1, multiKey2, multiKey1, multiKey2, multiKey1);
      String string0 = multiKey4.toString();
      assertEquals("MultiKey[MultiKey[, , ], MultiKey[, zuVf}\"_], MultiKey[, , ], MultiKey[, zuVf}\"_], MultiKey[, , ]]", string0);
      
      boolean boolean0 = multiKey4.equals(multiKey3);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Object[] objectArray0 = new Object[7];
      MultiKey<MultiKey<Object>> multiKey0 = null;
//      try {
        multiKey0 = new MultiKey<MultiKey<Object>>((MultiKey<Object>[]) null, false);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // The array of keys must not be null
//         //
//         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
//      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Integer integer0 = new Integer((-775));
      Integer integer1 = new Integer(2395);
      int int0 = 0;
      Integer integer2 = new Integer(0);
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integer1, (Integer) null, (Integer) null, integer2);
      MultiKey<Object> multiKey1 = new MultiKey<Object>(integer0, integer0, multiKey0);
      multiKey1.toString();
      MultiKey<String> multiKey2 = null;
//      try {
        multiKey2 = new MultiKey<String>((String[]) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // The array of keys must not be null
//         //
//         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
//      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Object[] objectArray0 = new Object[6];
      Object object0 = new Object();
      objectArray0[0] = object0;
      MultiKey<Object> multiKey0 = new MultiKey<Object>(objectArray0);
      multiKey0.getKey(1);
      objectArray0[1] = null;
      Object object1 = new Object();
      objectArray0[2] = object1;
      Object object2 = new Object();
      objectArray0[3] = object2;
      Integer integer0 = new Integer(0);
      MultiKey<Integer> multiKey1 = new MultiKey<Integer>(integer0, integer0);
      multiKey1.toString();
      // Undeclared exception!
//      try { 
        multiKey1.getKey((-1));
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // -1
//         //
//         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
//      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Integer integer0 = new Integer((-4180));
      Integer integer1 = new Integer((-4180));
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integer0, integer1);
      Integer[] integerArray0 = new Integer[6];
      integerArray0[0] = integer0;
      integerArray0[1] = integer0;
      integerArray0[2] = integer1;
      integerArray0[3] = integer1;
      integerArray0[4] = integer0;
      integerArray0[5] = integer0;
      MultiKey<Integer> multiKey1 = new MultiKey<Integer>(integerArray0, true);
      MultiKey<MultiKey<Integer>> multiKey2 = new MultiKey<MultiKey<Integer>>(multiKey0, multiKey0, multiKey0, multiKey1);
      MultiKey<Integer> multiKey3 = multiKey2.getKey(0);
      assertSame(multiKey0, multiKey3);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("", "", "", "");
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.size();
      MultiKey<String>[] multiKeyArray0 = (MultiKey<String>[]) Array.newInstance(MultiKey.class, 4);
      multiKeyArray0[0] = multiKey0;
      multiKeyArray0[1] = multiKey0;
      multiKeyArray0[2] = multiKey0;
      multiKeyArray0[3] = multiKey0;
      MultiKey<MultiKey<String>> multiKey1 = new MultiKey<MultiKey<String>>(multiKeyArray0, false);
      Integer integer0 = new Integer(4);
      multiKey1.equals(integer0);
      multiKey1.size();
      MultiKey<Object> multiKey2 = new MultiKey<Object>(multiKey0, (Object) null, multiKey0, integer0);
      multiKey0.toString();
      multiKey2.toString();
      Integer integer1 = new Integer(4);
      Integer integer2 = new Integer((-3081));
      MultiKey<Integer> multiKey3 = new MultiKey<Integer>(integer1, integer2, integer0);
      multiKey0.toString();
      multiKey0.toString();
      multiKey3.equals(multiKey1);
      multiKey2.hashCode();
      // Undeclared exception!
//      try { 
        multiKey0.getKey((-48));
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // -48
//         //
//         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
//      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      String[] stringArray0 = new String[5];
      stringArray0[0] = "&o";
      stringArray0[1] = "";
      stringArray0[2] = "";
      stringArray0[3] = "Ukg1'T!Udva5";
      stringArray0[4] = "~/1>e<(e:\"<";
      MultiKey<String> multiKey0 = new MultiKey<String>(stringArray0, false);
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.getKeys();
      Integer integer0 = new Integer((-513));
      Integer integer1 = new Integer((-1));
      MultiKey<Integer> multiKey1 = new MultiKey<Integer>(integer0, integer0, integer0, integer1);
      // Undeclared exception!
//      try { 
        multiKey1.getKey((-1));
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // -1
//         //
//         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
//      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Integer integer0 = new Integer(0);
      Integer integer1 = new Integer(0);
      MultiKey<Object> multiKey0 = new MultiKey<Object>(integer0, integer0, "?14p>m~", integer0, integer1);
      MultiKey<MultiKey<Object>> multiKey1 = new MultiKey<MultiKey<Object>>(multiKey0, multiKey0, multiKey0);
      multiKey1.toString();
      multiKey1.getKeys();
      Integer[] integerArray0 = new Integer[2];
      integerArray0[0] = integer1;
      integerArray0[1] = integer0;
      MultiKey<Integer> multiKey2 = new MultiKey<Integer>(integerArray0);
      multiKey2.hashCode();
      multiKey2.hashCode();
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Object[] objectArray0 = new Object[3];
      MultiKey<Integer>[] multiKeyArray0 = (MultiKey<Integer>[]) Array.newInstance(MultiKey.class, 5);
      int int0 = (-3055);
      Integer integer0 = new Integer((-3055));
      Integer integer1 = new Integer(0);
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integer0, integer1);
      multiKeyArray0[0] = multiKey0;
      Integer integer2 = new Integer(0);
      MultiKey<Integer> multiKey1 = new MultiKey<Integer>(integer0, integer2);
      multiKeyArray0[1] = multiKey1;
      Integer integer3 = new Integer(0);
      Integer integer4 = new Integer((-3055));
      MultiKey<Integer> multiKey2 = new MultiKey<Integer>(integer3, integer4);
      multiKeyArray0[2] = multiKey2;
      Integer integer5 = new Integer((-928));
      Integer integer6 = new Integer((-3055));
      MultiKey<Integer> multiKey3 = new MultiKey<Integer>((Integer) null, integer5, integer1, integer6, integer6);
      multiKeyArray0[3] = multiKey3;
      Integer integer7 = new Integer((-3055));
      int int1 = 699;
      Integer integer8 = new Integer(699);
      MultiKey<Integer> multiKey4 = new MultiKey<Integer>(integer7, integer8, integer2);
      multiKeyArray0[4] = multiKey4;
      MultiKey<MultiKey<Integer>> multiKey5 = new MultiKey<MultiKey<Integer>>(multiKeyArray0);
      // Undeclared exception!
//      try { 
        multiKey5.getKey((-3055));
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // -3055
//         //
//         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
//      }
  }
}
