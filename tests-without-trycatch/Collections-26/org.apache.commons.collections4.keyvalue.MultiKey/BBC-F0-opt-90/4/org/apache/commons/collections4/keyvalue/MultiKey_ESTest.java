/*
 * This file was automatically generated by EvoSuite
 * Wed Oct 13 20:48:04 GMT 2021
 */

package org.apache.commons.collections4.keyvalue;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.lang.reflect.Array;
import org.apache.commons.collections4.keyvalue.MultiKey;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class MultiKey_ESTest extends MultiKey_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      Integer integer0 = new Integer(1);
      Integer integer1 = new Integer(4);
      MultiKey<Object> multiKey0 = new MultiKey<Object>(integer0, integer0);
      MultiKey<Object> multiKey1 = new MultiKey<Object>(integer1, (Object) null, multiKey0, integer0);
      Integer integer2 = new Integer(1367);
      MultiKey<Object>[] multiKeyArray0 = (MultiKey<Object>[]) Array.newInstance(MultiKey.class, 0);
      MultiKey<MultiKey<Object>> multiKey2 = new MultiKey<MultiKey<Object>>(multiKeyArray0);
      multiKey2.size();
      String string0 = multiKey1.toString();
      assertEquals("MultiKey[4, null, MultiKey[1, 1], 1]", string0);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      MultiKey<String> multiKey0 = null;
//      try {
        multiKey0 = new MultiKey<String>((String[]) null, true);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // The array of keys must not be null
//         //
//         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
//      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      int int0 = (-1351);
      Integer integer0 = new Integer((-1351));
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integer0, integer0, integer0);
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.size();
      Object[] objectArray0 = new Object[0];
      MultiKey<Object> multiKey1 = new MultiKey<Object>(objectArray0);
      multiKey0.toString();
      multiKey1.getKeys();
      int int1 = 805;
      multiKey1.toString();
      // Undeclared exception!
//      try { 
        multiKey0.getKey(805);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 805
//         //
//         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
//      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      String string0 = "";
      MultiKey<String> multiKey0 = new MultiKey<String>("", "org.apache.commons.collections4.keyvalue.MultiKey", "", "org.apache.commons.collections4.keyvalue.MultiKey", "org.apache.commons.collections4.keyvalue.MultiKey");
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.size();
      MultiKey<Object> multiKey1 = null;
//      try {
        multiKey1 = new MultiKey<Object>((Object[]) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // The array of keys must not be null
//         //
//         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
//      }
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      Integer[] integerArray0 = new Integer[0];
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integerArray0);
      int int0 = (-422);
      Integer integer0 = new Integer((-422));
      multiKey0.equals(integer0);
      String string0 = "MultiKey";
      MultiKey<Object> multiKey1 = new MultiKey<Object>((Object[]) integerArray0, false);
      // Undeclared exception!
//      try { 
        multiKey1.getKey((-133));
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // -133
//         //
//         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
//      }
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      String[] stringArray0 = new String[1];
      stringArray0[0] = "N@m{Xvf> '!`";
      MultiKey<String> multiKey0 = new MultiKey<String>(stringArray0, true);
      MultiKey<String> multiKey1 = new MultiKey<String>("N@m{Xvf> '!`", "N@m{Xvf> '!`");
      multiKey0.toString();
      multiKey1.toString();
      multiKey1.toString();
      multiKey1.toString();
      MultiKey<MultiKey<String>> multiKey2 = new MultiKey<MultiKey<String>>(multiKey0, multiKey0, multiKey1);
      multiKey2.toString();
      multiKey2.toString();
      multiKey2.toString();
      multiKey2.hashCode();
      multiKey0.toString();
      MultiKey<Object> multiKey3 = new MultiKey<Object>((Object[]) stringArray0, false);
      multiKey3.toString();
      multiKey3.toString();
      multiKey3.getKeys();
      multiKey3.toString();
      multiKey0.getKeys();
      multiKey3.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey3.toString();
      multiKey0.getKey(0);
      multiKey3.hashCode();
      Integer integer0 = new Integer(2943);
      Integer integer1 = new Integer((-2486));
      Integer integer2 = new Integer((-2486));
      MultiKey<Integer> multiKey4 = new MultiKey<Integer>(integer0, integer0, integer0, integer1, integer2);
      int int0 = multiKey4.size();
      assertEquals(5, int0);
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      Integer integer0 = new Integer(4585);
      Integer integer1 = new Integer(1570);
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integer0, integer1, integer0, integer0, (Integer) null);
      Integer integer2 = new Integer(1570);
      MultiKey<Object> multiKey1 = new MultiKey<Object>(multiKey0, integer2, (Object) null, integer1);
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) integer2;
      multiKey1.toString();
      multiKey1.toString();
      multiKey1.toString();
      multiKey0.toString();
      MultiKey<Object> multiKey2 = new MultiKey<Object>(objectArray0);
      multiKey1.toString();
      multiKey2.toString();
      MultiKey<MultiKey<Object>> multiKey3 = new MultiKey<MultiKey<Object>>(multiKey1, multiKey1, multiKey2);
      multiKey1.toString();
      multiKey0.toString();
      multiKey3.equals(multiKey1);
      multiKey0.toString();
      multiKey0.toString();
      MultiKey<MultiKey<Integer>> multiKey4 = new MultiKey<MultiKey<Integer>>(multiKey0, multiKey0);
      multiKey4.size();
      multiKey0.hashCode();
      // Undeclared exception!
//      try { 
        multiKey2.getKey(688);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 688
//         //
//         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
//      }
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      Object[] objectArray0 = new Object[6];
      MultiKey<String> multiKey0 = new MultiKey<String>("", "nFI.8v!nF\"O]", "b+HvQfIBQ0y`8dMX");
      int int0 = 0;
      multiKey0.getKey(0);
      objectArray0[0] = (Object) "";
      MultiKey<Object> multiKey1 = new MultiKey<Object>((Object) null, (Object) null, "nFI.8v!nF\"O]");
      multiKey1.getKey(0);
      objectArray0[1] = null;
      MultiKey<Object> multiKey2 = new MultiKey<Object>(objectArray0, true);
      MultiKey<MultiKey<Object>> multiKey3 = new MultiKey<MultiKey<Object>>(multiKey1, multiKey1, multiKey1, multiKey2, multiKey1);
      MultiKey<Object> multiKey4 = multiKey3.getKey(0);
      objectArray0[2] = (Object) multiKey4;
      multiKey4.getKey(0);
      objectArray0[3] = null;
      multiKey1.toString();
      multiKey0.toString();
      // Undeclared exception!
//      try { 
        multiKey4.getKey((-547));
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // -547
//         //
//         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
//      }
  }

  @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      MultiKey<Integer>[] multiKeyArray0 = (MultiKey<Integer>[]) Array.newInstance(MultiKey.class, 8);
      Integer integer0 = new Integer(2);
      Integer integer1 = new Integer(3377);
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integer0, (Integer) null, integer1, integer0);
      multiKeyArray0[0] = multiKey0;
      Integer integer2 = new Integer(3377);
      MultiKey<Integer> multiKey1 = new MultiKey<Integer>((Integer) null, integer2, (Integer) null);
      multiKeyArray0[1] = multiKey1;
      Integer integer3 = new Integer(151);
      Integer integer4 = new Integer(2);
      MultiKey<Integer> multiKey2 = new MultiKey<Integer>((Integer) null, integer3, (Integer) null, integer4);
      multiKeyArray0[2] = multiKey2;
      MultiKey<Integer> multiKey3 = new MultiKey<Integer>(integer4, (Integer) null);
      multiKeyArray0[3] = multiKey3;
      Integer integer5 = new Integer(2);
      Integer integer6 = new Integer(2);
      Integer integer7 = new Integer(2);
      MultiKey<Integer> multiKey4 = new MultiKey<Integer>(integer5, integer6, integer4, (Integer) null, integer7);
      multiKeyArray0[4] = multiKey4;
      Integer integer8 = new Integer(2);
      MultiKey<Integer> multiKey5 = new MultiKey<Integer>(integer0, integer8, integer5, integer2);
      multiKeyArray0[5] = multiKey5;
      Integer integer9 = new Integer(3377);
      MultiKey<Integer> multiKey6 = new MultiKey<Integer>(integer4, integer9, integer2, integer3, (Integer) null);
      multiKeyArray0[6] = multiKey6;
      Integer integer10 = new Integer(151);
      MultiKey<Integer> multiKey7 = new MultiKey<Integer>(integer10, integer3);
      multiKeyArray0[7] = multiKey7;
      MultiKey<MultiKey<Integer>> multiKey8 = new MultiKey<MultiKey<Integer>>(multiKeyArray0);
      int int0 = multiKey8.size();
      assertEquals(8, int0);
  }

  @Test(timeout = 4000)
  public void test9()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("", "", "", "");
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) "";
      objectArray0[1] = (Object) multiKey0;
      objectArray0[2] = (Object) multiKey0;
      objectArray0[3] = (Object) "";
      objectArray0[4] = (Object) "";
      multiKey0.toString();
      MultiKey<Object> multiKey1 = new MultiKey<Object>(objectArray0, true);
      multiKey1.hashCode();
      multiKey1.toString();
      multiKey1.hashCode();
      multiKey0.equals(objectArray0[1]);
      multiKey1.hashCode();
      multiKey0.toString();
      int int0 = multiKey0.size();
      assertEquals(4, int0);
  }
}
