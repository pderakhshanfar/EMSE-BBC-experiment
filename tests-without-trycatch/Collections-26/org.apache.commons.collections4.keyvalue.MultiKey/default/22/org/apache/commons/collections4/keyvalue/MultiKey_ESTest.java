/*
 * This file was automatically generated by EvoSuite
 * Thu Jul 29 21:40:57 GMT 2021
 */

package org.apache.commons.collections4.keyvalue;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.lang.reflect.Array;
import org.apache.commons.collections4.keyvalue.MultiKey;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class MultiKey_ESTest extends MultiKey_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("-", "-", "-", "-");
      boolean boolean0 = multiKey0.equals(multiKey0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("-", (String) null, "-", "A-BHbn", "-");
      MultiKey<String> multiKey1 = new MultiKey<String>((String) null, (String) null, (String) null, "", "-");
      multiKey1.getKey(1);
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = null;
      objectArray0[1] = (Object) "A-BHbn";
      MultiKey<Object> multiKey2 = new MultiKey<Object>(objectArray0, true);
      MultiKey<Object> multiKey3 = new MultiKey<Object>(multiKey1, (Object) null);
      MultiKey<MultiKey<Object>> multiKey4 = new MultiKey<MultiKey<Object>>(multiKey2, multiKey2, multiKey2, multiKey2, multiKey3);
      multiKey4.toString();
      boolean boolean0 = multiKey1.equals(objectArray0[1]);
      assertFalse(boolean0);
      
      multiKey2.getKeys();
      String[] stringArray0 = new String[0];
      MultiKey<String> multiKey5 = new MultiKey<String>(stringArray0);
      multiKey1.toString();
      MultiKey<MultiKey<String>> multiKey6 = new MultiKey<MultiKey<String>>(multiKey1, multiKey0, multiKey0, multiKey1);
      multiKey6.toString();
      MultiKey<String> multiKey7 = new MultiKey<String>(stringArray0, true);
      MultiKey<MultiKey<String>> multiKey8 = new MultiKey<MultiKey<String>>(multiKey7, multiKey7, multiKey0);
      multiKey8.toString();
      multiKey8.size();
      String string0 = multiKey2.toString();
      assertEquals("MultiKey[null, A-BHbn]", string0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      MultiKey<Object> multiKey0 = null;
//      try {
        multiKey0 = new MultiKey<Object>((Object[]) null, true);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // The array of keys must not be null
//         //
//         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
//      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Integer integer0 = new Integer(1711);
      Integer integer1 = new Integer((-1606));
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integer0, integer0, integer0, integer0, integer1);
      multiKey0.toString();
      MultiKey<Object> multiKey1 = new MultiKey<Object>(multiKey0, integer1, multiKey0);
      String string0 = multiKey1.toString();
      assertEquals("MultiKey[MultiKey[1711, 1711, 1711, 1711, -1606], -1606, MultiKey[1711, 1711, 1711, 1711, -1606]]", string0);
      
      multiKey1.hashCode();
      boolean boolean0 = multiKey1.equals(integer1);
      assertFalse(boolean0);
      
      MultiKey<String> multiKey2 = new MultiKey<String>("", "", "sa'yHx", "sa'yHx", "");
      MultiKey<String> multiKey3 = new MultiKey<String>("", "", "_B$WK?5^^K(\"", "MultiKey[1711, 1711, 1711, 1711, -1606]");
      Object object0 = new Object();
      Object object1 = new Object();
      MultiKey<Object> multiKey4 = new MultiKey<Object>(object0, object1, (Object) null);
      boolean boolean1 = multiKey3.equals(multiKey4);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("78b5+4oQ", "78b5+4oQ");
      MultiKey<MultiKey<String>> multiKey1 = new MultiKey<MultiKey<String>>(multiKey0, multiKey0, multiKey0, multiKey0, multiKey0);
      boolean boolean0 = multiKey1.equals(multiKey0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      MultiKey<Object> multiKey0 = null;
//      try {
        multiKey0 = new MultiKey<Object>((Object[]) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // The array of keys must not be null
//         //
//         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
//      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("3RF9*UeV]B*%", "tq9=l7DTcFzP04I", "L");
      multiKey0.toString();
      multiKey0.size();
      Integer integer0 = new Integer(3);
      Object object0 = new Object();
      Integer integer1 = new Integer(3);
      MultiKey<String> multiKey1 = new MultiKey<String>("L", "org.apache.commons.collections4.keyvalue.MultiKey", "3RF9*UeV]B*%", "");
      multiKey1.getKey(3);
      Object object1 = new Object();
      MultiKey<Object> multiKey2 = new MultiKey<Object>(integer0, object0, integer1, "", object1);
      Object[] objectArray0 = multiKey2.getKeys();
      assertEquals(5, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      String string0 = "";
      String string1 = null;
      String string2 = "2p.n?)dDk.<Fe86J'H";
      MultiKey<String> multiKey0 = new MultiKey<String>("", "Kjt-MC$2,;#$Pf#;e", (String) null, "2p.n?)dDk.<Fe86J'H");
      multiKey0.toString();
      multiKey0.toString();
      int int0 = 1899;
      Integer integer0 = new Integer(1899);
      MultiKey<Integer> multiKey1 = new MultiKey<Integer>(integer0, integer0, integer0, integer0);
      multiKey1.toString();
      multiKey1.toString();
      multiKey1.toString();
      multiKey0.toString();
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) multiKey1;
      Object object0 = new Object();
      objectArray0[1] = object0;
      objectArray0[2] = (Object) "";
      MultiKey<Object>[] multiKeyArray0 = (MultiKey<Object>[]) Array.newInstance(MultiKey.class, 7);
      Object object1 = new Object();
      MultiKey<String> multiKey2 = new MultiKey<String>("MultiKey[1899, 1899, 1899, 1899]", "", "MultiKey[1899, 1899, 1899, 1899]", "MultiKey[1899, 1899, 1899, 1899]", "MultiKey[, Kjt-MC$2,;#$Pf#;e, null, 2p.n?)dDk.<Fe86J'H]");
      MultiKey<Object> multiKey3 = new MultiKey<Object>(multiKey2, objectArray0[0]);
      Integer integer1 = new Integer(1899);
      MultiKey<Object> multiKey4 = new MultiKey<Object>(objectArray0[0], object1, multiKey3, "MultiKey[, Kjt-MC$2,;#$Pf#;e, null, 2p.n?)dDk.<Fe86J'H]", integer1);
      multiKeyArray0[0] = multiKey4;
      MultiKey<Object> multiKey5 = new MultiKey<Object>("MultiKey[1899, 1899, 1899, 1899]", multiKey0, multiKey1);
      multiKeyArray0[1] = multiKey5;
      MultiKey<Object> multiKey6 = new MultiKey<Object>(multiKey2, (Object) null);
      multiKeyArray0[2] = multiKey6;
      MultiKey<String> multiKey7 = new MultiKey<String>("MultiKey[, Kjt-MC$2,;#$Pf#;e, null, 2p.n?)dDk.<Fe86J'H]", "The array of keys must not be null", "", "Kjt-MC$2,;#$Pf#;e", "");
      MultiKey<Object> multiKey8 = new MultiKey<Object>("2p.n?)dDk.<Fe86J'H", integer0, multiKey7, "The array of keys must not be null", objectArray0[0]);
      // Undeclared exception!
//      try { 
        multiKey8.getKey((-2207));
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // -2207
//         //
//         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
//      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("", "", "");
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.getKey(0);
      Object object0 = new Object();
      MultiKey<Object> multiKey1 = new MultiKey<Object>("", object0);
      multiKey1.toString();
      multiKey1.toString();
      multiKey1.toString();
      multiKey1.hashCode();
      Integer integer0 = new Integer(0);
      Integer integer1 = new Integer(3369);
      MultiKey<Integer> multiKey2 = new MultiKey<Integer>(integer0, integer0, integer1, integer1);
      multiKey2.toString();
      multiKey2.hashCode();
      multiKey0.hashCode();
      multiKey0.size();
      multiKey2.getKey(3);
      // Undeclared exception!
//      try { 
        multiKey2.getKey(1567);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 1567
//         //
//         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
//      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Integer integer0 = new Integer(0);
      Integer integer1 = new Integer(318);
      Integer integer2 = new Integer(0);
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integer0, integer0, integer1, integer2);
      String string0 = multiKey0.toString();
      assertEquals("MultiKey[0, 0, 318, 0]", string0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      MultiKey<MultiKey<Object>> multiKey0 = new MultiKey<MultiKey<Object>>((MultiKey<Object>) null, (MultiKey<Object>) null, (MultiKey<Object>) null, (MultiKey<Object>) null);
      assertEquals(4, multiKey0.size());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("", "");
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) multiKey0;
      objectArray0[1] = (Object) "";
      objectArray0[2] = (Object) "";
      Object object0 = new Object();
      objectArray0[3] = object0;
      objectArray0[4] = (Object) multiKey0;
      objectArray0[5] = (Object) multiKey0;
      objectArray0[6] = (Object) multiKey0;
      objectArray0[7] = (Object) "";
      objectArray0[8] = (Object) multiKey0;
      MultiKey<Object> multiKey1 = new MultiKey<Object>(objectArray0);
      multiKey1.toString();
      MultiKey<MultiKey<Object>> multiKey2 = new MultiKey<MultiKey<Object>>(multiKey1, multiKey1, multiKey1, multiKey1, multiKey1);
      multiKey2.toString();
      boolean boolean0 = multiKey2.equals("");
      boolean boolean1 = multiKey0.equals(objectArray0[0]);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Object[] objectArray0 = new Object[5];
      MultiKey<Object> multiKey0 = new MultiKey<Object>(objectArray0);
      assertEquals(5, multiKey0.size());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("", "");
      int int0 = multiKey0.size();
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>((String) null, (String) null);
      boolean boolean0 = multiKey0.equals((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      MultiKey<Object> multiKey0 = new MultiKey<Object>(objectArray0);
      multiKey0.toString();
      String[] stringArray0 = new String[3];
      multiKey0.toString();
      stringArray0[0] = "";
      multiKey0.toString();
      stringArray0[1] = "";
      multiKey0.toString();
      stringArray0[2] = "gC%phQ@BG(G}$F.1n";
      multiKey0.toString();
      MultiKey<String> multiKey1 = new MultiKey<String>(stringArray0, true);
      multiKey1.toString();
      multiKey1.size();
      multiKey0.getKeys();
      multiKey0.size();
      multiKey1.equals("gC%phQ@BG(G}$F.1n");
      multiKey0.toString();
      // Undeclared exception!
//      try { 
        multiKey0.getKey(3);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 3
//         //
//         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
//      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>((String) null, (String) null);
      String string0 = multiKey0.toString();
      assertEquals("MultiKey[null, null]", string0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>(".Jwen%TfxyV Mnm@", ".Jwen%TfxyV Mnm@");
      assertEquals(2, multiKey0.size());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("v", "v");
      multiKey0.hashCode();
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("r/", "r/");
      // Undeclared exception!
//      try { 
        multiKey0.getKey((-3209));
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // -3209
//         //
//         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
//      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>((String) null, (String) null, (String) null, (String) null, (String) null);
      assertEquals(5, multiKey0.size());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("r/", "r/", "r/");
      assertEquals(3, multiKey0.size());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Integer integer0 = new Integer(0);
      Integer integer1 = new Integer(0);
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integer0, integer1, integer1);
      multiKey0.toString();
      MultiKey<MultiKey<Integer>> multiKey1 = new MultiKey<MultiKey<Integer>>(multiKey0, multiKey0);
      Object object0 = new Object();
      Integer integer2 = new Integer(0);
      MultiKey<Object> multiKey2 = new MultiKey<Object>(object0, integer0, integer0, multiKey1, integer2);
      multiKey2.toString();
      MultiKey<MultiKey<Object>> multiKey3 = new MultiKey<MultiKey<Object>>(multiKey2, multiKey2);
      multiKey3.hashCode();
      multiKey0.toString();
      // Undeclared exception!
//      try { 
        multiKey0.getKey(1761);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 1761
//         //
//         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
//      }
  }
}
