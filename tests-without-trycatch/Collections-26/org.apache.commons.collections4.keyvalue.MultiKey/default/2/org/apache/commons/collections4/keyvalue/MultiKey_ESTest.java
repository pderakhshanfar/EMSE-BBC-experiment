/*
 * This file was automatically generated by EvoSuite
 * Thu Jul 29 21:38:21 GMT 2021
 */

package org.apache.commons.collections4.keyvalue;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.lang.reflect.Array;
import org.apache.commons.collections4.keyvalue.MultiKey;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class MultiKey_ESTest extends MultiKey_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("]HRxW!.r&fKK(x", "]HRxW!.r&fKK(x", "]HRxW!.r&fKK(x");
      boolean boolean0 = multiKey0.equals(multiKey0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Integer integer0 = new Integer(0);
      Integer integer1 = new Integer((-1966));
      Integer integer2 = new Integer(0);
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integer0, integer1, integer2);
      multiKey0.toString();
      multiKey0.toString();
      MultiKey<MultiKey<Integer>> multiKey1 = new MultiKey<MultiKey<Integer>>(multiKey0, multiKey0);
      MultiKey<String> multiKey2 = new MultiKey<String>("", "");
      MultiKey<MultiKey<String>> multiKey3 = new MultiKey<MultiKey<String>>(multiKey2, multiKey2, multiKey2, multiKey2, multiKey2);
      multiKey2.toString();
      multiKey3.toString();
      boolean boolean0 = multiKey3.equals(multiKey2);
      assertFalse(boolean0);
      
      multiKey2.size();
      String string0 = multiKey0.toString();
      multiKey1.toString();
      MultiKey<String> multiKey4 = new MultiKey<String>("MultiKey[0, -1966, 0]", "", "MultiKey[0, -1966, 0]", "MultiKey[, ]");
      Object object0 = multiKey4.getKey(0);
      assertTrue(object0.equals((Object)string0));
      
      multiKey2.toString();
      Integer integer3 = new Integer(2);
      multiKey4.toString();
      MultiKey<Object> multiKey5 = new MultiKey<Object>((Object) null, "3jZs^w`K\"sU<");
      multiKey5.getKey(0);
      MultiKey<String> multiKey6 = new MultiKey<String>("MultiKey[MultiKey[, ], MultiKey[, ], MultiKey[, ], MultiKey[, ], MultiKey[, ]]", ".AL|])Qo[b i/_'P", "");
      MultiKey<Object> multiKey7 = new MultiKey<Object>((Object) null, multiKey6, multiKey6, multiKey2, "MultiKey[MultiKey[0, -1966, 0], , MultiKey[0, -1966, 0], MultiKey[, ]]");
      multiKey7.size();
      multiKey7.size();
      assertFalse(multiKey6.equals((Object)multiKey4));
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      MultiKey<Object> multiKey0 = new MultiKey<Object>(objectArray0, false);
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.getKeys();
      MultiKey<String> multiKey1 = new MultiKey<String>("(D<xnw5)WNYF ", "Np5s5pc`=o=mX!", "4|", "(D<xnw5)WNYF ", "4|");
      MultiKey<MultiKey<String>> multiKey2 = new MultiKey<MultiKey<String>>(multiKey1, multiKey1);
      multiKey2.toString();
      multiKey2.toString();
      multiKey2.getKeys();
      multiKey2.toString();
      multiKey1.equals(multiKey0);
      multiKey2.size();
      multiKey0.equals("MultiKey[]");
      multiKey0.size();
      String string0 = multiKey1.toString();
      assertEquals("MultiKey[(D<xnw5)WNYF , Np5s5pc`=o=mX!, 4|, (D<xnw5)WNYF , 4|]", string0);
      
      Integer integer0 = new Integer(0);
      String[] stringArray0 = new String[5];
      stringArray0[0] = "#6M)%=0wc`/|3icL*;Q";
      stringArray0[1] = "MultiKey[(D<xnw5)WNYF , Np5s5pc`=o=mX!, 4|, (D<xnw5)WNYF , 4|]";
      stringArray0[2] = "Np5s5pc`=o=mX!";
      stringArray0[3] = "MultiKey[(D<xnw5)WNYF , Np5s5pc`=o=mX!, 4|, (D<xnw5)WNYF , 4|]";
      stringArray0[4] = "";
      MultiKey<String> multiKey3 = new MultiKey<String>(stringArray0, false);
      Object object0 = multiKey3.getKey(2);
      assertEquals("Np5s5pc`=o=mX!", object0);
      
      MultiKey<Object> multiKey4 = new MultiKey<Object>("MultiKey[(D<xnw5)WNYF , Np5s5pc`=o=mX!, 4|, (D<xnw5)WNYF , 4|]", integer0, "MultiKey[(D<xnw5)WNYF , Np5s5pc`=o=mX!, 4|, (D<xnw5)WNYF , 4|]", "Np5s5pc`=o=mX!");
      MultiKey<MultiKey<Object>> multiKey5 = new MultiKey<MultiKey<Object>>(multiKey4, multiKey4);
      MultiKey<Integer> multiKey6 = new MultiKey<Integer>(integer0, integer0);
      boolean boolean0 = multiKey5.equals(multiKey6);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("The array of keys must not be null", "org.apache.commons.collections4.keyvalue.MultiKey");
      multiKey0.toString();
      multiKey0.toString();
      MultiKey<Object> multiKey1 = new MultiKey<Object>("org.apache.commons.collections4.keyvalue.MultiKey", "The array of keys must not be null");
      multiKey1.toString();
      multiKey1.equals("The array of keys must not be null");
      MultiKey<Object>[] multiKeyArray0 = (MultiKey<Object>[]) Array.newInstance(MultiKey.class, 1);
      multiKeyArray0[0] = multiKey1;
      multiKey1.toString();
      multiKey1.toString();
      MultiKey<MultiKey<Object>> multiKey2 = new MultiKey<MultiKey<Object>>(multiKeyArray0);
      multiKey2.toString();
      multiKey2.toString();
      multiKey2.getKeys();
      multiKey1.size();
      Integer[] integerArray0 = new Integer[0];
      MultiKey<Integer> multiKey3 = new MultiKey<Integer>(integerArray0);
      Integer[] integerArray1 = multiKey3.getKeys();
      assertNotSame(integerArray1, integerArray0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Integer integer0 = new Integer(0);
      Integer integer1 = new Integer((-1966));
      Integer integer2 = new Integer(0);
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integer0, integer1, integer2);
      multiKey0.toString();
      multiKey0.toString();
      MultiKey<MultiKey<Integer>> multiKey1 = new MultiKey<MultiKey<Integer>>(multiKey0, multiKey0);
      MultiKey<String> multiKey2 = new MultiKey<String>("", "");
      MultiKey<MultiKey<String>> multiKey3 = new MultiKey<MultiKey<String>>(multiKey2, multiKey2, multiKey2, multiKey2, multiKey2);
      multiKey2.toString();
      multiKey3.toString();
      boolean boolean0 = multiKey3.equals(multiKey2);
      assertFalse(boolean0);
      
      multiKey2.size();
      multiKey0.toString();
      multiKey1.toString();
      multiKey1.toString();
      MultiKey<String> multiKey4 = new MultiKey<String>("", "", "3jZs^w`K\"sU<", "2y", "");
      multiKey4.getKey(0);
      multiKey2.toString();
      Integer integer3 = new Integer(2);
      Integer integer4 = new Integer(0);
      MultiKey<Integer> multiKey5 = new MultiKey<Integer>(integer1, integer3, integer4, integer4);
      MultiKey<Object> multiKey6 = new MultiKey<Object>(multiKey0, integer1, multiKey5, "");
      String string0 = multiKey5.toString();
      assertEquals("MultiKey[-1966, 2, 0, 0]", string0);
      
      MultiKey<Object> multiKey7 = new MultiKey<Object>("MultiKey[0, -1966, 0]", "", multiKey1, multiKey6);
      multiKey7.hashCode();
      assertFalse(multiKey0.equals((Object)multiKey5));
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("The array of keys must not be null", "The array of keys must not be null");
      MultiKey<Object> multiKey1 = new MultiKey<Object>("The array of keys must not be null", "The array of keys must not be null", multiKey0, "The array of keys must not be null", "The array of keys must not be null");
      boolean boolean0 = multiKey0.equals(multiKey1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("", "", "", "", "");
      assertEquals(5, multiKey0.size());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("", "", "", "");
      MultiKey<MultiKey<String>> multiKey1 = new MultiKey<MultiKey<String>>(multiKey0, multiKey0, multiKey0, multiKey0, multiKey0);
      multiKey1.toString();
      String string0 = multiKey1.toString();
      assertEquals("MultiKey[MultiKey[, , , ], MultiKey[, , , ], MultiKey[, , , ], MultiKey[, , , ], MultiKey[, , , ]]", string0);
      
      Object object0 = new Object();
      multiKey0.equals(object0);
      Integer integer0 = new Integer(0);
      Integer integer1 = new Integer(0);
      MultiKey<Integer> multiKey2 = new MultiKey<Integer>((Integer) null, integer0, integer1, integer1, (Integer) null);
      boolean boolean0 = multiKey2.equals(integer0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("", "NY:-~i~u2x=|GD5P", "", "NY:-~i~u2x=|GD5P", "r>19}Zuw,K,m/8Hy~");
      boolean boolean0 = multiKey0.equals(multiKey0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("The array of keys must not be null", (String) null, (String) null);
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.size();
      multiKey0.toString();
      Integer integer0 = new Integer((-1182));
      multiKey0.equals(integer0);
      Integer integer1 = new Integer((-1182));
      MultiKey<Integer> multiKey1 = new MultiKey<Integer>((Integer) null, (Integer) null, (Integer) null, integer1);
      multiKey1.toString();
      multiKey1.toString();
      multiKey1.equals("sFRMQr'.}");
      int int0 = multiKey0.size();
      multiKey0.toString();
      MultiKey<Object> multiKey2 = new MultiKey<Object>("MultiKey[The array of keys must not be null, null, null]", "The array of keys must not be null");
      multiKey0.equals(multiKey2);
      int int1 = multiKey0.hashCode();
      assertFalse(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>((String) null, (String) null);
      int int0 = multiKey0.size();
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      MultiKey<Object> multiKey0 = new MultiKey<Object>(";Kt]", ";Kt]");
      Object[] objectArray0 = multiKey0.getKeys();
      assertEquals(2, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      MultiKey<Object> multiKey0 = new MultiKey<Object>("", "");
      boolean boolean0 = multiKey0.equals("");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Integer[] integerArray0 = new Integer[1];
      Integer integer0 = new Integer((-3028));
      integerArray0[0] = integer0;
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integerArray0, false);
      multiKey0.toString();
      Integer integer1 = new Integer((-3028));
      MultiKey<Object> multiKey1 = new MultiKey<Object>(integerArray0[0], integerArray0[0], integer0, integer1);
      multiKey1.toString();
      multiKey1.getKeys();
      multiKey0.toString();
      String string0 = multiKey1.toString();
      assertEquals("MultiKey[-3028, -3028, -3028, -3028]", string0);
      
      boolean boolean0 = multiKey1.equals("p$dn,s8r");
      assertFalse(boolean0);
      
      String[] stringArray0 = new String[4];
      stringArray0[0] = "MultiKey[-3028]";
      stringArray0[1] = "MultiKey[-3028, -3028, -3028, -3028]";
      stringArray0[2] = "MultiKey[-3028, -3028, -3028, -3028]";
      stringArray0[3] = "";
      MultiKey<String> multiKey2 = new MultiKey<String>(stringArray0);
      int int0 = multiKey2.size();
      MultiKey<String>[] multiKeyArray0 = (MultiKey<String>[]) Array.newInstance(MultiKey.class, 8);
      multiKeyArray0[0] = multiKey2;
      multiKeyArray0[1] = multiKey2;
      MultiKey<String> multiKey3 = new MultiKey<String>("9W]`x-R\">KdWv0E_QS`", "org.apache.commons.collections4.keyvalue.MultiKey", "MultiKey[-3028, -3028, -3028, -3028]", "");
      multiKeyArray0[2] = multiKey3;
      multiKeyArray0[3] = multiKey2;
      multiKeyArray0[4] = multiKey2;
      multiKeyArray0[5] = multiKey2;
      multiKeyArray0[6] = multiKey2;
      multiKeyArray0[7] = multiKey2;
      MultiKey<MultiKey<String>> multiKey4 = new MultiKey<MultiKey<String>>(multiKeyArray0);
      int int1 = multiKey4.hashCode();
      assertFalse(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      MultiKey<Object> multiKey0 = new MultiKey<Object>("C", "C", "C", "C");
      multiKey0.hashCode();
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Integer integer0 = new Integer((-157));
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integer0, integer0);
      multiKey0.toString();
      multiKey0.toString();
      MultiKey<Object> multiKey1 = new MultiKey<Object>(integer0, "MultiKey[-157, -157]", integer0);
      multiKey1.toString();
      multiKey1.hashCode();
      multiKey1.toString();
      multiKey0.hashCode();
      multiKey1.toString();
      // Undeclared exception!
//      try { 
        multiKey0.getKey((-157));
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // -157
//         //
//         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
//      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("", "", "");
      assertEquals(3, multiKey0.size());
      
      String string0 = multiKey0.toString();
      assertEquals("MultiKey[, , ]", string0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>((Integer) null, (Integer) null);
      assertEquals(2, multiKey0.size());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("", "");
      assertEquals(2, multiKey0.size());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Object[] objectArray0 = new Object[3];
      String string0 = null;
      MultiKey<Object> multiKey0 = new MultiKey<Object>((Object) null, (Object) null);
      // Undeclared exception!
//      try { 
        multiKey0.getKey((-1));
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // -1
//         //
//         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
//      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      String[] stringArray0 = new String[5];
      MultiKey<String> multiKey0 = new MultiKey<String>(stringArray0);
      assertEquals(5, multiKey0.size());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("0", "0", "0", "0");
      assertEquals(4, multiKey0.size());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Integer integer0 = new Integer(2268);
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integer0, integer0, integer0, integer0);
      // Undeclared exception!
//      try { 
        multiKey0.getKey(2268);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 2268
//         //
//         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
//      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Object[] objectArray0 = new Object[2];
      Integer[] integerArray0 = new Integer[6];
      Integer integer0 = new Integer(0);
      integerArray0[0] = integer0;
      Integer integer1 = new Integer(2340);
      integerArray0[1] = integer1;
      Integer integer2 = new Integer(1811);
      integerArray0[2] = integer2;
      int int0 = 3;
      Integer integer3 = new Integer(3);
      integerArray0[3] = integer3;
      Integer integer4 = new Integer(2232);
      integerArray0[4] = integer4;
      Integer integer5 = new Integer(int0);
      integerArray0[5] = integer5;
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integerArray0);
      Integer integer6 = multiKey0.getKey(0);
      objectArray0[0] = (Object) integer6;
      MultiKey<String> multiKey1 = new MultiKey<String>("org.apache.commons.collections4.keyvalue.MultiKey", "", "&HRit6cwn=w", "org.apache.commons.collections4.keyvalue.MultiKey");
      // Undeclared exception!
//      try { 
        multiKey1.getKey(2232);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 2232
//         //
//         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
//      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      MultiKey<Object> multiKey0 = null;
//      try {
        multiKey0 = new MultiKey<Object>((Object[]) null, true);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // The array of keys must not be null
//         //
//         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
//      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      MultiKey<String> multiKey0 = null;
//      try {
        multiKey0 = new MultiKey<String>((String[]) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // The array of keys must not be null
//         //
//         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
//      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Object[] objectArray0 = new Object[8];
      MultiKey<String> multiKey0 = null;
//      try {
        multiKey0 = new MultiKey<String>((String[]) null, true);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // The array of keys must not be null
//         //
//         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
//      }
  }
}
