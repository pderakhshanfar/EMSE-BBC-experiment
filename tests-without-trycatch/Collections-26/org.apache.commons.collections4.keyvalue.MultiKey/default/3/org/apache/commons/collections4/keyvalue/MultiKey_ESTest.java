/*
 * This file was automatically generated by EvoSuite
 * Thu Jul 29 21:38:12 GMT 2021
 */

package org.apache.commons.collections4.keyvalue;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.lang.reflect.Array;
import org.apache.commons.collections4.keyvalue.MultiKey;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class MultiKey_ESTest extends MultiKey_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      MultiKey<MultiKey<String>> multiKey0 = new MultiKey<MultiKey<String>>((MultiKey<String>) null, (MultiKey<String>) null, (MultiKey<String>) null, (MultiKey<String>) null, (MultiKey<String>) null);
      assertEquals(5, multiKey0.size());
      assertNotNull(multiKey0);
      
      int int0 = multiKey0.size();
      assertEquals(5, multiKey0.size());
      assertEquals(5, int0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      String[] stringArray0 = new String[5];
      MultiKey<String> multiKey0 = new MultiKey<String>(stringArray0);
      assertEquals(5, multiKey0.size());
      assertEquals(5, stringArray0.length);
      assertNotNull(multiKey0);
      
      // Undeclared exception!
//      try { 
        multiKey0.getKey((-406));
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // -406
//         //
//         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
//      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      MultiKey<String> multiKey0 = null;
//      try {
        multiKey0 = new MultiKey<String>((String[]) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // The array of keys must not be null
//         //
//         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
//      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      String[] stringArray0 = new String[13];
      MultiKey<String> multiKey0 = new MultiKey<String>(stringArray0);
      assertEquals(13, multiKey0.size());
      assertEquals(13, stringArray0.length);
      assertNotNull(multiKey0);
      
      MultiKey<Object> multiKey1 = new MultiKey<Object>(stringArray0[0], stringArray0[1], multiKey0);
      assertEquals(13, multiKey0.size());
      assertEquals(3, multiKey1.size());
      assertEquals(13, stringArray0.length);
      assertNotNull(multiKey1);
      
      boolean boolean0 = multiKey1.equals(multiKey0);
      assertEquals(13, multiKey0.size());
      assertEquals(3, multiKey1.size());
      assertEquals(13, stringArray0.length);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      MultiKey<Object> multiKey0 = new MultiKey<Object>(objectArray0, true);
      assertEquals(0, multiKey0.size());
      assertEquals(0, objectArray0.length);
      assertNotNull(multiKey0);
      
      MultiKey<MultiKey<Object>> multiKey1 = new MultiKey<MultiKey<Object>>(multiKey0, multiKey0, multiKey0);
      assertEquals(0, multiKey0.size());
      assertEquals(3, multiKey1.size());
      assertEquals(0, objectArray0.length);
      assertNotNull(multiKey1);
      
      MultiKey multiKey2 = (MultiKey)multiKey1.getKey(1);
      assertEquals(0, multiKey0.size());
      assertEquals(3, multiKey1.size());
      assertEquals(0, multiKey2.size());
      assertEquals(0, objectArray0.length);
      assertNotNull(multiKey2);
      
      boolean boolean0 = multiKey0.equals(multiKey2);
      assertEquals(0, multiKey0.size());
      assertEquals(3, multiKey1.size());
      assertEquals(0, multiKey2.size());
      assertEquals(0, objectArray0.length);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Integer integer0 = new Integer((-1));
      assertEquals((-1), (int)integer0);
      assertNotNull(integer0);
      
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integer0, integer0, (Integer) null, integer0, integer0);
      assertEquals(5, multiKey0.size());
      assertNotNull(multiKey0);
      
      boolean boolean0 = multiKey0.equals((Object) null);
      assertEquals(5, multiKey0.size());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      MultiKey<Integer> multiKey0 = null;
//      try {
        multiKey0 = new MultiKey<Integer>((Integer[]) null, true);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // The array of keys must not be null
//         //
//         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
//      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      MultiKey<Object>[] multiKeyArray0 = (MultiKey<Object>[]) Array.newInstance(MultiKey.class, 9);
      MultiKey<Object> multiKey0 = new MultiKey<Object>((Object[]) multiKeyArray0, true);
      assertEquals(9, multiKey0.size());
      assertEquals(9, multiKeyArray0.length);
      assertNotNull(multiKey0);
      
      MultiKey<Object> multiKey1 = new MultiKey<Object>(multiKey0, "x");
      assertEquals(9, multiKey0.size());
      assertEquals(2, multiKey1.size());
      assertEquals(9, multiKeyArray0.length);
      assertFalse(multiKey1.equals((Object)multiKey0));
      assertNotNull(multiKey1);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      String[] stringArray0 = new String[0];
      MultiKey<String> multiKey0 = new MultiKey<String>(stringArray0);
      assertEquals(0, multiKey0.size());
      assertEquals(0, stringArray0.length);
      assertNotNull(multiKey0);
      
      int int0 = multiKey0.size();
      assertEquals(0, multiKey0.size());
      assertEquals(0, stringArray0.length);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      MultiKey<Object> multiKey0 = new MultiKey<Object>((Object) null, "MultiKey[0, -622, null, 0, 4]", "MultiKey[0, -622, null, 0, 4]");
      assertEquals(3, multiKey0.size());
      assertNotNull(multiKey0);
      
      Object object0 = multiKey0.getKey(0);
      assertEquals(3, multiKey0.size());
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      MultiKey<Object> multiKey0 = new MultiKey<Object>((Object) null, "MultiKey[0, -622, null, 0, 4]", "MultiKey[0, -622, null, 0, 4]");
      multiKey0.hashCode();
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      MultiKey<Object>[] multiKeyArray0 = (MultiKey<Object>[]) Array.newInstance(MultiKey.class, 9);
      MultiKey<Object> multiKey0 = new MultiKey<Object>((Object[]) multiKeyArray0, true);
      multiKeyArray0[1] = multiKey0;
      String string0 = multiKeyArray0[1].toString();
      assertEquals("MultiKey[null, null, null, null, null, null, null, null, null]", string0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      String[] stringArray0 = new String[0];
      MultiKey<String> multiKey0 = new MultiKey<String>(stringArray0);
      String[] stringArray1 = multiKey0.getKeys();
      assertNotSame(stringArray0, stringArray1);
  }
}
