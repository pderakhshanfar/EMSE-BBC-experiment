/*
 * This file was automatically generated by EvoSuite
 * Thu Jul 29 21:40:14 GMT 2021
 */

package org.apache.commons.collections4.keyvalue;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.lang.reflect.Array;
import org.apache.commons.collections4.keyvalue.MultiKey;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class MultiKey_ESTest extends MultiKey_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      String[] stringArray0 = new String[2];
      stringArray0[0] = "Zn^1zaf.*";
      stringArray0[1] = "Zn^1zaf.*";
      MultiKey<String> multiKey0 = new MultiKey<String>(stringArray0);
      MultiKey<MultiKey<String>> multiKey1 = new MultiKey<MultiKey<String>>(multiKey0, multiKey0, multiKey0, multiKey0);
      multiKey1.equals(multiKey1);
      String[] stringArray1 = multiKey0.getKeys();
      multiKey0.toString();
      Integer integer0 = new Integer(5);
      int int0 = 3;
      Integer integer1 = new Integer((-1210));
      int int1 = 0;
      Integer integer2 = new Integer(0);
      MultiKey<Integer> multiKey2 = new MultiKey<Integer>(integer1, integer1, integer0, integer1, integer2);
      MultiKey<Object> multiKey3 = new MultiKey<Object>((Object[]) stringArray1, true);
      // Undeclared exception!
//      try { 
        multiKey3.getKey(108);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 108
//         //
//         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
//      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("", "");
      boolean boolean0 = multiKey0.equals(multiKey0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>((String) null, (String) null, "MultiKey");
      Object[] objectArray0 = new Object[0];
      MultiKey<Object> multiKey1 = new MultiKey<Object>(objectArray0, false);
      int int0 = multiKey1.size();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Integer integer0 = new Integer(3);
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>((Integer) null, (Integer) null, (Integer) null, (Integer) null, integer0);
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.getKey(3);
      MultiKey<Object> multiKey1 = new MultiKey<Object>((Object) null, (Object) null);
      multiKey1.toString();
      multiKey1.toString();
      multiKey1.getKeys();
      multiKey1.size();
      MultiKey<MultiKey<Object>> multiKey2 = new MultiKey<MultiKey<Object>>(multiKey1, multiKey1);
      // Undeclared exception!
//      try { 
        multiKey2.getKey(1595);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 1595
//         //
//         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
//      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Object object0 = new Object();
      Object object1 = new Object();
      MultiKey<Object> multiKey0 = new MultiKey<Object>(object0, object0, object1);
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.size();
      multiKey0.getKeys();
      String[] stringArray0 = new String[0];
      MultiKey<String> multiKey1 = new MultiKey<String>(stringArray0);
      multiKey1.getKeys();
      Integer[] integerArray0 = new Integer[1];
      Integer integer0 = new Integer((-1690));
      integerArray0[0] = integer0;
      MultiKey<Integer> multiKey2 = new MultiKey<Integer>(integerArray0);
      Integer integer1 = new Integer((-1690));
      multiKey2.toString();
      MultiKey<Integer> multiKey3 = new MultiKey<Integer>(integer1, integerArray0[0], integer1, integerArray0[0], integer0);
      multiKey3.toString();
      multiKey0.toString();
      MultiKey<MultiKey<Integer>> multiKey4 = new MultiKey<MultiKey<Integer>>(multiKey2, multiKey3, multiKey3, multiKey3);
      multiKey4.toString();
      String string0 = multiKey3.toString();
      assertEquals("MultiKey[-1690, -1690, -1690, -1690, -1690]", string0);
      
      Object object2 = multiKey4.getKey(3);
      boolean boolean0 = multiKey0.equals(object2);
      assertFalse(boolean0);
      
      boolean boolean1 = multiKey0.equals("MultiKey[-1690]");
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("^3}k[[W?6Ew ~GM%", "^3}k[[W?6Ew ~GM%");
      assertEquals(2, multiKey0.size());
      
      int int0 = multiKey0.size();
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) "";
      objectArray0[1] = (Object) "";
      objectArray0[2] = (Object) "";
      objectArray0[3] = (Object) "";
      objectArray0[4] = (Object) "";
      objectArray0[5] = (Object) "";
      MultiKey<Object> multiKey0 = new MultiKey<Object>(objectArray0);
      multiKey0.getKey(0);
      String string0 = multiKey0.toString();
      multiKey0.toString();
      MultiKey<Object> multiKey1 = new MultiKey<Object>("", "", (Object) null, (Object) null, (Object) null);
      multiKey1.toString();
      multiKey1.size();
      Object object0 = multiKey0.getKey(0);
      assertFalse(object0.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      MultiKey<Object>[] multiKeyArray0 = (MultiKey<Object>[]) Array.newInstance(MultiKey.class, 4);
      MultiKey<Object> multiKey0 = new MultiKey<Object>((Object[]) multiKeyArray0, false);
      multiKeyArray0[0] = multiKey0;
      MultiKey<Object> multiKey1 = new MultiKey<Object>(multiKey0, multiKey0);
      multiKeyArray0[1] = multiKey1;
      MultiKey<Object> multiKey2 = new MultiKey<Object>((Object[]) multiKeyArray0, true);
      assertTrue(multiKey2.equals((Object)multiKey0));
      
      multiKeyArray0[2] = multiKey2;
      Integer integer0 = new Integer(5);
      MultiKey<Object> multiKey3 = new MultiKey<Object>(integer0, multiKey0);
      Object object0 = new Object();
      MultiKey<Object> multiKey4 = new MultiKey<Object>("MultiKey", integer0, multiKey3, multiKey2, object0);
      multiKeyArray0[3] = multiKey4;
      MultiKey<MultiKey<Object>> multiKey5 = new MultiKey<MultiKey<Object>>(multiKeyArray0);
      boolean boolean0 = multiKey5.equals(multiKey0);
      assertFalse(multiKey0.equals((Object)multiKey4));
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      MultiKey<Object> multiKey0 = new MultiKey<Object>("The array of keys must not be null", "The array of keys must not be null");
      Object[] objectArray0 = multiKey0.getKeys();
      assertEquals(2, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      String[] stringArray0 = new String[7];
      stringArray0[0] = "";
      stringArray0[1] = "L.";
      stringArray0[2] = "m";
      stringArray0[3] = "$19g";
      stringArray0[4] = "";
      stringArray0[5] = "xI8>`4-yFi/===";
      stringArray0[6] = "MultiKey";
      MultiKey<String> multiKey0 = new MultiKey<String>(stringArray0, false);
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      Integer[] integerArray0 = new Integer[6];
      Integer integer0 = new Integer(0);
      integerArray0[0] = integer0;
      Integer integer1 = new Integer(0);
      integerArray0[1] = integer1;
      Integer integer2 = new Integer(1);
      integerArray0[2] = integer2;
      Integer integer3 = new Integer(1055);
      integerArray0[3] = integer3;
      Integer integer4 = new Integer((int) integerArray0[3]);
      integerArray0[4] = integer4;
      Integer integer5 = new Integer(1);
      integerArray0[5] = integer5;
      MultiKey<Integer> multiKey1 = new MultiKey<Integer>(integerArray0, false);
      Integer[] integerArray1 = multiKey1.getKeys();
      assertFalse(integerArray1.equals((Object)integerArray0));
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      MultiKey<Object> multiKey0 = new MultiKey<Object>((Object) null, (Object) null);
      MultiKey<Object> multiKey1 = new MultiKey<Object>(multiKey0, (Object) null, multiKey0, (Object) null, multiKey0);
      boolean boolean0 = multiKey1.equals(multiKey0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Integer integer0 = new Integer((-837));
      Integer integer1 = new Integer((-837));
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integer0, integer0, integer1);
      multiKey0.toString();
      boolean boolean0 = multiKey0.equals(integer1);
      assertFalse(boolean0);
      
      String[] stringArray0 = new String[3];
      stringArray0[0] = "MultiKey[-837, -837, -837]";
      stringArray0[1] = "MultiKey[-837, -837, -837]";
      stringArray0[2] = "MultiKey[-837, -837, -837]";
      MultiKey<String> multiKey1 = new MultiKey<String>(stringArray0);
      MultiKey<String> multiKey2 = new MultiKey<String>("MultiKey[-837, -837, -837]", "dp@~&(y6eB");
      MultiKey<MultiKey<String>> multiKey3 = new MultiKey<MultiKey<String>>(multiKey1, multiKey2, multiKey2, multiKey1);
      String string0 = multiKey3.toString();
      assertEquals("MultiKey[MultiKey[MultiKey[-837, -837, -837], MultiKey[-837, -837, -837], MultiKey[-837, -837, -837]], MultiKey[MultiKey[-837, -837, -837], dp@~&(y6eB], MultiKey[MultiKey[-837, -837, -837], dp@~&(y6eB], MultiKey[MultiKey[-837, -837, -837], MultiKey[-837, -837, -837], MultiKey[-837, -837, -837]]]", string0);
      
      boolean boolean1 = multiKey3.equals(multiKey2);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Integer integer0 = new Integer(0);
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) integer0;
      MultiKey<Object> multiKey0 = new MultiKey<Object>(objectArray0, false);
      MultiKey<Object> multiKey1 = new MultiKey<Object>(objectArray0[0], integer0);
      MultiKey<MultiKey<Object>> multiKey2 = new MultiKey<MultiKey<Object>>(multiKey0, multiKey0, multiKey1, multiKey0);
      multiKey2.hashCode();
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>((String) null, (String) null, (String) null);
      assertEquals(3, multiKey0.size());
      
      boolean boolean0 = multiKey0.equals((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("9T:'1PV=LNuqkv", "~FMwD|", "9T:'1PV=LNuqkv");
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.equals("The array of keys must not be null");
      multiKey0.hashCode();
      Integer[] integerArray0 = new Integer[0];
      MultiKey<Integer> multiKey1 = new MultiKey<Integer>(integerArray0);
      multiKey1.toString();
      multiKey1.toString();
      multiKey0.toString();
      multiKey1.toString();
      multiKey1.toString();
      multiKey1.toString();
      multiKey0.toString();
      multiKey1.toString();
      // Undeclared exception!
//      try { 
        multiKey1.getKey(1114);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 1114
//         //
//         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
//      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("Zng^1af.*", "Zng^1af.*", "Zng^1af.*", "Zng^1af.*");
      assertEquals(4, multiKey0.size());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Integer integer0 = new Integer((-541));
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integer0, integer0);
      MultiKey<String>[] multiKeyArray0 = (MultiKey<String>[]) Array.newInstance(MultiKey.class, 9);
      MultiKey<String> multiKey1 = new MultiKey<String>("7gM,6?bq~", "");
      multiKeyArray0[0] = multiKey1;
      MultiKey<String> multiKey2 = new MultiKey<String>("7gM,6?bq~", "Zz]vsxN0j};B", "", "", (String) null);
      multiKeyArray0[1] = multiKey2;
      MultiKey<String> multiKey3 = new MultiKey<String>("", "", "Zz]vsxN0j};B");
      multiKeyArray0[2] = multiKey3;
      MultiKey<String> multiKey4 = new MultiKey<String>((String) null, "Zz]vsxN0j};B");
      multiKeyArray0[3] = multiKey4;
      MultiKey<String> multiKey5 = new MultiKey<String>("", "", (String) null, "", "");
      multiKeyArray0[4] = multiKey5;
      MultiKey<String> multiKey6 = new MultiKey<String>("pNq:", "", "/1Ib A5+n`");
      multiKeyArray0[5] = multiKey6;
      MultiKey<String> multiKey7 = new MultiKey<String>((String) null, "pNq:", "/1Ib A5+n`", "");
      multiKeyArray0[6] = multiKey7;
      MultiKey<String> multiKey8 = new MultiKey<String>("", "", (String) null, "q_");
      multiKeyArray0[7] = multiKey8;
      MultiKey<String> multiKey9 = new MultiKey<String>("", "(JX+8HHW(");
      multiKeyArray0[8] = multiKey9;
      MultiKey<MultiKey<String>> multiKey10 = new MultiKey<MultiKey<String>>(multiKeyArray0, true);
      Object object0 = new Object();
      MultiKey<Object> multiKey11 = new MultiKey<Object>(object0, "");
      // Undeclared exception!
//      try { 
        multiKey11.getKey((-541));
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // -541
//         //
//         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
//      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      MultiKey<Object> multiKey0 = null;
//      try {
        multiKey0 = new MultiKey<Object>((Object[]) null, false);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // The array of keys must not be null
//         //
//         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
//      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Integer integer0 = new Integer(0);
      Integer integer1 = new Integer((-2389));
      Integer integer2 = new Integer(121);
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integer0, integer1, integer2);
      multiKey0.toString();
      boolean boolean0 = true;
      MultiKey<Object> multiKey1 = null;
//      try {
        multiKey1 = new MultiKey<Object>((Object[]) null, true);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // The array of keys must not be null
//         //
//         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
//      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("Zng^1af.*", "Zng^1af.*", "Zng^1af.*");
      String string0 = multiKey0.toString();
      assertEquals("MultiKey[Zng^1af.*, Zng^1af.*, Zng^1af.*]", string0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      MultiKey<Object> multiKey0 = new MultiKey<Object>("I@rYWY2>9|ZRg-|", "I@rYWY2>9|ZRg-|");
      // Undeclared exception!
//      try { 
        multiKey0.getKey(18);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 18
//         //
//         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
//      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      String string0 = "&ZldI '+VKNu~g2~+";
      MultiKey<String> multiKey0 = new MultiKey<String>("FE#4y_<rVI@&927Bj", "&ZldI '+VKNu~g2~+");
      multiKey0.toString();
      multiKey0.toString();
      int int0 = 5;
      // Undeclared exception!
//      try { 
        multiKey0.getKey(5);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 5
//         //
//         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
//      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("Zng^1af.*", "Zng^1af.*", "Zng^1af.*", "Zng^1af.*", "Zng^1af.*");
      assertEquals(5, multiKey0.size());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Integer[] integerArray0 = new Integer[3];
      int int0 = 0;
      Integer integer0 = new Integer(0);
      integerArray0[0] = integer0;
      Integer integer1 = new Integer(int0);
      integerArray0[1] = integer1;
      Integer integer2 = new Integer(0);
      integerArray0[2] = integer2;
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integerArray0);
      assertEquals(3, multiKey0.size());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      String[] stringArray0 = new String[7];
      MultiKey<String> multiKey0 = new MultiKey<String>(stringArray0);
      assertEquals(7, multiKey0.size());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      MultiKey<String> multiKey0 = null;
//      try {
        multiKey0 = new MultiKey<String>((String[]) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // The array of keys must not be null
//         //
//         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
//      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      MultiKey<Object> multiKey0 = null;
//      try {
        multiKey0 = new MultiKey<Object>((Object[]) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // The array of keys must not be null
//         //
//         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
//      }
  }
}
