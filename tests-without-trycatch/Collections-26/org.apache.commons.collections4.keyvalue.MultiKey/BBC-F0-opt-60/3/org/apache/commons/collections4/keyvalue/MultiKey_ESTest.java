/*
 * This file was automatically generated by EvoSuite
 * Wed Oct 13 20:47:43 GMT 2021
 */

package org.apache.commons.collections4.keyvalue;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.lang.reflect.Array;
import org.apache.commons.collections4.keyvalue.MultiKey;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class MultiKey_ESTest extends MultiKey_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>(".PIHQ1f~csj9HTL[d(x(", "", "");
      String[] stringArray0 = new String[8];
      stringArray0[0] = ".PIHQ1f~csj9HTL[d(x(";
      stringArray0[1] = "";
      stringArray0[2] = "";
      stringArray0[3] = "";
      stringArray0[4] = "lrS2.J";
      stringArray0[5] = "";
      stringArray0[6] = "";
      stringArray0[7] = "00`";
      boolean boolean0 = multiKey0.equals(multiKey0);
      assertTrue(boolean0);
      
      MultiKey<String> multiKey1 = new MultiKey<String>(stringArray0, true);
      Integer integer0 = new Integer((-1349));
      MultiKey<Object> multiKey2 = new MultiKey<Object>("", multiKey1, "", integer0, "00`");
      String string0 = multiKey2.toString();
      assertEquals("MultiKey[, MultiKey[.PIHQ1f~csj9HTL[d(x(, , , , lrS2.J, , , 00`], , -1349, 00`]", string0);
      
      multiKey2.size();
      assertFalse(multiKey1.equals((Object)multiKey0));
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("n8%:s4y G{TQ_/", "1-TnHrN$A@/CP7?L", "", (String) null);
      multiKey0.size();
      multiKey0.size();
      String[] stringArray0 = new String[7];
      stringArray0[0] = "n8%:s4y G{TQ_/";
      stringArray0[1] = "1-TnHrN$A@/CP7?L";
      stringArray0[2] = "n8%:s4y G{TQ_/";
      multiKey0.toString();
      stringArray0[3] = null;
      stringArray0[4] = null;
      stringArray0[5] = "1-TnHrN$A@/CP7?L";
      stringArray0[6] = null;
      MultiKey<String> multiKey1 = new MultiKey<String>(stringArray0, true);
      String string0 = multiKey1.toString();
      assertEquals("MultiKey[n8%:s4y G{TQ_/, 1-TnHrN$A@/CP7?L, n8%:s4y G{TQ_/, null, null, 1-TnHrN$A@/CP7?L, null]", string0);
      
      boolean boolean0 = multiKey0.equals(multiKey1);
      assertFalse(boolean0);
      
      Integer[] integerArray0 = new Integer[9];
      Integer integer0 = new Integer(4);
      integerArray0[0] = integer0;
      MultiKey<Object> multiKey2 = new MultiKey<Object>(stringArray0);
      Object object0 = multiKey2.getKey((int) integerArray0[0]);
      assertNull(object0);
      
      MultiKey<Object> multiKey3 = new MultiKey<Object>((Object) null, "1-TnHrN$A@/CP7?L", stringArray0[4], "n8%:s4y G{TQ_/", "");
      multiKey2.getKey(3);
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) multiKey0;
      objectArray0[1] = (Object) stringArray0[4];
      objectArray0[2] = (Object) multiKey1;
      objectArray0[3] = (Object) integer0;
      MultiKey<Object> multiKey4 = new MultiKey<Object>(objectArray0);
      boolean boolean1 = multiKey2.equals(stringArray0[6]);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      MultiKey<String>[] multiKeyArray0 = (MultiKey<String>[]) Array.newInstance(MultiKey.class, 0);
      MultiKey<MultiKey<String>> multiKey0 = new MultiKey<MultiKey<String>>(multiKeyArray0, false);
      Integer[] integerArray0 = new Integer[0];
      MultiKey<Integer> multiKey1 = new MultiKey<Integer>(integerArray0);
      boolean boolean0 = multiKey1.equals(multiKey0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      MultiKey<String>[] multiKeyArray0 = (MultiKey<String>[]) Array.newInstance(MultiKey.class, 0);
      MultiKey<MultiKey<String>> multiKey0 = new MultiKey<MultiKey<String>>(multiKeyArray0, false);
      MultiKey<String>[] multiKeyArray1 = multiKey0.getKeys();
      assertEquals(0, multiKeyArray1.length);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      String[] stringArray0 = null;
      boolean boolean0 = false;
      MultiKey<String> multiKey0 = null;
//      try {
        multiKey0 = new MultiKey<String>((String[]) null, false);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // The array of keys must not be null
//         //
//         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
//      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      MultiKey<String> multiKey0 = null;
//      try {
        multiKey0 = new MultiKey<String>((String[]) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // The array of keys must not be null
//         //
//         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
//      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      MultiKey<MultiKey<String>> multiKey0 = new MultiKey<MultiKey<String>>((MultiKey<String>) null, (MultiKey<String>) null, (MultiKey<String>) null, (MultiKey<String>) null, (MultiKey<String>) null);
      Integer integer0 = new Integer(1);
      Integer integer1 = new Integer(1);
      MultiKey<Integer> multiKey1 = new MultiKey<Integer>(integer0, integer1, integer1, integer1);
      multiKey1.getKey(1);
      multiKey1.hashCode();
      Object object0 = new Object();
      MultiKey<String> multiKey2 = new MultiKey<String>("The array of keys must not be null", "", "");
      multiKey2.toString();
      multiKey2.getKey(1);
      multiKey2.toString();
      multiKey2.toString();
      MultiKey<Object> multiKey3 = new MultiKey<Object>(object0, multiKey1, "", object0);
      // Undeclared exception!
//      try { 
        multiKey3.getKey(1099);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 1099
//         //
//         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
//      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("", "", "", "", "5T5:\u0007jfvZ0");
      multiKey0.toString();
      Integer integer0 = new Integer((-1389));
      MultiKey<Integer> multiKey1 = new MultiKey<Integer>(integer0, integer0);
      multiKey1.toString();
      multiKey1.toString();
      multiKey1.getKey(0);
      multiKey0.hashCode();
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Integer integer0 = new Integer(1);
      MultiKey<Object> multiKey0 = new MultiKey<Object>(integer0, (Object) null);
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = null;
      objectArray0[1] = null;
      boolean boolean0 = true;
      MultiKey<Object> multiKey1 = new MultiKey<Object>(objectArray0, true);
      Object object0 = new Object();
      MultiKey<Object> multiKey2 = new MultiKey<Object>((Object) null, (Object) null, multiKey1, object0, multiKey1);
      Integer integer1 = new Integer(1);
      Object object1 = new Object();
      MultiKey<Object> multiKey3 = new MultiKey<Object>(objectArray0[1], object1, (Object) null);
      String[] stringArray0 = new String[3];
      stringArray0[0] = "";
      stringArray0[1] = "XcCEq+HWfT-<g*i";
      stringArray0[2] = "The array of keys must not be null";
      MultiKey<String> multiKey4 = new MultiKey<String>(stringArray0);
      // Undeclared exception!
//      try { 
        multiKey4.getKey((-2159));
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // -2159
//         //
//         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
//      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      MultiKey<Object> multiKey0 = new MultiKey<Object>(objectArray0, true);
      multiKey0.size();
      multiKey0.hashCode();
      String string0 = "";
      MultiKey<String> multiKey1 = new MultiKey<String>("", "", "", "", "");
      MultiKey<String> multiKey2 = new MultiKey<String>("", "", "MultiKey", "", "2l");
      multiKey2.toString();
      multiKey1.equals(multiKey2);
      Integer integer0 = new Integer(0);
      Integer integer1 = new Integer(0);
      MultiKey<Integer> multiKey3 = new MultiKey<Integer>(integer0, integer1, integer1);
      multiKey3.hashCode();
      MultiKey<Object>[] multiKeyArray0 = (MultiKey<Object>[]) Array.newInstance(MultiKey.class, 7);
      multiKeyArray0[0] = multiKey0;
      multiKeyArray0[1] = multiKey0;
      Integer integer2 = new Integer(731);
      MultiKey<String> multiKey4 = new MultiKey<String>("", "RN", "");
      // Undeclared exception!
//      try { 
        multiKey4.getKey(731);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 731
//         //
//         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
//      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      String[] stringArray0 = new String[3];
      stringArray0[0] = "";
      String string0 = "";
      stringArray0[1] = "";
      String string1 = ";rbl8@2\\dNr{<";
      stringArray0[2] = ";rbl8@2dNr{<";
      MultiKey<String> multiKey0 = new MultiKey<String>(stringArray0, false);
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.size();
      multiKey0.hashCode();
      Integer integer0 = new Integer(3);
      MultiKey<Integer> multiKey1 = new MultiKey<Integer>(integer0, integer0);
      multiKey1.toString();
      multiKey1.toString();
      multiKey1.toString();
      multiKey1.equals(multiKey0);
      MultiKey<String> multiKey2 = new MultiKey<String>("", "");
      // Undeclared exception!
//      try { 
        multiKey2.getKey(3);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 3
//         //
//         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
//      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("-Vf;#MZ+|>pq8n)c9%F", "-Vf;#MZ+|>pq8n)c9%F", "", "-Vf;#MZ+|>pq8n)c9%F", "org.apache.commons.collections4.keyvalue.MultiKey");
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) "";
      objectArray0[1] = (Object) multiKey0;
      objectArray0[2] = (Object) "";
      objectArray0[3] = (Object) "-Vf;#MZ+|>pq8n)c9%F";
      MultiKey<Object> multiKey1 = new MultiKey<Object>(objectArray0);
      Object object0 = new Object();
      MultiKey<String> multiKey2 = new MultiKey<String>("-Vf;#MZ+|>pq8n)c9%F", "+9#Ck6&8Yl-B*D", "-Vf;#MZ+|>pq8n)c9%F", "org.apache.commons.collections4.keyvalue.MultiKey");
      MultiKey<Object> multiKey3 = new MultiKey<Object>("", object0, multiKey2, multiKey2);
      MultiKey<MultiKey<Object>> multiKey4 = new MultiKey<MultiKey<Object>>(multiKey1, multiKey1, multiKey3, multiKey3, multiKey1);
      int int0 = multiKey4.size();
      assertEquals(5, int0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      String[] stringArray0 = new String[6];
      stringArray0[0] = "?c-KRs.0sKd";
      stringArray0[1] = "G";
      stringArray0[2] = "";
      stringArray0[3] = "";
      stringArray0[4] = "";
      stringArray0[5] = "KHE8U}3";
      MultiKey<String> multiKey0 = new MultiKey<String>(stringArray0, true);
      assertEquals(6, multiKey0.size());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Integer integer0 = new Integer((-288));
      MultiKey<Object> multiKey0 = new MultiKey<Object>("afxL5a", integer0);
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.getKeys();
      multiKey0.toString();
      multiKey0.equals(integer0);
      multiKey0.getKeys();
      MultiKey<String> multiKey1 = new MultiKey<String>("", "", "");
      multiKey1.hashCode();
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      String string0 = "The array of keys must not be null";
      String string1 = "zTs{:&eT3#";
      String string2 = null;
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) "zTs{:&eT3#";
      Object object0 = new Object();
      objectArray0[1] = object0;
      MultiKey<Object> multiKey0 = new MultiKey<Object>(objectArray0, false);
      int int0 = 1411;
      multiKey0.toString();
      multiKey0.toString();
      // Undeclared exception!
//      try { 
        multiKey0.getKey(1411);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 1411
//         //
//         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
//      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("?^z1{lmLH:Fk", "MultiKey", "");
      multiKey0.hashCode();
      Object object0 = new Object();
      MultiKey<Object> multiKey1 = new MultiKey<Object>("", object0, "?^z1{lmLH:Fk", "Ij<{5[=");
      multiKey1.hashCode();
  }
}
