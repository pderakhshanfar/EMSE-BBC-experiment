/*
 * This file was automatically generated by EvoSuite
 * Fri Oct 22 17:38:57 GMT 2021
 */

package org.apache.commons.collections4.keyvalue;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.lang.reflect.Array;
import org.apache.commons.collections4.keyvalue.MultiKey;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class MultiKey_ESTest extends MultiKey_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Integer integer0 = new Integer((-3238));
      Integer integer1 = new Integer((-3238));
      Integer integer2 = new Integer((-1));
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integer1, integer2, integer2, integer0, integer1);
      multiKey0.toString();
      MultiKey<String> multiKey1 = new MultiKey<String>("5DY*<", "", "", "MultiKey");
      multiKey1.toString();
      Object object0 = new Object();
      MultiKey<Object> multiKey2 = new MultiKey<Object>("MultiKey", (Object) null, object0);
      MultiKey<MultiKey<Object>> multiKey3 = new MultiKey<MultiKey<Object>>(multiKey2, multiKey2);
      multiKey3.toString();
      Object object1 = multiKey3.getKey(1);
      multiKey0.equals("5DY*<");
      boolean boolean0 = multiKey2.equals(object1);
      String string0 = multiKey1.toString();
      assertEquals("MultiKey[5DY*<, , , MultiKey]", string0);
      
      Object object2 = new Object();
      boolean boolean1 = multiKey1.equals(object2);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Object object0 = new Object();
      MultiKey<Object> multiKey0 = new MultiKey<Object>("%LV0;Zyv<jQI/", "P", "%LV0;Zyv<jQI/");
      MultiKey<MultiKey<Object>> multiKey1 = new MultiKey<MultiKey<Object>>(multiKey0, multiKey0);
      multiKey1.toString();
      Integer integer0 = new Integer(1);
      MultiKey<Integer> multiKey2 = new MultiKey<Integer>(integer0, integer0);
      boolean boolean0 = multiKey2.equals("P");
      assertFalse(boolean0);
      
      multiKey2.size();
      multiKey2.toString();
      multiKey2.size();
      Integer integer1 = new Integer(2);
      MultiKey<Object> multiKey3 = new MultiKey<Object>((Object) null, (Object) null);
      multiKey3.toString();
      multiKey0.size();
      String string0 = multiKey0.toString();
      assertEquals("MultiKey[%LV0;Zyv<jQI/, P, %LV0;Zyv<jQI/]", string0);
      
      Object[] objectArray0 = multiKey0.getKeys();
      MultiKey<Object> multiKey4 = new MultiKey<Object>(objectArray0, false);
      multiKey0.equals(multiKey4);
      assertFalse(multiKey0.equals((Object)multiKey3));
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      MultiKey<Object>[] multiKeyArray0 = (MultiKey<Object>[]) Array.newInstance(MultiKey.class, 6);
      Integer integer0 = new Integer(0);
      Integer integer1 = new Integer((-67));
      MultiKey<String> multiKey0 = new MultiKey<String>("MultiKey", "biV;EF");
      MultiKey<Object> multiKey1 = new MultiKey<Object>(integer1, multiKey0);
      Integer integer2 = new Integer(0);
      MultiKey<Object> multiKey2 = new MultiKey<Object>(integer0, multiKey1, "", multiKey0, integer2);
      multiKeyArray0[0] = multiKey2;
      MultiKey<Object> multiKey3 = new MultiKey<Object>(multiKeyArray0);
      multiKeyArray0[1] = multiKey3;
      Object object0 = new Object();
      MultiKey<Object> multiKey4 = new MultiKey<Object>(multiKey0, object0);
      multiKeyArray0[2] = multiKey4;
      Object object1 = new Object();
      MultiKey<Object> multiKey5 = new MultiKey<Object>(object1, integer0);
      MultiKey<Object> multiKey6 = new MultiKey<Object>((Object) null, multiKey0, multiKey3, multiKey5);
      multiKeyArray0[3] = multiKey6;
      MultiKey<Object> multiKey7 = new MultiKey<Object>(object1, "MultiKey", multiKey3, multiKey3);
      multiKeyArray0[4] = multiKey7;
      Integer integer3 = new Integer(763);
      MultiKey<Object> multiKey8 = new MultiKey<Object>(multiKey4, integer3);
      multiKeyArray0[5] = multiKey8;
      MultiKey<MultiKey<Object>> multiKey9 = new MultiKey<MultiKey<Object>>(multiKeyArray0, false);
      Object object2 = new Object();
      boolean boolean0 = multiKey9.equals(multiKey3);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      MultiKey<Object> multiKey0 = new MultiKey<Object>((Object) null, (Object) null, (Object) null);
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.getKey(0);
      MultiKey<MultiKey<Object>> multiKey1 = new MultiKey<MultiKey<Object>>(multiKey0, multiKey0, multiKey0, multiKey0, multiKey0);
      multiKey0.toString();
      multiKey1.toString();
      multiKey1.toString();
      multiKey1.toString();
      String string0 = multiKey1.toString();
      assertEquals("MultiKey[MultiKey[null, null, null], MultiKey[null, null, null], MultiKey[null, null, null], MultiKey[null, null, null], MultiKey[null, null, null]]", string0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      String string0 = ",yu-";
      MultiKey<String> multiKey0 = new MultiKey<String>(",yu-", ",yu-", ",yu-", ",yu-", ",yu-");
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.size();
      MultiKey<Object>[] multiKeyArray0 = (MultiKey<Object>[]) Array.newInstance(MultiKey.class, 1);
      MultiKey<Integer> multiKey1 = null;
//      try {
        multiKey1 = new MultiKey<Integer>((Integer[]) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // The array of keys must not be null
//         //
//         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
//      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Integer[] integerArray0 = new Integer[0];
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integerArray0);
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      Integer[] integerArray1 = multiKey0.getKeys();
      MultiKey<Object> multiKey1 = new MultiKey<Object>((Object[]) integerArray1, false);
      MultiKey<MultiKey<Object>> multiKey2 = new MultiKey<MultiKey<Object>>(multiKey1, multiKey1, multiKey1, multiKey1);
      multiKey1.toString();
      multiKey2.toString();
      multiKey2.toString();
      multiKey0.toString();
      multiKey2.equals(multiKey1);
      multiKey1.size();
      multiKey0.hashCode();
      // Undeclared exception!
//      try { 
        multiKey0.getKey(0);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 0
//         //
//         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
//      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Object object0 = new Object();
      MultiKey<Object> multiKey0 = new MultiKey<Object>("", "", object0);
      MultiKey<MultiKey<Object>> multiKey1 = new MultiKey<MultiKey<Object>>(multiKey0, multiKey0, multiKey0, multiKey0, multiKey0);
      multiKey1.toString();
      multiKey1.toString();
      multiKey1.getKeys();
      MultiKey<String> multiKey2 = null;
//      try {
        multiKey2 = new MultiKey<String>((String[]) null, true);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // The array of keys must not be null
//         //
//         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
//      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Integer integer0 = new Integer((-757));
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>((Integer) null, (Integer) null, (Integer) null, (Integer) null, integer0);
      multiKey0.toString();
      MultiKey<String> multiKey1 = new MultiKey<String>("MultiKey", "MultiKey", (String) null, "5YDsY*<");
      multiKey1.toString();
      multiKey1.getKey(0);
      multiKey0.equals("MultiKey");
      int int0 = multiKey0.size();
      multiKey0.toString();
      multiKey0.size();
      Integer integer1 = new Integer((-757));
      MultiKey<Object> multiKey2 = new MultiKey<Object>(integer1, "");
      int int1 = multiKey2.size();
      assertFalse(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      String[] stringArray0 = new String[8];
      stringArray0[0] = "";
      stringArray0[1] = "||u2cP2]M`\"T.";
      stringArray0[2] = "";
      stringArray0[3] = "n=J~[^d5:N@pdI;";
      stringArray0[4] = "MdO";
      stringArray0[5] = "";
      stringArray0[6] = "";
      stringArray0[7] = "s";
      MultiKey<String> multiKey0 = new MultiKey<String>(stringArray0, true);
      multiKey0.getKeys();
      MultiKey<Object> multiKey1 = new MultiKey<Object>("n=J~[^d5:N@pdI;", "n=J~[^d5:N@pdI;", multiKey0);
      multiKey1.toString();
      multiKey0.toString();
      multiKey1.toString();
      MultiKey<Integer> multiKey2 = new MultiKey<Integer>((Integer) null, (Integer) null, (Integer) null);
      multiKey2.equals("");
      multiKey1.toString();
      multiKey2.toString();
      multiKey1.hashCode();
      multiKey2.toString();
      multiKey0.hashCode();
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Object[] objectArray0 = new Object[2];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      MultiKey<Object> multiKey0 = new MultiKey<Object>(objectArray0);
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      MultiKey<String> multiKey1 = new MultiKey<String>("", "MultiKey[java.lang.Object@d725d39, java.lang.Object@35066594]", "");
      multiKey1.toString();
      multiKey0.toString();
      multiKey1.toString();
      multiKey0.toString();
      multiKey1.toString();
      multiKey1.equals(object0);
      multiKey0.equals("MultiKey[java.lang.Object@d725d39, java.lang.Object@35066594]");
      Integer[] integerArray0 = new Integer[0];
      MultiKey<Integer> multiKey2 = new MultiKey<Integer>(integerArray0);
      multiKey2.toString();
      multiKey2.getKeys();
      // Undeclared exception!
//      try { 
        multiKey2.getKey((-1593));
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // -1593
//         //
//         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
//      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Integer integer0 = new Integer(0);
      MultiKey<Object> multiKey0 = new MultiKey<Object>("", integer0, "r5qOC;d", "");
      MultiKey<Object> multiKey1 = new MultiKey<Object>("", multiKey0, "", "r5qOC;d", "r5qOC;d");
      multiKey0.toString();
      multiKey1.toString();
      String[] stringArray0 = new String[1];
      stringArray0[0] = "MultiKey[, MultiKey[, 0, r5qOC;d, ], , r5qOC;d, r5qOC;d]";
      MultiKey<String> multiKey2 = new MultiKey<String>(stringArray0, true);
      multiKey1.toString();
      multiKey2.toString();
      multiKey2.getKeys();
      multiKey0.toString();
      MultiKey<MultiKey<String>> multiKey3 = new MultiKey<MultiKey<String>>(multiKey2, multiKey2, multiKey2, multiKey2);
      multiKey3.toString();
      multiKey3.hashCode();
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Object object0 = new Object();
      MultiKey<Object> multiKey0 = new MultiKey<Object>(object0, "P");
      int int0 = multiKey0.size();
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      String[] stringArray0 = new String[6];
      stringArray0[0] = "MultiKey";
      stringArray0[1] = "";
      stringArray0[2] = "-8w]+m'@87uhRr";
      stringArray0[3] = ")Pcb_4.i4Yg=HTvR0";
      stringArray0[4] = "";
      stringArray0[5] = "";
      MultiKey<String> multiKey0 = new MultiKey<String>(stringArray0, true);
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.hashCode();
      MultiKey<Object> multiKey1 = new MultiKey<Object>(stringArray0);
      multiKey1.toString();
      multiKey1.getKeys();
      String string0 = multiKey0.toString();
      assertEquals("MultiKey[MultiKey, , -8w]+m'@87uhRr, )Pcb_4.i4Yg=HTvR0, , ]", string0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Object[] objectArray0 = new Object[2];
      MultiKey<String> multiKey0 = new MultiKey<String>("", ";uv;[+T5pLEh$'='", "");
      multiKey0.toString();
      int int0 = (-1);
      multiKey0.toString();
      // Undeclared exception!
//      try { 
        multiKey0.getKey((-1));
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // -1
//         //
//         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
//      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      String string0 = "";
      Integer integer0 = new Integer((-4282));
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) "";
      MultiKey<Object> multiKey0 = new MultiKey<Object>(objectArray0, true);
      // Undeclared exception!
//      try { 
        multiKey0.getKey((-4282));
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // -4282
//         //
//         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
//      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      MultiKey<Object> multiKey0 = new MultiKey<Object>("}h`u'}8mAQ5H3", "}h`u'}8mAQ5H3");
      multiKey0.toString();
      multiKey0.hashCode();
      String[] stringArray0 = new String[9];
      stringArray0[0] = "MultiKey[}h`u'}8mAQ5H3, }h`u'}8mAQ5H3]";
      stringArray0[1] = "}h`u'}8mAQ5H3";
      stringArray0[2] = "MultiKey[}h`u'}8mAQ5H3, }h`u'}8mAQ5H3]";
      stringArray0[3] = "MultiKey[}h`u'}8mAQ5H3, }h`u'}8mAQ5H3]";
      stringArray0[4] = "$<)vi~;C[Z";
      stringArray0[5] = "{-o)g*L*<]mvM";
      stringArray0[6] = "";
      stringArray0[7] = "}h`u'}8mAQ5H3";
      stringArray0[8] = "MultiKey[}h`u'}8mAQ5H3, }h`u'}8mAQ5H3]";
      MultiKey<String> multiKey1 = new MultiKey<String>(stringArray0);
      String string0 = multiKey1.toString();
      assertEquals("MultiKey[MultiKey[}h`u'}8mAQ5H3, }h`u'}8mAQ5H3], }h`u'}8mAQ5H3, MultiKey[}h`u'}8mAQ5H3, }h`u'}8mAQ5H3], MultiKey[}h`u'}8mAQ5H3, }h`u'}8mAQ5H3], $<)vi~;C[Z, {-o)g*L*<]mvM, , }h`u'}8mAQ5H3, MultiKey[}h`u'}8mAQ5H3, }h`u'}8mAQ5H3]]", string0);
  }
}
