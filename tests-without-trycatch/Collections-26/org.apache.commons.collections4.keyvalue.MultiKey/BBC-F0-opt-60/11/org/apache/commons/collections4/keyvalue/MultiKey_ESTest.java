/*
 * This file was automatically generated by EvoSuite
 * Wed Oct 20 12:15:46 GMT 2021
 */

package org.apache.commons.collections4.keyvalue;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.lang.reflect.Array;
import org.apache.commons.collections4.keyvalue.MultiKey;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class MultiKey_ESTest extends MultiKey_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Integer integer0 = new Integer(8);
      Integer integer1 = new Integer(3);
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integer0, integer0, integer1, integer1, integer0);
      MultiKey<String> multiKey1 = new MultiKey<String>("", "", "", "");
      multiKey1.toString();
      multiKey1.toString();
      multiKey1.toString();
      multiKey0.toString();
      multiKey1.size();
      int int0 = multiKey0.size();
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) integer0;
      multiKey1.getKey(3);
      objectArray0[1] = (Object) "";
      objectArray0[2] = (Object) "MultiKey[, , , ]";
      objectArray0[3] = (Object) "MultiKey[, , , ]";
      objectArray0[4] = (Object) integer1;
      objectArray0[5] = (Object) integer1;
      objectArray0[6] = (Object) multiKey0;
      objectArray0[7] = (Object) "MultiKey[, , , ]";
      objectArray0[8] = (Object) multiKey1;
      MultiKey<Object> multiKey2 = new MultiKey<Object>(objectArray0);
      multiKey2.toString();
      multiKey2.toString();
      multiKey0.toString();
      multiKey2.toString();
      multiKey2.toString();
      multiKey2.getKey(8);
      MultiKey<Object>[] multiKeyArray0 = (MultiKey<Object>[]) Array.newInstance(MultiKey.class, 0);
      MultiKey<MultiKey<Object>> multiKey3 = new MultiKey<MultiKey<Object>>(multiKeyArray0, false);
      int int1 = multiKey3.size();
      assertFalse(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("O-'VsGMoJl", "O-'VsGMoJl");
      boolean boolean0 = multiKey0.equals(multiKey0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Integer integer0 = new Integer(0);
      Integer integer1 = new Integer(0);
      Integer integer2 = new Integer(0);
      Integer integer3 = new Integer(3000);
      Integer integer4 = new Integer(0);
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>((Integer) null, (Integer) null, integer4);
      Integer integer5 = multiKey0.getKey(0);
      assertNull(integer5);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Integer integer0 = new Integer(0);
      Integer integer1 = new Integer(723);
      Integer integer2 = new Integer(723);
      Integer integer3 = new Integer((-2280));
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integer0, integer1, integer2, integer3, integer1);
      Object object0 = new Object();
      MultiKey<Object> multiKey1 = new MultiKey<Object>(multiKey0, object0, (Object) null, (Object) null, "");
      Object[] objectArray0 = multiKey1.getKeys();
      assertEquals(5, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      String string0 = "}\\K]";
      MultiKey<String> multiKey0 = new MultiKey<String>("", "}K]", "}K]", "~}hw@i-#Relw");
      multiKey0.toString();
      boolean boolean0 = true;
      MultiKey<Object> multiKey1 = null;
//      try {
        multiKey1 = new MultiKey<Object>((Object[]) null, true);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // The array of keys must not be null
//         //
//         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
//      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Integer integer0 = new Integer(5067);
      Integer integer1 = new Integer(198);
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integer0, integer0, integer1, integer1, integer1);
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) multiKey0;
      objectArray0[1] = (Object) integer1;
      objectArray0[2] = (Object) multiKey0;
      multiKey0.toString();
      MultiKey<Object> multiKey1 = new MultiKey<Object>(objectArray0, true);
      multiKey1.toString();
      multiKey1.toString();
      MultiKey<String> multiKey2 = null;
//      try {
        multiKey2 = new MultiKey<String>((String[]) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // The array of keys must not be null
//         //
//         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
//      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Integer integer0 = new Integer((-682));
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>((Integer) null, (Integer) null, integer0, integer0);
      multiKey0.toString();
      Object[] objectArray0 = new Object[0];
      MultiKey<Object> multiKey1 = new MultiKey<Object>(objectArray0, true);
      multiKey1.getKeys();
      // Undeclared exception!
//      try { 
        multiKey1.getKey(2);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 2
//         //
//         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
//      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      String[] stringArray0 = new String[5];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "r";
      stringArray0[3] = "";
      stringArray0[4] = "";
      MultiKey<String> multiKey0 = new MultiKey<String>(stringArray0);
      boolean boolean0 = multiKey0.equals("");
      assertFalse(boolean0);
      
      MultiKey<Object> multiKey1 = new MultiKey<Object>(stringArray0);
      Integer[] integerArray0 = new Integer[0];
      MultiKey<Integer> multiKey2 = new MultiKey<Integer>(integerArray0, false);
      MultiKey<MultiKey<Integer>> multiKey3 = new MultiKey<MultiKey<Integer>>(multiKey2, multiKey2, (MultiKey<Integer>) null);
      Object object0 = multiKey3.getKey(0);
      boolean boolean1 = multiKey1.equals(object0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Integer integer0 = new Integer(529);
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integer0, integer0);
      multiKey0.hashCode();
      Integer integer1 = new Integer(529);
      Integer integer2 = new Integer(0);
      MultiKey<Integer> multiKey1 = new MultiKey<Integer>(integer0, integer1, integer1, integer0, integer2);
      multiKey1.toString();
      MultiKey<Object> multiKey2 = new MultiKey<Object>((Object) null, (Object) null, (Object) null, multiKey1);
      multiKey2.equals(integer2);
      MultiKey<String> multiKey3 = new MultiKey<String>("MultiKey[529, 529, 529, 529, 0]", "MultiKey[529, 529, 529, 529, 0]", ">ghX9");
      String string0 = multiKey3.toString();
      assertEquals("MultiKey[MultiKey[529, 529, 529, 529, 0], MultiKey[529, 529, 529, 529, 0], >ghX9]", string0);
      
      multiKey3.equals((Object) null);
      MultiKey<String> multiKey4 = new MultiKey<String>("", "");
      multiKey4.getKey(0);
      boolean boolean0 = multiKey2.equals("");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Integer integer0 = new Integer(0);
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integer0, (Integer) null, (Integer) null);
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.hashCode();
      Integer integer1 = new Integer(0);
      MultiKey<Object> multiKey1 = new MultiKey<Object>("", integer0, integer0, integer0, integer1);
      multiKey1.hashCode();
      multiKey0.size();
      multiKey1.hashCode();
      MultiKey<Object>[] multiKeyArray0 = (MultiKey<Object>[]) Array.newInstance(MultiKey.class, 4);
      multiKeyArray0[0] = multiKey1;
      multiKeyArray0[1] = multiKey1;
      multiKeyArray0[2] = multiKey1;
      multiKeyArray0[3] = multiKey1;
      MultiKey<MultiKey<Object>> multiKey2 = new MultiKey<MultiKey<Object>>(multiKeyArray0);
      multiKey2.hashCode();
      MultiKey<String> multiKey3 = new MultiKey<String>("MultiKey[0, null, null]", "K?_qb4geX", (String) null, "");
      String string0 = multiKey3.toString();
      assertEquals("MultiKey[MultiKey[0, null, null], K?_qb4geX, null, ]", string0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("og ", "og ");
      String[] stringArray0 = new String[6];
      stringArray0[0] = "og ";
      stringArray0[1] = "og ";
      stringArray0[2] = "og ";
      stringArray0[3] = "og ";
      stringArray0[4] = "og ";
      stringArray0[5] = "og ";
      MultiKey<String> multiKey1 = new MultiKey<String>(stringArray0);
      multiKey1.toString();
      multiKey1.toString();
      multiKey1.toString();
      MultiKey<MultiKey<String>> multiKey2 = new MultiKey<MultiKey<String>>(multiKey0, multiKey1, multiKey1, (MultiKey<String>) null);
      multiKey2.toString();
      multiKey2.toString();
      multiKey2.hashCode();
      int int0 = 18;
      // Undeclared exception!
//      try { 
        multiKey1.getKey(18);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 18
//         //
//         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
//      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("The array of keys must not be null", "a*<}rz");
      MultiKey<MultiKey<String>> multiKey1 = new MultiKey<MultiKey<String>>(multiKey0, multiKey0, multiKey0, multiKey0);
      int int0 = 2235;
      // Undeclared exception!
//      try { 
        multiKey0.getKey(2235);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 2235
//         //
//         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
//      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) "n|E^a@NW";
      objectArray0[1] = (Object) "n|E^a@NW";
      objectArray0[2] = (Object) "n|E^a@NW";
      MultiKey<Object> multiKey0 = new MultiKey<Object>(objectArray0, true);
      multiKey0.getKey(1);
      Object object0 = new Object();
      MultiKey<Object> multiKey1 = new MultiKey<Object>("n|E^a@NW", "n|E^a@NW", (Object) null, object0, "n|E^a@NW");
      MultiKey<String> multiKey2 = new MultiKey<String>("n|E^a@NW", "n|E^a@NW");
      multiKey2.getKey(1);
      MultiKey<Object> multiKey3 = new MultiKey<Object>("n|E^a@NW", multiKey1, objectArray0[2], "n|E^a@NW", "n|E^a@NW");
      assertFalse(multiKey3.equals((Object)multiKey0));
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Object[] objectArray0 = new Object[2];
      Object object0 = new Object();
      objectArray0[0] = object0;
      MultiKey<Object> multiKey0 = new MultiKey<Object>(objectArray0);
      // Undeclared exception!
//      try { 
        multiKey0.getKey(5);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 5
//         //
//         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
//      }
  }
}
