/*
 * This file was automatically generated by EvoSuite
 * Wed Oct 13 20:49:47 GMT 2021
 */

package org.apache.commons.collections4.keyvalue;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.lang.reflect.Array;
import org.apache.commons.collections4.keyvalue.MultiKey;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class MultiKey_ESTest extends MultiKey_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      MultiKey<MultiKey<Object>> multiKey0 = new MultiKey<MultiKey<Object>>((MultiKey<Object>) null, (MultiKey<Object>) null, (MultiKey<Object>) null);
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) "";
      objectArray0[1] = (Object) multiKey0;
      objectArray0[2] = (Object) null;
      objectArray0[3] = (Object) multiKey0;
      objectArray0[4] = (Object) multiKey0;
      objectArray0[5] = (Object) null;
      MultiKey<Object> multiKey1 = new MultiKey<Object>(objectArray0, false);
      MultiKey<MultiKey<Object>> multiKey2 = new MultiKey<MultiKey<Object>>(multiKey1, (MultiKey<Object>) null, multiKey1, multiKey1, (MultiKey<Object>) null);
      boolean boolean0 = multiKey0.equals(objectArray0[4]);
      MultiKey<String> multiKey3 = new MultiKey<String>("*EG*r9{jS1dBL", "`TfN .:e7", "`TfN .:e7", "B uEn_");
      Object object0 = new Object();
      MultiKey<Object> multiKey4 = new MultiKey<Object>(objectArray0, true);
      Integer integer0 = new Integer(18);
      Integer integer1 = new Integer(18);
      MultiKey<Integer> multiKey5 = new MultiKey<Integer>(integer0, integer1);
      String string0 = multiKey1.toString();
      assertEquals("MultiKey[, MultiKey[null, null, null], null, MultiKey[null, null, null], MultiKey[null, null, null], null]", string0);
      
      MultiKey<MultiKey<Object>> multiKey6 = new MultiKey<MultiKey<Object>>(multiKey1, (MultiKey<Object>) null, (MultiKey<Object>) null);
      boolean boolean1 = multiKey2.equals("MultiKey[, MultiKey[null, null, null], null, MultiKey[null, null, null], MultiKey[null, null, null], null]");
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      String[] stringArray0 = new String[0];
      MultiKey<Object> multiKey0 = new MultiKey<Object>((Object[]) stringArray0, true);
      String string0 = multiKey0.toString();
      assertEquals("MultiKey[]", string0);
      
      MultiKey<String> multiKey1 = new MultiKey<String>(stringArray0);
      multiKey1.size();
      multiKey0.getKeys();
      Integer[] integerArray0 = new Integer[9];
      int int0 = 5;
      Integer integer0 = new Integer(5);
      integerArray0[0] = integer0;
      Integer integer1 = new Integer(574);
      integerArray0[1] = integer1;
      Integer integer2 = new Integer(6);
      integerArray0[2] = integer2;
      Integer integer3 = new Integer(5);
      integerArray0[3] = integer3;
      Integer integer4 = new Integer(5);
      integerArray0[4] = integer4;
      Integer integer5 = new Integer(3);
      integerArray0[5] = integer5;
      Integer integer6 = new Integer(1169);
      integerArray0[6] = integer6;
      Integer integer7 = new Integer(int0);
      integerArray0[7] = integer7;
      Integer integer8 = new Integer(5);
      integerArray0[8] = integer8;
      MultiKey<Integer> multiKey2 = new MultiKey<Integer>(integerArray0);
      boolean boolean0 = multiKey2.equals(integer2);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      String[] stringArray0 = new String[0];
      MultiKey<String> multiKey0 = new MultiKey<String>(stringArray0, true);
      MultiKey<MultiKey<String>> multiKey1 = new MultiKey<MultiKey<String>>(multiKey0, multiKey0, multiKey0, multiKey0, multiKey0);
      MultiKey<String> multiKey2 = new MultiKey<String>("", (String) null, "$n)Mov>s..b", (String) null, "$n)Mov>s..b");
      multiKey0.equals(multiKey2);
      MultiKey<Object> multiKey3 = new MultiKey<Object>((Object[]) stringArray0, false);
      int int0 = multiKey3.size();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      String[] stringArray0 = new String[6];
      stringArray0[0] = "";
      stringArray0[1] = "3K WRamXj";
      stringArray0[2] = "org.apache.commons.collections4.keyvalue.MultiKey";
      stringArray0[3] = "";
      stringArray0[4] = "V+V}B";
      stringArray0[5] = "";
      MultiKey<String> multiKey0 = new MultiKey<String>(stringArray0, true);
      multiKey0.toString();
      Object object0 = new Object();
      MultiKey<Object> multiKey1 = new MultiKey<Object>(object0, "");
      multiKey1.toString();
      multiKey1.size();
      multiKey0.toString();
      multiKey1.toString();
      multiKey1.toString();
      multiKey0.toString();
      multiKey1.toString();
      multiKey1.equals("MultiKey[, 3K WRamXj, org.apache.commons.collections4.keyvalue.MultiKey, , V+V}B, ]");
      multiKey1.getKeys();
      int int0 = multiKey1.size();
      multiKey1.equals("3K WRamXj");
      multiKey0.getKeys();
      MultiKey<Object>[] multiKeyArray0 = (MultiKey<Object>[]) Array.newInstance(MultiKey.class, 8);
      multiKeyArray0[0] = multiKey1;
      Integer integer0 = new Integer(2);
      Integer integer1 = new Integer(0);
      MultiKey<Object> multiKey2 = new MultiKey<Object>(integer0, "", integer1, "MultiKey");
      Object object1 = multiKey2.getKey(2);
      Object object2 = new Object();
      MultiKey<Object> multiKey3 = new MultiKey<Object>(object1, object2, "org.apache.commons.collections4.keyvalue.MultiKey");
      multiKeyArray0[1] = multiKey3;
      multiKeyArray0[2] = multiKey1;
      multiKeyArray0[3] = multiKey1;
      multiKeyArray0[4] = multiKey1;
      multiKeyArray0[5] = multiKey1;
      multiKeyArray0[6] = multiKey1;
      multiKeyArray0[7] = multiKey1;
      MultiKey<MultiKey<Object>> multiKey4 = new MultiKey<MultiKey<Object>>(multiKeyArray0, true);
      int int1 = multiKey4.hashCode();
      assertFalse(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Object object0 = new Object();
      MultiKey<Object> multiKey0 = new MultiKey<Object>((Object) null, object0, object0);
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.getKey(0);
      Integer integer0 = new Integer((-1));
      multiKey0.toString();
      Integer integer1 = new Integer((-1));
      MultiKey<Integer> multiKey1 = new MultiKey<Integer>(integer0, integer0, integer0, integer1, integer1);
      multiKey1.toString();
      multiKey1.toString();
      multiKey1.toString();
      multiKey1.toString();
      multiKey1.toString();
      multiKey1.equals("MultiKey[null, java.lang.Object@2b728de3, java.lang.Object@2b728de3]");
      multiKey1.toString();
      multiKey1.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey1.size();
      multiKey0.equals(integer0);
      multiKey1.hashCode();
      MultiKey<MultiKey<Object>> multiKey2 = null;
//      try {
        multiKey2 = new MultiKey<MultiKey<Object>>((MultiKey<Object>[]) null, true);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // The array of keys must not be null
//         //
//         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
//      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      String[] stringArray0 = new String[7];
      stringArray0[0] = "";
      stringArray0[1] = "MultiKey";
      stringArray0[2] = "";
      stringArray0[3] = "7";
      stringArray0[4] = "";
      stringArray0[5] = "";
      stringArray0[6] = "%Ovt}{D";
      MultiKey<String> multiKey0 = new MultiKey<String>(stringArray0);
      String string0 = multiKey0.getKey(0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("", "");
      multiKey0.toString();
      multiKey0.equals("");
      MultiKey<Object> multiKey1 = new MultiKey<Object>("MultiKey[, ]", "", "");
      MultiKey<Integer> multiKey2 = null;
//      try {
        multiKey2 = new MultiKey<Integer>((Integer[]) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // The array of keys must not be null
//         //
//         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
//      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Integer integer0 = new Integer((-161));
      MultiKey<Object> multiKey0 = new MultiKey<Object>(integer0, integer0);
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.hashCode();
      MultiKey<MultiKey<Object>> multiKey1 = null;
//      try {
        multiKey1 = new MultiKey<MultiKey<Object>>((MultiKey<Object>[]) null, true);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // The array of keys must not be null
//         //
//         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
//      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("org.apache.commons.collections4.keyvalue.MultiKey", "", "org.apache.commons.collections4.keyvalue.MultiKey", "");
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      String string0 = multiKey0.toString();
      assertEquals("MultiKey[org.apache.commons.collections4.keyvalue.MultiKey, , org.apache.commons.collections4.keyvalue.MultiKey, ]", string0);
      
      MultiKey<MultiKey<String>> multiKey1 = new MultiKey<MultiKey<String>>(multiKey0, multiKey0, multiKey0);
      Integer[] integerArray0 = new Integer[9];
      int int0 = 0;
      Integer integer0 = new Integer(0);
      integerArray0[0] = integer0;
      Integer integer1 = new Integer(0);
      integerArray0[1] = integer1;
      Integer integer2 = new Integer(int0);
      integerArray0[2] = integer2;
      int int1 = 3;
      Integer integer3 = new Integer(3);
      integerArray0[3] = integer3;
      Integer integer4 = new Integer(1);
      integerArray0[4] = integer4;
      Integer integer5 = new Integer(1);
      integerArray0[5] = integer5;
      Integer integer6 = new Integer(2271);
      integerArray0[6] = integer6;
      Integer integer7 = new Integer(423);
      integerArray0[7] = integer7;
      Integer integer8 = new Integer(0);
      integerArray0[8] = integer8;
      MultiKey<Integer> multiKey2 = new MultiKey<Integer>(integerArray0, false);
      Object object0 = new Object();
      multiKey2.equals(object0);
      boolean boolean0 = multiKey2.equals(int1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("xj", "xj", "xj");
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      Integer[] integerArray0 = new Integer[3];
      multiKey0.toString();
      int int0 = 0;
      Integer integer0 = new Integer(0);
      integerArray0[0] = integer0;
      Integer integer1 = new Integer(640);
      integerArray0[1] = integer1;
      Integer integer2 = new Integer(0);
      integerArray0[2] = integer2;
      MultiKey<Integer> multiKey1 = new MultiKey<Integer>(integerArray0, false);
      Integer integer3 = new Integer(int0);
      multiKey1.toString();
      multiKey1.toString();
      MultiKey<Object> multiKey2 = new MultiKey<Object>(multiKey1, integer0, integer3, "MultiKey[xj, xj, xj]");
      multiKey1.toString();
      multiKey2.toString();
      multiKey1.toString();
      multiKey2.toString();
      multiKey2.toString();
      multiKey2.size();
      MultiKey<Object> multiKey3 = new MultiKey<Object>(integerArray0);
      multiKey3.toString();
      multiKey1.equals(multiKey3);
      multiKey1.toString();
      // Undeclared exception!
//      try { 
        multiKey1.getKey(640);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 640
//         //
//         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
//      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("fIN", (String) null, "", "fIN", "The array of keys must not be null");
      MultiKey<Object>[] multiKeyArray0 = (MultiKey<Object>[]) Array.newInstance(MultiKey.class, 3);
      MultiKey<Object> multiKey1 = new MultiKey<Object>("fIN", (Object) null, "fIN");
      multiKeyArray0[0] = multiKey1;
      Integer integer0 = new Integer(1650);
      Integer integer1 = new Integer(0);
      Integer integer2 = new Integer(0);
      Integer integer3 = new Integer(5);
      MultiKey<Integer> multiKey2 = new MultiKey<Integer>(integer0, integer1, integer2, integer3);
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) integer3;
      objectArray0[1] = (Object) "fIN";
      objectArray0[2] = (Object) integer2;
      objectArray0[3] = null;
      objectArray0[4] = (Object) multiKey1;
      MultiKey<Object> multiKey3 = new MultiKey<Object>(objectArray0, false);
      MultiKey<Object> multiKey4 = new MultiKey<Object>(multiKey2, multiKey3, "", integer0);
      multiKeyArray0[1] = multiKey4;
      Integer integer4 = new Integer((-738));
      Integer integer5 = new Integer(1350);
      MultiKey<Object> multiKey5 = new MultiKey<Object>(objectArray0[1], integer4, "fIN", integer5);
      multiKeyArray0[2] = multiKey5;
      MultiKey<MultiKey<Object>> multiKey6 = new MultiKey<MultiKey<Object>>(multiKeyArray0, false);
      String string0 = multiKey6.toString();
      assertEquals("MultiKey[MultiKey[fIN, null, fIN], MultiKey[MultiKey[1650, 0, 0, 5], MultiKey[5, fIN, 0, null, MultiKey[fIN, null, fIN]], , 1650], MultiKey[fIN, -738, fIN, 1350]]", string0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Integer integer0 = new Integer((-2771));
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integer0, integer0);
      multiKey0.toString();
      multiKey0.toString();
      // Undeclared exception!
//      try { 
        multiKey0.getKey((-2771));
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // -2771
//         //
//         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
//      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>((String) null, "x_*-9");
      assertEquals(2, multiKey0.size());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      MultiKey<Integer> multiKey0 = null;
//      try {
        multiKey0 = new MultiKey<Integer>((Integer[]) null, false);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // The array of keys must not be null
//         //
//         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
//      }
  }
}
