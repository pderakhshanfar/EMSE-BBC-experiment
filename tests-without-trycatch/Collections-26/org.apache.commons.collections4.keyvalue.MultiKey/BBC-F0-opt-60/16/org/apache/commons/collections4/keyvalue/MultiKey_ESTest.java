/*
 * This file was automatically generated by EvoSuite
 * Wed Oct 20 12:28:56 GMT 2021
 */

package org.apache.commons.collections4.keyvalue;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.lang.reflect.Array;
import org.apache.commons.collections4.keyvalue.MultiKey;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class MultiKey_ESTest extends MultiKey_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Object object0 = new Object();
      MultiKey<Object> multiKey0 = new MultiKey<Object>(object0, object0);
      MultiKey<Object>[] multiKeyArray0 = (MultiKey<Object>[]) Array.newInstance(MultiKey.class, 0);
      MultiKey<MultiKey<Object>> multiKey1 = new MultiKey<MultiKey<Object>>(multiKeyArray0, true);
      multiKey1.toString();
      int int0 = multiKey1.size();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) "";
      objectArray0[1] = (Object) "";
      objectArray0[2] = (Object) "";
      objectArray0[3] = (Object) "";
      objectArray0[4] = (Object) "";
      objectArray0[5] = (Object) "";
      objectArray0[6] = (Object) "";
      objectArray0[7] = (Object) "";
      objectArray0[8] = (Object) "";
      MultiKey<Object> multiKey0 = new MultiKey<Object>(objectArray0);
      String string0 = multiKey0.toString();
      assertEquals("MultiKey[, , , , , , , , ]", string0);
      
      boolean boolean0 = multiKey0.equals(multiKey0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      MultiKey<Object> multiKey0 = new MultiKey<Object>("", "");
      MultiKey<String> multiKey1 = new MultiKey<String>("", "");
      boolean boolean0 = multiKey1.equals(multiKey0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("", "", "", "", "");
      MultiKey<Integer>[] multiKeyArray0 = (MultiKey<Integer>[]) Array.newInstance(MultiKey.class, 0);
      MultiKey<MultiKey<Integer>> multiKey1 = new MultiKey<MultiKey<Integer>>(multiKeyArray0);
      MultiKey<Integer>[] multiKeyArray1 = multiKey1.getKeys();
      assertNotSame(multiKeyArray1, multiKeyArray0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Object object0 = new Object();
      MultiKey<Object> multiKey0 = new MultiKey<Object>(object0, object0, object0);
      multiKey0.toString();
      multiKey0.toString();
      MultiKey<String> multiKey1 = new MultiKey<String>("The array of keys must not be null", "The array of keys must not be null", "", "");
      multiKey1.toString();
      multiKey1.toString();
      multiKey1.toString();
      multiKey1.toString();
      MultiKey<MultiKey<String>> multiKey2 = new MultiKey<MultiKey<String>>(multiKey1, multiKey1, multiKey1);
      multiKey2.toString();
      multiKey2.equals("The array of keys must not be null");
      Integer[] integerArray0 = new Integer[8];
      Integer integer0 = new Integer(0);
      integerArray0[0] = integer0;
      multiKey1.equals(integer0);
      MultiKey<String> multiKey3 = new MultiKey<String>("", "MultiKey[The array of keys must not be null, The array of keys must not be null, , ]");
      multiKey1.toString();
      MultiKey<String> multiKey4 = new MultiKey<String>("The array of keys must not be null", "MultiKey[The array of keys must not be null, The array of keys must not be null, , ]", "The array of keys must not be null", "The array of keys must not be null", (String) null);
      MultiKey<Object>[] multiKeyArray0 = (MultiKey<Object>[]) Array.newInstance(MultiKey.class, 9);
      multiKeyArray0[2] = multiKey0;
      multiKeyArray0[3] = multiKey0;
      multiKeyArray0[5] = multiKey0;
      multiKey0.toString();
      multiKeyArray0[6] = multiKey0;
      multiKeyArray0[8] = multiKey0;
      MultiKey<MultiKey<Object>> multiKey5 = new MultiKey<MultiKey<Object>>(multiKeyArray0);
      MultiKey<Object> multiKey6 = multiKey5.getKey(0);
      assertNull(multiKey6);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Integer integer0 = new Integer(0);
      MultiKey<String> multiKey0 = new MultiKey<String>("Afi>$xqCs*9K0SJ.T~&", "^Xi2B", "x;qw?-~==-& DR");
      MultiKey<Object> multiKey1 = new MultiKey<Object>(integer0, integer0, multiKey0);
      multiKey1.hashCode();
      Object[] objectArray0 = multiKey1.getKeys();
      Integer[] integerArray0 = new Integer[6];
      multiKey1.toString();
      integerArray0[0] = integer0;
      integerArray0[1] = integer0;
      integerArray0[2] = integer0;
      integerArray0[3] = integer0;
      multiKey1.toString();
      integerArray0[4] = integer0;
      integerArray0[5] = integer0;
      multiKey0.toString();
      MultiKey<Integer> multiKey2 = new MultiKey<Integer>(integerArray0, false);
      multiKey2.toString();
      multiKey1.size();
      MultiKey<MultiKey<String>> multiKey3 = new MultiKey<MultiKey<String>>(multiKey0, multiKey0, multiKey0, multiKey0, multiKey0);
      multiKey3.toString();
      multiKey3.toString();
      multiKey2.getKeys();
      multiKey1.equals("org.apache.commons.collections4.keyvalue.MultiKey");
      multiKey1.equals("MultiKey[0, 0, 0, 0, 0, 0]");
      MultiKey<Object>[] multiKeyArray0 = (MultiKey<Object>[]) Array.newInstance(MultiKey.class, 3);
      multiKeyArray0[0] = multiKey1;
      multiKeyArray0[1] = multiKey1;
      multiKeyArray0[2] = multiKey1;
      multiKey1.toString();
      MultiKey<MultiKey<Object>> multiKey4 = new MultiKey<MultiKey<Object>>(multiKeyArray0);
      multiKey4.hashCode();
      Object[] objectArray1 = multiKey1.getKeys();
      assertNotSame(objectArray1, objectArray0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Object object0 = new Object();
      MultiKey<Object> multiKey0 = new MultiKey<Object>(object0, object0, object0);
      multiKey0.toString();
      multiKey0.toString();
      MultiKey<String> multiKey1 = new MultiKey<String>("The array of keys must not be null", "The array of keys must not be null", "", "");
      multiKey1.toString();
      multiKey1.toString();
      multiKey1.toString();
      multiKey1.toString();
      MultiKey<MultiKey<String>> multiKey2 = new MultiKey<MultiKey<String>>(multiKey1, multiKey1, multiKey1);
      String string0 = multiKey2.toString();
      assertEquals("MultiKey[MultiKey[The array of keys must not be null, The array of keys must not be null, , ], MultiKey[The array of keys must not be null, The array of keys must not be null, , ], MultiKey[The array of keys must not be null, The array of keys must not be null, , ]]", string0);
      
      boolean boolean0 = multiKey2.equals("The array of keys must not be null");
      assertFalse(boolean0);
      
      Integer[] integerArray0 = new Integer[8];
      int int0 = 0;
      Integer integer0 = new Integer(0);
      integerArray0[0] = integer0;
      Integer integer1 = new Integer(0);
      integerArray0[1] = integer1;
      Integer integer2 = new Integer(int0);
      integerArray0[2] = integer2;
      Integer integer3 = new Integer(int0);
      integerArray0[3] = integer3;
      Integer integer4 = new Integer(0);
      integerArray0[4] = integer4;
      Integer integer5 = new Integer(int0);
      integerArray0[5] = integer5;
      Integer integer6 = new Integer(int0);
      integerArray0[6] = integer6;
      Integer integer7 = new Integer(int0);
      integerArray0[7] = integer7;
      MultiKey<Integer> multiKey3 = new MultiKey<Integer>(integerArray0);
      boolean boolean1 = multiKey0.equals(multiKey3);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      MultiKey<Object> multiKey0 = null;
//      try {
        multiKey0 = new MultiKey<Object>((Object[]) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // The array of keys must not be null
//         //
//         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
//      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Integer integer0 = new Integer(0);
      MultiKey<Object> multiKey0 = new MultiKey<Object>("", integer0);
      Integer integer1 = new Integer(0);
      Integer integer2 = new Integer(0);
      multiKey0.toString();
      multiKey0.toString();
      MultiKey<Integer> multiKey1 = new MultiKey<Integer>(integer1, integer2);
      multiKey1.toString();
      multiKey1.toString();
      multiKey1.toString();
      multiKey1.toString();
      multiKey1.toString();
      multiKey1.equals(integer0);
      multiKey0.toString();
      multiKey0.size();
      multiKey1.toString();
      multiKey1.toString();
      MultiKey<String> multiKey2 = new MultiKey<String>("[.(fW\"EL`MxBtBIM`Y", "The array of keys must not be null", "MultiKey[0, 0]", "MultiKey[, 0]");
      multiKey2.hashCode();
      MultiKey<Object>[] multiKeyArray0 = (MultiKey<Object>[]) Array.newInstance(MultiKey.class, 4);
      multiKeyArray0[0] = multiKey0;
      multiKeyArray0[1] = multiKey0;
      multiKeyArray0[2] = multiKey0;
      multiKeyArray0[3] = multiKey0;
      MultiKey<MultiKey<Object>> multiKey3 = new MultiKey<MultiKey<Object>>(multiKeyArray0);
      MultiKey<Object> multiKey4 = multiKey3.getKey(0);
      assertSame(multiKey4, multiKey0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Integer integer0 = new Integer(0);
      MultiKey<Object> multiKey0 = new MultiKey<Object>(integer0, integer0);
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      String string0 = multiKey0.toString();
      assertEquals("MultiKey[0, 0]", string0);
      
      boolean boolean0 = multiKey0.equals(integer0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Integer[] integerArray0 = new Integer[2];
      Integer integer0 = new Integer((-2529));
      integerArray0[0] = integer0;
      Integer integer1 = new Integer((-2529));
      integerArray0[1] = integer1;
      boolean boolean0 = false;
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integerArray0, false);
      multiKey0.toString();
      MultiKey<Object>[] multiKeyArray0 = (MultiKey<Object>[]) Array.newInstance(MultiKey.class, 7);
      Object object0 = new Object();
      Integer integer2 = new Integer((int) integerArray0[0]);
      Integer integer3 = new Integer((int) integerArray0[0]);
      MultiKey<Object> multiKey1 = new MultiKey<Object>(integerArray0[1], object0, integer2, integer3);
      multiKeyArray0[0] = multiKey1;
      Integer integer4 = new Integer((-1486));
      MultiKey<Object> multiKey2 = new MultiKey<Object>(integer3, integer2, integer0, integer4);
      multiKeyArray0[1] = multiKey2;
      MultiKey<Object> multiKey3 = new MultiKey<Object>(integerArray0);
      multiKeyArray0[2] = multiKey3;
      Object object1 = null;
      String[] stringArray0 = new String[9];
      stringArray0[0] = "MultiKey[-2529, -2529]";
      stringArray0[1] = "MultiKey[-2529, -2529]";
      stringArray0[2] = "MultiKey[-2529, -2529]";
      stringArray0[3] = "MultiKey[-2529, -2529]";
      stringArray0[4] = "";
      String string0 = "";
      stringArray0[5] = "";
      stringArray0[6] = "MultiKey[-2529, -2529]";
      stringArray0[7] = "MultiKey[-2529, -2529]";
      stringArray0[8] = "MultiKey[-2529, -2529]";
      MultiKey<String> multiKey4 = new MultiKey<String>(stringArray0);
      // Undeclared exception!
//      try { 
        multiKey4.getKey((-312));
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // -312
//         //
//         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
//      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      String[] stringArray0 = new String[7];
      stringArray0[0] = "(huofo#c{~?/e%H(XIo";
      String string0 = "=5E-hIH8{TVHKA";
      stringArray0[1] = "=5E-hIH8{TVHKA";
      stringArray0[2] = "";
      stringArray0[3] = "";
      stringArray0[4] = "";
      stringArray0[5] = "";
      stringArray0[6] = "gfagcO";
      MultiKey<String> multiKey0 = new MultiKey<String>(stringArray0);
      multiKey0.getKey(0);
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) "(huofo#c{~?/e%H(XIo";
      Object object0 = new Object();
      objectArray0[1] = object0;
      objectArray0[2] = (Object) "";
      MultiKey<Object> multiKey1 = new MultiKey<Object>(objectArray0, true);
      multiKey1.getKey(0);
      Object object1 = new Object();
      Integer integer0 = new Integer(0);
      Integer integer1 = new Integer(0);
      MultiKey<Integer> multiKey2 = new MultiKey<Integer>(integer0, integer0, integer1);
      // Undeclared exception!
//      try { 
        multiKey2.getKey((-2868));
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // -2868
//         //
//         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
//      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Object[] objectArray0 = new Object[7];
      int int0 = 1;
      Integer integer0 = new Integer(1);
      Integer integer1 = new Integer(0);
      Integer integer2 = new Integer(0);
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integer0, integer1, integer2, integer0);
      Integer integer3 = multiKey0.getKey(0);
      objectArray0[0] = (Object) integer3;
      Object object0 = new Object();
      objectArray0[1] = object0;
      boolean boolean0 = true;
      MultiKey<Integer> multiKey1 = null;
//      try {
        multiKey1 = new MultiKey<Integer>((Integer[]) null, true);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // The array of keys must not be null
//         //
//         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
//      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      String[] stringArray0 = new String[9];
      stringArray0[0] = "2{C;pmhrdl]r_w";
      stringArray0[1] = "The array of keys must not be null";
      stringArray0[2] = "";
      stringArray0[3] = "";
      stringArray0[4] = "org.apache.commons.collections4.keyvalue.MultiKey";
      stringArray0[5] = "tA*RT|,Y-`$N{";
      stringArray0[6] = "";
      stringArray0[7] = "";
      stringArray0[8] = "trX%YwB";
      MultiKey<String> multiKey0 = new MultiKey<String>(stringArray0, false);
      MultiKey<Object> multiKey1 = new MultiKey<Object>("trX%YwB", "trX%YwB");
      MultiKey<Object> multiKey2 = new MultiKey<Object>((Object[]) stringArray0, false);
      MultiKey<Object> multiKey3 = new MultiKey<Object>(multiKey0, (Object) null, multiKey1, multiKey2);
      MultiKey<MultiKey<Object>> multiKey4 = new MultiKey<MultiKey<Object>>(multiKey3, multiKey1, multiKey1, multiKey1, multiKey1);
      int int0 = multiKey4.size();
      assertEquals(5, int0);
  }
}
