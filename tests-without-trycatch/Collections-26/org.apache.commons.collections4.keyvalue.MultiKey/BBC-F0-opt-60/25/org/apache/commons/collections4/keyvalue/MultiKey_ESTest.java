/*
 * This file was automatically generated by EvoSuite
 * Fri Oct 22 17:42:00 GMT 2021
 */

package org.apache.commons.collections4.keyvalue;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.lang.reflect.Array;
import org.apache.commons.collections4.keyvalue.MultiKey;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class MultiKey_ESTest extends MultiKey_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("The array of keys must notbe null", "The array of keys must notbe null");
      boolean boolean0 = multiKey0.equals(multiKey0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("KpBQ7p[\"I>Re+=oi", "KpBQ7p[\"I>Re+=oi", "\"px8L]L", "\"px8L]L");
      MultiKey<String> multiKey1 = new MultiKey<String>("MultiKey", "org.apache.commons.collections4.keyvalue.MultiKey", "", "o%.+iy8Po3<0", "\"px8L]L");
      MultiKey<String> multiKey2 = new MultiKey<String>("org.apache.commons.collections4.keyvalue.MultiKey", "wEraHbnn", (String) null, "KJv$qg|!Er%1#vcv}oL");
      String string0 = multiKey2.toString();
      assertEquals("MultiKey[org.apache.commons.collections4.keyvalue.MultiKey, wEraHbnn, null, KJv$qg|!Er%1#vcv}oL]", string0);
      assertFalse(multiKey2.equals((Object)multiKey0));
      
      Integer integer0 = new Integer(3);
      Integer integer1 = new Integer(0);
      Integer[] integerArray0 = new Integer[6];
      integerArray0[0] = integer1;
      integerArray0[1] = integer1;
      integerArray0[2] = integer1;
      integerArray0[3] = integer0;
      Integer integer2 = new Integer(0);
      integerArray0[4] = integer2;
      integerArray0[5] = integer1;
      MultiKey<Integer> multiKey3 = new MultiKey<Integer>(integerArray0);
      MultiKey<Object> multiKey4 = new MultiKey<Object>(integerArray0);
      boolean boolean0 = multiKey3.equals(multiKey4);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("I.6/d:]mfC@w", "I.6/d:]mfC@w", "I.6/d:]mfC@w", "I.6/d:]mfC@w", "I.6/d:]mfC@w");
      multiKey0.toString();
      Integer[] integerArray0 = new Integer[0];
      MultiKey<Integer> multiKey1 = new MultiKey<Integer>(integerArray0);
      multiKey1.toString();
      int int0 = multiKey1.size();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      MultiKey<Object> multiKey0 = new MultiKey<Object>((Object) null, (Object) null);
      multiKey0.getKeys();
      MultiKey<Integer>[] multiKeyArray0 = (MultiKey<Integer>[]) Array.newInstance(MultiKey.class, 0);
      MultiKey<MultiKey<Integer>> multiKey1 = new MultiKey<MultiKey<Integer>>(multiKeyArray0, true);
      multiKey0.toString();
      multiKey1.toString();
      multiKey1.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey1.getKeys();
      multiKey0.equals(multiKey1);
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.getKeys();
      // Undeclared exception!
//      try { 
        multiKey0.getKey((-2904));
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // -2904
//         //
//         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
//      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Integer integer0 = new Integer((-430));
      MultiKey<Object> multiKey0 = new MultiKey<Object>(integer0, integer0, integer0);
      multiKey0.toString();
      multiKey0.size();
      MultiKey<String> multiKey1 = null;
//      try {
        multiKey1 = new MultiKey<String>((String[]) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // The array of keys must not be null
//         //
//         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
//      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      String string0 = null;
      MultiKey<Object> multiKey0 = new MultiKey<Object>((Object) null, (Object) null);
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      int int0 = 0;
      multiKey0.getKey(0);
      multiKey0.toString();
      Integer[] integerArray0 = new Integer[0];
      MultiKey<Integer> multiKey1 = new MultiKey<Integer>(integerArray0);
      multiKey0.toString();
      // Undeclared exception!
//      try { 
        multiKey1.getKey(0);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 0
//         //
//         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
//      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      MultiKey<String> multiKey0 = null;
//      try {
        multiKey0 = new MultiKey<String>((String[]) null, true);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // The array of keys must not be null
//         //
//         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
//      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      String string0 = null;
      Object object0 = new Object();
      MultiKey<Object> multiKey0 = new MultiKey<Object>((Object) null, object0);
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.getKeys();
      multiKey0.hashCode();
      String[] stringArray0 = new String[8];
      stringArray0[0] = "MultiKey[null, java.lang.Object@571b1a6e]";
      stringArray0[1] = "MultiKey[null, java.lang.Object@571b1a6e]";
      stringArray0[2] = "MultiKey[null, java.lang.Object@571b1a6e]";
      stringArray0[3] = "MultiKey[null, java.lang.Object@571b1a6e]";
      stringArray0[4] = "MultiKey[null, java.lang.Object@571b1a6e]";
      stringArray0[5] = null;
      stringArray0[6] = null;
      stringArray0[7] = "MultiKey[null, java.lang.Object@571b1a6e]";
      MultiKey<String> multiKey1 = new MultiKey<String>(stringArray0);
      multiKey1.toString();
      multiKey1.toString();
      multiKey1.size();
      multiKey1.toString();
      MultiKey<String> multiKey2 = new MultiKey<String>(stringArray0, true);
      multiKey2.toString();
      multiKey2.getKey(0);
      multiKey2.toString();
      MultiKey<Object> multiKey3 = new MultiKey<Object>("MultiKey[MultiKey[null, java.lang.Object@571b1a6e], MultiKey[null, java.lang.Object@571b1a6e], MultiKey[null, java.lang.Object@571b1a6e], MultiKey[null, java.lang.Object@571b1a6e], MultiKey[null, java.lang.Object@571b1a6e], null, null, MultiKey[null, java.lang.Object@571b1a6e]]", "MultiKey[null, java.lang.Object@571b1a6e]");
      // Undeclared exception!
//      try { 
        multiKey3.getKey(265);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 265
//         //
//         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
//      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>((String) null, "The array of keys must not be null", "", "The array of keys must not be null");
      multiKey0.hashCode();
      Integer[] integerArray0 = new Integer[8];
      Integer integer0 = new Integer(0);
      integerArray0[0] = integer0;
      Integer integer1 = new Integer(427);
      integerArray0[1] = integer1;
      Integer integer2 = new Integer((-2587));
      integerArray0[2] = integer2;
      Integer integer3 = new Integer((int) integerArray0[2]);
      integerArray0[3] = integer3;
      Integer integer4 = new Integer((int) integerArray0[1]);
      integerArray0[4] = integer4;
      Integer integer5 = new Integer((-1));
      integerArray0[5] = integer5;
      Integer integer6 = new Integer(195);
      integerArray0[6] = integer6;
      Integer integer7 = new Integer(427);
      integerArray0[7] = integer7;
      MultiKey<Integer> multiKey1 = new MultiKey<Integer>(integerArray0, false);
      boolean boolean0 = multiKey0.equals(multiKey1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Object[] objectArray0 = new Object[1];
      Integer integer0 = new Integer((-3292));
      MultiKey<Object> multiKey0 = new MultiKey<Object>(integer0, integer0, integer0, integer0, "k(;_#n~8mh5pht(+");
      Object object0 = multiKey0.getKey(0);
      objectArray0[0] = object0;
      MultiKey<Object> multiKey1 = new MultiKey<Object>(objectArray0, false);
      MultiKey<Object> multiKey2 = new MultiKey<Object>(multiKey1, objectArray0[0]);
      MultiKey<Object> multiKey3 = new MultiKey<Object>(objectArray0, false);
      multiKey3.toString();
      String[] stringArray0 = new String[5];
      stringArray0[0] = "k(;_#n~8mh5pht(+";
      stringArray0[1] = "k(;_#n~8mh5pht(+";
      stringArray0[2] = "k(;_#n~8mh5pht(+";
      multiKey3.toString();
      stringArray0[3] = "k(;_#n~8mh5pht(+";
      stringArray0[4] = "k(;_#n~8mh5pht(+";
      MultiKey<String> multiKey4 = new MultiKey<String>(stringArray0);
      multiKey4.getKey(0);
      MultiKey<Object> multiKey5 = new MultiKey<Object>(object0, multiKey3, "k(;_#n~8mh5pht(+", objectArray0[0]);
      multiKey5.toString();
      MultiKey<MultiKey<Object>> multiKey6 = new MultiKey<MultiKey<Object>>(multiKey2, multiKey5, multiKey1);
      multiKey4.toString();
      multiKey6.size();
      multiKey4.toString();
      multiKey5.equals("MultiKey");
      multiKey5.size();
      // Undeclared exception!
//      try { 
        multiKey6.getKey(4);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 4
//         //
//         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
//      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("", (String) null, "K");
      int int0 = multiKey0.size();
      assertEquals(3, int0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("\"px8L]L", "KpBQ7p[\"I>Re+=oi", "KpBQ7p[\"I>Re+=oi");
      MultiKey<Object> multiKey1 = new MultiKey<Object>((Object) null, multiKey0);
      assertEquals(2, multiKey1.size());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Integer[] integerArray0 = new Integer[3];
      int int0 = 2;
      Integer integer0 = new Integer(2);
      integerArray0[0] = integer0;
      Integer integer1 = new Integer(2);
      integerArray0[1] = integer1;
      Integer integer2 = new Integer(int0);
      integerArray0[2] = integer2;
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integerArray0);
      multiKey0.toString();
      MultiKey<Integer> multiKey1 = new MultiKey<Integer>(integerArray0, false);
      // Undeclared exception!
//      try { 
        multiKey1.getKey(183);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 183
//         //
//         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
//      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      String string0 = "wDju$qG_6Po+ti}";
      String string1 = "";
      MultiKey<String> multiKey0 = new MultiKey<String>((String) null, "wDju$qG_6Po+ti}", "YESgC1/FbCBoJ[87V{m", "");
      Integer integer0 = new Integer(0);
      Integer integer1 = new Integer(0);
      Integer integer2 = new Integer((-1283));
      MultiKey<Integer> multiKey1 = new MultiKey<Integer>(integer0, integer1, integer2);
      // Undeclared exception!
//      try { 
        multiKey1.getKey((-1283));
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // -1283
//         //
//         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
//      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Object object0 = new Object();
      MultiKey<Object> multiKey0 = new MultiKey<Object>("", "{J", object0);
      MultiKey<Object> multiKey1 = new MultiKey<Object>(multiKey0, "{J", "{J", "");
      MultiKey<String> multiKey2 = new MultiKey<String>("", "?p@zk\"Ged<{+vT!P", "");
      Object object1 = new Object();
      MultiKey<Object> multiKey3 = new MultiKey<Object>(multiKey1, "", multiKey2, object1);
      assertFalse(multiKey3.equals((Object)multiKey1));
  }
}
