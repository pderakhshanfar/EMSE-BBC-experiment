/*
 * This file was automatically generated by EvoSuite
 * Wed Oct 20 12:35:28 GMT 2021
 */

package org.apache.commons.collections4.keyvalue;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.lang.reflect.Array;
import org.apache.commons.collections4.keyvalue.MultiKey;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class MultiKey_ESTest extends MultiKey_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("", "", "");
      MultiKey<MultiKey<String>> multiKey1 = new MultiKey<MultiKey<String>>(multiKey0, multiKey0, multiKey0, multiKey0);
      boolean boolean0 = multiKey1.equals(multiKey0);
      Object object0 = new Object();
      Integer integer0 = new Integer((-1));
      MultiKey<Object> multiKey2 = new MultiKey<Object>("", object0, "", integer0, object0);
      multiKey2.toString();
      Object object1 = new Object();
      MultiKey<Object>[] multiKeyArray0 = (MultiKey<Object>[]) Array.newInstance(MultiKey.class, 7);
      multiKeyArray0[0] = multiKey2;
      multiKeyArray0[1] = multiKey2;
      multiKeyArray0[2] = multiKey2;
      multiKeyArray0[3] = multiKey2;
      multiKeyArray0[4] = multiKey2;
      multiKeyArray0[5] = multiKey2;
      multiKeyArray0[6] = multiKey2;
      MultiKey<MultiKey<Object>> multiKey3 = new MultiKey<MultiKey<Object>>(multiKeyArray0);
      multiKey3.toString();
      MultiKey<String> multiKey4 = new MultiKey<String>("I.}=@}H/Yk)r_+", "I.}=@}H/Yk)r_+");
      MultiKey<Object> multiKey5 = new MultiKey<Object>(multiKey2, multiKey2, "", multiKey4, "");
      multiKey2.toString();
      multiKey2.toString();
      boolean boolean1 = multiKey2.equals(multiKey2);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) "r}Q)QN2x";
      objectArray0[1] = (Object) "r}Q)QN2x";
      objectArray0[2] = (Object) "r}Q)QN2x";
      MultiKey<Object> multiKey0 = new MultiKey<Object>(objectArray0);
      String string0 = multiKey0.toString();
      assertEquals("MultiKey[r}Q)QN2x, r}Q)QN2x, r}Q)QN2x]", string0);
      
      MultiKey<Object> multiKey1 = new MultiKey<Object>(objectArray0);
      boolean boolean0 = multiKey0.equals(multiKey1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("", (String) null, (String) null, "", "");
      multiKey0.toString();
      multiKey0.toString();
      Integer[] integerArray0 = new Integer[0];
      MultiKey<Integer> multiKey1 = new MultiKey<Integer>(integerArray0);
      multiKey1.toString();
      MultiKey<Object> multiKey2 = new MultiKey<Object>((Object[]) integerArray0, false);
      Object[] objectArray0 = multiKey2.getKeys();
      assertEquals(0, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Integer integer0 = new Integer((-2427));
      Integer integer1 = new Integer(0);
      Integer integer2 = new Integer((-1369));
      Integer[] integerArray0 = new Integer[0];
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integerArray0);
      int int0 = multiKey0.size();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      String[] stringArray0 = new String[5];
      MultiKey<String> multiKey0 = new MultiKey<String>(stringArray0);
      String string0 = multiKey0.getKey(0);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("", "", "", "");
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) "";
      MultiKey<Object> multiKey1 = new MultiKey<Object>(objectArray0);
      multiKey1.toString();
      multiKey1.toString();
      multiKey1.getKeys();
      MultiKey<MultiKey<Object>> multiKey2 = new MultiKey<MultiKey<Object>>(multiKey1, multiKey1);
      multiKey2.toString();
      MultiKey<MultiKey<Object>> multiKey3 = null;
//      try {
        multiKey3 = new MultiKey<MultiKey<Object>>((MultiKey<Object>[]) null, true);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // The array of keys must not be null
//         //
//         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
//      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      MultiKey<Object> multiKey0 = null;
//      try {
        multiKey0 = new MultiKey<Object>((Object[]) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // The array of keys must not be null
//         //
//         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
//      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Integer integer0 = new Integer((-501));
      Integer integer1 = new Integer((-501));
      Integer integer2 = new Integer(0);
      Integer integer3 = new Integer(0);
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integer0, integer1, integer2, integer3);
      MultiKey<MultiKey<Integer>> multiKey1 = new MultiKey<MultiKey<Integer>>(multiKey0, multiKey0, multiKey0, multiKey0, multiKey0);
      multiKey1.toString();
      MultiKey<String> multiKey2 = new MultiKey<String>("", (String) null, "-SaP:sK%gorNN", "");
      multiKey2.toString();
      multiKey2.toString();
      multiKey1.equals(multiKey2);
      multiKey0.equals("-SaP:sK%gorNN");
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) integer1;
      objectArray0[1] = (Object) "";
      objectArray0[2] = (Object) integer2;
      objectArray0[3] = (Object) multiKey0;
      MultiKey<Object> multiKey3 = new MultiKey<Object>(objectArray0);
      multiKey3.hashCode();
      MultiKey<Object> multiKey4 = new MultiKey<Object>(objectArray0, false);
      // Undeclared exception!
//      try { 
        multiKey4.getKey((-2040));
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // -2040
//         //
//         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
//      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      String[] stringArray0 = new String[1];
      stringArray0[0] = "MultiKey";
      MultiKey<String> multiKey0 = new MultiKey<String>(stringArray0);
      int int0 = multiKey0.size();
      int int1 = multiKey0.hashCode();
      assertTrue(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      String[] stringArray0 = new String[3];
      stringArray0[0] = "";
      stringArray0[1] = "^Twwq}2;K;PivMiOhnJ";
      stringArray0[2] = "8ppAD9k daj";
      MultiKey<String> multiKey0 = new MultiKey<String>(stringArray0);
      MultiKey<String>[] multiKeyArray0 = (MultiKey<String>[]) Array.newInstance(MultiKey.class, 5);
      multiKeyArray0[0] = multiKey0;
      multiKeyArray0[1] = multiKey0;
      multiKeyArray0[2] = multiKey0;
      multiKeyArray0[3] = multiKey0;
      MultiKey<String> multiKey1 = new MultiKey<String>((String) null, (String) null, "");
      multiKeyArray0[4] = multiKey1;
      MultiKey<MultiKey<String>> multiKey2 = new MultiKey<MultiKey<String>>(multiKeyArray0);
      multiKey2.toString();
      MultiKey<String> multiKey3 = new MultiKey<String>("8ppAD9k daj", "XPGM-}xd/m~u+:0(5", "MultiKey[MultiKey[, ^Twwq}2;K;PivMiOhnJ, 8ppAD9k daj], MultiKey[, ^Twwq}2;K;PivMiOhnJ, 8ppAD9k daj], MultiKey[, ^Twwq}2;K;PivMiOhnJ, 8ppAD9k daj], MultiKey[, ^Twwq}2;K;PivMiOhnJ, 8ppAD9k daj], MultiKey[null, null, ]]");
      int int0 = 3;
      // Undeclared exception!
//      try { 
        multiKey3.getKey(3);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 3
//         //
//         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
//      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Integer integer0 = new Integer(0);
      Integer integer1 = new Integer(0);
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integer0, integer0, integer1, integer0);
      multiKey0.toString();
      String string0 = multiKey0.toString();
      assertEquals("MultiKey[0, 0, 0, 0]", string0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Object[] objectArray0 = new Object[9];
      Object object0 = new Object();
      objectArray0[0] = object0;
      int int0 = (-2931);
      Integer integer0 = new Integer((-2931));
      Integer integer1 = new Integer((-2931));
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integer0, integer0, integer0, integer1);
      int int1 = (-205);
      // Undeclared exception!
//      try { 
        multiKey0.getKey((-205));
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // -205
//         //
//         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
//      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Integer[] integerArray0 = new Integer[3];
      int int0 = 2;
      Integer integer0 = new Integer(2);
      integerArray0[0] = integer0;
      Integer integer1 = new Integer((-1343));
      integerArray0[1] = integer1;
      Integer integer2 = new Integer(int0);
      integerArray0[2] = integer2;
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integerArray0, true);
      String string0 = "G{T>)%u?^{}/tA1&? ";
      Integer integer3 = new Integer((-1343));
      int int1 = 1;
      Integer integer4 = new Integer(1);
      MultiKey<Integer> multiKey1 = new MultiKey<Integer>(integer2, integer3, integer4);
      // Undeclared exception!
//      try { 
        multiKey1.getKey(577);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 577
//         //
//         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
//      }
  }
}
