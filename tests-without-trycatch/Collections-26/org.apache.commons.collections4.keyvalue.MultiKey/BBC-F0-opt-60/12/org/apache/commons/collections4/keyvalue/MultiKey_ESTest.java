/*
 * This file was automatically generated by EvoSuite
 * Wed Oct 20 12:16:57 GMT 2021
 */

package org.apache.commons.collections4.keyvalue;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.collections4.keyvalue.MultiKey;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class MultiKey_ESTest extends MultiKey_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      MultiKey<Object> multiKey0 = new MultiKey<Object>((Object) null, (Object) null);
      multiKey0.toString();
      multiKey0.equals(multiKey0);
      MultiKey<String> multiKey1 = new MultiKey<String>("", "(;?)xO{>x'2X{P,l[s", "The array of keys must not be null", "");
      // Undeclared exception!
//      try { 
        multiKey1.getKey((-1264));
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // -1264
//         //
//         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
//      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Integer[] integerArray0 = new Integer[0];
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integerArray0, false);
      multiKey0.toString();
      multiKey0.size();
      Integer integer0 = new Integer(1);
      Integer integer1 = new Integer(1);
      Integer integer2 = new Integer(1172);
      Object object0 = new Object();
      Object object1 = new Object();
      MultiKey<Object> multiKey1 = new MultiKey<Object>(integerArray0);
      multiKey0.hashCode();
      MultiKey<String> multiKey2 = new MultiKey<String>("MultiKey[]", "", "");
      multiKey1.getKeys();
      multiKey1.hashCode();
      MultiKey<String> multiKey3 = new MultiKey<String>("", "MultiKey[]");
      assertFalse(multiKey3.equals((Object)multiKey2));
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Integer[] integerArray0 = new Integer[0];
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integerArray0, false);
      multiKey0.toString();
      multiKey0.size();
      Integer integer0 = new Integer(1172);
      Integer integer1 = new Integer(1);
      Integer integer2 = new Integer(1);
      MultiKey<Integer> multiKey1 = new MultiKey<Integer>(integer0, integer0, integer0, integer1, integer2);
      Integer integer3 = new Integer(1172);
      MultiKey<Integer> multiKey2 = new MultiKey<Integer>(integer1, integer1, integer3);
      MultiKey<Object> multiKey3 = new MultiKey<Object>(multiKey2, integer2, integer2, multiKey1);
      MultiKey<Object> multiKey4 = new MultiKey<Object>(multiKey1, multiKey3, integer0);
      multiKey4.toString();
      multiKey4.size();
      multiKey0.toString();
      multiKey4.getKeys();
      multiKey3.hashCode();
      // Undeclared exception!
//      try { 
        multiKey4.getKey(3);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 3
//         //
//         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
//      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      MultiKey<Object> multiKey0 = null;
//      try {
        multiKey0 = new MultiKey<Object>((Object[]) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // The array of keys must not be null
//         //
//         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
//      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      MultiKey<Integer> multiKey0 = null;
//      try {
        multiKey0 = new MultiKey<Integer>((Integer[]) null, false);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // The array of keys must not be null
//         //
//         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
//      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("ZVojQQdtZ|;J", "ZVojQQdtZ|;J", "$5fVczdUIfd:2Pnt;x", "$5fVczdUIfd:2Pnt;x", "!D$");
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.equals("ZVojQQdtZ|;J");
      Integer[] integerArray0 = new Integer[5];
      int int0 = 4;
      Integer integer0 = new Integer(4);
      multiKey0.toString();
      integerArray0[0] = integer0;
      int int1 = 0;
      Integer integer1 = new Integer(0);
      integerArray0[1] = integer1;
      Integer integer2 = new Integer(int1);
      integerArray0[2] = integer2;
      Integer integer3 = new Integer(0);
      integerArray0[3] = integer3;
      Integer integer4 = new Integer(int1);
      integerArray0[4] = integer4;
      MultiKey<Integer> multiKey1 = new MultiKey<Integer>(integerArray0);
      multiKey1.toString();
      multiKey1.toString();
      multiKey1.toString();
      int int2 = multiKey1.hashCode();
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      
      multiKey1.toString();
      Integer integer5 = multiKey1.getKey(int0);
      multiKey1.size();
      multiKey0.equals("MultiKey[4, 0, 0, 0, 0]");
      MultiKey<Object> multiKey2 = new MultiKey<Object>(integerArray0);
      multiKey2.toString();
      String string0 = multiKey1.toString();
      assertEquals("MultiKey[4, 0, 0, 0, 0]", string0);
      
      multiKey2.equals(int1);
      boolean boolean0 = multiKey2.equals(integer5);
      assertFalse(boolean0);
      
      multiKey1.size();
      int int3 = multiKey0.hashCode();
      assertFalse(int3 == int0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      MultiKey<Object> multiKey0 = new MultiKey<Object>((Object) null, (Object) null, (Object) null);
      String[] stringArray0 = new String[8];
      multiKey0.toString();
      stringArray0[0] = "";
      stringArray0[1] = "_\"]-";
      multiKey0.toString();
      stringArray0[2] = "/$N";
      stringArray0[3] = "j-.bju>!+'kXm4br";
      multiKey0.toString();
      stringArray0[4] = "TMr[X|`Xn";
      stringArray0[5] = "ovMp$z\u0005 LvE#}|_1t";
      stringArray0[6] = "";
      stringArray0[7] = "";
      MultiKey<String> multiKey1 = new MultiKey<String>(stringArray0);
      multiKey1.toString();
      multiKey0.toString();
      multiKey1.toString();
      multiKey0.toString();
      multiKey1.toString();
      multiKey1.toString();
      multiKey0.size();
      multiKey1.hashCode();
      multiKey0.toString();
      multiKey0.getKeys();
      multiKey1.getKeys();
      Integer integer0 = new Integer(3);
      MultiKey<Integer> multiKey2 = new MultiKey<Integer>(integer0, integer0, integer0, integer0);
      int int0 = multiKey2.size();
      assertEquals(4, int0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Object object0 = new Object();
      MultiKey<String> multiKey0 = new MultiKey<String>("5wd(5>e5Q c{ZaF", (String) null, (String) null, (String) null, (String) null);
      MultiKey<Object> multiKey1 = new MultiKey<Object>(object0, multiKey0, (Object) null);
      multiKey1.equals(multiKey0);
      // Undeclared exception!
//      try { 
        multiKey1.getKey(1411);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 1411
//         //
//         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
//      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Integer integer0 = new Integer(1802);
      Integer integer1 = new Integer(0);
      Integer integer2 = new Integer(1802);
      MultiKey<Object> multiKey0 = new MultiKey<Object>(integer0, integer1, (Object) null, integer2);
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      // Undeclared exception!
//      try { 
        multiKey0.getKey(4);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 4
//         //
//         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
//      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Integer integer0 = new Integer((-229));
      Integer integer1 = new Integer((-229));
      Integer integer2 = new Integer((-229));
      Integer integer3 = new Integer((-1160));
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integer0, integer1, integer0, integer2, integer3);
      multiKey0.toString();
      MultiKey<Object> multiKey1 = new MultiKey<Object>(multiKey0, integer2);
      MultiKey<MultiKey<Object>> multiKey2 = new MultiKey<MultiKey<Object>>(multiKey1, multiKey1, multiKey1, multiKey1, multiKey1);
      multiKey2.hashCode();
      MultiKey<String> multiKey3 = new MultiKey<String>("u", "uDao9@#|Ot", "uDao9@#|Ot");
      multiKey3.toString();
      multiKey3.toString();
      multiKey0.toString();
      multiKey3.toString();
      multiKey3.getKey(1);
      // Undeclared exception!
//      try { 
        multiKey0.getKey((-1160));
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // -1160
//         //
//         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
//      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      String string0 = null;
      MultiKey<String> multiKey0 = new MultiKey<String>((String) null, (String) null);
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) null;
      objectArray0[1] = (Object) null;
      objectArray0[2] = (Object) multiKey0;
      objectArray0[3] = (Object) null;
      objectArray0[4] = (Object) multiKey0;
      MultiKey<Object> multiKey1 = new MultiKey<Object>(objectArray0, false);
      // Undeclared exception!
//      try { 
        multiKey1.getKey(120);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 120
//         //
//         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
//      }
  }
}
