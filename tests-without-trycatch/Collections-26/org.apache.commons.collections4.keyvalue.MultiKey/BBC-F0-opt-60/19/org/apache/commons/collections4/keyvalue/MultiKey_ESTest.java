/*
 * This file was automatically generated by EvoSuite
 * Wed Oct 20 12:39:08 GMT 2021
 */

package org.apache.commons.collections4.keyvalue;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.lang.reflect.Array;
import org.apache.commons.collections4.keyvalue.MultiKey;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class MultiKey_ESTest extends MultiKey_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Object object0 = new Object();
      Integer integer0 = new Integer(1366);
      Integer integer1 = new Integer(1366);
      Integer integer2 = new Integer(3);
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integer0, integer1, integer2, integer0);
      multiKey0.toString();
      multiKey0.equals(multiKey0);
      String[] stringArray0 = new String[6];
      stringArray0[0] = "";
      stringArray0[1] = "";
      multiKey0.toString();
      stringArray0[2] = "";
      stringArray0[3] = "";
      stringArray0[4] = "";
      stringArray0[5] = "";
      MultiKey<String> multiKey1 = new MultiKey<String>(stringArray0);
      Object object1 = new Object();
      Object object2 = new Object();
      Object object3 = new Object();
      multiKey1.toString();
      MultiKey<Object> multiKey2 = new MultiKey<Object>("", (Object) null, object0, object3, multiKey1);
      // Undeclared exception!
//      try { 
        multiKey2.getKey(1366);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 1366
//         //
//         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
//      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("F", "F", "F", "F", "F");
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      MultiKey<Object> multiKey1 = null;
//      try {
        multiKey1 = new MultiKey<Object>((Object[]) null, true);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // The array of keys must not be null
//         //
//         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
//      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Integer integer0 = new Integer(0);
      Integer integer1 = new Integer(0);
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integer0, integer1, integer0);
      Object[] objectArray0 = new Object[0];
      MultiKey<Object> multiKey1 = new MultiKey<Object>(objectArray0);
      int int0 = multiKey1.size();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Integer integer0 = new Integer(0);
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integer0, integer0);
      MultiKey<MultiKey<Integer>> multiKey1 = new MultiKey<MultiKey<Integer>>(multiKey0, multiKey0, multiKey0, multiKey0);
      Integer integer1 = new Integer(0);
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      int int0 = multiKey0.size();
      String[] stringArray0 = new String[5];
      stringArray0[0] = "MultiKey[0, 0]";
      stringArray0[1] = "MultiKey[0, 0]";
      stringArray0[2] = "MultiKey[0, 0]";
      stringArray0[3] = "MultiKey[0, 0]";
      stringArray0[4] = "MultiKey[0, 0]";
      MultiKey<String> multiKey2 = new MultiKey<String>(stringArray0, true);
      multiKey2.equals("MultiKey[0, 0]");
      multiKey0.getKey(0);
      Object object0 = new Object();
      MultiKey<Object> multiKey3 = new MultiKey<Object>((Object[]) stringArray0, false);
      MultiKey<Object> multiKey4 = new MultiKey<Object>(stringArray0);
      multiKey3.equals(multiKey4);
      multiKey4.getKey(0);
      multiKey3.getKeys();
      int int1 = multiKey2.hashCode();
      assertFalse(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      int int0 = (-1263);
      Integer integer0 = new Integer((-1263));
      MultiKey<Object> multiKey0 = new MultiKey<Object>((Object) null, integer0, integer0, integer0);
      MultiKey<Object> multiKey1 = new MultiKey<Object>(multiKey0, (Object) null, "4&bh5", "4&bh5", "");
      multiKey1.getKey(1);
      Object object0 = new Object();
      multiKey1.toString();
      MultiKey<Object> multiKey2 = new MultiKey<Object>("", "4&bh5", object0, (Object) null);
      Integer integer1 = new Integer((-1263));
      MultiKey<Object> multiKey3 = new MultiKey<Object>((Object) null, multiKey0, multiKey2, integer1);
      multiKey3.getKeys();
      MultiKey<String> multiKey4 = new MultiKey<String>("4&bh5", "4&bh5", "");
      multiKey4.toString();
      multiKey4.size();
      // Undeclared exception!
//      try { 
        multiKey4.getKey((-1263));
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // -1263
//         //
//         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
//      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Integer integer0 = new Integer(1);
      Integer integer1 = new Integer(3);
      String[] stringArray0 = new String[0];
      Object object0 = new Object();
      Object object1 = new Object();
      Integer[] integerArray0 = new Integer[0];
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integerArray0);
      multiKey0.equals("cX,E5p;Q)]bU}6D");
      MultiKey<Object> multiKey1 = new MultiKey<Object>(stringArray0);
      multiKey1.getKeys();
      Integer[] integerArray1 = multiKey0.getKeys();
      assertNotSame(integerArray0, integerArray1);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Integer integer0 = new Integer((-1805));
      MultiKey<Object> multiKey0 = new MultiKey<Object>((Object) null, integer0, (Object) null, (Object) null);
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      String string0 = multiKey0.toString();
      assertEquals("MultiKey[null, -1805, null, null]", string0);
      
      Integer integer1 = new Integer(728);
      boolean boolean0 = multiKey0.equals(integer1);
      assertFalse(boolean0);
      
      String[] stringArray0 = new String[1];
      stringArray0[0] = "MultiKey[null, -1805, null, null]";
      MultiKey<String> multiKey1 = new MultiKey<String>(stringArray0);
      multiKey1.getKeys();
      Integer integer2 = new Integer(0);
      Integer integer3 = new Integer((-1805));
      MultiKey<Integer> multiKey2 = new MultiKey<Integer>(integer2, integer2, integer1, integer3, integer2);
      multiKey2.hashCode();
      multiKey1.hashCode();
      Integer integer4 = new Integer((-71));
      MultiKey<Integer> multiKey3 = new MultiKey<Integer>(integer0, integer4);
      MultiKey<MultiKey<Integer>> multiKey4 = new MultiKey<MultiKey<Integer>>(multiKey2, multiKey2, multiKey3, multiKey2);
      boolean boolean1 = multiKey4.equals(multiKey3);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("", "", "");
      MultiKey<MultiKey<Object>> multiKey1 = null;
//      try {
        multiKey1 = new MultiKey<MultiKey<Object>>((MultiKey<Object>[]) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // The array of keys must not be null
//         //
//         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
//      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Object[] objectArray0 = new Object[1];
      Object object0 = new Object();
      objectArray0[0] = object0;
      MultiKey<Object> multiKey0 = new MultiKey<Object>(objectArray0);
      String[] stringArray0 = new String[7];
      stringArray0[0] = "G8";
      stringArray0[1] = " ,]`]]_9:Z'Ym`Qt";
      stringArray0[2] = "";
      stringArray0[3] = "4%qsle%CjQ0?h";
      stringArray0[4] = "";
      stringArray0[5] = "The array of keys must not be null";
      stringArray0[6] = "MultiKey";
      MultiKey<String> multiKey1 = new MultiKey<String>(stringArray0, true);
      multiKey1.equals(object0);
      multiKey0.getKeys();
      int int0 = multiKey1.size();
      multiKey0.hashCode();
      multiKey1.getKeys();
      multiKey0.toString();
      multiKey0.equals("v4wcHMXG");
      multiKey0.equals("The array of keys must not be null");
      MultiKey<String>[] multiKeyArray0 = (MultiKey<String>[]) Array.newInstance(MultiKey.class, 2);
      multiKeyArray0[0] = multiKey1;
      multiKeyArray0[1] = multiKey1;
      MultiKey<MultiKey<String>> multiKey2 = new MultiKey<MultiKey<String>>(multiKeyArray0);
      int int1 = multiKey2.hashCode();
      assertFalse(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Object object0 = new Object();
      Integer integer0 = new Integer((-2971));
      MultiKey<Object> multiKey0 = new MultiKey<Object>("", object0, "", object0, integer0);
      Object[] objectArray0 = multiKey0.getKeys();
      assertEquals(5, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("y>%7{Y", "");
      multiKey0.toString();
      Object object0 = new Object();
      Object object1 = new Object();
      MultiKey<Object> multiKey1 = new MultiKey<Object>(object0, object0, object1, object0);
      multiKey0.toString();
      MultiKey<MultiKey<Object>> multiKey2 = new MultiKey<MultiKey<Object>>(multiKey1, multiKey1, multiKey1);
      multiKey2.toString();
      multiKey2.toString();
      multiKey2.toString();
      Integer integer0 = new Integer(0);
      MultiKey<Integer> multiKey3 = new MultiKey<Integer>(integer0, integer0, integer0);
      multiKey3.toString();
      multiKey3.toString();
      multiKey0.toString();
      multiKey3.toString();
      multiKey3.toString();
      multiKey3.toString();
      multiKey3.size();
      multiKey0.equals("MultiKey[0, 0, 0]");
      multiKey3.getKey(0);
      Object object2 = new Object();
      multiKey1.equals(object2);
      // Undeclared exception!
//      try { 
        multiKey1.getKey((-2505));
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // -2505
//         //
//         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
//      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Object object0 = new Object();
      Object object1 = new Object();
      Integer[] integerArray0 = new Integer[4];
      int int0 = 1;
      Integer integer0 = new Integer(1);
      integerArray0[0] = integer0;
      Integer integer1 = new Integer(3);
      integerArray0[1] = integer1;
      Integer integer2 = new Integer(372);
      integerArray0[2] = integer2;
      Integer integer3 = new Integer(int0);
      integerArray0[3] = integer3;
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integerArray0);
      Object object2 = multiKey0.getKey(int0);
      assertEquals(3, object2);
      
      MultiKey<Object> multiKey1 = new MultiKey<Object>(object0, object1, object2, "");
      MultiKey<MultiKey<Object>> multiKey2 = new MultiKey<MultiKey<Object>>(multiKey1, multiKey1, multiKey1, multiKey1);
      assertTrue(object2.equals((Object)integer1));
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Object[] objectArray0 = new Object[3];
      Object object0 = new Object();
      objectArray0[0] = object0;
      String string0 = null;
      MultiKey<String> multiKey0 = new MultiKey<String>("MultiKey", (String) null);
      int int0 = (-3373);
      multiKey0.toString();
      // Undeclared exception!
//      try { 
        multiKey0.getKey((-3373));
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // -3373
//         //
//         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
//      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("", "", "");
      multiKey0.getKey(0);
      String[] stringArray0 = new String[3];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "";
      MultiKey<String> multiKey1 = new MultiKey<String>(stringArray0, false);
      multiKey1.getKey(0);
      MultiKey<Object> multiKey2 = new MultiKey<Object>("", "", "", multiKey1);
      String string0 = multiKey2.toString();
      assertEquals("MultiKey[, , , MultiKey[, , ]]", string0);
  }
}
