/*
 * This file was automatically generated by EvoSuite
 * Wed Oct 20 12:37:04 GMT 2021
 */

package org.apache.commons.collections4.keyvalue;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.lang.reflect.Array;
import org.apache.commons.collections4.keyvalue.MultiKey;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class MultiKey_ESTest extends MultiKey_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Integer[] integerArray0 = new Integer[0];
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integerArray0, true);
      int int0 = multiKey0.size();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      MultiKey<Object>[] multiKeyArray0 = (MultiKey<Object>[]) Array.newInstance(MultiKey.class, 3);
      MultiKey<MultiKey<Object>> multiKey0 = new MultiKey<MultiKey<Object>>(multiKeyArray0);
      MultiKey<Object>[] multiKeyArray1 = multiKey0.getKeys();
      assertFalse(multiKeyArray1.equals((Object)multiKeyArray0));
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>((String) null, (String) null);
      String string0 = multiKey0.getKey(1);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("VElF\"HVN", "VElF\"HVN", (String) null, "_'#?XHcf_+GAXUX");
      // Undeclared exception!
//      try { 
        multiKey0.getKey((-2652));
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // -2652
//         //
//         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
//      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      MultiKey<MultiKey<Integer>> multiKey0 = null;
//      try {
        multiKey0 = new MultiKey<MultiKey<Integer>>((MultiKey<Integer>[]) null, false);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // The array of keys must not be null
//         //
//         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
//      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("ij>3\"", "");
      Object[] objectArray0 = new Object[6];
      objectArray0[5] = (Object) multiKey0;
      MultiKey<Object> multiKey1 = new MultiKey<Object>(objectArray0, false);
      Object object0 = multiKey1.getKey(5);
      boolean boolean0 = multiKey0.equals(object0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Integer integer0 = new Integer((-3346));
      MultiKey<MultiKey<String>> multiKey0 = new MultiKey<MultiKey<String>>((MultiKey<String>) null, (MultiKey<String>) null, (MultiKey<String>) null, (MultiKey<String>) null);
      boolean boolean0 = multiKey0.equals(integer0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      MultiKey<Object>[] multiKeyArray0 = (MultiKey<Object>[]) Array.newInstance(MultiKey.class, 4);
      Integer integer0 = new Integer(620);
      MultiKey<Object> multiKey0 = new MultiKey<Object>(integer0, integer0, "_TIi0Og55c}BiCC:rd");
      multiKeyArray0[0] = multiKey0;
      MultiKey<Object> multiKey1 = new MultiKey<Object>((Object[]) multiKeyArray0, true);
      MultiKey<MultiKey<Object>> multiKey2 = new MultiKey<MultiKey<Object>>(multiKeyArray0);
      boolean boolean0 = multiKey2.equals(multiKey1);
      assertTrue(boolean0);
      assertFalse(multiKey1.equals((Object)multiKey0));
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      MultiKey<MultiKey<String>> multiKey0 = null;
//      try {
        multiKey0 = new MultiKey<MultiKey<String>>((MultiKey<String>[]) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // The array of keys must not be null
//         //
//         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
//      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Integer integer0 = new Integer((-3346));
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integer0, integer0, integer0);
      int int0 = multiKey0.size();
      assertEquals(3, int0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Integer integer0 = new Integer((-1480));
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integer0, integer0, integer0, integer0);
      multiKey0.hashCode();
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      MultiKey<Object>[] multiKeyArray0 = (MultiKey<Object>[]) Array.newInstance(MultiKey.class, 8);
      MultiKey<MultiKey<Object>> multiKey0 = new MultiKey<MultiKey<Object>>(multiKeyArray0);
      String string0 = multiKey0.toString();
      assertEquals("MultiKey[null, null, null, null, null, null, null, null]", string0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Integer[] integerArray0 = new Integer[0];
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integerArray0, true);
      Integer[] integerArray1 = multiKey0.getKeys();
      assertFalse(integerArray1.equals((Object)integerArray0));
  }
}
