/*
 * This file was automatically generated by EvoSuite
 * Wed Oct 13 20:49:47 GMT 2021
 */

package org.apache.commons.collections4.keyvalue;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.lang.reflect.Array;
import org.apache.commons.collections4.keyvalue.MultiKey;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class MultiKey_ESTest extends MultiKey_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Object object0 = new Object();
      Object object1 = new Object();
      MultiKey<Object> multiKey0 = new MultiKey<Object>(object0, object1);
      Object object2 = new Object();
      Integer[] integerArray0 = new Integer[0];
      MultiKey<Integer> multiKey1 = new MultiKey<Integer>(integerArray0, false);
      multiKey0.toString();
      multiKey1.toString();
      multiKey1.toString();
      multiKey0.toString();
      multiKey1.toString();
      MultiKey<Object> multiKey2 = new MultiKey<Object>(multiKey0, object1, object2, multiKey1, multiKey0);
      multiKey2.toString();
      multiKey0.toString();
      multiKey1.toString();
      Object object3 = multiKey2.getKey(0);
      multiKey1.toString();
      MultiKey<Object> multiKey3 = new MultiKey<Object>(object0, object3);
      multiKey2.toString();
      boolean boolean0 = multiKey0.equals(object3);
      assertTrue(boolean0);
      
      MultiKey<MultiKey<Object>> multiKey4 = new MultiKey<MultiKey<Object>>(multiKey3, multiKey3, multiKey2, multiKey0);
      multiKey4.size();
      assertFalse(multiKey2.equals((Object)multiKey3));
      
      MultiKey<String> multiKey5 = new MultiKey<String>("", "p7_SuhLq", "IK", "");
      String string0 = multiKey5.toString();
      assertEquals("MultiKey[, p7_SuhLq, IK, ]", string0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("p.x'-``", "p.x'-``", "p.x'-``", "p.x'-``", "p.x'-``");
      multiKey0.equals("p.x'-``");
      MultiKey<Object>[] multiKeyArray0 = (MultiKey<Object>[]) Array.newInstance(MultiKey.class, 3);
      MultiKey<Object> multiKey1 = new MultiKey<Object>((Object[]) multiKeyArray0, false);
      multiKeyArray0[0] = multiKey1;
      MultiKey<Object> multiKey2 = new MultiKey<Object>((Object[]) multiKeyArray0, false);
      multiKeyArray0[1] = multiKey2;
      MultiKey<Object> multiKey3 = new MultiKey<Object>(multiKey1, "", "p.x'-``");
      multiKeyArray0[2] = multiKey3;
      MultiKey<MultiKey<Object>> multiKey4 = new MultiKey<MultiKey<Object>>(multiKeyArray0);
      boolean boolean0 = multiKey4.equals(multiKey3);
      assertTrue(multiKey1.equals((Object)multiKey2));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Integer integer0 = new Integer((-1));
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integer0, integer0, integer0);
      MultiKey<String> multiKey1 = new MultiKey<String>("JhjOh66&u7:k$$YO6", "/$%?_v1gD'%r<o,VbJ", (String) null, "5{.BoN`Z");
      int int0 = multiKey1.size();
      Object[] objectArray0 = new Object[0];
      MultiKey<Object> multiKey2 = new MultiKey<Object>(objectArray0);
      int int1 = multiKey2.size();
      assertFalse(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      String string0 = "Tw*W&DG{G#~^Ln}A;1";
      MultiKey<String> multiKey0 = new MultiKey<String>(":.>8Z#Rp)Jygn", "", "Tw*W&DG{G#~^Ln}A;1");
      String[] stringArray0 = null;
      MultiKey<String> multiKey1 = null;
//      try {
        multiKey1 = new MultiKey<String>((String[]) null, false);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // The array of keys must not be null
//         //
//         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
//      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("MultiKey", (String) null);
      Integer integer0 = new Integer(0);
      MultiKey<Object> multiKey1 = new MultiKey<Object>((Object) null, "MultiKey", (Object) null, integer0, "MultiKey");
      multiKey1.size();
      Integer[] integerArray0 = new Integer[0];
      MultiKey<Integer> multiKey2 = new MultiKey<Integer>(integerArray0);
      multiKey2.toString();
      multiKey2.getKeys();
      // Undeclared exception!
//      try { 
        multiKey1.getKey(5);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 5
//         //
//         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
//      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Integer integer0 = new Integer(1);
      MultiKey<Object> multiKey0 = new MultiKey<Object>("", integer0);
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.size();
      String[] stringArray0 = new String[8];
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      stringArray0[0] = "";
      stringArray0[1] = "MultiKey[, 1]";
      stringArray0[2] = "";
      stringArray0[3] = "MultiKey[, 1]";
      stringArray0[4] = "MultiKey[, 1]";
      stringArray0[5] = "";
      stringArray0[6] = "";
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      stringArray0[7] = "";
      MultiKey<String> multiKey1 = new MultiKey<String>(stringArray0, false);
      multiKey1.getKeys();
      multiKey0.getKeys();
      multiKey1.hashCode();
      multiKey1.hashCode();
      // Undeclared exception!
//      try { 
        multiKey0.getKey(2);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 2
//         //
//         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
//      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      String[] stringArray0 = new String[5];
      stringArray0[0] = "";
      stringArray0[1] = "The array of keys must not be null";
      stringArray0[2] = "~Fjv52!+WwEE)*ojSov";
      stringArray0[3] = "F_n%as{wB`\"7+;mAL*";
      stringArray0[4] = "h4* ";
      MultiKey<String> multiKey0 = new MultiKey<String>(stringArray0, true);
      MultiKey<Object> multiKey1 = new MultiKey<Object>(stringArray0);
      multiKey1.size();
      MultiKey<String> multiKey2 = new MultiKey<String>(stringArray0);
      multiKey1.equals(multiKey2);
      Integer integer0 = new Integer(0);
      MultiKey<Object> multiKey3 = new MultiKey<Object>(integer0, "F_n%as{wB`\"7+;mAL*");
      MultiKey<Object> multiKey4 = new MultiKey<Object>("", multiKey2, "", "~Fjv52!+WwEE)*ojSov", multiKey3);
      MultiKey<MultiKey<Object>> multiKey5 = new MultiKey<MultiKey<Object>>(multiKey1, multiKey1, multiKey4);
      multiKey5.size();
      assertFalse(multiKey4.equals((Object)multiKey1));
      assertFalse(multiKey1.equals((Object)multiKey3));
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Integer[] integerArray0 = new Integer[4];
      Integer integer0 = new Integer((-1765));
      integerArray0[0] = integer0;
      Integer integer1 = new Integer((int) integerArray0[0]);
      integerArray0[1] = integer1;
      Integer integer2 = new Integer(2597);
      integerArray0[2] = integer2;
      Integer integer3 = new Integer((int) integerArray0[0]);
      integerArray0[3] = integer3;
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integerArray0, false);
      Integer[] integerArray1 = multiKey0.getKeys();
      assertNotSame(integerArray0, integerArray1);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Object[] objectArray0 = new Object[6];
      MultiKey<String> multiKey0 = new MultiKey<String>((String) null, (String) null, "#;\"hF@|>zz8NwI)", (String) null, (String) null);
      MultiKey<MultiKey<String>> multiKey1 = new MultiKey<MultiKey<String>>(multiKey0, multiKey0, multiKey0, multiKey0);
      MultiKey<String> multiKey2 = multiKey1.getKey(0);
      objectArray0[0] = (Object) multiKey2;
      Object object0 = new Object();
      objectArray0[1] = object0;
      Object object1 = new Object();
      objectArray0[2] = object1;
      Object object2 = new Object();
      objectArray0[3] = object2;
      Object object3 = new Object();
      objectArray0[4] = object3;
      Object object4 = new Object();
      multiKey2.toString();
      objectArray0[5] = object4;
      MultiKey<Object> multiKey3 = new MultiKey<Object>(objectArray0);
      multiKey3.getKey(3);
      multiKey2.getKey(0);
      Object object5 = multiKey3.getKey(3);
      assertNotSame(object5, object3);
      
      multiKey0.size();
      Integer integer0 = new Integer(5);
      Integer integer1 = new Integer(0);
      Integer integer2 = new Integer((-471));
      Integer integer3 = new Integer(0);
      MultiKey<Integer> multiKey4 = new MultiKey<Integer>(integer0, integer1, integer2, integer3, integer1);
      String string0 = multiKey4.toString();
      assertEquals("MultiKey[5, 0, -471, 0, 0]", string0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      String[] stringArray0 = new String[5];
      stringArray0[0] = "-3[iW";
      stringArray0[1] = "";
      stringArray0[2] = "";
      stringArray0[3] = "";
      stringArray0[4] = " |0<XE.P?Z:}uRO";
      MultiKey<String> multiKey0 = new MultiKey<String>(stringArray0);
      String string0 = multiKey0.toString();
      assertEquals("MultiKey[-3[iW, , , ,  |0<XE.P?Z:}uRO]", string0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Object[] objectArray0 = new Object[7];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      MultiKey<String> multiKey0 = new MultiKey<String>((String) null, (String) null, (String) null, "rx=b>v`c'v1xP", "");
      multiKey0.getKey(1);
      objectArray0[2] = (Object) null;
      Integer integer0 = new Integer(1);
      MultiKey<Object> multiKey1 = new MultiKey<Object>(multiKey0, object0, "", (Object) null, integer0);
      Object object2 = multiKey1.getKey(0);
      objectArray0[3] = object2;
      Integer integer1 = new Integer(1);
      Integer integer2 = new Integer(0);
      Integer integer3 = new Integer(0);
      MultiKey<Integer> multiKey2 = new MultiKey<Integer>(integer1, integer1, integer2, integer3, integer0);
      Integer integer4 = multiKey2.getKey(0);
      objectArray0[4] = (Object) integer4;
      Object object3 = new Object();
      objectArray0[5] = object3;
      MultiKey<MultiKey<Object>> multiKey3 = new MultiKey<MultiKey<Object>>(multiKey1, multiKey1, multiKey1, multiKey1, multiKey1);
      // Undeclared exception!
//      try { 
        multiKey3.getKey((-2725));
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // -2725
//         //
//         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
//      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("", "", (String) null);
      Integer[] integerArray0 = new Integer[4];
      Integer integer0 = new Integer((-389));
      integerArray0[0] = integer0;
      Integer integer1 = new Integer((-389));
      integerArray0[1] = integer1;
      Integer integer2 = new Integer((-389));
      integerArray0[2] = integer2;
      Integer integer3 = new Integer((int) integerArray0[2]);
      integerArray0[3] = integer3;
      MultiKey<Integer> multiKey1 = new MultiKey<Integer>(integerArray0);
      Object object0 = multiKey1.getKey(0);
      MultiKey<Object> multiKey2 = new MultiKey<Object>(multiKey0, multiKey0, (Object) null, object0, (Object) null);
      assertEquals(5, multiKey2.size());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Integer integer0 = new Integer((-2315));
      MultiKey<String> multiKey0 = new MultiKey<String>("The array of keys must not be null", "The array of keys must not be null", "The array of keys must not be null", "n`B5&2} o$G6_e&p", "xLpRb5n?*RcQ]E");
      MultiKey<Object> multiKey1 = new MultiKey<Object>(integer0, integer0, integer0, integer0, multiKey0);
      assertEquals(5, multiKey1.size());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Integer[] integerArray0 = new Integer[4];
      Integer integer0 = new Integer(1183);
      integerArray0[0] = integer0;
      Integer integer1 = new Integer((int) integerArray0[0]);
      integerArray0[1] = integer1;
      Integer integer2 = new Integer(1183);
      integerArray0[2] = integer2;
      Integer integer3 = new Integer(1183);
      integerArray0[3] = integer3;
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integerArray0);
      boolean boolean0 = multiKey0.equals((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      int int0 = 3691;
      Integer integer0 = new Integer(3691);
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integer0, integer0);
      MultiKey<String> multiKey1 = new MultiKey<String>("", "");
      Object[] objectArray0 = null;
      MultiKey<Object> multiKey2 = null;
//      try {
        multiKey2 = new MultiKey<Object>((Object[]) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // The array of keys must not be null
//         //
//         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
//      }
  }
}
