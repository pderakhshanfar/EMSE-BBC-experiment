/*
 * This file was automatically generated by EvoSuite
 * Wed Oct 13 20:50:09 GMT 2021
 */

package org.apache.commons.collections4.keyvalue;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.lang.reflect.Array;
import org.apache.commons.collections4.keyvalue.MultiKey;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class MultiKey_ESTest extends MultiKey_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      MultiKey<Object> multiKey0 = new MultiKey<Object>(objectArray0, false);
      multiKey0.getKeys();
      MultiKey<MultiKey<String>> multiKey1 = new MultiKey<MultiKey<String>>((MultiKey<String>) null, (MultiKey<String>) null, (MultiKey<String>) null, (MultiKey<String>) null, (MultiKey<String>) null);
      multiKey1.toString();
      multiKey1.toString();
      int int0 = multiKey1.size();
      assertEquals(5, int0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      int int0 = 2074;
      Integer integer0 = new Integer(2074);
      Integer integer1 = new Integer(1996);
      Integer integer2 = new Integer(1996);
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integer0, integer0, integer1, integer1, integer2);
      MultiKey<Object> multiKey1 = new MultiKey<Object>(integer2, multiKey0, multiKey0, ".qdB&Ox&}m(s#TVN/(", integer0);
      multiKey0.toString();
      MultiKey<MultiKey<Object>> multiKey2 = new MultiKey<MultiKey<Object>>(multiKey1, multiKey1, multiKey1, multiKey1);
      multiKey1.toString();
      multiKey2.toString();
      multiKey0.toString();
      MultiKey<String> multiKey3 = new MultiKey<String>("The array of keys must not be null", "7]0E09\"{A hhaDph", "7]0E09\"{A hhaDph", ")|W|)`\"'l)iW5CVWX", "");
      multiKey3.toString();
      multiKey3.toString();
      multiKey3.toString();
      multiKey3.size();
      int int1 = (-184);
      multiKey3.toString();
      multiKey1.toString();
      Integer integer3 = new Integer((-184));
      multiKey1.toString();
      multiKey3.equals(integer3);
      multiKey3.equals((Object) null);
      multiKey1.equals(multiKey1);
      multiKey0.toString();
      // Undeclared exception!
//      try { 
        multiKey3.getKey(2074);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 2074
//         //
//         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
//      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      MultiKey<Object> multiKey0 = new MultiKey<Object>(objectArray0, true);
      multiKey0.toString();
      int int0 = multiKey0.size();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("^e&ul]u2;+LE++", "^e&ul]u2;+LE++", "!t5");
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.getKey(0);
      Object[] objectArray0 = new Object[2];
      Object object0 = new Object();
      String[] stringArray0 = new String[1];
      stringArray0[0] = "MultiKey[^e&ul]u2;+LE++, ^e&ul]u2;+LE++, !t5]";
      MultiKey<String> multiKey1 = new MultiKey<String>(stringArray0, true);
      MultiKey<Object> multiKey2 = new MultiKey<Object>("@ 8hb&h-[}", "@ 8hb&h-[}", object0, multiKey1, "MultiKey[^e&ul]u2;+LE++, ^e&ul]u2;+LE++, !t5]");
      multiKey2.getKey(0);
      objectArray0[0] = (Object) "@ 8hb&h-[}";
      objectArray0[1] = (Object) "!t5";
      multiKey2.toString();
      MultiKey<Object> multiKey3 = new MultiKey<Object>(objectArray0, true);
      multiKey3.equals("!t5");
      multiKey3.equals(multiKey0);
      // Undeclared exception!
//      try { 
        multiKey3.getKey(3700);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 3700
//         //
//         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
//      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("BO8z`ru~_*J", "", "", "BO8z`ru~_*J", "");
      multiKey0.hashCode();
      MultiKey<MultiKey<String>> multiKey1 = null;
//      try {
        multiKey1 = new MultiKey<MultiKey<String>>((MultiKey<String>[]) null, true);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // The array of keys must not be null
//         //
//         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
//      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Object[] objectArray0 = new Object[5];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      Object object2 = new Object();
      MultiKey<Object> multiKey0 = new MultiKey<Object>(object2, (Object) null, object1, (Object) null, object1);
      multiKey0.getKey(1);
      objectArray0[2] = null;
      Object object3 = new Object();
      objectArray0[3] = object3;
      Object object4 = new Object();
      objectArray0[4] = object4;
      MultiKey<Object> multiKey1 = new MultiKey<Object>(objectArray0);
      String string0 = multiKey1.toString();
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      MultiKey<Object> multiKey0 = new MultiKey<Object>("sh6#F+m?/S|E$", (Object) null);
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.hashCode();
      String[] stringArray0 = new String[6];
      stringArray0[0] = "sh6#F+m?/S|E$";
      stringArray0[1] = "sh6#F+m?/S|E$";
      stringArray0[2] = "The array of keys must not be null";
      stringArray0[3] = "sh6#F+m?/S|E$";
      stringArray0[4] = "sh6#F+m?/S|E$";
      stringArray0[5] = "sh6#F+m?/S|E$";
      MultiKey<String> multiKey1 = new MultiKey<String>(stringArray0);
      multiKey1.getKeys();
      multiKey1.toString();
      Integer integer0 = new Integer(93);
      Integer integer1 = new Integer(93);
      Integer integer2 = new Integer((-367));
      Integer integer3 = new Integer(0);
      MultiKey<Integer> multiKey2 = new MultiKey<Integer>(integer0, integer1, integer2, integer2, integer3);
      multiKey2.toString();
      multiKey1.toString();
      multiKey2.toString();
      multiKey2.toString();
      multiKey2.toString();
      multiKey1.getKey(0);
      MultiKey<Object>[] multiKeyArray0 = (MultiKey<Object>[]) Array.newInstance(MultiKey.class, 2);
      multiKeyArray0[0] = multiKey0;
      multiKeyArray0[1] = multiKey0;
      MultiKey<MultiKey<Object>> multiKey3 = new MultiKey<MultiKey<Object>>(multiKeyArray0);
      String string0 = multiKey3.toString();
      assertEquals("MultiKey[MultiKey[sh6#F+m?/S|E$, null], MultiKey[sh6#F+m?/S|E$, null]]", string0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      int int0 = 2074;
      Integer integer0 = new Integer(2074);
      Integer integer1 = new Integer(1996);
      Integer integer2 = new Integer(1996);
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integer0, integer0, integer1, integer1, integer2);
      MultiKey<Object> multiKey1 = new MultiKey<Object>(integer2, multiKey0, multiKey0, ".qdB&Ox&}m(s#TVN/(", integer0);
      multiKey0.toString();
      MultiKey<MultiKey<Object>> multiKey2 = new MultiKey<MultiKey<Object>>(multiKey1, multiKey1, multiKey1, multiKey1);
      // Undeclared exception!
//      try { 
        multiKey2.getKey(2074);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 2074
//         //
//         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
//      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      int int0 = 0;
      Integer integer0 = new Integer(0);
      Integer[] integerArray0 = new Integer[4];
      integerArray0[0] = integer0;
      integerArray0[1] = integer0;
      integerArray0[2] = integer0;
      Integer integer1 = new Integer(int0);
      integerArray0[3] = integer1;
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integerArray0);
      multiKey0.getKey(0);
      String string0 = "4)S";
      String string1 = "";
      MultiKey<String> multiKey1 = new MultiKey<String>("", "", "4)S", "4)S", "");
      // Undeclared exception!
//      try { 
        multiKey1.getKey(903);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 903
//         //
//         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
//      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      int int0 = (-1160);
      Integer integer0 = new Integer((-1160));
      Integer integer1 = new Integer((-1160));
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>((Integer) null, (Integer) null, (Integer) null, integer0, integer1);
      String[] stringArray0 = new String[2];
      stringArray0[0] = "lNxcEVM[QrG";
      multiKey0.toString();
      stringArray0[1] = "neXkF";
      MultiKey<String> multiKey1 = new MultiKey<String>(stringArray0, false);
      multiKey1.toString();
      multiKey1.toString();
      multiKey1.toString();
      multiKey1.getKeys();
      MultiKey<Object> multiKey2 = new MultiKey<Object>(stringArray0);
      multiKey2.toString();
      multiKey1.toString();
      multiKey2.toString();
      multiKey2.hashCode();
      multiKey1.toString();
      multiKey2.hashCode();
      multiKey1.getKeys();
      multiKey2.size();
      multiKey1.size();
      multiKey2.toString();
      MultiKey<MultiKey<Integer>> multiKey3 = null;
//      try {
        multiKey3 = new MultiKey<MultiKey<Integer>>((MultiKey<Integer>[]) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // The array of keys must not be null
//         //
//         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
//      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Integer integer0 = new Integer((-788));
      Integer integer1 = new Integer((-788));
      Integer integer2 = new Integer((-788));
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integer0, integer1, integer2);
      multiKey0.toString();
      multiKey0.hashCode();
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) "MultiKey[-788, -788, -788]";
      multiKey0.toString();
      objectArray0[1] = (Object) "MultiKey[-788, -788, -788]";
      objectArray0[2] = (Object) multiKey0;
      MultiKey<String> multiKey1 = new MultiKey<String>("MultiKey[-788, -788, -788]", "MultiKey[-788, -788, -788]", "MultiKey[-788, -788, -788]");
      // Undeclared exception!
//      try { 
        multiKey1.getKey((-3680));
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // -3680
//         //
//         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
//      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Integer integer0 = new Integer(2);
      Integer integer1 = new Integer(2);
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integer0, integer1, integer0);
      multiKey0.toString();
      multiKey0.size();
      MultiKey<Object> multiKey1 = new MultiKey<Object>(integer0, "MultiKey[2, 2, 2]");
      multiKey1.toString();
      multiKey1.size();
      String string0 = multiKey1.toString();
      assertEquals("MultiKey[2, MultiKey[2, 2, 2]]", string0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Integer[] integerArray0 = new Integer[1];
      Integer integer0 = new Integer(1158);
      integerArray0[0] = integer0;
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integerArray0, true);
      assertEquals(1, multiKey0.size());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("The array of keys must not be null", "(", "The array of keys must not be null");
      multiKey0.toString();
      multiKey0.size();
      Integer[] integerArray0 = new Integer[2];
      Integer integer0 = new Integer(3);
      integerArray0[0] = integer0;
      int int0 = 0;
      Integer integer1 = new Integer(0);
      integerArray0[1] = integer1;
      MultiKey<Integer> multiKey1 = new MultiKey<Integer>(integerArray0);
      multiKey1.equals(int0);
      // Undeclared exception!
//      try { 
        multiKey1.getKey(1746);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 1746
//         //
//         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
//      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Object[] objectArray0 = new Object[6];
      MultiKey<String> multiKey0 = new MultiKey<String>("[wMA&Sonqsr", "The array of keys must not be null", "[wMA&Sonqsr", "[wMA&Sonqsr", "");
      int int0 = (-1732);
      // Undeclared exception!
//      try { 
        multiKey0.getKey((-1732));
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // -1732
//         //
//         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
//      }
  }
}
