/*
 * This file was automatically generated by EvoSuite
 * Wed Oct 13 20:49:23 GMT 2021
 */

package org.apache.commons.collections4.keyvalue;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.lang.reflect.Array;
import org.apache.commons.collections4.keyvalue.MultiKey;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class MultiKey_ESTest extends MultiKey_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("", "a", (String) null, "lA*GCD", "");
      Integer integer0 = new Integer(0);
      Integer integer1 = new Integer(0);
      Integer integer2 = new Integer(0);
      MultiKey<Integer> multiKey1 = new MultiKey<Integer>(integer2, integer0, integer1, integer0);
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) "";
      Object object0 = new Object();
      objectArray0[1] = object0;
      objectArray0[2] = (Object) ";c";
      objectArray0[3] = (Object) multiKey1;
      objectArray0[4] = (Object) integer0;
      objectArray0[5] = (Object) integer1;
      Object object1 = multiKey0.getKey(0);
      assertEquals("", object1);
      
      boolean boolean0 = multiKey1.equals(objectArray0[3]);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("M0ltiRey", "M0ltiRey", "M0ltiRey", "M0ltiRey");
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) "M0ltiRey";
      objectArray0[1] = (Object) multiKey0;
      objectArray0[2] = (Object) multiKey0;
      objectArray0[3] = (Object) multiKey0;
      objectArray0[4] = (Object) "M0ltiRey";
      objectArray0[5] = (Object) "M0ltiRey";
      objectArray0[6] = (Object) multiKey0;
      objectArray0[7] = (Object) multiKey0;
      objectArray0[8] = (Object) multiKey0;
      MultiKey<Object> multiKey1 = new MultiKey<Object>(objectArray0, true);
      Object[] objectArray1 = multiKey1.getKeys();
      MultiKey<Object> multiKey2 = new MultiKey<Object>(objectArray1, false);
      boolean boolean0 = multiKey1.equals(multiKey2);
      assertTrue(boolean0);
      
      MultiKey<MultiKey<Object>> multiKey3 = new MultiKey<MultiKey<Object>>(multiKey1, multiKey2, multiKey1);
      MultiKey<String> multiKey4 = new MultiKey<String>("", "h@Gw#0r1zQT", (String) null, "!nfjM", "");
      Integer integer0 = new Integer((-1));
      Object object0 = new Object();
      Integer integer1 = new Integer(5);
      MultiKey<Object> multiKey5 = new MultiKey<Object>(objectArray0[3], "org.apache.commons.collections4.keyvalue.MultiKey", multiKey1, integer0);
      multiKey2.getKeys();
      assertFalse(multiKey2.equals((Object)multiKey5));
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Integer[] integerArray0 = new Integer[0];
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integerArray0, false);
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.getKeys();
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) multiKey0;
      objectArray0[1] = (Object) multiKey0;
      MultiKey<Object> multiKey1 = new MultiKey<Object>(objectArray0);
      multiKey1.toString();
      MultiKey<MultiKey<Object>> multiKey2 = new MultiKey<MultiKey<Object>>(multiKey1, multiKey1, multiKey1, multiKey1, multiKey1);
      multiKey2.size();
      multiKey0.size();
      String[] stringArray0 = new String[4];
      multiKey2.toString();
      multiKey2.toString();
      stringArray0[0] = "MultiKey[]";
      stringArray0[1] = "MultiKey[]";
      stringArray0[2] = "MultiKey[]";
      stringArray0[3] = "MultiKey[]";
      MultiKey<String> multiKey3 = new MultiKey<String>(stringArray0);
      // Undeclared exception!
//      try { 
        multiKey3.getKey((-1));
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // -1
//         //
//         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
//      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      String[] stringArray0 = new String[3];
      stringArray0[1] = "MultiKey";
      MultiKey<String> multiKey0 = new MultiKey<String>(stringArray0);
      MultiKey<String> multiKey1 = new MultiKey<String>("", stringArray0[0], "e%9pjM");
      MultiKey<String> multiKey2 = new MultiKey<String>("pj3vC3BeI_s.sl", "pj3vC3BeI_s.sl", "", (String) null);
      MultiKey<String> multiKey3 = new MultiKey<String>("", "", "MultiKey");
      MultiKey<String> multiKey4 = new MultiKey<String>("#u).E'", (String) null, "TT]cj5.c|uL*!cUr7\"#");
      MultiKey<String> multiKey5 = new MultiKey<String>("", "$YJ4EIDHC<VS1Y", "", "");
      MultiKey<String>[] multiKeyArray0 = (MultiKey<String>[]) Array.newInstance(MultiKey.class, 0);
      MultiKey<MultiKey<String>> multiKey6 = new MultiKey<MultiKey<String>>(multiKeyArray0, true);
      MultiKey<String>[] multiKeyArray1 = multiKey6.getKeys();
      assertNotSame(multiKeyArray1, multiKeyArray0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      MultiKey<Object> multiKey0 = null;
//      try {
        multiKey0 = new MultiKey<Object>((Object[]) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // The array of keys must not be null
//         //
//         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
//      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Object[] objectArray0 = new Object[6];
      Integer integer0 = new Integer(2);
      MultiKey<Object> multiKey0 = new MultiKey<Object>("Biko^9LgOfLyZ.+", "Dx~j1hIg0t o2g&", (Object) null, integer0, "Dx~j1hIg0t o2g&");
      MultiKey<Object> multiKey1 = new MultiKey<Object>("Biko^9LgOfLyZ.+", (Object) null, integer0, multiKey0, "Dx~j1hIg0t o2g&");
      multiKey1.getKey(0);
      objectArray0[0] = (Object) "Biko^9LgOfLyZ.+";
      Object object0 = new Object();
      objectArray0[1] = object0;
      Object object1 = new Object();
      objectArray0[2] = object1;
      Integer integer1 = new Integer(2);
      MultiKey<Integer> multiKey2 = new MultiKey<Integer>(integer0, integer1);
      Integer integer2 = multiKey2.getKey(0);
      objectArray0[3] = (Object) integer2;
      multiKey0.getKey(2);
      objectArray0[4] = null;
      Integer[] integerArray0 = new Integer[9];
      integerArray0[0] = integer0;
      integerArray0[1] = integer0;
      integerArray0[2] = integer0;
      integerArray0[3] = integer1;
      integerArray0[4] = integer2;
      integerArray0[5] = integer2;
      integerArray0[6] = integer0;
      integerArray0[7] = integer0;
      Integer integer3 = new Integer(3273);
      integerArray0[8] = integer3;
      MultiKey<Integer> multiKey3 = new MultiKey<Integer>(integerArray0);
      MultiKey<MultiKey<Integer>> multiKey4 = new MultiKey<MultiKey<Integer>>(multiKey2, multiKey2, multiKey3, multiKey2, multiKey2);
      MultiKey<Integer> multiKey5 = multiKey4.getKey(1);
      objectArray0[5] = (Object) multiKey5;
      MultiKey<Object> multiKey6 = new MultiKey<Object>(objectArray0, false);
      Object[] objectArray1 = multiKey6.getKeys();
      assertNotSame(objectArray0, objectArray1);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Integer integer0 = new Integer((-1));
      Integer integer1 = new Integer(0);
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integer0, integer0, integer1, integer1, (Integer) null);
      MultiKey<Object> multiKey1 = new MultiKey<Object>(multiKey0, multiKey0);
      multiKey1.hashCode();
      multiKey1.toString();
      MultiKey<MultiKey<Object>> multiKey2 = new MultiKey<MultiKey<Object>>(multiKey1, multiKey1, multiKey1, multiKey1);
      multiKey2.toString();
      multiKey2.toString();
      multiKey2.toString();
      multiKey2.equals(integer1);
      MultiKey<MultiKey<Integer>> multiKey3 = null;
//      try {
        multiKey3 = new MultiKey<MultiKey<Integer>>((MultiKey<Integer>[]) null, true);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // The array of keys must not be null
//         //
//         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
//      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Integer integer0 = new Integer(3);
      Integer integer1 = new Integer(0);
      Integer integer2 = new Integer(68);
      Integer integer3 = new Integer(0);
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integer0, integer1, integer2, integer3);
      multiKey0.toString();
      multiKey0.toString();
      MultiKey<String> multiKey1 = new MultiKey<String>("", "");
      multiKey1.toString();
      multiKey1.toString();
      multiKey1.toString();
      multiKey1.size();
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) "MultiKey[3, 0, 68, 0]";
      objectArray0[1] = (Object) "MultiKey[, ]";
      MultiKey<Object> multiKey2 = new MultiKey<Object>(objectArray0, true);
      multiKey2.getKeys();
      String string0 = multiKey0.toString();
      assertEquals("MultiKey[3, 0, 68, 0]", string0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("", "", "", "");
      multiKey0.toString();
      Integer integer0 = new Integer(3174);
      MultiKey<Object> multiKey1 = new MultiKey<Object>("", multiKey0, "", integer0);
      MultiKey<Object> multiKey2 = new MultiKey<Object>(multiKey0, multiKey0, "", multiKey1);
      multiKey2.toString();
      multiKey0.toString();
      multiKey2.toString();
      multiKey2.toString();
      multiKey0.size();
      MultiKey<String> multiKey3 = new MultiKey<String>("", "MultiKey[, , , ]", "vD(l:yv", "3vgNpBW");
      MultiKey<MultiKey<String>> multiKey4 = new MultiKey<MultiKey<String>>(multiKey3, (MultiKey<String>) null, (MultiKey<String>) null);
      // Undeclared exception!
//      try { 
        multiKey4.getKey(3);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 3
//         //
//         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
//      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("", "", "", "");
      Object[] objectArray0 = new Object[0];
      MultiKey<Object> multiKey1 = new MultiKey<Object>(objectArray0);
      MultiKey<Object> multiKey2 = new MultiKey<Object>("", multiKey1, multiKey1, (Object) null);
      multiKey2.toString();
      int int0 = 1884;
      multiKey0.toString();
      multiKey1.toString();
      // Undeclared exception!
//      try { 
        multiKey2.getKey(1884);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 1884
//         //
//         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
//      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Object[] objectArray0 = new Object[6];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      Object object2 = new Object();
      objectArray0[2] = object2;
      Object object3 = new Object();
      objectArray0[3] = object3;
      Object object4 = new Object();
      objectArray0[4] = object4;
      Object object5 = new Object();
      objectArray0[5] = object5;
      MultiKey<Object> multiKey0 = new MultiKey<Object>(objectArray0);
      multiKey0.hashCode();
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Object object0 = new Object();
      MultiKey<Object> multiKey0 = new MultiKey<Object>("I~O^5d`jd", "I~O^5d`jd", "I~O^5d`jd", "I~O^5d`jd", object0);
      Integer integer0 = new Integer(0);
      Integer integer1 = new Integer(2058);
      MultiKey<Integer> multiKey1 = new MultiKey<Integer>(integer0, integer0, integer0, integer1);
      boolean boolean0 = multiKey1.equals(multiKey0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      String[] stringArray0 = new String[4];
      stringArray0[0] = "";
      stringArray0[1] = "jwmu47P7c9%*@g]";
      stringArray0[2] = ",s";
      stringArray0[3] = "";
      MultiKey<String> multiKey0 = new MultiKey<String>(stringArray0);
      assertEquals(4, multiKey0.size());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("MultiKey", "$YJ4EIDHC<VS1Y", "org.apache.commons.collections4.keyvalue.MultiKey");
      MultiKey<String> multiKey1 = new MultiKey<String>("MultiKey", "Rg74sq0?q");
      Object object0 = multiKey1.getKey(0);
      assertEquals("MultiKey", object0);
      
      boolean boolean0 = multiKey0.equals("MultiKey");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Object object0 = new Object();
      String[] stringArray0 = new String[6];
      stringArray0[0] = "_B(Py";
      stringArray0[1] = "J8I~Vfuy`3";
      stringArray0[2] = "";
      stringArray0[3] = "";
      stringArray0[4] = "2D[(8hI";
      stringArray0[5] = "";
      MultiKey<String> multiKey0 = new MultiKey<String>(stringArray0, false);
      Object object1 = multiKey0.getKey(0);
      assertEquals("_B(Py", object1);
      
      MultiKey<Object> multiKey1 = new MultiKey<Object>((Object[]) stringArray0, false);
      MultiKey<Object> multiKey2 = new MultiKey<Object>(object0, "_B(Py", multiKey1);
      boolean boolean0 = multiKey2.equals("");
      assertFalse(boolean0);
  }
}
