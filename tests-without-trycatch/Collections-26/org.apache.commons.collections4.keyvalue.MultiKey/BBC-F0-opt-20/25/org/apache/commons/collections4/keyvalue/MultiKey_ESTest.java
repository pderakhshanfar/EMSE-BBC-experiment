/*
 * This file was automatically generated by EvoSuite
 * Fri Oct 22 17:40:15 GMT 2021
 */

package org.apache.commons.collections4.keyvalue;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.collections4.keyvalue.MultiKey;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class MultiKey_ESTest extends MultiKey_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("org.apache.commons.collections4.keyvalue.MultiKey", "org.apache.commons.collections4.keyvalue.MultiKey", "org.apache.commons.collections4.keyvalue.MultiKey", "org.apache.commons.collections4.keyvalue.MultiKey", "org.apache.commons.collections4.keyvalue.MultiKey");
      multiKey0.toString();
      Integer integer0 = new Integer(0);
      Integer integer1 = new Integer((-1));
      MultiKey<Integer> multiKey1 = new MultiKey<Integer>((Integer) null, integer0, integer0, integer1);
      Integer[] integerArray0 = null;
      boolean boolean0 = false;
      MultiKey<Integer> multiKey2 = null;
//      try {
        multiKey2 = new MultiKey<Integer>((Integer[]) null, false);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // The array of keys must not be null
//         //
//         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
//      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("org.apache.commons.collections4.keyvalue.MultiKey", "org.apache.commons.collections4.keyvalue.MultiKey", "org.apache.commons.collections4.keyvalue.MultiKey", "org.apache.commons.collections4.keyvalue.MultiKey", "org.apache.commons.collections4.keyvalue.MultiKey");
      MultiKey<Object> multiKey1 = null;
//      try {
        multiKey1 = new MultiKey<Object>((Object[]) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // The array of keys must not be null
//         //
//         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
//      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("", "", "", "", "FV]~=kkSou^");
      Object[] objectArray0 = new Object[0];
      MultiKey<Object> multiKey1 = new MultiKey<Object>(objectArray0, true);
      multiKey1.toString();
      Integer integer0 = new Integer(1012);
      multiKey0.toString();
      int int0 = 0;
      Integer integer1 = new Integer(0);
      MultiKey<Integer> multiKey2 = new MultiKey<Integer>(integer0, integer0, integer0, integer1);
      multiKey1.toString();
      multiKey2.hashCode();
      multiKey1.hashCode();
      multiKey0.hashCode();
      multiKey1.getKeys();
      multiKey1.getKeys();
      multiKey1.hashCode();
      multiKey1.size();
      Object object0 = new Object();
      Object object1 = new Object();
      MultiKey<String> multiKey3 = new MultiKey<String>("_#F$R]", "0Oz2OcW #WY%!2[L", "pt_B]S");
      MultiKey<Object> multiKey4 = new MultiKey<Object>(object0, object1, "", multiKey3, "MultiKey[, , , , FV]~=kkSou^]");
      // Undeclared exception!
//      try { 
        multiKey4.getKey(1012);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 1012
//         //
//         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
//      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      Integer integer0 = new Integer((-825));
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integer0, integer0, integer0, integer0);
      Integer integer1 = new Integer((-825));
      Integer integer2 = new Integer(2265);
      Integer integer3 = new Integer(0);
      MultiKey<Integer> multiKey1 = new MultiKey<Integer>(integer1, integer2, integer3);
      MultiKey<MultiKey<Integer>> multiKey2 = new MultiKey<MultiKey<Integer>>(multiKey0, multiKey1, multiKey0, multiKey1, multiKey1);
      multiKey2.equals(integer3);
      MultiKey<String> multiKey3 = new MultiKey<String>((String) null, "}y9(BeSpD", "Y0MGjmg", "org.apache.commons.collections4.keyvalue.MultiKey");
      String string0 = multiKey3.getKey(0);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      MultiKey<Object> multiKey0 = new MultiKey<Object>("LQPBdyVuR~yf_1K-2.", "LQPBdyVuR~yf_1K-2.");
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      String[] stringArray0 = new String[8];
      stringArray0[0] = "LQPBdyVuR~yf_1K-2.";
      stringArray0[1] = "LQPBdyVuR~yf_1K-2.";
      stringArray0[2] = "LQPBdyVuR~yf_1K-2.";
      stringArray0[3] = "LQPBdyVuR~yf_1K-2.";
      stringArray0[4] = "LQPBdyVuR~yf_1K-2.";
      stringArray0[5] = "LQPBdyVuR~yf_1K-2.";
      stringArray0[6] = "";
      stringArray0[7] = "";
      MultiKey<String> multiKey1 = new MultiKey<String>(stringArray0);
      multiKey1.toString();
      multiKey1.toString();
      multiKey1.toString();
      multiKey0.toString();
      multiKey1.toString();
      boolean boolean0 = multiKey0.equals("");
      assertFalse(boolean0);
      
      multiKey0.hashCode();
      multiKey1.getKey(0);
      MultiKey<MultiKey<Object>> multiKey2 = new MultiKey<MultiKey<Object>>(multiKey0, multiKey0, multiKey0, multiKey0, multiKey0);
      multiKey2.toString();
      multiKey2.size();
      multiKey0.hashCode();
      Integer[] integerArray0 = new Integer[8];
      Integer integer0 = new Integer((-407));
      integerArray0[0] = integer0;
      Integer integer1 = new Integer(0);
      integerArray0[1] = integer1;
      Integer integer2 = new Integer((int) integerArray0[0]);
      integerArray0[2] = integer2;
      Integer integer3 = new Integer(0);
      integerArray0[3] = integer3;
      Integer integer4 = new Integer(0);
      integerArray0[4] = integer4;
      Integer integer5 = new Integer(4);
      integerArray0[5] = integer5;
      Integer integer6 = new Integer(0);
      integerArray0[6] = integer6;
      Integer integer7 = new Integer((-4499));
      integerArray0[7] = integer7;
      MultiKey<Integer> multiKey3 = new MultiKey<Integer>(integerArray0);
      String string0 = multiKey3.toString();
      assertEquals("MultiKey[-407, 0, -407, 0, 0, 4, 0, -4499]", string0);
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("", "");
      multiKey0.toString();
      Integer integer0 = new Integer(0);
      multiKey0.toString();
      Integer integer1 = new Integer(0);
      MultiKey<Integer> multiKey1 = new MultiKey<Integer>(integer0, integer0, integer0, integer0, integer1);
      multiKey0.toString();
      multiKey1.toString();
      multiKey1.toString();
      multiKey1.toString();
      Object object0 = multiKey1.getKey(0);
      multiKey0.toString();
      MultiKey<Object> multiKey2 = new MultiKey<Object>("", "", object0);
      multiKey2.hashCode();
      multiKey0.toString();
      multiKey2.toString();
      multiKey1.toString();
      multiKey2.toString();
      multiKey0.toString();
      multiKey2.toString();
      int int0 = multiKey1.size();
      multiKey2.toString();
      multiKey0.hashCode();
      multiKey2.toString();
      multiKey0.hashCode();
      String string0 = multiKey2.toString();
      assertEquals("MultiKey[, , 0]", string0);
      
      multiKey2.hashCode();
      int int1 = multiKey2.hashCode();
      assertFalse(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      Object[] objectArray0 = new Object[7];
      MultiKey<String> multiKey0 = new MultiKey<String>("$ra0/?3)[EPsZV", "$ra0/?3)[EPsZV");
      multiKey0.getKey(0);
      objectArray0[0] = (Object) "$ra0/?3)[EPsZV";
      Object object0 = new Object();
      objectArray0[1] = object0;
      MultiKey<Object> multiKey1 = new MultiKey<Object>(objectArray0);
      multiKey1.getKey(0);
      objectArray0[2] = (Object) "$ra0/?3)[EPsZV";
      Object object1 = new Object();
      objectArray0[3] = object1;
      multiKey0.getKey(0);
      objectArray0[4] = (Object) "$ra0/?3)[EPsZV";
      Integer integer0 = new Integer(272);
      MultiKey<Integer> multiKey2 = new MultiKey<Integer>(integer0, integer0);
      Integer integer1 = multiKey2.getKey(0);
      objectArray0[5] = (Object) integer1;
      Object object2 = new Object();
      objectArray0[6] = object2;
      MultiKey<Object> multiKey3 = new MultiKey<Object>(objectArray0, true);
      assertFalse(multiKey3.equals((Object)multiKey1));
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      String[] stringArray0 = new String[6];
      stringArray0[0] = "S~D";
      stringArray0[1] = "~RJ[v@Z\".2D0 iKoJ4";
      stringArray0[2] = "";
      stringArray0[3] = "";
      stringArray0[4] = "Z*^Yz";
      stringArray0[5] = ";oHYH&4rJG";
      MultiKey<String> multiKey0 = new MultiKey<String>(stringArray0);
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.getKeys();
      Object object0 = new Object();
      Object object1 = new Object();
      Object object2 = new Object();
      MultiKey<Object> multiKey1 = new MultiKey<Object>(object0, object1, "", "MultiKey[S~D, ~RJ[v@Z\".2D0 iKoJ4, , , Z*^Yz, ;oHYH&4rJG]", object2);
      multiKey1.toString();
      multiKey1.size();
      Integer integer0 = new Integer(5);
      Integer integer1 = new Integer(5);
      multiKey1.toString();
      MultiKey<Integer> multiKey2 = new MultiKey<Integer>(integer0, integer0, integer1);
      multiKey0.toString();
      // Undeclared exception!
//      try { 
        multiKey2.getKey(5);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 5
//         //
//         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
//      }
  }

  @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      Integer integer0 = new Integer(393);
      MultiKey<Object> multiKey0 = new MultiKey<Object>(integer0, "", "vEq.PH|");
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.size();
      String[] stringArray0 = new String[5];
      multiKey0.toString();
      stringArray0[0] = "vEq.PH|";
      stringArray0[1] = "MultiKey[393, , vEq.PH|]";
      multiKey0.toString();
      stringArray0[2] = "MultiKey[393, , vEq.PH|]";
      stringArray0[3] = "MultiKey[393, , vEq.PH|]";
      stringArray0[4] = "vEq.PH|";
      MultiKey<String> multiKey1 = new MultiKey<String>(stringArray0);
      multiKey1.toString();
      multiKey1.toString();
      multiKey1.toString();
      String[] stringArray1 = multiKey1.getKeys();
      MultiKey<String> multiKey2 = new MultiKey<String>(stringArray1, false);
      multiKey2.toString();
      multiKey1.equals(multiKey2);
      Integer integer1 = new Integer(0);
      Integer integer2 = new Integer(0);
      Integer integer3 = new Integer(2861);
      MultiKey<Integer> multiKey3 = new MultiKey<Integer>(integer1, integer0, integer2, integer3);
      // Undeclared exception!
//      try { 
        multiKey3.getKey(1048);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 1048
//         //
//         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
//      }
  }

  @Test(timeout = 4000)
  public void test9()  throws Throwable  {
      Object[] objectArray0 = new Object[8];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      Object object2 = new Object();
      objectArray0[2] = object2;
      Object object3 = new Object();
      objectArray0[3] = object3;
      Object object4 = new Object();
      objectArray0[4] = object4;
      Object object5 = new Object();
      objectArray0[5] = object5;
      Object object6 = new Object();
      objectArray0[6] = object6;
      Object object7 = new Object();
      objectArray0[7] = object7;
      MultiKey<Object> multiKey0 = new MultiKey<Object>(objectArray0);
      // Undeclared exception!
//      try { 
        multiKey0.getKey(74);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 74
//         //
//         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
//      }
  }
}
