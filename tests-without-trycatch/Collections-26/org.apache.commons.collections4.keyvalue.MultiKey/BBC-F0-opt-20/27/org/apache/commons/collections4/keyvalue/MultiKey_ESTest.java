/*
 * This file was automatically generated by EvoSuite
 * Fri Oct 22 17:48:59 GMT 2021
 */

package org.apache.commons.collections4.keyvalue;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.lang.reflect.Array;
import org.apache.commons.collections4.keyvalue.MultiKey;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class MultiKey_ESTest extends MultiKey_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("", "", "");
      Integer[] integerArray0 = new Integer[7];
      Integer integer0 = new Integer(1538);
      integerArray0[0] = integer0;
      int int0 = 6;
      Integer integer1 = new Integer(6);
      integerArray0[1] = integer1;
      int int1 = 17;
      Integer integer2 = new Integer(17);
      integerArray0[2] = integer2;
      Integer integer3 = new Integer(int1);
      integerArray0[3] = integer3;
      Integer integer4 = new Integer((int) integerArray0[0]);
      integerArray0[4] = integer4;
      Integer integer5 = new Integer(1538);
      integerArray0[5] = integer5;
      Integer integer6 = new Integer(int0);
      integerArray0[6] = integer6;
      MultiKey<Integer> multiKey1 = new MultiKey<Integer>(integerArray0);
      MultiKey<Integer>[] multiKeyArray0 = (MultiKey<Integer>[]) Array.newInstance(MultiKey.class, 7);
      multiKeyArray0[0] = multiKey1;
      multiKeyArray0[1] = multiKey1;
      multiKeyArray0[2] = multiKey1;
      multiKeyArray0[3] = multiKey1;
      multiKeyArray0[4] = multiKey1;
      multiKeyArray0[5] = multiKey1;
      multiKeyArray0[6] = multiKey1;
      MultiKey<MultiKey<Integer>> multiKey2 = new MultiKey<MultiKey<Integer>>(multiKeyArray0, true);
      Object object0 = multiKey2.getKey(6);
      boolean boolean0 = multiKey1.equals(object0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Object object0 = new Object();
      MultiKey<Object> multiKey0 = new MultiKey<Object>(object0, (Object) null);
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.size();
      String[] stringArray0 = new String[0];
      MultiKey<String> multiKey1 = new MultiKey<String>(stringArray0, false);
      int int0 = multiKey1.size();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      String[] stringArray0 = new String[6];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = ">,og!f`y";
      stringArray0[3] = "MWruO@Ut lh-WIE";
      stringArray0[4] = "MultiKey";
      stringArray0[5] = ">`5FqTrRM";
      MultiKey<String> multiKey0 = new MultiKey<String>(stringArray0);
      multiKey0.toString();
      MultiKey<Object> multiKey1 = new MultiKey<Object>((Object[]) stringArray0, false);
      multiKey1.toString();
      multiKey1.getKey(0);
      String string0 = multiKey1.toString();
      assertEquals("MultiKey[, , >,og!f`y, MWruO@Ut lh-WIE, MultiKey, >`5FqTrRM]", string0);
      
      MultiKey<Object> multiKey2 = new MultiKey<Object>(multiKey0, "MultiKey", "");
      multiKey2.size();
      MultiKey<Object> multiKey3 = new MultiKey<Object>(">`5FqTrRM", "", ">,og!f`y");
      MultiKey<Object> multiKey4 = new MultiKey<Object>("", multiKey3, multiKey0);
      boolean boolean0 = multiKey0.equals(multiKey4);
      assertFalse(boolean0);
      
      Integer integer0 = new Integer(0);
      Integer integer1 = new Integer(0);
      MultiKey<Integer> multiKey5 = new MultiKey<Integer>(integer1, integer1, integer1);
      Integer integer2 = new Integer(1);
      Integer integer3 = new Integer(1);
      MultiKey<Integer> multiKey6 = new MultiKey<Integer>(integer2, integer3);
      MultiKey<MultiKey<Integer>> multiKey7 = new MultiKey<MultiKey<Integer>>(multiKey5, multiKey5, multiKey5, multiKey5, multiKey6);
      Integer integer4 = new Integer(1);
      MultiKey<Object> multiKey8 = new MultiKey<Object>(stringArray0);
      multiKey1.equals(multiKey8);
      assertFalse(multiKey1.equals((Object)multiKey2));
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      String[] stringArray0 = new String[6];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = ">,og!f`y";
      stringArray0[3] = "MWruO@Ut lh-WIE";
      stringArray0[4] = "MultiKey";
      stringArray0[5] = ">`5FqTrRM";
      MultiKey<String> multiKey0 = new MultiKey<String>(stringArray0);
      multiKey0.toString();
      MultiKey<Object> multiKey1 = new MultiKey<Object>((Object[]) stringArray0, false);
      multiKey1.getKey(0);
      multiKey1.toString();
      MultiKey<Object> multiKey2 = new MultiKey<Object>(multiKey0, "MultiKey", "");
      multiKey2.size();
      MultiKey<Object> multiKey3 = new MultiKey<Object>(">`5FqTrRM", "", ">,og!f`y");
      MultiKey<Object> multiKey4 = new MultiKey<Object>("", multiKey3, multiKey0);
      multiKey0.equals(multiKey4);
      MultiKey<String> multiKey5 = new MultiKey<String>("", ">`5FqTrRM", "}Q.3V)wyV3[Mw<B");
      multiKey2.equals(multiKey5);
      multiKey1.toString();
      MultiKey<Object> multiKey6 = new MultiKey<Object>(">,og!f`y", multiKey3);
      multiKey6.toString();
      MultiKey<MultiKey<Object>> multiKey7 = new MultiKey<MultiKey<Object>>(multiKey1, multiKey6, multiKey1, (MultiKey<Object>) null);
      multiKey6.toString();
      multiKey7.toString();
      multiKey7.hashCode();
      Integer integer0 = new Integer(3);
      MultiKey<Integer> multiKey8 = new MultiKey<Integer>((Integer) null, integer0);
      Integer integer1 = multiKey8.getKey(0);
      assertNull(integer1);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      MultiKey<Object> multiKey0 = null;
//      try {
        multiKey0 = new MultiKey<Object>((Object[]) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // The array of keys must not be null
//         //
//         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
//      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("", "", "", "", "eM");
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.hashCode();
      multiKey0.equals("MultiKey[, , , , eM]");
      multiKey0.toString();
      Integer integer0 = new Integer((-3619));
      Integer[] integerArray0 = new Integer[9];
      integerArray0[0] = integer0;
      integerArray0[1] = integer0;
      integerArray0[2] = integer0;
      integerArray0[3] = integer0;
      integerArray0[4] = integer0;
      Integer integer1 = new Integer((int) integerArray0[4]);
      integerArray0[5] = integer1;
      Integer integer2 = new Integer(0);
      integerArray0[6] = integer2;
      integerArray0[7] = integer0;
      integerArray0[8] = integer0;
      MultiKey<Integer> multiKey1 = new MultiKey<Integer>(integerArray0, false);
      MultiKey<Object> multiKey2 = new MultiKey<Object>(integer0, "", "", "eM", multiKey1);
      MultiKey<MultiKey<Object>> multiKey3 = new MultiKey<MultiKey<Object>>(multiKey2, multiKey2);
      int int0 = multiKey3.size();
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      MultiKey<Object> multiKey0 = new MultiKey<Object>(objectArray0, true);
      Object object0 = new Object();
      MultiKey<Object> multiKey1 = new MultiKey<Object>(multiKey0, multiKey0, object0);
      MultiKey<MultiKey<Object>> multiKey2 = new MultiKey<MultiKey<Object>>(multiKey0, multiKey0, multiKey0, multiKey1, multiKey0);
      multiKey2.size();
      multiKey1.getKeys();
      Integer[] integerArray0 = new Integer[2];
      Integer integer0 = new Integer(3569);
      integerArray0[0] = integer0;
      Integer integer1 = new Integer(3569);
      integerArray0[1] = integer1;
      MultiKey<Integer> multiKey3 = new MultiKey<Integer>(integerArray0);
      Integer[] integerArray1 = multiKey3.getKeys();
      assertEquals(2, integerArray1.length);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      String[] stringArray0 = new String[6];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "";
      stringArray0[3] = "$Jmbf";
      stringArray0[4] = "";
      stringArray0[5] = "M-:K<=oJv6";
      MultiKey<String> multiKey0 = new MultiKey<String>(stringArray0);
      multiKey0.getKey(0);
      Object object0 = new Object();
      Object object1 = new Object();
      MultiKey<Object> multiKey1 = new MultiKey<Object>("$Jmbf", "", object1, "$Jmbf");
      Integer integer0 = new Integer(3714);
      MultiKey<Object> multiKey2 = new MultiKey<Object>("", object0, multiKey1, integer0);
      assertEquals(4, multiKey2.size());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      String string0 = "";
      MultiKey<String> multiKey0 = new MultiKey<String>("7<tB{EpTI\"DQ=Hd7", "", "cT)l+tz");
      multiKey0.toString();
      Object object0 = new Object();
      multiKey0.toString();
      MultiKey<Integer> multiKey1 = null;
//      try {
        multiKey1 = new MultiKey<Integer>((Integer[]) null, false);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // The array of keys must not be null
//         //
//         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
//      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("V8uKFyP+c#8YXf2-4|/", "", "");
      int int0 = multiKey0.size();
      assertEquals(3, int0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("|)Rp_$[x$yj::w+", "6E", "", "~e8", "");
      multiKey0.toString();
      multiKey0.toString();
      Integer integer0 = new Integer((-1));
      Integer integer1 = new Integer((-1));
      MultiKey<Integer> multiKey1 = new MultiKey<Integer>((Integer) null, integer0, integer1, (Integer) null, integer1);
      multiKey1.toString();
      Integer integer2 = new Integer((-1));
      multiKey1.toString();
      MultiKey<Integer> multiKey2 = new MultiKey<Integer>(integer2, integer2, integer2, integer2, integer2);
      // Undeclared exception!
//      try { 
        multiKey2.getKey((-1));
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // -1
//         //
//         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
//      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      MultiKey<String>[] multiKeyArray0 = (MultiKey<String>[]) Array.newInstance(MultiKey.class, 5);
      MultiKey<String> multiKey0 = new MultiKey<String>("$;{TqF}PzMA;%  aNNE", "$;{TqF}PzMA;%  aNNE", "", "$;{TqF}PzMA;%  aNNE");
      multiKeyArray0[0] = multiKey0;
      MultiKey<String> multiKey1 = new MultiKey<String>("]p (6 lZV.|gEPO9a", "The array of keys must not be null");
      multiKeyArray0[1] = multiKey1;
      MultiKey<String> multiKey2 = new MultiKey<String>("", "\"");
      multiKeyArray0[2] = multiKey2;
      String[] stringArray0 = new String[8];
      stringArray0[0] = "The array of keys must not be null";
      stringArray0[1] = "]p (6 lZV.|gEPO9a";
      stringArray0[2] = "\"";
      stringArray0[3] = "";
      stringArray0[4] = "]p (6 lZV.|gEPO9a";
      stringArray0[5] = "$;{TqF}PzMA;%  aNNE";
      stringArray0[6] = "";
      stringArray0[7] = "$;{TqF}PzMA;%  aNNE";
      MultiKey<String> multiKey3 = new MultiKey<String>(stringArray0, true);
      multiKeyArray0[3] = multiKey3;
      MultiKey<String> multiKey4 = new MultiKey<String>("", "u{h", "$;{TqF}PzMA;%  aNNE");
      multiKeyArray0[4] = multiKey4;
      MultiKey<MultiKey<String>> multiKey5 = new MultiKey<MultiKey<String>>(multiKeyArray0);
      multiKey5.hashCode();
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      MultiKey<Object> multiKey0 = new MultiKey<Object>(objectArray0);
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      Object[] objectArray1 = multiKey0.getKeys();
      assertNotSame(objectArray1, objectArray0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Object object0 = new Object();
      Object object1 = new Object();
      MultiKey<String> multiKey0 = new MultiKey<String>("", "", "");
      // Undeclared exception!
//      try { 
        multiKey0.getKey(874);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 874
//         //
//         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
//      }
  }
}
