/*
 * This file was automatically generated by EvoSuite
 * Fri Oct 22 17:31:23 GMT 2021
 */

package org.apache.commons.collections4.keyvalue;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.lang.reflect.Array;
import org.apache.commons.collections4.keyvalue.MultiKey;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class MultiKey_ESTest extends MultiKey_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("MultiKey", "MultiKey", "");
      boolean boolean0 = multiKey0.equals(multiKey0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("o$", "", "", "Wah?lbF;3Mt-", "fuoVn,}/O:*-T");
      Object[] objectArray0 = new Object[0];
      MultiKey<Object> multiKey1 = new MultiKey<Object>(objectArray0);
      String string0 = multiKey1.toString();
      assertEquals("MultiKey[]", string0);
      
      multiKey1.size();
      int int0 = 1;
      Integer integer0 = new Integer(1);
      Integer integer1 = new Integer(1431);
      MultiKey<Integer> multiKey2 = new MultiKey<Integer>(integer0, integer1);
      Integer[] integerArray0 = new Integer[3];
      integerArray0[0] = integer0;
      integerArray0[1] = integer0;
      integerArray0[2] = integer0;
      MultiKey<Integer> multiKey3 = new MultiKey<Integer>(integerArray0, false);
      MultiKey<MultiKey<Integer>> multiKey4 = new MultiKey<MultiKey<Integer>>(multiKey2, multiKey2, multiKey3, multiKey3);
      MultiKey multiKey5 = (MultiKey)multiKey4.getKey(int0);
      boolean boolean0 = multiKey0.equals(multiKey5);
      assertEquals(2, multiKey5.size());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      MultiKey<Object> multiKey0 = new MultiKey<Object>(objectArray0, false);
      multiKey0.getKeys();
      String[] stringArray0 = new String[6];
      stringArray0[0] = "'ud&";
      stringArray0[1] = "";
      stringArray0[2] = "dDy8[%M";
      stringArray0[3] = "9?>";
      stringArray0[4] = "WxnzU[m6.8|";
      stringArray0[5] = "MultiKey";
      MultiKey<String> multiKey1 = new MultiKey<String>(stringArray0);
      int int0 = multiKey1.size();
      int int1 = multiKey1.size();
      assertTrue(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("", "", "", "");
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      Object object0 = new Object();
      multiKey0.equals(object0);
      MultiKey<MultiKey<String>> multiKey1 = null;
//      try {
        multiKey1 = new MultiKey<MultiKey<String>>((MultiKey<String>[]) null, true);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // The array of keys must not be null
//         //
//         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
//      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Integer[] integerArray0 = new Integer[5];
      int int0 = 1;
      Integer integer0 = new Integer(1);
      integerArray0[0] = integer0;
      Integer integer1 = new Integer((-1025));
      integerArray0[1] = integer1;
      Integer integer2 = new Integer((-1518));
      integerArray0[2] = integer2;
      Integer integer3 = new Integer((-1518));
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integerArray0);
      Integer integer4 = new Integer(1322);
      MultiKey<Object> multiKey1 = new MultiKey<Object>((Object[]) integerArray0, true);
      String string0 = multiKey1.toString();
      assertEquals("MultiKey[1, -1025, -1518, null, null]", string0);
      
      multiKey0.equals(multiKey1);
      MultiKey<String> multiKey2 = new MultiKey<String>("ns/:|Y\"9;Cf7NYd}+T", "ns/:|Y\"9;Cf7NYd}+T");
      MultiKey<MultiKey<String>> multiKey3 = new MultiKey<MultiKey<String>>(multiKey2, multiKey2, multiKey2, multiKey2, multiKey2);
      Integer integer5 = new Integer(int0);
      Integer integer6 = new Integer((-1518));
      MultiKey<Integer> multiKey4 = new MultiKey<Integer>((Integer) int0, integerArray0[1], integer2, integer6);
      assertFalse(multiKey4.equals((Object)multiKey0));
      
      boolean boolean0 = multiKey3.equals(integer1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Integer[] integerArray0 = new Integer[5];
      Integer integer0 = new Integer(1);
      integerArray0[0] = integer0;
      Integer integer1 = new Integer((-1025));
      integerArray0[1] = integer1;
      Integer integer2 = new Integer((-1518));
      integerArray0[2] = integer2;
      Integer integer3 = new Integer((-1518));
      integerArray0[3] = integer3;
      Integer integer4 = new Integer(0);
      integerArray0[4] = integer4;
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integerArray0);
      Integer integer5 = new Integer(0);
      boolean boolean0 = multiKey0.equals(integer5);
      assertFalse(boolean0);
      
      MultiKey<String> multiKey1 = new MultiKey<String>(":\"!x'>iOgS Pn144p,I", "ns/:|Y\"9;Cf7NYd}+T");
      MultiKey<MultiKey<String>> multiKey2 = new MultiKey<MultiKey<String>>(multiKey1, multiKey1, multiKey1, multiKey1, multiKey1);
      Integer integer6 = new Integer((int) integerArray0[3]);
      MultiKey<Integer> multiKey3 = new MultiKey<Integer>(integer0, integer6, integer1, integer6);
      boolean boolean1 = multiKey2.equals(multiKey3);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("[yK SD.baCV", "[yK SD.baCV", "[yK SD.baCV", "[yK SD.baCV", "[yK SD.baCV");
      multiKey0.hashCode();
      MultiKey<Object>[] multiKeyArray0 = (MultiKey<Object>[]) Array.newInstance(MultiKey.class, 8);
      MultiKey<Object> multiKey1 = new MultiKey<Object>("[yK SD.baCV", multiKey0, "[yK SD.baCV");
      multiKeyArray0[0] = multiKey1;
      MultiKey<String> multiKey2 = new MultiKey<String>("$t", "[yK SD.baCV");
      MultiKey<Object> multiKey3 = new MultiKey<Object>(multiKey1, multiKey2, multiKey2, "[yK SD.baCV");
      multiKeyArray0[1] = multiKey3;
      MultiKey<Object> multiKey4 = new MultiKey<Object>(multiKeyArray0);
      multiKeyArray0[2] = multiKey4;
      MultiKey<MultiKey<Object>> multiKey5 = new MultiKey<MultiKey<Object>>(multiKeyArray0);
      Object object0 = multiKey5.getKey(0);
      MultiKey<Object> multiKey6 = new MultiKey<Object>((Object[]) multiKeyArray0, true);
      MultiKey<Object> multiKey7 = new MultiKey<Object>(object0, multiKey6, "[yK SD.baCV");
      multiKeyArray0[3] = multiKey7;
      MultiKey<Object> multiKey8 = new MultiKey<Object>(multiKey3, multiKey2, multiKey5);
      multiKeyArray0[4] = multiKey8;
      MultiKey<String> multiKey9 = new MultiKey<String>("[yK SD.baCV", "$t");
      Object object1 = multiKey9.getKey(0);
      MultiKey<Object> multiKey10 = new MultiKey<Object>("[yK SD.baCV", "[yK SD.baCV", (Object) null);
      multiKeyArray0[5] = multiKey10;
      MultiKey<Object> multiKey11 = new MultiKey<Object>("$t", multiKey1, (Object) null);
      multiKeyArray0[6] = multiKey11;
      Integer integer0 = new Integer(0);
      MultiKey<Object> multiKey12 = new MultiKey<Object>(multiKey1, integer0, multiKey2);
      multiKeyArray0[7] = multiKey12;
      MultiKey<MultiKey<Object>> multiKey13 = new MultiKey<MultiKey<Object>>(multiKeyArray0, true);
      String string0 = multiKey13.toString();
      assertFalse(string0.equals((Object)object1));
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Integer integer0 = new Integer(0);
      MultiKey<Object> multiKey0 = new MultiKey<Object>((Object) null, (Object) null, integer0);
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.getKey(0);
      MultiKey<String> multiKey1 = new MultiKey<String>((String) null, (String) null, (String) null, (String) null);
      multiKey1.toString();
      multiKey1.toString();
      String string0 = multiKey0.toString();
      assertEquals("MultiKey[null, null, 0]", string0);
      
      Object object0 = new Object();
      multiKey0.equals(object0);
      boolean boolean0 = multiKey1.equals(object0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      MultiKey<Object> multiKey0 = null;
//      try {
        multiKey0 = new MultiKey<Object>((Object[]) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // The array of keys must not be null
//         //
//         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
//      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Object[] objectArray0 = new Object[7];
      String[] stringArray0 = new String[3];
      stringArray0[0] = "%PeX[8r1SG8HOLH/";
      stringArray0[1] = "*#5/UW^z4]smb?b";
      stringArray0[2] = "";
      MultiKey<String> multiKey0 = new MultiKey<String>(stringArray0, true);
      MultiKey<MultiKey<String>> multiKey1 = new MultiKey<MultiKey<String>>(multiKey0, multiKey0);
      MultiKey<String> multiKey2 = multiKey1.getKey(0);
      objectArray0[0] = (Object) multiKey2;
      Object object0 = new Object();
      objectArray0[1] = object0;
      MultiKey<Integer> multiKey3 = new MultiKey<Integer>((Integer) null, (Integer) null, (Integer) null);
      int int0 = (-1);
      // Undeclared exception!
//      try { 
        multiKey3.getKey((-1));
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // -1
//         //
//         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
//      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("", "*ILl[<GsYlP}'V", "E(Q%^", "E(Q%^", "*ILl[<GsYlP}'V");
      Integer integer0 = new Integer((-1));
      MultiKey<Integer> multiKey1 = new MultiKey<Integer>(integer0, integer0);
      Object object0 = multiKey1.getKey(0);
      Object[] objectArray0 = new Object[0];
      MultiKey<Object> multiKey2 = new MultiKey<Object>(objectArray0);
      MultiKey<Object> multiKey3 = new MultiKey<Object>("*ILl[<GsYlP}'V", object0, integer0, "", multiKey2);
      Object object1 = new Object();
      boolean boolean0 = multiKey3.equals(object1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Integer integer0 = new Integer(0);
      Integer integer1 = new Integer(0);
      MultiKey<Object> multiKey0 = new MultiKey<Object>(integer0, integer0, integer0, integer1, integer1);
      multiKey0.getKeys();
      Integer[] integerArray0 = new Integer[6];
      multiKey0.toString();
      integerArray0[0] = integer1;
      integerArray0[1] = integer1;
      integerArray0[2] = integer0;
      integerArray0[3] = integer1;
      integerArray0[4] = integer1;
      multiKey0.toString();
      integerArray0[5] = integer0;
      MultiKey<Integer> multiKey1 = new MultiKey<Integer>(integerArray0);
      multiKey1.equals(integer0);
      MultiKey<String> multiKey2 = new MultiKey<String>((String) null, (String) null, "", (String) null, "");
      multiKey2.toString();
      multiKey2.size();
      multiKey2.toString();
      multiKey0.size();
      multiKey2.toString();
      multiKey2.size();
      // Undeclared exception!
//      try { 
        multiKey1.getKey(3464);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 3464
//         //
//         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
//      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("", "", "");
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      MultiKey<String> multiKey1 = new MultiKey<String>("", "");
      MultiKey<MultiKey<String>> multiKey2 = new MultiKey<MultiKey<String>>(multiKey0, multiKey0, multiKey0, multiKey0, multiKey1);
      multiKey1.toString();
      multiKey2.size();
      multiKey0.toString();
      multiKey1.toString();
      // Undeclared exception!
//      try { 
        multiKey0.getKey(5);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 5
//         //
//         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
//      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("", "x:*<PJp");
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      MultiKey<Integer>[] multiKeyArray0 = (MultiKey<Integer>[]) Array.newInstance(MultiKey.class, 2);
      Integer integer0 = new Integer(0);
      Integer integer1 = new Integer(0);
      Integer integer2 = new Integer(0);
      MultiKey<Integer> multiKey1 = new MultiKey<Integer>(integer0, integer1, integer2);
      multiKeyArray0[0] = multiKey1;
      Integer integer3 = new Integer((-1183));
      Integer integer4 = new Integer((-1183));
      Integer integer5 = new Integer(0);
      MultiKey<Integer> multiKey2 = new MultiKey<Integer>(integer3, integer4, integer5);
      multiKeyArray0[1] = multiKey2;
      MultiKey<MultiKey<Integer>> multiKey3 = new MultiKey<MultiKey<Integer>>(multiKeyArray0, true);
      MultiKey<Integer>[] multiKeyArray1 = multiKey3.getKeys();
      assertEquals(2, multiKeyArray1.length);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Object object0 = new Object();
      MultiKey<String> multiKey0 = new MultiKey<String>("PYO SIz&", "i*50", "", "i*50", "i*50");
      MultiKey<String> multiKey1 = new MultiKey<String>("The array of keys must not be null", "The array of keys must not be null", "The array of keys must not be null", "The array of keys must not be null");
      // Undeclared exception!
//      try { 
        multiKey1.getKey(506);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 506
//         //
//         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
//      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>((String) null, (String) null, "");
      assertEquals(3, multiKey0.size());
  }
}
