/*
 * This file was automatically generated by EvoSuite
 * Fri Oct 22 17:39:35 GMT 2021
 */

package org.apache.commons.collections4.keyvalue;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.lang.reflect.Array;
import org.apache.commons.collections4.keyvalue.MultiKey;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class MultiKey_ESTest extends MultiKey_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      MultiKey<Object> multiKey0 = new MultiKey<Object>((Object) null, (Object) null, (Object) null);
      Integer integer0 = new Integer(504);
      multiKey0.toString();
      MultiKey<Integer> multiKey1 = new MultiKey<Integer>(integer0, (Integer) null);
      multiKey1.toString();
      multiKey1.toString();
      multiKey1.size();
      multiKey0.toString();
      multiKey0.toString();
      multiKey1.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      boolean boolean0 = multiKey0.equals(multiKey0);
      assertTrue(boolean0);
      
      multiKey1.toString();
      multiKey0.hashCode();
      multiKey0.toString();
      multiKey0.hashCode();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.hashCode();
      String string0 = multiKey0.toString();
      assertEquals("MultiKey[null, null, null]", string0);
      
      multiKey0.hashCode();
      Integer integer1 = new Integer(504);
      Integer integer2 = new Integer(504);
      Integer integer3 = new Integer(504);
      MultiKey<Integer> multiKey2 = new MultiKey<Integer>(integer0, integer2, integer1, integer3);
      assertFalse(multiKey2.equals((Object)multiKey1));
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      Integer integer0 = new Integer(431);
      Integer integer1 = new Integer(431);
      Object[] objectArray0 = new Object[0];
      MultiKey<Object> multiKey0 = new MultiKey<Object>(objectArray0, true);
      Object object0 = new Object();
      Object object1 = new Object();
      MultiKey<Object> multiKey1 = new MultiKey<Object>("%W42J6L", multiKey0, object0, object1);
      multiKey1.toString();
      int int0 = multiKey0.size();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      Integer integer0 = new Integer(424);
      Object object0 = new Object();
      Integer integer1 = new Integer(1900);
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integer1, integer1, integer1);
      multiKey0.toString();
      multiKey0.equals("MultiKey[1900, 1900, 1900]");
      MultiKey<Integer>[] multiKeyArray0 = (MultiKey<Integer>[]) Array.newInstance(MultiKey.class, 0);
      MultiKey<MultiKey<Integer>> multiKey1 = new MultiKey<MultiKey<Integer>>(multiKeyArray0);
      MultiKey<Integer>[] multiKeyArray1 = multiKey1.getKeys();
      assertEquals(0, multiKeyArray1.length);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      Integer integer0 = new Integer(1850);
      Integer integer1 = new Integer(1179);
      int int0 = 1;
      Integer integer2 = new Integer(1);
      Integer integer3 = new Integer(1850);
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integer0, integer1, integer2, integer3, integer2);
      multiKey0.toString();
      multiKey0.size();
      MultiKey<Object> multiKey1 = null;
//      try {
        multiKey1 = new MultiKey<Object>((Object[]) null, true);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // The array of keys must not be null
//         //
//         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
//      }
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      MultiKey<Object> multiKey0 = new MultiKey<Object>((Object) null, (Object) null, (Object) null);
      Integer integer0 = new Integer(504);
      multiKey0.toString();
      MultiKey<Integer> multiKey1 = new MultiKey<Integer>(integer0, (Integer) null);
      multiKey1.toString();
      multiKey1.toString();
      multiKey1.toString();
      multiKey1.size();
      MultiKey<Object> multiKey2 = new MultiKey<Object>("@6VP|-H|`5jG7K", multiKey1, multiKey0, multiKey1, multiKey0);
      multiKey2.toString();
      multiKey2.toString();
      multiKey1.toString();
      multiKey2.toString();
      multiKey2.toString();
      multiKey2.toString();
      multiKey0.equals(multiKey2);
      multiKey0.hashCode();
      multiKey2.toString();
      multiKey2.hashCode();
      multiKey2.toString();
      multiKey2.hashCode();
      multiKey0.toString();
      multiKey2.size();
      Object[] objectArray0 = multiKey2.getKeys();
      multiKey0.getKey(2);
      MultiKey<Object> multiKey3 = new MultiKey<Object>(objectArray0, false);
      Integer integer1 = new Integer(2);
      Integer integer2 = new Integer((-3568));
      Integer integer3 = new Integer(0);
      Integer integer4 = new Integer((-503));
      MultiKey<Integer> multiKey4 = new MultiKey<Integer>(integer1, integer2, integer3, integer4);
      // Undeclared exception!
//      try { 
        multiKey4.getKey(1539);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 1539
//         //
//         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
//      }
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      Object object0 = new Object();
      MultiKey<Object> multiKey0 = new MultiKey<Object>(object0, object0);
      multiKey0.toString();
      multiKey0.getKeys();
      multiKey0.equals(object0);
      MultiKey<String> multiKey1 = null;
//      try {
        multiKey1 = new MultiKey<String>((String[]) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // The array of keys must not be null
//         //
//         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
//      }
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("", "MultiKey", "Nj8@'3in1,2wU OoT", (String) null);
      multiKey0.toString();
      multiKey0.toString();
      String string0 = multiKey0.getKey(0);
      assertEquals("", string0);
      
      Integer integer0 = new Integer(0);
      String[] stringArray0 = new String[7];
      stringArray0[0] = "";
      stringArray0[1] = null;
      stringArray0[2] = null;
      stringArray0[3] = "";
      stringArray0[4] = "";
      stringArray0[5] = "";
      stringArray0[6] = "MultiKey";
      MultiKey<String> multiKey1 = new MultiKey<String>(stringArray0, false);
      MultiKey<Object> multiKey2 = new MultiKey<Object>(integer0, multiKey1, (Object) null, "x_", "MultiKey");
      MultiKey<MultiKey<Object>> multiKey3 = new MultiKey<MultiKey<Object>>(multiKey2, multiKey2, multiKey2);
      multiKey3.size();
      boolean boolean0 = multiKey0.equals("x_");
      assertFalse(boolean0);
      
      Integer[] integerArray0 = new Integer[4];
      Integer integer1 = new Integer(782);
      integerArray0[0] = integer1;
      Integer integer2 = new Integer(0);
      integerArray0[1] = integer2;
      integerArray0[2] = integer0;
      integerArray0[3] = integer0;
      MultiKey<Integer> multiKey4 = new MultiKey<Integer>(integerArray0);
      multiKey4.size();
      String string1 = multiKey0.toString();
      assertEquals("MultiKey[, MultiKey, Nj8@'3in1,2wU OoT, null]", string1);
      
      multiKey2.getKeys();
      assertFalse(multiKey1.equals((Object)multiKey0));
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      String string0 = "Eqd2KeHhSk#;]";
      MultiKey<String> multiKey0 = new MultiKey<String>((String) null, (String) null, "", "Eqd2KeHhSk#;]");
      multiKey0.toString();
      String[] stringArray0 = new String[5];
      stringArray0[0] = null;
      stringArray0[1] = "Eqd2KeHhSk#;]";
      stringArray0[2] = "Eqd2KeHhSk#;]";
      stringArray0[3] = "Eqd2KeHhSk#;]";
      stringArray0[4] = "MultiKey[null, null, , Eqd2KeHhSk#;]]";
      MultiKey<String> multiKey1 = new MultiKey<String>(stringArray0);
      Object object0 = new Object();
      MultiKey<Object> multiKey2 = new MultiKey<Object>("Eqd2KeHhSk#;]", multiKey1, object0, "MultiKey[null, null, , Eqd2KeHhSk#;]]");
      int int0 = (-1);
      // Undeclared exception!
//      try { 
        multiKey2.getKey((-1));
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // -1
//         //
//         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
//      }
  }

  @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("", "", "", "", "o1NqnW ");
      multiKey0.size();
      Integer[] integerArray0 = new Integer[2];
      Integer integer0 = new Integer(3348);
      integerArray0[0] = integer0;
      Integer integer1 = new Integer((-1360));
      integerArray0[1] = integer1;
      MultiKey<Integer> multiKey1 = new MultiKey<Integer>(integerArray0);
      multiKey1.toString();
      multiKey1.toString();
      multiKey0.equals("");
      multiKey1.toString();
      multiKey0.equals(integer1);
      MultiKey<Integer> multiKey2 = new MultiKey<Integer>(integerArray0);
      Object object0 = new Object();
      MultiKey<Object> multiKey3 = new MultiKey<Object>(multiKey2, object0, "MultiKey[3348, -1360]", "8$sma|n[[Z3S", "");
      Object object1 = new Object();
      MultiKey<Object> multiKey4 = new MultiKey<Object>(multiKey3, "8$sma|n[[Z3S", object1, object1);
      // Undeclared exception!
//      try { 
        multiKey4.getKey((-222));
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // -222
//         //
//         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
//      }
  }

  @Test(timeout = 4000)
  public void test9()  throws Throwable  {
      Integer integer0 = new Integer((-1));
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integer0, integer0);
      MultiKey<Integer>[] multiKeyArray0 = (MultiKey<Integer>[]) Array.newInstance(MultiKey.class, 4);
      multiKeyArray0[0] = multiKey0;
      multiKeyArray0[1] = multiKey0;
      multiKeyArray0[2] = multiKey0;
      multiKey0.toString();
      multiKeyArray0[3] = multiKey0;
      MultiKey<MultiKey<Integer>> multiKey1 = new MultiKey<MultiKey<Integer>>(multiKeyArray0, false);
      multiKey1.size();
      // Undeclared exception!
//      try { 
        multiKey1.getKey(4);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 4
//         //
//         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
//      }
  }
}
