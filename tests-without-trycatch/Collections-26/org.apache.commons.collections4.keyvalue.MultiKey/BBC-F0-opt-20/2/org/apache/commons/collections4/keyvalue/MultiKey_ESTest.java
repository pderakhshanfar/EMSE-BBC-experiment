/*
 * This file was automatically generated by EvoSuite
 * Wed Oct 13 20:46:44 GMT 2021
 */

package org.apache.commons.collections4.keyvalue;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.lang.reflect.Array;
import org.apache.commons.collections4.keyvalue.MultiKey;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class MultiKey_ESTest extends MultiKey_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("", "", "", "", "");
      MultiKey<Object> multiKey1 = new MultiKey<Object>("", "", multiKey0);
      String string0 = multiKey1.toString();
      assertEquals("MultiKey[, , MultiKey[, , , , ]]", string0);
      
      MultiKey<MultiKey<String>> multiKey2 = new MultiKey<MultiKey<String>>(multiKey0, multiKey0);
      Object object0 = multiKey2.getKey(0);
      boolean boolean0 = multiKey0.equals(object0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("", "", "};lyft,eiy@f6B(%Pfu");
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      Object[] objectArray0 = new Object[0];
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.hashCode();
      MultiKey<Object> multiKey1 = new MultiKey<Object>(objectArray0);
      multiKey1.toString();
      Object[] objectArray1 = multiKey1.getKeys();
      assertNotSame(objectArray0, objectArray1);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Object object0 = new Object();
      MultiKey<Object> multiKey0 = new MultiKey<Object>("", object0);
      multiKey0.toString();
      MultiKey<MultiKey<Object>> multiKey1 = new MultiKey<MultiKey<Object>>(multiKey0, multiKey0, multiKey0);
      Integer[] integerArray0 = new Integer[0];
      MultiKey<Integer> multiKey2 = new MultiKey<Integer>(integerArray0, true);
      multiKey2.toString();
      int int0 = multiKey2.size();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Object[] objectArray0 = new Object[4];
      MultiKey<String> multiKey0 = new MultiKey<String>("", ";v]f@^^g)Z4", "", (String) null);
      int int0 = 3;
      multiKey0.getKey(3);
      objectArray0[0] = (Object) null;
      Object object0 = new Object();
      objectArray0[1] = object0;
      MultiKey<Object> multiKey1 = new MultiKey<Object>(multiKey0, ";v]f@^^g)Z4");
      int int1 = (-243);
      // Undeclared exception!
//      try { 
        multiKey1.getKey((-243));
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // -243
//         //
//         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
//      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("", "", "};lyft,eiy@f6B(%Pfu");
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.getKey(1);
      Object[] objectArray0 = new Object[0];
      multiKey0.toString();
      MultiKey<Object> multiKey1 = new MultiKey<Object>(objectArray0, false);
      multiKey1.hashCode();
      multiKey1.toString();
      multiKey0.toString();
      multiKey0.equals(multiKey1);
      multiKey0.hashCode();
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("N_UPkjt", "@(", "@(", "@(", "");
      multiKey0.toString();
      multiKey0.toString();
      int int0 = 1;
      multiKey0.getKey(1);
      Integer integer0 = new Integer(1);
      MultiKey<Object> multiKey1 = new MultiKey<Object>(integer0, "");
      multiKey1.getKeys();
      multiKey1.hashCode();
      Integer[] integerArray0 = new Integer[8];
      integerArray0[0] = integer0;
      integerArray0[1] = integer0;
      integerArray0[2] = integer0;
      integerArray0[3] = integer0;
      integerArray0[4] = integer0;
      Integer integer1 = new Integer(int0);
      integerArray0[5] = integer1;
      integerArray0[6] = integer0;
      integerArray0[7] = integer0;
      MultiKey<Integer> multiKey2 = new MultiKey<Integer>(integerArray0);
      multiKey2.toString();
      int int1 = multiKey2.size();
      assertEquals(8, int1);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Integer integer0 = new Integer(0);
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integer0, integer0, integer0);
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      MultiKey<MultiKey<Integer>> multiKey1 = new MultiKey<MultiKey<Integer>>(multiKey0, multiKey0, multiKey0, multiKey0);
      multiKey1.toString();
      multiKey1.toString();
      String[] stringArray0 = null;
      MultiKey<String> multiKey2 = null;
//      try {
        multiKey2 = new MultiKey<String>((String[]) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // The array of keys must not be null
//         //
//         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
//      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      MultiKey<Integer> multiKey0 = null;
//      try {
        multiKey0 = new MultiKey<Integer>((Integer[]) null, true);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // The array of keys must not be null
//         //
//         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
//      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Object object0 = new Object();
      Object object1 = new Object();
      MultiKey<Object> multiKey0 = new MultiKey<Object>(object0, object0, object0, object1, object0);
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      String[] stringArray0 = new String[9];
      stringArray0[0] = "MultiKey[java.lang.Object@f3ae7f6, java.lang.Object@f3ae7f6, java.lang.Object@f3ae7f6, java.lang.Object@6b08d64e, java.lang.Object@f3ae7f6]";
      stringArray0[1] = "MultiKey[java.lang.Object@f3ae7f6, java.lang.Object@f3ae7f6, java.lang.Object@f3ae7f6, java.lang.Object@6b08d64e, java.lang.Object@f3ae7f6]";
      stringArray0[2] = "MultiKey[java.lang.Object@f3ae7f6, java.lang.Object@f3ae7f6, java.lang.Object@f3ae7f6, java.lang.Object@6b08d64e, java.lang.Object@f3ae7f6]";
      stringArray0[3] = "MultiKey[java.lang.Object@f3ae7f6, java.lang.Object@f3ae7f6, java.lang.Object@f3ae7f6, java.lang.Object@6b08d64e, java.lang.Object@f3ae7f6]";
      stringArray0[4] = "MultiKey[java.lang.Object@f3ae7f6, java.lang.Object@f3ae7f6, java.lang.Object@f3ae7f6, java.lang.Object@6b08d64e, java.lang.Object@f3ae7f6]";
      stringArray0[5] = "MultiKey[java.lang.Object@f3ae7f6, java.lang.Object@f3ae7f6, java.lang.Object@f3ae7f6, java.lang.Object@6b08d64e, java.lang.Object@f3ae7f6]";
      stringArray0[6] = "MultiKey[java.lang.Object@f3ae7f6, java.lang.Object@f3ae7f6, java.lang.Object@f3ae7f6, java.lang.Object@6b08d64e, java.lang.Object@f3ae7f6]";
      stringArray0[7] = "MultiKey[java.lang.Object@f3ae7f6, java.lang.Object@f3ae7f6, java.lang.Object@f3ae7f6, java.lang.Object@6b08d64e, java.lang.Object@f3ae7f6]";
      stringArray0[8] = "MultiKey[java.lang.Object@f3ae7f6, java.lang.Object@f3ae7f6, java.lang.Object@f3ae7f6, java.lang.Object@6b08d64e, java.lang.Object@f3ae7f6]";
      MultiKey<String> multiKey1 = new MultiKey<String>(stringArray0);
      multiKey1.toString();
      multiKey1.toString();
      multiKey1.size();
      MultiKey<MultiKey<Object>> multiKey2 = new MultiKey<MultiKey<Object>>(multiKey0, multiKey0, multiKey0, multiKey0);
      multiKey2.equals("MultiKey[java.lang.Object@f3ae7f6, java.lang.Object@f3ae7f6, java.lang.Object@f3ae7f6, java.lang.Object@6b08d64e, java.lang.Object@f3ae7f6]");
      multiKey0.equals((Object) null);
      multiKey0.toString();
      multiKey1.size();
      // Undeclared exception!
//      try { 
        multiKey1.getKey(9);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 9
//         //
//         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
//      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Integer[] integerArray0 = new Integer[5];
      int int0 = 0;
      Integer integer0 = new Integer(0);
      integerArray0[0] = integer0;
      Integer integer1 = new Integer(0);
      integerArray0[1] = integer1;
      Integer integer2 = new Integer(int0);
      integerArray0[2] = integer2;
      Integer integer3 = new Integer(int0);
      integerArray0[3] = integer3;
      Integer integer4 = new Integer(0);
      integerArray0[4] = integer4;
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integerArray0);
      multiKey0.toString();
      Object object0 = new Object();
      multiKey0.toString();
      MultiKey<Object> multiKey1 = new MultiKey<Object>(multiKey0, object0, "", "w;", int0);
      int int1 = multiKey1.hashCode();
      assertFalse(int1 == int0);
      
      String[] stringArray0 = new String[8];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "MultiKey[0, 0, 0, 0, 0]";
      stringArray0[3] = "";
      stringArray0[4] = "MultiKey[0, 0, 0, 0, 0]";
      stringArray0[5] = "";
      stringArray0[6] = "";
      stringArray0[7] = "MultiKey[0, 0, 0, 0, 0]";
      MultiKey<String> multiKey2 = new MultiKey<String>(stringArray0);
      String string0 = multiKey2.toString();
      assertEquals("MultiKey[, , MultiKey[0, 0, 0, 0, 0], , MultiKey[0, 0, 0, 0, 0], , , MultiKey[0, 0, 0, 0, 0]]", string0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      MultiKey<String>[] multiKeyArray0 = (MultiKey<String>[]) Array.newInstance(MultiKey.class, 3);
      String[] stringArray0 = new String[2];
      stringArray0[0] = "org.apache.commons.collections4.keyvalue.MultiKey";
      stringArray0[1] = "org.apache.commons.collections4.keyvalue.MultiKey";
      MultiKey<String> multiKey0 = new MultiKey<String>(stringArray0, true);
      multiKeyArray0[0] = multiKey0;
      MultiKey<String> multiKey1 = new MultiKey<String>("org.apache.commons.collections4.keyvalue.MultiKey", (String) null, "");
      multiKeyArray0[1] = multiKey1;
      MultiKey<String> multiKey2 = new MultiKey<String>("3|dwq`RR~'a:CIadu", "The array of keys must not be null", "k)z8n3)meK0qE%+", "org.apache.commons.collections4.keyvalue.MultiKey", (String) null);
      multiKeyArray0[2] = multiKey2;
      MultiKey<MultiKey<String>> multiKey3 = new MultiKey<MultiKey<String>>(multiKeyArray0);
      MultiKey<String> multiKey4 = multiKey3.getKey(1);
      assertEquals(3, multiKey4.size());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      MultiKey<Object> multiKey0 = new MultiKey<Object>("", "kX`!H*vA", "", "");
      String string0 = multiKey0.toString();
      assertEquals("MultiKey[, kX`!H*vA, , ]", string0);
      
      Object object0 = multiKey0.getKey(0);
      assertEquals("", object0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      String[] stringArray0 = new String[2];
      stringArray0[0] = "";
      stringArray0[1] = "]m%)*7";
      MultiKey<String> multiKey0 = new MultiKey<String>(stringArray0, true);
      Integer integer0 = new Integer(5);
      MultiKey<Integer> multiKey1 = new MultiKey<Integer>(integer0, integer0);
      Object object0 = multiKey1.getKey(0);
      MultiKey<Object> multiKey2 = new MultiKey<Object>(object0, integer0, "&1$#W", multiKey1, "");
      boolean boolean0 = multiKey2.equals("");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Object object0 = null;
      String string0 = "(<&=p)*[#.h0+";
      Integer integer0 = new Integer((-108));
      Integer integer1 = new Integer((-108));
      Integer integer2 = new Integer(1);
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integer0, integer1, integer2);
      // Undeclared exception!
//      try { 
        multiKey0.getKey(65);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 65
//         //
//         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
//      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Integer integer0 = new Integer((-1960));
      Integer integer1 = new Integer((-1960));
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integer0, integer0, integer1, integer0);
      String[] stringArray0 = new String[2];
      stringArray0[0] = "";
      stringArray0[1] = "";
      MultiKey<String> multiKey1 = new MultiKey<String>(stringArray0);
      multiKey1.toString();
      // Undeclared exception!
//      try { 
        multiKey1.getKey((-1960));
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // -1960
//         //
//         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
//      }
  }
}
