/*
 * This file was automatically generated by EvoSuite
 * Wed Oct 20 12:38:07 GMT 2021
 */

package org.apache.commons.collections4.keyvalue;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.lang.reflect.Array;
import org.apache.commons.collections4.keyvalue.MultiKey;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class MultiKey_ESTest extends MultiKey_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      Integer integer0 = new Integer(0);
      Integer integer1 = new Integer((-2418));
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integer0, integer0, integer1);
      MultiKey<Integer>[] multiKeyArray0 = (MultiKey<Integer>[]) Array.newInstance(MultiKey.class, 9);
      MultiKey<Integer> multiKey1 = new MultiKey<Integer>(integer0, integer0);
      multiKeyArray0[0] = multiKey1;
      multiKeyArray0[1] = multiKey0;
      multiKeyArray0[2] = multiKey0;
      multiKeyArray0[3] = multiKey0;
      multiKeyArray0[4] = multiKey0;
      Integer integer2 = new Integer(1);
      String string0 = multiKey0.toString();
      assertEquals("MultiKey[0, 0, -2418]", string0);
      
      MultiKey<String> multiKey2 = new MultiKey<String>("0Pv!'{u8ztdAw_?D", "S{k@sMVQDvmd1q4.W", "]g$_5?F|kg{&NRe%8[6", "", ".rwf");
      Object object0 = new Object();
      Object object1 = new Object();
      MultiKey<Object> multiKey3 = new MultiKey<Object>(object0, object1, ".rwf", integer1);
      boolean boolean0 = multiKey3.equals(integer2);
      boolean boolean1 = multiKey0.equals(multiKey0);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      Integer integer0 = new Integer(2115);
      MultiKey<String> multiKey0 = new MultiKey<String>((String) null, (String) null, (String) null, (String) null);
      Integer[] integerArray0 = new Integer[5];
      integerArray0[0] = integer0;
      integerArray0[1] = integer0;
      integerArray0[2] = integer0;
      integerArray0[3] = integer0;
      Integer integer1 = new Integer(7);
      integerArray0[4] = integer1;
      MultiKey<Integer> multiKey1 = new MultiKey<Integer>(integerArray0, true);
      MultiKey<Integer> multiKey2 = new MultiKey<Integer>(integerArray0, false);
      multiKey1.equals(multiKey2);
      MultiKey<Object> multiKey3 = new MultiKey<Object>((Object[]) integerArray0, true);
      // Undeclared exception!
//      try { 
        multiKey3.getKey((int) integerArray0[3]);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 2115
//         //
//         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
//      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      String[] stringArray0 = new String[0];
      MultiKey<String> multiKey0 = new MultiKey<String>(stringArray0);
      int int0 = multiKey0.size();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("k", "");
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      Integer[] integerArray0 = new Integer[0];
      MultiKey<Integer> multiKey1 = new MultiKey<Integer>(integerArray0, true);
      multiKey1.getKeys();
      multiKey0.toString();
      int int0 = 2456;
      // Undeclared exception!
//      try { 
        multiKey0.getKey(2456);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 2456
//         //
//         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
//      }
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      MultiKey<MultiKey<Object>> multiKey0 = new MultiKey<MultiKey<Object>>((MultiKey<Object>) null, (MultiKey<Object>) null);
      multiKey0.getKey(0);
      Integer integer0 = new Integer(0);
      MultiKey<Integer> multiKey1 = new MultiKey<Integer>(integer0, integer0, (Integer) null, integer0);
      Object object0 = multiKey1.getKey(0);
      Object object1 = new Object();
      Integer integer1 = new Integer((-705));
      MultiKey<Object> multiKey2 = new MultiKey<Object>(multiKey0, object0, object1, (Object) null, integer1);
      MultiKey<Object> multiKey3 = new MultiKey<Object>((Object) null, (Object) null, (Object) null, multiKey2, integer1);
      Object[] objectArray0 = multiKey3.getKeys();
      assertEquals(5, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      String string0 = "]1(|fj-E^wwI-f3c7";
      MultiKey<Object> multiKey0 = new MultiKey<Object>("The array of keys must not be null", "The array of keys must not be null", "The array of keys must not be null", "]1(|fj-E^wwI-f3c7", "The array of keys must not be null");
      multiKey0.toString();
      Integer integer0 = new Integer((-2952));
      MultiKey<String> multiKey1 = null;
//      try {
        multiKey1 = new MultiKey<String>((String[]) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // The array of keys must not be null
//         //
//         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
//      }
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      Integer[] integerArray0 = new Integer[2];
      int int0 = 0;
      Integer integer0 = new Integer(0);
      integerArray0[0] = integer0;
      Integer integer1 = new Integer(1);
      integerArray0[1] = integer1;
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integerArray0, false);
      MultiKey<String> multiKey1 = new MultiKey<String>("14", "MultiKey", "14", "MultiKey", "\"ff2|m1}Z}[K&B%");
      multiKey1.toString();
      multiKey1.toString();
      multiKey1.hashCode();
      MultiKey<MultiKey<String>> multiKey2 = new MultiKey<MultiKey<String>>(multiKey1, multiKey1, multiKey1, multiKey1);
      multiKey2.toString();
      multiKey2.getKeys();
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) multiKey0;
      objectArray0[1] = (Object) "14";
      Object object0 = new Object();
      MultiKey<Object> multiKey3 = new MultiKey<Object>(object0, integer1);
      Object object1 = multiKey3.getKey(1);
      objectArray0[2] = object1;
      objectArray0[3] = (Object) multiKey0;
      objectArray0[4] = (Object) multiKey0;
      Object object2 = new Object();
      objectArray0[5] = object2;
      objectArray0[6] = (Object) "\"ff2|m1}Z}[K&B%";
      objectArray0[7] = (Object) "MultiKey";
      objectArray0[8] = (Object) multiKey0;
      MultiKey<Object> multiKey4 = new MultiKey<Object>(objectArray0);
      MultiKey multiKey5 = (MultiKey)multiKey4.getKey(int0);
      assertEquals(2, multiKey5.size());
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      String[] stringArray0 = new String[0];
      MultiKey<String> multiKey0 = new MultiKey<String>(stringArray0, true);
      multiKey0.toString();
      MultiKey<String> multiKey1 = new MultiKey<String>("MultiKey[]", "K;I", "K;I");
      MultiKey<Object> multiKey2 = new MultiKey<Object>(multiKey1, multiKey1, multiKey0);
      multiKey2.equals(multiKey1);
      multiKey1.toString();
      multiKey0.toString();
      multiKey2.toString();
      multiKey0.toString();
      multiKey2.toString();
      MultiKey<Integer> multiKey3 = null;
//      try {
        multiKey3 = new MultiKey<Integer>((Integer[]) null, false);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // The array of keys must not be null
//         //
//         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
//      }
  }

  @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      Object object0 = new Object();
      MultiKey<Object> multiKey0 = new MultiKey<Object>(object0, object0);
      MultiKey<MultiKey<Object>> multiKey1 = new MultiKey<MultiKey<Object>>(multiKey0, multiKey0);
      multiKey1.toString();
      multiKey1.size();
      multiKey1.toString();
      MultiKey<Integer>[] multiKeyArray0 = (MultiKey<Integer>[]) Array.newInstance(MultiKey.class, 1);
      Integer[] integerArray0 = new Integer[1];
      Integer integer0 = new Integer(2);
      integerArray0[0] = integer0;
      multiKey1.toString();
      MultiKey<Integer> multiKey2 = new MultiKey<Integer>(integerArray0);
      multiKey1.toString();
      multiKeyArray0[0] = multiKey2;
      boolean boolean0 = false;
      MultiKey<MultiKey<Integer>> multiKey3 = new MultiKey<MultiKey<Integer>>(multiKeyArray0, false);
      multiKey3.size();
      // Undeclared exception!
//      try { 
        multiKey2.getKey(3350);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 3350
//         //
//         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
//      }
  }

  @Test(timeout = 4000)
  public void test9()  throws Throwable  {
      MultiKey<String>[] multiKeyArray0 = (MultiKey<String>[]) Array.newInstance(MultiKey.class, 6);
      MultiKey<String> multiKey0 = new MultiKey<String>((String) null, (String) null, "t\"g");
      multiKeyArray0[0] = multiKey0;
      String[] stringArray0 = new String[7];
      stringArray0[0] = null;
      stringArray0[1] = null;
      stringArray0[2] = "t\"g";
      stringArray0[3] = "";
      stringArray0[4] = null;
      stringArray0[5] = "t\"g";
      stringArray0[6] = "t\"g";
      MultiKey<String> multiKey1 = new MultiKey<String>(stringArray0);
      multiKeyArray0[1] = multiKey1;
      MultiKey<String> multiKey2 = new MultiKey<String>("", "", "", "t\"g");
      multiKeyArray0[2] = multiKey2;
      MultiKey<String> multiKey3 = new MultiKey<String>("MultiKey", (String) null, "");
      multiKeyArray0[3] = multiKey3;
      MultiKey<String> multiKey4 = new MultiKey<String>("", "", "", "");
      multiKeyArray0[4] = multiKey4;
      MultiKey<String> multiKey5 = new MultiKey<String>("", "org.apache.commons.collections4.keyvalue.MultiKey", "", "", "MultiKey");
      multiKeyArray0[5] = multiKey5;
      MultiKey<MultiKey<String>> multiKey6 = new MultiKey<MultiKey<String>>(multiKeyArray0, false);
      boolean boolean0 = multiKey6.equals((Object) null);
      assertFalse(boolean0);
  }
}
