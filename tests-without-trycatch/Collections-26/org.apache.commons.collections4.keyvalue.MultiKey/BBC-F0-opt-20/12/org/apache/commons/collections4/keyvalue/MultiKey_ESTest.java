/*
 * This file was automatically generated by EvoSuite
 * Wed Oct 20 12:16:27 GMT 2021
 */

package org.apache.commons.collections4.keyvalue;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.lang.reflect.Array;
import org.apache.commons.collections4.keyvalue.MultiKey;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class MultiKey_ESTest extends MultiKey_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("oq]TtczL", "oq]TtczL");
      Integer integer0 = new Integer(0);
      MultiKey<String> multiKey1 = new MultiKey<String>("oq]TtczL", "MultiKey", "V<7qdueISnu9:]xLkD9", "", "~-(~V0");
      MultiKey<MultiKey<String>> multiKey2 = new MultiKey<MultiKey<String>>(multiKey0, multiKey0, multiKey1);
      Object object0 = multiKey2.getKey(0);
      boolean boolean0 = multiKey1.equals(object0);
      boolean boolean1 = multiKey0.equals(object0);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = null;
      objectArray0[1] = null;
      objectArray0[2] = null;
      objectArray0[3] = null;
      objectArray0[4] = null;
      objectArray0[5] = null;
      objectArray0[6] = null;
      objectArray0[7] = null;
      objectArray0[8] = null;
      MultiKey<Object> multiKey0 = new MultiKey<Object>(objectArray0);
      Integer integer0 = new Integer(2802);
      Integer integer1 = new Integer(0);
      MultiKey<Object> multiKey1 = new MultiKey<Object>(objectArray0[1], integer0, integer1, "Ya");
      multiKey1.getKey(0);
      MultiKey<Object> multiKey2 = new MultiKey<Object>((Object) null, (Object) null, multiKey0, (Object) null, objectArray0[8]);
      MultiKey<Object> multiKey3 = new MultiKey<Object>((Object) null, multiKey2);
      assertEquals(2, multiKey3.size());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>((String) null, "d|Ng 4hab})}Hgz+XV;", "d|Ng 4hab})}Hgz+XV;", (String) null);
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.hashCode();
      multiKey0.toString();
      multiKey0.toString();
      MultiKey<Object> multiKey1 = null;
//      try {
        multiKey1 = new MultiKey<Object>((Object[]) null, false);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // The array of keys must not be null
//         //
//         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
//      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      MultiKey<Object> multiKey0 = null;
//      try {
        multiKey0 = new MultiKey<Object>((Object[]) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // The array of keys must not be null
//         //
//         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
//      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      String[] stringArray0 = new String[0];
      MultiKey<String> multiKey0 = new MultiKey<String>(stringArray0, true);
      multiKey0.toString();
      Integer integer0 = new Integer(2454);
      Integer integer1 = new Integer(0);
      MultiKey<Integer> multiKey1 = new MultiKey<Integer>(integer0, integer0, integer0, integer1, integer1);
      multiKey1.toString();
      multiKey0.equals(multiKey1);
      MultiKey<Object> multiKey2 = new MultiKey<Object>(stringArray0);
      multiKey2.getKeys();
      MultiKey<String>[] multiKeyArray0 = (MultiKey<String>[]) Array.newInstance(MultiKey.class, 2);
      multiKeyArray0[0] = multiKey0;
      multiKeyArray0[1] = multiKey0;
      MultiKey<MultiKey<String>> multiKey3 = new MultiKey<MultiKey<String>>(multiKeyArray0);
      MultiKey<String>[] multiKeyArray1 = multiKey3.getKeys();
      assertNotSame(multiKeyArray0, multiKeyArray1);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("", "", "", "7", (String) null);
      multiKey0.getKey(0);
      MultiKey<String> multiKey1 = new MultiKey<String>("?)h[", "7", "M5 Qf_=-");
      multiKey1.toString();
      String[] stringArray0 = new String[0];
      MultiKey<String> multiKey2 = new MultiKey<String>(stringArray0);
      MultiKey<Object> multiKey3 = new MultiKey<Object>("", multiKey1, multiKey2);
      multiKey1.toString();
      multiKey3.hashCode();
      MultiKey<MultiKey<String>> multiKey4 = new MultiKey<MultiKey<String>>((MultiKey<String>) null, multiKey0);
      multiKey4.toString();
      multiKey0.toString();
      multiKey4.toString();
      multiKey4.toString();
      multiKey3.toString();
      multiKey4.toString();
      boolean boolean0 = multiKey3.equals("");
      assertFalse(boolean0);
      
      Integer integer0 = new Integer(1117);
      Integer integer1 = new Integer(1117);
      MultiKey<Integer> multiKey5 = new MultiKey<Integer>(integer0, integer0, integer1);
      multiKey1.toString();
      multiKey5.toString();
      multiKey5.toString();
      multiKey3.toString();
      multiKey3.hashCode();
      multiKey2.size();
      multiKey3.size();
      String string0 = multiKey5.toString();
      assertEquals("MultiKey[1117, 1117, 1117]", string0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      MultiKey<Object> multiKey0 = new MultiKey<Object>(objectArray0, true);
      Object[] objectArray1 = multiKey0.getKeys();
      assertNotSame(objectArray0, objectArray1);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Object object0 = null;
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = null;
      objectArray0[1] = null;
      objectArray0[2] = null;
      objectArray0[3] = null;
      objectArray0[4] = null;
      objectArray0[5] = null;
      objectArray0[6] = null;
      Integer[] integerArray0 = new Integer[6];
      Integer integer0 = new Integer((-1));
      integerArray0[0] = integer0;
      Integer integer1 = new Integer((-1870));
      integerArray0[1] = integer1;
      int int0 = 0;
      Integer integer2 = new Integer(0);
      integerArray0[2] = integer2;
      Integer integer3 = new Integer(1);
      integerArray0[3] = integer3;
      Integer integer4 = new Integer(0);
      integerArray0[4] = integer4;
      Integer integer5 = new Integer(1);
      integerArray0[5] = integer5;
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integerArray0);
      MultiKey<Object> multiKey1 = new MultiKey<Object>(multiKey0, int0, integer4, "dtZU");
      // Undeclared exception!
//      try { 
        multiKey1.getKey((-456));
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // -456
//         //
//         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
//      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("ay8G6$?>~-$(F@jl", "MZ2a:F(0~IX");
      multiKey0.hashCode();
      MultiKey<String> multiKey1 = new MultiKey<String>("", "ay8G6$?>~-$(F@jl");
      Object object0 = multiKey1.getKey(0);
      MultiKey<Object> multiKey2 = new MultiKey<Object>("ay8G6$?>~-$(F@jl", multiKey0, "", "org.apache.commons.collections4.keyvalue.MultiKey");
      Object object1 = multiKey2.getKey(0);
      assertFalse(object1.equals((Object)object0));
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Object[] objectArray0 = new Object[2];
      MultiKey<String> multiKey0 = new MultiKey<String>("M'Ep", "M'Ep", "M'Ep", "", "");
      multiKey0.toString();
      multiKey0.toString();
      // Undeclared exception!
//      try { 
        multiKey0.getKey(1268);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 1268
//         //
//         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
//      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>(")8g", "");
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.getKey(0);
      String[] stringArray0 = new String[8];
      stringArray0[0] = "";
      stringArray0[1] = "MultiKey[)8g, ]";
      stringArray0[2] = "";
      stringArray0[3] = "MultiKey[)8g, ]";
      stringArray0[4] = "MultiKey[)8g, ]";
      stringArray0[5] = "MultiKey[)8g, ]";
      stringArray0[6] = "";
      stringArray0[7] = "MultiKey[)8g, ]";
      MultiKey<String> multiKey1 = new MultiKey<String>(stringArray0, true);
      multiKey1.getKey(0);
      MultiKey<Object> multiKey2 = new MultiKey<Object>((Object) null, "MultiKey[)8g, ]", "");
      int int0 = multiKey2.size();
      assertEquals(3, int0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("", "", "", "L^$A", "");
      multiKey0.toString();
      MultiKey<MultiKey<String>> multiKey1 = new MultiKey<MultiKey<String>>(multiKey0, multiKey0);
      MultiKey<String> multiKey2 = multiKey1.getKey(1);
      boolean boolean0 = multiKey2.equals("MultiKey[, , , L^$A, ]");
      assertFalse(boolean0);
      
      Integer integer0 = new Integer(0);
      Integer integer1 = new Integer(1);
      MultiKey<Integer> multiKey3 = new MultiKey<Integer>(integer0, integer1);
      String string0 = multiKey3.toString();
      assertEquals("MultiKey[0, 1]", string0);
  }
}
