/*
 * This file was automatically generated by EvoSuite
 * Fri Oct 22 17:42:27 GMT 2021
 */

package org.apache.commons.collections4.keyvalue;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.lang.reflect.Array;
import org.apache.commons.collections4.keyvalue.MultiKey;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class MultiKey_ESTest extends MultiKey_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Object[] objectArray0 = new Object[3];
      Object object0 = new Object();
      objectArray0[0] = object0;
      MultiKey<Object> multiKey0 = new MultiKey<Object>(objectArray0, false);
      multiKey0.getKey(1);
      objectArray0[1] = null;
      Object object1 = new Object();
      objectArray0[2] = object1;
      MultiKey<Object> multiKey1 = new MultiKey<Object>(objectArray0);
      multiKey1.toString();
      MultiKey<String> multiKey2 = new MultiKey<String>("", "");
      // Undeclared exception!
//      try { 
        multiKey2.getKey(3401);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 3401
//         //
//         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
//      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      MultiKey<Object> multiKey0 = new MultiKey<Object>(objectArray0);
      multiKey0.equals((Object) null);
      MultiKey<MultiKey<Object>> multiKey1 = new MultiKey<MultiKey<Object>>(multiKey0, multiKey0);
      multiKey0.toString();
      MultiKey<String> multiKey2 = new MultiKey<String>("Pg", "Pg", "");
      multiKey1.toString();
      Integer integer0 = new Integer((-72));
      multiKey2.toString();
      Integer integer1 = new Integer(9);
      MultiKey<Integer> multiKey3 = new MultiKey<Integer>((Integer) null, integer0, integer0, (Integer) null, integer1);
      multiKey3.equals((Object) null);
      multiKey2.size();
      Object[] objectArray1 = multiKey0.getKeys();
      assertEquals(0, objectArray1.length);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      MultiKey<Object> multiKey0 = new MultiKey<Object>(objectArray0);
      multiKey0.toString();
      multiKey0.toString();
      String string0 = multiKey0.toString();
      assertEquals("MultiKey[]", string0);
      
      multiKey0.size();
      boolean boolean0 = multiKey0.equals("MultiKey[]");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Object object0 = new Object();
      MultiKey<Object> multiKey0 = new MultiKey<Object>((Object) null, object0, object0);
      multiKey0.toString();
      Object[] objectArray0 = multiKey0.getKeys();
      MultiKey<Object> multiKey1 = new MultiKey<Object>(objectArray0, true);
      multiKey0.equals(multiKey1);
      MultiKey<String> multiKey2 = new MultiKey<String>("", "");
      multiKey2.hashCode();
      MultiKey<Integer>[] multiKeyArray0 = (MultiKey<Integer>[]) Array.newInstance(MultiKey.class, 9);
      int int0 = 0;
      Integer integer0 = new Integer(0);
      Integer integer1 = new Integer(0);
      Integer integer2 = new Integer((-2245));
      MultiKey<Integer> multiKey3 = new MultiKey<Integer>(integer0, integer1, integer0, integer1, integer2);
      multiKeyArray0[0] = multiKey3;
      Integer integer3 = new Integer(0);
      MultiKey<Integer> multiKey4 = new MultiKey<Integer>(integer0, integer3, integer3);
      multiKeyArray0[1] = multiKey4;
      Integer integer4 = new Integer(0);
      MultiKey<Integer> multiKey5 = new MultiKey<Integer>(integer0, integer0, integer4);
      multiKeyArray0[2] = multiKey5;
      Integer integer5 = new Integer(0);
      MultiKey<Integer> multiKey6 = new MultiKey<Integer>(integer2, integer5, integer5);
      multiKeyArray0[3] = multiKey6;
      Integer[] integerArray0 = new Integer[9];
      integerArray0[0] = integer4;
      integerArray0[1] = integer2;
      integerArray0[2] = integer4;
      integerArray0[3] = integer1;
      integerArray0[4] = integer1;
      integerArray0[5] = integer2;
      integerArray0[6] = integer5;
      Integer integer6 = new Integer(5);
      integerArray0[7] = integer6;
      integerArray0[8] = integer2;
      MultiKey<Integer> multiKey7 = new MultiKey<Integer>(integerArray0, true);
      multiKeyArray0[4] = multiKey7;
      Integer integer7 = new Integer(1706);
      Integer integer8 = new Integer((int) integerArray0[1]);
      Integer integer9 = new Integer(int0);
      MultiKey<Integer> multiKey8 = new MultiKey<Integer>(integer7, (Integer) null, integer8, integer5, integer9);
      multiKeyArray0[5] = multiKey8;
      Integer integer10 = new Integer(0);
      MultiKey<Integer> multiKey9 = new MultiKey<Integer>(integer10, integerArray0[5]);
      multiKeyArray0[6] = multiKey9;
      Integer integer11 = new Integer((int) integerArray0[5]);
      Integer integer12 = new Integer((-520));
      MultiKey<Integer> multiKey10 = new MultiKey<Integer>((Integer) int0, integer8, integer11, (Integer) null, integer12);
      multiKeyArray0[7] = multiKey10;
      Integer integer13 = new Integer((int) integerArray0[1]);
      Integer integer14 = new Integer((-1));
      Integer integer15 = new Integer(0);
      Integer integer16 = new Integer(int0);
      MultiKey<Integer> multiKey11 = new MultiKey<Integer>(integer13, integer14, integer15, integer16, integer3);
      multiKeyArray0[8] = multiKey11;
      MultiKey<MultiKey<Integer>> multiKey12 = new MultiKey<MultiKey<Integer>>(multiKeyArray0);
      // Undeclared exception!
//      try { 
        multiKey12.getKey((int) integerArray0[5]);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // -2245
//         //
//         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
//      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      int int0 = (-1);
      Integer integer0 = new Integer((-1));
      int int1 = 427;
      Integer integer1 = new Integer(427);
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integer0, integer0, integer1);
      multiKey0.toString();
      multiKey0.toString();
      Object object0 = new Object();
      multiKey0.equals(object0);
      multiKey0.toString();
      multiKey0.toString();
      String string0 = "";
      MultiKey<String> multiKey1 = new MultiKey<String>("MultiKey[-1, -1, 427]", "", "MultiKey[-1, -1, 427]", "MultiKey[-1, -1, 427]", "");
      multiKey1.toString();
      multiKey1.hashCode();
      multiKey0.toString();
      MultiKey<Object> multiKey2 = null;
//      try {
        multiKey2 = new MultiKey<Object>((Object[]) null, false);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // The array of keys must not be null
//         //
//         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
//      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Object object0 = new Object();
      MultiKey<Object> multiKey0 = new MultiKey<Object>(object0, object0);
      multiKey0.toString();
      multiKey0.toString();
      MultiKey<MultiKey<Object>> multiKey1 = null;
//      try {
        multiKey1 = new MultiKey<MultiKey<Object>>((MultiKey<Object>[]) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // The array of keys must not be null
//         //
//         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
//      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Object[] objectArray0 = new Object[9];
      MultiKey<Object> multiKey0 = new MultiKey<Object>(objectArray0);
      Integer integer0 = new Integer(0);
      MultiKey<String> multiKey1 = new MultiKey<String>("", (String) null);
      multiKey1.getKey(0);
      MultiKey<Object> multiKey2 = new MultiKey<Object>(integer0, integer0, "");
      MultiKey<Object> multiKey3 = new MultiKey<Object>(multiKey0, multiKey2, multiKey1, (Object) null, multiKey2);
      Object object0 = multiKey3.getKey(2);
      objectArray0[0] = object0;
      int int0 = 259;
      // Undeclared exception!
//      try { 
        multiKey1.getKey(259);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 259
//         //
//         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
//      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("$;Vx\"~,j}80XX_e@", "");
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.size();
      multiKey0.toString();
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) "MultiKey[$;Vx\"~,j}80XX_e@, ]";
      multiKey0.toString();
      MultiKey<Object> multiKey1 = new MultiKey<Object>(objectArray0, true);
      multiKey0.toString();
      // Undeclared exception!
//      try { 
        multiKey1.getKey(2);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 2
//         //
//         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
//      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Object[] objectArray0 = new Object[9];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      Object object2 = new Object();
      MultiKey<Object> multiKey0 = new MultiKey<Object>(object2, (Object) null, object0, "W{_GpnyeC4~d");
      // Undeclared exception!
//      try { 
        multiKey0.getKey(1464);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 1464
//         //
//         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
//      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      String[] stringArray0 = new String[7];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "";
      stringArray0[3] = "[22N!.VW;Q~|]Q";
      stringArray0[4] = "1x@ONS<";
      stringArray0[5] = "m_";
      stringArray0[6] = "";
      MultiKey<String> multiKey0 = new MultiKey<String>(stringArray0);
      MultiKey<String> multiKey1 = new MultiKey<String>("", "", "[22N!.VW;Q~|]Q", "", "1x@ONS<");
      multiKey1.toString();
      // Undeclared exception!
//      try { 
        multiKey1.getKey(813);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 813
//         //
//         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
//      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("MultiKey", (String) null, "UM_", (String) null, "UM_");
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.size();
      MultiKey<Integer> multiKey1 = null;
//      try {
        multiKey1 = new MultiKey<Integer>((Integer[]) null, false);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // The array of keys must not be null
//         //
//         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
//      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("", (String) null, "");
      MultiKey<String>[] multiKeyArray0 = (MultiKey<String>[]) Array.newInstance(MultiKey.class, 5);
      multiKeyArray0[0] = multiKey0;
      multiKeyArray0[1] = multiKey0;
      multiKeyArray0[2] = multiKey0;
      multiKeyArray0[3] = multiKey0;
      multiKeyArray0[4] = multiKey0;
      MultiKey<MultiKey<String>> multiKey1 = new MultiKey<MultiKey<String>>(multiKeyArray0);
      multiKey1.hashCode();
      Object object0 = new Object();
      MultiKey<Object> multiKey2 = new MultiKey<Object>(multiKey0, object0, multiKey0);
      multiKey2.size();
      multiKey2.hashCode();
      multiKey0.hashCode();
      Integer[] integerArray0 = new Integer[3];
      Integer integer0 = new Integer(3);
      integerArray0[0] = integer0;
      Integer integer1 = new Integer((int) integerArray0[0]);
      integerArray0[1] = integer1;
      Integer integer2 = new Integer(0);
      integerArray0[2] = integer2;
      MultiKey<Integer> multiKey3 = new MultiKey<Integer>(integerArray0);
      Integer[] integerArray1 = multiKey3.getKeys();
      assertFalse(integerArray1.equals((Object)integerArray0));
  }
}
