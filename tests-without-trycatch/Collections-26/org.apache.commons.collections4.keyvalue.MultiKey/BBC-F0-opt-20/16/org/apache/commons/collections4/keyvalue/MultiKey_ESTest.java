/*
 * This file was automatically generated by EvoSuite
 * Wed Oct 20 12:28:23 GMT 2021
 */

package org.apache.commons.collections4.keyvalue;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.lang.reflect.Array;
import org.apache.commons.collections4.keyvalue.MultiKey;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class MultiKey_ESTest extends MultiKey_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("", "", "4Ebetx0TV)v/");
      boolean boolean0 = multiKey0.equals(multiKey0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      MultiKey<Object> multiKey0 = new MultiKey<Object>(objectArray0);
      multiKey0.toString();
      MultiKey<Object> multiKey1 = new MultiKey<Object>("a!4w", "", "", multiKey0);
      MultiKey<String> multiKey2 = new MultiKey<String>("MultiKey", "", "xhSU`WJ", "", "");
      Object[] objectArray1 = multiKey0.getKeys();
      assertNotSame(objectArray0, objectArray1);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Object object0 = new Object();
      Object object1 = new Object();
      MultiKey<Object> multiKey0 = new MultiKey<Object>(object0, object1);
      multiKey0.toString();
      MultiKey<String> multiKey1 = new MultiKey<String>("", "", "", "", "");
      multiKey1.toString();
      multiKey1.toString();
      multiKey1.toString();
      MultiKey<String> multiKey2 = new MultiKey<String>("", "", "", "", "");
      boolean boolean0 = multiKey1.equals(multiKey2);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Object object0 = new Object();
      Object object1 = new Object();
      Object object2 = new Object();
      MultiKey<Object> multiKey0 = new MultiKey<Object>(object0, object2, object2, object1);
      MultiKey<String> multiKey1 = new MultiKey<String>("d", "", "9a&{0K.R.9>I|", "", "9a&{0K.R.9>I|");
      String[] stringArray0 = new String[8];
      stringArray0[1] = "d";
      stringArray0[2] = "d";
      stringArray0[3] = "";
      stringArray0[4] = "";
      stringArray0[5] = "";
      stringArray0[6] = "";
      stringArray0[7] = "9a&{0K.R.9>I|";
      MultiKey<String> multiKey2 = new MultiKey<String>(stringArray0, true);
      boolean boolean0 = multiKey1.equals(multiKey2);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("JGr3#oz^%G6x", "JGr3#oz^%G6x", "JGr3#oz^%G6x");
      int int0 = (-1351);
      MultiKey<String> multiKey1 = null;
//      try {
        multiKey1 = new MultiKey<String>((String[]) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // The array of keys must not be null
//         //
//         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
//      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Integer integer0 = new Integer((-1706));
      Integer integer1 = new Integer((-1706));
      Integer integer2 = new Integer((-1706));
      Integer integer3 = new Integer((-1706));
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integer0, integer0, integer1, integer2, integer3);
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      MultiKey<Integer> multiKey1 = new MultiKey<Integer>(integer1, integer3, integer2);
      multiKey1.toString();
      Object[] objectArray0 = new Object[0];
      MultiKey<Object> multiKey2 = new MultiKey<Object>(objectArray0);
      multiKey2.toString();
      int int0 = multiKey2.size();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>((String) null, "MultiKey");
      multiKey0.toString();
      String string0 = multiKey0.getKey(0);
      assertNull(string0);
      
      Integer[] integerArray0 = new Integer[1];
      Integer integer0 = new Integer(0);
      integerArray0[0] = integer0;
      MultiKey<Integer> multiKey1 = new MultiKey<Integer>(integerArray0, false);
      String string1 = multiKey1.toString();
      assertEquals("MultiKey[0]", string1);
      
      multiKey1.hashCode();
      MultiKey<MultiKey<String>> multiKey2 = new MultiKey<MultiKey<String>>(multiKey0, multiKey0, multiKey0, multiKey0);
      Integer integer1 = new Integer(0);
      boolean boolean0 = multiKey2.equals(integer1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Object object0 = new Object();
      Object object1 = new Object();
      MultiKey<Object> multiKey0 = new MultiKey<Object>(object0, object0, object1, object0);
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.size();
      MultiKey<String> multiKey1 = new MultiKey<String>("", "oL$$g\"07", "nNatI1_hDpYw}O56[:(", "MultiKey[java.lang.Object@2787eae7, java.lang.Object@2787eae7, java.lang.Object@77235a7e, java.lang.Object@2787eae7]", "");
      boolean boolean0 = multiKey1.equals(object1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Integer integer0 = new Integer((-496));
      MultiKey<Object> multiKey0 = new MultiKey<Object>(integer0, integer0);
      multiKey0.toString();
      multiKey0.hashCode();
      multiKey0.toString();
      MultiKey<MultiKey<Object>> multiKey1 = new MultiKey<MultiKey<Object>>(multiKey0, (MultiKey<Object>) null, (MultiKey<Object>) null, multiKey0);
      multiKey1.toString();
      int int0 = multiKey1.size();
      Integer integer1 = new Integer(3);
      Integer integer2 = new Integer(3);
      MultiKey<Integer> multiKey2 = new MultiKey<Integer>(integer0, integer1, integer2, integer0, (Integer) null);
      int int1 = multiKey2.hashCode();
      assertFalse(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Object[] objectArray0 = new Object[4];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Integer integer0 = new Integer((-485));
      Integer integer1 = new Integer(0);
      Integer integer2 = new Integer((-485));
      Integer integer3 = new Integer(0);
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integer0, integer1, integer1, integer2, integer3);
      Integer integer4 = multiKey0.getKey(0);
      objectArray0[1] = (Object) integer4;
      Object object1 = new Object();
      objectArray0[2] = object1;
      Object object2 = new Object();
      objectArray0[3] = object2;
      MultiKey<Object> multiKey1 = new MultiKey<Object>(objectArray0);
      multiKey1.toString();
      multiKey1.toString();
      multiKey1.hashCode();
      multiKey1.hashCode();
      // Undeclared exception!
//      try { 
        multiKey1.getKey((-2738));
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // -2738
//         //
//         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
//      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      String[] stringArray0 = new String[6];
      stringArray0[0] = "56BSFmBrl";
      stringArray0[1] = "|q@h=O|";
      stringArray0[2] = "";
      stringArray0[3] = "Am^,;c-%!Cz2";
      stringArray0[4] = "JL5?sek&}${/ChPh*";
      stringArray0[5] = "";
      MultiKey<String> multiKey0 = new MultiKey<String>(stringArray0);
      multiKey0.toString();
      multiKey0.getKeys();
      MultiKey<Object> multiKey1 = new MultiKey<Object>(stringArray0);
      multiKey1.toString();
      multiKey1.toString();
      multiKey1.toString();
      multiKey1.toString();
      multiKey1.toString();
      Object[] objectArray0 = multiKey1.getKeys();
      assertEquals(6, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      int int0 = 0;
      Integer integer0 = new Integer(0);
      Object object0 = new Object();
      MultiKey<Object> multiKey0 = new MultiKey<Object>(integer0, (Object) null, integer0, object0);
      Object object1 = null;
      Integer integer1 = new Integer(0);
      String string0 = "Elo,I<G(eTHo4h-f\"";
      boolean boolean0 = true;
      MultiKey<String> multiKey1 = null;
//      try {
        multiKey1 = new MultiKey<String>((String[]) null, true);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // The array of keys must not be null
//         //
//         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
//      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      MultiKey<String>[] multiKeyArray0 = (MultiKey<String>[]) Array.newInstance(MultiKey.class, 2);
      MultiKey<String> multiKey0 = new MultiKey<String>("Qt7x<W\"G6TsVgHr", "Za|O^u1g ", "Qt7x<W\"G6TsVgHr");
      multiKeyArray0[0] = multiKey0;
      MultiKey<String> multiKey1 = new MultiKey<String>("", "Qt7x<W\"G6TsVgHr", "", ") ?kFv:&r=LZ{=");
      multiKeyArray0[1] = multiKey1;
      MultiKey<MultiKey<String>> multiKey2 = new MultiKey<MultiKey<String>>(multiKeyArray0, false);
      multiKey2.toString();
      multiKey2.hashCode();
      Integer[] integerArray0 = new Integer[6];
      Integer integer0 = new Integer((-481));
      integerArray0[0] = integer0;
      Integer integer1 = new Integer(2492);
      integerArray0[1] = integer1;
      Integer integer2 = new Integer((-2618));
      integerArray0[2] = integer2;
      Integer integer3 = new Integer((-481));
      integerArray0[3] = integer3;
      Integer integer4 = new Integer(2492);
      integerArray0[4] = integer4;
      Integer integer5 = new Integer(2492);
      integerArray0[5] = integer5;
      MultiKey<Integer> multiKey3 = new MultiKey<Integer>(integerArray0);
      int int0 = multiKey3.size();
      assertEquals(6, int0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Integer integer0 = new Integer((-1945));
      Integer integer1 = new Integer(0);
      Integer integer2 = new Integer((-1945));
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integer0, integer1, integer0, integer2);
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) integer0;
      MultiKey<String> multiKey1 = new MultiKey<String>("'ys*%Q7N^=2=Hu", "'ys*%Q7N^=2=Hu", "'ys*%Q7N^=2=Hu");
      multiKey1.getKey(1);
      MultiKey<Object> multiKey2 = new MultiKey<Object>("'ys*%Q7N^=2=Hu", integer1, (Object) null, "'ys*%Q7N^=2=Hu");
      // Undeclared exception!
//      try { 
        multiKey2.getKey((-731));
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // -731
//         //
//         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
//      }
  }
}
