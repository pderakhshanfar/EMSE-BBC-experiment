/*
 * This file was automatically generated by EvoSuite
 * Wed Oct 20 12:33:19 GMT 2021
 */

package org.apache.commons.collections4.keyvalue;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.collections4.keyvalue.MultiKey;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class MultiKey_ESTest extends MultiKey_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      String string0 = "MultiKey";
      String string1 = "MultiKey";
      MultiKey<String> multiKey0 = new MultiKey<String>("MultiKey", "MultiKey", "MultiKey", "MultiKey");
      MultiKey<MultiKey<String>> multiKey1 = new MultiKey<MultiKey<String>>((MultiKey<String>) null, multiKey0, (MultiKey<String>) null, (MultiKey<String>) null);
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) "MultiKey";
      MultiKey<Object> multiKey2 = new MultiKey<Object>(objectArray0);
      Object object0 = new Object();
      MultiKey<Object> multiKey3 = new MultiKey<Object>(multiKey1, multiKey2, (Object) null, object0);
      Object object1 = multiKey3.getKey(0);
      multiKey1.equals(object1);
      Integer integer0 = new Integer(0);
      Object object2 = new Object();
      MultiKey<Object> multiKey4 = new MultiKey<Object>(multiKey1, object2);
      // Undeclared exception!
//      try { 
        multiKey4.getKey((-2335));
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // -2335
//         //
//         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
//      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("MultiGKey", "", "MultiGKey");
      MultiKey<Object> multiKey1 = new MultiKey<Object>("MultiGKey", "", "", multiKey0);
      boolean boolean0 = multiKey1.equals("MultiGKey");
      assertFalse(boolean0);
      
      Integer[] integerArray0 = new Integer[8];
      Integer integer0 = new Integer((-148));
      integerArray0[0] = integer0;
      Integer integer1 = new Integer((-148));
      integerArray0[1] = integer1;
      Integer integer2 = new Integer((-1736));
      integerArray0[2] = integer2;
      Integer integer3 = new Integer(11);
      integerArray0[3] = integer3;
      Integer integer4 = new Integer(11);
      integerArray0[4] = integer4;
      Integer integer5 = new Integer((int) integerArray0[1]);
      integerArray0[5] = integer5;
      Integer integer6 = new Integer(0);
      integerArray0[6] = integer6;
      Integer integer7 = new Integer(3592);
      integerArray0[7] = integer7;
      MultiKey<Integer> multiKey2 = new MultiKey<Integer>(integerArray0);
      MultiKey<Object> multiKey3 = new MultiKey<Object>((Object[]) integerArray0, false);
      multiKey2.equals(multiKey3);
      assertFalse(multiKey3.equals((Object)multiKey1));
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      String[] stringArray0 = new String[0];
      MultiKey<String> multiKey0 = new MultiKey<String>(stringArray0, false);
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.size();
      multiKey0.toString();
      Integer integer0 = new Integer(0);
      MultiKey<String> multiKey1 = new MultiKey<String>("MultiKey[]", "MultiKey[]", "");
      multiKey1.getKey(0);
      MultiKey<Object> multiKey2 = new MultiKey<Object>(integer0, integer0, multiKey0, (Object) null, "MultiKey[]");
      multiKey2.equals("MultiKey[]");
      multiKey2.toString();
      multiKey2.toString();
      multiKey1.toString();
      // Undeclared exception!
//      try { 
        multiKey0.getKey(15);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 15
//         //
//         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
//      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      String string0 = "";
      MultiKey<String> multiKey0 = new MultiKey<String>("wC '+1q$J:E", "Q=s=~mTUK", "<", "", "");
      MultiKey<String> multiKey1 = new MultiKey<String>("", "1=ZW)3d;NtaHkHY[ZA", "<");
      multiKey0.toString();
      multiKey1.toString();
      MultiKey<MultiKey<String>> multiKey2 = new MultiKey<MultiKey<String>>(multiKey0, multiKey1, multiKey0, multiKey1);
      String[] stringArray0 = new String[5];
      stringArray0[0] = "";
      stringArray0[1] = "1=ZW)3d;NtaHkHY[ZA";
      stringArray0[2] = "MultiKey[wC '+1q$J:E, Q=s=~mTUK, <, , ]";
      stringArray0[3] = "BCCj4?+!VD'!x";
      stringArray0[4] = "";
      MultiKey<String> multiKey3 = new MultiKey<String>(stringArray0, true);
      MultiKey<MultiKey<String>> multiKey4 = new MultiKey<MultiKey<String>>(multiKey0, multiKey3, multiKey1, multiKey3);
      Object object0 = new Object();
      multiKey2.equals(multiKey4);
      int int0 = (-3525);
      Integer integer0 = new Integer((-3525));
      MultiKey<Object> multiKey5 = new MultiKey<Object>(integer0, "");
      MultiKey<String> multiKey6 = new MultiKey<String>("", "BCCj4?+!VD'!x");
      // Undeclared exception!
//      try { 
        multiKey6.getKey(954);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 954
//         //
//         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
//      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      String[] stringArray0 = new String[5];
      stringArray0[0] = "MultiKey";
      stringArray0[1] = "";
      stringArray0[2] = "@";
      stringArray0[3] = "6`K@";
      stringArray0[4] = "6`K@";
      MultiKey<String> multiKey0 = new MultiKey<String>(stringArray0);
      multiKey0.toString();
      MultiKey<Object> multiKey1 = new MultiKey<Object>(stringArray0);
      MultiKey<Object> multiKey2 = new MultiKey<Object>("9WG\"#=F,WY[Y0mdh", "", (Object) null);
      MultiKey<Object> multiKey3 = new MultiKey<Object>(stringArray0);
      multiKey3.toString();
      multiKey2.toString();
      MultiKey<String> multiKey4 = new MultiKey<String>("", "MultiKey[MultiKey, , @, 6`K@, 6`K@]", (String) null, "MultiKey", "MultiKey");
      multiKey4.getKey(2);
      multiKey2.toString();
      multiKey2.toString();
      String string0 = multiKey0.toString();
      assertEquals("MultiKey[MultiKey, , @, 6`K@, 6`K@]", string0);
      
      MultiKey<String> multiKey5 = new MultiKey<String>(stringArray0);
      boolean boolean0 = multiKey4.equals(multiKey5);
      assertFalse(boolean0);
      
      multiKey2.hashCode();
      multiKey0.size();
      multiKey2.hashCode();
      multiKey2.size();
      assertFalse(multiKey2.equals((Object)multiKey3));
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Object object0 = null;
      Object object1 = null;
      MultiKey<Object> multiKey0 = null;
//      try {
        multiKey0 = new MultiKey<Object>((Object[]) null, true);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // The array of keys must not be null
//         //
//         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
//      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Integer[] integerArray0 = new Integer[0];
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integerArray0, true);
      Integer[] integerArray1 = multiKey0.getKeys();
      assertEquals(0, integerArray1.length);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      String string0 = "-kiu !kT%pXXv@G{";
      MultiKey<String> multiKey0 = new MultiKey<String>("-kiu !kT%pXXv@G{", "-kiu !kT%pXXv@G{");
      multiKey0.toString();
      MultiKey<Object> multiKey1 = new MultiKey<Object>(multiKey0, "-kiu !kT%pXXv@G{", "p:", multiKey0, "-kiu !kT%pXXv@G{");
      multiKey1.toString();
      multiKey1.hashCode();
      multiKey0.toString();
      Integer[] integerArray0 = null;
      multiKey1.toString();
      multiKey1.toString();
      MultiKey<Integer> multiKey2 = null;
//      try {
        multiKey2 = new MultiKey<Integer>((Integer[]) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // The array of keys must not be null
//         //
//         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
//      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Integer integer0 = new Integer(0);
      Integer integer1 = new Integer(5);
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integer0, integer0, integer1, integer1, integer1);
      MultiKey<MultiKey<Integer>> multiKey1 = new MultiKey<MultiKey<Integer>>(multiKey0, multiKey0, multiKey0);
      // Undeclared exception!
//      try { 
        multiKey1.getKey((-161));
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // -161
//         //
//         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
//      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Integer[] integerArray0 = new Integer[1];
      int int0 = 0;
      Integer integer0 = new Integer(0);
      integerArray0[0] = integer0;
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integerArray0, true);
      multiKey0.toString();
      int int1 = multiKey0.hashCode();
      assertFalse(int1 == int0);
      
      Object object0 = new Object();
      MultiKey<Object> multiKey1 = new MultiKey<Object>(integer0, object0, int0);
      Object object1 = multiKey1.getKey(int0);
      multiKey1.toString();
      MultiKey<Integer> multiKey2 = new MultiKey<Integer>((Integer) int0, (Integer) int0);
      multiKey2.toString();
      multiKey2.toString();
      multiKey1.toString();
      MultiKey<Object> multiKey3 = new MultiKey<Object>(object1, multiKey2, object0, multiKey1);
      multiKey3.toString();
      multiKey3.size();
      multiKey2.toString();
      MultiKey<String> multiKey4 = new MultiKey<String>("/<CFYoU|", (String) null, "/<CFYoU|");
      multiKey4.toString();
      String string0 = multiKey0.toString();
      assertEquals("MultiKey[0]", string0);
      
      multiKey4.size();
      multiKey0.size();
      multiKey2.size();
      multiKey4.getKey(1);
      multiKey1.getKeys();
      Object object2 = new Object();
      boolean boolean0 = multiKey4.equals(object2);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Integer[] integerArray0 = new Integer[5];
      int int0 = 3;
      Integer integer0 = new Integer(3);
      integerArray0[0] = integer0;
      Integer integer1 = new Integer(3);
      integerArray0[1] = integer1;
      Integer integer2 = new Integer(int0);
      integerArray0[2] = integer2;
      Integer integer3 = new Integer(int0);
      integerArray0[3] = integer3;
      Integer integer4 = new Integer(0);
      integerArray0[4] = integer4;
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integerArray0);
      Integer integer5 = new Integer(3);
      MultiKey<Integer> multiKey1 = new MultiKey<Integer>((Integer) int0, integer5);
      Integer integer6 = new Integer(int0);
      MultiKey<Object> multiKey2 = new MultiKey<Object>(multiKey0, integer4, multiKey1, integer6);
      String string0 = multiKey2.toString();
      assertEquals("MultiKey[MultiKey[3, 3, 3, 3, 0], 0, MultiKey[3, 3], 3]", string0);
      
      Object object0 = new Object();
      boolean boolean0 = multiKey2.equals(object0);
      assertFalse(boolean0);
      
      MultiKey<Integer> multiKey3 = new MultiKey<Integer>(integerArray0);
      MultiKey<MultiKey<Integer>> multiKey4 = new MultiKey<MultiKey<Integer>>(multiKey3, multiKey1);
      multiKey4.getKeys();
      String[] stringArray0 = new String[4];
      stringArray0[0] = "MultiKey[MultiKey[3, 3, 3, 3, 0], 0, MultiKey[3, 3], 3]";
      stringArray0[1] = "np_OL=?";
      stringArray0[2] = "MultiKey[MultiKey[3, 3, 3, 3, 0], 0, MultiKey[3, 3], 3]";
      stringArray0[3] = "MultiKey[MultiKey[3, 3, 3, 3, 0], 0, MultiKey[3, 3], 3]";
      MultiKey<String> multiKey5 = new MultiKey<String>(stringArray0);
      multiKey5.size();
      multiKey2.size();
      String string1 = multiKey5.getKey(3);
      assertTrue(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      String[] stringArray0 = new String[8];
      stringArray0[0] = "iegv$,eNOw";
      stringArray0[1] = "";
      stringArray0[2] = "";
      stringArray0[3] = "The array of keys must not be null";
      stringArray0[4] = "";
      stringArray0[5] = "";
      stringArray0[6] = "pFeX5T^;fx*X=F";
      stringArray0[7] = "6`K@";
      MultiKey<String> multiKey0 = new MultiKey<String>(stringArray0);
      multiKey0.toString();
      MultiKey<Object> multiKey1 = new MultiKey<Object>(stringArray0);
      MultiKey<Object> multiKey2 = new MultiKey<Object>("", multiKey1, "1l");
      multiKey1.toString();
      multiKey2.toString();
      multiKey2.getKey(2);
      multiKey2.toString();
      multiKey1.toString();
      String string0 = multiKey0.toString();
      assertEquals("MultiKey[iegv$,eNOw, , , The array of keys must not be null, , , pFeX5T^;fx*X=F, 6`K@]", string0);
      
      boolean boolean0 = multiKey0.equals("1l");
      assertFalse(boolean0);
      
      multiKey2.hashCode();
      multiKey0.size();
      multiKey2.hashCode();
      multiKey1.size();
      assertFalse(multiKey1.equals((Object)multiKey2));
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      MultiKey<MultiKey<Object>> multiKey0 = new MultiKey<MultiKey<Object>>((MultiKey<Object>) null, (MultiKey<Object>) null);
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      Integer integer0 = new Integer(0);
      Integer integer1 = new Integer((-1));
      MultiKey<Integer> multiKey1 = new MultiKey<Integer>(integer0, integer0, integer0, integer1);
      multiKey1.toString();
      MultiKey<String> multiKey2 = new MultiKey<String>("kFT,1e5pEPCS$QPX", (String) null, (String) null);
      multiKey2.toString();
      multiKey2.toString();
      multiKey1.toString();
      multiKey2.toString();
      // Undeclared exception!
//      try { 
        multiKey2.getKey((-1));
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // -1
//         //
//         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
//      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Object[] objectArray0 = new Object[8];
      String[] stringArray0 = new String[5];
      stringArray0[0] = "";
      stringArray0[1] = "MultiKey";
      stringArray0[2] = ";|@7ds(riEzf''";
      stringArray0[3] = "_.B,ow.Z^>lQ/:z>";
      stringArray0[4] = "";
      MultiKey<String> multiKey0 = new MultiKey<String>(stringArray0, false);
      Object object0 = new Object();
      MultiKey<Object> multiKey1 = new MultiKey<Object>(multiKey0, (Object) null, object0, "_.B,ow.Z^>lQ/:z>");
      // Undeclared exception!
//      try { 
        multiKey1.getKey((-2928));
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // -2928
//         //
//         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
//      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      String[] stringArray0 = new String[7];
      stringArray0[0] = "";
      stringArray0[1] = "3bu5z";
      stringArray0[2] = "The array of keys must not be null";
      stringArray0[3] = "";
      stringArray0[4] = "";
      stringArray0[5] = "7k*'gjS+*#U";
      stringArray0[6] = "J!~0Vmx*1|wB~y";
      MultiKey<String> multiKey0 = new MultiKey<String>(stringArray0);
      multiKey0.hashCode();
  }
}
