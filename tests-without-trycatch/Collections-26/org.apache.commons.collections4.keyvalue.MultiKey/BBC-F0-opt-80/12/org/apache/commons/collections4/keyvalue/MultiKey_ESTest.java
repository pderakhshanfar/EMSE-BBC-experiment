/*
 * This file was automatically generated by EvoSuite
 * Wed Oct 20 12:17:07 GMT 2021
 */

package org.apache.commons.collections4.keyvalue;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.lang.reflect.Array;
import org.apache.commons.collections4.keyvalue.MultiKey;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class MultiKey_ESTest extends MultiKey_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      MultiKey<Object> multiKey0 = new MultiKey<Object>((Object) null, (Object) null, (Object) null, (Object) null);
      multiKey0.toString();
      String[] stringArray0 = new String[0];
      MultiKey<String> multiKey1 = new MultiKey<String>(stringArray0, true);
      multiKey1.getKeys();
      int int0 = multiKey1.size();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = null;
      objectArray0[1] = null;
      MultiKey<Object> multiKey0 = new MultiKey<Object>(objectArray0, true);
      boolean boolean0 = multiKey0.equals(multiKey0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      String[] stringArray0 = new String[3];
      stringArray0[0] = ")8_-{f2";
      stringArray0[1] = "";
      stringArray0[2] = "sl[hE#GrS2]";
      MultiKey<String> multiKey0 = new MultiKey<String>(stringArray0);
      MultiKey<Object>[] multiKeyArray0 = (MultiKey<Object>[]) Array.newInstance(MultiKey.class, 1);
      MultiKey<MultiKey<Object>> multiKey1 = new MultiKey<MultiKey<Object>>(multiKeyArray0);
      multiKey1.getKey(0);
      int int0 = multiKey0.size();
      assertEquals(3, int0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      MultiKey<Object>[] multiKeyArray0 = (MultiKey<Object>[]) Array.newInstance(MultiKey.class, 0);
      MultiKey<MultiKey<Object>> multiKey0 = new MultiKey<MultiKey<Object>>(multiKeyArray0, true);
      multiKey0.toString();
      multiKey0.size();
      MultiKey<String> multiKey1 = new MultiKey<String>("", "", "", "", "#AQ<4");
      multiKey1.toString();
      // Undeclared exception!
//      try { 
        multiKey1.getKey((-5352));
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // -5352
//         //
//         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
//      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      MultiKey<Object> multiKey0 = new MultiKey<Object>("", "");
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.size();
      multiKey0.equals("MultiKey[, ]");
      MultiKey<String> multiKey1 = null;
//      try {
        multiKey1 = new MultiKey<String>((String[]) null, false);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // The array of keys must not be null
//         //
//         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
//      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Integer[] integerArray0 = null;
      MultiKey<Integer> multiKey0 = null;
//      try {
        multiKey0 = new MultiKey<Integer>((Integer[]) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // The array of keys must not be null
//         //
//         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
//      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      MultiKey<MultiKey<Object>> multiKey0 = new MultiKey<MultiKey<Object>>((MultiKey<Object>) null, (MultiKey<Object>) null, (MultiKey<Object>) null);
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      MultiKey<String> multiKey1 = new MultiKey<String>("", "", "The array of keys must not be null");
      multiKey1.toString();
      multiKey1.size();
      multiKey0.toString();
      Integer integer0 = new Integer((-853));
      int int0 = 2230;
      multiKey0.toString();
      Integer integer1 = new Integer(2230);
      Integer integer2 = new Integer(1762);
      Integer integer3 = new Integer((-1445));
      MultiKey<Integer> multiKey2 = new MultiKey<Integer>(integer0, integer1, integer2, integer3, integer0);
      multiKey2.size();
      multiKey2.equals(multiKey0);
      multiKey2.toString();
      multiKey2.hashCode();
      multiKey2.equals(integer0);
      // Undeclared exception!
//      try { 
        multiKey1.getKey((-853));
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // -853
//         //
//         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
//      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      String[] stringArray0 = new String[1];
      stringArray0[0] = "";
      MultiKey<String> multiKey0 = new MultiKey<String>(stringArray0);
      multiKey0.toString();
      multiKey0.equals("");
      multiKey0.hashCode();
      Integer[] integerArray0 = new Integer[4];
      Integer integer0 = new Integer(910);
      integerArray0[0] = integer0;
      Integer integer1 = new Integer((int) integerArray0[0]);
      integerArray0[1] = integer1;
      Integer integer2 = new Integer((-2818));
      integerArray0[2] = integer2;
      int int0 = 2;
      Integer integer3 = new Integer(2);
      integerArray0[3] = integer3;
      MultiKey<Integer> multiKey1 = new MultiKey<Integer>(integerArray0);
      MultiKey<Object> multiKey2 = new MultiKey<Object>("MultiKey[]", multiKey1, int0, "");
      // Undeclared exception!
//      try { 
        multiKey2.getKey((int) integerArray0[0]);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 910
//         //
//         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
//      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("", "3$NE", "3$NE", "");
      Integer integer0 = new Integer((-601));
      Integer integer1 = new Integer((-601));
      Integer integer2 = new Integer(1);
      MultiKey<Integer> multiKey1 = new MultiKey<Integer>(integer0, integer1, integer1, integer2, integer1);
      Object object0 = new Object();
      MultiKey<Object> multiKey2 = new MultiKey<Object>(multiKey1, integer0, object0);
      Object[] objectArray0 = multiKey2.getKeys();
      assertEquals(3, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Integer[] integerArray0 = new Integer[7];
      Integer integer0 = new Integer((-462));
      integerArray0[0] = integer0;
      Integer integer1 = new Integer(1178);
      integerArray0[1] = integer1;
      Integer integer2 = new Integer(1);
      integerArray0[2] = integer2;
      int int0 = 0;
      Integer integer3 = new Integer(0);
      integerArray0[3] = integer3;
      Integer integer4 = new Integer(0);
      integerArray0[4] = integer4;
      Integer integer5 = new Integer(1178);
      integerArray0[5] = integer5;
      Integer integer6 = new Integer(int0);
      integerArray0[6] = integer6;
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integerArray0);
      MultiKey<Object> multiKey1 = new MultiKey<Object>((Object) null, integer1, (Object) null);
      MultiKey<Object> multiKey2 = new MultiKey<Object>(multiKey0, multiKey1);
      boolean boolean0 = multiKey2.equals(int0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("", "w\"(", "w\"(");
      multiKey0.hashCode();
      Integer integer0 = new Integer(1144);
      Integer integer1 = new Integer(1144);
      Integer integer2 = new Integer(1144);
      Integer integer3 = new Integer(1144);
      MultiKey<Integer> multiKey1 = new MultiKey<Integer>(integer0, integer1, integer2, integer3, integer2);
      Integer integer4 = multiKey1.getKey(4);
      assertTrue(integer4.equals((Object)integer1));
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      String[] stringArray0 = new String[3];
      stringArray0[0] = ")8_-{f2";
      stringArray0[1] = "";
      stringArray0[2] = "sl[hE#GrS2]";
      MultiKey<String> multiKey0 = new MultiKey<String>(stringArray0);
      MultiKey<Object> multiKey1 = new MultiKey<Object>((Object[]) stringArray0, true);
      multiKey1.hashCode();
      MultiKey<Object>[] multiKeyArray0 = (MultiKey<Object>[]) Array.newInstance(MultiKey.class, 1);
      multiKeyArray0[0] = multiKey1;
      MultiKey<MultiKey<Object>> multiKey2 = new MultiKey<MultiKey<Object>>(multiKeyArray0);
      multiKey2.getKey(0);
      int int0 = multiKey0.size();
      assertEquals(3, int0);
  }
}
