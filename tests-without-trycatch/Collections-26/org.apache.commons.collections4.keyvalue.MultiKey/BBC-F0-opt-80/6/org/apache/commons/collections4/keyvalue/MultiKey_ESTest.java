/*
 * This file was automatically generated by EvoSuite
 * Wed Oct 13 20:48:36 GMT 2021
 */

package org.apache.commons.collections4.keyvalue;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.lang.reflect.Array;
import org.apache.commons.collections4.keyvalue.MultiKey;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class MultiKey_ESTest extends MultiKey_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("nRGe}}", "", "nRGe}}");
      Integer[] integerArray0 = new Integer[0];
      MultiKey<Integer> multiKey1 = new MultiKey<Integer>(integerArray0);
      MultiKey<MultiKey<Integer>> multiKey2 = new MultiKey<MultiKey<Integer>>(multiKey1, multiKey1);
      multiKey2.size();
      MultiKey<Object> multiKey3 = new MultiKey<Object>(integerArray0);
      Object[] objectArray0 = multiKey3.getKeys();
      assertNotSame(integerArray0, objectArray0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      String[] stringArray0 = new String[4];
      MultiKey<String> multiKey0 = new MultiKey<String>(stringArray0, true);
      MultiKey<MultiKey<String>> multiKey1 = new MultiKey<MultiKey<String>>(multiKey0, multiKey0, multiKey0, multiKey0, multiKey0);
      multiKey0.toString();
      String string0 = multiKey0.toString();
      assertEquals("MultiKey[null, null, null, null]", string0);
      
      Object object0 = multiKey1.getKey(0);
      boolean boolean0 = multiKey0.equals(object0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Integer integer0 = new Integer(1);
      Integer integer1 = new Integer(4);
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>((Integer) null, (Integer) null, integer0, integer1);
      boolean boolean0 = multiKey0.equals((Object) null);
      assertFalse(boolean0);
      
      Integer integer2 = new Integer(4);
      MultiKey<Integer> multiKey1 = new MultiKey<Integer>((Integer) null, integer1, integer2);
      boolean boolean1 = multiKey1.equals(multiKey0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Integer integer0 = new Integer(1);
      Integer integer1 = new Integer(4176);
      Integer integer2 = new Integer(4);
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integer1, integer2, integer1, (Integer) null);
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) integer0;
      objectArray0[1] = (Object) integer0;
      objectArray0[2] = (Object) null;
      objectArray0[4] = (Object) integer0;
      objectArray0[7] = (Object) integer0;
      MultiKey<Object> multiKey1 = new MultiKey<Object>(objectArray0);
      multiKey1.toString();
      MultiKey<MultiKey<Integer>> multiKey2 = null;
//      try {
        multiKey2 = new MultiKey<MultiKey<Integer>>((MultiKey<Integer>[]) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // The array of keys must not be null
//         //
//         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
//      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Object[] objectArray0 = new Object[7];
      MultiKey<Object> multiKey0 = new MultiKey<Object>(objectArray0, false);
      multiKey0.getKey(0);
      MultiKey<String> multiKey1 = new MultiKey<String>("", "", "", "bZ1*");
      multiKey1.getKey(0);
      Object object0 = new Object();
      MultiKey<Object> multiKey2 = new MultiKey<Object>((Object) null, "{q2\"F:<C", "", "bZ1*", object0);
      multiKey2.getKey(0);
      objectArray0[0] = null;
      Integer[] integerArray0 = new Integer[3];
      Integer integer0 = new Integer(870);
      integerArray0[0] = integer0;
      Integer integer1 = new Integer((int) integerArray0[0]);
      integerArray0[1] = integer1;
      Integer integer2 = new Integer(3);
      integerArray0[2] = integer2;
      MultiKey<Integer> multiKey3 = new MultiKey<Integer>(integerArray0, true);
      // Undeclared exception!
//      try { 
        multiKey3.getKey(3);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 3
//         //
//         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
//      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      MultiKey<Object> multiKey0 = null;
//      try {
        multiKey0 = new MultiKey<Object>((Object[]) null, false);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // The array of keys must not be null
//         //
//         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
//      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Object object0 = new Object();
      MultiKey<Object> multiKey0 = new MultiKey<Object>(".[&:K#", ".[&:K#", ".[&:K#", ".[&:K#", object0);
      multiKey0.hashCode();
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      MultiKey<Object>[] multiKeyArray0 = (MultiKey<Object>[]) Array.newInstance(MultiKey.class, 7);
      Integer integer0 = new Integer((-230));
      MultiKey<Object> multiKey0 = new MultiKey<Object>(integer0, "YF[41E8I',");
      Integer integer1 = new Integer((-230));
      Object object0 = new Object();
      MultiKey<Object> multiKey1 = new MultiKey<Object>(integer1, object0);
      MultiKey<Object> multiKey2 = new MultiKey<Object>("YF[41E8I',", multiKey0, integer0, multiKey0, multiKey1);
      multiKeyArray0[0] = multiKey2;
      Integer integer2 = new Integer((-1));
      MultiKey<Object> multiKey3 = new MultiKey<Object>(integer2, integer1);
      Integer integer3 = new Integer((-1));
      MultiKey<Object> multiKey4 = new MultiKey<Object>((Object) null, integer1, object0, multiKey3, integer3);
      multiKeyArray0[1] = multiKey4;
      MultiKey<Object> multiKey5 = new MultiKey<Object>((Object[]) multiKeyArray0, true);
      multiKeyArray0[2] = multiKey5;
      MultiKey<String> multiKey6 = new MultiKey<String>("", "YF[41E8I',", "");
      MultiKey<Object> multiKey7 = new MultiKey<Object>(integer2, multiKey6, object0, multiKey5);
      multiKeyArray0[3] = multiKey7;
      MultiKey<Object> multiKey8 = new MultiKey<Object>(multiKey0, multiKey0, multiKey2, multiKey6);
      multiKeyArray0[4] = multiKey8;
      MultiKey<Object> multiKey9 = new MultiKey<Object>("YF[41E8I',", integer2);
      multiKeyArray0[5] = multiKey9;
      Integer integer4 = new Integer(0);
      MultiKey<Object> multiKey10 = new MultiKey<Object>(integer4, multiKey8, multiKey4);
      multiKeyArray0[6] = multiKey10;
      MultiKey<MultiKey<Object>> multiKey11 = new MultiKey<MultiKey<Object>>(multiKeyArray0);
      int int0 = multiKey11.size();
      assertEquals(7, int0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("", "", "", "");
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.getKey(0);
      multiKey0.toString();
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) "";
      objectArray0[1] = (Object) "";
      objectArray0[2] = (Object) "";
      objectArray0[3] = (Object) "";
      objectArray0[4] = (Object) "";
      objectArray0[5] = (Object) multiKey0;
      objectArray0[6] = (Object) "MultiKey[, , , ]";
      Object object0 = new Object();
      objectArray0[7] = object0;
      int int0 = 1532;
      // Undeclared exception!
//      try { 
        multiKey0.getKey(1532);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 1532
//         //
//         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
//      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      String[] stringArray0 = new String[7];
      stringArray0[0] = "9/{R~cS";
      stringArray0[1] = "";
      stringArray0[2] = "a\"BNT>[NR";
      stringArray0[3] = "";
      stringArray0[4] = "&";
      stringArray0[5] = "GebN|iZOkNOy,e.U";
      stringArray0[6] = "c_tQ.T^y;pf-";
      MultiKey<String> multiKey0 = new MultiKey<String>(stringArray0);
      Integer[] integerArray0 = new Integer[0];
      MultiKey<Integer> multiKey1 = new MultiKey<Integer>(integerArray0, false);
      multiKey1.toString();
      multiKey1.size();
      boolean boolean0 = multiKey1.equals("");
      assertFalse(boolean0);
      
      MultiKey<Object> multiKey2 = new MultiKey<Object>((Object) null, multiKey1, (Object) null);
      MultiKey<MultiKey<Object>> multiKey3 = new MultiKey<MultiKey<Object>>(multiKey2, multiKey2, multiKey2, multiKey2, multiKey2);
      String string0 = multiKey3.toString();
      assertEquals("MultiKey[MultiKey[null, MultiKey[], null], MultiKey[null, MultiKey[], null], MultiKey[null, MultiKey[], null], MultiKey[null, MultiKey[], null], MultiKey[null, MultiKey[], null]]", string0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Integer[] integerArray0 = new Integer[3];
      int int0 = 67;
      Integer integer0 = new Integer(67);
      integerArray0[0] = integer0;
      Integer integer1 = new Integer(0);
      integerArray0[1] = integer1;
      Integer integer2 = new Integer(int0);
      integerArray0[2] = integer2;
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integerArray0, true);
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      String[] stringArray0 = new String[3];
      stringArray0[0] = "F#ih?+ ?ij/x";
      multiKey0.toString();
      stringArray0[1] = "";
      stringArray0[2] = "";
      MultiKey<String> multiKey1 = new MultiKey<String>(stringArray0);
      multiKey1.toString();
      multiKey1.getKeys();
      multiKey0.toString();
      multiKey1.size();
      Object object0 = new Object();
      MultiKey<Object> multiKey2 = new MultiKey<Object>("", object0, "", integer2);
      multiKey2.toString();
      Object[] objectArray0 = multiKey2.getKeys();
      assertEquals(4, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      String string0 = "YSa~Q7y+(QWh>7";
      MultiKey<String> multiKey0 = new MultiKey<String>("", "YSa~Q7y+(QWh>7", "{N|aHQVq1x@u)=Uh]FM", "S!`QJhfg}^g bXeS`e");
      Object object0 = null;
      MultiKey<Object> multiKey1 = new MultiKey<Object>("", (Object) null, "{N|aHQVq1x@u)=Uh]FM", "");
      String string1 = "8WfZ7se'>UlX";
      MultiKey<String> multiKey2 = new MultiKey<String>("F_QA3HW9", "8WfZ7se'>UlX", "");
      multiKey0.toString();
      multiKey1.toString();
      // Undeclared exception!
//      try { 
        multiKey2.getKey(4057);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 4057
//         //
//         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
//      }
  }
}
