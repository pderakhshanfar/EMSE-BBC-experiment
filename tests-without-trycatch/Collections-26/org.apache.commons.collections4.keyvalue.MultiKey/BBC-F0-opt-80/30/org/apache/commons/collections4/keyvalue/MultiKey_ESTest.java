/*
 * This file was automatically generated by EvoSuite
 * Fri Oct 22 17:55:28 GMT 2021
 */

package org.apache.commons.collections4.keyvalue;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.lang.reflect.Array;
import org.apache.commons.collections4.keyvalue.MultiKey;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class MultiKey_ESTest extends MultiKey_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("", "{", "");
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) "";
      objectArray0[1] = (Object) "";
      objectArray0[2] = (Object) multiKey0;
      objectArray0[3] = (Object) "";
      objectArray0[4] = (Object) multiKey0;
      objectArray0[5] = (Object) "";
      objectArray0[6] = (Object) "{";
      Object object0 = new Object();
      objectArray0[7] = object0;
      Object object1 = new Object();
      objectArray0[8] = object1;
      MultiKey<Object> multiKey1 = new MultiKey<Object>(objectArray0);
      multiKey1.toString();
      Object object2 = multiKey1.getKey(2);
      boolean boolean0 = multiKey0.equals(object2);
      boolean boolean1 = multiKey0.equals("';Xj`7Xz#~%~Y eT");
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("~y$", "~y$", "NX", "~y$", "~y$");
      Integer[] integerArray0 = new Integer[0];
      MultiKey<Integer> multiKey1 = new MultiKey<Integer>(integerArray0, false);
      Integer[] integerArray1 = multiKey1.getKeys();
      assertFalse(integerArray1.equals((Object)integerArray0));
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Integer integer0 = new Integer(1);
      Integer integer1 = new Integer(1);
      Integer[] integerArray0 = new Integer[0];
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integerArray0, true);
      multiKey0.toString();
      MultiKey<Object> multiKey1 = new MultiKey<Object>((Object[]) integerArray0, true);
      String string0 = multiKey1.toString();
      assertEquals("MultiKey[]", string0);
      
      multiKey1.size();
      String[] stringArray0 = new String[8];
      stringArray0[0] = "MultiKey[]";
      stringArray0[1] = "MultiKey[]";
      stringArray0[2] = "MultiKey[]";
      stringArray0[3] = "MultiKey[]";
      stringArray0[4] = "MultiKey[]";
      stringArray0[5] = "MultiKey[]";
      stringArray0[6] = "MultiKey[]";
      stringArray0[7] = "MultiKey[]";
      MultiKey<String> multiKey2 = new MultiKey<String>(stringArray0, false);
      MultiKey<String> multiKey3 = new MultiKey<String>("", "MultiKey[]", "MultiKey[]");
      boolean boolean0 = multiKey2.equals(multiKey3);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Integer integer0 = new Integer((-221));
      MultiKey<Object> multiKey0 = new MultiKey<Object>(integer0, integer0);
      multiKey0.toString();
      MultiKey<String>[] multiKeyArray0 = (MultiKey<String>[]) Array.newInstance(MultiKey.class, 5);
      String[] stringArray0 = new String[0];
      MultiKey<String> multiKey1 = new MultiKey<String>(stringArray0, false);
      multiKeyArray0[0] = multiKey1;
      MultiKey<String> multiKey2 = new MultiKey<String>("MultiKey[-221, -221]", "", "NB=8d");
      multiKeyArray0[1] = multiKey2;
      Integer[] integerArray0 = new Integer[4];
      integerArray0[0] = integer0;
      integerArray0[1] = integer0;
      Integer integer1 = new Integer((int) integerArray0[0]);
      integerArray0[2] = integer1;
      integerArray0[3] = integer0;
      MultiKey<Integer> multiKey3 = new MultiKey<Integer>(integerArray0, false);
      multiKey3.toString();
      multiKey3.toString();
      Object object0 = new Object();
      MultiKey<Object> multiKey4 = new MultiKey<Object>(integerArray0);
      boolean boolean0 = multiKey3.equals(multiKey4);
      assertTrue(boolean0);
      
      String string0 = multiKey0.toString();
      assertEquals("MultiKey[-221, -221]", string0);
      assertFalse(multiKey0.equals((Object)multiKey4));
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Integer integer0 = new Integer(1);
      Integer integer1 = new Integer(1);
      MultiKey<Integer> multiKey0 = null;
//      try {
        multiKey0 = new MultiKey<Integer>((Integer[]) null, true);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // The array of keys must not be null
//         //
//         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
//      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      MultiKey<Object> multiKey0 = null;
//      try {
        multiKey0 = new MultiKey<Object>((Object[]) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // The array of keys must not be null
//         //
//         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
//      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Object[] objectArray0 = new Object[5];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Integer[] integerArray0 = new Integer[7];
      int int0 = 3;
      Integer integer0 = new Integer(3);
      integerArray0[0] = integer0;
      Integer integer1 = new Integer(3);
      integerArray0[1] = integer1;
      Integer integer2 = new Integer(int0);
      integerArray0[2] = integer2;
      Integer integer3 = new Integer((-1194));
      integerArray0[3] = integer3;
      Integer integer4 = new Integer(0);
      integerArray0[4] = integer4;
      Integer integer5 = new Integer(0);
      integerArray0[5] = integer5;
      Integer integer6 = new Integer(0);
      integerArray0[6] = integer6;
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integerArray0);
      MultiKey<MultiKey<Integer>> multiKey1 = new MultiKey<MultiKey<Integer>>(multiKey0, multiKey0, multiKey0, multiKey0, multiKey0);
      MultiKey<Integer> multiKey2 = multiKey1.getKey(0);
      objectArray0[1] = (Object) multiKey2;
      MultiKey<String> multiKey3 = new MultiKey<String>((String) null, "#GDo j~", (String) null, "MultiKey", "#GDo j~");
      multiKey3.getKey(0);
      objectArray0[2] = (Object) null;
      Object object1 = new Object();
      objectArray0[3] = object1;
      Object object2 = new Object();
      objectArray0[4] = object2;
      MultiKey<Object> multiKey4 = new MultiKey<Object>(objectArray0, true);
      Object object3 = multiKey4.getKey(int0);
      assertSame(object3, object1);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Integer[] integerArray0 = new Integer[2];
      Integer integer0 = new Integer(1619);
      integerArray0[0] = integer0;
      Integer integer1 = new Integer((int) integerArray0[0]);
      integerArray0[1] = integer1;
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integerArray0, true);
      Integer integer2 = new Integer(2);
      multiKey0.equals(integer2);
      Object object0 = null;
      String string0 = "";
      String[] stringArray0 = new String[6];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "";
      stringArray0[3] = "";
      stringArray0[4] = "";
      stringArray0[5] = "";
      MultiKey<String> multiKey1 = new MultiKey<String>(stringArray0);
      // Undeclared exception!
//      try { 
        multiKey1.getKey((-3202));
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // -3202
//         //
//         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
//      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Integer[] integerArray0 = new Integer[4];
      int int0 = 0;
      Integer integer0 = new Integer(0);
      integerArray0[0] = integer0;
      Integer integer1 = new Integer(int0);
      integerArray0[1] = integer1;
      Integer integer2 = new Integer(0);
      integerArray0[2] = integer2;
      Integer integer3 = new Integer(2);
      integerArray0[3] = integer3;
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integerArray0);
      int int1 = multiKey0.size();
      assertEquals(4, int1);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      int int0 = 0;
      Integer integer0 = new Integer(0);
      MultiKey<Object> multiKey0 = new MultiKey<Object>("ECYZ}'X$.UesA<cq&", integer0);
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.getKey(0);
      MultiKey<Object> multiKey1 = new MultiKey<Object>(integer0, integer0, "ECYZ}'X$.UesA<cq&");
      multiKey0.toString();
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) multiKey1;
      multiKey0.toString();
      objectArray0[1] = (Object) multiKey0;
      objectArray0[2] = (Object) multiKey1;
      MultiKey<Object> multiKey2 = new MultiKey<Object>(objectArray0, false);
      multiKey2.toString();
      // Undeclared exception!
//      try { 
        multiKey2.getKey((-2251));
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // -2251
//         //
//         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
//      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("x!?<^E/cc+WE9|", "x!?<^E/cc+WE9|", "x!?<^E/cc+WE9|", "x!?<^E/cc+WE9|");
      multiKey0.toString();
      multiKey0.toString();
      Integer[] integerArray0 = new Integer[5];
      Integer integer0 = new Integer(843);
      integerArray0[0] = integer0;
      Integer integer1 = new Integer((-2670));
      integerArray0[1] = integer1;
      Integer integer2 = new Integer((int) integerArray0[1]);
      integerArray0[2] = integer2;
      Integer integer3 = new Integer((-1199));
      integerArray0[3] = integer3;
      Integer integer4 = new Integer((-1199));
      integerArray0[4] = integer4;
      MultiKey<Integer> multiKey1 = new MultiKey<Integer>(integerArray0, true);
      multiKey1.toString();
      multiKey1.hashCode();
      MultiKey<Object> multiKey2 = new MultiKey<Object>((Object[]) integerArray0, true);
      // Undeclared exception!
//      try { 
        multiKey2.getKey((-1));
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // -1
//         //
//         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
//      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Object object0 = new Object();
      String string0 = "<;cK@%|)G";
      Integer integer0 = new Integer(0);
      MultiKey<Object> multiKey0 = new MultiKey<Object>(object0, "<;cK@%|)G", integer0, integer0);
      multiKey0.size();
      multiKey0.toString();
      multiKey0.toString();
      // Undeclared exception!
//      try { 
        multiKey0.getKey((-345));
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // -345
//         //
//         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
//      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      String string0 = "\\gpYruL";
      MultiKey<String> multiKey0 = new MultiKey<String>((String) null, "[", "gpYruL");
      int int0 = (-1092);
      // Undeclared exception!
//      try { 
        multiKey0.getKey((-1092));
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // -1092
//         //
//         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
//      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      MultiKey<Object> multiKey0 = new MultiKey<Object>(objectArray0, true);
      MultiKey<MultiKey<Object>> multiKey1 = new MultiKey<MultiKey<Object>>(multiKey0, multiKey0, multiKey0, multiKey0, multiKey0);
      String[] stringArray0 = new String[1];
      stringArray0[0] = "^\bXD/Fc;PVFRhx)o}Q";
      MultiKey<String> multiKey2 = new MultiKey<String>(stringArray0, false);
      multiKey2.toString();
      multiKey2.toString();
      multiKey2.toString();
      multiKey2.getKeys();
      multiKey2.toString();
      multiKey2.toString();
      Integer integer0 = new Integer((-1677));
      MultiKey<Integer> multiKey3 = new MultiKey<Integer>(integer0, integer0, integer0);
      multiKey3.toString();
      multiKey3.toString();
      multiKey0.toString();
      multiKey1.toString();
      multiKey2.toString();
      multiKey1.toString();
      multiKey0.toString();
      multiKey3.toString();
      multiKey2.equals(multiKey1);
      multiKey3.toString();
      multiKey2.getKey(0);
      multiKey0.toString();
      multiKey1.size();
      multiKey3.toString();
      // Undeclared exception!
//      try { 
        multiKey3.getKey((-636));
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // -636
//         //
//         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
//      }
  }
}
