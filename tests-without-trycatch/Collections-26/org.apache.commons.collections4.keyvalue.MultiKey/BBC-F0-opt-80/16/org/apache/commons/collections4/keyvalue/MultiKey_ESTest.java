/*
 * This file was automatically generated by EvoSuite
 * Wed Oct 20 12:29:14 GMT 2021
 */

package org.apache.commons.collections4.keyvalue;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.lang.reflect.Array;
import org.apache.commons.collections4.keyvalue.MultiKey;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class MultiKey_ESTest extends MultiKey_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Object object0 = new Object();
      MultiKey<Object> multiKey0 = new MultiKey<Object>(object0, object0, object0);
      Integer integer0 = new Integer((-1260));
      Integer integer1 = new Integer(0);
      Integer integer2 = new Integer(3);
      Integer integer3 = new Integer(2);
      Integer integer4 = new Integer((-1));
      MultiKey<Integer> multiKey1 = new MultiKey<Integer>(integer1, integer0, integer2, integer3, integer4);
      MultiKey<Integer> multiKey2 = new MultiKey<Integer>(integer1, integer3, integer1);
      Integer integer5 = new Integer(0);
      MultiKey<Integer> multiKey3 = new MultiKey<Integer>(integer5, integer3, integer5, integer2);
      MultiKey<MultiKey<Integer>> multiKey4 = new MultiKey<MultiKey<Integer>>(multiKey1, multiKey1, multiKey2, multiKey3);
      MultiKey<String> multiKey5 = new MultiKey<String>("", "Y='ckb", (String) null, "", "~j`lrBMiuO");
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) "";
      objectArray0[1] = (Object) multiKey2;
      objectArray0[2] = (Object) integer3;
      objectArray0[3] = (Object) multiKey5;
      objectArray0[4] = object0;
      objectArray0[5] = (Object) "Y='ckb";
      objectArray0[6] = (Object) integer1;
      objectArray0[7] = (Object) integer5;
      objectArray0[8] = (Object) "";
      MultiKey<Object> multiKey6 = new MultiKey<Object>(objectArray0);
      Object object1 = multiKey6.getKey(3);
      boolean boolean0 = multiKey5.equals(object1);
      assertTrue(boolean0);
      assertFalse(multiKey6.equals((Object)multiKey0));
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Object object0 = new Object();
      Integer integer0 = new Integer((-6356));
      Object object1 = new Object();
      MultiKey<Object> multiKey0 = new MultiKey<Object>(object1, (Object) null);
      multiKey0.getKeys();
      MultiKey<String> multiKey1 = new MultiKey<String>((String) null, (String) null, "");
      multiKey1.toString();
      int int0 = 0;
      multiKey1.getKey(0);
      // Undeclared exception!
//      try { 
        multiKey0.getKey((-6356));
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // -6356
//         //
//         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
//      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      MultiKey<Object> multiKey0 = new MultiKey<Object>(objectArray0);
      Integer integer0 = new Integer((-1504));
      Integer integer1 = new Integer((-1504));
      Integer integer2 = new Integer((-1504));
      multiKey0.toString();
      Integer integer3 = new Integer(1);
      MultiKey<Integer> multiKey1 = new MultiKey<Integer>(integer0, integer1, integer2, integer0, integer3);
      multiKey1.hashCode();
      MultiKey<String> multiKey2 = new MultiKey<String>("VJ1", "-S>shu^I8Rr6eak", "VJ1", "");
      multiKey2.hashCode();
      Object object0 = new Object();
      multiKey0.equals(object0);
      MultiKey<Object>[] multiKeyArray0 = (MultiKey<Object>[]) Array.newInstance(MultiKey.class, 4);
      multiKeyArray0[0] = multiKey0;
      multiKeyArray0[1] = multiKey0;
      multiKeyArray0[2] = multiKey0;
      multiKeyArray0[3] = multiKey0;
      MultiKey<MultiKey<Object>> multiKey3 = new MultiKey<MultiKey<Object>>(multiKeyArray0);
      multiKey3.toString();
      MultiKey<Object> multiKey4 = multiKey3.getKey(0);
      multiKey4.toString();
      multiKey2.getKey(1);
      multiKey2.getKey(1);
      Object[] objectArray1 = multiKey0.getKeys();
      assertNotSame(objectArray0, objectArray1);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      MultiKey<String>[] multiKeyArray0 = (MultiKey<String>[]) Array.newInstance(MultiKey.class, 0);
      MultiKey<MultiKey<String>> multiKey0 = new MultiKey<MultiKey<String>>(multiKeyArray0);
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.size();
      Integer integer0 = new Integer(0);
      String[] stringArray0 = new String[4];
      stringArray0[0] = "MultiKey[]";
      stringArray0[1] = "MultiKey[]";
      stringArray0[2] = "MultiKey[]";
      stringArray0[3] = "MultiKey[]";
      multiKey0.toString();
      MultiKey<String> multiKey1 = new MultiKey<String>(stringArray0);
      MultiKey<Object> multiKey2 = new MultiKey<Object>("MultiKey[]", integer0, integer0, multiKey1, integer0);
      multiKey1.toString();
      multiKey2.toString();
      Object object0 = new Object();
      multiKey2.equals(object0);
      multiKey2.getKey(0);
      Integer integer1 = new Integer(0);
      Integer integer2 = new Integer(1);
      MultiKey<Integer> multiKey3 = new MultiKey<Integer>(integer1, integer0, integer2, integer0);
      multiKey3.toString();
      int int0 = multiKey2.size();
      assertEquals(5, int0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("'Y|/;uvI^L", "n[T");
      Object object0 = multiKey0.getKey(0);
      assertEquals("'Y|/;uvI^L", object0);
      
      Integer integer0 = new Integer((-4376));
      Object object1 = new Object();
      Object object2 = new Object();
      multiKey0.toString();
      MultiKey<Object> multiKey1 = new MultiKey<Object>("'Y|/;uvI^L", integer0, object1, object2, "'Y|/;uvI^L");
      MultiKey<Object> multiKey2 = new MultiKey<Object>(multiKey1, multiKey1, "n[T", object2, multiKey0);
      multiKey2.toString();
      multiKey2.toString();
      multiKey2.toString();
      multiKey1.toString();
      multiKey2.toString();
      multiKey1.toString();
      multiKey2.toString();
      Integer integer1 = new Integer(0);
      Integer integer2 = new Integer((-4376));
      Integer integer3 = new Integer((-4376));
      MultiKey<Integer> multiKey3 = new MultiKey<Integer>(integer1, integer2, integer3, integer3);
      String string0 = multiKey3.toString();
      assertEquals("MultiKey[0, -4376, -4376, -4376]", string0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      MultiKey<Object> multiKey0 = null;
//      try {
        multiKey0 = new MultiKey<Object>((Object[]) null, false);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // The array of keys must not be null
//         //
//         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
//      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      MultiKey<String> multiKey0 = null;
//      try {
        multiKey0 = new MultiKey<String>((String[]) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // The array of keys must not be null
//         //
//         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
//      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      String string0 = "The array of keys must not be null";
      MultiKey<String> multiKey0 = new MultiKey<String>("", "The array of keys must not be null", "");
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.equals("");
      int int0 = 1186;
      Integer integer0 = new Integer(1186);
      MultiKey<Integer> multiKey1 = new MultiKey<Integer>(integer0, integer0);
      multiKey1.toString();
      multiKey1.equals("The array of keys must not be null");
      Object[] objectArray0 = new Object[7];
      multiKey1.toString();
      Object object0 = new Object();
      objectArray0[0] = object0;
      objectArray0[1] = (Object) integer0;
      objectArray0[2] = (Object) "MultiKey[, The array of keys must not be null, ]";
      objectArray0[3] = (Object) integer0;
      objectArray0[4] = (Object) "MultiKey[, The array of keys must not be null, ]";
      objectArray0[5] = (Object) multiKey1;
      Object object1 = new Object();
      objectArray0[6] = object1;
      MultiKey<Object> multiKey2 = new MultiKey<Object>(objectArray0, true);
      multiKey2.toString();
      multiKey2.toString();
      multiKey2.toString();
      multiKey2.toString();
      // Undeclared exception!
//      try { 
        multiKey2.getKey(1186);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 1186
//         //
//         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
//      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      String[] stringArray0 = new String[2];
      stringArray0[0] = "";
      stringArray0[1] = "";
      MultiKey<String> multiKey0 = new MultiKey<String>(stringArray0, false);
      multiKey0.toString();
      multiKey0.toString();
      MultiKey<Object> multiKey1 = new MultiKey<Object>(multiKey0, "");
      multiKey1.getKeys();
      multiKey0.hashCode();
      multiKey1.toString();
      multiKey0.hashCode();
      multiKey0.toString();
      multiKey1.size();
      Integer[] integerArray0 = new Integer[0];
      MultiKey<Integer> multiKey2 = new MultiKey<Integer>(integerArray0);
      multiKey2.toString();
      multiKey0.equals(multiKey2);
      multiKey0.toString();
      multiKey2.toString();
      multiKey1.toString();
      multiKey0.hashCode();
      // Undeclared exception!
//      try { 
        multiKey0.getKey(1625);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 1625
//         //
//         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
//      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("lJ", "]?}FGsD+,Y]|2", "", "]?}FGsD+,Y]|2");
      String[] stringArray0 = new String[4];
      stringArray0[0] = "";
      stringArray0[1] = "lJ";
      stringArray0[2] = "";
      multiKey0.toString();
      multiKey0.toString();
      stringArray0[3] = "9)Zd}Fdajk6Me}%&I+";
      MultiKey<String> multiKey1 = new MultiKey<String>(stringArray0);
      multiKey1.toString();
      multiKey1.toString();
      multiKey1.toString();
      // Undeclared exception!
//      try { 
        multiKey1.getKey((-2215));
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // -2215
//         //
//         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
//      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      String[] stringArray0 = new String[5];
      stringArray0[0] = "7 Yay";
      stringArray0[1] = "f6fuP;";
      stringArray0[2] = "pSd v1";
      stringArray0[3] = "";
      stringArray0[4] = "";
      MultiKey<String> multiKey0 = new MultiKey<String>(stringArray0, false);
      multiKey0.toString();
      multiKey0.hashCode();
      multiKey0.hashCode();
      MultiKey<Object> multiKey1 = new MultiKey<Object>(stringArray0);
      int int0 = (-617);
      // Undeclared exception!
//      try { 
        multiKey1.getKey((-617));
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // -617
//         //
//         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
//      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Object object0 = new Object();
      MultiKey<Object> multiKey0 = new MultiKey<Object>((Object) null, (Object) null, object0, (Object) null, object0);
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.size();
      Integer[] integerArray0 = new Integer[5];
      int int0 = 1;
      Integer integer0 = new Integer(1);
      integerArray0[0] = integer0;
      Integer integer1 = new Integer(2534);
      integerArray0[1] = integer1;
      Integer integer2 = new Integer(int0);
      integerArray0[2] = integer2;
      Integer integer3 = new Integer(0);
      integerArray0[3] = integer3;
      Integer integer4 = new Integer(0);
      integerArray0[4] = integer4;
      MultiKey<Integer> multiKey1 = new MultiKey<Integer>(integerArray0, true);
      MultiKey<MultiKey<Integer>> multiKey2 = new MultiKey<MultiKey<Integer>>(multiKey1, multiKey1);
      MultiKey<String> multiKey3 = new MultiKey<String>("]ZbgC", "CoO9/WD", "Cwn&", "", "");
      boolean boolean0 = multiKey2.equals(multiKey3);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      String string0 = "G^0&Cune[";
      String[] stringArray0 = new String[0];
      MultiKey<String> multiKey0 = new MultiKey<String>(stringArray0, false);
      int int0 = 0;
      // Undeclared exception!
//      try { 
        multiKey0.getKey(0);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 0
//         //
//         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
//      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      String[] stringArray0 = new String[1];
      stringArray0[0] = "\"o~v0_,qIl4-_3=o";
      MultiKey<String> multiKey0 = new MultiKey<String>(stringArray0);
      String string0 = multiKey0.toString();
      assertEquals("MultiKey[\"o~v0_,qIl4-_3=o]", string0);
      
      Integer integer0 = new Integer((-1089));
      Integer integer1 = new Integer((-1432));
      Integer integer2 = new Integer(0);
      MultiKey<Integer> multiKey1 = new MultiKey<Integer>(integer0, integer1, integer2);
      Integer integer3 = multiKey1.getKey(0);
      assertEquals((-1089), (int)integer3);
  }
}
