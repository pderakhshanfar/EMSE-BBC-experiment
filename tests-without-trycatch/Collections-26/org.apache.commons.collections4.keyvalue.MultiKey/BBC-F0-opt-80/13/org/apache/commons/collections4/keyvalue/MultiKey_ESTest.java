/*
 * This file was automatically generated by EvoSuite
 * Wed Oct 20 12:24:14 GMT 2021
 */

package org.apache.commons.collections4.keyvalue;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.lang.reflect.Array;
import org.apache.commons.collections4.keyvalue.MultiKey;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class MultiKey_ESTest extends MultiKey_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Integer[] integerArray0 = new Integer[0];
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integerArray0);
      multiKey0.size();
      MultiKey<Object> multiKey1 = new MultiKey<Object>(integerArray0);
      MultiKey<String> multiKey2 = new MultiKey<String>("jDD^JC", "", ",{xG\"dv8Y ]=$[5D)*", "");
      assertEquals(4, multiKey2.size());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("", "");
      multiKey0.toString();
      MultiKey<MultiKey<String>> multiKey1 = new MultiKey<MultiKey<String>>(multiKey0, multiKey0, multiKey0, multiKey0, multiKey0);
      multiKey1.toString();
      multiKey1.hashCode();
      multiKey0.hashCode();
      boolean boolean0 = multiKey0.equals("MultiKey[, ]");
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) "";
      MultiKey<Object> multiKey2 = new MultiKey<Object>(multiKey0, objectArray0[0], "MultiKey[MultiKey[, ], MultiKey[, ], MultiKey[, ], MultiKey[, ], MultiKey[, ]]");
      multiKey2.toString();
      String string0 = multiKey2.toString();
      assertEquals("MultiKey[MultiKey[, ], , MultiKey[MultiKey[, ], MultiKey[, ], MultiKey[, ], MultiKey[, ], MultiKey[, ]]]", string0);
      
      Integer integer0 = new Integer((-551));
      Integer integer1 = new Integer(2548);
      MultiKey<Integer> multiKey3 = new MultiKey<Integer>(integer0, integer0, integer1);
      Integer integer2 = new Integer(0);
      Integer integer3 = new Integer((-551));
      boolean boolean1 = multiKey3.equals(multiKey3);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>(")j47u2U%d-t", "VVUB<`\"B_.[KEF'K[ZF", "~yF;u#!AH4w%LK=o$#", "m#K}ao_k`", "org.apache.commons.collections4.keyvalue.MultiKey");
      multiKey0.toString();
      Object[] objectArray0 = new Object[0];
      MultiKey<Object> multiKey1 = new MultiKey<Object>(objectArray0);
      multiKey1.toString();
      Object[] objectArray1 = multiKey1.getKeys();
      assertNotSame(objectArray0, objectArray1);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      String[] stringArray0 = new String[4];
      stringArray0[0] = "";
      stringArray0[1] = "{Na&Pek<Gi*^";
      stringArray0[2] = "The array of keys must not be null";
      stringArray0[3] = ":*U|L)0xW6mN:=";
      MultiKey<String> multiKey0 = new MultiKey<String>(stringArray0);
      multiKey0.toString();
      multiKey0.toString();
      MultiKey<MultiKey<String>> multiKey1 = new MultiKey<MultiKey<String>>(multiKey0, multiKey0, multiKey0, multiKey0, multiKey0);
      multiKey1.toString();
      multiKey1.toString();
      multiKey0.toString();
      multiKey0.getKey(0);
      MultiKey<Integer> multiKey2 = new MultiKey<Integer>((Integer) null, (Integer) null);
      Integer integer0 = multiKey2.getKey(0);
      assertNull(integer0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Integer integer0 = new Integer((-1));
      Integer integer1 = new Integer((-1));
      Integer integer2 = new Integer((-1));
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integer0, integer1, integer2, integer0, integer2);
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      MultiKey<Object> multiKey1 = new MultiKey<Object>(multiKey0, integer0);
      multiKey1.toString();
      multiKey1.toString();
      multiKey1.equals(multiKey0);
      multiKey1.hashCode();
      MultiKey<Integer>[] multiKeyArray0 = (MultiKey<Integer>[]) Array.newInstance(MultiKey.class, 6);
      multiKeyArray0[0] = multiKey0;
      multiKeyArray0[1] = multiKey0;
      multiKeyArray0[2] = multiKey0;
      multiKeyArray0[3] = multiKey0;
      multiKeyArray0[4] = multiKey0;
      multiKeyArray0[5] = multiKey0;
      MultiKey<MultiKey<Integer>> multiKey2 = new MultiKey<MultiKey<Integer>>(multiKeyArray0);
      multiKey0.toString();
      // Undeclared exception!
//      try { 
        multiKey2.getKey((-1));
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // -1
//         //
//         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
//      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Integer[] integerArray0 = new Integer[3];
      Integer integer0 = new Integer(27);
      integerArray0[0] = integer0;
      Integer integer1 = new Integer(5);
      integerArray0[1] = integer1;
      Integer integer2 = new Integer((-1));
      integerArray0[2] = integer2;
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integerArray0, true);
      multiKey0.toString();
      multiKey0.toString();
      Integer[] integerArray1 = multiKey0.getKeys();
      MultiKey<Object> multiKey1 = new MultiKey<Object>((Object[]) integerArray1, false);
      multiKey1.toString();
      MultiKey<MultiKey<Object>> multiKey2 = new MultiKey<MultiKey<Object>>(multiKey1, multiKey1, multiKey1);
      multiKey2.size();
      MultiKey<String> multiKey3 = new MultiKey<String>("MultiKey[27, 5, -1]", "", (String) null, (String) null, "");
      MultiKey<MultiKey<String>> multiKey4 = new MultiKey<MultiKey<String>>(multiKey3, multiKey3, multiKey3);
      MultiKey<String> multiKey5 = multiKey4.getKey(1);
      multiKey5.size();
      // Undeclared exception!
//      try { 
        multiKey1.getKey(3);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 3
//         //
//         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
//      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Object[] objectArray0 = new Object[5];
      boolean boolean0 = false;
      MultiKey<Integer> multiKey0 = null;
//      try {
        multiKey0 = new MultiKey<Integer>((Integer[]) null, false);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // The array of keys must not be null
//         //
//         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
//      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Integer[] integerArray0 = null;
      MultiKey<Integer> multiKey0 = null;
//      try {
        multiKey0 = new MultiKey<Integer>((Integer[]) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // The array of keys must not be null
//         //
//         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
//      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Object object0 = new Object();
      MultiKey<Object> multiKey0 = new MultiKey<Object>(object0, object0, object0, object0);
      int int0 = 0;
      Integer integer0 = new Integer(0);
      Integer integer1 = new Integer(4);
      MultiKey<Integer> multiKey1 = new MultiKey<Integer>(integer0, integer1);
      multiKey1.toString();
      multiKey1.toString();
      // Undeclared exception!
//      try { 
        multiKey1.getKey((-2271));
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // -2271
//         //
//         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
//      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      String[] stringArray0 = new String[8];
      stringArray0[0] = "";
      stringArray0[1] = "MultiKey";
      stringArray0[2] = "";
      stringArray0[3] = "";
      stringArray0[4] = "aX3uLY";
      stringArray0[5] = "org.apache.commons.collections4.keyvalue.MultiKey";
      stringArray0[6] = "U:";
      stringArray0[7] = "V^e5+[yZ(=lD)C)0{M";
      MultiKey<String> multiKey0 = new MultiKey<String>(stringArray0);
      multiKey0.toString();
      multiKey0.getKeys();
      String string0 = multiKey0.toString();
      assertEquals("MultiKey[, MultiKey, , , aX3uLY, org.apache.commons.collections4.keyvalue.MultiKey, U:, V^e5+[yZ(=lD)C)0{M]", string0);
      
      MultiKey<Integer> multiKey1 = new MultiKey<Integer>((Integer) null, (Integer) null, (Integer) null, (Integer) null);
      boolean boolean0 = multiKey1.equals("org.apache.commons.collections4.keyvalue.MultiKey");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("VIFsT.!{u%C}\"mqW,", "VIFsT.!{u%C}\"mqW,", "VIFsT.!{u%C}\"mqW,");
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.size();
      MultiKey<Object> multiKey1 = new MultiKey<Object>("MultiKey[VIFsT.!{u%C}\"mqW,, VIFsT.!{u%C}\"mqW,, VIFsT.!{u%C}\"mqW,]", (Object) null, "MultiKey[VIFsT.!{u%C}\"mqW,, VIFsT.!{u%C}\"mqW,, VIFsT.!{u%C}\"mqW,]");
      multiKey1.toString();
      // Undeclared exception!
//      try { 
        multiKey1.getKey(3);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 3
//         //
//         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
//      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      String[] stringArray0 = new String[0];
      MultiKey<String> multiKey0 = new MultiKey<String>(stringArray0, true);
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      MultiKey<Object> multiKey1 = new MultiKey<Object>((Object[]) stringArray0, true);
      multiKey1.toString();
      multiKey1.toString();
      multiKey0.toString();
      int int0 = 0;
      // Undeclared exception!
//      try { 
        multiKey1.getKey(0);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 0
//         //
//         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
//      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Object object0 = new Object();
      MultiKey<String> multiKey0 = new MultiKey<String>("(A|0", "(A|0", "(A|0", "(A|0");
      multiKey0.toString();
      int int0 = 2175;
      // Undeclared exception!
//      try { 
        multiKey0.getKey(2175);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 2175
//         //
//         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
//      }
  }
}
