/*
 * This file was automatically generated by EvoSuite
 * Wed Oct 20 12:25:03 GMT 2021
 */

package org.apache.commons.collections4.keyvalue;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.lang.reflect.Array;
import org.apache.commons.collections4.keyvalue.MultiKey;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class MultiKey_ESTest extends MultiKey_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("0fsB7@q%>{URJ\"&Di", "0fsB7@q%>{URJ\"&Di", "0fsB7@q%>{URJ\"&Di", "0fsB7@q%>{URJ\"&Di");
      String string0 = "$";
      MultiKey<String> multiKey1 = new MultiKey<String>("0fsB7@q%>{URJ\"&Di", "0fsB7@q%>{URJ\"&Di", "", "0fsB7@q%>{URJ\"&Di", "$");
      multiKey1.equals(multiKey1);
      Integer integer0 = null;
      MultiKey<Integer> multiKey2 = new MultiKey<Integer>((Integer) null, (Integer) null);
      multiKey2.toString();
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) "$";
      objectArray0[1] = (Object) "";
      objectArray0[2] = (Object) null;
      objectArray0[3] = (Object) "MultiKey[null, null]";
      objectArray0[4] = (Object) multiKey2;
      objectArray0[5] = (Object) multiKey2;
      objectArray0[6] = (Object) multiKey1;
      objectArray0[7] = (Object) "$";
      objectArray0[8] = (Object) null;
      MultiKey<Object> multiKey3 = new MultiKey<Object>(objectArray0);
      // Undeclared exception!
//      try { 
        multiKey3.getKey(944);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 944
//         //
//         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
//      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Integer integer0 = new Integer((-2078));
      Integer integer1 = new Integer((-2078));
      Integer integer2 = new Integer((-1394));
      Integer integer3 = new Integer((-1394));
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integer3, integer1, integer3, (Integer) null, (Integer) null);
      MultiKey<Object> multiKey1 = new MultiKey<Object>(integer2, integer3, integer0);
      MultiKey<Object> multiKey2 = new MultiKey<Object>(integer0, (Object) null, "m{UY&8iE`6k");
      Object object0 = new Object();
      multiKey2.equals(object0);
      MultiKey<Object>[] multiKeyArray0 = (MultiKey<Object>[]) Array.newInstance(MultiKey.class, 0);
      MultiKey<MultiKey<Object>> multiKey3 = new MultiKey<MultiKey<Object>>(multiKeyArray0, true);
      MultiKey<Object>[] multiKeyArray1 = multiKey3.getKeys();
      assertNotSame(multiKeyArray0, multiKeyArray1);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      MultiKey<Object> multiKey0 = new MultiKey<Object>(objectArray0);
      multiKey0.size();
      MultiKey<MultiKey<String>> multiKey1 = null;
//      try {
        multiKey1 = new MultiKey<MultiKey<String>>((MultiKey<String>[]) null, true);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // The array of keys must not be null
//         //
//         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
//      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("", "", "", "");
      multiKey0.getKey(0);
      Object object0 = new Object();
      multiKey0.toString();
      MultiKey<Object> multiKey1 = new MultiKey<Object>("", "", object0);
      Object object1 = new Object();
      MultiKey<Object> multiKey2 = new MultiKey<Object>(object1, multiKey1, multiKey0);
      MultiKey<MultiKey<Object>> multiKey3 = new MultiKey<MultiKey<Object>>(multiKey2, multiKey2);
      multiKey3.toString();
      multiKey3.toString();
      multiKey3.equals(multiKey0);
      Integer[] integerArray0 = new Integer[0];
      MultiKey<Integer> multiKey4 = new MultiKey<Integer>(integerArray0);
      multiKey4.toString();
      multiKey4.toString();
      multiKey2.size();
      MultiKey<String> multiKey5 = null;
//      try {
        multiKey5 = new MultiKey<String>((String[]) null, false);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // The array of keys must not be null
//         //
//         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
//      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>((String) null, "", "");
      MultiKey<Object> multiKey1 = null;
//      try {
        multiKey1 = new MultiKey<Object>((Object[]) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // The array of keys must not be null
//         //
//         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
//      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      MultiKey<Integer> multiKey0 = null;
//      try {
        multiKey0 = new MultiKey<Integer>((Integer[]) null, true);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // The array of keys must not be null
//         //
//         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
//      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Integer integer0 = new Integer(0);
      MultiKey<Object>[] multiKeyArray0 = (MultiKey<Object>[]) Array.newInstance(MultiKey.class, 5);
      String string0 = "";
      Object object0 = new Object();
      MultiKey<Object> multiKey0 = new MultiKey<Object>((Object) null, object0, object0);
      MultiKey<Object> multiKey1 = new MultiKey<Object>("", integer0, integer0, multiKey0);
      multiKeyArray0[0] = multiKey1;
      MultiKey<Object> multiKey2 = new MultiKey<Object>((Object[]) multiKeyArray0, false);
      multiKeyArray0[1] = multiKey2;
      Integer[] integerArray0 = new Integer[4];
      integerArray0[0] = integer0;
      integerArray0[1] = integer0;
      integerArray0[2] = integer0;
      integerArray0[3] = integer0;
      MultiKey<Integer> multiKey3 = new MultiKey<Integer>(integerArray0, false);
      // Undeclared exception!
//      try { 
        multiKey3.getKey(1168);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 1168
//         //
//         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
//      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Object[] objectArray0 = new Object[5];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      MultiKey<Object> multiKey0 = new MultiKey<Object>(objectArray0, false);
      int int0 = 5;
      // Undeclared exception!
//      try { 
        multiKey0.getKey(5);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 5
//         //
//         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
//      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Integer integer0 = new Integer((-1606));
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integer0, integer0, integer0, integer0);
      Integer[] integerArray0 = new Integer[9];
      Integer integer1 = new Integer((-1606));
      integerArray0[0] = integer1;
      int int0 = 0;
      Integer integer2 = new Integer(0);
      integerArray0[1] = integer2;
      integerArray0[2] = integer0;
      integerArray0[3] = integer0;
      Integer integer3 = new Integer(1733);
      integerArray0[4] = integer3;
      integerArray0[5] = integer0;
      integerArray0[6] = integer0;
      integerArray0[7] = integer0;
      integerArray0[8] = integer0;
      MultiKey<Integer> multiKey1 = new MultiKey<Integer>(integerArray0, false);
      MultiKey<MultiKey<Integer>> multiKey2 = new MultiKey<MultiKey<Integer>>(multiKey0, multiKey0, multiKey1);
      // Undeclared exception!
//      try { 
        multiKey2.getKey((-1529));
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // -1529
//         //
//         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
//      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("org.apache.commons.collections4.keyvalue.MultiKey", "", "", "");
      MultiKey<Object> multiKey1 = new MultiKey<Object>(multiKey0, "org.apache.commons.collections4.keyvalue.MultiKey");
      multiKey1.toString();
      multiKey1.hashCode();
      multiKey1.toString();
      String string0 = multiKey1.toString();
      //  // Unstable assertion: assertEquals("MultiKey[MultiKey[org.apache.commons.collections4.keyvalue.MultiKey, , , ], org.apache.commons.collections4.keyvalue.MultiKey]", string0);
      
      Integer[] integerArray0 = new Integer[3];
      Integer integer0 = new Integer((-2051));
      integerArray0[0] = integer0;
      Integer integer1 = new Integer((-2051));
      integerArray0[1] = integer1;
      Integer integer2 = new Integer((int) integerArray0[1]);
      integerArray0[2] = integer2;
      MultiKey<Integer> multiKey2 = new MultiKey<Integer>(integerArray0, false);
      int int0 = multiKey2.size();
      int int1 = multiKey1.size();
      int int2 = multiKey1.hashCode();
      //  // Unstable assertion: assertFalse(int2 == int0);
      //  // Unstable assertion: assertFalse(int2 == int1);
      
      MultiKey<String>[] multiKeyArray0 = (MultiKey<String>[]) Array.newInstance(MultiKey.class, 5);
      multiKeyArray0[0] = multiKey0;
      multiKeyArray0[1] = multiKey0;
      multiKeyArray0[2] = multiKey0;
      multiKeyArray0[3] = multiKey0;
      multiKeyArray0[4] = multiKey0;
      MultiKey<MultiKey<String>> multiKey3 = new MultiKey<MultiKey<String>>(multiKeyArray0);
      int int3 = multiKey3.hashCode();
      //  // Unstable assertion: assertFalse(int3 == int0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("HbK hTN#\"TcC__f`w", "@[S'lGT*oU", "HbK hTN#\"TcC__f`w", "org.apache.commons.collections4.keyvalue.MultiKey", "wefMMQojBpiHF7h+^");
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      MultiKey<Object> multiKey1 = new MultiKey<Object>("org.apache.commons.collections4.keyvalue.MultiKey", "HbK hTN#\"TcC__f`w");
      multiKey1.toString();
      multiKey0.toString();
      multiKey1.toString();
      multiKey1.getKeys();
      multiKey0.toString();
      String string0 = multiKey1.toString();
      assertEquals("MultiKey[org.apache.commons.collections4.keyvalue.MultiKey, HbK hTN#\"TcC__f`w]", string0);
      
      multiKey1.getKeys();
      multiKey1.getKey(0);
      multiKey1.getKeys();
      String string1 = multiKey0.getKey(0);
      assertEquals("HbK hTN#\"TcC__f`w", string1);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      MultiKey<Object> multiKey0 = new MultiKey<Object>("ol+Gc([a(Gv@b", "ol+Gc([a(Gv@b");
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.size();
      multiKey0.toString();
      MultiKey<MultiKey<Object>> multiKey1 = new MultiKey<MultiKey<Object>>(multiKey0, multiKey0, multiKey0);
      multiKey1.toString();
      multiKey1.toString();
      multiKey0.toString();
      MultiKey<String> multiKey2 = new MultiKey<String>("", "", "The array of keys must not be null", "");
      multiKey2.toString();
      multiKey2.toString();
      multiKey2.toString();
      multiKey2.toString();
      multiKey2.size();
      Integer integer0 = new Integer(0);
      MultiKey<Integer> multiKey3 = new MultiKey<Integer>(integer0, integer0, integer0, integer0);
      multiKey3.toString();
      multiKey3.toString();
      multiKey3.equals("ol+Gc([a(Gv@b");
      multiKey0.hashCode();
      multiKey3.size();
      multiKey3.toString();
      multiKey0.hashCode();
      multiKey2.toString();
      multiKey2.equals("The array of keys must not be null");
      String string0 = multiKey2.toString();
      assertEquals("MultiKey[, , The array of keys must not be null, ]", string0);
      
      multiKey0.getKeys();
      multiKey0.size();
      boolean boolean0 = multiKey0.equals("2OfTUw");
      assertFalse(boolean0);
  }
}
