/*
 * This file was automatically generated by EvoSuite
 * Fri Oct 22 17:51:38 GMT 2021
 */

package org.apache.commons.collections4.keyvalue;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.lang.reflect.Array;
import org.apache.commons.collections4.keyvalue.MultiKey;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class MultiKey_ESTest extends MultiKey_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Integer integer0 = new Integer(2);
      MultiKey<Object> multiKey0 = new MultiKey<Object>("=`1L30 >;pz('Li", "", "");
      Integer integer1 = new Integer(0);
      Integer integer2 = new Integer(2);
      Integer integer3 = new Integer(2);
      MultiKey<Integer> multiKey1 = new MultiKey<Integer>(integer1, integer2, integer3);
      MultiKey<String> multiKey2 = new MultiKey<String>("", "=`1L30 >;pz('Li");
      MultiKey<Object> multiKey3 = new MultiKey<Object>(multiKey2, integer2, multiKey0, integer0);
      boolean boolean0 = multiKey0.equals(multiKey0);
      assertTrue(boolean0);
      assertFalse(multiKey0.equals((Object)multiKey3));
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("3!2'i)haQ", "3!2'i)haQ", "", "", "3!2'i)haQ");
      Integer[] integerArray0 = new Integer[9];
      Integer integer0 = new Integer(1283);
      integerArray0[0] = integer0;
      int int0 = 6;
      Integer integer1 = new Integer(6);
      integerArray0[1] = integer1;
      Integer integer2 = new Integer(6);
      integerArray0[2] = integer2;
      Integer integer3 = new Integer(3000);
      integerArray0[3] = integer3;
      Integer integer4 = new Integer(int0);
      integerArray0[4] = integer4;
      Integer integer5 = new Integer(8);
      integerArray0[5] = integer5;
      Integer integer6 = new Integer(1816);
      integerArray0[6] = integer6;
      Integer integer7 = new Integer(1);
      integerArray0[7] = integer7;
      Integer integer8 = new Integer((int) integerArray0[0]);
      integerArray0[8] = integer8;
      MultiKey<Integer> multiKey1 = new MultiKey<Integer>(integerArray0, false);
      MultiKey<Object> multiKey2 = new MultiKey<Object>(integerArray0);
      boolean boolean0 = multiKey1.equals(multiKey2);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      MultiKey<Integer> multiKey0 = null;
//      try {
        multiKey0 = new MultiKey<Integer>((Integer[]) null, true);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // The array of keys must not be null
//         //
//         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
//      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      String[] stringArray0 = new String[6];
      stringArray0[0] = "";
      stringArray0[1] = "a7K";
      stringArray0[2] = "";
      stringArray0[3] = "|s&h%M>H{)'6mt.A3";
      stringArray0[4] = "";
      stringArray0[5] = "%";
      MultiKey<String> multiKey0 = new MultiKey<String>(stringArray0);
      MultiKey<Object> multiKey1 = new MultiKey<Object>((Object) null, multiKey0);
      multiKey1.getKey(0);
      Integer integer0 = new Integer(0);
      Integer integer1 = new Integer(0);
      MultiKey<Integer> multiKey2 = new MultiKey<Integer>((Integer) null, integer0, integer0, integer1);
      multiKey2.getKey(0);
      MultiKey<String> multiKey3 = new MultiKey<String>(stringArray0, false);
      multiKey3.getKey(0);
      MultiKey<Object> multiKey4 = new MultiKey<Object>((Object) null, (Object) null, (Object) null, (Object) null, "");
      multiKey4.hashCode();
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      MultiKey<Object> multiKey0 = new MultiKey<Object>(objectArray0);
      multiKey0.toString();
      multiKey0.getKeys();
      multiKey0.getKeys();
      int int0 = multiKey0.size();
      String[] stringArray0 = new String[6];
      stringArray0[0] = "MultiKey[]";
      stringArray0[1] = "MultiKey[]";
      stringArray0[2] = "MultiKey[]";
      stringArray0[3] = "MultiKey[]";
      stringArray0[4] = "MultiKey[]";
      stringArray0[5] = "MultiKey[]";
      MultiKey<String> multiKey1 = new MultiKey<String>(stringArray0, false);
      int int1 = multiKey1.size();
      assertFalse(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Integer[] integerArray0 = null;
      MultiKey<Integer> multiKey0 = null;
//      try {
        multiKey0 = new MultiKey<Integer>((Integer[]) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // The array of keys must not be null
//         //
//         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
//      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      MultiKey<Object> multiKey0 = new MultiKey<Object>("tCoBsc)GwT5;ZX?", (Object) null);
      Object object0 = new Object();
      boolean boolean0 = multiKey0.equals(object0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      MultiKey<Object>[] multiKeyArray0 = (MultiKey<Object>[]) Array.newInstance(MultiKey.class, 4);
      Object object0 = new Object();
      MultiKey<Object> multiKey0 = new MultiKey<Object>(object0, object0);
      multiKeyArray0[0] = multiKey0;
      Integer integer0 = new Integer((-1472));
      Integer integer1 = new Integer((-1472));
      MultiKey<Object> multiKey1 = new MultiKey<Object>(integer0, integer0, object0, integer1);
      multiKeyArray0[1] = multiKey1;
      MultiKey<Object> multiKey2 = new MultiKey<Object>("Kwa2ZTp'wxDES[i!", "Kwa2ZTp'wxDES[i!", "Kwa2ZTp'wxDES[i!", multiKey1);
      multiKeyArray0[2] = multiKey2;
      MultiKey<Object> multiKey3 = new MultiKey<Object>(multiKeyArray0);
      multiKeyArray0[3] = multiKey3;
      MultiKey<MultiKey<Object>> multiKey4 = new MultiKey<MultiKey<Object>>(multiKeyArray0, true);
      assertEquals(4, multiKey4.size());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Integer integer0 = new Integer(0);
      Integer integer1 = new Integer(0);
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integer0, integer1, integer1);
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      Integer integer2 = multiKey0.getKey(0);
      MultiKey<String> multiKey1 = new MultiKey<String>("", "");
      multiKey1.toString();
      multiKey1.toString();
      Integer integer3 = new Integer(0);
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) "";
      objectArray0[1] = (Object) integer1;
      objectArray0[2] = (Object) multiKey1;
      objectArray0[3] = (Object) "MultiKey[, ]";
      objectArray0[4] = (Object) multiKey0;
      objectArray0[5] = (Object) integer1;
      objectArray0[6] = (Object) "MultiKey[0, 0, 0]";
      objectArray0[7] = (Object) "MultiKey[0, 0, 0]";
      MultiKey<Object> multiKey2 = new MultiKey<Object>(objectArray0, false);
      MultiKey<Object> multiKey3 = new MultiKey<Object>(integer2, integer3, multiKey2);
      multiKey0.toString();
      multiKey1.toString();
      multiKey3.toString();
      multiKey3.toString();
      multiKey2.toString();
      multiKey2.toString();
      multiKey3.getKey(0);
      Object[] objectArray1 = multiKey2.getKeys();
      assertEquals(8, objectArray1.length);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Object[] objectArray0 = new Object[3];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      Object object2 = new Object();
      objectArray0[2] = object2;
      MultiKey<Object> multiKey0 = new MultiKey<Object>(objectArray0, true);
      multiKey0.toString();
      multiKey0.toString();
      MultiKey<String> multiKey1 = new MultiKey<String>("Lgl_;TrqVV", "Lgl_;TrqVV", "Lgl_;TrqVV");
      multiKey1.toString();
      int int0 = (-1959);
      multiKey1.toString();
      // Undeclared exception!
//      try { 
        multiKey1.getKey((-1959));
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // -1959
//         //
//         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
//      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Integer[] integerArray0 = new Integer[1];
      Integer integer0 = new Integer((-28));
      integerArray0[0] = integer0;
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integerArray0, false);
      // Undeclared exception!
//      try { 
        multiKey0.getKey(866);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 866
//         //
//         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
//      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("r[{dRYa+3^9MTPDX6a", "VBSW?4eu=o", "ia#+E\"$Gav ");
      multiKey0.size();
      multiKey0.toString();
      MultiKey<Object> multiKey1 = new MultiKey<Object>(".=fV", multiKey0, "r[{dRYa+3^9MTPDX6a", "ia#+E\"$Gav ");
      multiKey1.toString();
      multiKey1.getKeys();
      // Undeclared exception!
//      try { 
        multiKey0.getKey(3);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 3
//         //
//         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
//      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Integer integer0 = new Integer((-1782));
      MultiKey<Object> multiKey0 = new MultiKey<Object>(integer0, integer0, integer0, integer0);
      Integer integer1 = new Integer((-1782));
      Integer integer2 = new Integer(2478);
      Integer integer3 = new Integer(2478);
      multiKey0.toString();
      MultiKey<Integer> multiKey1 = new MultiKey<Integer>(integer1, integer0, integer2, integer3, integer1);
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey1.size();
      multiKey1.toString();
      multiKey0.toString();
      multiKey1.toString();
      MultiKey<String> multiKey2 = new MultiKey<String>("", "", "");
      multiKey2.toString();
      multiKey2.toString();
      multiKey2.toString();
      multiKey2.toString();
      multiKey1.toString();
      multiKey0.toString();
      multiKey2.toString();
      // Undeclared exception!
//      try { 
        multiKey2.getKey((-2648));
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // -2648
//         //
//         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
//      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("%U:S>l'sXU%ExC7)L", "");
      MultiKey<Object> multiKey1 = new MultiKey<Object>("%U:S>l'sXU%ExC7)L", multiKey0, (Object) null, "", multiKey0);
      Integer integer0 = new Integer(0);
      MultiKey<Integer> multiKey2 = new MultiKey<Integer>(integer0, integer0, integer0);
      boolean boolean0 = multiKey1.equals(multiKey2);
      assertFalse(boolean0);
  }
}
