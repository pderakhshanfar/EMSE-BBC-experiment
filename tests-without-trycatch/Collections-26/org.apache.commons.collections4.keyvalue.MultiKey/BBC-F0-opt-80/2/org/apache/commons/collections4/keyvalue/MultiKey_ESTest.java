/*
 * This file was automatically generated by EvoSuite
 * Wed Oct 13 20:46:54 GMT 2021
 */

package org.apache.commons.collections4.keyvalue;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.lang.reflect.Array;
import org.apache.commons.collections4.keyvalue.MultiKey;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class MultiKey_ESTest extends MultiKey_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      MultiKey<Object> multiKey0 = new MultiKey<Object>("b", "b", "b", "b");
      multiKey0.toString();
      multiKey0.size();
      multiKey0.size();
      Object object0 = new Object();
      boolean boolean0 = multiKey0.equals(object0);
      Integer integer0 = new Integer(4);
      Integer integer1 = new Integer(4);
      MultiKey<Integer> multiKey1 = new MultiKey<Integer>(integer1, integer1);
      Integer integer2 = new Integer(1);
      Integer integer3 = new Integer(14);
      MultiKey<Integer> multiKey2 = new MultiKey<Integer>(integer1, integer3, integer0);
      String string0 = multiKey2.toString();
      assertEquals("MultiKey[4, 14, 4]", string0);
      
      multiKey1.size();
      MultiKey<String> multiKey3 = new MultiKey<String>("MultiKey[4, 14, 4]", (String) null, "R'LFj/|NG|NUl!Dl", "MultiKey[b, b, b, b]");
      multiKey3.size();
      String[] stringArray0 = new String[2];
      stringArray0[0] = "MultiKey[4, 14, 4]";
      stringArray0[1] = "MultiKey[b, b, b, b]";
      boolean boolean1 = multiKey3.equals(multiKey3);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>((String) null, "", "");
      Integer[] integerArray0 = new Integer[0];
      MultiKey<Integer> multiKey1 = new MultiKey<Integer>(integerArray0, false);
      Integer[] integerArray1 = multiKey1.getKeys();
      assertEquals(0, integerArray1.length);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("", (String) null, "");
      Integer integer0 = new Integer(0);
      MultiKey<Integer> multiKey1 = new MultiKey<Integer>(integer0, integer0);
      multiKey1.toString();
      MultiKey<Object> multiKey2 = new MultiKey<Object>(multiKey0, multiKey1);
      multiKey2.toString();
      multiKey2.toString();
      boolean boolean0 = multiKey0.equals("");
      multiKey1.toString();
      MultiKey<MultiKey<Object>> multiKey3 = new MultiKey<MultiKey<Object>>(multiKey2, multiKey2, multiKey2);
      multiKey0.toString();
      multiKey3.toString();
      multiKey3.toString();
      multiKey0.toString();
      multiKey0.toString();
      String string0 = multiKey1.toString();
      assertEquals("MultiKey[0, 0]", string0);
      
      MultiKey<Object> multiKey4 = multiKey3.getKey(0);
      multiKey0.equals("MultiKey[MultiKey[, null, ], MultiKey[0, 0]]");
      multiKey2.hashCode();
      multiKey2.size();
      Object[] objectArray0 = multiKey4.getKeys();
      MultiKey<Object> multiKey5 = new MultiKey<Object>(objectArray0);
      boolean boolean1 = multiKey2.equals(multiKey5);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      MultiKey<Object> multiKey0 = new MultiKey<Object>(objectArray0);
      multiKey0.size();
      String string0 = multiKey0.toString();
      assertEquals("MultiKey[]", string0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Object[] objectArray0 = new Object[2];
      Object object0 = new Object();
      objectArray0[0] = object0;
      MultiKey<MultiKey<String>> multiKey0 = new MultiKey<MultiKey<String>>((MultiKey<String>) null, (MultiKey<String>) null, (MultiKey<String>) null);
      multiKey0.getKey(2);
      objectArray0[1] = (Object) null;
      MultiKey<Object> multiKey1 = new MultiKey<Object>(objectArray0);
      MultiKey<MultiKey<Object>> multiKey2 = new MultiKey<MultiKey<Object>>(multiKey1, multiKey1, multiKey1);
      multiKey2.toString();
      multiKey1.toString();
      multiKey1.toString();
      multiKey1.toString();
      // Undeclared exception!
//      try { 
        multiKey1.getKey(7479);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 7479
//         //
//         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
//      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      String string0 = "";
      String string1 = "QGt";
      MultiKey<String> multiKey0 = new MultiKey<String>("", "QGt", "eTm] 2qLJ4(+r");
      MultiKey<Object> multiKey1 = null;
//      try {
        multiKey1 = new MultiKey<Object>((Object[]) null, false);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // The array of keys must not be null
//         //
//         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
//      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Integer integer0 = new Integer(515);
      Integer integer1 = new Integer(515);
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integer0, integer1);
      multiKey0.toString();
      MultiKey<Object> multiKey1 = null;
//      try {
        multiKey1 = new MultiKey<Object>((Object[]) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // The array of keys must not be null
//         //
//         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
//      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("", (String) null, "");
      Integer integer0 = new Integer(0);
      MultiKey<Integer> multiKey1 = new MultiKey<Integer>(integer0, integer0);
      multiKey1.toString();
      MultiKey<Object> multiKey2 = new MultiKey<Object>(multiKey0, multiKey1);
      multiKey2.toString();
      multiKey2.toString();
      multiKey0.equals("");
      multiKey1.toString();
      MultiKey<MultiKey<Object>> multiKey3 = new MultiKey<MultiKey<Object>>(multiKey2, multiKey2, multiKey2);
      multiKey0.toString();
      multiKey3.toString();
      multiKey3.toString();
      multiKey0.toString();
      multiKey1.toString();
      MultiKey<Object> multiKey4 = multiKey3.getKey(0);
      multiKey0.equals("MultiKey[MultiKey[, null, ], MultiKey[0, 0]]");
      multiKey2.hashCode();
      multiKey2.size();
      Object[] objectArray0 = multiKey4.getKeys();
      assertEquals(2, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Integer[] integerArray0 = new Integer[4];
      Integer integer0 = new Integer(1322);
      integerArray0[0] = integer0;
      Integer integer1 = new Integer(980);
      integerArray0[1] = integer1;
      Integer integer2 = new Integer((-2769));
      integerArray0[2] = integer2;
      int int0 = 0;
      Integer integer3 = new Integer(0);
      integerArray0[3] = integer3;
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integerArray0);
      Integer integer4 = multiKey0.getKey(int0);
      assertEquals(1322, (int)integer4);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("The array of keys must not be null", ",5??xm");
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) ",5??xm";
      multiKey0.toString();
      multiKey0.toString();
      objectArray0[1] = (Object) "The array of keys must not be null";
      objectArray0[2] = (Object) multiKey0;
      MultiKey<Object> multiKey1 = new MultiKey<Object>(objectArray0, true);
      multiKey1.toString();
      Integer integer0 = new Integer(0);
      MultiKey<Object> multiKey2 = new MultiKey<Object>(multiKey1, integer0, ",5??xm");
      multiKey2.hashCode();
      Integer[] integerArray0 = new Integer[5];
      integerArray0[0] = integer0;
      integerArray0[1] = integer0;
      multiKey1.toString();
      Integer integer1 = new Integer(0);
      integerArray0[2] = integer1;
      integerArray0[3] = integer0;
      integerArray0[4] = integer0;
      MultiKey<Integer> multiKey3 = new MultiKey<Integer>(integerArray0);
      multiKey0.toString();
      multiKey3.size();
      multiKey2.toString();
      multiKey1.hashCode();
      multiKey1.toString();
      multiKey2.getKeys();
      multiKey0.toString();
      multiKey2.equals(multiKey0);
      multiKey0.hashCode();
      multiKey0.hashCode();
      multiKey1.hashCode();
      // Undeclared exception!
//      try { 
        multiKey1.getKey((-455));
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // -455
//         //
//         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
//      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Integer integer0 = new Integer(3);
      Integer integer1 = new Integer(3);
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>((Integer) null, integer0, integer1);
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.equals((Object) null);
      MultiKey<MultiKey<Integer>> multiKey1 = new MultiKey<MultiKey<Integer>>(multiKey0, multiKey0, multiKey0);
      // Undeclared exception!
//      try { 
        multiKey1.getKey(3);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 3
//         //
//         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
//      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      MultiKey<Object>[] multiKeyArray0 = (MultiKey<Object>[]) Array.newInstance(MultiKey.class, 1);
      Object object0 = new Object();
      MultiKey<Object> multiKey0 = new MultiKey<Object>(object0, object0, object0);
      multiKeyArray0[0] = multiKey0;
      MultiKey<MultiKey<Object>> multiKey1 = new MultiKey<MultiKey<Object>>(multiKeyArray0);
      multiKey1.toString();
      Integer[] integerArray0 = new Integer[0];
      MultiKey<Integer> multiKey2 = new MultiKey<Integer>(integerArray0, false);
      MultiKey<MultiKey<Integer>> multiKey3 = new MultiKey<MultiKey<Integer>>(multiKey2, multiKey2);
      int int0 = multiKey3.size();
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      MultiKey<Object> multiKey0 = new MultiKey<Object>("", "", "", "", "");
      String string0 = multiKey0.toString();
      assertEquals("MultiKey[, , , , ]", string0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      String[] stringArray0 = new String[3];
      stringArray0[0] = "DLtU";
      stringArray0[1] = "(Uq'*,o20w|N*^N$&";
      stringArray0[2] = "";
      MultiKey<String> multiKey0 = new MultiKey<String>(stringArray0);
      multiKey0.toString();
      int int0 = multiKey0.size();
      MultiKey<Object> multiKey1 = new MultiKey<Object>(stringArray0);
      multiKey1.size();
      multiKey1.toString();
      multiKey0.toString();
      multiKey1.getKeys();
      Integer[] integerArray0 = new Integer[8];
      Integer integer0 = new Integer(3);
      integerArray0[0] = integer0;
      Integer integer1 = new Integer(3);
      integerArray0[1] = integer1;
      Integer integer2 = new Integer(3);
      integerArray0[2] = integer2;
      Integer integer3 = new Integer((int) integerArray0[0]);
      integerArray0[3] = integer3;
      multiKey1.toString();
      Integer integer4 = new Integer(0);
      integerArray0[4] = integer4;
      Integer integer5 = new Integer((-1174));
      integerArray0[5] = integer5;
      Integer integer6 = new Integer(3);
      integerArray0[6] = integer6;
      Integer integer7 = new Integer(1);
      integerArray0[7] = integer7;
      MultiKey<Integer> multiKey2 = new MultiKey<Integer>(integerArray0);
      int int1 = multiKey2.hashCode();
      assertFalse(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Integer integer0 = new Integer(0);
      Integer integer1 = new Integer(0);
      Integer integer2 = new Integer(0);
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integer0, integer1, integer2, integer0);
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      String string0 = "";
      MultiKey<String> multiKey1 = new MultiKey<String>("", "", "", "i&LM5=oErjfBcimy:#");
      multiKey1.toString();
      multiKey1.toString();
      multiKey1.toString();
      multiKey0.toString();
      // Undeclared exception!
//      try { 
        multiKey1.getKey(4);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 4
//         //
//         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
//      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Integer[] integerArray0 = new Integer[7];
      Integer integer0 = new Integer((-526));
      integerArray0[0] = integer0;
      Integer integer1 = new Integer(0);
      integerArray0[1] = integer1;
      Integer integer2 = new Integer(376);
      integerArray0[2] = integer2;
      Integer integer3 = new Integer((-285));
      integerArray0[3] = integer3;
      Integer integer4 = new Integer((int) integerArray0[3]);
      integerArray0[4] = integer4;
      Integer integer5 = new Integer(1);
      integerArray0[5] = integer5;
      Integer integer6 = new Integer(1);
      integerArray0[6] = integer6;
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integerArray0, true);
      String string0 = multiKey0.toString();
      assertEquals("MultiKey[-526, 0, 376, -285, -285, 1, 1]", string0);
  }
}
