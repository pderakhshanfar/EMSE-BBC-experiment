/*
 * This file was automatically generated by EvoSuite
 * Fri Oct 22 17:53:47 GMT 2021
 */

package org.apache.commons.collections4.keyvalue;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.lang.reflect.Array;
import org.apache.commons.collections4.keyvalue.MultiKey;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class MultiKey_ESTest extends MultiKey_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>(".<@2KRi|x<k21xaFr{", ".<@2KRi|x<k21xaFr{", "The array of keys must not be null", "Jr4Y-sc8");
      boolean boolean0 = multiKey0.equals(multiKey0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("9(v", "V>`/y=j|cB:2");
      MultiKey<String>[] multiKeyArray0 = (MultiKey<String>[]) Array.newInstance(MultiKey.class, 2);
      multiKeyArray0[0] = multiKey0;
      multiKeyArray0[1] = multiKey0;
      MultiKey<MultiKey<String>> multiKey1 = new MultiKey<MultiKey<String>>(multiKeyArray0);
      MultiKey<Object> multiKey2 = new MultiKey<Object>(multiKeyArray0);
      boolean boolean0 = multiKey1.equals(multiKey2);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      int int0 = 510;
      Integer integer0 = new Integer(510);
      Integer integer1 = new Integer(7);
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integer0, integer1);
      multiKey0.toString();
      Object object0 = new Object();
      Integer integer2 = new Integer((-1));
      multiKey0.toString();
      MultiKey<Object> multiKey1 = new MultiKey<Object>(integer1, object0, integer2, "", object0);
      multiKey1.getKeys();
      MultiKey<Integer>[] multiKeyArray0 = (MultiKey<Integer>[]) Array.newInstance(MultiKey.class, 0);
      MultiKey<MultiKey<Integer>> multiKey2 = new MultiKey<MultiKey<Integer>>(multiKeyArray0);
      multiKey2.toString();
      multiKey0.toString();
      multiKey2.getKeys();
      multiKey1.toString();
      MultiKey<String> multiKey3 = null;
//      try {
        multiKey3 = new MultiKey<String>((String[]) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // The array of keys must not be null
//         //
//         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
//      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("9w([i", "9w([i");
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) "9w([i";
      objectArray0[1] = (Object) "9w([i";
      multiKey0.toString();
      MultiKey<Object> multiKey1 = new MultiKey<Object>(objectArray0);
      boolean boolean0 = multiKey0.equals(multiKey1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Integer integer0 = new Integer(0);
      Integer integer1 = new Integer(0);
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integer0, integer1);
      multiKey0.toString();
      String string0 = null;
      MultiKey<String> multiKey1 = new MultiKey<String>((String) null, (String) null, (String) null, (String) null, (String) null);
      MultiKey<String> multiKey2 = null;
      MultiKey<MultiKey<Object>> multiKey3 = null;
//      try {
        multiKey3 = new MultiKey<MultiKey<Object>>((MultiKey<Object>[]) null, false);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // The array of keys must not be null
//         //
//         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
//      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Integer integer0 = new Integer((-1728));
      MultiKey<String> multiKey0 = new MultiKey<String>("wW&K%B9x2Add", "t5");
      MultiKey<MultiKey<String>> multiKey1 = new MultiKey<MultiKey<String>>(multiKey0, multiKey0, multiKey0, multiKey0, multiKey0);
      multiKey1.toString();
      boolean boolean0 = multiKey1.equals(multiKey0);
      assertFalse(boolean0);
      
      Integer integer1 = new Integer((-1728));
      Integer integer2 = new Integer(282);
      MultiKey<Integer> multiKey2 = new MultiKey<Integer>(integer0, (Integer) null, (Integer) null, integer1, integer2);
      String string0 = multiKey2.toString();
      assertEquals("MultiKey[-1728, null, null, -1728, 282]", string0);
      
      int int0 = multiKey2.size();
      int int1 = multiKey2.hashCode();
      assertFalse(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>((String) null, "", "", (String) null);
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      Integer[] integerArray0 = new Integer[0];
      MultiKey<Integer> multiKey1 = new MultiKey<Integer>(integerArray0);
      multiKey1.size();
      MultiKey<Object> multiKey2 = new MultiKey<Object>("", "", "ctB]Ua", "ctB]Ua", (Object) null);
      multiKey2.toString();
      multiKey2.toString();
      multiKey2.toString();
      multiKey1.equals("MultiKey[, , ctB]Ua, ctB]Ua, null]");
      MultiKey<MultiKey<Integer>> multiKey3 = new MultiKey<MultiKey<Integer>>(multiKey1, multiKey1, multiKey1, multiKey1);
      multiKey3.toString();
      multiKey3.getKeys();
      String string0 = multiKey0.getKey(0);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      MultiKey<Integer> multiKey0 = null;
//      try {
        multiKey0 = new MultiKey<Integer>((Integer[]) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // The array of keys must not be null
//         //
//         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
//      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("", "", "", "", "");
      multiKey0.toString();
      multiKey0.size();
      Object[] objectArray0 = new Object[0];
      MultiKey<Object> multiKey1 = new MultiKey<Object>(objectArray0);
      multiKey0.toString();
      multiKey1.size();
      MultiKey<Object> multiKey2 = new MultiKey<Object>(multiKey0, (Object) null);
      // Undeclared exception!
//      try { 
        multiKey2.getKey(5);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 5
//         //
//         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
//      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Integer integer0 = new Integer(1);
      Integer integer1 = new Integer(1);
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integer0, integer1);
      multiKey0.hashCode();
      MultiKey<String> multiKey1 = new MultiKey<String>("", "", "", "", "");
      MultiKey<MultiKey<String>> multiKey2 = new MultiKey<MultiKey<String>>(multiKey1, multiKey1, (MultiKey<String>) null, multiKey1);
      boolean boolean0 = multiKey2.equals((Object) null);
      assertFalse(boolean0);
      
      int int0 = multiKey0.size();
      String string0 = multiKey1.toString();
      assertEquals("MultiKey[, , , , ]", string0);
      
      int int1 = multiKey0.hashCode();
      assertFalse(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Integer integer0 = new Integer(0);
      Integer integer1 = new Integer(1817);
      Integer integer2 = new Integer(1817);
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integer0, integer0, integer0, integer1, integer2);
      multiKey0.toString();
      multiKey0.toString();
      Integer integer3 = new Integer(1817);
      MultiKey<Object> multiKey1 = new MultiKey<Object>(integer3, integer2);
      multiKey1.toString();
      // Undeclared exception!
//      try { 
        multiKey1.getKey((-982));
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // -982
//         //
//         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
//      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Integer integer0 = new Integer(0);
      String[] stringArray0 = new String[8];
      stringArray0[0] = "org.apache.commons.collections4.keyvalue.MultiKey";
      stringArray0[1] = "3H#";
      stringArray0[2] = "g5(Uw= fZe]6mhy";
      stringArray0[3] = "?yUMp@1(icst]d";
      stringArray0[4] = "";
      stringArray0[5] = "";
      stringArray0[6] = "t\"Ixm|Zdn&,";
      stringArray0[7] = "j;*?4o";
      MultiKey<String> multiKey0 = new MultiKey<String>(stringArray0, true);
      multiKey0.getKey(0);
      MultiKey<Object> multiKey1 = new MultiKey<Object>(integer0, "org.apache.commons.collections4.keyvalue.MultiKey");
      MultiKey<MultiKey<Object>> multiKey2 = new MultiKey<MultiKey<Object>>(multiKey1, multiKey1, multiKey1, multiKey1);
      // Undeclared exception!
//      try { 
        multiKey2.getKey(181);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 181
//         //
//         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
//      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("@D<0({J{s~?NKJ_.", "The array of keys must not be null", "");
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.equals("The array of keys must not be null");
      multiKey0.getKey(0);
      multiKey0.toString();
      MultiKey<Object> multiKey1 = new MultiKey<Object>("MultiKey[@D<0({J{s~?NKJ_., The array of keys must not be null, ]", "@D<0({J{s~?NKJ_.", "MultiKey[@D<0({J{s~?NKJ_., The array of keys must not be null, ]");
      multiKey1.toString();
      multiKey1.size();
      MultiKey<Object>[] multiKeyArray0 = (MultiKey<Object>[]) Array.newInstance(MultiKey.class, 9);
      multiKeyArray0[0] = multiKey1;
      multiKeyArray0[1] = multiKey1;
      multiKeyArray0[2] = multiKey1;
      MultiKey<Object> multiKey2 = new MultiKey<Object>((Object[]) multiKeyArray0, false);
      multiKeyArray0[3] = multiKey2;
      multiKeyArray0[4] = multiKey1;
      multiKeyArray0[5] = multiKey1;
      multiKeyArray0[6] = multiKey1;
      multiKeyArray0[7] = multiKey1;
      multiKeyArray0[8] = multiKey1;
      MultiKey<MultiKey<Object>> multiKey3 = new MultiKey<MultiKey<Object>>(multiKeyArray0);
      multiKey3.getKeys();
      int int0 = 2563;
      // Undeclared exception!
//      try { 
        multiKey1.getKey(2563);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 2563
//         //
//         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
//      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Object object0 = new Object();
      String string0 = "?7azM";
      MultiKey<String> multiKey0 = new MultiKey<String>("ts[lqg#Bxsc,7lfg4S", "?7azM");
      multiKey0.toString();
      multiKey0.toString();
      // Undeclared exception!
//      try { 
        multiKey0.getKey((-546));
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // -546
//         //
//         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
//      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      String[] stringArray0 = new String[0];
      MultiKey<String> multiKey0 = new MultiKey<String>(stringArray0);
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      MultiKey<Object> multiKey1 = new MultiKey<Object>((Object[]) stringArray0, true);
      multiKey1.toString();
      multiKey1.toString();
      multiKey1.toString();
      multiKey1.toString();
      // Undeclared exception!
//      try { 
        multiKey1.getKey((-1));
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // -1
//         //
//         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
//      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Object object0 = new Object();
      Object object1 = new Object();
      MultiKey<Object> multiKey0 = new MultiKey<Object>(object0, "5)!y/p(=+4  )", object1);
      MultiKey<Object>[] multiKeyArray0 = (MultiKey<Object>[]) Array.newInstance(MultiKey.class, 2);
      multiKeyArray0[0] = multiKey0;
      multiKeyArray0[1] = multiKey0;
      MultiKey<MultiKey<Object>> multiKey1 = new MultiKey<MultiKey<Object>>(multiKeyArray0, true);
      multiKey0.toString();
      multiKey1.toString();
      multiKey0.toString();
      multiKey1.size();
      String string0 = multiKey0.toString();
      multiKey0.getKeys();
      String[] stringArray0 = new String[6];
      stringArray0[0] = "MultiKey[java.lang.Object@2425dd1, 5)!y/p(=+4  ), java.lang.Object@cc95dd]";
      stringArray0[1] = "MultiKey[java.lang.Object@2425dd1, 5)!y/p(=+4  ), java.lang.Object@cc95dd]";
      stringArray0[2] = "MultiKey[java.lang.Object@2425dd1, 5)!y/p(=+4  ), java.lang.Object@cc95dd]";
      stringArray0[3] = "MultiKey[java.lang.Object@2425dd1, 5)!y/p(=+4  ), java.lang.Object@cc95dd]";
      stringArray0[4] = "MultiKey[MultiKey[java.lang.Object@2425dd1, 5)!y/p(=+4  ), java.lang.Object@cc95dd], MultiKey[java.lang.Object@2425dd1, 5)!y/p(=+4  ), java.lang.Object@cc95dd]]";
      stringArray0[5] = "MultiKey[java.lang.Object@2425dd1, 5)!y/p(=+4  ), java.lang.Object@cc95dd]";
      MultiKey<String> multiKey2 = new MultiKey<String>(stringArray0);
      String string1 = multiKey2.toString();
      assertFalse(string1.equals((Object)string0));
  }
}
