/*
 * This file was automatically generated by EvoSuite
 * Wed Oct 13 20:45:55 GMT 2021
 */

package org.apache.commons.collections4.keyvalue;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.lang.reflect.Array;
import org.apache.commons.collections4.keyvalue.MultiKey;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class MultiKey_ESTest extends MultiKey_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>((String) null, (String) null);
      boolean boolean0 = multiKey0.equals((Object) null);
      Integer[] integerArray0 = new Integer[0];
      String string0 = multiKey0.toString();
      assertEquals("MultiKey[null, null]", string0);
      
      MultiKey<Integer> multiKey1 = new MultiKey<Integer>(integerArray0, false);
      multiKey1.size();
      MultiKey<MultiKey<String>> multiKey2 = new MultiKey<MultiKey<String>>(multiKey0, multiKey0, multiKey0);
      Object object0 = multiKey2.getKey(0);
      boolean boolean1 = multiKey0.equals(object0);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      String[] stringArray0 = new String[0];
      MultiKey<String> multiKey0 = new MultiKey<String>(stringArray0, true);
      multiKey0.getKeys();
      // Undeclared exception!
//      try { 
        multiKey0.getKey((-170));
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // -170
//         //
//         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
//      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Integer integer0 = new Integer((-2002));
      Integer integer1 = new Integer((-2002));
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integer0, integer0, integer1);
      multiKey0.toString();
      Object object0 = multiKey0.getKey(0);
      MultiKey<Object> multiKey1 = new MultiKey<Object>(object0, object0);
      String[] stringArray0 = new String[0];
      MultiKey<String> multiKey2 = new MultiKey<String>(stringArray0);
      int int0 = multiKey2.size();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Integer integer0 = new Integer((-2002));
      Integer integer1 = new Integer((-2002));
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integer0, integer0, integer1);
      int int0 = 0;
      multiKey0.getKey(0);
      String string0 = null;
      MultiKey<String> multiKey1 = new MultiKey<String>((String) null, (String) null, (String) null, (String) null, (String) null);
      MultiKey<MultiKey<String>> multiKey2 = new MultiKey<MultiKey<String>>(multiKey1, multiKey1);
      MultiKey<String> multiKey3 = new MultiKey<String>((String) null, (String) null, (String) null, (String) null, (String) null);
      MultiKey<Object>[] multiKeyArray0 = (MultiKey<Object>[]) Array.newInstance(MultiKey.class, 8);
      boolean boolean0 = true;
      MultiKey<Object> multiKey4 = new MultiKey<Object>((Object[]) multiKeyArray0, true);
      multiKeyArray0[0] = multiKey4;
      Integer integer2 = new Integer(0);
      MultiKey<Object> multiKey5 = new MultiKey<Object>(multiKey4, (Object) null, integer2);
      multiKeyArray0[1] = multiKey5;
      MultiKey<String> multiKey6 = new MultiKey<String>((String) null, (String) null);
      multiKey6.getKey(0);
      MultiKey<Object> multiKey7 = new MultiKey<Object>((Object) null, multiKey5, (Object) null, multiKey4, (Object) null);
      multiKeyArray0[2] = multiKey7;
      MultiKey<String> multiKey8 = new MultiKey<String>("org.apache.commons.collections4.keyvalue.MultiKey", "tJf=k", "org.apache.commons.collections4.keyvalue.MultiKey", "tJf=k");
      // Undeclared exception!
//      try { 
        multiKey8.getKey((-2002));
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // -2002
//         //
//         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
//      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Integer[] integerArray0 = new Integer[4];
      int int0 = 0;
      Integer integer0 = new Integer(0);
      integerArray0[0] = integer0;
      Integer integer1 = new Integer(int0);
      integerArray0[1] = integer1;
      Integer integer2 = new Integer(int0);
      integerArray0[2] = integer2;
      Integer integer3 = new Integer(2544);
      integerArray0[3] = integer3;
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integerArray0);
      multiKey0.toString();
      multiKey0.toString();
      Integer[] integerArray1 = multiKey0.getKeys();
      MultiKey<Object> multiKey1 = new MultiKey<Object>(integerArray1);
      MultiKey<String> multiKey2 = new MultiKey<String>("MultiKey[0, 0, 0, 2544]", "MultiKey[0, 0, 0, 2544]");
      multiKey1.equals(multiKey2);
      Integer integer4 = new Integer(0);
      MultiKey<String> multiKey3 = new MultiKey<String>("", (String) null, (String) null);
      multiKey3.getKey(0);
      Integer integer5 = new Integer((int) integerArray0[3]);
      Object object0 = new Object();
      MultiKey<Object> multiKey4 = new MultiKey<Object>("MultiKey[0, 0, 0, 2544]", integer5, object0, integer2, "");
      MultiKey<Object> multiKey5 = new MultiKey<Object>(integer4, int0, multiKey0, "", multiKey4);
      String[] stringArray0 = new String[4];
      stringArray0[0] = "MultiKey[0, 0, 0, 2544]";
      stringArray0[1] = null;
      stringArray0[2] = null;
      stringArray0[3] = "dxqx8Au[=5#s&eOJ]tD";
      MultiKey<String> multiKey6 = new MultiKey<String>(stringArray0, false);
      // Undeclared exception!
//      try { 
        multiKey6.getKey(1102);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 1102
//         //
//         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
//      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      String string0 = null;
      Object object0 = new Object();
      MultiKey<Object> multiKey0 = new MultiKey<Object>((Object) null, object0);
      multiKey0.toString();
      multiKey0.hashCode();
      multiKey0.toString();
      MultiKey<MultiKey<Object>> multiKey1 = null;
//      try {
        multiKey1 = new MultiKey<MultiKey<Object>>((MultiKey<Object>[]) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // The array of keys must not be null
//         //
//         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
//      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("", "");
      multiKey0.toString();
      MultiKey<Object> multiKey1 = new MultiKey<Object>(multiKey0, "", multiKey0);
      multiKey0.toString();
      multiKey0.toString();
      multiKey1.toString();
      multiKey0.toString();
      MultiKey<Object> multiKey2 = new MultiKey<Object>("", (Object) null, (Object) null, "", multiKey0);
      multiKey2.toString();
      multiKey1.toString();
      multiKey2.toString();
      MultiKey<MultiKey<Object>> multiKey3 = new MultiKey<MultiKey<Object>>(multiKey1, multiKey1, multiKey1, multiKey1, multiKey2);
      int int0 = 3251;
      // Undeclared exception!
//      try { 
        multiKey0.getKey(3251);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 3251
//         //
//         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
//      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("j*ql", "j*ql", "j*ql", "j*ql");
      multiKey0.hashCode();
      MultiKey<String>[] multiKeyArray0 = (MultiKey<String>[]) Array.newInstance(MultiKey.class, 5);
      multiKeyArray0[0] = multiKey0;
      multiKeyArray0[1] = multiKey0;
      multiKeyArray0[2] = multiKey0;
      multiKeyArray0[3] = multiKey0;
      multiKey0.toString();
      multiKeyArray0[4] = multiKey0;
      MultiKey<MultiKey<String>> multiKey1 = new MultiKey<MultiKey<String>>(multiKeyArray0, true);
      multiKey0.toString();
      multiKey0.toString();
      MultiKey<String> multiKey2 = new MultiKey<String>("j*ql", "`4DV`S", "z3<79gG2tWa:^@", "z3<79gG2tWa:^@", "vOv>+j#~*:");
      multiKey0.toString();
      multiKey2.getKey(1);
      multiKey1.equals("`4DV`S");
      Integer[] integerArray0 = new Integer[4];
      Integer integer0 = new Integer(203);
      integerArray0[0] = integer0;
      Integer integer1 = new Integer(0);
      integerArray0[1] = integer1;
      Integer integer2 = new Integer((-435));
      integerArray0[2] = integer2;
      Integer integer3 = new Integer((-435));
      integerArray0[3] = integer3;
      MultiKey<Integer> multiKey3 = new MultiKey<Integer>(integerArray0);
      assertEquals(4, multiKey3.size());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      String[] stringArray0 = new String[1];
      stringArray0[0] = "";
      MultiKey<String> multiKey0 = new MultiKey<String>(stringArray0);
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.getKeys();
      String string0 = multiKey0.toString();
      assertEquals("MultiKey[]", string0);
      
      MultiKey<MultiKey<String>> multiKey1 = new MultiKey<MultiKey<String>>(multiKey0, multiKey0, multiKey0, multiKey0);
      Integer[] integerArray0 = new Integer[6];
      Integer integer0 = new Integer((-3284));
      integerArray0[0] = integer0;
      Integer integer1 = new Integer((-2228));
      integerArray0[1] = integer1;
      Integer integer2 = new Integer((int) integerArray0[1]);
      integerArray0[2] = integer2;
      Integer integer3 = new Integer((-2228));
      integerArray0[3] = integer3;
      Integer integer4 = new Integer(0);
      integerArray0[4] = integer4;
      Integer integer5 = new Integer(0);
      integerArray0[5] = integer5;
      MultiKey<Integer> multiKey2 = new MultiKey<Integer>(integerArray0);
      Object object0 = multiKey2.getKey(0);
      assertEquals((-3284), object0);
      
      boolean boolean0 = multiKey1.equals(object0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      MultiKey<MultiKey<Object>> multiKey0 = new MultiKey<MultiKey<Object>>((MultiKey<Object>) null, (MultiKey<Object>) null);
      multiKey0.getKeys();
      MultiKey<MultiKey<String>> multiKey1 = null;
//      try {
        multiKey1 = new MultiKey<MultiKey<String>>((MultiKey<String>[]) null, false);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // The array of keys must not be null
//         //
//         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
//      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Integer integer0 = new Integer((-1));
      int int0 = (-276);
      Integer integer1 = new Integer((-276));
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integer0, integer0, (Integer) null, integer1, (Integer) null);
      multiKey0.toString();
      multiKey0.toString();
      // Undeclared exception!
//      try { 
        multiKey0.getKey((-1));
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // -1
//         //
//         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
//      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      String[] stringArray0 = new String[6];
      stringArray0[0] = "";
      stringArray0[1] = "org.apache.commons.collections4.keyvalue.MultiKey";
      stringArray0[2] = "org.apache.commons.collections4.keyvalue.MultiKey";
      stringArray0[3] = "w";
      stringArray0[4] = "";
      stringArray0[5] = "9{MQ";
      MultiKey<String> multiKey0 = new MultiKey<String>(stringArray0, false);
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.equals("org.apache.commons.collections4.keyvalue.MultiKey");
      MultiKey<String>[] multiKeyArray0 = (MultiKey<String>[]) Array.newInstance(MultiKey.class, 5);
      multiKeyArray0[0] = multiKey0;
      multiKeyArray0[1] = multiKey0;
      MultiKey<String> multiKey1 = new MultiKey<String>("MultiKey[, org.apache.commons.collections4.keyvalue.MultiKey, org.apache.commons.collections4.keyvalue.MultiKey, w, , 9{MQ]", "The array of keys must not be null");
      multiKey1.toString();
      multiKeyArray0[2] = multiKey1;
      multiKeyArray0[3] = multiKey0;
      multiKeyArray0[4] = multiKey0;
      multiKey0.toString();
      MultiKey<MultiKey<String>> multiKey2 = new MultiKey<MultiKey<String>>(multiKeyArray0, false);
      multiKey2.size();
      String string0 = multiKey1.toString();
      assertEquals("MultiKey[MultiKey[, org.apache.commons.collections4.keyvalue.MultiKey, org.apache.commons.collections4.keyvalue.MultiKey, w, , 9{MQ], The array of keys must not be null]", string0);
      
      multiKey0.hashCode();
      Integer integer0 = new Integer(5);
      boolean boolean0 = multiKey0.equals(integer0);
      assertFalse(boolean0);
      
      Integer integer1 = new Integer(5);
      Integer integer2 = new Integer(5);
      MultiKey<Integer> multiKey3 = new MultiKey<Integer>(integer0, integer0, integer1, integer2);
      Integer[] integerArray0 = new Integer[2];
      integerArray0[0] = integer1;
      integerArray0[1] = integer1;
      MultiKey<Integer> multiKey4 = new MultiKey<Integer>(integerArray0);
      MultiKey<MultiKey<Integer>> multiKey5 = new MultiKey<MultiKey<Integer>>(multiKey3, multiKey3, multiKey3, multiKey3, multiKey4);
      multiKey5.hashCode();
      assertFalse(multiKey4.equals((Object)multiKey3));
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      MultiKey<Integer>[] multiKeyArray0 = (MultiKey<Integer>[]) Array.newInstance(MultiKey.class, 1);
      Integer integer0 = new Integer(452);
      Integer integer1 = new Integer(452);
      Integer integer2 = new Integer(0);
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integer0, integer0, integer1, integer2);
      multiKey0.toString();
      multiKeyArray0[0] = multiKey0;
      MultiKey<MultiKey<Integer>> multiKey1 = new MultiKey<MultiKey<Integer>>(multiKeyArray0, true);
      String[] stringArray0 = new String[2];
      stringArray0[0] = "MultiKey[452, 452, 452, 0]";
      stringArray0[1] = "MultiKey[452, 452, 452, 0]";
      MultiKey<String> multiKey2 = new MultiKey<String>(stringArray0, false);
      int int0 = (-260);
      // Undeclared exception!
//      try { 
        multiKey2.getKey((-260));
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // -260
//         //
//         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
//      }
  }
}
