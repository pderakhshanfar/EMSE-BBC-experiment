/*
 * This file was automatically generated by EvoSuite
 * Wed Oct 20 12:36:38 GMT 2021
 */

package org.apache.commons.collections4.keyvalue;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.collections4.keyvalue.MultiKey;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class MultiKey_ESTest extends MultiKey_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Integer integer0 = new Integer((-105));
      Integer integer1 = new Integer((-105));
      Integer integer2 = new Integer((-105));
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integer0, integer1, integer0, integer2);
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) "MultiKey[-105, -105, -105, -105]";
      MultiKey<Object> multiKey1 = new MultiKey<Object>(objectArray0);
      multiKey1.equals(multiKey1);
      Object[] objectArray1 = multiKey1.getKeys();
      Object[] objectArray2 = multiKey1.getKeys();
      assertNotSame(objectArray2, objectArray1);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("`\"Zn)J_u!&X3|lpj?Y", "`\"Zn)J_u!&X3|lpj?Y", "`\"Zn)J_u!&X3|lpj?Y", "`\"Zn)J_u!&X3|lpj?Y");
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) multiKey0;
      objectArray0[1] = (Object) multiKey0;
      objectArray0[2] = (Object) multiKey0;
      objectArray0[3] = (Object) multiKey0;
      objectArray0[4] = (Object) multiKey0;
      objectArray0[5] = (Object) "`\"Zn)J_u!&X3|lpj?Y";
      objectArray0[6] = (Object) "`\"Zn)J_u!&X3|lpj?Y";
      objectArray0[7] = (Object) multiKey0;
      objectArray0[8] = (Object) multiKey0;
      MultiKey<Object> multiKey1 = new MultiKey<Object>(objectArray0);
      multiKey1.size();
      MultiKey<Object> multiKey2 = new MultiKey<Object>(objectArray0);
      boolean boolean0 = multiKey1.equals(multiKey2);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      MultiKey<Object> multiKey0 = new MultiKey<Object>((Object) null, (Object) null);
      multiKey0.toString();
      Integer integer0 = new Integer((-708));
      Integer integer1 = new Integer(5);
      MultiKey<String> multiKey1 = new MultiKey<String>("", "MultiKey[null, null]", "");
      multiKey1.toString();
      Integer integer2 = new Integer(5);
      Object object0 = new Object();
      Object object1 = new Object();
      MultiKey<Object> multiKey2 = new MultiKey<Object>(object0, integer2, object1);
      Integer integer3 = new Integer((-1551));
      MultiKey<Object> multiKey3 = new MultiKey<Object>("MultiKey[, MultiKey[null, null], ]", integer3);
      multiKey3.toString();
      multiKey3.toString();
      multiKey2.equals("MultiKey[MultiKey[, MultiKey[null, null], ], -1551]");
      Object[] objectArray0 = new Object[0];
      MultiKey<Object> multiKey4 = new MultiKey<Object>(objectArray0, false);
      multiKey4.getKeys();
      Integer[] integerArray0 = new Integer[6];
      integerArray0[0] = integer1;
      integerArray0[1] = integer3;
      integerArray0[2] = integer1;
      integerArray0[3] = integer0;
      integerArray0[4] = integer0;
      Integer integer4 = new Integer(4455);
      integerArray0[5] = integer4;
      MultiKey<Integer> multiKey5 = new MultiKey<Integer>(integerArray0);
      Integer[] integerArray1 = multiKey5.getKeys();
      assertNotSame(integerArray0, integerArray1);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Integer integer0 = new Integer(1);
      MultiKey<Object> multiKey0 = new MultiKey<Object>(integer0, integer0);
      multiKey0.size();
      Integer[] integerArray0 = new Integer[0];
      MultiKey<Integer> multiKey1 = new MultiKey<Integer>(integerArray0, false);
      multiKey1.toString();
      multiKey0.toString();
      multiKey1.size();
      multiKey0.size();
      MultiKey<String> multiKey2 = new MultiKey<String>("", "MultiKey[1, 1]");
      // Undeclared exception!
//      try { 
        multiKey2.getKey(2);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 2
//         //
//         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
//      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Integer integer0 = new Integer(3569);
      MultiKey<Object> multiKey0 = new MultiKey<Object>((Object) null, (Object) null, (Object) null, integer0, (Object) null);
      multiKey0.toString();
      Integer integer1 = new Integer(629);
      Integer integer2 = new Integer(3);
      String string0 = multiKey0.toString();
      assertEquals("MultiKey[null, null, null, 3569, null]", string0);
      
      Integer integer3 = new Integer(629);
      Integer[] integerArray0 = new Integer[1];
      integerArray0[0] = integer1;
      MultiKey<Integer> multiKey1 = new MultiKey<Integer>(integerArray0);
      Integer integer4 = new Integer(8);
      multiKey1.equals(integer4);
      Object[] objectArray0 = multiKey0.getKeys();
      MultiKey<Integer> multiKey2 = new MultiKey<Integer>(integerArray0);
      MultiKey<Object> multiKey3 = new MultiKey<Object>(objectArray0);
      multiKey3.getKey(0);
      MultiKey<String> multiKey4 = new MultiKey<String>("", "The array of keys must not be null", "The array of keys must not be null");
      boolean boolean0 = multiKey4.equals((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      int int0 = 3569;
      Integer integer0 = new Integer(3569);
      MultiKey<Object> multiKey0 = new MultiKey<Object>((Object) null, (Object) null, (Object) null, integer0, (Object) null);
      Integer integer1 = new Integer(3569);
      String[] stringArray0 = null;
      MultiKey<String> multiKey1 = null;
//      try {
        multiKey1 = new MultiKey<String>((String[]) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // The array of keys must not be null
//         //
//         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
//      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Integer integer0 = new Integer((-105));
      Integer integer1 = new Integer((-105));
      Integer integer2 = new Integer((-105));
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integer0, integer1, integer0, integer2);
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) "MultiKey[-105, -105, -105, -105]";
      MultiKey<Object> multiKey1 = new MultiKey<Object>(objectArray0);
      MultiKey<Object> multiKey2 = new MultiKey<Object>(objectArray0, false);
      multiKey1.equals(multiKey2);
      Object[] objectArray1 = multiKey1.getKeys();
      assertNotSame(objectArray0, objectArray1);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      String[] stringArray0 = new String[1];
      stringArray0[0] = "";
      MultiKey<String> multiKey0 = new MultiKey<String>(stringArray0);
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.getKeys();
      int int0 = (-8);
      Integer integer0 = new Integer((-8));
      MultiKey<Object> multiKey1 = new MultiKey<Object>(integer0, integer0);
      multiKey1.toString();
      multiKey1.equals("");
      multiKey0.toString();
      MultiKey<Integer> multiKey2 = null;
//      try {
        multiKey2 = new MultiKey<Integer>((Integer[]) null, false);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // The array of keys must not be null
//         //
//         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
//      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Integer integer0 = new Integer(1681);
      Integer integer1 = new Integer((-1));
      Integer integer2 = new Integer((-1));
      Integer integer3 = new Integer(0);
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integer0, integer1, integer2, integer3);
      multiKey0.hashCode();
      String[] stringArray0 = new String[9];
      stringArray0[0] = " l]b!2z*JDjx*";
      stringArray0[1] = "!AD~J<RJ/MfCFE[A";
      stringArray0[2] = "";
      stringArray0[3] = "::^0u|R`'s2JYYrO;Q";
      stringArray0[4] = "4tCQ&Kf<u*Z+b0GZq!`";
      stringArray0[5] = "";
      stringArray0[6] = "";
      stringArray0[7] = "org.apache.commons.collections4.keyvalue.MultiKey";
      stringArray0[8] = "<GGyQ_x]H(3";
      MultiKey<String> multiKey1 = new MultiKey<String>(stringArray0);
      int int0 = multiKey1.size();
      assertEquals(9, int0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Integer integer0 = new Integer(0);
      Object object0 = new Object();
      MultiKey<Object> multiKey0 = new MultiKey<Object>(integer0, object0, integer0);
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.getKeys();
      Integer[] integerArray0 = new Integer[3];
      integerArray0[0] = integer0;
      Integer integer1 = new Integer(0);
      multiKey0.toString();
      integerArray0[1] = integer1;
      integerArray0[2] = integer0;
      multiKey0.toString();
      multiKey0.toString();
      MultiKey<Integer> multiKey1 = new MultiKey<Integer>(integerArray0, false);
      multiKey1.toString();
      multiKey1.toString();
      multiKey1.toString();
      String string0 = multiKey1.toString();
      assertEquals("MultiKey[0, 0, 0]", string0);
      
      int int0 = multiKey1.size();
      multiKey0.hashCode();
      multiKey0.hashCode();
      multiKey0.equals("MultiKey[0, java.lang.Object@88a2fc, 0]");
      boolean boolean0 = multiKey0.equals(multiKey1);
      assertFalse(boolean0);
      
      boolean boolean1 = multiKey1.equals("MultiKey[0, java.lang.Object@88a2fc, 0]");
      assertFalse(boolean1);
      
      Integer[] integerArray1 = multiKey1.getKeys();
      int int1 = multiKey0.hashCode();
      assertFalse(int1 == int0);
      
      multiKey0.getKeys();
      multiKey0.getKey(0);
      MultiKey<Object> multiKey2 = new MultiKey<Object>((Object[]) integerArray1, false);
      MultiKey<MultiKey<Object>> multiKey3 = new MultiKey<MultiKey<Object>>(multiKey0, multiKey0, multiKey2, multiKey0);
      multiKey3.getKeys();
      assertFalse(multiKey0.equals((Object)multiKey2));
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Object object0 = new Object();
      Integer integer0 = new Integer(0);
      Integer integer1 = new Integer(0);
      Integer integer2 = new Integer(0);
      Integer integer3 = new Integer(0);
      Integer integer4 = new Integer(0);
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integer1, integer1, integer2, integer3, integer4);
      Integer integer5 = new Integer(0);
      MultiKey<Object> multiKey1 = new MultiKey<Object>(multiKey0, integer4, integer5, integer5);
      MultiKey<Object> multiKey2 = new MultiKey<Object>(object0, integer0, multiKey1, "");
      multiKey2.toString();
      String[] stringArray0 = new String[6];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "";
      stringArray0[3] = "";
      stringArray0[4] = "";
      stringArray0[5] = "";
      MultiKey<String> multiKey3 = new MultiKey<String>(stringArray0, true);
      MultiKey<MultiKey<String>> multiKey4 = new MultiKey<MultiKey<String>>(multiKey3, multiKey3);
      int int0 = multiKey4.size();
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Object[] objectArray0 = new Object[8];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      Integer integer0 = new Integer((-2255));
      Integer integer1 = new Integer((-2255));
      Integer integer2 = new Integer((-2255));
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integer0, integer0, integer1, integer2);
      Integer integer3 = multiKey0.getKey(0);
      objectArray0[2] = (Object) integer3;
      MultiKey<Object> multiKey1 = new MultiKey<Object>(multiKey0, integer3);
      int int0 = 0;
      Object object2 = multiKey1.getKey(0);
      objectArray0[3] = object2;
      // Undeclared exception!
//      try { 
        multiKey1.getKey((-2255));
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // -2255
//         //
//         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
//      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("ot|?!({o;c1`oMx", "ot|?!({o;c1`oMx", "ot|?!({o;c1`oMx");
      multiKey0.toString();
      multiKey0.toString();
      MultiKey<MultiKey<Object>> multiKey1 = new MultiKey<MultiKey<Object>>((MultiKey<Object>) null, (MultiKey<Object>) null);
      multiKey1.toString();
      int int0 = (-605);
      // Undeclared exception!
//      try { 
        multiKey1.getKey((-605));
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // -605
//         //
//         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
//      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      String string0 = "";
      String string1 = "Y2@rTBWpz7J";
      MultiKey<String> multiKey0 = new MultiKey<String>("8+aj", "Y2@rTBWpz7J", "");
      int int0 = 694;
      // Undeclared exception!
//      try { 
        multiKey0.getKey(694);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 694
//         //
//         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
//      }
  }
}
