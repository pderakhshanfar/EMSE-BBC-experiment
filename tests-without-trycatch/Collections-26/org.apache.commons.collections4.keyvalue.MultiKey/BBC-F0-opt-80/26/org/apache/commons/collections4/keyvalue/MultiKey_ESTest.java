/*
 * This file was automatically generated by EvoSuite
 * Fri Oct 22 17:43:27 GMT 2021
 */

package org.apache.commons.collections4.keyvalue;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.lang.reflect.Array;
import org.apache.commons.collections4.keyvalue.MultiKey;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class MultiKey_ESTest extends MultiKey_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      MultiKey<Object> multiKey0 = new MultiKey<Object>("The array ob kIys must not be nuDl", "The array ob kIys must not be nuDl");
      MultiKey<MultiKey<Object>> multiKey1 = new MultiKey<MultiKey<Object>>(multiKey0, multiKey0, multiKey0, multiKey0, multiKey0);
      Object object0 = multiKey1.getKey(0);
      boolean boolean0 = multiKey0.equals(object0);
      MultiKey<String> multiKey2 = new MultiKey<String>("The array ob kIys must not be nuDl", "The array ob kIys must not be nuDl", (String) null);
      boolean boolean1 = multiKey2.equals("The array ob kIys must not be nuDl");
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("v9]vPQ2?YfMP,Uv", "v9]vPQ2?YfMP,Uv", (String) null, "");
      MultiKey<String> multiKey1 = new MultiKey<String>((String) null, "v9]vPQ2?YfMP,Uv", "");
      Object[] objectArray0 = new Object[0];
      MultiKey<Object> multiKey2 = new MultiKey<Object>(objectArray0, true);
      multiKey2.size();
      MultiKey<Object> multiKey3 = new MultiKey<Object>(objectArray0, true);
      boolean boolean0 = multiKey2.equals(multiKey3);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      Object object0 = new Object();
      Integer integer0 = new Integer(597);
      MultiKey<Object> multiKey0 = new MultiKey<Object>(object0, "The array of keys must not be null", object0, integer0);
      multiKey0.getKeys();
      int int0 = multiKey0.size();
      MultiKey<String> multiKey1 = new MultiKey<String>("", "", "", "The array of keys must not be null", "");
      multiKey1.getKey(0);
      int int1 = multiKey1.hashCode();
      //  // Unstable assertion: assertTrue(int1 == int0);
      
      multiKey1.toString();
      Integer integer1 = new Integer((-4317));
      MultiKey<Integer> multiKey2 = new MultiKey<Integer>(integer0, integer1);
      multiKey2.toString();
      String string0 = multiKey1.toString();
      //  // Unstable assertion: assertEquals("MultiKey[, , , The array of keys must not be null, ]", string0);
      
      Integer integer2 = new Integer(4);
      Integer[] integerArray0 = new Integer[4];
      integerArray0[0] = integer1;
      Integer integer3 = new Integer((-1276));
      integerArray0[1] = integer3;
      integerArray0[2] = integer2;
      integerArray0[3] = integer2;
      MultiKey<Integer> multiKey3 = new MultiKey<Integer>(integerArray0);
      boolean boolean0 = multiKey3.equals(multiKey2);
      //  // Unstable assertion: assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>((String) null, "(QM^");
      multiKey0.toString();
      multiKey0.equals("(QM^");
      Integer integer0 = new Integer(2);
      Integer integer1 = new Integer((-1));
      Integer integer2 = new Integer(2);
      MultiKey<Object> multiKey1 = new MultiKey<Object>(integer1, multiKey0, integer2);
      multiKey1.equals((Object) null);
      String[] stringArray0 = new String[0];
      MultiKey<String> multiKey2 = new MultiKey<String>(stringArray0);
      multiKey2.toString();
      multiKey2.size();
      multiKey1.hashCode();
      Integer integer3 = new Integer(0);
      Integer integer4 = new Integer(2);
      MultiKey<Integer> multiKey3 = new MultiKey<Integer>(integer3, integer1, integer4);
      multiKey3.toString();
      MultiKey<MultiKey<Object>> multiKey4 = new MultiKey<MultiKey<Object>>(multiKey1, multiKey1, multiKey1);
      MultiKey<Object> multiKey5 = multiKey4.getKey(2);
      multiKey5.toString();
      // Undeclared exception!
//      try { 
        multiKey1.getKey((-272));
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // -272
//         //
//         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
//      }
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      Object object0 = null;
      Object object1 = null;
      MultiKey<Integer> multiKey0 = null;
//      try {
        multiKey0 = new MultiKey<Integer>((Integer[]) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // The array of keys must not be null
//         //
//         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
//      }
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>((String) null, "Ng%", "N", "L,XT**Tf#ONs{]|#&{");
      Integer integer0 = new Integer(578);
      Integer[] integerArray0 = new Integer[8];
      integerArray0[0] = integer0;
      integerArray0[1] = integer0;
      integerArray0[2] = integer0;
      integerArray0[3] = integer0;
      integerArray0[4] = integer0;
      integerArray0[5] = integer0;
      integerArray0[6] = integer0;
      integerArray0[7] = integer0;
      MultiKey<Integer> multiKey1 = new MultiKey<Integer>(integerArray0, true);
      MultiKey<Object> multiKey2 = new MultiKey<Object>(integer0, multiKey1, integerArray0[3]);
      Object[] objectArray0 = multiKey2.getKeys();
      assertEquals(3, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      Integer integer0 = new Integer(1);
      Integer integer1 = new Integer(2379);
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integer0, integer0, integer1, integer1);
      multiKey0.getKey(0);
      String[] stringArray0 = new String[9];
      stringArray0[0] = "";
      stringArray0[1] = "#)X+eX4l0^NgU^{1G'";
      stringArray0[2] = "";
      stringArray0[3] = "*zK-hh!<lU+`]ek?";
      stringArray0[4] = "=zjm^Afof,HD8fE";
      stringArray0[5] = "";
      stringArray0[6] = "v1zCXVT)0Ul$|x)^Y?";
      stringArray0[7] = "t#q|Z:Yd1mE+R%um";
      stringArray0[8] = "org.apache.commons.collections4.keyvalue.MultiKey";
      MultiKey<String> multiKey1 = new MultiKey<String>(stringArray0);
      String string0 = multiKey1.getKey(1);
      assertEquals("#)X+eX4l0^NgU^{1G'", string0);
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      MultiKey<String>[] multiKeyArray0 = (MultiKey<String>[]) Array.newInstance(MultiKey.class, 4);
      String[] stringArray0 = new String[0];
      MultiKey<String> multiKey0 = new MultiKey<String>(stringArray0);
      multiKeyArray0[0] = multiKey0;
      multiKey0.toString();
      multiKey0.toString();
      MultiKey<String> multiKey1 = new MultiKey<String>("", "", "", "", "");
      multiKeyArray0[1] = multiKey1;
      MultiKey<String> multiKey2 = new MultiKey<String>("7|X", "");
      multiKeyArray0[2] = multiKey2;
      MultiKey<String> multiKey3 = new MultiKey<String>("", "");
      multiKeyArray0[3] = multiKey3;
      multiKey0.toString();
      multiKey1.toString();
      MultiKey<MultiKey<String>> multiKey4 = new MultiKey<MultiKey<String>>(multiKeyArray0, false);
      MultiKey<Object> multiKey5 = new MultiKey<Object>(multiKey4, "7|X", multiKey1);
      multiKey1.toString();
      multiKey5.hashCode();
      int int0 = 2821;
      // Undeclared exception!
//      try { 
        multiKey5.getKey(2821);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 2821
//         //
//         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
//      }
  }

  @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      Object[] objectArray0 = new Object[1];
      Object object0 = new Object();
      objectArray0[0] = object0;
      MultiKey<Object> multiKey0 = new MultiKey<Object>(objectArray0, true);
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.size();
      MultiKey<String> multiKey1 = new MultiKey<String>("P}B#", "MultiKey[java.lang.Object@3a702d66]");
      multiKey1.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey1.toString();
      multiKey0.toString();
      multiKey1.toString();
      multiKey1.toString();
      multiKey0.toString();
      multiKey1.toString();
      multiKey1.size();
      multiKey1.toString();
      MultiKey<Integer> multiKey2 = null;
//      try {
        multiKey2 = new MultiKey<Integer>((Integer[]) null, true);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // The array of keys must not be null
//         //
//         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
//      }
  }

  @Test(timeout = 4000)
  public void test9()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      MultiKey<Object> multiKey0 = new MultiKey<Object>(objectArray0);
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.getKeys();
      Object object0 = new Object();
      multiKey0.equals(object0);
      Integer[] integerArray0 = new Integer[9];
      Integer integer0 = new Integer((-2461));
      integerArray0[0] = integer0;
      int int0 = 1;
      Integer integer1 = new Integer(1);
      integerArray0[1] = integer1;
      Integer integer2 = new Integer(1);
      integerArray0[2] = integer2;
      Integer integer3 = new Integer(1310);
      integerArray0[3] = integer3;
      Integer integer4 = new Integer((int) integerArray0[0]);
      integerArray0[4] = integer4;
      Integer integer5 = new Integer((-2485));
      integerArray0[5] = integer5;
      Integer integer6 = new Integer((int) integerArray0[0]);
      integerArray0[6] = integer6;
      Integer integer7 = new Integer(0);
      integerArray0[7] = integer7;
      Integer integer8 = new Integer(1310);
      integerArray0[8] = integer8;
      MultiKey<Integer> multiKey1 = new MultiKey<Integer>(integerArray0, true);
      MultiKey<Object> multiKey2 = new MultiKey<Object>(objectArray0, true);
      // Undeclared exception!
//      try { 
        multiKey2.getKey(int0);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 1
//         //
//         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
//      }
  }
}
