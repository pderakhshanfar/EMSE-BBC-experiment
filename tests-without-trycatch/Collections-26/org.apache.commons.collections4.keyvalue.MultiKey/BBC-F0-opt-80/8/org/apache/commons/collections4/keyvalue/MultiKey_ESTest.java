/*
 * This file was automatically generated by EvoSuite
 * Wed Oct 13 20:50:07 GMT 2021
 */

package org.apache.commons.collections4.keyvalue;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.lang.reflect.Array;
import org.apache.commons.collections4.keyvalue.MultiKey;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class MultiKey_ESTest extends MultiKey_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("", "", "");
      MultiKey<MultiKey<String>> multiKey1 = new MultiKey<MultiKey<String>>(multiKey0, multiKey0, multiKey0, multiKey0, multiKey0);
      Object object0 = multiKey1.getKey(2);
      boolean boolean0 = multiKey0.equals(object0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Object object0 = new Object();
      Integer[] integerArray0 = new Integer[3];
      Integer integer0 = new Integer(10);
      integerArray0[0] = integer0;
      int int0 = 21;
      Integer integer1 = new Integer(21);
      integerArray0[1] = integer1;
      Integer integer2 = new Integer(int0);
      integerArray0[2] = integer2;
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integerArray0);
      multiKey0.toString();
      MultiKey<Object> multiKey1 = new MultiKey<Object>(integerArray0);
      multiKey0.equals(multiKey1);
      String[] stringArray0 = new String[9];
      stringArray0[0] = "MultiKey[10, 21, 21]";
      stringArray0[1] = "MultiKey[10, 21, 21]";
      stringArray0[2] = "MultiKey[10, 21, 21]";
      stringArray0[3] = "MultiKey[10, 21, 21]";
      stringArray0[4] = "MultiKey[10, 21, 21]";
      stringArray0[5] = "MultiKey[10, 21, 21]";
      stringArray0[6] = "MultiKey[10, 21, 21]";
      stringArray0[7] = "MultiKey[10, 21, 21]";
      stringArray0[8] = "MultiKey[10, 21, 21]";
      MultiKey<String> multiKey2 = new MultiKey<String>(stringArray0);
      multiKey2.hashCode();
      int int1 = multiKey1.size();
      assertEquals(3, int1);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Integer integer0 = new Integer(0);
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>((Integer) null, integer0, integer0, integer0);
      multiKey0.toString();
      Object[] objectArray0 = new Object[0];
      MultiKey<Object> multiKey1 = new MultiKey<Object>(objectArray0);
      multiKey1.toString();
      multiKey1.toString();
      multiKey1.getKeys();
      String[] stringArray0 = new String[5];
      stringArray0[0] = "MultiKey[]";
      stringArray0[1] = "MultiKey[]";
      stringArray0[2] = "MultiKey[]";
      stringArray0[3] = "MultiKey[]";
      multiKey1.toString();
      stringArray0[4] = "MultiKey[]";
      MultiKey<String> multiKey2 = new MultiKey<String>(stringArray0);
      multiKey2.size();
      multiKey1.getKeys();
      multiKey1.size();
      // Undeclared exception!
//      try { 
        multiKey2.getKey(932);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 932
//         //
//         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
//      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      MultiKey<Object> multiKey0 = new MultiKey<Object>("6", (Object) null);
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      Object object0 = new Object();
      multiKey0.equals(object0);
      multiKey0.toString();
      Object[] objectArray0 = null;
      boolean boolean0 = false;
      MultiKey<Object> multiKey1 = null;
//      try {
        multiKey1 = new MultiKey<Object>((Object[]) null, false);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // The array of keys must not be null
//         //
//         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
//      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Integer integer0 = new Integer(1);
      Integer integer1 = new Integer(1);
      MultiKey<Object> multiKey0 = new MultiKey<Object>(integer0, (Object) null, integer1);
      multiKey0.toString();
      MultiKey<MultiKey<Object>> multiKey1 = new MultiKey<MultiKey<Object>>(multiKey0, multiKey0, (MultiKey<Object>) null, multiKey0, multiKey0);
      multiKey1.toString();
      multiKey1.toString();
      multiKey0.toString();
      Object object0 = multiKey0.getKey(1);
      assertNull(object0);
      
      int int0 = multiKey0.size();
      multiKey0.toString();
      int int1 = multiKey0.hashCode();
      assertTrue(int1 == int0);
      
      Integer integer2 = new Integer(1);
      MultiKey<Integer> multiKey2 = new MultiKey<Integer>(integer1, integer2);
      String string0 = multiKey2.toString();
      assertEquals("MultiKey[1, 1]", string0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("nyi7b}xm}mr1", "nyi7b}xm}mr1", "I6&E#bts~l!A,Nxx", "nyi7b}xm}mr1", "");
      multiKey0.toString();
      String string0 = multiKey0.getKey(3);
      assertEquals("nyi7b}xm}mr1", string0);
      
      multiKey0.toString();
      int int0 = multiKey0.size();
      Integer integer0 = new Integer((-497));
      MultiKey<Integer> multiKey1 = new MultiKey<Integer>(integer0, (Integer) null);
      multiKey1.toString();
      multiKey1.toString();
      multiKey1.toString();
      multiKey1.toString();
      multiKey0.hashCode();
      MultiKey<MultiKey<String>> multiKey2 = new MultiKey<MultiKey<String>>(multiKey0, multiKey0, multiKey0);
      multiKey2.getKeys();
      multiKey2.getKey(0);
      MultiKey<Object> multiKey3 = new MultiKey<Object>((Object) null, (Object) null, "I6&E#bts~l!A,Nxx", "MultiKey[nyi7b}xm}mr1, nyi7b}xm}mr1, I6&E#bts~l!A,Nxx, nyi7b}xm}mr1, ]");
      multiKey3.toString();
      multiKey3.hashCode();
      String string1 = multiKey0.toString();
      assertEquals("MultiKey[nyi7b}xm}mr1, nyi7b}xm}mr1, I6&E#bts~l!A,Nxx, nyi7b}xm}mr1, ]", string1);
      
      Integer[] integerArray0 = new Integer[7];
      integerArray0[0] = integer0;
      integerArray0[1] = integer0;
      integerArray0[2] = null;
      integerArray0[3] = null;
      integerArray0[4] = null;
      integerArray0[5] = integer0;
      integerArray0[6] = null;
      MultiKey<Integer> multiKey4 = new MultiKey<Integer>(integerArray0);
      boolean boolean0 = multiKey1.equals(multiKey4);
      assertFalse(boolean0);
      
      int int1 = multiKey0.hashCode();
      assertFalse(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("", "@bm(;");
      MultiKey<Object> multiKey1 = new MultiKey<Object>("", "", multiKey0);
      multiKey0.toString();
      multiKey1.toString();
      multiKey1.toString();
      multiKey1.toString();
      Object[] objectArray0 = multiKey1.getKeys();
      multiKey1.size();
      MultiKey<Object>[] multiKeyArray0 = (MultiKey<Object>[]) Array.newInstance(MultiKey.class, 5);
      multiKeyArray0[0] = multiKey1;
      MultiKey<Object> multiKey2 = new MultiKey<Object>(multiKeyArray0);
      multiKeyArray0[1] = multiKey2;
      multiKeyArray0[2] = multiKey1;
      String[] stringArray0 = new String[9];
      stringArray0[0] = "";
      stringArray0[1] = "MultiKey[, , MultiKey[, @bm(;]]";
      stringArray0[2] = "6";
      stringArray0[3] = "@bm(;";
      stringArray0[4] = "@bm(;";
      stringArray0[5] = "MultiKey[, , MultiKey[, @bm(;]]";
      stringArray0[6] = "MultiKey[, , MultiKey[, @bm(;]]";
      stringArray0[7] = "";
      stringArray0[8] = "MultiKey[, @bm(;]";
      MultiKey<String> multiKey3 = new MultiKey<String>(stringArray0);
      MultiKey<Object> multiKey4 = new MultiKey<Object>(objectArray0, true);
      Integer integer0 = new Integer(559);
      MultiKey<Object> multiKey5 = new MultiKey<Object>(multiKey3, multiKey4, integer0);
      multiKeyArray0[3] = multiKey5;
      multiKeyArray0[4] = multiKey1;
      MultiKey<MultiKey<Object>> multiKey6 = new MultiKey<MultiKey<Object>>(multiKeyArray0, true);
      String string0 = multiKey6.toString();
      assertEquals("MultiKey[MultiKey[, , MultiKey[, @bm(;]], MultiKey[MultiKey[, , MultiKey[, @bm(;]], null, null, null, null], MultiKey[, , MultiKey[, @bm(;]], MultiKey[MultiKey[, MultiKey[, , MultiKey[, @bm(;]], 6, @bm(;, @bm(;, MultiKey[, , MultiKey[, @bm(;]], MultiKey[, , MultiKey[, @bm(;]], , MultiKey[, @bm(;]], MultiKey[, , MultiKey[, @bm(;]], 559], MultiKey[, , MultiKey[, @bm(;]]]", string0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Object object0 = new Object();
      Object object1 = null;
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = null;
      objectArray0[1] = object0;
      MultiKey<Object> multiKey0 = new MultiKey<Object>(objectArray0);
      int int0 = 955;
      // Undeclared exception!
//      try { 
        multiKey0.getKey(955);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 955
//         //
//         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
//      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("Jv.6", "l:A&");
      MultiKey<String> multiKey1 = null;
//      try {
        multiKey1 = new MultiKey<String>((String[]) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // The array of keys must not be null
//         //
//         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
//      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Object[] objectArray0 = new Object[9];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      String[] stringArray0 = new String[5];
      stringArray0[0] = "";
      stringArray0[1] = "|vJ_J";
      stringArray0[2] = "qeat!ySw_q@nBa'#";
      stringArray0[3] = "";
      stringArray0[4] = "a>+K.JW.R";
      MultiKey<String> multiKey0 = new MultiKey<String>(stringArray0);
      int int0 = 1;
      multiKey0.getKey(1);
      objectArray0[2] = (Object) "|vJ_J";
      Object object2 = new Object();
      objectArray0[3] = object2;
      Object object3 = new Object();
      objectArray0[4] = object3;
      Integer integer0 = new Integer(1);
      Integer integer1 = new Integer(1151);
      Integer integer2 = new Integer(1151);
      Integer integer3 = new Integer(1);
      MultiKey<Integer> multiKey1 = new MultiKey<Integer>(integer0, integer0, integer1, integer2, integer3);
      Integer integer4 = multiKey1.getKey(0);
      objectArray0[5] = (Object) integer4;
      // Undeclared exception!
//      try { 
        multiKey1.getKey((-1313));
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // -1313
//         //
//         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
//      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("zpzTD!B_Jnp)-G", "zpzTD!B_Jnp)-G", "");
      multiKey0.toString();
      multiKey0.size();
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) "MultiKey[zpzTD!B_Jnp)-G, zpzTD!B_Jnp)-G, ]";
      objectArray0[1] = (Object) multiKey0;
      objectArray0[2] = (Object) "zpzTD!B_Jnp)-G";
      objectArray0[3] = (Object) "";
      objectArray0[4] = (Object) "";
      MultiKey<Object> multiKey1 = new MultiKey<Object>(objectArray0);
      multiKey1.size();
      String string0 = multiKey0.toString();
      assertEquals("MultiKey[zpzTD!B_Jnp)-G, zpzTD!B_Jnp)-G, ]", string0);
      
      boolean boolean0 = multiKey0.equals((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Integer[] integerArray0 = new Integer[9];
      int int0 = 0;
      Integer integer0 = new Integer(0);
      integerArray0[0] = integer0;
      Integer integer1 = new Integer(5);
      integerArray0[1] = integer1;
      Integer integer2 = new Integer(int0);
      integerArray0[2] = integer2;
      Integer integer3 = new Integer(2729);
      integerArray0[3] = integer3;
      Integer integer4 = new Integer(0);
      integerArray0[4] = integer4;
      Integer integer5 = new Integer(int0);
      integerArray0[5] = integer5;
      Integer integer6 = new Integer((-4311));
      integerArray0[6] = integer6;
      Integer integer7 = new Integer(0);
      integerArray0[7] = integer7;
      Integer integer8 = new Integer(0);
      integerArray0[8] = integer8;
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integerArray0);
      Object object0 = new Object();
      MultiKey<String> multiKey1 = new MultiKey<String>("", "");
      Object object1 = multiKey1.getKey(0);
      MultiKey<Object> multiKey2 = new MultiKey<Object>(integer0, object0, "", integer0);
      multiKey2.hashCode();
      String string0 = multiKey2.toString();
      assertFalse(string0.equals((Object)object1));
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Integer[] integerArray0 = new Integer[7];
      Integer integer0 = new Integer((-910));
      integerArray0[0] = integer0;
      Integer integer1 = new Integer((int) integerArray0[0]);
      integerArray0[1] = integer1;
      int int0 = (-1);
      Integer integer2 = new Integer((-1));
      integerArray0[2] = integer2;
      Integer integer3 = new Integer(1783);
      integerArray0[3] = integer3;
      Integer integer4 = new Integer((int) integerArray0[1]);
      integerArray0[4] = integer4;
      Integer integer5 = new Integer(int0);
      integerArray0[5] = integer5;
      Integer integer6 = new Integer((-629));
      integerArray0[6] = integer6;
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integerArray0, false);
      multiKey0.toString();
      MultiKey<String> multiKey1 = new MultiKey<String>("", "", "oR78-{AF)y*:HF.%*[");
      multiKey1.toString();
      multiKey1.toString();
      multiKey1.size();
      multiKey0.getKey(2);
      Integer integer7 = new Integer(0);
      Object object0 = new Object();
      MultiKey<Object> multiKey2 = new MultiKey<Object>(integer7, object0);
      int int1 = multiKey2.size();
      assertEquals(2, int1);
  }
}
