/*
 * This file was automatically generated by EvoSuite
 * Wed Oct 20 12:39:33 GMT 2021
 */

package org.apache.commons.collections4.keyvalue;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.collections4.keyvalue.MultiKey;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class MultiKey_ESTest extends MultiKey_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Integer integer0 = new Integer(0);
      Integer integer1 = new Integer(0);
      Object object0 = new Object();
      MultiKey<Object> multiKey0 = new MultiKey<Object>(integer0, object0);
      MultiKey<Object> multiKey1 = new MultiKey<Object>(multiKey0, integer0, "Tw18_/}", (Object) null);
      multiKey1.toString();
      Object object1 = multiKey1.getKey(0);
      MultiKey<Object> multiKey2 = new MultiKey<Object>(integer1, (Object) null, object1);
      MultiKey<Object> multiKey3 = new MultiKey<Object>("", "Tw18_/}", object0);
      MultiKey<Object> multiKey4 = new MultiKey<Object>((Object) null, multiKey2, multiKey3);
      multiKey0.toString();
      multiKey3.toString();
      boolean boolean0 = multiKey0.equals(object1);
      assertTrue(boolean0);
      
      Integer integer2 = new Integer(0);
      Integer integer3 = new Integer(1296);
      Integer integer4 = new Integer(725);
      Integer integer5 = new Integer(725);
      Integer integer6 = new Integer(7);
      MultiKey<Integer> multiKey5 = new MultiKey<Integer>(integer6, integer2, integer1);
      Integer[] integerArray0 = new Integer[1];
      integerArray0[0] = integer5;
      MultiKey<Integer> multiKey6 = new MultiKey<Integer>(integerArray0);
      MultiKey<Integer> multiKey7 = new MultiKey<Integer>(integerArray0, true);
      multiKey7.size();
      multiKey4.size();
      assertFalse(multiKey4.equals((Object)multiKey0));
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Integer integer0 = new Integer((-17));
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integer0, integer0, integer0);
      String string0 = "";
      MultiKey<Object> multiKey1 = null;
//      try {
        multiKey1 = new MultiKey<Object>((Object[]) null, true);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // The array of keys must not be null
//         //
//         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
//      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      MultiKey<Object> multiKey0 = new MultiKey<Object>(objectArray0, false);
      MultiKey<MultiKey<Object>> multiKey1 = new MultiKey<MultiKey<Object>>(multiKey0, multiKey0, multiKey0, multiKey0, multiKey0);
      int int0 = 10;
      Integer integer0 = new Integer(10);
      Integer integer1 = new Integer(10);
      MultiKey<Integer> multiKey2 = new MultiKey<Integer>(integer0, integer1);
      Integer[] integerArray0 = new Integer[4];
      integerArray0[0] = integer0;
      integerArray0[1] = integer1;
      integerArray0[2] = integer0;
      integerArray0[3] = integer1;
      MultiKey<Integer> multiKey3 = new MultiKey<Integer>(integerArray0);
      Integer integer2 = new Integer(int0);
      Integer integer3 = new Integer(int0);
      Integer integer4 = new Integer(int0);
      MultiKey<Integer> multiKey4 = new MultiKey<Integer>(integer2, integer3, integer4, integer4);
      multiKey3.equals(multiKey4);
      assertFalse(multiKey3.equals((Object)multiKey2));
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      MultiKey<Object> multiKey0 = new MultiKey<Object>(objectArray0, false);
      MultiKey<MultiKey<Object>> multiKey1 = new MultiKey<MultiKey<Object>>(multiKey0, multiKey0, multiKey0, multiKey0, multiKey0);
      int int0 = multiKey0.size();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("org.apache.commons.collections4.keyvalue.MultiKey", "", "", "org.apache.commons.collections4.keyvalue.MultiKey");
      multiKey0.toString();
      Integer integer0 = new Integer(0);
      Integer integer1 = new Integer(1);
      MultiKey<Integer> multiKey1 = new MultiKey<Integer>(integer0, integer0, integer0, integer0, integer1);
      multiKey1.toString();
      multiKey1.toString();
      multiKey1.hashCode();
      MultiKey<Object> multiKey2 = null;
//      try {
        multiKey2 = new MultiKey<Object>((Object[]) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // The array of keys must not be null
//         //
//         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
//      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("KP'8R/rj.*9", "", "");
      Object[] objectArray0 = new Object[0];
      MultiKey<Object> multiKey1 = new MultiKey<Object>(objectArray0, true);
      multiKey1.toString();
      multiKey1.getKeys();
      multiKey1.getKeys();
      multiKey0.size();
      MultiKey<Object> multiKey2 = new MultiKey<Object>("", "KP'8R/rj.*9", (Object) null, "", "KP'8R/rj.*9");
      MultiKey<MultiKey<Object>> multiKey3 = new MultiKey<MultiKey<Object>>(multiKey1, multiKey2);
      multiKey3.toString();
      multiKey0.toString();
      // Undeclared exception!
//      try { 
        multiKey3.getKey(3);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 3
//         //
//         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
//      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      MultiKey<Object> multiKey0 = new MultiKey<Object>((Object) null, (Object) null, (Object) null, (Object) null);
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      Integer integer0 = new Integer(0);
      Integer integer1 = new Integer(0);
      MultiKey<Integer> multiKey1 = new MultiKey<Integer>(integer0, integer0, integer0, integer1, integer0);
      multiKey1.toString();
      multiKey1.toString();
      multiKey1.toString();
      multiKey1.toString();
      multiKey0.toString();
      multiKey0.getKey(0);
      multiKey0.hashCode();
      String string0 = "nTE!R'";
      MultiKey<String> multiKey2 = new MultiKey<String>("MultiKey[null, null, null, null]", "", "nTE!R'", "u1BTuDfw");
      Integer integer2 = new Integer(0);
      String[] stringArray0 = new String[4];
      stringArray0[0] = "u1BTuDfw";
      stringArray0[1] = "";
      stringArray0[2] = "MultiKey[0, 0, 0, 0, 0]";
      stringArray0[3] = "MultiKey[0, 0, 0, 0, 0]";
      MultiKey<String> multiKey3 = new MultiKey<String>(stringArray0);
      MultiKey<MultiKey<String>> multiKey4 = new MultiKey<MultiKey<String>>(multiKey3, multiKey2, multiKey2, multiKey2);
      int int0 = (-1);
      // Undeclared exception!
//      try { 
        multiKey4.getKey((-1));
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // -1
//         //
//         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
//      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("", "7c");
      multiKey0.getKey(0);
      Integer integer0 = new Integer((-1602));
      Integer integer1 = new Integer((-1602));
      MultiKey<Integer> multiKey1 = new MultiKey<Integer>(integer0, integer0, integer0, integer1);
      MultiKey<Object> multiKey2 = new MultiKey<Object>("", "7c", "", multiKey1);
      assertEquals(4, multiKey2.size());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      MultiKey<String> multiKey0 = new MultiKey<String>("", "");
      multiKey0.toString();
      multiKey0.toString();
      multiKey0.toString();
      MultiKey<Object> multiKey1 = new MultiKey<Object>(multiKey0, "");
      multiKey1.toString();
      multiKey1.toString();
      multiKey1.getKeys();
      Integer[] integerArray0 = new Integer[8];
      Integer integer0 = new Integer((-4358));
      integerArray0[0] = integer0;
      Integer integer1 = new Integer((-4358));
      integerArray0[1] = integer1;
      Integer integer2 = new Integer((int) integerArray0[1]);
      integerArray0[2] = integer2;
      Integer integer3 = new Integer(0);
      multiKey0.toString();
      integerArray0[3] = integer3;
      Integer integer4 = new Integer((-4358));
      integerArray0[4] = integer4;
      Integer integer5 = new Integer(301);
      integerArray0[5] = integer5;
      Integer integer6 = new Integer(0);
      integerArray0[6] = integer6;
      Integer integer7 = new Integer(0);
      integerArray0[7] = integer7;
      MultiKey<Integer> multiKey2 = new MultiKey<Integer>(integerArray0, true);
      multiKey2.toString();
      multiKey2.toString();
      multiKey0.hashCode();
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Integer integer0 = new Integer(0);
      Integer integer1 = new Integer(0);
      MultiKey<Object> multiKey0 = new MultiKey<Object>("", "", integer0, integer1);
      MultiKey<Object> multiKey1 = new MultiKey<Object>(multiKey0, integer0, "", multiKey0, integer0);
      multiKey1.toString();
      multiKey1.toString();
      multiKey1.getKeys();
      multiKey1.hashCode();
      MultiKey<MultiKey<Object>> multiKey2 = new MultiKey<MultiKey<Object>>(multiKey1, multiKey1, multiKey0);
      Object object0 = new Object();
      multiKey2.equals(object0);
      multiKey0.getKeys();
      multiKey1.hashCode();
      MultiKey<String> multiKey3 = new MultiKey<String>("", "", "", "");
      multiKey1.equals(multiKey3);
      Integer integer2 = new Integer((-1171));
      MultiKey<Integer> multiKey4 = new MultiKey<Integer>(integer1, integer1, integer2);
      int int0 = multiKey4.size();
      assertEquals(3, int0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Object[] objectArray0 = new Object[2];
      String[] stringArray0 = new String[8];
      stringArray0[0] = "H$SL3&{X?:KklEJSqp";
      stringArray0[1] = "";
      stringArray0[2] = "";
      stringArray0[3] = "$`vAA]/978";
      stringArray0[4] = "";
      stringArray0[5] = "";
      stringArray0[6] = "";
      stringArray0[7] = "";
      MultiKey<String> multiKey0 = new MultiKey<String>(stringArray0);
      MultiKey<Object> multiKey1 = new MultiKey<Object>(multiKey0, "");
      // Undeclared exception!
//      try { 
        multiKey1.getKey((-155));
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // -155
//         //
//         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
//      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      MultiKey<Integer> multiKey0 = new MultiKey<Integer>((Integer) null, (Integer) null);
      multiKey0.toString();
      MultiKey<String> multiKey1 = new MultiKey<String>("@TI~SPli;;&;+n", "@TI~SPli;;&;+n", "@TI~SPli;;&;+n");
      multiKey1.toString();
      multiKey1.toString();
      multiKey1.toString();
      // Undeclared exception!
//      try { 
        multiKey1.getKey((-1));
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // -1
//         //
//         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
//      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Object object0 = new Object();
      String string0 = ".7,Y/1\"T";
      MultiKey<String> multiKey0 = new MultiKey<String>(".7,Y/1\"T", ".7,Y/1\"T");
      int int0 = 2665;
      // Undeclared exception!
//      try { 
        multiKey0.getKey(2665);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 2665
//         //
//         verifyException("org.apache.commons.collections4.keyvalue.MultiKey", e);
//      }
  }
}
