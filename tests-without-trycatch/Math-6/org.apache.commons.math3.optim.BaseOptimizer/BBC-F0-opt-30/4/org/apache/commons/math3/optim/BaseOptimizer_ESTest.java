/*
 * This file was automatically generated by EvoSuite
 * Tue Oct 19 17:33:30 GMT 2021
 */

package org.apache.commons.math3.optim;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math3.optim.MaxEval;
import org.apache.commons.math3.optim.MaxIter;
import org.apache.commons.math3.optim.OptimizationData;
import org.apache.commons.math3.optim.linear.SimplexSolver;
import org.apache.commons.math3.optim.univariate.BrentOptimizer;
import org.apache.commons.math3.optim.univariate.MultiStartUnivariateOptimizer;
import org.apache.commons.math3.random.MersenneTwister;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class BaseOptimizer_ESTest extends BaseOptimizer_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      BrentOptimizer brentOptimizer0 = new BrentOptimizer(1616.0, 1616.0);
      MersenneTwister mersenneTwister0 = new MersenneTwister(2443);
      MultiStartUnivariateOptimizer multiStartUnivariateOptimizer0 = new MultiStartUnivariateOptimizer(brentOptimizer0, 2443, mersenneTwister0);
      OptimizationData[] optimizationDataArray0 = new OptimizationData[6];
      MaxIter maxIter0 = new MaxIter(2443);
      optimizationDataArray0[2] = (OptimizationData) maxIter0;
      // Undeclared exception!
//      try { 
        multiStartUnivariateOptimizer0.optimize(optimizationDataArray0);
//        fail("Expecting exception: IllegalStateException");
      
//      } catch(IllegalStateException e) {
//         //
//         // illegal state
//         //
//         verifyException("org.apache.commons.math3.optim.univariate.MultiStartUnivariateOptimizer", e);
//      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      BrentOptimizer brentOptimizer0 = new BrentOptimizer(1616.0, 1616.0);
      OptimizationData[] optimizationDataArray0 = new OptimizationData[3];
      MaxEval maxEval0 = new MaxEval(6);
      optimizationDataArray0[0] = (OptimizationData) maxEval0;
      // Undeclared exception!
//      try { 
        brentOptimizer0.optimize(optimizationDataArray0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.optim.univariate.UnivariateOptimizer", e);
//      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      BrentOptimizer brentOptimizer0 = new BrentOptimizer(1616.0, 1616.0);
      int int0 = brentOptimizer0.getMaxEvaluations();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      BrentOptimizer brentOptimizer0 = new BrentOptimizer(0.036, 0.036);
      OptimizationData[] optimizationDataArray0 = new OptimizationData[2];
//      try { 
        brentOptimizer0.optimize(optimizationDataArray0);
//        fail("Expecting exception: IllegalStateException");
      
//      } catch(IllegalStateException e) {
//         //
//         // illegal state: maximal count (0) exceeded: evaluations
//         //
//         verifyException("org.apache.commons.math3.optim.BaseOptimizer$MaxEvalCallback", e);
//      }
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      BrentOptimizer brentOptimizer0 = new BrentOptimizer(1055.8967634365, 1055.8967634365);
      MersenneTwister mersenneTwister0 = new MersenneTwister(1);
      MultiStartUnivariateOptimizer multiStartUnivariateOptimizer0 = new MultiStartUnivariateOptimizer(brentOptimizer0, 1, mersenneTwister0);
      int int0 = multiStartUnivariateOptimizer0.getMaxIterations();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      SimplexSolver simplexSolver0 = new SimplexSolver();
      int int0 = simplexSolver0.getEvaluations();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      BrentOptimizer brentOptimizer0 = new BrentOptimizer(1616.0, 1616.0);
      int int0 = brentOptimizer0.getIterations();
      assertEquals(0, int0);
  }
}
