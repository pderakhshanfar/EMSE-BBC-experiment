/*
 * This file was automatically generated by EvoSuite
 * Tue Oct 19 19:21:46 GMT 2021
 */

package org.apache.commons.math3.optim.nonlinear.scalar.noderiv;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math3.exception.MathUnsupportedOperationException;
import org.apache.commons.math3.optim.ConvergenceChecker;
import org.apache.commons.math3.optim.InitialGuess;
import org.apache.commons.math3.optim.OptimizationData;
import org.apache.commons.math3.optim.PointValuePair;
import org.apache.commons.math3.optim.SimpleBounds;
import org.apache.commons.math3.optim.SimplePointChecker;
import org.apache.commons.math3.optim.SimpleValueChecker;
import org.apache.commons.math3.optim.nonlinear.scalar.noderiv.MultiDirectionalSimplex;
import org.apache.commons.math3.optim.nonlinear.scalar.noderiv.NelderMeadSimplex;
import org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class SimplexOptimizer_ESTest extends SimplexOptimizer_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      SimpleValueChecker simpleValueChecker0 = new SimpleValueChecker((-1288.3799726), (-1288.3799726));
      SimplexOptimizer simplexOptimizer0 = new SimplexOptimizer(simpleValueChecker0);
      OptimizationData[] optimizationDataArray0 = new OptimizationData[5];
      double[] doubleArray0 = new double[9];
      InitialGuess initialGuess0 = new InitialGuess(doubleArray0);
      optimizationDataArray0[1] = (OptimizationData) initialGuess0;
      SimpleBounds simpleBounds0 = SimpleBounds.unbounded(6);
      optimizationDataArray0[4] = (OptimizationData) simpleBounds0;
      // Undeclared exception!
//      try { 
        simplexOptimizer0.parseOptimizationData(optimizationDataArray0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // 6 != 9
//         //
//         verifyException("org.apache.commons.math3.optim.BaseMultivariateOptimizer", e);
//      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      SimplexOptimizer simplexOptimizer0 = new SimplexOptimizer((-0.7058492428199691), (-0.7058492428199691));
      // Undeclared exception!
//      try { 
        simplexOptimizer0.parseOptimizationData((OptimizationData[]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.optim.BaseOptimizer", e);
//      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      SimplePointChecker<PointValuePair> simplePointChecker0 = new SimplePointChecker<PointValuePair>(1005.32, Double.NaN, 34);
      SimplexOptimizer simplexOptimizer0 = new SimplexOptimizer(simplePointChecker0);
      OptimizationData[] optimizationDataArray0 = new OptimizationData[3];
      double[] doubleArray0 = new double[1];
      SimpleBounds simpleBounds0 = new SimpleBounds(doubleArray0, doubleArray0);
      optimizationDataArray0[1] = (OptimizationData) simpleBounds0;
      MultiDirectionalSimplex multiDirectionalSimplex0 = new MultiDirectionalSimplex(34, 34, 0.0);
      optimizationDataArray0[2] = (OptimizationData) multiDirectionalSimplex0;
      // Undeclared exception!
//      try { 
        simplexOptimizer0.optimize(optimizationDataArray0);
//        fail("Expecting exception: MathUnsupportedOperationException");
      
//      } catch(MathUnsupportedOperationException e) {
//         //
//         // constraint
//         //
//         verifyException("org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizer", e);
//      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      SimplexOptimizer simplexOptimizer0 = new SimplexOptimizer(2.147483647E9, 2.147483647E9);
      OptimizationData[] optimizationDataArray0 = new OptimizationData[6];
      SimpleBounds simpleBounds0 = SimpleBounds.unbounded(6);
      optimizationDataArray0[3] = (OptimizationData) simpleBounds0;
      double[] doubleArray0 = new double[9];
      InitialGuess initialGuess0 = new InitialGuess(doubleArray0);
      optimizationDataArray0[4] = (OptimizationData) initialGuess0;
      // Undeclared exception!
//      try { 
        simplexOptimizer0.optimize(optimizationDataArray0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // 6 != 9
//         //
//         verifyException("org.apache.commons.math3.optim.BaseMultivariateOptimizer", e);
//      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 5.206150291559893E-8;
      doubleArray0[1] = 5.206150291559893E-8;
      doubleArray0[2] = 5.206150291559893E-8;
      doubleArray0[3] = 5.206150291559893E-8;
      doubleArray0[4] = 5.206150291559893E-8;
      doubleArray0[5] = 5.206150291559893E-8;
      doubleArray0[6] = 5.206150291559893E-8;
      doubleArray0[7] = 5.206150291559893E-8;
      doubleArray0[8] = 5.206150291559893E-8;
      NelderMeadSimplex nelderMeadSimplex0 = new NelderMeadSimplex(doubleArray0, 5.206150291559893E-8, 1.5959614205422845E-225, 5.206150291559893E-8, 5.206150291559893E-8);
      SimplexOptimizer simplexOptimizer0 = new SimplexOptimizer((ConvergenceChecker<PointValuePair>) null);
      OptimizationData[] optimizationDataArray0 = new OptimizationData[3];
      InitialGuess initialGuess0 = new InitialGuess(doubleArray0);
      optimizationDataArray0[0] = (OptimizationData) initialGuess0;
      optimizationDataArray0[1] = (OptimizationData) nelderMeadSimplex0;
      simplexOptimizer0.parseOptimizationData(optimizationDataArray0);
      // Undeclared exception!
//      try { 
        simplexOptimizer0.doOptimize();
//        fail("Expecting exception: IllegalStateException");
      
//      } catch(IllegalStateException e) {
//         //
//         // illegal state: maximal count (0) exceeded: evaluations
//         //
//         verifyException("org.apache.commons.math3.optim.BaseOptimizer$MaxEvalCallback", e);
//      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      SimplePointChecker<PointValuePair> simplePointChecker0 = new SimplePointChecker<PointValuePair>(2049.4451181558466, (-438.735));
      SimplexOptimizer simplexOptimizer0 = new SimplexOptimizer(simplePointChecker0);
      OptimizationData[] optimizationDataArray0 = new OptimizationData[7];
      NelderMeadSimplex nelderMeadSimplex0 = new NelderMeadSimplex(108, (-4033.9));
      optimizationDataArray0[0] = (OptimizationData) nelderMeadSimplex0;
      double[] doubleArray0 = new double[7];
      InitialGuess initialGuess0 = new InitialGuess(doubleArray0);
      optimizationDataArray0[3] = (OptimizationData) initialGuess0;
      simplexOptimizer0.parseOptimizationData(optimizationDataArray0);
      // Undeclared exception!
//      try { 
        simplexOptimizer0.doOptimize();
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // 108 != 7
//         //
//         verifyException("org.apache.commons.math3.optim.nonlinear.scalar.noderiv.AbstractSimplex", e);
//      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      SimplexOptimizer simplexOptimizer0 = new SimplexOptimizer(2.1474836636051793E9, 2.1474836636051793E9);
      // Undeclared exception!
//      try { 
        simplexOptimizer0.doOptimize();
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // null is not allowed
//         //
//         verifyException("org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizer", e);
//      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (-439.14539822296);
      doubleArray0[1] = (-439.14539822296);
      doubleArray0[2] = (-439.14539822296);
      doubleArray0[3] = (-439.14539822296);
      NelderMeadSimplex nelderMeadSimplex0 = new NelderMeadSimplex(doubleArray0, (-439.14539822296), (-439.14539822296), (-439.14539822296), (-439.14539822296));
      SimpleValueChecker simpleValueChecker0 = new SimpleValueChecker((-439.14539822296), (-2511.8270877057403));
      SimplexOptimizer simplexOptimizer0 = new SimplexOptimizer(simpleValueChecker0);
      OptimizationData[] optimizationDataArray0 = new OptimizationData[8];
      optimizationDataArray0[0] = (OptimizationData) nelderMeadSimplex0;
      simplexOptimizer0.parseOptimizationData(optimizationDataArray0);
      // Undeclared exception!
//      try { 
        simplexOptimizer0.doOptimize();
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.optim.nonlinear.scalar.noderiv.AbstractSimplex", e);
//      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      SimplePointChecker<PointValuePair> simplePointChecker0 = new SimplePointChecker<PointValuePair>(1005.32, Double.NaN, 34);
      SimplexOptimizer simplexOptimizer0 = new SimplexOptimizer(simplePointChecker0);
      OptimizationData[] optimizationDataArray0 = new OptimizationData[3];
      double[] doubleArray0 = new double[1];
      SimpleBounds simpleBounds0 = new SimpleBounds(doubleArray0, doubleArray0);
      optimizationDataArray0[1] = (OptimizationData) simpleBounds0;
      MultiDirectionalSimplex multiDirectionalSimplex0 = new MultiDirectionalSimplex(34, 34, 0.0);
      optimizationDataArray0[2] = (OptimizationData) multiDirectionalSimplex0;
      simplexOptimizer0.parseOptimizationData(optimizationDataArray0);
      // Undeclared exception!
//      try { 
        simplexOptimizer0.doOptimize();
//        fail("Expecting exception: MathUnsupportedOperationException");
      
//      } catch(MathUnsupportedOperationException e) {
//         //
//         // constraint
//         //
//         verifyException("org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizer", e);
//      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      SimplexOptimizer simplexOptimizer0 = new SimplexOptimizer(1262.9680927644, 1262.9680927644);
      OptimizationData[] optimizationDataArray0 = new OptimizationData[3];
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (-2820.1158);
      doubleArray0[1] = 1262.9680927644;
      doubleArray0[2] = 1262.9680927644;
      doubleArray0[3] = 1262.9680927644;
      doubleArray0[4] = 1262.9680927644;
      MultiDirectionalSimplex multiDirectionalSimplex0 = new MultiDirectionalSimplex(doubleArray0, 547.2025, (-2820.1158));
      optimizationDataArray0[0] = (OptimizationData) multiDirectionalSimplex0;
      InitialGuess initialGuess0 = new InitialGuess(doubleArray0);
      optimizationDataArray0[2] = (OptimizationData) initialGuess0;
      // Undeclared exception!
//      try { 
        simplexOptimizer0.optimize(optimizationDataArray0);
//        fail("Expecting exception: IllegalStateException");
      
//      } catch(IllegalStateException e) {
//         //
//         // illegal state: maximal count (0) exceeded: evaluations
//         //
//         verifyException("org.apache.commons.math3.optim.BaseOptimizer$MaxEvalCallback", e);
//      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      SimplexOptimizer simplexOptimizer0 = new SimplexOptimizer(1262.9680927644, 1262.9680927644);
      OptimizationData[] optimizationDataArray0 = new OptimizationData[3];
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (-2820.1158);
      doubleArray0[1] = 1262.9680927644;
      doubleArray0[2] = 1262.9680927644;
      doubleArray0[3] = 1262.9680927644;
      doubleArray0[4] = 1262.9680927644;
      MultiDirectionalSimplex multiDirectionalSimplex0 = new MultiDirectionalSimplex(doubleArray0, 547.2025, (-2820.1158));
      optimizationDataArray0[0] = (OptimizationData) multiDirectionalSimplex0;
      // Undeclared exception!
//      try { 
        simplexOptimizer0.optimize(optimizationDataArray0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.optim.nonlinear.scalar.noderiv.AbstractSimplex", e);
//      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      SimplexOptimizer simplexOptimizer0 = new SimplexOptimizer(1262.9680927644, 1262.9680927644);
      OptimizationData[] optimizationDataArray0 = new OptimizationData[3];
      // Undeclared exception!
//      try { 
        simplexOptimizer0.optimize(optimizationDataArray0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // null is not allowed
//         //
//         verifyException("org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizer", e);
//      }
  }
}
