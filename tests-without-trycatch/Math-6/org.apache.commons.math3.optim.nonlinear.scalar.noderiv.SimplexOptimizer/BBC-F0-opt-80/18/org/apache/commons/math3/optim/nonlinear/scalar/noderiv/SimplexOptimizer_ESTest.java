/*
 * This file was automatically generated by EvoSuite
 * Thu Oct 21 11:03:06 GMT 2021
 */

package org.apache.commons.math3.optim.nonlinear.scalar.noderiv;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math3.exception.MathUnsupportedOperationException;
import org.apache.commons.math3.optim.InitialGuess;
import org.apache.commons.math3.optim.OptimizationData;
import org.apache.commons.math3.optim.PointValuePair;
import org.apache.commons.math3.optim.SimpleBounds;
import org.apache.commons.math3.optim.SimplePointChecker;
import org.apache.commons.math3.optim.nonlinear.scalar.noderiv.MultiDirectionalSimplex;
import org.apache.commons.math3.optim.nonlinear.scalar.noderiv.NelderMeadSimplex;
import org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class SimplexOptimizer_ESTest extends SimplexOptimizer_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      SimplexOptimizer simplexOptimizer0 = new SimplexOptimizer(835.6968872652, 835.6968872652);
      OptimizationData[] optimizationDataArray0 = new OptimizationData[3];
      double[] doubleArray0 = new double[3];
      InitialGuess initialGuess0 = new InitialGuess(doubleArray0);
      optimizationDataArray0[1] = (OptimizationData) initialGuess0;
      SimpleBounds simpleBounds0 = SimpleBounds.unbounded(22);
      optimizationDataArray0[2] = (OptimizationData) simpleBounds0;
      // Undeclared exception!
//      try { 
        simplexOptimizer0.parseOptimizationData(optimizationDataArray0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // 22 != 3
//         //
//         verifyException("org.apache.commons.math3.optim.BaseMultivariateOptimizer", e);
//      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      SimplePointChecker<PointValuePair> simplePointChecker0 = new SimplePointChecker<PointValuePair>(0.0, 0.0, 254);
      SimplexOptimizer simplexOptimizer0 = new SimplexOptimizer(simplePointChecker0);
      // Undeclared exception!
//      try { 
        simplexOptimizer0.parseOptimizationData((OptimizationData[]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.optim.BaseOptimizer", e);
//      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      SimplexOptimizer simplexOptimizer0 = new SimplexOptimizer((-1194.2163894935), (-1194.2163894935));
      OptimizationData[] optimizationDataArray0 = new OptimizationData[4];
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (-1557.246395079603);
      doubleArray0[1] = (-1194.2163894935);
      doubleArray0[2] = (-1194.2163894935);
      MultiDirectionalSimplex multiDirectionalSimplex0 = new MultiDirectionalSimplex(doubleArray0, (-1.0), (-1557.246395079603));
      optimizationDataArray0[0] = (OptimizationData) multiDirectionalSimplex0;
      SimpleBounds simpleBounds0 = new SimpleBounds(doubleArray0, doubleArray0);
      optimizationDataArray0[3] = (OptimizationData) simpleBounds0;
      // Undeclared exception!
//      try { 
        simplexOptimizer0.optimize(optimizationDataArray0);
//        fail("Expecting exception: MathUnsupportedOperationException");
      
//      } catch(MathUnsupportedOperationException e) {
//         //
//         // constraint
//         //
//         verifyException("org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizer", e);
//      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      SimplexOptimizer simplexOptimizer0 = new SimplexOptimizer(2222.8, (-187.5954));
      OptimizationData[] optimizationDataArray0 = new OptimizationData[4];
      double[] doubleArray0 = new double[4];
      InitialGuess initialGuess0 = new InitialGuess(doubleArray0);
      optimizationDataArray0[0] = (OptimizationData) initialGuess0;
      SimpleBounds simpleBounds0 = SimpleBounds.unbounded(0);
      optimizationDataArray0[2] = (OptimizationData) simpleBounds0;
      // Undeclared exception!
//      try { 
        simplexOptimizer0.optimize(optimizationDataArray0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // 0 != 4
//         //
//         verifyException("org.apache.commons.math3.optim.BaseMultivariateOptimizer", e);
//      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      SimplexOptimizer simplexOptimizer0 = new SimplexOptimizer((-351.27632718573324), (-351.27632718573324));
      OptimizationData[] optimizationDataArray0 = new OptimizationData[4];
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (-351.27632718573324);
      doubleArray0[1] = (-351.27632718573324);
      doubleArray0[2] = (-351.27632718573324);
      doubleArray0[3] = (-351.27632718573324);
      doubleArray0[4] = 940.3;
      doubleArray0[5] = (-351.27632718573324);
      doubleArray0[6] = (-4105.9085);
      NelderMeadSimplex nelderMeadSimplex0 = new NelderMeadSimplex(doubleArray0, 14.101419448852539, 3.4439717236742845E-8, 14.101419448852539, (-351.27632718573324));
      optimizationDataArray0[0] = (OptimizationData) nelderMeadSimplex0;
      InitialGuess initialGuess0 = new InitialGuess(doubleArray0);
      optimizationDataArray0[1] = (OptimizationData) initialGuess0;
      simplexOptimizer0.parseOptimizationData(optimizationDataArray0);
      // Undeclared exception!
//      try { 
        simplexOptimizer0.doOptimize();
//        fail("Expecting exception: IllegalStateException");
      
//      } catch(IllegalStateException e) {
//         //
//         // illegal state: maximal count (0) exceeded: evaluations
//         //
//         verifyException("org.apache.commons.math3.optim.BaseOptimizer$MaxEvalCallback", e);
//      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      NelderMeadSimplex nelderMeadSimplex0 = new NelderMeadSimplex(62);
      SimplexOptimizer simplexOptimizer0 = new SimplexOptimizer(62, 62);
      OptimizationData[] optimizationDataArray0 = new OptimizationData[8];
      optimizationDataArray0[0] = (OptimizationData) nelderMeadSimplex0;
      double[] doubleArray0 = new double[0];
      InitialGuess initialGuess0 = new InitialGuess(doubleArray0);
      optimizationDataArray0[1] = (OptimizationData) initialGuess0;
      simplexOptimizer0.parseOptimizationData(optimizationDataArray0);
      // Undeclared exception!
//      try { 
        simplexOptimizer0.doOptimize();
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // 62 != 0
//         //
//         verifyException("org.apache.commons.math3.optim.nonlinear.scalar.noderiv.AbstractSimplex", e);
//      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      SimplexOptimizer simplexOptimizer0 = new SimplexOptimizer((-1194.216389493476), 1.34217729E8);
      // Undeclared exception!
//      try { 
        simplexOptimizer0.doOptimize();
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // null is not allowed
//         //
//         verifyException("org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizer", e);
//      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      SimplexOptimizer simplexOptimizer0 = new SimplexOptimizer((-351.27632718573324), (-351.27632718573324));
      OptimizationData[] optimizationDataArray0 = new OptimizationData[4];
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (-351.27632718573324);
      doubleArray0[1] = (-351.27632718573324);
      doubleArray0[2] = (-351.27632718573324);
      doubleArray0[3] = (-351.27632718573324);
      doubleArray0[4] = 940.3;
      doubleArray0[5] = (-351.27632718573324);
      doubleArray0[6] = (-4105.9085);
      NelderMeadSimplex nelderMeadSimplex0 = new NelderMeadSimplex(doubleArray0, 14.101419448852539, 3.4439717236742845E-8, 14.101419448852539, (-351.27632718573324));
      optimizationDataArray0[0] = (OptimizationData) nelderMeadSimplex0;
      simplexOptimizer0.parseOptimizationData(optimizationDataArray0);
      // Undeclared exception!
//      try { 
        simplexOptimizer0.doOptimize();
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.optim.nonlinear.scalar.noderiv.AbstractSimplex", e);
//      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      SimplexOptimizer simplexOptimizer0 = new SimplexOptimizer(1.8307188599677033E-8, 0.9689123630523682);
      OptimizationData[] optimizationDataArray0 = new OptimizationData[2];
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (-719.57445609594);
      doubleArray0[1] = 1.8307188599677033E-8;
      doubleArray0[2] = 1.8307188599677033E-8;
      doubleArray0[3] = 0.9689123630523682;
      doubleArray0[4] = 1.8307188599677033E-8;
      doubleArray0[5] = 0.9689123630523682;
      doubleArray0[6] = 0.9689123630523682;
      doubleArray0[7] = 1.8307188599677033E-8;
      doubleArray0[8] = 0.9689123630523682;
      MultiDirectionalSimplex multiDirectionalSimplex0 = new MultiDirectionalSimplex(doubleArray0, (-7.44321345601866E-11), 1.8307188599677033E-8);
      optimizationDataArray0[0] = (OptimizationData) multiDirectionalSimplex0;
      SimpleBounds simpleBounds0 = SimpleBounds.unbounded(1660);
      optimizationDataArray0[1] = (OptimizationData) simpleBounds0;
      simplexOptimizer0.parseOptimizationData(optimizationDataArray0);
      // Undeclared exception!
//      try { 
        simplexOptimizer0.doOptimize();
//        fail("Expecting exception: MathUnsupportedOperationException");
      
//      } catch(MathUnsupportedOperationException e) {
//         //
//         // constraint
//         //
//         verifyException("org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizer", e);
//      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      SimplexOptimizer simplexOptimizer0 = new SimplexOptimizer((-1194.2163894935), (-1194.2163894935));
      OptimizationData[] optimizationDataArray0 = new OptimizationData[4];
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (-1557.246395079603);
      doubleArray0[1] = (-1194.2163894935);
      doubleArray0[2] = (-1194.2163894935);
      MultiDirectionalSimplex multiDirectionalSimplex0 = new MultiDirectionalSimplex(doubleArray0, (-1.0), (-1557.246395079603));
      optimizationDataArray0[0] = (OptimizationData) multiDirectionalSimplex0;
      InitialGuess initialGuess0 = new InitialGuess(doubleArray0);
      optimizationDataArray0[1] = (OptimizationData) initialGuess0;
      // Undeclared exception!
//      try { 
        simplexOptimizer0.optimize(optimizationDataArray0);
//        fail("Expecting exception: IllegalStateException");
      
//      } catch(IllegalStateException e) {
//         //
//         // illegal state: maximal count (0) exceeded: evaluations
//         //
//         verifyException("org.apache.commons.math3.optim.BaseOptimizer$MaxEvalCallback", e);
//      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      SimplexOptimizer simplexOptimizer0 = new SimplexOptimizer((-1194.2163894935), (-1194.2163894935));
      OptimizationData[] optimizationDataArray0 = new OptimizationData[4];
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (-1557.246395079603);
      doubleArray0[1] = (-1194.2163894935);
      doubleArray0[2] = (-1194.2163894935);
      MultiDirectionalSimplex multiDirectionalSimplex0 = new MultiDirectionalSimplex(doubleArray0, (-1.0), (-1557.246395079603));
      optimizationDataArray0[0] = (OptimizationData) multiDirectionalSimplex0;
      // Undeclared exception!
//      try { 
        simplexOptimizer0.optimize(optimizationDataArray0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.optim.nonlinear.scalar.noderiv.AbstractSimplex", e);
//      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      SimplexOptimizer simplexOptimizer0 = new SimplexOptimizer((-1194.2163894935), (-1194.2163894935));
      OptimizationData[] optimizationDataArray0 = new OptimizationData[4];
      // Undeclared exception!
//      try { 
        simplexOptimizer0.optimize(optimizationDataArray0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // null is not allowed
//         //
//         verifyException("org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizer", e);
//      }
  }
}
