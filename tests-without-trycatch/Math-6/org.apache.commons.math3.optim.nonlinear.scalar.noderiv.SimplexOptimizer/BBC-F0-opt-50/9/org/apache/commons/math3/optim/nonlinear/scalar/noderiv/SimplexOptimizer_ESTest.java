/*
 * This file was automatically generated by EvoSuite
 * Tue Oct 19 19:28:43 GMT 2021
 */

package org.apache.commons.math3.optim.nonlinear.scalar.noderiv;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math3.exception.MathUnsupportedOperationException;
import org.apache.commons.math3.optim.ConvergenceChecker;
import org.apache.commons.math3.optim.InitialGuess;
import org.apache.commons.math3.optim.OptimizationData;
import org.apache.commons.math3.optim.PointValuePair;
import org.apache.commons.math3.optim.SimpleBounds;
import org.apache.commons.math3.optim.SimplePointChecker;
import org.apache.commons.math3.optim.SimpleValueChecker;
import org.apache.commons.math3.optim.nonlinear.scalar.noderiv.MultiDirectionalSimplex;
import org.apache.commons.math3.optim.nonlinear.scalar.noderiv.NelderMeadSimplex;
import org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class SimplexOptimizer_ESTest extends SimplexOptimizer_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      SimplexOptimizer simplexOptimizer0 = new SimplexOptimizer((-357.462651952), (-90.980189924));
      OptimizationData[] optimizationDataArray0 = new OptimizationData[8];
      double[] doubleArray0 = new double[2];
      InitialGuess initialGuess0 = new InitialGuess(doubleArray0);
      optimizationDataArray0[1] = (OptimizationData) initialGuess0;
      SimpleBounds simpleBounds0 = SimpleBounds.unbounded(19);
      optimizationDataArray0[5] = (OptimizationData) simpleBounds0;
      // Undeclared exception!
//      try { 
        simplexOptimizer0.parseOptimizationData(optimizationDataArray0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // 19 != 2
//         //
//         verifyException("org.apache.commons.math3.optim.BaseMultivariateOptimizer", e);
//      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      SimpleValueChecker simpleValueChecker0 = new SimpleValueChecker((-187.62534140808), 1.0);
      SimplexOptimizer simplexOptimizer0 = new SimplexOptimizer(simpleValueChecker0);
      // Undeclared exception!
//      try { 
        simplexOptimizer0.parseOptimizationData((OptimizationData[]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.optim.BaseOptimizer", e);
//      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      SimplexOptimizer simplexOptimizer0 = new SimplexOptimizer(5.206150291559893E-8, 5.206150291559893E-8);
      OptimizationData[] optimizationDataArray0 = new OptimizationData[2];
      SimpleBounds simpleBounds0 = SimpleBounds.unbounded(4);
      optimizationDataArray0[0] = (OptimizationData) simpleBounds0;
      double[] doubleArray0 = new double[7];
      InitialGuess initialGuess0 = new InitialGuess(doubleArray0);
      optimizationDataArray0[1] = (OptimizationData) initialGuess0;
      // Undeclared exception!
//      try { 
        simplexOptimizer0.optimize(optimizationDataArray0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // 4 != 7
//         //
//         verifyException("org.apache.commons.math3.optim.BaseMultivariateOptimizer", e);
//      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      SimplexOptimizer simplexOptimizer0 = new SimplexOptimizer((ConvergenceChecker<PointValuePair>) null);
      OptimizationData[] optimizationDataArray0 = new OptimizationData[3];
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 0.4446147380492839;
      doubleArray0[1] = 0.4446147380492839;
      doubleArray0[2] = 0.4446147380492839;
      NelderMeadSimplex nelderMeadSimplex0 = new NelderMeadSimplex(doubleArray0, (-3356.2475214444544), 0.4446147380492839, 109.03822, 0.0);
      optimizationDataArray0[0] = (OptimizationData) nelderMeadSimplex0;
      InitialGuess initialGuess0 = new InitialGuess(doubleArray0);
      optimizationDataArray0[2] = (OptimizationData) initialGuess0;
      simplexOptimizer0.parseOptimizationData(optimizationDataArray0);
      // Undeclared exception!
//      try { 
        simplexOptimizer0.doOptimize();
//        fail("Expecting exception: IllegalStateException");
      
//      } catch(IllegalStateException e) {
//         //
//         // illegal state: maximal count (0) exceeded: evaluations
//         //
//         verifyException("org.apache.commons.math3.optim.BaseOptimizer$MaxEvalCallback", e);
//      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      SimplexOptimizer simplexOptimizer0 = new SimplexOptimizer(1249.0, 1249.0);
      OptimizationData[] optimizationDataArray0 = new OptimizationData[3];
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 508.2901661229;
      doubleArray0[1] = 1249.0;
      doubleArray0[2] = 1249.0;
      doubleArray0[3] = 221.3488930665;
      doubleArray0[4] = 1249.0;
      doubleArray0[5] = 1249.0;
      doubleArray0[6] = 1249.0;
      SimpleBounds simpleBounds0 = new SimpleBounds(doubleArray0, doubleArray0);
      optimizationDataArray0[0] = (OptimizationData) simpleBounds0;
      NelderMeadSimplex nelderMeadSimplex0 = new NelderMeadSimplex(doubleArray0, (-1.0), 1249.0, (-993.3253304), 1249.0);
      optimizationDataArray0[1] = (OptimizationData) nelderMeadSimplex0;
      simplexOptimizer0.parseOptimizationData(optimizationDataArray0);
      // Undeclared exception!
//      try { 
        simplexOptimizer0.doOptimize();
//        fail("Expecting exception: MathUnsupportedOperationException");
      
//      } catch(MathUnsupportedOperationException e) {
//         //
//         // constraint
//         //
//         verifyException("org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizer", e);
//      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      SimplexOptimizer simplexOptimizer0 = new SimplexOptimizer(1.500201674336832E-8, 1.500201674336832E-8);
      OptimizationData[] optimizationDataArray0 = new OptimizationData[3];
      MultiDirectionalSimplex multiDirectionalSimplex0 = new MultiDirectionalSimplex(8, 1.500201674336832E-8);
      optimizationDataArray0[0] = (OptimizationData) multiDirectionalSimplex0;
      double[] doubleArray0 = new double[4];
      InitialGuess initialGuess0 = new InitialGuess(doubleArray0);
      optimizationDataArray0[1] = (OptimizationData) initialGuess0;
      simplexOptimizer0.parseOptimizationData(optimizationDataArray0);
      // Undeclared exception!
//      try { 
        simplexOptimizer0.doOptimize();
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // 8 != 4
//         //
//         verifyException("org.apache.commons.math3.optim.nonlinear.scalar.noderiv.AbstractSimplex", e);
//      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      SimplePointChecker<PointValuePair> simplePointChecker0 = new SimplePointChecker<PointValuePair>(1.0, 1.0);
      SimplexOptimizer simplexOptimizer0 = new SimplexOptimizer(simplePointChecker0);
      // Undeclared exception!
//      try { 
        simplexOptimizer0.doOptimize();
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // null is not allowed
//         //
//         verifyException("org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizer", e);
//      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      SimpleValueChecker simpleValueChecker0 = new SimpleValueChecker(61.05, 0.0, 310);
      SimplexOptimizer simplexOptimizer0 = new SimplexOptimizer(simpleValueChecker0);
      OptimizationData[] optimizationDataArray0 = new OptimizationData[4];
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 61.05;
      NelderMeadSimplex nelderMeadSimplex0 = new NelderMeadSimplex(doubleArray0);
      optimizationDataArray0[0] = (OptimizationData) nelderMeadSimplex0;
      simplexOptimizer0.parseOptimizationData(optimizationDataArray0);
      // Undeclared exception!
//      try { 
        simplexOptimizer0.doOptimize();
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.optim.nonlinear.scalar.noderiv.AbstractSimplex", e);
//      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      SimplePointChecker<PointValuePair> simplePointChecker0 = new SimplePointChecker<PointValuePair>(1052.259409908765, 1052.259409908765);
      SimplexOptimizer simplexOptimizer0 = new SimplexOptimizer(simplePointChecker0);
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 1052.259409908765;
      doubleArray0[1] = 1052.259409908765;
      doubleArray0[2] = (-1.0);
      doubleArray0[3] = 1052.259409908765;
      doubleArray0[4] = (-1.0);
      doubleArray0[5] = 1948.9672602;
      doubleArray0[6] = 1948.9672602;
      doubleArray0[7] = 1948.9672602;
      NelderMeadSimplex nelderMeadSimplex0 = new NelderMeadSimplex(doubleArray0);
      OptimizationData[] optimizationDataArray0 = new OptimizationData[5];
      SimpleBounds simpleBounds0 = SimpleBounds.unbounded(6);
      optimizationDataArray0[0] = (OptimizationData) simpleBounds0;
      optimizationDataArray0[1] = (OptimizationData) nelderMeadSimplex0;
      // Undeclared exception!
//      try { 
        simplexOptimizer0.optimize(optimizationDataArray0);
//        fail("Expecting exception: MathUnsupportedOperationException");
      
//      } catch(MathUnsupportedOperationException e) {
//         //
//         // constraint
//         //
//         verifyException("org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizer", e);
//      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      SimplexOptimizer simplexOptimizer0 = new SimplexOptimizer(5.206150291559893E-8, 5.206150291559893E-8);
      OptimizationData[] optimizationDataArray0 = new OptimizationData[2];
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 5.206150291559893E-8;
      doubleArray0[1] = 5.206150291559893E-8;
      doubleArray0[2] = 33.590091777;
      doubleArray0[3] = 5.206150291559893E-8;
      doubleArray0[4] = 5.206150291559893E-8;
      doubleArray0[5] = 5.206150291559893E-8;
      NelderMeadSimplex nelderMeadSimplex0 = new NelderMeadSimplex(doubleArray0);
      optimizationDataArray0[0] = (OptimizationData) nelderMeadSimplex0;
      InitialGuess initialGuess0 = new InitialGuess(doubleArray0);
      optimizationDataArray0[1] = (OptimizationData) initialGuess0;
      // Undeclared exception!
//      try { 
        simplexOptimizer0.optimize(optimizationDataArray0);
//        fail("Expecting exception: IllegalStateException");
      
//      } catch(IllegalStateException e) {
//         //
//         // illegal state: maximal count (0) exceeded: evaluations
//         //
//         verifyException("org.apache.commons.math3.optim.BaseOptimizer$MaxEvalCallback", e);
//      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      SimplexOptimizer simplexOptimizer0 = new SimplexOptimizer(5.206150291559893E-8, 5.206150291559893E-8);
      OptimizationData[] optimizationDataArray0 = new OptimizationData[2];
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 5.206150291559893E-8;
      doubleArray0[1] = 5.206150291559893E-8;
      doubleArray0[2] = 33.590091777;
      doubleArray0[3] = 5.206150291559893E-8;
      doubleArray0[4] = 5.206150291559893E-8;
      doubleArray0[5] = 5.206150291559893E-8;
      NelderMeadSimplex nelderMeadSimplex0 = new NelderMeadSimplex(doubleArray0);
      optimizationDataArray0[0] = (OptimizationData) nelderMeadSimplex0;
      // Undeclared exception!
//      try { 
        simplexOptimizer0.optimize(optimizationDataArray0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.optim.nonlinear.scalar.noderiv.AbstractSimplex", e);
//      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      SimplexOptimizer simplexOptimizer0 = new SimplexOptimizer(5.206150291559893E-8, 5.206150291559893E-8);
      OptimizationData[] optimizationDataArray0 = new OptimizationData[2];
      // Undeclared exception!
//      try { 
        simplexOptimizer0.optimize(optimizationDataArray0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // null is not allowed
//         //
//         verifyException("org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizer", e);
//      }
  }
}
