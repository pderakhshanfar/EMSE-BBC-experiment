/*
 * This file was automatically generated by EvoSuite
 * Sat Oct 23 15:29:09 GMT 2021
 */

package org.apache.commons.math3.optim.nonlinear.scalar.noderiv;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.List;
import org.apache.commons.math3.linear.RealMatrix;
import org.apache.commons.math3.optim.ConvergenceChecker;
import org.apache.commons.math3.optim.InitialGuess;
import org.apache.commons.math3.optim.OptimizationData;
import org.apache.commons.math3.optim.PointValuePair;
import org.apache.commons.math3.optim.SimpleBounds;
import org.apache.commons.math3.optim.SimplePointChecker;
import org.apache.commons.math3.optim.SimpleValueChecker;
import org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizer;
import org.apache.commons.math3.random.ISAACRandom;
import org.apache.commons.math3.random.JDKRandomGenerator;
import org.apache.commons.math3.random.MersenneTwister;
import org.apache.commons.math3.random.Well19937c;
import org.apache.commons.math3.random.Well44497a;
import org.apache.commons.math3.random.Well44497b;
import org.apache.commons.math3.random.Well512a;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class CMAESOptimizer_ESTest extends CMAESOptimizer_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      SimpleValueChecker simpleValueChecker0 = new SimpleValueChecker(1.8737273216247559, 4421.71637);
      MersenneTwister mersenneTwister0 = new MersenneTwister((-5215));
      CMAESOptimizer cMAESOptimizer0 = new CMAESOptimizer((-5215), (-1.7976931348623157E308), false, 451, 451, mersenneTwister0, true, simpleValueChecker0);
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 4421.71637;
      CMAESOptimizer.Sigma cMAESOptimizer_Sigma0 = new CMAESOptimizer.Sigma(doubleArray0);
      double[] doubleArray1 = new double[3];
      doubleArray1[0] = (double) 451;
      InitialGuess initialGuess0 = new InitialGuess(doubleArray1);
      OptimizationData[] optimizationDataArray0 = new OptimizationData[7];
      optimizationDataArray0[0] = (OptimizationData) initialGuess0;
      SimpleBounds simpleBounds0 = new SimpleBounds(doubleArray1, doubleArray0);
      optimizationDataArray0[2] = (OptimizationData) simpleBounds0;
      optimizationDataArray0[3] = (OptimizationData) cMAESOptimizer_Sigma0;
      // Undeclared exception!
//      try { 
        cMAESOptimizer0.parseOptimizationData(optimizationDataArray0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // 4,421.716 out of [0, 3,970.716] range
//         //
//         verifyException("org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizer", e);
//      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      CMAESOptimizer.Sigma cMAESOptimizer_Sigma0 = new CMAESOptimizer.Sigma(doubleArray0);
      SimpleValueChecker simpleValueChecker0 = new SimpleValueChecker(397, 501.0837816273673);
      int[] intArray0 = new int[3];
      MersenneTwister mersenneTwister0 = new MersenneTwister(intArray0);
      CMAESOptimizer cMAESOptimizer0 = new CMAESOptimizer(397, (-805.0), true, (-1136), 553, mersenneTwister0, true, simpleValueChecker0);
      InitialGuess initialGuess0 = new InitialGuess(doubleArray0);
      double[] doubleArray1 = new double[1];
      doubleArray1[0] = (double) 397;
      SimpleBounds simpleBounds0 = new SimpleBounds(doubleArray0, doubleArray1);
      OptimizationData[] optimizationDataArray0 = new OptimizationData[8];
      optimizationDataArray0[0] = (OptimizationData) simpleBounds0;
      optimizationDataArray0[1] = (OptimizationData) cMAESOptimizer_Sigma0;
      optimizationDataArray0[5] = (OptimizationData) initialGuess0;
      cMAESOptimizer0.parseOptimizationData(optimizationDataArray0);
      assertEquals(8, optimizationDataArray0.length);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      MersenneTwister mersenneTwister0 = new MersenneTwister(376);
      SimpleValueChecker simpleValueChecker0 = new SimpleValueChecker(376, 376);
      CMAESOptimizer cMAESOptimizer0 = new CMAESOptimizer(11, 376, true, 376, 701, mersenneTwister0, true, simpleValueChecker0);
      double[] doubleArray0 = new double[4];
      CMAESOptimizer.Sigma cMAESOptimizer_Sigma0 = new CMAESOptimizer.Sigma(doubleArray0);
      double[] doubleArray1 = new double[3];
      InitialGuess initialGuess0 = new InitialGuess(doubleArray1);
      OptimizationData[] optimizationDataArray0 = new OptimizationData[2];
      optimizationDataArray0[0] = (OptimizationData) cMAESOptimizer_Sigma0;
      optimizationDataArray0[1] = (OptimizationData) initialGuess0;
      // Undeclared exception!
//      try { 
        cMAESOptimizer0.parseOptimizationData(optimizationDataArray0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // 4 != 3
//         //
//         verifyException("org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizer", e);
//      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      CMAESOptimizer.PopulationSize cMAESOptimizer_PopulationSize0 = null;
//      try {
        cMAESOptimizer_PopulationSize0 = new CMAESOptimizer.PopulationSize(0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // 0 is smaller than, or equal to, the minimum (0)
//         //
//         verifyException("org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizer$PopulationSize", e);
//      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      MersenneTwister mersenneTwister0 = new MersenneTwister();
      SimpleValueChecker simpleValueChecker0 = new SimpleValueChecker(1, 236.5958710562, 1787);
      CMAESOptimizer cMAESOptimizer0 = new CMAESOptimizer(397, 397, true, 1, 397, mersenneTwister0, true, simpleValueChecker0);
      OptimizationData[] optimizationDataArray0 = new OptimizationData[0];
      cMAESOptimizer0.parseOptimizationData(optimizationDataArray0);
      assertNull(cMAESOptimizer0.getGoalType());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      CMAESOptimizer.Sigma cMAESOptimizer_Sigma0 = new CMAESOptimizer.Sigma(doubleArray0);
      Well512a well512a0 = new Well512a(260L);
      SimplePointChecker<PointValuePair> simplePointChecker0 = new SimplePointChecker<PointValuePair>(0.0, 2.147483647E9, Integer.MAX_VALUE);
      CMAESOptimizer cMAESOptimizer0 = new CMAESOptimizer(Integer.MAX_VALUE, 2.147483647E9, false, Integer.MAX_VALUE, (-3230), well512a0, true, simplePointChecker0);
      OptimizationData[] optimizationDataArray0 = new OptimizationData[8];
      optimizationDataArray0[0] = (OptimizationData) cMAESOptimizer_Sigma0;
      // Undeclared exception!
//      try { 
        cMAESOptimizer0.parseOptimizationData(optimizationDataArray0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizer", e);
//      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Well44497b well44497b0 = new Well44497b(1061);
      SimpleValueChecker simpleValueChecker0 = new SimpleValueChecker(1061, 941, 1756);
      double[] doubleArray0 = new double[4];
      CMAESOptimizer cMAESOptimizer0 = new CMAESOptimizer(0, 0, true, 1756, 32, well44497b0, true, simpleValueChecker0);
      OptimizationData[] optimizationDataArray0 = new OptimizationData[9];
      SimpleBounds simpleBounds0 = SimpleBounds.unbounded(0);
      optimizationDataArray0[2] = (OptimizationData) simpleBounds0;
      InitialGuess initialGuess0 = new InitialGuess(doubleArray0);
      optimizationDataArray0[4] = (OptimizationData) initialGuess0;
//      try { 
        cMAESOptimizer0.optimize(optimizationDataArray0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // 0 != 4
//         //
//         verifyException("org.apache.commons.math3.optim.BaseMultivariateOptimizer", e);
//      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ISAACRandom iSAACRandom0 = new ISAACRandom(2821);
      SimpleValueChecker simpleValueChecker0 = new SimpleValueChecker(2821, 179);
      CMAESOptimizer cMAESOptimizer0 = new CMAESOptimizer(2821, (-1.0), false, 179, 0, iSAACRandom0, false, simpleValueChecker0);
      // Undeclared exception!
//      try { 
        cMAESOptimizer0.doOptimize();
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizer", e);
//      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) Integer.MAX_VALUE;
      CMAESOptimizer.Sigma cMAESOptimizer_Sigma0 = new CMAESOptimizer.Sigma(doubleArray0);
      Well44497a well44497a0 = new Well44497a();
      SimplePointChecker<PointValuePair> simplePointChecker0 = new SimplePointChecker<PointValuePair>(1166, 1716.33547);
      CMAESOptimizer cMAESOptimizer0 = new CMAESOptimizer(1166, 1716.33547, false, Integer.MAX_VALUE, 1166, well44497a0, false, simplePointChecker0);
      OptimizationData[] optimizationDataArray0 = new OptimizationData[6];
      SimpleBounds simpleBounds0 = new SimpleBounds(doubleArray0, doubleArray0);
      optimizationDataArray0[0] = (OptimizationData) simpleBounds0;
      optimizationDataArray0[2] = (OptimizationData) cMAESOptimizer_Sigma0;
      InitialGuess initialGuess0 = new InitialGuess(doubleArray0);
      optimizationDataArray0[4] = (OptimizationData) initialGuess0;
      // Undeclared exception!
//      try { 
        cMAESOptimizer0.optimize(optimizationDataArray0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // 2,147,483,647 out of [0, 0] range
//         //
//         verifyException("org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizer", e);
//      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      CMAESOptimizer.Sigma cMAESOptimizer_Sigma0 = new CMAESOptimizer.Sigma(doubleArray0);
      Well44497a well44497a0 = new Well44497a();
      SimplePointChecker<PointValuePair> simplePointChecker0 = new SimplePointChecker<PointValuePair>(931.0, (-2235.9569792686784));
      CMAESOptimizer cMAESOptimizer0 = new CMAESOptimizer(397, 1.0E-12, false, 1166, 886, well44497a0, false, simplePointChecker0);
      SimpleBounds simpleBounds0 = new SimpleBounds(doubleArray0, doubleArray0);
      InitialGuess initialGuess0 = new InitialGuess(doubleArray0);
      OptimizationData[] optimizationDataArray0 = new OptimizationData[5];
      optimizationDataArray0[0] = (OptimizationData) cMAESOptimizer_Sigma0;
      optimizationDataArray0[1] = (OptimizationData) simpleBounds0;
      optimizationDataArray0[3] = (OptimizationData) initialGuess0;
      // Undeclared exception!
//      try { 
        cMAESOptimizer0.optimize(optimizationDataArray0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizer", e);
//      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      CMAESOptimizer.Sigma cMAESOptimizer_Sigma0 = new CMAESOptimizer.Sigma(doubleArray0);
      Well44497a well44497a0 = new Well44497a();
      SimplePointChecker<PointValuePair> simplePointChecker0 = new SimplePointChecker<PointValuePair>(397, 397, 397);
      CMAESOptimizer cMAESOptimizer0 = new CMAESOptimizer(30, 30, false, 397, 886, well44497a0, false, simplePointChecker0);
      double[] doubleArray1 = new double[9];
      InitialGuess initialGuess0 = new InitialGuess(doubleArray1);
      OptimizationData[] optimizationDataArray0 = new OptimizationData[2];
      optimizationDataArray0[0] = (OptimizationData) cMAESOptimizer_Sigma0;
      optimizationDataArray0[1] = (OptimizationData) initialGuess0;
      // Undeclared exception!
//      try { 
        cMAESOptimizer0.parseOptimizationData(optimizationDataArray0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // 1 != 9
//         //
//         verifyException("org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizer", e);
//      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      CMAESOptimizer.PopulationSize cMAESOptimizer_PopulationSize0 = new CMAESOptimizer.PopulationSize(397);
      Well44497a well44497a0 = new Well44497a();
      SimplePointChecker<PointValuePair> simplePointChecker0 = new SimplePointChecker<PointValuePair>(931.0, (-2235.9569792686784));
      CMAESOptimizer cMAESOptimizer0 = new CMAESOptimizer(397, 1.0E-12, false, 1166, 886, well44497a0, false, simplePointChecker0);
      OptimizationData[] optimizationDataArray0 = new OptimizationData[6];
      optimizationDataArray0[3] = (OptimizationData) cMAESOptimizer_PopulationSize0;
      // Undeclared exception!
//      try { 
        cMAESOptimizer0.optimize(optimizationDataArray0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizer", e);
//      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      CMAESOptimizer.PopulationSize cMAESOptimizer_PopulationSize0 = null;
//      try {
        cMAESOptimizer_PopulationSize0 = new CMAESOptimizer.PopulationSize((-333));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // -333 is smaller than, or equal to, the minimum (0)
//         //
//         verifyException("org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizer$PopulationSize", e);
//      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[1] = (-870.5364853949798);
      CMAESOptimizer.Sigma cMAESOptimizer_Sigma0 = null;
//      try {
        cMAESOptimizer_Sigma0 = new CMAESOptimizer.Sigma(doubleArray0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // -870.536 is smaller than the minimum (0)
//         //
//         verifyException("org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizer$Sigma", e);
//      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      CMAESOptimizer.Sigma cMAESOptimizer_Sigma0 = new CMAESOptimizer.Sigma(doubleArray0);
      double[] doubleArray1 = cMAESOptimizer_Sigma0.getSigma();
      assertNotSame(doubleArray1, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      JDKRandomGenerator jDKRandomGenerator0 = new JDKRandomGenerator();
      SimpleValueChecker simpleValueChecker0 = new SimpleValueChecker((-2.0), 470.283, 2188);
      CMAESOptimizer cMAESOptimizer0 = new CMAESOptimizer(2188, (-1475.73829), false, 2188, 2188, jDKRandomGenerator0, true, simpleValueChecker0);
      List<RealMatrix> list0 = cMAESOptimizer0.getStatisticsMeanHistory();
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      JDKRandomGenerator jDKRandomGenerator0 = new JDKRandomGenerator();
      SimpleValueChecker simpleValueChecker0 = new SimpleValueChecker((-2.0), 470.283, 2188);
      CMAESOptimizer cMAESOptimizer0 = new CMAESOptimizer(2188, (-1475.73829), false, 2188, 2188, jDKRandomGenerator0, true, simpleValueChecker0);
      List<Double> list0 = cMAESOptimizer0.getStatisticsFitnessHistory();
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Well44497b well44497b0 = new Well44497b(1061);
      SimpleValueChecker simpleValueChecker0 = new SimpleValueChecker(1061, 941, 1756);
      CMAESOptimizer cMAESOptimizer0 = new CMAESOptimizer(0, 0, true, 1756, 32, well44497b0, true, simpleValueChecker0);
      List<RealMatrix> list0 = cMAESOptimizer0.getStatisticsDHistory();
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      int[] intArray0 = new int[7];
      Well19937c well19937c0 = new Well19937c(intArray0);
      CMAESOptimizer cMAESOptimizer0 = new CMAESOptimizer((-5824), (-5824), true, (-3086), 0, well19937c0, true, (ConvergenceChecker<PointValuePair>) null);
      List<Double> list0 = cMAESOptimizer0.getStatisticsSigmaHistory();
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      CMAESOptimizer.PopulationSize cMAESOptimizer_PopulationSize0 = new CMAESOptimizer.PopulationSize(397);
      int int0 = cMAESOptimizer_PopulationSize0.getPopulationSize();
      assertEquals(397, int0);
  }
}
