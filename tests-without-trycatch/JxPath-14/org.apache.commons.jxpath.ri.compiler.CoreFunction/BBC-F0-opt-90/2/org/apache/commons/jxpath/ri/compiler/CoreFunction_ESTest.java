/*
 * This file was automatically generated by EvoSuite
 * Thu Oct 14 05:40:29 GMT 2021
 */

package org.apache.commons.jxpath.ri.compiler;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Locale;
import org.apache.commons.jxpath.BasicNodeSet;
import org.apache.commons.jxpath.BasicVariables;
import org.apache.commons.jxpath.JXPathContext;
import org.apache.commons.jxpath.NodeSet;
import org.apache.commons.jxpath.Pointer;
import org.apache.commons.jxpath.Variables;
import org.apache.commons.jxpath.ri.EvalContext;
import org.apache.commons.jxpath.ri.JXPathContextReferenceImpl;
import org.apache.commons.jxpath.ri.NamespaceResolver;
import org.apache.commons.jxpath.ri.QName;
import org.apache.commons.jxpath.ri.axes.AncestorContext;
import org.apache.commons.jxpath.ri.axes.AttributeContext;
import org.apache.commons.jxpath.ri.axes.ChildContext;
import org.apache.commons.jxpath.ri.axes.DescendantContext;
import org.apache.commons.jxpath.ri.axes.InitialContext;
import org.apache.commons.jxpath.ri.axes.NamespaceContext;
import org.apache.commons.jxpath.ri.axes.NodeSetContext;
import org.apache.commons.jxpath.ri.axes.ParentContext;
import org.apache.commons.jxpath.ri.axes.PrecedingOrFollowingContext;
import org.apache.commons.jxpath.ri.axes.PredicateContext;
import org.apache.commons.jxpath.ri.axes.RootContext;
import org.apache.commons.jxpath.ri.axes.SelfContext;
import org.apache.commons.jxpath.ri.axes.UnionContext;
import org.apache.commons.jxpath.ri.compiler.Constant;
import org.apache.commons.jxpath.ri.compiler.CoreFunction;
import org.apache.commons.jxpath.ri.compiler.CoreOperationAdd;
import org.apache.commons.jxpath.ri.compiler.CoreOperationAnd;
import org.apache.commons.jxpath.ri.compiler.CoreOperationDivide;
import org.apache.commons.jxpath.ri.compiler.CoreOperationEqual;
import org.apache.commons.jxpath.ri.compiler.CoreOperationGreaterThan;
import org.apache.commons.jxpath.ri.compiler.CoreOperationGreaterThanOrEqual;
import org.apache.commons.jxpath.ri.compiler.CoreOperationLessThan;
import org.apache.commons.jxpath.ri.compiler.CoreOperationLessThanOrEqual;
import org.apache.commons.jxpath.ri.compiler.CoreOperationMod;
import org.apache.commons.jxpath.ri.compiler.CoreOperationMultiply;
import org.apache.commons.jxpath.ri.compiler.CoreOperationNegate;
import org.apache.commons.jxpath.ri.compiler.CoreOperationNotEqual;
import org.apache.commons.jxpath.ri.compiler.CoreOperationOr;
import org.apache.commons.jxpath.ri.compiler.CoreOperationSubtract;
import org.apache.commons.jxpath.ri.compiler.CoreOperationUnion;
import org.apache.commons.jxpath.ri.compiler.Expression;
import org.apache.commons.jxpath.ri.compiler.ExpressionPath;
import org.apache.commons.jxpath.ri.compiler.ExtensionFunction;
import org.apache.commons.jxpath.ri.compiler.LocationPath;
import org.apache.commons.jxpath.ri.compiler.NameAttributeTest;
import org.apache.commons.jxpath.ri.compiler.NodeNameTest;
import org.apache.commons.jxpath.ri.compiler.NodeTest;
import org.apache.commons.jxpath.ri.compiler.NodeTypeTest;
import org.apache.commons.jxpath.ri.compiler.ProcessingInstructionTest;
import org.apache.commons.jxpath.ri.compiler.Step;
import org.apache.commons.jxpath.ri.compiler.VariableReference;
import org.apache.commons.jxpath.ri.model.NodePointer;
import org.apache.commons.jxpath.ri.model.VariablePointer;
import org.apache.commons.jxpath.ri.model.VariablePointerFactory;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class CoreFunction_ESTest extends CoreFunction_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      FileSystemHandling.shouldAllThrowIOExceptions();
      CoreFunction coreFunction0 = new CoreFunction(9, expressionArray0);
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("");
      BasicNodeSet basicNodeSet0 = new BasicNodeSet();
      NodeSetContext nodeSetContext0 = new NodeSetContext((EvalContext) null, basicNodeSet0);
      nodeSetContext0.getSingleNodePointer();
      AncestorContext ancestorContext0 = new AncestorContext(nodeSetContext0, true, processingInstructionTest0);
      nodeSetContext0.nextSet();
      CoreFunction coreFunction1 = new CoreFunction((byte)29, expressionArray0);
      coreFunction0.getArgumentCount();
      coreFunction1.getArgumentCount();
      coreFunction0.toString();
      coreFunction1.computeContextDependent();
      // Undeclared exception!
//      try { 
        coreFunction0.functionName(nodeSetContext0);
//        fail("Expecting exception: IndexOutOfBoundsException");
      
//      } catch(IndexOutOfBoundsException e) {
//         //
//         // Index: 0, Size: 0
//         //
//         verifyException("java.util.ArrayList", e);
//      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      QName qName0 = new QName("5W-2`JwC~U|3X?");
      VariableReference variableReference0 = new VariableReference(qName0);
      NameAttributeTest nameAttributeTest0 = new NameAttributeTest(variableReference0, variableReference0);
      expressionArray0[0] = (Expression) nameAttributeTest0;
      CoreFunction coreFunction0 = new CoreFunction(510, expressionArray0);
      JXPathContext jXPathContext0 = JXPathContext.newContext((Object) variableReference0);
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, (String) null);
      AncestorContext ancestorContext0 = new AncestorContext((EvalContext) null, false, nodeNameTest0);
      Locale locale0 = Locale.PRC;
      NodePointer nodePointer0 = NodePointer.newNodePointer(qName0, ancestorContext0, locale0);
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = new JXPathContextReferenceImpl(jXPathContext0, nameAttributeTest0, nodePointer0);
      NamespaceContext namespaceContext0 = new NamespaceContext((EvalContext) null, nodeNameTest0);
      namespaceContext0.getCurrentNodePointer();
      RootContext rootContext0 = new RootContext(jXPathContextReferenceImpl0, (NodePointer) null);
      // Undeclared exception!
//      try { 
        coreFunction0.functionID(rootContext0);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // Cannot find an element by ID - no IdentityManager has been specified
//         //
//         verifyException("org.apache.commons.jxpath.JXPathContext", e);
//      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction((-74), (Expression[]) null);
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = mock(JXPathContextReferenceImpl.class, new ViolatedAssumptionAnswer());
      doReturn((NamespaceResolver) null, (NamespaceResolver) null).when(jXPathContextReferenceImpl0).getNamespaceResolver();
      QName qName0 = new QName("=w'^K20Kv=]xu=W", "=w'^K20Kv=]xu=W");
      VariablePointer variablePointer0 = new VariablePointer(qName0);
      RootContext rootContext0 = new RootContext(jXPathContextReferenceImpl0, variablePointer0);
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(Integer.MIN_VALUE);
      AncestorContext ancestorContext0 = new AncestorContext(rootContext0, true, nodeTypeTest0);
      EvalContext evalContext0 = rootContext0.getConstantContext(ancestorContext0);
      // Undeclared exception!
//      try { 
        coreFunction0.functionNumber(evalContext0);
//        fail("Expecting exception: UnsupportedOperationException");
      
//      } catch(UnsupportedOperationException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.jxpath.ri.axes.RootContext", e);
//      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Byte byte0 = new Byte((byte)40);
      Constant constant0 = new Constant(byte0);
      CoreFunction coreFunction0 = new CoreFunction(126, (Expression[]) null);
      ChildContext childContext0 = new ChildContext((EvalContext) null, (NodeTest) null, true, false);
      JXPathContext jXPathContext0 = JXPathContext.newContext((Object) childContext0);
      QName qName0 = new QName("rGX8", (String) null);
      NodePointer nodePointer0 = NodePointer.newNodePointer(qName0, jXPathContext0, (Locale) null);
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = new JXPathContextReferenceImpl(jXPathContext0, childContext0, nodePointer0);
      RootContext rootContext0 = new RootContext(jXPathContextReferenceImpl0, nodePointer0);
      coreFunction0.functionLocalName(rootContext0);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Constant constant0 = new Constant("EjUO");
      CoreOperationSubtract coreOperationSubtract0 = new CoreOperationSubtract(constant0, constant0);
      Expression[] expressionArray0 = new Expression[0];
      coreOperationSubtract0.args = expressionArray0;
      Expression[] expressionArray1 = new Expression[3];
      expressionArray1[0] = (Expression) constant0;
      expressionArray1[1] = (Expression) constant0;
      expressionArray1[2] = (Expression) coreOperationSubtract0;
      constant0.toString();
      CoreFunction coreFunction0 = new CoreFunction(30, expressionArray1);
      // Undeclared exception!
//      try { 
        coreFunction0.functionTranslate((EvalContext) null);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 0
//         //
//         verifyException("org.apache.commons.jxpath.ri.compiler.CoreOperationSubtract", e);
//      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(5, expressionArray0);
      JXPathContext jXPathContext0 = JXPathContext.newContext((Object) coreFunction0);
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = new JXPathContextReferenceImpl(jXPathContext0, jXPathContext0, (Pointer) null);
      QName qName0 = new QName((String) null, (String) null);
      VariablePointer variablePointer0 = new VariablePointer(qName0);
      RootContext rootContext0 = new RootContext(jXPathContextReferenceImpl0, variablePointer0);
      EvalContext[] evalContextArray0 = new EvalContext[4];
      evalContextArray0[0] = (EvalContext) rootContext0;
      evalContextArray0[1] = (EvalContext) rootContext0;
      evalContextArray0[2] = (EvalContext) rootContext0;
      evalContextArray0[3] = (EvalContext) rootContext0;
      UnionContext unionContext0 = new UnionContext(rootContext0, evalContextArray0);
      // Undeclared exception!
//      try { 
        coreFunction0.functionLocalName(unionContext0);
//        fail("Expecting exception: UnsupportedOperationException");
      
//      } catch(UnsupportedOperationException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.jxpath.ri.axes.RootContext", e);
//      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Constant constant0 = new Constant("B6.-6;}n|zf$/m");
      CoreOperationSubtract coreOperationSubtract0 = new CoreOperationSubtract(constant0, constant0);
      Expression[] expressionArray0 = new Expression[3];
      expressionArray0[0] = (Expression) constant0;
      expressionArray0[1] = (Expression) constant0;
      expressionArray0[2] = (Expression) coreOperationSubtract0;
      CoreFunction coreFunction0 = new CoreFunction(54, expressionArray0);
      coreFunction0.functionTranslate((EvalContext) null);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[7];
      CoreOperationAnd coreOperationAnd0 = new CoreOperationAnd(expressionArray0);
      expressionArray0[0] = (Expression) coreOperationAnd0;
      CoreOperationUnion coreOperationUnion0 = new CoreOperationUnion(expressionArray0);
      expressionArray0[1] = (Expression) coreOperationUnion0;
      Step[] stepArray0 = new Step[2];
      QName qName0 = new QName("-");
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
      Step step0 = new Step((-322), nodeNameTest0, expressionArray0);
      stepArray0[0] = step0;
      Step step1 = new Step(906, nodeNameTest0, expressionArray0);
      stepArray0[1] = step1;
      ExpressionPath expressionPath0 = new ExpressionPath(expressionArray0[0], expressionArray0, stepArray0);
      CoreOperationGreaterThanOrEqual coreOperationGreaterThanOrEqual0 = new CoreOperationGreaterThanOrEqual(coreOperationUnion0, expressionPath0);
      expressionArray0[2] = (Expression) coreOperationGreaterThanOrEqual0;
      CoreOperationEqual coreOperationEqual0 = new CoreOperationEqual(expressionArray0[1], coreOperationUnion0);
      expressionArray0[3] = (Expression) coreOperationEqual0;
      CoreOperationNotEqual coreOperationNotEqual0 = new CoreOperationNotEqual(expressionArray0[1], expressionArray0[0]);
      expressionArray0[4] = (Expression) coreOperationNotEqual0;
      CoreOperationOr coreOperationOr0 = new CoreOperationOr(expressionArray0);
      expressionArray0[5] = (Expression) coreOperationOr0;
      Step[] stepArray1 = new Step[2];
      stepArray1[0] = step1;
      Step step2 = new Step(820, nodeNameTest0, expressionArray0);
      stepArray1[1] = step2;
      LocationPath locationPath0 = new LocationPath(true, stepArray1);
      expressionArray0[6] = (Expression) locationPath0;
      CoreFunction coreFunction0 = new CoreFunction(820, expressionArray0);
      EvalContext[] evalContextArray0 = new EvalContext[0];
      UnionContext unionContext0 = new UnionContext((EvalContext) null, evalContextArray0);
      ParentContext parentContext0 = new ParentContext(unionContext0, nodeNameTest0);
      PrecedingOrFollowingContext precedingOrFollowingContext0 = new PrecedingOrFollowingContext(parentContext0, nodeNameTest0, true);
      // Undeclared exception!
      coreFunction0.functionRound(precedingOrFollowingContext0);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(363, (Expression[]) null);
      JXPathContext jXPathContext0 = JXPathContext.newContext((Object) coreFunction0);
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = mock(JXPathContextReferenceImpl.class, new ViolatedAssumptionAnswer());
      RootContext rootContext0 = new RootContext(jXPathContextReferenceImpl0, (NodePointer) null);
      QName qName0 = new QName("(", (String) null);
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, (String) null);
      SelfContext selfContext0 = new SelfContext(rootContext0, nodeNameTest0);
      JXPathContextReferenceImpl jXPathContextReferenceImpl1 = new JXPathContextReferenceImpl(jXPathContext0, selfContext0, (Pointer) null);
      EvalContext evalContext0 = jXPathContextReferenceImpl1.getAbsoluteRootContext();
      // Undeclared exception!
//      try { 
        coreFunction0.functionString(evalContext0);
//        fail("Expecting exception: UnsupportedOperationException");
      
//      } catch(UnsupportedOperationException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.jxpath.ri.axes.RootContext", e);
//      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[3];
      Short short0 = new Short((short)2652);
      Constant constant0 = new Constant(short0);
      expressionArray0[0] = (Expression) constant0;
      Constant constant1 = new Constant(short0);
      expressionArray0[1] = (Expression) constant1;
      CoreOperationEqual coreOperationEqual0 = new CoreOperationEqual(constant0, expressionArray0[1]);
      expressionArray0[2] = (Expression) coreOperationEqual0;
      CoreFunction coreFunction0 = new CoreFunction((-2099), expressionArray0);
      QName qName0 = new QName("9yB]]~V<#)EDIq1=%", "9yB]]~V<#)EDIq1=%");
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
      DescendantContext descendantContext0 = new DescendantContext((EvalContext) null, true, nodeNameTest0);
      EvalContext[] evalContextArray0 = new EvalContext[9];
      AttributeContext attributeContext0 = new AttributeContext((EvalContext) null, nodeNameTest0);
      evalContextArray0[0] = (EvalContext) attributeContext0;
      evalContextArray0[1] = (EvalContext) descendantContext0;
      evalContextArray0[2] = null;
      evalContextArray0[3] = (EvalContext) descendantContext0;
      evalContextArray0[4] = (EvalContext) descendantContext0;
      evalContextArray0[5] = (EvalContext) descendantContext0;
      evalContextArray0[6] = (EvalContext) descendantContext0;
      NamespaceContext namespaceContext0 = new NamespaceContext((EvalContext) null, nodeNameTest0);
      evalContextArray0[7] = (EvalContext) namespaceContext0;
      evalContextArray0[8] = (EvalContext) descendantContext0;
      UnionContext unionContext0 = new UnionContext(descendantContext0, evalContextArray0);
      ParentContext parentContext0 = new ParentContext(unionContext0, nodeNameTest0);
      coreFunction0.functionTranslate(parentContext0);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      AttributeContext attributeContext0 = new AttributeContext((EvalContext) null, (NodeTest) null);
      Expression[] expressionArray0 = new Expression[1];
      CoreFunction coreFunction0 = new CoreFunction(2784, expressionArray0);
      CoreOperationMod coreOperationMod0 = new CoreOperationMod(coreFunction0, coreFunction0);
      expressionArray0[0] = (Expression) coreOperationMod0;
      CoreFunction coreFunction1 = new CoreFunction(2784, expressionArray0);
      // Undeclared exception!
//      try { 
        coreFunction0.functionLocalName((EvalContext) null);
//        fail("Expecting exception: ArithmeticException");
      
//      } catch(ArithmeticException e) {
//         //
//         // / by zero
//         //
//         verifyException("org.apache.commons.jxpath.ri.compiler.CoreOperationMod", e);
//      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[9];
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd(expressionArray0);
      expressionArray0[0] = (Expression) coreOperationAdd0;
      CoreOperationDivide coreOperationDivide0 = new CoreOperationDivide(coreOperationAdd0, expressionArray0[0]);
      expressionArray0[1] = (Expression) coreOperationDivide0;
      Constant constant0 = new Constant((String) null);
      expressionArray0[2] = (Expression) constant0;
      CoreOperationGreaterThan coreOperationGreaterThan0 = new CoreOperationGreaterThan(coreOperationDivide0, constant0);
      expressionArray0[3] = (Expression) coreOperationGreaterThan0;
      CoreOperationEqual coreOperationEqual0 = new CoreOperationEqual(coreOperationGreaterThan0, expressionArray0[2]);
      expressionArray0[4] = (Expression) coreOperationEqual0;
      CoreOperationDivide coreOperationDivide1 = new CoreOperationDivide(expressionArray0[1], expressionArray0[4]);
      expressionArray0[5] = (Expression) coreOperationDivide1;
      Step[] stepArray0 = new Step[2];
      QName qName0 = new QName("N", (String) null);
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, "N7*XikuAExl");
      Step step0 = new Step(14, nodeNameTest0, expressionArray0);
      stepArray0[0] = step0;
      Step step1 = new Step(2498, nodeNameTest0, expressionArray0);
      stepArray0[1] = step1;
      LocationPath locationPath0 = new LocationPath(false, stepArray0);
      expressionArray0[6] = (Expression) locationPath0;
      VariableReference variableReference0 = new VariableReference(qName0);
      expressionArray0[7] = (Expression) variableReference0;
      CoreOperationNotEqual coreOperationNotEqual0 = new CoreOperationNotEqual((Expression) null, constant0);
      expressionArray0[8] = (Expression) coreOperationNotEqual0;
      CoreFunction coreFunction0 = new CoreFunction((-422), expressionArray0);
      // Undeclared exception!
      coreFunction0.functionFloor((EvalContext) null);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Constant constant0 = new Constant("/.");
      EvalContext evalContext0 = null;
      CoreOperationSubtract coreOperationSubtract0 = new CoreOperationSubtract(constant0, constant0);
      Expression[] expressionArray0 = new Expression[2];
      expressionArray0[0] = (Expression) coreOperationSubtract0;
      CoreOperationMod coreOperationMod0 = new CoreOperationMod(expressionArray0[0], expressionArray0[0]);
      expressionArray0[1] = (Expression) coreOperationMod0;
      CoreFunction coreFunction0 = new CoreFunction(192, expressionArray0);
      // Undeclared exception!
//      try { 
        coreFunction0.functionSubstringAfter((EvalContext) null);
//        fail("Expecting exception: ArithmeticException");
      
//      } catch(ArithmeticException e) {
//         //
//         // / by zero
//         //
//         verifyException("org.apache.commons.jxpath.ri.compiler.CoreOperationMod", e);
//      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction((-70), (Expression[]) null);
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = mock(JXPathContextReferenceImpl.class, new ViolatedAssumptionAnswer());
      doReturn((NamespaceResolver) null).when(jXPathContextReferenceImpl0).getNamespaceResolver();
      CoreFunction coreFunction1 = new CoreFunction(73, (Expression[]) null);
      BasicVariables basicVariables0 = new BasicVariables();
      QName qName0 = new QName("^>b-&!)nDOPg4zL0>1I", "^>b-&!)nDOPg4zL0>1I");
      VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
      RootContext rootContext0 = new RootContext(jXPathContextReferenceImpl0, variablePointer0);
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(73);
      SelfContext selfContext0 = new SelfContext(rootContext0, nodeTypeTest0);
      // Undeclared exception!
//      try { 
        coreFunction1.functionLast(selfContext0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // No such variable: '^>b-&!)nDOPg4zL0>1I:^>b-&!)nDOPg4zL0>1I'
//         //
//         verifyException("org.apache.commons.jxpath.BasicVariables", e);
//      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Double double0 = Expression.ZERO;
      Constant constant0 = new Constant(double0);
      EvalContext evalContext0 = null;
      Expression[] expressionArray0 = new Expression[1];
      CoreOperationUnion coreOperationUnion0 = new CoreOperationUnion(expressionArray0);
      expressionArray0[0] = (Expression) coreOperationUnion0;
      CoreFunction coreFunction0 = new CoreFunction(4, expressionArray0);
      CoreFunction coreFunction1 = new CoreFunction((-1718), expressionArray0);
      // Undeclared exception!
//      try { 
        coreFunction0.functionFloor((EvalContext) null);
//        fail("Expecting exception: StackOverflowError");
      
//      } catch(StackOverflowError e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(128, expressionArray0);
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = mock(JXPathContextReferenceImpl.class, new ViolatedAssumptionAnswer());
      doReturn((Locale) null).when(jXPathContextReferenceImpl0).getLocale();
      doReturn((NamespaceResolver) null, (NamespaceResolver) null).when(jXPathContextReferenceImpl0).getNamespaceResolver();
      VariablePointer variablePointer0 = new VariablePointer((QName) null);
      RootContext rootContext0 = new RootContext(jXPathContextReferenceImpl0, variablePointer0);
      JXPathContext jXPathContext0 = rootContext0.getJXPathContext();
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(Integer.MIN_VALUE);
      ParentContext parentContext0 = new ParentContext(rootContext0, nodeTypeTest0);
      ChildContext childContext0 = new ChildContext(parentContext0, nodeTypeTest0, false, true);
      childContext0.getCurrentNodePointer();
      JXPathContextReferenceImpl jXPathContextReferenceImpl1 = new JXPathContextReferenceImpl(jXPathContext0, parentContext0, (Pointer) null);
      EvalContext evalContext0 = jXPathContextReferenceImpl1.getAbsoluteRootContext();
      // Undeclared exception!
//      try { 
        coreFunction0.functionStringLength(evalContext0);
//        fail("Expecting exception: UnsupportedOperationException");
      
//      } catch(UnsupportedOperationException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.jxpath.ri.axes.RootContext", e);
//      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "^nF)zYPL");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Expression[] expressionArray0 = new Expression[2];
      CoreOperationUnion coreOperationUnion0 = new CoreOperationUnion(expressionArray0);
      expressionArray0[0] = (Expression) coreOperationUnion0;
      Step[] stepArray0 = new Step[7];
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(13);
      Step step0 = new Step(0, nodeTypeTest0, expressionArray0);
      stepArray0[0] = step0;
      Step step1 = new Step(0, nodeTypeTest0, expressionArray0);
      stepArray0[1] = step1;
      Step step2 = new Step((-2074), nodeTypeTest0, expressionArray0);
      stepArray0[2] = step2;
      Step step3 = new Step(63, nodeTypeTest0, expressionArray0);
      stepArray0[5] = step3;
      Step step4 = new Step(63, nodeTypeTest0, expressionArray0);
      stepArray0[4] = step4;
      Step step5 = new Step(63, nodeTypeTest0, expressionArray0);
      stepArray0[5] = step5;
      Step step6 = new Step(63, nodeTypeTest0, expressionArray0);
      stepArray0[6] = step6;
      ExpressionPath expressionPath0 = new ExpressionPath(expressionArray0[0], expressionArray0, stepArray0);
      expressionArray0[1] = (Expression) expressionPath0;
      CoreFunction coreFunction0 = new CoreFunction(63, expressionArray0);
      ExpressionPath expressionPath1 = new ExpressionPath(expressionPath0, expressionArray0, stepArray0);
      ParentContext parentContext0 = new ParentContext((EvalContext) null, nodeTypeTest0);
      SelfContext selfContext0 = new SelfContext(parentContext0, nodeTypeTest0);
      expressionPath1.createContextForStep(selfContext0, 0, nodeTypeTest0);
      DescendantContext descendantContext0 = new DescendantContext((EvalContext) null, true, nodeTypeTest0);
      coreFunction0.compute(descendantContext0);
      // Undeclared exception!
      coreFunction0.functionCeiling((EvalContext) null);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction((-70), (Expression[]) null);
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = mock(JXPathContextReferenceImpl.class, new ViolatedAssumptionAnswer());
      doReturn((NamespaceResolver) null).when(jXPathContextReferenceImpl0).getNamespaceResolver();
      BasicVariables basicVariables0 = new BasicVariables();
      QName qName0 = new QName("?Lm=H_$c!");
      VariablePointer variablePointer0 = new VariablePointer(qName0);
      CoreFunction coreFunction1 = new CoreFunction((-70), (Expression[]) null);
      RootContext rootContext0 = new RootContext(jXPathContextReferenceImpl0, variablePointer0);
      EvalContext[] evalContextArray0 = new EvalContext[7];
      evalContextArray0[0] = (EvalContext) rootContext0;
      evalContextArray0[1] = (EvalContext) rootContext0;
      evalContextArray0[2] = (EvalContext) rootContext0;
      evalContextArray0[3] = (EvalContext) rootContext0;
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("id");
      ParentContext parentContext0 = new ParentContext(evalContextArray0[2], processingInstructionTest0);
      evalContextArray0[4] = (EvalContext) parentContext0;
      evalContextArray0[5] = (EvalContext) rootContext0;
      evalContextArray0[5] = (EvalContext) rootContext0;
      UnionContext unionContext0 = new UnionContext(rootContext0, evalContextArray0);
      // Undeclared exception!
//      try { 
        coreFunction0.functionNamespaceURI(unionContext0);
//        fail("Expecting exception: UnsupportedOperationException");
      
//      } catch(UnsupportedOperationException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.jxpath.ri.axes.RootContext", e);
//      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Double double0 = Expression.ONE;
      Constant constant0 = new Constant(double0);
      EvalContext evalContext0 = null;
      Expression[] expressionArray0 = new Expression[5];
      expressionArray0[0] = (Expression) constant0;
      CoreOperationGreaterThanOrEqual coreOperationGreaterThanOrEqual0 = new CoreOperationGreaterThanOrEqual(expressionArray0[0], constant0);
      Step[] stepArray0 = new Step[6];
      int int0 = 3022;
      QName qName0 = new QName("substring-after");
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
      Step step0 = new Step(3022, nodeNameTest0, expressionArray0);
      stepArray0[0] = step0;
      Step step1 = new Step((-2808), nodeNameTest0, expressionArray0);
      stepArray0[1] = step1;
      stepArray0[2] = step1;
      Step step2 = new Step((-2808), nodeNameTest0, expressionArray0);
      stepArray0[3] = step2;
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest((-2808));
      Step step3 = new Step(3022, nodeTypeTest0, expressionArray0);
      stepArray0[4] = step3;
      NodeNameTest nodeNameTest1 = new NodeNameTest(qName0, "substring-after");
      Step step4 = new Step((-2808), nodeNameTest1, expressionArray0);
      stepArray0[5] = step4;
      ExpressionPath expressionPath0 = new ExpressionPath(coreOperationGreaterThanOrEqual0, expressionArray0, stepArray0);
      expressionArray0[1] = (Expression) expressionPath0;
      expressionArray0[2] = (Expression) constant0;
      expressionArray0[3] = (Expression) constant0;
      expressionArray0[4] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction((-2808), expressionArray0);
      // Undeclared exception!
      coreFunction0.functionCount((EvalContext) null);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Constant constant0 = new Constant("jUO");
      CoreOperationSubtract coreOperationSubtract0 = new CoreOperationSubtract(constant0, constant0);
      Expression[] expressionArray0 = new Expression[6];
      expressionArray0[0] = (Expression) constant0;
      expressionArray0[1] = (Expression) constant0;
      expressionArray0[2] = (Expression) coreOperationSubtract0;
      expressionArray0[3] = (Expression) constant0;
      expressionArray0[4] = (Expression) constant0;
      Step[] stepArray0 = new Step[5];
      NodeNameTest nodeNameTest0 = new NodeNameTest((QName) null);
      Step step0 = new Step(1293, nodeNameTest0, expressionArray0);
      stepArray0[0] = step0;
      NodeNameTest nodeNameTest1 = new NodeNameTest((QName) null, "true()");
      Step step1 = new Step(71, nodeNameTest1, expressionArray0);
      stepArray0[1] = step1;
      Step step2 = new Step(1293, nodeNameTest1, expressionArray0);
      stepArray0[2] = step2;
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("Invalid argument type for 'sum': ");
      Step step3 = new Step(1293, processingInstructionTest0, expressionArray0);
      stepArray0[3] = step3;
      ProcessingInstructionTest processingInstructionTest1 = new ProcessingInstructionTest("namespace-uri");
      Step step4 = new Step(1293, processingInstructionTest1, expressionArray0);
      stepArray0[4] = step4;
      ExpressionPath expressionPath0 = new ExpressionPath(coreOperationSubtract0, expressionArray0, stepArray0);
      expressionArray0[5] = (Expression) expressionPath0;
      CoreFunction coreFunction0 = new CoreFunction(1293, expressionArray0);
      // Undeclared exception!
      coreFunction0.functionKey((EvalContext) null);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Constant constant0 = new Constant("EjU#1T'L");
      CoreOperationSubtract coreOperationSubtract0 = new CoreOperationSubtract(constant0, constant0);
      Expression[] expressionArray0 = new Expression[3];
      expressionArray0[0] = (Expression) constant0;
      expressionArray0[1] = (Expression) constant0;
      expressionArray0[2] = (Expression) coreOperationSubtract0;
      CoreFunction coreFunction0 = new CoreFunction(30, expressionArray0);
      coreFunction0.functionTranslate((EvalContext) null);
      // Undeclared exception!
//      try { 
        coreFunction0.functionSum((EvalContext) null);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // Incorrect number of arguments: format-number('EjU#1T'L', 'EjU#1T'L', org.apache.commons.jxpath.ri.compiler.Constant@0000000001 - org.apache.commons.jxpath.ri.compiler.Constant@0000000001)
//         //
//         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Integer integer0 = new Integer((-80955399));
      Constant constant0 = new Constant(integer0);
      EvalContext evalContext0 = null;
      Expression[] expressionArray0 = new Expression[2];
      QName qName0 = new QName("count", "count");
      ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, expressionArray0);
      expressionArray0[0] = (Expression) extensionFunction0;
      expressionArray0[1] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction(2687, expressionArray0);
      // Undeclared exception!
//      try { 
        coreFunction0.functionNot((EvalContext) null);
//        fail("Expecting exception: StackOverflowError");
      
//      } catch(StackOverflowError e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd(expressionArray0);
      expressionArray0[0] = (Expression) coreOperationAdd0;
      CoreFunction coreFunction0 = new CoreFunction((-1608), expressionArray0);
      EvalContext evalContext0 = null;
      // Undeclared exception!
      coreFunction0.functionNot((EvalContext) null);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Expression[] expressionArray0 = new Expression[4];
      String string0 = null;
      QName qName0 = new QName((String) null, "IdNw4[FNf`cAj5");
      ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, expressionArray0);
      expressionArray0[0] = (Expression) extensionFunction0;
      CoreOperationOr coreOperationOr0 = new CoreOperationOr(expressionArray0);
      expressionArray0[1] = (Expression) coreOperationOr0;
      VariableReference variableReference0 = new VariableReference(qName0);
      expressionArray0[2] = (Expression) variableReference0;
      CoreOperationDivide coreOperationDivide0 = new CoreOperationDivide(coreOperationOr0, variableReference0);
      expressionArray0[3] = (Expression) coreOperationDivide0;
      CoreFunction coreFunction0 = new CoreFunction(654, expressionArray0);
      EvalContext evalContext0 = null;
      // Undeclared exception!
//      try { 
        coreFunction0.functionCeiling((EvalContext) null);
//        fail("Expecting exception: StackOverflowError");
      
//      } catch(StackOverflowError e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[7];
      CoreOperationAnd coreOperationAnd0 = new CoreOperationAnd(expressionArray0);
      expressionArray0[0] = (Expression) coreOperationAnd0;
      CoreOperationGreaterThanOrEqual coreOperationGreaterThanOrEqual0 = new CoreOperationGreaterThanOrEqual(coreOperationAnd0, coreOperationAnd0);
      expressionArray0[1] = (Expression) coreOperationGreaterThanOrEqual0;
      CoreOperationOr coreOperationOr0 = new CoreOperationOr(expressionArray0);
      expressionArray0[2] = (Expression) coreOperationOr0;
      CoreOperationGreaterThan coreOperationGreaterThan0 = new CoreOperationGreaterThan(expressionArray0[0], expressionArray0[1]);
      expressionArray0[3] = (Expression) coreOperationGreaterThan0;
      CoreOperationMod coreOperationMod0 = new CoreOperationMod(coreOperationAnd0, coreOperationGreaterThanOrEqual0);
      expressionArray0[4] = (Expression) coreOperationMod0;
      Step[] stepArray0 = new Step[3];
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest((-8));
      Step step0 = new Step(6, nodeTypeTest0, expressionArray0);
      stepArray0[0] = step0;
      Step step1 = new Step(26, nodeTypeTest0, expressionArray0);
      stepArray0[1] = step1;
      Step step2 = new Step(26, nodeTypeTest0, expressionArray0);
      stepArray0[2] = step2;
      LocationPath locationPath0 = new LocationPath(true, stepArray0);
      expressionArray0[5] = (Expression) locationPath0;
      CoreOperationAnd coreOperationAnd1 = new CoreOperationAnd(expressionArray0);
      CoreOperationNotEqual coreOperationNotEqual0 = new CoreOperationNotEqual(coreOperationAnd1, expressionArray0[1]);
      expressionArray0[6] = (Expression) coreOperationNotEqual0;
      CoreFunction coreFunction0 = new CoreFunction(26, expressionArray0);
      // Undeclared exception!
      coreFunction0.functionNormalizeSpace((EvalContext) null);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[8];
      CoreOperationUnion coreOperationUnion0 = new CoreOperationUnion(expressionArray0);
      CoreOperationGreaterThanOrEqual coreOperationGreaterThanOrEqual0 = new CoreOperationGreaterThanOrEqual(coreOperationUnion0, coreOperationUnion0);
      CoreOperationMod coreOperationMod0 = new CoreOperationMod(coreOperationGreaterThanOrEqual0, coreOperationUnion0);
      expressionArray0[0] = (Expression) coreOperationMod0;
      Expression[] expressionArray1 = new Expression[0];
      CoreOperationOr coreOperationOr0 = new CoreOperationOr(expressionArray1);
      expressionArray0[1] = (Expression) coreOperationOr0;
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd(expressionArray0);
      expressionArray0[2] = (Expression) coreOperationAdd0;
      CoreOperationUnion coreOperationUnion1 = new CoreOperationUnion(expressionArray1);
      expressionArray0[3] = (Expression) coreOperationUnion1;
      CoreOperationGreaterThanOrEqual coreOperationGreaterThanOrEqual1 = new CoreOperationGreaterThanOrEqual(coreOperationMod0, expressionArray0[2]);
      expressionArray0[4] = (Expression) coreOperationGreaterThanOrEqual1;
      Step[] stepArray0 = new Step[6];
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("");
      Step step0 = new Step(3500, processingInstructionTest0, expressionArray1);
      stepArray0[0] = step0;
      Expression[] expressionArray2 = new Expression[0];
      Step step1 = new Step(9, processingInstructionTest0, expressionArray2);
      stepArray0[1] = step1;
      Step step2 = new Step(9, processingInstructionTest0, expressionArray1);
      stepArray0[2] = step2;
      Step step3 = new Step((-127), processingInstructionTest0, expressionArray0);
      stepArray0[3] = step3;
      Step step4 = new Step(32, processingInstructionTest0, expressionArray2);
      stepArray0[4] = step4;
      Step step5 = new Step((-127), processingInstructionTest0, expressionArray1);
      stepArray0[5] = step5;
      LocationPath locationPath0 = new LocationPath(true, stepArray0);
      expressionArray0[5] = (Expression) locationPath0;
      CoreOperationSubtract coreOperationSubtract0 = new CoreOperationSubtract(locationPath0, expressionArray0[0]);
      expressionArray0[6] = (Expression) coreOperationSubtract0;
      CoreOperationNotEqual coreOperationNotEqual0 = new CoreOperationNotEqual(coreOperationAdd0, expressionArray0[4]);
      expressionArray0[7] = (Expression) coreOperationNotEqual0;
      CoreFunction coreFunction0 = new CoreFunction(3500, expressionArray0);
      ChildContext childContext0 = new ChildContext((EvalContext) null, processingInstructionTest0, true, true);
      // Undeclared exception!
      coreFunction0.functionNumber(childContext0);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Constant constant0 = new Constant("EjUO");
      CoreOperationSubtract coreOperationSubtract0 = new CoreOperationSubtract(constant0, constant0);
      Expression[] expressionArray0 = new Expression[3];
      expressionArray0[0] = (Expression) constant0;
      expressionArray0[1] = (Expression) constant0;
      expressionArray0[2] = (Expression) coreOperationSubtract0;
      CoreFunction coreFunction0 = new CoreFunction(30, expressionArray0);
      coreFunction0.functionTranslate((EvalContext) null);
      // Undeclared exception!
//      try { 
        coreFunction0.functionSum((EvalContext) null);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // Incorrect number of arguments: format-number('EjUO', 'EjUO', org.apache.commons.jxpath.ri.compiler.Constant@0000000001 - org.apache.commons.jxpath.ri.compiler.Constant@0000000001)
//         //
//         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Constant constant0 = new Constant("EjUO");
      EvalContext evalContext0 = null;
      CoreOperationSubtract coreOperationSubtract0 = new CoreOperationSubtract(constant0, constant0);
      Expression[] expressionArray0 = new Expression[3];
      expressionArray0[0] = (Expression) constant0;
      expressionArray0[1] = (Expression) constant0;
      expressionArray0[2] = (Expression) coreOperationSubtract0;
      CoreFunction coreFunction0 = new CoreFunction(30, expressionArray0);
      // Undeclared exception!
//      try { 
        coreFunction0.computeValue((EvalContext) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[4];
      QName qName0 = new QName("EjUO");
      ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, expressionArray0);
      expressionArray0[0] = (Expression) extensionFunction0;
      ExtensionFunction extensionFunction1 = new ExtensionFunction(qName0, expressionArray0);
      expressionArray0[1] = (Expression) extensionFunction1;
      ExtensionFunction extensionFunction2 = new ExtensionFunction(qName0, expressionArray0);
      expressionArray0[2] = (Expression) extensionFunction2;
      CoreOperationOr coreOperationOr0 = new CoreOperationOr(expressionArray0);
      expressionArray0[3] = (Expression) coreOperationOr0;
      CoreFunction coreFunction0 = new CoreFunction((-672), expressionArray0);
      // Undeclared exception!
//      try { 
        coreFunction0.functionNumber((EvalContext) null);
//        fail("Expecting exception: StackOverflowError");
      
//      } catch(StackOverflowError e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction((-70), (Expression[]) null);
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = mock(JXPathContextReferenceImpl.class, new ViolatedAssumptionAnswer());
      doReturn((NamespaceResolver) null).when(jXPathContextReferenceImpl0).getNamespaceResolver();
      QName qName0 = new QName("", "");
      VariablePointer variablePointer0 = new VariablePointer(qName0);
      RootContext rootContext0 = new RootContext(jXPathContextReferenceImpl0, variablePointer0);
      // Undeclared exception!
//      try { 
        coreFunction0.functionNumber(rootContext0);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // Undefined variable: :
//         //
//         verifyException("org.apache.commons.jxpath.ri.model.VariablePointer$1", e);
//      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      QName qName0 = new QName((String) null, (String) null);
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
      CoreFunction coreFunction0 = new CoreFunction(26, (Expression[]) null);
      CoreFunction coreFunction1 = new CoreFunction(26, (Expression[]) null);
      NodeNameTest nodeNameTest1 = new NodeNameTest(qName0, "%x1E}");
      SelfContext selfContext0 = new SelfContext((EvalContext) null, nodeNameTest1);
      CoreFunction coreFunction2 = new CoreFunction(26, (Expression[]) null);
      String string0 = coreFunction1.toString();
      assertEquals("ceiling()", string0);
      
      boolean boolean0 = coreFunction1.computeContextDependent();
      assertFalse(boolean0);
      
      coreFunction2.getArgumentCount();
      JXPathContext jXPathContext0 = JXPathContext.newContext((Object) null);
      JXPathContext jXPathContext1 = JXPathContext.newContext(jXPathContext0, (Object) jXPathContext0);
      NodePointer nodePointer0 = NodePointer.newNodePointer(qName0, nodeNameTest0, (Locale) null);
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = new JXPathContextReferenceImpl(jXPathContext1, selfContext0, nodePointer0);
      RootContext rootContext0 = new RootContext(jXPathContextReferenceImpl0, nodePointer0);
      QName qName1 = new QName((String) null, "ceiling()");
      EvalContext evalContext0 = rootContext0.getVariableContext(qName1);
      // Undeclared exception!
//      try { 
        coreFunction0.functionStringLength(evalContext0);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // Undefined variable: ceiling()
//         //
//         verifyException("org.apache.commons.jxpath.ri.model.VariablePointer$1", e);
//      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Constant constant0 = new Constant("EjUO");
      Expression[] expressionArray0 = new Expression[2];
      CoreOperationSubtract coreOperationSubtract0 = new CoreOperationSubtract(constant0, constant0);
      expressionArray0[0] = (Expression) coreOperationSubtract0;
      expressionArray0[1] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction((-5), expressionArray0);
      CoreFunction coreFunction1 = new CoreFunction(30, expressionArray0);
      // Undeclared exception!
//      try { 
        coreFunction1.computeValue((EvalContext) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(23, expressionArray0);
      JXPathContext jXPathContext0 = JXPathContext.newContext((Object) null);
      QName qName0 = new QName("substring", "0wS@cEcMY");
      VariablePointer variablePointer0 = new VariablePointer(qName0);
      variablePointer0.namespacePointer("0wS@cEcMY");
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = new JXPathContextReferenceImpl(jXPathContext0, coreFunction0, (Pointer) null);
      Variables variables0 = jXPathContextReferenceImpl0.getVariables();
      VariablePointer variablePointer1 = new VariablePointer(variables0, qName0);
      RootContext rootContext0 = new RootContext(jXPathContextReferenceImpl0, variablePointer0);
      coreFunction0.functionNamespaceURI(rootContext0);
      // Undeclared exception!
//      try { 
        coreFunction0.computeValue(rootContext0);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // Undefined variable: substring:0wS@cEcMY
//         //
//         verifyException("org.apache.commons.jxpath.ri.model.VariablePointer$1", e);
//      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[7];
      CoreOperationAnd coreOperationAnd0 = new CoreOperationAnd(expressionArray0);
      CoreOperationNegate coreOperationNegate0 = new CoreOperationNegate(coreOperationAnd0);
      CoreOperationMultiply coreOperationMultiply0 = new CoreOperationMultiply(coreOperationNegate0, coreOperationNegate0);
      expressionArray0[0] = (Expression) coreOperationMultiply0;
      Step[] stepArray0 = new Step[1];
      QName qName0 = new QName("?^tERKQR");
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
      Step step0 = new Step(663, nodeNameTest0, expressionArray0);
      stepArray0[0] = step0;
      LocationPath locationPath0 = new LocationPath(false, stepArray0);
      expressionArray0[1] = (Expression) locationPath0;
      CoreOperationNegate coreOperationNegate1 = new CoreOperationNegate(coreOperationNegate0);
      expressionArray0[2] = (Expression) coreOperationNegate1;
      LocationPath locationPath1 = new LocationPath(false, stepArray0);
      expressionArray0[3] = (Expression) locationPath1;
      ExpressionPath expressionPath0 = new ExpressionPath(coreOperationMultiply0, expressionArray0, stepArray0);
      expressionArray0[4] = (Expression) expressionPath0;
      CoreOperationGreaterThanOrEqual coreOperationGreaterThanOrEqual0 = new CoreOperationGreaterThanOrEqual(expressionArray0[0], expressionArray0[0]);
      expressionArray0[5] = (Expression) coreOperationGreaterThanOrEqual0;
      CoreOperationAnd coreOperationAnd1 = new CoreOperationAnd(expressionArray0);
      CoreOperationNotEqual coreOperationNotEqual0 = new CoreOperationNotEqual(coreOperationMultiply0, coreOperationAnd1);
      expressionArray0[6] = (Expression) coreOperationNotEqual0;
      CoreFunction coreFunction0 = new CoreFunction(41, expressionArray0);
      EvalContext evalContext0 = null;
      NamespaceContext namespaceContext0 = new NamespaceContext((EvalContext) null, nodeNameTest0);
      expressionPath0.createContextForStep(namespaceContext0, 663, nodeNameTest0);
      // Undeclared exception!
      coreFunction0.functionString((EvalContext) null);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, true);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Expression[] expressionArray0 = new Expression[2];
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "^p1nq#gzH=v");
      Step[] stepArray0 = new Step[4];
      QName qName0 = new QName("-1067-1067");
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, "-1067-1067");
      Step step0 = new Step(1409, nodeNameTest0, expressionArray0);
      stepArray0[0] = step0;
      Step step1 = new Step((-513), nodeNameTest0, expressionArray0);
      stepArray0[1] = step1;
      Step step2 = new Step(1409, nodeNameTest0, expressionArray0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      stepArray0[2] = step2;
      Step step3 = new Step((-513), nodeNameTest0, expressionArray0);
      stepArray0[3] = step3;
      LocationPath locationPath0 = new LocationPath(false, stepArray0);
      expressionArray0[0] = (Expression) locationPath0;
      CoreOperationOr coreOperationOr0 = new CoreOperationOr(expressionArray0);
      expressionArray0[1] = (Expression) coreOperationOr0;
      CoreFunction coreFunction0 = new CoreFunction((-513), expressionArray0);
      EvalContext evalContext0 = null;
      SelfContext selfContext0 = new SelfContext((EvalContext) null, nodeNameTest0);
      // Undeclared exception!
//      try { 
        coreFunction0.functionPosition(selfContext0);
//        fail("Expecting exception: StackOverflowError");
      
//      } catch(StackOverflowError e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Constant constant0 = new Constant("EjUO");
      Expression[] expressionArray0 = new Expression[2];
      CoreOperationSubtract coreOperationSubtract0 = new CoreOperationSubtract(constant0, constant0);
      expressionArray0[0] = (Expression) coreOperationSubtract0;
      expressionArray0[1] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction(30, expressionArray0);
      coreFunction0.computeContextDependent();
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(6, expressionArray0);
      // Undeclared exception!
//      try { 
        coreFunction0.computeValue((EvalContext) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Expression[] expressionArray0 = new Expression[2];
      CoreOperationAnd coreOperationAnd0 = new CoreOperationAnd(expressionArray0);
      CoreOperationEqual coreOperationEqual0 = new CoreOperationEqual(coreOperationAnd0, coreOperationAnd0);
      expressionArray0[0] = (Expression) coreOperationEqual0;
      CoreOperationLessThan coreOperationLessThan0 = new CoreOperationLessThan(coreOperationAnd0, expressionArray0[0]);
      expressionArray0[1] = (Expression) coreOperationLessThan0;
      CoreFunction coreFunction0 = new CoreFunction((-1233), expressionArray0);
      coreOperationLessThan0.toString();
      EvalContext evalContext0 = null;
      EvalContext[] evalContextArray0 = new EvalContext[6];
      evalContextArray0[0] = null;
      evalContextArray0[1] = null;
      // Undeclared exception!
//      try { 
        coreFunction0.functionKey((EvalContext) null);
//        fail("Expecting exception: StackOverflowError");
      
//      } catch(StackOverflowError e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Constant constant0 = new Constant("org.apache.commons.jxpath.JXPathContextFactoryConfigurationError");
      Expression[] expressionArray0 = new Expression[2];
      expressionArray0[0] = (Expression) constant0;
      expressionArray0[1] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction((byte)9, expressionArray0);
      JXPathContext jXPathContext0 = JXPathContext.newContext((Object) expressionArray0[0]);
      QName qName0 = new QName("org.apache.commons.jxpath.JXPathContextFactoryConfigurationError", "org.apache.commons.jxpath.JXPathContextFactoryConfigurationError");
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      NodePointer nodePointer0 = NodePointer.newNodePointer(qName0, constant0, locale0);
      NodePointer nodePointer1 = NodePointer.newChildNodePointer(nodePointer0, qName0, coreFunction0);
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = new JXPathContextReferenceImpl(jXPathContext0, coreFunction0, nodePointer1);
      RootContext rootContext0 = new RootContext(jXPathContextReferenceImpl0, nodePointer1);
      coreFunction0.compute(rootContext0);
      // Undeclared exception!
//      try { 
        coreFunction0.functionKey(rootContext0);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // Cannot find an element by key - no KeyManager has been specified
//         //
//         verifyException("org.apache.commons.jxpath.JXPathContext", e);
//      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[2];
      EvalContext evalContext0 = null;
      Expression[] expressionArray1 = new Expression[5];
      NameAttributeTest nameAttributeTest0 = new NameAttributeTest(expressionArray0[0], expressionArray1[1]);
      expressionArray1[4] = (Expression) nameAttributeTest0;
      CoreFunction coreFunction0 = new CoreFunction(2147483615, expressionArray1);
      // Undeclared exception!
//      try { 
        coreFunction0.functionNull((EvalContext) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.evosuite.runtime.System", e);
//      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[2];
      ExtensionFunction extensionFunction0 = new ExtensionFunction((QName) null, expressionArray0);
      expressionArray0[0] = (Expression) extensionFunction0;
      CoreOperationOr coreOperationOr0 = new CoreOperationOr(expressionArray0);
      expressionArray0[1] = (Expression) coreOperationOr0;
      CoreFunction coreFunction0 = new CoreFunction((-2472), expressionArray0);
      coreFunction0.getFunctionName();
      Step[] stepArray0 = new Step[1];
      Step step0 = new Step(10, (NodeTest) null, expressionArray0);
      stepArray0[0] = step0;
      ExpressionPath expressionPath0 = new ExpressionPath(expressionArray0[1], expressionArray0, stepArray0);
      EvalContext evalContext0 = expressionPath0.createContextForStep((EvalContext) null, 10, (NodeTest) null);
      SelfContext selfContext0 = new SelfContext(evalContext0, (NodeTest) null);
      // Undeclared exception!
//      try { 
        coreFunction0.functionTranslate(selfContext0);
//        fail("Expecting exception: StackOverflowError");
      
//      } catch(StackOverflowError e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      EvalContext evalContext0 = null;
      CoreFunction coreFunction0 = new CoreFunction(7, (Expression[]) null);
      // Undeclared exception!
//      try { 
        coreFunction0.computeValue((EvalContext) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[2];
      QName qName0 = new QName("");
      ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, expressionArray0);
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual(extensionFunction0, extensionFunction0);
      expressionArray0[0] = (Expression) coreOperationLessThanOrEqual0;
      Step[] stepArray0 = new Step[3];
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(512);
      Step step0 = new Step(2147483615, nodeTypeTest0, expressionArray0);
      stepArray0[0] = step0;
      Step step1 = new Step(2147483615, nodeTypeTest0, expressionArray0);
      stepArray0[1] = step1;
      Step step2 = new Step(2147483615, nodeTypeTest0, expressionArray0);
      stepArray0[2] = step2;
      ExpressionPath expressionPath0 = new ExpressionPath(coreOperationLessThanOrEqual0, expressionArray0, stepArray0);
      expressionArray0[1] = (Expression) expressionPath0;
      CoreFunction coreFunction0 = new CoreFunction(2147483615, expressionArray0);
      // Undeclared exception!
      coreFunction0.functionPosition((EvalContext) null);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(21, expressionArray0);
      coreFunction0.computeValue((EvalContext) null);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Constant constant0 = new Constant("EjUO");
      EvalContext evalContext0 = null;
      Expression[] expressionArray0 = new Expression[2];
      CoreOperationSubtract coreOperationSubtract0 = new CoreOperationSubtract(constant0, constant0);
      expressionArray0[0] = (Expression) coreOperationSubtract0;
      Expression[] expressionArray1 = new Expression[9];
      expressionArray1[0] = (Expression) constant0;
      expressionArray1[1] = (Expression) coreOperationSubtract0;
      expressionArray1[2] = (Expression) coreOperationSubtract0;
      expressionArray1[3] = (Expression) constant0;
      expressionArray1[4] = (Expression) constant0;
      expressionArray1[5] = (Expression) coreOperationSubtract0;
      expressionArray1[6] = (Expression) constant0;
      expressionArray1[7] = (Expression) coreOperationSubtract0;
      expressionArray1[8] = (Expression) coreOperationSubtract0;
      coreOperationSubtract0.args = expressionArray1;
      expressionArray0[1] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction((byte)9, expressionArray0);
      // Undeclared exception!
      coreFunction0.functionContains(evalContext0);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(2, expressionArray0);
      JXPathContext jXPathContext0 = JXPathContext.newContext((Object) coreFunction0);
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(57);
      SelfContext selfContext0 = new SelfContext((EvalContext) null, nodeTypeTest0);
      QName qName0 = new QName("uxUc1q");
      EvalContext[] evalContextArray0 = new EvalContext[5];
      evalContextArray0[0] = (EvalContext) selfContext0;
      evalContextArray0[1] = (EvalContext) selfContext0;
      evalContextArray0[2] = null;
      evalContextArray0[3] = null;
      evalContextArray0[4] = null;
      UnionContext unionContext0 = new UnionContext(selfContext0, evalContextArray0);
      Locale locale0 = Locale.PRC;
      NodePointer nodePointer0 = NodePointer.newNodePointer(qName0, unionContext0, locale0);
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = new JXPathContextReferenceImpl(jXPathContext0, selfContext0, nodePointer0);
      RootContext rootContext0 = new RootContext(jXPathContextReferenceImpl0, nodePointer0);
      EvalContext evalContext0 = rootContext0.getVariableContext(qName0);
      // Undeclared exception!
//      try { 
        coreFunction0.functionString(evalContext0);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // Undefined variable: uxUc1q
//         //
//         verifyException("org.apache.commons.jxpath.ri.model.VariablePointer$1", e);
//      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Constant constant0 = new Constant("org.apache.commons.jxpath.JXPthContextFactoryConfigurationError");
      Expression[] expressionArray0 = new Expression[4];
      expressionArray0[0] = (Expression) constant0;
      expressionArray0[1] = (Expression) constant0;
      expressionArray0[2] = (Expression) constant0;
      expressionArray0[3] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction(11, expressionArray0);
      // Undeclared exception!
//      try { 
        coreFunction0.computeValue((EvalContext) null);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // Incorrect number of arguments: contains('org.apache.commons.jxpath.JXPthContextFactoryConfigurationError', 'org.apache.commons.jxpath.JXPthContextFactoryConfigurationError', 'org.apache.commons.jxpath.JXPthContextFactoryConfigurationError', 'org.apache.commons.jxpath.JXPthContextFactoryConfigurationError')
//         //
//         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Integer integer0 = new Integer((-28));
      Expression[] expressionArray0 = new Expression[3];
      CoreFunction coreFunction0 = new CoreFunction((-28), expressionArray0);
      coreFunction0.getArg1();
      CoreOperationLessThan coreOperationLessThan0 = new CoreOperationLessThan((Expression) null, (Expression) null);
      expressionArray0[0] = (Expression) coreOperationLessThan0;
      CoreOperationOr coreOperationOr0 = new CoreOperationOr(expressionArray0);
      expressionArray0[1] = (Expression) coreOperationOr0;
      CoreOperationGreaterThanOrEqual coreOperationGreaterThanOrEqual0 = new CoreOperationGreaterThanOrEqual(coreOperationOr0, (Expression) null);
      expressionArray0[2] = (Expression) coreOperationGreaterThanOrEqual0;
      CoreFunction coreFunction1 = new CoreFunction((-28), expressionArray0);
      CoreFunction coreFunction2 = new CoreFunction((-28), expressionArray0);
      CoreFunction coreFunction3 = new CoreFunction(30, expressionArray0);
      // Undeclared exception!
//      try { 
        coreFunction3.computeValue((EvalContext) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.jxpath.ri.compiler.CoreOperationRelationalExpression", e);
//      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[3];
      CoreOperationUnion coreOperationUnion0 = new CoreOperationUnion(expressionArray0);
      CoreOperationGreaterThan coreOperationGreaterThan0 = new CoreOperationGreaterThan(coreOperationUnion0, coreOperationUnion0);
      CoreOperationMultiply coreOperationMultiply0 = new CoreOperationMultiply(coreOperationGreaterThan0, coreOperationUnion0);
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual(coreOperationGreaterThan0, coreOperationMultiply0);
      expressionArray0[0] = (Expression) coreOperationLessThanOrEqual0;
      NameAttributeTest nameAttributeTest0 = new NameAttributeTest(expressionArray0[0], expressionArray0[0]);
      CoreOperationNegate coreOperationNegate0 = new CoreOperationNegate(nameAttributeTest0);
      expressionArray0[1] = (Expression) coreOperationNegate0;
      Step[] stepArray0 = new Step[8];
      Step step0 = new Step(10, (NodeTest) null, expressionArray0);
      stepArray0[0] = step0;
      Step step1 = new Step(10, (NodeTest) null, expressionArray0);
      stepArray0[1] = step1;
      Expression[] expressionArray1 = new Expression[1];
      expressionArray1[0] = (Expression) coreOperationUnion0;
      Step step2 = new Step(1852, (NodeTest) null, expressionArray1);
      stepArray0[2] = step2;
      Step step3 = new Step(1852, (NodeTest) null, expressionArray1);
      stepArray0[3] = step3;
      Step step4 = new Step((-2959), (NodeTest) null, expressionArray1);
      stepArray0[4] = step4;
      Step step5 = new Step(10, (NodeTest) null, expressionArray0);
      stepArray0[5] = step5;
      Step step6 = new Step((-4289), (NodeTest) null, expressionArray1);
      stepArray0[6] = step6;
      Step step7 = new Step((-4289), (NodeTest) null, (Expression[]) null);
      stepArray0[7] = step7;
      LocationPath locationPath0 = new LocationPath(true, stepArray0);
      expressionArray0[2] = (Expression) locationPath0;
      CoreFunction coreFunction0 = new CoreFunction(10, expressionArray0);
      DescendantContext descendantContext0 = new DescendantContext((EvalContext) null, false, (NodeTest) null);
      QName qName0 = new QName("33", "33");
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, "33");
      PrecedingOrFollowingContext precedingOrFollowingContext0 = new PrecedingOrFollowingContext(descendantContext0, nodeNameTest0, false);
      ParentContext parentContext0 = new ParentContext(precedingOrFollowingContext0, (NodeTest) null);
      // Undeclared exception!
      coreFunction0.functionSum(parentContext0);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[6];
      QName qName0 = new QName("NaNNaN", "NaNNaN");
      ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, expressionArray0);
      Step[] stepArray0 = new Step[9];
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest((-2271));
      Step step0 = new Step(14, nodeTypeTest0, expressionArray0);
      stepArray0[0] = step0;
      Expression[] expressionArray1 = new Expression[3];
      expressionArray1[0] = (Expression) extensionFunction0;
      Byte byte0 = new Byte((byte) (-100));
      Constant constant0 = new Constant(byte0);
      expressionArray1[1] = (Expression) constant0;
      expressionArray1[2] = (Expression) extensionFunction0;
      Step step1 = new Step((-2271), nodeTypeTest0, expressionArray1);
      stepArray0[1] = step1;
      Step step2 = new Step(1582, nodeTypeTest0, expressionArray1);
      stepArray0[2] = step2;
      Step step3 = new Step(32, nodeTypeTest0, expressionArray0);
      stepArray0[3] = step3;
      Expression[] expressionArray2 = new Expression[9];
      expressionArray2[0] = (Expression) constant0;
      expressionArray2[1] = (Expression) constant0;
      expressionArray2[2] = (Expression) constant0;
      expressionArray2[3] = (Expression) constant0;
      expressionArray2[4] = (Expression) extensionFunction0;
      expressionArray2[5] = (Expression) extensionFunction0;
      expressionArray2[6] = (Expression) constant0;
      Constant constant1 = new Constant("NaNNaN");
      expressionArray2[7] = (Expression) constant1;
      expressionArray2[8] = (Expression) extensionFunction0;
      Step step4 = new Step((-2207), nodeTypeTest0, expressionArray2);
      stepArray0[4] = step4;
      Step step5 = new Step((byte) (-100), nodeTypeTest0, expressionArray2);
      stepArray0[5] = step5;
      NodeTypeTest nodeTypeTest1 = new NodeTypeTest(1019);
      Step step6 = new Step(14, nodeTypeTest1, expressionArray0);
      stepArray0[6] = step6;
      Step step7 = new Step(33, nodeTypeTest0, expressionArray1);
      stepArray0[7] = step7;
      Step step8 = new Step(0, nodeTypeTest1, expressionArray1);
      stepArray0[8] = step8;
      ExpressionPath expressionPath0 = new ExpressionPath(extensionFunction0, expressionArray0, stepArray0);
      expressionArray0[0] = (Expression) expressionPath0;
      CoreOperationNotEqual coreOperationNotEqual0 = new CoreOperationNotEqual(expressionArray2[6], constant1);
      expressionArray0[1] = (Expression) coreOperationNotEqual0;
      ExpressionPath expressionPath1 = new ExpressionPath(expressionArray2[0], expressionArray2, stepArray0);
      expressionArray0[2] = (Expression) expressionPath1;
      CoreOperationEqual coreOperationEqual0 = new CoreOperationEqual(expressionArray2[0], expressionPath1);
      expressionArray0[3] = (Expression) coreOperationEqual0;
      CoreOperationAnd coreOperationAnd0 = new CoreOperationAnd(expressionArray0);
      expressionArray0[4] = (Expression) coreOperationAnd0;
      CoreOperationOr coreOperationOr0 = new CoreOperationOr(expressionArray1);
      expressionArray0[5] = (Expression) coreOperationOr0;
      CoreFunction coreFunction0 = new CoreFunction(14, expressionArray0);
      expressionPath0.createContextForStep((EvalContext) null, 1582, nodeTypeTest1);
      // Undeclared exception!
//      try { 
        coreFunction0.functionLast((EvalContext) null);
//        fail("Expecting exception: StackOverflowError");
      
//      } catch(StackOverflowError e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[6];
      Float float0 = new Float((double) 30);
      Constant constant0 = new Constant(float0);
      expressionArray0[0] = (Expression) constant0;
      CoreOperationUnion coreOperationUnion0 = new CoreOperationUnion(expressionArray0);
      expressionArray0[1] = (Expression) coreOperationUnion0;
      Step[] stepArray0 = new Step[9];
      QName qName0 = new QName("'9-y#[|8u~QhT92@an", "|u4O#");
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
      Step step0 = new Step(30, nodeNameTest0, expressionArray0);
      stepArray0[0] = step0;
      Step step1 = new Step((-5204), nodeNameTest0, expressionArray0);
      stepArray0[1] = step1;
      Step step2 = new Step(40, nodeNameTest0, expressionArray0);
      stepArray0[2] = step2;
      Step step3 = new Step((-1786), nodeNameTest0, expressionArray0);
      stepArray0[3] = step3;
      Step step4 = new Step((-5204), nodeNameTest0, expressionArray0);
      stepArray0[4] = step4;
      Step step5 = new Step(40, nodeNameTest0, expressionArray0);
      stepArray0[5] = step5;
      Step step6 = new Step(3, nodeNameTest0, expressionArray0);
      stepArray0[6] = step6;
      Step step7 = new Step(83, (NodeTest) null, expressionArray0);
      stepArray0[7] = step7;
      Step step8 = new Step(255, nodeNameTest0, expressionArray0);
      stepArray0[8] = step8;
      LocationPath locationPath0 = new LocationPath(true, stepArray0);
      expressionArray0[2] = (Expression) locationPath0;
      CoreOperationEqual coreOperationEqual0 = new CoreOperationEqual(constant0, constant0);
      expressionArray0[3] = (Expression) coreOperationEqual0;
      NameAttributeTest nameAttributeTest0 = new NameAttributeTest(coreOperationEqual0, expressionArray0[2]);
      expressionArray0[4] = (Expression) nameAttributeTest0;
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual(locationPath0, coreOperationUnion0);
      expressionArray0[5] = (Expression) coreOperationLessThanOrEqual0;
      CoreFunction coreFunction0 = new CoreFunction(30, expressionArray0);
      // Undeclared exception!
      coreFunction0.toString();
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[5];
      ExtensionFunction extensionFunction0 = new ExtensionFunction((QName) null, expressionArray0);
      expressionArray0[0] = (Expression) extensionFunction0;
      Float float0 = new Float((double) (-2299));
      Constant constant0 = new Constant(float0);
      expressionArray0[1] = (Expression) constant0;
      ExtensionFunction extensionFunction1 = new ExtensionFunction((QName) null, expressionArray0);
      expressionArray0[2] = (Expression) extensionFunction1;
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd(expressionArray0);
      expressionArray0[3] = (Expression) coreOperationAdd0;
      CoreOperationNotEqual coreOperationNotEqual0 = new CoreOperationNotEqual(expressionArray0[2], expressionArray0[2]);
      expressionArray0[4] = (Expression) coreOperationNotEqual0;
      CoreFunction coreFunction0 = new CoreFunction((-2299), expressionArray0);
      NodeNameTest nodeNameTest0 = new NodeNameTest((QName) null, "org.apache.commons.jxpath.JXPathContextFactoryConfiguratio>Error");
      SelfContext selfContext0 = new SelfContext((EvalContext) null, nodeNameTest0);
      NodeSetContext nodeSetContext0 = new NodeSetContext(selfContext0, (NodeSet) null);
      // Undeclared exception!
//      try { 
        coreFunction0.functionNormalizeSpace(nodeSetContext0);
//        fail("Expecting exception: StackOverflowError");
      
//      } catch(StackOverflowError e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Constant constant0 = new Constant("J>)?jAZ");
      Expression[] expressionArray0 = new Expression[2];
      CoreOperationEqual coreOperationEqual0 = new CoreOperationEqual(constant0, constant0);
      CoreOperationMod coreOperationMod0 = new CoreOperationMod(constant0, coreOperationEqual0);
      expressionArray0[0] = (Expression) coreOperationMod0;
      expressionArray0[1] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction((byte)9, expressionArray0);
      // Undeclared exception!
//      try { 
        coreFunction0.compute((EvalContext) null);
//        fail("Expecting exception: ArithmeticException");
      
//      } catch(ArithmeticException e) {
//         //
//         // / by zero
//         //
//         verifyException("org.apache.commons.jxpath.ri.compiler.CoreOperationMod", e);
//      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Constant constant0 = new Constant("org.apache.commons.jxpath.JXPathContextFactoryConfigurationError");
      EvalContext evalContext0 = null;
      Expression[] expressionArray0 = new Expression[2];
      CoreOperationSubtract coreOperationSubtract0 = new CoreOperationSubtract(constant0, constant0);
      expressionArray0[0] = (Expression) coreOperationSubtract0;
      coreOperationSubtract0.toString();
      expressionArray0[1] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction(2147483615, expressionArray0);
      coreOperationSubtract0.args = expressionArray0;
      // Undeclared exception!
//      try { 
        coreFunction0.functionSubstringAfter((EvalContext) null);
//        fail("Expecting exception: StackOverflowError");
      
//      } catch(StackOverflowError e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Constant constant0 = new Constant("EjUO");
      Expression[] expressionArray0 = new Expression[2];
      CoreOperationSubtract coreOperationSubtract0 = new CoreOperationSubtract(constant0, constant0);
      CoreFunction coreFunction0 = new CoreFunction((byte)27, expressionArray0);
      CoreFunction coreFunction1 = new CoreFunction((byte)27, expressionArray0);
      // Undeclared exception!
//      try { 
        coreFunction1.computeValue((EvalContext) null);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // Incorrect number of arguments: round(null, null)
//         //
//         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Constant constant0 = new Constant("\n    ");
      constant0.toString();
      Expression[] expressionArray0 = new Expression[4];
      expressionArray0[0] = (Expression) constant0;
      expressionArray0[1] = (Expression) constant0;
      expressionArray0[2] = (Expression) constant0;
      expressionArray0[3] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction(21, expressionArray0);
      coreFunction0.computeContextDependent();
      // Undeclared exception!
//      try { 
        coreFunction0.functionTranslate((EvalContext) null);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // Incorrect number of arguments: false('
//         //     ', '
//         //     ', '
//         //     ', '
//         //     ')
//         //
//         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(15, (Expression[]) null);
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = mock(JXPathContextReferenceImpl.class, new ViolatedAssumptionAnswer());
      doReturn((NamespaceResolver) null).when(jXPathContextReferenceImpl0).getNamespaceResolver();
      BasicVariables basicVariables0 = new BasicVariables();
      QName qName0 = new QName("");
      basicVariables0.declareVariable("mwYK", qName0);
      VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
      RootContext rootContext0 = new RootContext(jXPathContextReferenceImpl0, variablePointer0);
      coreFunction0.functionNamespaceURI(rootContext0);
      coreFunction0.functionNamespaceURI(rootContext0);
      // Undeclared exception!
//      try { 
        coreFunction0.functionString(rootContext0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // No such variable: ''
//         //
//         verifyException("org.apache.commons.jxpath.BasicVariables", e);
//      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[3];
      CoreOperationAnd coreOperationAnd0 = new CoreOperationAnd(expressionArray0);
      expressionArray0[0] = (Expression) coreOperationAnd0;
      CoreOperationAnd coreOperationAnd1 = new CoreOperationAnd(expressionArray0);
      CoreOperationSubtract coreOperationSubtract0 = new CoreOperationSubtract(expressionArray0[0], coreOperationAnd1);
      expressionArray0[1] = (Expression) coreOperationSubtract0;
      QName qName0 = new QName("w*}r&m^t:dX$HNR]VL>");
      ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, expressionArray0);
      expressionArray0[2] = (Expression) extensionFunction0;
      CoreFunction coreFunction0 = new CoreFunction((-3855), expressionArray0);
      VariablePointerFactory variablePointerFactory0 = new VariablePointerFactory();
      Locale locale0 = Locale.GERMANY;
      variablePointerFactory0.createNodePointer(qName0, (Object) coreOperationAnd0, locale0);
      RootContext rootContext0 = new RootContext((JXPathContextReferenceImpl) null, (NodePointer) null);
      // Undeclared exception!
      coreFunction0.functionTranslate(rootContext0);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(1, expressionArray0);
      JXPathContext jXPathContext0 = JXPathContext.newContext((Object) coreFunction0);
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = new JXPathContextReferenceImpl(jXPathContext0, jXPathContext0, (Pointer) null);
      BasicVariables basicVariables0 = new BasicVariables();
      QName qName0 = new QName("h05#0wAK");
      VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
      NodePointer nodePointer0 = NodePointer.newChildNodePointer(variablePointer0, qName0, "h05#0wAK");
      RootContext rootContext0 = new RootContext(jXPathContextReferenceImpl0, nodePointer0);
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("<<unknown namespace>>");
      AncestorContext ancestorContext0 = new AncestorContext(rootContext0, false, processingInstructionTest0);
      // Undeclared exception!
//      try { 
        coreFunction0.computeValue(ancestorContext0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // No such variable: 'h05#0wAK'
//         //
//         verifyException("org.apache.commons.jxpath.BasicVariables", e);
//      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Constant constant0 = new Constant("org.apache.commons.jxpath.JXPthContextFactoryConfigurationError");
      Expression[] expressionArray0 = new Expression[3];
      expressionArray0[0] = (Expression) constant0;
      constant0.toString();
      expressionArray0[1] = (Expression) constant0;
      expressionArray0[2] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction(2259, expressionArray0);
      coreFunction0.computeContextDependent();
      coreFunction0.functionTranslate((EvalContext) null);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "^nF)zYPL");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Expression[] expressionArray0 = new Expression[2];
      CoreOperationUnion coreOperationUnion0 = new CoreOperationUnion(expressionArray0);
      expressionArray0[0] = (Expression) coreOperationUnion0;
      Step[] stepArray0 = new Step[7];
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(13);
      Step step0 = new Step(0, nodeTypeTest0, expressionArray0);
      stepArray0[0] = step0;
      Step step1 = new Step(0, nodeTypeTest0, expressionArray0);
      stepArray0[1] = step1;
      Step step2 = new Step((-2074), nodeTypeTest0, expressionArray0);
      stepArray0[2] = step2;
      Step step3 = new Step(63, nodeTypeTest0, expressionArray0);
      stepArray0[3] = step3;
      Step step4 = new Step(63, nodeTypeTest0, expressionArray0);
      stepArray0[4] = step4;
      Step step5 = new Step(63, nodeTypeTest0, expressionArray0);
      stepArray0[5] = step5;
      Step step6 = new Step(63, nodeTypeTest0, expressionArray0);
      stepArray0[6] = step6;
      ExpressionPath expressionPath0 = new ExpressionPath(expressionArray0[0], expressionArray0, stepArray0);
      expressionArray0[1] = (Expression) expressionPath0;
      CoreFunction coreFunction0 = new CoreFunction(63, expressionArray0);
      ExpressionPath expressionPath1 = new ExpressionPath(expressionPath0, expressionArray0, stepArray0);
      ParentContext parentContext0 = new ParentContext((EvalContext) null, nodeTypeTest0);
      SelfContext selfContext0 = new SelfContext(parentContext0, nodeTypeTest0);
      expressionPath1.createContextForStep(selfContext0, 0, nodeTypeTest0);
      DescendantContext descendantContext0 = new DescendantContext((EvalContext) null, true, nodeTypeTest0);
      coreFunction0.compute(descendantContext0);
      // Undeclared exception!
      coreFunction0.functionID(selfContext0);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Constant constant0 = new Constant("org.apache.commons.jxpath.JXPathContextFactoryConfigurationError");
      EvalContext evalContext0 = null;
      CoreOperationSubtract coreOperationSubtract0 = new CoreOperationSubtract(constant0, constant0);
      Expression[] expressionArray0 = new Expression[8];
      expressionArray0[0] = (Expression) coreOperationSubtract0;
      expressionArray0[1] = (Expression) constant0;
      expressionArray0[2] = (Expression) constant0;
      QName qName0 = new QName((String) null, (String) null);
      ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, expressionArray0);
      expressionArray0[3] = (Expression) extensionFunction0;
      expressionArray0[4] = (Expression) constant0;
      expressionArray0[5] = (Expression) coreOperationSubtract0;
      CoreFunction coreFunction0 = new CoreFunction((-738), expressionArray0);
      Expression expression0 = coreFunction0.getArg3();
      expressionArray0[6] = expression0;
      expressionArray0[7] = (Expression) coreOperationSubtract0;
      CoreFunction coreFunction1 = new CoreFunction((byte)9, expressionArray0);
      // Undeclared exception!
      coreFunction1.functionSubstringAfter((EvalContext) null);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Constant constant0 = new Constant("org.apache.commons.jxpath.JXPathContextFactoryConfigurationError");
      EvalContext evalContext0 = null;
      Expression[] expressionArray0 = new Expression[2];
      CoreOperationSubtract coreOperationSubtract0 = new CoreOperationSubtract(constant0, constant0);
      Expression[] expressionArray1 = new Expression[3];
      expressionArray1[0] = (Expression) coreOperationSubtract0;
      expressionArray1[1] = (Expression) constant0;
      expressionArray1[2] = (Expression) constant0;
      coreOperationSubtract0.args = expressionArray1;
      expressionArray0[0] = (Expression) coreOperationSubtract0;
      expressionArray0[1] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction(Integer.MIN_VALUE, expressionArray0);
      coreFunction0.toString();
      // Undeclared exception!
//      try { 
        coreFunction0.functionStartsWith((EvalContext) null);
//        fail("Expecting exception: StackOverflowError");
      
//      } catch(StackOverflowError e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(22, (Expression[]) null);
      coreFunction0.computeContextDependent();
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      EvalContext evalContext0 = null;
      CoreFunction coreFunction0 = new CoreFunction(21, (Expression[]) null);
      Expression[] expressionArray0 = new Expression[8];
      expressionArray0[0] = (Expression) coreFunction0;
      expressionArray0[1] = (Expression) coreFunction0;
      expressionArray0[2] = (Expression) coreFunction0;
      expressionArray0[0] = (Expression) coreFunction0;
      expressionArray0[4] = (Expression) coreFunction0;
      expressionArray0[5] = (Expression) coreFunction0;
      expressionArray0[6] = (Expression) coreFunction0;
      expressionArray0[7] = (Expression) coreFunction0;
      CoreFunction coreFunction1 = new CoreFunction(23, expressionArray0);
      // Undeclared exception!
//      try { 
        coreFunction1.computeContextDependent();
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Constant constant0 = new Constant("%g#^S2gePe?");
      CoreOperationSubtract coreOperationSubtract0 = new CoreOperationSubtract(constant0, constant0);
      Expression[] expressionArray0 = new Expression[8];
      expressionArray0[0] = (Expression) coreOperationSubtract0;
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd(expressionArray0);
      expressionArray0[1] = (Expression) coreOperationAdd0;
      expressionArray0[2] = (Expression) coreOperationSubtract0;
      expressionArray0[3] = (Expression) coreOperationSubtract0;
      expressionArray0[4] = (Expression) coreOperationSubtract0;
      expressionArray0[5] = (Expression) coreOperationSubtract0;
      CoreOperationOr coreOperationOr0 = new CoreOperationOr(expressionArray0);
      expressionArray0[6] = (Expression) coreOperationOr0;
      expressionArray0[7] = (Expression) coreOperationSubtract0;
      CoreFunction coreFunction0 = new CoreFunction((byte)9, expressionArray0);
      // Undeclared exception!
      coreFunction0.computeValue((EvalContext) null);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[6];
      Constant constant0 = new Constant("Y$oSh=cy-U.y");
      expressionArray0[0] = (Expression) constant0;
      Step[] stepArray0 = new Step[2];
      QName qName0 = new QName("@@*hZp;_qB-[", "bov4VcH~OHX(N");
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, "@@*hZp;_qB-[");
      Step step0 = new Step((-158), nodeNameTest0, expressionArray0);
      stepArray0[0] = step0;
      Step step1 = new Step((-158), nodeNameTest0, expressionArray0);
      stepArray0[1] = step1;
      LocationPath locationPath0 = new LocationPath(false, stepArray0);
      expressionArray0[1] = (Expression) locationPath0;
      CoreOperationMod coreOperationMod0 = new CoreOperationMod(expressionArray0[0], constant0);
      expressionArray0[2] = (Expression) coreOperationMod0;
      CoreOperationNotEqual coreOperationNotEqual0 = new CoreOperationNotEqual(expressionArray0[0], expressionArray0[0]);
      expressionArray0[3] = (Expression) coreOperationNotEqual0;
      ExpressionPath expressionPath0 = new ExpressionPath(locationPath0, expressionArray0, stepArray0);
      CoreOperationLessThan coreOperationLessThan0 = new CoreOperationLessThan(expressionPath0, expressionArray0[3]);
      CoreOperationMod coreOperationMod1 = new CoreOperationMod(expressionArray0[0], coreOperationLessThan0);
      expressionArray0[4] = (Expression) coreOperationMod1;
      ExpressionPath expressionPath1 = new ExpressionPath(expressionArray0[4], expressionArray0, stepArray0);
      CoreOperationMultiply coreOperationMultiply0 = new CoreOperationMultiply(expressionPath1, expressionPath0);
      expressionArray0[0] = (Expression) coreOperationMultiply0;
      CoreFunction coreFunction0 = new CoreFunction(297, expressionArray0);
      // Undeclared exception!
      coreFunction0.functionNull((EvalContext) null);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[6];
      CoreOperationOr coreOperationOr0 = new CoreOperationOr(expressionArray0);
      CoreOperationNegate coreOperationNegate0 = new CoreOperationNegate(coreOperationOr0);
      expressionArray0[0] = (Expression) coreOperationNegate0;
      Double double0 = Expression.ONE;
      Constant constant0 = new Constant(double0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      CoreOperationSubtract coreOperationSubtract0 = new CoreOperationSubtract(coreOperationOr0, constant0);
      expressionArray0[1] = (Expression) coreOperationSubtract0;
      CoreOperationMod coreOperationMod0 = new CoreOperationMod(expressionArray0[0], coreOperationSubtract0);
      expressionArray0[2] = (Expression) coreOperationMod0;
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd(expressionArray0);
      expressionArray0[3] = (Expression) coreOperationAdd0;
      CoreOperationDivide coreOperationDivide0 = new CoreOperationDivide(expressionArray0[3], expressionArray0[3]);
      expressionArray0[4] = (Expression) coreOperationDivide0;
      Constant constant1 = new Constant(double0);
      expressionArray0[5] = (Expression) constant1;
      CoreFunction coreFunction0 = new CoreFunction(352, expressionArray0);
      coreFunction0.toString();
      EvalContext evalContext0 = null;
      // Undeclared exception!
      coreFunction0.functionConcat((EvalContext) null);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[2];
      Double double0 = Expression.NOT_A_NUMBER;
      Constant constant0 = new Constant(double0);
      expressionArray0[0] = (Expression) constant0;
      CoreOperationMod coreOperationMod0 = new CoreOperationMod(expressionArray0[0], expressionArray0[0]);
      expressionArray0[1] = (Expression) coreOperationMod0;
      CoreFunction coreFunction0 = new CoreFunction(1, expressionArray0);
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(1);
      NamespaceContext namespaceContext0 = new NamespaceContext((EvalContext) null, nodeTypeTest0);
      AncestorContext ancestorContext0 = new AncestorContext(namespaceContext0, false, nodeTypeTest0);
      SelfContext selfContext0 = new SelfContext(ancestorContext0, nodeTypeTest0);
      PrecedingOrFollowingContext precedingOrFollowingContext0 = new PrecedingOrFollowingContext(selfContext0, nodeTypeTest0, false);
      // Undeclared exception!
//      try { 
        coreFunction0.functionSubstring(precedingOrFollowingContext0);
//        fail("Expecting exception: ArithmeticException");
      
//      } catch(ArithmeticException e) {
//         //
//         // / by zero
//         //
//         verifyException("org.apache.commons.jxpath.ri.compiler.CoreOperationMod", e);
//      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(5, (Expression[]) null);
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = mock(JXPathContextReferenceImpl.class, new ViolatedAssumptionAnswer());
      doReturn((NamespaceResolver) null).when(jXPathContextReferenceImpl0).getNamespaceResolver();
      BasicVariables basicVariables0 = new BasicVariables();
      QName qName0 = new QName("");
      VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
      RootContext rootContext0 = new RootContext(jXPathContextReferenceImpl0, variablePointer0);
      rootContext0.getJXPathContext();
      coreFunction0.functionNamespaceURI(rootContext0);
      // Undeclared exception!
//      try { 
        coreFunction0.functionNumber(rootContext0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // No such variable: ''
//         //
//         verifyException("org.apache.commons.jxpath.BasicVariables", e);
//      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Constant constant0 = new Constant("org.apache.commons.jxpath.JXPathContextFactoryConfigurationError");
      Expression[] expressionArray0 = new Expression[1];
      expressionArray0[0] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction(30, expressionArray0);
      coreFunction0.computeContextDependent();
      Expression[] expressionArray1 = new Expression[7];
      expressionArray1[0] = (Expression) coreFunction0;
      expressionArray1[1] = (Expression) constant0;
      expressionArray1[2] = (Expression) constant0;
      expressionArray1[3] = (Expression) coreFunction0;
      expressionArray1[4] = (Expression) constant0;
      expressionArray1[5] = (Expression) coreFunction0;
      CoreOperationMod coreOperationMod0 = new CoreOperationMod(expressionArray1[3], expressionArray1[3]);
      expressionArray1[6] = (Expression) coreOperationMod0;
      CoreFunction coreFunction1 = new CoreFunction(30, expressionArray1);
      coreFunction1.computeContextDependent();
      // Undeclared exception!
//      try { 
        coreFunction1.computeValue((EvalContext) null);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // Incorrect number of arguments: format-number(format-number('org.apache.commons.jxpath.JXPathContextFactoryConfigurationError'), 'org.apache.commons.jxpath.JXPathContextFactoryConfigurationError', 'org.apache.commons.jxpath.JXPathContextFactoryConfigurationError', format-number('org.apache.commons.jxpath.JXPathContextFactoryConfigurationError'), 'org.apache.commons.jxpath.JXPathContextFactoryConfigurationError', format-number('org.apache.commons.jxpath.JXPathContextFactoryConfigurationError'), org.apache.commons.jxpath.ri.compiler.CoreFunction@0000000002 mod org.apache.commons.jxpath.ri.compiler.CoreFunction@0000000002)
//         //
//         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Constant constant0 = new Constant((String) null);
      constant0.toString();
      Byte byte0 = new Byte((byte)34);
      EvalContext evalContext0 = null;
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest((String) null);
      FileSystemHandling.shouldAllThrowIOExceptions();
      Expression[] expressionArray0 = new Expression[3];
      expressionArray0[0] = (Expression) constant0;
      expressionArray0[1] = (Expression) constant0;
      expressionArray0[2] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction(15, expressionArray0);
      Expression[] expressionArray1 = new Expression[5];
      expressionArray1[0] = (Expression) coreFunction0;
      expressionArray1[1] = (Expression) coreFunction0;
      expressionArray1[2] = (Expression) coreFunction0;
      CoreOperationDivide coreOperationDivide0 = new CoreOperationDivide(constant0, expressionArray1[1]);
      expressionArray1[3] = (Expression) coreOperationDivide0;
      expressionArray1[4] = (Expression) constant0;
      Step[] stepArray0 = new Step[7];
      Step step0 = new Step((byte)34, processingInstructionTest0, expressionArray1);
      stepArray0[0] = step0;
      Step step1 = new Step(47, processingInstructionTest0, expressionArray1);
      stepArray0[1] = step1;
      Step step2 = new Step(47, processingInstructionTest0, expressionArray0);
      stepArray0[2] = step2;
      Step step3 = new Step((byte)34, processingInstructionTest0, expressionArray1);
      stepArray0[3] = step3;
      QName qName0 = new QName("'null'");
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
      Step step4 = new Step(15, nodeNameTest0, expressionArray0);
      stepArray0[4] = step4;
      Step step5 = new Step((-975), nodeNameTest0, expressionArray1);
      stepArray0[5] = step5;
      Step step6 = new Step(15, processingInstructionTest0, expressionArray0);
      stepArray0[6] = step6;
      ExpressionPath expressionPath0 = new ExpressionPath(coreFunction0, expressionArray1, stepArray0);
      expressionPath0.createContextForStep((EvalContext) null, 15, nodeNameTest0);
      coreFunction0.functionSubstring((EvalContext) null);
      ProcessingInstructionTest processingInstructionTest1 = new ProcessingInstructionTest((String) null);
      // Undeclared exception!
//      try { 
        coreFunction0.computeValue((EvalContext) null);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // Incorrect number of arguments: string-length('null', 'null', 'null')
//         //
//         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[4];
      Double double0 = Expression.NOT_A_NUMBER;
      Constant constant0 = new Constant(double0);
      CoreOperationMod coreOperationMod0 = new CoreOperationMod(constant0, constant0);
      Step[] stepArray0 = new Step[6];
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(23);
      Step step0 = new Step(23, nodeTypeTest0, expressionArray0);
      stepArray0[0] = step0;
      QName qName0 = new QName("EjUO", "*[ax4H+,l:D");
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, "hf6ug^#lM\"X?Um(>qgw");
      Step step1 = new Step(23, nodeNameTest0, expressionArray0);
      stepArray0[1] = step1;
      Step step2 = new Step((-1621), nodeNameTest0, expressionArray0);
      stepArray0[2] = step2;
      Step step3 = new Step(23, nodeNameTest0, expressionArray0);
      stepArray0[3] = step3;
      Step step4 = new Step(789, nodeNameTest0, expressionArray0);
      stepArray0[4] = step4;
      Step step5 = new Step((-1621), nodeTypeTest0, expressionArray0);
      stepArray0[5] = step5;
      ExpressionPath expressionPath0 = new ExpressionPath(coreOperationMod0, expressionArray0, stepArray0);
      expressionArray0[0] = (Expression) expressionPath0;
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd(expressionArray0);
      expressionArray0[1] = (Expression) coreOperationAdd0;
      CoreFunction coreFunction0 = new CoreFunction(2235, expressionArray0);
      expressionArray0[2] = (Expression) coreFunction0;
      CoreOperationOr coreOperationOr0 = new CoreOperationOr(expressionArray0);
      expressionArray0[3] = (Expression) coreOperationOr0;
      CoreFunction coreFunction1 = new CoreFunction(0, expressionArray0);
      coreFunction1.compute((EvalContext) null);
      // Undeclared exception!
      coreFunction0.functionLang((EvalContext) null);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreOperationSubtract coreOperationSubtract0 = new CoreOperationSubtract((Expression) null, (Expression) null);
      CoreFunction coreFunction0 = new CoreFunction(17, expressionArray0);
      coreFunction0.computeContextDependent();
      QName qName0 = new QName("translate");
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, "]Pb'K=*1$R2\"");
      AttributeContext attributeContext0 = new AttributeContext((EvalContext) null, nodeNameTest0);
      // Undeclared exception!
//      try { 
        coreFunction0.computeValue(attributeContext0);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // Incorrect number of arguments: translate()
//         //
//         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      int int0 = (-1232);
      Expression[] expressionArray0 = new Expression[4];
      String string0 = "Ox.NBJmikp>";
      QName qName0 = new QName("Ox.NBJmikp>", "Ox.NBJmikp>");
      VariableReference variableReference0 = new VariableReference(qName0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      expressionArray0[0] = (Expression) variableReference0;
      CoreOperationLessThan coreOperationLessThan0 = new CoreOperationLessThan(expressionArray0[0], expressionArray0[0]);
      expressionArray0[1] = (Expression) coreOperationLessThan0;
      ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, expressionArray0);
      expressionArray0[2] = (Expression) extensionFunction0;
      CoreOperationNotEqual coreOperationNotEqual0 = new CoreOperationNotEqual(expressionArray0[2], extensionFunction0);
      expressionArray0[3] = (Expression) coreOperationNotEqual0;
      CoreFunction coreFunction0 = new CoreFunction((-1232), expressionArray0);
      EvalContext evalContext0 = null;
      // Undeclared exception!
      coreFunction0.functionSubstringBefore((EvalContext) null);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[8];
      QName qName0 = new QName("')", "key");
      ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, expressionArray0);
      expressionArray0[0] = (Expression) extensionFunction0;
      ExtensionFunction extensionFunction1 = new ExtensionFunction(qName0, expressionArray0);
      expressionArray0[1] = (Expression) extensionFunction1;
      Step[] stepArray0 = new Step[9];
      QName qName1 = new QName("')", (String) null);
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName1);
      Step step0 = new Step(91, nodeNameTest0, expressionArray0);
      stepArray0[0] = step0;
      Step step1 = new Step(1048576, nodeNameTest0, expressionArray0);
      stepArray0[1] = step1;
      Step step2 = new Step(1048576, nodeNameTest0, expressionArray0);
      stepArray0[2] = step2;
      Step step3 = new Step(2014, nodeNameTest0, expressionArray0);
      stepArray0[3] = step3;
      Step step4 = new Step(939, nodeNameTest0, expressionArray0);
      stepArray0[4] = step4;
      Step step5 = new Step(91, nodeNameTest0, expressionArray0);
      stepArray0[5] = step5;
      Step step6 = new Step(16, nodeNameTest0, expressionArray0);
      stepArray0[6] = step6;
      Step step7 = new Step(114, nodeNameTest0, expressionArray0);
      stepArray0[7] = step7;
      Expression[] expressionArray1 = new Expression[5];
      expressionArray1[0] = (Expression) extensionFunction0;
      expressionArray1[1] = (Expression) extensionFunction1;
      expressionArray1[2] = (Expression) extensionFunction1;
      expressionArray1[3] = (Expression) extensionFunction0;
      expressionArray1[4] = (Expression) extensionFunction1;
      Step step8 = new Step((-3216), nodeNameTest0, expressionArray1);
      stepArray0[8] = step8;
      LocationPath locationPath0 = new LocationPath(true, stepArray0);
      expressionArray0[2] = (Expression) locationPath0;
      CoreOperationSubtract coreOperationSubtract0 = new CoreOperationSubtract(extensionFunction0, expressionArray1[4]);
      expressionArray0[3] = (Expression) coreOperationSubtract0;
      LocationPath locationPath1 = new LocationPath(false, stepArray0);
      expressionArray0[4] = (Expression) locationPath1;
      NameAttributeTest nameAttributeTest0 = new NameAttributeTest(expressionArray1[3], extensionFunction0);
      expressionArray0[5] = (Expression) nameAttributeTest0;
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual(expressionArray0[2], expressionArray1[4]);
      expressionArray0[6] = (Expression) coreOperationLessThanOrEqual0;
      NameAttributeTest nameAttributeTest1 = new NameAttributeTest(expressionArray0[5], nameAttributeTest0);
      expressionArray0[7] = (Expression) nameAttributeTest1;
      CoreFunction coreFunction0 = new CoreFunction(91, expressionArray0);
      // Undeclared exception!
//      try { 
        coreFunction0.functionRound((EvalContext) null);
//        fail("Expecting exception: StackOverflowError");
      
//      } catch(StackOverflowError e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[5];
      Double double0 = Expression.ZERO;
      Constant constant0 = new Constant(double0);
      expressionArray0[0] = (Expression) constant0;
      Constant constant1 = new Constant("");
      expressionArray0[1] = (Expression) constant1;
      CoreOperationNegate coreOperationNegate0 = new CoreOperationNegate(expressionArray0[1]);
      expressionArray0[2] = (Expression) coreOperationNegate0;
      NameAttributeTest nameAttributeTest0 = new NameAttributeTest(constant1, expressionArray0[2]);
      expressionArray0[3] = (Expression) nameAttributeTest0;
      CoreOperationUnion coreOperationUnion0 = new CoreOperationUnion(expressionArray0);
      expressionArray0[4] = (Expression) coreOperationUnion0;
      CoreFunction coreFunction0 = new CoreFunction(27, expressionArray0);
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("");
      NamespaceContext namespaceContext0 = new NamespaceContext((EvalContext) null, processingInstructionTest0);
      // Undeclared exception!
//      try { 
        coreFunction0.compute(namespaceContext0);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // Incorrect number of arguments: round(0, '', -org.apache.commons.jxpath.ri.compiler.Constant@0000000002, org.apache.commons.jxpath.ri.compiler.Constant@0000000002 = org.apache.commons.jxpath.ri.compiler.CoreOperationNegate@0000000003, org.apache.commons.jxpath.ri.compiler.Constant@0000000001 | org.apache.commons.jxpath.ri.compiler.Constant@0000000002 | (org.apache.commons.jxpath.ri.compiler.CoreOperationNegate@0000000003) | (org.apache.commons.jxpath.ri.compiler.NameAttributeTest@0000000004) | org.apache.commons.jxpath.ri.compiler.CoreOperationUnion@0000000005)
//         //
//         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Constant constant0 = new Constant("org.apache.commons.jxpath.JXPathContextFactoryConfigurationError");
      Expression[] expressionArray0 = new Expression[2];
      CoreOperationSubtract coreOperationSubtract0 = new CoreOperationSubtract(constant0, constant0);
      expressionArray0[0] = (Expression) coreOperationSubtract0;
      expressionArray0[1] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction(24, expressionArray0);
      CoreFunction coreFunction1 = new CoreFunction(24, expressionArray0);
      coreFunction1.computeContextDependent();
      // Undeclared exception!
//      try { 
        coreFunction0.computeValue((EvalContext) null);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // Incorrect number of arguments: sum(org.apache.commons.jxpath.ri.compiler.Constant@0000000001 - org.apache.commons.jxpath.ri.compiler.Constant@0000000001, 'org.apache.commons.jxpath.JXPathContextFactoryConfigurationError')
//         //
//         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(28, (Expression[]) null);
      coreFunction0.computeContextDependent();
      coreFunction0.computeValue((EvalContext) null);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(18, expressionArray0);
      PredicateContext predicateContext0 = new PredicateContext((EvalContext) null, coreFunction0);
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(503);
      ParentContext parentContext0 = new ParentContext(predicateContext0, nodeTypeTest0);
      coreFunction0.functionString(parentContext0);
      // Undeclared exception!
//      try { 
        coreFunction0.computeValue(parentContext0);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // Incorrect number of arguments: boolean()
//         //
//         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      Expression[] expressionArray0 = new Expression[7];
      NameAttributeTest nameAttributeTest0 = new NameAttributeTest((Expression) null, (Expression) null);
      Step[] stepArray0 = new Step[6];
      QName qName0 = new QName("");
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
      Step step0 = new Step((-4155), nodeNameTest0, expressionArray0);
      stepArray0[0] = step0;
      Expression[] expressionArray1 = new Expression[0];
      Step step1 = new Step(85, nodeNameTest0, expressionArray1);
      stepArray0[1] = step1;
      Step step2 = new Step(13, nodeNameTest0, expressionArray0);
      stepArray0[2] = step2;
      Step step3 = new Step(1234, nodeNameTest0, expressionArray0);
      stepArray0[3] = step3;
      Expression[] expressionArray2 = new Expression[2];
      expressionArray2[0] = (Expression) nameAttributeTest0;
      expressionArray2[1] = (Expression) nameAttributeTest0;
      Step step4 = new Step((-4155), nodeNameTest0, expressionArray2);
      stepArray0[4] = step4;
      Step step5 = new Step(26, nodeNameTest0, expressionArray0);
      stepArray0[5] = step5;
      ExpressionPath expressionPath0 = new ExpressionPath(nameAttributeTest0, expressionArray0, stepArray0);
      expressionArray0[0] = (Expression) expressionPath0;
      VariableReference variableReference0 = new VariableReference(qName0);
      expressionArray0[1] = (Expression) variableReference0;
      CoreOperationDivide coreOperationDivide0 = new CoreOperationDivide(expressionArray2[0], expressionArray0[1]);
      expressionArray0[2] = (Expression) coreOperationDivide0;
      CoreOperationUnion coreOperationUnion0 = new CoreOperationUnion(expressionArray0);
      expressionArray0[3] = (Expression) coreOperationUnion0;
      CoreOperationEqual coreOperationEqual0 = new CoreOperationEqual(expressionArray2[0], expressionArray0[2]);
      expressionArray0[4] = (Expression) coreOperationEqual0;
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual(expressionArray0[0], expressionArray0[1]);
      expressionArray0[5] = (Expression) coreOperationLessThanOrEqual0;
      VariableReference variableReference1 = new VariableReference(qName0);
      expressionArray0[6] = (Expression) variableReference1;
      CoreFunction coreFunction0 = new CoreFunction(13, expressionArray0);
      // Undeclared exception!
//      try { 
        coreFunction0.functionTrue((EvalContext) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.evosuite.runtime.System", e);
//      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Constant constant0 = new Constant("org.apache.commons.jxpath.JXPathContextFactoryConfigurationError");
      Expression[] expressionArray0 = new Expression[2];
      CoreOperationSubtract coreOperationSubtract0 = new CoreOperationSubtract(constant0, constant0);
      expressionArray0[0] = (Expression) coreOperationSubtract0;
      expressionArray0[1] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction(24, expressionArray0);
      coreFunction0.functionSubstring((EvalContext) null);
      // Undeclared exception!
//      try { 
        coreFunction0.functionSum((EvalContext) null);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // Incorrect number of arguments: sum(org.apache.commons.jxpath.ri.compiler.Constant@0000000001 - org.apache.commons.jxpath.ri.compiler.Constant@0000000001, 'org.apache.commons.jxpath.JXPathContextFactoryConfigurationError')
//         //
//         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[4];
      QName qName0 = new QName("org.apache.commons.jxpath.JXPathContextFactoryConfigurationError");
      ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, expressionArray0);
      CoreOperationUnion coreOperationUnion0 = new CoreOperationUnion(expressionArray0);
      CoreOperationGreaterThan coreOperationGreaterThan0 = new CoreOperationGreaterThan(extensionFunction0, coreOperationUnion0);
      expressionArray0[0] = (Expression) coreOperationGreaterThan0;
      VariableReference variableReference0 = new VariableReference(qName0);
      expressionArray0[1] = (Expression) variableReference0;
      ExtensionFunction extensionFunction1 = new ExtensionFunction(qName0, expressionArray0);
      expressionArray0[2] = (Expression) extensionFunction1;
      CoreOperationGreaterThanOrEqual coreOperationGreaterThanOrEqual0 = new CoreOperationGreaterThanOrEqual(expressionArray0[2], variableReference0);
      expressionArray0[3] = (Expression) coreOperationGreaterThanOrEqual0;
      CoreFunction coreFunction0 = new CoreFunction((-305), expressionArray0);
      // Undeclared exception!
      coreFunction0.functionFalse((EvalContext) null);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[4];
      Constant constant0 = new Constant("org.apache.commons.jxpath.BasicNodeSet");
      NameAttributeTest nameAttributeTest0 = new NameAttributeTest(constant0, constant0);
      CoreOperationDivide coreOperationDivide0 = new CoreOperationDivide(nameAttributeTest0, constant0);
      expressionArray0[0] = (Expression) coreOperationDivide0;
      QName qName0 = new QName("3030", (String) null);
      ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, expressionArray0);
      expressionArray0[1] = (Expression) extensionFunction0;
      CoreFunction coreFunction0 = new CoreFunction(1131, expressionArray0);
      Expression expression0 = coreFunction0.getArg1();
      expressionArray0[2] = expression0;
      CoreFunction coreFunction1 = new CoreFunction(1131, expressionArray0);
      expressionArray0[3] = (Expression) coreFunction1;
      CoreFunction coreFunction2 = new CoreFunction(20, expressionArray0);
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest((-477));
      NamespaceContext namespaceContext0 = new NamespaceContext((EvalContext) null, nodeTypeTest0);
      // Undeclared exception!
      coreFunction2.functionLocalName(namespaceContext0);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[3];
      Float float0 = new Float((double) 51);
      Constant constant0 = new Constant(float0);
      expressionArray0[0] = (Expression) constant0;
      Step[] stepArray0 = new Step[9];
      QName qName0 = new QName("org.apache.commons.jxpath.ri.compiler.CoreFunction", "33");
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
      Step step0 = new Step(51, nodeNameTest0, expressionArray0);
      stepArray0[0] = step0;
      Step step1 = new Step(2124, nodeNameTest0, expressionArray0);
      stepArray0[1] = step1;
      Step step2 = new Step(51, nodeNameTest0, expressionArray0);
      stepArray0[2] = step2;
      Step step3 = new Step(3291, (NodeTest) null, expressionArray0);
      stepArray0[3] = step3;
      Step step4 = new Step(2124, nodeNameTest0, expressionArray0);
      stepArray0[4] = step4;
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(19);
      Step step5 = new Step(51, nodeTypeTest0, expressionArray0);
      stepArray0[5] = step5;
      Step step6 = new Step(19, (NodeTest) null, expressionArray0);
      stepArray0[6] = step6;
      Step step7 = new Step(51, (NodeTest) null, expressionArray0);
      stepArray0[7] = step7;
      Step step8 = new Step(1023, (NodeTest) null, expressionArray0);
      stepArray0[8] = step8;
      ExpressionPath expressionPath0 = new ExpressionPath(constant0, expressionArray0, stepArray0);
      expressionArray0[1] = (Expression) expressionPath0;
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd(expressionArray0);
      expressionArray0[2] = (Expression) coreOperationAdd0;
      CoreFunction coreFunction0 = new CoreFunction(51, expressionArray0);
      PrecedingOrFollowingContext precedingOrFollowingContext0 = new PrecedingOrFollowingContext((EvalContext) null, nodeNameTest0, true);
      AncestorContext ancestorContext0 = new AncestorContext(precedingOrFollowingContext0, false, (NodeTest) null);
      // Undeclared exception!
      coreFunction0.functionStringLength(ancestorContext0);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)40;
      byteArray0[1] = (byte)40;
      byteArray0[2] = (byte)24;
      byteArray0[3] = (byte)47;
      byteArray0[4] = (byte)8;
      byteArray0[5] = (byte)47;
      byteArray0[6] = (byte)47;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      CoreFunction coreFunction0 = new CoreFunction((byte)24, (Expression[]) null);
      coreFunction0.computeContextDependent();
      Step[] stepArray0 = new Step[3];
      QName qName0 = new QName("()", "()");
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
      Step step0 = new Step((byte)8, nodeNameTest0, (Expression[]) null);
      stepArray0[0] = step0;
      Step step1 = new Step((byte)47, nodeNameTest0, (Expression[]) null);
      stepArray0[1] = step1;
      Step step2 = new Step((byte)40, nodeNameTest0, (Expression[]) null);
      stepArray0[2] = step2;
      ExpressionPath expressionPath0 = new ExpressionPath(coreFunction0, (Expression[]) null, stepArray0);
      // Undeclared exception!
//      try { 
        expressionPath0.evalSteps((EvalContext) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.jxpath.ri.compiler.Path", e);
//      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Integer integer0 = new Integer((-6));
      Constant constant0 = new Constant(integer0);
      Expression[] expressionArray0 = new Expression[1];
      expressionArray0[0] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction((-6), expressionArray0);
      coreFunction0.computeContextDependent();
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest((String) null);
      PrecedingOrFollowingContext precedingOrFollowingContext0 = new PrecedingOrFollowingContext((EvalContext) null, processingInstructionTest0, false);
      coreFunction0.computeValue(precedingOrFollowingContext0);
      coreFunction0.functionCeiling(precedingOrFollowingContext0);
      coreFunction0.functionBoolean((EvalContext) null);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Constant constant0 = new Constant("org.apache.commons.jxpath.JXPathContextFactoryConfigurationError");
      Expression[] expressionArray0 = new Expression[2];
      CoreOperationSubtract coreOperationSubtract0 = new CoreOperationSubtract(constant0, constant0);
      expressionArray0[0] = (Expression) coreOperationSubtract0;
      expressionArray0[1] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction(12, expressionArray0);
      coreFunction0.functionContains((EvalContext) null);
      coreFunction0.computeContextDependent();
      coreFunction0.computeValue((EvalContext) null);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(17, (Expression[]) null);
      coreFunction0.computeContextDependent();
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Constant constant0 = new Constant("org.apache.commons.jxpath.JXPathContextFactoryConfigurationError");
      Expression[] expressionArray0 = new Expression[2];
      CoreOperationSubtract coreOperationSubtract0 = new CoreOperationSubtract(constant0, constant0);
      expressionArray0[0] = (Expression) coreOperationSubtract0;
      expressionArray0[1] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction((byte)9, expressionArray0);
      coreFunction0.functionSubstringAfter((EvalContext) null);
      coreFunction0.computeValue((EvalContext) null);
      coreFunction0.functionStartsWith((EvalContext) null);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Integer integer0 = new Integer((-6));
      Constant constant0 = new Constant(integer0);
      Expression[] expressionArray0 = new Expression[1];
      expressionArray0[0] = (Expression) constant0;
      Expression[] expressionArray1 = new Expression[7];
      expressionArray1[0] = (Expression) constant0;
      expressionArray1[1] = (Expression) constant0;
      expressionArray1[2] = (Expression) constant0;
      expressionArray1[3] = (Expression) constant0;
      expressionArray1[4] = (Expression) constant0;
      expressionArray1[5] = (Expression) constant0;
      Step[] stepArray0 = new Step[5];
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(23);
      Step step0 = new Step((-1501), nodeTypeTest0, expressionArray0);
      stepArray0[0] = step0;
      Step step1 = new Step(2, nodeTypeTest0, expressionArray1);
      stepArray0[1] = step1;
      Step step2 = new Step(2, nodeTypeTest0, expressionArray0);
      stepArray0[2] = step2;
      Step step3 = new Step(23, nodeTypeTest0, expressionArray0);
      stepArray0[3] = step3;
      Step step4 = new Step(1, nodeTypeTest0, expressionArray1);
      stepArray0[4] = step4;
      ExpressionPath expressionPath0 = new ExpressionPath(expressionArray1[0], expressionArray0, stepArray0);
      expressionArray1[6] = (Expression) expressionPath0;
      CoreFunction coreFunction0 = new CoreFunction((-6), expressionArray1);
      // Undeclared exception!
      coreFunction0.functionLocalName((EvalContext) null);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(28, (Expression[]) null);
      coreFunction0.compute((EvalContext) null);
      coreFunction0.computeContextDependent();
      coreFunction0.computeContextDependent();
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      QName qName0 = new QName("G-d$_-+", "\"position\"");
      ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, expressionArray0);
      expressionArray0[0] = (Expression) extensionFunction0;
      CoreFunction coreFunction0 = new CoreFunction(104, expressionArray0);
      EvalContext evalContext0 = null;
      // Undeclared exception!
//      try { 
        coreFunction0.functionFalse((EvalContext) null);
//        fail("Expecting exception: StackOverflowError");
      
//      } catch(StackOverflowError e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[5];
      Long long0 = new Long(4);
      Constant constant0 = new Constant(long0);
      NameAttributeTest nameAttributeTest0 = new NameAttributeTest(constant0, constant0);
      expressionArray0[0] = (Expression) nameAttributeTest0;
      LocationPath locationPath0 = new LocationPath(false, (Step[]) null);
      expressionArray0[1] = (Expression) locationPath0;
      CoreOperationEqual coreOperationEqual0 = new CoreOperationEqual(locationPath0, expressionArray0[0]);
      expressionArray0[2] = (Expression) coreOperationEqual0;
      CoreOperationGreaterThanOrEqual coreOperationGreaterThanOrEqual0 = new CoreOperationGreaterThanOrEqual(constant0, nameAttributeTest0);
      expressionArray0[3] = (Expression) coreOperationGreaterThanOrEqual0;
      QName qName0 = new QName("boolean");
      ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, expressionArray0);
      expressionArray0[4] = (Expression) extensionFunction0;
      CoreFunction coreFunction0 = new CoreFunction((-1144), expressionArray0);
      AttributeContext attributeContext0 = new AttributeContext((EvalContext) null, (NodeTest) null);
      PredicateContext predicateContext0 = new PredicateContext((EvalContext) null, expressionArray0[1]);
      AttributeContext attributeContext1 = new AttributeContext(attributeContext0, (NodeTest) null);
      // Undeclared exception!
      coreFunction0.functionLast(predicateContext0);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[3];
      CoreOperationUnion coreOperationUnion0 = new CoreOperationUnion(expressionArray0);
      CoreOperationGreaterThan coreOperationGreaterThan0 = new CoreOperationGreaterThan(coreOperationUnion0, coreOperationUnion0);
      CoreOperationMultiply coreOperationMultiply0 = new CoreOperationMultiply(coreOperationGreaterThan0, coreOperationUnion0);
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual(coreOperationGreaterThan0, coreOperationMultiply0);
      expressionArray0[0] = (Expression) coreOperationLessThanOrEqual0;
      NameAttributeTest nameAttributeTest0 = new NameAttributeTest(expressionArray0[0], expressionArray0[0]);
      CoreOperationNegate coreOperationNegate0 = new CoreOperationNegate(nameAttributeTest0);
      expressionArray0[1] = (Expression) coreOperationNegate0;
      Step[] stepArray0 = new Step[8];
      Step step0 = new Step(10, (NodeTest) null, expressionArray0);
      stepArray0[0] = step0;
      Step step1 = new Step(10, (NodeTest) null, expressionArray0);
      stepArray0[1] = step1;
      Expression[] expressionArray1 = new Expression[1];
      expressionArray1[0] = (Expression) coreOperationUnion0;
      Step step2 = new Step(1852, (NodeTest) null, expressionArray1);
      stepArray0[2] = step2;
      Step step3 = new Step(1852, (NodeTest) null, expressionArray1);
      stepArray0[3] = step3;
      Step step4 = new Step((-2959), (NodeTest) null, expressionArray1);
      stepArray0[4] = step4;
      Step step5 = new Step(10, (NodeTest) null, expressionArray0);
      stepArray0[5] = step5;
      Step step6 = new Step((-4289), (NodeTest) null, expressionArray1);
      stepArray0[6] = step6;
      Step step7 = new Step(3745, (NodeTest) null, (Expression[]) null);
      stepArray0[7] = step7;
      LocationPath locationPath0 = new LocationPath(true, stepArray0);
      expressionArray0[2] = (Expression) locationPath0;
      CoreFunction coreFunction0 = new CoreFunction(10, expressionArray0);
      DescendantContext descendantContext0 = new DescendantContext((EvalContext) null, false, (NodeTest) null);
      QName qName0 = new QName("33", "33");
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, "33");
      PrecedingOrFollowingContext precedingOrFollowingContext0 = new PrecedingOrFollowingContext(descendantContext0, nodeNameTest0, false);
      ParentContext parentContext0 = new ParentContext(precedingOrFollowingContext0, (NodeTest) null);
      // Undeclared exception!
      coreFunction0.functionSum(parentContext0);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[2];
      CoreOperationAnd coreOperationAnd0 = new CoreOperationAnd(expressionArray0);
      CoreOperationNotEqual coreOperationNotEqual0 = new CoreOperationNotEqual(coreOperationAnd0, coreOperationAnd0);
      expressionArray0[0] = (Expression) coreOperationNotEqual0;
      CoreOperationGreaterThanOrEqual coreOperationGreaterThanOrEqual0 = new CoreOperationGreaterThanOrEqual(coreOperationNotEqual0, expressionArray0[0]);
      expressionArray0[1] = (Expression) coreOperationGreaterThanOrEqual0;
      CoreFunction coreFunction0 = new CoreFunction((-120), expressionArray0);
      NodeSetContext nodeSetContext0 = new NodeSetContext((EvalContext) null, (NodeSet) null);
      PredicateContext predicateContext0 = new PredicateContext(nodeSetContext0, coreFunction0);
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(2798);
      AttributeContext attributeContext0 = new AttributeContext(predicateContext0, nodeTypeTest0);
      ChildContext childContext0 = new ChildContext(attributeContext0, nodeTypeTest0, false, true);
      ParentContext parentContext0 = new ParentContext(childContext0, nodeTypeTest0);
      // Undeclared exception!
//      try { 
        coreFunction0.functionContains(parentContext0);
//        fail("Expecting exception: StackOverflowError");
      
//      } catch(StackOverflowError e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[9];
      Constant constant0 = new Constant("");
      CoreOperationSubtract coreOperationSubtract0 = new CoreOperationSubtract(constant0, constant0);
      expressionArray0[0] = (Expression) coreOperationSubtract0;
      Constant constant1 = new Constant("");
      expressionArray0[1] = (Expression) constant1;
      QName qName0 = new QName("1/|f}BA69wMEu25SA", "The PI \"");
      ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, expressionArray0);
      expressionArray0[2] = (Expression) extensionFunction0;
      VariableReference variableReference0 = new VariableReference(qName0);
      CoreOperationSubtract coreOperationSubtract1 = new CoreOperationSubtract(variableReference0, expressionArray0[2]);
      expressionArray0[3] = (Expression) coreOperationSubtract1;
      ExtensionFunction extensionFunction1 = new ExtensionFunction(qName0, expressionArray0);
      expressionArray0[4] = (Expression) extensionFunction1;
      ExtensionFunction extensionFunction2 = new ExtensionFunction(qName0, expressionArray0);
      expressionArray0[5] = (Expression) extensionFunction2;
      CoreOperationUnion coreOperationUnion0 = new CoreOperationUnion(expressionArray0);
      CoreOperationMultiply coreOperationMultiply0 = new CoreOperationMultiply(coreOperationUnion0, constant0);
      expressionArray0[6] = (Expression) coreOperationMultiply0;
      NameAttributeTest nameAttributeTest0 = new NameAttributeTest(coreOperationSubtract1, coreOperationMultiply0);
      expressionArray0[7] = (Expression) nameAttributeTest0;
      CoreOperationOr coreOperationOr0 = new CoreOperationOr(expressionArray0);
      expressionArray0[8] = (Expression) coreOperationOr0;
      CoreFunction coreFunction0 = new CoreFunction(10, expressionArray0);
      // Undeclared exception!
      coreFunction0.functionBoolean((EvalContext) null);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Integer integer0 = new Integer(3);
      int int0 = 13;
      Expression[] expressionArray0 = new Expression[8];
      CoreOperationOr coreOperationOr0 = new CoreOperationOr(expressionArray0);
      expressionArray0[0] = (Expression) coreOperationOr0;
      CoreOperationUnion coreOperationUnion0 = new CoreOperationUnion(expressionArray0);
      expressionArray0[3] = (Expression) coreOperationUnion0;
      CoreFunction coreFunction0 = new CoreFunction(16384, expressionArray0);
      expressionArray0[2] = (Expression) coreFunction0;
      CoreOperationGreaterThan coreOperationGreaterThan0 = new CoreOperationGreaterThan(expressionArray0[1], coreOperationUnion0);
      expressionArray0[3] = (Expression) coreOperationGreaterThan0;
      CoreOperationMultiply coreOperationMultiply0 = new CoreOperationMultiply(coreOperationUnion0, coreOperationGreaterThan0);
      expressionArray0[4] = (Expression) coreOperationMultiply0;
      CoreOperationMultiply coreOperationMultiply1 = new CoreOperationMultiply(expressionArray0[1], expressionArray0[0]);
      expressionArray0[5] = (Expression) coreOperationMultiply1;
      QName qName0 = new QName("nS<M4V1/$JKPf");
      ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, expressionArray0);
      expressionArray0[6] = (Expression) extensionFunction0;
      Step[] stepArray0 = new Step[0];
      ExpressionPath expressionPath0 = new ExpressionPath(expressionArray0[3], expressionArray0, stepArray0);
      expressionArray0[7] = (Expression) expressionPath0;
      CoreFunction coreFunction1 = new CoreFunction(13, expressionArray0);
      EvalContext evalContext0 = null;
      // Undeclared exception!
//      try { 
        coreFunction1.computeValue((EvalContext) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.evosuite.runtime.System", e);
//      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[3];
      CoreOperationNegate coreOperationNegate0 = new CoreOperationNegate((Expression) null);
      NameAttributeTest nameAttributeTest0 = new NameAttributeTest(coreOperationNegate0, coreOperationNegate0);
      CoreOperationSubtract coreOperationSubtract0 = new CoreOperationSubtract(nameAttributeTest0, (Expression) null);
      CoreOperationMod coreOperationMod0 = new CoreOperationMod(coreOperationSubtract0, nameAttributeTest0);
      CoreOperationNotEqual coreOperationNotEqual0 = new CoreOperationNotEqual(coreOperationMod0, coreOperationMod0);
      expressionArray0[0] = (Expression) coreOperationNotEqual0;
      CoreFunction coreFunction0 = new CoreFunction(4, expressionArray0);
      coreFunction0.getArg2();
      expressionArray0[1] = null;
      Step[] stepArray0 = new Step[0];
      ExpressionPath expressionPath0 = new ExpressionPath((Expression) null, expressionArray0, stepArray0);
      expressionArray0[2] = (Expression) expressionPath0;
      CoreFunction coreFunction1 = new CoreFunction(4, expressionArray0);
      EvalContext evalContext0 = null;
      // Undeclared exception!
      coreFunction1.computeValue((EvalContext) null);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Constant constant0 = new Constant("org.apache.commons.jxpath.JXPathContextFactoryConfigurationError");
      Expression[] expressionArray0 = new Expression[2];
      CoreOperationSubtract coreOperationSubtract0 = new CoreOperationSubtract(constant0, constant0);
      expressionArray0[0] = (Expression) coreOperationSubtract0;
      expressionArray0[1] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction((byte)9, expressionArray0);
      coreFunction0.functionSubstringBefore((EvalContext) null);
      Object object0 = coreFunction0.functionContains((EvalContext) null);
      assertEquals(9, coreFunction0.getFunctionCode());
      assertEquals(false, object0);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[3];
      CoreFunction coreFunction0 = new CoreFunction(7, expressionArray0);
      CoreFunction coreFunction1 = new CoreFunction(7, expressionArray0);
      // Undeclared exception!
//      try { 
        coreFunction0.compute((EvalContext) null);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // Incorrect number of arguments: name(null, null, null)
//         //
//         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[2];
      CoreFunction coreFunction0 = new CoreFunction(17, (Expression[]) null);
      // Undeclared exception!
//      try { 
        coreFunction0.compute((EvalContext) null);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // Incorrect number of arguments: translate()
//         //
//         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Integer integer0 = new Integer(30);
      Constant constant0 = new Constant(integer0);
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(30);
      Expression[] expressionArray0 = new Expression[2];
      expressionArray0[0] = (Expression) constant0;
      Expression[] expressionArray1 = new Expression[8];
      expressionArray1[0] = (Expression) constant0;
      expressionArray1[1] = (Expression) constant0;
      expressionArray1[2] = (Expression) constant0;
      expressionArray1[3] = (Expression) constant0;
      expressionArray1[4] = (Expression) constant0;
      expressionArray1[5] = (Expression) constant0;
      expressionArray1[6] = (Expression) constant0;
      expressionArray1[7] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction(28, expressionArray1);
      EvalContext evalContext0 = null;
      // Undeclared exception!
//      try { 
        coreFunction0.compute((EvalContext) null);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // Incorrect number of arguments: unknownFunction28()(30, 30, 30, 30, 30, 30, 30, 30)
//         //
//         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[23];
      QName qName0 = new QName("\" \"");
      ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, expressionArray0);
      expressionArray0[0] = (Expression) extensionFunction0;
      CoreFunction coreFunction0 = new CoreFunction(19, expressionArray0);
      Expression expression0 = coreFunction0.getArg2();
      expressionArray0[1] = null;
      CoreOperationMultiply coreOperationMultiply0 = new CoreOperationMultiply(expression0, extensionFunction0);
      expressionArray0[2] = (Expression) coreOperationMultiply0;
      Expression expression1 = coreFunction0.getArg1();
      expressionArray0[3] = expression1;
      ExtensionFunction extensionFunction1 = new ExtensionFunction(qName0, expressionArray0);
      expressionArray0[4] = (Expression) extensionFunction1;
      CoreFunction coreFunction1 = new CoreFunction(153, expressionArray0);
      EvalContext evalContext0 = null;
      coreFunction1.compute((EvalContext) null);
      // Undeclared exception!
      coreFunction1.functionStartsWith((EvalContext) null);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Integer integer0 = new Integer(30);
      Constant constant0 = new Constant(integer0);
      EvalContext evalContext0 = null;
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(30);
      Expression[] expressionArray0 = new Expression[2];
      expressionArray0[0] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction(30, expressionArray0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      // Undeclared exception!
//      try { 
        coreFunction0.iteratePointers((EvalContext) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      EvalContext evalContext0 = null;
      Expression[] expressionArray0 = new Expression[3];
      Constant constant0 = new Constant("]|W;3i4G!-|_8vAo_");
      expressionArray0[0] = (Expression) constant0;
      CoreOperationMod coreOperationMod0 = new CoreOperationMod(constant0, constant0);
      expressionArray0[1] = (Expression) coreOperationMod0;
      CoreOperationDivide coreOperationDivide0 = new CoreOperationDivide(constant0, expressionArray0[1]);
      expressionArray0[2] = (Expression) coreOperationDivide0;
      CoreFunction coreFunction0 = new CoreFunction(9, expressionArray0);
      // Undeclared exception!
//      try { 
        coreFunction0.computeValue((EvalContext) null);
//        fail("Expecting exception: ArithmeticException");
      
//      } catch(ArithmeticException e) {
//         //
//         // / by zero
//         //
//         verifyException("org.apache.commons.jxpath.ri.compiler.CoreOperationMod", e);
//      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      Integer integer0 = new Integer(30);
      Constant constant0 = new Constant(integer0);
      EvalContext evalContext0 = null;
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(30);
      Expression[] expressionArray0 = new Expression[2];
      expressionArray0[0] = (Expression) constant0;
      expressionArray0[1] = (Expression) constant0;
      constant0.iterate((EvalContext) null);
      CoreFunction coreFunction0 = new CoreFunction(536, expressionArray0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      coreFunction0.iteratePointers((EvalContext) null);
      coreFunction0.functionSubstringAfter((EvalContext) null);
      constant0.toString();
      // Undeclared exception!
//      try { 
        coreFunction0.functionKey((EvalContext) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[2];
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd(expressionArray0);
      expressionArray0[0] = (Expression) coreOperationAdd0;
      Step[] stepArray0 = new Step[7];
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(8);
      Step step0 = new Step(8, nodeTypeTest0, expressionArray0);
      stepArray0[0] = step0;
      Step step1 = new Step(8, nodeTypeTest0, expressionArray0);
      stepArray0[1] = step1;
      Expression[] expressionArray1 = new Expression[3];
      expressionArray1[0] = (Expression) coreOperationAdd0;
      expressionArray1[1] = (Expression) coreOperationAdd0;
      expressionArray1[2] = (Expression) coreOperationAdd0;
      Step step2 = new Step(8, nodeTypeTest0, expressionArray1);
      stepArray0[2] = step2;
      Expression[] expressionArray2 = new Expression[4];
      expressionArray2[0] = (Expression) coreOperationAdd0;
      expressionArray2[1] = (Expression) coreOperationAdd0;
      expressionArray2[2] = (Expression) coreOperationAdd0;
      expressionArray2[3] = (Expression) coreOperationAdd0;
      Step step3 = new Step(4096, nodeTypeTest0, expressionArray2);
      stepArray0[3] = step3;
      Step step4 = new Step((-592), nodeTypeTest0, expressionArray0);
      stepArray0[4] = step4;
      Step step5 = new Step((-1991), nodeTypeTest0, expressionArray0);
      stepArray0[5] = step5;
      Step step6 = new Step(2, nodeTypeTest0, expressionArray2);
      stepArray0[6] = step6;
      LocationPath locationPath0 = new LocationPath(false, stepArray0);
      expressionArray0[1] = (Expression) locationPath0;
      CoreFunction coreFunction0 = new CoreFunction(4096, expressionArray0);
      // Undeclared exception!
      coreFunction0.functionName((EvalContext) null);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(30, (Expression[]) null);
      coreFunction0.computeContextDependent();
      JXPathContext jXPathContext0 = null;
      QName qName0 = new QName("\"position\"", "\"position\"");
      VariablePointer variablePointer0 = new VariablePointer(qName0);
      // Undeclared exception!
//      try { 
        variablePointer0.createChild((JXPathContext) null, qName0, 30, (Object) "\"position\"");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.jxpath.ri.model.VariablePointer", e);
//      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      QName qName0 = new QName("", "");
      VariableReference variableReference0 = new VariableReference(qName0);
      QName qName1 = new QName("", "");
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName1);
      Expression[] expressionArray0 = new Expression[9];
      expressionArray0[0] = (Expression) variableReference0;
      expressionArray0[1] = (Expression) variableReference0;
      Expression[] expressionArray1 = new Expression[9];
      expressionArray1[0] = (Expression) variableReference0;
      expressionArray1[1] = (Expression) variableReference0;
      expressionArray1[2] = (Expression) variableReference0;
      expressionArray1[3] = (Expression) variableReference0;
      expressionArray1[4] = (Expression) variableReference0;
      expressionArray1[5] = (Expression) variableReference0;
      expressionArray1[6] = (Expression) variableReference0;
      expressionArray1[7] = (Expression) variableReference0;
      expressionArray1[8] = (Expression) variableReference0;
      CoreOperationUnion coreOperationUnion0 = new CoreOperationUnion(expressionArray1);
      expressionArray0[2] = (Expression) coreOperationUnion0;
      expressionArray0[3] = (Expression) variableReference0;
      expressionArray0[4] = (Expression) variableReference0;
      expressionArray0[5] = (Expression) variableReference0;
      expressionArray0[6] = (Expression) variableReference0;
      Step[] stepArray0 = new Step[7];
      Expression[] expressionArray2 = new Expression[9];
      expressionArray2[0] = (Expression) variableReference0;
      expressionArray2[1] = (Expression) variableReference0;
      expressionArray2[2] = (Expression) variableReference0;
      expressionArray2[3] = (Expression) variableReference0;
      expressionArray2[4] = (Expression) coreOperationUnion0;
      expressionArray2[5] = (Expression) variableReference0;
      expressionArray2[6] = (Expression) coreOperationUnion0;
      expressionArray2[7] = (Expression) coreOperationUnion0;
      expressionArray2[8] = (Expression) coreOperationUnion0;
      Step step0 = new Step(762, nodeNameTest0, expressionArray2);
      stepArray0[0] = step0;
      Step step1 = new Step((-762), nodeNameTest0, expressionArray2);
      stepArray0[1] = step1;
      Step step2 = new Step(140, nodeNameTest0, expressionArray0);
      stepArray0[2] = step2;
      Step step3 = new Step(762, nodeNameTest0, expressionArray2);
      stepArray0[3] = step3;
      Step step4 = new Step((-1759), nodeNameTest0, expressionArray2);
      stepArray0[4] = step4;
      Expression[] expressionArray3 = new Expression[2];
      expressionArray3[0] = (Expression) coreOperationUnion0;
      expressionArray3[1] = (Expression) coreOperationUnion0;
      Step step5 = new Step((-762), nodeNameTest0, expressionArray3);
      stepArray0[5] = step5;
      Step step6 = new Step((-1759), nodeNameTest0, expressionArray2);
      stepArray0[6] = step6;
      ExpressionPath expressionPath0 = new ExpressionPath(expressionArray0[5], expressionArray0, stepArray0);
      expressionArray0[7] = (Expression) expressionPath0;
      expressionArray0[8] = (Expression) variableReference0;
      CoreFunction coreFunction0 = new CoreFunction(140, expressionArray0);
      // Undeclared exception!
      coreFunction0.functionTrue((EvalContext) null);
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      Long long0 = new Long(18);
      Constant constant0 = new Constant(long0);
      Expression[] expressionArray0 = new Expression[1];
      expressionArray0[0] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction(18, expressionArray0);
      CoreOperationDivide coreOperationDivide0 = new CoreOperationDivide(expressionArray0[0], expressionArray0[0]);
      PredicateContext predicateContext0 = new PredicateContext((EvalContext) null, coreOperationDivide0);
      coreFunction0.functionNamespaceURI(predicateContext0);
      Object object0 = coreFunction0.functionFloor((EvalContext) null);
      assertEquals(18.0, object0);
      assertEquals(18, coreFunction0.getFunctionCode());
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(11, (Expression[]) null);
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = mock(JXPathContextReferenceImpl.class, new ViolatedAssumptionAnswer());
      doReturn((Locale) null).when(jXPathContextReferenceImpl0).getLocale();
      doReturn((NamespaceResolver) null, (NamespaceResolver) null).when(jXPathContextReferenceImpl0).getNamespaceResolver();
      QName qName0 = new QName("%mdIe%MM1&:");
      Locale locale0 = Locale.JAPAN;
      NodePointer nodePointer0 = NodePointer.newNodePointer(qName0, qName0, locale0);
      RootContext rootContext0 = new RootContext(jXPathContextReferenceImpl0, nodePointer0);
      JXPathContext jXPathContext0 = rootContext0.getJXPathContext();
      JXPathContextReferenceImpl jXPathContextReferenceImpl1 = new JXPathContextReferenceImpl(jXPathContext0, (Object) null, nodePointer0);
      EvalContext evalContext0 = jXPathContextReferenceImpl1.getAbsoluteRootContext();
      // Undeclared exception!
//      try { 
        coreFunction0.compute(evalContext0);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // Incorrect number of arguments: contains()
//         //
//         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      CoreFunction coreFunction0 = new CoreFunction(11, (Expression[]) null);
      // Undeclared exception!
//      try { 
        coreFunction0.compute((EvalContext) null);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // Incorrect number of arguments: contains()
//         //
//         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(24, (Expression[]) null);
      EvalContext evalContext0 = null;
      // Undeclared exception!
//      try { 
        coreFunction0.compute((EvalContext) null);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // Incorrect number of arguments: sum()
//         //
//         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(23, (Expression[]) null);
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = mock(JXPathContextReferenceImpl.class, new ViolatedAssumptionAnswer());
      doReturn((NamespaceResolver) null).when(jXPathContextReferenceImpl0).getNamespaceResolver();
      BasicVariables basicVariables0 = new BasicVariables();
      QName qName0 = new QName("_3y?.Z%`P@I");
      VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
      RootContext rootContext0 = new RootContext(jXPathContextReferenceImpl0, variablePointer0);
      rootContext0.getJXPathContext();
      coreFunction0.functionNamespaceURI(rootContext0);
      coreFunction0.isContextDependent();
      // Undeclared exception!
//      try { 
        coreFunction0.compute(rootContext0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // No such variable: '_3y?.Z%`P@I'
//         //
//         verifyException("org.apache.commons.jxpath.BasicVariables", e);
//      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(8, expressionArray0);
      coreFunction0.getArgumentCount();
      CoreFunction coreFunction1 = new CoreFunction(6, expressionArray0);
      // Undeclared exception!
//      try { 
        coreFunction1.compute((EvalContext) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      Constant constant0 = new Constant("org.apache.commons.jxpath.JXPathContextFactoryConfigurationError");
      Expression[] expressionArray0 = new Expression[2];
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "LJO5=p");
      CoreOperationSubtract coreOperationSubtract0 = new CoreOperationSubtract(constant0, constant0);
      expressionArray0[0] = (Expression) coreOperationSubtract0;
      constant0.toString();
      expressionArray0[1] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction((byte)9, expressionArray0);
      boolean boolean0 = coreFunction0.isContextDependent();
      assertFalse(boolean0);
      
      Object object0 = coreFunction0.compute((EvalContext) null);
      assertNotNull(object0);
      assertEquals("NaNorg.apache.commons.jxpath.JXPathContextFactoryConfigurationError", object0);
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      Double double0 = Expression.ONE;
      Constant constant0 = new Constant(double0);
      CoreFunction coreFunction0 = new CoreFunction(11, (Expression[]) null);
      coreFunction0.isContextDependent();
      coreFunction0.toString();
      // Undeclared exception!
//      try { 
        coreFunction0.functionSum((EvalContext) null);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // Incorrect number of arguments: contains()
//         //
//         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(5, (Expression[]) null);
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = mock(JXPathContextReferenceImpl.class, new ViolatedAssumptionAnswer());
      doReturn((NamespaceResolver) null).when(jXPathContextReferenceImpl0).getNamespaceResolver();
      BasicVariables basicVariables0 = new BasicVariables();
      QName qName0 = new QName("_3y?.Z%`P@I");
      VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
      RootContext rootContext0 = new RootContext(jXPathContextReferenceImpl0, variablePointer0);
      rootContext0.getJXPathContext();
      coreFunction0.functionNamespaceURI(rootContext0);
      coreFunction0.getArgumentCount();
      // Undeclared exception!
//      try { 
        coreFunction0.functionStringLength(rootContext0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // No such variable: '_3y?.Z%`P@I'
//         //
//         verifyException("org.apache.commons.jxpath.BasicVariables", e);
//      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(18, expressionArray0);
      CoreFunction coreFunction1 = new CoreFunction(18, expressionArray0);
      // Undeclared exception!
//      try { 
        coreFunction0.compute((EvalContext) null);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // Incorrect number of arguments: boolean()
//         //
//         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(30, expressionArray0);
      Step[] stepArray0 = new Step[5];
      Step step0 = new Step(30, (NodeTest) null, expressionArray0);
      stepArray0[0] = step0;
      Step step1 = new Step(13, (NodeTest) null, expressionArray0);
      stepArray0[1] = step1;
      Step step2 = new Step(30, (NodeTest) null, expressionArray0);
      stepArray0[2] = step2;
      Step step3 = new Step(30, (NodeTest) null, expressionArray0);
      stepArray0[3] = step3;
      Step step4 = new Step((-168), (NodeTest) null, expressionArray0);
      stepArray0[4] = step4;
      ExpressionPath expressionPath0 = new ExpressionPath(coreFunction0, expressionArray0, stepArray0);
      AttributeContext attributeContext0 = new AttributeContext((EvalContext) null, (NodeTest) null);
      DescendantContext descendantContext0 = new DescendantContext(attributeContext0, false, (NodeTest) null);
      AncestorContext ancestorContext0 = new AncestorContext(descendantContext0, false, (NodeTest) null);
      expressionPath0.createContextForStep(ancestorContext0, 561, (NodeTest) null);
      // Undeclared exception!
//      try { 
        coreFunction0.computeValue((EvalContext) null);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // Incorrect number of arguments: format-number()
//         //
//         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(24, (Expression[]) null);
      Step[] stepArray0 = new Step[8];
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(24);
      Step step0 = new Step(24, nodeTypeTest0, (Expression[]) null);
      stepArray0[0] = step0;
      Step step1 = new Step((-687), nodeTypeTest0, (Expression[]) null);
      step1.isContextDependent();
      stepArray0[1] = step1;
      Step step2 = new Step((-11), nodeTypeTest0, (Expression[]) null);
      stepArray0[2] = step2;
      Step step3 = new Step(2709, nodeTypeTest0, (Expression[]) null);
      stepArray0[3] = step3;
      Step step4 = new Step((-11), nodeTypeTest0, (Expression[]) null);
      stepArray0[4] = step4;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Expression[] expressionArray0 = new Expression[5];
      expressionArray0[0] = (Expression) coreFunction0;
      expressionArray0[1] = (Expression) coreFunction0;
      expressionArray0[2] = (Expression) coreFunction0;
      expressionArray0[3] = (Expression) coreFunction0;
      expressionArray0[4] = (Expression) coreFunction0;
      Step step5 = new Step(2070, nodeTypeTest0, expressionArray0);
      stepArray0[5] = step5;
      Step step6 = new Step((-687), nodeTypeTest0, (Expression[]) null);
      stepArray0[6] = step6;
      Step step7 = new Step((-11), nodeTypeTest0, (Expression[]) null);
      stepArray0[7] = step7;
      ExpressionPath expressionPath0 = new ExpressionPath(coreFunction0, (Expression[]) null, stepArray0);
      EvalContext evalContext0 = null;
      expressionPath0.evalSteps((EvalContext) null);
      // Undeclared exception!
//      try { 
        coreFunction0.functionNot((EvalContext) null);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // Incorrect number of arguments: sum()
//         //
//         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(13, (Expression[]) null);
      CoreFunction coreFunction1 = new CoreFunction(13, (Expression[]) null);
      EvalContext evalContext0 = null;
      JXPathContext jXPathContext0 = JXPathContext.newContext((JXPathContext) null, (Object) null);
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = new JXPathContextReferenceImpl(jXPathContext0, jXPathContext0, (Pointer) null);
      EvalContext evalContext1 = jXPathContextReferenceImpl0.getAbsoluteRootContext();
      coreFunction1.functionLast(evalContext1);
      // Undeclared exception!
//      try { 
        coreFunction0.compute((EvalContext) null);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // Incorrect number of arguments: substring-after()
//         //
//         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(13, (Expression[]) null);
      CoreFunction coreFunction1 = new CoreFunction(13, (Expression[]) null);
      QName qName0 = new QName("t!xtR'", "; ");
      CoreFunction coreFunction2 = new CoreFunction(13, (Expression[]) null);
      CoreFunction coreFunction3 = new CoreFunction(11, (Expression[]) null);
      boolean boolean0 = coreFunction3.computeContextDependent();
      assertFalse(boolean0);
      assertEquals(11, coreFunction3.getFunctionCode());
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(20, expressionArray0);
      QName qName0 = new QName("org.apache.commons.jxpath.ri.model.beans.BeanPropertyPointer");
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, "b8vUOkXAt'_");
      AncestorContext ancestorContext0 = new AncestorContext((EvalContext) null, true, nodeNameTest0);
      BasicNodeSet basicNodeSet0 = new BasicNodeSet();
      NodeSetContext nodeSetContext0 = new NodeSetContext((EvalContext) null, basicNodeSet0);
      CoreFunction coreFunction1 = new CoreFunction(20, expressionArray0);
      coreFunction1.getArgumentCount();
      CoreFunction coreFunction2 = new CoreFunction(27, expressionArray0);
      coreFunction0.toString();
      coreFunction2.computeContextDependent();
      // Undeclared exception!
//      try { 
        coreFunction0.functionLast(ancestorContext0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.jxpath.ri.axes.AncestorContext", e);
//      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(14, expressionArray0);
      coreFunction0.isContextDependent();
      String string0 = "key";
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("key");
      EvalContext evalContext0 = null;
      // Undeclared exception!
//      try { 
        coreFunction0.computeValue((EvalContext) null);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // Incorrect number of arguments: substring()
//         //
//         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      Constant constant0 = new Constant("RM");
      CoreOperationNegate coreOperationNegate0 = new CoreOperationNegate(constant0);
      CoreFunction coreFunction0 = new CoreFunction(25, expressionArray0);
      // Undeclared exception!
//      try { 
        coreFunction0.compute((EvalContext) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      Integer integer0 = new Integer(3);
      Constant constant0 = new Constant(integer0);
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(3);
      Expression[] expressionArray0 = new Expression[2];
      expressionArray0[0] = (Expression) constant0;
      expressionArray0[1] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction(536, expressionArray0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      coreFunction0.iteratePointers((EvalContext) null);
      coreFunction0.functionStartsWith((EvalContext) null);
      // Undeclared exception!
//      try { 
        coreFunction0.functionStringLength((EvalContext) null);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // Incorrect number of arguments: unknownFunction536()(3, 3)
//         //
//         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      Constant constant0 = new Constant("Q7,@");
      constant0.toString();
      Byte byte0 = new Byte((byte)34);
      EvalContext evalContext0 = null;
      Expression[] expressionArray0 = new Expression[4];
      expressionArray0[0] = (Expression) constant0;
      expressionArray0[1] = (Expression) constant0;
      expressionArray0[2] = (Expression) constant0;
      expressionArray0[3] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction(9, expressionArray0);
      coreFunction0.computeValue((EvalContext) null);
      // Undeclared exception!
//      try { 
        coreFunction0.functionNamespaceURI((EvalContext) null);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // Incorrect number of arguments: concat('Q7,@', 'Q7,@', 'Q7,@', 'Q7,@')
//         //
//         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[4];
      Step[] stepArray0 = new Step[4];
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)3;
      byteArray0[1] = (byte)65;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)25;
      byteArray0[4] = (byte)97;
      byteArray0[5] = (byte)5;
      byteArray0[6] = (byte)15;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(1);
      Step step0 = new Step((-2071), nodeTypeTest0, expressionArray0);
      stepArray0[0] = step0;
      Step step1 = new Step(13, nodeTypeTest0, expressionArray0);
      stepArray0[1] = step1;
      Step step2 = new Step(3105, nodeTypeTest0, expressionArray0);
      stepArray0[2] = step2;
      Step step3 = new Step(1, nodeTypeTest0, expressionArray0);
      stepArray0[3] = step3;
      LocationPath locationPath0 = new LocationPath(true, stepArray0);
      expressionArray0[0] = (Expression) locationPath0;
      CoreOperationDivide coreOperationDivide0 = new CoreOperationDivide(locationPath0, locationPath0);
      expressionArray0[1] = (Expression) coreOperationDivide0;
      Double double0 = Double.valueOf((-559.34338264386));
      Constant constant0 = new Constant(double0);
      expressionArray0[2] = (Expression) constant0;
      CoreOperationMultiply coreOperationMultiply0 = new CoreOperationMultiply(expressionArray0[2], locationPath0);
      expressionArray0[3] = (Expression) coreOperationMultiply0;
      CoreFunction coreFunction0 = new CoreFunction(8, expressionArray0);
      CoreFunction coreFunction1 = new CoreFunction((-2071), (Expression[]) null);
      EvalContext evalContext0 = null;
      // Undeclared exception!
//      try { 
        coreFunction0.functionID((EvalContext) null);
//        fail("Expecting exception: StackOverflowError");
      
//      } catch(StackOverflowError e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(18, expressionArray0);
      String string0 = coreFunction0.getFunctionName();
      assertEquals("boolean", string0);
      
      boolean boolean0 = coreFunction0.computeContextDependent();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      Long long0 = new Long(1099511627776L);
      Constant constant0 = new Constant(long0);
      expressionArray0[0] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction(110, expressionArray0);
      PredicateContext predicateContext0 = new PredicateContext((EvalContext) null, coreFunction0);
      coreFunction0.functionName(predicateContext0);
      Object object0 = coreFunction0.functionCount(predicateContext0);
      assertEquals(110, coreFunction0.getFunctionCode());
      assertEquals(1.0, object0);
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      Byte byte0 = new Byte((byte) (-113));
      Expression[] expressionArray0 = new Expression[1];
      Constant constant0 = new Constant(byte0);
      CoreFunction coreFunction0 = new CoreFunction((byte)19, expressionArray0);
      // Undeclared exception!
//      try { 
        coreFunction0.computeValue((EvalContext) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      int int0 = 3;
      Integer integer0 = new Integer(3);
      Expression[] expressionArray0 = new Expression[4];
      QName qName0 = new QName("X/|-p$lHk=j<JuwH", " to type ");
      ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, expressionArray0);
      NameAttributeTest nameAttributeTest0 = new NameAttributeTest(extensionFunction0, extensionFunction0);
      expressionArray0[0] = (Expression) nameAttributeTest0;
      Expression[] expressionArray1 = new Expression[8];
      expressionArray1[0] = (Expression) extensionFunction0;
      expressionArray1[1] = (Expression) extensionFunction0;
      expressionArray1[2] = (Expression) nameAttributeTest0;
      expressionArray1[3] = (Expression) extensionFunction0;
      expressionArray1[4] = (Expression) extensionFunction0;
      expressionArray1[5] = (Expression) extensionFunction0;
      expressionArray1[6] = (Expression) nameAttributeTest0;
      expressionArray1[7] = (Expression) nameAttributeTest0;
      CoreFunction coreFunction0 = new CoreFunction(3, expressionArray1);
      Expression expression0 = coreFunction0.getArg2();
      expressionArray0[1] = expression0;
      CoreOperationOr coreOperationOr0 = new CoreOperationOr(expressionArray0);
      expressionArray0[2] = (Expression) coreOperationOr0;
      Expression[] expressionArray2 = new Expression[1];
      expressionArray2[0] = (Expression) extensionFunction0;
      CoreOperationUnion coreOperationUnion0 = new CoreOperationUnion(expressionArray2);
      expressionArray0[3] = (Expression) coreOperationUnion0;
      CoreFunction coreFunction1 = new CoreFunction(1, expressionArray0);
      EvalContext evalContext0 = null;
      // Undeclared exception!
      coreFunction0.functionLang((EvalContext) null);
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Expression[] expressionArray0 = new Expression[3];
      Constant constant0 = new Constant("r|C");
      expressionArray0[0] = (Expression) constant0;
      CoreOperationMultiply coreOperationMultiply0 = new CoreOperationMultiply(constant0, expressionArray0[0]);
      expressionArray0[1] = (Expression) coreOperationMultiply0;
      CoreOperationUnion coreOperationUnion0 = new CoreOperationUnion(expressionArray0);
      expressionArray0[2] = (Expression) coreOperationUnion0;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      CoreFunction coreFunction0 = new CoreFunction((-3587), expressionArray0);
      // Undeclared exception!
      coreFunction0.computeContextDependent();
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(20, (Expression[]) null);
      CoreFunction coreFunction1 = new CoreFunction(17, (Expression[]) null);
      CoreFunction coreFunction2 = new CoreFunction(45, (Expression[]) null);
      QName qName0 = new QName("; ", "eV,");
      coreFunction2.isContextDependent();
      String string0 = coreFunction1.getFunctionName();
      assertEquals("translate", string0);
      
      boolean boolean0 = coreFunction2.computeContextDependent();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(18, expressionArray0);
      boolean boolean0 = coreFunction0.computeContextDependent();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[7];
      CoreOperationAnd coreOperationAnd0 = new CoreOperationAnd(expressionArray0);
      CoreOperationNegate coreOperationNegate0 = new CoreOperationNegate(coreOperationAnd0);
      CoreOperationMultiply coreOperationMultiply0 = new CoreOperationMultiply(coreOperationNegate0, coreOperationNegate0);
      expressionArray0[0] = (Expression) coreOperationMultiply0;
      Step[] stepArray0 = new Step[1];
      QName qName0 = new QName("?^tERKQR");
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, "?^tERKQR");
      Step step0 = new Step(663, nodeNameTest0, expressionArray0);
      stepArray0[0] = step0;
      LocationPath locationPath0 = new LocationPath(false, stepArray0);
      expressionArray0[1] = (Expression) locationPath0;
      CoreOperationNegate coreOperationNegate1 = new CoreOperationNegate(coreOperationNegate0);
      expressionArray0[2] = (Expression) coreOperationNegate1;
      LocationPath locationPath1 = new LocationPath(false, stepArray0);
      expressionArray0[3] = (Expression) locationPath1;
      ExpressionPath expressionPath0 = new ExpressionPath(coreOperationMultiply0, expressionArray0, stepArray0);
      expressionArray0[4] = (Expression) expressionPath0;
      CoreOperationGreaterThanOrEqual coreOperationGreaterThanOrEqual0 = new CoreOperationGreaterThanOrEqual(expressionArray0[0], expressionArray0[0]);
      expressionArray0[5] = (Expression) coreOperationGreaterThanOrEqual0;
      CoreOperationAnd coreOperationAnd1 = new CoreOperationAnd(expressionArray0);
      CoreOperationNotEqual coreOperationNotEqual0 = new CoreOperationNotEqual(coreOperationMultiply0, coreOperationAnd1);
      expressionArray0[6] = (Expression) coreOperationNotEqual0;
      CoreFunction coreFunction0 = new CoreFunction(41, expressionArray0);
      NamespaceContext namespaceContext0 = new NamespaceContext((EvalContext) null, nodeNameTest0);
      expressionPath0.createContextForStep(namespaceContext0, 663, nodeNameTest0);
      // Undeclared exception!
      coreFunction0.functionString((EvalContext) null);
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[2];
      CoreOperationUnion coreOperationUnion0 = new CoreOperationUnion(expressionArray0);
      expressionArray0[0] = (Expression) coreOperationUnion0;
      boolean boolean0 = false;
      Step[] stepArray0 = new Step[2];
      FileSystemHandling.shouldAllThrowIOExceptions();
      NodeNameTest nodeNameTest0 = new NodeNameTest((QName) null);
      Step step0 = new Step(9, nodeNameTest0, expressionArray0);
      stepArray0[0] = step0;
      Step step1 = new Step(69, nodeNameTest0, expressionArray0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      stepArray0[1] = step1;
      LocationPath locationPath0 = new LocationPath(false, stepArray0);
      expressionArray0[1] = (Expression) locationPath0;
      CoreFunction coreFunction0 = new CoreFunction(1651, expressionArray0);
      EvalContext evalContext0 = null;
      // Undeclared exception!
//      try { 
        coreFunction0.functionFloor((EvalContext) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(16, expressionArray0);
      Byte byte0 = new Byte((byte)79);
      EvalContext evalContext0 = null;
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("=]=E&vI<OH");
      CoreFunction coreFunction1 = new CoreFunction(14, expressionArray0);
      ProcessingInstructionTest processingInstructionTest1 = new ProcessingInstructionTest("=]=E&vI<OH");
      // Undeclared exception!
//      try { 
        coreFunction1.computeValue((EvalContext) null);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // Incorrect number of arguments: substring()
//         //
//         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(20, (Expression[]) null);
      Byte byte0 = new Byte((byte)54);
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("g,mJI0fat}");
      Byte byte1 = new Byte((byte)19);
      CoreFunction coreFunction1 = new CoreFunction(20, (Expression[]) null);
      coreFunction0.isContextDependent();
      Expression[] expressionArray0 = new Expression[9];
      Step[] stepArray0 = new Step[4];
      Step step0 = new Step((byte)54, processingInstructionTest0, (Expression[]) null);
      stepArray0[0] = step0;
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(112);
      Step step1 = new Step(771, nodeTypeTest0, expressionArray0);
      stepArray0[1] = step1;
      Step step2 = new Step(26, processingInstructionTest0, (Expression[]) null);
      stepArray0[2] = step2;
      Step step3 = new Step(1, processingInstructionTest0, (Expression[]) null);
      stepArray0[3] = step3;
      step1.toString();
      ExpressionPath expressionPath0 = new ExpressionPath(coreFunction1, (Expression[]) null, stepArray0);
      expressionArray0[0] = (Expression) expressionPath0;
      expressionArray0[1] = (Expression) coreFunction1;
      expressionArray0[2] = (Expression) coreFunction1;
      expressionArray0[3] = (Expression) coreFunction0;
      expressionArray0[4] = (Expression) coreFunction1;
      expressionArray0[5] = (Expression) coreFunction0;
      expressionArray0[6] = (Expression) coreFunction1;
      expressionArray0[7] = (Expression) coreFunction0;
      expressionArray0[8] = (Expression) coreFunction1;
      CoreFunction coreFunction2 = new CoreFunction((byte)19, expressionArray0);
      // Undeclared exception!
//      try { 
        coreFunction2.functionSubstringBefore((EvalContext) null);
//        fail("Expecting exception: StackOverflowError");
      
//      } catch(StackOverflowError e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(16, expressionArray0);
      QName qName0 = new QName("", "");
      QName qName1 = new QName("phN,i1<Y@/iKH:f vu", "");
      coreFunction0.isContextDependent();
      String string0 = coreFunction0.getFunctionName();
      assertEquals("normalize-space", string0);
      
      boolean boolean0 = coreFunction0.computeContextDependent();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(13, (Expression[]) null);
      CoreFunction coreFunction1 = new CoreFunction(13, (Expression[]) null);
      QName qName0 = new QName("t!xtR'");
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, "*VQ,4e,'F)");
      // Undeclared exception!
//      try { 
        coreFunction0.compute((EvalContext) null);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // Incorrect number of arguments: substring-after()
//         //
//         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      QName qName0 = new QName((String) null, (String) null);
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("lang");
      BasicNodeSet basicNodeSet0 = new BasicNodeSet();
      Locale locale0 = Locale.UK;
      NodePointer nodePointer0 = NodePointer.newNodePointer(qName0, (Object) null, locale0);
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = new JXPathContextReferenceImpl((JXPathContext) null, qName0, nodePointer0);
      RootContext rootContext0 = new RootContext(jXPathContextReferenceImpl0, nodePointer0);
      NodeSetContext nodeSetContext0 = new NodeSetContext(rootContext0, basicNodeSet0);
      QName qName1 = new QName("name");
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName1, "<<unknown namespace>>");
      ProcessingInstructionTest processingInstructionTest1 = new ProcessingInstructionTest("name");
      AncestorContext ancestorContext0 = new AncestorContext(rootContext0, true, processingInstructionTest1);
      nodeSetContext0.nextSet();
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction((-771), expressionArray0);
      coreFunction0.getArgumentCount();
      coreFunction0.getArgumentCount();
      coreFunction0.toString();
      CoreFunction coreFunction1 = new CoreFunction(6, expressionArray0);
      coreFunction1.computeContextDependent();
      // Undeclared exception!
//      try { 
        coreFunction0.functionLast(rootContext0);
//        fail("Expecting exception: UnsupportedOperationException");
      
//      } catch(UnsupportedOperationException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.jxpath.ri.axes.RootContext", e);
//      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      Constant constant0 = new Constant("org.apache.commons.jxpath.JXPathContextFactoryConfigurationError");
      constant0.toString();
      Byte byte0 = new Byte((byte)9);
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("'org.apache.commons.jxpath.JXPathContextFactoryConfigurationError'");
      Expression[] expressionArray0 = new Expression[2];
      CoreOperationSubtract coreOperationSubtract0 = new CoreOperationSubtract(constant0, constant0);
      expressionArray0[0] = (Expression) coreOperationSubtract0;
      expressionArray0[1] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction((byte)9, expressionArray0);
      boolean boolean0 = coreFunction0.isContextDependent();
      assertFalse(boolean0);
      
      coreFunction0.functionSubstringBefore((EvalContext) null);
      assertEquals(9, coreFunction0.getFunctionCode());
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      Constant constant0 = new Constant("");
      CoreOperationNegate coreOperationNegate0 = new CoreOperationNegate(constant0);
      CoreFunction coreFunction0 = new CoreFunction(2, expressionArray0);
      QName qName0 = new QName("", "pdiAO6#5Q?w]0V");
      boolean boolean0 = coreFunction0.computeContextDependent();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      Constant constant0 = new Constant((String) null);
      constant0.toString();
      Byte byte0 = new Byte((byte)34);
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest((String) null);
      Expression[] expressionArray0 = new Expression[3];
      expressionArray0[0] = (Expression) constant0;
      expressionArray0[1] = (Expression) constant0;
      expressionArray0[2] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction(15, expressionArray0);
      coreFunction0.isContextDependent();
      // Undeclared exception!
//      try { 
        coreFunction0.functionSubstringBefore((EvalContext) null);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // Incorrect number of arguments: string-length('null', 'null', 'null')
//         //
//         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      Constant constant0 = new Constant((String) null);
      constant0.toString();
      Byte byte0 = new Byte((byte)34);
      Expression[] expressionArray0 = new Expression[1];
      expressionArray0[0] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction(53, expressionArray0);
      coreFunction0.computeValue((EvalContext) null);
      coreFunction0.functionNamespaceURI((EvalContext) null);
      coreFunction0.getArgumentCount();
      Object object0 = coreFunction0.functionSum((EvalContext) null);
      assertEquals(0.0, object0);
      
      coreFunction0.functionBoolean((EvalContext) null);
      Object object1 = coreFunction0.functionBoolean((EvalContext) null);
      assertEquals(53, coreFunction0.getFunctionCode());
      assertEquals(false, object1);
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      Integer integer0 = new Integer(3);
      Constant constant0 = new Constant(integer0);
      EvalContext evalContext0 = null;
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(3);
      Expression[] expressionArray0 = new Expression[2];
      expressionArray0[0] = (Expression) constant0;
      expressionArray0[1] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction(536, expressionArray0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      coreFunction0.iteratePointers((EvalContext) null);
      coreFunction0.functionSubstringBefore((EvalContext) null);
      coreFunction0.functionConcat((EvalContext) null);
      // Undeclared exception!
//      try { 
        coreFunction0.functionLang((EvalContext) null);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // Incorrect number of arguments: unknownFunction536()(3, 3)
//         //
//         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      Byte byte0 = new Byte((byte) (-35));
      EvalContext evalContext0 = null;
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest((String) null);
      CoreFunction coreFunction0 = new CoreFunction(4, expressionArray0);
      // Undeclared exception!
//      try { 
        coreFunction0.computeValue((EvalContext) null);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // Incorrect number of arguments: id()
//         //
//         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      QName qName0 = new QName(";|?W&J'\"8q", "KD,@e@Y4DqA'5Who");
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, expressionArray0);
      expressionArray0[0] = (Expression) extensionFunction0;
      CoreFunction coreFunction0 = new CoreFunction((-2631), expressionArray0);
      EvalContext evalContext0 = null;
      // Undeclared exception!
      coreFunction0.functionStringLength((EvalContext) null);
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[6];
      CoreFunction coreFunction0 = new CoreFunction(65536, expressionArray0);
      coreFunction0.getArg1();
      CoreOperationEqual coreOperationEqual0 = new CoreOperationEqual((Expression) null, (Expression) null);
      CoreOperationLessThan coreOperationLessThan0 = new CoreOperationLessThan(coreOperationEqual0, (Expression) null);
      expressionArray0[0] = (Expression) coreOperationLessThan0;
      CoreOperationMod coreOperationMod0 = new CoreOperationMod(coreOperationLessThan0, coreOperationEqual0);
      expressionArray0[1] = (Expression) coreOperationMod0;
      CoreOperationLessThan coreOperationLessThan1 = new CoreOperationLessThan(coreOperationMod0, (Expression) null);
      expressionArray0[2] = (Expression) coreOperationLessThan1;
      CoreOperationGreaterThanOrEqual coreOperationGreaterThanOrEqual0 = new CoreOperationGreaterThanOrEqual(coreOperationLessThan0, coreOperationEqual0);
      expressionArray0[3] = (Expression) coreOperationGreaterThanOrEqual0;
      Expression expression0 = coreFunction0.getArg1();
      expressionArray0[4] = expression0;
      CoreOperationLessThan coreOperationLessThan2 = new CoreOperationLessThan((Expression) null, expressionArray0[2]);
      expressionArray0[5] = (Expression) coreOperationLessThan2;
      CoreFunction coreFunction1 = new CoreFunction((-6), expressionArray0);
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(24);
      CoreFunction coreFunction2 = new CoreFunction(12, expressionArray0);
      coreFunction2.getFunctionName();
      // Undeclared exception!
//      try { 
        coreFunction2.computeContextDependent();
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(20, (Expression[]) null);
      Byte byte0 = new Byte((byte)54);
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("g,mJI0fat}");
      BasicNodeSet basicNodeSet0 = new BasicNodeSet();
      NodeSetContext nodeSetContext0 = new NodeSetContext((EvalContext) null, basicNodeSet0);
      nodeSetContext0.hasNext();
      QName qName0 = new QName("");
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, "");
      AncestorContext ancestorContext0 = new AncestorContext(nodeSetContext0, true, nodeNameTest0);
      nodeSetContext0.nextSet();
      CoreFunction coreFunction1 = new CoreFunction((byte)54, (Expression[]) null);
      coreFunction1.getArgumentCount();
      coreFunction1.getArgumentCount();
      coreFunction0.toString();
      coreFunction0.computeContextDependent();
      coreFunction0.functionLast(nodeSetContext0);
      // Undeclared exception!
//      try { 
        coreFunction1.functionStartsWith(nodeSetContext0);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // Incorrect number of arguments: unknownFunction54()()
//         //
//         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(2768, expressionArray0);
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(2768);
      CoreFunction coreFunction1 = new CoreFunction(30, expressionArray0);
      String string0 = coreFunction1.getFunctionName();
      assertEquals("format-number", string0);
      
      boolean boolean0 = coreFunction1.computeContextDependent();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      Constant constant0 = new Constant("");
      CoreOperationNegate coreOperationNegate0 = new CoreOperationNegate(constant0);
      CoreFunction coreFunction0 = new CoreFunction(25, expressionArray0);
      CoreFunction coreFunction1 = new CoreFunction(25, expressionArray0);
      String string0 = coreFunction1.getFunctionName();
      assertEquals("floor", string0);
      
      boolean boolean0 = coreFunction1.computeContextDependent();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      Integer integer0 = new Integer(1362);
      Constant constant0 = new Constant(integer0);
      EvalContext evalContext0 = null;
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("()");
      AncestorContext ancestorContext0 = new AncestorContext((EvalContext) null, true, processingInstructionTest0);
      Expression[] expressionArray0 = new Expression[6];
      expressionArray0[0] = (Expression) constant0;
      expressionArray0[1] = (Expression) constant0;
      expressionArray0[2] = (Expression) constant0;
      expressionArray0[3] = (Expression) constant0;
      expressionArray0[4] = (Expression) constant0;
      expressionArray0[5] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction(23, expressionArray0);
      // Undeclared exception!
//      try { 
        coreFunction0.computeValue((EvalContext) null);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // Incorrect number of arguments: number(1362, 1362, 1362, 1362, 1362, 1362)
//         //
//         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      EvalContext evalContext0 = null;
      String string0 = "substring";
      CoreFunction coreFunction0 = new CoreFunction(4, expressionArray0);
      // Undeclared exception!
//      try { 
        coreFunction0.compute((EvalContext) null);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // Incorrect number of arguments: id()
//         //
//         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[2];
      CoreOperationOr coreOperationOr0 = new CoreOperationOr(expressionArray0);
      expressionArray0[0] = (Expression) coreOperationOr0;
      LocationPath locationPath0 = new LocationPath(true, (Step[]) null);
      expressionArray0[1] = (Expression) locationPath0;
      CoreFunction coreFunction0 = new CoreFunction(12, expressionArray0);
      EvalContext evalContext0 = null;
      // Undeclared exception!
      coreFunction0.compute((EvalContext) null);
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      Integer integer0 = new Integer((-6));
      Constant constant0 = new Constant(integer0);
      Expression[] expressionArray0 = new Expression[1];
      expressionArray0[0] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction(23, expressionArray0);
      coreFunction0.functionLocalName((EvalContext) null);
      Object object0 = coreFunction0.functionBoolean((EvalContext) null);
      assertEquals(true, object0);
      
      Object object1 = coreFunction0.functionNot((EvalContext) null);
      assertEquals(23, coreFunction0.getFunctionCode());
      assertEquals(false, object1);
      
      // Undeclared exception!
//      try { 
        coreFunction0.functionFalse((EvalContext) null);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // Incorrect number of arguments: number(-6)
//         //
//         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      Integer integer0 = new Integer(3);
      Constant constant0 = new Constant(integer0);
      EvalContext evalContext0 = null;
      Expression[] expressionArray0 = new Expression[2];
      CoreFunction coreFunction0 = new CoreFunction((-489), expressionArray0);
      // Undeclared exception!
//      try { 
        coreFunction0.functionSubstringBefore((EvalContext) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      Long long0 = new Long(1099511627776L);
      Constant constant0 = new Constant(long0);
      expressionArray0[0] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction(110, expressionArray0);
      CoreFunction coreFunction1 = new CoreFunction(48, expressionArray0);
      coreFunction1.getArgumentCount();
      coreFunction1.getArgumentCount();
      coreFunction0.toString();
      CoreFunction coreFunction2 = new CoreFunction(1, expressionArray0);
      coreFunction2.computeContextDependent();
      // Undeclared exception!
//      try { 
        coreFunction1.functionStartsWith((EvalContext) null);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // Incorrect number of arguments: unknownFunction48()(1099511627776)
//         //
//         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(57, (Expression[]) null);
      QName qName0 = new QName("}a0", (String) null);
      coreFunction0.computeContextDependent();
      CoreFunction coreFunction1 = new CoreFunction(110, (Expression[]) null);
      CoreFunction coreFunction2 = new CoreFunction(17, (Expression[]) null);
      coreFunction2.getFunctionName();
      EvalContext evalContext0 = null;
      // Undeclared exception!
//      try { 
        coreFunction0.functionNormalizeSpace((EvalContext) null);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // Incorrect number of arguments: unknownFunction57()()
//         //
//         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      Integer integer0 = new Integer((-6));
      Constant constant0 = new Constant(integer0);
      Expression[] expressionArray0 = new Expression[1];
      expressionArray0[0] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction(23, expressionArray0);
      QName qName0 = new QName("substring-after", "\"name\"");
      CoreFunction coreFunction1 = new CoreFunction(0, expressionArray0);
      coreFunction1.isContextDependent();
      coreFunction0.toString();
      // Undeclared exception!
//      try { 
        coreFunction1.functionID((EvalContext) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      QName qName0 = new QName((String) null, "string");
      Expression[] expressionArray0 = new Expression[1];
      CoreOperationUnion coreOperationUnion0 = new CoreOperationUnion(expressionArray0);
      expressionArray0[0] = (Expression) coreOperationUnion0;
      CoreOperationOr coreOperationOr0 = new CoreOperationOr(expressionArray0);
      CoreFunction coreFunction0 = new CoreFunction(13, expressionArray0);
      CoreFunction coreFunction1 = new CoreFunction(112, expressionArray0);
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
      PrecedingOrFollowingContext precedingOrFollowingContext0 = new PrecedingOrFollowingContext((EvalContext) null, nodeNameTest0, true);
      coreFunction1.compute(precedingOrFollowingContext0);
      CoreFunction coreFunction2 = new CoreFunction(0, expressionArray0);
      coreFunction1.getFunctionName();
      // Undeclared exception!
//      try { 
        coreFunction0.functionBoolean((EvalContext) null);
//        fail("Expecting exception: StackOverflowError");
      
//      } catch(StackOverflowError e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      Integer integer0 = new Integer(3);
      Expression[] expressionArray0 = new Expression[9];
      CoreOperationGreaterThan coreOperationGreaterThan0 = new CoreOperationGreaterThan(expressionArray0[1], expressionArray0[0]);
      expressionArray0[5] = (Expression) coreOperationGreaterThan0;
      CoreOperationGreaterThan coreOperationGreaterThan1 = new CoreOperationGreaterThan(expressionArray0[0], expressionArray0[3]);
      expressionArray0[6] = (Expression) coreOperationGreaterThan1;
      CoreFunction coreFunction0 = new CoreFunction(3, expressionArray0);
      EvalContext evalContext0 = null;
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(3);
      AttributeContext attributeContext0 = new AttributeContext((EvalContext) null, nodeTypeTest0);
      EvalContext[] evalContextArray0 = new EvalContext[5];
      evalContextArray0[0] = (EvalContext) attributeContext0;
      evalContextArray0[1] = (EvalContext) attributeContext0;
      evalContextArray0[2] = null;
      evalContextArray0[3] = (EvalContext) attributeContext0;
      evalContextArray0[4] = (EvalContext) attributeContext0;
      UnionContext unionContext0 = new UnionContext(attributeContext0, evalContextArray0);
      // Undeclared exception!
//      try { 
        coreFunction0.functionCeiling(unionContext0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.evosuite.runtime.System", e);
//      }
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      QName qName0 = new QName((String) null, (String) null);
      Expression[] expressionArray0 = new Expression[4];
      CoreOperationOr coreOperationOr0 = new CoreOperationOr(expressionArray0);
      expressionArray0[0] = (Expression) coreOperationOr0;
      CoreFunction coreFunction0 = new CoreFunction(26, expressionArray0);
      CoreFunction coreFunction1 = new CoreFunction(1, expressionArray0);
      EvalContext evalContext0 = null;
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest((String) null);
      // Undeclared exception!
//      try { 
        coreFunction1.computeValue((EvalContext) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.evosuite.runtime.System", e);
//      }
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      Integer integer0 = new Integer((-29));
      Constant constant0 = new Constant(integer0);
      EvalContext evalContext0 = null;
      Expression[] expressionArray0 = new Expression[1];
      expressionArray0[0] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction(23, expressionArray0);
      CoreFunction coreFunction1 = new CoreFunction(3086, expressionArray0);
      coreFunction0.functionNormalizeSpace((EvalContext) null);
      coreFunction0.functionNormalizeSpace((EvalContext) null);
      // Undeclared exception!
//      try { 
        coreFunction0.functionSubstringAfter((EvalContext) null);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // Incorrect number of arguments: number(-29)
//         //
//         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      Integer integer0 = new Integer((-6));
      Constant constant0 = new Constant(integer0);
      Expression[] expressionArray0 = new Expression[1];
      expressionArray0[0] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction(23, expressionArray0);
      BasicNodeSet basicNodeSet0 = new BasicNodeSet();
      CoreFunction coreFunction1 = new CoreFunction((-6), expressionArray0);
      coreFunction0.getArgumentCount();
      coreFunction1.getArgumentCount();
      String string0 = coreFunction0.toString();
      assertEquals("number(-6)", string0);
      
      CoreFunction coreFunction2 = new CoreFunction(23, expressionArray0);
      boolean boolean0 = coreFunction2.computeContextDependent();
      assertFalse(boolean0);
      
      Object object0 = coreFunction2.compute((EvalContext) null);
      assertNotNull(object0);
      assertEquals(23, coreFunction2.getFunctionCode());
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(19, (Expression[]) null);
      QName qName0 = new QName("3%y", "substring");
      boolean boolean0 = coreFunction0.isContextDependent();
      assertEquals(19, coreFunction0.getFunctionCode());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      QName qName0 = new QName((String) null, (String) null);
      Expression[] expressionArray0 = new Expression[1];
      Float float0 = new Float((double) 26);
      Constant constant0 = new Constant(float0);
      CoreOperationMod coreOperationMod0 = new CoreOperationMod(constant0, constant0);
      NameAttributeTest nameAttributeTest0 = new NameAttributeTest(coreOperationMod0, constant0);
      expressionArray0[0] = (Expression) nameAttributeTest0;
      CoreFunction coreFunction0 = new CoreFunction(26, expressionArray0);
      coreFunction0.compute((EvalContext) null);
      coreFunction0.getFunctionName();
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
      SelfContext selfContext0 = new SelfContext((EvalContext) null, nodeNameTest0);
      // Undeclared exception!
//      try { 
        coreFunction0.functionSum(selfContext0);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // Invalid argument type for 'sum': java.lang.Boolean
//         //
//         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      Constant constant0 = new Constant((String) null);
      constant0.toString();
      Byte byte0 = new Byte((byte)34);
      EvalContext evalContext0 = null;
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest((String) null);
      FileSystemHandling.shouldAllThrowIOExceptions();
      Expression[] expressionArray0 = new Expression[3];
      expressionArray0[0] = (Expression) constant0;
      expressionArray0[1] = (Expression) constant0;
      expressionArray0[2] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction(15, expressionArray0);
      ProcessingInstructionTest processingInstructionTest1 = new ProcessingInstructionTest((String) null);
      // Undeclared exception!
//      try { 
        coreFunction0.computeValue((EvalContext) null);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // Incorrect number of arguments: string-length('null', 'null', 'null')
//         //
//         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      Integer integer0 = new Integer((-6));
      Constant constant0 = new Constant(integer0);
      EvalContext evalContext0 = null;
      Expression[] expressionArray0 = new Expression[1];
      expressionArray0[0] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction(23, expressionArray0);
      CoreFunction coreFunction1 = new CoreFunction(3086, expressionArray0);
      coreFunction0.functionNormalizeSpace((EvalContext) null);
      coreFunction0.functionNormalizeSpace((EvalContext) null);
      // Undeclared exception!
//      try { 
        coreFunction0.functionSubstringAfter((EvalContext) null);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // Incorrect number of arguments: number(-6)
//         //
//         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      Constant constant0 = new Constant((String) null);
      constant0.toString();
      Byte byte0 = new Byte((byte)34);
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest((String) null);
      constant0.iteratePointers((EvalContext) null);
      QName qName0 = new QName("L");
      Expression[] expressionArray0 = new Expression[1];
      expressionArray0[0] = (Expression) constant0;
      ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, expressionArray0);
      constant0.iterate((EvalContext) null);
      constant0.iteratePointers((EvalContext) null);
      CoreFunction coreFunction0 = new CoreFunction((byte)34, expressionArray0);
      coreFunction0.functionLocalName((EvalContext) null);
      Object object0 = coreFunction0.functionBoolean((EvalContext) null);
      assertEquals(false, object0);
      
      Object object1 = coreFunction0.functionNot((EvalContext) null);
      assertEquals(34, coreFunction0.getFunctionCode());
      assertEquals(true, object1);
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      Integer integer0 = new Integer(3);
      Constant constant0 = new Constant(integer0);
      constant0.toString();
      EvalContext evalContext0 = null;
      EvalContext evalContext1 = null;
      Expression[] expressionArray0 = new Expression[9];
      expressionArray0[0] = (Expression) constant0;
      expressionArray0[1] = (Expression) constant0;
      ExpressionPath expressionPath0 = new ExpressionPath(expressionArray0[1], expressionArray0, (Step[]) null);
      expressionArray0[2] = (Expression) expressionPath0;
      expressionArray0[3] = (Expression) constant0;
      expressionArray0[4] = (Expression) constant0;
      expressionArray0[5] = (Expression) constant0;
      expressionArray0[6] = (Expression) constant0;
      expressionArray0[7] = (Expression) constant0;
      constant0.toString();
      expressionArray0[8] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction(3, expressionArray0);
      Expression[] expressionArray1 = new Expression[3];
      expressionArray1[0] = (Expression) coreFunction0;
      CoreOperationOr coreOperationOr0 = new CoreOperationOr(expressionArray0);
      expressionArray1[1] = (Expression) coreOperationOr0;
      expressionArray1[2] = (Expression) coreFunction0;
      CoreFunction coreFunction1 = new CoreFunction((-945), expressionArray1);
      // Undeclared exception!
      coreFunction0.compute((EvalContext) null);
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      Constant constant0 = new Constant((String) null);
      constant0.toString();
      Byte byte0 = new Byte((byte)34);
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest((String) null);
      constant0.iteratePointers((EvalContext) null);
      QName qName0 = new QName("L");
      Expression[] expressionArray0 = new Expression[1];
      expressionArray0[0] = (Expression) constant0;
      ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, expressionArray0);
      constant0.iteratePointers((EvalContext) null);
      CoreFunction coreFunction0 = new CoreFunction(3086, expressionArray0);
      coreFunction0.functionNormalizeSpace((EvalContext) null);
      coreFunction0.functionNormalizeSpace((EvalContext) null);
      // Undeclared exception!
//      try { 
        coreFunction0.functionSubstringAfter((EvalContext) null);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // Incorrect number of arguments: unknownFunction3086()('null')
//         //
//         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      Long long0 = new Long(1099511627776L);
      Constant constant0 = new Constant(long0);
      expressionArray0[0] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction(110, expressionArray0);
      Object object0 = coreFunction0.functionRound((EvalContext) null);
      assertEquals(1.099511627776E12, object0);
      
      CoreFunction coreFunction1 = new CoreFunction(110, expressionArray0);
      Object object1 = coreFunction0.functionNot((EvalContext) null);
      assertEquals(110, coreFunction0.getFunctionCode());
      assertEquals(false, object1);
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      int int0 = 3804;
      Expression[] expressionArray1 = new Expression[9];
      CoreFunction coreFunction0 = new CoreFunction(110, expressionArray1);
      Expression expression0 = coreFunction0.getArg2();
      expressionArray1[0] = null;
      CoreOperationLessThan coreOperationLessThan0 = new CoreOperationLessThan((Expression) null, expression0);
      expressionArray1[1] = (Expression) coreOperationLessThan0;
      CoreOperationGreaterThanOrEqual coreOperationGreaterThanOrEqual0 = new CoreOperationGreaterThanOrEqual(coreOperationLessThan0, coreOperationLessThan0);
      expressionArray1[2] = (Expression) coreOperationGreaterThanOrEqual0;
      Double double0 = Expression.ONE;
      Constant constant0 = new Constant(double0);
      expressionArray1[3] = (Expression) constant0;
      Constant constant1 = new Constant(double0);
      expressionArray1[4] = (Expression) constant1;
      CoreOperationUnion coreOperationUnion0 = new CoreOperationUnion(expressionArray0);
      CoreOperationSubtract coreOperationSubtract0 = new CoreOperationSubtract(expressionArray1[3], (Expression) null);
      CoreOperationGreaterThan coreOperationGreaterThan0 = new CoreOperationGreaterThan(coreOperationUnion0, coreOperationSubtract0);
      expressionArray1[5] = (Expression) coreOperationGreaterThan0;
      QName qName0 = new QName("\"7uDEb|..cldEiMc+Y");
      ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, expressionArray0);
      expressionArray1[6] = (Expression) extensionFunction0;
      CoreOperationGreaterThan coreOperationGreaterThan1 = new CoreOperationGreaterThan(coreFunction0, coreOperationUnion0);
      expressionArray1[7] = (Expression) coreOperationGreaterThan1;
      VariableReference variableReference0 = new VariableReference(qName0);
      expressionArray1[8] = (Expression) variableReference0;
      CoreFunction coreFunction1 = new CoreFunction(3804, expressionArray1);
      QName qName1 = new QName("|Z$fmt+=C", "");
      EvalContext evalContext0 = null;
      // Undeclared exception!
//      try { 
        coreFunction0.functionRound((EvalContext) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.evosuite.runtime.System", e);
//      }
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(5, (Expression[]) null);
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = mock(JXPathContextReferenceImpl.class, new ViolatedAssumptionAnswer());
      CoreOperationNegate coreOperationNegate0 = new CoreOperationNegate(coreFunction0);
      coreOperationNegate0.toString();
      CoreFunction coreFunction1 = new CoreFunction(5, (Expression[]) null);
      coreFunction1.computeContextDependent();
      // Undeclared exception!
//      try { 
        coreFunction0.functionTranslate((EvalContext) null);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // Incorrect number of arguments: local-name()
//         //
//         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(5, (Expression[]) null);
      CoreFunction coreFunction1 = new CoreFunction(5, (Expression[]) null);
      QName qName0 = new QName("Y", "");
      boolean boolean0 = coreFunction1.isContextDependent();
      assertTrue(boolean0);
      
      CoreFunction coreFunction2 = new CoreFunction(9, (Expression[]) null);
      assertEquals(9, coreFunction2.getFunctionCode());
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(3, (Expression[]) null);
      CoreFunction coreFunction1 = new CoreFunction(7, (Expression[]) null);
      QName qName0 = new QName("3%y", "substring");
      boolean boolean0 = coreFunction1.isContextDependent();
      assertTrue(boolean0);
      
      CoreFunction coreFunction2 = new CoreFunction(3, (Expression[]) null);
      assertEquals(3, coreFunction2.getFunctionCode());
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      QName qName0 = new QName("", ":HFm.Vpe+Oc2YXj36");
      CoreOperationOr coreOperationOr0 = new CoreOperationOr(expressionArray0);
      CoreFunction coreFunction0 = new CoreFunction((-154), expressionArray0);
      EvalContext evalContext0 = null;
      coreFunction0.compute((EvalContext) null);
      CoreFunction coreFunction1 = new CoreFunction((-3502), expressionArray0);
      coreFunction1.getFunctionName();
      // Undeclared exception!
//      try { 
        coreFunction1.functionBoolean((EvalContext) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      Long long0 = new Long(1099511627776L);
      CoreFunction coreFunction0 = new CoreFunction(2520, expressionArray0);
      coreFunction0.compute((EvalContext) null);
      coreFunction0.getArgumentCount();
      Expression[] expressionArray1 = new Expression[8];
      expressionArray1[0] = (Expression) coreFunction0;
      expressionArray1[1] = (Expression) coreFunction0;
      expressionArray1[2] = (Expression) coreFunction0;
      expressionArray1[3] = (Expression) coreFunction0;
      expressionArray1[4] = (Expression) coreFunction0;
      expressionArray1[5] = (Expression) coreFunction0;
      expressionArray1[6] = (Expression) coreFunction0;
      expressionArray1[7] = (Expression) coreFunction0;
      CoreFunction coreFunction1 = new CoreFunction(1, expressionArray1);
      CoreFunction coreFunction2 = new CoreFunction(110, expressionArray0);
      CoreFunction coreFunction3 = new CoreFunction(1772, expressionArray1);
      // Undeclared exception!
//      try { 
        coreFunction1.compute((EvalContext) null);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // Incorrect number of arguments: last(unknownFunction2520()(null), unknownFunction2520()(null), unknownFunction2520()(null), unknownFunction2520()(null), unknownFunction2520()(null), unknownFunction2520()(null), unknownFunction2520()(null), unknownFunction2520()(null))
//         //
//         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Expression[] expressionArray0 = new Expression[8];
      Step[] stepArray0 = new Step[5];
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(105);
      Step step0 = new Step((-1675), nodeTypeTest0, expressionArray0);
      stepArray0[0] = step0;
      Step step1 = new Step((-1675), nodeTypeTest0, expressionArray0);
      stepArray0[1] = step1;
      Step step2 = new Step(105, nodeTypeTest0, expressionArray0);
      stepArray0[2] = step2;
      Step step3 = new Step(105, nodeTypeTest0, expressionArray0);
      stepArray0[3] = step3;
      Step step4 = new Step((-1675), nodeTypeTest0, expressionArray0);
      stepArray0[4] = step4;
      LocationPath locationPath0 = new LocationPath(false, stepArray0);
      expressionArray0[0] = (Expression) locationPath0;
      CoreOperationDivide coreOperationDivide0 = new CoreOperationDivide(expressionArray0[0], locationPath0);
      expressionArray0[1] = (Expression) coreOperationDivide0;
      CoreOperationSubtract coreOperationSubtract0 = new CoreOperationSubtract(coreOperationDivide0, coreOperationDivide0);
      expressionArray0[2] = (Expression) coreOperationSubtract0;
      CoreOperationLessThan coreOperationLessThan0 = new CoreOperationLessThan(expressionArray0[1], locationPath0);
      expressionArray0[3] = (Expression) coreOperationLessThan0;
      Double double0 = Expression.NOT_A_NUMBER;
      Constant constant0 = new Constant(double0);
      expressionArray0[4] = (Expression) constant0;
      QName qName0 = new QName(":Z0o#57(N^.qS^huu", "r~.e'Yr60VN#");
      ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, expressionArray0);
      expressionArray0[5] = (Expression) extensionFunction0;
      CoreOperationNegate coreOperationNegate0 = new CoreOperationNegate(locationPath0);
      expressionArray0[6] = (Expression) coreOperationNegate0;
      CoreOperationLessThan coreOperationLessThan1 = new CoreOperationLessThan(coreOperationSubtract0, expressionArray0[0]);
      expressionArray0[7] = (Expression) coreOperationLessThan1;
      CoreFunction coreFunction0 = new CoreFunction((-1675), expressionArray0);
      DescendantContext descendantContext0 = new DescendantContext((EvalContext) null, false, nodeTypeTest0);
      AncestorContext ancestorContext0 = new AncestorContext(descendantContext0, true, nodeTypeTest0);
      BasicNodeSet basicNodeSet0 = new BasicNodeSet();
      NodeSetContext nodeSetContext0 = new NodeSetContext(ancestorContext0, basicNodeSet0);
      NamespaceContext namespaceContext0 = new NamespaceContext(nodeSetContext0, nodeTypeTest0);
      SelfContext selfContext0 = new SelfContext(namespaceContext0, nodeTypeTest0);
      // Undeclared exception!
//      try { 
        coreFunction0.functionCount(selfContext0);
//        fail("Expecting exception: StackOverflowError");
      
//      } catch(StackOverflowError e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction((-4323), (Expression[]) null);
      QName qName0 = new QName("", "");
      VariableReference variableReference0 = new VariableReference(qName0);
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
      Step step0 = new Step((-403), nodeNameTest0, (Expression[]) null);
      Step step1 = new Step((-4323), nodeNameTest0, (Expression[]) null);
      CoreOperationLessThan coreOperationLessThan0 = new CoreOperationLessThan(coreFunction0, variableReference0);
      Byte byte0 = new Byte((byte) (-109));
      Constant constant0 = new Constant(byte0);
      constant0.toString();
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest(")(5");
      coreFunction0.computeValue((EvalContext) null);
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl)JXPathContext.newContext((Object) null);
      BasicVariables basicVariables0 = new BasicVariables();
      QName qName1 = new QName("9xm!|qqG&[m|ln");
      VariablePointer variablePointer0 = new VariablePointer(qName0);
      RootContext rootContext0 = new RootContext(jXPathContextReferenceImpl0, variablePointer0);
      // Undeclared exception!
//      try { 
        coreFunction0.functionPosition(rootContext0);
//        fail("Expecting exception: UnsupportedOperationException");
      
//      } catch(UnsupportedOperationException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.jxpath.ri.axes.RootContext", e);
//      }
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      Constant constant0 = new Constant((String) null);
      Byte byte0 = new Byte((byte)34);
      Expression[] expressionArray0 = new Expression[6];
      expressionArray0[4] = (Expression) constant0;
      QName qName0 = new QName("L");
      ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, expressionArray0);
      expressionArray0[5] = (Expression) extensionFunction0;
      CoreFunction coreFunction0 = new CoreFunction((-5588), expressionArray0);
      constant0.iteratePointers((EvalContext) null);
      coreFunction0.computeValue((EvalContext) null);
      // Undeclared exception!
      coreFunction0.functionNamespaceURI((EvalContext) null);
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      Integer integer0 = new Integer(3);
      Constant constant0 = new Constant(integer0);
      Expression[] expressionArray0 = new Expression[2];
      Byte byte0 = new Byte((byte)54);
      Constant constant1 = new Constant("");
      constant1.iterate((EvalContext) null);
      constant1.toString();
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("");
      CoreFunction coreFunction0 = new CoreFunction(19, expressionArray0);
      // Undeclared exception!
//      try { 
        coreFunction0.functionSubstringAfter((EvalContext) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      Constant constant0 = new Constant("}");
      constant0.toString();
      CoreOperationNegate coreOperationNegate0 = new CoreOperationNegate(constant0);
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(131, expressionArray0);
      boolean boolean0 = coreFunction0.isContextDependent();
      assertFalse(boolean0);
      
      CoreFunction coreFunction1 = new CoreFunction(28, expressionArray0);
      CoreFunction coreFunction2 = new CoreFunction(14, expressionArray0);
      String string0 = coreFunction2.getFunctionName();
      assertEquals("substring", string0);
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      Integer integer0 = new Integer(3);
      Constant constant0 = new Constant(integer0);
      EvalContext evalContext0 = null;
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(3);
      Expression[] expressionArray0 = new Expression[5];
      CoreFunction coreFunction0 = new CoreFunction(40, expressionArray0);
      Expression[] expressionArray1 = new Expression[8];
      expressionArray1[0] = (Expression) constant0;
      expressionArray1[1] = (Expression) coreFunction0;
      expressionArray1[2] = (Expression) coreFunction0;
      expressionArray1[3] = (Expression) constant0;
      expressionArray1[4] = (Expression) coreFunction0;
      expressionArray1[5] = (Expression) constant0;
      expressionArray1[6] = (Expression) constant0;
      expressionArray1[7] = (Expression) constant0;
      CoreFunction coreFunction1 = new CoreFunction(2, expressionArray1);
      // Undeclared exception!
//      try { 
        coreFunction1.computeValue((EvalContext) null);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // Incorrect number of arguments: position(3, unknownFunction40()(null, null, null, null, null), unknownFunction40()(null, null, null, null, null), 3, unknownFunction40()(null, null, null, null, null), 3, 3, 3)
//         //
//         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      EvalContext evalContext0 = null;
      int int0 = 24;
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(24);
      Expression[] expressionArray0 = new Expression[7];
      CoreOperationSubtract coreOperationSubtract0 = new CoreOperationSubtract((Expression) null, (Expression) null);
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual(coreOperationSubtract0, coreOperationSubtract0);
      CoreOperationDivide coreOperationDivide0 = new CoreOperationDivide(coreOperationLessThanOrEqual0, coreOperationLessThanOrEqual0);
      CoreOperationNegate coreOperationNegate0 = new CoreOperationNegate(coreOperationDivide0);
      ExpressionPath expressionPath0 = new ExpressionPath(coreOperationNegate0, expressionArray0, (Step[]) null);
      expressionArray0[0] = (Expression) expressionPath0;
      NameAttributeTest nameAttributeTest0 = new NameAttributeTest(coreOperationDivide0, (Expression) null);
      expressionArray0[1] = (Expression) nameAttributeTest0;
      Constant constant0 = new Constant("qnr?i");
      expressionArray0[2] = (Expression) constant0;
      CoreOperationNegate coreOperationNegate1 = new CoreOperationNegate(coreOperationSubtract0);
      expressionArray0[3] = (Expression) coreOperationNegate1;
      CoreOperationAnd coreOperationAnd0 = new CoreOperationAnd(expressionArray0);
      expressionArray0[4] = (Expression) coreOperationAnd0;
      CoreOperationMultiply coreOperationMultiply0 = new CoreOperationMultiply(expressionArray0[4], coreOperationDivide0);
      expressionArray0[5] = (Expression) coreOperationMultiply0;
      CoreFunction coreFunction0 = new CoreFunction((-1704), expressionArray0);
      Expression expression0 = coreFunction0.getArg2();
      expressionArray0[6] = expression0;
      Step step0 = new Step(24, nodeTypeTest0, expressionArray0);
      CoreFunction coreFunction1 = new CoreFunction(24, expressionArray0);
      coreFunction0.computeValue((EvalContext) null);
      CoreFunction coreFunction2 = new CoreFunction((-3569), expressionArray0);
      // Undeclared exception!
//      try { 
        coreFunction2.toString();
//        fail("Expecting exception: StackOverflowError");
      
//      } catch(StackOverflowError e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      Integer integer0 = new Integer((-6));
      Constant constant0 = new Constant(integer0);
      Expression[] expressionArray0 = new Expression[1];
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest(")OcsN/RqI:B");
      SelfContext selfContext0 = new SelfContext((EvalContext) null, processingInstructionTest0);
      selfContext0.reset();
      CoreFunction coreFunction0 = new CoreFunction(32, expressionArray0);
      // Undeclared exception!
//      try { 
        coreFunction0.functionSum(selfContext0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      Integer integer0 = new Integer(3);
      Constant constant0 = new Constant(integer0);
      Expression[] expressionArray0 = new Expression[2];
      Byte byte0 = new Byte((byte)54);
      Constant constant1 = new Constant("");
      constant1.toString();
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("g,mJI0fat}");
      CoreFunction coreFunction0 = new CoreFunction(19, expressionArray0);
      // Undeclared exception!
//      try { 
        coreFunction0.compute((EvalContext) null);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // Incorrect number of arguments: not(null, null)
//         //
//         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      QName qName0 = new QName("floor", "");
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
      CoreFunction coreFunction0 = new CoreFunction(16, (Expression[]) null);
      int int0 = (-1617);
      CoreFunction coreFunction1 = new CoreFunction((-1617), expressionArray0);
      NodeNameTest nodeNameTest1 = new NodeNameTest(qName0, "");
      Step[] stepArray0 = new Step[0];
      ExpressionPath expressionPath0 = new ExpressionPath(coreFunction1, (Expression[]) null, stepArray0);
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest((-98));
      // Undeclared exception!
//      try { 
        coreFunction0.computeValue((EvalContext) null);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // Incorrect number of arguments: normalize-space()
//         //
//         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      CoreFunction coreFunction0 = new CoreFunction(13, (Expression[]) null);
      CoreFunction coreFunction1 = new CoreFunction(13, (Expression[]) null);
      coreFunction0.isContextDependent();
      CoreFunction coreFunction2 = new CoreFunction((-1429), (Expression[]) null);
      CoreFunction coreFunction3 = new CoreFunction(20, (Expression[]) null);
      QName qName0 = new QName((String) null, "=<:j3S");
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, (String) null);
      DescendantContext descendantContext0 = new DescendantContext((EvalContext) null, false, nodeNameTest0);
      AttributeContext attributeContext0 = new AttributeContext(descendantContext0, nodeNameTest0);
      coreFunction3.functionPosition(attributeContext0);
      coreFunction3.getFunctionName();
      EvalContext evalContext0 = null;
      // Undeclared exception!
//      try { 
        coreFunction2.functionNormalizeSpace((EvalContext) null);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // Incorrect number of arguments: unknownFunction-1429()()
//         //
//         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      Long long0 = new Long(1099511627776L);
      Constant constant0 = new Constant(long0);
      expressionArray0[0] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction(110, expressionArray0);
      CoreFunction coreFunction1 = new CoreFunction(110, expressionArray0);
      coreFunction1.toString();
      coreFunction0.toString();
      coreFunction1.functionName((EvalContext) null);
      int int0 = new Integer(110);
      EvalContext evalContext0 = null;
      // Undeclared exception!
//      try { 
        coreFunction0.functionConcat((EvalContext) null);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // Incorrect number of arguments: unknownFunction110()(1099511627776)
//         //
//         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[3];
      QName qName0 = new QName("Cannot modify property: ");
      VariableReference variableReference0 = new VariableReference(qName0);
      expressionArray0[0] = (Expression) variableReference0;
      CoreOperationMultiply coreOperationMultiply0 = new CoreOperationMultiply(expressionArray0[0], variableReference0);
      expressionArray0[1] = (Expression) coreOperationMultiply0;
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd(expressionArray0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      expressionArray0[2] = (Expression) coreOperationAdd0;
      CoreFunction coreFunction0 = new CoreFunction((-3495), expressionArray0);
      EvalContext evalContext0 = null;
      // Undeclared exception!
//      try { 
        coreFunction0.functionSubstring((EvalContext) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.jxpath.ri.compiler.VariableReference", e);
//      }
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      QName qName0 = new QName("", "");
      VariableReference variableReference0 = new VariableReference(qName0);
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
      Step step0 = new Step((-6), nodeNameTest0, (Expression[]) null);
      Step step1 = new Step(3, nodeNameTest0, (Expression[]) null);
      CoreOperationLessThan coreOperationLessThan0 = new CoreOperationLessThan(variableReference0, variableReference0);
      Byte byte0 = new Byte((byte)65);
      Constant constant0 = new Constant(byte0);
      EvalContext evalContext0 = null;
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest(")(5");
      Expression[] expressionArray0 = new Expression[1];
      expressionArray0[0] = (Expression) coreOperationLessThan0;
      CoreFunction coreFunction0 = new CoreFunction((byte)65, expressionArray0);
      coreFunction0.computeValue((EvalContext) null);
      JXPathContext jXPathContext0 = JXPathContext.newContext((Object) processingInstructionTest0);
      JXPathContext.newContext(jXPathContext0, (Object) null);
      Pointer pointer0 = null;
      // Undeclared exception!
//      try { 
        coreFunction0.functionID((EvalContext) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.jxpath.ri.compiler.VariableReference", e);
//      }
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(20, (Expression[]) null);
      Constant constant0 = new Constant((String) null);
      CoreOperationLessThan coreOperationLessThan0 = new CoreOperationLessThan(coreFunction0, coreFunction0);
      Byte byte0 = new Byte((byte)36);
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest((String) null);
      Expression[] expressionArray0 = new Expression[6];
      expressionArray0[0] = (Expression) coreFunction0;
      expressionArray0[1] = (Expression) coreOperationLessThan0;
      expressionArray0[2] = (Expression) coreFunction0;
      expressionArray0[3] = (Expression) coreOperationLessThan0;
      expressionArray0[4] = (Expression) constant0;
      QName qName0 = new QName("L");
      Expression[] expressionArray1 = new Expression[1];
      expressionArray1[0] = (Expression) constant0;
      ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, expressionArray1);
      expressionArray0[5] = (Expression) extensionFunction0;
      CoreFunction coreFunction1 = new CoreFunction((-5588), expressionArray0);
      constant0.iteratePointers((EvalContext) null);
      Object object0 = coreFunction0.computeValue((EvalContext) null);
      assertEquals(20, coreFunction0.getFunctionCode());
      assertEquals(true, object0);
      assertNotNull(object0);
      
      CoreFunction coreFunction2 = new CoreFunction(20, expressionArray1);
      coreFunction2.functionNamespaceURI((EvalContext) null);
      String string0 = coreFunction2.toString();
      assertEquals("true('null')", string0);
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(20, (Expression[]) null);
      Byte byte0 = new Byte((byte)54);
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("g,mJI0fat}");
      BasicNodeSet basicNodeSet0 = new BasicNodeSet();
      NodeSetContext nodeSetContext0 = new NodeSetContext((EvalContext) null, basicNodeSet0);
      QName qName0 = new QName("");
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, "");
      AncestorContext ancestorContext0 = new AncestorContext(nodeSetContext0, true, nodeNameTest0);
      nodeSetContext0.nextSet();
      CoreFunction coreFunction1 = new CoreFunction((byte)54, (Expression[]) null);
      coreFunction1.getArgumentCount();
      coreFunction1.getArgumentCount();
      coreFunction0.toString();
      coreFunction0.computeContextDependent();
      coreFunction0.functionLast(nodeSetContext0);
      // Undeclared exception!
//      try { 
        coreFunction1.functionStartsWith(nodeSetContext0);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // Incorrect number of arguments: unknownFunction54()()
//         //
//         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      Integer integer0 = new Integer(3);
      Constant constant0 = new Constant(integer0);
      EvalContext evalContext0 = null;
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(3);
      Expression[] expressionArray0 = new Expression[5];
      Expression[] expressionArray1 = new Expression[2];
      expressionArray1[0] = (Expression) constant0;
      expressionArray1[1] = (Expression) constant0;
      Step step0 = new Step(3, nodeTypeTest0, expressionArray1);
      Step step1 = new Step((-2014), nodeTypeTest0, expressionArray1);
      expressionArray0[3] = (Expression) constant0;
      expressionArray1[1] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction((-2014), expressionArray1);
      coreFunction0.functionContains((EvalContext) null);
      coreFunction0.functionSubstringBefore((EvalContext) null);
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest((String) null);
      // Undeclared exception!
//      try { 
        coreFunction0.functionCeiling((EvalContext) null);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // Incorrect number of arguments: unknownFunction-2014()(3, 3)
//         //
//         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      Integer integer0 = new Integer(3);
      Constant constant0 = new Constant(integer0);
      constant0.toString();
      EvalContext evalContext0 = null;
      EvalContext evalContext1 = null;
      Expression[] expressionArray0 = new Expression[9];
      expressionArray0[0] = (Expression) constant0;
      expressionArray0[1] = (Expression) constant0;
      ExpressionPath expressionPath0 = new ExpressionPath(expressionArray0[1], expressionArray0, (Step[]) null);
      expressionArray0[2] = (Expression) expressionPath0;
      expressionArray0[3] = (Expression) constant0;
      expressionArray0[4] = (Expression) constant0;
      expressionArray0[5] = (Expression) constant0;
      expressionArray0[6] = (Expression) constant0;
      expressionArray0[7] = (Expression) constant0;
      expressionArray0[8] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction(3, expressionArray0);
      Expression[] expressionArray1 = new Expression[3];
      expressionArray1[0] = (Expression) coreFunction0;
      CoreOperationOr coreOperationOr0 = new CoreOperationOr(expressionArray0);
      expressionArray1[1] = (Expression) coreOperationOr0;
      expressionArray1[2] = (Expression) coreFunction0;
      CoreFunction coreFunction1 = new CoreFunction((-945), expressionArray1);
      // Undeclared exception!
      coreFunction0.compute((EvalContext) null);
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(13, (Expression[]) null);
      QName qName0 = new QName("}a0", (String) null);
      coreFunction0.isContextDependent();
      CoreFunction coreFunction1 = new CoreFunction(110, (Expression[]) null);
      CoreFunction coreFunction2 = new CoreFunction(41, (Expression[]) null);
      coreFunction2.getFunctionName();
      EvalContext evalContext0 = null;
      // Undeclared exception!
//      try { 
        coreFunction0.functionNormalizeSpace((EvalContext) null);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // Incorrect number of arguments: substring-after()
//         //
//         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      Constant constant0 = new Constant("}");
      CoreOperationNegate coreOperationNegate0 = new CoreOperationNegate(constant0);
      EvalContext evalContext0 = null;
      Expression[] expressionArray0 = new Expression[1];
      CoreFunction coreFunction0 = new CoreFunction((-4348), expressionArray0);
      CoreFunction coreFunction1 = new CoreFunction(25, expressionArray0);
      Object object0 = new Object();
      CoreFunction coreFunction2 = new CoreFunction((-2130), expressionArray0);
      // Undeclared exception!
//      try { 
        coreFunction0.functionNormalizeSpace((EvalContext) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      Constant constant0 = new Constant("}");
      CoreOperationNegate coreOperationNegate0 = new CoreOperationNegate(constant0);
      QName qName0 = new QName("}");
      VariableReference variableReference0 = new VariableReference(qName0);
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
      Expression[] expressionArray0 = new Expression[6];
      expressionArray0[0] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction(2, expressionArray0);
      // Undeclared exception!
//      try { 
        coreFunction0.compute((EvalContext) null);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // Incorrect number of arguments: position('}', null, null, null, null, null)
//         //
//         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      Byte byte0 = new Byte((byte)1);
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("g,mJI0fat}");
      BasicNodeSet basicNodeSet0 = new BasicNodeSet();
      NodeSetContext nodeSetContext0 = new NodeSetContext((EvalContext) null, basicNodeSet0);
      QName qName0 = new QName("yKUM%/]F*sIF'kj-r");
      QName qName1 = new QName("lang");
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName1, "");
      AncestorContext ancestorContext0 = new AncestorContext((EvalContext) null, true, processingInstructionTest0);
      nodeSetContext0.nextSet();
      Expression[] expressionArray0 = new Expression[1];
      ExtensionFunction extensionFunction0 = new ExtensionFunction(qName1, expressionArray0);
      CoreFunction coreFunction0 = new CoreFunction((byte)1, expressionArray0);
      CoreOperationNotEqual coreOperationNotEqual0 = new CoreOperationNotEqual(extensionFunction0, extensionFunction0);
      CoreOperationGreaterThan coreOperationGreaterThan0 = new CoreOperationGreaterThan(coreOperationNotEqual0, coreOperationNotEqual0);
      expressionArray0[0] = (Expression) coreOperationGreaterThan0;
      CoreFunction coreFunction1 = new CoreFunction((byte)1, expressionArray0);
      coreFunction1.getArgumentCount();
      CoreFunction coreFunction2 = new CoreFunction(1775, expressionArray0);
      coreFunction2.getArgumentCount();
      coreFunction1.toString();
      boolean boolean0 = coreFunction2.computeContextDependent();
      assertEquals(1775, coreFunction2.getFunctionCode());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(4, expressionArray0);
      QName qName0 = new QName("W-%WqMWROQ^rwRQG", "W-%WqMWROQ^rwRQG");
      coreFunction0.isContextDependent();
      CoreFunction coreFunction1 = new CoreFunction(2, expressionArray0);
      String string0 = coreFunction0.toString();
      assertEquals("id()", string0);
      
      boolean boolean0 = coreFunction0.computeContextDependent();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      Long long0 = new Long(1099511627776L);
      Constant constant0 = new Constant(long0);
      expressionArray0[0] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction(110, expressionArray0);
      EvalContext evalContext0 = null;
      UnionContext unionContext0 = new UnionContext((EvalContext) null, (EvalContext[]) null);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("org.apache.commons.jxpath.ri.EvalContext");
      SelfContext selfContext0 = new SelfContext(unionContext0, processingInstructionTest0);
      selfContext0.reset();
      // Undeclared exception!
//      try { 
        coreFunction0.functionSum(selfContext0);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // Invalid argument type for 'sum': java.lang.Long
//         //
//         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(20, (Expression[]) null);
      Byte byte0 = new Byte((byte)54);
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("g,mJI0fat}");
      BasicNodeSet basicNodeSet0 = new BasicNodeSet();
      NodeSetContext nodeSetContext0 = new NodeSetContext((EvalContext) null, basicNodeSet0);
      QName qName0 = new QName("");
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, "");
      AncestorContext ancestorContext0 = new AncestorContext(nodeSetContext0, true, nodeNameTest0);
      nodeSetContext0.nextSet();
      CoreFunction coreFunction1 = new CoreFunction((byte)54, (Expression[]) null);
      coreFunction1.getArgumentCount();
      coreFunction1.getArgumentCount();
      String string0 = coreFunction1.toString();
      assertEquals("unknownFunction54()()", string0);
      
      boolean boolean0 = coreFunction0.computeContextDependent();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      FileSystemHandling.shouldAllThrowIOExceptions();
      CoreFunction coreFunction0 = new CoreFunction(9, expressionArray0);
      CoreFunction coreFunction1 = new CoreFunction((byte)29, expressionArray0);
      JXPathContext jXPathContext0 = JXPathContext.newContext((Object) null);
      QName qName0 = new QName(" No root element");
      NodePointer nodePointer0 = NodePointer.newChildNodePointer((NodePointer) null, qName0, jXPathContext0);
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = new JXPathContextReferenceImpl(jXPathContext0, jXPathContext0, nodePointer0);
      RootContext rootContext0 = new RootContext(jXPathContextReferenceImpl0, nodePointer0);
      RootContext rootContext1 = rootContext0.getRootContext();
      EvalContext evalContext0 = rootContext1.getAbsoluteRootContext();
      coreFunction1.functionName(evalContext0);
      String string0 = coreFunction1.toString();
      assertEquals("key()", string0);
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      QName qName0 = new QName((String) null, (String) null);
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
      EvalContext evalContext0 = null;
      CoreFunction coreFunction0 = new CoreFunction(26, (Expression[]) null);
      int int0 = 26;
      CoreFunction coreFunction1 = new CoreFunction(26, (Expression[]) null);
      NodeNameTest nodeNameTest1 = new NodeNameTest(qName0, "Cannot register namespaces on a sealed NamespaceResolver");
      SelfContext selfContext0 = new SelfContext((EvalContext) null, nodeNameTest1);
      // Undeclared exception!
//      try { 
        coreFunction1.computeValue(selfContext0);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // Incorrect number of arguments: ceiling()
//         //
//         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      Integer integer0 = new Integer((-6));
      Constant constant0 = new Constant(integer0);
      constant0.toString();
      Expression[] expressionArray0 = new Expression[1];
      expressionArray0[0] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction(23, expressionArray0);
      Object object0 = coreFunction0.functionBoolean((EvalContext) null);
      assertEquals(true, object0);
      
      coreFunction0.functionNot((EvalContext) null);
      coreFunction0.functionStringLength((EvalContext) null);
      Object object1 = coreFunction0.functionNot((EvalContext) null);
      assertEquals(23, coreFunction0.getFunctionCode());
      assertEquals(false, object1);
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      Integer integer0 = new Integer(3);
      Constant constant0 = new Constant(integer0);
      EvalContext evalContext0 = null;
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(3);
      Expression[] expressionArray0 = new Expression[5];
      expressionArray0[1] = (Expression) constant0;
      expressionArray0[1] = (Expression) constant0;
      Expression[] expressionArray1 = new Expression[2];
      expressionArray1[0] = (Expression) constant0;
      expressionArray1[1] = (Expression) constant0;
      Step step0 = new Step(3, nodeTypeTest0, expressionArray1);
      Step step1 = new Step((-2014), nodeTypeTest0, expressionArray1);
      expressionArray0[3] = (Expression) constant0;
      expressionArray1[1] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction((-2014), expressionArray1);
      // Undeclared exception!
//      try { 
        coreFunction0.functionKey((EvalContext) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      Integer integer0 = new Integer((-6));
      Constant constant0 = new Constant(integer0);
      Expression[] expressionArray0 = new Expression[1];
      expressionArray0[0] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction(23, expressionArray0);
      Object object0 = coreFunction0.functionBoolean((EvalContext) null);
      assertEquals(true, object0);
      
      Object object1 = coreFunction0.functionNot((EvalContext) null);
      assertEquals(false, object1);
      assertEquals(23, coreFunction0.getFunctionCode());
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(0, expressionArray0);
      QName qName0 = new QName((String) null, (String) null);
      CoreFunction coreFunction1 = new CoreFunction(0, expressionArray0);
      Expression[] expressionArray1 = new Expression[8];
      expressionArray1[0] = (Expression) coreFunction0;
      expressionArray1[1] = (Expression) coreFunction0;
      expressionArray1[2] = (Expression) coreFunction0;
      expressionArray1[3] = (Expression) coreFunction1;
      expressionArray1[4] = (Expression) coreFunction0;
      expressionArray1[5] = (Expression) coreFunction0;
      expressionArray1[6] = (Expression) coreFunction0;
      expressionArray1[7] = (Expression) coreFunction1;
      CoreFunction coreFunction2 = new CoreFunction(30, expressionArray1);
      int int0 = (-2714);
      CoreFunction coreFunction3 = new CoreFunction((-2714), expressionArray0);
      EvalContext evalContext0 = null;
      PredicateContext predicateContext0 = new PredicateContext((EvalContext) null, coreFunction3);
      // Undeclared exception!
//      try { 
        coreFunction2.computeValue(predicateContext0);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // Incorrect number of arguments: format-number(unknownFunction0()(), unknownFunction0()(), unknownFunction0()(), unknownFunction0()(), unknownFunction0()(), unknownFunction0()(), unknownFunction0()(), unknownFunction0()())
//         //
//         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      QName qName0 = new QName((String) null, (String) null);
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
      EvalContext evalContext0 = null;
      CoreFunction coreFunction0 = new CoreFunction(26, (Expression[]) null);
      // Undeclared exception!
//      try { 
        coreFunction0.functionKey((EvalContext) null);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // Incorrect number of arguments: ceiling()
//         //
//         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(0, expressionArray0);
      QName qName0 = new QName((String) null, (String) null);
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, "true");
      coreFunction0.getArgumentCount();
      String string0 = coreFunction0.getFunctionName();
      assertEquals("unknownFunction0()", string0);
      
      boolean boolean0 = coreFunction0.computeContextDependent();
      assertFalse(boolean0);
      
      int int0 = coreFunction0.getFunctionCode();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      FileSystemHandling.shouldAllThrowIOExceptions();
      CoreFunction coreFunction0 = new CoreFunction(9, expressionArray0);
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("");
      BasicNodeSet basicNodeSet0 = new BasicNodeSet();
      NodeSetContext nodeSetContext0 = new NodeSetContext((EvalContext) null, basicNodeSet0);
      AncestorContext ancestorContext0 = new AncestorContext(nodeSetContext0, true, processingInstructionTest0);
      nodeSetContext0.nextSet();
      CoreFunction coreFunction1 = new CoreFunction((byte)29, expressionArray0);
      coreFunction0.getArgumentCount();
      coreFunction1.getArgumentCount();
      coreFunction0.toString();
      ChildContext childContext0 = new ChildContext(nodeSetContext0, processingInstructionTest0, true, true);
      Step[] stepArray0 = new Step[0];
      ExpressionPath expressionPath0 = new ExpressionPath(coreFunction1, expressionArray0, stepArray0);
      expressionPath0.evalSteps(childContext0);
      ParentContext parentContext0 = new ParentContext(ancestorContext0, processingInstructionTest0);
      // Undeclared exception!
//      try { 
        coreFunction0.functionStringLength((EvalContext) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      FileSystemHandling.shouldAllThrowIOExceptions();
      CoreFunction coreFunction0 = new CoreFunction(9, expressionArray0);
      EvalContext evalContext0 = null;
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("");
      BasicNodeSet basicNodeSet0 = new BasicNodeSet();
      NodeSetContext nodeSetContext0 = new NodeSetContext((EvalContext) null, basicNodeSet0);
      AncestorContext ancestorContext0 = new AncestorContext(nodeSetContext0, true, processingInstructionTest0);
      nodeSetContext0.nextSet();
      CoreFunction coreFunction1 = new CoreFunction((byte)29, expressionArray0);
      PredicateContext predicateContext0 = new PredicateContext(nodeSetContext0, coreFunction0);
      // Undeclared exception!
//      try { 
        coreFunction1.computeValue(predicateContext0);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // Incorrect number of arguments: key()
//         //
//         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      int int0 = 20;
      Expression[] expressionArray0 = null;
      CoreFunction coreFunction0 = new CoreFunction(20, (Expression[]) null);
      QName qName0 = new QName("", "");
      VariableReference variableReference0 = new VariableReference(qName0);
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
      Step step0 = new Step(20, nodeNameTest0, (Expression[]) null);
      Step step1 = new Step((-36), nodeNameTest0, (Expression[]) null);
      Constant constant0 = new Constant("");
      CoreOperationLessThan coreOperationLessThan0 = new CoreOperationLessThan(coreFunction0, constant0);
      Byte byte0 = new Byte((byte)54);
      constant0.toString();
      EvalContext evalContext0 = null;
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("g,mJI0fat}");
      boolean boolean0 = false;
      AncestorContext ancestorContext0 = new AncestorContext((EvalContext) null, false, nodeNameTest0);
      Expression[] expressionArray1 = new Expression[3];
      expressionArray1[0] = (Expression) coreFunction0;
      expressionArray1[1] = (Expression) constant0;
      expressionArray1[2] = (Expression) variableReference0;
      CoreFunction coreFunction1 = new CoreFunction(5, expressionArray1);
      // Undeclared exception!
//      try { 
        coreFunction1.functionSubstringBefore((EvalContext) null);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // Incorrect number of arguments: local-name(true(), '', $:)
//         //
//         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      Integer integer0 = new Integer(3);
      Constant constant0 = new Constant(integer0);
      CoreFunction coreFunction0 = new CoreFunction((-2119), (Expression[]) null);
      coreFunction0.getArgumentCount();
      CoreFunction coreFunction1 = new CoreFunction((-2999), (Expression[]) null);
      String string0 = coreFunction1.getFunctionName();
      assertEquals("unknownFunction-2999()", string0);
      
      CoreFunction coreFunction2 = new CoreFunction(4, (Expression[]) null);
      boolean boolean0 = coreFunction2.computeContextDependent();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      FileSystemHandling.shouldAllThrowIOExceptions();
      CoreFunction coreFunction0 = new CoreFunction(9, expressionArray0);
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("");
      BasicNodeSet basicNodeSet0 = new BasicNodeSet();
      NodeSetContext nodeSetContext0 = new NodeSetContext((EvalContext) null, basicNodeSet0);
      AncestorContext ancestorContext0 = new AncestorContext(nodeSetContext0, true, processingInstructionTest0);
      nodeSetContext0.nextSet();
      CoreFunction coreFunction1 = new CoreFunction((byte)29, expressionArray0);
      coreFunction0.getArgumentCount();
      coreFunction1.getArgumentCount();
      coreFunction0.toString();
      coreFunction1.computeContextDependent();
      // Undeclared exception!
//      try { 
        coreFunction1.compute((EvalContext) null);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // Incorrect number of arguments: key()
//         //
//         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(8, expressionArray0);
      Float float0 = new Float((double) 8);
      Constant constant0 = new Constant(float0);
      QName qName0 = new QName("A CDATA is not allowed at the document root", "");
      QName qName1 = new QName(")o");
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName1, "");
      CoreFunction coreFunction1 = new CoreFunction(8, expressionArray0);
      CoreFunction coreFunction2 = new CoreFunction(8, expressionArray0);
      CoreFunction coreFunction3 = new CoreFunction(8, expressionArray0);
      PredicateContext predicateContext0 = new PredicateContext((EvalContext) null, coreFunction2);
      CoreFunction coreFunction4 = new CoreFunction(8, expressionArray0);
      // Undeclared exception!
//      try { 
        coreFunction4.computeValue((EvalContext) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[9];
      QName qName0 = new QName("]Cz>u^yQ.qS");
      VariableReference variableReference0 = new VariableReference(qName0);
      CoreOperationGreaterThanOrEqual coreOperationGreaterThanOrEqual0 = new CoreOperationGreaterThanOrEqual(variableReference0, variableReference0);
      expressionArray0[0] = (Expression) coreOperationGreaterThanOrEqual0;
      Step[] stepArray0 = new Step[9];
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
      Step step0 = new Step(6, nodeNameTest0, expressionArray0);
      stepArray0[0] = step0;
      Step step1 = new Step(6, nodeNameTest0, expressionArray0);
      stepArray0[1] = step1;
      Step step2 = new Step(1843, nodeNameTest0, expressionArray0);
      stepArray0[2] = step2;
      Step step3 = new Step(0, nodeNameTest0, expressionArray0);
      stepArray0[3] = step3;
      Step step4 = new Step((-769), nodeNameTest0, expressionArray0);
      stepArray0[4] = step4;
      Step step5 = new Step(6, nodeNameTest0, expressionArray0);
      stepArray0[5] = step5;
      NodeNameTest nodeNameTest1 = new NodeNameTest(qName0);
      Step step6 = new Step(5, nodeNameTest1, expressionArray0);
      stepArray0[6] = step6;
      Expression[] expressionArray1 = new Expression[7];
      expressionArray1[0] = (Expression) coreOperationGreaterThanOrEqual0;
      expressionArray1[1] = (Expression) variableReference0;
      expressionArray1[2] = (Expression) variableReference0;
      expressionArray1[3] = (Expression) coreOperationGreaterThanOrEqual0;
      Constant constant0 = new Constant("");
      expressionArray1[4] = (Expression) constant0;
      expressionArray1[5] = (Expression) coreOperationGreaterThanOrEqual0;
      expressionArray1[6] = (Expression) variableReference0;
      Step step7 = new Step(1682, nodeNameTest1, expressionArray1);
      stepArray0[7] = step7;
      NodeNameTest nodeNameTest2 = new NodeNameTest(qName0);
      Step step8 = new Step((-1149), nodeNameTest2, expressionArray0);
      stepArray0[8] = step8;
      ExpressionPath expressionPath0 = new ExpressionPath(expressionArray0[0], expressionArray0, stepArray0);
      expressionArray0[1] = (Expression) expressionPath0;
      VariableReference variableReference1 = new VariableReference(qName0);
      expressionArray0[2] = (Expression) variableReference1;
      VariableReference variableReference2 = new VariableReference(qName0);
      NameAttributeTest nameAttributeTest0 = new NameAttributeTest(variableReference2, expressionArray0[1]);
      expressionArray0[3] = (Expression) nameAttributeTest0;
      LocationPath locationPath0 = new LocationPath(true, stepArray0);
      expressionArray0[4] = (Expression) locationPath0;
      Expression[] expressionArray2 = new Expression[2];
      expressionArray2[0] = (Expression) coreOperationGreaterThanOrEqual0;
      expressionArray2[1] = (Expression) expressionPath0;
      CoreOperationAnd coreOperationAnd0 = new CoreOperationAnd(expressionArray2);
      expressionArray0[5] = (Expression) coreOperationAnd0;
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual(expressionArray1[2], variableReference1);
      expressionArray0[6] = (Expression) coreOperationLessThanOrEqual0;
      CoreOperationGreaterThanOrEqual coreOperationGreaterThanOrEqual1 = new CoreOperationGreaterThanOrEqual(expressionArray1[5], expressionPath0);
      ExpressionPath expressionPath1 = new ExpressionPath(coreOperationGreaterThanOrEqual1, expressionArray2, stepArray0);
      expressionArray0[7] = (Expression) expressionPath1;
      CoreOperationGreaterThan coreOperationGreaterThan0 = new CoreOperationGreaterThan(expressionArray0[3], expressionArray0[7]);
      expressionArray0[8] = (Expression) coreOperationGreaterThan0;
      CoreFunction coreFunction0 = new CoreFunction(1843, expressionArray0);
      int int0 = coreFunction0.getFunctionCode();
      assertEquals(1843, int0);
  }

  @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Expression[] expressionArray0 = new Expression[2];
      CoreOperationUnion coreOperationUnion0 = new CoreOperationUnion(expressionArray0);
      CoreOperationNotEqual coreOperationNotEqual0 = new CoreOperationNotEqual(coreOperationUnion0, coreOperationUnion0);
      CoreOperationMultiply coreOperationMultiply0 = new CoreOperationMultiply(coreOperationNotEqual0, coreOperationNotEqual0);
      expressionArray0[0] = (Expression) coreOperationMultiply0;
      QName qName0 = new QName("Qq$1]P`@e;A!", ",");
      VariableReference variableReference0 = new VariableReference(qName0);
      expressionArray0[1] = (Expression) variableReference0;
      CoreFunction coreFunction0 = new CoreFunction(66, expressionArray0);
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("Qq$1]P`@e;A!");
      DescendantContext descendantContext0 = new DescendantContext((EvalContext) null, false, processingInstructionTest0);
      NamespaceContext namespaceContext0 = new NamespaceContext(descendantContext0, processingInstructionTest0);
      // Undeclared exception!
//      try { 
        coreFunction0.functionSubstring(namespaceContext0);
//        fail("Expecting exception: StackOverflowError");
      
//      } catch(StackOverflowError e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test223()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      FileSystemHandling.shouldAllThrowIOExceptions();
      CoreFunction coreFunction0 = new CoreFunction(9, expressionArray0);
      Byte byte0 = new Byte((byte)29);
      Constant constant0 = new Constant(byte0);
      EvalContext evalContext0 = null;
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("");
      CoreFunction coreFunction1 = new CoreFunction(9, expressionArray0);
      // Undeclared exception!
//      try { 
        coreFunction1.computeValue((EvalContext) null);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // Incorrect number of arguments: concat()
//         //
//         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test224()  throws Throwable  {
      Integer integer0 = new Integer(3);
      Constant constant0 = new Constant((Number) null);
      Byte byte0 = new Byte((byte) (-28));
      Constant constant1 = new Constant(integer0);
      Expression[] expressionArray0 = new Expression[0];
      QName qName0 = new QName("", "");
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, "");
      CoreFunction coreFunction0 = new CoreFunction(4194286, expressionArray0);
      CoreFunction coreFunction1 = new CoreFunction(1172, expressionArray0);
      CoreFunction coreFunction2 = new CoreFunction(3, expressionArray0);
      PredicateContext predicateContext0 = new PredicateContext((EvalContext) null, constant0);
      // Undeclared exception!
//      try { 
        coreFunction2.computeValue(predicateContext0);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // Incorrect number of arguments: count()
//         //
//         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test225()  throws Throwable  {
      Integer integer0 = new Integer(3);
      Constant constant0 = new Constant(integer0);
      EvalContext evalContext0 = null;
      Expression[] expressionArray0 = new Expression[2];
      CoreFunction coreFunction0 = new CoreFunction(3, expressionArray0);
      // Undeclared exception!
//      try { 
        coreFunction0.functionNull((EvalContext) null);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // Incorrect number of arguments: count(null, null)
//         //
//         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test226()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      FileSystemHandling.shouldAllThrowIOExceptions();
      CoreFunction coreFunction0 = new CoreFunction(9, expressionArray0);
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("");
      BasicNodeSet basicNodeSet0 = new BasicNodeSet();
      NodeSetContext nodeSetContext0 = new NodeSetContext((EvalContext) null, basicNodeSet0);
      AncestorContext ancestorContext0 = new AncestorContext(nodeSetContext0, true, processingInstructionTest0);
      nodeSetContext0.nextSet();
      CoreFunction coreFunction1 = new CoreFunction((byte)29, expressionArray0);
      coreFunction0.getArgumentCount();
      coreFunction1.getArgumentCount();
      coreFunction0.toString();
      coreFunction1.computeContextDependent();
      // Undeclared exception!
//      try { 
        coreFunction0.functionLast((EvalContext) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test227()  throws Throwable  {
      Constant constant0 = new Constant("");
      CoreOperationNegate coreOperationNegate0 = new CoreOperationNegate(constant0);
      QName qName0 = new QName("");
      VariableReference variableReference0 = new VariableReference(qName0);
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
      Expression[] expressionArray0 = new Expression[6];
      expressionArray0[0] = (Expression) constant0;
      expressionArray0[1] = (Expression) coreOperationNegate0;
      expressionArray0[2] = (Expression) constant0;
      expressionArray0[3] = null;
      expressionArray0[4] = null;
      expressionArray0[5] = (Expression) coreOperationNegate0;
      Step step0 = new Step((-4323), nodeNameTest0, expressionArray0);
      Step step1 = new Step(105, nodeNameTest0, expressionArray0);
      CoreOperationLessThan coreOperationLessThan0 = new CoreOperationLessThan(coreOperationNegate0, expressionArray0[3]);
      constant0.toString();
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("g,mJI0fat}");
      AncestorContext ancestorContext0 = new AncestorContext((EvalContext) null, false, processingInstructionTest0);
      CoreFunction coreFunction0 = new CoreFunction(15, expressionArray0);
      String string0 = coreFunction0.getFunctionName();
      assertEquals("string-length", string0);
  }

  @Test(timeout = 4000)
  public void test228()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(8, expressionArray0);
      QName qName0 = new QName((String) null, (String) null);
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, (String) null);
      CoreFunction coreFunction1 = new CoreFunction(2277, expressionArray0);
      String string0 = coreFunction1.getFunctionName();
      assertEquals("unknownFunction2277()", string0);
      
      Step[] stepArray0 = new Step[5];
      Step step0 = new Step(962, nodeNameTest0, expressionArray0);
      stepArray0[0] = step0;
      Expression[] expressionArray1 = new Expression[5];
      expressionArray1[0] = (Expression) coreFunction1;
      expressionArray1[1] = (Expression) coreFunction1;
      expressionArray1[2] = (Expression) coreFunction0;
      expressionArray1[3] = (Expression) coreFunction1;
      expressionArray1[4] = (Expression) coreFunction1;
      Step step1 = new Step(20, nodeNameTest0, expressionArray1);
      stepArray0[1] = step1;
      Step step2 = new Step(9, nodeNameTest0, expressionArray0);
      stepArray0[2] = step2;
      Step step3 = new Step(9, nodeNameTest0, expressionArray1);
      stepArray0[3] = step3;
      Step step4 = new Step(8, nodeNameTest0, expressionArray0);
      stepArray0[4] = step4;
      ExpressionPath expressionPath0 = new ExpressionPath(coreFunction1, expressionArray0, stepArray0);
      EvalContext[] evalContextArray0 = new EvalContext[0];
      UnionContext unionContext0 = new UnionContext((EvalContext) null, evalContextArray0);
      ChildContext childContext0 = new ChildContext(unionContext0, nodeNameTest0, false, false);
      EvalContext evalContext0 = expressionPath0.evalSteps(childContext0);
      ParentContext parentContext0 = new ParentContext(evalContext0, nodeNameTest0);
      coreFunction0.functionStringLength(parentContext0);
      assertEquals(8, coreFunction0.getFunctionCode());
  }

  @Test(timeout = 4000)
  public void test229()  throws Throwable  {
      EvalContext evalContext0 = null;
      Expression[] expressionArray0 = new Expression[2];
      int int0 = 23;
      CoreFunction coreFunction0 = new CoreFunction(23, expressionArray0);
      // Undeclared exception!
//      try { 
        coreFunction0.functionKey((EvalContext) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test230()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(8, expressionArray0);
      QName qName0 = new QName((String) null, (String) null);
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, (String) null);
      EvalContext evalContext0 = null;
      coreFunction0.computeContextDependent();
      // Undeclared exception!
//      try { 
        coreFunction0.functionContains((EvalContext) null);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // Incorrect number of arguments: string()
//         //
//         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test231()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[2];
      Constant constant0 = new Constant("'VvEZ9i8VMQ*I");
      constant0.toString();
      CoreOperationNotEqual coreOperationNotEqual0 = new CoreOperationNotEqual(constant0, constant0);
      CoreOperationNegate coreOperationNegate0 = new CoreOperationNegate(coreOperationNotEqual0);
      CoreOperationGreaterThan coreOperationGreaterThan0 = new CoreOperationGreaterThan(coreOperationNegate0, coreOperationNotEqual0);
      CoreOperationSubtract coreOperationSubtract0 = new CoreOperationSubtract(coreOperationGreaterThan0, coreOperationGreaterThan0);
      expressionArray0[0] = (Expression) coreOperationSubtract0;
      CoreOperationAnd coreOperationAnd0 = new CoreOperationAnd(expressionArray0);
      expressionArray0[1] = (Expression) coreOperationAnd0;
      CoreFunction coreFunction0 = new CoreFunction(1521, expressionArray0);
      EvalContext evalContext0 = null;
      coreOperationAnd0.args = expressionArray0;
      coreOperationNotEqual0.compute((EvalContext) null);
      // Undeclared exception!
//      try { 
        coreFunction0.functionPosition((EvalContext) null);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // Incorrect number of arguments: unknownFunction1521()((org.apache.commons.jxpath.ri.compiler.CoreOperationGreaterThan@0000000004) - (org.apache.commons.jxpath.ri.compiler.CoreOperationGreaterThan@0000000004), org.apache.commons.jxpath.ri.compiler.CoreOperationSubtract@0000000005 and org.apache.commons.jxpath.ri.compiler.CoreOperationAnd@0000000006)
//         //
//         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test232()  throws Throwable  {
      EvalContext evalContext0 = null;
      Expression[] expressionArray0 = new Expression[2];
      int int0 = 23;
      CoreFunction coreFunction0 = new CoreFunction(23, expressionArray0);
      EvalContext evalContext1 = null;
      // Undeclared exception!
//      try { 
        coreFunction0.functionStringLength((EvalContext) null);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // Incorrect number of arguments: number(null, null)
//         //
//         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test233()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd(expressionArray0);
      CoreOperationOr coreOperationOr0 = new CoreOperationOr(expressionArray0);
      CoreFunction coreFunction0 = new CoreFunction(2768, expressionArray0);
      CoreFunction coreFunction1 = new CoreFunction((-132774720), expressionArray0);
      coreFunction1.getFunctionName();
      coreFunction1.toString();
      EvalContext evalContext0 = null;
      // Undeclared exception!
//      try { 
        coreFunction0.functionName((EvalContext) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test234()  throws Throwable  {
      Integer integer0 = new Integer(3);
      Constant constant0 = new Constant(integer0);
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(3);
      Expression[] expressionArray0 = new Expression[5];
      expressionArray0[0] = (Expression) constant0;
      expressionArray0[1] = (Expression) constant0;
      Expression[] expressionArray1 = new Expression[2];
      expressionArray1[0] = (Expression) constant0;
      expressionArray1[1] = (Expression) constant0;
      Step step0 = new Step(3, nodeTypeTest0, expressionArray1);
      Step step1 = new Step((-2014), nodeTypeTest0, expressionArray1);
      expressionArray0[3] = (Expression) constant0;
      expressionArray0[4] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction((-2014), expressionArray1);
      coreFunction0.functionContains((EvalContext) null);
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest((String) null);
      // Undeclared exception!
//      try { 
        coreFunction0.functionCeiling((EvalContext) null);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // Incorrect number of arguments: unknownFunction-2014()(3, 3)
//         //
//         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test235()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction((-4323), (Expression[]) null);
      QName qName0 = new QName("", "");
      VariableReference variableReference0 = new VariableReference(qName0);
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
      Step step0 = new Step((-403), nodeNameTest0, (Expression[]) null);
      Step step1 = new Step((-4323), nodeNameTest0, (Expression[]) null);
      CoreOperationLessThan coreOperationLessThan0 = new CoreOperationLessThan(coreFunction0, variableReference0);
      Byte byte0 = new Byte((byte) (-109));
      Constant constant0 = new Constant(byte0);
      constant0.toString();
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest(")(5");
      AncestorContext ancestorContext0 = new AncestorContext((EvalContext) null, false, processingInstructionTest0);
      CoreFunction coreFunction1 = new CoreFunction(23, (Expression[]) null);
      coreFunction0.computeValue((EvalContext) null);
      JXPathContext jXPathContext0 = JXPathContext.newContext((Object) null);
      JXPathContext jXPathContext1 = JXPathContext.newContext(jXPathContext0, (Object) "-109");
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = new JXPathContextReferenceImpl(jXPathContext1, (Object) null, (Pointer) null);
      RootContext rootContext0 = new RootContext(jXPathContextReferenceImpl0, (NodePointer) null);
      rootContext0.getVariableContext(qName0);
      AncestorContext ancestorContext1 = new AncestorContext(ancestorContext0, false, processingInstructionTest0);
      // Undeclared exception!
//      try { 
        coreFunction0.functionLast(ancestorContext1);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.jxpath.ri.axes.AncestorContext", e);
//      }
  }

  @Test(timeout = 4000)
  public void test236()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(0, expressionArray0);
      QName qName0 = new QName((String) null, (String) null);
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, "true");
      EvalContext evalContext0 = null;
      coreFunction0.compute((EvalContext) null);
      coreFunction0.getArgumentCount();
      CoreFunction coreFunction1 = new CoreFunction(0, expressionArray0);
      CoreFunction coreFunction2 = new CoreFunction(10, expressionArray0);
      coreFunction2.computeContextDependent();
      // Undeclared exception!
//      try { 
        coreFunction2.computeValue((EvalContext) null);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // Incorrect number of arguments: starts-with()
//         //
//         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test237()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(8, expressionArray0);
      QName qName0 = new QName((String) null, (String) null);
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, (String) null);
      EvalContext evalContext0 = null;
      // Undeclared exception!
//      try { 
        coreFunction0.compute((EvalContext) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test238()  throws Throwable  {
      Integer integer0 = new Integer(2);
      Constant constant0 = new Constant(integer0);
      Expression[] expressionArray0 = new Expression[2];
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("g,mJI0fat}");
      boolean boolean0 = false;
      AncestorContext ancestorContext0 = new AncestorContext((EvalContext) null, false, processingInstructionTest0);
      CoreFunction coreFunction0 = new CoreFunction(2147483620, expressionArray0);
      // Undeclared exception!
//      try { 
        coreFunction0.functionContains((EvalContext) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test239()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      CoreFunction coreFunction0 = new CoreFunction(2768, expressionArray0);
      CoreFunction coreFunction1 = new CoreFunction((-1452), expressionArray0);
      CoreFunction coreFunction2 = new CoreFunction(2768, expressionArray0);
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(2768);
      NodeTypeTest nodeTypeTest1 = new NodeTypeTest((-28));
      JXPathContext.newContext((Object) null);
      PrecedingOrFollowingContext precedingOrFollowingContext0 = new PrecedingOrFollowingContext((EvalContext) null, nodeTypeTest1, true);
      CoreFunction coreFunction3 = new CoreFunction(2768, expressionArray0);
      coreFunction1.computeValue((EvalContext) null);
      DescendantContext descendantContext0 = new DescendantContext((EvalContext) null, true, nodeTypeTest0);
      // Undeclared exception!
//      try { 
        coreFunction3.functionNamespaceURI(descendantContext0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test240()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[5];
      CoreFunction coreFunction0 = new CoreFunction(21, expressionArray0);
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("zl_");
      Step step0 = new Step((-2263), processingInstructionTest0, expressionArray0);
      CoreOperationLessThan coreOperationLessThan0 = new CoreOperationLessThan(coreFunction0, coreFunction0);
      EvalContext evalContext0 = null;
      ProcessingInstructionTest processingInstructionTest1 = new ProcessingInstructionTest("");
      boolean boolean0 = false;
      AncestorContext ancestorContext0 = new AncestorContext((EvalContext) null, false, processingInstructionTest0);
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(292);
      ProcessingInstructionTest processingInstructionTest2 = new ProcessingInstructionTest("dDAEbg");
      AncestorContext ancestorContext1 = new AncestorContext(ancestorContext0, false, processingInstructionTest1);
      // Undeclared exception!
//      try { 
        coreFunction0.functionSubstringAfter(ancestorContext1);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // Incorrect number of arguments: false(null, null, null, null, null)
//         //
//         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test241()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      FileSystemHandling.shouldAllThrowIOExceptions();
      CoreFunction coreFunction0 = new CoreFunction(9, expressionArray0);
      Byte byte0 = new Byte((byte)29);
      Constant constant0 = new Constant(byte0);
      coreFunction0.computeContextDependent();
      NodeTest nodeTest0 = null;
      PrecedingOrFollowingContext precedingOrFollowingContext0 = new PrecedingOrFollowingContext((EvalContext) null, (NodeTest) null, false);
      PredicateContext predicateContext0 = new PredicateContext(precedingOrFollowingContext0, coreFunction0);
      // Undeclared exception!
//      try { 
        coreFunction0.functionBoolean((EvalContext) null);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // Incorrect number of arguments: concat()
//         //
//         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test242()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction((-4323), (Expression[]) null);
      RootContext rootContext0 = new RootContext((JXPathContextReferenceImpl) null, (NodePointer) null);
      coreFunction0.getFunctionCode();
      coreFunction0.computeContextDependent();
      RootContext rootContext1 = new RootContext((JXPathContextReferenceImpl) null, (NodePointer) null);
      coreFunction0.functionNumber(rootContext1);
      // Undeclared exception!
//      try { 
        coreFunction0.getArg2();
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test243()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[5];
      Constant constant0 = new Constant("FGgj]x:)`~dS");
      CoreOperationNegate coreOperationNegate0 = new CoreOperationNegate(constant0);
      expressionArray0[0] = (Expression) coreOperationNegate0;
      Expression[] expressionArray1 = new Expression[6];
      expressionArray1[0] = (Expression) coreOperationNegate0;
      expressionArray1[1] = (Expression) coreOperationNegate0;
      QName qName0 = new QName("FGgj]x:)`~dS", "FGgj]x:)`~dS");
      VariableReference variableReference0 = new VariableReference(qName0);
      expressionArray1[2] = (Expression) variableReference0;
      expressionArray1[3] = null;
      expressionArray1[4] = (Expression) constant0;
      expressionArray1[5] = null;
      Step[] stepArray0 = new Step[6];
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
      Step step0 = new Step(2045, nodeNameTest0, expressionArray0);
      stepArray0[0] = step0;
      Step step1 = new Step(2045, nodeNameTest0, expressionArray1);
      CoreOperationLessThan coreOperationLessThan0 = new CoreOperationLessThan(expressionArray1[0], expressionArray1[2]);
      Byte byte0 = new Byte((byte)54);
      constant0.toString();
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("g,mJI0fat}");
      AncestorContext ancestorContext0 = new AncestorContext((EvalContext) null, false, processingInstructionTest0);
      CoreFunction coreFunction0 = new CoreFunction(19, expressionArray0);
      String string0 = coreFunction0.getFunctionName();
      assertEquals("not", string0);
  }

  @Test(timeout = 4000)
  public void test244()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[2];
      CoreOperationLessThan coreOperationLessThan0 = new CoreOperationLessThan(expressionArray0[0], expressionArray0[0]);
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd(expressionArray0);
      Expression[] expressionArray1 = new Expression[3];
      expressionArray1[0] = (Expression) coreOperationLessThan0;
      expressionArray1[1] = (Expression) coreOperationLessThan0;
      expressionArray1[2] = (Expression) coreOperationAdd0;
      CoreOperationUnion coreOperationUnion0 = new CoreOperationUnion(expressionArray1);
      CoreOperationLessThan coreOperationLessThan1 = new CoreOperationLessThan(coreOperationUnion0, coreOperationUnion0);
      EvalContext evalContext0 = null;
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("position");
      AncestorContext ancestorContext0 = new AncestorContext((EvalContext) null, false, processingInstructionTest0);
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest((byte)32);
      ProcessingInstructionTest processingInstructionTest1 = new ProcessingInstructionTest(">kU*o)9");
      AncestorContext ancestorContext1 = new AncestorContext((EvalContext) null, false, processingInstructionTest0);
      CoreFunction coreFunction0 = new CoreFunction(2, expressionArray1);
      // Undeclared exception!
//      try { 
        coreFunction0.functionSubstringAfter((EvalContext) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.evosuite.runtime.System", e);
//      }
  }

  @Test(timeout = 4000)
  public void test245()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[2];
      CoreOperationLessThan coreOperationLessThan0 = new CoreOperationLessThan(expressionArray0[0], expressionArray0[0]);
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd(expressionArray0);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)20;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      CoreFunction coreFunction0 = new CoreFunction((byte)20, expressionArray0);
      EvalContext evalContext0 = null;
      int int0 = (-1452);
      CoreFunction coreFunction1 = new CoreFunction((-1452), expressionArray0);
      // Undeclared exception!
//      try { 
        coreFunction0.functionLocalName((EvalContext) null);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // Incorrect number of arguments: true(null, null)
//         //
//         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test246()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[2];
      CoreOperationEqual coreOperationEqual0 = new CoreOperationEqual((Expression) null, (Expression) null);
      expressionArray0[0] = (Expression) coreOperationEqual0;
      CoreOperationOr coreOperationOr0 = new CoreOperationOr(expressionArray0);
      expressionArray0[1] = (Expression) coreOperationOr0;
      CoreFunction coreFunction0 = new CoreFunction((-3734), expressionArray0);
      coreFunction0.getArg1();
      assertEquals((-3734), coreFunction0.getFunctionCode());
  }

  @Test(timeout = 4000)
  public void test247()  throws Throwable  {
      Integer integer0 = new Integer(3);
      Constant constant0 = new Constant(integer0);
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("");
      AncestorContext ancestorContext0 = new AncestorContext((EvalContext) null, true, processingInstructionTest0);
      Expression[] expressionArray0 = new Expression[9];
      Constant constant1 = new Constant("");
      expressionArray0[0] = (Expression) constant1;
      expressionArray0[1] = (Expression) constant0;
      expressionArray0[2] = (Expression) constant0;
      expressionArray0[3] = (Expression) constant0;
      expressionArray0[4] = (Expression) constant0;
      expressionArray0[5] = (Expression) constant0;
      expressionArray0[7] = (Expression) constant0;
      expressionArray0[8] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction(10, expressionArray0);
      coreFunction0.getArgumentCount();
      coreFunction0.getFunctionName();
      // Undeclared exception!
//      try { 
        coreFunction0.functionNumber((EvalContext) null);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // Incorrect number of arguments: starts-with('', 3, 3, 3, 3, 3, null, 3, 3)
//         //
//         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test248()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction((-4323), (Expression[]) null);
      QName qName0 = new QName("", "");
      VariableReference variableReference0 = new VariableReference(qName0);
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
      Step step0 = new Step((-403), nodeNameTest0, (Expression[]) null);
      Step step1 = new Step((-4323), nodeNameTest0, (Expression[]) null);
      CoreOperationLessThan coreOperationLessThan0 = new CoreOperationLessThan(coreFunction0, variableReference0);
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest(")(5");
      AncestorContext ancestorContext0 = new AncestorContext((EvalContext) null, false, processingInstructionTest0);
      coreFunction0.computeValue((EvalContext) null);
      JXPathContext.newContext((Object) null);
      CoreFunction coreFunction1 = new CoreFunction((-403), (Expression[]) null);
      // Undeclared exception!
//      try { 
        coreFunction0.functionLocalName(ancestorContext0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test249()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      FileSystemHandling.shouldAllThrowIOExceptions();
      CoreFunction coreFunction0 = new CoreFunction(9, expressionArray0);
      Byte byte0 = new Byte((byte)29);
      Constant constant0 = new Constant(byte0);
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("");
      BasicNodeSet basicNodeSet0 = new BasicNodeSet();
      NodeSetContext nodeSetContext0 = new NodeSetContext((EvalContext) null, basicNodeSet0);
      AncestorContext ancestorContext0 = new AncestorContext(nodeSetContext0, true, processingInstructionTest0);
      nodeSetContext0.nextSet();
      CoreFunction coreFunction1 = new CoreFunction((byte)29, expressionArray0);
      coreFunction0.getArgumentCount();
      String string0 = coreFunction1.getFunctionName();
      assertEquals("key", string0);
      
      coreFunction1.functionNumber(nodeSetContext0);
      assertEquals(29, coreFunction1.getFunctionCode());
  }

  @Test(timeout = 4000)
  public void test250()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      CoreOperationLessThan coreOperationLessThan0 = new CoreOperationLessThan(expressionArray0[0], expressionArray0[0]);
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd(expressionArray0);
      Byte byte0 = new Byte((byte)32);
      Constant constant0 = new Constant(byte0);
      EvalContext evalContext0 = null;
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest((String) null);
      AncestorContext ancestorContext0 = new AncestorContext((EvalContext) null, false, processingInstructionTest0);
      CoreFunction coreFunction0 = new CoreFunction(944, expressionArray0);
      coreFunction0.getArgumentCount();
      coreFunction0.getFunctionName();
      // Undeclared exception!
//      try { 
        coreFunction0.functionNumber((EvalContext) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test251()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      QName qName0 = new QName("", "");
      VariableReference variableReference0 = new VariableReference(qName0);
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
      Constant constant0 = new Constant("");
      Byte byte0 = new Byte((byte)54);
      constant0.toString();
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("g,mJI0fat}");
      AncestorContext ancestorContext0 = new AncestorContext((EvalContext) null, false, nodeNameTest0);
      Expression[] expressionArray0 = new Expression[3];
      expressionArray0[1] = (Expression) constant0;
      expressionArray0[2] = (Expression) variableReference0;
      CoreFunction coreFunction0 = new CoreFunction(5, expressionArray0);
      DescendantContext descendantContext0 = new DescendantContext((EvalContext) null, false, processingInstructionTest0);
      CoreFunction coreFunction1 = new CoreFunction(20, expressionArray0);
      // Undeclared exception!
//      try { 
        coreFunction0.computeValue(descendantContext0);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // Incorrect number of arguments: local-name(null, '', $:)
//         //
//         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test252()  throws Throwable  {
      int int0 = (-4323);
      CoreFunction coreFunction0 = new CoreFunction((-4323), (Expression[]) null);
      RootContext rootContext0 = new RootContext((JXPathContextReferenceImpl) null, (NodePointer) null);
      // Undeclared exception!
//      try { 
        coreFunction0.getArg1();
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test253()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction((-4323), (Expression[]) null);
      QName qName0 = new QName("", "");
      VariableReference variableReference0 = new VariableReference(qName0);
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
      Step step0 = new Step((-403), nodeNameTest0, (Expression[]) null);
      Step step1 = new Step((-4323), nodeNameTest0, (Expression[]) null);
      CoreOperationLessThan coreOperationLessThan0 = new CoreOperationLessThan(coreFunction0, variableReference0);
      Byte byte0 = new Byte((byte) (-109));
      Constant constant0 = new Constant(byte0);
      constant0.toString();
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest(")(5");
      AncestorContext ancestorContext0 = new AncestorContext((EvalContext) null, false, processingInstructionTest0);
      CoreFunction coreFunction1 = new CoreFunction(23, (Expression[]) null);
      coreFunction0.computeValue((EvalContext) null);
      assertEquals(0, coreFunction0.getArgumentCount());
      
      JXPathContext jXPathContext0 = JXPathContext.newContext((Object) null);
      JXPathContext jXPathContext1 = JXPathContext.newContext(jXPathContext0, (Object) "-109");
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = new JXPathContextReferenceImpl(jXPathContext1, (Object) null, (Pointer) null);
      RootContext rootContext0 = new RootContext(jXPathContextReferenceImpl0, (NodePointer) null);
      EvalContext evalContext0 = rootContext0.getVariableContext(qName0);
      DescendantContext descendantContext0 = new DescendantContext(evalContext0, true, nodeNameTest0);
      Object object0 = coreFunction0.functionNamespaceURI(evalContext0);
      assertNotNull(object0);
      
      String string0 = coreFunction1.toString();
      assertEquals("number()", string0);
  }

  @Test(timeout = 4000)
  public void test254()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[5];
      Constant constant0 = new Constant("FGgj]x:)`~dS");
      CoreOperationNegate coreOperationNegate0 = new CoreOperationNegate(constant0);
      expressionArray0[0] = (Expression) coreOperationNegate0;
      Expression[] expressionArray1 = new Expression[6];
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("FGgj]x:)`~dS");
      Step step0 = new Step(2045, processingInstructionTest0, expressionArray0);
      CoreOperationLessThan coreOperationLessThan0 = new CoreOperationLessThan(coreOperationNegate0, constant0);
      ProcessingInstructionTest processingInstructionTest1 = new ProcessingInstructionTest("/");
      AncestorContext ancestorContext0 = new AncestorContext((EvalContext) null, false, processingInstructionTest0);
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(2);
      ProcessingInstructionTest processingInstructionTest2 = new ProcessingInstructionTest("FGgj]x:)`~dS");
      EvalContext evalContext0 = null;
      AncestorContext ancestorContext1 = new AncestorContext((EvalContext) null, false, nodeTypeTest0);
      CoreFunction coreFunction0 = new CoreFunction(2, expressionArray1);
      ancestorContext0.toString();
      // Undeclared exception!
//      try { 
        coreFunction0.functionSubstringAfter((EvalContext) null);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // Incorrect number of arguments: position(null, null, null, null, null, null)
//         //
//         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test255()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      EvalContext[] evalContextArray0 = new EvalContext[4];
      CoreFunction coreFunction0 = new CoreFunction(2768, expressionArray0);
      CoreFunction coreFunction1 = new CoreFunction((-1452), expressionArray0);
      CoreFunction coreFunction2 = new CoreFunction(2768, expressionArray0);
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(2768);
      CoreFunction coreFunction3 = new CoreFunction(10, expressionArray0);
      boolean boolean0 = coreFunction3.computeContextDependent();
      assertFalse(boolean0);
      assertEquals(10, coreFunction3.getFunctionCode());
  }

  @Test(timeout = 4000)
  public void test256()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(3, expressionArray0);
      QName qName0 = new QName("oW-%WqAMROQ^rwRQG", "oW-%WqAMROQ^rwRQG");
      Step[] stepArray0 = null;
      ExpressionPath expressionPath0 = new ExpressionPath(coreFunction0, expressionArray0, (Step[]) null);
      EvalContext evalContext0 = null;
      coreFunction0.computeContextDependent();
      CoreOperationAnd coreOperationAnd0 = new CoreOperationAnd(expressionArray0);
      PredicateContext predicateContext0 = new PredicateContext((EvalContext) null, coreOperationAnd0);
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
      PrecedingOrFollowingContext precedingOrFollowingContext0 = new PrecedingOrFollowingContext(predicateContext0, nodeNameTest0, false);
      // Undeclared exception!
//      try { 
        coreFunction0.functionBoolean(precedingOrFollowingContext0);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // Incorrect number of arguments: count()
//         //
//         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test257()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[2];
      CoreOperationLessThan coreOperationLessThan0 = new CoreOperationLessThan(expressionArray0[0], expressionArray0[0]);
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd(expressionArray0);
      Byte byte0 = new Byte((byte)32);
      Constant constant0 = new Constant(byte0);
      CoreFunction coreFunction0 = new CoreFunction((byte)32, expressionArray0);
      EvalContext evalContext0 = null;
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("");
      boolean boolean0 = false;
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest((byte)32);
      nodeTypeTest0.toString();
      nodeTypeTest0.toString();
      AncestorContext ancestorContext0 = new AncestorContext((EvalContext) null, false, nodeTypeTest0);
      CoreFunction coreFunction1 = new CoreFunction(25, expressionArray0);
      // Undeclared exception!
//      try { 
        coreFunction1.computeValue((EvalContext) null);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // Incorrect number of arguments: floor(null, null)
//         //
//         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test258()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[2];
      CoreOperationLessThan coreOperationLessThan0 = new CoreOperationLessThan(expressionArray0[0], expressionArray0[0]);
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd(expressionArray0);
      Byte byte0 = new Byte((byte)32);
      Constant constant0 = new Constant(byte0);
      CoreFunction coreFunction0 = new CoreFunction((byte)32, expressionArray0);
      EvalContext evalContext0 = null;
      String string0 = "";
      // Undeclared exception!
//      try { 
        coreFunction0.functionSubstring((EvalContext) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test259()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      CoreFunction coreFunction0 = new CoreFunction(21, expressionArray0);
      EvalContext evalContext0 = null;
      // Undeclared exception!
//      try { 
        coreFunction0.functionString((EvalContext) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test260()  throws Throwable  {
      int int0 = 2045;
      Expression[] expressionArray0 = new Expression[5];
      Constant constant0 = new Constant("FGgj]x:)`~dS");
      CoreOperationNegate coreOperationNegate0 = new CoreOperationNegate(constant0);
      expressionArray0[0] = (Expression) coreOperationNegate0;
      QName qName0 = new QName("FGgj]x:)`~dS", (String) null);
      CoreFunction coreFunction0 = new CoreFunction(7, expressionArray0);
      EvalContext evalContext0 = null;
      // Undeclared exception!
//      try { 
        coreFunction0.functionStartsWith((EvalContext) null);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // Incorrect number of arguments: name(-org.apache.commons.jxpath.ri.compiler.Constant@0000000001, null, null, null, null)
//         //
//         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test261()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      int int0 = 20;
      CoreFunction coreFunction0 = new CoreFunction(20, (Expression[]) null);
      QName qName0 = new QName("", "");
      VariableReference variableReference0 = new VariableReference(qName0);
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
      Step step0 = new Step(20, nodeNameTest0, (Expression[]) null);
      Step step1 = new Step((-36), nodeNameTest0, (Expression[]) null);
      Constant constant0 = new Constant("");
      CoreOperationLessThan coreOperationLessThan0 = new CoreOperationLessThan(coreFunction0, constant0);
      Byte byte0 = new Byte((byte)54);
      constant0.toString();
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("g,mJI0fat}");
      AncestorContext ancestorContext0 = new AncestorContext((EvalContext) null, false, nodeNameTest0);
      Expression[] expressionArray0 = new Expression[3];
      expressionArray0[0] = (Expression) coreFunction0;
      expressionArray0[1] = (Expression) constant0;
      expressionArray0[2] = (Expression) variableReference0;
      CoreFunction coreFunction1 = new CoreFunction(5, expressionArray0);
      CoreFunction coreFunction2 = new CoreFunction(20, (Expression[]) null);
      coreFunction2.computeValue((EvalContext) null);
      DescendantContext descendantContext0 = new DescendantContext((EvalContext) null, false, processingInstructionTest0);
      // Undeclared exception!
//      try { 
        coreFunction2.functionNamespaceURI((EvalContext) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test262()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[9];
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd(expressionArray0);
      Expression[] expressionArray1 = new Expression[7];
      expressionArray1[0] = (Expression) coreOperationAdd0;
      CoreOperationMod coreOperationMod0 = new CoreOperationMod(expressionArray1[0], expressionArray1[0]);
      expressionArray1[1] = (Expression) coreOperationMod0;
      expressionArray1[2] = (Expression) coreOperationAdd0;
      expressionArray1[3] = (Expression) coreOperationAdd0;
      CoreOperationGreaterThanOrEqual coreOperationGreaterThanOrEqual0 = new CoreOperationGreaterThanOrEqual(expressionArray1[1], expressionArray1[1]);
      expressionArray1[4] = (Expression) coreOperationGreaterThanOrEqual0;
      expressionArray1[5] = (Expression) coreOperationAdd0;
      expressionArray1[6] = (Expression) coreOperationAdd0;
      CoreFunction coreFunction0 = new CoreFunction(48, expressionArray1);
      EvalContext evalContext0 = null;
      // Undeclared exception!
//      try { 
        coreFunction0.functionCount((EvalContext) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.evosuite.runtime.System", e);
//      }
  }

  @Test(timeout = 4000)
  public void test263()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[2];
      CoreOperationLessThan coreOperationLessThan0 = new CoreOperationLessThan(expressionArray0[0], expressionArray0[0]);
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd(expressionArray0);
      Byte byte0 = new Byte((byte)32);
      Constant constant0 = new Constant(byte0);
      CoreFunction coreFunction0 = new CoreFunction((byte)32, expressionArray0);
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("");
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest((byte)32);
      AncestorContext ancestorContext0 = new AncestorContext((EvalContext) null, false, nodeTypeTest0);
      CoreFunction coreFunction1 = new CoreFunction(25, expressionArray0);
      DescendantContext descendantContext0 = new DescendantContext((EvalContext) null, false, processingInstructionTest0);
      // Undeclared exception!
//      try { 
        coreFunction1.functionNamespaceURI((EvalContext) null);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // Incorrect number of arguments: floor(null, null)
//         //
//         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test264()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction((-4323), (Expression[]) null);
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("dDAEbg");
      Step step0 = new Step((-363), processingInstructionTest0, (Expression[]) null);
      CoreOperationLessThan coreOperationLessThan0 = new CoreOperationLessThan(coreFunction0, coreFunction0);
      EvalContext evalContext0 = null;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      CoreFunction coreFunction1 = new CoreFunction(26, (Expression[]) null);
      EvalContext evalContext1 = null;
      // Undeclared exception!
//      try { 
        coreFunction0.getArg2();
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test265()  throws Throwable  {
      String string0 = "";
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      CoreFunction coreFunction0 = new CoreFunction(20, (Expression[]) null);
      coreFunction0.getFunctionName();
      EvalContext evalContext0 = null;
      InitialContext initialContext0 = null;
//      try {
        initialContext0 = new InitialContext((EvalContext) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.jxpath.ri.axes.InitialContext", e);
//      }
  }

  @Test(timeout = 4000)
  public void test266()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[7];
      CoreOperationAnd coreOperationAnd0 = new CoreOperationAnd(expressionArray0);
      expressionArray0[0] = (Expression) coreOperationAnd0;
      QName qName0 = new QName("string-length");
      VariableReference variableReference0 = new VariableReference(qName0);
      expressionArray0[1] = (Expression) variableReference0;
      Step[] stepArray0 = new Step[5];
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("string-length");
      Step step0 = new Step(13, processingInstructionTest0, expressionArray0);
      stepArray0[0] = step0;
      Expression[] expressionArray1 = new Expression[4];
      expressionArray1[0] = (Expression) variableReference0;
      expressionArray1[1] = (Expression) coreOperationAnd0;
      expressionArray1[2] = (Expression) variableReference0;
      expressionArray1[3] = (Expression) coreOperationAnd0;
      Step step1 = new Step(95, processingInstructionTest0, expressionArray1);
      stepArray0[1] = step1;
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
      Step step2 = new Step((-595), nodeNameTest0, expressionArray1);
      stepArray0[2] = step2;
      Step step3 = new Step(36, processingInstructionTest0, expressionArray0);
      stepArray0[3] = step3;
      Step step4 = new Step(36, processingInstructionTest0, expressionArray0);
      stepArray0[4] = step4;
      LocationPath locationPath0 = new LocationPath(true, stepArray0);
      expressionArray0[2] = (Expression) locationPath0;
      CoreOperationOr coreOperationOr0 = new CoreOperationOr(expressionArray0);
      expressionArray0[3] = (Expression) coreOperationOr0;
      CoreOperationUnion coreOperationUnion0 = new CoreOperationUnion(expressionArray1);
      expressionArray0[4] = (Expression) coreOperationUnion0;
      LocationPath locationPath1 = new LocationPath(true, stepArray0);
      expressionArray0[5] = (Expression) locationPath1;
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd(expressionArray1);
      expressionArray0[6] = (Expression) coreOperationAdd0;
      CoreFunction coreFunction0 = new CoreFunction(9, expressionArray0);
      PredicateContext predicateContext0 = new PredicateContext((EvalContext) null, expressionArray0[4]);
      // Undeclared exception!
      coreFunction0.functionTrue(predicateContext0);
  }

  @Test(timeout = 4000)
  public void test267()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      CoreFunction coreFunction0 = new CoreFunction(0, expressionArray0);
      coreFunction0.getArgumentCount();
      // Undeclared exception!
//      try { 
        coreFunction0.getArg1();
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 0
//         //
//         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test268()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(0, expressionArray0);
      EvalContext evalContext0 = null;
      // Undeclared exception!
//      try { 
        coreFunction0.functionNormalizeSpace((EvalContext) null);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // Incorrect number of arguments: unknownFunction0()()
//         //
//         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test269()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[3];
      CoreOperationLessThan coreOperationLessThan0 = new CoreOperationLessThan(expressionArray0[0], expressionArray0[0]);
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd(expressionArray0);
      CoreFunction coreFunction0 = new CoreFunction(3, expressionArray0);
      CoreOperationDivide coreOperationDivide0 = new CoreOperationDivide(coreOperationAdd0, coreFunction0);
      Integer integer0 = new Integer(3);
      Constant constant0 = new Constant(integer0);
      CoreFunction coreFunction1 = new CoreFunction((-151), expressionArray0);
      EvalContext evalContext0 = null;
      NodeTest nodeTest0 = null;
      // Undeclared exception!
//      try { 
        coreFunction1.functionString((EvalContext) null);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // Incorrect number of arguments: unknownFunction-151()(null, null, null)
//         //
//         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test270()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[9];
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd(expressionArray0);
      expressionArray0[8] = (Expression) coreOperationAdd0;
      coreOperationAdd0.args = expressionArray0;
      QName qName0 = new QName("8", "8");
      CoreFunction coreFunction0 = new CoreFunction(48, coreOperationAdd0.args);
      EvalContext evalContext0 = null;
      // Undeclared exception!
//      try { 
        coreFunction0.functionStartsWith((EvalContext) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.evosuite.runtime.System", e);
//      }
  }

  @Test(timeout = 4000)
  public void test271()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(0, expressionArray0);
      EvalContext evalContext0 = null;
      // Undeclared exception!
//      try { 
        coreFunction0.functionString((EvalContext) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test272()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[3];
      CoreOperationLessThan coreOperationLessThan0 = new CoreOperationLessThan(expressionArray0[0], expressionArray0[0]);
      QName qName0 = new QName((String) null, (String) null);
      Step[] stepArray0 = new Step[0];
      ExpressionPath expressionPath0 = new ExpressionPath(coreOperationLessThan0, expressionArray0, stepArray0);
      EvalContext evalContext0 = null;
      CoreFunction coreFunction0 = new CoreFunction((-310), expressionArray0);
      // Undeclared exception!
//      try { 
        coreFunction0.computeContextDependent();
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test273()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[8];
      CoreOperationOr coreOperationOr0 = new CoreOperationOr(expressionArray0);
      CoreOperationGreaterThanOrEqual coreOperationGreaterThanOrEqual0 = new CoreOperationGreaterThanOrEqual(coreOperationOr0, coreOperationOr0);
      NameAttributeTest nameAttributeTest0 = new NameAttributeTest(coreOperationGreaterThanOrEqual0, coreOperationOr0);
      expressionArray0[0] = (Expression) nameAttributeTest0;
      CoreFunction coreFunction0 = new CoreFunction(6, expressionArray0);
      coreFunction0.getFunctionName();
      // Undeclared exception!
//      try { 
        coreFunction0.functionTrue((EvalContext) null);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // Incorrect number of arguments: namespace-uri(org.apache.commons.jxpath.ri.compiler.CoreOperationGreaterThanOrEqual@0000000002 = (org.apache.commons.jxpath.ri.compiler.CoreOperationOr@0000000001), null, null, null, null, null, null, null)
//         //
//         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test274()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(0, expressionArray0);
      Step[] stepArray0 = new Step[5];
      QName qName0 = new QName((String) null, (String) null);
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, "true");
      Step step0 = new Step(0, nodeNameTest0, expressionArray0);
      stepArray0[0] = step0;
      stepArray0[1] = step0;
      Step step1 = new Step(0, nodeNameTest0, expressionArray0);
      stepArray0[2] = step1;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      Step step2 = new Step((-310), nodeNameTest0, expressionArray0);
      stepArray0[3] = step2;
      Step step3 = new Step(58, nodeNameTest0, expressionArray0);
      stepArray0[4] = step3;
      ExpressionPath expressionPath0 = new ExpressionPath(coreFunction0, expressionArray0, stepArray0);
      PredicateContext predicateContext0 = new PredicateContext((EvalContext) null, coreFunction0);
      EvalContext[] evalContextArray0 = new EvalContext[1];
      evalContextArray0[0] = null;
      UnionContext unionContext0 = new UnionContext(predicateContext0, evalContextArray0);
      boolean boolean0 = true;
      NamespaceContext namespaceContext0 = new NamespaceContext(predicateContext0, nodeNameTest0);
      // Undeclared exception!
//      try { 
        coreFunction0.functionName(namespaceContext0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test275()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction((-4323), (Expression[]) null);
      Integer integer0 = new Integer((-4323));
      Constant constant0 = new Constant(integer0);
      CoreFunction coreFunction1 = new CoreFunction(1, (Expression[]) null);
      EvalContext evalContext0 = null;
      // Undeclared exception!
//      try { 
        coreFunction1.functionConcat((EvalContext) null);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // Incorrect number of arguments: last()
//         //
//         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test276()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction((-1710), expressionArray0);
      coreFunction0.computeContextDependent();
      EvalContext evalContext0 = null;
      int int0 = 13;
      CoreFunction coreFunction1 = new CoreFunction(13, expressionArray0);
      // Undeclared exception!
//      try { 
        coreFunction1.functionTranslate((EvalContext) null);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // Incorrect number of arguments: substring-after()
//         //
//         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test277()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[3];
      CoreOperationLessThan coreOperationLessThan0 = new CoreOperationLessThan(expressionArray0[0], expressionArray0[0]);
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd(expressionArray0);
      CoreFunction coreFunction0 = new CoreFunction(3, expressionArray0);
      CoreOperationDivide coreOperationDivide0 = new CoreOperationDivide(coreOperationAdd0, coreFunction0);
      Integer integer0 = new Integer(3);
      Constant constant0 = new Constant(integer0);
      CoreFunction coreFunction1 = new CoreFunction((-151), expressionArray0);
      EvalContext evalContext0 = null;
      // Undeclared exception!
//      try { 
        coreFunction1.functionSubstringAfter((EvalContext) null);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // Incorrect number of arguments: unknownFunction-151()(null, null, null)
//         //
//         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test278()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(0, expressionArray0);
      EvalContext evalContext0 = null;
      coreFunction0.functionFalse((EvalContext) null);
      Step step0 = new Step(6, (NodeTest) null, expressionArray0);
      Step step1 = new Step(6, (NodeTest) null, expressionArray0);
      Step step2 = new Step((-2844), (NodeTest) null, expressionArray0);
      ExpressionPath expressionPath0 = new ExpressionPath(coreFunction0, expressionArray0, (Step[]) null);
      EvalContext evalContext1 = null;
      AttributeContext attributeContext0 = new AttributeContext((EvalContext) null, (NodeTest) null);
      PredicateContext predicateContext0 = new PredicateContext(attributeContext0, coreFunction0);
      coreFunction0.functionString(predicateContext0);
      ChildContext childContext0 = new ChildContext(attributeContext0, (NodeTest) null, true, true);
      coreFunction0.functionNumber(childContext0);
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest((-2844));
      nodeTypeTest0.toString();
      coreFunction0.functionFalse(predicateContext0);
      // Undeclared exception!
//      try { 
        coreFunction0.functionCeiling(childContext0);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // Incorrect number of arguments: unknownFunction0()()
//         //
//         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test279()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(0, expressionArray0);
      Step[] stepArray0 = new Step[5];
      QName qName0 = new QName((String) null, (String) null);
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, "true");
      Step step0 = new Step(0, nodeNameTest0, expressionArray0);
      stepArray0[0] = step0;
      stepArray0[1] = step0;
      Step step1 = new Step(0, nodeNameTest0, expressionArray0);
      stepArray0[2] = step1;
      Step step2 = new Step((-310), nodeNameTest0, expressionArray0);
      stepArray0[3] = step2;
      Step step3 = new Step(58, nodeNameTest0, expressionArray0);
      stepArray0[4] = step3;
      CoreOperationNotEqual coreOperationNotEqual0 = new CoreOperationNotEqual(coreFunction0, coreFunction0);
      ExpressionPath expressionPath0 = new ExpressionPath(coreFunction0, expressionArray0, stepArray0);
      CoreOperationLessThan coreOperationLessThan0 = new CoreOperationLessThan(coreOperationNotEqual0, coreOperationNotEqual0);
      CoreOperationMod coreOperationMod0 = new CoreOperationMod(expressionPath0, expressionPath0);
      ExpressionPath expressionPath1 = new ExpressionPath(coreOperationNotEqual0, expressionArray0, stepArray0);
      CoreOperationMultiply coreOperationMultiply0 = new CoreOperationMultiply(coreOperationNotEqual0, coreOperationLessThan0);
      CoreFunction coreFunction1 = new CoreFunction(32, expressionArray0);
      AttributeContext attributeContext0 = new AttributeContext((EvalContext) null, nodeNameTest0);
      coreFunction1.functionNull(attributeContext0);
      assertEquals(32, coreFunction1.getFunctionCode());
  }

  @Test(timeout = 4000)
  public void test280()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      Double double0 = Expression.ZERO;
      Constant constant0 = new Constant(double0);
      expressionArray0[0] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction(0, expressionArray0);
      EvalContext evalContext0 = null;
      // Undeclared exception!
//      try { 
        coreFunction0.functionLang((EvalContext) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test281()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      CoreOperationOr coreOperationOr0 = new CoreOperationOr(expressionArray0);
      CoreOperationGreaterThanOrEqual coreOperationGreaterThanOrEqual0 = new CoreOperationGreaterThanOrEqual(coreOperationOr0, coreOperationOr0);
      NameAttributeTest nameAttributeTest0 = new NameAttributeTest(coreOperationGreaterThanOrEqual0, coreOperationOr0);
      expressionArray0[0] = (Expression) nameAttributeTest0;
      CoreFunction coreFunction0 = new CoreFunction(6, expressionArray0);
      String string0 = coreFunction0.getFunctionName();
      assertEquals("namespace-uri", string0);
  }

  @Test(timeout = 4000)
  public void test282()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(0, expressionArray0);
      coreFunction0.functionFalse((EvalContext) null);
      int int0 = (-10);
      Step step0 = new Step(6, (NodeTest) null, expressionArray0);
      Step step1 = new Step(6, (NodeTest) null, expressionArray0);
      Step step2 = new Step((-2844), (NodeTest) null, expressionArray0);
      ExpressionPath expressionPath0 = new ExpressionPath(coreFunction0, expressionArray0, (Step[]) null);
      AttributeContext attributeContext0 = new AttributeContext((EvalContext) null, (NodeTest) null);
      PredicateContext predicateContext0 = new PredicateContext(attributeContext0, coreFunction0);
      coreFunction0.functionString(predicateContext0);
      PrecedingOrFollowingContext precedingOrFollowingContext0 = new PrecedingOrFollowingContext((EvalContext) null, (NodeTest) null, false);
      CoreFunction coreFunction1 = new CoreFunction((-4259), expressionArray0);
      // Undeclared exception!
//      try { 
        coreFunction1.functionCount(precedingOrFollowingContext0);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // Incorrect number of arguments: unknownFunction-4259()()
//         //
//         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test283()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[5];
      Constant constant0 = new Constant("FGgj]x:)`~dS");
      CoreOperationNegate coreOperationNegate0 = new CoreOperationNegate(constant0);
      expressionArray0[0] = (Expression) coreOperationNegate0;
      Expression[] expressionArray1 = new Expression[6];
      expressionArray1[0] = (Expression) coreOperationNegate0;
      expressionArray1[1] = (Expression) coreOperationNegate0;
      QName qName0 = new QName("FGgj]x:)`~dS", "FGgj]x:)`~dS");
      VariableReference variableReference0 = new VariableReference(qName0);
      expressionArray1[2] = (Expression) variableReference0;
      expressionArray1[3] = null;
      expressionArray1[4] = (Expression) constant0;
      expressionArray1[5] = null;
      Step[] stepArray0 = new Step[6];
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
      Step step0 = new Step(2045, nodeNameTest0, expressionArray0);
      stepArray0[0] = step0;
      Step step1 = new Step(2045, nodeNameTest0, expressionArray1);
      CoreOperationLessThan coreOperationLessThan0 = new CoreOperationLessThan(expressionArray1[0], expressionArray1[2]);
      Byte byte0 = new Byte((byte)54);
      Constant constant1 = new Constant(byte0);
      constant0.toString();
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("g,mJI0fat}");
      AncestorContext ancestorContext0 = new AncestorContext((EvalContext) null, false, processingInstructionTest0);
      CoreFunction coreFunction0 = new CoreFunction(22, expressionArray0);
      boolean boolean0 = false;
      // Undeclared exception!
//      try { 
        coreFunction0.computeValue(ancestorContext0);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // Incorrect number of arguments: lang(-org.apache.commons.jxpath.ri.compiler.Constant@0000000001, null, null, null, null)
//         //
//         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test284()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      Expression[] expressionArray0 = null;
      CoreFunction coreFunction0 = new CoreFunction((-4323), (Expression[]) null);
      int int0 = 10;
      Step[] stepArray0 = new Step[2];
      ExpressionPath expressionPath0 = new ExpressionPath(coreFunction0, (Expression[]) null, stepArray0);
      // Undeclared exception!
//      try { 
        coreFunction0.getArg3();
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test285()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[6];
      Constant constant0 = new Constant("Y$oSh=cy-U.y");
      expressionArray0[0] = (Expression) constant0;
      Step[] stepArray0 = new Step[2];
      QName qName0 = new QName("@@*hZp;_qB-[", "bov4VcH~OHX(N");
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, "@@*hZp;_qB-[");
      Step step0 = new Step((-158), nodeNameTest0, expressionArray0);
      stepArray0[0] = step0;
      Step step1 = new Step((-158), nodeNameTest0, expressionArray0);
      stepArray0[1] = step1;
      LocationPath locationPath0 = new LocationPath(false, stepArray0);
      expressionArray0[1] = (Expression) locationPath0;
      CoreOperationMod coreOperationMod0 = new CoreOperationMod(expressionArray0[0], constant0);
      expressionArray0[2] = (Expression) coreOperationMod0;
      CoreOperationNotEqual coreOperationNotEqual0 = new CoreOperationNotEqual(expressionArray0[0], expressionArray0[0]);
      expressionArray0[3] = (Expression) coreOperationNotEqual0;
      ExpressionPath expressionPath0 = new ExpressionPath(locationPath0, expressionArray0, stepArray0);
      CoreOperationLessThan coreOperationLessThan0 = new CoreOperationLessThan(expressionPath0, expressionArray0[3]);
      CoreOperationMod coreOperationMod1 = new CoreOperationMod(expressionArray0[0], coreOperationLessThan0);
      expressionArray0[4] = (Expression) coreOperationMod1;
      ExpressionPath expressionPath1 = new ExpressionPath(expressionArray0[4], expressionArray0, stepArray0);
      CoreOperationMultiply coreOperationMultiply0 = new CoreOperationMultiply(expressionPath1, expressionPath0);
      expressionArray0[5] = (Expression) coreOperationMultiply0;
      CoreFunction coreFunction0 = new CoreFunction(297, expressionArray0);
      // Undeclared exception!
//      try { 
        coreFunction0.functionNull((EvalContext) null);
//        fail("Expecting exception: StackOverflowError");
      
//      } catch(StackOverflowError e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test286()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(0, expressionArray0);
      Step[] stepArray0 = new Step[5];
      QName qName0 = new QName((String) null, (String) null);
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, "true");
      Step step0 = new Step(0, nodeNameTest0, expressionArray0);
      stepArray0[0] = step0;
      stepArray0[1] = step0;
      Step step1 = new Step(0, nodeNameTest0, expressionArray0);
      stepArray0[2] = step1;
      Step step2 = new Step((-310), nodeNameTest0, expressionArray0);
      stepArray0[3] = step2;
      Step step3 = new Step(58, nodeNameTest0, expressionArray0);
      stepArray0[4] = step3;
      ExpressionPath expressionPath0 = new ExpressionPath(coreFunction0, expressionArray0, stepArray0);
      PredicateContext predicateContext0 = new PredicateContext((EvalContext) null, coreFunction0);
      EvalContext[] evalContextArray0 = new EvalContext[1];
      evalContextArray0[0] = null;
      UnionContext unionContext0 = new UnionContext(predicateContext0, evalContextArray0);
      DescendantContext descendantContext0 = new DescendantContext(unionContext0, true, nodeNameTest0);
      expressionPath0.evalSteps(descendantContext0);
      // Undeclared exception!
//      try { 
        coreFunction0.functionSum(unionContext0);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // Incorrect number of arguments: unknownFunction0()()
//         //
//         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test287()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[4];
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd(expressionArray0);
      expressionArray0[0] = (Expression) coreOperationAdd0;
      CoreOperationSubtract coreOperationSubtract0 = new CoreOperationSubtract(expressionArray0[0], expressionArray0[0]);
      expressionArray0[1] = (Expression) coreOperationSubtract0;
      CoreOperationLessThan coreOperationLessThan0 = new CoreOperationLessThan(expressionArray0[1], expressionArray0[1]);
      expressionArray0[2] = (Expression) coreOperationLessThan0;
      CoreOperationLessThan coreOperationLessThan1 = new CoreOperationLessThan(coreOperationAdd0, expressionArray0[2]);
      CoreOperationGreaterThan coreOperationGreaterThan0 = new CoreOperationGreaterThan(coreOperationLessThan1, expressionArray0[2]);
      expressionArray0[3] = (Expression) coreOperationGreaterThan0;
      CoreFunction coreFunction0 = new CoreFunction(3161, expressionArray0);
      PredicateContext predicateContext0 = new PredicateContext((EvalContext) null, coreOperationLessThan1);
      JXPathContext jXPathContext0 = JXPathContext.newContext((Object) predicateContext0);
      EvalContext[] evalContextArray0 = new EvalContext[1];
      evalContextArray0[0] = null;
      UnionContext unionContext0 = new UnionContext(predicateContext0, evalContextArray0);
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = new JXPathContextReferenceImpl(jXPathContext0, unionContext0, (Pointer) null);
      QName qName0 = new QName("http://www.w3.org/XML/1998/namespace", "http://www.w3.org/XML/1998/namespace");
      EvalContext evalContext0 = null;
      // Undeclared exception!
//      try { 
        coreFunction0.functionName(evalContextArray0[0]);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // Incorrect number of arguments: unknownFunction3161()(org.apache.commons.jxpath.ri.compiler.CoreOperationAdd@0000000001 + org.apache.commons.jxpath.ri.compiler.CoreOperationSubtract@0000000002 + (org.apache.commons.jxpath.ri.compiler.CoreOperationLessThan@0000000003) + (org.apache.commons.jxpath.ri.compiler.CoreOperationGreaterThan@0000000005), org.apache.commons.jxpath.ri.compiler.CoreOperationAdd@0000000001 - (org.apache.commons.jxpath.ri.compiler.CoreOperationAdd@0000000001), org.apache.commons.jxpath.ri.compiler.CoreOperationSubtract@0000000002 < org.apache.commons.jxpath.ri.compiler.CoreOperationSubtract@0000000002, org.apache.commons.jxpath.ri.compiler.CoreOperationLessThan@0000000004 > (org.apache.commons.jxpath.ri.compiler.CoreOperationLessThan@0000000003))
//         //
//         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test288()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[7];
      CoreFunction coreFunction0 = new CoreFunction(3, expressionArray0);
      coreFunction0.getArg3();
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual((Expression) null, coreFunction0);
      expressionArray0[0] = (Expression) coreOperationLessThanOrEqual0;
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual1 = new CoreOperationLessThanOrEqual(coreFunction0, expressionArray0[0]);
      expressionArray0[1] = (Expression) coreOperationLessThanOrEqual1;
      CoreOperationUnion coreOperationUnion0 = new CoreOperationUnion(expressionArray0);
      expressionArray0[2] = (Expression) coreOperationUnion0;
      CoreOperationLessThan coreOperationLessThan0 = new CoreOperationLessThan(coreFunction0, expressionArray0[0]);
      expressionArray0[3] = (Expression) coreOperationLessThan0;
      Expression expression0 = coreFunction0.getArg3();
      expressionArray0[4] = expression0;
      Expression expression1 = coreFunction0.getArg3();
      expressionArray0[5] = expression1;
      CoreOperationDivide coreOperationDivide0 = new CoreOperationDivide(expressionArray0[3], expressionArray0[5]);
      expressionArray0[6] = (Expression) coreOperationDivide0;
      ExtensionFunction extensionFunction0 = new ExtensionFunction((QName) null, expressionArray0);
      CoreOperationMultiply coreOperationMultiply0 = new CoreOperationMultiply(expressionArray0[6], coreOperationDivide0);
      CoreOperationLessThan coreOperationLessThan1 = new CoreOperationLessThan(expression1, expressionArray0[0]);
      Byte byte0 = new Byte((byte)28);
      Constant constant0 = new Constant(byte0);
      CoreFunction coreFunction1 = new CoreFunction(16000, expressionArray0);
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("*@5lM7g7u*jX+Q");
      AncestorContext ancestorContext0 = new AncestorContext((EvalContext) null, true, processingInstructionTest0);
      // Undeclared exception!
//      try { 
        coreFunction1.functionNot((EvalContext) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.evosuite.runtime.System", e);
//      }
  }

  @Test(timeout = 4000)
  public void test289()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[3];
      CoreFunction coreFunction0 = new CoreFunction(992, expressionArray0);
      coreFunction0.getArg1();
      CoreOperationSubtract coreOperationSubtract0 = new CoreOperationSubtract((Expression) null, coreFunction0);
      expressionArray0[0] = (Expression) coreOperationSubtract0;
      CoreOperationMod coreOperationMod0 = new CoreOperationMod(expressionArray0[0], expressionArray0[0]);
      expressionArray0[1] = (Expression) coreOperationMod0;
      Step[] stepArray0 = new Step[0];
      LocationPath locationPath0 = new LocationPath(true, stepArray0);
      expressionArray0[2] = (Expression) locationPath0;
      ExtensionFunction extensionFunction0 = new ExtensionFunction((QName) null, expressionArray0);
      CoreOperationUnion coreOperationUnion0 = new CoreOperationUnion(expressionArray0);
      CoreOperationMultiply coreOperationMultiply0 = new CoreOperationMultiply(locationPath0, coreOperationUnion0);
      CoreOperationLessThan coreOperationLessThan0 = new CoreOperationLessThan(coreOperationSubtract0, coreFunction0);
      Byte byte0 = new Byte((byte)47);
      Constant constant0 = new Constant(byte0);
      CoreFunction coreFunction1 = new CoreFunction(992, expressionArray0);
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("SAz,Uaa)q_rH");
      AncestorContext ancestorContext0 = new AncestorContext((EvalContext) null, true, processingInstructionTest0);
      // Undeclared exception!
//      try { 
        coreFunction1.functionKey((EvalContext) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.evosuite.runtime.System", e);
//      }
  }

  @Test(timeout = 4000)
  public void test290()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[5];
      Constant constant0 = new Constant("FGgj]x:)`~dS");
      CoreOperationNegate coreOperationNegate0 = new CoreOperationNegate(constant0);
      expressionArray0[0] = (Expression) coreOperationNegate0;
      Expression[] expressionArray1 = new Expression[6];
      expressionArray1[0] = (Expression) coreOperationNegate0;
      expressionArray1[1] = (Expression) coreOperationNegate0;
      QName qName0 = new QName("FGgj]x:)`~dS", "FGgj]x:)`~dS");
      VariableReference variableReference0 = new VariableReference(qName0);
      expressionArray1[2] = (Expression) variableReference0;
      expressionArray1[3] = null;
      expressionArray1[4] = (Expression) constant0;
      expressionArray1[5] = null;
      Step[] stepArray0 = new Step[6];
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
      Step step0 = new Step(2045, nodeNameTest0, expressionArray0);
      stepArray0[0] = step0;
      Step step1 = new Step(2045, nodeNameTest0, expressionArray1);
      CoreOperationLessThan coreOperationLessThan0 = new CoreOperationLessThan(expressionArray1[0], expressionArray1[2]);
      Byte byte0 = new Byte((byte)54);
      Constant constant1 = new Constant(byte0);
      constant0.toString();
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("g,mJI0fat}");
      AncestorContext ancestorContext0 = new AncestorContext((EvalContext) null, false, processingInstructionTest0);
      CoreFunction coreFunction0 = new CoreFunction(22, expressionArray0);
      DescendantContext descendantContext0 = new DescendantContext(ancestorContext0, false, nodeNameTest0);
      // Undeclared exception!
//      try { 
        coreFunction0.functionNamespaceURI(descendantContext0);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // Incorrect number of arguments: lang(-org.apache.commons.jxpath.ri.compiler.Constant@0000000001, null, null, null, null)
//         //
//         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test291()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[3];
      ExtensionFunction extensionFunction0 = new ExtensionFunction((QName) null, expressionArray0);
      CoreOperationMultiply coreOperationMultiply0 = new CoreOperationMultiply(extensionFunction0, extensionFunction0);
      expressionArray0[0] = (Expression) coreOperationMultiply0;
      CoreOperationLessThan coreOperationLessThan0 = new CoreOperationLessThan(expressionArray0[0], expressionArray0[0]);
      expressionArray0[1] = (Expression) coreOperationLessThan0;
      Byte byte0 = new Byte((byte)47);
      Constant constant0 = new Constant(byte0);
      expressionArray0[2] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction((-5), expressionArray0);
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("@");
      AncestorContext ancestorContext0 = new AncestorContext((EvalContext) null, false, processingInstructionTest0);
      CoreFunction coreFunction1 = new CoreFunction((byte)47, expressionArray0);
      // Undeclared exception!
//      try { 
        coreFunction1.functionLast((EvalContext) null);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // Incorrect number of arguments: unknownFunction47()(org.apache.commons.jxpath.ri.compiler.ExtensionFunction@0000000001 * org.apache.commons.jxpath.ri.compiler.ExtensionFunction@0000000001, org.apache.commons.jxpath.ri.compiler.CoreOperationMultiply@0000000002 < org.apache.commons.jxpath.ri.compiler.CoreOperationMultiply@0000000002, 47)
//         //
//         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test292()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[4];
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd(expressionArray0);
      expressionArray0[0] = (Expression) coreOperationAdd0;
      CoreOperationSubtract coreOperationSubtract0 = new CoreOperationSubtract(expressionArray0[0], expressionArray0[0]);
      expressionArray0[1] = (Expression) coreOperationSubtract0;
      CoreOperationLessThan coreOperationLessThan0 = new CoreOperationLessThan(expressionArray0[1], expressionArray0[1]);
      expressionArray0[2] = (Expression) coreOperationLessThan0;
      CoreOperationLessThan coreOperationLessThan1 = new CoreOperationLessThan(coreOperationAdd0, expressionArray0[2]);
      CoreOperationGreaterThan coreOperationGreaterThan0 = new CoreOperationGreaterThan(coreOperationLessThan1, expressionArray0[2]);
      expressionArray0[3] = (Expression) coreOperationGreaterThan0;
      CoreFunction coreFunction0 = new CoreFunction(3161, expressionArray0);
      PredicateContext predicateContext0 = new PredicateContext((EvalContext) null, coreOperationLessThan1);
      JXPathContext jXPathContext0 = JXPathContext.newContext((Object) predicateContext0);
      EvalContext[] evalContextArray0 = new EvalContext[1];
      evalContextArray0[0] = null;
      UnionContext unionContext0 = new UnionContext(predicateContext0, evalContextArray0);
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = new JXPathContextReferenceImpl(jXPathContext0, unionContext0, (Pointer) null);
      String string0 = "http://www.w3.org/XML/1998/namespace";
      QName qName0 = new QName("http://www.w3.org/XML/1998/namespace", "http://www.w3.org/XML/1998/namespace");
      // Undeclared exception!
//      try { 
        coreFunction0.functionContains(evalContextArray0[0]);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // Incorrect number of arguments: unknownFunction3161()(org.apache.commons.jxpath.ri.compiler.CoreOperationAdd@0000000001 + org.apache.commons.jxpath.ri.compiler.CoreOperationSubtract@0000000002 + (org.apache.commons.jxpath.ri.compiler.CoreOperationLessThan@0000000003) + (org.apache.commons.jxpath.ri.compiler.CoreOperationGreaterThan@0000000005), org.apache.commons.jxpath.ri.compiler.CoreOperationAdd@0000000001 - (org.apache.commons.jxpath.ri.compiler.CoreOperationAdd@0000000001), org.apache.commons.jxpath.ri.compiler.CoreOperationSubtract@0000000002 < org.apache.commons.jxpath.ri.compiler.CoreOperationSubtract@0000000002, org.apache.commons.jxpath.ri.compiler.CoreOperationLessThan@0000000004 > (org.apache.commons.jxpath.ri.compiler.CoreOperationLessThan@0000000003))
//         //
//         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test293()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[6];
      CoreOperationOr coreOperationOr0 = new CoreOperationOr(expressionArray0);
      CoreOperationNegate coreOperationNegate0 = new CoreOperationNegate(coreOperationOr0);
      expressionArray0[0] = (Expression) coreOperationNegate0;
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd(expressionArray0);
      expressionArray0[3] = (Expression) coreOperationAdd0;
      CoreOperationDivide coreOperationDivide0 = new CoreOperationDivide(expressionArray0[3], expressionArray0[3]);
      expressionArray0[4] = (Expression) coreOperationDivide0;
      CoreFunction coreFunction0 = new CoreFunction(352, expressionArray0);
      // Undeclared exception!
//      try { 
        coreFunction0.toString();
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.evosuite.runtime.System", e);
//      }
  }

  @Test(timeout = 4000)
  public void test294()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(0, expressionArray0);
      Step[] stepArray0 = new Step[5];
      QName qName0 = new QName((String) null, (String) null);
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, "true");
      Step step0 = new Step(0, nodeNameTest0, expressionArray0);
      stepArray0[0] = step0;
      Step step1 = new Step(0, nodeNameTest0, expressionArray0);
      stepArray0[1] = step1;
      Step step2 = new Step(0, nodeNameTest0, expressionArray0);
      stepArray0[2] = step2;
      Step step3 = new Step(0, (NodeTest) null, expressionArray0);
      ExpressionPath expressionPath0 = new ExpressionPath(coreFunction0, expressionArray0, stepArray0);
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd(expressionArray0);
      Float float0 = new Float(1.0F);
      Constant constant0 = new Constant(float0);
      ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, expressionArray0);
      CoreOperationNotEqual coreOperationNotEqual0 = new CoreOperationNotEqual((Expression) null, constant0);
      Constant constant1 = new Constant("y(]Tr?IH.jd");
      CoreFunction coreFunction1 = new CoreFunction(29, expressionArray0);
      SelfContext selfContext0 = new SelfContext((EvalContext) null, (NodeTest) null);
      // Undeclared exception!
//      try { 
        coreFunction0.functionNamespaceURI((EvalContext) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test295()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[3];
      CoreOperationLessThan coreOperationLessThan0 = new CoreOperationLessThan(expressionArray0[0], expressionArray0[0]);
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd(expressionArray0);
      CoreFunction coreFunction0 = new CoreFunction(3, expressionArray0);
      CoreOperationDivide coreOperationDivide0 = new CoreOperationDivide(coreOperationAdd0, coreFunction0);
      Integer integer0 = new Integer(3);
      Constant constant0 = new Constant(integer0);
      CoreFunction coreFunction1 = new CoreFunction((-151), expressionArray0);
      EvalContext evalContext0 = null;
      // Undeclared exception!
//      try { 
        coreFunction1.functionConcat((EvalContext) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test296()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(0, expressionArray0);
      Step[] stepArray0 = new Step[9];
      ExpressionPath expressionPath0 = new ExpressionPath(coreFunction0, expressionArray0, stepArray0);
      EvalContext evalContext0 = null;
      // Undeclared exception!
//      try { 
        coreFunction0.functionLocalName((EvalContext) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test297()  throws Throwable  {
      Expression[] expressionArray0 = null;
      CoreFunction coreFunction0 = new CoreFunction((-4323), (Expression[]) null);
      int int0 = (-363);
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("dDAEbg");
      Step step0 = new Step((-363), processingInstructionTest0, (Expression[]) null);
      Step step1 = new Step(10, processingInstructionTest0, (Expression[]) null);
      Step step2 = new Step((-4323), processingInstructionTest0, (Expression[]) null);
      Step step3 = new Step(0, processingInstructionTest0, (Expression[]) null);
      Step[] stepArray0 = new Step[2];
      stepArray0[0] = step0;
      stepArray0[1] = step3;
      ExpressionPath expressionPath0 = new ExpressionPath(coreFunction0, (Expression[]) null, stepArray0);
      EvalContext evalContext0 = null;
      PredicateContext predicateContext0 = new PredicateContext((EvalContext) null, coreFunction0);
      // Undeclared exception!
//      try { 
        coreFunction0.functionConcat((EvalContext) null);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // Incorrect number of arguments: unknownFunction-4323()()
//         //
//         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test298()  throws Throwable  {
      Expression[] expressionArray0 = null;
      CoreFunction coreFunction0 = new CoreFunction((-4323), (Expression[]) null);
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("dDAEbg");
      Step step0 = new Step((-363), processingInstructionTest0, (Expression[]) null);
      int int0 = 10;
      Step step1 = new Step(10, processingInstructionTest0, (Expression[]) null);
      Step step2 = new Step((-4323), processingInstructionTest0, (Expression[]) null);
      Step step3 = new Step(0, processingInstructionTest0, (Expression[]) null);
      Step[] stepArray0 = new Step[2];
      stepArray0[0] = step0;
      stepArray0[1] = step3;
      ExpressionPath expressionPath0 = new ExpressionPath(coreFunction0, (Expression[]) null, stepArray0);
      EvalContext evalContext0 = null;
      PredicateContext predicateContext0 = new PredicateContext((EvalContext) null, coreFunction0);
      // Undeclared exception!
//      try { 
        coreFunction0.functionNumber(predicateContext0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.jxpath.ri.axes.PredicateContext", e);
//      }
  }

  @Test(timeout = 4000)
  public void test299()  throws Throwable  {
      Expression[] expressionArray0 = null;
      CoreFunction coreFunction0 = new CoreFunction((-4323), (Expression[]) null);
      int int0 = (-363);
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("dDAEbg");
      Step step0 = new Step((-363), processingInstructionTest0, (Expression[]) null);
      Step step1 = new Step(10, processingInstructionTest0, (Expression[]) null);
      Step step2 = new Step((-4323), processingInstructionTest0, (Expression[]) null);
      Step step3 = new Step(0, processingInstructionTest0, (Expression[]) null);
      Step[] stepArray0 = new Step[2];
      stepArray0[0] = step0;
      stepArray0[1] = step3;
      ExpressionPath expressionPath0 = new ExpressionPath(coreFunction0, (Expression[]) null, stepArray0);
      PredicateContext predicateContext0 = new PredicateContext((EvalContext) null, coreFunction0);
      EvalContext[] evalContextArray0 = new EvalContext[4];
      evalContextArray0[0] = (EvalContext) predicateContext0;
      evalContextArray0[1] = (EvalContext) predicateContext0;
      evalContextArray0[2] = null;
      evalContextArray0[3] = null;
      UnionContext unionContext0 = new UnionContext(predicateContext0, evalContextArray0);
      DescendantContext descendantContext0 = new DescendantContext(evalContextArray0[0], true, processingInstructionTest0);
      expressionPath0.evalSteps(evalContextArray0[1]);
      int int1 = 1540;
      CoreFunction coreFunction1 = new CoreFunction(1540, (Expression[]) null);
      // Undeclared exception!
//      try { 
        coreFunction1.functionLast((EvalContext) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test300()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(0, expressionArray0);
      Step[] stepArray0 = new Step[9];
      QName qName0 = new QName((String) null, (String) null);
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, "true");
      Step step0 = new Step(0, nodeNameTest0, expressionArray0);
      stepArray0[0] = step0;
      Step step1 = new Step(0, nodeNameTest0, expressionArray0);
      stepArray0[1] = step1;
      Step step2 = new Step(0, nodeNameTest0, expressionArray0);
      stepArray0[2] = step2;
      Step step3 = new Step((-310), nodeNameTest0, expressionArray0);
      stepArray0[3] = step3;
      Step step4 = new Step(58, nodeNameTest0, expressionArray0);
      stepArray0[4] = step4;
      ExpressionPath expressionPath0 = new ExpressionPath(coreFunction0, expressionArray0, stepArray0);
      EvalContext evalContext0 = null;
      expressionPath0.createContextForStep((EvalContext) null, (-285), nodeNameTest0);
      // Undeclared exception!
//      try { 
        coreFunction0.functionPosition((EvalContext) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test301()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction((-4323), (Expression[]) null);
      RootContext rootContext0 = new RootContext((JXPathContextReferenceImpl) null, (NodePointer) null);
      EvalContext[] evalContextArray0 = new EvalContext[2];
      evalContextArray0[0] = (EvalContext) rootContext0;
      evalContextArray0[1] = (EvalContext) rootContext0;
      coreFunction0.getArgumentCount();
      coreFunction0.functionFalse(rootContext0);
      coreFunction0.functionTrue(evalContextArray0[1]);
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd((Expression[]) null);
      // Undeclared exception!
//      try { 
        coreOperationAdd0.toString();
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test302()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(0, expressionArray0);
      Step[] stepArray0 = new Step[5];
      QName qName0 = new QName((String) null, (String) null);
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, "true");
      Step step0 = new Step(0, nodeNameTest0, expressionArray0);
      stepArray0[0] = step0;
      Step step1 = new Step(0, nodeNameTest0, expressionArray0);
      stepArray0[1] = step1;
      Step step2 = new Step(0, nodeNameTest0, expressionArray0);
      stepArray0[2] = step2;
      int int0 = (-310);
      Step step3 = new Step((-310), nodeNameTest0, expressionArray0);
      stepArray0[3] = step3;
      Step step4 = new Step(58, nodeNameTest0, expressionArray0);
      stepArray0[4] = step4;
      ExpressionPath expressionPath0 = new ExpressionPath(coreFunction0, expressionArray0, stepArray0);
      PredicateContext predicateContext0 = new PredicateContext((EvalContext) null, coreFunction0);
      EvalContext[] evalContextArray0 = new EvalContext[16];
      evalContextArray0[0] = null;
      UnionContext unionContext0 = new UnionContext(predicateContext0, evalContextArray0);
      DescendantContext descendantContext0 = new DescendantContext(predicateContext0, true, nodeNameTest0);
      // Undeclared exception!
//      try { 
        coreFunction0.functionID((EvalContext) null);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // Incorrect number of arguments: unknownFunction0()()
//         //
//         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test303()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[3];
      QName qName0 = null;
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)44;
      byteArray0[1] = (byte) (-1);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      ExtensionFunction extensionFunction0 = new ExtensionFunction((QName) null, expressionArray0);
      EvalContext evalContext0 = null;
      NodeTest nodeTest0 = null;
      boolean boolean0 = true;
      AncestorContext ancestorContext0 = new AncestorContext((EvalContext) null, true, (NodeTest) null);
      CoreFunction coreFunction0 = new CoreFunction(16, expressionArray0);
      // Undeclared exception!
//      try { 
        coreFunction0.functionTranslate(ancestorContext0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test304()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction((-1710), expressionArray0);
      coreFunction0.compute((EvalContext) null);
      coreFunction0.getArgumentCount();
      EvalContext evalContext0 = null;
      // Undeclared exception!
//      try { 
        coreFunction0.functionStartsWith((EvalContext) null);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // Incorrect number of arguments: unknownFunction-1710()()
//         //
//         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test305()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(41, expressionArray0);
      EvalContext evalContext0 = null;
      FileSystemHandling.shouldAllThrowIOExceptions();
      coreFunction0.iteratePointers((EvalContext) null);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      // Undeclared exception!
//      try { 
        coreFunction0.functionStartsWith((EvalContext) null);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // Incorrect number of arguments: unknownFunction41()()
//         //
//         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test306()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction((-4323), (Expression[]) null);
      CoreOperationMod coreOperationMod0 = new CoreOperationMod(coreFunction0, coreFunction0);
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd((Expression[]) null);
      CoreOperationDivide coreOperationDivide0 = new CoreOperationDivide(coreOperationAdd0, coreOperationAdd0);
      Integer integer0 = new Integer((-4323));
      Constant constant0 = new Constant(integer0);
      CoreFunction coreFunction1 = new CoreFunction((-4323), (Expression[]) null);
      String string0 = coreFunction1.toString();
      assertEquals("unknownFunction-4323()()", string0);
  }

  @Test(timeout = 4000)
  public void test307()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[7];
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd(expressionArray0);
      expressionArray0[0] = (Expression) coreOperationAdd0;
      NameAttributeTest nameAttributeTest0 = new NameAttributeTest(expressionArray0[0], coreOperationAdd0);
      CoreFunction coreFunction0 = new CoreFunction(0, expressionArray0);
      coreFunction0.getArgumentCount();
      EvalContext[] evalContextArray0 = new EvalContext[2];
      // Undeclared exception!
//      try { 
        coreFunction0.computeContextDependent();
//        fail("Expecting exception: StackOverflowError");
      
//      } catch(StackOverflowError e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test308()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[7];
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd(expressionArray0);
      expressionArray0[0] = (Expression) coreOperationAdd0;
      QName qName0 = new QName("z*)9CtCy/G");
      ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, expressionArray0);
      CoreOperationMultiply coreOperationMultiply0 = new CoreOperationMultiply(extensionFunction0, extensionFunction0);
      CoreOperationLessThan coreOperationLessThan0 = new CoreOperationLessThan(coreOperationAdd0, coreOperationMultiply0);
      Byte byte0 = new Byte((byte)104);
      Constant constant0 = new Constant(byte0);
      Expression[] expressionArray1 = new Expression[7];
      expressionArray1[0] = (Expression) extensionFunction0;
      expressionArray1[1] = (Expression) coreOperationLessThan0;
      expressionArray1[2] = (Expression) coreOperationAdd0;
      CoreOperationOr coreOperationOr0 = new CoreOperationOr(expressionArray0);
      expressionArray1[3] = (Expression) coreOperationOr0;
      expressionArray1[4] = (Expression) constant0;
      expressionArray1[5] = (Expression) constant0;
      expressionArray1[6] = (Expression) coreOperationMultiply0;
      CoreFunction coreFunction0 = new CoreFunction(5, expressionArray1);
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("So<%<-]EV|C$");
      AncestorContext ancestorContext0 = new AncestorContext((EvalContext) null, false, (NodeTest) null);
      CoreFunction coreFunction1 = new CoreFunction(41, expressionArray0);
      EvalContext[] evalContextArray0 = new EvalContext[3];
      evalContextArray0[0] = null;
      evalContextArray0[1] = null;
      evalContextArray0[2] = (EvalContext) ancestorContext0;
      UnionContext unionContext0 = new UnionContext((EvalContext) null, evalContextArray0);
      AttributeContext attributeContext0 = new AttributeContext(unionContext0, processingInstructionTest0);
      // Undeclared exception!
//      try { 
        coreFunction1.functionKey(attributeContext0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.evosuite.runtime.System", e);
//      }
  }

  @Test(timeout = 4000)
  public void test309()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction((-1710), expressionArray0);
      coreFunction0.computeContextDependent();
      EvalContext evalContext0 = null;
      coreFunction0.compute((EvalContext) null);
      coreFunction0.getArgumentCount();
      EvalContext evalContext1 = null;
      NodeTest nodeTest0 = null;
      AncestorContext ancestorContext0 = new AncestorContext((EvalContext) null, false, (NodeTest) null);
      // Undeclared exception!
//      try { 
        coreFunction0.functionTranslate(ancestorContext0);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // Incorrect number of arguments: unknownFunction-1710()()
//         //
//         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test310()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(0, expressionArray0);
      Step[] stepArray0 = new Step[5];
      QName qName0 = new QName((String) null, (String) null);
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, "true");
      Step step0 = new Step(0, nodeNameTest0, expressionArray0);
      stepArray0[0] = step0;
      Step step1 = new Step(0, nodeNameTest0, expressionArray0);
      RootContext rootContext0 = new RootContext((JXPathContextReferenceImpl) null, (NodePointer) null);
      UnionContext unionContext0 = new UnionContext(rootContext0, (EvalContext[]) null);
      // Undeclared exception!
//      try { 
        coreFunction0.functionName(unionContext0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.jxpath.ri.axes.UnionContext", e);
//      }
  }

  @Test(timeout = 4000)
  public void test311()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[3];
      ExtensionFunction extensionFunction0 = new ExtensionFunction((QName) null, expressionArray0);
      CoreOperationMultiply coreOperationMultiply0 = new CoreOperationMultiply(extensionFunction0, extensionFunction0);
      expressionArray0[0] = (Expression) coreOperationMultiply0;
      CoreOperationLessThan coreOperationLessThan0 = new CoreOperationLessThan(expressionArray0[0], expressionArray0[0]);
      expressionArray0[1] = (Expression) coreOperationLessThan0;
      Byte byte0 = new Byte((byte)47);
      Constant constant0 = new Constant(byte0);
      expressionArray0[2] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction((-16), expressionArray0);
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("");
      AncestorContext ancestorContext0 = new AncestorContext((EvalContext) null, false, processingInstructionTest0);
      // Undeclared exception!
//      try { 
        coreFunction0.functionNot((EvalContext) null);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // Incorrect number of arguments: unknownFunction-16()(org.apache.commons.jxpath.ri.compiler.ExtensionFunction@0000000001 * org.apache.commons.jxpath.ri.compiler.ExtensionFunction@0000000001, org.apache.commons.jxpath.ri.compiler.CoreOperationMultiply@0000000002 < org.apache.commons.jxpath.ri.compiler.CoreOperationMultiply@0000000002, 47)
//         //
//         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test312()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction((-1710), expressionArray0);
      EvalContext evalContext0 = null;
      coreFunction0.compute((EvalContext) null);
      coreFunction0.getArgumentCount();
      EvalContext evalContext1 = null;
      // Undeclared exception!
//      try { 
        coreFunction0.functionCeiling((EvalContext) null);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // Incorrect number of arguments: unknownFunction-1710()()
//         //
//         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test313()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[6];
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd(expressionArray0);
      expressionArray0[0] = (Expression) coreOperationAdd0;
      coreOperationAdd0.args = expressionArray0;
      QName qName0 = new QName("");
      ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, expressionArray0);
      expressionArray0[1] = (Expression) extensionFunction0;
      CoreOperationDivide coreOperationDivide0 = new CoreOperationDivide(extensionFunction0, extensionFunction0);
      expressionArray0[2] = (Expression) coreOperationDivide0;
      Constant constant0 = new Constant("");
      expressionArray0[3] = (Expression) constant0;
      CoreOperationGreaterThan coreOperationGreaterThan0 = new CoreOperationGreaterThan(extensionFunction0, expressionArray0[1]);
      expressionArray0[4] = (Expression) coreOperationGreaterThan0;
      CoreOperationOr coreOperationOr0 = new CoreOperationOr(expressionArray0);
      CoreOperationDivide coreOperationDivide1 = new CoreOperationDivide(expressionArray0[0], coreOperationOr0);
      expressionArray0[5] = (Expression) coreOperationDivide1;
      CoreFunction coreFunction0 = new CoreFunction(41, expressionArray0);
      coreFunction0.getFunctionName();
      coreOperationDivide1.args = expressionArray0;
      coreFunction0.getFunctionName();
      coreOperationDivide0.args = expressionArray0;
      EvalContext evalContext0 = null;
      // Undeclared exception!
      coreFunction0.functionName((EvalContext) null);
  }

  @Test(timeout = 4000)
  public void test314()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(0, expressionArray0);
      Step[] stepArray0 = new Step[5];
      QName qName0 = new QName((String) null, (String) null);
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, "true");
      Step step0 = new Step(0, nodeNameTest0, expressionArray0);
      stepArray0[0] = step0;
      Step step1 = new Step(0, nodeNameTest0, expressionArray0);
      stepArray0[1] = step1;
      Step step2 = new Step(0, nodeNameTest0, expressionArray0);
      stepArray0[2] = step2;
      Step step3 = new Step((-310), nodeNameTest0, expressionArray0);
      stepArray0[3] = step3;
      Step step4 = new Step(58, nodeNameTest0, expressionArray0);
      stepArray0[4] = step4;
      ExpressionPath expressionPath0 = new ExpressionPath(coreFunction0, expressionArray0, stepArray0);
      PredicateContext predicateContext0 = new PredicateContext((EvalContext) null, coreFunction0);
      EvalContext[] evalContextArray0 = new EvalContext[1];
      evalContextArray0[0] = null;
      UnionContext unionContext0 = new UnionContext(predicateContext0, evalContextArray0);
      DescendantContext descendantContext0 = new DescendantContext(unionContext0, true, nodeNameTest0);
      expressionPath0.evalSteps(descendantContext0);
      ChildContext childContext0 = new ChildContext((EvalContext) null, nodeNameTest0, false, true);
      UnionContext unionContext1 = new UnionContext(descendantContext0, evalContextArray0);
      // Undeclared exception!
//      try { 
        coreFunction0.functionBoolean(unionContext1);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // Incorrect number of arguments: unknownFunction0()()
//         //
//         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test315()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction((-6), (Expression[]) null);
      EvalContext evalContext0 = null;
      // Undeclared exception!
//      try { 
        coreFunction0.functionSubstring((EvalContext) null);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // Incorrect number of arguments: unknownFunction-6()()
//         //
//         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test316()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[5];
      Constant constant0 = new Constant("FGgj]x:)`~dS");
      CoreOperationNegate coreOperationNegate0 = new CoreOperationNegate(constant0);
      expressionArray0[0] = (Expression) coreOperationNegate0;
      Expression[] expressionArray1 = new Expression[6];
      expressionArray1[0] = (Expression) coreOperationNegate0;
      expressionArray1[1] = (Expression) coreOperationNegate0;
      QName qName0 = new QName("FGgj]x:)`~dS", "FGgj]x:)`~dS");
      VariableReference variableReference0 = new VariableReference(qName0);
      expressionArray1[2] = (Expression) variableReference0;
      expressionArray1[3] = null;
      expressionArray1[4] = (Expression) constant0;
      expressionArray1[5] = null;
      Step[] stepArray0 = new Step[6];
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
      Step step0 = new Step(2045, nodeNameTest0, expressionArray0);
      stepArray0[0] = step0;
      Step step1 = new Step(3236, nodeNameTest0, expressionArray1);
      CoreOperationLessThan coreOperationLessThan0 = new CoreOperationLessThan(expressionArray1[0], expressionArray1[2]);
      Byte byte0 = new Byte((byte)54);
      Constant constant1 = new Constant(byte0);
      CoreFunction coreFunction0 = new CoreFunction(9, expressionArray0);
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("g,mJI0fat}");
      AncestorContext ancestorContext0 = new AncestorContext((EvalContext) null, false, processingInstructionTest0);
      // Undeclared exception!
//      try { 
        coreFunction0.functionKey(ancestorContext0);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // Incorrect number of arguments: concat(-org.apache.commons.jxpath.ri.compiler.Constant@0000000001, null, null, null, null)
//         //
//         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test317()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[6];
      CoreOperationOr coreOperationOr0 = new CoreOperationOr(expressionArray0);
      CoreOperationNegate coreOperationNegate0 = new CoreOperationNegate(coreOperationOr0);
      expressionArray0[0] = (Expression) coreOperationNegate0;
      Double double0 = Expression.ONE;
      Constant constant0 = new Constant(double0);
      CoreOperationSubtract coreOperationSubtract0 = new CoreOperationSubtract(coreOperationOr0, constant0);
      expressionArray0[1] = (Expression) coreOperationSubtract0;
      CoreOperationMod coreOperationMod0 = new CoreOperationMod(expressionArray0[0], coreOperationSubtract0);
      expressionArray0[2] = (Expression) coreOperationMod0;
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd(expressionArray0);
      expressionArray0[3] = (Expression) coreOperationAdd0;
      CoreOperationDivide coreOperationDivide0 = new CoreOperationDivide(expressionArray0[3], expressionArray0[3]);
      expressionArray0[4] = (Expression) coreOperationDivide0;
      Constant constant1 = new Constant(double0);
      expressionArray0[5] = (Expression) constant1;
      CoreFunction coreFunction0 = new CoreFunction(352, expressionArray0);
      coreFunction0.toString();
      assertEquals(352, coreFunction0.getFunctionCode());
  }

  @Test(timeout = 4000)
  public void test318()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(0, expressionArray0);
      Step[] stepArray0 = new Step[5];
      QName qName0 = new QName((String) null, (String) null);
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, "true");
      Step step0 = new Step(0, nodeNameTest0, expressionArray0);
      stepArray0[0] = step0;
      Step step1 = new Step(0, nodeNameTest0, expressionArray0);
      stepArray0[1] = step1;
      Step step2 = new Step(0, nodeNameTest0, expressionArray0);
      stepArray0[2] = step2;
      Step step3 = new Step((-310), nodeNameTest0, expressionArray0);
      stepArray0[3] = step3;
      Step step4 = new Step(58, nodeNameTest0, expressionArray0);
      stepArray0[4] = step4;
      ExpressionPath expressionPath0 = new ExpressionPath(coreFunction0, expressionArray0, stepArray0);
      PredicateContext predicateContext0 = new PredicateContext((EvalContext) null, coreFunction0);
      EvalContext[] evalContextArray0 = new EvalContext[1];
      evalContextArray0[0] = null;
      UnionContext unionContext0 = new UnionContext(predicateContext0, evalContextArray0);
      DescendantContext descendantContext0 = new DescendantContext(unionContext0, true, nodeNameTest0);
      expressionPath0.evalSteps(descendantContext0);
      ChildContext childContext0 = new ChildContext((EvalContext) null, nodeNameTest0, false, true);
      // Undeclared exception!
//      try { 
        coreFunction0.functionRound(childContext0);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // Incorrect number of arguments: unknownFunction0()()
//         //
//         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test319()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction((-1710), expressionArray0);
      coreFunction0.computeContextDependent();
      EvalContext evalContext0 = null;
      coreFunction0.compute((EvalContext) null);
      coreFunction0.getArgumentCount();
      EvalContext evalContext1 = null;
      NodeTest nodeTest0 = null;
      AncestorContext ancestorContext0 = new AncestorContext((EvalContext) null, false, (NodeTest) null);
      // Undeclared exception!
//      try { 
        ancestorContext0.getContextNodeList();
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.jxpath.ri.axes.AncestorContext", e);
//      }
  }

  @Test(timeout = 4000)
  public void test320()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(0, (Expression[]) null);
      EvalContext evalContext0 = null;
      coreFunction0.compute((EvalContext) null);
      // Undeclared exception!
//      try { 
        coreFunction0.functionCount((EvalContext) null);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // Incorrect number of arguments: unknownFunction0()()
//         //
//         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test321()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(0, expressionArray0);
      coreFunction0.toString();
      // Undeclared exception!
//      try { 
        coreFunction0.getArg2();
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 1
//         //
//         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test322()  throws Throwable  {
      int int0 = 277;
      Expression[] expressionArray0 = new Expression[2];
      CoreOperationNotEqual coreOperationNotEqual0 = new CoreOperationNotEqual((Expression) null, (Expression) null);
      expressionArray0[0] = (Expression) coreOperationNotEqual0;
      CoreOperationNotEqual coreOperationNotEqual1 = new CoreOperationNotEqual((Expression) null, coreOperationNotEqual0);
      expressionArray0[1] = (Expression) coreOperationNotEqual1;
      Step[] stepArray0 = new Step[8];
      Step step0 = new Step(277, (NodeTest) null, expressionArray0);
      stepArray0[0] = step0;
      Step step1 = new Step((-223), (NodeTest) null, expressionArray0);
      stepArray0[1] = step1;
      Step step2 = new Step(4, (NodeTest) null, expressionArray0);
      stepArray0[2] = step2;
      Expression[] expressionArray1 = new Expression[9];
      expressionArray1[0] = (Expression) coreOperationNotEqual0;
      expressionArray1[1] = (Expression) coreOperationNotEqual1;
      expressionArray1[2] = (Expression) coreOperationNotEqual1;
      expressionArray1[3] = (Expression) coreOperationNotEqual1;
      expressionArray1[4] = (Expression) coreOperationNotEqual0;
      expressionArray1[5] = (Expression) coreOperationNotEqual0;
      CoreFunction coreFunction0 = new CoreFunction(277, expressionArray1);
      Expression expression0 = coreFunction0.getArg2();
      CoreOperationMultiply coreOperationMultiply0 = new CoreOperationMultiply(expressionArray1[3], expression0);
      expressionArray1[6] = (Expression) coreOperationMultiply0;
      expressionArray1[7] = null;
      expressionArray1[8] = (Expression) coreOperationNotEqual0;
      Step step3 = new Step(2103, (NodeTest) null, expressionArray1);
      stepArray0[3] = step3;
      Step step4 = new Step(277, (NodeTest) null, expressionArray1);
      stepArray0[4] = step4;
      Step step5 = new Step(0, (NodeTest) null, expressionArray1);
      stepArray0[5] = step5;
      Step step6 = new Step((-1999), (NodeTest) null, expressionArray0);
      stepArray0[6] = step6;
      Expression[] expressionArray2 = new Expression[9];
      expressionArray2[0] = (Expression) coreFunction0;
      CoreOperationSubtract coreOperationSubtract0 = new CoreOperationSubtract(expressionArray1[5], coreOperationMultiply0);
      expressionArray2[1] = (Expression) coreOperationSubtract0;
      CoreOperationUnion coreOperationUnion0 = new CoreOperationUnion(expressionArray2);
      expressionArray2[2] = (Expression) coreOperationUnion0;
      expressionArray2[3] = expression0;
      expressionArray2[4] = expression0;
      expressionArray2[5] = expression0;
      Expression expression1 = coreFunction0.getArg3();
      expressionArray2[6] = expression1;
      CoreFunction coreFunction1 = new CoreFunction(4, expressionArray1);
      expressionArray2[7] = (Expression) coreFunction1;
      expressionArray2[8] = (Expression) coreOperationNotEqual1;
      Step step7 = new Step(277, (NodeTest) null, expressionArray2);
      stepArray0[7] = step7;
      ExpressionPath expressionPath0 = new ExpressionPath((Expression) null, expressionArray0, stepArray0);
      AttributeContext attributeContext0 = new AttributeContext((EvalContext) null, (NodeTest) null);
      BasicNodeSet basicNodeSet0 = new BasicNodeSet();
      NodeSetContext nodeSetContext0 = new NodeSetContext(attributeContext0, basicNodeSet0);
      NamespaceContext namespaceContext0 = new NamespaceContext(nodeSetContext0, (NodeTest) null);
      EvalContext evalContext0 = expressionPath0.createContextForStep(namespaceContext0, 4, (NodeTest) null);
      // Undeclared exception!
//      try { 
        coreOperationNotEqual1.iterate(evalContext0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test323()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[3];
      QName qName0 = new QName("");
      ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, expressionArray0);
      CoreOperationEqual coreOperationEqual0 = new CoreOperationEqual(extensionFunction0, extensionFunction0);
      CoreOperationMod coreOperationMod0 = new CoreOperationMod(coreOperationEqual0, coreOperationEqual0);
      expressionArray0[0] = (Expression) coreOperationMod0;
      CoreOperationMod coreOperationMod1 = new CoreOperationMod(coreOperationEqual0, coreOperationEqual0);
      expressionArray0[1] = (Expression) coreOperationMod1;
      CoreOperationMod coreOperationMod2 = new CoreOperationMod(coreOperationEqual0, coreOperationMod0);
      expressionArray0[2] = (Expression) coreOperationMod2;
      CoreFunction coreFunction0 = new CoreFunction(934, expressionArray0);
      int int0 = coreFunction0.getArgumentCount();
      assertEquals(3, int0);
      assertEquals(934, coreFunction0.getFunctionCode());
  }

  @Test(timeout = 4000)
  public void test324()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction((-4323), (Expression[]) null);
      RootContext rootContext0 = new RootContext((JXPathContextReferenceImpl) null, (NodePointer) null);
      EvalContext[] evalContextArray0 = new EvalContext[2];
      evalContextArray0[0] = (EvalContext) rootContext0;
      evalContextArray0[1] = (EvalContext) rootContext0;
      UnionContext unionContext0 = new UnionContext(rootContext0, evalContextArray0);
      // Undeclared exception!
//      try { 
        coreFunction0.functionName(unionContext0);
//        fail("Expecting exception: UnsupportedOperationException");
      
//      } catch(UnsupportedOperationException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.jxpath.ri.axes.RootContext", e);
//      }
  }

  @Test(timeout = 4000)
  public void test325()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(0, expressionArray0);
      coreFunction0.functionFalse((EvalContext) null);
      coreFunction0.getFunctionName();
      EvalContext evalContext0 = null;
      coreFunction0.computeValue((EvalContext) null);
      coreFunction0.functionFalse((EvalContext) null);
      QName qName0 = new QName("JV`%I{+");
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
      NamespaceContext namespaceContext0 = new NamespaceContext((EvalContext) null, nodeNameTest0);
      // Undeclared exception!
//      try { 
        coreFunction0.functionLang(namespaceContext0);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // Incorrect number of arguments: unknownFunction0()()
//         //
//         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test326()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[3];
      ExtensionFunction extensionFunction0 = new ExtensionFunction((QName) null, expressionArray0);
      CoreOperationMultiply coreOperationMultiply0 = new CoreOperationMultiply(extensionFunction0, extensionFunction0);
      expressionArray0[0] = (Expression) coreOperationMultiply0;
      CoreOperationLessThan coreOperationLessThan0 = new CoreOperationLessThan(expressionArray0[0], expressionArray0[0]);
      expressionArray0[1] = (Expression) coreOperationLessThan0;
      Byte byte0 = new Byte((byte)47);
      Constant constant0 = new Constant(byte0);
      expressionArray0[2] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction(3, expressionArray0);
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("");
      AncestorContext ancestorContext0 = new AncestorContext((EvalContext) null, false, processingInstructionTest0);
      // Undeclared exception!
//      try { 
        coreFunction0.functionKey(ancestorContext0);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // Incorrect number of arguments: count(org.apache.commons.jxpath.ri.compiler.ExtensionFunction@0000000001 * org.apache.commons.jxpath.ri.compiler.ExtensionFunction@0000000001, org.apache.commons.jxpath.ri.compiler.CoreOperationMultiply@0000000002 < org.apache.commons.jxpath.ri.compiler.CoreOperationMultiply@0000000002, 47)
//         //
//         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test327()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd(expressionArray0);
      expressionArray0[0] = (Expression) coreOperationAdd0;
      CoreFunction coreFunction0 = new CoreFunction(0, expressionArray0);
      // Undeclared exception!
//      try { 
        coreFunction0.getArg3();
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 2
//         //
//         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test328()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction((-1345), (Expression[]) null);
      coreFunction0.getArgumentCount();
      EvalContext evalContext0 = null;
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(1125);
      SelfContext selfContext0 = new SelfContext((EvalContext) null, nodeTypeTest0);
      // Undeclared exception!
//      try { 
        selfContext0.getContextNodePointer();
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.jxpath.ri.axes.SelfContext", e);
//      }
  }

  @Test(timeout = 4000)
  public void test329()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[7];
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd(expressionArray0);
      expressionArray0[0] = (Expression) coreOperationAdd0;
      NameAttributeTest nameAttributeTest0 = new NameAttributeTest(expressionArray0[0], coreOperationAdd0);
      expressionArray0[1] = (Expression) nameAttributeTest0;
      CoreOperationEqual coreOperationEqual0 = new CoreOperationEqual(coreOperationAdd0, expressionArray0[0]);
      expressionArray0[2] = (Expression) coreOperationEqual0;
      CoreOperationEqual coreOperationEqual1 = new CoreOperationEqual(expressionArray0[2], expressionArray0[1]);
      expressionArray0[3] = (Expression) coreOperationEqual1;
      Constant constant0 = new Constant((Number) null);
      expressionArray0[4] = (Expression) constant0;
      nameAttributeTest0.isContextDependent();
      CoreOperationNegate coreOperationNegate0 = new CoreOperationNegate(constant0);
      expressionArray0[5] = (Expression) coreOperationNegate0;
      CoreOperationAnd coreOperationAnd0 = new CoreOperationAnd(expressionArray0);
      constant0.toString();
      expressionArray0[6] = (Expression) coreOperationAnd0;
      CoreFunction coreFunction0 = new CoreFunction(0, expressionArray0);
      EvalContext evalContext0 = null;
      // Undeclared exception!
//      try { 
        coreFunction0.functionFloor((EvalContext) null);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // Incorrect number of arguments: unknownFunction0()(org.apache.commons.jxpath.ri.compiler.CoreOperationAdd@0000000001 + (org.apache.commons.jxpath.ri.compiler.NameAttributeTest@0000000002) + (org.apache.commons.jxpath.ri.compiler.CoreOperationEqual@0000000003) + (org.apache.commons.jxpath.ri.compiler.CoreOperationEqual@0000000004) + org.apache.commons.jxpath.ri.compiler.Constant@0000000005 + org.apache.commons.jxpath.ri.compiler.CoreOperationNegate@0000000006 + (org.apache.commons.jxpath.ri.compiler.CoreOperationAnd@0000000007), org.apache.commons.jxpath.ri.compiler.CoreOperationAdd@0000000001 = org.apache.commons.jxpath.ri.compiler.CoreOperationAdd@0000000001, org.apache.commons.jxpath.ri.compiler.CoreOperationAdd@0000000001 = org.apache.commons.jxpath.ri.compiler.CoreOperationAdd@0000000001, org.apache.commons.jxpath.ri.compiler.CoreOperationEqual@0000000003 = org.apache.commons.jxpath.ri.compiler.NameAttributeTest@0000000002, 'null', -org.apache.commons.jxpath.ri.compiler.Constant@0000000005, org.apache.commons.jxpath.ri.compiler.CoreOperationAdd@0000000001 and org.apache.commons.jxpath.ri.compiler.NameAttributeTest@0000000002 and org.apache.commons.jxpath.ri.compiler.CoreOperationEqual@0000000003 and org.apache.commons.jxpath.ri.compiler.CoreOperationEqual@0000000004 and org.apache.commons.jxpath.ri.compiler.Constant@0000000005 and org.apache.commons.jxpath.ri.compiler.CoreOperationNegate@0000000006 and org.apache.commons.jxpath.ri.compiler.CoreOperationAnd@0000000007)
//         //
//         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test330()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[6];
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd(expressionArray0);
      expressionArray0[0] = (Expression) coreOperationAdd0;
      coreOperationAdd0.args = expressionArray0;
      QName qName0 = new QName("");
      ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, expressionArray0);
      expressionArray0[1] = (Expression) extensionFunction0;
      CoreOperationDivide coreOperationDivide0 = new CoreOperationDivide(extensionFunction0, extensionFunction0);
      expressionArray0[2] = (Expression) coreOperationDivide0;
      Constant constant0 = new Constant("");
      expressionArray0[3] = (Expression) constant0;
      CoreOperationGreaterThan coreOperationGreaterThan0 = new CoreOperationGreaterThan(extensionFunction0, expressionArray0[1]);
      expressionArray0[4] = (Expression) coreOperationGreaterThan0;
      CoreOperationOr coreOperationOr0 = new CoreOperationOr(expressionArray0);
      CoreOperationDivide coreOperationDivide1 = new CoreOperationDivide(expressionArray0[0], coreOperationOr0);
      expressionArray0[5] = (Expression) coreOperationDivide1;
      CoreFunction coreFunction0 = new CoreFunction(41, expressionArray0);
      coreFunction0.getFunctionName();
      coreOperationDivide1.args = expressionArray0;
      coreFunction0.getFunctionName();
      EvalContext evalContext0 = null;
      // Undeclared exception!
      coreFunction0.functionSubstring((EvalContext) null);
  }

  @Test(timeout = 4000)
  public void test331()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[5];
      CoreOperationOr coreOperationOr0 = new CoreOperationOr(expressionArray0);
      expressionArray0[0] = (Expression) coreOperationOr0;
      CoreOperationDivide coreOperationDivide0 = new CoreOperationDivide(expressionArray0[0], expressionArray0[0]);
      expressionArray0[1] = (Expression) coreOperationDivide0;
      Constant constant0 = new Constant("k)#VME/d$XzW4KF");
      CoreOperationGreaterThan coreOperationGreaterThan0 = new CoreOperationGreaterThan(constant0, constant0);
      expressionArray0[2] = (Expression) coreOperationGreaterThan0;
      CoreOperationNegate coreOperationNegate0 = new CoreOperationNegate(coreOperationOr0);
      expressionArray0[3] = (Expression) coreOperationNegate0;
      CoreOperationGreaterThan coreOperationGreaterThan1 = new CoreOperationGreaterThan(expressionArray0[3], expressionArray0[1]);
      expressionArray0[4] = (Expression) coreOperationGreaterThan1;
      CoreFunction coreFunction0 = new CoreFunction((-1796), expressionArray0);
      ExpressionPath expressionPath0 = new ExpressionPath(constant0, expressionArray0, (Step[]) null);
      EvalContext evalContext0 = null;
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(279);
      expressionPath0.createContextForStep((EvalContext) null, (-894), nodeTypeTest0);
      ChildContext childContext0 = new ChildContext((EvalContext) null, nodeTypeTest0, false, false);
      // Undeclared exception!
//      try { 
        coreFunction0.functionNumber(childContext0);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // Incorrect number of arguments: unknownFunction-1796()(org.apache.commons.jxpath.ri.compiler.CoreOperationOr@0000000001 or org.apache.commons.jxpath.ri.compiler.CoreOperationDivide@0000000002 or org.apache.commons.jxpath.ri.compiler.CoreOperationGreaterThan@0000000004 or org.apache.commons.jxpath.ri.compiler.CoreOperationNegate@0000000005 or org.apache.commons.jxpath.ri.compiler.CoreOperationGreaterThan@0000000006, (org.apache.commons.jxpath.ri.compiler.CoreOperationOr@0000000001) div (org.apache.commons.jxpath.ri.compiler.CoreOperationOr@0000000001), org.apache.commons.jxpath.ri.compiler.Constant@0000000003 > org.apache.commons.jxpath.ri.compiler.Constant@0000000003, -(org.apache.commons.jxpath.ri.compiler.CoreOperationOr@0000000001), org.apache.commons.jxpath.ri.compiler.CoreOperationNegate@0000000005 > org.apache.commons.jxpath.ri.compiler.CoreOperationDivide@0000000002)
//         //
//         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test332()  throws Throwable  {
      int int0 = (-2800);
      Expression[] expressionArray0 = new Expression[5];
      CoreOperationNotEqual coreOperationNotEqual0 = new CoreOperationNotEqual((Expression) null, (Expression) null);
      expressionArray0[0] = (Expression) coreOperationNotEqual0;
      CoreFunction coreFunction0 = new CoreFunction(0, expressionArray0);
      coreFunction0.getArg2();
      expressionArray0[1] = null;
      CoreOperationUnion coreOperationUnion0 = new CoreOperationUnion(expressionArray0);
      expressionArray0[2] = (Expression) coreOperationUnion0;
      Float float0 = new Float((-793.153F));
      Constant constant0 = new Constant(float0);
      expressionArray0[3] = (Expression) constant0;
      Expression expression0 = coreFunction0.getArg3();
      CoreOperationNegate coreOperationNegate0 = new CoreOperationNegate(expression0);
      Step[] stepArray0 = new Step[8];
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(0);
      Step step0 = new Step((-1986), nodeTypeTest0, expressionArray0);
      stepArray0[0] = step0;
      Step step1 = new Step(0, nodeTypeTest0, expressionArray0);
      stepArray0[1] = step1;
      Step step2 = new Step(0, nodeTypeTest0, expressionArray0);
      stepArray0[2] = step2;
      Step step3 = new Step((-2800), nodeTypeTest0, expressionArray0);
      stepArray0[3] = step3;
      Step step4 = new Step(0, nodeTypeTest0, expressionArray0);
      stepArray0[4] = step4;
      Expression[] expressionArray1 = new Expression[5];
      expressionArray1[0] = (Expression) coreOperationUnion0;
      expressionArray1[1] = (Expression) coreFunction0;
      CoreOperationAnd coreOperationAnd0 = new CoreOperationAnd(expressionArray1);
      expressionArray1[2] = (Expression) coreOperationAnd0;
      expressionArray1[3] = (Expression) coreOperationUnion0;
      Constant constant1 = new Constant(float0);
      expressionArray1[4] = (Expression) constant1;
      Step step5 = new Step((-2800), nodeTypeTest0, expressionArray1);
      stepArray0[5] = step5;
      Step step6 = new Step(0, nodeTypeTest0, expressionArray1);
      stepArray0[6] = step6;
      Step step7 = new Step(0, nodeTypeTest0, (Expression[]) null);
      stepArray0[7] = step7;
      ExpressionPath expressionPath0 = new ExpressionPath(coreOperationUnion0, expressionArray0, stepArray0);
      PredicateContext predicateContext0 = new PredicateContext((EvalContext) null, coreFunction0);
      NamespaceContext namespaceContext0 = new NamespaceContext(predicateContext0, nodeTypeTest0);
      expressionPath0.evalSteps(namespaceContext0);
      // Undeclared exception!
//      try { 
        coreOperationNotEqual0.equal((EvalContext) null, expressionArray0[2], expression0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }
}
