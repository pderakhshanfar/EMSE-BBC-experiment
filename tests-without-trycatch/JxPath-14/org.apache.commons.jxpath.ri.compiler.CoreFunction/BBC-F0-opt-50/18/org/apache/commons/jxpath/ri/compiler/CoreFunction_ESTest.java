/*
 * This file was automatically generated by EvoSuite
 * Thu Oct 21 00:06:49 GMT 2021
 */

package org.apache.commons.jxpath.ri.compiler;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Iterator;
import java.util.Locale;
import java.util.function.Consumer;
import org.apache.commons.jxpath.BasicNodeSet;
import org.apache.commons.jxpath.BasicVariables;
import org.apache.commons.jxpath.JXPathContext;
import org.apache.commons.jxpath.NodeSet;
import org.apache.commons.jxpath.Pointer;
import org.apache.commons.jxpath.ri.EvalContext;
import org.apache.commons.jxpath.ri.JXPathContextReferenceImpl;
import org.apache.commons.jxpath.ri.NamespaceResolver;
import org.apache.commons.jxpath.ri.QName;
import org.apache.commons.jxpath.ri.axes.AncestorContext;
import org.apache.commons.jxpath.ri.axes.AttributeContext;
import org.apache.commons.jxpath.ri.axes.ChildContext;
import org.apache.commons.jxpath.ri.axes.DescendantContext;
import org.apache.commons.jxpath.ri.axes.InitialContext;
import org.apache.commons.jxpath.ri.axes.NamespaceContext;
import org.apache.commons.jxpath.ri.axes.NodeSetContext;
import org.apache.commons.jxpath.ri.axes.ParentContext;
import org.apache.commons.jxpath.ri.axes.PrecedingOrFollowingContext;
import org.apache.commons.jxpath.ri.axes.PredicateContext;
import org.apache.commons.jxpath.ri.axes.RootContext;
import org.apache.commons.jxpath.ri.axes.SelfContext;
import org.apache.commons.jxpath.ri.axes.UnionContext;
import org.apache.commons.jxpath.ri.compiler.Constant;
import org.apache.commons.jxpath.ri.compiler.CoreFunction;
import org.apache.commons.jxpath.ri.compiler.CoreOperationAdd;
import org.apache.commons.jxpath.ri.compiler.CoreOperationAnd;
import org.apache.commons.jxpath.ri.compiler.CoreOperationDivide;
import org.apache.commons.jxpath.ri.compiler.CoreOperationEqual;
import org.apache.commons.jxpath.ri.compiler.CoreOperationGreaterThan;
import org.apache.commons.jxpath.ri.compiler.CoreOperationGreaterThanOrEqual;
import org.apache.commons.jxpath.ri.compiler.CoreOperationLessThan;
import org.apache.commons.jxpath.ri.compiler.CoreOperationLessThanOrEqual;
import org.apache.commons.jxpath.ri.compiler.CoreOperationMod;
import org.apache.commons.jxpath.ri.compiler.CoreOperationMultiply;
import org.apache.commons.jxpath.ri.compiler.CoreOperationNegate;
import org.apache.commons.jxpath.ri.compiler.CoreOperationNotEqual;
import org.apache.commons.jxpath.ri.compiler.CoreOperationOr;
import org.apache.commons.jxpath.ri.compiler.CoreOperationSubtract;
import org.apache.commons.jxpath.ri.compiler.CoreOperationUnion;
import org.apache.commons.jxpath.ri.compiler.Expression;
import org.apache.commons.jxpath.ri.compiler.ExpressionPath;
import org.apache.commons.jxpath.ri.compiler.ExtensionFunction;
import org.apache.commons.jxpath.ri.compiler.LocationPath;
import org.apache.commons.jxpath.ri.compiler.NameAttributeTest;
import org.apache.commons.jxpath.ri.compiler.NodeNameTest;
import org.apache.commons.jxpath.ri.compiler.NodeTest;
import org.apache.commons.jxpath.ri.compiler.NodeTypeTest;
import org.apache.commons.jxpath.ri.compiler.ProcessingInstructionTest;
import org.apache.commons.jxpath.ri.compiler.Step;
import org.apache.commons.jxpath.ri.compiler.VariableReference;
import org.apache.commons.jxpath.ri.model.NodeIterator;
import org.apache.commons.jxpath.ri.model.NodePointer;
import org.apache.commons.jxpath.ri.model.VariablePointer;
import org.apache.commons.jxpath.ri.model.VariablePointerFactory;
import org.apache.commons.jxpath.ri.model.beans.BeanPointer;
import org.apache.commons.jxpath.ri.model.beans.NullPointer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class CoreFunction_ESTest extends CoreFunction_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Double double0 = Expression.ZERO;
      assertEquals(0.0, (double)double0, 0.01);
      assertNotNull(double0);
      
      Constant constant0 = new Constant(double0);
      assertNotNull(constant0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      
      CoreOperationGreaterThan coreOperationGreaterThan0 = new CoreOperationGreaterThan(constant0, constant0);
      assertNotNull(coreOperationGreaterThan0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertEquals(">", coreOperationGreaterThan0.getSymbol());
      
      Expression[] expressionArray0 = new Expression[2];
      expressionArray0[0] = (Expression) constant0;
      expressionArray0[1] = (Expression) coreOperationGreaterThan0;
      CoreFunction coreFunction0 = new CoreFunction((-643), expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(2, coreFunction0.getArgumentCount());
      assertEquals((-643), coreFunction0.getFunctionCode());
      assertEquals(2, expressionArray0.length);
      
      VariablePointerFactory variablePointerFactory0 = new VariablePointerFactory();
      assertEquals(890, VariablePointerFactory.VARIABLE_POINTER_FACTORY_ORDER);
      assertNotNull(variablePointerFactory0);
      assertEquals(890, variablePointerFactory0.getOrder());
      
      QName qName0 = new QName("count");
      assertNotNull(qName0);
      assertEquals("count", qName0.toString());
      assertNull(qName0.getPrefix());
      assertEquals("count", qName0.getName());
      
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      assertNotNull(locale0);
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("", locale0.getVariant());
      
      NodePointer nodePointer0 = variablePointerFactory0.createNodePointer(qName0, (Object) null, locale0);
      assertEquals(890, VariablePointerFactory.VARIABLE_POINTER_FACTORY_ORDER);
      assertNull(nodePointer0);
      assertEquals(890, variablePointerFactory0.getOrder());
      assertEquals("count", qName0.toString());
      assertNull(qName0.getPrefix());
      assertEquals("count", qName0.getName());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("", locale0.getVariant());
      
      RootContext rootContext0 = new RootContext((JXPathContextReferenceImpl) null, (NodePointer) null);
      assertNotNull(rootContext0);
      assertFalse(rootContext0.isChildOrderingRequired());
      assertEquals(0, rootContext0.getPosition());
      assertEquals(0, rootContext0.getDocumentOrder());
      
      // Undeclared exception!
//      try { 
        coreFunction0.functionKey(rootContext0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)5;
      byteArray0[1] = (byte)15;
      byteArray0[2] = (byte)29;
      boolean boolean0 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertArrayEquals(new byte[] {(byte)5, (byte)15, (byte)29}, byteArray0);
      assertFalse(boolean0);
      assertEquals(3, byteArray0.length);
      
      Expression[] expressionArray0 = new Expression[3];
      QName qName0 = new QName("true", "true");
      assertNotNull(qName0);
      assertEquals("true:true", qName0.toString());
      assertEquals("true", qName0.getName());
      assertEquals("true", qName0.getPrefix());
      
      VariableReference variableReference0 = new VariableReference(qName0);
      assertNotNull(variableReference0);
      assertEquals("true:true", qName0.toString());
      assertEquals("true", qName0.getName());
      assertEquals("true", qName0.getPrefix());
      assertFalse(variableReference0.computeContextDependent());
      assertFalse(variableReference0.isContextDependent());
      
      NameAttributeTest nameAttributeTest0 = new NameAttributeTest(variableReference0, variableReference0);
      assertNotNull(nameAttributeTest0);
      assertEquals("true:true", qName0.toString());
      assertEquals("true", qName0.getName());
      assertEquals("true", qName0.getPrefix());
      assertFalse(variableReference0.computeContextDependent());
      assertFalse(variableReference0.isContextDependent());
      assertEquals("=", nameAttributeTest0.getSymbol());
      assertTrue(nameAttributeTest0.computeContextDependent());
      
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual(nameAttributeTest0, variableReference0);
      assertNotNull(coreOperationLessThanOrEqual0);
      assertEquals("true:true", qName0.toString());
      assertEquals("true", qName0.getName());
      assertEquals("true", qName0.getPrefix());
      assertFalse(variableReference0.computeContextDependent());
      assertFalse(variableReference0.isContextDependent());
      assertEquals("=", nameAttributeTest0.getSymbol());
      assertTrue(nameAttributeTest0.computeContextDependent());
      assertEquals("<=", coreOperationLessThanOrEqual0.getSymbol());
      
      Step[] stepArray0 = new Step[3];
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest((byte)15);
      assertNotNull(nodeTypeTest0);
      assertEquals(15, nodeTypeTest0.getNodeType());
      
      Step step0 = new Step(89, nodeTypeTest0, expressionArray0);
      assertNotNull(step0);
      assertEquals(15, nodeTypeTest0.getNodeType());
      assertEquals(89, step0.getAxis());
      assertEquals(3, expressionArray0.length);
      
      stepArray0[0] = step0;
      QName qName1 = new QName("C,TMTDtZi");
      assertFalse(qName1.equals((Object)qName0));
      assertNotNull(qName1);
      assertEquals("C,TMTDtZi", qName1.toString());
      assertEquals("C,TMTDtZi", qName1.getName());
      assertNull(qName1.getPrefix());
      
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName1);
      assertFalse(qName1.equals((Object)qName0));
      assertNotNull(nodeNameTest0);
      assertEquals("C,TMTDtZi", qName1.toString());
      assertEquals("C,TMTDtZi", qName1.getName());
      assertNull(qName1.getPrefix());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals("C,TMTDtZi", nodeNameTest0.toString());
      
      Step step1 = new Step((byte)5, nodeNameTest0, expressionArray0);
      assertFalse(step1.equals((Object)step0));
      assertFalse(qName1.equals((Object)qName0));
      assertNotNull(step1);
      assertEquals(5, step1.getAxis());
      assertEquals("C,TMTDtZi", qName1.toString());
      assertEquals("C,TMTDtZi", qName1.getName());
      assertNull(qName1.getPrefix());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals("C,TMTDtZi", nodeNameTest0.toString());
      assertEquals(3, expressionArray0.length);
      
      stepArray0[1] = step1;
      Step step2 = new Step((byte)5, nodeTypeTest0, expressionArray0);
      assertFalse(step2.equals((Object)step1));
      assertFalse(step2.equals((Object)step0));
      assertNotNull(step2);
      assertEquals(5, step2.getAxis());
      assertEquals(15, nodeTypeTest0.getNodeType());
      assertEquals(3, expressionArray0.length);
      
      stepArray0[2] = step2;
      ExpressionPath expressionPath0 = new ExpressionPath(coreOperationLessThanOrEqual0, expressionArray0, stepArray0);
      assertFalse(qName0.equals((Object)qName1));
      assertNotNull(expressionPath0);
      assertEquals("true:true", qName0.toString());
      assertEquals("true", qName0.getName());
      assertEquals("true", qName0.getPrefix());
      assertFalse(variableReference0.computeContextDependent());
      assertFalse(variableReference0.isContextDependent());
      assertEquals("=", nameAttributeTest0.getSymbol());
      assertTrue(nameAttributeTest0.computeContextDependent());
      assertEquals("<=", coreOperationLessThanOrEqual0.getSymbol());
      assertEquals(3, expressionArray0.length);
      assertEquals(3, stepArray0.length);
      
      expressionArray0[0] = (Expression) expressionPath0;
      CoreOperationAnd coreOperationAnd0 = new CoreOperationAnd(expressionArray0);
      assertNotNull(coreOperationAnd0);
      assertEquals("and", coreOperationAnd0.getSymbol());
      assertEquals(3, expressionArray0.length);
      
      CoreOperationNegate coreOperationNegate0 = new CoreOperationNegate(coreOperationAnd0);
      assertNotNull(coreOperationNegate0);
      assertEquals("and", coreOperationAnd0.getSymbol());
      assertEquals("-", coreOperationNegate0.getSymbol());
      assertEquals(3, expressionArray0.length);
      
      expressionArray0[1] = (Expression) coreOperationNegate0;
      NameAttributeTest nameAttributeTest1 = new NameAttributeTest(coreOperationAnd0, expressionArray0[0]);
      assertFalse(nameAttributeTest1.equals((Object)nameAttributeTest0));
      assertNotNull(nameAttributeTest1);
      assertEquals("and", coreOperationAnd0.getSymbol());
      assertTrue(nameAttributeTest1.computeContextDependent());
      assertEquals("=", nameAttributeTest1.getSymbol());
      assertEquals(3, expressionArray0.length);
      
      expressionArray0[2] = (Expression) nameAttributeTest1;
      CoreFunction coreFunction0 = new CoreFunction((byte)15, expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(3, coreFunction0.getArgumentCount());
      assertEquals(15, coreFunction0.getFunctionCode());
      assertEquals(3, expressionArray0.length);
      
      EvalContext evalContext0 = expressionPath0.evalSteps((EvalContext) null);
      assertFalse(qName0.equals((Object)qName1));
      assertFalse(nameAttributeTest0.equals((Object)nameAttributeTest1));
      assertNotNull(evalContext0);
      assertEquals("true:true", qName0.toString());
      assertEquals("true", qName0.getName());
      assertEquals("true", qName0.getPrefix());
      assertFalse(variableReference0.computeContextDependent());
      assertFalse(variableReference0.isContextDependent());
      assertEquals("=", nameAttributeTest0.getSymbol());
      assertTrue(nameAttributeTest0.computeContextDependent());
      assertEquals("<=", coreOperationLessThanOrEqual0.getSymbol());
      assertFalse(evalContext0.isChildOrderingRequired());
      assertEquals(0, evalContext0.getPosition());
      assertEquals(0, evalContext0.getDocumentOrder());
      assertEquals(3, expressionArray0.length);
      assertEquals(3, stepArray0.length);
      assertNotSame(qName0, qName1);
      assertNotSame(nameAttributeTest0, nameAttributeTest1);
      
      PrecedingOrFollowingContext precedingOrFollowingContext0 = new PrecedingOrFollowingContext(evalContext0, nodeTypeTest0, false);
      assertFalse(qName0.equals((Object)qName1));
      assertFalse(nameAttributeTest0.equals((Object)nameAttributeTest1));
      assertNotNull(precedingOrFollowingContext0);
      assertEquals("true:true", qName0.toString());
      assertEquals("true", qName0.getName());
      assertEquals("true", qName0.getPrefix());
      assertFalse(variableReference0.computeContextDependent());
      assertFalse(variableReference0.isContextDependent());
      assertEquals("=", nameAttributeTest0.getSymbol());
      assertTrue(nameAttributeTest0.computeContextDependent());
      assertEquals("<=", coreOperationLessThanOrEqual0.getSymbol());
      assertEquals(15, nodeTypeTest0.getNodeType());
      assertFalse(evalContext0.isChildOrderingRequired());
      assertEquals(0, evalContext0.getPosition());
      assertEquals(0, evalContext0.getDocumentOrder());
      assertEquals(1, precedingOrFollowingContext0.getDocumentOrder());
      assertTrue(precedingOrFollowingContext0.isChildOrderingRequired());
      assertEquals(0, precedingOrFollowingContext0.getPosition());
      assertEquals(3, expressionArray0.length);
      assertEquals(3, stepArray0.length);
      
      // Undeclared exception!
      coreFunction0.functionStartsWith(precedingOrFollowingContext0);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[2];
      Constant constant0 = new Constant("substring-after");
      assertNotNull(constant0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      
      expressionArray0[0] = (Expression) constant0;
      QName qName0 = new QName("substring-after", "substring-after");
      assertNotNull(qName0);
      assertEquals("substring-after:substring-after", qName0.toString());
      assertEquals("substring-after", qName0.getPrefix());
      assertEquals("substring-after", qName0.getName());
      
      ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, expressionArray0);
      assertNotNull(extensionFunction0);
      assertEquals("substring-after:substring-after", qName0.toString());
      assertEquals("substring-after", qName0.getPrefix());
      assertEquals("substring-after", qName0.getName());
      assertTrue(extensionFunction0.computeContextDependent());
      assertEquals(2, expressionArray0.length);
      
      expressionArray0[1] = (Expression) extensionFunction0;
      CoreFunction coreFunction0 = new CoreFunction(67, expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(67, coreFunction0.getFunctionCode());
      assertEquals(2, coreFunction0.getArgumentCount());
      assertEquals(2, expressionArray0.length);
      
      // Undeclared exception!
      coreFunction0.functionTrue((EvalContext) null);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      Expression[] expressionArray0 = new Expression[1];
      Step[] stepArray0 = new Step[6];
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("w#@K.,fQ[>f@2wq");
      assertNotNull(processingInstructionTest0);
      
      Step step0 = new Step(86, processingInstructionTest0, expressionArray0);
      assertNotNull(step0);
      assertEquals(86, step0.getAxis());
      assertEquals(1, expressionArray0.length);
      
      stepArray0[0] = step0;
      Expression[] expressionArray1 = new Expression[0];
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      
      Step step1 = new Step(86, processingInstructionTest0, expressionArray1);
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertFalse(step1.equals((Object)step0));
      assertNotNull(step1);
      assertEquals(86, step1.getAxis());
      assertEquals(0, expressionArray1.length);
      
      stepArray0[1] = step1;
      Step step2 = new Step(86, processingInstructionTest0, expressionArray1);
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertFalse(step2.equals((Object)step1));
      assertFalse(step2.equals((Object)step0));
      assertNotNull(step2);
      assertEquals(86, step2.getAxis());
      assertEquals(0, expressionArray1.length);
      
      stepArray0[2] = step2;
      Step step3 = new Step(91, processingInstructionTest0, expressionArray1);
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertFalse(step3.equals((Object)step0));
      assertFalse(step3.equals((Object)step1));
      assertFalse(step3.equals((Object)step2));
      assertNotNull(step3);
      assertEquals(91, step3.getAxis());
      assertEquals(0, expressionArray1.length);
      
      stepArray0[3] = step3;
      Step step4 = new Step(9, processingInstructionTest0, expressionArray1);
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertFalse(step4.equals((Object)step0));
      assertFalse(step4.equals((Object)step1));
      assertFalse(step4.equals((Object)step2));
      assertFalse(step4.equals((Object)step3));
      assertNotNull(step4);
      assertEquals(9, step4.getAxis());
      assertEquals(0, expressionArray1.length);
      
      stepArray0[4] = step4;
      Expression[] expressionArray2 = new Expression[0];
      assertFalse(expressionArray2.equals((Object)expressionArray1));
      assertFalse(expressionArray2.equals((Object)expressionArray0));
      
      Step step5 = new Step(462, processingInstructionTest0, expressionArray2);
      assertFalse(step5.equals((Object)step4));
      assertFalse(step5.equals((Object)step0));
      assertFalse(step5.equals((Object)step3));
      assertFalse(step5.equals((Object)step2));
      assertFalse(step5.equals((Object)step1));
      assertFalse(expressionArray2.equals((Object)expressionArray1));
      assertFalse(expressionArray2.equals((Object)expressionArray0));
      assertNotNull(step5);
      assertEquals(462, step5.getAxis());
      assertEquals(0, expressionArray2.length);
      
      stepArray0[5] = step5;
      LocationPath locationPath0 = new LocationPath(false, stepArray0);
      assertNotNull(locationPath0);
      assertFalse(locationPath0.isAbsolute());
      assertEquals(6, stepArray0.length);
      
      expressionArray0[0] = (Expression) locationPath0;
      CoreFunction coreFunction0 = new CoreFunction(462, expressionArray0);
      assertFalse(expressionArray0.equals((Object)expressionArray2));
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertNotNull(coreFunction0);
      assertEquals(462, coreFunction0.getFunctionCode());
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals(1, expressionArray0.length);
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl)JXPathContext.newContext((Object) step3);
      assertFalse(expressionArray1.equals((Object)expressionArray2));
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertFalse(step3.equals((Object)step5));
      assertFalse(step3.equals((Object)step0));
      assertFalse(step3.equals((Object)step1));
      assertFalse(step3.equals((Object)step2));
      assertFalse(step3.equals((Object)step4));
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertNotNull(jXPathContextReferenceImpl0);
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertEquals(91, step3.getAxis());
      assertEquals(0, expressionArray1.length);
      assertNotSame(expressionArray1, expressionArray2);
      assertNotSame(expressionArray1, expressionArray0);
      assertNotSame(step3, step5);
      assertNotSame(step3, step0);
      assertNotSame(step3, step1);
      assertNotSame(step3, step2);
      assertNotSame(step3, step4);
      
      DescendantContext descendantContext0 = new DescendantContext((EvalContext) null, false, processingInstructionTest0);
      assertNotNull(descendantContext0);
      assertEquals(0, descendantContext0.getPosition());
      assertTrue(descendantContext0.isChildOrderingRequired());
      assertEquals(0, descendantContext0.getDocumentOrder());
      
      QName qName0 = new QName("w#@K.,fQ[>f@2wq", "w#@K.,fQ[>f@2wq");
      assertNotNull(qName0);
      
      Locale locale0 = Locale.ITALIAN;
      assertNotNull(locale0);
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("it", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Country());
      assertEquals("it", locale0.toString());
      
      BeanPointer beanPointer0 = (BeanPointer)NodePointer.newNodePointer(qName0, step3, locale0);
      assertFalse(expressionArray1.equals((Object)expressionArray2));
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertFalse(step3.equals((Object)step5));
      assertFalse(step3.equals((Object)step0));
      assertFalse(step3.equals((Object)step1));
      assertFalse(step3.equals((Object)step2));
      assertFalse(step3.equals((Object)step4));
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(beanPointer0);
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("it", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Country());
      assertEquals("it", locale0.toString());
      assertFalse(beanPointer0.isCollection());
      assertFalse(beanPointer0.isAttribute());
      assertFalse(beanPointer0.isDynamicPropertyDeclarationSupported());
      assertTrue(beanPointer0.isNode());
      assertNull(beanPointer0.getNamespaceURI());
      assertTrue(beanPointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, beanPointer0.getIndex());
      assertEquals(1, beanPointer0.getLength());
      assertFalse(beanPointer0.isContainer());
      assertEquals(91, step3.getAxis());
      assertEquals(0, expressionArray1.length);
      assertNotSame(expressionArray1, expressionArray2);
      assertNotSame(expressionArray1, expressionArray0);
      assertNotSame(step3, step5);
      assertNotSame(step3, step0);
      assertNotSame(step3, step1);
      assertNotSame(step3, step2);
      assertNotSame(step3, step4);
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl1 = new JXPathContextReferenceImpl(jXPathContextReferenceImpl0, descendantContext0, beanPointer0);
      assertFalse(expressionArray1.equals((Object)expressionArray2));
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl0));
      assertFalse(step3.equals((Object)step5));
      assertFalse(step3.equals((Object)step0));
      assertFalse(step3.equals((Object)step1));
      assertFalse(step3.equals((Object)step2));
      assertFalse(step3.equals((Object)step4));
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertNotNull(jXPathContextReferenceImpl1);
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertEquals(0, descendantContext0.getPosition());
      assertTrue(descendantContext0.isChildOrderingRequired());
      assertEquals(0, descendantContext0.getDocumentOrder());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("it", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Country());
      assertEquals("it", locale0.toString());
      assertFalse(beanPointer0.isCollection());
      assertFalse(beanPointer0.isAttribute());
      assertFalse(beanPointer0.isDynamicPropertyDeclarationSupported());
      assertTrue(beanPointer0.isNode());
      assertNull(beanPointer0.getNamespaceURI());
      assertTrue(beanPointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, beanPointer0.getIndex());
      assertEquals(1, beanPointer0.getLength());
      assertFalse(beanPointer0.isContainer());
      assertFalse(jXPathContextReferenceImpl1.isLenient());
      assertEquals(91, step3.getAxis());
      assertEquals(0, expressionArray1.length);
      
      RootContext rootContext0 = new RootContext(jXPathContextReferenceImpl1, beanPointer0);
      assertFalse(jXPathContextReferenceImpl0.equals((Object)jXPathContextReferenceImpl1));
      assertFalse(expressionArray1.equals((Object)expressionArray2));
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl0));
      assertFalse(step3.equals((Object)step5));
      assertFalse(step3.equals((Object)step0));
      assertFalse(step3.equals((Object)step1));
      assertFalse(step3.equals((Object)step2));
      assertFalse(step3.equals((Object)step4));
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertNotNull(rootContext0);
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertEquals(0, descendantContext0.getPosition());
      assertTrue(descendantContext0.isChildOrderingRequired());
      assertEquals(0, descendantContext0.getDocumentOrder());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("it", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Country());
      assertEquals("it", locale0.toString());
      assertFalse(beanPointer0.isCollection());
      assertFalse(beanPointer0.isAttribute());
      assertFalse(beanPointer0.isDynamicPropertyDeclarationSupported());
      assertTrue(beanPointer0.isNode());
      assertNull(beanPointer0.getNamespaceURI());
      assertTrue(beanPointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, beanPointer0.getIndex());
      assertEquals(1, beanPointer0.getLength());
      assertFalse(beanPointer0.isContainer());
      assertFalse(jXPathContextReferenceImpl1.isLenient());
      assertEquals(0, rootContext0.getPosition());
      assertEquals(0, rootContext0.getDocumentOrder());
      assertFalse(rootContext0.isChildOrderingRequired());
      assertEquals(91, step3.getAxis());
      assertEquals(0, expressionArray1.length);
      
      Double double0 = (Double)coreFunction0.functionCount(rootContext0);
      assertFalse(expressionArray0.equals((Object)expressionArray2));
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertFalse(expressionArray1.equals((Object)expressionArray2));
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertFalse(step3.equals((Object)step5));
      assertFalse(step3.equals((Object)step0));
      assertFalse(step3.equals((Object)step1));
      assertFalse(step3.equals((Object)step2));
      assertFalse(step3.equals((Object)step4));
      assertFalse(jXPathContextReferenceImpl0.equals((Object)jXPathContextReferenceImpl1));
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl0));
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(0.0, (double)double0, 0.01);
      assertNotNull(double0);
      assertEquals(462, coreFunction0.getFunctionCode());
      assertEquals(1, coreFunction0.getArgumentCount());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertEquals(0, descendantContext0.getPosition());
      assertTrue(descendantContext0.isChildOrderingRequired());
      assertEquals(0, descendantContext0.getDocumentOrder());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("it", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Country());
      assertEquals("it", locale0.toString());
      assertFalse(beanPointer0.isCollection());
      assertFalse(beanPointer0.isAttribute());
      assertFalse(beanPointer0.isDynamicPropertyDeclarationSupported());
      assertTrue(beanPointer0.isNode());
      assertNull(beanPointer0.getNamespaceURI());
      assertTrue(beanPointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, beanPointer0.getIndex());
      assertEquals(1, beanPointer0.getLength());
      assertFalse(beanPointer0.isContainer());
      assertFalse(jXPathContextReferenceImpl1.isLenient());
      assertEquals(0, rootContext0.getPosition());
      assertEquals(0, rootContext0.getDocumentOrder());
      assertFalse(rootContext0.isChildOrderingRequired());
      assertEquals(91, step3.getAxis());
      assertEquals(1, expressionArray0.length);
      assertEquals(0, expressionArray1.length);
      assertNotSame(expressionArray0, expressionArray2);
      assertNotSame(expressionArray0, expressionArray1);
      assertNotSame(expressionArray1, expressionArray2);
      assertNotSame(expressionArray1, expressionArray0);
      assertNotSame(step3, step5);
      assertNotSame(step3, step0);
      assertNotSame(step3, step1);
      assertNotSame(step3, step2);
      assertNotSame(step3, step4);
      assertNotSame(jXPathContextReferenceImpl0, jXPathContextReferenceImpl1);
      assertNotSame(jXPathContextReferenceImpl1, jXPathContextReferenceImpl0);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[2];
      Constant constant0 = new Constant("substring-before");
      assertNotNull(constant0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      
      CoreOperationMod coreOperationMod0 = new CoreOperationMod(constant0, constant0);
      assertNotNull(coreOperationMod0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertEquals("mod", coreOperationMod0.getSymbol());
      
      expressionArray0[0] = (Expression) coreOperationMod0;
      boolean boolean0 = coreOperationMod0.computeContextDependent();
      assertFalse(boolean0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertEquals("mod", coreOperationMod0.getSymbol());
      
      CoreOperationDivide coreOperationDivide0 = new CoreOperationDivide(coreOperationMod0, coreOperationMod0);
      assertNotNull(coreOperationDivide0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertEquals("mod", coreOperationMod0.getSymbol());
      assertEquals("div", coreOperationDivide0.getSymbol());
      
      expressionArray0[1] = (Expression) coreOperationDivide0;
      CoreFunction coreFunction0 = new CoreFunction(70, expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(70, coreFunction0.getFunctionCode());
      assertEquals(2, coreFunction0.getArgumentCount());
      assertEquals(2, expressionArray0.length);
      
      EvalContext evalContext0 = null;
      // Undeclared exception!
//      try { 
        coreFunction0.functionSubstringBefore((EvalContext) null);
//        fail("Expecting exception: ArithmeticException");
      
//      } catch(ArithmeticException e) {
//         //
//         // / by zero
//         //
//         verifyException("org.apache.commons.jxpath.ri.compiler.CoreOperationMod", e);
//      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Short short0 = new Short((short)2486);
      assertEquals((short)2486, (short)short0);
      assertNotNull(short0);
      
      Constant constant0 = new Constant(short0);
      assertNotNull(constant0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      
      Expression[] expressionArray0 = new Expression[2];
      expressionArray0[0] = (Expression) constant0;
      expressionArray0[1] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction((-4), expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(2, coreFunction0.getArgumentCount());
      assertEquals((-4), coreFunction0.getFunctionCode());
      assertEquals(2, expressionArray0.length);
      
      Object object0 = coreFunction0.functionStartsWith((EvalContext) null);
      assertEquals(true, object0);
      assertNotNull(object0);
      assertEquals(2, coreFunction0.getArgumentCount());
      assertEquals((-4), coreFunction0.getFunctionCode());
      assertEquals(2, expressionArray0.length);
      
      Object object1 = coreFunction0.functionConcat((EvalContext) null);
      assertEquals("24862486", object1);
      assertNotNull(object1);
      assertEquals(2, coreFunction0.getArgumentCount());
      assertEquals((-4), coreFunction0.getFunctionCode());
      assertEquals(2, expressionArray0.length);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(12, (Expression[]) null);
      assertNotNull(coreFunction0);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(12, coreFunction0.getFunctionCode());
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl)JXPathContext.newContext((Object) coreFunction0);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertNotNull(jXPathContextReferenceImpl0);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(12, coreFunction0.getFunctionCode());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      
      CoreFunction coreFunction1 = new CoreFunction(12, (Expression[]) null);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertNotNull(coreFunction1);
      assertEquals(12, coreFunction1.getFunctionCode());
      assertEquals(0, coreFunction1.getArgumentCount());
      
      BasicVariables basicVariables0 = new BasicVariables();
      assertNotNull(basicVariables0);
      
      QName qName0 = new QName("39");
      assertNotNull(qName0);
      assertEquals("39", qName0.toString());
      assertEquals("39", qName0.getName());
      assertNull(qName0.getPrefix());
      
      VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(variablePointer0);
      assertEquals("39", qName0.toString());
      assertEquals("39", qName0.getName());
      assertNull(qName0.getPrefix());
      assertTrue(variablePointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
      assertTrue(variablePointer0.isActual());
      assertFalse(variablePointer0.isAttribute());
      assertTrue(variablePointer0.isRoot());
      assertFalse(variablePointer0.isNode());
      assertNull(variablePointer0.getNamespaceURI());
      
      RootContext rootContext0 = new RootContext(jXPathContextReferenceImpl0, variablePointer0);
      assertFalse(coreFunction0.equals((Object)coreFunction1));
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(rootContext0);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(12, coreFunction0.getFunctionCode());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertEquals("39", qName0.toString());
      assertEquals("39", qName0.getName());
      assertNull(qName0.getPrefix());
      assertTrue(variablePointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
      assertTrue(variablePointer0.isActual());
      assertFalse(variablePointer0.isAttribute());
      assertTrue(variablePointer0.isRoot());
      assertFalse(variablePointer0.isNode());
      assertNull(variablePointer0.getNamespaceURI());
      assertFalse(rootContext0.isChildOrderingRequired());
      assertEquals(0, rootContext0.getDocumentOrder());
      assertEquals(0, rootContext0.getPosition());
      
      // Undeclared exception!
//      try { 
        coreFunction1.functionStringLength(rootContext0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // No such variable: '39'
//         //
//         verifyException("org.apache.commons.jxpath.BasicVariables", e);
//      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Short short0 = new Short((short)2486);
      assertEquals((short)2486, (short)short0);
      assertNotNull(short0);
      
      Constant constant0 = new Constant(short0);
      assertNotNull(constant0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      
      Expression[] expressionArray0 = new Expression[2];
      expressionArray0[0] = (Expression) constant0;
      expressionArray0[1] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction(10, expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(2, coreFunction0.getArgumentCount());
      assertEquals(10, coreFunction0.getFunctionCode());
      assertEquals(2, expressionArray0.length);
      
      Object object0 = coreFunction0.functionContains((EvalContext) null);
      assertEquals(true, object0);
      assertNotNull(object0);
      assertEquals(2, coreFunction0.getArgumentCount());
      assertEquals(10, coreFunction0.getFunctionCode());
      assertEquals(2, expressionArray0.length);
      
      Object object1 = coreFunction0.functionConcat((EvalContext) null);
      assertEquals("24862486", object1);
      assertNotNull(object1);
      assertEquals(2, coreFunction0.getArgumentCount());
      assertEquals(10, coreFunction0.getFunctionCode());
      assertEquals(2, expressionArray0.length);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Double double0 = Expression.ZERO;
      assertEquals(0.0, (double)double0, 0.01);
      assertNotNull(double0);
      
      Constant constant0 = new Constant(double0);
      assertNotNull(constant0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      
      Short short0 = new Short((short)3341);
      assertEquals((short)3341, (short)short0);
      assertNotNull(short0);
      
      Constant constant1 = new Constant(double0);
      assertFalse(constant1.equals((Object)constant0));
      assertNotNull(constant1);
      assertFalse(constant1.computeContextDependent());
      assertFalse(constant1.isContextDependent());
      
      Expression[] expressionArray0 = new Expression[1];
      expressionArray0[0] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction((short)3341, expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals(3341, coreFunction0.getFunctionCode());
      assertEquals(1, expressionArray0.length);
      
      Object object0 = coreFunction0.functionBoolean((EvalContext) null);
      assertEquals(false, object0);
      assertNotNull(object0);
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals(3341, coreFunction0.getFunctionCode());
      assertEquals(1, expressionArray0.length);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[8];
      Step[] stepArray0 = new Step[3];
      QName qName0 = new QName("%9y");
      assertNotNull(qName0);
      assertEquals("%9y", qName0.toString());
      assertEquals("%9y", qName0.getName());
      assertNull(qName0.getPrefix());
      
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
      assertNotNull(nodeNameTest0);
      assertEquals("%9y", qName0.toString());
      assertEquals("%9y", qName0.getName());
      assertNull(qName0.getPrefix());
      assertEquals("%9y", nodeNameTest0.toString());
      assertFalse(nodeNameTest0.isWildcard());
      assertNull(nodeNameTest0.getNamespaceURI());
      
      Step step0 = new Step((-1925), nodeNameTest0, expressionArray0);
      assertNotNull(step0);
      assertEquals("%9y", qName0.toString());
      assertEquals("%9y", qName0.getName());
      assertNull(qName0.getPrefix());
      assertEquals("%9y", nodeNameTest0.toString());
      assertFalse(nodeNameTest0.isWildcard());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertEquals((-1925), step0.getAxis());
      assertEquals(8, expressionArray0.length);
      
      stepArray0[0] = step0;
      Step step1 = new Step(128, nodeNameTest0, expressionArray0);
      assertFalse(step1.equals((Object)step0));
      assertNotNull(step1);
      assertEquals("%9y", qName0.toString());
      assertEquals("%9y", qName0.getName());
      assertNull(qName0.getPrefix());
      assertEquals("%9y", nodeNameTest0.toString());
      assertFalse(nodeNameTest0.isWildcard());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertEquals(128, step1.getAxis());
      assertEquals(8, expressionArray0.length);
      
      stepArray0[1] = step1;
      Step step2 = new Step((-1954), nodeNameTest0, expressionArray0);
      assertFalse(step2.equals((Object)step1));
      assertFalse(step2.equals((Object)step0));
      assertNotNull(step2);
      assertEquals("%9y", qName0.toString());
      assertEquals("%9y", qName0.getName());
      assertNull(qName0.getPrefix());
      assertEquals("%9y", nodeNameTest0.toString());
      assertFalse(nodeNameTest0.isWildcard());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertEquals((-1954), step2.getAxis());
      assertEquals(8, expressionArray0.length);
      
      stepArray0[2] = step2;
      LocationPath locationPath0 = new LocationPath(true, stepArray0);
      assertNotNull(locationPath0);
      assertTrue(locationPath0.isAbsolute());
      assertEquals(3, stepArray0.length);
      
      expressionArray0[0] = (Expression) locationPath0;
      Expression[] expressionArray1 = new Expression[0];
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      
      ExpressionPath expressionPath0 = new ExpressionPath(expressionArray0[0], expressionArray1, stepArray0);
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertNotNull(expressionPath0);
      assertEquals(8, expressionArray0.length);
      assertEquals(3, stepArray0.length);
      assertEquals(0, expressionArray1.length);
      
      expressionArray0[1] = (Expression) expressionPath0;
      CoreOperationGreaterThanOrEqual coreOperationGreaterThanOrEqual0 = new CoreOperationGreaterThanOrEqual(expressionArray0[0], expressionArray0[0]);
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertNotNull(coreOperationGreaterThanOrEqual0);
      assertEquals(">=", coreOperationGreaterThanOrEqual0.getSymbol());
      assertEquals(8, expressionArray0.length);
      
      expressionArray0[2] = (Expression) coreOperationGreaterThanOrEqual0;
      LocationPath locationPath1 = new LocationPath(true, stepArray0);
      assertFalse(locationPath1.equals((Object)locationPath0));
      assertNotNull(locationPath1);
      assertTrue(locationPath1.isAbsolute());
      assertEquals(3, stepArray0.length);
      
      expressionArray0[3] = (Expression) locationPath1;
      LocationPath locationPath2 = new LocationPath(true, stepArray0);
      assertFalse(locationPath2.equals((Object)locationPath0));
      assertFalse(locationPath2.equals((Object)locationPath1));
      assertNotNull(locationPath2);
      assertTrue(locationPath2.isAbsolute());
      assertEquals(3, stepArray0.length);
      
      expressionArray0[4] = (Expression) locationPath2;
      Constant constant0 = new Constant("-g{1Fnk)M U(M\"We");
      assertNotNull(constant0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      
      expressionArray0[5] = (Expression) constant0;
      VariableReference variableReference0 = new VariableReference(qName0);
      assertNotNull(variableReference0);
      assertEquals("%9y", qName0.toString());
      assertEquals("%9y", qName0.getName());
      assertNull(qName0.getPrefix());
      assertFalse(variableReference0.isContextDependent());
      assertFalse(variableReference0.computeContextDependent());
      
      expressionArray0[6] = (Expression) variableReference0;
      CoreOperationUnion coreOperationUnion0 = new CoreOperationUnion(expressionArray0);
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertNotNull(coreOperationUnion0);
      assertEquals("|", coreOperationUnion0.getSymbol());
      assertEquals(8, expressionArray0.length);
      
      expressionArray0[7] = (Expression) coreOperationUnion0;
      CoreFunction coreFunction0 = new CoreFunction((-1925), expressionArray0);
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertNotNull(coreFunction0);
      assertEquals(8, coreFunction0.getArgumentCount());
      assertEquals((-1925), coreFunction0.getFunctionCode());
      assertEquals(8, expressionArray0.length);
      
      // Undeclared exception!
//      try { 
        coreFunction0.functionFloor((EvalContext) null);
//        fail("Expecting exception: StackOverflowError");
      
//      } catch(StackOverflowError e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Short short0 = new Short((short)2486);
      assertEquals((short)2486, (short)short0);
      assertNotNull(short0);
      
      Constant constant0 = new Constant(short0);
      assertNotNull(constant0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      
      Expression[] expressionArray0 = new Expression[2];
      expressionArray0[0] = (Expression) constant0;
      expressionArray0[1] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction(10, expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(2, coreFunction0.getArgumentCount());
      assertEquals(10, coreFunction0.getFunctionCode());
      assertEquals(2, expressionArray0.length);
      
      Object object0 = coreFunction0.functionConcat((EvalContext) null);
      assertEquals("24862486", object0);
      assertNotNull(object0);
      assertEquals(2, coreFunction0.getArgumentCount());
      assertEquals(10, coreFunction0.getFunctionCode());
      assertEquals(2, expressionArray0.length);
      
      Object object1 = coreFunction0.functionSubstringBefore((EvalContext) null);
      assertFalse(object1.equals((Object)object0));
      assertEquals("", object1);
      assertNotNull(object1);
      assertEquals(2, coreFunction0.getArgumentCount());
      assertEquals(10, coreFunction0.getFunctionCode());
      assertEquals(2, expressionArray0.length);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction((-8), (Expression[]) null);
      assertNotNull(coreFunction0);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals((-8), coreFunction0.getFunctionCode());
      
      CoreFunction coreFunction1 = new CoreFunction(282, (Expression[]) null);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertNotNull(coreFunction1);
      assertEquals(282, coreFunction1.getFunctionCode());
      assertEquals(0, coreFunction1.getArgumentCount());
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl)JXPathContext.newContext((Object) coreFunction0);
      assertFalse(coreFunction0.equals((Object)coreFunction1));
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertNotNull(jXPathContextReferenceImpl0);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals((-8), coreFunction0.getFunctionCode());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertNotSame(coreFunction0, coreFunction1);
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl1 = new JXPathContextReferenceImpl(jXPathContextReferenceImpl0, coreFunction0, (Pointer) null);
      assertFalse(coreFunction0.equals((Object)coreFunction1));
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl0));
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertNotNull(jXPathContextReferenceImpl1);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals((-8), coreFunction0.getFunctionCode());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertFalse(jXPathContextReferenceImpl1.isLenient());
      
      QName qName0 = new QName("&7CoaU@{xxT/kYx");
      assertNotNull(qName0);
      assertEquals("&7CoaU@{xxT/kYx", qName0.getName());
      assertEquals("&7CoaU@{xxT/kYx", qName0.toString());
      assertNull(qName0.getPrefix());
      
      VariablePointer variablePointer0 = new VariablePointer(qName0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(variablePointer0);
      assertEquals("&7CoaU@{xxT/kYx", qName0.getName());
      assertEquals("&7CoaU@{xxT/kYx", qName0.toString());
      assertNull(qName0.getPrefix());
      assertFalse(variablePointer0.isActual());
      assertTrue(variablePointer0.isContainer());
      assertFalse(variablePointer0.isAttribute());
      assertFalse(variablePointer0.isNode());
      assertNull(variablePointer0.getNamespaceURI());
      assertTrue(variablePointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
      
      RootContext rootContext0 = new RootContext(jXPathContextReferenceImpl1, variablePointer0);
      assertFalse(coreFunction0.equals((Object)coreFunction1));
      assertFalse(jXPathContextReferenceImpl0.equals((Object)jXPathContextReferenceImpl1));
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl0));
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(rootContext0);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals((-8), coreFunction0.getFunctionCode());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertFalse(jXPathContextReferenceImpl1.isLenient());
      assertEquals("&7CoaU@{xxT/kYx", qName0.getName());
      assertEquals("&7CoaU@{xxT/kYx", qName0.toString());
      assertNull(qName0.getPrefix());
      assertFalse(variablePointer0.isActual());
      assertTrue(variablePointer0.isContainer());
      assertFalse(variablePointer0.isAttribute());
      assertFalse(variablePointer0.isNode());
      assertNull(variablePointer0.getNamespaceURI());
      assertTrue(variablePointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
      assertFalse(rootContext0.isChildOrderingRequired());
      assertEquals(0, rootContext0.getDocumentOrder());
      assertEquals(0, rootContext0.getPosition());
      
      PredicateContext predicateContext0 = new PredicateContext(rootContext0, coreFunction1);
      assertFalse(coreFunction0.equals((Object)coreFunction1));
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertFalse(jXPathContextReferenceImpl0.equals((Object)jXPathContextReferenceImpl1));
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl0));
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(predicateContext0);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals((-8), coreFunction0.getFunctionCode());
      assertEquals(282, coreFunction1.getFunctionCode());
      assertEquals(0, coreFunction1.getArgumentCount());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertFalse(jXPathContextReferenceImpl1.isLenient());
      assertEquals("&7CoaU@{xxT/kYx", qName0.getName());
      assertEquals("&7CoaU@{xxT/kYx", qName0.toString());
      assertNull(qName0.getPrefix());
      assertFalse(variablePointer0.isActual());
      assertTrue(variablePointer0.isContainer());
      assertFalse(variablePointer0.isAttribute());
      assertFalse(variablePointer0.isNode());
      assertNull(variablePointer0.getNamespaceURI());
      assertTrue(variablePointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
      assertFalse(rootContext0.isChildOrderingRequired());
      assertEquals(0, rootContext0.getDocumentOrder());
      assertEquals(0, rootContext0.getPosition());
      assertEquals(0, predicateContext0.getPosition());
      assertEquals(0, predicateContext0.getDocumentOrder());
      assertFalse(predicateContext0.isChildOrderingRequired());
      
      // Undeclared exception!
//      try { 
        coreFunction1.functionLocalName(predicateContext0);
//        fail("Expecting exception: UnsupportedOperationException");
      
//      } catch(UnsupportedOperationException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.jxpath.ri.axes.RootContext", e);
//      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Long long0 = new Long(3760L);
      assertEquals(3760L, (long)long0);
      assertNotNull(long0);
      
      Constant constant0 = new Constant(long0);
      assertNotNull(constant0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      
      CoreOperationGreaterThan coreOperationGreaterThan0 = new CoreOperationGreaterThan(constant0, constant0);
      assertNotNull(coreOperationGreaterThan0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertEquals(">", coreOperationGreaterThan0.getSymbol());
      
      Expression[] expressionArray0 = new Expression[3];
      expressionArray0[0] = (Expression) constant0;
      expressionArray0[1] = (Expression) coreOperationGreaterThan0;
      expressionArray0[2] = (Expression) coreOperationGreaterThan0;
      CoreFunction coreFunction0 = new CoreFunction(4096, expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(3, coreFunction0.getArgumentCount());
      assertEquals(4096, coreFunction0.getFunctionCode());
      assertEquals(3, expressionArray0.length);
      
      Object object0 = coreFunction0.functionSubstring((EvalContext) null);
      assertEquals("3", object0);
      assertNotNull(object0);
      assertEquals(3, coreFunction0.getArgumentCount());
      assertEquals(4096, coreFunction0.getFunctionCode());
      assertEquals(3, expressionArray0.length);
      
      Object object1 = coreFunction0.functionTranslate((EvalContext) null);
      assertFalse(object1.equals((Object)object0));
      assertEquals("3760", object1);
      assertNotNull(object1);
      assertEquals(3, coreFunction0.getArgumentCount());
      assertEquals(4096, coreFunction0.getFunctionCode());
      assertEquals(3, expressionArray0.length);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Long long0 = new Long(3760L);
      assertEquals(3760L, (long)long0);
      assertNotNull(long0);
      
      Constant constant0 = new Constant((Number) null);
      assertNotNull(constant0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      
      CoreOperationGreaterThan coreOperationGreaterThan0 = new CoreOperationGreaterThan(constant0, constant0);
      assertNotNull(coreOperationGreaterThan0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertEquals(">", coreOperationGreaterThan0.getSymbol());
      
      Expression[] expressionArray0 = new Expression[3];
      expressionArray0[0] = (Expression) constant0;
      expressionArray0[1] = (Expression) coreOperationGreaterThan0;
      expressionArray0[2] = (Expression) coreOperationGreaterThan0;
      CoreFunction coreFunction0 = new CoreFunction(4121, expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(3, coreFunction0.getArgumentCount());
      assertEquals(4121, coreFunction0.getFunctionCode());
      assertEquals(3, expressionArray0.length);
      
      Object object0 = coreFunction0.functionSubstring((EvalContext) null);
      assertEquals("", object0);
      assertNotNull(object0);
      assertEquals(3, coreFunction0.getArgumentCount());
      assertEquals(4121, coreFunction0.getFunctionCode());
      assertEquals(3, expressionArray0.length);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Long long0 = new Long(3760L);
      assertEquals(3760L, (long)long0);
      assertNotNull(long0);
      
      Constant constant0 = new Constant(long0);
      assertNotNull(constant0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      
      CoreOperationGreaterThan coreOperationGreaterThan0 = new CoreOperationGreaterThan(constant0, constant0);
      assertNotNull(coreOperationGreaterThan0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertEquals(">", coreOperationGreaterThan0.getSymbol());
      
      Expression[] expressionArray0 = new Expression[3];
      expressionArray0[0] = (Expression) constant0;
      expressionArray0[1] = (Expression) coreOperationGreaterThan0;
      expressionArray0[2] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction(4096, expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(3, coreFunction0.getArgumentCount());
      assertEquals(4096, coreFunction0.getFunctionCode());
      assertEquals(3, expressionArray0.length);
      
      Object object0 = coreFunction0.functionSubstring((EvalContext) null);
      assertEquals("3760", object0);
      assertNotNull(object0);
      assertEquals(3, coreFunction0.getArgumentCount());
      assertEquals(4096, coreFunction0.getFunctionCode());
      assertEquals(3, expressionArray0.length);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      EvalContext evalContext0 = null;
      Double double0 = Expression.ZERO;
      assertEquals(0.0, (double)double0, 0.01);
      assertNotNull(double0);
      
      Constant constant0 = new Constant(double0);
      assertNotNull(constant0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      
      Expression[] expressionArray0 = new Expression[3];
      expressionArray0[0] = (Expression) constant0;
      expressionArray0[1] = (Expression) constant0;
      CoreOperationSubtract coreOperationSubtract0 = new CoreOperationSubtract(constant0, expressionArray0[0]);
      assertNotNull(coreOperationSubtract0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertEquals("-", coreOperationSubtract0.getSymbol());
      assertEquals(3, expressionArray0.length);
      
      expressionArray0[2] = (Expression) coreOperationSubtract0;
      CoreFunction coreFunction0 = new CoreFunction((-643), expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(3, coreFunction0.getArgumentCount());
      assertEquals((-643), coreFunction0.getFunctionCode());
      assertEquals(3, expressionArray0.length);
      
      Object object0 = coreFunction0.functionSubstring((EvalContext) null);
      assertEquals("", object0);
      assertNotNull(object0);
      assertEquals(3, coreFunction0.getArgumentCount());
      assertEquals((-643), coreFunction0.getFunctionCode());
      assertEquals(3, expressionArray0.length);
      
      // Undeclared exception!
//      try { 
        coreFunction0.functionContains((EvalContext) null);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // Incorrect number of arguments: unknownFunction-643()(0, 0, org.apache.commons.jxpath.ri.compiler.Constant@0000000001 - org.apache.commons.jxpath.ri.compiler.Constant@0000000001)
//         //
//         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[2];
      CoreOperationOr coreOperationOr0 = new CoreOperationOr(expressionArray0);
      assertNotNull(coreOperationOr0);
      assertEquals("or", coreOperationOr0.getSymbol());
      assertEquals(2, expressionArray0.length);
      
      CoreOperationLessThan coreOperationLessThan0 = new CoreOperationLessThan(coreOperationOr0, coreOperationOr0);
      assertNotNull(coreOperationLessThan0);
      assertEquals("or", coreOperationOr0.getSymbol());
      assertEquals("<", coreOperationLessThan0.getSymbol());
      assertEquals(2, expressionArray0.length);
      
      expressionArray0[0] = (Expression) coreOperationLessThan0;
      Step[] stepArray0 = new Step[9];
      QName qName0 = new QName(";!tS~{^zYT>d,/3'", ";!tS~{^zYT>d,/3'");
      assertNotNull(qName0);
      assertEquals(";!tS~{^zYT>d,/3'", qName0.getName());
      assertEquals(";!tS~{^zYT>d,/3':;!tS~{^zYT>d,/3'", qName0.toString());
      assertEquals(";!tS~{^zYT>d,/3'", qName0.getPrefix());
      
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, ";!tS~{^zYT>d,/3'");
      assertNotNull(nodeNameTest0);
      assertEquals(";!tS~{^zYT>d,/3'", qName0.getName());
      assertEquals(";!tS~{^zYT>d,/3':;!tS~{^zYT>d,/3'", qName0.toString());
      assertEquals(";!tS~{^zYT>d,/3'", qName0.getPrefix());
      assertEquals(";!tS~{^zYT>d,/3'", nodeNameTest0.getNamespaceURI());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals(";!tS~{^zYT>d,/3':;!tS~{^zYT>d,/3'", nodeNameTest0.toString());
      
      Step step0 = new Step(9, nodeNameTest0, expressionArray0);
      assertNotNull(step0);
      assertEquals(";!tS~{^zYT>d,/3'", qName0.getName());
      assertEquals(";!tS~{^zYT>d,/3':;!tS~{^zYT>d,/3'", qName0.toString());
      assertEquals(";!tS~{^zYT>d,/3'", qName0.getPrefix());
      assertEquals(";!tS~{^zYT>d,/3'", nodeNameTest0.getNamespaceURI());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals(";!tS~{^zYT>d,/3':;!tS~{^zYT>d,/3'", nodeNameTest0.toString());
      assertEquals(9, step0.getAxis());
      assertEquals(2, expressionArray0.length);
      
      stepArray0[0] = step0;
      Step step1 = new Step(9, nodeNameTest0, expressionArray0);
      assertFalse(step1.equals((Object)step0));
      assertNotNull(step1);
      assertEquals(";!tS~{^zYT>d,/3'", qName0.getName());
      assertEquals(";!tS~{^zYT>d,/3':;!tS~{^zYT>d,/3'", qName0.toString());
      assertEquals(";!tS~{^zYT>d,/3'", qName0.getPrefix());
      assertEquals(";!tS~{^zYT>d,/3'", nodeNameTest0.getNamespaceURI());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals(";!tS~{^zYT>d,/3':;!tS~{^zYT>d,/3'", nodeNameTest0.toString());
      assertEquals(9, step1.getAxis());
      assertEquals(2, expressionArray0.length);
      
      stepArray0[1] = step1;
      Step step2 = new Step(2437, nodeNameTest0, expressionArray0);
      assertFalse(step2.equals((Object)step0));
      assertFalse(step2.equals((Object)step1));
      assertNotNull(step2);
      assertEquals(";!tS~{^zYT>d,/3'", qName0.getName());
      assertEquals(";!tS~{^zYT>d,/3':;!tS~{^zYT>d,/3'", qName0.toString());
      assertEquals(";!tS~{^zYT>d,/3'", qName0.getPrefix());
      assertEquals(";!tS~{^zYT>d,/3'", nodeNameTest0.getNamespaceURI());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals(";!tS~{^zYT>d,/3':;!tS~{^zYT>d,/3'", nodeNameTest0.toString());
      assertEquals(2437, step2.getAxis());
      assertEquals(2, expressionArray0.length);
      
      stepArray0[2] = step2;
      NodeNameTest nodeNameTest1 = new NodeNameTest(qName0, "6+q,]Y>)Xe");
      assertFalse(nodeNameTest1.equals((Object)nodeNameTest0));
      assertNotNull(nodeNameTest1);
      assertEquals(";!tS~{^zYT>d,/3'", qName0.getName());
      assertEquals(";!tS~{^zYT>d,/3':;!tS~{^zYT>d,/3'", qName0.toString());
      assertEquals(";!tS~{^zYT>d,/3'", qName0.getPrefix());
      assertFalse(nodeNameTest1.isWildcard());
      assertEquals("6+q,]Y>)Xe", nodeNameTest1.getNamespaceURI());
      assertEquals(";!tS~{^zYT>d,/3':;!tS~{^zYT>d,/3'", nodeNameTest1.toString());
      
      Step step3 = new Step(9, nodeNameTest1, expressionArray0);
      assertFalse(nodeNameTest1.equals((Object)nodeNameTest0));
      assertFalse(step3.equals((Object)step2));
      assertFalse(step3.equals((Object)step1));
      assertFalse(step3.equals((Object)step0));
      assertNotNull(step3);
      assertEquals(";!tS~{^zYT>d,/3'", qName0.getName());
      assertEquals(";!tS~{^zYT>d,/3':;!tS~{^zYT>d,/3'", qName0.toString());
      assertEquals(";!tS~{^zYT>d,/3'", qName0.getPrefix());
      assertFalse(nodeNameTest1.isWildcard());
      assertEquals("6+q,]Y>)Xe", nodeNameTest1.getNamespaceURI());
      assertEquals(";!tS~{^zYT>d,/3':;!tS~{^zYT>d,/3'", nodeNameTest1.toString());
      assertEquals(9, step3.getAxis());
      assertEquals(2, expressionArray0.length);
      
      stepArray0[3] = step3;
      Step step4 = new Step(898, nodeNameTest0, expressionArray0);
      assertFalse(step4.equals((Object)step1));
      assertFalse(step4.equals((Object)step3));
      assertFalse(step4.equals((Object)step0));
      assertFalse(step4.equals((Object)step2));
      assertFalse(nodeNameTest0.equals((Object)nodeNameTest1));
      assertNotNull(step4);
      assertEquals(898, step4.getAxis());
      assertEquals(";!tS~{^zYT>d,/3'", qName0.getName());
      assertEquals(";!tS~{^zYT>d,/3':;!tS~{^zYT>d,/3'", qName0.toString());
      assertEquals(";!tS~{^zYT>d,/3'", qName0.getPrefix());
      assertEquals(";!tS~{^zYT>d,/3'", nodeNameTest0.getNamespaceURI());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals(";!tS~{^zYT>d,/3':;!tS~{^zYT>d,/3'", nodeNameTest0.toString());
      assertEquals(2, expressionArray0.length);
      
      stepArray0[4] = step4;
      Step step5 = new Step(94, nodeNameTest1, expressionArray0);
      assertFalse(step5.equals((Object)step2));
      assertFalse(step5.equals((Object)step1));
      assertFalse(step5.equals((Object)step0));
      assertFalse(step5.equals((Object)step3));
      assertFalse(step5.equals((Object)step4));
      assertFalse(nodeNameTest1.equals((Object)nodeNameTest0));
      assertNotNull(step5);
      assertEquals(94, step5.getAxis());
      assertEquals(";!tS~{^zYT>d,/3'", qName0.getName());
      assertEquals(";!tS~{^zYT>d,/3':;!tS~{^zYT>d,/3'", qName0.toString());
      assertEquals(";!tS~{^zYT>d,/3'", qName0.getPrefix());
      assertFalse(nodeNameTest1.isWildcard());
      assertEquals("6+q,]Y>)Xe", nodeNameTest1.getNamespaceURI());
      assertEquals(";!tS~{^zYT>d,/3':;!tS~{^zYT>d,/3'", nodeNameTest1.toString());
      assertEquals(2, expressionArray0.length);
      
      stepArray0[5] = step5;
      Step step6 = new Step(2437, nodeNameTest0, expressionArray0);
      assertFalse(step6.equals((Object)step5));
      assertFalse(step6.equals((Object)step4));
      assertFalse(step6.equals((Object)step0));
      assertFalse(step6.equals((Object)step1));
      assertFalse(step6.equals((Object)step3));
      assertFalse(step6.equals((Object)step2));
      assertFalse(nodeNameTest0.equals((Object)nodeNameTest1));
      assertNotNull(step6);
      assertEquals(2437, step6.getAxis());
      assertEquals(";!tS~{^zYT>d,/3'", qName0.getName());
      assertEquals(";!tS~{^zYT>d,/3':;!tS~{^zYT>d,/3'", qName0.toString());
      assertEquals(";!tS~{^zYT>d,/3'", qName0.getPrefix());
      assertEquals(";!tS~{^zYT>d,/3'", nodeNameTest0.getNamespaceURI());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals(";!tS~{^zYT>d,/3':;!tS~{^zYT>d,/3'", nodeNameTest0.toString());
      assertEquals(2, expressionArray0.length);
      
      stepArray0[6] = step6;
      Step step7 = new Step(9, nodeNameTest0, expressionArray0);
      assertFalse(step7.equals((Object)step5));
      assertFalse(step7.equals((Object)step4));
      assertFalse(step7.equals((Object)step0));
      assertFalse(step7.equals((Object)step1));
      assertFalse(step7.equals((Object)step6));
      assertFalse(step7.equals((Object)step3));
      assertFalse(step7.equals((Object)step2));
      assertFalse(nodeNameTest0.equals((Object)nodeNameTest1));
      assertNotNull(step7);
      assertEquals(";!tS~{^zYT>d,/3'", qName0.getName());
      assertEquals(";!tS~{^zYT>d,/3':;!tS~{^zYT>d,/3'", qName0.toString());
      assertEquals(";!tS~{^zYT>d,/3'", qName0.getPrefix());
      assertEquals(9, step7.getAxis());
      assertEquals(";!tS~{^zYT>d,/3'", nodeNameTest0.getNamespaceURI());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals(";!tS~{^zYT>d,/3':;!tS~{^zYT>d,/3'", nodeNameTest0.toString());
      assertEquals(2, expressionArray0.length);
      
      stepArray0[7] = step7;
      Step step8 = new Step(2437, nodeNameTest1, expressionArray0);
      assertFalse(step8.equals((Object)step7));
      assertFalse(step8.equals((Object)step4));
      assertFalse(step8.equals((Object)step0));
      assertFalse(step8.equals((Object)step1));
      assertFalse(step8.equals((Object)step5));
      assertFalse(step8.equals((Object)step3));
      assertFalse(step8.equals((Object)step6));
      assertFalse(step8.equals((Object)step2));
      assertFalse(nodeNameTest1.equals((Object)nodeNameTest0));
      assertNotNull(step8);
      assertEquals(";!tS~{^zYT>d,/3'", qName0.getName());
      assertEquals(";!tS~{^zYT>d,/3':;!tS~{^zYT>d,/3'", qName0.toString());
      assertEquals(";!tS~{^zYT>d,/3'", qName0.getPrefix());
      assertEquals(2437, step8.getAxis());
      assertFalse(nodeNameTest1.isWildcard());
      assertEquals("6+q,]Y>)Xe", nodeNameTest1.getNamespaceURI());
      assertEquals(";!tS~{^zYT>d,/3':;!tS~{^zYT>d,/3'", nodeNameTest1.toString());
      assertEquals(2, expressionArray0.length);
      
      stepArray0[8] = step8;
      LocationPath locationPath0 = new LocationPath(false, stepArray0);
      assertNotNull(locationPath0);
      assertFalse(locationPath0.isAbsolute());
      assertEquals(9, stepArray0.length);
      
      expressionArray0[1] = (Expression) locationPath0;
      CoreFunction coreFunction0 = new CoreFunction((-914), expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(2, coreFunction0.getArgumentCount());
      assertEquals((-914), coreFunction0.getFunctionCode());
      assertEquals(2, expressionArray0.length);
      
      // Undeclared exception!
      coreFunction0.functionStringLength((EvalContext) null);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      assertFalse(boolean0);
      
      Float float0 = new Float((double) 18);
      assertEquals(18.0F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      boolean boolean1 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      Constant constant0 = new Constant(float0);
      assertNotNull(constant0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual(constant0, constant0);
      assertNotNull(coreOperationLessThanOrEqual0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertEquals("<=", coreOperationLessThanOrEqual0.getSymbol());
      
      CoreOperationGreaterThan coreOperationGreaterThan0 = new CoreOperationGreaterThan(constant0, coreOperationLessThanOrEqual0);
      assertNotNull(coreOperationGreaterThan0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertEquals("<=", coreOperationLessThanOrEqual0.getSymbol());
      assertEquals(">", coreOperationGreaterThan0.getSymbol());
      
      Expression[] expressionArray0 = new Expression[3];
      expressionArray0[0] = (Expression) coreOperationLessThanOrEqual0;
      expressionArray0[1] = (Expression) coreOperationLessThanOrEqual0;
      expressionArray0[2] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction(18, expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(18, coreFunction0.getFunctionCode());
      assertEquals(3, coreFunction0.getArgumentCount());
      assertEquals(3, expressionArray0.length);
      
      EvalContext evalContext0 = null;
      Object object0 = coreFunction0.functionSubstring((EvalContext) null);
      assertEquals("true", object0);
      assertNotNull(object0);
      assertEquals(18, coreFunction0.getFunctionCode());
      assertEquals(3, coreFunction0.getArgumentCount());
      assertEquals(3, expressionArray0.length);
      
      CoreFunction coreFunction1 = new CoreFunction((-2092), expressionArray0);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertNotNull(coreFunction1);
      assertEquals(3, coreFunction1.getArgumentCount());
      assertEquals((-2092), coreFunction1.getFunctionCode());
      assertEquals(3, expressionArray0.length);
      
      // Undeclared exception!
//      try { 
        coreFunction1.functionContains((EvalContext) null);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // Incorrect number of arguments: unknownFunction-2092()(org.apache.commons.jxpath.ri.compiler.Constant@0000000001 <= org.apache.commons.jxpath.ri.compiler.Constant@0000000001, org.apache.commons.jxpath.ri.compiler.Constant@0000000001 <= org.apache.commons.jxpath.ri.compiler.Constant@0000000001, 18)
//         //
//         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Float float0 = new Float(0.0);
      assertEquals(0.0F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      Long long0 = new Long(3760L);
      assertEquals(3760L, (long)long0);
      assertNotNull(long0);
      
      Constant constant0 = new Constant(long0);
      assertNotNull(constant0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      
      CoreOperationGreaterThan coreOperationGreaterThan0 = new CoreOperationGreaterThan(constant0, constant0);
      assertNotNull(coreOperationGreaterThan0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertEquals(">", coreOperationGreaterThan0.getSymbol());
      
      Expression[] expressionArray0 = new Expression[3];
      expressionArray0[0] = (Expression) constant0;
      expressionArray0[1] = (Expression) coreOperationGreaterThan0;
      expressionArray0[2] = (Expression) coreOperationGreaterThan0;
      CoreFunction coreFunction0 = new CoreFunction(4096, expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(4096, coreFunction0.getFunctionCode());
      assertEquals(3, coreFunction0.getArgumentCount());
      assertEquals(3, expressionArray0.length);
      
      EvalContext evalContext0 = null;
      Object object0 = coreFunction0.functionSubstring((EvalContext) null);
      assertEquals("3", object0);
      assertNotNull(object0);
      assertEquals(4096, coreFunction0.getFunctionCode());
      assertEquals(3, coreFunction0.getArgumentCount());
      assertEquals(3, expressionArray0.length);
      
      // Undeclared exception!
//      try { 
        coreFunction0.functionLast((EvalContext) null);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // Incorrect number of arguments: unknownFunction4096()(3760, org.apache.commons.jxpath.ri.compiler.Constant@0000000001 > org.apache.commons.jxpath.ri.compiler.Constant@0000000001, org.apache.commons.jxpath.ri.compiler.Constant@0000000001 > org.apache.commons.jxpath.ri.compiler.Constant@0000000001)
//         //
//         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      assertFalse(boolean0);
      
      Expression[] expressionArray0 = new Expression[2];
      Float float0 = new Float((double) 13);
      assertEquals(13.0F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      boolean boolean1 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, true);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      Constant constant0 = new Constant(float0);
      assertNotNull(constant0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      
      expressionArray0[0] = (Expression) constant0;
      CoreOperationGreaterThan coreOperationGreaterThan0 = new CoreOperationGreaterThan(constant0, constant0);
      assertNotNull(coreOperationGreaterThan0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertEquals(">", coreOperationGreaterThan0.getSymbol());
      
      Constant constant1 = new Constant(float0);
      assertFalse(constant1.equals((Object)constant0));
      assertNotNull(constant1);
      assertFalse(constant1.isContextDependent());
      assertFalse(constant1.computeContextDependent());
      
      CoreOperationGreaterThan coreOperationGreaterThan1 = new CoreOperationGreaterThan(constant0, constant1);
      assertFalse(constant0.equals((Object)constant1));
      assertFalse(constant1.equals((Object)constant0));
      assertFalse(coreOperationGreaterThan1.equals((Object)coreOperationGreaterThan0));
      assertNotNull(coreOperationGreaterThan1);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant1.isContextDependent());
      assertFalse(constant1.computeContextDependent());
      assertEquals(">", coreOperationGreaterThan1.getSymbol());
      
      Expression[] expressionArray1 = new Expression[2];
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      
      expressionArray1[0] = (Expression) constant0;
      expressionArray1[1] = (Expression) constant1;
      CoreFunction coreFunction0 = new CoreFunction(13, expressionArray1);
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertNotNull(coreFunction0);
      assertEquals(2, coreFunction0.getArgumentCount());
      assertEquals(13, coreFunction0.getFunctionCode());
      assertEquals(2, expressionArray1.length);
      
      Object object0 = coreFunction0.computeValue((EvalContext) null);
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertEquals("", object0);
      assertNotNull(object0);
      assertEquals(2, coreFunction0.getArgumentCount());
      assertEquals(13, coreFunction0.getFunctionCode());
      assertEquals(2, expressionArray1.length);
      assertNotSame(expressionArray1, expressionArray0);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Double double0 = Expression.ZERO;
      assertEquals(0.0, (double)double0, 0.01);
      assertNotNull(double0);
      
      Constant constant0 = new Constant(double0);
      assertNotNull(constant0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      
      CoreOperationGreaterThan coreOperationGreaterThan0 = new CoreOperationGreaterThan(constant0, constant0);
      assertNotNull(coreOperationGreaterThan0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertEquals(">", coreOperationGreaterThan0.getSymbol());
      
      boolean boolean0 = coreOperationGreaterThan0.computeContextDependent();
      assertFalse(boolean0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertEquals(">", coreOperationGreaterThan0.getSymbol());
      
      Expression[] expressionArray0 = new Expression[0];
      coreOperationGreaterThan0.args = expressionArray0;
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertEquals(">", coreOperationGreaterThan0.getSymbol());
      
      Expression[] expressionArray1 = new Expression[2];
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      
      expressionArray1[0] = (Expression) constant0;
      expressionArray1[1] = (Expression) coreOperationGreaterThan0;
      CoreFunction coreFunction0 = new CoreFunction((-643), expressionArray1);
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertNotNull(coreFunction0);
      assertEquals((-643), coreFunction0.getFunctionCode());
      assertEquals(2, coreFunction0.getArgumentCount());
      assertEquals(2, expressionArray1.length);
      
      // Undeclared exception!
//      try { 
        coreFunction0.functionConcat((EvalContext) null);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Float float0 = new Float((double) 30);
      assertEquals(30.0F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      Expression[] expressionArray0 = new Expression[3];
      CoreFunction coreFunction0 = new CoreFunction(30, expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(3, coreFunction0.getArgumentCount());
      assertEquals(30, coreFunction0.getFunctionCode());
      assertEquals(3, expressionArray0.length);
      
      Expression expression0 = coreFunction0.getArg3();
      assertNull(expression0);
      assertEquals(3, coreFunction0.getArgumentCount());
      assertEquals(30, coreFunction0.getFunctionCode());
      assertEquals(3, expressionArray0.length);
      
      CoreOperationGreaterThan coreOperationGreaterThan0 = new CoreOperationGreaterThan((Expression) null, expressionArray0[2]);
      assertNotNull(coreOperationGreaterThan0);
      assertEquals(">", coreOperationGreaterThan0.getSymbol());
      assertEquals(3, expressionArray0.length);
      
      CoreOperationGreaterThan coreOperationGreaterThan1 = new CoreOperationGreaterThan((Expression) null, (Expression) null);
      assertFalse(coreOperationGreaterThan1.equals((Object)coreOperationGreaterThan0));
      assertNotNull(coreOperationGreaterThan1);
      assertEquals(">", coreOperationGreaterThan1.getSymbol());
      
      CoreFunction coreFunction1 = new CoreFunction((-3378), expressionArray0);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertNotNull(coreFunction1);
      assertEquals((-3378), coreFunction1.getFunctionCode());
      assertEquals(3, coreFunction1.getArgumentCount());
      assertEquals(3, expressionArray0.length);
      
      // Undeclared exception!
//      try { 
        coreFunction0.computeValue((EvalContext) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Float float0 = new Float(5.0);
      assertEquals(5.0F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      Constant constant0 = new Constant(float0);
      assertNotNull(constant0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      
      NameAttributeTest nameAttributeTest0 = new NameAttributeTest(constant0, constant0);
      assertNotNull(nameAttributeTest0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertEquals("=", nameAttributeTest0.getSymbol());
      assertTrue(nameAttributeTest0.computeContextDependent());
      
      CoreOperationGreaterThan coreOperationGreaterThan0 = new CoreOperationGreaterThan(nameAttributeTest0, constant0);
      assertNotNull(coreOperationGreaterThan0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertEquals("=", nameAttributeTest0.getSymbol());
      assertTrue(nameAttributeTest0.computeContextDependent());
      assertEquals(">", coreOperationGreaterThan0.getSymbol());
      
      Expression[] expressionArray0 = new Expression[2];
      CoreOperationMod coreOperationMod0 = new CoreOperationMod(nameAttributeTest0, constant0);
      assertNotNull(coreOperationMod0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertEquals("=", nameAttributeTest0.getSymbol());
      assertTrue(nameAttributeTest0.computeContextDependent());
      assertEquals("mod", coreOperationMod0.getSymbol());
      
      expressionArray0[0] = (Expression) coreOperationMod0;
      expressionArray0[1] = (Expression) nameAttributeTest0;
      CoreFunction coreFunction0 = new CoreFunction(30, expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(30, coreFunction0.getFunctionCode());
      assertEquals(2, coreFunction0.getArgumentCount());
      assertEquals(2, expressionArray0.length);
      
      EvalContext evalContext0 = null;
      Object object0 = coreFunction0.functionSubstring((EvalContext) null);
      assertEquals("0", object0);
      assertNotNull(object0);
      assertEquals(30, coreFunction0.getFunctionCode());
      assertEquals(2, coreFunction0.getArgumentCount());
      assertEquals(2, expressionArray0.length);
      
      // Undeclared exception!
//      try { 
        coreFunction0.functionNamespaceURI((EvalContext) null);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // Incorrect number of arguments: format-number((org.apache.commons.jxpath.ri.compiler.NameAttributeTest@0000000002) mod org.apache.commons.jxpath.ri.compiler.Constant@0000000001, org.apache.commons.jxpath.ri.compiler.Constant@0000000001 = org.apache.commons.jxpath.ri.compiler.Constant@0000000001)
//         //
//         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      assertFalse(boolean0);
      
      Expression[] expressionArray0 = new Expression[2];
      Float float0 = new Float((double) 13);
      assertEquals(13.0F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      boolean boolean1 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      Constant constant0 = new Constant(float0);
      assertNotNull(constant0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      
      expressionArray0[0] = (Expression) constant0;
      CoreOperationGreaterThan coreOperationGreaterThan0 = new CoreOperationGreaterThan(constant0, constant0);
      assertNotNull(coreOperationGreaterThan0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertEquals(">", coreOperationGreaterThan0.getSymbol());
      
      expressionArray0[1] = (Expression) coreOperationGreaterThan0;
      CoreFunction coreFunction0 = new CoreFunction(13, expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(2, coreFunction0.getArgumentCount());
      assertEquals(13, coreFunction0.getFunctionCode());
      assertEquals(2, expressionArray0.length);
      
      Object object0 = coreFunction0.functionSubstring((EvalContext) null);
      assertEquals("13", object0);
      assertNotNull(object0);
      assertEquals(2, coreFunction0.getArgumentCount());
      assertEquals(13, coreFunction0.getFunctionCode());
      assertEquals(2, expressionArray0.length);
      
      Object object1 = coreFunction0.functionContains((EvalContext) null);
      assertTrue(object1.equals((Object)boolean1));
      assertTrue(object1.equals((Object)boolean0));
      assertEquals(false, object1);
      assertNotNull(object1);
      assertEquals(2, coreFunction0.getArgumentCount());
      assertEquals(13, coreFunction0.getFunctionCode());
      assertEquals(2, expressionArray0.length);
      
      Object object2 = coreFunction0.functionStartsWith((EvalContext) null);
      assertTrue(object2.equals((Object)boolean1));
      assertTrue(object2.equals((Object)boolean0));
      assertEquals(false, object2);
      assertNotNull(object2);
      assertEquals(2, coreFunction0.getArgumentCount());
      assertEquals(13, coreFunction0.getFunctionCode());
      assertEquals(2, expressionArray0.length);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      assertFalse(boolean0);
      
      Expression[] expressionArray0 = new Expression[2];
      Float float0 = new Float((double) 13);
      assertEquals(13.0F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      Constant constant0 = new Constant(float0);
      assertNotNull(constant0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      
      expressionArray0[0] = (Expression) constant0;
      CoreOperationGreaterThan coreOperationGreaterThan0 = new CoreOperationGreaterThan(constant0, constant0);
      assertNotNull(coreOperationGreaterThan0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertEquals(">", coreOperationGreaterThan0.getSymbol());
      
      expressionArray0[1] = (Expression) coreOperationGreaterThan0;
      CoreFunction coreFunction0 = new CoreFunction(13, expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(2, coreFunction0.getArgumentCount());
      assertEquals(13, coreFunction0.getFunctionCode());
      assertEquals(2, expressionArray0.length);
      
      String string0 = constant0.toString();
      assertEquals("13", string0);
      assertNotNull(string0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      
      Object object0 = coreFunction0.computeValue((EvalContext) null);
      assertFalse(object0.equals((Object)string0));
      assertEquals("", object0);
      assertNotNull(object0);
      assertEquals(2, coreFunction0.getArgumentCount());
      assertEquals(13, coreFunction0.getFunctionCode());
      assertEquals(2, expressionArray0.length);
      
      Object object1 = coreFunction0.functionSubstring((EvalContext) null);
      assertFalse(object1.equals((Object)object0));
      assertTrue(object1.equals((Object)string0));
      assertEquals("13", object1);
      assertNotNull(object1);
      assertEquals(2, coreFunction0.getArgumentCount());
      assertEquals(13, coreFunction0.getFunctionCode());
      assertEquals(2, expressionArray0.length);
      
      Object object2 = coreFunction0.functionContains((EvalContext) null);
      assertTrue(object2.equals((Object)boolean0));
      assertEquals(false, object2);
      assertNotNull(object2);
      assertEquals(2, coreFunction0.getArgumentCount());
      assertEquals(13, coreFunction0.getFunctionCode());
      assertEquals(2, expressionArray0.length);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      Float float0 = new Float((float) 64);
      assertEquals(64.0F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      Constant constant0 = new Constant(float0);
      assertNotNull(constant0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      
      expressionArray0[0] = (Expression) constant0;
      Expression[] expressionArray1 = new Expression[2];
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      
      expressionArray1[0] = (Expression) constant0;
      expressionArray1[1] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction(1955, expressionArray1);
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertNotNull(coreFunction0);
      assertEquals(2, coreFunction0.getArgumentCount());
      assertEquals(1955, coreFunction0.getFunctionCode());
      assertEquals(2, expressionArray1.length);
      
      String string0 = constant0.toString();
      assertEquals("64", string0);
      assertNotNull(string0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      
      Object object0 = coreFunction0.computeValue((EvalContext) null);
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertNull(object0);
      assertEquals(2, coreFunction0.getArgumentCount());
      assertEquals(1955, coreFunction0.getFunctionCode());
      assertEquals(2, expressionArray1.length);
      assertNotSame(expressionArray1, expressionArray0);
      
      Object object1 = coreFunction0.functionSubstring((EvalContext) null);
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertFalse(object1.equals((Object)string0));
      assertEquals("", object1);
      assertNotNull(object1);
      assertEquals(2, coreFunction0.getArgumentCount());
      assertEquals(1955, coreFunction0.getFunctionCode());
      assertEquals(2, expressionArray1.length);
      assertNotSame(expressionArray1, expressionArray0);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[6];
      QName qName0 = new QName("cH&", "cH&");
      assertNotNull(qName0);
      assertEquals("cH&:cH&", qName0.toString());
      assertEquals("cH&", qName0.getName());
      assertEquals("cH&", qName0.getPrefix());
      
      ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, expressionArray0);
      assertNotNull(extensionFunction0);
      assertEquals("cH&:cH&", qName0.toString());
      assertEquals("cH&", qName0.getName());
      assertEquals("cH&", qName0.getPrefix());
      assertTrue(extensionFunction0.computeContextDependent());
      assertEquals(6, expressionArray0.length);
      
      expressionArray0[0] = (Expression) extensionFunction0;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      CoreOperationGreaterThan coreOperationGreaterThan0 = new CoreOperationGreaterThan(expressionArray0[0], extensionFunction0);
      assertNotNull(coreOperationGreaterThan0);
      assertEquals("cH&:cH&", qName0.toString());
      assertEquals("cH&", qName0.getName());
      assertEquals("cH&", qName0.getPrefix());
      assertTrue(extensionFunction0.computeContextDependent());
      assertEquals(">", coreOperationGreaterThan0.getSymbol());
      assertEquals(6, expressionArray0.length);
      
      expressionArray0[1] = (Expression) coreOperationGreaterThan0;
      CoreOperationUnion coreOperationUnion0 = new CoreOperationUnion(expressionArray0);
      assertNotNull(coreOperationUnion0);
      assertEquals("|", coreOperationUnion0.getSymbol());
      assertEquals(6, expressionArray0.length);
      
      expressionArray0[2] = (Expression) coreOperationUnion0;
      VariableReference variableReference0 = new VariableReference(qName0);
      assertNotNull(variableReference0);
      assertEquals("cH&:cH&", qName0.toString());
      assertEquals("cH&", qName0.getName());
      assertEquals("cH&", qName0.getPrefix());
      assertFalse(variableReference0.computeContextDependent());
      assertFalse(variableReference0.isContextDependent());
      
      CoreOperationGreaterThanOrEqual coreOperationGreaterThanOrEqual0 = new CoreOperationGreaterThanOrEqual(variableReference0, expressionArray0[0]);
      assertNotNull(coreOperationGreaterThanOrEqual0);
      assertEquals("cH&:cH&", qName0.toString());
      assertEquals("cH&", qName0.getName());
      assertEquals("cH&", qName0.getPrefix());
      assertFalse(variableReference0.computeContextDependent());
      assertFalse(variableReference0.isContextDependent());
      assertEquals(">=", coreOperationGreaterThanOrEqual0.getSymbol());
      assertEquals(6, expressionArray0.length);
      
      expressionArray0[3] = (Expression) coreOperationGreaterThanOrEqual0;
      CoreOperationDivide coreOperationDivide0 = new CoreOperationDivide(coreOperationGreaterThanOrEqual0, coreOperationUnion0);
      assertNotNull(coreOperationDivide0);
      assertEquals("cH&:cH&", qName0.toString());
      assertEquals("cH&", qName0.getName());
      assertEquals("cH&", qName0.getPrefix());
      assertEquals("|", coreOperationUnion0.getSymbol());
      assertFalse(variableReference0.computeContextDependent());
      assertFalse(variableReference0.isContextDependent());
      assertEquals(">=", coreOperationGreaterThanOrEqual0.getSymbol());
      assertEquals("div", coreOperationDivide0.getSymbol());
      assertEquals(6, expressionArray0.length);
      
      expressionArray0[4] = (Expression) coreOperationDivide0;
      CoreOperationGreaterThanOrEqual coreOperationGreaterThanOrEqual1 = new CoreOperationGreaterThanOrEqual(coreOperationDivide0, expressionArray0[0]);
      assertFalse(coreOperationGreaterThanOrEqual1.equals((Object)coreOperationGreaterThanOrEqual0));
      assertNotNull(coreOperationGreaterThanOrEqual1);
      assertEquals("cH&:cH&", qName0.toString());
      assertEquals("cH&", qName0.getName());
      assertEquals("cH&", qName0.getPrefix());
      assertEquals("|", coreOperationUnion0.getSymbol());
      assertFalse(variableReference0.computeContextDependent());
      assertFalse(variableReference0.isContextDependent());
      assertEquals(">=", coreOperationGreaterThanOrEqual0.getSymbol());
      assertEquals("div", coreOperationDivide0.getSymbol());
      assertEquals(">=", coreOperationGreaterThanOrEqual1.getSymbol());
      assertEquals(6, expressionArray0.length);
      
      expressionArray0[5] = (Expression) coreOperationGreaterThanOrEqual0;
      CoreFunction coreFunction0 = new CoreFunction(566, expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(566, coreFunction0.getFunctionCode());
      assertEquals(6, coreFunction0.getArgumentCount());
      assertEquals(6, expressionArray0.length);
      
      // Undeclared exception!
//      try { 
        coreFunction0.functionBoolean((EvalContext) null);
//        fail("Expecting exception: StackOverflowError");
      
//      } catch(StackOverflowError e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      assertFalse(boolean0);
      
      Expression[] expressionArray0 = new Expression[2];
      Float float0 = new Float((double) 13);
      assertEquals(13.0F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      Constant constant0 = new Constant(float0);
      assertNotNull(constant0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      
      expressionArray0[0] = (Expression) constant0;
      CoreOperationGreaterThan coreOperationGreaterThan0 = new CoreOperationGreaterThan(constant0, constant0);
      assertNotNull(coreOperationGreaterThan0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertEquals(">", coreOperationGreaterThan0.getSymbol());
      
      expressionArray0[1] = (Expression) coreOperationGreaterThan0;
      CoreFunction coreFunction0 = new CoreFunction(13, expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(13, coreFunction0.getFunctionCode());
      assertEquals(2, coreFunction0.getArgumentCount());
      assertEquals(2, expressionArray0.length);
      
      String string0 = constant0.toString();
      assertEquals("13", string0);
      assertNotNull(string0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      
      EvalContext evalContext0 = null;
      Object object0 = coreFunction0.computeValue((EvalContext) null);
      assertFalse(object0.equals((Object)string0));
      assertEquals("", object0);
      assertNotNull(object0);
      assertEquals(13, coreFunction0.getFunctionCode());
      assertEquals(2, coreFunction0.getArgumentCount());
      assertEquals(2, expressionArray0.length);
      
      Object object1 = coreFunction0.functionSubstringAfter((EvalContext) null);
      assertFalse(object1.equals((Object)string0));
      assertEquals("", object1);
      assertNotNull(object1);
      assertEquals(13, coreFunction0.getFunctionCode());
      assertEquals(2, coreFunction0.getArgumentCount());
      assertEquals(2, expressionArray0.length);
      
      Object object2 = coreFunction0.functionSubstring((EvalContext) null);
      assertFalse(object2.equals((Object)object0));
      assertFalse(object2.equals((Object)object1));
      assertTrue(object2.equals((Object)string0));
      assertEquals("13", object2);
      assertNotNull(object2);
      assertEquals(13, coreFunction0.getFunctionCode());
      assertEquals(2, coreFunction0.getArgumentCount());
      assertEquals(2, expressionArray0.length);
      
      // Undeclared exception!
//      try { 
        coreFunction0.functionLang((EvalContext) null);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // Incorrect number of arguments: substring-after(13, org.apache.commons.jxpath.ri.compiler.Constant@0000000001 > org.apache.commons.jxpath.ri.compiler.Constant@0000000001)
//         //
//         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction((-2519), (Expression[]) null);
      assertNotNull(coreFunction0);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals((-2519), coreFunction0.getFunctionCode());
      
      CoreFunction coreFunction1 = new CoreFunction((-2519), (Expression[]) null);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertNotNull(coreFunction1);
      assertEquals(0, coreFunction1.getArgumentCount());
      assertEquals((-2519), coreFunction1.getFunctionCode());
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl)JXPathContext.newContext((Object) coreFunction1);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertNotNull(jXPathContextReferenceImpl0);
      assertEquals(0, coreFunction1.getArgumentCount());
      assertEquals((-2519), coreFunction1.getFunctionCode());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertNotSame(coreFunction1, coreFunction0);
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl1 = (JXPathContextReferenceImpl)JXPathContext.newContext((JXPathContext) jXPathContextReferenceImpl0, (Object) coreFunction1);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl0));
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertNotNull(jXPathContextReferenceImpl1);
      assertEquals(0, coreFunction1.getArgumentCount());
      assertEquals((-2519), coreFunction1.getFunctionCode());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertFalse(jXPathContextReferenceImpl1.isLenient());
      assertNotSame(coreFunction1, coreFunction0);
      assertNotSame(jXPathContextReferenceImpl0, jXPathContextReferenceImpl1);
      assertNotSame(jXPathContextReferenceImpl1, jXPathContextReferenceImpl0);
      
      QName qName0 = new QName("`&", "floor");
      assertNotNull(qName0);
      assertEquals("`&:floor", qName0.toString());
      assertEquals("floor", qName0.getName());
      assertEquals("`&", qName0.getPrefix());
      
      Locale locale0 = Locale.ITALY;
      assertNotNull(locale0);
      assertEquals("IT", locale0.getCountry());
      assertEquals("it", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("it_IT", locale0.toString());
      assertEquals("ITA", locale0.getISO3Country());
      assertEquals("ita", locale0.getISO3Language());
      
      BeanPointer beanPointer0 = (BeanPointer)NodePointer.newNodePointer(qName0, "floor", locale0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(beanPointer0);
      assertEquals("`&:floor", qName0.toString());
      assertEquals("floor", qName0.getName());
      assertEquals("`&", qName0.getPrefix());
      assertEquals("IT", locale0.getCountry());
      assertEquals("it", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("it_IT", locale0.toString());
      assertEquals("ITA", locale0.getISO3Country());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals(1, beanPointer0.getLength());
      assertNull(beanPointer0.getNamespaceURI());
      assertFalse(beanPointer0.isContainer());
      assertFalse(beanPointer0.isAttribute());
      assertEquals(Integer.MIN_VALUE, beanPointer0.getIndex());
      assertTrue(beanPointer0.isRoot());
      assertFalse(beanPointer0.isCollection());
      assertFalse(beanPointer0.isDynamicPropertyDeclarationSupported());
      assertTrue(beanPointer0.isNode());
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl2 = new JXPathContextReferenceImpl(jXPathContextReferenceImpl1, coreFunction1, beanPointer0);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertFalse(jXPathContextReferenceImpl0.equals((Object)jXPathContextReferenceImpl1));
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl0));
      assertFalse(jXPathContextReferenceImpl2.equals((Object)jXPathContextReferenceImpl1));
      assertFalse(jXPathContextReferenceImpl2.equals((Object)jXPathContextReferenceImpl0));
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertNotNull(jXPathContextReferenceImpl2);
      assertEquals(0, coreFunction1.getArgumentCount());
      assertEquals((-2519), coreFunction1.getFunctionCode());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertFalse(jXPathContextReferenceImpl1.isLenient());
      assertEquals("`&:floor", qName0.toString());
      assertEquals("floor", qName0.getName());
      assertEquals("`&", qName0.getPrefix());
      assertEquals("IT", locale0.getCountry());
      assertEquals("it", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("it_IT", locale0.toString());
      assertEquals("ITA", locale0.getISO3Country());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals(1, beanPointer0.getLength());
      assertNull(beanPointer0.getNamespaceURI());
      assertFalse(beanPointer0.isContainer());
      assertFalse(beanPointer0.isAttribute());
      assertEquals(Integer.MIN_VALUE, beanPointer0.getIndex());
      assertTrue(beanPointer0.isRoot());
      assertFalse(beanPointer0.isCollection());
      assertFalse(beanPointer0.isDynamicPropertyDeclarationSupported());
      assertTrue(beanPointer0.isNode());
      assertFalse(jXPathContextReferenceImpl2.isLenient());
      
      VariablePointerFactory variablePointerFactory0 = new VariablePointerFactory();
      assertEquals(890, VariablePointerFactory.VARIABLE_POINTER_FACTORY_ORDER);
      assertNotNull(variablePointerFactory0);
      assertEquals(890, variablePointerFactory0.getOrder());
      
      RootContext rootContext0 = new RootContext(jXPathContextReferenceImpl2, beanPointer0);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertFalse(jXPathContextReferenceImpl0.equals((Object)jXPathContextReferenceImpl1));
      assertFalse(jXPathContextReferenceImpl0.equals((Object)jXPathContextReferenceImpl2));
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl0));
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl2));
      assertFalse(jXPathContextReferenceImpl2.equals((Object)jXPathContextReferenceImpl1));
      assertFalse(jXPathContextReferenceImpl2.equals((Object)jXPathContextReferenceImpl0));
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertNotNull(rootContext0);
      assertEquals(0, coreFunction1.getArgumentCount());
      assertEquals((-2519), coreFunction1.getFunctionCode());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertFalse(jXPathContextReferenceImpl1.isLenient());
      assertEquals("`&:floor", qName0.toString());
      assertEquals("floor", qName0.getName());
      assertEquals("`&", qName0.getPrefix());
      assertEquals("IT", locale0.getCountry());
      assertEquals("it", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("it_IT", locale0.toString());
      assertEquals("ITA", locale0.getISO3Country());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals(1, beanPointer0.getLength());
      assertNull(beanPointer0.getNamespaceURI());
      assertFalse(beanPointer0.isContainer());
      assertFalse(beanPointer0.isAttribute());
      assertEquals(Integer.MIN_VALUE, beanPointer0.getIndex());
      assertTrue(beanPointer0.isRoot());
      assertFalse(beanPointer0.isCollection());
      assertFalse(beanPointer0.isDynamicPropertyDeclarationSupported());
      assertTrue(beanPointer0.isNode());
      assertFalse(jXPathContextReferenceImpl2.isLenient());
      assertEquals(0, rootContext0.getPosition());
      assertFalse(rootContext0.isChildOrderingRequired());
      assertEquals(0, rootContext0.getDocumentOrder());
      
      NodePointer nodePointer0 = variablePointerFactory0.createNodePointer(qName0, (Object) rootContext0, locale0);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertFalse(jXPathContextReferenceImpl0.equals((Object)jXPathContextReferenceImpl1));
      assertFalse(jXPathContextReferenceImpl0.equals((Object)jXPathContextReferenceImpl2));
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl0));
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl2));
      assertFalse(jXPathContextReferenceImpl2.equals((Object)jXPathContextReferenceImpl1));
      assertFalse(jXPathContextReferenceImpl2.equals((Object)jXPathContextReferenceImpl0));
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(890, VariablePointerFactory.VARIABLE_POINTER_FACTORY_ORDER);
      assertNull(nodePointer0);
      assertEquals(0, coreFunction1.getArgumentCount());
      assertEquals((-2519), coreFunction1.getFunctionCode());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertFalse(jXPathContextReferenceImpl1.isLenient());
      assertEquals("`&:floor", qName0.toString());
      assertEquals("floor", qName0.getName());
      assertEquals("`&", qName0.getPrefix());
      assertEquals("IT", locale0.getCountry());
      assertEquals("it", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("it_IT", locale0.toString());
      assertEquals("ITA", locale0.getISO3Country());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals(1, beanPointer0.getLength());
      assertNull(beanPointer0.getNamespaceURI());
      assertFalse(beanPointer0.isContainer());
      assertFalse(beanPointer0.isAttribute());
      assertEquals(Integer.MIN_VALUE, beanPointer0.getIndex());
      assertTrue(beanPointer0.isRoot());
      assertFalse(beanPointer0.isCollection());
      assertFalse(beanPointer0.isDynamicPropertyDeclarationSupported());
      assertTrue(beanPointer0.isNode());
      assertFalse(jXPathContextReferenceImpl2.isLenient());
      assertEquals(890, variablePointerFactory0.getOrder());
      assertEquals(0, rootContext0.getPosition());
      assertFalse(rootContext0.isChildOrderingRequired());
      assertEquals(0, rootContext0.getDocumentOrder());
      assertNotSame(coreFunction1, coreFunction0);
      assertNotSame(jXPathContextReferenceImpl0, jXPathContextReferenceImpl1);
      assertNotSame(jXPathContextReferenceImpl0, jXPathContextReferenceImpl2);
      assertNotSame(jXPathContextReferenceImpl1, jXPathContextReferenceImpl0);
      assertNotSame(jXPathContextReferenceImpl1, jXPathContextReferenceImpl2);
      assertNotSame(jXPathContextReferenceImpl2, jXPathContextReferenceImpl1);
      assertNotSame(jXPathContextReferenceImpl2, jXPathContextReferenceImpl0);
      
      RootContext rootContext1 = new RootContext(jXPathContextReferenceImpl2, (NodePointer) null);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertFalse(jXPathContextReferenceImpl0.equals((Object)jXPathContextReferenceImpl1));
      assertFalse(jXPathContextReferenceImpl0.equals((Object)jXPathContextReferenceImpl2));
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl0));
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl2));
      assertFalse(jXPathContextReferenceImpl2.equals((Object)jXPathContextReferenceImpl1));
      assertFalse(jXPathContextReferenceImpl2.equals((Object)jXPathContextReferenceImpl0));
      assertFalse(rootContext1.equals((Object)rootContext0));
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertNotNull(rootContext1);
      assertEquals(0, coreFunction1.getArgumentCount());
      assertEquals((-2519), coreFunction1.getFunctionCode());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertFalse(jXPathContextReferenceImpl1.isLenient());
      assertEquals("`&:floor", qName0.toString());
      assertEquals("floor", qName0.getName());
      assertEquals("`&", qName0.getPrefix());
      assertEquals("IT", locale0.getCountry());
      assertEquals("it", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("it_IT", locale0.toString());
      assertEquals("ITA", locale0.getISO3Country());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals(1, beanPointer0.getLength());
      assertNull(beanPointer0.getNamespaceURI());
      assertFalse(beanPointer0.isContainer());
      assertFalse(beanPointer0.isAttribute());
      assertEquals(Integer.MIN_VALUE, beanPointer0.getIndex());
      assertTrue(beanPointer0.isRoot());
      assertFalse(beanPointer0.isCollection());
      assertFalse(beanPointer0.isDynamicPropertyDeclarationSupported());
      assertTrue(beanPointer0.isNode());
      assertFalse(jXPathContextReferenceImpl2.isLenient());
      assertEquals(0, rootContext1.getPosition());
      assertEquals(0, rootContext1.getDocumentOrder());
      assertFalse(rootContext1.isChildOrderingRequired());
      
      String string0 = locale0.toLanguageTag();
      assertEquals("it-IT", string0);
      assertNotNull(string0);
      assertEquals("IT", locale0.getCountry());
      assertEquals("it", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("it_IT", locale0.toString());
      assertEquals("ITA", locale0.getISO3Country());
      assertEquals("ita", locale0.getISO3Language());
      
      InitialContext initialContext0 = (InitialContext)rootContext1.getVariableContext(qName0);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertFalse(jXPathContextReferenceImpl0.equals((Object)jXPathContextReferenceImpl1));
      assertFalse(jXPathContextReferenceImpl0.equals((Object)jXPathContextReferenceImpl2));
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl0));
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl2));
      assertFalse(jXPathContextReferenceImpl2.equals((Object)jXPathContextReferenceImpl1));
      assertFalse(jXPathContextReferenceImpl2.equals((Object)jXPathContextReferenceImpl0));
      assertFalse(rootContext1.equals((Object)rootContext0));
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertNotNull(initialContext0);
      assertEquals(0, coreFunction1.getArgumentCount());
      assertEquals((-2519), coreFunction1.getFunctionCode());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertFalse(jXPathContextReferenceImpl1.isLenient());
      assertEquals("`&:floor", qName0.toString());
      assertEquals("floor", qName0.getName());
      assertEquals("`&", qName0.getPrefix());
      assertEquals("IT", locale0.getCountry());
      assertEquals("it", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("it_IT", locale0.toString());
      assertEquals("ITA", locale0.getISO3Country());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals(1, beanPointer0.getLength());
      assertNull(beanPointer0.getNamespaceURI());
      assertFalse(beanPointer0.isContainer());
      assertFalse(beanPointer0.isAttribute());
      assertEquals(Integer.MIN_VALUE, beanPointer0.getIndex());
      assertTrue(beanPointer0.isRoot());
      assertFalse(beanPointer0.isCollection());
      assertFalse(beanPointer0.isDynamicPropertyDeclarationSupported());
      assertTrue(beanPointer0.isNode());
      assertFalse(jXPathContextReferenceImpl2.isLenient());
      assertEquals(0, rootContext1.getPosition());
      assertEquals(0, rootContext1.getDocumentOrder());
      assertFalse(rootContext1.isChildOrderingRequired());
      assertFalse(initialContext0.isChildOrderingRequired());
      assertEquals(0, initialContext0.getPosition());
      assertEquals(0, initialContext0.getDocumentOrder());
      assertNotSame(coreFunction1, coreFunction0);
      assertNotSame(jXPathContextReferenceImpl0, jXPathContextReferenceImpl1);
      assertNotSame(jXPathContextReferenceImpl0, jXPathContextReferenceImpl2);
      assertNotSame(jXPathContextReferenceImpl1, jXPathContextReferenceImpl0);
      assertNotSame(jXPathContextReferenceImpl1, jXPathContextReferenceImpl2);
      assertNotSame(jXPathContextReferenceImpl2, jXPathContextReferenceImpl1);
      assertNotSame(jXPathContextReferenceImpl2, jXPathContextReferenceImpl0);
      assertNotSame(rootContext1, rootContext0);
      
      Object object0 = coreFunction1.computeValue(initialContext0);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertFalse(jXPathContextReferenceImpl0.equals((Object)jXPathContextReferenceImpl1));
      assertFalse(jXPathContextReferenceImpl0.equals((Object)jXPathContextReferenceImpl2));
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl0));
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl2));
      assertFalse(jXPathContextReferenceImpl2.equals((Object)jXPathContextReferenceImpl1));
      assertFalse(jXPathContextReferenceImpl2.equals((Object)jXPathContextReferenceImpl0));
      assertFalse(rootContext1.equals((Object)rootContext0));
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertNull(object0);
      assertEquals(0, coreFunction1.getArgumentCount());
      assertEquals((-2519), coreFunction1.getFunctionCode());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertFalse(jXPathContextReferenceImpl1.isLenient());
      assertEquals("`&:floor", qName0.toString());
      assertEquals("floor", qName0.getName());
      assertEquals("`&", qName0.getPrefix());
      assertEquals("IT", locale0.getCountry());
      assertEquals("it", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("it_IT", locale0.toString());
      assertEquals("ITA", locale0.getISO3Country());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals(1, beanPointer0.getLength());
      assertNull(beanPointer0.getNamespaceURI());
      assertFalse(beanPointer0.isContainer());
      assertFalse(beanPointer0.isAttribute());
      assertEquals(Integer.MIN_VALUE, beanPointer0.getIndex());
      assertTrue(beanPointer0.isRoot());
      assertFalse(beanPointer0.isCollection());
      assertFalse(beanPointer0.isDynamicPropertyDeclarationSupported());
      assertTrue(beanPointer0.isNode());
      assertFalse(jXPathContextReferenceImpl2.isLenient());
      assertEquals(0, rootContext1.getPosition());
      assertEquals(0, rootContext1.getDocumentOrder());
      assertFalse(rootContext1.isChildOrderingRequired());
      assertFalse(initialContext0.isChildOrderingRequired());
      assertEquals(0, initialContext0.getPosition());
      assertEquals(0, initialContext0.getDocumentOrder());
      assertNotSame(coreFunction1, coreFunction0);
      assertNotSame(jXPathContextReferenceImpl0, jXPathContextReferenceImpl1);
      assertNotSame(jXPathContextReferenceImpl0, jXPathContextReferenceImpl2);
      assertNotSame(jXPathContextReferenceImpl1, jXPathContextReferenceImpl0);
      assertNotSame(jXPathContextReferenceImpl1, jXPathContextReferenceImpl2);
      assertNotSame(jXPathContextReferenceImpl2, jXPathContextReferenceImpl1);
      assertNotSame(jXPathContextReferenceImpl2, jXPathContextReferenceImpl0);
      assertNotSame(rootContext1, rootContext0);
      
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest((-264));
      assertNotNull(nodeTypeTest0);
      assertEquals((-264), nodeTypeTest0.getNodeType());
      
      DescendantContext descendantContext0 = new DescendantContext(initialContext0, true, nodeTypeTest0);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertFalse(jXPathContextReferenceImpl0.equals((Object)jXPathContextReferenceImpl1));
      assertFalse(jXPathContextReferenceImpl0.equals((Object)jXPathContextReferenceImpl2));
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl0));
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl2));
      assertFalse(jXPathContextReferenceImpl2.equals((Object)jXPathContextReferenceImpl1));
      assertFalse(jXPathContextReferenceImpl2.equals((Object)jXPathContextReferenceImpl0));
      assertFalse(rootContext1.equals((Object)rootContext0));
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertNotNull(descendantContext0);
      assertEquals(0, descendantContext0.getPosition());
      assertTrue(descendantContext0.isChildOrderingRequired());
      assertEquals(0, descendantContext0.getDocumentOrder());
      assertEquals(0, coreFunction1.getArgumentCount());
      assertEquals((-2519), coreFunction1.getFunctionCode());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertFalse(jXPathContextReferenceImpl1.isLenient());
      assertEquals("`&:floor", qName0.toString());
      assertEquals("floor", qName0.getName());
      assertEquals("`&", qName0.getPrefix());
      assertEquals("IT", locale0.getCountry());
      assertEquals("it", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("it_IT", locale0.toString());
      assertEquals("ITA", locale0.getISO3Country());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals(1, beanPointer0.getLength());
      assertNull(beanPointer0.getNamespaceURI());
      assertFalse(beanPointer0.isContainer());
      assertFalse(beanPointer0.isAttribute());
      assertEquals(Integer.MIN_VALUE, beanPointer0.getIndex());
      assertTrue(beanPointer0.isRoot());
      assertFalse(beanPointer0.isCollection());
      assertFalse(beanPointer0.isDynamicPropertyDeclarationSupported());
      assertTrue(beanPointer0.isNode());
      assertFalse(jXPathContextReferenceImpl2.isLenient());
      assertEquals(0, rootContext1.getPosition());
      assertEquals(0, rootContext1.getDocumentOrder());
      assertFalse(rootContext1.isChildOrderingRequired());
      assertFalse(initialContext0.isChildOrderingRequired());
      assertEquals(0, initialContext0.getPosition());
      assertEquals(0, initialContext0.getDocumentOrder());
      assertEquals((-264), nodeTypeTest0.getNodeType());
      
      // Undeclared exception!
//      try { 
        coreFunction1.functionString(descendantContext0);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // Undefined variable: `&:floor
//         //
//         verifyException("org.apache.commons.jxpath.ri.model.VariablePointer$1", e);
//      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[2];
      CoreFunction coreFunction0 = new CoreFunction(30, expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(30, coreFunction0.getFunctionCode());
      assertEquals(2, coreFunction0.getArgumentCount());
      assertEquals(2, expressionArray0.length);
      
      EvalContext evalContext0 = null;
      // Undeclared exception!
//      try { 
        coreFunction0.computeValue((EvalContext) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Float float0 = new Float(0.0F);
      assertEquals(0.0F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      Short short0 = new Short((short)1);
      assertEquals((short)1, (short)short0);
      assertNotNull(short0);
      
      Constant constant0 = new Constant(short0);
      assertNotNull(constant0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      
      Expression[] expressionArray0 = new Expression[5];
      expressionArray0[0] = (Expression) constant0;
      expressionArray0[1] = (Expression) constant0;
      expressionArray0[2] = (Expression) constant0;
      expressionArray0[3] = (Expression) constant0;
      Constant constant1 = new Constant("");
      assertFalse(constant1.equals((Object)constant0));
      assertNotNull(constant1);
      assertFalse(constant1.computeContextDependent());
      assertFalse(constant1.isContextDependent());
      
      expressionArray0[4] = (Expression) constant1;
      CoreFunction coreFunction0 = new CoreFunction(30, expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(30, coreFunction0.getFunctionCode());
      assertEquals(5, coreFunction0.getArgumentCount());
      assertEquals(5, expressionArray0.length);
      
      boolean boolean0 = coreFunction0.isContextDependent();
      assertFalse(boolean0);
      assertEquals(30, coreFunction0.getFunctionCode());
      assertEquals(5, coreFunction0.getArgumentCount());
      assertEquals(5, expressionArray0.length);
      
      NodeSetContext nodeSetContext0 = new NodeSetContext((EvalContext) null, (NodeSet) null);
      assertNotNull(nodeSetContext0);
      assertEquals(0, nodeSetContext0.getDocumentOrder());
      assertEquals(0, nodeSetContext0.getPosition());
      assertFalse(nodeSetContext0.isChildOrderingRequired());
      
      // Undeclared exception!
//      try { 
        coreFunction0.functionLocalName(nodeSetContext0);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // Incorrect number of arguments: format-number(1, 1, 1, 1, '')
//         //
//         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(21, (Expression[]) null);
      assertNotNull(coreFunction0);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(21, coreFunction0.getFunctionCode());
      
      Object object0 = coreFunction0.computeValue((EvalContext) null);
      assertEquals(false, object0);
      assertNotNull(object0);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(21, coreFunction0.getFunctionCode());
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      CoreFunction coreFunction0 = new CoreFunction(19, expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(19, coreFunction0.getFunctionCode());
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals(1, expressionArray0.length);
      
      // Undeclared exception!
//      try { 
        coreFunction0.computeValue((EvalContext) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      assertFalse(boolean0);
      
      Expression[] expressionArray0 = new Expression[2];
      Float float0 = new Float((double) 13);
      assertEquals(13.0F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      Constant constant0 = new Constant(float0);
      assertNotNull(constant0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      
      expressionArray0[0] = (Expression) constant0;
      CoreOperationGreaterThan coreOperationGreaterThan0 = new CoreOperationGreaterThan(constant0, constant0);
      assertNotNull(coreOperationGreaterThan0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertEquals(">", coreOperationGreaterThan0.getSymbol());
      
      expressionArray0[1] = (Expression) coreOperationGreaterThan0;
      CoreFunction coreFunction0 = new CoreFunction(13, expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(2, coreFunction0.getArgumentCount());
      assertEquals(13, coreFunction0.getFunctionCode());
      assertEquals(2, expressionArray0.length);
      
      String string0 = constant0.toString();
      assertEquals("13", string0);
      assertNotNull(string0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      
      Object object0 = coreFunction0.computeValue((EvalContext) null);
      assertFalse(object0.equals((Object)string0));
      assertEquals("", object0);
      assertNotNull(object0);
      assertEquals(2, coreFunction0.getArgumentCount());
      assertEquals(13, coreFunction0.getFunctionCode());
      assertEquals(2, expressionArray0.length);
      
      Object object1 = coreFunction0.functionSubstring((EvalContext) null);
      assertTrue(object1.equals((Object)string0));
      assertFalse(object1.equals((Object)object0));
      assertEquals("13", object1);
      assertNotNull(object1);
      assertEquals(2, coreFunction0.getArgumentCount());
      assertEquals(13, coreFunction0.getFunctionCode());
      assertEquals(2, expressionArray0.length);
      
      // Undeclared exception!
//      try { 
        coreFunction0.functionRound((EvalContext) null);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // Incorrect number of arguments: substring-after(13, org.apache.commons.jxpath.ri.compiler.Constant@0000000001 > org.apache.commons.jxpath.ri.compiler.Constant@0000000001)
//         //
//         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[4];
      QName qName0 = new QName("e9", "e9");
      assertNotNull(qName0);
      assertEquals("e9:e9", qName0.toString());
      assertEquals("e9", qName0.getPrefix());
      assertEquals("e9", qName0.getName());
      
      VariableReference variableReference0 = new VariableReference(qName0);
      assertNotNull(variableReference0);
      assertEquals("e9:e9", qName0.toString());
      assertEquals("e9", qName0.getPrefix());
      assertEquals("e9", qName0.getName());
      assertFalse(variableReference0.computeContextDependent());
      assertFalse(variableReference0.isContextDependent());
      
      CoreOperationGreaterThan coreOperationGreaterThan0 = new CoreOperationGreaterThan(variableReference0, variableReference0);
      assertNotNull(coreOperationGreaterThan0);
      assertEquals("e9:e9", qName0.toString());
      assertEquals("e9", qName0.getPrefix());
      assertEquals("e9", qName0.getName());
      assertFalse(variableReference0.computeContextDependent());
      assertFalse(variableReference0.isContextDependent());
      assertEquals(">", coreOperationGreaterThan0.getSymbol());
      
      CoreOperationNegate coreOperationNegate0 = new CoreOperationNegate(coreOperationGreaterThan0);
      assertNotNull(coreOperationNegate0);
      assertEquals("e9:e9", qName0.toString());
      assertEquals("e9", qName0.getPrefix());
      assertEquals("e9", qName0.getName());
      assertFalse(variableReference0.computeContextDependent());
      assertFalse(variableReference0.isContextDependent());
      assertEquals(">", coreOperationGreaterThan0.getSymbol());
      assertEquals("-", coreOperationNegate0.getSymbol());
      
      CoreOperationSubtract coreOperationSubtract0 = new CoreOperationSubtract(coreOperationNegate0, coreOperationGreaterThan0);
      assertNotNull(coreOperationSubtract0);
      assertEquals("e9:e9", qName0.toString());
      assertEquals("e9", qName0.getPrefix());
      assertEquals("e9", qName0.getName());
      assertFalse(variableReference0.computeContextDependent());
      assertFalse(variableReference0.isContextDependent());
      assertEquals(">", coreOperationGreaterThan0.getSymbol());
      assertEquals("-", coreOperationNegate0.getSymbol());
      assertEquals("-", coreOperationSubtract0.getSymbol());
      
      expressionArray0[0] = (Expression) coreOperationSubtract0;
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd(expressionArray0);
      assertNotNull(coreOperationAdd0);
      assertEquals("+", coreOperationAdd0.getSymbol());
      assertEquals(4, expressionArray0.length);
      
      expressionArray0[1] = (Expression) coreOperationAdd0;
      ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, expressionArray0);
      assertNotNull(extensionFunction0);
      assertEquals("e9:e9", qName0.toString());
      assertEquals("e9", qName0.getPrefix());
      assertEquals("e9", qName0.getName());
      assertTrue(extensionFunction0.computeContextDependent());
      assertEquals(4, expressionArray0.length);
      
      expressionArray0[2] = (Expression) extensionFunction0;
      ExtensionFunction extensionFunction1 = new ExtensionFunction(qName0, expressionArray0);
      assertFalse(extensionFunction1.equals((Object)extensionFunction0));
      assertNotNull(extensionFunction1);
      assertEquals("e9:e9", qName0.toString());
      assertEquals("e9", qName0.getPrefix());
      assertEquals("e9", qName0.getName());
      assertTrue(extensionFunction1.computeContextDependent());
      assertEquals(4, expressionArray0.length);
      
      expressionArray0[3] = (Expression) extensionFunction1;
      CoreFunction coreFunction0 = new CoreFunction(272, expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(4, coreFunction0.getArgumentCount());
      assertEquals(272, coreFunction0.getFunctionCode());
      assertEquals(4, expressionArray0.length);
      
      BasicNodeSet basicNodeSet0 = new BasicNodeSet();
      assertNotNull(basicNodeSet0);
      
      NodeSetContext nodeSetContext0 = new NodeSetContext((EvalContext) null, basicNodeSet0);
      assertNotNull(nodeSetContext0);
      assertEquals(0, nodeSetContext0.getPosition());
      assertEquals(0, nodeSetContext0.getDocumentOrder());
      assertFalse(nodeSetContext0.isChildOrderingRequired());
      
      QName qName1 = new QName("e9", (String) null);
      assertFalse(qName1.equals((Object)qName0));
      assertNotNull(qName1);
      assertEquals("e9:null", qName1.toString());
      assertEquals("e9", qName1.getPrefix());
      assertNull(qName1.getName());
      
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName1);
      assertFalse(qName1.equals((Object)qName0));
      assertNotNull(nodeNameTest0);
      assertEquals("e9:null", qName1.toString());
      assertEquals("e9", qName1.getPrefix());
      assertNull(qName1.getName());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertEquals("e9:null", nodeNameTest0.toString());
      
      AncestorContext ancestorContext0 = new AncestorContext(nodeSetContext0, true, nodeNameTest0);
      assertFalse(qName1.equals((Object)qName0));
      assertNotNull(ancestorContext0);
      assertEquals("e9:null", qName1.toString());
      assertEquals("e9", qName1.getPrefix());
      assertNull(qName1.getName());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertEquals("e9:null", nodeNameTest0.toString());
      assertEquals((-1), ancestorContext0.getDocumentOrder());
      assertEquals(0, ancestorContext0.getPosition());
      assertTrue(ancestorContext0.isChildOrderingRequired());
      assertEquals(0, nodeSetContext0.getPosition());
      assertEquals(0, nodeSetContext0.getDocumentOrder());
      assertFalse(nodeSetContext0.isChildOrderingRequired());
      
      // Undeclared exception!
      coreFunction0.functionPosition(ancestorContext0);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      assertFalse(boolean0);
      
      Expression[] expressionArray0 = new Expression[2];
      Float float0 = new Float((double) 13);
      assertEquals(13.0F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      Constant constant0 = new Constant(float0);
      assertNotNull(constant0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      
      expressionArray0[0] = (Expression) constant0;
      CoreOperationGreaterThan coreOperationGreaterThan0 = new CoreOperationGreaterThan(constant0, constant0);
      assertNotNull(coreOperationGreaterThan0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertEquals(">", coreOperationGreaterThan0.getSymbol());
      
      expressionArray0[1] = (Expression) coreOperationGreaterThan0;
      CoreFunction coreFunction0 = new CoreFunction(13, expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(2, coreFunction0.getArgumentCount());
      assertEquals(13, coreFunction0.getFunctionCode());
      assertEquals(2, expressionArray0.length);
      
      EvalContext evalContext0 = null;
      Iterator iterator0 = constant0.iterate((EvalContext) null);
      assertNotNull(iterator0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      
      coreOperationGreaterThan0.args = expressionArray0;
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertEquals(">", coreOperationGreaterThan0.getSymbol());
      
      // Undeclared exception!
//      try { 
        coreFunction0.functionKey((EvalContext) null);
//        fail("Expecting exception: StackOverflowError");
      
//      } catch(StackOverflowError e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)10;
      byteArray0[1] = (byte)2;
      byteArray0[2] = (byte)89;
      byteArray0[3] = (byte) (-103);
      byteArray0[4] = (byte)10;
      byteArray0[5] = (byte)56;
      boolean boolean0 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertArrayEquals(new byte[] {(byte)10, (byte)2, (byte)89, (byte) (-103), (byte)10, (byte)56}, byteArray0);
      assertFalse(boolean0);
      assertEquals(6, byteArray0.length);
      
      Expression[] expressionArray0 = new Expression[5];
      Constant constant0 = new Constant((byte)2);
      assertNotNull(constant0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      
      Step[] stepArray0 = new Step[1];
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest((byte)89);
      assertNotNull(nodeTypeTest0);
      assertEquals(89, nodeTypeTest0.getNodeType());
      
      Step step0 = new Step((byte)10, nodeTypeTest0, expressionArray0);
      assertNotNull(step0);
      assertEquals(89, nodeTypeTest0.getNodeType());
      assertEquals(10, step0.getAxis());
      assertEquals(5, expressionArray0.length);
      
      stepArray0[0] = step0;
      ExpressionPath expressionPath0 = new ExpressionPath(constant0, expressionArray0, stepArray0);
      assertNotNull(expressionPath0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertEquals(5, expressionArray0.length);
      assertEquals(1, stepArray0.length);
      
      expressionArray0[0] = (Expression) expressionPath0;
      CoreOperationGreaterThanOrEqual coreOperationGreaterThanOrEqual0 = new CoreOperationGreaterThanOrEqual(expressionPath0, constant0);
      assertNotNull(coreOperationGreaterThanOrEqual0);
      assertEquals(">=", coreOperationGreaterThanOrEqual0.getSymbol());
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertEquals(5, expressionArray0.length);
      assertEquals(1, stepArray0.length);
      
      expressionArray0[1] = (Expression) coreOperationGreaterThanOrEqual0;
      ExpressionPath expressionPath1 = new ExpressionPath(expressionArray0[1], expressionArray0, stepArray0);
      assertFalse(expressionPath1.equals((Object)expressionPath0));
      assertNotNull(expressionPath1);
      assertEquals(5, expressionArray0.length);
      assertEquals(1, stepArray0.length);
      
      expressionArray0[2] = (Expression) expressionPath1;
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd(expressionArray0);
      assertNotNull(coreOperationAdd0);
      assertEquals("+", coreOperationAdd0.getSymbol());
      assertEquals(5, expressionArray0.length);
      
      expressionArray0[3] = (Expression) coreOperationAdd0;
      CoreOperationNegate coreOperationNegate0 = new CoreOperationNegate(expressionPath0);
      assertFalse(expressionPath0.equals((Object)expressionPath1));
      assertNotNull(coreOperationNegate0);
      assertEquals("-", coreOperationNegate0.getSymbol());
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertEquals(5, expressionArray0.length);
      assertEquals(1, stepArray0.length);
      
      expressionArray0[4] = (Expression) coreOperationNegate0;
      CoreFunction coreFunction0 = new CoreFunction((byte)89, expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(89, coreFunction0.getFunctionCode());
      assertEquals(5, coreFunction0.getArgumentCount());
      assertEquals(5, expressionArray0.length);
      
      // Undeclared exception!
//      try { 
        coreFunction0.functionContains((EvalContext) null);
//        fail("Expecting exception: StackOverflowError");
      
//      } catch(StackOverflowError e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[4];
      CoreOperationMod coreOperationMod0 = new CoreOperationMod((Expression) null, (Expression) null);
      assertNotNull(coreOperationMod0);
      assertEquals("mod", coreOperationMod0.getSymbol());
      
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual(coreOperationMod0, coreOperationMod0);
      assertNotNull(coreOperationLessThanOrEqual0);
      assertEquals("mod", coreOperationMod0.getSymbol());
      assertEquals("<=", coreOperationLessThanOrEqual0.getSymbol());
      
      expressionArray0[0] = (Expression) coreOperationLessThanOrEqual0;
      Step[] stepArray0 = new Step[4];
      QName qName0 = new QName("m_8O8O`I}sk !n9j7?", "last");
      assertNotNull(qName0);
      assertEquals("m_8O8O`I}sk !n9j7?", qName0.getPrefix());
      assertEquals("m_8O8O`I}sk !n9j7?:last", qName0.toString());
      assertEquals("last", qName0.getName());
      
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
      assertNotNull(nodeNameTest0);
      assertEquals("m_8O8O`I}sk !n9j7?", qName0.getPrefix());
      assertEquals("m_8O8O`I}sk !n9j7?:last", qName0.toString());
      assertEquals("last", qName0.getName());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals("m_8O8O`I}sk !n9j7?:last", nodeNameTest0.toString());
      assertNull(nodeNameTest0.getNamespaceURI());
      
      Step step0 = new Step(8, nodeNameTest0, expressionArray0);
      assertNotNull(step0);
      assertEquals("m_8O8O`I}sk !n9j7?", qName0.getPrefix());
      assertEquals("m_8O8O`I}sk !n9j7?:last", qName0.toString());
      assertEquals("last", qName0.getName());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals("m_8O8O`I}sk !n9j7?:last", nodeNameTest0.toString());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertEquals(8, step0.getAxis());
      assertEquals(4, expressionArray0.length);
      
      stepArray0[0] = step0;
      Step step1 = new Step(417, nodeNameTest0, expressionArray0);
      assertFalse(step1.equals((Object)step0));
      assertNotNull(step1);
      assertEquals("m_8O8O`I}sk !n9j7?", qName0.getPrefix());
      assertEquals("m_8O8O`I}sk !n9j7?:last", qName0.toString());
      assertEquals("last", qName0.getName());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals("m_8O8O`I}sk !n9j7?:last", nodeNameTest0.toString());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertEquals(417, step1.getAxis());
      assertEquals(4, expressionArray0.length);
      
      stepArray0[1] = step1;
      Step step2 = new Step((-927), nodeNameTest0, expressionArray0);
      assertFalse(step2.equals((Object)step0));
      assertFalse(step2.equals((Object)step1));
      assertNotNull(step2);
      assertEquals("m_8O8O`I}sk !n9j7?", qName0.getPrefix());
      assertEquals("m_8O8O`I}sk !n9j7?:last", qName0.toString());
      assertEquals("last", qName0.getName());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals("m_8O8O`I}sk !n9j7?:last", nodeNameTest0.toString());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertEquals((-927), step2.getAxis());
      assertEquals(4, expressionArray0.length);
      
      stepArray0[2] = step2;
      Step step3 = new Step((-927), nodeNameTest0, expressionArray0);
      assertFalse(step3.equals((Object)step2));
      assertFalse(step3.equals((Object)step1));
      assertFalse(step3.equals((Object)step0));
      assertNotNull(step3);
      assertEquals("m_8O8O`I}sk !n9j7?", qName0.getPrefix());
      assertEquals("m_8O8O`I}sk !n9j7?:last", qName0.toString());
      assertEquals("last", qName0.getName());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals("m_8O8O`I}sk !n9j7?:last", nodeNameTest0.toString());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertEquals((-927), step3.getAxis());
      assertEquals(4, expressionArray0.length);
      
      stepArray0[3] = step3;
      LocationPath locationPath0 = new LocationPath(false, stepArray0);
      assertNotNull(locationPath0);
      assertFalse(locationPath0.isAbsolute());
      assertEquals(4, stepArray0.length);
      
      expressionArray0[1] = (Expression) locationPath0;
      CoreOperationDivide coreOperationDivide0 = new CoreOperationDivide(expressionArray0[1], expressionArray0[1]);
      assertNotNull(coreOperationDivide0);
      assertEquals("div", coreOperationDivide0.getSymbol());
      assertEquals(4, expressionArray0.length);
      
      CoreOperationNotEqual coreOperationNotEqual0 = new CoreOperationNotEqual(expressionArray0[1], coreOperationDivide0);
      assertNotNull(coreOperationNotEqual0);
      assertEquals("div", coreOperationDivide0.getSymbol());
      assertEquals("!=", coreOperationNotEqual0.getSymbol());
      assertEquals(4, expressionArray0.length);
      
      expressionArray0[2] = (Expression) coreOperationNotEqual0;
      CoreOperationNotEqual coreOperationNotEqual1 = new CoreOperationNotEqual(coreOperationNotEqual0, coreOperationMod0);
      assertFalse(coreOperationNotEqual1.equals((Object)coreOperationNotEqual0));
      assertNotNull(coreOperationNotEqual1);
      assertEquals("div", coreOperationDivide0.getSymbol());
      assertEquals("mod", coreOperationMod0.getSymbol());
      assertEquals("!=", coreOperationNotEqual0.getSymbol());
      assertEquals("!=", coreOperationNotEqual1.getSymbol());
      assertEquals(4, expressionArray0.length);
      
      expressionArray0[3] = (Expression) coreOperationNotEqual1;
      CoreFunction coreFunction0 = new CoreFunction((-927), expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals((-927), coreFunction0.getFunctionCode());
      assertEquals(4, coreFunction0.getArgumentCount());
      assertEquals(4, expressionArray0.length);
      
      AttributeContext attributeContext0 = new AttributeContext((EvalContext) null, (NodeTest) null);
      assertNotNull(attributeContext0);
      assertEquals(0, attributeContext0.getDocumentOrder());
      assertEquals(0, attributeContext0.getPosition());
      assertFalse(attributeContext0.isChildOrderingRequired());
      
      // Undeclared exception!
      coreFunction0.functionLast((EvalContext) null);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      assertFalse(boolean0);
      
      Expression[] expressionArray0 = new Expression[2];
      Float float0 = new Float((double) 13);
      assertEquals(13.0F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      Constant constant0 = new Constant(float0);
      assertNotNull(constant0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      
      expressionArray0[0] = (Expression) constant0;
      CoreOperationGreaterThan coreOperationGreaterThan0 = new CoreOperationGreaterThan(constant0, constant0);
      assertNotNull(coreOperationGreaterThan0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertEquals(">", coreOperationGreaterThan0.getSymbol());
      
      expressionArray0[1] = (Expression) coreOperationGreaterThan0;
      CoreFunction coreFunction0 = new CoreFunction(13, expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(2, coreFunction0.getArgumentCount());
      assertEquals(13, coreFunction0.getFunctionCode());
      assertEquals(2, expressionArray0.length);
      
      Iterator iterator0 = constant0.iterate((EvalContext) null);
      assertNotNull(iterator0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      
      // Undeclared exception!
//      try { 
        coreFunction0.functionKey((EvalContext) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(11, expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(11, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(0, expressionArray0.length);
      
      // Undeclared exception!
//      try { 
        coreFunction0.computeValue((EvalContext) null);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // Incorrect number of arguments: contains()
//         //
//         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      Float float0 = new Float((float) 2131);
      assertEquals(2131.0F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      Constant constant0 = new Constant((Number) null);
      assertNotNull(constant0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      
      expressionArray0[0] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction(2131, expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals(2131, coreFunction0.getFunctionCode());
      assertEquals(1, expressionArray0.length);
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl)JXPathContext.newContext((Object) expressionArray0[0]);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertNotNull(jXPathContextReferenceImpl0);
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertEquals(1, expressionArray0.length);
      
      InitialContext initialContext0 = (InitialContext)jXPathContextReferenceImpl0.getAbsoluteRootContext();
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertNotNull(initialContext0);
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertEquals(0, initialContext0.getDocumentOrder());
      assertEquals(0, initialContext0.getPosition());
      assertFalse(initialContext0.isChildOrderingRequired());
      assertEquals(1, expressionArray0.length);
      
      Boolean boolean0 = (Boolean)coreFunction0.functionLang(initialContext0);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertTrue(boolean0);
      assertNotNull(boolean0);
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals(2131, coreFunction0.getFunctionCode());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertEquals(0, initialContext0.getDocumentOrder());
      assertEquals(0, initialContext0.getPosition());
      assertFalse(initialContext0.isChildOrderingRequired());
      assertEquals(1, expressionArray0.length);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[7];
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd(expressionArray0);
      assertNotNull(coreOperationAdd0);
      assertEquals("+", coreOperationAdd0.getSymbol());
      assertEquals(7, expressionArray0.length);
      
      Step[] stepArray0 = new Step[7];
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest((-1406));
      assertNotNull(nodeTypeTest0);
      assertEquals((-1406), nodeTypeTest0.getNodeType());
      
      Step step0 = new Step(845, nodeTypeTest0, expressionArray0);
      assertNotNull(step0);
      assertEquals((-1406), nodeTypeTest0.getNodeType());
      assertEquals(845, step0.getAxis());
      assertEquals(7, expressionArray0.length);
      
      stepArray0[0] = step0;
      Step step1 = new Step(845, nodeTypeTest0, expressionArray0);
      assertFalse(step1.equals((Object)step0));
      assertNotNull(step1);
      assertEquals((-1406), nodeTypeTest0.getNodeType());
      assertEquals(845, step1.getAxis());
      assertEquals(7, expressionArray0.length);
      
      stepArray0[1] = step1;
      Step step2 = new Step((-1406), nodeTypeTest0, expressionArray0);
      assertFalse(step2.equals((Object)step1));
      assertFalse(step2.equals((Object)step0));
      assertNotNull(step2);
      assertEquals((-1406), nodeTypeTest0.getNodeType());
      assertEquals((-1406), step2.getAxis());
      assertEquals(7, expressionArray0.length);
      
      stepArray0[2] = step2;
      Expression[] expressionArray1 = new Expression[3];
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      
      expressionArray1[0] = (Expression) coreOperationAdd0;
      expressionArray1[1] = (Expression) coreOperationAdd0;
      CoreOperationAnd coreOperationAnd0 = new CoreOperationAnd(expressionArray1);
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertNotNull(coreOperationAnd0);
      assertEquals("and", coreOperationAnd0.getSymbol());
      assertEquals(3, expressionArray1.length);
      
      expressionArray1[2] = (Expression) coreOperationAnd0;
      Step step3 = new Step(2064, nodeTypeTest0, expressionArray1);
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertFalse(step3.equals((Object)step2));
      assertFalse(step3.equals((Object)step1));
      assertFalse(step3.equals((Object)step0));
      assertNotNull(step3);
      assertEquals((-1406), nodeTypeTest0.getNodeType());
      assertEquals(2064, step3.getAxis());
      assertEquals(3, expressionArray1.length);
      
      stepArray0[3] = step3;
      Step step4 = new Step((-1406), (NodeTest) null, expressionArray0);
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertFalse(step4.equals((Object)step2));
      assertFalse(step4.equals((Object)step1));
      assertFalse(step4.equals((Object)step3));
      assertFalse(step4.equals((Object)step0));
      assertNotNull(step4);
      assertEquals((-1406), step4.getAxis());
      assertEquals(7, expressionArray0.length);
      
      stepArray0[4] = step4;
      Step step5 = new Step((-1406), (NodeTest) null, expressionArray1);
      assertFalse(step5.equals((Object)step2));
      assertFalse(step5.equals((Object)step3));
      assertFalse(step5.equals((Object)step1));
      assertFalse(step5.equals((Object)step0));
      assertFalse(step5.equals((Object)step4));
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertNotNull(step5);
      assertEquals((-1406), step5.getAxis());
      assertEquals(3, expressionArray1.length);
      
      stepArray0[5] = step5;
      Step step6 = new Step(1734, (NodeTest) null, expressionArray0);
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertFalse(step6.equals((Object)step1));
      assertFalse(step6.equals((Object)step0));
      assertFalse(step6.equals((Object)step4));
      assertFalse(step6.equals((Object)step2));
      assertFalse(step6.equals((Object)step3));
      assertFalse(step6.equals((Object)step5));
      assertNotNull(step6);
      assertEquals(1734, step6.getAxis());
      assertEquals(7, expressionArray0.length);
      
      stepArray0[6] = step6;
      ExpressionPath expressionPath0 = new ExpressionPath(coreOperationAdd0, expressionArray0, stepArray0);
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertNotNull(expressionPath0);
      assertEquals("+", coreOperationAdd0.getSymbol());
      assertEquals(7, expressionArray0.length);
      assertEquals(7, stepArray0.length);
      
      CoreOperationNotEqual coreOperationNotEqual0 = new CoreOperationNotEqual(expressionPath0, coreOperationAnd0);
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertNotNull(coreOperationNotEqual0);
      assertEquals("+", coreOperationAdd0.getSymbol());
      assertEquals("!=", coreOperationNotEqual0.getSymbol());
      assertEquals("and", coreOperationAnd0.getSymbol());
      assertEquals(7, expressionArray0.length);
      assertEquals(7, stepArray0.length);
      assertEquals(3, expressionArray1.length);
      
      expressionArray0[0] = (Expression) coreOperationNotEqual0;
      Step[] stepArray1 = new Step[8];
      assertFalse(stepArray1.equals((Object)stepArray0));
      
      stepArray1[0] = step6;
      stepArray1[1] = step6;
      stepArray1[2] = step0;
      stepArray1[3] = step4;
      stepArray1[4] = step1;
      stepArray1[5] = step1;
      stepArray1[6] = step5;
      stepArray1[7] = step0;
      LocationPath locationPath0 = new LocationPath(false, stepArray1);
      assertFalse(stepArray1.equals((Object)stepArray0));
      assertNotNull(locationPath0);
      assertFalse(locationPath0.isAbsolute());
      assertEquals(8, stepArray1.length);
      
      CoreOperationGreaterThan coreOperationGreaterThan0 = new CoreOperationGreaterThan(expressionArray1[2], locationPath0);
      assertFalse(stepArray1.equals((Object)stepArray0));
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertNotNull(coreOperationGreaterThan0);
      assertFalse(locationPath0.isAbsolute());
      assertEquals(">", coreOperationGreaterThan0.getSymbol());
      assertEquals(8, stepArray1.length);
      assertEquals(3, expressionArray1.length);
      
      expressionArray0[1] = (Expression) coreOperationGreaterThan0;
      Constant constant0 = new Constant("JcfM##`M!# LE");
      assertNotNull(constant0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      
      expressionArray0[2] = (Expression) constant0;
      CoreOperationLessThan coreOperationLessThan0 = new CoreOperationLessThan(constant0, expressionArray1[1]);
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertNotNull(coreOperationLessThan0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertEquals("<", coreOperationLessThan0.getSymbol());
      assertEquals(3, expressionArray1.length);
      
      expressionArray0[3] = (Expression) coreOperationLessThan0;
      LocationPath locationPath1 = new LocationPath(false, stepArray1);
      assertFalse(locationPath1.equals((Object)locationPath0));
      assertFalse(stepArray1.equals((Object)stepArray0));
      assertNotNull(locationPath1);
      assertFalse(locationPath1.isAbsolute());
      assertEquals(8, stepArray1.length);
      
      expressionArray0[4] = (Expression) locationPath1;
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual(expressionArray0[2], constant0);
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertNotNull(coreOperationLessThanOrEqual0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertEquals("<=", coreOperationLessThanOrEqual0.getSymbol());
      assertEquals(7, expressionArray0.length);
      
      expressionArray0[5] = (Expression) coreOperationLessThanOrEqual0;
      CoreOperationNegate coreOperationNegate0 = new CoreOperationNegate(locationPath1);
      assertFalse(locationPath1.equals((Object)locationPath0));
      assertFalse(stepArray1.equals((Object)stepArray0));
      assertNotNull(coreOperationNegate0);
      assertFalse(locationPath1.isAbsolute());
      assertEquals("-", coreOperationNegate0.getSymbol());
      assertEquals(8, stepArray1.length);
      
      expressionArray0[6] = (Expression) coreOperationNegate0;
      CoreFunction coreFunction0 = new CoreFunction((-1406), expressionArray0);
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertNotNull(coreFunction0);
      assertEquals((-1406), coreFunction0.getFunctionCode());
      assertEquals(7, coreFunction0.getArgumentCount());
      assertEquals(7, expressionArray0.length);
      
      PredicateContext predicateContext0 = new PredicateContext((EvalContext) null, locationPath1);
      assertFalse(locationPath1.equals((Object)locationPath0));
      assertFalse(stepArray1.equals((Object)stepArray0));
      assertNotNull(predicateContext0);
      assertFalse(predicateContext0.isChildOrderingRequired());
      assertEquals(0, predicateContext0.getPosition());
      assertEquals(0, predicateContext0.getDocumentOrder());
      assertFalse(locationPath1.isAbsolute());
      assertEquals(8, stepArray1.length);
      
      // Undeclared exception!
      coreFunction0.functionCount(predicateContext0);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      QName qName0 = new QName((String) null, "BTDxt");
      assertNotNull(qName0);
      assertNull(qName0.getPrefix());
      assertEquals("BTDxt", qName0.getName());
      assertEquals("BTDxt", qName0.toString());
      
      ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, expressionArray0);
      assertNotNull(extensionFunction0);
      assertNull(qName0.getPrefix());
      assertEquals("BTDxt", qName0.getName());
      assertEquals("BTDxt", qName0.toString());
      assertTrue(extensionFunction0.computeContextDependent());
      assertEquals(1, expressionArray0.length);
      
      CoreOperationDivide coreOperationDivide0 = new CoreOperationDivide(extensionFunction0, extensionFunction0);
      assertNotNull(coreOperationDivide0);
      assertNull(qName0.getPrefix());
      assertEquals("BTDxt", qName0.getName());
      assertEquals("BTDxt", qName0.toString());
      assertTrue(extensionFunction0.computeContextDependent());
      assertEquals("div", coreOperationDivide0.getSymbol());
      assertEquals(1, expressionArray0.length);
      
      expressionArray0[0] = (Expression) coreOperationDivide0;
      CoreFunction coreFunction0 = new CoreFunction((-2143951602), expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals((-2143951602), coreFunction0.getFunctionCode());
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals(1, expressionArray0.length);
      
      // Undeclared exception!
//      try { 
        coreFunction0.functionCeiling((EvalContext) null);
//        fail("Expecting exception: StackOverflowError");
      
//      } catch(StackOverflowError e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(28, (Expression[]) null);
      assertNotNull(coreFunction0);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(28, coreFunction0.getFunctionCode());
      
      boolean boolean0 = coreFunction0.isContextDependent();
      assertFalse(boolean0);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(28, coreFunction0.getFunctionCode());
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(0, (Expression[]) null);
      assertNotNull(coreFunction0);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(0, coreFunction0.getFunctionCode());
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl)JXPathContext.newContext((Object) coreFunction0);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertNotNull(jXPathContextReferenceImpl0);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(0, coreFunction0.getFunctionCode());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      
      QName qName0 = new QName("3[U 7WPZ8P2xLOTKi J", "3[U 7WPZ8P2xLOTKi J");
      assertNotNull(qName0);
      assertEquals("3[U 7WPZ8P2xLOTKi J:3[U 7WPZ8P2xLOTKi J", qName0.toString());
      assertEquals("3[U 7WPZ8P2xLOTKi J", qName0.getName());
      assertEquals("3[U 7WPZ8P2xLOTKi J", qName0.getPrefix());
      
      BeanPointer beanPointer0 = (BeanPointer)NodePointer.newChildNodePointer((NodePointer) null, qName0, qName0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(beanPointer0);
      assertEquals("3[U 7WPZ8P2xLOTKi J:3[U 7WPZ8P2xLOTKi J", qName0.toString());
      assertEquals("3[U 7WPZ8P2xLOTKi J", qName0.getName());
      assertEquals("3[U 7WPZ8P2xLOTKi J", qName0.getPrefix());
      assertEquals(1, beanPointer0.getLength());
      assertNull(beanPointer0.getNamespaceURI());
      assertFalse(beanPointer0.isDynamicPropertyDeclarationSupported());
      assertEquals(Integer.MIN_VALUE, beanPointer0.getIndex());
      assertTrue(beanPointer0.isRoot());
      assertFalse(beanPointer0.isContainer());
      assertFalse(beanPointer0.isCollection());
      assertFalse(beanPointer0.isAttribute());
      assertTrue(beanPointer0.isNode());
      
      NodeIterator nodeIterator0 = beanPointer0.namespaceIterator();
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNull(nodeIterator0);
      assertEquals("3[U 7WPZ8P2xLOTKi J:3[U 7WPZ8P2xLOTKi J", qName0.toString());
      assertEquals("3[U 7WPZ8P2xLOTKi J", qName0.getName());
      assertEquals("3[U 7WPZ8P2xLOTKi J", qName0.getPrefix());
      assertEquals(1, beanPointer0.getLength());
      assertNull(beanPointer0.getNamespaceURI());
      assertFalse(beanPointer0.isDynamicPropertyDeclarationSupported());
      assertEquals(Integer.MIN_VALUE, beanPointer0.getIndex());
      assertTrue(beanPointer0.isRoot());
      assertFalse(beanPointer0.isContainer());
      assertFalse(beanPointer0.isCollection());
      assertFalse(beanPointer0.isAttribute());
      assertTrue(beanPointer0.isNode());
      
      RootContext rootContext0 = new RootContext(jXPathContextReferenceImpl0, beanPointer0);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(rootContext0);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(0, coreFunction0.getFunctionCode());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertEquals("3[U 7WPZ8P2xLOTKi J:3[U 7WPZ8P2xLOTKi J", qName0.toString());
      assertEquals("3[U 7WPZ8P2xLOTKi J", qName0.getName());
      assertEquals("3[U 7WPZ8P2xLOTKi J", qName0.getPrefix());
      assertEquals(1, beanPointer0.getLength());
      assertNull(beanPointer0.getNamespaceURI());
      assertFalse(beanPointer0.isDynamicPropertyDeclarationSupported());
      assertEquals(Integer.MIN_VALUE, beanPointer0.getIndex());
      assertTrue(beanPointer0.isRoot());
      assertFalse(beanPointer0.isContainer());
      assertFalse(beanPointer0.isCollection());
      assertFalse(beanPointer0.isAttribute());
      assertTrue(beanPointer0.isNode());
      assertEquals(0, rootContext0.getPosition());
      assertEquals(0, rootContext0.getDocumentOrder());
      assertFalse(rootContext0.isChildOrderingRequired());
      
      RootContext rootContext1 = rootContext0.getRootContext();
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(rootContext1);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(0, coreFunction0.getFunctionCode());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertEquals("3[U 7WPZ8P2xLOTKi J:3[U 7WPZ8P2xLOTKi J", qName0.toString());
      assertEquals("3[U 7WPZ8P2xLOTKi J", qName0.getName());
      assertEquals("3[U 7WPZ8P2xLOTKi J", qName0.getPrefix());
      assertEquals(1, beanPointer0.getLength());
      assertNull(beanPointer0.getNamespaceURI());
      assertFalse(beanPointer0.isDynamicPropertyDeclarationSupported());
      assertEquals(Integer.MIN_VALUE, beanPointer0.getIndex());
      assertTrue(beanPointer0.isRoot());
      assertFalse(beanPointer0.isContainer());
      assertFalse(beanPointer0.isCollection());
      assertFalse(beanPointer0.isAttribute());
      assertTrue(beanPointer0.isNode());
      assertEquals(0, rootContext0.getPosition());
      assertEquals(0, rootContext0.getDocumentOrder());
      assertFalse(rootContext0.isChildOrderingRequired());
      assertFalse(rootContext1.isChildOrderingRequired());
      assertEquals(0, rootContext1.getDocumentOrder());
      assertEquals(0, rootContext1.getPosition());
      assertSame(rootContext0, rootContext1);
      assertSame(rootContext1, rootContext0);
      
      PredicateContext predicateContext0 = new PredicateContext(rootContext1, coreFunction0);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(predicateContext0);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(0, coreFunction0.getFunctionCode());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertEquals("3[U 7WPZ8P2xLOTKi J:3[U 7WPZ8P2xLOTKi J", qName0.toString());
      assertEquals("3[U 7WPZ8P2xLOTKi J", qName0.getName());
      assertEquals("3[U 7WPZ8P2xLOTKi J", qName0.getPrefix());
      assertEquals(1, beanPointer0.getLength());
      assertNull(beanPointer0.getNamespaceURI());
      assertFalse(beanPointer0.isDynamicPropertyDeclarationSupported());
      assertEquals(Integer.MIN_VALUE, beanPointer0.getIndex());
      assertTrue(beanPointer0.isRoot());
      assertFalse(beanPointer0.isContainer());
      assertFalse(beanPointer0.isCollection());
      assertFalse(beanPointer0.isAttribute());
      assertTrue(beanPointer0.isNode());
      assertEquals(0, rootContext0.getPosition());
      assertEquals(0, rootContext0.getDocumentOrder());
      assertFalse(rootContext0.isChildOrderingRequired());
      assertFalse(rootContext1.isChildOrderingRequired());
      assertEquals(0, rootContext1.getDocumentOrder());
      assertEquals(0, rootContext1.getPosition());
      assertEquals(0, predicateContext0.getPosition());
      assertEquals(0, predicateContext0.getDocumentOrder());
      assertFalse(predicateContext0.isChildOrderingRequired());
      
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("3[U 7WPZ8P2xLOTKi J");
      assertNotNull(processingInstructionTest0);
      assertEquals("3[U 7WPZ8P2xLOTKi J", processingInstructionTest0.getTarget());
      
      AttributeContext attributeContext0 = new AttributeContext(rootContext0, processingInstructionTest0);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(attributeContext0);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(0, coreFunction0.getFunctionCode());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertEquals("3[U 7WPZ8P2xLOTKi J:3[U 7WPZ8P2xLOTKi J", qName0.toString());
      assertEquals("3[U 7WPZ8P2xLOTKi J", qName0.getName());
      assertEquals("3[U 7WPZ8P2xLOTKi J", qName0.getPrefix());
      assertEquals(1, beanPointer0.getLength());
      assertNull(beanPointer0.getNamespaceURI());
      assertFalse(beanPointer0.isDynamicPropertyDeclarationSupported());
      assertEquals(Integer.MIN_VALUE, beanPointer0.getIndex());
      assertTrue(beanPointer0.isRoot());
      assertFalse(beanPointer0.isContainer());
      assertFalse(beanPointer0.isCollection());
      assertFalse(beanPointer0.isAttribute());
      assertTrue(beanPointer0.isNode());
      assertEquals(0, rootContext0.getPosition());
      assertEquals(0, rootContext0.getDocumentOrder());
      assertFalse(rootContext0.isChildOrderingRequired());
      assertEquals("3[U 7WPZ8P2xLOTKi J", processingInstructionTest0.getTarget());
      assertEquals(0, attributeContext0.getPosition());
      assertFalse(attributeContext0.isChildOrderingRequired());
      assertEquals(0, attributeContext0.getDocumentOrder());
      
      AttributeContext attributeContext1 = new AttributeContext(attributeContext0, processingInstructionTest0);
      assertFalse(attributeContext1.equals((Object)attributeContext0));
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(attributeContext1);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(0, coreFunction0.getFunctionCode());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertEquals("3[U 7WPZ8P2xLOTKi J:3[U 7WPZ8P2xLOTKi J", qName0.toString());
      assertEquals("3[U 7WPZ8P2xLOTKi J", qName0.getName());
      assertEquals("3[U 7WPZ8P2xLOTKi J", qName0.getPrefix());
      assertEquals(1, beanPointer0.getLength());
      assertNull(beanPointer0.getNamespaceURI());
      assertFalse(beanPointer0.isDynamicPropertyDeclarationSupported());
      assertEquals(Integer.MIN_VALUE, beanPointer0.getIndex());
      assertTrue(beanPointer0.isRoot());
      assertFalse(beanPointer0.isContainer());
      assertFalse(beanPointer0.isCollection());
      assertFalse(beanPointer0.isAttribute());
      assertTrue(beanPointer0.isNode());
      assertEquals(0, rootContext0.getPosition());
      assertEquals(0, rootContext0.getDocumentOrder());
      assertFalse(rootContext0.isChildOrderingRequired());
      assertEquals("3[U 7WPZ8P2xLOTKi J", processingInstructionTest0.getTarget());
      assertEquals(0, attributeContext0.getPosition());
      assertFalse(attributeContext0.isChildOrderingRequired());
      assertEquals(0, attributeContext0.getDocumentOrder());
      assertEquals(0, attributeContext1.getDocumentOrder());
      assertEquals(0, attributeContext1.getPosition());
      assertFalse(attributeContext1.isChildOrderingRequired());
      
      CoreFunction coreFunction1 = new CoreFunction(0, (Expression[]) null);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertNotNull(coreFunction1);
      assertEquals(0, coreFunction1.getArgumentCount());
      assertEquals(0, coreFunction1.getFunctionCode());
      
      // Undeclared exception!
//      try { 
        coreFunction1.functionLast(predicateContext0);
//        fail("Expecting exception: UnsupportedOperationException");
      
//      } catch(UnsupportedOperationException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.jxpath.ri.axes.RootContext", e);
//      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      CoreFunction coreFunction0 = new CoreFunction(8, (Expression[]) null);
      assertNotNull(coreFunction0);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(8, coreFunction0.getFunctionCode());
      
      String string0 = coreFunction0.getFunctionName();
      assertEquals("string", string0);
      assertNotNull(string0);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(8, coreFunction0.getFunctionCode());
      
      String string1 = coreFunction0.getFunctionName();
      assertEquals("string", string1);
      assertNotNull(string1);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(8, coreFunction0.getFunctionCode());
      
      // Undeclared exception!
//      try { 
        coreFunction0.computeValue((EvalContext) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[2];
      CoreOperationOr coreOperationOr0 = new CoreOperationOr(expressionArray0);
      assertNotNull(coreOperationOr0);
      assertEquals("or", coreOperationOr0.getSymbol());
      assertEquals(2, expressionArray0.length);
      
      CoreOperationGreaterThanOrEqual coreOperationGreaterThanOrEqual0 = new CoreOperationGreaterThanOrEqual(coreOperationOr0, coreOperationOr0);
      assertNotNull(coreOperationGreaterThanOrEqual0);
      assertEquals("or", coreOperationOr0.getSymbol());
      assertEquals(">=", coreOperationGreaterThanOrEqual0.getSymbol());
      assertEquals(2, expressionArray0.length);
      
      CoreOperationNegate coreOperationNegate0 = new CoreOperationNegate(coreOperationGreaterThanOrEqual0);
      assertNotNull(coreOperationNegate0);
      assertEquals("or", coreOperationOr0.getSymbol());
      assertEquals(">=", coreOperationGreaterThanOrEqual0.getSymbol());
      assertEquals("-", coreOperationNegate0.getSymbol());
      assertEquals(2, expressionArray0.length);
      
      CoreOperationNotEqual coreOperationNotEqual0 = new CoreOperationNotEqual(coreOperationNegate0, coreOperationGreaterThanOrEqual0);
      assertNotNull(coreOperationNotEqual0);
      assertEquals("or", coreOperationOr0.getSymbol());
      assertEquals(">=", coreOperationGreaterThanOrEqual0.getSymbol());
      assertEquals("-", coreOperationNegate0.getSymbol());
      assertEquals("!=", coreOperationNotEqual0.getSymbol());
      assertEquals(2, expressionArray0.length);
      
      expressionArray0[0] = (Expression) coreOperationNotEqual0;
      Step[] stepArray0 = new Step[7];
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(64);
      assertNotNull(nodeTypeTest0);
      assertEquals(64, nodeTypeTest0.getNodeType());
      
      Step step0 = new Step(3170, nodeTypeTest0, expressionArray0);
      assertNotNull(step0);
      assertEquals(64, nodeTypeTest0.getNodeType());
      assertEquals(3170, step0.getAxis());
      assertEquals(2, expressionArray0.length);
      
      stepArray0[0] = step0;
      Step step1 = new Step(87, nodeTypeTest0, expressionArray0);
      assertFalse(step1.equals((Object)step0));
      assertNotNull(step1);
      assertEquals(64, nodeTypeTest0.getNodeType());
      assertEquals(87, step1.getAxis());
      assertEquals(2, expressionArray0.length);
      
      stepArray0[1] = step1;
      Step step2 = new Step(1622, nodeTypeTest0, expressionArray0);
      assertFalse(step2.equals((Object)step0));
      assertFalse(step2.equals((Object)step1));
      assertNotNull(step2);
      assertEquals(64, nodeTypeTest0.getNodeType());
      assertEquals(1622, step2.getAxis());
      assertEquals(2, expressionArray0.length);
      
      stepArray0[2] = step2;
      Step step3 = new Step(213, nodeTypeTest0, expressionArray0);
      assertFalse(step3.equals((Object)step1));
      assertFalse(step3.equals((Object)step0));
      assertFalse(step3.equals((Object)step2));
      assertNotNull(step3);
      assertEquals(64, nodeTypeTest0.getNodeType());
      assertEquals(213, step3.getAxis());
      assertEquals(2, expressionArray0.length);
      
      stepArray0[3] = step3;
      Step step4 = new Step((-59), nodeTypeTest0, expressionArray0);
      assertFalse(step4.equals((Object)step1));
      assertFalse(step4.equals((Object)step3));
      assertFalse(step4.equals((Object)step0));
      assertFalse(step4.equals((Object)step2));
      assertNotNull(step4);
      assertEquals((-59), step4.getAxis());
      assertEquals(64, nodeTypeTest0.getNodeType());
      assertEquals(2, expressionArray0.length);
      
      stepArray0[4] = step4;
      Step step5 = new Step(95, nodeTypeTest0, expressionArray0);
      assertFalse(step5.equals((Object)step0));
      assertFalse(step5.equals((Object)step1));
      assertFalse(step5.equals((Object)step3));
      assertFalse(step5.equals((Object)step2));
      assertFalse(step5.equals((Object)step4));
      assertNotNull(step5);
      assertEquals(95, step5.getAxis());
      assertEquals(64, nodeTypeTest0.getNodeType());
      assertEquals(2, expressionArray0.length);
      
      stepArray0[5] = step5;
      Step step6 = new Step(1, nodeTypeTest0, expressionArray0);
      assertFalse(step6.equals((Object)step2));
      assertFalse(step6.equals((Object)step3));
      assertFalse(step6.equals((Object)step0));
      assertFalse(step6.equals((Object)step5));
      assertFalse(step6.equals((Object)step1));
      assertFalse(step6.equals((Object)step4));
      assertNotNull(step6);
      assertEquals(1, step6.getAxis());
      assertEquals(64, nodeTypeTest0.getNodeType());
      assertEquals(2, expressionArray0.length);
      
      stepArray0[6] = step6;
      LocationPath locationPath0 = new LocationPath(true, stepArray0);
      assertNotNull(locationPath0);
      assertTrue(locationPath0.isAbsolute());
      assertEquals(7, stepArray0.length);
      
      expressionArray0[1] = (Expression) locationPath0;
      CoreFunction coreFunction0 = new CoreFunction(1255, expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(1255, coreFunction0.getFunctionCode());
      assertEquals(2, coreFunction0.getArgumentCount());
      assertEquals(2, expressionArray0.length);
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl)JXPathContext.newContext((Object) step1);
      assertFalse(step1.equals((Object)step5));
      assertFalse(step1.equals((Object)step2));
      assertFalse(step1.equals((Object)step3));
      assertFalse(step1.equals((Object)step0));
      assertFalse(step1.equals((Object)step6));
      assertFalse(step1.equals((Object)step4));
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertNotNull(jXPathContextReferenceImpl0);
      assertEquals(64, nodeTypeTest0.getNodeType());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertEquals(87, step1.getAxis());
      assertEquals(2, expressionArray0.length);
      assertNotSame(step1, step5);
      assertNotSame(step1, step2);
      assertNotSame(step1, step3);
      assertNotSame(step1, step0);
      assertNotSame(step1, step6);
      assertNotSame(step1, step4);
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl1 = new JXPathContextReferenceImpl(jXPathContextReferenceImpl0, step2, (Pointer) null);
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl0));
      assertFalse(step1.equals((Object)step5));
      assertFalse(step1.equals((Object)step2));
      assertFalse(step1.equals((Object)step3));
      assertFalse(step1.equals((Object)step0));
      assertFalse(step1.equals((Object)step6));
      assertFalse(step1.equals((Object)step4));
      assertFalse(step2.equals((Object)step5));
      assertFalse(step2.equals((Object)step6));
      assertFalse(step2.equals((Object)step3));
      assertFalse(step2.equals((Object)step0));
      assertFalse(step2.equals((Object)step1));
      assertFalse(step2.equals((Object)step4));
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertNotNull(jXPathContextReferenceImpl1);
      assertEquals(64, nodeTypeTest0.getNodeType());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertFalse(jXPathContextReferenceImpl1.isLenient());
      assertEquals(87, step1.getAxis());
      assertEquals(1622, step2.getAxis());
      assertEquals(2, expressionArray0.length);
      
      BasicVariables basicVariables0 = new BasicVariables();
      assertNotNull(basicVariables0);
      
      QName qName0 = new QName("name");
      assertNotNull(qName0);
      assertEquals("name", qName0.toString());
      assertEquals("name", qName0.getName());
      assertNull(qName0.getPrefix());
      
      VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(variablePointer0);
      assertEquals("name", qName0.toString());
      assertEquals("name", qName0.getName());
      assertNull(qName0.getPrefix());
      assertTrue(variablePointer0.isActual());
      assertNull(variablePointer0.getNamespaceURI());
      assertTrue(variablePointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
      assertFalse(variablePointer0.isNode());
      assertTrue(variablePointer0.isContainer());
      assertFalse(variablePointer0.isAttribute());
      
      RootContext rootContext0 = new RootContext(jXPathContextReferenceImpl1, variablePointer0);
      assertFalse(jXPathContextReferenceImpl0.equals((Object)jXPathContextReferenceImpl1));
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl0));
      assertFalse(step1.equals((Object)step5));
      assertFalse(step1.equals((Object)step2));
      assertFalse(step1.equals((Object)step3));
      assertFalse(step1.equals((Object)step0));
      assertFalse(step1.equals((Object)step6));
      assertFalse(step1.equals((Object)step4));
      assertFalse(step2.equals((Object)step5));
      assertFalse(step2.equals((Object)step6));
      assertFalse(step2.equals((Object)step3));
      assertFalse(step2.equals((Object)step0));
      assertFalse(step2.equals((Object)step1));
      assertFalse(step2.equals((Object)step4));
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(rootContext0);
      assertEquals(64, nodeTypeTest0.getNodeType());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertFalse(jXPathContextReferenceImpl1.isLenient());
      assertEquals(87, step1.getAxis());
      assertEquals("name", qName0.toString());
      assertEquals("name", qName0.getName());
      assertNull(qName0.getPrefix());
      assertEquals(1622, step2.getAxis());
      assertTrue(variablePointer0.isActual());
      assertNull(variablePointer0.getNamespaceURI());
      assertTrue(variablePointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
      assertFalse(variablePointer0.isNode());
      assertTrue(variablePointer0.isContainer());
      assertFalse(variablePointer0.isAttribute());
      assertEquals(0, rootContext0.getPosition());
      assertFalse(rootContext0.isChildOrderingRequired());
      assertEquals(0, rootContext0.getDocumentOrder());
      assertEquals(2, expressionArray0.length);
      
      RootContext rootContext1 = rootContext0.getRootContext();
      assertFalse(jXPathContextReferenceImpl0.equals((Object)jXPathContextReferenceImpl1));
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl0));
      assertFalse(step1.equals((Object)step5));
      assertFalse(step1.equals((Object)step2));
      assertFalse(step1.equals((Object)step3));
      assertFalse(step1.equals((Object)step0));
      assertFalse(step1.equals((Object)step6));
      assertFalse(step1.equals((Object)step4));
      assertFalse(step2.equals((Object)step5));
      assertFalse(step2.equals((Object)step6));
      assertFalse(step2.equals((Object)step3));
      assertFalse(step2.equals((Object)step0));
      assertFalse(step2.equals((Object)step1));
      assertFalse(step2.equals((Object)step4));
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(rootContext1);
      assertEquals(64, nodeTypeTest0.getNodeType());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertFalse(jXPathContextReferenceImpl1.isLenient());
      assertEquals(87, step1.getAxis());
      assertEquals("name", qName0.toString());
      assertEquals("name", qName0.getName());
      assertNull(qName0.getPrefix());
      assertEquals(1622, step2.getAxis());
      assertTrue(variablePointer0.isActual());
      assertNull(variablePointer0.getNamespaceURI());
      assertTrue(variablePointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
      assertFalse(variablePointer0.isNode());
      assertTrue(variablePointer0.isContainer());
      assertFalse(variablePointer0.isAttribute());
      assertEquals(0, rootContext0.getPosition());
      assertFalse(rootContext0.isChildOrderingRequired());
      assertEquals(0, rootContext0.getDocumentOrder());
      assertEquals(0, rootContext1.getPosition());
      assertFalse(rootContext1.isChildOrderingRequired());
      assertEquals(0, rootContext1.getDocumentOrder());
      assertEquals(2, expressionArray0.length);
      assertNotSame(jXPathContextReferenceImpl0, jXPathContextReferenceImpl1);
      assertNotSame(jXPathContextReferenceImpl1, jXPathContextReferenceImpl0);
      assertNotSame(step1, step5);
      assertNotSame(step1, step2);
      assertNotSame(step1, step3);
      assertNotSame(step1, step0);
      assertNotSame(step1, step6);
      assertNotSame(step1, step4);
      assertNotSame(step2, step5);
      assertNotSame(step2, step6);
      assertNotSame(step2, step3);
      assertNotSame(step2, step0);
      assertNotSame(step2, step1);
      assertNotSame(step2, step4);
      assertSame(rootContext0, rootContext1);
      assertSame(rootContext1, rootContext0);
      
      AttributeContext attributeContext0 = new AttributeContext(rootContext0, nodeTypeTest0);
      assertFalse(jXPathContextReferenceImpl0.equals((Object)jXPathContextReferenceImpl1));
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl0));
      assertFalse(step1.equals((Object)step5));
      assertFalse(step1.equals((Object)step2));
      assertFalse(step1.equals((Object)step3));
      assertFalse(step1.equals((Object)step0));
      assertFalse(step1.equals((Object)step6));
      assertFalse(step1.equals((Object)step4));
      assertFalse(step2.equals((Object)step5));
      assertFalse(step2.equals((Object)step6));
      assertFalse(step2.equals((Object)step3));
      assertFalse(step2.equals((Object)step0));
      assertFalse(step2.equals((Object)step1));
      assertFalse(step2.equals((Object)step4));
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(attributeContext0);
      assertFalse(attributeContext0.isChildOrderingRequired());
      assertEquals(0, attributeContext0.getDocumentOrder());
      assertEquals(0, attributeContext0.getPosition());
      assertEquals(64, nodeTypeTest0.getNodeType());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertFalse(jXPathContextReferenceImpl1.isLenient());
      assertEquals(87, step1.getAxis());
      assertEquals("name", qName0.toString());
      assertEquals("name", qName0.getName());
      assertNull(qName0.getPrefix());
      assertEquals(1622, step2.getAxis());
      assertTrue(variablePointer0.isActual());
      assertNull(variablePointer0.getNamespaceURI());
      assertTrue(variablePointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
      assertFalse(variablePointer0.isNode());
      assertTrue(variablePointer0.isContainer());
      assertFalse(variablePointer0.isAttribute());
      assertEquals(0, rootContext0.getPosition());
      assertFalse(rootContext0.isChildOrderingRequired());
      assertEquals(0, rootContext0.getDocumentOrder());
      assertEquals(2, expressionArray0.length);
      
      NodePointer nodePointer0 = attributeContext0.getCurrentNodePointer();
      assertFalse(jXPathContextReferenceImpl0.equals((Object)jXPathContextReferenceImpl1));
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl0));
      assertFalse(step1.equals((Object)step5));
      assertFalse(step1.equals((Object)step2));
      assertFalse(step1.equals((Object)step3));
      assertFalse(step1.equals((Object)step0));
      assertFalse(step1.equals((Object)step6));
      assertFalse(step1.equals((Object)step4));
      assertFalse(step2.equals((Object)step5));
      assertFalse(step2.equals((Object)step6));
      assertFalse(step2.equals((Object)step3));
      assertFalse(step2.equals((Object)step0));
      assertFalse(step2.equals((Object)step1));
      assertFalse(step2.equals((Object)step4));
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNull(nodePointer0);
      assertFalse(attributeContext0.isChildOrderingRequired());
      assertEquals(0, attributeContext0.getDocumentOrder());
      assertEquals(0, attributeContext0.getPosition());
      assertEquals(64, nodeTypeTest0.getNodeType());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertFalse(jXPathContextReferenceImpl1.isLenient());
      assertEquals(87, step1.getAxis());
      assertEquals("name", qName0.toString());
      assertEquals("name", qName0.getName());
      assertNull(qName0.getPrefix());
      assertEquals(1622, step2.getAxis());
      assertTrue(variablePointer0.isActual());
      assertNull(variablePointer0.getNamespaceURI());
      assertTrue(variablePointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
      assertFalse(variablePointer0.isNode());
      assertTrue(variablePointer0.isContainer());
      assertFalse(variablePointer0.isAttribute());
      assertEquals(0, rootContext0.getPosition());
      assertFalse(rootContext0.isChildOrderingRequired());
      assertEquals(0, rootContext0.getDocumentOrder());
      assertEquals(2, expressionArray0.length);
      assertNotSame(jXPathContextReferenceImpl0, jXPathContextReferenceImpl1);
      assertNotSame(jXPathContextReferenceImpl1, jXPathContextReferenceImpl0);
      assertNotSame(step1, step5);
      assertNotSame(step1, step2);
      assertNotSame(step1, step3);
      assertNotSame(step1, step0);
      assertNotSame(step1, step6);
      assertNotSame(step1, step4);
      assertNotSame(step2, step5);
      assertNotSame(step2, step6);
      assertNotSame(step2, step3);
      assertNotSame(step2, step0);
      assertNotSame(step2, step1);
      assertNotSame(step2, step4);
      assertSame(rootContext0, rootContext1);
      
      InitialContext initialContext0 = (InitialContext)rootContext1.getConstantContext((Object) null);
      assertFalse(jXPathContextReferenceImpl0.equals((Object)jXPathContextReferenceImpl1));
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl0));
      assertFalse(step1.equals((Object)step5));
      assertFalse(step1.equals((Object)step2));
      assertFalse(step1.equals((Object)step3));
      assertFalse(step1.equals((Object)step0));
      assertFalse(step1.equals((Object)step6));
      assertFalse(step1.equals((Object)step4));
      assertFalse(step2.equals((Object)step5));
      assertFalse(step2.equals((Object)step6));
      assertFalse(step2.equals((Object)step3));
      assertFalse(step2.equals((Object)step0));
      assertFalse(step2.equals((Object)step1));
      assertFalse(step2.equals((Object)step4));
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(initialContext0);
      assertEquals(0, initialContext0.getDocumentOrder());
      assertEquals(0, initialContext0.getPosition());
      assertFalse(initialContext0.isChildOrderingRequired());
      assertEquals(64, nodeTypeTest0.getNodeType());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertFalse(jXPathContextReferenceImpl1.isLenient());
      assertEquals(87, step1.getAxis());
      assertEquals("name", qName0.toString());
      assertEquals("name", qName0.getName());
      assertNull(qName0.getPrefix());
      assertEquals(1622, step2.getAxis());
      assertTrue(variablePointer0.isActual());
      assertNull(variablePointer0.getNamespaceURI());
      assertTrue(variablePointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
      assertFalse(variablePointer0.isNode());
      assertTrue(variablePointer0.isContainer());
      assertFalse(variablePointer0.isAttribute());
      assertEquals(0, rootContext0.getPosition());
      assertFalse(rootContext0.isChildOrderingRequired());
      assertEquals(0, rootContext0.getDocumentOrder());
      assertEquals(0, rootContext1.getPosition());
      assertFalse(rootContext1.isChildOrderingRequired());
      assertEquals(0, rootContext1.getDocumentOrder());
      assertEquals(2, expressionArray0.length);
      assertNotSame(jXPathContextReferenceImpl0, jXPathContextReferenceImpl1);
      assertNotSame(jXPathContextReferenceImpl1, jXPathContextReferenceImpl0);
      assertNotSame(step1, step5);
      assertNotSame(step1, step2);
      assertNotSame(step1, step3);
      assertNotSame(step1, step0);
      assertNotSame(step1, step6);
      assertNotSame(step1, step4);
      assertNotSame(step2, step5);
      assertNotSame(step2, step6);
      assertNotSame(step2, step3);
      assertNotSame(step2, step0);
      assertNotSame(step2, step1);
      assertNotSame(step2, step4);
      assertSame(rootContext0, rootContext1);
      assertSame(rootContext1, rootContext0);
      
      // Undeclared exception!
      coreFunction0.functionRound(initialContext0);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)61;
      byteArray0[1] = (byte)92;
      byteArray0[2] = (byte)109;
      byteArray0[3] = (byte) (-47);
      byteArray0[4] = (byte) (-50);
      byteArray0[5] = (byte) (-1);
      byteArray0[6] = (byte) (-116);
      byteArray0[7] = (byte) (-56);
      byteArray0[8] = (byte)13;
      boolean boolean0 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertArrayEquals(new byte[] {(byte)61, (byte)92, (byte)109, (byte) (-47), (byte) (-50), (byte) (-1), (byte) (-116), (byte) (-56), (byte)13}, byteArray0);
      assertFalse(boolean0);
      assertEquals(9, byteArray0.length);
      
      Expression[] expressionArray0 = new Expression[8];
      CoreOperationUnion coreOperationUnion0 = new CoreOperationUnion(expressionArray0);
      assertNotNull(coreOperationUnion0);
      assertEquals("|", coreOperationUnion0.getSymbol());
      assertEquals(8, expressionArray0.length);
      
      CoreOperationMultiply coreOperationMultiply0 = new CoreOperationMultiply(coreOperationUnion0, coreOperationUnion0);
      assertNotNull(coreOperationMultiply0);
      assertEquals("|", coreOperationUnion0.getSymbol());
      assertEquals("*", coreOperationMultiply0.getSymbol());
      assertEquals(8, expressionArray0.length);
      
      CoreOperationNegate coreOperationNegate0 = new CoreOperationNegate(coreOperationMultiply0);
      assertNotNull(coreOperationNegate0);
      assertEquals("|", coreOperationUnion0.getSymbol());
      assertEquals("*", coreOperationMultiply0.getSymbol());
      assertEquals("-", coreOperationNegate0.getSymbol());
      assertEquals(8, expressionArray0.length);
      
      CoreOperationNotEqual coreOperationNotEqual0 = new CoreOperationNotEqual(coreOperationNegate0, coreOperationNegate0);
      assertNotNull(coreOperationNotEqual0);
      assertEquals("|", coreOperationUnion0.getSymbol());
      assertEquals("*", coreOperationMultiply0.getSymbol());
      assertEquals("-", coreOperationNegate0.getSymbol());
      assertEquals("!=", coreOperationNotEqual0.getSymbol());
      assertEquals(8, expressionArray0.length);
      
      expressionArray0[0] = (Expression) coreOperationNotEqual0;
      QName qName0 = new QName("and");
      assertNotNull(qName0);
      assertEquals("and", qName0.getName());
      assertEquals("and", qName0.toString());
      assertNull(qName0.getPrefix());
      
      ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, expressionArray0);
      assertNotNull(extensionFunction0);
      assertEquals("and", qName0.getName());
      assertEquals("and", qName0.toString());
      assertNull(qName0.getPrefix());
      assertTrue(extensionFunction0.computeContextDependent());
      assertEquals(8, expressionArray0.length);
      
      expressionArray0[1] = (Expression) extensionFunction0;
      CoreOperationMod coreOperationMod0 = new CoreOperationMod(expressionArray0[1], coreOperationUnion0);
      assertNotNull(coreOperationMod0);
      assertEquals("mod", coreOperationMod0.getSymbol());
      assertEquals("|", coreOperationUnion0.getSymbol());
      assertEquals(8, expressionArray0.length);
      
      expressionArray0[2] = (Expression) coreOperationMod0;
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd(expressionArray0);
      assertNotNull(coreOperationAdd0);
      assertEquals("+", coreOperationAdd0.getSymbol());
      assertEquals(8, expressionArray0.length);
      
      expressionArray0[3] = (Expression) coreOperationAdd0;
      Step[] stepArray0 = new Step[5];
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("and");
      assertNotNull(processingInstructionTest0);
      assertEquals("and", processingInstructionTest0.getTarget());
      
      Step step0 = new Step(24, processingInstructionTest0, expressionArray0);
      assertNotNull(step0);
      assertEquals("and", processingInstructionTest0.getTarget());
      assertEquals(24, step0.getAxis());
      assertEquals(8, expressionArray0.length);
      
      stepArray0[0] = step0;
      Step step1 = new Step((byte)92, processingInstructionTest0, expressionArray0);
      assertFalse(step1.equals((Object)step0));
      assertNotNull(step1);
      assertEquals("and", processingInstructionTest0.getTarget());
      assertEquals(92, step1.getAxis());
      assertEquals(8, expressionArray0.length);
      
      stepArray0[1] = step1;
      Step step2 = new Step((-3084), processingInstructionTest0, expressionArray0);
      assertFalse(step2.equals((Object)step0));
      assertFalse(step2.equals((Object)step1));
      assertNotNull(step2);
      assertEquals("and", processingInstructionTest0.getTarget());
      assertEquals((-3084), step2.getAxis());
      assertEquals(8, expressionArray0.length);
      
      stepArray0[2] = step2;
      Step step3 = new Step(24, processingInstructionTest0, expressionArray0);
      assertFalse(step3.equals((Object)step0));
      assertFalse(step3.equals((Object)step1));
      assertFalse(step3.equals((Object)step2));
      assertNotNull(step3);
      assertEquals(24, step3.getAxis());
      assertEquals("and", processingInstructionTest0.getTarget());
      assertEquals(8, expressionArray0.length);
      
      stepArray0[3] = step3;
      Step step4 = new Step(994, processingInstructionTest0, expressionArray0);
      assertFalse(step4.equals((Object)step2));
      assertFalse(step4.equals((Object)step3));
      assertFalse(step4.equals((Object)step1));
      assertFalse(step4.equals((Object)step0));
      assertNotNull(step4);
      assertEquals(994, step4.getAxis());
      assertEquals("and", processingInstructionTest0.getTarget());
      assertEquals(8, expressionArray0.length);
      
      stepArray0[4] = step4;
      LocationPath locationPath0 = new LocationPath(true, stepArray0);
      assertNotNull(locationPath0);
      assertTrue(locationPath0.isAbsolute());
      assertEquals(5, stepArray0.length);
      
      expressionArray0[4] = (Expression) locationPath0;
      CoreOperationLessThan coreOperationLessThan0 = new CoreOperationLessThan(coreOperationNotEqual0, coreOperationMod0);
      assertNotNull(coreOperationLessThan0);
      assertEquals("mod", coreOperationMod0.getSymbol());
      assertEquals("<", coreOperationLessThan0.getSymbol());
      assertEquals("|", coreOperationUnion0.getSymbol());
      assertEquals("*", coreOperationMultiply0.getSymbol());
      assertEquals("-", coreOperationNegate0.getSymbol());
      assertEquals("!=", coreOperationNotEqual0.getSymbol());
      assertEquals(8, expressionArray0.length);
      
      expressionArray0[5] = (Expression) coreOperationLessThan0;
      CoreOperationSubtract coreOperationSubtract0 = new CoreOperationSubtract(coreOperationNegate0, coreOperationMod0);
      assertNotNull(coreOperationSubtract0);
      assertEquals("mod", coreOperationMod0.getSymbol());
      assertEquals("-", coreOperationSubtract0.getSymbol());
      assertEquals("|", coreOperationUnion0.getSymbol());
      assertEquals("*", coreOperationMultiply0.getSymbol());
      assertEquals("-", coreOperationNegate0.getSymbol());
      assertEquals(8, expressionArray0.length);
      
      expressionArray0[6] = (Expression) coreOperationSubtract0;
      ExpressionPath expressionPath0 = new ExpressionPath(expressionArray0[4], expressionArray0, stepArray0);
      assertNotNull(expressionPath0);
      assertEquals(5, stepArray0.length);
      assertEquals(8, expressionArray0.length);
      
      expressionArray0[7] = (Expression) expressionPath0;
      CoreFunction coreFunction0 = new CoreFunction((byte) (-1), expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(8, coreFunction0.getArgumentCount());
      assertEquals((-1), coreFunction0.getFunctionCode());
      assertEquals(8, expressionArray0.length);
      
      // Undeclared exception!
      coreFunction0.functionBoolean((EvalContext) null);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      boolean boolean1 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      Expression[] expressionArray0 = new Expression[4];
      CoreFunction coreFunction0 = new CoreFunction(3033, expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(3033, coreFunction0.getFunctionCode());
      assertEquals(4, coreFunction0.getArgumentCount());
      assertEquals(4, expressionArray0.length);
      
      Expression expression0 = coreFunction0.getArg3();
      assertNull(expression0);
      assertEquals(3033, coreFunction0.getFunctionCode());
      assertEquals(4, coreFunction0.getArgumentCount());
      assertEquals(4, expressionArray0.length);
      
      expressionArray0[0] = null;
      CoreOperationMultiply coreOperationMultiply0 = new CoreOperationMultiply((Expression) null, coreFunction0);
      assertNotNull(coreOperationMultiply0);
      assertEquals(3033, coreFunction0.getFunctionCode());
      assertEquals(4, coreFunction0.getArgumentCount());
      assertEquals("*", coreOperationMultiply0.getSymbol());
      assertEquals(4, expressionArray0.length);
      
      expressionArray0[1] = (Expression) coreOperationMultiply0;
      CoreOperationAnd coreOperationAnd0 = new CoreOperationAnd(expressionArray0);
      assertNotNull(coreOperationAnd0);
      assertEquals("and", coreOperationAnd0.getSymbol());
      assertEquals(4, expressionArray0.length);
      
      expressionArray0[2] = (Expression) coreOperationAnd0;
      CoreOperationMultiply coreOperationMultiply1 = (CoreOperationMultiply)coreFunction0.getArg2();
      assertNotNull(coreOperationMultiply1);
      assertEquals(3033, coreFunction0.getFunctionCode());
      assertEquals(4, coreFunction0.getArgumentCount());
      assertEquals("*", coreOperationMultiply1.getSymbol());
      assertEquals(4, expressionArray0.length);
      assertSame(coreOperationMultiply1, coreOperationMultiply0);
      
      expressionArray0[3] = (Expression) coreOperationMultiply1;
      CoreFunction coreFunction1 = new CoreFunction((-767), expressionArray0);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertNotNull(coreFunction1);
      assertEquals(4, coreFunction1.getArgumentCount());
      assertEquals((-767), coreFunction1.getFunctionCode());
      assertEquals(4, expressionArray0.length);
      
      Integer integer0 = new Integer((-767));
      assertEquals((-767), (int)integer0);
      assertNotNull(integer0);
      
      EvalContext evalContext0 = null;
      CoreFunction coreFunction2 = new CoreFunction(14, expressionArray0);
      assertFalse(coreFunction2.equals((Object)coreFunction0));
      assertFalse(coreFunction2.equals((Object)coreFunction1));
      assertNotNull(coreFunction2);
      assertEquals(14, coreFunction2.getFunctionCode());
      assertEquals(4, coreFunction2.getArgumentCount());
      assertEquals(4, expressionArray0.length);
      
      // Undeclared exception!
//      try { 
        coreFunction1.functionTrue((EvalContext) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.evosuite.runtime.System", e);
//      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(55, (Expression[]) null);
      assertNotNull(coreFunction0);
      assertEquals(55, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      
      // Undeclared exception!
//      try { 
        coreFunction0.functionSubstringAfter((EvalContext) null);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // Incorrect number of arguments: unknownFunction55()()
//         //
//         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, false);
      assertFalse(boolean0);
      
      Expression[] expressionArray0 = new Expression[2];
      Float float0 = new Float((double) 13);
      assertEquals(13.0F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      Constant constant0 = new Constant(float0);
      assertNotNull(constant0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      
      expressionArray0[0] = (Expression) constant0;
      CoreOperationGreaterThan coreOperationGreaterThan0 = new CoreOperationGreaterThan(constant0, constant0);
      assertNotNull(coreOperationGreaterThan0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertEquals(">", coreOperationGreaterThan0.getSymbol());
      
      expressionArray0[1] = (Expression) coreOperationGreaterThan0;
      CoreFunction coreFunction0 = new CoreFunction(13, expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(13, coreFunction0.getFunctionCode());
      assertEquals(2, coreFunction0.getArgumentCount());
      assertEquals(2, expressionArray0.length);
      
      EvalContext evalContext0 = null;
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(13);
      assertNotNull(nodeTypeTest0);
      assertEquals(13, nodeTypeTest0.getNodeType());
      
      Iterator iterator0 = constant0.iterate((EvalContext) null);
      assertNotNull(iterator0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      
      ChildContext childContext0 = new ChildContext((EvalContext) null, nodeTypeTest0, true, true);
      assertNotNull(childContext0);
      assertEquals(13, nodeTypeTest0.getNodeType());
      assertEquals(0, childContext0.getPosition());
      assertEquals(0, childContext0.getDocumentOrder());
      assertFalse(childContext0.isChildOrderingRequired());
      
      Object object0 = coreFunction0.functionSubstringBefore(childContext0);
      assertEquals("", object0);
      assertNotNull(object0);
      assertEquals(13, coreFunction0.getFunctionCode());
      assertEquals(2, coreFunction0.getArgumentCount());
      assertEquals(13, nodeTypeTest0.getNodeType());
      assertEquals(0, childContext0.getPosition());
      assertEquals(0, childContext0.getDocumentOrder());
      assertFalse(childContext0.isChildOrderingRequired());
      assertEquals(2, expressionArray0.length);
      
      Object object1 = coreFunction0.compute(childContext0);
      assertEquals("", object1);
      assertNotNull(object1);
      assertEquals(13, coreFunction0.getFunctionCode());
      assertEquals(2, coreFunction0.getArgumentCount());
      assertEquals(13, nodeTypeTest0.getNodeType());
      assertEquals(0, childContext0.getPosition());
      assertEquals(0, childContext0.getDocumentOrder());
      assertFalse(childContext0.isChildOrderingRequired());
      assertEquals(2, expressionArray0.length);
      
      // Undeclared exception!
//      try { 
        coreFunction0.functionString((EvalContext) null);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // Incorrect number of arguments: substring-after(13, org.apache.commons.jxpath.ri.compiler.Constant@0000000001 > org.apache.commons.jxpath.ri.compiler.Constant@0000000001)
//         //
//         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[2];
      Constant constant0 = new Constant("mxnFTl|f\"(");
      assertNotNull(constant0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      
      CoreOperationMultiply coreOperationMultiply0 = new CoreOperationMultiply(constant0, constant0);
      assertNotNull(coreOperationMultiply0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertEquals("*", coreOperationMultiply0.getSymbol());
      
      expressionArray0[0] = (Expression) coreOperationMultiply0;
      CoreOperationMod coreOperationMod0 = new CoreOperationMod(expressionArray0[0], expressionArray0[0]);
      assertNotNull(coreOperationMod0);
      assertEquals("mod", coreOperationMod0.getSymbol());
      assertEquals(2, expressionArray0.length);
      
      expressionArray0[1] = (Expression) coreOperationMod0;
      CoreFunction coreFunction0 = new CoreFunction(3022, expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(3022, coreFunction0.getFunctionCode());
      assertEquals(2, coreFunction0.getArgumentCount());
      assertEquals(2, expressionArray0.length);
      
      Step[] stepArray0 = new Step[2];
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(3022);
      assertNotNull(nodeTypeTest0);
      assertEquals(3022, nodeTypeTest0.getNodeType());
      
      Step step0 = new Step(2140, nodeTypeTest0, expressionArray0);
      assertNotNull(step0);
      assertEquals(3022, nodeTypeTest0.getNodeType());
      assertEquals(2140, step0.getAxis());
      assertEquals(2, expressionArray0.length);
      
      stepArray0[0] = step0;
      Step step1 = new Step(3210, nodeTypeTest0, expressionArray0);
      assertFalse(step1.equals((Object)step0));
      assertNotNull(step1);
      assertEquals(3022, nodeTypeTest0.getNodeType());
      assertEquals(3210, step1.getAxis());
      assertEquals(2, expressionArray0.length);
      
      stepArray0[1] = step1;
      ExpressionPath expressionPath0 = new ExpressionPath(coreFunction0, expressionArray0, stepArray0);
      assertNotNull(expressionPath0);
      assertEquals(3022, coreFunction0.getFunctionCode());
      assertEquals(2, coreFunction0.getArgumentCount());
      assertEquals(2, expressionArray0.length);
      assertEquals(2, stepArray0.length);
      
      CoreOperationDivide coreOperationDivide0 = new CoreOperationDivide(expressionPath0, coreFunction0);
      assertNotNull(coreOperationDivide0);
      assertEquals(3022, coreFunction0.getFunctionCode());
      assertEquals(2, coreFunction0.getArgumentCount());
      assertEquals("div", coreOperationDivide0.getSymbol());
      assertEquals(2, expressionArray0.length);
      assertEquals(2, stepArray0.length);
      
      CoreOperationMultiply coreOperationMultiply1 = new CoreOperationMultiply(expressionArray0[0], coreOperationDivide0);
      assertFalse(coreOperationMultiply1.equals((Object)coreOperationMultiply0));
      assertNotNull(coreOperationMultiply1);
      assertEquals(3022, coreFunction0.getFunctionCode());
      assertEquals(2, coreFunction0.getArgumentCount());
      assertEquals("div", coreOperationDivide0.getSymbol());
      assertEquals("*", coreOperationMultiply1.getSymbol());
      assertEquals(2, expressionArray0.length);
      assertEquals(2, stepArray0.length);
      
      CoreOperationAnd coreOperationAnd0 = new CoreOperationAnd(expressionArray0);
      assertNotNull(coreOperationAnd0);
      assertEquals("and", coreOperationAnd0.getSymbol());
      assertEquals(2, expressionArray0.length);
      
      // Undeclared exception!
//      try { 
        coreFunction0.functionConcat((EvalContext) null);
//        fail("Expecting exception: ArithmeticException");
      
//      } catch(ArithmeticException e) {
//         //
//         // / by zero
//         //
//         verifyException("org.apache.commons.jxpath.ri.compiler.CoreOperationMod", e);
//      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      EvalContext evalContext0 = null;
      Expression[] expressionArray0 = new Expression[7];
      CoreOperationAnd coreOperationAnd0 = new CoreOperationAnd(expressionArray0);
      assertNotNull(coreOperationAnd0);
      assertEquals("and", coreOperationAnd0.getSymbol());
      assertEquals(7, expressionArray0.length);
      
      ExpressionPath expressionPath0 = new ExpressionPath(coreOperationAnd0, expressionArray0, (Step[]) null);
      assertNotNull(expressionPath0);
      assertEquals("and", coreOperationAnd0.getSymbol());
      assertEquals(7, expressionArray0.length);
      
      CoreOperationGreaterThan coreOperationGreaterThan0 = new CoreOperationGreaterThan(expressionPath0, coreOperationAnd0);
      assertNotNull(coreOperationGreaterThan0);
      assertEquals("and", coreOperationAnd0.getSymbol());
      assertEquals(">", coreOperationGreaterThan0.getSymbol());
      assertEquals(7, expressionArray0.length);
      
      NameAttributeTest nameAttributeTest0 = new NameAttributeTest(coreOperationGreaterThan0, coreOperationAnd0);
      assertNotNull(nameAttributeTest0);
      assertEquals("and", coreOperationAnd0.getSymbol());
      assertEquals(">", coreOperationGreaterThan0.getSymbol());
      assertTrue(nameAttributeTest0.computeContextDependent());
      assertEquals("=", nameAttributeTest0.getSymbol());
      assertEquals(7, expressionArray0.length);
      
      expressionArray0[0] = (Expression) nameAttributeTest0;
      CoreOperationUnion coreOperationUnion0 = new CoreOperationUnion(expressionArray0);
      assertNotNull(coreOperationUnion0);
      assertEquals("|", coreOperationUnion0.getSymbol());
      assertEquals(7, expressionArray0.length);
      
      expressionArray0[1] = (Expression) coreOperationUnion0;
      CoreOperationNegate coreOperationNegate0 = new CoreOperationNegate(coreOperationUnion0);
      assertNotNull(coreOperationNegate0);
      assertEquals("|", coreOperationUnion0.getSymbol());
      assertEquals("-", coreOperationNegate0.getSymbol());
      assertEquals(7, expressionArray0.length);
      
      expressionArray0[2] = (Expression) coreOperationNegate0;
      CoreOperationDivide coreOperationDivide0 = new CoreOperationDivide(coreOperationGreaterThan0, expressionArray0[1]);
      assertNotNull(coreOperationDivide0);
      assertEquals("and", coreOperationAnd0.getSymbol());
      assertEquals(">", coreOperationGreaterThan0.getSymbol());
      assertEquals("div", coreOperationDivide0.getSymbol());
      assertEquals(7, expressionArray0.length);
      
      ExpressionPath expressionPath1 = new ExpressionPath(coreOperationDivide0, expressionArray0, (Step[]) null);
      assertFalse(expressionPath1.equals((Object)expressionPath0));
      assertNotNull(expressionPath1);
      assertEquals("and", coreOperationAnd0.getSymbol());
      assertEquals(">", coreOperationGreaterThan0.getSymbol());
      assertEquals("div", coreOperationDivide0.getSymbol());
      assertEquals(7, expressionArray0.length);
      
      expressionArray0[3] = (Expression) expressionPath1;
      QName qName0 = new QName("#*X^Oh(fU)xWH");
      assertNotNull(qName0);
      assertEquals("#*X^Oh(fU)xWH", qName0.getName());
      assertEquals("#*X^Oh(fU)xWH", qName0.toString());
      assertNull(qName0.getPrefix());
      
      ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, expressionArray0);
      assertNotNull(extensionFunction0);
      assertEquals("#*X^Oh(fU)xWH", qName0.getName());
      assertEquals("#*X^Oh(fU)xWH", qName0.toString());
      assertNull(qName0.getPrefix());
      assertTrue(extensionFunction0.computeContextDependent());
      assertEquals(7, expressionArray0.length);
      
      expressionArray0[4] = (Expression) extensionFunction0;
      Integer integer0 = new Integer(3042);
      assertEquals(3042, (int)integer0);
      assertNotNull(integer0);
      
      Constant constant0 = new Constant(integer0);
      assertNotNull(constant0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      
      expressionArray0[5] = (Expression) constant0;
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd(expressionArray0);
      assertNotNull(coreOperationAdd0);
      assertEquals("+", coreOperationAdd0.getSymbol());
      assertEquals(7, expressionArray0.length);
      
      expressionArray0[6] = (Expression) coreOperationAdd0;
      CoreFunction coreFunction0 = new CoreFunction(14, expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(7, coreFunction0.getArgumentCount());
      assertEquals(14, coreFunction0.getFunctionCode());
      assertEquals(7, expressionArray0.length);
      
      // Undeclared exception!
      coreFunction0.functionSubstringBefore((EvalContext) null);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      Expression[] expressionArray0 = new Expression[6];
      VariableReference variableReference0 = new VariableReference((QName) null);
      assertNotNull(variableReference0);
      assertFalse(variableReference0.computeContextDependent());
      assertFalse(variableReference0.isContextDependent());
      
      CoreOperationGreaterThan coreOperationGreaterThan0 = new CoreOperationGreaterThan(variableReference0, variableReference0);
      assertNotNull(coreOperationGreaterThan0);
      assertFalse(variableReference0.computeContextDependent());
      assertFalse(variableReference0.isContextDependent());
      assertEquals(">", coreOperationGreaterThan0.getSymbol());
      
      expressionArray0[0] = (Expression) coreOperationGreaterThan0;
      Step[] stepArray0 = new Step[6];
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(1042);
      assertNotNull(nodeTypeTest0);
      assertEquals(1042, nodeTypeTest0.getNodeType());
      
      Step step0 = new Step(1042, nodeTypeTest0, expressionArray0);
      assertNotNull(step0);
      assertEquals(1042, nodeTypeTest0.getNodeType());
      assertEquals(1042, step0.getAxis());
      assertEquals(6, expressionArray0.length);
      
      stepArray0[0] = step0;
      Step step1 = new Step(1042, nodeTypeTest0, expressionArray0);
      assertFalse(step1.equals((Object)step0));
      assertNotNull(step1);
      assertEquals(1042, nodeTypeTest0.getNodeType());
      assertEquals(1042, step1.getAxis());
      assertEquals(6, expressionArray0.length);
      
      stepArray0[1] = step1;
      Step step2 = new Step(855, nodeTypeTest0, expressionArray0);
      assertFalse(step2.equals((Object)step0));
      assertFalse(step2.equals((Object)step1));
      assertNotNull(step2);
      assertEquals(1042, nodeTypeTest0.getNodeType());
      assertEquals(855, step2.getAxis());
      assertEquals(6, expressionArray0.length);
      
      stepArray0[2] = step2;
      Step step3 = new Step(890, nodeTypeTest0, expressionArray0);
      assertFalse(step3.equals((Object)step0));
      assertFalse(step3.equals((Object)step1));
      assertFalse(step3.equals((Object)step2));
      assertNotNull(step3);
      assertEquals(1042, nodeTypeTest0.getNodeType());
      assertEquals(890, step3.getAxis());
      assertEquals(6, expressionArray0.length);
      
      stepArray0[3] = step3;
      Step step4 = new Step(159, nodeTypeTest0, expressionArray0);
      assertFalse(step4.equals((Object)step1));
      assertFalse(step4.equals((Object)step2));
      assertFalse(step4.equals((Object)step3));
      assertFalse(step4.equals((Object)step0));
      assertNotNull(step4);
      assertEquals(1042, nodeTypeTest0.getNodeType());
      assertEquals(159, step4.getAxis());
      assertEquals(6, expressionArray0.length);
      
      stepArray0[4] = step4;
      NodeTypeTest nodeTypeTest1 = new NodeTypeTest(679);
      assertFalse(nodeTypeTest1.equals((Object)nodeTypeTest0));
      assertNotNull(nodeTypeTest1);
      assertEquals(679, nodeTypeTest1.getNodeType());
      
      Step step5 = new Step(8, nodeTypeTest1, (Expression[]) null);
      assertFalse(nodeTypeTest1.equals((Object)nodeTypeTest0));
      assertFalse(step5.equals((Object)step3));
      assertFalse(step5.equals((Object)step0));
      assertFalse(step5.equals((Object)step4));
      assertFalse(step5.equals((Object)step2));
      assertFalse(step5.equals((Object)step1));
      assertNotNull(step5);
      assertEquals(679, nodeTypeTest1.getNodeType());
      assertEquals(8, step5.getAxis());
      
      stepArray0[5] = step5;
      LocationPath locationPath0 = new LocationPath(false, stepArray0);
      assertNotNull(locationPath0);
      assertFalse(locationPath0.isAbsolute());
      assertEquals(6, stepArray0.length);
      
      expressionArray0[1] = (Expression) locationPath0;
      CoreOperationMultiply coreOperationMultiply0 = new CoreOperationMultiply(locationPath0, coreOperationGreaterThan0);
      assertNotNull(coreOperationMultiply0);
      assertFalse(variableReference0.computeContextDependent());
      assertFalse(variableReference0.isContextDependent());
      assertEquals(">", coreOperationGreaterThan0.getSymbol());
      assertFalse(locationPath0.isAbsolute());
      assertEquals("*", coreOperationMultiply0.getSymbol());
      assertEquals(6, stepArray0.length);
      
      expressionArray0[2] = (Expression) coreOperationMultiply0;
      Constant constant0 = new Constant("v$:");
      assertNotNull(constant0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      
      expressionArray0[3] = (Expression) constant0;
      CoreOperationUnion coreOperationUnion0 = new CoreOperationUnion((Expression[]) null);
      assertNotNull(coreOperationUnion0);
      assertEquals("|", coreOperationUnion0.getSymbol());
      
      expressionArray0[4] = (Expression) coreOperationUnion0;
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd((Expression[]) null);
      assertNotNull(coreOperationAdd0);
      assertEquals("+", coreOperationAdd0.getSymbol());
      
      expressionArray0[5] = (Expression) coreOperationAdd0;
      CoreFunction coreFunction0 = new CoreFunction((-1093), expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(6, coreFunction0.getArgumentCount());
      assertEquals((-1093), coreFunction0.getFunctionCode());
      assertEquals(6, expressionArray0.length);
      
      ExpressionPath expressionPath0 = new ExpressionPath(coreFunction0, expressionArray0, stepArray0);
      assertNotNull(expressionPath0);
      assertEquals(6, coreFunction0.getArgumentCount());
      assertEquals((-1093), coreFunction0.getFunctionCode());
      assertEquals(6, expressionArray0.length);
      assertEquals(6, stepArray0.length);
      
      BasicNodeSet basicNodeSet0 = new BasicNodeSet();
      assertNotNull(basicNodeSet0);
      
      NodeSetContext nodeSetContext0 = new NodeSetContext((EvalContext) null, basicNodeSet0);
      assertNotNull(nodeSetContext0);
      assertEquals(0, nodeSetContext0.getDocumentOrder());
      assertEquals(0, nodeSetContext0.getPosition());
      assertFalse(nodeSetContext0.isChildOrderingRequired());
      
      EvalContext evalContext0 = expressionPath0.evalSteps(nodeSetContext0);
      assertNotNull(evalContext0);
      assertEquals(0, nodeSetContext0.getDocumentOrder());
      assertEquals(0, nodeSetContext0.getPosition());
      assertFalse(nodeSetContext0.isChildOrderingRequired());
      assertTrue(evalContext0.isChildOrderingRequired());
      assertEquals(1, evalContext0.getDocumentOrder());
      assertEquals(0, evalContext0.getPosition());
      assertEquals(6, coreFunction0.getArgumentCount());
      assertEquals((-1093), coreFunction0.getFunctionCode());
      assertEquals(6, expressionArray0.length);
      assertEquals(6, stepArray0.length);
      
      AttributeContext attributeContext0 = new AttributeContext(evalContext0, nodeTypeTest0);
      assertFalse(nodeTypeTest0.equals((Object)nodeTypeTest1));
      assertNotNull(attributeContext0);
      assertEquals(0, nodeSetContext0.getDocumentOrder());
      assertEquals(0, nodeSetContext0.getPosition());
      assertFalse(nodeSetContext0.isChildOrderingRequired());
      assertTrue(evalContext0.isChildOrderingRequired());
      assertEquals(1, evalContext0.getDocumentOrder());
      assertEquals(0, evalContext0.getPosition());
      assertTrue(attributeContext0.isChildOrderingRequired());
      assertEquals(1, attributeContext0.getDocumentOrder());
      assertEquals(0, attributeContext0.getPosition());
      assertEquals(1042, nodeTypeTest0.getNodeType());
      assertEquals(6, coreFunction0.getArgumentCount());
      assertEquals((-1093), coreFunction0.getFunctionCode());
      assertEquals(6, expressionArray0.length);
      assertEquals(6, stepArray0.length);
      
      // Undeclared exception!
      coreFunction0.functionFalse(attributeContext0);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[5];
      CoreOperationOr coreOperationOr0 = new CoreOperationOr(expressionArray0);
      assertNotNull(coreOperationOr0);
      assertEquals("or", coreOperationOr0.getSymbol());
      assertEquals(5, expressionArray0.length);
      
      CoreOperationNegate coreOperationNegate0 = new CoreOperationNegate(coreOperationOr0);
      assertNotNull(coreOperationNegate0);
      assertEquals("or", coreOperationOr0.getSymbol());
      assertEquals("-", coreOperationNegate0.getSymbol());
      assertEquals(5, expressionArray0.length);
      
      CoreOperationGreaterThan coreOperationGreaterThan0 = new CoreOperationGreaterThan(coreOperationNegate0, coreOperationNegate0);
      assertNotNull(coreOperationGreaterThan0);
      assertEquals("or", coreOperationOr0.getSymbol());
      assertEquals("-", coreOperationNegate0.getSymbol());
      assertEquals(">", coreOperationGreaterThan0.getSymbol());
      assertEquals(5, expressionArray0.length);
      
      expressionArray0[0] = (Expression) coreOperationGreaterThan0;
      ExtensionFunction extensionFunction0 = new ExtensionFunction((QName) null, expressionArray0);
      assertNotNull(extensionFunction0);
      assertTrue(extensionFunction0.computeContextDependent());
      assertEquals(5, expressionArray0.length);
      
      expressionArray0[1] = (Expression) extensionFunction0;
      CoreOperationOr coreOperationOr1 = new CoreOperationOr(expressionArray0);
      assertFalse(coreOperationOr1.equals((Object)coreOperationOr0));
      assertNotNull(coreOperationOr1);
      assertEquals("or", coreOperationOr1.getSymbol());
      assertEquals(5, expressionArray0.length);
      
      expressionArray0[2] = (Expression) coreOperationOr1;
      CoreOperationLessThan coreOperationLessThan0 = new CoreOperationLessThan(coreOperationGreaterThan0, expressionArray0[0]);
      assertFalse(coreOperationOr0.equals((Object)coreOperationOr1));
      assertNotNull(coreOperationLessThan0);
      assertEquals("or", coreOperationOr0.getSymbol());
      assertEquals("-", coreOperationNegate0.getSymbol());
      assertEquals(">", coreOperationGreaterThan0.getSymbol());
      assertEquals("<", coreOperationLessThan0.getSymbol());
      assertEquals(5, expressionArray0.length);
      
      expressionArray0[3] = (Expression) coreOperationLessThan0;
      CoreOperationSubtract coreOperationSubtract0 = new CoreOperationSubtract(extensionFunction0, expressionArray0[0]);
      assertNotNull(coreOperationSubtract0);
      assertTrue(extensionFunction0.computeContextDependent());
      assertEquals("-", coreOperationSubtract0.getSymbol());
      assertEquals(5, expressionArray0.length);
      
      expressionArray0[4] = (Expression) coreOperationSubtract0;
      CoreFunction coreFunction0 = new CoreFunction(30, expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(30, coreFunction0.getFunctionCode());
      assertEquals(5, coreFunction0.getArgumentCount());
      assertEquals(5, expressionArray0.length);
      
      CoreFunction coreFunction1 = new CoreFunction(30, expressionArray0);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertNotNull(coreFunction1);
      assertEquals(5, coreFunction1.getArgumentCount());
      assertEquals(30, coreFunction1.getFunctionCode());
      assertEquals(5, expressionArray0.length);
      
      // Undeclared exception!
      coreFunction1.compute((EvalContext) null);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[9];
      Constant constant0 = new Constant("");
      assertNotNull(constant0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      
      expressionArray0[0] = (Expression) constant0;
      Constant constant1 = new Constant("xml:lang");
      assertFalse(constant1.equals((Object)constant0));
      assertNotNull(constant1);
      assertFalse(constant1.isContextDependent());
      assertFalse(constant1.computeContextDependent());
      
      CoreOperationLessThan coreOperationLessThan0 = new CoreOperationLessThan(expressionArray0[0], constant1);
      assertFalse(constant1.equals((Object)constant0));
      assertNotNull(coreOperationLessThan0);
      assertFalse(constant1.isContextDependent());
      assertFalse(constant1.computeContextDependent());
      assertEquals("<", coreOperationLessThan0.getSymbol());
      assertEquals(9, expressionArray0.length);
      
      expressionArray0[1] = (Expression) coreOperationLessThan0;
      CoreOperationSubtract coreOperationSubtract0 = new CoreOperationSubtract(expressionArray0[1], constant0);
      assertFalse(constant0.equals((Object)constant1));
      assertNotNull(coreOperationSubtract0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertEquals("-", coreOperationSubtract0.getSymbol());
      assertEquals(9, expressionArray0.length);
      
      expressionArray0[2] = (Expression) coreOperationSubtract0;
      Step[] stepArray0 = new Step[4];
      QName qName0 = new QName("xml:lang");
      assertNotNull(qName0);
      assertEquals("xml:lang", qName0.toString());
      assertEquals("xml", qName0.getPrefix());
      assertEquals("lang", qName0.getName());
      
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, "");
      assertNotNull(nodeNameTest0);
      assertEquals("xml:lang", qName0.toString());
      assertEquals("xml", qName0.getPrefix());
      assertEquals("lang", qName0.getName());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals("xml:lang", nodeNameTest0.toString());
      assertEquals("", nodeNameTest0.getNamespaceURI());
      
      Step step0 = new Step(2064, nodeNameTest0, expressionArray0);
      assertNotNull(step0);
      assertEquals("xml:lang", qName0.toString());
      assertEquals("xml", qName0.getPrefix());
      assertEquals("lang", qName0.getName());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals("xml:lang", nodeNameTest0.toString());
      assertEquals("", nodeNameTest0.getNamespaceURI());
      assertEquals(2064, step0.getAxis());
      assertEquals(9, expressionArray0.length);
      
      stepArray0[0] = step0;
      Expression[] expressionArray1 = new Expression[5];
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      
      Float float0 = new Float((-1.0F));
      assertEquals((-1.0F), (float)float0, 0.01F);
      assertNotNull(float0);
      
      Constant constant2 = new Constant(float0);
      assertFalse(constant2.equals((Object)constant1));
      assertFalse(constant2.equals((Object)constant0));
      assertNotNull(constant2);
      assertFalse(constant2.isContextDependent());
      assertFalse(constant2.computeContextDependent());
      
      expressionArray1[0] = (Expression) constant2;
      expressionArray1[1] = (Expression) constant0;
      expressionArray1[2] = (Expression) constant0;
      expressionArray1[3] = (Expression) coreOperationSubtract0;
      expressionArray1[4] = (Expression) coreOperationSubtract0;
      Step step1 = new Step(122880, nodeNameTest0, expressionArray1);
      assertFalse(step1.equals((Object)step0));
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertNotNull(step1);
      assertEquals(122880, step1.getAxis());
      assertEquals("xml:lang", qName0.toString());
      assertEquals("xml", qName0.getPrefix());
      assertEquals("lang", qName0.getName());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals("xml:lang", nodeNameTest0.toString());
      assertEquals("", nodeNameTest0.getNamespaceURI());
      assertEquals(5, expressionArray1.length);
      
      stepArray0[1] = step1;
      Step step2 = new Step(3, nodeNameTest0, expressionArray1);
      assertFalse(step2.equals((Object)step0));
      assertFalse(step2.equals((Object)step1));
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertNotNull(step2);
      assertEquals(3, step2.getAxis());
      assertEquals("xml:lang", qName0.toString());
      assertEquals("xml", qName0.getPrefix());
      assertEquals("lang", qName0.getName());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals("xml:lang", nodeNameTest0.toString());
      assertEquals("", nodeNameTest0.getNamespaceURI());
      assertEquals(5, expressionArray1.length);
      
      stepArray0[2] = step2;
      Step step3 = new Step(4015, nodeNameTest0, expressionArray1);
      assertFalse(step3.equals((Object)step0));
      assertFalse(step3.equals((Object)step1));
      assertFalse(step3.equals((Object)step2));
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertNotNull(step3);
      assertEquals(4015, step3.getAxis());
      assertEquals("xml:lang", qName0.toString());
      assertEquals("xml", qName0.getPrefix());
      assertEquals("lang", qName0.getName());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals("xml:lang", nodeNameTest0.toString());
      assertEquals("", nodeNameTest0.getNamespaceURI());
      assertEquals(5, expressionArray1.length);
      
      stepArray0[3] = step3;
      LocationPath locationPath0 = new LocationPath(true, stepArray0);
      assertNotNull(locationPath0);
      assertTrue(locationPath0.isAbsolute());
      assertEquals(4, stepArray0.length);
      
      expressionArray0[3] = (Expression) locationPath0;
      CoreOperationOr coreOperationOr0 = new CoreOperationOr(expressionArray0);
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertNotNull(coreOperationOr0);
      assertEquals("or", coreOperationOr0.getSymbol());
      assertEquals(9, expressionArray0.length);
      
      expressionArray0[4] = (Expression) coreOperationOr0;
      CoreOperationDivide coreOperationDivide0 = new CoreOperationDivide(coreOperationOr0, expressionArray0[3]);
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertNotNull(coreOperationDivide0);
      assertEquals("or", coreOperationOr0.getSymbol());
      assertEquals("div", coreOperationDivide0.getSymbol());
      assertEquals(9, expressionArray0.length);
      
      expressionArray0[5] = (Expression) coreOperationDivide0;
      CoreOperationMultiply coreOperationMultiply0 = new CoreOperationMultiply(constant0, expressionArray0[0]);
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertFalse(constant0.equals((Object)constant1));
      assertFalse(constant0.equals((Object)constant2));
      assertNotNull(coreOperationMultiply0);
      assertEquals("*", coreOperationMultiply0.getSymbol());
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertEquals(9, expressionArray0.length);
      
      expressionArray0[6] = (Expression) coreOperationMultiply0;
      Float float1 = new Float((-617.0));
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertEquals((-617.0F), (float)float1, 0.01F);
      assertNotNull(float1);
      
      Constant constant3 = new Constant(float1);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertFalse(constant3.equals((Object)constant1));
      assertFalse(constant3.equals((Object)constant2));
      assertFalse(constant3.equals((Object)constant0));
      assertNotNull(constant3);
      assertFalse(constant3.computeContextDependent());
      assertFalse(constant3.isContextDependent());
      
      expressionArray0[7] = (Expression) constant3;
      NameAttributeTest nameAttributeTest0 = new NameAttributeTest(expressionArray1[1], coreOperationSubtract0);
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertFalse(constant0.equals((Object)constant1));
      assertFalse(constant0.equals((Object)constant2));
      assertFalse(constant0.equals((Object)constant3));
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertNotNull(nameAttributeTest0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertTrue(nameAttributeTest0.computeContextDependent());
      assertEquals("=", nameAttributeTest0.getSymbol());
      assertEquals("-", coreOperationSubtract0.getSymbol());
      assertEquals(9, expressionArray0.length);
      assertEquals(5, expressionArray1.length);
      
      CoreOperationMod coreOperationMod0 = new CoreOperationMod(nameAttributeTest0, expressionArray1[2]);
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertFalse(constant0.equals((Object)constant1));
      assertFalse(constant0.equals((Object)constant2));
      assertFalse(constant0.equals((Object)constant3));
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertNotNull(coreOperationMod0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertTrue(nameAttributeTest0.computeContextDependent());
      assertEquals("=", nameAttributeTest0.getSymbol());
      assertEquals("-", coreOperationSubtract0.getSymbol());
      assertEquals("mod", coreOperationMod0.getSymbol());
      assertEquals(9, expressionArray0.length);
      assertEquals(5, expressionArray1.length);
      
      expressionArray0[8] = (Expression) coreOperationMod0;
      CoreFunction coreFunction0 = new CoreFunction(2064, expressionArray0);
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertNotNull(coreFunction0);
      assertEquals(2064, coreFunction0.getFunctionCode());
      assertEquals(9, coreFunction0.getArgumentCount());
      assertEquals(9, expressionArray0.length);
      
      // Undeclared exception!
      coreFunction0.functionFalse((EvalContext) null);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[2];
      Float float0 = new Float((-1.0F));
      assertEquals((-1.0F), (float)float0, 0.01F);
      assertNotNull(float0);
      
      Constant constant0 = new Constant(float0);
      assertNotNull(constant0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      expressionArray0[0] = (Expression) constant0;
      CoreOperationAnd coreOperationAnd0 = new CoreOperationAnd(expressionArray0);
      assertNotNull(coreOperationAnd0);
      assertEquals("and", coreOperationAnd0.getSymbol());
      assertEquals(2, expressionArray0.length);
      
      expressionArray0[1] = (Expression) coreOperationAnd0;
      CoreFunction coreFunction0 = new CoreFunction(3057, expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(3057, coreFunction0.getFunctionCode());
      assertEquals(2, coreFunction0.getArgumentCount());
      assertEquals(2, expressionArray0.length);
      
      // Undeclared exception!
      coreFunction0.functionSubstringAfter((EvalContext) null);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(5, (Expression[]) null);
      assertNotNull(coreFunction0);
      assertEquals(5, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl)JXPathContext.newContext((Object) coreFunction0);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertNotNull(jXPathContextReferenceImpl0);
      assertEquals(5, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      
      InitialContext initialContext0 = (InitialContext)jXPathContextReferenceImpl0.getAbsoluteRootContext();
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertNotNull(initialContext0);
      assertEquals(5, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertEquals(0, initialContext0.getDocumentOrder());
      assertEquals(0, initialContext0.getPosition());
      assertFalse(initialContext0.isChildOrderingRequired());
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      String string0 = (String)coreFunction0.functionLocalName(initialContext0);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals("root", string0);
      assertNotNull(string0);
      assertEquals(5, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertEquals(0, initialContext0.getDocumentOrder());
      assertEquals(0, initialContext0.getPosition());
      assertFalse(initialContext0.isChildOrderingRequired());
      
      String string1 = (String)coreFunction0.functionNamespaceURI(initialContext0);
      assertFalse(string1.equals((Object)string0));
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals("", string1);
      assertNotNull(string1);
      assertEquals(5, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertEquals(0, initialContext0.getDocumentOrder());
      assertEquals(0, initialContext0.getPosition());
      assertFalse(initialContext0.isChildOrderingRequired());
      
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      BeanPointer beanPointer0 = (BeanPointer)initialContext0.next();
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(beanPointer0);
      assertEquals(5, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertEquals(0, initialContext0.getDocumentOrder());
      assertEquals(1, initialContext0.getPosition());
      assertFalse(initialContext0.isChildOrderingRequired());
      assertFalse(beanPointer0.isDynamicPropertyDeclarationSupported());
      assertTrue(beanPointer0.isNode());
      assertFalse(beanPointer0.isAttribute());
      assertEquals(0, beanPointer0.getIndex());
      assertFalse(beanPointer0.isCollection());
      assertEquals(1, beanPointer0.getLength());
      assertNull(beanPointer0.getNamespaceURI());
      assertFalse(beanPointer0.isContainer());
      assertTrue(beanPointer0.isRoot());
      
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      initialContext0.forEachRemaining(consumer0);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(5, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertEquals(0, initialContext0.getDocumentOrder());
      assertEquals(2, initialContext0.getPosition());
      assertFalse(initialContext0.isChildOrderingRequired());
      
      Double double0 = (Double)coreFunction0.functionLast(initialContext0);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(1.0, (double)double0, 0.01);
      assertNotNull(double0);
      assertEquals(5, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertEquals(0, initialContext0.getDocumentOrder());
      assertEquals(2, initialContext0.getPosition());
      assertFalse(initialContext0.isChildOrderingRequired());
      
      // Undeclared exception!
//      try { 
        coreFunction0.functionBoolean(initialContext0);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // Incorrect number of arguments: local-name()
//         //
//         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      Float float0 = new Float((float) 1048612);
      assertEquals(1048612.0F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      Constant constant0 = new Constant(float0);
      assertNotNull(constant0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      
      expressionArray0[0] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction(7, expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals(7, coreFunction0.getFunctionCode());
      assertEquals(1, expressionArray0.length);
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl)JXPathContext.newContext((Object) float0);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertNotNull(jXPathContextReferenceImpl0);
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      
      QName qName0 = new QName("Ep||&*rQm\"n;S", "Ep||&*rQm\"n;S");
      assertNotNull(qName0);
      assertEquals("Ep||&*rQm\"n;S", qName0.getPrefix());
      assertEquals("Ep||&*rQm\"n;S", qName0.getName());
      assertEquals("Ep||&*rQm\"n;S:Ep||&*rQm\"n;S", qName0.toString());
      
      Locale locale0 = Locale.UK;
      assertNotNull(locale0);
      assertEquals("", locale0.getVariant());
      assertEquals("GB", locale0.getCountry());
      assertEquals("GBR", locale0.getISO3Country());
      assertEquals("en", locale0.getLanguage());
      assertEquals("en_GB", locale0.toString());
      assertEquals("eng", locale0.getISO3Language());
      
      BeanPointer beanPointer0 = (BeanPointer)NodePointer.newNodePointer(qName0, qName0, locale0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(beanPointer0);
      assertEquals("Ep||&*rQm\"n;S", qName0.getPrefix());
      assertEquals("Ep||&*rQm\"n;S", qName0.getName());
      assertEquals("Ep||&*rQm\"n;S:Ep||&*rQm\"n;S", qName0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("GB", locale0.getCountry());
      assertEquals("GBR", locale0.getISO3Country());
      assertEquals("en", locale0.getLanguage());
      assertEquals("en_GB", locale0.toString());
      assertEquals("eng", locale0.getISO3Language());
      assertNull(beanPointer0.getNamespaceURI());
      assertFalse(beanPointer0.isDynamicPropertyDeclarationSupported());
      assertEquals(1, beanPointer0.getLength());
      assertTrue(beanPointer0.isNode());
      assertFalse(beanPointer0.isAttribute());
      assertFalse(beanPointer0.isCollection());
      assertFalse(beanPointer0.isContainer());
      assertTrue(beanPointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, beanPointer0.getIndex());
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl1 = new JXPathContextReferenceImpl(jXPathContextReferenceImpl0, jXPathContextReferenceImpl0, beanPointer0);
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl0));
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertNotNull(jXPathContextReferenceImpl1);
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertEquals("Ep||&*rQm\"n;S", qName0.getPrefix());
      assertEquals("Ep||&*rQm\"n;S", qName0.getName());
      assertEquals("Ep||&*rQm\"n;S:Ep||&*rQm\"n;S", qName0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("GB", locale0.getCountry());
      assertEquals("GBR", locale0.getISO3Country());
      assertEquals("en", locale0.getLanguage());
      assertEquals("en_GB", locale0.toString());
      assertEquals("eng", locale0.getISO3Language());
      assertNull(beanPointer0.getNamespaceURI());
      assertFalse(beanPointer0.isDynamicPropertyDeclarationSupported());
      assertEquals(1, beanPointer0.getLength());
      assertTrue(beanPointer0.isNode());
      assertFalse(beanPointer0.isAttribute());
      assertFalse(beanPointer0.isCollection());
      assertFalse(beanPointer0.isContainer());
      assertTrue(beanPointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, beanPointer0.getIndex());
      assertFalse(jXPathContextReferenceImpl1.isLenient());
      
      RootContext rootContext0 = new RootContext(jXPathContextReferenceImpl1, beanPointer0);
      assertFalse(jXPathContextReferenceImpl0.equals((Object)jXPathContextReferenceImpl1));
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl0));
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertNotNull(rootContext0);
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertEquals("Ep||&*rQm\"n;S", qName0.getPrefix());
      assertEquals("Ep||&*rQm\"n;S", qName0.getName());
      assertEquals("Ep||&*rQm\"n;S:Ep||&*rQm\"n;S", qName0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("GB", locale0.getCountry());
      assertEquals("GBR", locale0.getISO3Country());
      assertEquals("en", locale0.getLanguage());
      assertEquals("en_GB", locale0.toString());
      assertEquals("eng", locale0.getISO3Language());
      assertNull(beanPointer0.getNamespaceURI());
      assertFalse(beanPointer0.isDynamicPropertyDeclarationSupported());
      assertEquals(1, beanPointer0.getLength());
      assertTrue(beanPointer0.isNode());
      assertFalse(beanPointer0.isAttribute());
      assertFalse(beanPointer0.isCollection());
      assertFalse(beanPointer0.isContainer());
      assertTrue(beanPointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, beanPointer0.getIndex());
      assertFalse(jXPathContextReferenceImpl1.isLenient());
      assertEquals(0, rootContext0.getPosition());
      assertEquals(0, rootContext0.getDocumentOrder());
      assertFalse(rootContext0.isChildOrderingRequired());
      
      RootContext rootContext1 = rootContext0.getRootContext();
      assertFalse(jXPathContextReferenceImpl0.equals((Object)jXPathContextReferenceImpl1));
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl0));
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertNotNull(rootContext1);
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertEquals("Ep||&*rQm\"n;S", qName0.getPrefix());
      assertEquals("Ep||&*rQm\"n;S", qName0.getName());
      assertEquals("Ep||&*rQm\"n;S:Ep||&*rQm\"n;S", qName0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("GB", locale0.getCountry());
      assertEquals("GBR", locale0.getISO3Country());
      assertEquals("en", locale0.getLanguage());
      assertEquals("en_GB", locale0.toString());
      assertEquals("eng", locale0.getISO3Language());
      assertNull(beanPointer0.getNamespaceURI());
      assertFalse(beanPointer0.isDynamicPropertyDeclarationSupported());
      assertEquals(1, beanPointer0.getLength());
      assertTrue(beanPointer0.isNode());
      assertFalse(beanPointer0.isAttribute());
      assertFalse(beanPointer0.isCollection());
      assertFalse(beanPointer0.isContainer());
      assertTrue(beanPointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, beanPointer0.getIndex());
      assertFalse(jXPathContextReferenceImpl1.isLenient());
      assertEquals(0, rootContext0.getPosition());
      assertEquals(0, rootContext0.getDocumentOrder());
      assertFalse(rootContext0.isChildOrderingRequired());
      assertEquals(0, rootContext1.getDocumentOrder());
      assertEquals(0, rootContext1.getPosition());
      assertFalse(rootContext1.isChildOrderingRequired());
      assertNotSame(jXPathContextReferenceImpl0, jXPathContextReferenceImpl1);
      assertNotSame(jXPathContextReferenceImpl1, jXPathContextReferenceImpl0);
      assertSame(rootContext0, rootContext1);
      assertSame(rootContext1, rootContext0);
      
      String string0 = (String)coreFunction0.computeValue(rootContext1);
      assertFalse(jXPathContextReferenceImpl0.equals((Object)jXPathContextReferenceImpl1));
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl0));
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals("", string0);
      assertNotNull(string0);
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals(7, coreFunction0.getFunctionCode());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertEquals("Ep||&*rQm\"n;S", qName0.getPrefix());
      assertEquals("Ep||&*rQm\"n;S", qName0.getName());
      assertEquals("Ep||&*rQm\"n;S:Ep||&*rQm\"n;S", qName0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("GB", locale0.getCountry());
      assertEquals("GBR", locale0.getISO3Country());
      assertEquals("en", locale0.getLanguage());
      assertEquals("en_GB", locale0.toString());
      assertEquals("eng", locale0.getISO3Language());
      assertNull(beanPointer0.getNamespaceURI());
      assertFalse(beanPointer0.isDynamicPropertyDeclarationSupported());
      assertEquals(1, beanPointer0.getLength());
      assertTrue(beanPointer0.isNode());
      assertFalse(beanPointer0.isAttribute());
      assertFalse(beanPointer0.isCollection());
      assertFalse(beanPointer0.isContainer());
      assertTrue(beanPointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, beanPointer0.getIndex());
      assertFalse(jXPathContextReferenceImpl1.isLenient());
      assertEquals(0, rootContext0.getPosition());
      assertEquals(0, rootContext0.getDocumentOrder());
      assertFalse(rootContext0.isChildOrderingRequired());
      assertEquals(0, rootContext1.getDocumentOrder());
      assertEquals(0, rootContext1.getPosition());
      assertFalse(rootContext1.isChildOrderingRequired());
      assertEquals(1, expressionArray0.length);
      assertNotSame(jXPathContextReferenceImpl0, jXPathContextReferenceImpl1);
      assertNotSame(jXPathContextReferenceImpl1, jXPathContextReferenceImpl0);
      assertSame(rootContext0, rootContext1);
      assertSame(rootContext1, rootContext0);
      
      boolean boolean0 = coreFunction0.computeContextDependent();
      assertFalse(boolean0);
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals(7, coreFunction0.getFunctionCode());
      assertEquals(1, expressionArray0.length);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(5, (Expression[]) null);
      assertNotNull(coreFunction0);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(5, coreFunction0.getFunctionCode());
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl)JXPathContext.newContext((Object) coreFunction0);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertNotNull(jXPathContextReferenceImpl0);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(5, coreFunction0.getFunctionCode());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      
      InitialContext initialContext0 = (InitialContext)jXPathContextReferenceImpl0.getAbsoluteRootContext();
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertNotNull(initialContext0);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(5, coreFunction0.getFunctionCode());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertFalse(initialContext0.isChildOrderingRequired());
      assertEquals(0, initialContext0.getDocumentOrder());
      assertEquals(0, initialContext0.getPosition());
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      String string0 = (String)coreFunction0.computeValue(initialContext0);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals("root", string0);
      assertNotNull(string0);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(5, coreFunction0.getFunctionCode());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertFalse(initialContext0.isChildOrderingRequired());
      assertEquals(0, initialContext0.getDocumentOrder());
      assertEquals(0, initialContext0.getPosition());
      
      boolean boolean0 = coreFunction0.computeContextDependent();
      assertTrue(boolean0);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(5, coreFunction0.getFunctionCode());
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[7];
      QName qName0 = new QName("14q<=Xtr", "14q<=Xtr");
      assertNotNull(qName0);
      assertEquals("14q<=Xtr:14q<=Xtr", qName0.toString());
      assertEquals("14q<=Xtr", qName0.getName());
      assertEquals("14q<=Xtr", qName0.getPrefix());
      
      ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, expressionArray0);
      assertNotNull(extensionFunction0);
      assertEquals("14q<=Xtr:14q<=Xtr", qName0.toString());
      assertEquals("14q<=Xtr", qName0.getName());
      assertEquals("14q<=Xtr", qName0.getPrefix());
      assertTrue(extensionFunction0.computeContextDependent());
      assertEquals(7, expressionArray0.length);
      
      expressionArray0[0] = (Expression) extensionFunction0;
      Step[] stepArray0 = new Step[8];
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("14q<=Xtr");
      assertNotNull(processingInstructionTest0);
      assertEquals("14q<=Xtr", processingInstructionTest0.getTarget());
      
      Step step0 = new Step((-2012), processingInstructionTest0, expressionArray0);
      assertNotNull(step0);
      assertEquals("14q<=Xtr", processingInstructionTest0.getTarget());
      assertEquals((-2012), step0.getAxis());
      assertEquals(7, expressionArray0.length);
      
      stepArray0[0] = step0;
      Step step1 = new Step(32, processingInstructionTest0, (Expression[]) null);
      assertFalse(step1.equals((Object)step0));
      assertNotNull(step1);
      assertEquals("14q<=Xtr", processingInstructionTest0.getTarget());
      assertEquals(32, step1.getAxis());
      
      stepArray0[1] = step1;
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
      assertNotNull(nodeNameTest0);
      assertEquals("14q<=Xtr:14q<=Xtr", qName0.toString());
      assertEquals("14q<=Xtr", qName0.getName());
      assertEquals("14q<=Xtr", qName0.getPrefix());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals("14q<=Xtr:14q<=Xtr", nodeNameTest0.toString());
      assertNull(nodeNameTest0.getNamespaceURI());
      
      Step step2 = new Step(32, nodeNameTest0, (Expression[]) null);
      assertFalse(step2.equals((Object)step1));
      assertFalse(step2.equals((Object)step0));
      assertNotNull(step2);
      assertEquals("14q<=Xtr:14q<=Xtr", qName0.toString());
      assertEquals("14q<=Xtr", qName0.getName());
      assertEquals("14q<=Xtr", qName0.getPrefix());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals("14q<=Xtr:14q<=Xtr", nodeNameTest0.toString());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertEquals(32, step2.getAxis());
      
      stepArray0[2] = step2;
      Step step3 = new Step(13, processingInstructionTest0, (Expression[]) null);
      assertFalse(step3.equals((Object)step1));
      assertFalse(step3.equals((Object)step0));
      assertFalse(step3.equals((Object)step2));
      assertNotNull(step3);
      assertEquals("14q<=Xtr", processingInstructionTest0.getTarget());
      assertEquals(13, step3.getAxis());
      
      stepArray0[3] = step3;
      Expression[] expressionArray1 = new Expression[6];
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      
      expressionArray1[0] = (Expression) extensionFunction0;
      expressionArray1[1] = (Expression) extensionFunction0;
      expressionArray1[2] = (Expression) extensionFunction0;
      expressionArray1[3] = (Expression) extensionFunction0;
      expressionArray1[4] = (Expression) extensionFunction0;
      expressionArray1[5] = (Expression) extensionFunction0;
      Step step4 = new Step((-2012), nodeNameTest0, expressionArray1);
      assertFalse(step4.equals((Object)step0));
      assertFalse(step4.equals((Object)step1));
      assertFalse(step4.equals((Object)step3));
      assertFalse(step4.equals((Object)step2));
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertNotNull(step4);
      assertEquals("14q<=Xtr:14q<=Xtr", qName0.toString());
      assertEquals("14q<=Xtr", qName0.getName());
      assertEquals("14q<=Xtr", qName0.getPrefix());
      assertEquals((-2012), step4.getAxis());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals("14q<=Xtr:14q<=Xtr", nodeNameTest0.toString());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertEquals(6, expressionArray1.length);
      
      stepArray0[4] = step4;
      Step step5 = new Step((-2012), processingInstructionTest0, (Expression[]) null);
      assertFalse(step5.equals((Object)step1));
      assertFalse(step5.equals((Object)step3));
      assertFalse(step5.equals((Object)step2));
      assertFalse(step5.equals((Object)step4));
      assertFalse(step5.equals((Object)step0));
      assertNotNull(step5);
      assertEquals("14q<=Xtr", processingInstructionTest0.getTarget());
      assertEquals((-2012), step5.getAxis());
      
      stepArray0[5] = step5;
      Step step6 = new Step(13, nodeNameTest0, (Expression[]) null);
      assertFalse(step6.equals((Object)step3));
      assertFalse(step6.equals((Object)step5));
      assertFalse(step6.equals((Object)step2));
      assertFalse(step6.equals((Object)step4));
      assertFalse(step6.equals((Object)step0));
      assertFalse(step6.equals((Object)step1));
      assertNotNull(step6);
      assertEquals("14q<=Xtr:14q<=Xtr", qName0.toString());
      assertEquals("14q<=Xtr", qName0.getName());
      assertEquals("14q<=Xtr", qName0.getPrefix());
      assertEquals(13, step6.getAxis());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals("14q<=Xtr:14q<=Xtr", nodeNameTest0.toString());
      assertNull(nodeNameTest0.getNamespaceURI());
      
      stepArray0[6] = step6;
      Step step7 = new Step((-1918), nodeNameTest0, expressionArray0);
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertFalse(step7.equals((Object)step2));
      assertFalse(step7.equals((Object)step6));
      assertFalse(step7.equals((Object)step3));
      assertFalse(step7.equals((Object)step4));
      assertFalse(step7.equals((Object)step0));
      assertFalse(step7.equals((Object)step1));
      assertFalse(step7.equals((Object)step5));
      assertNotNull(step7);
      assertEquals("14q<=Xtr:14q<=Xtr", qName0.toString());
      assertEquals("14q<=Xtr", qName0.getName());
      assertEquals("14q<=Xtr", qName0.getPrefix());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals("14q<=Xtr:14q<=Xtr", nodeNameTest0.toString());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertEquals((-1918), step7.getAxis());
      assertEquals(7, expressionArray0.length);
      
      stepArray0[7] = step7;
      ExpressionPath expressionPath0 = new ExpressionPath(expressionArray0[0], expressionArray0, stepArray0);
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertNotNull(expressionPath0);
      assertEquals(7, expressionArray0.length);
      assertEquals(8, stepArray0.length);
      
      expressionArray0[1] = (Expression) expressionPath0;
      ExtensionFunction extensionFunction1 = new ExtensionFunction(qName0, (Expression[]) null);
      assertFalse(extensionFunction1.equals((Object)extensionFunction0));
      assertNotNull(extensionFunction1);
      assertTrue(extensionFunction1.computeContextDependent());
      assertEquals("14q<=Xtr:14q<=Xtr", qName0.toString());
      assertEquals("14q<=Xtr", qName0.getName());
      assertEquals("14q<=Xtr", qName0.getPrefix());
      
      expressionArray0[2] = (Expression) extensionFunction1;
      CoreOperationUnion coreOperationUnion0 = new CoreOperationUnion(expressionArray0);
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertNotNull(coreOperationUnion0);
      assertEquals("|", coreOperationUnion0.getSymbol());
      assertEquals(7, expressionArray0.length);
      
      CoreOperationSubtract coreOperationSubtract0 = new CoreOperationSubtract(expressionArray0[0], coreOperationUnion0);
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertNotNull(coreOperationSubtract0);
      assertEquals("|", coreOperationUnion0.getSymbol());
      assertEquals("-", coreOperationSubtract0.getSymbol());
      assertEquals(7, expressionArray0.length);
      
      expressionArray0[3] = (Expression) coreOperationSubtract0;
      CoreOperationMod coreOperationMod0 = new CoreOperationMod(extensionFunction0, expressionArray1[1]);
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertFalse(extensionFunction0.equals((Object)extensionFunction1));
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertNotNull(coreOperationMod0);
      assertEquals("14q<=Xtr:14q<=Xtr", qName0.toString());
      assertEquals("14q<=Xtr", qName0.getName());
      assertEquals("14q<=Xtr", qName0.getPrefix());
      assertTrue(extensionFunction0.computeContextDependent());
      assertEquals("mod", coreOperationMod0.getSymbol());
      assertEquals(7, expressionArray0.length);
      assertEquals(6, expressionArray1.length);
      
      expressionArray0[4] = (Expression) coreOperationMod0;
      CoreOperationMod coreOperationMod1 = new CoreOperationMod(expressionArray0[3], coreOperationSubtract0);
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertFalse(coreOperationMod1.equals((Object)coreOperationMod0));
      assertNotNull(coreOperationMod1);
      assertEquals("|", coreOperationUnion0.getSymbol());
      assertEquals("-", coreOperationSubtract0.getSymbol());
      assertEquals("mod", coreOperationMod1.getSymbol());
      assertEquals(7, expressionArray0.length);
      
      expressionArray0[5] = (Expression) coreOperationMod1;
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd((Expression[]) null);
      assertNotNull(coreOperationAdd0);
      assertEquals("+", coreOperationAdd0.getSymbol());
      
      expressionArray0[6] = (Expression) coreOperationAdd0;
      CoreFunction coreFunction0 = new CoreFunction(32, expressionArray0);
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertNotNull(coreFunction0);
      assertEquals(7, coreFunction0.getArgumentCount());
      assertEquals(32, coreFunction0.getFunctionCode());
      assertEquals(7, expressionArray0.length);
      
      PrecedingOrFollowingContext precedingOrFollowingContext0 = new PrecedingOrFollowingContext((EvalContext) null, processingInstructionTest0, true);
      assertNotNull(precedingOrFollowingContext0);
      assertEquals("14q<=Xtr", processingInstructionTest0.getTarget());
      assertEquals(0, precedingOrFollowingContext0.getPosition());
      assertTrue(precedingOrFollowingContext0.isChildOrderingRequired());
      assertEquals((-1), precedingOrFollowingContext0.getDocumentOrder());
      
      ChildContext childContext0 = new ChildContext(precedingOrFollowingContext0, nodeNameTest0, true, true);
      assertNotNull(childContext0);
      assertEquals("14q<=Xtr:14q<=Xtr", qName0.toString());
      assertEquals("14q<=Xtr", qName0.getName());
      assertEquals("14q<=Xtr", qName0.getPrefix());
      assertEquals("14q<=Xtr", processingInstructionTest0.getTarget());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals("14q<=Xtr:14q<=Xtr", nodeNameTest0.toString());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertEquals(0, precedingOrFollowingContext0.getPosition());
      assertTrue(precedingOrFollowingContext0.isChildOrderingRequired());
      assertEquals((-1), precedingOrFollowingContext0.getDocumentOrder());
      assertEquals(1, childContext0.getDocumentOrder());
      assertEquals(0, childContext0.getPosition());
      assertTrue(childContext0.isChildOrderingRequired());
      
      // Undeclared exception!
//      try { 
        coreFunction0.functionSubstring(childContext0);
//        fail("Expecting exception: StackOverflowError");
      
//      } catch(StackOverflowError e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[8];
      CoreOperationUnion coreOperationUnion0 = new CoreOperationUnion(expressionArray0);
      assertNotNull(coreOperationUnion0);
      assertEquals("|", coreOperationUnion0.getSymbol());
      assertEquals(8, expressionArray0.length);
      
      expressionArray0[0] = (Expression) coreOperationUnion0;
      CoreOperationDivide coreOperationDivide0 = new CoreOperationDivide(expressionArray0[0], expressionArray0[0]);
      assertNotNull(coreOperationDivide0);
      assertEquals("div", coreOperationDivide0.getSymbol());
      assertEquals(8, expressionArray0.length);
      
      expressionArray0[1] = (Expression) coreOperationDivide0;
      CoreOperationOr coreOperationOr0 = new CoreOperationOr(expressionArray0);
      assertNotNull(coreOperationOr0);
      assertEquals("or", coreOperationOr0.getSymbol());
      assertEquals(8, expressionArray0.length);
      
      expressionArray0[2] = (Expression) coreOperationOr0;
      Step[] stepArray0 = new Step[6];
      QName qName0 = new QName("");
      assertNotNull(qName0);
      assertEquals("", qName0.toString());
      assertNull(qName0.getPrefix());
      assertEquals("", qName0.getName());
      
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
      assertNotNull(nodeNameTest0);
      assertEquals("", qName0.toString());
      assertNull(qName0.getPrefix());
      assertEquals("", qName0.getName());
      assertEquals("", nodeNameTest0.toString());
      assertFalse(nodeNameTest0.isWildcard());
      assertNull(nodeNameTest0.getNamespaceURI());
      
      Step step0 = new Step(4, nodeNameTest0, (Expression[]) null);
      assertNotNull(step0);
      assertEquals("", qName0.toString());
      assertNull(qName0.getPrefix());
      assertEquals("", qName0.getName());
      assertEquals("", nodeNameTest0.toString());
      assertFalse(nodeNameTest0.isWildcard());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertEquals(4, step0.getAxis());
      
      stepArray0[0] = step0;
      Expression[] expressionArray1 = new Expression[8];
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      
      QName qName1 = new QName("", "");
      assertFalse(qName1.equals((Object)qName0));
      assertNotNull(qName1);
      assertEquals(":", qName1.toString());
      assertEquals("", qName1.getPrefix());
      assertEquals("", qName1.getName());
      
      VariableReference variableReference0 = new VariableReference(qName1);
      assertFalse(qName1.equals((Object)qName0));
      assertNotNull(variableReference0);
      assertEquals(":", qName1.toString());
      assertEquals("", qName1.getPrefix());
      assertEquals("", qName1.getName());
      assertFalse(variableReference0.isContextDependent());
      assertFalse(variableReference0.computeContextDependent());
      
      expressionArray1[0] = (Expression) variableReference0;
      expressionArray1[1] = (Expression) coreOperationUnion0;
      expressionArray1[2] = (Expression) coreOperationOr0;
      expressionArray1[3] = (Expression) coreOperationOr0;
      expressionArray1[4] = (Expression) coreOperationDivide0;
      expressionArray1[5] = (Expression) coreOperationDivide0;
      expressionArray1[6] = (Expression) coreOperationOr0;
      expressionArray1[7] = (Expression) coreOperationDivide0;
      Step step1 = new Step(4, nodeNameTest0, expressionArray1);
      assertFalse(step1.equals((Object)step0));
      assertFalse(qName0.equals((Object)qName1));
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertNotNull(step1);
      assertEquals(4, step1.getAxis());
      assertEquals("", qName0.toString());
      assertNull(qName0.getPrefix());
      assertEquals("", qName0.getName());
      assertEquals("", nodeNameTest0.toString());
      assertFalse(nodeNameTest0.isWildcard());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertEquals(8, expressionArray1.length);
      
      stepArray0[1] = step1;
      Step step2 = new Step(0, nodeNameTest0, expressionArray1);
      assertFalse(qName0.equals((Object)qName1));
      assertFalse(step2.equals((Object)step1));
      assertFalse(step2.equals((Object)step0));
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertNotNull(step2);
      assertEquals("", qName0.toString());
      assertNull(qName0.getPrefix());
      assertEquals("", qName0.getName());
      assertEquals(0, step2.getAxis());
      assertEquals("", nodeNameTest0.toString());
      assertFalse(nodeNameTest0.isWildcard());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertEquals(8, expressionArray1.length);
      
      stepArray0[2] = step2;
      Step step3 = new Step(0, nodeNameTest0, (Expression[]) null);
      assertFalse(qName0.equals((Object)qName1));
      assertFalse(step3.equals((Object)step1));
      assertFalse(step3.equals((Object)step0));
      assertFalse(step3.equals((Object)step2));
      assertNotNull(step3);
      assertEquals("", qName0.toString());
      assertNull(qName0.getPrefix());
      assertEquals("", qName0.getName());
      assertEquals("", nodeNameTest0.toString());
      assertFalse(nodeNameTest0.isWildcard());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertEquals(0, step3.getAxis());
      
      stepArray0[3] = step3;
      Step step4 = new Step(26, nodeNameTest0, (Expression[]) null);
      assertFalse(qName0.equals((Object)qName1));
      assertFalse(step4.equals((Object)step1));
      assertFalse(step4.equals((Object)step3));
      assertFalse(step4.equals((Object)step2));
      assertFalse(step4.equals((Object)step0));
      assertNotNull(step4);
      assertEquals("", qName0.toString());
      assertNull(qName0.getPrefix());
      assertEquals("", qName0.getName());
      assertEquals("", nodeNameTest0.toString());
      assertFalse(nodeNameTest0.isWildcard());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertEquals(26, step4.getAxis());
      
      stepArray0[4] = step4;
      Step step5 = new Step(169, nodeNameTest0, (Expression[]) null);
      assertFalse(qName0.equals((Object)qName1));
      assertFalse(step5.equals((Object)step1));
      assertFalse(step5.equals((Object)step2));
      assertFalse(step5.equals((Object)step3));
      assertFalse(step5.equals((Object)step0));
      assertFalse(step5.equals((Object)step4));
      assertNotNull(step5);
      assertEquals("", qName0.toString());
      assertNull(qName0.getPrefix());
      assertEquals("", qName0.getName());
      assertEquals("", nodeNameTest0.toString());
      assertFalse(nodeNameTest0.isWildcard());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertEquals(169, step5.getAxis());
      
      stepArray0[5] = step5;
      ExpressionPath expressionPath0 = new ExpressionPath(coreOperationUnion0, expressionArray0, stepArray0);
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertNotNull(expressionPath0);
      assertEquals("|", coreOperationUnion0.getSymbol());
      assertEquals(8, expressionArray0.length);
      assertEquals(6, stepArray0.length);
      
      expressionArray0[3] = (Expression) expressionPath0;
      VariableReference variableReference1 = new VariableReference(qName0);
      assertFalse(variableReference1.equals((Object)variableReference0));
      assertFalse(qName0.equals((Object)qName1));
      assertNotNull(variableReference1);
      assertFalse(variableReference1.computeContextDependent());
      assertFalse(variableReference1.isContextDependent());
      assertEquals("", qName0.toString());
      assertNull(qName0.getPrefix());
      assertEquals("", qName0.getName());
      
      expressionArray0[4] = (Expression) variableReference1;
      CoreOperationEqual coreOperationEqual0 = new CoreOperationEqual(expressionArray1[1], coreOperationOr0);
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertNotNull(coreOperationEqual0);
      assertEquals("=", coreOperationEqual0.getSymbol());
      assertEquals("or", coreOperationOr0.getSymbol());
      assertEquals(8, expressionArray0.length);
      assertEquals(8, expressionArray1.length);
      
      expressionArray0[5] = (Expression) coreOperationEqual0;
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd(expressionArray1);
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertNotNull(coreOperationAdd0);
      assertEquals("+", coreOperationAdd0.getSymbol());
      assertEquals(8, expressionArray1.length);
      
      expressionArray0[6] = (Expression) coreOperationAdd0;
      CoreOperationOr coreOperationOr1 = new CoreOperationOr(expressionArray1);
      assertFalse(coreOperationOr1.equals((Object)coreOperationOr0));
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertNotNull(coreOperationOr1);
      assertEquals("or", coreOperationOr1.getSymbol());
      assertEquals(8, expressionArray1.length);
      
      expressionArray0[7] = (Expression) coreOperationOr1;
      CoreFunction coreFunction0 = new CoreFunction(4, expressionArray0);
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertNotNull(coreFunction0);
      assertEquals(4, coreFunction0.getFunctionCode());
      assertEquals(8, coreFunction0.getArgumentCount());
      assertEquals(8, expressionArray0.length);
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl)JXPathContext.newContext((Object) "");
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertNotNull(jXPathContextReferenceImpl0);
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl1 = (JXPathContextReferenceImpl)JXPathContext.newContext((JXPathContext) jXPathContextReferenceImpl0, (Object) step5);
      assertFalse(qName0.equals((Object)qName1));
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl0));
      assertFalse(step5.equals((Object)step1));
      assertFalse(step5.equals((Object)step2));
      assertFalse(step5.equals((Object)step3));
      assertFalse(step5.equals((Object)step0));
      assertFalse(step5.equals((Object)step4));
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertNotNull(jXPathContextReferenceImpl1);
      assertEquals("", qName0.toString());
      assertNull(qName0.getPrefix());
      assertEquals("", qName0.getName());
      assertEquals("", nodeNameTest0.toString());
      assertFalse(nodeNameTest0.isWildcard());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertFalse(jXPathContextReferenceImpl1.isLenient());
      assertEquals(169, step5.getAxis());
      assertNotSame(qName0, qName1);
      assertNotSame(jXPathContextReferenceImpl0, jXPathContextReferenceImpl1);
      assertNotSame(jXPathContextReferenceImpl1, jXPathContextReferenceImpl0);
      assertNotSame(step5, step1);
      assertNotSame(step5, step2);
      assertNotSame(step5, step3);
      assertNotSame(step5, step0);
      assertNotSame(step5, step4);
      
      NamespaceResolver namespaceResolver0 = new NamespaceResolver();
      assertNotNull(namespaceResolver0);
      assertFalse(namespaceResolver0.isSealed());
      
      Pointer pointer0 = namespaceResolver0.getNamespaceContextPointer();
      assertNull(pointer0);
      assertFalse(namespaceResolver0.isSealed());
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl2 = new JXPathContextReferenceImpl(jXPathContextReferenceImpl1, "", (Pointer) null);
      assertFalse(jXPathContextReferenceImpl2.equals((Object)jXPathContextReferenceImpl0));
      assertFalse(jXPathContextReferenceImpl2.equals((Object)jXPathContextReferenceImpl1));
      assertFalse(qName0.equals((Object)qName1));
      assertFalse(jXPathContextReferenceImpl0.equals((Object)jXPathContextReferenceImpl1));
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl0));
      assertFalse(step5.equals((Object)step1));
      assertFalse(step5.equals((Object)step2));
      assertFalse(step5.equals((Object)step3));
      assertFalse(step5.equals((Object)step0));
      assertFalse(step5.equals((Object)step4));
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertNotNull(jXPathContextReferenceImpl2);
      assertFalse(jXPathContextReferenceImpl2.isLenient());
      assertEquals("", qName0.toString());
      assertNull(qName0.getPrefix());
      assertEquals("", qName0.getName());
      assertEquals("", nodeNameTest0.toString());
      assertFalse(nodeNameTest0.isWildcard());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertFalse(jXPathContextReferenceImpl1.isLenient());
      assertEquals(169, step5.getAxis());
      
      InitialContext initialContext0 = (InitialContext)jXPathContextReferenceImpl2.getAbsoluteRootContext();
      assertFalse(jXPathContextReferenceImpl2.equals((Object)jXPathContextReferenceImpl0));
      assertFalse(jXPathContextReferenceImpl2.equals((Object)jXPathContextReferenceImpl1));
      assertFalse(qName0.equals((Object)qName1));
      assertFalse(jXPathContextReferenceImpl0.equals((Object)jXPathContextReferenceImpl2));
      assertFalse(jXPathContextReferenceImpl0.equals((Object)jXPathContextReferenceImpl1));
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl2));
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl0));
      assertFalse(step5.equals((Object)step1));
      assertFalse(step5.equals((Object)step2));
      assertFalse(step5.equals((Object)step3));
      assertFalse(step5.equals((Object)step0));
      assertFalse(step5.equals((Object)step4));
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertNotNull(initialContext0);
      assertFalse(jXPathContextReferenceImpl2.isLenient());
      assertFalse(initialContext0.isChildOrderingRequired());
      assertEquals(0, initialContext0.getDocumentOrder());
      assertEquals(0, initialContext0.getPosition());
      assertEquals("", qName0.toString());
      assertNull(qName0.getPrefix());
      assertEquals("", qName0.getName());
      assertEquals("", nodeNameTest0.toString());
      assertFalse(nodeNameTest0.isWildcard());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertFalse(jXPathContextReferenceImpl1.isLenient());
      assertEquals(169, step5.getAxis());
      assertNotSame(jXPathContextReferenceImpl2, jXPathContextReferenceImpl0);
      assertNotSame(jXPathContextReferenceImpl2, jXPathContextReferenceImpl1);
      assertNotSame(qName0, qName1);
      assertNotSame(jXPathContextReferenceImpl0, jXPathContextReferenceImpl2);
      assertNotSame(jXPathContextReferenceImpl0, jXPathContextReferenceImpl1);
      assertNotSame(jXPathContextReferenceImpl1, jXPathContextReferenceImpl2);
      assertNotSame(jXPathContextReferenceImpl1, jXPathContextReferenceImpl0);
      assertNotSame(step5, step1);
      assertNotSame(step5, step2);
      assertNotSame(step5, step3);
      assertNotSame(step5, step0);
      assertNotSame(step5, step4);
      
      // Undeclared exception!
      coreFunction0.functionNot(initialContext0);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[2];
      CoreFunction coreFunction0 = new CoreFunction(10, expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(10, coreFunction0.getFunctionCode());
      assertEquals(2, coreFunction0.getArgumentCount());
      assertEquals(2, expressionArray0.length);
      
      EvalContext evalContext0 = null;
      // Undeclared exception!
//      try { 
        coreFunction0.computeValue((EvalContext) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[9];
      QName qName0 = new QName("()");
      assertNotNull(qName0);
      assertNull(qName0.getPrefix());
      assertEquals("()", qName0.toString());
      assertEquals("()", qName0.getName());
      
      VariableReference variableReference0 = new VariableReference(qName0);
      assertNotNull(variableReference0);
      assertNull(qName0.getPrefix());
      assertEquals("()", qName0.toString());
      assertEquals("()", qName0.getName());
      assertFalse(variableReference0.computeContextDependent());
      assertFalse(variableReference0.isContextDependent());
      
      expressionArray0[0] = (Expression) variableReference0;
      CoreOperationNegate coreOperationNegate0 = new CoreOperationNegate(expressionArray0[0]);
      assertNotNull(coreOperationNegate0);
      assertEquals("-", coreOperationNegate0.getSymbol());
      assertEquals(9, expressionArray0.length);
      
      expressionArray0[1] = (Expression) coreOperationNegate0;
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd(expressionArray0);
      assertNotNull(coreOperationAdd0);
      assertEquals("+", coreOperationAdd0.getSymbol());
      assertEquals(9, expressionArray0.length);
      
      expressionArray0[2] = (Expression) coreOperationAdd0;
      CoreOperationNegate coreOperationNegate1 = new CoreOperationNegate(variableReference0);
      assertFalse(coreOperationNegate1.equals((Object)coreOperationNegate0));
      assertNotNull(coreOperationNegate1);
      assertNull(qName0.getPrefix());
      assertEquals("()", qName0.toString());
      assertEquals("()", qName0.getName());
      assertFalse(variableReference0.computeContextDependent());
      assertFalse(variableReference0.isContextDependent());
      assertEquals("-", coreOperationNegate1.getSymbol());
      
      expressionArray0[3] = (Expression) coreOperationNegate1;
      CoreFunction coreFunction0 = new CoreFunction(704, expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(9, coreFunction0.getArgumentCount());
      assertEquals(704, coreFunction0.getFunctionCode());
      assertEquals(9, expressionArray0.length);
      
      CoreOperationAdd coreOperationAdd1 = (CoreOperationAdd)coreFunction0.getArg3();
      assertNotNull(coreOperationAdd1);
      assertEquals(9, coreFunction0.getArgumentCount());
      assertEquals(704, coreFunction0.getFunctionCode());
      assertEquals("+", coreOperationAdd1.getSymbol());
      assertEquals(9, expressionArray0.length);
      assertSame(coreOperationAdd1, coreOperationAdd0);
      
      expressionArray0[4] = (Expression) coreOperationAdd1;
      CoreOperationMod coreOperationMod0 = new CoreOperationMod(expressionArray0[4], coreOperationAdd0);
      assertNotNull(coreOperationMod0);
      assertEquals("+", coreOperationAdd0.getSymbol());
      assertEquals("mod", coreOperationMod0.getSymbol());
      assertEquals(9, expressionArray0.length);
      
      expressionArray0[5] = (Expression) coreOperationMod0;
      CoreOperationGreaterThan coreOperationGreaterThan0 = new CoreOperationGreaterThan(variableReference0, coreOperationNegate0);
      assertFalse(coreOperationNegate0.equals((Object)coreOperationNegate1));
      assertNotNull(coreOperationGreaterThan0);
      assertNull(qName0.getPrefix());
      assertEquals("()", qName0.toString());
      assertEquals("()", qName0.getName());
      assertFalse(variableReference0.computeContextDependent());
      assertFalse(variableReference0.isContextDependent());
      assertEquals("-", coreOperationNegate0.getSymbol());
      assertEquals(">", coreOperationGreaterThan0.getSymbol());
      assertEquals(9, expressionArray0.length);
      
      expressionArray0[6] = (Expression) coreOperationGreaterThan0;
      CoreOperationSubtract coreOperationSubtract0 = new CoreOperationSubtract(variableReference0, coreOperationAdd1);
      assertNotNull(coreOperationSubtract0);
      assertEquals("-", coreOperationSubtract0.getSymbol());
      assertNull(qName0.getPrefix());
      assertEquals("()", qName0.toString());
      assertEquals("()", qName0.getName());
      assertFalse(variableReference0.computeContextDependent());
      assertFalse(variableReference0.isContextDependent());
      assertEquals(9, coreFunction0.getArgumentCount());
      assertEquals(704, coreFunction0.getFunctionCode());
      assertEquals("+", coreOperationAdd1.getSymbol());
      assertEquals(9, expressionArray0.length);
      
      expressionArray0[7] = (Expression) coreOperationSubtract0;
      CoreOperationOr coreOperationOr0 = new CoreOperationOr(expressionArray0);
      assertNotNull(coreOperationOr0);
      assertEquals("or", coreOperationOr0.getSymbol());
      assertEquals(9, expressionArray0.length);
      
      expressionArray0[8] = (Expression) coreOperationOr0;
      CoreFunction coreFunction1 = new CoreFunction(2131, expressionArray0);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertNotNull(coreFunction1);
      assertEquals(2131, coreFunction1.getFunctionCode());
      assertEquals(9, coreFunction1.getArgumentCount());
      assertEquals(9, expressionArray0.length);
      
      // Undeclared exception!
      coreFunction0.computeContextDependent();
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[6];
      CoreFunction coreFunction0 = new CoreFunction(27, expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(6, coreFunction0.getArgumentCount());
      assertEquals(27, coreFunction0.getFunctionCode());
      assertEquals(6, expressionArray0.length);
      
      Expression expression0 = coreFunction0.getArg3();
      assertNull(expression0);
      assertEquals(6, coreFunction0.getArgumentCount());
      assertEquals(27, coreFunction0.getFunctionCode());
      assertEquals(6, expressionArray0.length);
      
      expressionArray0[0] = null;
      Step[] stepArray0 = new Step[0];
      ExpressionPath expressionPath0 = new ExpressionPath(expression0, expressionArray0, stepArray0);
      assertNotNull(expressionPath0);
      assertEquals(6, coreFunction0.getArgumentCount());
      assertEquals(27, coreFunction0.getFunctionCode());
      assertEquals(6, expressionArray0.length);
      assertEquals(0, stepArray0.length);
      
      expressionArray0[1] = (Expression) expressionPath0;
      CoreOperationGreaterThan coreOperationGreaterThan0 = new CoreOperationGreaterThan(expression0, coreFunction0);
      assertNotNull(coreOperationGreaterThan0);
      assertEquals(6, coreFunction0.getArgumentCount());
      assertEquals(27, coreFunction0.getFunctionCode());
      assertEquals(">", coreOperationGreaterThan0.getSymbol());
      assertEquals(6, expressionArray0.length);
      
      expressionArray0[2] = (Expression) coreOperationGreaterThan0;
      CoreOperationEqual coreOperationEqual0 = new CoreOperationEqual(expressionArray0[1], expressionArray0[1]);
      assertNotNull(coreOperationEqual0);
      assertEquals("=", coreOperationEqual0.getSymbol());
      assertEquals(6, expressionArray0.length);
      
      expressionArray0[3] = (Expression) coreOperationEqual0;
      CoreOperationUnion coreOperationUnion0 = new CoreOperationUnion(expressionArray0);
      assertNotNull(coreOperationUnion0);
      assertEquals("|", coreOperationUnion0.getSymbol());
      assertEquals(6, expressionArray0.length);
      
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual(expressionArray0[2], coreOperationUnion0);
      assertNotNull(coreOperationLessThanOrEqual0);
      assertEquals("|", coreOperationUnion0.getSymbol());
      assertEquals("<=", coreOperationLessThanOrEqual0.getSymbol());
      assertEquals(6, expressionArray0.length);
      
      expressionArray0[4] = (Expression) coreOperationLessThanOrEqual0;
      QName qName0 = new QName("false", "false");
      assertNotNull(qName0);
      assertEquals("false", qName0.getPrefix());
      assertEquals("false", qName0.getName());
      assertEquals("false:false", qName0.toString());
      
      ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, expressionArray0);
      assertNotNull(extensionFunction0);
      assertEquals("false", qName0.getPrefix());
      assertEquals("false", qName0.getName());
      assertEquals("false:false", qName0.toString());
      assertTrue(extensionFunction0.computeContextDependent());
      assertEquals(6, expressionArray0.length);
      
      expressionArray0[5] = (Expression) extensionFunction0;
      CoreFunction coreFunction1 = new CoreFunction((-2134), expressionArray0);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertNotNull(coreFunction1);
      assertEquals(6, coreFunction1.getArgumentCount());
      assertEquals((-2134), coreFunction1.getFunctionCode());
      assertEquals(6, expressionArray0.length);
      
      EvalContext evalContext0 = null;
      // Undeclared exception!
      coreFunction0.computeValue((EvalContext) null);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      boolean boolean0 = false;
      Step[] stepArray0 = new Step[2];
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("2VgYlm~MX2>lX");
      assertNotNull(processingInstructionTest0);
      assertEquals("2VgYlm~MX2>lX", processingInstructionTest0.getTarget());
      
      Step step0 = new Step(2506, processingInstructionTest0, expressionArray0);
      assertNotNull(step0);
      assertEquals("2VgYlm~MX2>lX", processingInstructionTest0.getTarget());
      assertEquals(2506, step0.getAxis());
      assertEquals(1, expressionArray0.length);
      
      stepArray0[0] = step0;
      Step step1 = new Step(2506, processingInstructionTest0, expressionArray0);
      assertFalse(step1.equals((Object)step0));
      assertNotNull(step1);
      assertEquals("2VgYlm~MX2>lX", processingInstructionTest0.getTarget());
      assertEquals(2506, step1.getAxis());
      assertEquals(1, expressionArray0.length);
      
      stepArray0[1] = step1;
      LocationPath locationPath0 = new LocationPath(false, stepArray0);
      assertNotNull(locationPath0);
      assertFalse(locationPath0.isAbsolute());
      assertEquals(2, stepArray0.length);
      
      expressionArray0[0] = (Expression) locationPath0;
      CoreFunction coreFunction0 = new CoreFunction(2506, expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(2506, coreFunction0.getFunctionCode());
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals(1, expressionArray0.length);
      
      EvalContext evalContext0 = null;
      // Undeclared exception!
//      try { 
        coreFunction0.functionNull((EvalContext) null);
//        fail("Expecting exception: StackOverflowError");
      
//      } catch(StackOverflowError e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(30, (Expression[]) null);
      assertNotNull(coreFunction0);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(30, coreFunction0.getFunctionCode());
      
      boolean boolean0 = coreFunction0.isContextDependent();
      assertFalse(boolean0);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(30, coreFunction0.getFunctionCode());
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[9];
      QName qName0 = new QName("&A2@z^UR{[c,ny", (String) null);
      assertNotNull(qName0);
      assertEquals("&A2@z^UR{[c,ny:null", qName0.toString());
      assertEquals("&A2@z^UR{[c,ny", qName0.getPrefix());
      assertNull(qName0.getName());
      
      VariableReference variableReference0 = new VariableReference(qName0);
      assertNotNull(variableReference0);
      assertEquals("&A2@z^UR{[c,ny:null", qName0.toString());
      assertEquals("&A2@z^UR{[c,ny", qName0.getPrefix());
      assertNull(qName0.getName());
      assertFalse(variableReference0.computeContextDependent());
      assertFalse(variableReference0.isContextDependent());
      
      expressionArray0[0] = (Expression) variableReference0;
      CoreOperationEqual coreOperationEqual0 = new CoreOperationEqual(variableReference0, variableReference0);
      assertNotNull(coreOperationEqual0);
      assertEquals("&A2@z^UR{[c,ny:null", qName0.toString());
      assertEquals("&A2@z^UR{[c,ny", qName0.getPrefix());
      assertNull(qName0.getName());
      assertFalse(variableReference0.computeContextDependent());
      assertFalse(variableReference0.isContextDependent());
      assertEquals("=", coreOperationEqual0.getSymbol());
      
      expressionArray0[1] = (Expression) coreOperationEqual0;
      CoreOperationNegate coreOperationNegate0 = new CoreOperationNegate(coreOperationEqual0);
      assertNotNull(coreOperationNegate0);
      assertEquals("&A2@z^UR{[c,ny:null", qName0.toString());
      assertEquals("&A2@z^UR{[c,ny", qName0.getPrefix());
      assertNull(qName0.getName());
      assertFalse(variableReference0.computeContextDependent());
      assertFalse(variableReference0.isContextDependent());
      assertEquals("=", coreOperationEqual0.getSymbol());
      assertEquals("-", coreOperationNegate0.getSymbol());
      
      expressionArray0[2] = (Expression) coreOperationNegate0;
      CoreOperationGreaterThan coreOperationGreaterThan0 = new CoreOperationGreaterThan(variableReference0, expressionArray0[1]);
      assertNotNull(coreOperationGreaterThan0);
      assertEquals("&A2@z^UR{[c,ny:null", qName0.toString());
      assertEquals("&A2@z^UR{[c,ny", qName0.getPrefix());
      assertNull(qName0.getName());
      assertFalse(variableReference0.computeContextDependent());
      assertFalse(variableReference0.isContextDependent());
      assertEquals(">", coreOperationGreaterThan0.getSymbol());
      assertEquals(9, expressionArray0.length);
      
      expressionArray0[3] = (Expression) coreOperationGreaterThan0;
      CoreOperationAnd coreOperationAnd0 = new CoreOperationAnd(expressionArray0);
      assertNotNull(coreOperationAnd0);
      assertEquals("and", coreOperationAnd0.getSymbol());
      assertEquals(9, expressionArray0.length);
      
      expressionArray0[4] = (Expression) coreOperationAnd0;
      CoreOperationMultiply coreOperationMultiply0 = new CoreOperationMultiply(expressionArray0[1], expressionArray0[2]);
      assertNotNull(coreOperationMultiply0);
      assertEquals("*", coreOperationMultiply0.getSymbol());
      assertEquals(9, expressionArray0.length);
      
      expressionArray0[5] = (Expression) coreOperationMultiply0;
      Step[] stepArray0 = new Step[3];
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(5496);
      assertNotNull(nodeTypeTest0);
      assertEquals(5496, nodeTypeTest0.getNodeType());
      
      Step step0 = new Step(7, nodeTypeTest0, expressionArray0);
      assertNotNull(step0);
      assertEquals(7, step0.getAxis());
      assertEquals(5496, nodeTypeTest0.getNodeType());
      assertEquals(9, expressionArray0.length);
      
      stepArray0[0] = step0;
      Step step1 = new Step(7, (NodeTest) null, expressionArray0);
      assertFalse(step1.equals((Object)step0));
      assertNotNull(step1);
      assertEquals(7, step1.getAxis());
      assertEquals(9, expressionArray0.length);
      
      stepArray0[1] = step1;
      Expression[] expressionArray1 = new Expression[8];
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      
      expressionArray1[0] = (Expression) coreOperationEqual0;
      expressionArray1[1] = (Expression) coreOperationNegate0;
      expressionArray1[2] = (Expression) coreOperationAnd0;
      expressionArray1[3] = (Expression) coreOperationEqual0;
      expressionArray1[4] = (Expression) coreOperationMultiply0;
      expressionArray1[5] = (Expression) coreOperationAnd0;
      expressionArray1[6] = (Expression) coreOperationMultiply0;
      expressionArray1[7] = (Expression) variableReference0;
      Step step2 = new Step(1359, nodeTypeTest0, expressionArray1);
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertFalse(step2.equals((Object)step1));
      assertFalse(step2.equals((Object)step0));
      assertNotNull(step2);
      assertEquals(1359, step2.getAxis());
      assertEquals(5496, nodeTypeTest0.getNodeType());
      assertEquals(8, expressionArray1.length);
      
      stepArray0[2] = step2;
      ExpressionPath expressionPath0 = new ExpressionPath(expressionArray0[0], expressionArray0, stepArray0);
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertNotNull(expressionPath0);
      assertEquals(9, expressionArray0.length);
      assertEquals(3, stepArray0.length);
      
      expressionArray0[6] = (Expression) expressionPath0;
      ExpressionPath expressionPath1 = new ExpressionPath(coreOperationMultiply0, expressionArray1, stepArray0);
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertFalse(expressionPath1.equals((Object)expressionPath0));
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertNotNull(expressionPath1);
      assertEquals("*", coreOperationMultiply0.getSymbol());
      assertEquals(9, expressionArray0.length);
      assertEquals(8, expressionArray1.length);
      assertEquals(3, stepArray0.length);
      
      expressionArray0[7] = (Expression) expressionPath1;
      ExpressionPath expressionPath2 = new ExpressionPath(expressionArray0[7], expressionArray1, stepArray0);
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertFalse(expressionPath2.equals((Object)expressionPath0));
      assertFalse(expressionPath2.equals((Object)expressionPath1));
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertNotNull(expressionPath2);
      assertEquals(9, expressionArray0.length);
      assertEquals(8, expressionArray1.length);
      assertEquals(3, stepArray0.length);
      
      expressionArray0[8] = (Expression) expressionPath2;
      CoreFunction coreFunction0 = new CoreFunction(7, expressionArray0);
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertNotNull(coreFunction0);
      assertEquals(7, coreFunction0.getFunctionCode());
      assertEquals(9, coreFunction0.getArgumentCount());
      assertEquals(9, expressionArray0.length);
      
      // Undeclared exception!
      coreFunction0.functionFloor((EvalContext) null);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      Expression[] expressionArray0 = new Expression[4];
      QName qName0 = new QName("I!g*T6)/i~");
      assertNotNull(qName0);
      assertEquals("I!g*T6)/i~", qName0.getName());
      assertEquals("I!g*T6)/i~", qName0.toString());
      assertNull(qName0.getPrefix());
      
      VariableReference variableReference0 = new VariableReference(qName0);
      assertNotNull(variableReference0);
      assertEquals("I!g*T6)/i~", qName0.getName());
      assertEquals("I!g*T6)/i~", qName0.toString());
      assertNull(qName0.getPrefix());
      assertFalse(variableReference0.computeContextDependent());
      assertFalse(variableReference0.isContextDependent());
      
      expressionArray0[0] = (Expression) variableReference0;
      Step[] stepArray0 = new Step[1];
      QName qName1 = new QName("I!g*T6)/i~", "I!g*T6)/i~");
      assertFalse(qName1.equals((Object)qName0));
      assertNotNull(qName1);
      assertEquals("I!g*T6)/i~:I!g*T6)/i~", qName1.toString());
      assertEquals("I!g*T6)/i~", qName1.getPrefix());
      assertEquals("I!g*T6)/i~", qName1.getName());
      
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName1);
      assertFalse(qName1.equals((Object)qName0));
      assertNotNull(nodeNameTest0);
      assertEquals("I!g*T6)/i~:I!g*T6)/i~", qName1.toString());
      assertEquals("I!g*T6)/i~", qName1.getPrefix());
      assertEquals("I!g*T6)/i~", qName1.getName());
      assertFalse(nodeNameTest0.isWildcard());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertEquals("I!g*T6)/i~:I!g*T6)/i~", nodeNameTest0.toString());
      
      Step step0 = new Step((-4387), nodeNameTest0, expressionArray0);
      assertFalse(qName1.equals((Object)qName0));
      assertNotNull(step0);
      assertEquals("I!g*T6)/i~:I!g*T6)/i~", qName1.toString());
      assertEquals("I!g*T6)/i~", qName1.getPrefix());
      assertEquals("I!g*T6)/i~", qName1.getName());
      assertFalse(nodeNameTest0.isWildcard());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertEquals("I!g*T6)/i~:I!g*T6)/i~", nodeNameTest0.toString());
      assertEquals((-4387), step0.getAxis());
      assertEquals(4, expressionArray0.length);
      
      stepArray0[0] = step0;
      LocationPath locationPath0 = new LocationPath(true, stepArray0);
      assertNotNull(locationPath0);
      assertTrue(locationPath0.isAbsolute());
      assertEquals(1, stepArray0.length);
      
      expressionArray0[1] = (Expression) locationPath0;
      CoreOperationGreaterThanOrEqual coreOperationGreaterThanOrEqual0 = new CoreOperationGreaterThanOrEqual(locationPath0, variableReference0);
      assertFalse(qName0.equals((Object)qName1));
      assertNotNull(coreOperationGreaterThanOrEqual0);
      assertEquals("I!g*T6)/i~", qName0.getName());
      assertEquals("I!g*T6)/i~", qName0.toString());
      assertNull(qName0.getPrefix());
      assertFalse(variableReference0.computeContextDependent());
      assertFalse(variableReference0.isContextDependent());
      assertTrue(locationPath0.isAbsolute());
      assertEquals(">=", coreOperationGreaterThanOrEqual0.getSymbol());
      assertEquals(1, stepArray0.length);
      
      expressionArray0[2] = (Expression) coreOperationGreaterThanOrEqual0;
      CoreOperationUnion coreOperationUnion0 = new CoreOperationUnion(expressionArray0);
      assertNotNull(coreOperationUnion0);
      assertEquals("|", coreOperationUnion0.getSymbol());
      assertEquals(4, expressionArray0.length);
      
      expressionArray0[3] = (Expression) coreOperationUnion0;
      CoreFunction coreFunction0 = new CoreFunction((-4387), expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(4, coreFunction0.getArgumentCount());
      assertEquals((-4387), coreFunction0.getFunctionCode());
      assertEquals(4, expressionArray0.length);
      
      EvalContext[] evalContextArray0 = new EvalContext[4];
      evalContextArray0[0] = null;
      evalContextArray0[1] = null;
      evalContextArray0[2] = null;
      evalContextArray0[3] = null;
      UnionContext unionContext0 = new UnionContext((EvalContext) null, evalContextArray0);
      assertNotNull(unionContext0);
      assertTrue(unionContext0.isChildOrderingRequired());
      assertEquals(0, unionContext0.getPosition());
      assertEquals(1, unionContext0.getDocumentOrder());
      assertEquals(4, evalContextArray0.length);
      
      // Undeclared exception!
//      try { 
        coreFunction0.functionNot(unionContext0);
//        fail("Expecting exception: StackOverflowError");
      
//      } catch(StackOverflowError e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[4];
      CoreOperationAnd coreOperationAnd0 = new CoreOperationAnd(expressionArray0);
      assertNotNull(coreOperationAnd0);
      assertEquals("and", coreOperationAnd0.getSymbol());
      assertEquals(4, expressionArray0.length);
      
      expressionArray0[2] = (Expression) coreOperationAnd0;
      EvalContext evalContext0 = null;
      CoreFunction coreFunction0 = new CoreFunction(3033, expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(4, coreFunction0.getArgumentCount());
      assertEquals(3033, coreFunction0.getFunctionCode());
      assertEquals(4, expressionArray0.length);
      
      QName qName0 = new QName("substring", (String) null);
      assertNotNull(qName0);
      assertNull(qName0.getName());
      assertEquals("substring", qName0.getPrefix());
      assertEquals("substring:null", qName0.toString());
      
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
      assertNotNull(nodeNameTest0);
      assertNull(qName0.getName());
      assertEquals("substring", qName0.getPrefix());
      assertEquals("substring:null", qName0.toString());
      assertEquals("substring:null", nodeNameTest0.toString());
      assertNull(nodeNameTest0.getNamespaceURI());
      
      AncestorContext ancestorContext0 = new AncestorContext((EvalContext) null, false, nodeNameTest0);
      assertNotNull(ancestorContext0);
      assertNull(qName0.getName());
      assertEquals("substring", qName0.getPrefix());
      assertEquals("substring:null", qName0.toString());
      assertEquals("substring:null", nodeNameTest0.toString());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertEquals(0, ancestorContext0.getPosition());
      assertTrue(ancestorContext0.isChildOrderingRequired());
      assertEquals((-1), ancestorContext0.getDocumentOrder());
      
      // Undeclared exception!
//      try { 
        coreFunction0.functionSubstringBefore(ancestorContext0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.evosuite.runtime.System", e);
//      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[2];
      CoreOperationOr coreOperationOr0 = new CoreOperationOr(expressionArray0);
      assertNotNull(coreOperationOr0);
      assertEquals("or", coreOperationOr0.getSymbol());
      assertEquals(2, expressionArray0.length);
      
      expressionArray0[0] = (Expression) coreOperationOr0;
      NameAttributeTest nameAttributeTest0 = new NameAttributeTest(expressionArray0[0], coreOperationOr0);
      assertNotNull(nameAttributeTest0);
      assertEquals("or", coreOperationOr0.getSymbol());
      assertTrue(nameAttributeTest0.computeContextDependent());
      assertEquals("=", nameAttributeTest0.getSymbol());
      assertEquals(2, expressionArray0.length);
      
      expressionArray0[1] = (Expression) nameAttributeTest0;
      CoreFunction coreFunction0 = new CoreFunction(0, expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(0, coreFunction0.getFunctionCode());
      assertEquals(2, coreFunction0.getArgumentCount());
      assertEquals(2, expressionArray0.length);
      
      // Undeclared exception!
      coreFunction0.functionContains((EvalContext) null);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      EvalContext evalContext0 = null;
      CoreFunction coreFunction0 = new CoreFunction(28, (Expression[]) null);
      assertNotNull(coreFunction0);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(28, coreFunction0.getFunctionCode());
      
      Object object0 = coreFunction0.computeValue((EvalContext) null);
      assertNull(object0);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(28, coreFunction0.getFunctionCode());
      
      // Undeclared exception!
//      try { 
        coreFunction0.functionString((EvalContext) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      Float float0 = new Float((float) 1048576);
      assertEquals(1048576.0F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      CoreFunction coreFunction0 = new CoreFunction(21, expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals(21, coreFunction0.getFunctionCode());
      assertEquals(1, expressionArray0.length);
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl)JXPathContext.newContext((Object) float0);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertNotNull(jXPathContextReferenceImpl0);
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      
      QName qName0 = new QName("JXPath internal error: compareChildNodes called for ", "JXPath internal error: compareChildNodes called for ");
      assertNotNull(qName0);
      assertEquals("JXPath internal error: compareChildNodes called for ", qName0.getName());
      assertEquals("JXPath internal error: compareChildNodes called for ", qName0.getPrefix());
      assertEquals("JXPath internal error: compareChildNodes called for :JXPath internal error: compareChildNodes called for ", qName0.toString());
      
      Locale locale0 = Locale.KOREA;
      assertNotNull(locale0);
      assertEquals("ko", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("KOR", locale0.getISO3Country());
      assertEquals("ko_KR", locale0.toString());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("KR", locale0.getCountry());
      
      BeanPointer beanPointer0 = (BeanPointer)NodePointer.newNodePointer(qName0, coreFunction0, locale0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(beanPointer0);
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals(21, coreFunction0.getFunctionCode());
      assertEquals("JXPath internal error: compareChildNodes called for ", qName0.getName());
      assertEquals("JXPath internal error: compareChildNodes called for ", qName0.getPrefix());
      assertEquals("JXPath internal error: compareChildNodes called for :JXPath internal error: compareChildNodes called for ", qName0.toString());
      assertEquals("ko", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("KOR", locale0.getISO3Country());
      assertEquals("ko_KR", locale0.toString());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("KR", locale0.getCountry());
      assertEquals(1, beanPointer0.getLength());
      assertNull(beanPointer0.getNamespaceURI());
      assertFalse(beanPointer0.isContainer());
      assertTrue(beanPointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, beanPointer0.getIndex());
      assertFalse(beanPointer0.isCollection());
      assertFalse(beanPointer0.isDynamicPropertyDeclarationSupported());
      assertTrue(beanPointer0.isNode());
      assertFalse(beanPointer0.isAttribute());
      assertEquals(1, expressionArray0.length);
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl1 = new JXPathContextReferenceImpl(jXPathContextReferenceImpl0, jXPathContextReferenceImpl0, beanPointer0);
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl0));
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertNotNull(jXPathContextReferenceImpl1);
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals(21, coreFunction0.getFunctionCode());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertEquals("JXPath internal error: compareChildNodes called for ", qName0.getName());
      assertEquals("JXPath internal error: compareChildNodes called for ", qName0.getPrefix());
      assertEquals("JXPath internal error: compareChildNodes called for :JXPath internal error: compareChildNodes called for ", qName0.toString());
      assertEquals("ko", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("KOR", locale0.getISO3Country());
      assertEquals("ko_KR", locale0.toString());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("KR", locale0.getCountry());
      assertEquals(1, beanPointer0.getLength());
      assertNull(beanPointer0.getNamespaceURI());
      assertFalse(beanPointer0.isContainer());
      assertTrue(beanPointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, beanPointer0.getIndex());
      assertFalse(beanPointer0.isCollection());
      assertFalse(beanPointer0.isDynamicPropertyDeclarationSupported());
      assertTrue(beanPointer0.isNode());
      assertFalse(beanPointer0.isAttribute());
      assertFalse(jXPathContextReferenceImpl1.isLenient());
      assertEquals(1, expressionArray0.length);
      
      RootContext rootContext0 = new RootContext(jXPathContextReferenceImpl1, beanPointer0);
      assertFalse(jXPathContextReferenceImpl0.equals((Object)jXPathContextReferenceImpl1));
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl0));
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertNotNull(rootContext0);
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals(21, coreFunction0.getFunctionCode());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertEquals("JXPath internal error: compareChildNodes called for ", qName0.getName());
      assertEquals("JXPath internal error: compareChildNodes called for ", qName0.getPrefix());
      assertEquals("JXPath internal error: compareChildNodes called for :JXPath internal error: compareChildNodes called for ", qName0.toString());
      assertEquals("ko", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("KOR", locale0.getISO3Country());
      assertEquals("ko_KR", locale0.toString());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("KR", locale0.getCountry());
      assertEquals(1, beanPointer0.getLength());
      assertNull(beanPointer0.getNamespaceURI());
      assertFalse(beanPointer0.isContainer());
      assertTrue(beanPointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, beanPointer0.getIndex());
      assertFalse(beanPointer0.isCollection());
      assertFalse(beanPointer0.isDynamicPropertyDeclarationSupported());
      assertTrue(beanPointer0.isNode());
      assertFalse(beanPointer0.isAttribute());
      assertFalse(jXPathContextReferenceImpl1.isLenient());
      assertFalse(rootContext0.isChildOrderingRequired());
      assertEquals(0, rootContext0.getPosition());
      assertEquals(0, rootContext0.getDocumentOrder());
      assertEquals(1, expressionArray0.length);
      
      RootContext rootContext1 = rootContext0.getRootContext();
      assertFalse(jXPathContextReferenceImpl0.equals((Object)jXPathContextReferenceImpl1));
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl0));
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertNotNull(rootContext1);
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals(21, coreFunction0.getFunctionCode());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertEquals("JXPath internal error: compareChildNodes called for ", qName0.getName());
      assertEquals("JXPath internal error: compareChildNodes called for ", qName0.getPrefix());
      assertEquals("JXPath internal error: compareChildNodes called for :JXPath internal error: compareChildNodes called for ", qName0.toString());
      assertEquals("ko", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("KOR", locale0.getISO3Country());
      assertEquals("ko_KR", locale0.toString());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("KR", locale0.getCountry());
      assertEquals(1, beanPointer0.getLength());
      assertNull(beanPointer0.getNamespaceURI());
      assertFalse(beanPointer0.isContainer());
      assertTrue(beanPointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, beanPointer0.getIndex());
      assertFalse(beanPointer0.isCollection());
      assertFalse(beanPointer0.isDynamicPropertyDeclarationSupported());
      assertTrue(beanPointer0.isNode());
      assertFalse(beanPointer0.isAttribute());
      assertFalse(jXPathContextReferenceImpl1.isLenient());
      assertFalse(rootContext0.isChildOrderingRequired());
      assertEquals(0, rootContext0.getPosition());
      assertEquals(0, rootContext0.getDocumentOrder());
      assertEquals(0, rootContext1.getPosition());
      assertFalse(rootContext1.isChildOrderingRequired());
      assertEquals(0, rootContext1.getDocumentOrder());
      assertEquals(1, expressionArray0.length);
      assertNotSame(jXPathContextReferenceImpl0, jXPathContextReferenceImpl1);
      assertNotSame(jXPathContextReferenceImpl1, jXPathContextReferenceImpl0);
      assertSame(rootContext0, rootContext1);
      assertSame(rootContext1, rootContext0);
      
      // Undeclared exception!
//      try { 
        coreFunction0.compute(rootContext1);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // Incorrect number of arguments: false(null)
//         //
//         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      CoreOperationUnion coreOperationUnion0 = new CoreOperationUnion(expressionArray0);
      assertNotNull(coreOperationUnion0);
      assertEquals("|", coreOperationUnion0.getSymbol());
      assertEquals(1, expressionArray0.length);
      
      CoreOperationNotEqual coreOperationNotEqual0 = new CoreOperationNotEqual(coreOperationUnion0, coreOperationUnion0);
      assertNotNull(coreOperationNotEqual0);
      assertEquals("|", coreOperationUnion0.getSymbol());
      assertEquals("!=", coreOperationNotEqual0.getSymbol());
      assertEquals(1, expressionArray0.length);
      
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual(coreOperationNotEqual0, coreOperationUnion0);
      assertNotNull(coreOperationLessThanOrEqual0);
      assertEquals("|", coreOperationUnion0.getSymbol());
      assertEquals("!=", coreOperationNotEqual0.getSymbol());
      assertEquals("<=", coreOperationLessThanOrEqual0.getSymbol());
      assertEquals(1, expressionArray0.length);
      
      CoreOperationSubtract coreOperationSubtract0 = new CoreOperationSubtract(coreOperationLessThanOrEqual0, coreOperationUnion0);
      assertNotNull(coreOperationSubtract0);
      assertEquals("|", coreOperationUnion0.getSymbol());
      assertEquals("!=", coreOperationNotEqual0.getSymbol());
      assertEquals("<=", coreOperationLessThanOrEqual0.getSymbol());
      assertEquals("-", coreOperationSubtract0.getSymbol());
      assertEquals(1, expressionArray0.length);
      
      expressionArray0[0] = (Expression) coreOperationSubtract0;
      CoreFunction coreFunction0 = new CoreFunction(30, expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(30, coreFunction0.getFunctionCode());
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals(1, expressionArray0.length);
      
      Step[] stepArray0 = new Step[8];
      Step step0 = new Step(30, (NodeTest) null, expressionArray0);
      assertNotNull(step0);
      assertEquals(30, step0.getAxis());
      assertEquals(1, expressionArray0.length);
      
      stepArray0[0] = step0;
      Step step1 = new Step(30, (NodeTest) null, expressionArray0);
      assertFalse(step1.equals((Object)step0));
      assertNotNull(step1);
      assertEquals(30, step1.getAxis());
      assertEquals(1, expressionArray0.length);
      
      stepArray0[1] = step1;
      Step step2 = new Step(30, (NodeTest) null, expressionArray0);
      assertFalse(step2.equals((Object)step1));
      assertFalse(step2.equals((Object)step0));
      assertNotNull(step2);
      assertEquals(30, step2.getAxis());
      assertEquals(1, expressionArray0.length);
      
      stepArray0[2] = step2;
      Step step3 = new Step(30, (NodeTest) null, expressionArray0);
      assertFalse(step3.equals((Object)step1));
      assertFalse(step3.equals((Object)step0));
      assertFalse(step3.equals((Object)step2));
      assertNotNull(step3);
      assertEquals(30, step3.getAxis());
      assertEquals(1, expressionArray0.length);
      
      stepArray0[3] = step3;
      Step step4 = new Step(48, (NodeTest) null, expressionArray0);
      assertFalse(step4.equals((Object)step2));
      assertFalse(step4.equals((Object)step1));
      assertFalse(step4.equals((Object)step3));
      assertFalse(step4.equals((Object)step0));
      assertNotNull(step4);
      assertEquals(48, step4.getAxis());
      assertEquals(1, expressionArray0.length);
      
      stepArray0[4] = step4;
      Step step5 = new Step((-1114), (NodeTest) null, expressionArray0);
      assertFalse(step5.equals((Object)step2));
      assertFalse(step5.equals((Object)step3));
      assertFalse(step5.equals((Object)step4));
      assertFalse(step5.equals((Object)step0));
      assertFalse(step5.equals((Object)step1));
      assertNotNull(step5);
      assertEquals((-1114), step5.getAxis());
      assertEquals(1, expressionArray0.length);
      
      stepArray0[5] = step5;
      Step step6 = new Step(48, (NodeTest) null, expressionArray0);
      assertFalse(step6.equals((Object)step5));
      assertFalse(step6.equals((Object)step2));
      assertFalse(step6.equals((Object)step3));
      assertFalse(step6.equals((Object)step0));
      assertFalse(step6.equals((Object)step4));
      assertFalse(step6.equals((Object)step1));
      assertNotNull(step6);
      assertEquals(48, step6.getAxis());
      assertEquals(1, expressionArray0.length);
      
      stepArray0[6] = step6;
      Step step7 = new Step(0, (NodeTest) null, expressionArray0);
      assertFalse(step7.equals((Object)step0));
      assertFalse(step7.equals((Object)step6));
      assertFalse(step7.equals((Object)step1));
      assertFalse(step7.equals((Object)step2));
      assertFalse(step7.equals((Object)step4));
      assertFalse(step7.equals((Object)step5));
      assertFalse(step7.equals((Object)step3));
      assertNotNull(step7);
      assertEquals(0, step7.getAxis());
      assertEquals(1, expressionArray0.length);
      
      stepArray0[7] = step7;
      ExpressionPath expressionPath0 = new ExpressionPath(coreOperationLessThanOrEqual0, expressionArray0, stepArray0);
      assertNotNull(expressionPath0);
      assertEquals("|", coreOperationUnion0.getSymbol());
      assertEquals("!=", coreOperationNotEqual0.getSymbol());
      assertEquals("<=", coreOperationLessThanOrEqual0.getSymbol());
      assertEquals(1, expressionArray0.length);
      assertEquals(8, stepArray0.length);
      
      EvalContext evalContext0 = expressionPath0.evalSteps((EvalContext) null);
      assertNotNull(evalContext0);
      assertEquals("|", coreOperationUnion0.getSymbol());
      assertEquals("!=", coreOperationNotEqual0.getSymbol());
      assertEquals("<=", coreOperationLessThanOrEqual0.getSymbol());
      assertFalse(evalContext0.isChildOrderingRequired());
      assertEquals(0, evalContext0.getPosition());
      assertEquals(0, evalContext0.getDocumentOrder());
      assertEquals(1, expressionArray0.length);
      assertEquals(8, stepArray0.length);
      
      // Undeclared exception!
//      try { 
        coreFunction0.functionNamespaceURI(evalContext0);
//        fail("Expecting exception: StackOverflowError");
      
//      } catch(StackOverflowError e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(0, (Expression[]) null);
      assertNotNull(coreFunction0);
      assertEquals(0, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl)JXPathContext.newContext((Object) coreFunction0);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertNotNull(jXPathContextReferenceImpl0);
      assertEquals(0, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      
      InitialContext initialContext0 = (InitialContext)jXPathContextReferenceImpl0.getAbsoluteRootContext();
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertNotNull(initialContext0);
      assertEquals(0, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertEquals(0, initialContext0.getDocumentOrder());
      assertEquals(0, initialContext0.getPosition());
      assertFalse(initialContext0.isChildOrderingRequired());
      
      Object object0 = coreFunction0.computeValue(initialContext0);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertNull(object0);
      assertEquals(0, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertEquals(0, initialContext0.getDocumentOrder());
      assertEquals(0, initialContext0.getPosition());
      assertFalse(initialContext0.isChildOrderingRequired());
      
      String string0 = (String)coreFunction0.functionLocalName(initialContext0);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals("root", string0);
      assertNotNull(string0);
      assertEquals(0, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertEquals(0, initialContext0.getDocumentOrder());
      assertEquals(0, initialContext0.getPosition());
      assertFalse(initialContext0.isChildOrderingRequired());
      
      QName qName0 = new QName("");
      assertNotNull(qName0);
      assertNull(qName0.getPrefix());
      assertEquals("", qName0.getName());
      assertEquals("", qName0.toString());
      
      String string1 = (String)coreFunction0.functionNamespaceURI(initialContext0);
      assertFalse(string1.equals((Object)string0));
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals("", string1);
      assertNotNull(string1);
      assertEquals(0, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertEquals(0, initialContext0.getDocumentOrder());
      assertEquals(0, initialContext0.getPosition());
      assertFalse(initialContext0.isChildOrderingRequired());
      
      BeanPointer beanPointer0 = (BeanPointer)initialContext0.next();
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(beanPointer0);
      assertEquals(0, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertEquals(0, initialContext0.getDocumentOrder());
      assertEquals(1, initialContext0.getPosition());
      assertFalse(initialContext0.isChildOrderingRequired());
      assertTrue(beanPointer0.isNode());
      assertNull(beanPointer0.getNamespaceURI());
      assertEquals(1, beanPointer0.getLength());
      assertEquals(0, beanPointer0.getIndex());
      assertFalse(beanPointer0.isAttribute());
      assertTrue(beanPointer0.isRoot());
      assertFalse(beanPointer0.isContainer());
      assertFalse(beanPointer0.isCollection());
      assertFalse(beanPointer0.isDynamicPropertyDeclarationSupported());
      
      Double double0 = (Double)coreFunction0.functionLast(initialContext0);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(1.0, (double)double0, 0.01);
      assertNotNull(double0);
      assertEquals(0, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertEquals(0, initialContext0.getDocumentOrder());
      assertEquals(1, initialContext0.getPosition());
      assertFalse(initialContext0.isChildOrderingRequired());
      
      // Undeclared exception!
//      try { 
        coreFunction0.getArg2();
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Float float0 = new Float(0.0F);
      assertEquals(0.0F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      Constant constant0 = new Constant(float0);
      assertNotNull(constant0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      
      Expression[] expressionArray0 = new Expression[1];
      expressionArray0[0] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction(1048576, expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(1048576, coreFunction0.getFunctionCode());
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals(1, expressionArray0.length);
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl)JXPathContext.newContext((Object) null);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertNotNull(jXPathContextReferenceImpl0);
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      
      Integer integer0 = new Integer(1048576);
      assertEquals(1048576, (int)integer0);
      assertNotNull(integer0);
      
      QName qName0 = new QName("w:", "node()");
      assertNotNull(qName0);
      assertEquals("node()", qName0.getName());
      assertEquals("w:", qName0.getPrefix());
      assertEquals("w::node()", qName0.toString());
      
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, "");
      assertNotNull(nodeNameTest0);
      assertEquals("node()", qName0.getName());
      assertEquals("w:", qName0.getPrefix());
      assertEquals("w::node()", qName0.toString());
      assertEquals("w::node()", nodeNameTest0.toString());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals("", nodeNameTest0.getNamespaceURI());
      
      SelfContext selfContext0 = new SelfContext((EvalContext) null, nodeNameTest0);
      assertNotNull(selfContext0);
      assertEquals("node()", qName0.getName());
      assertEquals("w:", qName0.getPrefix());
      assertEquals("w::node()", qName0.toString());
      assertEquals("w::node()", nodeNameTest0.toString());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals("", nodeNameTest0.getNamespaceURI());
      assertEquals(0, selfContext0.getDocumentOrder());
      assertEquals(0, selfContext0.getPosition());
      assertFalse(selfContext0.isChildOrderingRequired());
      
      AttributeContext attributeContext0 = new AttributeContext(selfContext0, nodeNameTest0);
      assertNotNull(attributeContext0);
      assertEquals("node()", qName0.getName());
      assertEquals("w:", qName0.getPrefix());
      assertEquals("w::node()", qName0.toString());
      assertEquals("w::node()", nodeNameTest0.toString());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals("", nodeNameTest0.getNamespaceURI());
      assertEquals(0, selfContext0.getDocumentOrder());
      assertEquals(0, selfContext0.getPosition());
      assertFalse(selfContext0.isChildOrderingRequired());
      assertFalse(attributeContext0.isChildOrderingRequired());
      assertEquals(0, attributeContext0.getDocumentOrder());
      assertEquals(0, attributeContext0.getPosition());
      
      NodePointer nodePointer0 = attributeContext0.getCurrentNodePointer();
      assertNull(nodePointer0);
      assertEquals("node()", qName0.getName());
      assertEquals("w:", qName0.getPrefix());
      assertEquals("w::node()", qName0.toString());
      assertEquals("w::node()", nodeNameTest0.toString());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals("", nodeNameTest0.getNamespaceURI());
      assertEquals(0, selfContext0.getDocumentOrder());
      assertEquals(0, selfContext0.getPosition());
      assertFalse(selfContext0.isChildOrderingRequired());
      assertFalse(attributeContext0.isChildOrderingRequired());
      assertEquals(0, attributeContext0.getDocumentOrder());
      assertEquals(0, attributeContext0.getPosition());
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl1 = new JXPathContextReferenceImpl(jXPathContextReferenceImpl0, integer0, (Pointer) null);
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl0));
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertNotNull(jXPathContextReferenceImpl1);
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertFalse(jXPathContextReferenceImpl1.isLenient());
      
      InitialContext initialContext0 = (InitialContext)jXPathContextReferenceImpl1.getAbsoluteRootContext();
      assertFalse(jXPathContextReferenceImpl0.equals((Object)jXPathContextReferenceImpl1));
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl0));
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertNotNull(initialContext0);
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertFalse(jXPathContextReferenceImpl1.isLenient());
      assertEquals(0, initialContext0.getDocumentOrder());
      assertFalse(initialContext0.isChildOrderingRequired());
      assertEquals(0, initialContext0.getPosition());
      assertNotSame(jXPathContextReferenceImpl0, jXPathContextReferenceImpl1);
      assertNotSame(jXPathContextReferenceImpl1, jXPathContextReferenceImpl0);
      
      Boolean boolean0 = (Boolean)coreFunction0.functionNot(initialContext0);
      assertFalse(jXPathContextReferenceImpl0.equals((Object)jXPathContextReferenceImpl1));
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl0));
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertTrue(boolean0);
      assertNotNull(boolean0);
      assertEquals(1048576, coreFunction0.getFunctionCode());
      assertEquals(1, coreFunction0.getArgumentCount());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertFalse(jXPathContextReferenceImpl1.isLenient());
      assertEquals(0, initialContext0.getDocumentOrder());
      assertFalse(initialContext0.isChildOrderingRequired());
      assertEquals(0, initialContext0.getPosition());
      assertEquals(1, expressionArray0.length);
      assertNotSame(jXPathContextReferenceImpl0, jXPathContextReferenceImpl1);
      assertNotSame(jXPathContextReferenceImpl1, jXPathContextReferenceImpl0);
      
      InitialContext initialContext1 = (InitialContext)jXPathContextReferenceImpl1.getAbsoluteRootContext();
      assertFalse(jXPathContextReferenceImpl0.equals((Object)jXPathContextReferenceImpl1));
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl0));
      assertFalse(initialContext1.equals((Object)initialContext0));
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertNotNull(initialContext1);
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertFalse(jXPathContextReferenceImpl1.isLenient());
      assertFalse(initialContext1.isChildOrderingRequired());
      assertEquals(0, initialContext1.getDocumentOrder());
      assertEquals(0, initialContext1.getPosition());
      assertNotSame(jXPathContextReferenceImpl0, jXPathContextReferenceImpl1);
      assertNotSame(jXPathContextReferenceImpl1, jXPathContextReferenceImpl0);
      assertNotSame(initialContext1, initialContext0);
      
      Double double0 = (Double)coreFunction0.functionCount(selfContext0);
      assertEquals(1.0, (double)double0, 0.01);
      assertNotNull(double0);
      assertEquals(1048576, coreFunction0.getFunctionCode());
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals("node()", qName0.getName());
      assertEquals("w:", qName0.getPrefix());
      assertEquals("w::node()", qName0.toString());
      assertEquals("w::node()", nodeNameTest0.toString());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals("", nodeNameTest0.getNamespaceURI());
      assertEquals(0, selfContext0.getDocumentOrder());
      assertEquals(0, selfContext0.getPosition());
      assertFalse(selfContext0.isChildOrderingRequired());
      assertEquals(1, expressionArray0.length);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(23, (Expression[]) null);
      assertNotNull(coreFunction0);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(23, coreFunction0.getFunctionCode());
      
      CoreFunction coreFunction1 = new CoreFunction(23, (Expression[]) null);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertNotNull(coreFunction1);
      assertEquals(0, coreFunction1.getArgumentCount());
      assertEquals(23, coreFunction1.getFunctionCode());
      
      boolean boolean0 = coreFunction1.isContextDependent();
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertTrue(boolean0);
      assertEquals(0, coreFunction1.getArgumentCount());
      assertEquals(23, coreFunction1.getFunctionCode());
      assertNotSame(coreFunction1, coreFunction0);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      CoreOperationUnion coreOperationUnion0 = new CoreOperationUnion(expressionArray0);
      assertNotNull(coreOperationUnion0);
      assertEquals("|", coreOperationUnion0.getSymbol());
      assertEquals(1, expressionArray0.length);
      
      CoreOperationGreaterThan coreOperationGreaterThan0 = new CoreOperationGreaterThan(coreOperationUnion0, coreOperationUnion0);
      assertNotNull(coreOperationGreaterThan0);
      assertEquals("|", coreOperationUnion0.getSymbol());
      assertEquals(">", coreOperationGreaterThan0.getSymbol());
      assertEquals(1, expressionArray0.length);
      
      CoreOperationMod coreOperationMod0 = new CoreOperationMod(coreOperationGreaterThan0, coreOperationGreaterThan0);
      assertNotNull(coreOperationMod0);
      assertEquals("|", coreOperationUnion0.getSymbol());
      assertEquals(">", coreOperationGreaterThan0.getSymbol());
      assertEquals("mod", coreOperationMod0.getSymbol());
      assertEquals(1, expressionArray0.length);
      
      CoreOperationMultiply coreOperationMultiply0 = new CoreOperationMultiply(coreOperationMod0, coreOperationUnion0);
      assertNotNull(coreOperationMultiply0);
      assertEquals("|", coreOperationUnion0.getSymbol());
      assertEquals(">", coreOperationGreaterThan0.getSymbol());
      assertEquals("mod", coreOperationMod0.getSymbol());
      assertEquals("*", coreOperationMultiply0.getSymbol());
      assertEquals(1, expressionArray0.length);
      
      expressionArray0[0] = (Expression) coreOperationMultiply0;
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      CoreFunction coreFunction0 = new CoreFunction(6, expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals(6, coreFunction0.getFunctionCode());
      assertEquals(1, expressionArray0.length);
      
      EvalContext evalContext0 = null;
      CoreFunction coreFunction1 = new CoreFunction(6, expressionArray0);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertNotNull(coreFunction1);
      assertEquals(1, coreFunction1.getArgumentCount());
      assertEquals(6, coreFunction1.getFunctionCode());
      assertEquals(1, expressionArray0.length);
      
      // Undeclared exception!
//      try { 
        coreFunction1.functionString((EvalContext) null);
//        fail("Expecting exception: StackOverflowError");
      
//      } catch(StackOverflowError e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      QName qName0 = new QName("");
      assertNotNull(qName0);
      assertNull(qName0.getPrefix());
      assertEquals("", qName0.getName());
      assertEquals("", qName0.toString());
      
      Expression[] expressionArray1 = new Expression[4];
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      
      Constant constant0 = new Constant("");
      assertNotNull(constant0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      
      expressionArray1[0] = (Expression) constant0;
      CoreOperationDivide coreOperationDivide0 = new CoreOperationDivide(constant0, expressionArray1[0]);
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertNotNull(coreOperationDivide0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertEquals("div", coreOperationDivide0.getSymbol());
      assertEquals(4, expressionArray1.length);
      
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual(coreOperationDivide0, expressionArray1[0]);
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertNotNull(coreOperationLessThanOrEqual0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertEquals("div", coreOperationDivide0.getSymbol());
      assertEquals("<=", coreOperationLessThanOrEqual0.getSymbol());
      assertEquals(4, expressionArray1.length);
      
      expressionArray1[1] = (Expression) coreOperationLessThanOrEqual0;
      Step[] stepArray0 = new Step[8];
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, "");
      assertNotNull(nodeNameTest0);
      assertNull(qName0.getPrefix());
      assertEquals("", qName0.getName());
      assertEquals("", qName0.toString());
      assertEquals("", nodeNameTest0.getNamespaceURI());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals("", nodeNameTest0.toString());
      
      Step step0 = new Step(8, nodeNameTest0, expressionArray0);
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertNotNull(step0);
      assertNull(qName0.getPrefix());
      assertEquals("", qName0.getName());
      assertEquals("", qName0.toString());
      assertEquals("", nodeNameTest0.getNamespaceURI());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals("", nodeNameTest0.toString());
      assertEquals(8, step0.getAxis());
      assertEquals(1, expressionArray0.length);
      
      stepArray0[0] = step0;
      Step step1 = new Step(8, nodeNameTest0, expressionArray1);
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertFalse(step1.equals((Object)step0));
      assertNotNull(step1);
      assertNull(qName0.getPrefix());
      assertEquals("", qName0.getName());
      assertEquals("", qName0.toString());
      assertEquals("", nodeNameTest0.getNamespaceURI());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals("", nodeNameTest0.toString());
      assertEquals(8, step1.getAxis());
      assertEquals(4, expressionArray1.length);
      
      stepArray0[1] = step1;
      Step step2 = new Step(1024, nodeNameTest0, expressionArray0);
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertFalse(step2.equals((Object)step1));
      assertFalse(step2.equals((Object)step0));
      assertNotNull(step2);
      assertNull(qName0.getPrefix());
      assertEquals("", qName0.getName());
      assertEquals("", qName0.toString());
      assertEquals("", nodeNameTest0.getNamespaceURI());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals("", nodeNameTest0.toString());
      assertEquals(1024, step2.getAxis());
      assertEquals(1, expressionArray0.length);
      
      stepArray0[2] = step2;
      QName qName1 = new QName("", "");
      assertFalse(qName1.equals((Object)qName0));
      assertNotNull(qName1);
      assertEquals("", qName1.getPrefix());
      assertEquals("", qName1.getName());
      assertEquals(":", qName1.toString());
      
      NodeNameTest nodeNameTest1 = new NodeNameTest(qName1);
      assertFalse(qName1.equals((Object)qName0));
      assertFalse(nodeNameTest1.equals((Object)nodeNameTest0));
      assertNotNull(nodeNameTest1);
      assertEquals("", qName1.getPrefix());
      assertEquals("", qName1.getName());
      assertEquals(":", qName1.toString());
      assertEquals(":", nodeNameTest1.toString());
      assertNull(nodeNameTest1.getNamespaceURI());
      assertFalse(nodeNameTest1.isWildcard());
      
      Step step3 = new Step(76, nodeNameTest1, expressionArray1);
      assertFalse(qName1.equals((Object)qName0));
      assertFalse(nodeNameTest1.equals((Object)nodeNameTest0));
      assertFalse(step3.equals((Object)step1));
      assertFalse(step3.equals((Object)step2));
      assertFalse(step3.equals((Object)step0));
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertNotNull(step3);
      assertEquals("", qName1.getPrefix());
      assertEquals("", qName1.getName());
      assertEquals(":", qName1.toString());
      assertEquals(":", nodeNameTest1.toString());
      assertNull(nodeNameTest1.getNamespaceURI());
      assertFalse(nodeNameTest1.isWildcard());
      assertEquals(76, step3.getAxis());
      assertEquals(4, expressionArray1.length);
      
      stepArray0[3] = step3;
      Step step4 = new Step((-1552), nodeNameTest1, expressionArray1);
      assertFalse(qName1.equals((Object)qName0));
      assertFalse(nodeNameTest1.equals((Object)nodeNameTest0));
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertFalse(step4.equals((Object)step0));
      assertFalse(step4.equals((Object)step2));
      assertFalse(step4.equals((Object)step3));
      assertFalse(step4.equals((Object)step1));
      assertNotNull(step4);
      assertEquals("", qName1.getPrefix());
      assertEquals("", qName1.getName());
      assertEquals(":", qName1.toString());
      assertEquals(":", nodeNameTest1.toString());
      assertNull(nodeNameTest1.getNamespaceURI());
      assertFalse(nodeNameTest1.isWildcard());
      assertEquals((-1552), step4.getAxis());
      assertEquals(4, expressionArray1.length);
      
      stepArray0[4] = step4;
      Step step5 = new Step(0, (NodeTest) null, expressionArray0);
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertFalse(step5.equals((Object)step3));
      assertFalse(step5.equals((Object)step0));
      assertFalse(step5.equals((Object)step1));
      assertFalse(step5.equals((Object)step2));
      assertFalse(step5.equals((Object)step4));
      assertNotNull(step5);
      assertEquals(0, step5.getAxis());
      assertEquals(1, expressionArray0.length);
      
      stepArray0[5] = step5;
      Step step6 = new Step(0, nodeNameTest0, expressionArray0);
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertFalse(qName0.equals((Object)qName1));
      assertFalse(step6.equals((Object)step2));
      assertFalse(step6.equals((Object)step4));
      assertFalse(step6.equals((Object)step5));
      assertFalse(step6.equals((Object)step1));
      assertFalse(step6.equals((Object)step3));
      assertFalse(step6.equals((Object)step0));
      assertFalse(nodeNameTest0.equals((Object)nodeNameTest1));
      assertNotNull(step6);
      assertNull(qName0.getPrefix());
      assertEquals("", qName0.getName());
      assertEquals("", qName0.toString());
      assertEquals(0, step6.getAxis());
      assertEquals("", nodeNameTest0.getNamespaceURI());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals("", nodeNameTest0.toString());
      assertEquals(1, expressionArray0.length);
      
      stepArray0[6] = step6;
      Expression[] expressionArray2 = new Expression[0];
      assertFalse(expressionArray2.equals((Object)expressionArray0));
      assertFalse(expressionArray2.equals((Object)expressionArray1));
      
      Step step7 = new Step(0, nodeNameTest1, expressionArray2);
      assertFalse(qName1.equals((Object)qName0));
      assertFalse(nodeNameTest1.equals((Object)nodeNameTest0));
      assertFalse(expressionArray2.equals((Object)expressionArray0));
      assertFalse(expressionArray2.equals((Object)expressionArray1));
      assertFalse(step7.equals((Object)step3));
      assertFalse(step7.equals((Object)step0));
      assertFalse(step7.equals((Object)step4));
      assertFalse(step7.equals((Object)step6));
      assertFalse(step7.equals((Object)step2));
      assertFalse(step7.equals((Object)step1));
      assertFalse(step7.equals((Object)step5));
      assertNotNull(step7);
      assertEquals("", qName1.getPrefix());
      assertEquals("", qName1.getName());
      assertEquals(":", qName1.toString());
      assertEquals(":", nodeNameTest1.toString());
      assertNull(nodeNameTest1.getNamespaceURI());
      assertFalse(nodeNameTest1.isWildcard());
      assertEquals(0, step7.getAxis());
      assertEquals(0, expressionArray2.length);
      
      stepArray0[7] = step7;
      LocationPath locationPath0 = new LocationPath(false, stepArray0);
      assertNotNull(locationPath0);
      assertFalse(locationPath0.isAbsolute());
      assertEquals(8, stepArray0.length);
      
      expressionArray1[2] = (Expression) locationPath0;
      VariableReference variableReference0 = new VariableReference(qName0);
      assertFalse(qName0.equals((Object)qName1));
      assertNotNull(variableReference0);
      assertNull(qName0.getPrefix());
      assertEquals("", qName0.getName());
      assertEquals("", qName0.toString());
      assertFalse(variableReference0.isContextDependent());
      assertFalse(variableReference0.computeContextDependent());
      
      expressionArray1[3] = (Expression) variableReference0;
      ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, expressionArray1);
      assertFalse(qName0.equals((Object)qName1));
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertFalse(expressionArray1.equals((Object)expressionArray2));
      assertNotNull(extensionFunction0);
      assertTrue(extensionFunction0.computeContextDependent());
      assertNull(qName0.getPrefix());
      assertEquals("", qName0.getName());
      assertEquals("", qName0.toString());
      assertEquals(4, expressionArray1.length);
      
      expressionArray0[0] = (Expression) extensionFunction0;
      CoreFunction coreFunction0 = new CoreFunction(8, expressionArray0);
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertFalse(expressionArray0.equals((Object)expressionArray2));
      assertNotNull(coreFunction0);
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals(8, coreFunction0.getFunctionCode());
      assertEquals(1, expressionArray0.length);
      
      // Undeclared exception!
//      try { 
        coreFunction0.functionTranslate((EvalContext) null);
//        fail("Expecting exception: StackOverflowError");
      
//      } catch(StackOverflowError e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(30, expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(30, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(0, expressionArray0.length);
      
      boolean boolean0 = coreFunction0.isContextDependent();
      assertFalse(boolean0);
      assertEquals(30, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(0, expressionArray0.length);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(19, (Expression[]) null);
      assertNotNull(coreFunction0);
      assertEquals(19, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      
      // Undeclared exception!
//      try { 
        coreFunction0.compute((EvalContext) null);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // Incorrect number of arguments: not()
//         //
//         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(11, expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(11, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(0, expressionArray0.length);
      
      String string0 = coreFunction0.toString();
      assertEquals("contains()", string0);
      assertNotNull(string0);
      assertEquals(11, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(0, expressionArray0.length);
      
      boolean boolean0 = coreFunction0.computeContextDependent();
      assertFalse(boolean0);
      assertEquals(11, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(0, expressionArray0.length);
      
      Expression[] expressionArray1 = new Expression[1];
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      
      boolean boolean1 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      expressionArray1[0] = (Expression) coreFunction0;
      CoreFunction coreFunction1 = new CoreFunction(17, expressionArray1);
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertNotNull(coreFunction1);
      assertEquals(17, coreFunction1.getFunctionCode());
      assertEquals(1, coreFunction1.getArgumentCount());
      assertEquals(1, expressionArray1.length);
      
      EvalContext evalContext0 = null;
      // Undeclared exception!
//      try { 
        coreFunction1.functionStringLength((EvalContext) null);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // Incorrect number of arguments: contains()
//         //
//         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(25, (Expression[]) null);
      assertNotNull(coreFunction0);
      assertEquals(25, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      
      boolean boolean0 = coreFunction0.computeContextDependent();
      assertFalse(boolean0);
      assertEquals(25, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[2];
      Float float0 = new Float((-1.0F));
      assertEquals((-1.0F), (float)float0, 0.01F);
      assertNotNull(float0);
      
      Constant constant0 = new Constant(float0);
      assertNotNull(constant0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      
      expressionArray0[0] = (Expression) constant0;
      CoreOperationAnd coreOperationAnd0 = new CoreOperationAnd(expressionArray0);
      assertNotNull(coreOperationAnd0);
      assertEquals("and", coreOperationAnd0.getSymbol());
      assertEquals(2, expressionArray0.length);
      
      expressionArray0[1] = (Expression) coreOperationAnd0;
      CoreFunction coreFunction0 = new CoreFunction(3057, expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(2, coreFunction0.getArgumentCount());
      assertEquals(3057, coreFunction0.getFunctionCode());
      assertEquals(2, expressionArray0.length);
      
      // Undeclared exception!
      coreFunction0.functionSubstringAfter((EvalContext) null);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(29, (Expression[]) null);
      assertNotNull(coreFunction0);
      assertEquals(29, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      
      // Undeclared exception!
//      try { 
        coreFunction0.computeValue((EvalContext) null);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // Incorrect number of arguments: key()
//         //
//         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      assertFalse(boolean0);
      
      Expression[] expressionArray0 = new Expression[1];
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd(expressionArray0);
      assertNotNull(coreOperationAdd0);
      assertEquals("+", coreOperationAdd0.getSymbol());
      assertEquals(1, expressionArray0.length);
      
      expressionArray0[0] = (Expression) coreOperationAdd0;
      CoreFunction coreFunction0 = new CoreFunction(33, expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(33, coreFunction0.getFunctionCode());
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals(1, expressionArray0.length);
      
      // Undeclared exception!
      coreFunction0.functionStringLength((EvalContext) null);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[4];
      CoreFunction coreFunction0 = new CoreFunction(3033, expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(4, coreFunction0.getArgumentCount());
      assertEquals(3033, coreFunction0.getFunctionCode());
      assertEquals(4, expressionArray0.length);
      
      CoreOperationDivide coreOperationDivide0 = new CoreOperationDivide(coreFunction0, coreFunction0);
      assertNotNull(coreOperationDivide0);
      assertEquals(4, coreFunction0.getArgumentCount());
      assertEquals(3033, coreFunction0.getFunctionCode());
      assertEquals("div", coreOperationDivide0.getSymbol());
      assertEquals(4, expressionArray0.length);
      
      expressionArray0[0] = (Expression) coreOperationDivide0;
      CoreOperationMultiply coreOperationMultiply0 = new CoreOperationMultiply(coreOperationDivide0, coreFunction0);
      assertNotNull(coreOperationMultiply0);
      assertEquals(4, coreFunction0.getArgumentCount());
      assertEquals(3033, coreFunction0.getFunctionCode());
      assertEquals("div", coreOperationDivide0.getSymbol());
      assertEquals("*", coreOperationMultiply0.getSymbol());
      assertEquals(4, expressionArray0.length);
      
      expressionArray0[1] = (Expression) coreOperationMultiply0;
      Expression[] expressionArray1 = new Expression[4];
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      
      CoreOperationSubtract coreOperationSubtract0 = new CoreOperationSubtract(coreOperationMultiply0, expressionArray0[0]);
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertNotNull(coreOperationSubtract0);
      assertEquals(4, coreFunction0.getArgumentCount());
      assertEquals(3033, coreFunction0.getFunctionCode());
      assertEquals("div", coreOperationDivide0.getSymbol());
      assertEquals("*", coreOperationMultiply0.getSymbol());
      assertEquals("-", coreOperationSubtract0.getSymbol());
      assertEquals(4, expressionArray0.length);
      
      expressionArray1[0] = (Expression) coreOperationSubtract0;
      expressionArray1[1] = (Expression) coreOperationMultiply0;
      CoreFunction coreFunction1 = new CoreFunction(29, expressionArray1);
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertNotNull(coreFunction1);
      assertEquals(29, coreFunction1.getFunctionCode());
      assertEquals(4, coreFunction1.getArgumentCount());
      assertEquals(4, expressionArray1.length);
      
      expressionArray1[2] = (Expression) coreFunction1;
      expressionArray1[3] = (Expression) coreFunction0;
      coreOperationMultiply0.args = expressionArray1;
      assertEquals(4, coreFunction0.getArgumentCount());
      assertEquals(3033, coreFunction0.getFunctionCode());
      assertEquals("div", coreOperationDivide0.getSymbol());
      assertEquals("*", coreOperationMultiply0.getSymbol());
      
      CoreOperationAnd coreOperationAnd0 = new CoreOperationAnd(expressionArray0);
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertNotNull(coreOperationAnd0);
      assertEquals("and", coreOperationAnd0.getSymbol());
      assertEquals(4, expressionArray0.length);
      
      expressionArray0[2] = (Expression) coreOperationAnd0;
      expressionArray0[3] = (Expression) coreOperationMultiply0;
      EvalContext evalContext0 = null;
      // Undeclared exception!
//      try { 
        coreFunction0.functionConcat((EvalContext) null);
//        fail("Expecting exception: StackOverflowError");
      
//      } catch(StackOverflowError e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-69);
      byteArray0[1] = (byte)114;
      byteArray0[2] = (byte)7;
      byteArray0[3] = (byte) (-3);
      byteArray0[4] = (byte) (-93);
      byteArray0[5] = (byte) (-112);
      byteArray0[6] = (byte) (-61);
      byteArray0[7] = (byte)0;
      byteArray0[8] = (byte)53;
      boolean boolean0 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-69), (byte)114, (byte)7, (byte) (-3), (byte) (-93), (byte) (-112), (byte) (-61), (byte)0, (byte)53}, byteArray0);
      assertFalse(boolean0);
      assertEquals(9, byteArray0.length);
      
      boolean boolean1 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      boolean boolean2 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "v:\"bT3R$+#f");
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2);
      
      Expression[] expressionArray0 = new Expression[9];
      Constant constant0 = new Constant("v:\"bT3R$+#f");
      assertNotNull(constant0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      
      expressionArray0[0] = (Expression) constant0;
      Constant constant1 = new Constant("v:\"bT3R$+#f");
      assertFalse(constant1.equals((Object)constant0));
      assertNotNull(constant1);
      assertFalse(constant1.computeContextDependent());
      assertFalse(constant1.isContextDependent());
      
      expressionArray0[1] = (Expression) constant1;
      Step[] stepArray0 = new Step[2];
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("=");
      assertNotNull(processingInstructionTest0);
      assertEquals("=", processingInstructionTest0.getTarget());
      
      Step step0 = new Step((byte) (-93), processingInstructionTest0, expressionArray0);
      assertNotNull(step0);
      assertEquals("=", processingInstructionTest0.getTarget());
      assertEquals((-93), step0.getAxis());
      assertEquals(9, expressionArray0.length);
      
      stepArray0[0] = step0;
      Step step1 = new Step((-1705), processingInstructionTest0, expressionArray0);
      assertFalse(step1.equals((Object)step0));
      assertNotNull(step1);
      assertEquals("=", processingInstructionTest0.getTarget());
      assertEquals((-1705), step1.getAxis());
      assertEquals(9, expressionArray0.length);
      
      stepArray0[1] = step1;
      LocationPath locationPath0 = new LocationPath(false, stepArray0);
      assertNotNull(locationPath0);
      assertFalse(locationPath0.isAbsolute());
      assertEquals(2, stepArray0.length);
      
      expressionArray0[2] = (Expression) locationPath0;
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual(constant0, expressionArray0[2]);
      assertFalse(constant0.equals((Object)constant1));
      assertNotNull(coreOperationLessThanOrEqual0);
      assertEquals("<=", coreOperationLessThanOrEqual0.getSymbol());
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertEquals(9, expressionArray0.length);
      
      expressionArray0[3] = (Expression) coreOperationLessThanOrEqual0;
      CoreOperationEqual coreOperationEqual0 = new CoreOperationEqual(coreOperationLessThanOrEqual0, expressionArray0[3]);
      assertFalse(constant0.equals((Object)constant1));
      assertNotNull(coreOperationEqual0);
      assertEquals("<=", coreOperationLessThanOrEqual0.getSymbol());
      assertEquals("=", coreOperationEqual0.getSymbol());
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertEquals(9, expressionArray0.length);
      
      expressionArray0[4] = (Expression) coreOperationEqual0;
      QName qName0 = new QName("=", "v:\"bT3R$+#f");
      assertNotNull(qName0);
      assertEquals("v:\"bT3R$+#f", qName0.getName());
      assertEquals("=", qName0.getPrefix());
      assertEquals("=:v:\"bT3R$+#f", qName0.toString());
      
      ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, expressionArray0);
      assertNotNull(extensionFunction0);
      assertEquals("v:\"bT3R$+#f", qName0.getName());
      assertEquals("=", qName0.getPrefix());
      assertEquals("=:v:\"bT3R$+#f", qName0.toString());
      assertTrue(extensionFunction0.computeContextDependent());
      assertEquals(9, expressionArray0.length);
      
      expressionArray0[5] = (Expression) extensionFunction0;
      ExtensionFunction extensionFunction1 = new ExtensionFunction(qName0, expressionArray0);
      assertFalse(extensionFunction1.equals((Object)extensionFunction0));
      assertNotNull(extensionFunction1);
      assertTrue(extensionFunction1.computeContextDependent());
      assertEquals("v:\"bT3R$+#f", qName0.getName());
      assertEquals("=", qName0.getPrefix());
      assertEquals("=:v:\"bT3R$+#f", qName0.toString());
      assertEquals(9, expressionArray0.length);
      
      expressionArray0[6] = (Expression) extensionFunction1;
      CoreOperationEqual coreOperationEqual1 = new CoreOperationEqual(expressionArray0[3], expressionArray0[3]);
      assertFalse(coreOperationEqual1.equals((Object)coreOperationEqual0));
      assertNotNull(coreOperationEqual1);
      assertEquals("=", coreOperationEqual1.getSymbol());
      assertEquals(9, expressionArray0.length);
      
      expressionArray0[7] = (Expression) coreOperationEqual1;
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual1 = new CoreOperationLessThanOrEqual(coreOperationEqual1, coreOperationEqual0);
      assertFalse(coreOperationEqual1.equals((Object)coreOperationEqual0));
      assertFalse(coreOperationLessThanOrEqual1.equals((Object)coreOperationLessThanOrEqual0));
      assertFalse(coreOperationEqual0.equals((Object)coreOperationEqual1));
      assertFalse(constant0.equals((Object)constant1));
      assertNotNull(coreOperationLessThanOrEqual1);
      assertEquals("=", coreOperationEqual1.getSymbol());
      assertEquals("<=", coreOperationLessThanOrEqual1.getSymbol());
      assertEquals("<=", coreOperationLessThanOrEqual0.getSymbol());
      assertEquals("=", coreOperationEqual0.getSymbol());
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertEquals(9, expressionArray0.length);
      
      expressionArray0[8] = (Expression) coreOperationLessThanOrEqual1;
      CoreFunction coreFunction0 = new CoreFunction(512, expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(512, coreFunction0.getFunctionCode());
      assertEquals(9, coreFunction0.getArgumentCount());
      assertEquals(9, expressionArray0.length);
      
      // Undeclared exception!
      coreFunction0.functionStartsWith((EvalContext) null);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[7];
      CoreOperationOr coreOperationOr0 = new CoreOperationOr(expressionArray0);
      assertNotNull(coreOperationOr0);
      assertEquals("or", coreOperationOr0.getSymbol());
      assertEquals(7, expressionArray0.length);
      
      Step[] stepArray0 = new Step[3];
      QName qName0 = new QName("");
      assertNotNull(qName0);
      assertNull(qName0.getPrefix());
      assertEquals("", qName0.getName());
      assertEquals("", qName0.toString());
      
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
      assertNotNull(nodeNameTest0);
      assertNull(qName0.getPrefix());
      assertEquals("", qName0.getName());
      assertEquals("", qName0.toString());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals("", nodeNameTest0.toString());
      
      Step step0 = new Step(40, nodeNameTest0, expressionArray0);
      assertNotNull(step0);
      assertNull(qName0.getPrefix());
      assertEquals("", qName0.getName());
      assertEquals("", qName0.toString());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals("", nodeNameTest0.toString());
      assertEquals(40, step0.getAxis());
      assertEquals(7, expressionArray0.length);
      
      stepArray0[0] = step0;
      Step step1 = new Step(40, nodeNameTest0, expressionArray0);
      assertFalse(step1.equals((Object)step0));
      assertNotNull(step1);
      assertNull(qName0.getPrefix());
      assertEquals("", qName0.getName());
      assertEquals("", qName0.toString());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals("", nodeNameTest0.toString());
      assertEquals(40, step1.getAxis());
      assertEquals(7, expressionArray0.length);
      
      stepArray0[1] = step1;
      Step step2 = new Step(40, nodeNameTest0, (Expression[]) null);
      assertFalse(step2.equals((Object)step1));
      assertFalse(step2.equals((Object)step0));
      assertNotNull(step2);
      assertNull(qName0.getPrefix());
      assertEquals("", qName0.getName());
      assertEquals("", qName0.toString());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals("", nodeNameTest0.toString());
      assertEquals(40, step2.getAxis());
      
      stepArray0[2] = step2;
      ExpressionPath expressionPath0 = new ExpressionPath(coreOperationOr0, expressionArray0, stepArray0);
      assertNotNull(expressionPath0);
      assertEquals("or", coreOperationOr0.getSymbol());
      assertEquals(7, expressionArray0.length);
      assertEquals(3, stepArray0.length);
      
      expressionArray0[0] = (Expression) expressionPath0;
      VariableReference variableReference0 = new VariableReference(qName0);
      assertNotNull(variableReference0);
      assertNull(qName0.getPrefix());
      assertEquals("", qName0.getName());
      assertEquals("", qName0.toString());
      assertFalse(variableReference0.computeContextDependent());
      assertFalse(variableReference0.isContextDependent());
      
      expressionArray0[1] = (Expression) variableReference0;
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual(expressionArray0[0], expressionArray0[1]);
      assertNotNull(coreOperationLessThanOrEqual0);
      assertEquals("<=", coreOperationLessThanOrEqual0.getSymbol());
      assertEquals(7, expressionArray0.length);
      
      expressionArray0[2] = (Expression) coreOperationLessThanOrEqual0;
      NameAttributeTest nameAttributeTest0 = new NameAttributeTest(coreOperationOr0, expressionPath0);
      assertNotNull(nameAttributeTest0);
      assertEquals("=", nameAttributeTest0.getSymbol());
      assertTrue(nameAttributeTest0.computeContextDependent());
      assertEquals("or", coreOperationOr0.getSymbol());
      assertEquals(7, expressionArray0.length);
      assertEquals(3, stepArray0.length);
      
      expressionArray0[3] = (Expression) nameAttributeTest0;
      CoreOperationNegate coreOperationNegate0 = new CoreOperationNegate(expressionArray0[1]);
      assertNotNull(coreOperationNegate0);
      assertEquals("-", coreOperationNegate0.getSymbol());
      assertEquals(7, expressionArray0.length);
      
      expressionArray0[4] = (Expression) coreOperationNegate0;
      CoreOperationSubtract coreOperationSubtract0 = new CoreOperationSubtract(expressionArray0[0], expressionPath0);
      assertNotNull(coreOperationSubtract0);
      assertEquals("or", coreOperationOr0.getSymbol());
      assertEquals("-", coreOperationSubtract0.getSymbol());
      assertEquals(7, expressionArray0.length);
      assertEquals(3, stepArray0.length);
      
      expressionArray0[5] = (Expression) coreOperationSubtract0;
      ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, (Expression[]) null);
      assertNotNull(extensionFunction0);
      assertNull(qName0.getPrefix());
      assertEquals("", qName0.getName());
      assertEquals("", qName0.toString());
      assertTrue(extensionFunction0.computeContextDependent());
      
      expressionArray0[6] = (Expression) extensionFunction0;
      CoreFunction coreFunction0 = new CoreFunction(40, expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(7, coreFunction0.getArgumentCount());
      assertEquals(40, coreFunction0.getFunctionCode());
      assertEquals(7, expressionArray0.length);
      
      // Undeclared exception!
      coreFunction0.functionLocalName((EvalContext) null);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Double double0 = Expression.ZERO;
      assertEquals(0.0, (double)double0, 0.01);
      assertNotNull(double0);
      
      Constant constant0 = new Constant(double0);
      assertNotNull(constant0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      
      CoreFunction coreFunction0 = new CoreFunction(22, (Expression[]) null);
      assertNotNull(coreFunction0);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(22, coreFunction0.getFunctionCode());
      
      EvalContext[] evalContextArray0 = new EvalContext[2];
      evalContextArray0[0] = null;
      evalContextArray0[1] = null;
      UnionContext unionContext0 = new UnionContext((EvalContext) null, evalContextArray0);
      assertNotNull(unionContext0);
      assertEquals(1, unionContext0.getDocumentOrder());
      assertTrue(unionContext0.isChildOrderingRequired());
      assertEquals(0, unionContext0.getPosition());
      assertEquals(2, evalContextArray0.length);
      
      // Undeclared exception!
//      try { 
        coreFunction0.computeValue(evalContextArray0[1]);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // Incorrect number of arguments: lang()
//         //
//         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(19, (Expression[]) null);
      assertNotNull(coreFunction0);
      assertEquals(19, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      
      String string0 = coreFunction0.getFunctionName();
      assertEquals("not", string0);
      assertNotNull(string0);
      assertEquals(19, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      
      Constant constant0 = new Constant("@(#) $RCSfile: Element.java,v $ $Revision: 1.152 $ $Date: 2004/09/03 06:35:39 $ $Name: jdom_1_0 $");
      assertNotNull(constant0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      
      boolean boolean0 = coreFunction0.computeContextDependent();
      assertFalse(boolean0);
      assertEquals(19, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl)JXPathContext.newContext((JXPathContext) null, (Object) coreFunction0);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertNotNull(jXPathContextReferenceImpl0);
      assertEquals(19, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      
      BasicVariables basicVariables0 = new BasicVariables();
      assertNotNull(basicVariables0);
      
      QName qName0 = new QName("not");
      assertNotNull(qName0);
      assertEquals("not", qName0.getName());
      assertNull(qName0.getPrefix());
      assertEquals("not", qName0.toString());
      
      VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(variablePointer0);
      assertEquals("not", qName0.getName());
      assertNull(qName0.getPrefix());
      assertEquals("not", qName0.toString());
      assertTrue(variablePointer0.isContainer());
      assertFalse(variablePointer0.isNode());
      assertNull(variablePointer0.getNamespaceURI());
      assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
      assertTrue(variablePointer0.isRoot());
      assertTrue(variablePointer0.isActual());
      assertFalse(variablePointer0.isAttribute());
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl1 = null;
//      try {
        jXPathContextReferenceImpl1 = new JXPathContextReferenceImpl(jXPathContextReferenceImpl0, (Object) null, variablePointer0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // No such variable: 'not'
//         //
//         verifyException("org.apache.commons.jxpath.BasicVariables", e);
//      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(22, (Expression[]) null);
      assertNotNull(coreFunction0);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(22, coreFunction0.getFunctionCode());
      
      CoreFunction coreFunction1 = new CoreFunction(22, (Expression[]) null);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertNotNull(coreFunction1);
      assertEquals(0, coreFunction1.getArgumentCount());
      assertEquals(22, coreFunction1.getFunctionCode());
      
      CoreFunction coreFunction2 = new CoreFunction(24, (Expression[]) null);
      assertFalse(coreFunction2.equals((Object)coreFunction1));
      assertFalse(coreFunction2.equals((Object)coreFunction0));
      assertNotNull(coreFunction2);
      assertEquals(24, coreFunction2.getFunctionCode());
      assertEquals(0, coreFunction2.getArgumentCount());
      
      boolean boolean0 = coreFunction2.computeContextDependent();
      assertFalse(coreFunction2.equals((Object)coreFunction1));
      assertFalse(coreFunction2.equals((Object)coreFunction0));
      assertFalse(boolean0);
      assertEquals(24, coreFunction2.getFunctionCode());
      assertEquals(0, coreFunction2.getArgumentCount());
      assertNotSame(coreFunction2, coreFunction1);
      assertNotSame(coreFunction2, coreFunction0);
      
      String string0 = coreFunction0.toString();
      assertFalse(coreFunction0.equals((Object)coreFunction1));
      assertFalse(coreFunction0.equals((Object)coreFunction2));
      assertEquals("lang()", string0);
      assertNotNull(string0);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(22, coreFunction0.getFunctionCode());
      assertNotSame(coreFunction0, coreFunction1);
      assertNotSame(coreFunction0, coreFunction2);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)98;
      byteArray0[1] = (byte)1;
      byteArray0[2] = (byte)13;
      boolean boolean0 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertArrayEquals(new byte[] {(byte)98, (byte)1, (byte)13}, byteArray0);
      assertFalse(boolean0);
      assertEquals(3, byteArray0.length);
      
      boolean boolean1 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "T4W");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      Expression[] expressionArray0 = new Expression[9];
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd(expressionArray0);
      assertNotNull(coreOperationAdd0);
      assertEquals("+", coreOperationAdd0.getSymbol());
      assertEquals(9, expressionArray0.length);
      
      expressionArray0[0] = (Expression) coreOperationAdd0;
      CoreOperationNegate coreOperationNegate0 = new CoreOperationNegate(coreOperationAdd0);
      assertNotNull(coreOperationNegate0);
      assertEquals("+", coreOperationAdd0.getSymbol());
      assertEquals("-", coreOperationNegate0.getSymbol());
      assertEquals(9, expressionArray0.length);
      
      expressionArray0[1] = (Expression) coreOperationNegate0;
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual(expressionArray0[1], coreOperationNegate0);
      assertNotNull(coreOperationLessThanOrEqual0);
      assertEquals("+", coreOperationAdd0.getSymbol());
      assertEquals("-", coreOperationNegate0.getSymbol());
      assertEquals("<=", coreOperationLessThanOrEqual0.getSymbol());
      assertEquals(9, expressionArray0.length);
      
      expressionArray0[2] = (Expression) coreOperationLessThanOrEqual0;
      CoreOperationAnd coreOperationAnd0 = new CoreOperationAnd(expressionArray0);
      assertNotNull(coreOperationAnd0);
      assertEquals("and", coreOperationAnd0.getSymbol());
      assertEquals(9, expressionArray0.length);
      
      expressionArray0[3] = (Expression) coreOperationAnd0;
      Constant constant0 = new Constant((byte)13);
      assertNotNull(constant0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      
      CoreOperationGreaterThan coreOperationGreaterThan0 = new CoreOperationGreaterThan(coreOperationAdd0, constant0);
      assertNotNull(coreOperationGreaterThan0);
      assertEquals(">", coreOperationGreaterThan0.getSymbol());
      assertEquals("+", coreOperationAdd0.getSymbol());
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertEquals(9, expressionArray0.length);
      
      expressionArray0[4] = (Expression) coreOperationGreaterThan0;
      CoreOperationOr coreOperationOr0 = new CoreOperationOr(expressionArray0);
      assertNotNull(coreOperationOr0);
      assertEquals("or", coreOperationOr0.getSymbol());
      assertEquals(9, expressionArray0.length);
      
      expressionArray0[5] = (Expression) coreOperationOr0;
      Step[] stepArray0 = new Step[6];
      NodeNameTest nodeNameTest0 = new NodeNameTest((QName) null, "");
      assertNotNull(nodeNameTest0);
      assertEquals("", nodeNameTest0.getNamespaceURI());
      
      Expression[] expressionArray1 = new Expression[5];
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      
      expressionArray1[0] = (Expression) coreOperationAdd0;
      expressionArray1[1] = (Expression) constant0;
      expressionArray1[2] = (Expression) coreOperationAdd0;
      expressionArray1[3] = (Expression) coreOperationAnd0;
      expressionArray1[4] = (Expression) coreOperationGreaterThan0;
      Step step0 = new Step(67, nodeNameTest0, expressionArray1);
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertNotNull(step0);
      assertEquals("", nodeNameTest0.getNamespaceURI());
      assertEquals(67, step0.getAxis());
      assertEquals(5, expressionArray1.length);
      
      stepArray0[0] = step0;
      Step step1 = new Step((byte)1, nodeNameTest0, expressionArray0);
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertFalse(step1.equals((Object)step0));
      assertNotNull(step1);
      assertEquals("", nodeNameTest0.getNamespaceURI());
      assertEquals(1, step1.getAxis());
      assertEquals(9, expressionArray0.length);
      
      stepArray0[1] = step1;
      Step step2 = new Step(9, nodeNameTest0, expressionArray0);
      assertFalse(step2.equals((Object)step1));
      assertFalse(step2.equals((Object)step0));
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertNotNull(step2);
      assertEquals(9, step2.getAxis());
      assertEquals("", nodeNameTest0.getNamespaceURI());
      assertEquals(9, expressionArray0.length);
      
      stepArray0[2] = step2;
      NodeNameTest nodeNameTest1 = new NodeNameTest((QName) null, "self");
      assertFalse(nodeNameTest1.equals((Object)nodeNameTest0));
      assertNotNull(nodeNameTest1);
      assertEquals("self", nodeNameTest1.getNamespaceURI());
      
      Step step3 = new Step(3263, nodeNameTest1, expressionArray0);
      assertFalse(nodeNameTest1.equals((Object)nodeNameTest0));
      assertFalse(step3.equals((Object)step1));
      assertFalse(step3.equals((Object)step2));
      assertFalse(step3.equals((Object)step0));
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertNotNull(step3);
      assertEquals("self", nodeNameTest1.getNamespaceURI());
      assertEquals(3263, step3.getAxis());
      assertEquals(9, expressionArray0.length);
      
      stepArray0[3] = step3;
      Step step4 = new Step((byte)1, nodeNameTest1, expressionArray0);
      assertFalse(nodeNameTest1.equals((Object)nodeNameTest0));
      assertFalse(step4.equals((Object)step3));
      assertFalse(step4.equals((Object)step1));
      assertFalse(step4.equals((Object)step0));
      assertFalse(step4.equals((Object)step2));
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertNotNull(step4);
      assertEquals("self", nodeNameTest1.getNamespaceURI());
      assertEquals(1, step4.getAxis());
      assertEquals(9, expressionArray0.length);
      
      stepArray0[4] = step4;
      Step step5 = new Step(9, nodeNameTest1, expressionArray0);
      assertFalse(nodeNameTest1.equals((Object)nodeNameTest0));
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertFalse(step5.equals((Object)step3));
      assertFalse(step5.equals((Object)step0));
      assertFalse(step5.equals((Object)step4));
      assertFalse(step5.equals((Object)step1));
      assertFalse(step5.equals((Object)step2));
      assertNotNull(step5);
      assertEquals("self", nodeNameTest1.getNamespaceURI());
      assertEquals(9, step5.getAxis());
      assertEquals(9, expressionArray0.length);
      
      stepArray0[5] = step5;
      ExpressionPath expressionPath0 = new ExpressionPath(expressionArray0[4], expressionArray0, stepArray0);
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertNotNull(expressionPath0);
      assertEquals(6, stepArray0.length);
      assertEquals(9, expressionArray0.length);
      
      expressionArray0[6] = (Expression) expressionPath0;
      CoreOperationSubtract coreOperationSubtract0 = new CoreOperationSubtract(coreOperationAnd0, expressionArray0[0]);
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertNotNull(coreOperationSubtract0);
      assertEquals("-", coreOperationSubtract0.getSymbol());
      assertEquals("and", coreOperationAnd0.getSymbol());
      assertEquals(9, expressionArray0.length);
      
      expressionArray0[7] = (Expression) coreOperationSubtract0;
      CoreOperationOr coreOperationOr1 = new CoreOperationOr(expressionArray1);
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertFalse(coreOperationOr1.equals((Object)coreOperationOr0));
      assertNotNull(coreOperationOr1);
      assertEquals("or", coreOperationOr1.getSymbol());
      assertEquals(5, expressionArray1.length);
      
      expressionArray0[8] = (Expression) coreOperationOr1;
      CoreFunction coreFunction0 = new CoreFunction((byte)13, expressionArray0);
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertNotNull(coreFunction0);
      assertEquals(9, coreFunction0.getArgumentCount());
      assertEquals(13, coreFunction0.getFunctionCode());
      assertEquals(9, expressionArray0.length);
      
      // Undeclared exception!
      coreFunction0.functionTranslate((EvalContext) null);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      EvalContext evalContext0 = null;
      Float float0 = new Float((-1.0));
      assertEquals((-1.0F), (float)float0, 0.01F);
      assertNotNull(float0);
      
      Constant constant0 = new Constant((Number) null);
      assertNotNull(constant0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      
      Expression[] expressionArray0 = new Expression[8];
      QName qName0 = new QName((String) null, "af$#rX^lqErJIxm}=d");
      assertNotNull(qName0);
      assertEquals("af$#rX^lqErJIxm}=d", qName0.getName());
      assertNull(qName0.getPrefix());
      assertEquals("af$#rX^lqErJIxm}=d", qName0.toString());
      
      ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, expressionArray0);
      assertNotNull(extensionFunction0);
      assertEquals("af$#rX^lqErJIxm}=d", qName0.getName());
      assertNull(qName0.getPrefix());
      assertEquals("af$#rX^lqErJIxm}=d", qName0.toString());
      assertTrue(extensionFunction0.computeContextDependent());
      assertEquals(8, expressionArray0.length);
      
      expressionArray0[0] = (Expression) extensionFunction0;
      expressionArray0[1] = (Expression) constant0;
      expressionArray0[2] = (Expression) constant0;
      expressionArray0[3] = (Expression) constant0;
      expressionArray0[4] = (Expression) constant0;
      expressionArray0[5] = (Expression) constant0;
      expressionArray0[6] = (Expression) constant0;
      expressionArray0[7] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction(46, expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(8, coreFunction0.getArgumentCount());
      assertEquals(46, coreFunction0.getFunctionCode());
      assertEquals(8, expressionArray0.length);
      
      // Undeclared exception!
//      try { 
        coreFunction0.functionLocalName((EvalContext) null);
//        fail("Expecting exception: StackOverflowError");
      
//      } catch(StackOverflowError e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      EvalContext evalContext0 = null;
      Expression[] expressionArray0 = new Expression[1];
      Expression[] expressionArray1 = new Expression[4];
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      
      Step[] stepArray0 = new Step[1];
      QName qName0 = new QName("q&Hij$tVhgB5p", "q&Hij$tVhgB5p");
      assertNotNull(qName0);
      assertEquals("q&Hij$tVhgB5p", qName0.getName());
      assertEquals("q&Hij$tVhgB5p", qName0.getPrefix());
      assertEquals("q&Hij$tVhgB5p:q&Hij$tVhgB5p", qName0.toString());
      
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
      assertNotNull(nodeNameTest0);
      assertEquals("q&Hij$tVhgB5p", qName0.getName());
      assertEquals("q&Hij$tVhgB5p", qName0.getPrefix());
      assertEquals("q&Hij$tVhgB5p:q&Hij$tVhgB5p", qName0.toString());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals("q&Hij$tVhgB5p:q&Hij$tVhgB5p", nodeNameTest0.toString());
      
      Step step0 = new Step(27, nodeNameTest0, expressionArray1);
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertNotNull(step0);
      assertEquals("q&Hij$tVhgB5p", qName0.getName());
      assertEquals("q&Hij$tVhgB5p", qName0.getPrefix());
      assertEquals("q&Hij$tVhgB5p:q&Hij$tVhgB5p", qName0.toString());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals("q&Hij$tVhgB5p:q&Hij$tVhgB5p", nodeNameTest0.toString());
      assertEquals(27, step0.getAxis());
      assertEquals(4, expressionArray1.length);
      
      stepArray0[0] = step0;
      LocationPath locationPath0 = new LocationPath(false, stepArray0);
      assertNotNull(locationPath0);
      assertFalse(locationPath0.isAbsolute());
      assertEquals(1, stepArray0.length);
      
      expressionArray1[0] = (Expression) locationPath0;
      CoreOperationNotEqual coreOperationNotEqual0 = new CoreOperationNotEqual(locationPath0, expressionArray1[0]);
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertNotNull(coreOperationNotEqual0);
      assertFalse(locationPath0.isAbsolute());
      assertEquals("!=", coreOperationNotEqual0.getSymbol());
      assertEquals(4, expressionArray1.length);
      assertEquals(1, stepArray0.length);
      
      expressionArray1[1] = (Expression) coreOperationNotEqual0;
      LocationPath locationPath1 = new LocationPath(false, stepArray0);
      assertFalse(locationPath1.equals((Object)locationPath0));
      assertNotNull(locationPath1);
      assertFalse(locationPath1.isAbsolute());
      assertEquals(1, stepArray0.length);
      
      expressionArray1[2] = (Expression) locationPath1;
      CoreFunction coreFunction0 = new CoreFunction(27, expressionArray1);
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertNotNull(coreFunction0);
      assertEquals(4, coreFunction0.getArgumentCount());
      assertEquals(27, coreFunction0.getFunctionCode());
      assertEquals(4, expressionArray1.length);
      
      expressionArray1[3] = (Expression) coreFunction0;
      CoreOperationOr coreOperationOr0 = new CoreOperationOr(expressionArray1);
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertNotNull(coreOperationOr0);
      assertEquals("or", coreOperationOr0.getSymbol());
      assertEquals(4, expressionArray1.length);
      
      CoreOperationMultiply coreOperationMultiply0 = new CoreOperationMultiply(coreOperationOr0, expressionArray1[2]);
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertNotNull(coreOperationMultiply0);
      assertEquals("or", coreOperationOr0.getSymbol());
      assertEquals("*", coreOperationMultiply0.getSymbol());
      assertEquals(4, expressionArray1.length);
      
      expressionArray0[0] = (Expression) coreOperationMultiply0;
      CoreFunction coreFunction1 = new CoreFunction(27, expressionArray0);
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertNotNull(coreFunction1);
      assertEquals(1, coreFunction1.getArgumentCount());
      assertEquals(27, coreFunction1.getFunctionCode());
      assertEquals(1, expressionArray0.length);
      
      // Undeclared exception!
//      try { 
        coreFunction0.computeValue((EvalContext) null);
//        fail("Expecting exception: StackOverflowError");
      
//      } catch(StackOverflowError e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(22, (Expression[]) null);
      assertNotNull(coreFunction0);
      assertEquals(22, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      
      CoreFunction coreFunction1 = new CoreFunction(22, (Expression[]) null);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertNotNull(coreFunction1);
      assertEquals(0, coreFunction1.getArgumentCount());
      assertEquals(22, coreFunction1.getFunctionCode());
      
      boolean boolean0 = coreFunction0.computeContextDependent();
      assertFalse(coreFunction0.equals((Object)coreFunction1));
      assertTrue(boolean0);
      assertEquals(22, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertNotSame(coreFunction0, coreFunction1);
      
      String string0 = coreFunction0.toString();
      assertFalse(coreFunction0.equals((Object)coreFunction1));
      assertEquals("lang()", string0);
      assertNotNull(string0);
      assertEquals(22, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertNotSame(coreFunction0, coreFunction1);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      EvalContext evalContext0 = null;
      CoreFunction coreFunction0 = new CoreFunction(23, expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals(23, coreFunction0.getFunctionCode());
      assertEquals(1, expressionArray0.length);
      
      // Undeclared exception!
//      try { 
        coreFunction0.computeValue((EvalContext) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      EvalContext evalContext0 = null;
      Float float0 = new Float((double) (-637));
      assertEquals((-637.0F), (float)float0, 0.01F);
      assertNotNull(float0);
      
      Constant constant0 = new Constant(float0);
      assertNotNull(constant0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      
      Expression[] expressionArray0 = new Expression[3];
      NameAttributeTest nameAttributeTest0 = new NameAttributeTest(constant0, constant0);
      assertNotNull(nameAttributeTest0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertEquals("=", nameAttributeTest0.getSymbol());
      assertTrue(nameAttributeTest0.computeContextDependent());
      
      expressionArray0[0] = (Expression) nameAttributeTest0;
      CoreFunction coreFunction0 = new CoreFunction(13, expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(13, coreFunction0.getFunctionCode());
      assertEquals(3, coreFunction0.getArgumentCount());
      assertEquals(3, expressionArray0.length);
      
      String string0 = coreFunction0.getFunctionName();
      assertEquals("substring-after", string0);
      assertNotNull(string0);
      assertEquals(13, coreFunction0.getFunctionCode());
      assertEquals(3, coreFunction0.getArgumentCount());
      assertEquals(3, expressionArray0.length);
      
      // Undeclared exception!
//      try { 
        coreFunction0.functionTranslate((EvalContext) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      int int0 = 23;
      Expression[] expressionArray0 = new Expression[1];
      QName qName0 = new QName("", "");
      assertNotNull(qName0);
      assertEquals(":", qName0.toString());
      assertEquals("", qName0.getPrefix());
      assertEquals("", qName0.getName());
      
      ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, expressionArray0);
      assertNotNull(extensionFunction0);
      assertEquals(":", qName0.toString());
      assertEquals("", qName0.getPrefix());
      assertEquals("", qName0.getName());
      assertTrue(extensionFunction0.computeContextDependent());
      assertEquals(1, expressionArray0.length);
      
      expressionArray0[0] = (Expression) extensionFunction0;
      CoreFunction coreFunction0 = new CoreFunction(23, expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals(23, coreFunction0.getFunctionCode());
      assertEquals(1, expressionArray0.length);
      
      Step[] stepArray0 = new Step[0];
      ExpressionPath expressionPath0 = new ExpressionPath(coreFunction0, expressionArray0, stepArray0);
      assertNotNull(expressionPath0);
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals(23, coreFunction0.getFunctionCode());
      assertEquals(1, expressionArray0.length);
      assertEquals(0, stepArray0.length);
      
      EvalContext evalContext0 = null;
      boolean boolean0 = true;
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("");
      assertNotNull(processingInstructionTest0);
      assertEquals("", processingInstructionTest0.getTarget());
      
      ChildContext childContext0 = new ChildContext((EvalContext) null, processingInstructionTest0, true, true);
      assertNotNull(childContext0);
      assertEquals("", processingInstructionTest0.getTarget());
      assertEquals(0, childContext0.getDocumentOrder());
      assertEquals(0, childContext0.getPosition());
      assertFalse(childContext0.isChildOrderingRequired());
      
      EvalContext evalContext1 = expressionPath0.createContextForStep(childContext0, 10, processingInstructionTest0);
      assertNotNull(evalContext1);
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals(23, coreFunction0.getFunctionCode());
      assertEquals("", processingInstructionTest0.getTarget());
      assertEquals(0, childContext0.getDocumentOrder());
      assertEquals(0, childContext0.getPosition());
      assertFalse(childContext0.isChildOrderingRequired());
      assertEquals(0, evalContext1.getPosition());
      assertEquals((-1), evalContext1.getDocumentOrder());
      assertTrue(evalContext1.isChildOrderingRequired());
      assertEquals(1, expressionArray0.length);
      assertEquals(0, stepArray0.length);
      
      // Undeclared exception!
      coreFunction0.functionCeiling(evalContext1);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Step[] stepArray0 = new Step[5];
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(21);
      assertNotNull(nodeTypeTest0);
      assertEquals(21, nodeTypeTest0.getNodeType());
      
      Step step0 = new Step(21, nodeTypeTest0, (Expression[]) null);
      assertNotNull(step0);
      assertEquals(21, nodeTypeTest0.getNodeType());
      assertEquals(21, step0.getAxis());
      
      stepArray0[0] = step0;
      Step step1 = new Step(21, nodeTypeTest0, (Expression[]) null);
      assertFalse(step1.equals((Object)step0));
      assertNotNull(step1);
      assertEquals(21, nodeTypeTest0.getNodeType());
      assertEquals(21, step1.getAxis());
      
      stepArray0[1] = step1;
      Step step2 = new Step(2277, nodeTypeTest0, (Expression[]) null);
      assertFalse(step2.equals((Object)step1));
      assertFalse(step2.equals((Object)step0));
      assertNotNull(step2);
      assertEquals(21, nodeTypeTest0.getNodeType());
      assertEquals(2277, step2.getAxis());
      
      stepArray0[2] = step2;
      Step step3 = new Step(21, nodeTypeTest0, (Expression[]) null);
      assertFalse(step3.equals((Object)step0));
      assertFalse(step3.equals((Object)step1));
      assertFalse(step3.equals((Object)step2));
      assertNotNull(step3);
      assertEquals(21, nodeTypeTest0.getNodeType());
      assertEquals(21, step3.getAxis());
      
      stepArray0[3] = step3;
      Step step4 = new Step(2277, nodeTypeTest0, (Expression[]) null);
      assertFalse(step4.equals((Object)step2));
      assertFalse(step4.equals((Object)step3));
      assertFalse(step4.equals((Object)step1));
      assertFalse(step4.equals((Object)step0));
      assertNotNull(step4);
      assertEquals(21, nodeTypeTest0.getNodeType());
      assertEquals(2277, step4.getAxis());
      
      stepArray0[4] = step4;
      ExpressionPath expressionPath0 = new ExpressionPath((Expression) null, (Expression[]) null, stepArray0);
      assertNotNull(expressionPath0);
      assertEquals(5, stepArray0.length);
      
      NodeTypeTest nodeTypeTest1 = new NodeTypeTest(720);
      assertFalse(nodeTypeTest1.equals((Object)nodeTypeTest0));
      assertNotNull(nodeTypeTest1);
      assertEquals(720, nodeTypeTest1.getNodeType());
      
      AncestorContext ancestorContext0 = new AncestorContext((EvalContext) null, true, nodeTypeTest1);
      assertFalse(nodeTypeTest1.equals((Object)nodeTypeTest0));
      assertNotNull(ancestorContext0);
      assertEquals(720, nodeTypeTest1.getNodeType());
      assertTrue(ancestorContext0.isChildOrderingRequired());
      assertEquals((-1), ancestorContext0.getDocumentOrder());
      assertEquals(0, ancestorContext0.getPosition());
      
      EvalContext evalContext0 = expressionPath0.evalSteps((EvalContext) null);
      assertNull(evalContext0);
      assertEquals(5, stepArray0.length);
      
      CoreFunction coreFunction0 = new CoreFunction(29, (Expression[]) null);
      assertNotNull(coreFunction0);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(29, coreFunction0.getFunctionCode());
      
      // Undeclared exception!
//      try { 
        coreFunction0.compute(ancestorContext0);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // Incorrect number of arguments: key()
//         //
//         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(5, (Expression[]) null);
      assertNotNull(coreFunction0);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(5, coreFunction0.getFunctionCode());
      
      CoreFunction coreFunction1 = new CoreFunction(5, (Expression[]) null);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertNotNull(coreFunction1);
      assertEquals(0, coreFunction1.getArgumentCount());
      assertEquals(5, coreFunction1.getFunctionCode());
      
      // Undeclared exception!
//      try { 
        coreFunction0.computeValue((EvalContext) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(4, (Expression[]) null);
      assertNotNull(coreFunction0);
      assertEquals(4, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      
      String string0 = coreFunction0.getFunctionName();
      assertEquals("id", string0);
      assertNotNull(string0);
      assertEquals(4, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      
      Constant constant0 = new Constant("");
      assertNotNull(constant0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      
      boolean boolean0 = coreFunction0.computeContextDependent();
      assertFalse(boolean0);
      assertEquals(4, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Float float0 = new Float(0.0F);
      assertEquals(0.0F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      Constant constant0 = new Constant(float0);
      assertNotNull(constant0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      
      Expression[] expressionArray0 = new Expression[5];
      expressionArray0[0] = (Expression) constant0;
      expressionArray0[1] = (Expression) constant0;
      expressionArray0[2] = (Expression) constant0;
      expressionArray0[3] = (Expression) constant0;
      expressionArray0[4] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction(29, expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(29, coreFunction0.getFunctionCode());
      assertEquals(5, coreFunction0.getArgumentCount());
      assertEquals(5, expressionArray0.length);
      
      boolean boolean0 = coreFunction0.computeContextDependent();
      assertFalse(boolean0);
      assertEquals(29, coreFunction0.getFunctionCode());
      assertEquals(5, coreFunction0.getArgumentCount());
      assertEquals(5, expressionArray0.length);
      
      Locale locale0 = Locale.ROOT;
      assertNotNull(locale0);
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.toString());
      
      CoreFunction coreFunction1 = new CoreFunction(26, expressionArray0);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertNotNull(coreFunction1);
      assertEquals(26, coreFunction1.getFunctionCode());
      assertEquals(5, coreFunction1.getArgumentCount());
      assertEquals(5, expressionArray0.length);
      
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest((-1331));
      assertNotNull(nodeTypeTest0);
      assertEquals((-1331), nodeTypeTest0.getNodeType());
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(0, (Expression[]) null);
      assertNotNull(coreFunction0);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(0, coreFunction0.getFunctionCode());
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl)JXPathContext.newContext((Object) coreFunction0);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertNotNull(jXPathContextReferenceImpl0);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(0, coreFunction0.getFunctionCode());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      
      InitialContext initialContext0 = (InitialContext)jXPathContextReferenceImpl0.getAbsoluteRootContext();
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertNotNull(initialContext0);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(0, coreFunction0.getFunctionCode());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertEquals(0, initialContext0.getDocumentOrder());
      assertEquals(0, initialContext0.getPosition());
      assertFalse(initialContext0.isChildOrderingRequired());
      
      Object object0 = coreFunction0.computeValue(initialContext0);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertNull(object0);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(0, coreFunction0.getFunctionCode());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertEquals(0, initialContext0.getDocumentOrder());
      assertEquals(0, initialContext0.getPosition());
      assertFalse(initialContext0.isChildOrderingRequired());
      
      String string0 = (String)coreFunction0.functionLocalName(initialContext0);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals("root", string0);
      assertNotNull(string0);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(0, coreFunction0.getFunctionCode());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertEquals(0, initialContext0.getDocumentOrder());
      assertEquals(0, initialContext0.getPosition());
      assertFalse(initialContext0.isChildOrderingRequired());
      
      QName qName0 = new QName("jU81-*J\n&$*13g");
      assertNotNull(qName0);
      assertNull(qName0.getPrefix());
      assertEquals("jU81-*J\n&$*13g", qName0.toString());
      assertEquals("jU81-*J\n&$*13g", qName0.getName());
      
      String string1 = (String)coreFunction0.functionNamespaceURI(initialContext0);
      assertFalse(string1.equals((Object)string0));
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals("", string1);
      assertNotNull(string1);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(0, coreFunction0.getFunctionCode());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertEquals(0, initialContext0.getDocumentOrder());
      assertEquals(0, initialContext0.getPosition());
      assertFalse(initialContext0.isChildOrderingRequired());
      
      Double double0 = (Double)coreFunction0.functionLast(initialContext0);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(1.0, (double)double0, 0.01);
      assertNotNull(double0);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(0, coreFunction0.getFunctionCode());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertEquals(0, initialContext0.getDocumentOrder());
      assertEquals(2, initialContext0.getPosition());
      assertFalse(initialContext0.isChildOrderingRequired());
      
      // Undeclared exception!
//      try { 
        coreFunction0.getArg1();
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      EvalContext evalContext0 = null;
      CoreFunction coreFunction0 = new CoreFunction(3, (Expression[]) null);
      assertNotNull(coreFunction0);
      assertEquals(3, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      
      CoreFunction coreFunction1 = new CoreFunction((-617), (Expression[]) null);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertNotNull(coreFunction1);
      assertEquals((-617), coreFunction1.getFunctionCode());
      assertEquals(0, coreFunction1.getArgumentCount());
      
      // Undeclared exception!
//      try { 
        coreFunction0.computeValue((EvalContext) null);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // Incorrect number of arguments: count()
//         //
//         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(52, (Expression[]) null);
      assertNotNull(coreFunction0);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(52, coreFunction0.getFunctionCode());
      
      CoreFunction coreFunction1 = new CoreFunction(2, (Expression[]) null);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertNotNull(coreFunction1);
      assertEquals(0, coreFunction1.getArgumentCount());
      assertEquals(2, coreFunction1.getFunctionCode());
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl)JXPathContext.newContext((Object) coreFunction0);
      assertFalse(coreFunction0.equals((Object)coreFunction1));
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertNotNull(jXPathContextReferenceImpl0);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(52, coreFunction0.getFunctionCode());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertNotSame(coreFunction0, coreFunction1);
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl1 = new JXPathContextReferenceImpl(jXPathContextReferenceImpl0, jXPathContextReferenceImpl0, (Pointer) null);
      assertFalse(coreFunction0.equals((Object)coreFunction1));
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl0));
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertNotNull(jXPathContextReferenceImpl1);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(52, coreFunction0.getFunctionCode());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertFalse(jXPathContextReferenceImpl1.isLenient());
      
      InitialContext initialContext0 = (InitialContext)jXPathContextReferenceImpl1.getAbsoluteRootContext();
      assertFalse(coreFunction0.equals((Object)coreFunction1));
      assertFalse(jXPathContextReferenceImpl0.equals((Object)jXPathContextReferenceImpl1));
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl0));
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertNotNull(initialContext0);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(52, coreFunction0.getFunctionCode());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertFalse(jXPathContextReferenceImpl1.isLenient());
      assertEquals(0, initialContext0.getDocumentOrder());
      assertEquals(0, initialContext0.getPosition());
      assertFalse(initialContext0.isChildOrderingRequired());
      assertNotSame(coreFunction0, coreFunction1);
      assertNotSame(jXPathContextReferenceImpl0, jXPathContextReferenceImpl1);
      assertNotSame(jXPathContextReferenceImpl1, jXPathContextReferenceImpl0);
      
      QName qName0 = new QName("org.apache.commons.jxpath.PackageFunctions");
      assertNotNull(qName0);
      assertEquals("org.apache.commons.jxpath.PackageFunctions", qName0.toString());
      assertNull(qName0.getPrefix());
      assertEquals("org.apache.commons.jxpath.PackageFunctions", qName0.getName());
      
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
      assertNotNull(nodeNameTest0);
      assertEquals("org.apache.commons.jxpath.PackageFunctions", qName0.toString());
      assertNull(qName0.getPrefix());
      assertEquals("org.apache.commons.jxpath.PackageFunctions", qName0.getName());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals("org.apache.commons.jxpath.PackageFunctions", nodeNameTest0.toString());
      
      AncestorContext ancestorContext0 = new AncestorContext(initialContext0, false, nodeNameTest0);
      assertFalse(coreFunction0.equals((Object)coreFunction1));
      assertFalse(jXPathContextReferenceImpl0.equals((Object)jXPathContextReferenceImpl1));
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl0));
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertNotNull(ancestorContext0);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(52, coreFunction0.getFunctionCode());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertFalse(jXPathContextReferenceImpl1.isLenient());
      assertEquals(0, initialContext0.getDocumentOrder());
      assertEquals(0, initialContext0.getPosition());
      assertFalse(initialContext0.isChildOrderingRequired());
      assertEquals("org.apache.commons.jxpath.PackageFunctions", qName0.toString());
      assertNull(qName0.getPrefix());
      assertEquals("org.apache.commons.jxpath.PackageFunctions", qName0.getName());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals("org.apache.commons.jxpath.PackageFunctions", nodeNameTest0.toString());
      assertEquals((-1), ancestorContext0.getDocumentOrder());
      assertEquals(0, ancestorContext0.getPosition());
      assertTrue(ancestorContext0.isChildOrderingRequired());
      
      RootContext rootContext0 = ancestorContext0.getRootContext();
      assertFalse(coreFunction0.equals((Object)coreFunction1));
      assertFalse(jXPathContextReferenceImpl0.equals((Object)jXPathContextReferenceImpl1));
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl0));
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertNotNull(rootContext0);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(52, coreFunction0.getFunctionCode());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertFalse(jXPathContextReferenceImpl1.isLenient());
      assertEquals(0, initialContext0.getDocumentOrder());
      assertEquals(0, initialContext0.getPosition());
      assertFalse(initialContext0.isChildOrderingRequired());
      assertEquals("org.apache.commons.jxpath.PackageFunctions", qName0.toString());
      assertNull(qName0.getPrefix());
      assertEquals("org.apache.commons.jxpath.PackageFunctions", qName0.getName());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals("org.apache.commons.jxpath.PackageFunctions", nodeNameTest0.toString());
      assertEquals((-1), ancestorContext0.getDocumentOrder());
      assertEquals(0, ancestorContext0.getPosition());
      assertTrue(ancestorContext0.isChildOrderingRequired());
      assertEquals(0, rootContext0.getPosition());
      assertEquals(0, rootContext0.getDocumentOrder());
      assertFalse(rootContext0.isChildOrderingRequired());
      assertNotSame(coreFunction0, coreFunction1);
      assertNotSame(jXPathContextReferenceImpl0, jXPathContextReferenceImpl1);
      assertNotSame(jXPathContextReferenceImpl1, jXPathContextReferenceImpl0);
      
      // Undeclared exception!
//      try { 
        coreFunction1.computeValue(rootContext0);
//        fail("Expecting exception: UnsupportedOperationException");
      
//      } catch(UnsupportedOperationException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.jxpath.ri.axes.RootContext", e);
//      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      EvalContext evalContext0 = null;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      Locale locale0 = Locale.GERMANY;
      assertNotNull(locale0);
      assertEquals("de", locale0.getLanguage());
      assertEquals("DEU", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("DE", locale0.getCountry());
      assertEquals("de_DE", locale0.toString());
      
      CoreFunction coreFunction0 = new CoreFunction(1, (Expression[]) null);
      assertNotNull(coreFunction0);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(1, coreFunction0.getFunctionCode());
      
      // Undeclared exception!
//      try { 
        coreFunction0.computeValue((EvalContext) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      QName qName0 = new QName("", "");
      assertNotNull(qName0);
      assertEquals("", qName0.getPrefix());
      assertEquals("", qName0.getName());
      assertEquals(":", qName0.toString());
      
      ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, expressionArray0);
      assertNotNull(extensionFunction0);
      assertEquals("", qName0.getPrefix());
      assertEquals("", qName0.getName());
      assertEquals(":", qName0.toString());
      assertTrue(extensionFunction0.computeContextDependent());
      assertEquals(1, expressionArray0.length);
      
      expressionArray0[0] = (Expression) extensionFunction0;
      CoreFunction coreFunction0 = new CoreFunction(23, expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(23, coreFunction0.getFunctionCode());
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals(1, expressionArray0.length);
      
      Step[] stepArray0 = new Step[0];
      ExpressionPath expressionPath0 = new ExpressionPath(coreFunction0, expressionArray0, stepArray0);
      assertNotNull(expressionPath0);
      assertEquals(23, coreFunction0.getFunctionCode());
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals(1, expressionArray0.length);
      assertEquals(0, stepArray0.length);
      
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(23);
      assertNotNull(nodeTypeTest0);
      assertEquals(23, nodeTypeTest0.getNodeType());
      
      AncestorContext ancestorContext0 = new AncestorContext((EvalContext) null, true, nodeTypeTest0);
      assertNotNull(ancestorContext0);
      assertEquals(23, nodeTypeTest0.getNodeType());
      assertTrue(ancestorContext0.isChildOrderingRequired());
      assertEquals(0, ancestorContext0.getPosition());
      assertEquals((-1), ancestorContext0.getDocumentOrder());
      
      EvalContext evalContext0 = expressionPath0.evalSteps(ancestorContext0);
      assertNotNull(evalContext0);
      assertEquals(23, coreFunction0.getFunctionCode());
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals(23, nodeTypeTest0.getNodeType());
      assertTrue(ancestorContext0.isChildOrderingRequired());
      assertEquals(0, ancestorContext0.getPosition());
      assertEquals((-1), ancestorContext0.getDocumentOrder());
      assertEquals((-1), evalContext0.getDocumentOrder());
      assertEquals(0, evalContext0.getPosition());
      assertTrue(evalContext0.isChildOrderingRequired());
      assertEquals(1, expressionArray0.length);
      assertEquals(0, stepArray0.length);
      assertSame(ancestorContext0, evalContext0);
      assertSame(evalContext0, ancestorContext0);
      
      // Undeclared exception!
      coreFunction0.functionLang((EvalContext) null);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      EvalContext evalContext0 = null;
      Float float0 = new Float((double) (-617));
      assertEquals((-617.0F), (float)float0, 0.01F);
      assertNotNull(float0);
      
      Constant constant0 = new Constant(float0);
      assertNotNull(constant0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      
      Expression[] expressionArray0 = new Expression[3];
      NameAttributeTest nameAttributeTest0 = new NameAttributeTest(constant0, constant0);
      assertNotNull(nameAttributeTest0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertEquals("=", nameAttributeTest0.getSymbol());
      assertTrue(nameAttributeTest0.computeContextDependent());
      
      expressionArray0[0] = (Expression) nameAttributeTest0;
      CoreFunction coreFunction0 = new CoreFunction(13, expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(3, coreFunction0.getArgumentCount());
      assertEquals(13, coreFunction0.getFunctionCode());
      assertEquals(3, expressionArray0.length);
      
      // Undeclared exception!
//      try { 
        coreFunction0.computeValue((EvalContext) null);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // Incorrect number of arguments: substring-after(org.apache.commons.jxpath.ri.compiler.Constant@0000000001 = org.apache.commons.jxpath.ri.compiler.Constant@0000000001, null, null)
//         //
//         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      Expression[] expressionArray0 = new Expression[3];
      QName qName0 = new QName("@J8[>%%\"YnX/");
      assertNotNull(qName0);
      assertEquals("@J8[>%%\"YnX/", qName0.toString());
      assertEquals("@J8[>%%\"YnX/", qName0.getName());
      assertNull(qName0.getPrefix());
      
      boolean boolean1 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "XM]M`");
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      VariableReference variableReference0 = new VariableReference(qName0);
      assertNotNull(variableReference0);
      assertEquals("@J8[>%%\"YnX/", qName0.toString());
      assertEquals("@J8[>%%\"YnX/", qName0.getName());
      assertNull(qName0.getPrefix());
      assertFalse(variableReference0.computeContextDependent());
      assertFalse(variableReference0.isContextDependent());
      
      expressionArray0[0] = (Expression) variableReference0;
      CoreOperationGreaterThan coreOperationGreaterThan0 = new CoreOperationGreaterThan(variableReference0, variableReference0);
      assertNotNull(coreOperationGreaterThan0);
      assertEquals("@J8[>%%\"YnX/", qName0.toString());
      assertEquals("@J8[>%%\"YnX/", qName0.getName());
      assertNull(qName0.getPrefix());
      assertFalse(variableReference0.computeContextDependent());
      assertFalse(variableReference0.isContextDependent());
      assertEquals(">", coreOperationGreaterThan0.getSymbol());
      
      expressionArray0[1] = (Expression) coreOperationGreaterThan0;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, expressionArray0);
      assertNotNull(extensionFunction0);
      assertEquals("@J8[>%%\"YnX/", qName0.toString());
      assertEquals("@J8[>%%\"YnX/", qName0.getName());
      assertNull(qName0.getPrefix());
      assertTrue(extensionFunction0.computeContextDependent());
      assertEquals(3, expressionArray0.length);
      
      expressionArray0[2] = (Expression) extensionFunction0;
      CoreFunction coreFunction0 = new CoreFunction(9, expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(3, coreFunction0.getArgumentCount());
      assertEquals(9, coreFunction0.getFunctionCode());
      assertEquals(3, expressionArray0.length);
      
      // Undeclared exception!
      coreFunction0.functionString((EvalContext) null);
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      Float float0 = new Float((float) 1048576);
      assertEquals(1048576.0F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      Constant constant0 = new Constant(float0);
      assertNotNull(constant0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      
      expressionArray0[0] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction(1048576, expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals(1048576, coreFunction0.getFunctionCode());
      assertEquals(1, expressionArray0.length);
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl)JXPathContext.newContext((Object) expressionArray0[0]);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertNotNull(jXPathContextReferenceImpl0);
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertEquals(1, expressionArray0.length);
      
      QName qName0 = new QName((String) null, (String) null);
      assertNotNull(qName0);
      assertNull(qName0.getName());
      assertNull(qName0.toString());
      assertNull(qName0.getPrefix());
      
      Locale locale0 = Locale.ROOT;
      assertNotNull(locale0);
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      
      NullPointer nullPointer0 = (NullPointer)NodePointer.newNodePointer(qName0, (Object) null, locale0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(nullPointer0);
      assertNull(qName0.getName());
      assertNull(qName0.toString());
      assertNull(qName0.getPrefix());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertTrue(nullPointer0.isNode());
      assertTrue(nullPointer0.isLeaf());
      assertFalse(nullPointer0.isContainer());
      assertFalse(nullPointer0.isCollection());
      assertEquals(Integer.MIN_VALUE, nullPointer0.getIndex());
      assertNull(nullPointer0.getNamespaceURI());
      assertTrue(nullPointer0.isRoot());
      assertFalse(nullPointer0.isActual());
      assertEquals(0, nullPointer0.getLength());
      assertFalse(nullPointer0.isDynamicPropertyDeclarationSupported());
      assertFalse(nullPointer0.isAttribute());
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl1 = new JXPathContextReferenceImpl(jXPathContextReferenceImpl0, coreFunction0, nullPointer0);
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl0));
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertNotNull(jXPathContextReferenceImpl1);
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals(1048576, coreFunction0.getFunctionCode());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertNull(qName0.getName());
      assertNull(qName0.toString());
      assertNull(qName0.getPrefix());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertTrue(nullPointer0.isNode());
      assertTrue(nullPointer0.isLeaf());
      assertFalse(nullPointer0.isContainer());
      assertFalse(nullPointer0.isCollection());
      assertEquals(Integer.MIN_VALUE, nullPointer0.getIndex());
      assertNull(nullPointer0.getNamespaceURI());
      assertTrue(nullPointer0.isRoot());
      assertFalse(nullPointer0.isActual());
      assertEquals(0, nullPointer0.getLength());
      assertFalse(nullPointer0.isDynamicPropertyDeclarationSupported());
      assertFalse(nullPointer0.isAttribute());
      assertFalse(jXPathContextReferenceImpl1.isLenient());
      assertEquals(1, expressionArray0.length);
      
      InitialContext initialContext0 = (InitialContext)jXPathContextReferenceImpl1.getAbsoluteRootContext();
      assertFalse(jXPathContextReferenceImpl0.equals((Object)jXPathContextReferenceImpl1));
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl0));
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertNotNull(initialContext0);
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals(1048576, coreFunction0.getFunctionCode());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertNull(qName0.getName());
      assertNull(qName0.toString());
      assertNull(qName0.getPrefix());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertTrue(nullPointer0.isNode());
      assertTrue(nullPointer0.isLeaf());
      assertFalse(nullPointer0.isContainer());
      assertFalse(nullPointer0.isCollection());
      assertEquals(Integer.MIN_VALUE, nullPointer0.getIndex());
      assertNull(nullPointer0.getNamespaceURI());
      assertTrue(nullPointer0.isRoot());
      assertFalse(nullPointer0.isActual());
      assertEquals(0, nullPointer0.getLength());
      assertFalse(nullPointer0.isDynamicPropertyDeclarationSupported());
      assertFalse(nullPointer0.isAttribute());
      assertFalse(jXPathContextReferenceImpl1.isLenient());
      assertEquals(0, initialContext0.getPosition());
      assertEquals(0, initialContext0.getDocumentOrder());
      assertFalse(initialContext0.isChildOrderingRequired());
      assertEquals(1, expressionArray0.length);
      assertNotSame(jXPathContextReferenceImpl0, jXPathContextReferenceImpl1);
      assertNotSame(jXPathContextReferenceImpl1, jXPathContextReferenceImpl0);
      
      Double double0 = (Double)coreFunction0.functionCount(initialContext0);
      assertFalse(jXPathContextReferenceImpl0.equals((Object)jXPathContextReferenceImpl1));
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl0));
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(1.0, (double)double0, 0.01);
      assertNotNull(double0);
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals(1048576, coreFunction0.getFunctionCode());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertNull(qName0.getName());
      assertNull(qName0.toString());
      assertNull(qName0.getPrefix());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertTrue(nullPointer0.isNode());
      assertTrue(nullPointer0.isLeaf());
      assertFalse(nullPointer0.isContainer());
      assertFalse(nullPointer0.isCollection());
      assertEquals(Integer.MIN_VALUE, nullPointer0.getIndex());
      assertNull(nullPointer0.getNamespaceURI());
      assertTrue(nullPointer0.isRoot());
      assertFalse(nullPointer0.isActual());
      assertEquals(0, nullPointer0.getLength());
      assertFalse(nullPointer0.isDynamicPropertyDeclarationSupported());
      assertFalse(nullPointer0.isAttribute());
      assertFalse(jXPathContextReferenceImpl1.isLenient());
      assertEquals(0, initialContext0.getPosition());
      assertEquals(0, initialContext0.getDocumentOrder());
      assertFalse(initialContext0.isChildOrderingRequired());
      assertEquals(1, expressionArray0.length);
      assertNotSame(jXPathContextReferenceImpl0, jXPathContextReferenceImpl1);
      assertNotSame(jXPathContextReferenceImpl1, jXPathContextReferenceImpl0);
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      QName qName0 = new QName("", "");
      assertNotNull(qName0);
      assertEquals("", qName0.getName());
      assertEquals("", qName0.getPrefix());
      assertEquals(":", qName0.toString());
      
      ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, expressionArray0);
      assertNotNull(extensionFunction0);
      assertEquals("", qName0.getName());
      assertEquals("", qName0.getPrefix());
      assertEquals(":", qName0.toString());
      assertTrue(extensionFunction0.computeContextDependent());
      assertEquals(1, expressionArray0.length);
      
      expressionArray0[0] = (Expression) extensionFunction0;
      CoreFunction coreFunction0 = new CoreFunction(23, expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals(23, coreFunction0.getFunctionCode());
      assertEquals(1, expressionArray0.length);
      
      Step[] stepArray0 = new Step[0];
      ExpressionPath expressionPath0 = new ExpressionPath(coreFunction0, expressionArray0, stepArray0);
      assertNotNull(expressionPath0);
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals(23, coreFunction0.getFunctionCode());
      assertEquals(1, expressionArray0.length);
      assertEquals(0, stepArray0.length);
      
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(23);
      assertNotNull(nodeTypeTest0);
      assertEquals(23, nodeTypeTest0.getNodeType());
      
      AncestorContext ancestorContext0 = new AncestorContext((EvalContext) null, true, nodeTypeTest0);
      assertNotNull(ancestorContext0);
      assertEquals(23, nodeTypeTest0.getNodeType());
      assertEquals(0, ancestorContext0.getPosition());
      assertTrue(ancestorContext0.isChildOrderingRequired());
      assertEquals((-1), ancestorContext0.getDocumentOrder());
      
      EvalContext evalContext0 = expressionPath0.evalSteps(ancestorContext0);
      assertNotNull(evalContext0);
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals(23, coreFunction0.getFunctionCode());
      assertEquals(23, nodeTypeTest0.getNodeType());
      assertEquals(0, ancestorContext0.getPosition());
      assertTrue(ancestorContext0.isChildOrderingRequired());
      assertEquals((-1), ancestorContext0.getDocumentOrder());
      assertEquals((-1), evalContext0.getDocumentOrder());
      assertTrue(evalContext0.isChildOrderingRequired());
      assertEquals(0, evalContext0.getPosition());
      assertEquals(1, expressionArray0.length);
      assertEquals(0, stepArray0.length);
      assertSame(ancestorContext0, evalContext0);
      assertSame(evalContext0, ancestorContext0);
      
      // Undeclared exception!
      coreFunction0.compute(evalContext0);
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      QName qName0 = new QName("", "");
      assertNotNull(qName0);
      assertEquals("", qName0.getName());
      assertEquals("", qName0.getPrefix());
      assertEquals(":", qName0.toString());
      
      ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, expressionArray0);
      assertNotNull(extensionFunction0);
      assertEquals("", qName0.getName());
      assertEquals("", qName0.getPrefix());
      assertEquals(":", qName0.toString());
      assertTrue(extensionFunction0.computeContextDependent());
      assertEquals(1, expressionArray0.length);
      
      expressionArray0[0] = (Expression) extensionFunction0;
      CoreFunction coreFunction0 = new CoreFunction(23, expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(23, coreFunction0.getFunctionCode());
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals(1, expressionArray0.length);
      
      Step[] stepArray0 = new Step[0];
      ExpressionPath expressionPath0 = new ExpressionPath(coreFunction0, expressionArray0, stepArray0);
      assertNotNull(expressionPath0);
      assertEquals(23, coreFunction0.getFunctionCode());
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals(1, expressionArray0.length);
      assertEquals(0, stepArray0.length);
      
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(23);
      assertNotNull(nodeTypeTest0);
      assertEquals(23, nodeTypeTest0.getNodeType());
      
      AncestorContext ancestorContext0 = new AncestorContext((EvalContext) null, true, nodeTypeTest0);
      assertNotNull(ancestorContext0);
      assertEquals(23, nodeTypeTest0.getNodeType());
      assertTrue(ancestorContext0.isChildOrderingRequired());
      assertEquals((-1), ancestorContext0.getDocumentOrder());
      assertEquals(0, ancestorContext0.getPosition());
      
      // Undeclared exception!
//      try { 
        coreFunction0.functionPosition((EvalContext) null);
//        fail("Expecting exception: StackOverflowError");
      
//      } catch(StackOverflowError e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      Float float0 = new Float((double) (-617));
      assertEquals((-617.0F), (float)float0, 0.01F);
      assertNotNull(float0);
      
      Constant constant0 = new Constant(float0);
      assertNotNull(constant0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      
      Expression[] expressionArray0 = new Expression[3];
      NameAttributeTest nameAttributeTest0 = new NameAttributeTest(constant0, constant0);
      assertNotNull(nameAttributeTest0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertEquals("=", nameAttributeTest0.getSymbol());
      assertTrue(nameAttributeTest0.computeContextDependent());
      
      expressionArray0[0] = (Expression) nameAttributeTest0;
      expressionArray0[1] = (Expression) constant0;
      expressionArray0[2] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction((-1847), expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(3, coreFunction0.getArgumentCount());
      assertEquals((-1847), coreFunction0.getFunctionCode());
      assertEquals(3, expressionArray0.length);
      
      Object object0 = coreFunction0.functionSubstring((EvalContext) null);
      assertEquals("", object0);
      assertNotNull(object0);
      assertEquals(3, coreFunction0.getArgumentCount());
      assertEquals((-1847), coreFunction0.getFunctionCode());
      assertEquals(3, expressionArray0.length);
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[9];
      CoreOperationOr coreOperationOr0 = new CoreOperationOr(expressionArray0);
      assertNotNull(coreOperationOr0);
      assertEquals("or", coreOperationOr0.getSymbol());
      assertEquals(9, expressionArray0.length);
      
      expressionArray0[0] = (Expression) coreOperationOr0;
      Step[] stepArray0 = new Step[2];
      String string0 = "boolean";
      QName qName0 = new QName("boolean");
      assertNotNull(qName0);
      assertEquals("boolean", qName0.toString());
      assertEquals("boolean", qName0.getName());
      assertNull(qName0.getPrefix());
      
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, "boolean");
      assertNotNull(nodeNameTest0);
      assertEquals("boolean", qName0.toString());
      assertEquals("boolean", qName0.getName());
      assertNull(qName0.getPrefix());
      assertEquals("boolean", nodeNameTest0.getNamespaceURI());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals("boolean", nodeNameTest0.toString());
      
      Step step0 = new Step(23, nodeNameTest0, expressionArray0);
      assertNotNull(step0);
      assertEquals("boolean", qName0.toString());
      assertEquals("boolean", qName0.getName());
      assertNull(qName0.getPrefix());
      assertEquals("boolean", nodeNameTest0.getNamespaceURI());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals("boolean", nodeNameTest0.toString());
      assertEquals(23, step0.getAxis());
      assertEquals(9, expressionArray0.length);
      
      stepArray0[0] = step0;
      Step step1 = new Step(23, nodeNameTest0, expressionArray0);
      assertFalse(step1.equals((Object)step0));
      assertNotNull(step1);
      assertEquals("boolean", qName0.toString());
      assertEquals("boolean", qName0.getName());
      assertNull(qName0.getPrefix());
      assertEquals("boolean", nodeNameTest0.getNamespaceURI());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals("boolean", nodeNameTest0.toString());
      assertEquals(23, step1.getAxis());
      assertEquals(9, expressionArray0.length);
      
      stepArray0[1] = step1;
      LocationPath locationPath0 = new LocationPath(true, stepArray0);
      assertNotNull(locationPath0);
      assertTrue(locationPath0.isAbsolute());
      assertEquals(2, stepArray0.length);
      
      expressionArray0[1] = (Expression) locationPath0;
      CoreOperationOr coreOperationOr1 = new CoreOperationOr(expressionArray0);
      assertFalse(coreOperationOr1.equals((Object)coreOperationOr0));
      assertNotNull(coreOperationOr1);
      assertEquals("or", coreOperationOr1.getSymbol());
      assertEquals(9, expressionArray0.length);
      
      CoreOperationSubtract coreOperationSubtract0 = new CoreOperationSubtract(coreOperationOr1, coreOperationOr1);
      assertFalse(coreOperationOr1.equals((Object)coreOperationOr0));
      assertNotNull(coreOperationSubtract0);
      assertEquals("or", coreOperationOr1.getSymbol());
      assertEquals("-", coreOperationSubtract0.getSymbol());
      assertEquals(9, expressionArray0.length);
      
      expressionArray0[2] = (Expression) coreOperationSubtract0;
      CoreOperationGreaterThan coreOperationGreaterThan0 = new CoreOperationGreaterThan(expressionArray0[2], expressionArray0[1]);
      assertNotNull(coreOperationGreaterThan0);
      assertEquals(">", coreOperationGreaterThan0.getSymbol());
      assertEquals(9, expressionArray0.length);
      
      expressionArray0[3] = (Expression) coreOperationGreaterThan0;
      CoreOperationAnd coreOperationAnd0 = new CoreOperationAnd(expressionArray0);
      assertNotNull(coreOperationAnd0);
      assertEquals("and", coreOperationAnd0.getSymbol());
      assertEquals(9, expressionArray0.length);
      
      expressionArray0[4] = (Expression) coreOperationAnd0;
      CoreOperationDivide coreOperationDivide0 = new CoreOperationDivide(coreOperationOr0, coreOperationOr0);
      assertFalse(coreOperationOr0.equals((Object)coreOperationOr1));
      assertNotNull(coreOperationDivide0);
      assertEquals("or", coreOperationOr0.getSymbol());
      assertEquals("div", coreOperationDivide0.getSymbol());
      assertEquals(9, expressionArray0.length);
      
      expressionArray0[5] = (Expression) coreOperationDivide0;
      Short short0 = new Short((short)21);
      assertEquals((short)21, (short)short0);
      assertNotNull(short0);
      
      Constant constant0 = new Constant(short0);
      assertNotNull(constant0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      
      expressionArray0[6] = (Expression) constant0;
      CoreOperationNegate coreOperationNegate0 = new CoreOperationNegate(expressionArray0[0]);
      assertNotNull(coreOperationNegate0);
      assertEquals("-", coreOperationNegate0.getSymbol());
      assertEquals(9, expressionArray0.length);
      
      expressionArray0[7] = (Expression) coreOperationNegate0;
      expressionArray0[8] = (Expression) coreOperationSubtract0;
      CoreFunction coreFunction0 = new CoreFunction(23, expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(9, coreFunction0.getArgumentCount());
      assertEquals(23, coreFunction0.getFunctionCode());
      assertEquals(9, expressionArray0.length);
      
      // Undeclared exception!
      coreFunction0.functionSum((EvalContext) null);
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      Float float0 = new Float((float) 1048576);
      assertEquals(1048576.0F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      Constant constant0 = new Constant(float0);
      assertNotNull(constant0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      
      expressionArray0[0] = (Expression) constant0;
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      assertFalse(boolean0);
      
      CoreFunction coreFunction0 = new CoreFunction((-374), expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals((-374), coreFunction0.getFunctionCode());
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals(1, expressionArray0.length);
      
      boolean boolean1 = coreFunction0.computeContextDependent();
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      assertEquals((-374), coreFunction0.getFunctionCode());
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals(1, expressionArray0.length);
      
      EvalContext evalContext0 = null;
      boolean boolean2 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "|OS=qV),");
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2);
      
      CoreFunction coreFunction1 = new CoreFunction(32768, expressionArray0);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertNotNull(coreFunction1);
      assertEquals(32768, coreFunction1.getFunctionCode());
      assertEquals(1, coreFunction1.getArgumentCount());
      assertEquals(1, expressionArray0.length);
      
      CoreFunction coreFunction2 = new CoreFunction(16, expressionArray0);
      assertFalse(coreFunction2.equals((Object)coreFunction1));
      assertFalse(coreFunction2.equals((Object)coreFunction0));
      assertNotNull(coreFunction2);
      assertEquals(1, coreFunction2.getArgumentCount());
      assertEquals(16, coreFunction2.getFunctionCode());
      assertEquals(1, expressionArray0.length);
      
      // Undeclared exception!
//      try { 
        coreFunction2.functionSum((EvalContext) null);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // Invalid argument type for 'sum': java.lang.Float
//         //
//         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      Float float0 = new Float((float) 1048576);
      assertEquals(1048576.0F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      Constant constant0 = new Constant(float0);
      assertNotNull(constant0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      
      expressionArray0[0] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction(1048576, expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(1048576, coreFunction0.getFunctionCode());
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals(1, expressionArray0.length);
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl)JXPathContext.newContext((Object) expressionArray0[0]);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertNotNull(jXPathContextReferenceImpl0);
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertEquals(1, expressionArray0.length);
      
      QName qName0 = new QName((String) null, (String) null);
      assertNotNull(qName0);
      assertNull(qName0.getName());
      assertNull(qName0.toString());
      assertNull(qName0.getPrefix());
      
      Locale locale0 = Locale.ROOT;
      assertNotNull(locale0);
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getLanguage());
      
      NullPointer nullPointer0 = (NullPointer)NodePointer.newNodePointer(qName0, (Object) null, locale0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(nullPointer0);
      assertNull(qName0.getName());
      assertNull(qName0.toString());
      assertNull(qName0.getPrefix());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getLanguage());
      assertFalse(nullPointer0.isAttribute());
      assertEquals(Integer.MIN_VALUE, nullPointer0.getIndex());
      assertFalse(nullPointer0.isActual());
      assertTrue(nullPointer0.isRoot());
      assertFalse(nullPointer0.isCollection());
      assertNull(nullPointer0.getNamespaceURI());
      assertFalse(nullPointer0.isContainer());
      assertEquals(0, nullPointer0.getLength());
      assertTrue(nullPointer0.isNode());
      assertTrue(nullPointer0.isLeaf());
      assertFalse(nullPointer0.isDynamicPropertyDeclarationSupported());
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl1 = new JXPathContextReferenceImpl(jXPathContextReferenceImpl0, coreFunction0, nullPointer0);
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl0));
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertNotNull(jXPathContextReferenceImpl1);
      assertEquals(1048576, coreFunction0.getFunctionCode());
      assertEquals(1, coreFunction0.getArgumentCount());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertNull(qName0.getName());
      assertNull(qName0.toString());
      assertNull(qName0.getPrefix());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getLanguage());
      assertFalse(nullPointer0.isAttribute());
      assertEquals(Integer.MIN_VALUE, nullPointer0.getIndex());
      assertFalse(nullPointer0.isActual());
      assertTrue(nullPointer0.isRoot());
      assertFalse(nullPointer0.isCollection());
      assertNull(nullPointer0.getNamespaceURI());
      assertFalse(nullPointer0.isContainer());
      assertEquals(0, nullPointer0.getLength());
      assertTrue(nullPointer0.isNode());
      assertTrue(nullPointer0.isLeaf());
      assertFalse(nullPointer0.isDynamicPropertyDeclarationSupported());
      assertFalse(jXPathContextReferenceImpl1.isLenient());
      assertEquals(1, expressionArray0.length);
      
      InitialContext initialContext0 = (InitialContext)jXPathContextReferenceImpl1.getAbsoluteRootContext();
      assertFalse(jXPathContextReferenceImpl0.equals((Object)jXPathContextReferenceImpl1));
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl0));
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertNotNull(initialContext0);
      assertEquals(1048576, coreFunction0.getFunctionCode());
      assertEquals(1, coreFunction0.getArgumentCount());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertNull(qName0.getName());
      assertNull(qName0.toString());
      assertNull(qName0.getPrefix());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getLanguage());
      assertFalse(nullPointer0.isAttribute());
      assertEquals(Integer.MIN_VALUE, nullPointer0.getIndex());
      assertFalse(nullPointer0.isActual());
      assertTrue(nullPointer0.isRoot());
      assertFalse(nullPointer0.isCollection());
      assertNull(nullPointer0.getNamespaceURI());
      assertFalse(nullPointer0.isContainer());
      assertEquals(0, nullPointer0.getLength());
      assertTrue(nullPointer0.isNode());
      assertTrue(nullPointer0.isLeaf());
      assertFalse(nullPointer0.isDynamicPropertyDeclarationSupported());
      assertFalse(jXPathContextReferenceImpl1.isLenient());
      assertEquals(0, initialContext0.getDocumentOrder());
      assertFalse(initialContext0.isChildOrderingRequired());
      assertEquals(0, initialContext0.getPosition());
      assertEquals(1, expressionArray0.length);
      assertNotSame(jXPathContextReferenceImpl0, jXPathContextReferenceImpl1);
      assertNotSame(jXPathContextReferenceImpl1, jXPathContextReferenceImpl0);
      
      Float float1 = (Float)coreFunction0.functionNumber(initialContext0);
      assertFalse(jXPathContextReferenceImpl0.equals((Object)jXPathContextReferenceImpl1));
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl0));
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(1048576.0F, (float)float1, 0.01F);
      assertNotNull(float1);
      assertEquals(1048576, coreFunction0.getFunctionCode());
      assertEquals(1, coreFunction0.getArgumentCount());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertNull(qName0.getName());
      assertNull(qName0.toString());
      assertNull(qName0.getPrefix());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getLanguage());
      assertFalse(nullPointer0.isAttribute());
      assertEquals(Integer.MIN_VALUE, nullPointer0.getIndex());
      assertFalse(nullPointer0.isActual());
      assertTrue(nullPointer0.isRoot());
      assertFalse(nullPointer0.isCollection());
      assertNull(nullPointer0.getNamespaceURI());
      assertFalse(nullPointer0.isContainer());
      assertEquals(0, nullPointer0.getLength());
      assertTrue(nullPointer0.isNode());
      assertTrue(nullPointer0.isLeaf());
      assertFalse(nullPointer0.isDynamicPropertyDeclarationSupported());
      assertFalse(jXPathContextReferenceImpl1.isLenient());
      assertEquals(0, initialContext0.getDocumentOrder());
      assertFalse(initialContext0.isChildOrderingRequired());
      assertEquals(0, initialContext0.getPosition());
      assertEquals(1, expressionArray0.length);
      assertNotSame(jXPathContextReferenceImpl0, jXPathContextReferenceImpl1);
      assertNotSame(jXPathContextReferenceImpl1, jXPathContextReferenceImpl0);
      
      // Undeclared exception!
//      try { 
        coreFunction0.functionID(initialContext0);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // Cannot find an element by ID - no IdentityManager has been specified
//         //
//         verifyException("org.apache.commons.jxpath.JXPathContext", e);
//      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      QName qName0 = new QName("", "");
      assertNotNull(qName0);
      assertEquals("", qName0.getPrefix());
      assertEquals(":", qName0.toString());
      assertEquals("", qName0.getName());
      
      ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, expressionArray0);
      assertNotNull(extensionFunction0);
      assertEquals("", qName0.getPrefix());
      assertEquals(":", qName0.toString());
      assertEquals("", qName0.getName());
      assertTrue(extensionFunction0.computeContextDependent());
      assertEquals(1, expressionArray0.length);
      
      expressionArray0[0] = (Expression) extensionFunction0;
      CoreFunction coreFunction0 = new CoreFunction(23, expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals(23, coreFunction0.getFunctionCode());
      assertEquals(1, expressionArray0.length);
      
      Step[] stepArray0 = new Step[0];
      ExpressionPath expressionPath0 = new ExpressionPath(coreFunction0, expressionArray0, stepArray0);
      assertNotNull(expressionPath0);
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals(23, coreFunction0.getFunctionCode());
      assertEquals(1, expressionArray0.length);
      assertEquals(0, stepArray0.length);
      
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(23);
      assertNotNull(nodeTypeTest0);
      assertEquals(23, nodeTypeTest0.getNodeType());
      
      CoreFunction coreFunction1 = new CoreFunction(23, expressionArray0);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertNotNull(coreFunction1);
      assertEquals(1, coreFunction1.getArgumentCount());
      assertEquals(23, coreFunction1.getFunctionCode());
      assertEquals(1, expressionArray0.length);
      
      // Undeclared exception!
//      try { 
        coreFunction1.functionSubstringBefore((EvalContext) null);
//        fail("Expecting exception: StackOverflowError");
      
//      } catch(StackOverflowError e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      Float float0 = new Float((float) 1048576);
      assertEquals(1048576.0F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      Constant constant0 = new Constant(float0);
      assertNotNull(constant0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      
      expressionArray0[0] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction(1048576, expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals(1048576, coreFunction0.getFunctionCode());
      assertEquals(1, expressionArray0.length);
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl)JXPathContext.newContext((Object) expressionArray0[0]);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertNotNull(jXPathContextReferenceImpl0);
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertEquals(1, expressionArray0.length);
      
      QName qName0 = new QName((String) null, (String) null);
      assertNotNull(qName0);
      assertNull(qName0.getName());
      assertNull(qName0.toString());
      assertNull(qName0.getPrefix());
      
      Locale locale0 = Locale.ROOT;
      assertNotNull(locale0);
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      
      NullPointer nullPointer0 = (NullPointer)NodePointer.newNodePointer(qName0, (Object) null, locale0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(nullPointer0);
      assertNull(qName0.getName());
      assertNull(qName0.toString());
      assertNull(qName0.getPrefix());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertFalse(nullPointer0.isContainer());
      assertTrue(nullPointer0.isRoot());
      assertFalse(nullPointer0.isAttribute());
      assertEquals(0, nullPointer0.getLength());
      assertTrue(nullPointer0.isNode());
      assertFalse(nullPointer0.isDynamicPropertyDeclarationSupported());
      assertNull(nullPointer0.getNamespaceURI());
      assertFalse(nullPointer0.isCollection());
      assertEquals(Integer.MIN_VALUE, nullPointer0.getIndex());
      assertTrue(nullPointer0.isLeaf());
      assertFalse(nullPointer0.isActual());
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl1 = new JXPathContextReferenceImpl(jXPathContextReferenceImpl0, coreFunction0, nullPointer0);
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl0));
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertNotNull(jXPathContextReferenceImpl1);
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals(1048576, coreFunction0.getFunctionCode());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertNull(qName0.getName());
      assertNull(qName0.toString());
      assertNull(qName0.getPrefix());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertFalse(nullPointer0.isContainer());
      assertTrue(nullPointer0.isRoot());
      assertFalse(nullPointer0.isAttribute());
      assertEquals(0, nullPointer0.getLength());
      assertTrue(nullPointer0.isNode());
      assertFalse(nullPointer0.isDynamicPropertyDeclarationSupported());
      assertNull(nullPointer0.getNamespaceURI());
      assertFalse(nullPointer0.isCollection());
      assertEquals(Integer.MIN_VALUE, nullPointer0.getIndex());
      assertTrue(nullPointer0.isLeaf());
      assertFalse(nullPointer0.isActual());
      assertFalse(jXPathContextReferenceImpl1.isLenient());
      assertEquals(1, expressionArray0.length);
      
      InitialContext initialContext0 = (InitialContext)jXPathContextReferenceImpl1.getAbsoluteRootContext();
      assertFalse(jXPathContextReferenceImpl0.equals((Object)jXPathContextReferenceImpl1));
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl0));
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertNotNull(initialContext0);
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals(1048576, coreFunction0.getFunctionCode());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertNull(qName0.getName());
      assertNull(qName0.toString());
      assertNull(qName0.getPrefix());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertFalse(nullPointer0.isContainer());
      assertTrue(nullPointer0.isRoot());
      assertFalse(nullPointer0.isAttribute());
      assertEquals(0, nullPointer0.getLength());
      assertTrue(nullPointer0.isNode());
      assertFalse(nullPointer0.isDynamicPropertyDeclarationSupported());
      assertNull(nullPointer0.getNamespaceURI());
      assertFalse(nullPointer0.isCollection());
      assertEquals(Integer.MIN_VALUE, nullPointer0.getIndex());
      assertTrue(nullPointer0.isLeaf());
      assertFalse(nullPointer0.isActual());
      assertFalse(jXPathContextReferenceImpl1.isLenient());
      assertEquals(0, initialContext0.getDocumentOrder());
      assertEquals(0, initialContext0.getPosition());
      assertFalse(initialContext0.isChildOrderingRequired());
      assertEquals(1, expressionArray0.length);
      assertNotSame(jXPathContextReferenceImpl0, jXPathContextReferenceImpl1);
      assertNotSame(jXPathContextReferenceImpl1, jXPathContextReferenceImpl0);
      
      QName qName1 = new QName("jU81-*J\n&$*13g");
      assertFalse(qName1.equals((Object)qName0));
      assertNotNull(qName1);
      assertEquals("jU81-*J\n&$*13g", qName1.toString());
      assertNull(qName1.getPrefix());
      assertEquals("jU81-*J\n&$*13g", qName1.getName());
      
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName1);
      assertFalse(qName1.equals((Object)qName0));
      assertNotNull(nodeNameTest0);
      assertEquals("jU81-*J\n&$*13g", qName1.toString());
      assertNull(qName1.getPrefix());
      assertEquals("jU81-*J\n&$*13g", qName1.getName());
      assertFalse(nodeNameTest0.isWildcard());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertEquals("jU81-*J\n&$*13g", nodeNameTest0.toString());
      
      NamespaceContext namespaceContext0 = new NamespaceContext(initialContext0, nodeNameTest0);
      assertFalse(jXPathContextReferenceImpl0.equals((Object)jXPathContextReferenceImpl1));
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl0));
      assertFalse(qName1.equals((Object)qName0));
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertNotNull(namespaceContext0);
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals(1048576, coreFunction0.getFunctionCode());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertNull(qName0.getName());
      assertNull(qName0.toString());
      assertNull(qName0.getPrefix());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertFalse(nullPointer0.isContainer());
      assertTrue(nullPointer0.isRoot());
      assertFalse(nullPointer0.isAttribute());
      assertEquals(0, nullPointer0.getLength());
      assertTrue(nullPointer0.isNode());
      assertFalse(nullPointer0.isDynamicPropertyDeclarationSupported());
      assertNull(nullPointer0.getNamespaceURI());
      assertFalse(nullPointer0.isCollection());
      assertEquals(Integer.MIN_VALUE, nullPointer0.getIndex());
      assertTrue(nullPointer0.isLeaf());
      assertFalse(nullPointer0.isActual());
      assertFalse(jXPathContextReferenceImpl1.isLenient());
      assertEquals(0, initialContext0.getDocumentOrder());
      assertEquals(0, initialContext0.getPosition());
      assertFalse(initialContext0.isChildOrderingRequired());
      assertEquals("jU81-*J\n&$*13g", qName1.toString());
      assertNull(qName1.getPrefix());
      assertEquals("jU81-*J\n&$*13g", qName1.getName());
      assertFalse(nodeNameTest0.isWildcard());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertEquals("jU81-*J\n&$*13g", nodeNameTest0.toString());
      assertEquals(0, namespaceContext0.getPosition());
      assertEquals(0, namespaceContext0.getDocumentOrder());
      assertFalse(namespaceContext0.isChildOrderingRequired());
      assertEquals(1, expressionArray0.length);
      
      Boolean boolean0 = (Boolean)coreFunction0.functionLang(initialContext0);
      assertFalse(jXPathContextReferenceImpl0.equals((Object)jXPathContextReferenceImpl1));
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl0));
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertFalse(boolean0);
      assertNotNull(boolean0);
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals(1048576, coreFunction0.getFunctionCode());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertNull(qName0.getName());
      assertNull(qName0.toString());
      assertNull(qName0.getPrefix());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertFalse(nullPointer0.isContainer());
      assertTrue(nullPointer0.isRoot());
      assertFalse(nullPointer0.isAttribute());
      assertEquals(0, nullPointer0.getLength());
      assertTrue(nullPointer0.isNode());
      assertFalse(nullPointer0.isDynamicPropertyDeclarationSupported());
      assertNull(nullPointer0.getNamespaceURI());
      assertFalse(nullPointer0.isCollection());
      assertEquals(Integer.MIN_VALUE, nullPointer0.getIndex());
      assertTrue(nullPointer0.isLeaf());
      assertFalse(nullPointer0.isActual());
      assertFalse(jXPathContextReferenceImpl1.isLenient());
      assertEquals(0, initialContext0.getDocumentOrder());
      assertEquals(0, initialContext0.getPosition());
      assertFalse(initialContext0.isChildOrderingRequired());
      assertEquals(1, expressionArray0.length);
      assertNotSame(jXPathContextReferenceImpl0, jXPathContextReferenceImpl1);
      assertNotSame(qName0, qName1);
      assertNotSame(jXPathContextReferenceImpl1, jXPathContextReferenceImpl0);
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      Float float0 = new Float((float) 1048576);
      assertEquals(1048576.0F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      Constant constant0 = new Constant(float0);
      assertNotNull(constant0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      
      expressionArray0[0] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction(1048576, expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals(1048576, coreFunction0.getFunctionCode());
      assertEquals(1, expressionArray0.length);
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl)JXPathContext.newContext((Object) expressionArray0[0]);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertNotNull(jXPathContextReferenceImpl0);
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertEquals(1, expressionArray0.length);
      
      QName qName0 = new QName((String) null, (String) null);
      assertNotNull(qName0);
      assertNull(qName0.toString());
      assertNull(qName0.getPrefix());
      assertNull(qName0.getName());
      
      Locale locale0 = Locale.ROOT;
      assertNotNull(locale0);
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      
      NullPointer nullPointer0 = (NullPointer)NodePointer.newNodePointer(qName0, (Object) null, locale0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(nullPointer0);
      assertNull(qName0.toString());
      assertNull(qName0.getPrefix());
      assertNull(qName0.getName());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertFalse(nullPointer0.isContainer());
      assertFalse(nullPointer0.isActual());
      assertEquals(0, nullPointer0.getLength());
      assertFalse(nullPointer0.isAttribute());
      assertTrue(nullPointer0.isNode());
      assertFalse(nullPointer0.isDynamicPropertyDeclarationSupported());
      assertTrue(nullPointer0.isLeaf());
      assertEquals(Integer.MIN_VALUE, nullPointer0.getIndex());
      assertTrue(nullPointer0.isRoot());
      assertFalse(nullPointer0.isCollection());
      assertNull(nullPointer0.getNamespaceURI());
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl1 = new JXPathContextReferenceImpl(jXPathContextReferenceImpl0, coreFunction0, nullPointer0);
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl0));
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertNotNull(jXPathContextReferenceImpl1);
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals(1048576, coreFunction0.getFunctionCode());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertNull(qName0.toString());
      assertNull(qName0.getPrefix());
      assertNull(qName0.getName());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertFalse(nullPointer0.isContainer());
      assertFalse(nullPointer0.isActual());
      assertEquals(0, nullPointer0.getLength());
      assertFalse(nullPointer0.isAttribute());
      assertTrue(nullPointer0.isNode());
      assertFalse(nullPointer0.isDynamicPropertyDeclarationSupported());
      assertTrue(nullPointer0.isLeaf());
      assertEquals(Integer.MIN_VALUE, nullPointer0.getIndex());
      assertTrue(nullPointer0.isRoot());
      assertFalse(nullPointer0.isCollection());
      assertNull(nullPointer0.getNamespaceURI());
      assertFalse(jXPathContextReferenceImpl1.isLenient());
      assertEquals(1, expressionArray0.length);
      
      InitialContext initialContext0 = (InitialContext)jXPathContextReferenceImpl1.getAbsoluteRootContext();
      assertFalse(jXPathContextReferenceImpl0.equals((Object)jXPathContextReferenceImpl1));
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl0));
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertNotNull(initialContext0);
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals(1048576, coreFunction0.getFunctionCode());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertNull(qName0.toString());
      assertNull(qName0.getPrefix());
      assertNull(qName0.getName());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertFalse(nullPointer0.isContainer());
      assertFalse(nullPointer0.isActual());
      assertEquals(0, nullPointer0.getLength());
      assertFalse(nullPointer0.isAttribute());
      assertTrue(nullPointer0.isNode());
      assertFalse(nullPointer0.isDynamicPropertyDeclarationSupported());
      assertTrue(nullPointer0.isLeaf());
      assertEquals(Integer.MIN_VALUE, nullPointer0.getIndex());
      assertTrue(nullPointer0.isRoot());
      assertFalse(nullPointer0.isCollection());
      assertNull(nullPointer0.getNamespaceURI());
      assertFalse(jXPathContextReferenceImpl1.isLenient());
      assertFalse(initialContext0.isChildOrderingRequired());
      assertEquals(0, initialContext0.getDocumentOrder());
      assertEquals(0, initialContext0.getPosition());
      assertEquals(1, expressionArray0.length);
      assertNotSame(jXPathContextReferenceImpl0, jXPathContextReferenceImpl1);
      assertNotSame(jXPathContextReferenceImpl1, jXPathContextReferenceImpl0);
      
      QName qName1 = new QName("jU81-*J\n&$*13g");
      assertFalse(qName1.equals((Object)qName0));
      assertNotNull(qName1);
      assertEquals("jU81-*J\n&$*13g", qName1.getName());
      assertNull(qName1.getPrefix());
      assertEquals("jU81-*J\n&$*13g", qName1.toString());
      
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName1);
      assertFalse(qName1.equals((Object)qName0));
      assertNotNull(nodeNameTest0);
      assertEquals("jU81-*J\n&$*13g", qName1.getName());
      assertNull(qName1.getPrefix());
      assertEquals("jU81-*J\n&$*13g", qName1.toString());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals("jU81-*J\n&$*13g", nodeNameTest0.toString());
      assertNull(nodeNameTest0.getNamespaceURI());
      
      String string0 = (String)coreFunction0.functionNamespaceURI(initialContext0);
      assertFalse(jXPathContextReferenceImpl0.equals((Object)jXPathContextReferenceImpl1));
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl0));
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals("", string0);
      assertNotNull(string0);
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals(1048576, coreFunction0.getFunctionCode());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertNull(qName0.toString());
      assertNull(qName0.getPrefix());
      assertNull(qName0.getName());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertFalse(nullPointer0.isContainer());
      assertFalse(nullPointer0.isActual());
      assertEquals(0, nullPointer0.getLength());
      assertFalse(nullPointer0.isAttribute());
      assertTrue(nullPointer0.isNode());
      assertFalse(nullPointer0.isDynamicPropertyDeclarationSupported());
      assertTrue(nullPointer0.isLeaf());
      assertEquals(Integer.MIN_VALUE, nullPointer0.getIndex());
      assertTrue(nullPointer0.isRoot());
      assertFalse(nullPointer0.isCollection());
      assertNull(nullPointer0.getNamespaceURI());
      assertFalse(jXPathContextReferenceImpl1.isLenient());
      assertFalse(initialContext0.isChildOrderingRequired());
      assertEquals(0, initialContext0.getDocumentOrder());
      assertEquals(0, initialContext0.getPosition());
      assertEquals(1, expressionArray0.length);
      assertNotSame(jXPathContextReferenceImpl0, jXPathContextReferenceImpl1);
      assertNotSame(qName0, qName1);
      assertNotSame(jXPathContextReferenceImpl1, jXPathContextReferenceImpl0);
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(21, (Expression[]) null);
      assertNotNull(coreFunction0);
      assertEquals(21, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      
      Integer integer0 = new Integer(890);
      assertEquals(890, (int)integer0);
      assertNotNull(integer0);
      
      boolean boolean0 = coreFunction0.computeContextDependent();
      assertFalse(boolean0);
      assertEquals(21, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(16, (Expression[]) null);
      assertNotNull(coreFunction0);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(16, coreFunction0.getFunctionCode());
      
      QName qName0 = new QName("2");
      assertNotNull(qName0);
      assertEquals("2", qName0.toString());
      assertNull(qName0.getPrefix());
      assertEquals("2", qName0.getName());
      
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
      assertNotNull(nodeNameTest0);
      assertEquals("2", qName0.toString());
      assertNull(qName0.getPrefix());
      assertEquals("2", qName0.getName());
      assertEquals("2", nodeNameTest0.toString());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertFalse(nodeNameTest0.isWildcard());
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      boolean boolean1 = coreFunction0.computeContextDependent();
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(16, coreFunction0.getFunctionCode());
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      QName qName0 = new QName("", "");
      assertNotNull(qName0);
      assertEquals(":", qName0.toString());
      assertEquals("", qName0.getPrefix());
      assertEquals("", qName0.getName());
      
      ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, expressionArray0);
      assertNotNull(extensionFunction0);
      assertEquals(":", qName0.toString());
      assertEquals("", qName0.getPrefix());
      assertEquals("", qName0.getName());
      assertTrue(extensionFunction0.computeContextDependent());
      assertEquals(1, expressionArray0.length);
      
      expressionArray0[0] = (Expression) extensionFunction0;
      CoreFunction coreFunction0 = new CoreFunction(23, expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals(23, coreFunction0.getFunctionCode());
      assertEquals(1, expressionArray0.length);
      
      Step[] stepArray0 = new Step[0];
      ExpressionPath expressionPath0 = new ExpressionPath(coreFunction0, expressionArray0, stepArray0);
      assertNotNull(expressionPath0);
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals(23, coreFunction0.getFunctionCode());
      assertEquals(1, expressionArray0.length);
      assertEquals(0, stepArray0.length);
      
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(58);
      assertNotNull(nodeTypeTest0);
      assertEquals(58, nodeTypeTest0.getNodeType());
      
      AncestorContext ancestorContext0 = new AncestorContext((EvalContext) null, true, nodeTypeTest0);
      assertNotNull(ancestorContext0);
      assertEquals(58, nodeTypeTest0.getNodeType());
      assertTrue(ancestorContext0.isChildOrderingRequired());
      assertEquals(0, ancestorContext0.getPosition());
      assertEquals((-1), ancestorContext0.getDocumentOrder());
      
      EvalContext evalContext0 = expressionPath0.evalSteps(ancestorContext0);
      assertNotNull(evalContext0);
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals(23, coreFunction0.getFunctionCode());
      assertEquals(58, nodeTypeTest0.getNodeType());
      assertTrue(ancestorContext0.isChildOrderingRequired());
      assertEquals(0, ancestorContext0.getPosition());
      assertEquals((-1), ancestorContext0.getDocumentOrder());
      assertTrue(evalContext0.isChildOrderingRequired());
      assertEquals(0, evalContext0.getPosition());
      assertEquals((-1), evalContext0.getDocumentOrder());
      assertEquals(1, expressionArray0.length);
      assertEquals(0, stepArray0.length);
      assertSame(ancestorContext0, evalContext0);
      assertSame(evalContext0, ancestorContext0);
      
      // Undeclared exception!
      coreFunction0.compute(evalContext0);
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(15, (Expression[]) null);
      assertNotNull(coreFunction0);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(15, coreFunction0.getFunctionCode());
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl)JXPathContext.newContext((Object) coreFunction0);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertNotNull(jXPathContextReferenceImpl0);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(15, coreFunction0.getFunctionCode());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl1 = new JXPathContextReferenceImpl(jXPathContextReferenceImpl0, coreFunction0, (Pointer) null);
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl0));
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertNotNull(jXPathContextReferenceImpl1);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(15, coreFunction0.getFunctionCode());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertFalse(jXPathContextReferenceImpl1.isLenient());
      
      InitialContext initialContext0 = (InitialContext)jXPathContextReferenceImpl1.getAbsoluteRootContext();
      assertFalse(jXPathContextReferenceImpl0.equals((Object)jXPathContextReferenceImpl1));
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl0));
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertNotNull(initialContext0);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(15, coreFunction0.getFunctionCode());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertFalse(jXPathContextReferenceImpl1.isLenient());
      assertEquals(0, initialContext0.getDocumentOrder());
      assertEquals(0, initialContext0.getPosition());
      assertFalse(initialContext0.isChildOrderingRequired());
      assertNotSame(jXPathContextReferenceImpl0, jXPathContextReferenceImpl1);
      assertNotSame(jXPathContextReferenceImpl1, jXPathContextReferenceImpl0);
      
      Double double0 = (Double)coreFunction0.computeValue(initialContext0);
      assertFalse(jXPathContextReferenceImpl0.equals((Object)jXPathContextReferenceImpl1));
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl0));
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(15.0, (double)double0, 0.01);
      assertNotNull(double0);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(15, coreFunction0.getFunctionCode());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertFalse(jXPathContextReferenceImpl1.isLenient());
      assertEquals(0, initialContext0.getDocumentOrder());
      assertEquals(0, initialContext0.getPosition());
      assertFalse(initialContext0.isChildOrderingRequired());
      assertNotSame(jXPathContextReferenceImpl0, jXPathContextReferenceImpl1);
      assertNotSame(jXPathContextReferenceImpl1, jXPathContextReferenceImpl0);
      
      String string0 = (String)coreFunction0.functionLocalName(initialContext0);
      assertFalse(jXPathContextReferenceImpl0.equals((Object)jXPathContextReferenceImpl1));
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl0));
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals("root", string0);
      assertNotNull(string0);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(15, coreFunction0.getFunctionCode());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertFalse(jXPathContextReferenceImpl1.isLenient());
      assertEquals(0, initialContext0.getDocumentOrder());
      assertEquals(0, initialContext0.getPosition());
      assertFalse(initialContext0.isChildOrderingRequired());
      assertNotSame(jXPathContextReferenceImpl0, jXPathContextReferenceImpl1);
      assertNotSame(jXPathContextReferenceImpl1, jXPathContextReferenceImpl0);
      
      QName qName0 = new QName("&c", "");
      assertNotNull(qName0);
      assertEquals("&c:", qName0.toString());
      assertEquals("&c", qName0.getPrefix());
      assertEquals("", qName0.getName());
      
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, "");
      assertNotNull(nodeNameTest0);
      assertEquals("&c:", qName0.toString());
      assertEquals("&c", qName0.getPrefix());
      assertEquals("", qName0.getName());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals("", nodeNameTest0.getNamespaceURI());
      assertEquals("&c:", nodeNameTest0.toString());
      
      SelfContext selfContext0 = new SelfContext(initialContext0, nodeNameTest0);
      assertFalse(jXPathContextReferenceImpl0.equals((Object)jXPathContextReferenceImpl1));
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl0));
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertNotNull(selfContext0);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(15, coreFunction0.getFunctionCode());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertFalse(jXPathContextReferenceImpl1.isLenient());
      assertEquals(0, initialContext0.getDocumentOrder());
      assertEquals(0, initialContext0.getPosition());
      assertFalse(initialContext0.isChildOrderingRequired());
      assertEquals("&c:", qName0.toString());
      assertEquals("&c", qName0.getPrefix());
      assertEquals("", qName0.getName());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals("", nodeNameTest0.getNamespaceURI());
      assertEquals("&c:", nodeNameTest0.toString());
      assertEquals(0, selfContext0.getDocumentOrder());
      assertEquals(0, selfContext0.getPosition());
      assertFalse(selfContext0.isChildOrderingRequired());
      
      // Undeclared exception!
//      try { 
        coreFunction0.functionNamespaceURI(selfContext0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      EvalContext evalContext0 = null;
      CoreFunction coreFunction0 = new CoreFunction(25, (Expression[]) null);
      assertNotNull(coreFunction0);
      assertEquals(25, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      
      // Undeclared exception!
//      try { 
        coreFunction0.computeValue((EvalContext) null);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // Incorrect number of arguments: floor()
//         //
//         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[7];
      Step[] stepArray0 = new Step[6];
      QName qName0 = new QName("", "org.apache.commons.jxpath.ri.compiler.CoreFunction");
      assertNotNull(qName0);
      assertEquals(":org.apache.commons.jxpath.ri.compiler.CoreFunction", qName0.toString());
      assertEquals("org.apache.commons.jxpath.ri.compiler.CoreFunction", qName0.getName());
      assertEquals("", qName0.getPrefix());
      
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, "a0;:i*CH5. +'rbp20");
      assertNotNull(nodeNameTest0);
      assertEquals(":org.apache.commons.jxpath.ri.compiler.CoreFunction", qName0.toString());
      assertEquals("org.apache.commons.jxpath.ri.compiler.CoreFunction", qName0.getName());
      assertEquals("", qName0.getPrefix());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals("a0;:i*CH5. +'rbp20", nodeNameTest0.getNamespaceURI());
      assertEquals(":org.apache.commons.jxpath.ri.compiler.CoreFunction", nodeNameTest0.toString());
      
      Step step0 = new Step((-856), nodeNameTest0, expressionArray0);
      assertNotNull(step0);
      assertEquals(":org.apache.commons.jxpath.ri.compiler.CoreFunction", qName0.toString());
      assertEquals("org.apache.commons.jxpath.ri.compiler.CoreFunction", qName0.getName());
      assertEquals("", qName0.getPrefix());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals("a0;:i*CH5. +'rbp20", nodeNameTest0.getNamespaceURI());
      assertEquals(":org.apache.commons.jxpath.ri.compiler.CoreFunction", nodeNameTest0.toString());
      assertEquals((-856), step0.getAxis());
      assertEquals(7, expressionArray0.length);
      
      stepArray0[0] = step0;
      Step step1 = new Step(40, nodeNameTest0, expressionArray0);
      assertFalse(step1.equals((Object)step0));
      assertNotNull(step1);
      assertEquals(":org.apache.commons.jxpath.ri.compiler.CoreFunction", qName0.toString());
      assertEquals("org.apache.commons.jxpath.ri.compiler.CoreFunction", qName0.getName());
      assertEquals("", qName0.getPrefix());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals("a0;:i*CH5. +'rbp20", nodeNameTest0.getNamespaceURI());
      assertEquals(":org.apache.commons.jxpath.ri.compiler.CoreFunction", nodeNameTest0.toString());
      assertEquals(40, step1.getAxis());
      assertEquals(7, expressionArray0.length);
      
      stepArray0[1] = step1;
      Step step2 = new Step((-856), nodeNameTest0, expressionArray0);
      assertFalse(step2.equals((Object)step1));
      assertFalse(step2.equals((Object)step0));
      assertNotNull(step2);
      assertEquals(":org.apache.commons.jxpath.ri.compiler.CoreFunction", qName0.toString());
      assertEquals("org.apache.commons.jxpath.ri.compiler.CoreFunction", qName0.getName());
      assertEquals("", qName0.getPrefix());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals("a0;:i*CH5. +'rbp20", nodeNameTest0.getNamespaceURI());
      assertEquals(":org.apache.commons.jxpath.ri.compiler.CoreFunction", nodeNameTest0.toString());
      assertEquals((-856), step2.getAxis());
      assertEquals(7, expressionArray0.length);
      
      stepArray0[2] = step2;
      Step step3 = new Step((-856), nodeNameTest0, expressionArray0);
      assertFalse(step3.equals((Object)step0));
      assertFalse(step3.equals((Object)step1));
      assertFalse(step3.equals((Object)step2));
      assertNotNull(step3);
      assertEquals(":org.apache.commons.jxpath.ri.compiler.CoreFunction", qName0.toString());
      assertEquals("org.apache.commons.jxpath.ri.compiler.CoreFunction", qName0.getName());
      assertEquals("", qName0.getPrefix());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals("a0;:i*CH5. +'rbp20", nodeNameTest0.getNamespaceURI());
      assertEquals(":org.apache.commons.jxpath.ri.compiler.CoreFunction", nodeNameTest0.toString());
      assertEquals((-856), step3.getAxis());
      assertEquals(7, expressionArray0.length);
      
      stepArray0[3] = step3;
      Step step4 = new Step(40, nodeNameTest0, expressionArray0);
      assertFalse(step4.equals((Object)step3));
      assertFalse(step4.equals((Object)step1));
      assertFalse(step4.equals((Object)step2));
      assertFalse(step4.equals((Object)step0));
      assertNotNull(step4);
      assertEquals(":org.apache.commons.jxpath.ri.compiler.CoreFunction", qName0.toString());
      assertEquals("org.apache.commons.jxpath.ri.compiler.CoreFunction", qName0.getName());
      assertEquals("", qName0.getPrefix());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals("a0;:i*CH5. +'rbp20", nodeNameTest0.getNamespaceURI());
      assertEquals(":org.apache.commons.jxpath.ri.compiler.CoreFunction", nodeNameTest0.toString());
      assertEquals(40, step4.getAxis());
      assertEquals(7, expressionArray0.length);
      
      stepArray0[4] = step4;
      Step step5 = new Step(126, nodeNameTest0, expressionArray0);
      assertFalse(step5.equals((Object)step3));
      assertFalse(step5.equals((Object)step4));
      assertFalse(step5.equals((Object)step1));
      assertFalse(step5.equals((Object)step2));
      assertFalse(step5.equals((Object)step0));
      assertNotNull(step5);
      assertEquals(":org.apache.commons.jxpath.ri.compiler.CoreFunction", qName0.toString());
      assertEquals("org.apache.commons.jxpath.ri.compiler.CoreFunction", qName0.getName());
      assertEquals("", qName0.getPrefix());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals("a0;:i*CH5. +'rbp20", nodeNameTest0.getNamespaceURI());
      assertEquals(":org.apache.commons.jxpath.ri.compiler.CoreFunction", nodeNameTest0.toString());
      assertEquals(126, step5.getAxis());
      assertEquals(7, expressionArray0.length);
      
      stepArray0[5] = step5;
      LocationPath locationPath0 = new LocationPath(false, stepArray0);
      assertNotNull(locationPath0);
      assertFalse(locationPath0.isAbsolute());
      assertEquals(6, stepArray0.length);
      
      expressionArray0[0] = (Expression) locationPath0;
      Constant constant0 = new Constant("");
      assertNotNull(constant0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      
      CoreOperationGreaterThanOrEqual coreOperationGreaterThanOrEqual0 = new CoreOperationGreaterThanOrEqual(constant0, constant0);
      assertNotNull(coreOperationGreaterThanOrEqual0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertEquals(">=", coreOperationGreaterThanOrEqual0.getSymbol());
      
      expressionArray0[1] = (Expression) coreOperationGreaterThanOrEqual0;
      Float float0 = new Float((double) 126);
      assertEquals(126.0F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      Constant constant1 = new Constant(float0);
      assertFalse(constant1.equals((Object)constant0));
      assertNotNull(constant1);
      assertFalse(constant1.isContextDependent());
      assertFalse(constant1.computeContextDependent());
      
      expressionArray0[2] = (Expression) constant1;
      ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, expressionArray0);
      assertNotNull(extensionFunction0);
      assertEquals(":org.apache.commons.jxpath.ri.compiler.CoreFunction", qName0.toString());
      assertEquals("org.apache.commons.jxpath.ri.compiler.CoreFunction", qName0.getName());
      assertEquals("", qName0.getPrefix());
      assertTrue(extensionFunction0.computeContextDependent());
      assertEquals(7, expressionArray0.length);
      
      expressionArray0[3] = (Expression) extensionFunction0;
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd(expressionArray0);
      assertNotNull(coreOperationAdd0);
      assertEquals("+", coreOperationAdd0.getSymbol());
      assertEquals(7, expressionArray0.length);
      
      expressionArray0[4] = (Expression) coreOperationAdd0;
      Constant constant2 = new Constant("a0;:i*CH5. +'rbp20");
      assertFalse(constant2.equals((Object)constant0));
      assertFalse(constant2.equals((Object)constant1));
      assertNotNull(constant2);
      assertFalse(constant2.isContextDependent());
      assertFalse(constant2.computeContextDependent());
      
      expressionArray0[5] = (Expression) constant2;
      CoreOperationEqual coreOperationEqual0 = new CoreOperationEqual(expressionArray0[0], coreOperationGreaterThanOrEqual0);
      assertFalse(constant0.equals((Object)constant2));
      assertFalse(constant0.equals((Object)constant1));
      assertNotNull(coreOperationEqual0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertEquals(">=", coreOperationGreaterThanOrEqual0.getSymbol());
      assertEquals("=", coreOperationEqual0.getSymbol());
      assertEquals(7, expressionArray0.length);
      
      expressionArray0[6] = (Expression) coreOperationEqual0;
      CoreFunction coreFunction0 = new CoreFunction(40, expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(40, coreFunction0.getFunctionCode());
      assertEquals(7, coreFunction0.getArgumentCount());
      assertEquals(7, expressionArray0.length);
      
      EvalContext[] evalContextArray0 = new EvalContext[5];
      evalContextArray0[0] = null;
      evalContextArray0[1] = null;
      evalContextArray0[2] = null;
      PredicateContext predicateContext0 = new PredicateContext(evalContextArray0[2], constant0);
      assertFalse(constant0.equals((Object)constant2));
      assertFalse(constant0.equals((Object)constant1));
      assertNotNull(predicateContext0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertEquals(0, predicateContext0.getPosition());
      assertEquals(0, predicateContext0.getDocumentOrder());
      assertFalse(predicateContext0.isChildOrderingRequired());
      assertEquals(5, evalContextArray0.length);
      
      evalContextArray0[3] = (EvalContext) predicateContext0;
      evalContextArray0[4] = null;
      UnionContext unionContext0 = new UnionContext((EvalContext) null, evalContextArray0);
      assertNotNull(unionContext0);
      assertEquals(1, unionContext0.getDocumentOrder());
      assertEquals(0, unionContext0.getPosition());
      assertTrue(unionContext0.isChildOrderingRequired());
      assertEquals(5, evalContextArray0.length);
      
      // Undeclared exception!
//      try { 
        coreFunction0.functionLang(unionContext0);
//        fail("Expecting exception: StackOverflowError");
      
//      } catch(StackOverflowError e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      Float float0 = new Float((float) 1048576);
      assertEquals(1048576.0F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      Constant constant0 = new Constant(float0);
      assertNotNull(constant0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      
      expressionArray0[0] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction(1048576, expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals(1048576, coreFunction0.getFunctionCode());
      assertEquals(1, expressionArray0.length);
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl)JXPathContext.newContext((Object) expressionArray0[0]);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertNotNull(jXPathContextReferenceImpl0);
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertEquals(1, expressionArray0.length);
      
      QName qName0 = new QName((String) null, (String) null);
      assertNotNull(qName0);
      assertNull(qName0.toString());
      assertNull(qName0.getPrefix());
      assertNull(qName0.getName());
      
      Locale locale0 = Locale.ROOT;
      assertNotNull(locale0);
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      
      NullPointer nullPointer0 = (NullPointer)NodePointer.newNodePointer(qName0, (Object) null, locale0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(nullPointer0);
      assertNull(qName0.toString());
      assertNull(qName0.getPrefix());
      assertNull(qName0.getName());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertTrue(nullPointer0.isLeaf());
      assertFalse(nullPointer0.isDynamicPropertyDeclarationSupported());
      assertFalse(nullPointer0.isCollection());
      assertNull(nullPointer0.getNamespaceURI());
      assertTrue(nullPointer0.isNode());
      assertEquals(Integer.MIN_VALUE, nullPointer0.getIndex());
      assertTrue(nullPointer0.isRoot());
      assertFalse(nullPointer0.isContainer());
      assertEquals(0, nullPointer0.getLength());
      assertFalse(nullPointer0.isActual());
      assertFalse(nullPointer0.isAttribute());
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl1 = new JXPathContextReferenceImpl(jXPathContextReferenceImpl0, coreFunction0, nullPointer0);
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl0));
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertNotNull(jXPathContextReferenceImpl1);
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals(1048576, coreFunction0.getFunctionCode());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertNull(qName0.toString());
      assertNull(qName0.getPrefix());
      assertNull(qName0.getName());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertTrue(nullPointer0.isLeaf());
      assertFalse(nullPointer0.isDynamicPropertyDeclarationSupported());
      assertFalse(nullPointer0.isCollection());
      assertNull(nullPointer0.getNamespaceURI());
      assertTrue(nullPointer0.isNode());
      assertEquals(Integer.MIN_VALUE, nullPointer0.getIndex());
      assertTrue(nullPointer0.isRoot());
      assertFalse(nullPointer0.isContainer());
      assertEquals(0, nullPointer0.getLength());
      assertFalse(nullPointer0.isActual());
      assertFalse(nullPointer0.isAttribute());
      assertFalse(jXPathContextReferenceImpl1.isLenient());
      assertEquals(1, expressionArray0.length);
      
      InitialContext initialContext0 = (InitialContext)jXPathContextReferenceImpl1.getAbsoluteRootContext();
      assertFalse(jXPathContextReferenceImpl0.equals((Object)jXPathContextReferenceImpl1));
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl0));
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertNotNull(initialContext0);
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals(1048576, coreFunction0.getFunctionCode());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertNull(qName0.toString());
      assertNull(qName0.getPrefix());
      assertNull(qName0.getName());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertTrue(nullPointer0.isLeaf());
      assertFalse(nullPointer0.isDynamicPropertyDeclarationSupported());
      assertFalse(nullPointer0.isCollection());
      assertNull(nullPointer0.getNamespaceURI());
      assertTrue(nullPointer0.isNode());
      assertEquals(Integer.MIN_VALUE, nullPointer0.getIndex());
      assertTrue(nullPointer0.isRoot());
      assertFalse(nullPointer0.isContainer());
      assertEquals(0, nullPointer0.getLength());
      assertFalse(nullPointer0.isActual());
      assertFalse(nullPointer0.isAttribute());
      assertFalse(jXPathContextReferenceImpl1.isLenient());
      assertEquals(0, initialContext0.getDocumentOrder());
      assertEquals(0, initialContext0.getPosition());
      assertFalse(initialContext0.isChildOrderingRequired());
      assertEquals(1, expressionArray0.length);
      assertNotSame(jXPathContextReferenceImpl0, jXPathContextReferenceImpl1);
      assertNotSame(jXPathContextReferenceImpl1, jXPathContextReferenceImpl0);
      
      QName qName1 = new QName("jU81-*J\n&$*13g");
      assertFalse(qName1.equals((Object)qName0));
      assertNotNull(qName1);
      assertEquals("jU81-*J\n&$*13g", qName1.getName());
      assertEquals("jU81-*J\n&$*13g", qName1.toString());
      assertNull(qName1.getPrefix());
      
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName1);
      assertFalse(qName1.equals((Object)qName0));
      assertNotNull(nodeNameTest0);
      assertEquals("jU81-*J\n&$*13g", qName1.getName());
      assertEquals("jU81-*J\n&$*13g", qName1.toString());
      assertNull(qName1.getPrefix());
      assertEquals("jU81-*J\n&$*13g", nodeNameTest0.toString());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertFalse(nodeNameTest0.isWildcard());
      
      NamespaceContext namespaceContext0 = new NamespaceContext(initialContext0, nodeNameTest0);
      assertFalse(jXPathContextReferenceImpl0.equals((Object)jXPathContextReferenceImpl1));
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl0));
      assertFalse(qName1.equals((Object)qName0));
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertNotNull(namespaceContext0);
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals(1048576, coreFunction0.getFunctionCode());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertNull(qName0.toString());
      assertNull(qName0.getPrefix());
      assertNull(qName0.getName());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertTrue(nullPointer0.isLeaf());
      assertFalse(nullPointer0.isDynamicPropertyDeclarationSupported());
      assertFalse(nullPointer0.isCollection());
      assertNull(nullPointer0.getNamespaceURI());
      assertTrue(nullPointer0.isNode());
      assertEquals(Integer.MIN_VALUE, nullPointer0.getIndex());
      assertTrue(nullPointer0.isRoot());
      assertFalse(nullPointer0.isContainer());
      assertEquals(0, nullPointer0.getLength());
      assertFalse(nullPointer0.isActual());
      assertFalse(nullPointer0.isAttribute());
      assertFalse(jXPathContextReferenceImpl1.isLenient());
      assertEquals(0, initialContext0.getDocumentOrder());
      assertEquals(0, initialContext0.getPosition());
      assertFalse(initialContext0.isChildOrderingRequired());
      assertEquals("jU81-*J\n&$*13g", qName1.getName());
      assertEquals("jU81-*J\n&$*13g", qName1.toString());
      assertNull(qName1.getPrefix());
      assertEquals("jU81-*J\n&$*13g", nodeNameTest0.toString());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertFalse(nodeNameTest0.isWildcard());
      assertFalse(namespaceContext0.isChildOrderingRequired());
      assertEquals(0, namespaceContext0.getDocumentOrder());
      assertEquals(0, namespaceContext0.getPosition());
      assertEquals(1, expressionArray0.length);
      
      Boolean boolean0 = (Boolean)coreFunction0.functionBoolean(namespaceContext0);
      assertFalse(jXPathContextReferenceImpl0.equals((Object)jXPathContextReferenceImpl1));
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl0));
      assertFalse(qName1.equals((Object)qName0));
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertTrue(boolean0);
      assertNotNull(boolean0);
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals(1048576, coreFunction0.getFunctionCode());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertNull(qName0.toString());
      assertNull(qName0.getPrefix());
      assertNull(qName0.getName());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertTrue(nullPointer0.isLeaf());
      assertFalse(nullPointer0.isDynamicPropertyDeclarationSupported());
      assertFalse(nullPointer0.isCollection());
      assertNull(nullPointer0.getNamespaceURI());
      assertTrue(nullPointer0.isNode());
      assertEquals(Integer.MIN_VALUE, nullPointer0.getIndex());
      assertTrue(nullPointer0.isRoot());
      assertFalse(nullPointer0.isContainer());
      assertEquals(0, nullPointer0.getLength());
      assertFalse(nullPointer0.isActual());
      assertFalse(nullPointer0.isAttribute());
      assertFalse(jXPathContextReferenceImpl1.isLenient());
      assertEquals(0, initialContext0.getDocumentOrder());
      assertEquals(0, initialContext0.getPosition());
      assertFalse(initialContext0.isChildOrderingRequired());
      assertEquals("jU81-*J\n&$*13g", qName1.getName());
      assertEquals("jU81-*J\n&$*13g", qName1.toString());
      assertNull(qName1.getPrefix());
      assertEquals("jU81-*J\n&$*13g", nodeNameTest0.toString());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertFalse(nodeNameTest0.isWildcard());
      assertFalse(namespaceContext0.isChildOrderingRequired());
      assertEquals(0, namespaceContext0.getDocumentOrder());
      assertEquals(0, namespaceContext0.getPosition());
      assertEquals(1, expressionArray0.length);
      assertNotSame(jXPathContextReferenceImpl0, jXPathContextReferenceImpl1);
      assertNotSame(qName0, qName1);
      assertNotSame(jXPathContextReferenceImpl1, jXPathContextReferenceImpl0);
      assertNotSame(qName1, qName0);
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[8];
      Step[] stepArray0 = new Step[2];
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("");
      assertNotNull(processingInstructionTest0);
      assertEquals("", processingInstructionTest0.getTarget());
      
      Step step0 = new Step((-205), processingInstructionTest0, expressionArray0);
      assertNotNull(step0);
      assertEquals("", processingInstructionTest0.getTarget());
      assertEquals((-205), step0.getAxis());
      assertEquals(8, expressionArray0.length);
      
      stepArray0[0] = step0;
      Step step1 = new Step(10, processingInstructionTest0, expressionArray0);
      assertFalse(step1.equals((Object)step0));
      assertNotNull(step1);
      assertEquals("", processingInstructionTest0.getTarget());
      assertEquals(10, step1.getAxis());
      assertEquals(8, expressionArray0.length);
      
      stepArray0[1] = step1;
      LocationPath locationPath0 = new LocationPath(true, stepArray0);
      assertNotNull(locationPath0);
      assertTrue(locationPath0.isAbsolute());
      assertEquals(2, stepArray0.length);
      
      NameAttributeTest nameAttributeTest0 = new NameAttributeTest(locationPath0, locationPath0);
      assertNotNull(nameAttributeTest0);
      assertTrue(locationPath0.isAbsolute());
      assertEquals("=", nameAttributeTest0.getSymbol());
      assertTrue(nameAttributeTest0.computeContextDependent());
      assertEquals(2, stepArray0.length);
      
      expressionArray0[0] = (Expression) nameAttributeTest0;
      Expression[] expressionArray1 = new Expression[4];
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      
      expressionArray1[0] = (Expression) locationPath0;
      CoreOperationSubtract coreOperationSubtract0 = new CoreOperationSubtract(expressionArray0[0], locationPath0);
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertNotNull(coreOperationSubtract0);
      assertTrue(locationPath0.isAbsolute());
      assertEquals("-", coreOperationSubtract0.getSymbol());
      assertEquals(8, expressionArray0.length);
      assertEquals(2, stepArray0.length);
      
      expressionArray1[1] = (Expression) coreOperationSubtract0;
      expressionArray1[2] = (Expression) locationPath0;
      expressionArray1[3] = (Expression) nameAttributeTest0;
      CoreOperationAnd coreOperationAnd0 = new CoreOperationAnd(expressionArray1);
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertNotNull(coreOperationAnd0);
      assertEquals("and", coreOperationAnd0.getSymbol());
      assertEquals(4, expressionArray1.length);
      
      expressionArray0[1] = (Expression) coreOperationAnd0;
      CoreOperationLessThan coreOperationLessThan0 = new CoreOperationLessThan(coreOperationSubtract0, expressionArray1[1]);
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertNotNull(coreOperationLessThan0);
      assertEquals("<", coreOperationLessThan0.getSymbol());
      assertTrue(locationPath0.isAbsolute());
      assertEquals("-", coreOperationSubtract0.getSymbol());
      assertEquals(8, expressionArray0.length);
      assertEquals(2, stepArray0.length);
      assertEquals(4, expressionArray1.length);
      
      expressionArray0[2] = (Expression) coreOperationLessThan0;
      CoreOperationGreaterThan coreOperationGreaterThan0 = new CoreOperationGreaterThan(expressionArray0[0], nameAttributeTest0);
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertNotNull(coreOperationGreaterThan0);
      assertEquals(">", coreOperationGreaterThan0.getSymbol());
      assertTrue(locationPath0.isAbsolute());
      assertEquals("=", nameAttributeTest0.getSymbol());
      assertTrue(nameAttributeTest0.computeContextDependent());
      assertEquals(8, expressionArray0.length);
      assertEquals(2, stepArray0.length);
      
      expressionArray0[3] = (Expression) coreOperationGreaterThan0;
      QName qName0 = new QName("", "\" could not be added as content to \"");
      assertNotNull(qName0);
      assertEquals(":\" could not be added as content to \"", qName0.toString());
      assertEquals("", qName0.getPrefix());
      assertEquals("\" could not be added as content to \"", qName0.getName());
      
      VariableReference variableReference0 = new VariableReference(qName0);
      assertNotNull(variableReference0);
      assertEquals(":\" could not be added as content to \"", qName0.toString());
      assertEquals("", qName0.getPrefix());
      assertEquals("\" could not be added as content to \"", qName0.getName());
      assertFalse(variableReference0.isContextDependent());
      assertFalse(variableReference0.computeContextDependent());
      
      expressionArray0[4] = (Expression) variableReference0;
      CoreOperationAnd coreOperationAnd1 = new CoreOperationAnd(expressionArray0);
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertFalse(coreOperationAnd1.equals((Object)coreOperationAnd0));
      assertNotNull(coreOperationAnd1);
      assertEquals("and", coreOperationAnd1.getSymbol());
      assertEquals(8, expressionArray0.length);
      
      expressionArray0[5] = (Expression) coreOperationAnd1;
      CoreOperationGreaterThanOrEqual coreOperationGreaterThanOrEqual0 = new CoreOperationGreaterThanOrEqual(expressionArray1[1], coreOperationGreaterThan0);
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertNotNull(coreOperationGreaterThanOrEqual0);
      assertEquals(">", coreOperationGreaterThan0.getSymbol());
      assertTrue(locationPath0.isAbsolute());
      assertEquals("=", nameAttributeTest0.getSymbol());
      assertTrue(nameAttributeTest0.computeContextDependent());
      assertEquals(">=", coreOperationGreaterThanOrEqual0.getSymbol());
      assertEquals(8, expressionArray0.length);
      assertEquals(2, stepArray0.length);
      assertEquals(4, expressionArray1.length);
      
      expressionArray0[6] = (Expression) coreOperationGreaterThanOrEqual0;
      LocationPath locationPath1 = new LocationPath(true, stepArray0);
      assertFalse(locationPath1.equals((Object)locationPath0));
      assertNotNull(locationPath1);
      assertTrue(locationPath1.isAbsolute());
      assertEquals(2, stepArray0.length);
      
      expressionArray0[7] = (Expression) locationPath1;
      CoreFunction coreFunction0 = new CoreFunction(150, expressionArray0);
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertNotNull(coreFunction0);
      assertEquals(8, coreFunction0.getArgumentCount());
      assertEquals(150, coreFunction0.getFunctionCode());
      assertEquals(8, expressionArray0.length);
      
      // Undeclared exception!
      coreFunction0.functionLast((EvalContext) null);
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      Expression[] expressionArray0 = new Expression[8];
      CoreOperationAnd coreOperationAnd0 = new CoreOperationAnd(expressionArray0);
      assertNotNull(coreOperationAnd0);
      assertEquals("and", coreOperationAnd0.getSymbol());
      assertEquals(8, expressionArray0.length);
      
      expressionArray0[0] = (Expression) coreOperationAnd0;
      CoreOperationNegate coreOperationNegate0 = new CoreOperationNegate(coreOperationAnd0);
      assertNotNull(coreOperationNegate0);
      assertEquals("and", coreOperationAnd0.getSymbol());
      assertEquals("-", coreOperationNegate0.getSymbol());
      assertEquals(8, expressionArray0.length);
      
      expressionArray0[1] = (Expression) coreOperationNegate0;
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd(expressionArray0);
      assertNotNull(coreOperationAdd0);
      assertEquals("+", coreOperationAdd0.getSymbol());
      assertEquals(8, expressionArray0.length);
      
      expressionArray0[2] = (Expression) coreOperationAdd0;
      CoreFunction coreFunction0 = new CoreFunction(2, expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(8, coreFunction0.getArgumentCount());
      assertEquals(2, coreFunction0.getFunctionCode());
      assertEquals(8, expressionArray0.length);
      
      expressionArray0[3] = (Expression) coreFunction0;
      CoreOperationEqual coreOperationEqual0 = new CoreOperationEqual(coreOperationAnd0, coreOperationAdd0);
      assertNotNull(coreOperationEqual0);
      assertEquals("and", coreOperationAnd0.getSymbol());
      assertEquals("+", coreOperationAdd0.getSymbol());
      assertEquals("=", coreOperationEqual0.getSymbol());
      assertEquals(8, expressionArray0.length);
      
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual(coreOperationEqual0, coreFunction0);
      assertNotNull(coreOperationLessThanOrEqual0);
      assertEquals("and", coreOperationAnd0.getSymbol());
      assertEquals("+", coreOperationAdd0.getSymbol());
      assertEquals(8, coreFunction0.getArgumentCount());
      assertEquals(2, coreFunction0.getFunctionCode());
      assertEquals("=", coreOperationEqual0.getSymbol());
      assertEquals("<=", coreOperationLessThanOrEqual0.getSymbol());
      assertEquals(8, expressionArray0.length);
      
      expressionArray0[4] = (Expression) coreOperationLessThanOrEqual0;
      CoreOperationMod coreOperationMod0 = new CoreOperationMod(expressionArray0[3], coreOperationEqual0);
      assertNotNull(coreOperationMod0);
      assertEquals("and", coreOperationAnd0.getSymbol());
      assertEquals("+", coreOperationAdd0.getSymbol());
      assertEquals("=", coreOperationEqual0.getSymbol());
      assertEquals("mod", coreOperationMod0.getSymbol());
      assertEquals(8, expressionArray0.length);
      
      expressionArray0[5] = (Expression) coreOperationMod0;
      Expression[] expressionArray1 = new Expression[6];
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      
      expressionArray1[0] = (Expression) coreOperationLessThanOrEqual0;
      expressionArray1[1] = (Expression) coreOperationLessThanOrEqual0;
      expressionArray1[2] = (Expression) coreFunction0;
      CoreOperationSubtract coreOperationSubtract0 = new CoreOperationSubtract(coreFunction0, expressionArray0[0]);
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertNotNull(coreOperationSubtract0);
      assertEquals("-", coreOperationSubtract0.getSymbol());
      assertEquals(8, coreFunction0.getArgumentCount());
      assertEquals(2, coreFunction0.getFunctionCode());
      assertEquals(8, expressionArray0.length);
      
      expressionArray1[3] = (Expression) coreOperationSubtract0;
      expressionArray1[4] = (Expression) coreOperationMod0;
      expressionArray1[5] = (Expression) coreOperationMod0;
      CoreFunction coreFunction1 = new CoreFunction((-2200), expressionArray1);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertNotNull(coreFunction1);
      assertEquals((-2200), coreFunction1.getFunctionCode());
      assertEquals(6, coreFunction1.getArgumentCount());
      assertEquals(6, expressionArray1.length);
      
      Step[] stepArray0 = new Step[0];
      ExpressionPath expressionPath0 = new ExpressionPath(coreFunction1, expressionArray1, stepArray0);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertNotNull(expressionPath0);
      assertEquals((-2200), coreFunction1.getFunctionCode());
      assertEquals(6, coreFunction1.getArgumentCount());
      assertEquals(0, stepArray0.length);
      assertEquals(6, expressionArray1.length);
      
      expressionArray0[6] = (Expression) expressionPath0;
      CoreOperationGreaterThan coreOperationGreaterThan0 = new CoreOperationGreaterThan(coreFunction1, expressionPath0);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertNotNull(coreOperationGreaterThan0);
      assertEquals((-2200), coreFunction1.getFunctionCode());
      assertEquals(6, coreFunction1.getArgumentCount());
      assertEquals(">", coreOperationGreaterThan0.getSymbol());
      assertEquals(0, stepArray0.length);
      assertEquals(6, expressionArray1.length);
      
      expressionArray0[7] = (Expression) coreOperationGreaterThan0;
      CoreFunction coreFunction2 = new CoreFunction(1, expressionArray0);
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertFalse(coreFunction2.equals((Object)coreFunction0));
      assertFalse(coreFunction2.equals((Object)coreFunction1));
      assertNotNull(coreFunction2);
      assertEquals(8, coreFunction2.getArgumentCount());
      assertEquals(1, coreFunction2.getFunctionCode());
      assertEquals(8, expressionArray0.length);
      
      EvalContext evalContext0 = null;
      CoreFunction coreFunction3 = new CoreFunction(0, expressionArray0);
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertFalse(coreFunction3.equals((Object)coreFunction0));
      assertFalse(coreFunction3.equals((Object)coreFunction2));
      assertFalse(coreFunction3.equals((Object)coreFunction1));
      assertNotNull(coreFunction3);
      assertEquals(8, coreFunction3.getArgumentCount());
      assertEquals(0, coreFunction3.getFunctionCode());
      assertEquals(8, expressionArray0.length);
      
      // Undeclared exception!
      coreFunction3.functionNumber((EvalContext) null);
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      Float float0 = new Float((float) 1048576);
      assertEquals(1048576.0F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      Constant constant0 = new Constant(float0);
      assertNotNull(constant0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      
      expressionArray0[0] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction(1048576, expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(1048576, coreFunction0.getFunctionCode());
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals(1, expressionArray0.length);
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl)JXPathContext.newContext((Object) expressionArray0[0]);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertNotNull(jXPathContextReferenceImpl0);
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertEquals(1, expressionArray0.length);
      
      QName qName0 = new QName((String) null, (String) null);
      assertNotNull(qName0);
      assertNull(qName0.getPrefix());
      assertNull(qName0.getName());
      assertNull(qName0.toString());
      
      Locale locale0 = Locale.ROOT;
      assertNotNull(locale0);
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      
      NullPointer nullPointer0 = (NullPointer)NodePointer.newNodePointer(qName0, (Object) null, locale0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(nullPointer0);
      assertNull(qName0.getPrefix());
      assertNull(qName0.getName());
      assertNull(qName0.toString());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertTrue(nullPointer0.isNode());
      assertFalse(nullPointer0.isCollection());
      assertNull(nullPointer0.getNamespaceURI());
      assertEquals(0, nullPointer0.getLength());
      assertFalse(nullPointer0.isDynamicPropertyDeclarationSupported());
      assertTrue(nullPointer0.isLeaf());
      assertFalse(nullPointer0.isActual());
      assertFalse(nullPointer0.isAttribute());
      assertEquals(Integer.MIN_VALUE, nullPointer0.getIndex());
      assertFalse(nullPointer0.isContainer());
      assertTrue(nullPointer0.isRoot());
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl1 = new JXPathContextReferenceImpl(jXPathContextReferenceImpl0, coreFunction0, nullPointer0);
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl0));
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertNotNull(jXPathContextReferenceImpl1);
      assertEquals(1048576, coreFunction0.getFunctionCode());
      assertEquals(1, coreFunction0.getArgumentCount());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertNull(qName0.getPrefix());
      assertNull(qName0.getName());
      assertNull(qName0.toString());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertTrue(nullPointer0.isNode());
      assertFalse(nullPointer0.isCollection());
      assertNull(nullPointer0.getNamespaceURI());
      assertEquals(0, nullPointer0.getLength());
      assertFalse(nullPointer0.isDynamicPropertyDeclarationSupported());
      assertTrue(nullPointer0.isLeaf());
      assertFalse(nullPointer0.isActual());
      assertFalse(nullPointer0.isAttribute());
      assertEquals(Integer.MIN_VALUE, nullPointer0.getIndex());
      assertFalse(nullPointer0.isContainer());
      assertTrue(nullPointer0.isRoot());
      assertFalse(jXPathContextReferenceImpl1.isLenient());
      assertEquals(1, expressionArray0.length);
      
      InitialContext initialContext0 = (InitialContext)jXPathContextReferenceImpl1.getAbsoluteRootContext();
      assertFalse(jXPathContextReferenceImpl0.equals((Object)jXPathContextReferenceImpl1));
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl0));
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertNotNull(initialContext0);
      assertEquals(1048576, coreFunction0.getFunctionCode());
      assertEquals(1, coreFunction0.getArgumentCount());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertNull(qName0.getPrefix());
      assertNull(qName0.getName());
      assertNull(qName0.toString());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertTrue(nullPointer0.isNode());
      assertFalse(nullPointer0.isCollection());
      assertNull(nullPointer0.getNamespaceURI());
      assertEquals(0, nullPointer0.getLength());
      assertFalse(nullPointer0.isDynamicPropertyDeclarationSupported());
      assertTrue(nullPointer0.isLeaf());
      assertFalse(nullPointer0.isActual());
      assertFalse(nullPointer0.isAttribute());
      assertEquals(Integer.MIN_VALUE, nullPointer0.getIndex());
      assertFalse(nullPointer0.isContainer());
      assertTrue(nullPointer0.isRoot());
      assertFalse(jXPathContextReferenceImpl1.isLenient());
      assertEquals(0, initialContext0.getDocumentOrder());
      assertEquals(0, initialContext0.getPosition());
      assertFalse(initialContext0.isChildOrderingRequired());
      assertEquals(1, expressionArray0.length);
      assertNotSame(jXPathContextReferenceImpl0, jXPathContextReferenceImpl1);
      assertNotSame(jXPathContextReferenceImpl1, jXPathContextReferenceImpl0);
      
      QName qName1 = new QName("jU81-*J\n&$*13g");
      assertFalse(qName1.equals((Object)qName0));
      assertNotNull(qName1);
      assertNull(qName1.getPrefix());
      assertEquals("jU81-*J\n&$*13g", qName1.toString());
      assertEquals("jU81-*J\n&$*13g", qName1.getName());
      
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName1);
      assertFalse(qName1.equals((Object)qName0));
      assertNotNull(nodeNameTest0);
      assertNull(qName1.getPrefix());
      assertEquals("jU81-*J\n&$*13g", qName1.toString());
      assertEquals("jU81-*J\n&$*13g", qName1.getName());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals("jU81-*J\n&$*13g", nodeNameTest0.toString());
      assertNull(nodeNameTest0.getNamespaceURI());
      
      NamespaceContext namespaceContext0 = new NamespaceContext(initialContext0, nodeNameTest0);
      assertFalse(jXPathContextReferenceImpl0.equals((Object)jXPathContextReferenceImpl1));
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl0));
      assertFalse(qName1.equals((Object)qName0));
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertNotNull(namespaceContext0);
      assertEquals(1048576, coreFunction0.getFunctionCode());
      assertEquals(1, coreFunction0.getArgumentCount());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertNull(qName0.getPrefix());
      assertNull(qName0.getName());
      assertNull(qName0.toString());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertTrue(nullPointer0.isNode());
      assertFalse(nullPointer0.isCollection());
      assertNull(nullPointer0.getNamespaceURI());
      assertEquals(0, nullPointer0.getLength());
      assertFalse(nullPointer0.isDynamicPropertyDeclarationSupported());
      assertTrue(nullPointer0.isLeaf());
      assertFalse(nullPointer0.isActual());
      assertFalse(nullPointer0.isAttribute());
      assertEquals(Integer.MIN_VALUE, nullPointer0.getIndex());
      assertFalse(nullPointer0.isContainer());
      assertTrue(nullPointer0.isRoot());
      assertFalse(jXPathContextReferenceImpl1.isLenient());
      assertEquals(0, initialContext0.getDocumentOrder());
      assertEquals(0, initialContext0.getPosition());
      assertFalse(initialContext0.isChildOrderingRequired());
      assertNull(qName1.getPrefix());
      assertEquals("jU81-*J\n&$*13g", qName1.toString());
      assertEquals("jU81-*J\n&$*13g", qName1.getName());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals("jU81-*J\n&$*13g", nodeNameTest0.toString());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertEquals(0, namespaceContext0.getDocumentOrder());
      assertFalse(namespaceContext0.isChildOrderingRequired());
      assertEquals(0, namespaceContext0.getPosition());
      assertEquals(1, expressionArray0.length);
      
      String string0 = (String)coreFunction0.functionName(namespaceContext0);
      assertFalse(jXPathContextReferenceImpl0.equals((Object)jXPathContextReferenceImpl1));
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl0));
      assertFalse(qName1.equals((Object)qName0));
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals("", string0);
      assertNotNull(string0);
      assertEquals(1048576, coreFunction0.getFunctionCode());
      assertEquals(1, coreFunction0.getArgumentCount());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertNull(qName0.getPrefix());
      assertNull(qName0.getName());
      assertNull(qName0.toString());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertTrue(nullPointer0.isNode());
      assertFalse(nullPointer0.isCollection());
      assertNull(nullPointer0.getNamespaceURI());
      assertEquals(0, nullPointer0.getLength());
      assertFalse(nullPointer0.isDynamicPropertyDeclarationSupported());
      assertTrue(nullPointer0.isLeaf());
      assertFalse(nullPointer0.isActual());
      assertFalse(nullPointer0.isAttribute());
      assertEquals(Integer.MIN_VALUE, nullPointer0.getIndex());
      assertFalse(nullPointer0.isContainer());
      assertTrue(nullPointer0.isRoot());
      assertFalse(jXPathContextReferenceImpl1.isLenient());
      assertEquals(0, initialContext0.getDocumentOrder());
      assertEquals(0, initialContext0.getPosition());
      assertFalse(initialContext0.isChildOrderingRequired());
      assertNull(qName1.getPrefix());
      assertEquals("jU81-*J\n&$*13g", qName1.toString());
      assertEquals("jU81-*J\n&$*13g", qName1.getName());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals("jU81-*J\n&$*13g", nodeNameTest0.toString());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertEquals(0, namespaceContext0.getDocumentOrder());
      assertFalse(namespaceContext0.isChildOrderingRequired());
      assertEquals(0, namespaceContext0.getPosition());
      assertEquals(1, expressionArray0.length);
      assertNotSame(jXPathContextReferenceImpl0, jXPathContextReferenceImpl1);
      assertNotSame(qName0, qName1);
      assertNotSame(jXPathContextReferenceImpl1, jXPathContextReferenceImpl0);
      assertNotSame(qName1, qName0);
      
      String string1 = (String)coreFunction0.functionNormalizeSpace(initialContext0);
      assertFalse(jXPathContextReferenceImpl0.equals((Object)jXPathContextReferenceImpl1));
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl0));
      assertFalse(string1.equals((Object)string0));
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals("1048576", string1);
      assertNotNull(string1);
      assertEquals(1048576, coreFunction0.getFunctionCode());
      assertEquals(1, coreFunction0.getArgumentCount());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertNull(qName0.getPrefix());
      assertNull(qName0.getName());
      assertNull(qName0.toString());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertTrue(nullPointer0.isNode());
      assertFalse(nullPointer0.isCollection());
      assertNull(nullPointer0.getNamespaceURI());
      assertEquals(0, nullPointer0.getLength());
      assertFalse(nullPointer0.isDynamicPropertyDeclarationSupported());
      assertTrue(nullPointer0.isLeaf());
      assertFalse(nullPointer0.isActual());
      assertFalse(nullPointer0.isAttribute());
      assertEquals(Integer.MIN_VALUE, nullPointer0.getIndex());
      assertFalse(nullPointer0.isContainer());
      assertTrue(nullPointer0.isRoot());
      assertFalse(jXPathContextReferenceImpl1.isLenient());
      assertEquals(0, initialContext0.getDocumentOrder());
      assertEquals(0, initialContext0.getPosition());
      assertFalse(initialContext0.isChildOrderingRequired());
      assertEquals(1, expressionArray0.length);
      assertNotSame(jXPathContextReferenceImpl0, jXPathContextReferenceImpl1);
      assertNotSame(qName0, qName1);
      assertNotSame(jXPathContextReferenceImpl1, jXPathContextReferenceImpl0);
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      QName qName0 = new QName((String) null, (String) null);
      assertNotNull(qName0);
      assertNull(qName0.getName());
      assertNull(qName0.toString());
      assertNull(qName0.getPrefix());
      
      Locale locale0 = Locale.GERMANY;
      assertNotNull(locale0);
      assertEquals("de_DE", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("DEU", locale0.getISO3Country());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("DE", locale0.getCountry());
      assertEquals("de", locale0.getLanguage());
      
      int int0 = 5;
      CoreFunction coreFunction0 = new CoreFunction(5, (Expression[]) null);
      assertNotNull(coreFunction0);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(5, coreFunction0.getFunctionCode());
      
      String string0 = coreFunction0.getFunctionName();
      assertEquals("local-name", string0);
      assertNotNull(string0);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(5, coreFunction0.getFunctionCode());
      
      // Undeclared exception!
//      try { 
        coreFunction0.iterate((EvalContext) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(8, expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(8, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(0, expressionArray0.length);
      
      String string0 = coreFunction0.toString();
      assertEquals("string()", string0);
      assertNotNull(string0);
      assertEquals(8, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(0, expressionArray0.length);
      
      boolean boolean0 = coreFunction0.computeContextDependent();
      assertTrue(boolean0);
      assertEquals(8, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(0, expressionArray0.length);
      
      EvalContext evalContext0 = null;
      Expression[] expressionArray1 = new Expression[1];
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      
      expressionArray1[0] = (Expression) coreFunction0;
      // Undeclared exception!
//      try { 
        coreFunction0.functionName((EvalContext) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[8];
      ExpressionPath expressionPath0 = new ExpressionPath((Expression) null, expressionArray0, (Step[]) null);
      assertNotNull(expressionPath0);
      assertEquals(8, expressionArray0.length);
      
      CoreOperationSubtract coreOperationSubtract0 = new CoreOperationSubtract(expressionPath0, (Expression) null);
      assertNotNull(coreOperationSubtract0);
      assertEquals("-", coreOperationSubtract0.getSymbol());
      assertEquals(8, expressionArray0.length);
      
      expressionArray0[0] = (Expression) coreOperationSubtract0;
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd(expressionArray0);
      assertNotNull(coreOperationAdd0);
      assertEquals("+", coreOperationAdd0.getSymbol());
      assertEquals(8, expressionArray0.length);
      
      CoreOperationEqual coreOperationEqual0 = new CoreOperationEqual(coreOperationSubtract0, coreOperationAdd0);
      assertNotNull(coreOperationEqual0);
      assertEquals("-", coreOperationSubtract0.getSymbol());
      assertEquals("+", coreOperationAdd0.getSymbol());
      assertEquals("=", coreOperationEqual0.getSymbol());
      assertEquals(8, expressionArray0.length);
      
      expressionArray0[1] = (Expression) coreOperationEqual0;
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual(coreOperationSubtract0, coreOperationAdd0);
      assertNotNull(coreOperationLessThanOrEqual0);
      assertEquals("-", coreOperationSubtract0.getSymbol());
      assertEquals("+", coreOperationAdd0.getSymbol());
      assertEquals("<=", coreOperationLessThanOrEqual0.getSymbol());
      assertEquals(8, expressionArray0.length);
      
      CoreOperationDivide coreOperationDivide0 = new CoreOperationDivide(coreOperationLessThanOrEqual0, (Expression) null);
      assertNotNull(coreOperationDivide0);
      assertEquals("-", coreOperationSubtract0.getSymbol());
      assertEquals("+", coreOperationAdd0.getSymbol());
      assertEquals("<=", coreOperationLessThanOrEqual0.getSymbol());
      assertEquals("div", coreOperationDivide0.getSymbol());
      assertEquals(8, expressionArray0.length);
      
      expressionArray0[2] = (Expression) coreOperationDivide0;
      QName qName0 = new QName("");
      assertNotNull(qName0);
      assertEquals("", qName0.toString());
      assertEquals("", qName0.getName());
      assertNull(qName0.getPrefix());
      
      VariableReference variableReference0 = new VariableReference(qName0);
      assertNotNull(variableReference0);
      assertEquals("", qName0.toString());
      assertEquals("", qName0.getName());
      assertNull(qName0.getPrefix());
      assertFalse(variableReference0.isContextDependent());
      assertFalse(variableReference0.computeContextDependent());
      
      expressionArray0[3] = (Expression) variableReference0;
      CoreOperationAdd coreOperationAdd1 = new CoreOperationAdd(expressionArray0);
      assertFalse(coreOperationAdd1.equals((Object)coreOperationAdd0));
      assertNotNull(coreOperationAdd1);
      assertEquals("+", coreOperationAdd1.getSymbol());
      assertEquals(8, expressionArray0.length);
      
      CoreOperationNotEqual coreOperationNotEqual0 = new CoreOperationNotEqual(coreOperationAdd1, coreOperationAdd0);
      assertFalse(coreOperationAdd0.equals((Object)coreOperationAdd1));
      assertFalse(coreOperationAdd1.equals((Object)coreOperationAdd0));
      assertNotNull(coreOperationNotEqual0);
      assertEquals("+", coreOperationAdd0.getSymbol());
      assertEquals("+", coreOperationAdd1.getSymbol());
      assertEquals("!=", coreOperationNotEqual0.getSymbol());
      assertEquals(8, expressionArray0.length);
      
      expressionArray0[4] = (Expression) coreOperationNotEqual0;
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      CoreOperationMod coreOperationMod0 = new CoreOperationMod(expressionArray0[0], expressionPath0);
      assertNotNull(coreOperationMod0);
      assertEquals("mod", coreOperationMod0.getSymbol());
      assertEquals(8, expressionArray0.length);
      
      expressionArray0[5] = (Expression) coreOperationMod0;
      CoreOperationMod coreOperationMod1 = new CoreOperationMod(coreOperationAdd0, coreOperationNotEqual0);
      assertFalse(coreOperationMod1.equals((Object)coreOperationMod0));
      assertFalse(coreOperationAdd0.equals((Object)coreOperationAdd1));
      assertFalse(coreOperationAdd1.equals((Object)coreOperationAdd0));
      assertNotNull(coreOperationMod1);
      assertEquals("mod", coreOperationMod1.getSymbol());
      assertEquals("+", coreOperationAdd0.getSymbol());
      assertEquals("+", coreOperationAdd1.getSymbol());
      assertEquals("!=", coreOperationNotEqual0.getSymbol());
      assertEquals(8, expressionArray0.length);
      
      expressionArray0[6] = (Expression) coreOperationMod1;
      ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, expressionArray0);
      assertNotNull(extensionFunction0);
      assertTrue(extensionFunction0.computeContextDependent());
      assertEquals("", qName0.toString());
      assertEquals("", qName0.getName());
      assertNull(qName0.getPrefix());
      assertEquals(8, expressionArray0.length);
      
      expressionArray0[7] = (Expression) extensionFunction0;
      CoreFunction coreFunction0 = new CoreFunction((-1570), expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals((-1570), coreFunction0.getFunctionCode());
      assertEquals(8, coreFunction0.getArgumentCount());
      assertEquals(8, expressionArray0.length);
      
      CoreOperationEqual coreOperationEqual1 = (CoreOperationEqual)coreFunction0.getArg2();
      assertNotNull(coreOperationEqual1);
      assertEquals((-1570), coreFunction0.getFunctionCode());
      assertEquals(8, coreFunction0.getArgumentCount());
      assertEquals("=", coreOperationEqual1.getSymbol());
      assertEquals(8, expressionArray0.length);
      assertSame(coreOperationEqual1, coreOperationEqual0);
      
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest((-1570));
      assertNotNull(nodeTypeTest0);
      assertEquals((-1570), nodeTypeTest0.getNodeType());
      
      DescendantContext descendantContext0 = new DescendantContext((EvalContext) null, true, nodeTypeTest0);
      assertNotNull(descendantContext0);
      assertEquals((-1570), nodeTypeTest0.getNodeType());
      assertEquals(0, descendantContext0.getDocumentOrder());
      assertEquals(0, descendantContext0.getPosition());
      assertTrue(descendantContext0.isChildOrderingRequired());
      
      // Undeclared exception!
//      try { 
        coreFunction0.functionContains(descendantContext0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.evosuite.runtime.System", e);
//      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      EvalContext evalContext0 = null;
      CoreFunction coreFunction0 = new CoreFunction(16, (Expression[]) null);
      assertNotNull(coreFunction0);
      assertEquals(16, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      
      CoreFunction coreFunction1 = new CoreFunction(16, (Expression[]) null);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertNotNull(coreFunction1);
      assertEquals(16, coreFunction1.getFunctionCode());
      assertEquals(0, coreFunction1.getArgumentCount());
      
      // Undeclared exception!
//      try { 
        coreFunction0.computeValue((EvalContext) null);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // Incorrect number of arguments: normalize-space()
//         //
//         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      Expression[] expressionArray0 = new Expression[8];
      CoreOperationAnd coreOperationAnd0 = new CoreOperationAnd(expressionArray0);
      assertNotNull(coreOperationAnd0);
      assertEquals("and", coreOperationAnd0.getSymbol());
      assertEquals(8, expressionArray0.length);
      
      expressionArray0[0] = (Expression) coreOperationAnd0;
      CoreOperationEqual coreOperationEqual0 = new CoreOperationEqual(coreOperationAnd0, coreOperationAnd0);
      assertNotNull(coreOperationEqual0);
      assertEquals("and", coreOperationAnd0.getSymbol());
      assertEquals("=", coreOperationEqual0.getSymbol());
      assertEquals(8, expressionArray0.length);
      
      expressionArray0[1] = (Expression) coreOperationEqual0;
      Constant constant0 = new Constant("Iv");
      assertNotNull(constant0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      
      expressionArray0[2] = (Expression) constant0;
      QName qName0 = new QName("Iv", "");
      assertNotNull(qName0);
      assertEquals("", qName0.getName());
      assertEquals("Iv", qName0.getPrefix());
      assertEquals("Iv:", qName0.toString());
      
      ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, expressionArray0);
      assertNotNull(extensionFunction0);
      assertEquals("", qName0.getName());
      assertEquals("Iv", qName0.getPrefix());
      assertEquals("Iv:", qName0.toString());
      assertTrue(extensionFunction0.computeContextDependent());
      assertEquals(8, expressionArray0.length);
      
      expressionArray0[3] = (Expression) extensionFunction0;
      CoreOperationLessThan coreOperationLessThan0 = new CoreOperationLessThan(constant0, constant0);
      assertNotNull(coreOperationLessThan0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertEquals("<", coreOperationLessThan0.getSymbol());
      
      expressionArray0[4] = (Expression) coreOperationLessThan0;
      CoreOperationGreaterThanOrEqual coreOperationGreaterThanOrEqual0 = new CoreOperationGreaterThanOrEqual(expressionArray0[3], extensionFunction0);
      assertNotNull(coreOperationGreaterThanOrEqual0);
      assertEquals("", qName0.getName());
      assertEquals("Iv", qName0.getPrefix());
      assertEquals("Iv:", qName0.toString());
      assertTrue(extensionFunction0.computeContextDependent());
      assertEquals(">=", coreOperationGreaterThanOrEqual0.getSymbol());
      assertEquals(8, expressionArray0.length);
      
      expressionArray0[5] = (Expression) coreOperationGreaterThanOrEqual0;
      CoreOperationNegate coreOperationNegate0 = new CoreOperationNegate(constant0);
      assertNotNull(coreOperationNegate0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertEquals("-", coreOperationNegate0.getSymbol());
      
      expressionArray0[6] = (Expression) coreOperationNegate0;
      Double double0 = Expression.ONE;
      assertEquals(1.0, (double)double0, 0.01);
      assertNotNull(double0);
      
      Constant constant1 = new Constant(double0);
      assertFalse(constant1.equals((Object)constant0));
      assertNotNull(constant1);
      assertFalse(constant1.isContextDependent());
      assertFalse(constant1.computeContextDependent());
      
      expressionArray0[7] = (Expression) constant1;
      CoreFunction coreFunction0 = new CoreFunction(178, expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(8, coreFunction0.getArgumentCount());
      assertEquals(178, coreFunction0.getFunctionCode());
      assertEquals(8, expressionArray0.length);
      
      EvalContext evalContext0 = null;
      // Undeclared exception!
      coreFunction0.functionRound((EvalContext) null);
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(14, (Expression[]) null);
      assertNotNull(coreFunction0);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(14, coreFunction0.getFunctionCode());
      
      CoreFunction coreFunction1 = new CoreFunction(14, (Expression[]) null);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertNotNull(coreFunction1);
      assertEquals(14, coreFunction1.getFunctionCode());
      assertEquals(0, coreFunction1.getArgumentCount());
      
      EvalContext evalContext0 = null;
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("LZ*ivD;");
      assertNotNull(processingInstructionTest0);
      assertEquals("LZ*ivD;", processingInstructionTest0.getTarget());
      
      boolean boolean0 = coreFunction0.computeContextDependent();
      assertFalse(coreFunction0.equals((Object)coreFunction1));
      assertFalse(boolean0);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(14, coreFunction0.getFunctionCode());
      assertNotSame(coreFunction0, coreFunction1);
      
      // Undeclared exception!
//      try { 
        coreFunction0.functionNumber((EvalContext) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(26, (Expression[]) null);
      assertNotNull(coreFunction0);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(26, coreFunction0.getFunctionCode());
      
      CoreFunction coreFunction1 = new CoreFunction(26, (Expression[]) null);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertNotNull(coreFunction1);
      assertEquals(0, coreFunction1.getArgumentCount());
      assertEquals(26, coreFunction1.getFunctionCode());
      
      CoreFunction coreFunction2 = new CoreFunction(26, (Expression[]) null);
      assertFalse(coreFunction2.equals((Object)coreFunction1));
      assertFalse(coreFunction2.equals((Object)coreFunction0));
      assertNotNull(coreFunction2);
      assertEquals(26, coreFunction2.getFunctionCode());
      assertEquals(0, coreFunction2.getArgumentCount());
      
      Expression[] expressionArray0 = new Expression[1];
      expressionArray0[0] = (Expression) coreFunction0;
      CoreFunction coreFunction3 = new CoreFunction(26, expressionArray0);
      assertFalse(coreFunction3.equals((Object)coreFunction0));
      assertFalse(coreFunction3.equals((Object)coreFunction2));
      assertFalse(coreFunction3.equals((Object)coreFunction1));
      assertNotNull(coreFunction3);
      assertEquals(1, coreFunction3.getArgumentCount());
      assertEquals(26, coreFunction3.getFunctionCode());
      assertEquals(1, expressionArray0.length);
      
      EvalContext evalContext0 = null;
      NodeNameTest nodeNameTest0 = new NodeNameTest((QName) null, (String) null);
      assertNotNull(nodeNameTest0);
      assertNull(nodeNameTest0.getNamespaceURI());
      
      NamespaceContext namespaceContext0 = new NamespaceContext((EvalContext) null, nodeNameTest0);
      assertNotNull(namespaceContext0);
      assertNull(nodeNameTest0.getNamespaceURI());
      assertFalse(namespaceContext0.isChildOrderingRequired());
      assertEquals(0, namespaceContext0.getDocumentOrder());
      assertEquals(0, namespaceContext0.getPosition());
      
      // Undeclared exception!
//      try { 
        coreFunction3.computeValue(namespaceContext0);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // Incorrect number of arguments: ceiling()
//         //
//         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(40, (Expression[]) null);
      assertNotNull(coreFunction0);
      assertEquals(40, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      
      CoreFunction coreFunction1 = new CoreFunction(26, (Expression[]) null);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertNotNull(coreFunction1);
      assertEquals(26, coreFunction1.getFunctionCode());
      assertEquals(0, coreFunction1.getArgumentCount());
      
      boolean boolean0 = coreFunction0.computeContextDependent();
      assertFalse(coreFunction0.equals((Object)coreFunction1));
      assertFalse(boolean0);
      assertEquals(40, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertNotSame(coreFunction0, coreFunction1);
      
      CoreFunction coreFunction2 = new CoreFunction(26, (Expression[]) null);
      assertFalse(coreFunction2.equals((Object)coreFunction1));
      assertFalse(coreFunction2.equals((Object)coreFunction0));
      assertNotNull(coreFunction2);
      assertEquals(26, coreFunction2.getFunctionCode());
      assertEquals(0, coreFunction2.getArgumentCount());
      
      EvalContext evalContext0 = null;
      // Undeclared exception!
//      try { 
        coreFunction2.iterate((EvalContext) null);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // Incorrect number of arguments: ceiling()
//         //
//         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      Expression[] expressionArray0 = new Expression[2];
      CoreOperationUnion coreOperationUnion0 = new CoreOperationUnion(expressionArray0);
      assertNotNull(coreOperationUnion0);
      assertEquals("|", coreOperationUnion0.getSymbol());
      assertEquals(2, expressionArray0.length);
      
      expressionArray0[0] = (Expression) coreOperationUnion0;
      Step[] stepArray0 = new Step[6];
      ExpressionPath expressionPath0 = new ExpressionPath(expressionArray0[0], expressionArray0, stepArray0);
      assertNotNull(expressionPath0);
      assertEquals(2, expressionArray0.length);
      assertEquals(6, stepArray0.length);
      
      expressionArray0[1] = (Expression) expressionPath0;
      CoreFunction coreFunction0 = new CoreFunction(12, expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(2, coreFunction0.getArgumentCount());
      assertEquals(12, coreFunction0.getFunctionCode());
      assertEquals(2, expressionArray0.length);
      
      EvalContext evalContext0 = null;
      // Undeclared exception!
      coreFunction0.functionNormalizeSpace((EvalContext) null);
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      Float float0 = new Float((float) 1048576);
      assertEquals(1048576.0F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      Constant constant0 = new Constant(float0);
      assertNotNull(constant0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      
      expressionArray0[0] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction(1048576, expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(1048576, coreFunction0.getFunctionCode());
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals(1, expressionArray0.length);
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl)JXPathContext.newContext((Object) expressionArray0[0]);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertNotNull(jXPathContextReferenceImpl0);
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertEquals(1, expressionArray0.length);
      
      boolean boolean0 = coreFunction0.computeContextDependent();
      assertFalse(boolean0);
      assertEquals(1048576, coreFunction0.getFunctionCode());
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals(1, expressionArray0.length);
      
      QName qName0 = new QName((String) null, (String) null);
      assertNotNull(qName0);
      assertNull(qName0.getName());
      assertNull(qName0.getPrefix());
      assertNull(qName0.toString());
      
      Locale locale0 = Locale.ROOT;
      assertNotNull(locale0);
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      
      NullPointer nullPointer0 = (NullPointer)NodePointer.newNodePointer(qName0, (Object) null, locale0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(nullPointer0);
      assertNull(qName0.getName());
      assertNull(qName0.getPrefix());
      assertNull(qName0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertFalse(nullPointer0.isAttribute());
      assertEquals(Integer.MIN_VALUE, nullPointer0.getIndex());
      assertFalse(nullPointer0.isActual());
      assertTrue(nullPointer0.isRoot());
      assertTrue(nullPointer0.isLeaf());
      assertFalse(nullPointer0.isDynamicPropertyDeclarationSupported());
      assertEquals(0, nullPointer0.getLength());
      assertTrue(nullPointer0.isNode());
      assertNull(nullPointer0.getNamespaceURI());
      assertFalse(nullPointer0.isContainer());
      assertFalse(nullPointer0.isCollection());
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl1 = new JXPathContextReferenceImpl(jXPathContextReferenceImpl0, coreFunction0, nullPointer0);
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl0));
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertNotNull(jXPathContextReferenceImpl1);
      assertEquals(1048576, coreFunction0.getFunctionCode());
      assertEquals(1, coreFunction0.getArgumentCount());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertNull(qName0.getName());
      assertNull(qName0.getPrefix());
      assertNull(qName0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertFalse(nullPointer0.isAttribute());
      assertEquals(Integer.MIN_VALUE, nullPointer0.getIndex());
      assertFalse(nullPointer0.isActual());
      assertTrue(nullPointer0.isRoot());
      assertTrue(nullPointer0.isLeaf());
      assertFalse(nullPointer0.isDynamicPropertyDeclarationSupported());
      assertEquals(0, nullPointer0.getLength());
      assertTrue(nullPointer0.isNode());
      assertNull(nullPointer0.getNamespaceURI());
      assertFalse(nullPointer0.isContainer());
      assertFalse(nullPointer0.isCollection());
      assertFalse(jXPathContextReferenceImpl1.isLenient());
      assertEquals(1, expressionArray0.length);
      
      InitialContext initialContext0 = (InitialContext)jXPathContextReferenceImpl1.getAbsoluteRootContext();
      assertFalse(jXPathContextReferenceImpl0.equals((Object)jXPathContextReferenceImpl1));
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl0));
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertNotNull(initialContext0);
      assertEquals(1048576, coreFunction0.getFunctionCode());
      assertEquals(1, coreFunction0.getArgumentCount());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertNull(qName0.getName());
      assertNull(qName0.getPrefix());
      assertNull(qName0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertFalse(nullPointer0.isAttribute());
      assertEquals(Integer.MIN_VALUE, nullPointer0.getIndex());
      assertFalse(nullPointer0.isActual());
      assertTrue(nullPointer0.isRoot());
      assertTrue(nullPointer0.isLeaf());
      assertFalse(nullPointer0.isDynamicPropertyDeclarationSupported());
      assertEquals(0, nullPointer0.getLength());
      assertTrue(nullPointer0.isNode());
      assertNull(nullPointer0.getNamespaceURI());
      assertFalse(nullPointer0.isContainer());
      assertFalse(nullPointer0.isCollection());
      assertFalse(jXPathContextReferenceImpl1.isLenient());
      assertEquals(0, initialContext0.getDocumentOrder());
      assertFalse(initialContext0.isChildOrderingRequired());
      assertEquals(0, initialContext0.getPosition());
      assertEquals(1, expressionArray0.length);
      assertNotSame(jXPathContextReferenceImpl0, jXPathContextReferenceImpl1);
      assertNotSame(jXPathContextReferenceImpl1, jXPathContextReferenceImpl0);
      
      QName qName1 = new QName("jU81-*J\n&$*13g");
      assertFalse(qName1.equals((Object)qName0));
      assertNotNull(qName1);
      assertEquals("jU81-*J\n&$*13g", qName1.toString());
      assertNull(qName1.getPrefix());
      assertEquals("jU81-*J\n&$*13g", qName1.getName());
      
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName1);
      assertFalse(qName1.equals((Object)qName0));
      assertNotNull(nodeNameTest0);
      assertEquals("jU81-*J\n&$*13g", qName1.toString());
      assertNull(qName1.getPrefix());
      assertEquals("jU81-*J\n&$*13g", qName1.getName());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals("jU81-*J\n&$*13g", nodeNameTest0.toString());
      assertNull(nodeNameTest0.getNamespaceURI());
      
      NamespaceContext namespaceContext0 = new NamespaceContext(initialContext0, nodeNameTest0);
      assertFalse(jXPathContextReferenceImpl0.equals((Object)jXPathContextReferenceImpl1));
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl0));
      assertFalse(qName1.equals((Object)qName0));
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertNotNull(namespaceContext0);
      assertEquals(1048576, coreFunction0.getFunctionCode());
      assertEquals(1, coreFunction0.getArgumentCount());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertNull(qName0.getName());
      assertNull(qName0.getPrefix());
      assertNull(qName0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertFalse(nullPointer0.isAttribute());
      assertEquals(Integer.MIN_VALUE, nullPointer0.getIndex());
      assertFalse(nullPointer0.isActual());
      assertTrue(nullPointer0.isRoot());
      assertTrue(nullPointer0.isLeaf());
      assertFalse(nullPointer0.isDynamicPropertyDeclarationSupported());
      assertEquals(0, nullPointer0.getLength());
      assertTrue(nullPointer0.isNode());
      assertNull(nullPointer0.getNamespaceURI());
      assertFalse(nullPointer0.isContainer());
      assertFalse(nullPointer0.isCollection());
      assertFalse(jXPathContextReferenceImpl1.isLenient());
      assertEquals(0, initialContext0.getDocumentOrder());
      assertFalse(initialContext0.isChildOrderingRequired());
      assertEquals(0, initialContext0.getPosition());
      assertEquals("jU81-*J\n&$*13g", qName1.toString());
      assertNull(qName1.getPrefix());
      assertEquals("jU81-*J\n&$*13g", qName1.getName());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals("jU81-*J\n&$*13g", nodeNameTest0.toString());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertFalse(namespaceContext0.isChildOrderingRequired());
      assertEquals(0, namespaceContext0.getDocumentOrder());
      assertEquals(0, namespaceContext0.getPosition());
      assertEquals(1, expressionArray0.length);
      
      String string0 = (String)coreFunction0.functionName(namespaceContext0);
      assertFalse(jXPathContextReferenceImpl0.equals((Object)jXPathContextReferenceImpl1));
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl0));
      assertFalse(qName1.equals((Object)qName0));
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals("", string0);
      assertNotNull(string0);
      assertEquals(1048576, coreFunction0.getFunctionCode());
      assertEquals(1, coreFunction0.getArgumentCount());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertNull(qName0.getName());
      assertNull(qName0.getPrefix());
      assertNull(qName0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertFalse(nullPointer0.isAttribute());
      assertEquals(Integer.MIN_VALUE, nullPointer0.getIndex());
      assertFalse(nullPointer0.isActual());
      assertTrue(nullPointer0.isRoot());
      assertTrue(nullPointer0.isLeaf());
      assertFalse(nullPointer0.isDynamicPropertyDeclarationSupported());
      assertEquals(0, nullPointer0.getLength());
      assertTrue(nullPointer0.isNode());
      assertNull(nullPointer0.getNamespaceURI());
      assertFalse(nullPointer0.isContainer());
      assertFalse(nullPointer0.isCollection());
      assertFalse(jXPathContextReferenceImpl1.isLenient());
      assertEquals(0, initialContext0.getDocumentOrder());
      assertFalse(initialContext0.isChildOrderingRequired());
      assertEquals(0, initialContext0.getPosition());
      assertEquals("jU81-*J\n&$*13g", qName1.toString());
      assertNull(qName1.getPrefix());
      assertEquals("jU81-*J\n&$*13g", qName1.getName());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals("jU81-*J\n&$*13g", nodeNameTest0.toString());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertFalse(namespaceContext0.isChildOrderingRequired());
      assertEquals(0, namespaceContext0.getDocumentOrder());
      assertEquals(0, namespaceContext0.getPosition());
      assertEquals(1, expressionArray0.length);
      assertNotSame(jXPathContextReferenceImpl0, jXPathContextReferenceImpl1);
      assertNotSame(qName0, qName1);
      assertNotSame(jXPathContextReferenceImpl1, jXPathContextReferenceImpl0);
      assertNotSame(qName1, qName0);
      
      Object object0 = coreFunction0.computeValue(namespaceContext0);
      assertFalse(jXPathContextReferenceImpl0.equals((Object)jXPathContextReferenceImpl1));
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl0));
      assertFalse(qName1.equals((Object)qName0));
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertNull(object0);
      assertEquals(1048576, coreFunction0.getFunctionCode());
      assertEquals(1, coreFunction0.getArgumentCount());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertNull(qName0.getName());
      assertNull(qName0.getPrefix());
      assertNull(qName0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertFalse(nullPointer0.isAttribute());
      assertEquals(Integer.MIN_VALUE, nullPointer0.getIndex());
      assertFalse(nullPointer0.isActual());
      assertTrue(nullPointer0.isRoot());
      assertTrue(nullPointer0.isLeaf());
      assertFalse(nullPointer0.isDynamicPropertyDeclarationSupported());
      assertEquals(0, nullPointer0.getLength());
      assertTrue(nullPointer0.isNode());
      assertNull(nullPointer0.getNamespaceURI());
      assertFalse(nullPointer0.isContainer());
      assertFalse(nullPointer0.isCollection());
      assertFalse(jXPathContextReferenceImpl1.isLenient());
      assertEquals(0, initialContext0.getDocumentOrder());
      assertFalse(initialContext0.isChildOrderingRequired());
      assertEquals(0, initialContext0.getPosition());
      assertEquals("jU81-*J\n&$*13g", qName1.toString());
      assertNull(qName1.getPrefix());
      assertEquals("jU81-*J\n&$*13g", qName1.getName());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals("jU81-*J\n&$*13g", nodeNameTest0.toString());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertFalse(namespaceContext0.isChildOrderingRequired());
      assertEquals(0, namespaceContext0.getDocumentOrder());
      assertEquals(0, namespaceContext0.getPosition());
      assertEquals(1, expressionArray0.length);
      assertNotSame(jXPathContextReferenceImpl0, jXPathContextReferenceImpl1);
      assertNotSame(qName0, qName1);
      assertNotSame(jXPathContextReferenceImpl1, jXPathContextReferenceImpl0);
      assertNotSame(qName1, qName0);
      
      Boolean boolean1 = (Boolean)coreFunction0.functionNot(initialContext0);
      assertTrue(boolean1.equals((Object)boolean0));
      assertFalse(jXPathContextReferenceImpl0.equals((Object)jXPathContextReferenceImpl1));
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl0));
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertFalse(boolean1);
      assertNotNull(boolean1);
      assertEquals(1048576, coreFunction0.getFunctionCode());
      assertEquals(1, coreFunction0.getArgumentCount());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertNull(qName0.getName());
      assertNull(qName0.getPrefix());
      assertNull(qName0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertFalse(nullPointer0.isAttribute());
      assertEquals(Integer.MIN_VALUE, nullPointer0.getIndex());
      assertFalse(nullPointer0.isActual());
      assertTrue(nullPointer0.isRoot());
      assertTrue(nullPointer0.isLeaf());
      assertFalse(nullPointer0.isDynamicPropertyDeclarationSupported());
      assertEquals(0, nullPointer0.getLength());
      assertTrue(nullPointer0.isNode());
      assertNull(nullPointer0.getNamespaceURI());
      assertFalse(nullPointer0.isContainer());
      assertFalse(nullPointer0.isCollection());
      assertFalse(jXPathContextReferenceImpl1.isLenient());
      assertEquals(0, initialContext0.getDocumentOrder());
      assertFalse(initialContext0.isChildOrderingRequired());
      assertEquals(0, initialContext0.getPosition());
      assertEquals(1, expressionArray0.length);
      assertNotSame(jXPathContextReferenceImpl0, jXPathContextReferenceImpl1);
      assertNotSame(qName0, qName1);
      assertNotSame(jXPathContextReferenceImpl1, jXPathContextReferenceImpl0);
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      QName qName0 = new QName("", "c@=v` ");
      assertNotNull(qName0);
      assertEquals("c@=v` ", qName0.getName());
      assertEquals("", qName0.getPrefix());
      assertEquals(":c@=v` ", qName0.toString());
      
      Locale locale0 = Locale.GERMANY;
      assertNotNull(locale0);
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("DE", locale0.getCountry());
      assertEquals("de", locale0.getLanguage());
      assertEquals("DEU", locale0.getISO3Country());
      assertEquals("de_DE", locale0.toString());
      assertEquals("", locale0.getVariant());
      
      CoreFunction coreFunction0 = new CoreFunction(1, (Expression[]) null);
      assertNotNull(coreFunction0);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(1, coreFunction0.getFunctionCode());
      
      String string0 = coreFunction0.getFunctionName();
      assertEquals("last", string0);
      assertNotNull(string0);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(1, coreFunction0.getFunctionCode());
      
      PredicateContext predicateContext0 = new PredicateContext((EvalContext) null, coreFunction0);
      assertNotNull(predicateContext0);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(1, coreFunction0.getFunctionCode());
      assertEquals(0, predicateContext0.getPosition());
      assertEquals(0, predicateContext0.getDocumentOrder());
      assertFalse(predicateContext0.isChildOrderingRequired());
      
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(54);
      assertNotNull(nodeTypeTest0);
      assertEquals(54, nodeTypeTest0.getNodeType());
      
      PrecedingOrFollowingContext precedingOrFollowingContext0 = new PrecedingOrFollowingContext(predicateContext0, nodeTypeTest0, true);
      assertNotNull(precedingOrFollowingContext0);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(1, coreFunction0.getFunctionCode());
      assertEquals(0, predicateContext0.getPosition());
      assertEquals(0, predicateContext0.getDocumentOrder());
      assertFalse(predicateContext0.isChildOrderingRequired());
      assertEquals(54, nodeTypeTest0.getNodeType());
      assertEquals((-1), precedingOrFollowingContext0.getDocumentOrder());
      assertEquals(0, precedingOrFollowingContext0.getPosition());
      assertTrue(precedingOrFollowingContext0.isChildOrderingRequired());
      
      SelfContext selfContext0 = new SelfContext(precedingOrFollowingContext0, nodeTypeTest0);
      assertNotNull(selfContext0);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(1, coreFunction0.getFunctionCode());
      assertEquals(0, predicateContext0.getPosition());
      assertEquals(0, predicateContext0.getDocumentOrder());
      assertFalse(predicateContext0.isChildOrderingRequired());
      assertEquals(54, nodeTypeTest0.getNodeType());
      assertEquals((-1), precedingOrFollowingContext0.getDocumentOrder());
      assertEquals(0, precedingOrFollowingContext0.getPosition());
      assertTrue(precedingOrFollowingContext0.isChildOrderingRequired());
      assertEquals(1, selfContext0.getDocumentOrder());
      assertEquals(0, selfContext0.getPosition());
      assertTrue(selfContext0.isChildOrderingRequired());
      
      ChildContext childContext0 = new ChildContext(selfContext0, nodeTypeTest0, true, true);
      assertNotNull(childContext0);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(1, coreFunction0.getFunctionCode());
      assertEquals(0, predicateContext0.getPosition());
      assertEquals(0, predicateContext0.getDocumentOrder());
      assertFalse(predicateContext0.isChildOrderingRequired());
      assertEquals(54, nodeTypeTest0.getNodeType());
      assertEquals((-1), precedingOrFollowingContext0.getDocumentOrder());
      assertEquals(0, precedingOrFollowingContext0.getPosition());
      assertTrue(precedingOrFollowingContext0.isChildOrderingRequired());
      assertEquals(1, selfContext0.getDocumentOrder());
      assertEquals(0, selfContext0.getPosition());
      assertTrue(selfContext0.isChildOrderingRequired());
      assertEquals(1, childContext0.getDocumentOrder());
      assertTrue(childContext0.isChildOrderingRequired());
      assertEquals(0, childContext0.getPosition());
      
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
      assertNotNull(nodeNameTest0);
      assertEquals("c@=v` ", qName0.getName());
      assertEquals("", qName0.getPrefix());
      assertEquals(":c@=v` ", qName0.toString());
      assertEquals(":c@=v` ", nodeNameTest0.toString());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertFalse(nodeNameTest0.isWildcard());
      
      AttributeContext attributeContext0 = new AttributeContext(childContext0, nodeNameTest0);
      assertNotNull(attributeContext0);
      assertEquals("c@=v` ", qName0.getName());
      assertEquals("", qName0.getPrefix());
      assertEquals(":c@=v` ", qName0.toString());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(1, coreFunction0.getFunctionCode());
      assertEquals(0, predicateContext0.getPosition());
      assertEquals(0, predicateContext0.getDocumentOrder());
      assertFalse(predicateContext0.isChildOrderingRequired());
      assertEquals(54, nodeTypeTest0.getNodeType());
      assertEquals((-1), precedingOrFollowingContext0.getDocumentOrder());
      assertEquals(0, precedingOrFollowingContext0.getPosition());
      assertTrue(precedingOrFollowingContext0.isChildOrderingRequired());
      assertEquals(1, selfContext0.getDocumentOrder());
      assertEquals(0, selfContext0.getPosition());
      assertTrue(selfContext0.isChildOrderingRequired());
      assertEquals(1, childContext0.getDocumentOrder());
      assertTrue(childContext0.isChildOrderingRequired());
      assertEquals(0, childContext0.getPosition());
      assertEquals(":c@=v` ", nodeNameTest0.toString());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals(0, attributeContext0.getPosition());
      assertEquals(1, attributeContext0.getDocumentOrder());
      assertTrue(attributeContext0.isChildOrderingRequired());
      
      // Undeclared exception!
//      try { 
        coreFunction0.iterate(attributeContext0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.jxpath.ri.axes.AttributeContext", e);
//      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      Float float0 = new Float((float) 1048576);
      assertEquals(1048576.0F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      Constant constant0 = new Constant(float0);
      assertNotNull(constant0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      
      expressionArray0[0] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction(1048576, expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(1048576, coreFunction0.getFunctionCode());
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals(1, expressionArray0.length);
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl)JXPathContext.newContext((Object) expressionArray0[0]);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertNotNull(jXPathContextReferenceImpl0);
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertEquals(1, expressionArray0.length);
      
      CoreFunction coreFunction1 = new CoreFunction(1048576, expressionArray0);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertNotNull(coreFunction1);
      assertEquals(1048576, coreFunction1.getFunctionCode());
      assertEquals(1, coreFunction1.getArgumentCount());
      assertEquals(1, expressionArray0.length);
      
      EvalContext evalContext0 = null;
      // Undeclared exception!
//      try { 
        coreFunction0.functionLang((EvalContext) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "K");
      assertFalse(boolean0);
      
      CoreFunction coreFunction0 = new CoreFunction(12, (Expression[]) null);
      assertNotNull(coreFunction0);
      assertEquals(12, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      
      String string0 = coreFunction0.toString();
      assertEquals("substring-before()", string0);
      assertNotNull(string0);
      assertEquals(12, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      
      boolean boolean1 = coreFunction0.isContextDependent();
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      assertEquals(12, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      
      CoreFunction coreFunction1 = new CoreFunction(12, (Expression[]) null);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertNotNull(coreFunction1);
      assertEquals(0, coreFunction1.getArgumentCount());
      assertEquals(12, coreFunction1.getFunctionCode());
      
      // Undeclared exception!
//      try { 
        coreFunction0.getArg3();
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "S2)");
      assertFalse(boolean0);
      
      CoreFunction coreFunction0 = new CoreFunction(12, (Expression[]) null);
      assertNotNull(coreFunction0);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(12, coreFunction0.getFunctionCode());
      
      EvalContext evalContext0 = null;
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("S2)");
      assertNotNull(processingInstructionTest0);
      assertEquals("S2)", processingInstructionTest0.getTarget());
      
      // Undeclared exception!
//      try { 
        coreFunction0.computeValue((EvalContext) null);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // Incorrect number of arguments: substring-before()
//         //
//         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      Float float0 = new Float((float) 1048576);
      assertEquals(1048576.0F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      Constant constant0 = new Constant(float0);
      assertNotNull(constant0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      
      expressionArray0[0] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction(1048576, expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(1048576, coreFunction0.getFunctionCode());
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals(1, expressionArray0.length);
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl)JXPathContext.newContext((Object) expressionArray0[0]);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertNotNull(jXPathContextReferenceImpl0);
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertEquals(1, expressionArray0.length);
      
      QName qName0 = new QName((String) null, (String) null);
      assertNotNull(qName0);
      assertNull(qName0.getPrefix());
      assertNull(qName0.toString());
      assertNull(qName0.getName());
      
      Locale locale0 = Locale.ROOT;
      assertNotNull(locale0);
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.toString());
      
      NullPointer nullPointer0 = (NullPointer)NodePointer.newNodePointer(qName0, (Object) null, locale0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(nullPointer0);
      assertNull(qName0.getPrefix());
      assertNull(qName0.toString());
      assertNull(qName0.getName());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.toString());
      assertTrue(nullPointer0.isLeaf());
      assertNull(nullPointer0.getNamespaceURI());
      assertFalse(nullPointer0.isCollection());
      assertTrue(nullPointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, nullPointer0.getIndex());
      assertFalse(nullPointer0.isActual());
      assertFalse(nullPointer0.isContainer());
      assertFalse(nullPointer0.isAttribute());
      assertTrue(nullPointer0.isNode());
      assertEquals(0, nullPointer0.getLength());
      assertFalse(nullPointer0.isDynamicPropertyDeclarationSupported());
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl1 = new JXPathContextReferenceImpl(jXPathContextReferenceImpl0, coreFunction0, nullPointer0);
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl0));
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertNotNull(jXPathContextReferenceImpl1);
      assertEquals(1048576, coreFunction0.getFunctionCode());
      assertEquals(1, coreFunction0.getArgumentCount());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertNull(qName0.getPrefix());
      assertNull(qName0.toString());
      assertNull(qName0.getName());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.toString());
      assertTrue(nullPointer0.isLeaf());
      assertNull(nullPointer0.getNamespaceURI());
      assertFalse(nullPointer0.isCollection());
      assertTrue(nullPointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, nullPointer0.getIndex());
      assertFalse(nullPointer0.isActual());
      assertFalse(nullPointer0.isContainer());
      assertFalse(nullPointer0.isAttribute());
      assertTrue(nullPointer0.isNode());
      assertEquals(0, nullPointer0.getLength());
      assertFalse(nullPointer0.isDynamicPropertyDeclarationSupported());
      assertFalse(jXPathContextReferenceImpl1.isLenient());
      assertEquals(1, expressionArray0.length);
      
      InitialContext initialContext0 = (InitialContext)jXPathContextReferenceImpl1.getAbsoluteRootContext();
      assertFalse(jXPathContextReferenceImpl0.equals((Object)jXPathContextReferenceImpl1));
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl0));
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertNotNull(initialContext0);
      assertEquals(1048576, coreFunction0.getFunctionCode());
      assertEquals(1, coreFunction0.getArgumentCount());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertNull(qName0.getPrefix());
      assertNull(qName0.toString());
      assertNull(qName0.getName());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.toString());
      assertTrue(nullPointer0.isLeaf());
      assertNull(nullPointer0.getNamespaceURI());
      assertFalse(nullPointer0.isCollection());
      assertTrue(nullPointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, nullPointer0.getIndex());
      assertFalse(nullPointer0.isActual());
      assertFalse(nullPointer0.isContainer());
      assertFalse(nullPointer0.isAttribute());
      assertTrue(nullPointer0.isNode());
      assertEquals(0, nullPointer0.getLength());
      assertFalse(nullPointer0.isDynamicPropertyDeclarationSupported());
      assertFalse(jXPathContextReferenceImpl1.isLenient());
      assertEquals(0, initialContext0.getDocumentOrder());
      assertFalse(initialContext0.isChildOrderingRequired());
      assertEquals(0, initialContext0.getPosition());
      assertEquals(1, expressionArray0.length);
      assertNotSame(jXPathContextReferenceImpl0, jXPathContextReferenceImpl1);
      assertNotSame(jXPathContextReferenceImpl1, jXPathContextReferenceImpl0);
      
      QName qName1 = new QName("jU81-*J\n&$*13g");
      assertFalse(qName1.equals((Object)qName0));
      assertNotNull(qName1);
      assertEquals("jU81-*J\n&$*13g", qName1.toString());
      assertEquals("jU81-*J\n&$*13g", qName1.getName());
      assertNull(qName1.getPrefix());
      
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName1);
      assertFalse(qName1.equals((Object)qName0));
      assertNotNull(nodeNameTest0);
      assertEquals("jU81-*J\n&$*13g", qName1.toString());
      assertEquals("jU81-*J\n&$*13g", qName1.getName());
      assertNull(qName1.getPrefix());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals("jU81-*J\n&$*13g", nodeNameTest0.toString());
      assertNull(nodeNameTest0.getNamespaceURI());
      
      NamespaceContext namespaceContext0 = new NamespaceContext(initialContext0, nodeNameTest0);
      assertFalse(jXPathContextReferenceImpl0.equals((Object)jXPathContextReferenceImpl1));
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl0));
      assertFalse(qName1.equals((Object)qName0));
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertNotNull(namespaceContext0);
      assertEquals(1048576, coreFunction0.getFunctionCode());
      assertEquals(1, coreFunction0.getArgumentCount());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertNull(qName0.getPrefix());
      assertNull(qName0.toString());
      assertNull(qName0.getName());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.toString());
      assertTrue(nullPointer0.isLeaf());
      assertNull(nullPointer0.getNamespaceURI());
      assertFalse(nullPointer0.isCollection());
      assertTrue(nullPointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, nullPointer0.getIndex());
      assertFalse(nullPointer0.isActual());
      assertFalse(nullPointer0.isContainer());
      assertFalse(nullPointer0.isAttribute());
      assertTrue(nullPointer0.isNode());
      assertEquals(0, nullPointer0.getLength());
      assertFalse(nullPointer0.isDynamicPropertyDeclarationSupported());
      assertFalse(jXPathContextReferenceImpl1.isLenient());
      assertEquals(0, initialContext0.getDocumentOrder());
      assertFalse(initialContext0.isChildOrderingRequired());
      assertEquals(0, initialContext0.getPosition());
      assertEquals("jU81-*J\n&$*13g", qName1.toString());
      assertEquals("jU81-*J\n&$*13g", qName1.getName());
      assertNull(qName1.getPrefix());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals("jU81-*J\n&$*13g", nodeNameTest0.toString());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertFalse(namespaceContext0.isChildOrderingRequired());
      assertEquals(0, namespaceContext0.getPosition());
      assertEquals(0, namespaceContext0.getDocumentOrder());
      assertEquals(1, expressionArray0.length);
      
      Pointer pointer0 = namespaceContext0.getContextNodePointer();
      assertFalse(jXPathContextReferenceImpl0.equals((Object)jXPathContextReferenceImpl1));
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl0));
      assertFalse(qName1.equals((Object)qName0));
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertNull(pointer0);
      assertEquals(1048576, coreFunction0.getFunctionCode());
      assertEquals(1, coreFunction0.getArgumentCount());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertNull(qName0.getPrefix());
      assertNull(qName0.toString());
      assertNull(qName0.getName());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.toString());
      assertTrue(nullPointer0.isLeaf());
      assertNull(nullPointer0.getNamespaceURI());
      assertFalse(nullPointer0.isCollection());
      assertTrue(nullPointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, nullPointer0.getIndex());
      assertFalse(nullPointer0.isActual());
      assertFalse(nullPointer0.isContainer());
      assertFalse(nullPointer0.isAttribute());
      assertTrue(nullPointer0.isNode());
      assertEquals(0, nullPointer0.getLength());
      assertFalse(nullPointer0.isDynamicPropertyDeclarationSupported());
      assertFalse(jXPathContextReferenceImpl1.isLenient());
      assertEquals(0, initialContext0.getDocumentOrder());
      assertFalse(initialContext0.isChildOrderingRequired());
      assertEquals(0, initialContext0.getPosition());
      assertEquals("jU81-*J\n&$*13g", qName1.toString());
      assertEquals("jU81-*J\n&$*13g", qName1.getName());
      assertNull(qName1.getPrefix());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals("jU81-*J\n&$*13g", nodeNameTest0.toString());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertFalse(namespaceContext0.isChildOrderingRequired());
      assertEquals(0, namespaceContext0.getPosition());
      assertEquals(0, namespaceContext0.getDocumentOrder());
      assertEquals(1, expressionArray0.length);
      assertNotSame(jXPathContextReferenceImpl0, jXPathContextReferenceImpl1);
      assertNotSame(qName0, qName1);
      assertNotSame(jXPathContextReferenceImpl1, jXPathContextReferenceImpl0);
      assertNotSame(qName1, qName0);
      
      String string0 = (String)coreFunction0.functionName(namespaceContext0);
      assertFalse(jXPathContextReferenceImpl0.equals((Object)jXPathContextReferenceImpl1));
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl0));
      assertFalse(qName1.equals((Object)qName0));
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals("", string0);
      assertNotNull(string0);
      assertEquals(1048576, coreFunction0.getFunctionCode());
      assertEquals(1, coreFunction0.getArgumentCount());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertNull(qName0.getPrefix());
      assertNull(qName0.toString());
      assertNull(qName0.getName());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.toString());
      assertTrue(nullPointer0.isLeaf());
      assertNull(nullPointer0.getNamespaceURI());
      assertFalse(nullPointer0.isCollection());
      assertTrue(nullPointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, nullPointer0.getIndex());
      assertFalse(nullPointer0.isActual());
      assertFalse(nullPointer0.isContainer());
      assertFalse(nullPointer0.isAttribute());
      assertTrue(nullPointer0.isNode());
      assertEquals(0, nullPointer0.getLength());
      assertFalse(nullPointer0.isDynamicPropertyDeclarationSupported());
      assertFalse(jXPathContextReferenceImpl1.isLenient());
      assertEquals(0, initialContext0.getDocumentOrder());
      assertFalse(initialContext0.isChildOrderingRequired());
      assertEquals(0, initialContext0.getPosition());
      assertEquals("jU81-*J\n&$*13g", qName1.toString());
      assertEquals("jU81-*J\n&$*13g", qName1.getName());
      assertNull(qName1.getPrefix());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals("jU81-*J\n&$*13g", nodeNameTest0.toString());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertFalse(namespaceContext0.isChildOrderingRequired());
      assertEquals(0, namespaceContext0.getPosition());
      assertEquals(0, namespaceContext0.getDocumentOrder());
      assertEquals(1, expressionArray0.length);
      assertNotSame(jXPathContextReferenceImpl0, jXPathContextReferenceImpl1);
      assertNotSame(qName0, qName1);
      assertNotSame(jXPathContextReferenceImpl1, jXPathContextReferenceImpl0);
      assertNotSame(qName1, qName0);
      
      Double double0 = (Double)coreFunction0.functionFloor(initialContext0);
      assertFalse(jXPathContextReferenceImpl0.equals((Object)jXPathContextReferenceImpl1));
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl0));
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(1048576.0, (double)double0, 0.01);
      assertNotNull(double0);
      assertEquals(1048576, coreFunction0.getFunctionCode());
      assertEquals(1, coreFunction0.getArgumentCount());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertNull(qName0.getPrefix());
      assertNull(qName0.toString());
      assertNull(qName0.getName());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.toString());
      assertTrue(nullPointer0.isLeaf());
      assertNull(nullPointer0.getNamespaceURI());
      assertFalse(nullPointer0.isCollection());
      assertTrue(nullPointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, nullPointer0.getIndex());
      assertFalse(nullPointer0.isActual());
      assertFalse(nullPointer0.isContainer());
      assertFalse(nullPointer0.isAttribute());
      assertTrue(nullPointer0.isNode());
      assertEquals(0, nullPointer0.getLength());
      assertFalse(nullPointer0.isDynamicPropertyDeclarationSupported());
      assertFalse(jXPathContextReferenceImpl1.isLenient());
      assertEquals(0, initialContext0.getDocumentOrder());
      assertFalse(initialContext0.isChildOrderingRequired());
      assertEquals(0, initialContext0.getPosition());
      assertEquals(1, expressionArray0.length);
      assertNotSame(jXPathContextReferenceImpl0, jXPathContextReferenceImpl1);
      assertNotSame(qName0, qName1);
      assertNotSame(jXPathContextReferenceImpl1, jXPathContextReferenceImpl0);
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      int int0 = 16;
      EvalContext evalContext0 = null;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      Constant constant0 = new Constant("$9:%uD)DC`T/");
      assertNotNull(constant0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      
      Expression[] expressionArray0 = new Expression[4];
      expressionArray0[0] = (Expression) constant0;
      Iterator iterator0 = constant0.iterate((EvalContext) null);
      assertNotNull(iterator0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      
      expressionArray0[1] = (Expression) constant0;
      expressionArray0[2] = (Expression) constant0;
      expressionArray0[3] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction(16, expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(4, coreFunction0.getArgumentCount());
      assertEquals(16, coreFunction0.getFunctionCode());
      assertEquals(4, expressionArray0.length);
      
      // Undeclared exception!
//      try { 
        coreFunction0.functionSubstringBefore((EvalContext) null);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // Incorrect number of arguments: normalize-space('$9:%uD)DC`T/', '$9:%uD)DC`T/', '$9:%uD)DC`T/', '$9:%uD)DC`T/')
//         //
//         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      Float float0 = new Float((float) 1048576);
      assertEquals(1048576.0F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      Constant constant0 = new Constant(float0);
      assertNotNull(constant0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      
      expressionArray0[0] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction(1048576, expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(1048576, coreFunction0.getFunctionCode());
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals(1, expressionArray0.length);
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl)JXPathContext.newContext((Object) expressionArray0[0]);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertNotNull(jXPathContextReferenceImpl0);
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertEquals(1, expressionArray0.length);
      
      QName qName0 = new QName((String) null, (String) null);
      assertNotNull(qName0);
      assertNull(qName0.toString());
      assertNull(qName0.getPrefix());
      assertNull(qName0.getName());
      
      Locale locale0 = Locale.ROOT;
      assertNotNull(locale0);
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      
      NullPointer nullPointer0 = (NullPointer)NodePointer.newNodePointer(qName0, (Object) null, locale0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(nullPointer0);
      assertNull(qName0.toString());
      assertNull(qName0.getPrefix());
      assertNull(qName0.getName());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertTrue(nullPointer0.isLeaf());
      assertFalse(nullPointer0.isActual());
      assertFalse(nullPointer0.isCollection());
      assertEquals(Integer.MIN_VALUE, nullPointer0.getIndex());
      assertNull(nullPointer0.getNamespaceURI());
      assertFalse(nullPointer0.isContainer());
      assertTrue(nullPointer0.isRoot());
      assertTrue(nullPointer0.isNode());
      assertEquals(0, nullPointer0.getLength());
      assertFalse(nullPointer0.isAttribute());
      assertFalse(nullPointer0.isDynamicPropertyDeclarationSupported());
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl1 = new JXPathContextReferenceImpl(jXPathContextReferenceImpl0, coreFunction0, nullPointer0);
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl0));
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertNotNull(jXPathContextReferenceImpl1);
      assertEquals(1048576, coreFunction0.getFunctionCode());
      assertEquals(1, coreFunction0.getArgumentCount());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertNull(qName0.toString());
      assertNull(qName0.getPrefix());
      assertNull(qName0.getName());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertTrue(nullPointer0.isLeaf());
      assertFalse(nullPointer0.isActual());
      assertFalse(nullPointer0.isCollection());
      assertEquals(Integer.MIN_VALUE, nullPointer0.getIndex());
      assertNull(nullPointer0.getNamespaceURI());
      assertFalse(nullPointer0.isContainer());
      assertTrue(nullPointer0.isRoot());
      assertTrue(nullPointer0.isNode());
      assertEquals(0, nullPointer0.getLength());
      assertFalse(nullPointer0.isAttribute());
      assertFalse(nullPointer0.isDynamicPropertyDeclarationSupported());
      assertFalse(jXPathContextReferenceImpl1.isLenient());
      assertEquals(1, expressionArray0.length);
      
      InitialContext initialContext0 = (InitialContext)jXPathContextReferenceImpl1.getAbsoluteRootContext();
      assertFalse(jXPathContextReferenceImpl0.equals((Object)jXPathContextReferenceImpl1));
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl0));
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertNotNull(initialContext0);
      assertEquals(1048576, coreFunction0.getFunctionCode());
      assertEquals(1, coreFunction0.getArgumentCount());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertNull(qName0.toString());
      assertNull(qName0.getPrefix());
      assertNull(qName0.getName());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertTrue(nullPointer0.isLeaf());
      assertFalse(nullPointer0.isActual());
      assertFalse(nullPointer0.isCollection());
      assertEquals(Integer.MIN_VALUE, nullPointer0.getIndex());
      assertNull(nullPointer0.getNamespaceURI());
      assertFalse(nullPointer0.isContainer());
      assertTrue(nullPointer0.isRoot());
      assertTrue(nullPointer0.isNode());
      assertEquals(0, nullPointer0.getLength());
      assertFalse(nullPointer0.isAttribute());
      assertFalse(nullPointer0.isDynamicPropertyDeclarationSupported());
      assertFalse(jXPathContextReferenceImpl1.isLenient());
      assertEquals(0, initialContext0.getDocumentOrder());
      assertEquals(0, initialContext0.getPosition());
      assertFalse(initialContext0.isChildOrderingRequired());
      assertEquals(1, expressionArray0.length);
      assertNotSame(jXPathContextReferenceImpl0, jXPathContextReferenceImpl1);
      assertNotSame(jXPathContextReferenceImpl1, jXPathContextReferenceImpl0);
      
      boolean boolean0 = coreFunction0.computeContextDependent();
      assertFalse(boolean0);
      assertEquals(1048576, coreFunction0.getFunctionCode());
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals(1, expressionArray0.length);
      
      Float float1 = (Float)coreFunction0.functionNumber(initialContext0);
      assertFalse(jXPathContextReferenceImpl0.equals((Object)jXPathContextReferenceImpl1));
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl0));
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(1048576.0F, (float)float1, 0.01F);
      assertNotNull(float1);
      assertEquals(1048576, coreFunction0.getFunctionCode());
      assertEquals(1, coreFunction0.getArgumentCount());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertNull(qName0.toString());
      assertNull(qName0.getPrefix());
      assertNull(qName0.getName());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertTrue(nullPointer0.isLeaf());
      assertFalse(nullPointer0.isActual());
      assertFalse(nullPointer0.isCollection());
      assertEquals(Integer.MIN_VALUE, nullPointer0.getIndex());
      assertNull(nullPointer0.getNamespaceURI());
      assertFalse(nullPointer0.isContainer());
      assertTrue(nullPointer0.isRoot());
      assertTrue(nullPointer0.isNode());
      assertEquals(0, nullPointer0.getLength());
      assertFalse(nullPointer0.isAttribute());
      assertFalse(nullPointer0.isDynamicPropertyDeclarationSupported());
      assertFalse(jXPathContextReferenceImpl1.isLenient());
      assertEquals(0, initialContext0.getDocumentOrder());
      assertEquals(0, initialContext0.getPosition());
      assertFalse(initialContext0.isChildOrderingRequired());
      assertEquals(1, expressionArray0.length);
      assertNotSame(jXPathContextReferenceImpl0, jXPathContextReferenceImpl1);
      assertNotSame(jXPathContextReferenceImpl1, jXPathContextReferenceImpl0);
      
      String string0 = (String)coreFunction0.functionLocalName(initialContext0);
      assertFalse(jXPathContextReferenceImpl0.equals((Object)jXPathContextReferenceImpl1));
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl0));
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals("", string0);
      assertNotNull(string0);
      assertEquals(1048576, coreFunction0.getFunctionCode());
      assertEquals(1, coreFunction0.getArgumentCount());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertNull(qName0.toString());
      assertNull(qName0.getPrefix());
      assertNull(qName0.getName());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertTrue(nullPointer0.isLeaf());
      assertFalse(nullPointer0.isActual());
      assertFalse(nullPointer0.isCollection());
      assertEquals(Integer.MIN_VALUE, nullPointer0.getIndex());
      assertNull(nullPointer0.getNamespaceURI());
      assertFalse(nullPointer0.isContainer());
      assertTrue(nullPointer0.isRoot());
      assertTrue(nullPointer0.isNode());
      assertEquals(0, nullPointer0.getLength());
      assertFalse(nullPointer0.isAttribute());
      assertFalse(nullPointer0.isDynamicPropertyDeclarationSupported());
      assertFalse(jXPathContextReferenceImpl1.isLenient());
      assertEquals(0, initialContext0.getDocumentOrder());
      assertEquals(0, initialContext0.getPosition());
      assertFalse(initialContext0.isChildOrderingRequired());
      assertEquals(1, expressionArray0.length);
      assertNotSame(jXPathContextReferenceImpl0, jXPathContextReferenceImpl1);
      assertNotSame(jXPathContextReferenceImpl1, jXPathContextReferenceImpl0);
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      Step[] stepArray0 = new Step[9];
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(1277);
      assertNotNull(nodeTypeTest0);
      assertEquals(1277, nodeTypeTest0.getNodeType());
      
      Step step0 = new Step(1282, nodeTypeTest0, expressionArray0);
      assertNotNull(step0);
      assertEquals(1277, nodeTypeTest0.getNodeType());
      assertEquals(1282, step0.getAxis());
      assertEquals(1, expressionArray0.length);
      
      stepArray0[0] = step0;
      Step step1 = new Step(355, nodeTypeTest0, expressionArray0);
      assertFalse(step1.equals((Object)step0));
      assertNotNull(step1);
      assertEquals(1277, nodeTypeTest0.getNodeType());
      assertEquals(355, step1.getAxis());
      assertEquals(1, expressionArray0.length);
      
      stepArray0[1] = step1;
      Step step2 = new Step(1282, nodeTypeTest0, expressionArray0);
      assertFalse(step2.equals((Object)step0));
      assertFalse(step2.equals((Object)step1));
      assertNotNull(step2);
      assertEquals(1277, nodeTypeTest0.getNodeType());
      assertEquals(1282, step2.getAxis());
      assertEquals(1, expressionArray0.length);
      
      stepArray0[2] = step2;
      Step step3 = new Step(1277, nodeTypeTest0, expressionArray0);
      assertFalse(step3.equals((Object)step0));
      assertFalse(step3.equals((Object)step1));
      assertFalse(step3.equals((Object)step2));
      assertNotNull(step3);
      assertEquals(1277, nodeTypeTest0.getNodeType());
      assertEquals(1277, step3.getAxis());
      assertEquals(1, expressionArray0.length);
      
      stepArray0[3] = step3;
      Step step4 = new Step(9, nodeTypeTest0, expressionArray0);
      assertFalse(step4.equals((Object)step3));
      assertFalse(step4.equals((Object)step0));
      assertFalse(step4.equals((Object)step1));
      assertFalse(step4.equals((Object)step2));
      assertNotNull(step4);
      assertEquals(1277, nodeTypeTest0.getNodeType());
      assertEquals(9, step4.getAxis());
      assertEquals(1, expressionArray0.length);
      
      stepArray0[4] = step4;
      Step step5 = new Step((-1152), nodeTypeTest0, expressionArray0);
      assertFalse(step5.equals((Object)step0));
      assertFalse(step5.equals((Object)step2));
      assertFalse(step5.equals((Object)step4));
      assertFalse(step5.equals((Object)step3));
      assertFalse(step5.equals((Object)step1));
      assertNotNull(step5);
      assertEquals(1277, nodeTypeTest0.getNodeType());
      assertEquals((-1152), step5.getAxis());
      assertEquals(1, expressionArray0.length);
      
      stepArray0[5] = step5;
      QName qName0 = new QName("");
      assertNotNull(qName0);
      assertEquals("", qName0.getName());
      assertEquals("", qName0.toString());
      assertNull(qName0.getPrefix());
      
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, "");
      assertNotNull(nodeNameTest0);
      assertEquals("", nodeNameTest0.getNamespaceURI());
      assertEquals("", nodeNameTest0.toString());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals("", qName0.getName());
      assertEquals("", qName0.toString());
      assertNull(qName0.getPrefix());
      
      Step step6 = new Step((-1680), nodeNameTest0, expressionArray0);
      assertFalse(step6.equals((Object)step1));
      assertFalse(step6.equals((Object)step0));
      assertFalse(step6.equals((Object)step2));
      assertFalse(step6.equals((Object)step4));
      assertFalse(step6.equals((Object)step5));
      assertFalse(step6.equals((Object)step3));
      assertNotNull(step6);
      assertEquals("", nodeNameTest0.getNamespaceURI());
      assertEquals("", nodeNameTest0.toString());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals((-1680), step6.getAxis());
      assertEquals("", qName0.getName());
      assertEquals("", qName0.toString());
      assertNull(qName0.getPrefix());
      assertEquals(1, expressionArray0.length);
      
      stepArray0[6] = step6;
      Step step7 = new Step((-1680), nodeNameTest0, expressionArray0);
      assertFalse(step7.equals((Object)step4));
      assertFalse(step7.equals((Object)step2));
      assertFalse(step7.equals((Object)step5));
      assertFalse(step7.equals((Object)step0));
      assertFalse(step7.equals((Object)step1));
      assertFalse(step7.equals((Object)step6));
      assertFalse(step7.equals((Object)step3));
      assertNotNull(step7);
      assertEquals("", nodeNameTest0.getNamespaceURI());
      assertEquals("", nodeNameTest0.toString());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals((-1680), step7.getAxis());
      assertEquals("", qName0.getName());
      assertEquals("", qName0.toString());
      assertNull(qName0.getPrefix());
      assertEquals(1, expressionArray0.length);
      
      stepArray0[7] = step7;
      Step step8 = new Step((-1680), nodeTypeTest0, expressionArray0);
      assertFalse(step8.equals((Object)step1));
      assertFalse(step8.equals((Object)step0));
      assertFalse(step8.equals((Object)step5));
      assertFalse(step8.equals((Object)step7));
      assertFalse(step8.equals((Object)step6));
      assertFalse(step8.equals((Object)step3));
      assertFalse(step8.equals((Object)step2));
      assertFalse(step8.equals((Object)step4));
      assertNotNull(step8);
      assertEquals(1277, nodeTypeTest0.getNodeType());
      assertEquals((-1680), step8.getAxis());
      assertEquals(1, expressionArray0.length);
      
      stepArray0[8] = step8;
      LocationPath locationPath0 = new LocationPath(true, stepArray0);
      assertNotNull(locationPath0);
      assertTrue(locationPath0.isAbsolute());
      assertEquals(9, stepArray0.length);
      
      expressionArray0[0] = (Expression) locationPath0;
      CoreFunction coreFunction0 = new CoreFunction(1, expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(1, coreFunction0.getFunctionCode());
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals(1, expressionArray0.length);
      
      // Undeclared exception!
//      try { 
        coreFunction0.functionNormalizeSpace((EvalContext) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.jxpath.ri.compiler.LocationPath", e);
//      }
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      Float float0 = new Float((float) 1048576);
      assertEquals(1048576.0F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      Constant constant0 = new Constant(float0);
      assertNotNull(constant0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      
      expressionArray0[0] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction(1048576, expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(1048576, coreFunction0.getFunctionCode());
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals(1, expressionArray0.length);
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl)JXPathContext.newContext((Object) expressionArray0[0]);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertNotNull(jXPathContextReferenceImpl0);
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertEquals(1, expressionArray0.length);
      
      QName qName0 = new QName((String) null, (String) null);
      assertNotNull(qName0);
      assertNull(qName0.getPrefix());
      assertNull(qName0.getName());
      assertNull(qName0.toString());
      
      Locale locale0 = Locale.ROOT;
      assertNotNull(locale0);
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.toString());
      
      NullPointer nullPointer0 = (NullPointer)NodePointer.newNodePointer(qName0, (Object) null, locale0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(nullPointer0);
      assertNull(qName0.getPrefix());
      assertNull(qName0.getName());
      assertNull(qName0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.toString());
      assertTrue(nullPointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, nullPointer0.getIndex());
      assertFalse(nullPointer0.isActual());
      assertFalse(nullPointer0.isContainer());
      assertFalse(nullPointer0.isCollection());
      assertNull(nullPointer0.getNamespaceURI());
      assertTrue(nullPointer0.isNode());
      assertTrue(nullPointer0.isLeaf());
      assertEquals(0, nullPointer0.getLength());
      assertFalse(nullPointer0.isDynamicPropertyDeclarationSupported());
      assertFalse(nullPointer0.isAttribute());
      
      CoreFunction coreFunction1 = new CoreFunction(Integer.MIN_VALUE, expressionArray0);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertNotNull(coreFunction1);
      assertEquals(1, coreFunction1.getArgumentCount());
      assertEquals(Integer.MIN_VALUE, coreFunction1.getFunctionCode());
      assertEquals(1, expressionArray0.length);
      
      String string0 = coreFunction1.getFunctionName();
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertEquals("unknownFunction-2147483648()", string0);
      assertNotNull(string0);
      assertEquals(1, coreFunction1.getArgumentCount());
      assertEquals(Integer.MIN_VALUE, coreFunction1.getFunctionCode());
      assertEquals(1, expressionArray0.length);
      assertNotSame(coreFunction1, coreFunction0);
      
      Step[] stepArray0 = new Step[5];
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("}");
      assertNotNull(processingInstructionTest0);
      assertEquals("}", processingInstructionTest0.getTarget());
      
      Step step0 = new Step(1048576, processingInstructionTest0, expressionArray0);
      assertNotNull(step0);
      assertEquals("}", processingInstructionTest0.getTarget());
      assertEquals(1048576, step0.getAxis());
      assertEquals(1, expressionArray0.length);
      
      stepArray0[0] = step0;
      Step step1 = new Step(1048576, processingInstructionTest0, expressionArray0);
      assertFalse(step1.equals((Object)step0));
      assertNotNull(step1);
      assertEquals("}", processingInstructionTest0.getTarget());
      assertEquals(1048576, step1.getAxis());
      assertEquals(1, expressionArray0.length);
      
      stepArray0[1] = step1;
      Step step2 = new Step(11, processingInstructionTest0, expressionArray0);
      assertFalse(step2.equals((Object)step0));
      assertFalse(step2.equals((Object)step1));
      assertNotNull(step2);
      assertEquals(11, step2.getAxis());
      assertEquals("}", processingInstructionTest0.getTarget());
      assertEquals(1, expressionArray0.length);
      
      stepArray0[2] = step2;
      Step step3 = new Step(1048576, processingInstructionTest0, expressionArray0);
      assertFalse(step3.equals((Object)step2));
      assertFalse(step3.equals((Object)step0));
      assertFalse(step3.equals((Object)step1));
      assertNotNull(step3);
      assertEquals(1048576, step3.getAxis());
      assertEquals("}", processingInstructionTest0.getTarget());
      assertEquals(1, expressionArray0.length);
      
      stepArray0[3] = step3;
      Step step4 = new Step(32, processingInstructionTest0, expressionArray0);
      assertFalse(step4.equals((Object)step0));
      assertFalse(step4.equals((Object)step1));
      assertFalse(step4.equals((Object)step2));
      assertFalse(step4.equals((Object)step3));
      assertNotNull(step4);
      assertEquals(32, step4.getAxis());
      assertEquals("}", processingInstructionTest0.getTarget());
      assertEquals(1, expressionArray0.length);
      
      stepArray0[4] = step4;
      ExpressionPath expressionPath0 = new ExpressionPath(coreFunction0, expressionArray0, stepArray0);
      assertFalse(coreFunction0.equals((Object)coreFunction1));
      assertNotNull(expressionPath0);
      assertEquals(1048576, coreFunction0.getFunctionCode());
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals(1, expressionArray0.length);
      assertEquals(5, stepArray0.length);
      
      InitialContext initialContext0 = (InitialContext)jXPathContextReferenceImpl0.getAbsoluteRootContext();
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertNotNull(initialContext0);
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertEquals(0, initialContext0.getDocumentOrder());
      assertFalse(initialContext0.isChildOrderingRequired());
      assertEquals(0, initialContext0.getPosition());
      assertEquals(1, expressionArray0.length);
      
      EvalContext evalContext0 = expressionPath0.createContextForStep(initialContext0, 28, processingInstructionTest0);
      assertFalse(coreFunction0.equals((Object)coreFunction1));
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertNull(evalContext0);
      assertEquals(1048576, coreFunction0.getFunctionCode());
      assertEquals(1, coreFunction0.getArgumentCount());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertEquals(0, initialContext0.getDocumentOrder());
      assertFalse(initialContext0.isChildOrderingRequired());
      assertEquals(0, initialContext0.getPosition());
      assertEquals("}", processingInstructionTest0.getTarget());
      assertEquals(1, expressionArray0.length);
      assertEquals(5, stepArray0.length);
      assertNotSame(coreFunction0, coreFunction1);
      
      Iterator iterator0 = coreFunction0.iterate((EvalContext) null);
      assertFalse(coreFunction0.equals((Object)coreFunction1));
      assertNotNull(iterator0);
      assertEquals(1048576, coreFunction0.getFunctionCode());
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals(1, expressionArray0.length);
      assertNotSame(coreFunction0, coreFunction1);
      
      Double double0 = (Double)coreFunction0.functionRound(initialContext0);
      assertFalse(coreFunction0.equals((Object)coreFunction1));
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(1048576.0, (double)double0, 0.01);
      assertNotNull(double0);
      assertEquals(1048576, coreFunction0.getFunctionCode());
      assertEquals(1, coreFunction0.getArgumentCount());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertEquals(0, initialContext0.getDocumentOrder());
      assertFalse(initialContext0.isChildOrderingRequired());
      assertEquals(0, initialContext0.getPosition());
      assertEquals(1, expressionArray0.length);
      assertNotSame(coreFunction0, coreFunction1);
      
      // Undeclared exception!
//      try { 
        coreFunction0.functionConcat(initialContext0);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // Incorrect number of arguments: unknownFunction1048576()(1048576)
//         //
//         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(20, expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(20, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(0, expressionArray0.length);
      
      String string0 = coreFunction0.toString();
      assertEquals("true()", string0);
      assertNotNull(string0);
      assertEquals(20, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(0, expressionArray0.length);
      
      Constant constant0 = new Constant("true()");
      assertNotNull(constant0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      
      CoreFunction coreFunction1 = new CoreFunction(2009, expressionArray0);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertNotNull(coreFunction1);
      assertEquals(0, coreFunction1.getArgumentCount());
      assertEquals(2009, coreFunction1.getFunctionCode());
      assertEquals(0, expressionArray0.length);
      
      CoreFunction coreFunction2 = new CoreFunction(18, expressionArray0);
      assertFalse(coreFunction2.equals((Object)coreFunction1));
      assertFalse(coreFunction2.equals((Object)coreFunction0));
      assertNotNull(coreFunction2);
      assertEquals(18, coreFunction2.getFunctionCode());
      assertEquals(0, coreFunction2.getArgumentCount());
      assertEquals(0, expressionArray0.length);
      
      EvalContext evalContext0 = null;
      // Undeclared exception!
//      try { 
        coreFunction2.computeValue((EvalContext) null);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // Incorrect number of arguments: boolean()
//         //
//         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "S2)");
      assertFalse(boolean0);
      
      CoreFunction coreFunction0 = new CoreFunction((-3527), (Expression[]) null);
      assertNotNull(coreFunction0);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals((-3527), coreFunction0.getFunctionCode());
      
      EvalContext evalContext0 = null;
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("S2)");
      assertNotNull(processingInstructionTest0);
      assertEquals("S2)", processingInstructionTest0.getTarget());
      
      CoreFunction coreFunction1 = new CoreFunction(30, (Expression[]) null);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertNotNull(coreFunction1);
      assertEquals(30, coreFunction1.getFunctionCode());
      assertEquals(0, coreFunction1.getArgumentCount());
      
      // Undeclared exception!
//      try { 
        coreFunction1.computeValue((EvalContext) null);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // Incorrect number of arguments: format-number()
//         //
//         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      CoreFunction coreFunction0 = new CoreFunction(2, (Expression[]) null);
      assertNotNull(coreFunction0);
      assertEquals(2, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      
      EvalContext evalContext0 = null;
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("p_\"u?p)u$J2O6n=?");
      assertNotNull(processingInstructionTest0);
      assertEquals("p_\"u?p)u$J2O6n=?", processingInstructionTest0.getTarget());
      
      CoreFunction coreFunction1 = new CoreFunction(2, (Expression[]) null);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertNotNull(coreFunction1);
      assertEquals(0, coreFunction1.getArgumentCount());
      assertEquals(2, coreFunction1.getFunctionCode());
      
      // Undeclared exception!
//      try { 
        coreFunction1.computeValue((EvalContext) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(10, (Expression[]) null);
      assertNotNull(coreFunction0);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(10, coreFunction0.getFunctionCode());
      
      EvalContext evalContext0 = null;
      // Undeclared exception!
//      try { 
        coreFunction0.compute((EvalContext) null);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // Incorrect number of arguments: starts-with()
//         //
//         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(9, (Expression[]) null);
      assertNotNull(coreFunction0);
      assertEquals(9, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl)JXPathContext.newContext((Object) coreFunction0);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertNotNull(jXPathContextReferenceImpl0);
      assertEquals(9, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl1 = new JXPathContextReferenceImpl(jXPathContextReferenceImpl0, (Object) null, (Pointer) null);
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl0));
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertNotNull(jXPathContextReferenceImpl1);
      assertEquals(9, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertFalse(jXPathContextReferenceImpl1.isLenient());
      
      InitialContext initialContext0 = (InitialContext)jXPathContextReferenceImpl1.getAbsoluteRootContext();
      assertFalse(jXPathContextReferenceImpl0.equals((Object)jXPathContextReferenceImpl1));
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl0));
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertNotNull(initialContext0);
      assertEquals(9, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertFalse(jXPathContextReferenceImpl1.isLenient());
      assertEquals(0, initialContext0.getDocumentOrder());
      assertEquals(0, initialContext0.getPosition());
      assertFalse(initialContext0.isChildOrderingRequired());
      assertNotSame(jXPathContextReferenceImpl0, jXPathContextReferenceImpl1);
      assertNotSame(jXPathContextReferenceImpl1, jXPathContextReferenceImpl0);
      
      // Undeclared exception!
//      try { 
        coreFunction0.computeValue(initialContext0);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // Incorrect number of arguments: concat()
//         //
//         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(11, expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(11, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(0, expressionArray0.length);
      
      String string0 = coreFunction0.toString();
      assertEquals("contains()", string0);
      assertNotNull(string0);
      assertEquals(11, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(0, expressionArray0.length);
      
      boolean boolean0 = coreFunction0.computeContextDependent();
      assertFalse(boolean0);
      assertEquals(11, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(0, expressionArray0.length);
      
      Expression[] expressionArray1 = new Expression[1];
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      
      boolean boolean1 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      expressionArray1[0] = (Expression) coreFunction0;
      CoreFunction coreFunction1 = new CoreFunction(17, expressionArray1);
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertNotNull(coreFunction1);
      assertEquals(1, coreFunction1.getArgumentCount());
      assertEquals(17, coreFunction1.getFunctionCode());
      assertEquals(1, expressionArray1.length);
      
      String string1 = coreFunction0.getFunctionName();
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertFalse(coreFunction0.equals((Object)coreFunction1));
      assertFalse(string1.equals((Object)string0));
      assertEquals("contains", string1);
      assertNotNull(string1);
      assertEquals(11, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(0, expressionArray0.length);
      assertNotSame(expressionArray0, expressionArray1);
      assertNotSame(coreFunction0, coreFunction1);
      
      boolean boolean2 = coreFunction0.isContextDependent();
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertFalse(coreFunction0.equals((Object)coreFunction1));
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2);
      assertEquals(11, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(0, expressionArray0.length);
      assertNotSame(expressionArray0, expressionArray1);
      assertNotSame(coreFunction0, coreFunction1);
      
      int int0 = coreFunction0.getArgumentCount();
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertFalse(coreFunction0.equals((Object)coreFunction1));
      assertEquals(0, int0);
      assertEquals(11, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(0, expressionArray0.length);
      assertNotSame(expressionArray0, expressionArray1);
      assertNotSame(coreFunction0, coreFunction1);
      
      // Undeclared exception!
//      try { 
        coreFunction1.getArg3();
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 2
//         //
//         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(0, (Expression[]) null);
      assertNotNull(coreFunction0);
      assertEquals(0, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl)JXPathContext.newContext((Object) coreFunction0);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertNotNull(jXPathContextReferenceImpl0);
      assertEquals(0, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      
      CoreFunction coreFunction1 = new CoreFunction(0, (Expression[]) null);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertNotNull(coreFunction1);
      assertEquals(0, coreFunction1.getArgumentCount());
      assertEquals(0, coreFunction1.getFunctionCode());
      
      boolean boolean0 = coreFunction0.computeContextDependent();
      assertFalse(coreFunction0.equals((Object)coreFunction1));
      assertFalse(boolean0);
      assertEquals(0, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertNotSame(coreFunction0, coreFunction1);
      
      CoreFunction coreFunction2 = new CoreFunction((-913), (Expression[]) null);
      assertFalse(coreFunction2.equals((Object)coreFunction1));
      assertFalse(coreFunction2.equals((Object)coreFunction0));
      assertNotNull(coreFunction2);
      assertEquals(0, coreFunction2.getArgumentCount());
      assertEquals((-913), coreFunction2.getFunctionCode());
      
      QName qName0 = new QName("normalize-space");
      assertNotNull(qName0);
      assertEquals("normalize-space", qName0.toString());
      assertNull(qName0.getPrefix());
      assertEquals("normalize-space", qName0.getName());
      
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
      assertNotNull(nodeNameTest0);
      assertEquals("normalize-space", qName0.toString());
      assertNull(qName0.getPrefix());
      assertEquals("normalize-space", qName0.getName());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertEquals("normalize-space", nodeNameTest0.toString());
      assertFalse(nodeNameTest0.isWildcard());
      
      VariablePointer variablePointer0 = new VariablePointer(qName0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(variablePointer0);
      assertEquals("normalize-space", qName0.toString());
      assertNull(qName0.getPrefix());
      assertEquals("normalize-space", qName0.getName());
      assertFalse(variablePointer0.isNode());
      assertFalse(variablePointer0.isActual());
      assertTrue(variablePointer0.isContainer());
      assertFalse(variablePointer0.isAttribute());
      assertNull(variablePointer0.getNamespaceURI());
      assertTrue(variablePointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
      
      BeanPointer beanPointer0 = (BeanPointer)NodePointer.newChildNodePointer(variablePointer0, qName0, coreFunction2);
      assertFalse(coreFunction2.equals((Object)coreFunction1));
      assertFalse(coreFunction2.equals((Object)coreFunction0));
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(beanPointer0);
      assertEquals(0, coreFunction2.getArgumentCount());
      assertEquals((-913), coreFunction2.getFunctionCode());
      assertEquals("normalize-space", qName0.toString());
      assertNull(qName0.getPrefix());
      assertEquals("normalize-space", qName0.getName());
      assertFalse(variablePointer0.isNode());
      assertFalse(variablePointer0.isActual());
      assertTrue(variablePointer0.isContainer());
      assertFalse(variablePointer0.isAttribute());
      assertNull(variablePointer0.getNamespaceURI());
      assertTrue(variablePointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
      assertFalse(beanPointer0.isContainer());
      assertFalse(beanPointer0.isCollection());
      assertEquals(Integer.MIN_VALUE, beanPointer0.getIndex());
      assertNull(beanPointer0.getNamespaceURI());
      assertFalse(beanPointer0.isDynamicPropertyDeclarationSupported());
      assertEquals(1, beanPointer0.getLength());
      assertFalse(beanPointer0.isRoot());
      assertFalse(beanPointer0.isAttribute());
      assertTrue(beanPointer0.isNode());
      assertNotSame(coreFunction2, coreFunction1);
      assertNotSame(coreFunction2, coreFunction0);
      
      RootContext rootContext0 = new RootContext(jXPathContextReferenceImpl0, beanPointer0);
      assertFalse(coreFunction0.equals((Object)coreFunction1));
      assertFalse(coreFunction0.equals((Object)coreFunction2));
      assertFalse(coreFunction2.equals((Object)coreFunction1));
      assertFalse(coreFunction2.equals((Object)coreFunction0));
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(rootContext0);
      assertEquals(0, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertEquals(0, coreFunction2.getArgumentCount());
      assertEquals((-913), coreFunction2.getFunctionCode());
      assertEquals("normalize-space", qName0.toString());
      assertNull(qName0.getPrefix());
      assertEquals("normalize-space", qName0.getName());
      assertFalse(variablePointer0.isNode());
      assertFalse(variablePointer0.isActual());
      assertTrue(variablePointer0.isContainer());
      assertFalse(variablePointer0.isAttribute());
      assertNull(variablePointer0.getNamespaceURI());
      assertTrue(variablePointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
      assertFalse(beanPointer0.isContainer());
      assertFalse(beanPointer0.isCollection());
      assertEquals(Integer.MIN_VALUE, beanPointer0.getIndex());
      assertNull(beanPointer0.getNamespaceURI());
      assertFalse(beanPointer0.isDynamicPropertyDeclarationSupported());
      assertEquals(1, beanPointer0.getLength());
      assertFalse(beanPointer0.isRoot());
      assertFalse(beanPointer0.isAttribute());
      assertTrue(beanPointer0.isNode());
      assertFalse(rootContext0.isChildOrderingRequired());
      assertEquals(0, rootContext0.getPosition());
      assertEquals(0, rootContext0.getDocumentOrder());
      
      RootContext rootContext1 = rootContext0.getRootContext();
      assertFalse(coreFunction0.equals((Object)coreFunction1));
      assertFalse(coreFunction0.equals((Object)coreFunction2));
      assertFalse(coreFunction2.equals((Object)coreFunction1));
      assertFalse(coreFunction2.equals((Object)coreFunction0));
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(rootContext1);
      assertEquals(0, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertEquals(0, coreFunction2.getArgumentCount());
      assertEquals((-913), coreFunction2.getFunctionCode());
      assertEquals("normalize-space", qName0.toString());
      assertNull(qName0.getPrefix());
      assertEquals("normalize-space", qName0.getName());
      assertFalse(variablePointer0.isNode());
      assertFalse(variablePointer0.isActual());
      assertTrue(variablePointer0.isContainer());
      assertFalse(variablePointer0.isAttribute());
      assertNull(variablePointer0.getNamespaceURI());
      assertTrue(variablePointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
      assertFalse(beanPointer0.isContainer());
      assertFalse(beanPointer0.isCollection());
      assertEquals(Integer.MIN_VALUE, beanPointer0.getIndex());
      assertNull(beanPointer0.getNamespaceURI());
      assertFalse(beanPointer0.isDynamicPropertyDeclarationSupported());
      assertEquals(1, beanPointer0.getLength());
      assertFalse(beanPointer0.isRoot());
      assertFalse(beanPointer0.isAttribute());
      assertTrue(beanPointer0.isNode());
      assertFalse(rootContext0.isChildOrderingRequired());
      assertEquals(0, rootContext0.getPosition());
      assertEquals(0, rootContext0.getDocumentOrder());
      assertFalse(rootContext1.isChildOrderingRequired());
      assertEquals(0, rootContext1.getPosition());
      assertEquals(0, rootContext1.getDocumentOrder());
      assertNotSame(coreFunction0, coreFunction1);
      assertNotSame(coreFunction0, coreFunction2);
      assertNotSame(coreFunction2, coreFunction1);
      assertNotSame(coreFunction2, coreFunction0);
      assertSame(rootContext0, rootContext1);
      assertSame(rootContext1, rootContext0);
      
      SelfContext selfContext0 = new SelfContext(rootContext1, nodeNameTest0);
      assertFalse(coreFunction0.equals((Object)coreFunction1));
      assertFalse(coreFunction0.equals((Object)coreFunction2));
      assertFalse(coreFunction2.equals((Object)coreFunction1));
      assertFalse(coreFunction2.equals((Object)coreFunction0));
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(selfContext0);
      assertEquals(0, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertEquals(0, coreFunction2.getArgumentCount());
      assertEquals((-913), coreFunction2.getFunctionCode());
      assertEquals("normalize-space", qName0.toString());
      assertNull(qName0.getPrefix());
      assertEquals("normalize-space", qName0.getName());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertEquals("normalize-space", nodeNameTest0.toString());
      assertFalse(nodeNameTest0.isWildcard());
      assertFalse(variablePointer0.isNode());
      assertFalse(variablePointer0.isActual());
      assertTrue(variablePointer0.isContainer());
      assertFalse(variablePointer0.isAttribute());
      assertNull(variablePointer0.getNamespaceURI());
      assertTrue(variablePointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
      assertFalse(beanPointer0.isContainer());
      assertFalse(beanPointer0.isCollection());
      assertEquals(Integer.MIN_VALUE, beanPointer0.getIndex());
      assertNull(beanPointer0.getNamespaceURI());
      assertFalse(beanPointer0.isDynamicPropertyDeclarationSupported());
      assertEquals(1, beanPointer0.getLength());
      assertFalse(beanPointer0.isRoot());
      assertFalse(beanPointer0.isAttribute());
      assertTrue(beanPointer0.isNode());
      assertFalse(rootContext0.isChildOrderingRequired());
      assertEquals(0, rootContext0.getPosition());
      assertEquals(0, rootContext0.getDocumentOrder());
      assertFalse(rootContext1.isChildOrderingRequired());
      assertEquals(0, rootContext1.getPosition());
      assertEquals(0, rootContext1.getDocumentOrder());
      assertEquals(0, selfContext0.getDocumentOrder());
      assertFalse(selfContext0.isChildOrderingRequired());
      assertEquals(0, selfContext0.getPosition());
      
      PredicateContext predicateContext0 = new PredicateContext(rootContext1, coreFunction0);
      assertFalse(coreFunction0.equals((Object)coreFunction1));
      assertFalse(coreFunction0.equals((Object)coreFunction2));
      assertFalse(coreFunction2.equals((Object)coreFunction1));
      assertFalse(coreFunction2.equals((Object)coreFunction0));
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(predicateContext0);
      assertEquals(0, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertEquals(0, coreFunction2.getArgumentCount());
      assertEquals((-913), coreFunction2.getFunctionCode());
      assertEquals("normalize-space", qName0.toString());
      assertNull(qName0.getPrefix());
      assertEquals("normalize-space", qName0.getName());
      assertFalse(variablePointer0.isNode());
      assertFalse(variablePointer0.isActual());
      assertTrue(variablePointer0.isContainer());
      assertFalse(variablePointer0.isAttribute());
      assertNull(variablePointer0.getNamespaceURI());
      assertTrue(variablePointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
      assertFalse(beanPointer0.isContainer());
      assertFalse(beanPointer0.isCollection());
      assertEquals(Integer.MIN_VALUE, beanPointer0.getIndex());
      assertNull(beanPointer0.getNamespaceURI());
      assertFalse(beanPointer0.isDynamicPropertyDeclarationSupported());
      assertEquals(1, beanPointer0.getLength());
      assertFalse(beanPointer0.isRoot());
      assertFalse(beanPointer0.isAttribute());
      assertTrue(beanPointer0.isNode());
      assertFalse(rootContext0.isChildOrderingRequired());
      assertEquals(0, rootContext0.getPosition());
      assertEquals(0, rootContext0.getDocumentOrder());
      assertFalse(rootContext1.isChildOrderingRequired());
      assertEquals(0, rootContext1.getPosition());
      assertEquals(0, rootContext1.getDocumentOrder());
      assertEquals(0, predicateContext0.getDocumentOrder());
      assertFalse(predicateContext0.isChildOrderingRequired());
      assertEquals(0, predicateContext0.getPosition());
      
      Object object0 = coreFunction0.computeValue(predicateContext0);
      assertFalse(coreFunction0.equals((Object)coreFunction1));
      assertFalse(coreFunction0.equals((Object)coreFunction2));
      assertFalse(coreFunction2.equals((Object)coreFunction1));
      assertFalse(coreFunction2.equals((Object)coreFunction0));
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNull(object0);
      assertEquals(0, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertEquals(0, coreFunction2.getArgumentCount());
      assertEquals((-913), coreFunction2.getFunctionCode());
      assertEquals("normalize-space", qName0.toString());
      assertNull(qName0.getPrefix());
      assertEquals("normalize-space", qName0.getName());
      assertFalse(variablePointer0.isNode());
      assertFalse(variablePointer0.isActual());
      assertTrue(variablePointer0.isContainer());
      assertFalse(variablePointer0.isAttribute());
      assertNull(variablePointer0.getNamespaceURI());
      assertTrue(variablePointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
      assertFalse(beanPointer0.isContainer());
      assertFalse(beanPointer0.isCollection());
      assertEquals(Integer.MIN_VALUE, beanPointer0.getIndex());
      assertNull(beanPointer0.getNamespaceURI());
      assertFalse(beanPointer0.isDynamicPropertyDeclarationSupported());
      assertEquals(1, beanPointer0.getLength());
      assertFalse(beanPointer0.isRoot());
      assertFalse(beanPointer0.isAttribute());
      assertTrue(beanPointer0.isNode());
      assertFalse(rootContext0.isChildOrderingRequired());
      assertEquals(0, rootContext0.getPosition());
      assertEquals(0, rootContext0.getDocumentOrder());
      assertFalse(rootContext1.isChildOrderingRequired());
      assertEquals(0, rootContext1.getPosition());
      assertEquals(0, rootContext1.getDocumentOrder());
      assertEquals(0, predicateContext0.getDocumentOrder());
      assertFalse(predicateContext0.isChildOrderingRequired());
      assertEquals(0, predicateContext0.getPosition());
      assertNotSame(coreFunction0, coreFunction1);
      assertNotSame(coreFunction0, coreFunction2);
      assertNotSame(coreFunction2, coreFunction1);
      assertNotSame(coreFunction2, coreFunction0);
      assertSame(rootContext0, rootContext1);
      assertSame(rootContext1, rootContext0);
      
      RootContext rootContext2 = rootContext0.getRootContext();
      assertFalse(coreFunction0.equals((Object)coreFunction1));
      assertFalse(coreFunction0.equals((Object)coreFunction2));
      assertFalse(coreFunction2.equals((Object)coreFunction1));
      assertFalse(coreFunction2.equals((Object)coreFunction0));
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(rootContext2);
      assertEquals(0, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertEquals(0, coreFunction2.getArgumentCount());
      assertEquals((-913), coreFunction2.getFunctionCode());
      assertEquals("normalize-space", qName0.toString());
      assertNull(qName0.getPrefix());
      assertEquals("normalize-space", qName0.getName());
      assertFalse(variablePointer0.isNode());
      assertFalse(variablePointer0.isActual());
      assertTrue(variablePointer0.isContainer());
      assertFalse(variablePointer0.isAttribute());
      assertNull(variablePointer0.getNamespaceURI());
      assertTrue(variablePointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
      assertFalse(beanPointer0.isContainer());
      assertFalse(beanPointer0.isCollection());
      assertEquals(Integer.MIN_VALUE, beanPointer0.getIndex());
      assertNull(beanPointer0.getNamespaceURI());
      assertFalse(beanPointer0.isDynamicPropertyDeclarationSupported());
      assertEquals(1, beanPointer0.getLength());
      assertFalse(beanPointer0.isRoot());
      assertFalse(beanPointer0.isAttribute());
      assertTrue(beanPointer0.isNode());
      assertFalse(rootContext0.isChildOrderingRequired());
      assertEquals(0, rootContext0.getPosition());
      assertEquals(0, rootContext0.getDocumentOrder());
      assertEquals(0, rootContext2.getPosition());
      assertEquals(0, rootContext2.getDocumentOrder());
      assertFalse(rootContext2.isChildOrderingRequired());
      assertNotSame(coreFunction0, coreFunction1);
      assertNotSame(coreFunction0, coreFunction2);
      assertNotSame(coreFunction2, coreFunction1);
      assertNotSame(coreFunction2, coreFunction0);
      assertSame(rootContext0, rootContext1);
      assertSame(rootContext0, rootContext2);
      assertSame(rootContext2, rootContext0);
      assertSame(rootContext2, rootContext1);
      
      // Undeclared exception!
//      try { 
        coreFunction2.functionPosition(rootContext2);
//        fail("Expecting exception: UnsupportedOperationException");
      
//      } catch(UnsupportedOperationException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.jxpath.ri.axes.RootContext", e);
//      }
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      EvalContext evalContext0 = null;
      QName qName0 = new QName("}+", "|00UqoC]7c$ AL");
      assertNotNull(qName0);
      assertEquals("|00UqoC]7c$ AL", qName0.getName());
      assertEquals("}+", qName0.getPrefix());
      assertEquals("}+:|00UqoC]7c$ AL", qName0.toString());
      
      Locale locale0 = Locale.GERMANY;
      assertNotNull(locale0);
      assertEquals("", locale0.getVariant());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("de_DE", locale0.toString());
      assertEquals("DE", locale0.getCountry());
      assertEquals("DEU", locale0.getISO3Country());
      assertEquals("de", locale0.getLanguage());
      
      int int0 = 27;
      Expression[] expressionArray0 = new Expression[2];
      CoreOperationUnion coreOperationUnion0 = new CoreOperationUnion(expressionArray0);
      assertNotNull(coreOperationUnion0);
      assertEquals("|", coreOperationUnion0.getSymbol());
      assertEquals(2, expressionArray0.length);
      
      expressionArray0[0] = (Expression) coreOperationUnion0;
      Constant constant0 = new Constant("boolean");
      assertNotNull(constant0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      
      expressionArray0[1] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction(27, expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(2, coreFunction0.getArgumentCount());
      assertEquals(27, coreFunction0.getFunctionCode());
      assertEquals(2, expressionArray0.length);
      
      // Undeclared exception!
//      try { 
        coreFunction0.computeContextDependent();
//        fail("Expecting exception: StackOverflowError");
      
//      } catch(StackOverflowError e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "Cannot fin an element by key - no KeyManager has been specified");
      assertFalse(boolean0);
      
      boolean boolean1 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "Cannot fin an element by key - no KeyManager has been specified");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(1, expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(1, coreFunction0.getFunctionCode());
      assertEquals(0, expressionArray0.length);
      
      EvalContext evalContext0 = null;
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("`b");
      assertNotNull(processingInstructionTest0);
      assertEquals("`b", processingInstructionTest0.getTarget());
      
      boolean boolean2 = coreFunction0.computeContextDependent();
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(1, coreFunction0.getFunctionCode());
      assertEquals(0, expressionArray0.length);
      
      // Undeclared exception!
//      try { 
        coreFunction0.functionNumber((EvalContext) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(20, expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(20, coreFunction0.getFunctionCode());
      assertEquals(0, expressionArray0.length);
      
      String string0 = coreFunction0.toString();
      assertEquals("true()", string0);
      assertNotNull(string0);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(20, coreFunction0.getFunctionCode());
      assertEquals(0, expressionArray0.length);
      
      CoreFunction coreFunction1 = new CoreFunction(2, (Expression[]) null);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertNotNull(coreFunction1);
      assertEquals(2, coreFunction1.getFunctionCode());
      assertEquals(0, coreFunction1.getArgumentCount());
      
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("substring-before");
      assertNotNull(processingInstructionTest0);
      assertEquals("substring-before", processingInstructionTest0.getTarget());
      
      boolean boolean0 = coreFunction1.computeContextDependent();
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertTrue(boolean0);
      assertEquals(2, coreFunction1.getFunctionCode());
      assertEquals(0, coreFunction1.getArgumentCount());
      assertNotSame(coreFunction1, coreFunction0);
      
      CoreFunction coreFunction2 = new CoreFunction(424, expressionArray0);
      assertFalse(coreFunction2.equals((Object)coreFunction0));
      assertFalse(coreFunction2.equals((Object)coreFunction1));
      assertNotNull(coreFunction2);
      assertEquals(0, coreFunction2.getArgumentCount());
      assertEquals(424, coreFunction2.getFunctionCode());
      assertEquals(0, expressionArray0.length);
      
      Object object0 = coreFunction2.computeValue((EvalContext) null);
      assertFalse(coreFunction2.equals((Object)coreFunction0));
      assertFalse(coreFunction2.equals((Object)coreFunction1));
      assertNull(object0);
      assertEquals(0, coreFunction2.getArgumentCount());
      assertEquals(424, coreFunction2.getFunctionCode());
      assertEquals(0, expressionArray0.length);
      assertNotSame(coreFunction2, coreFunction0);
      assertNotSame(coreFunction2, coreFunction1);
      
      Object object1 = coreFunction2.functionNull((EvalContext) null);
      assertFalse(coreFunction2.equals((Object)coreFunction0));
      assertFalse(coreFunction2.equals((Object)coreFunction1));
      assertNull(object1);
      assertEquals(0, coreFunction2.getArgumentCount());
      assertEquals(424, coreFunction2.getFunctionCode());
      assertEquals(0, expressionArray0.length);
      assertNotSame(coreFunction2, coreFunction0);
      assertNotSame(coreFunction2, coreFunction1);
      
      // Undeclared exception!
//      try { 
        coreFunction2.functionSum((EvalContext) null);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // Incorrect number of arguments: unknownFunction424()()
//         //
//         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      Locale locale0 = Locale.GERMANY;
      assertNotNull(locale0);
      assertEquals("de_DE", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("de", locale0.getLanguage());
      assertEquals("DEU", locale0.getISO3Country());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("DE", locale0.getCountry());
      
      int int0 = 9;
      CoreFunction coreFunction0 = new CoreFunction(9, (Expression[]) null);
      assertNotNull(coreFunction0);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(9, coreFunction0.getFunctionCode());
      
      String string0 = coreFunction0.toString();
      assertEquals("concat()", string0);
      assertNotNull(string0);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(9, coreFunction0.getFunctionCode());
      
      boolean boolean0 = coreFunction0.isContextDependent();
      assertFalse(boolean0);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(9, coreFunction0.getFunctionCode());
      
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction1 = new CoreFunction(9, expressionArray0);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertNotNull(coreFunction1);
      assertEquals(0, coreFunction1.getArgumentCount());
      assertEquals(9, coreFunction1.getFunctionCode());
      assertEquals(0, expressionArray0.length);
      
      // Undeclared exception!
//      try { 
        coreFunction1.getArg3();
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 2
//         //
//         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(18, (Expression[]) null);
      assertNotNull(coreFunction0);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(18, coreFunction0.getFunctionCode());
      
      boolean boolean0 = coreFunction0.isContextDependent();
      assertTrue(boolean0);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(18, coreFunction0.getFunctionCode());
      
      String string0 = coreFunction0.getFunctionName();
      assertEquals("boolean", string0);
      assertNotNull(string0);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(18, coreFunction0.getFunctionCode());
      
      boolean boolean1 = coreFunction0.isContextDependent();
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(18, coreFunction0.getFunctionCode());
      
      int int0 = coreFunction0.getArgumentCount();
      assertEquals(0, int0);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(18, coreFunction0.getFunctionCode());
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      QName qName0 = new QName("=8;", "c@=v` ");
      assertNotNull(qName0);
      assertEquals("=8;:c@=v` ", qName0.toString());
      assertEquals("c@=v` ", qName0.getName());
      assertEquals("=8;", qName0.getPrefix());
      
      Locale locale0 = Locale.GERMANY;
      assertNotNull(locale0);
      assertEquals("de", locale0.getLanguage());
      assertEquals("DEU", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("DE", locale0.getCountry());
      assertEquals("de_DE", locale0.toString());
      
      CoreFunction coreFunction0 = new CoreFunction(5, (Expression[]) null);
      assertNotNull(coreFunction0);
      assertEquals(5, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      
      String string0 = coreFunction0.getFunctionName();
      assertEquals("local-name", string0);
      assertNotNull(string0);
      assertEquals(5, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      
      boolean boolean0 = coreFunction0.isContextDependent();
      assertTrue(boolean0);
      assertEquals(5, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      
      int int0 = coreFunction0.getArgumentCount();
      assertEquals(0, int0);
      assertEquals(5, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      QName qName0 = new QName("", "#V0WjyQm?P6Q");
      assertNotNull(qName0);
      assertEquals("#V0WjyQm?P6Q", qName0.getName());
      assertEquals(":#V0WjyQm?P6Q", qName0.toString());
      assertEquals("", qName0.getPrefix());
      
      Locale locale0 = Locale.GERMANY;
      assertNotNull(locale0);
      assertEquals("de_DE", locale0.toString());
      assertEquals("DE", locale0.getCountry());
      assertEquals("de", locale0.getLanguage());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("DEU", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      
      CoreFunction coreFunction0 = new CoreFunction(13, (Expression[]) null);
      assertNotNull(coreFunction0);
      assertEquals(13, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      
      boolean boolean0 = coreFunction0.computeContextDependent();
      assertFalse(boolean0);
      assertEquals(13, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      
      CoreFunction coreFunction1 = new CoreFunction(27, (Expression[]) null);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertNotNull(coreFunction1);
      assertEquals(27, coreFunction1.getFunctionCode());
      assertEquals(0, coreFunction1.getArgumentCount());
      
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
      assertNotNull(nodeNameTest0);
      assertEquals("#V0WjyQm?P6Q", qName0.getName());
      assertEquals(":#V0WjyQm?P6Q", qName0.toString());
      assertEquals("", qName0.getPrefix());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals(":#V0WjyQm?P6Q", nodeNameTest0.toString());
      
      SelfContext selfContext0 = new SelfContext((EvalContext) null, nodeNameTest0);
      assertNotNull(selfContext0);
      assertEquals("#V0WjyQm?P6Q", qName0.getName());
      assertEquals(":#V0WjyQm?P6Q", qName0.toString());
      assertEquals("", qName0.getPrefix());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals(":#V0WjyQm?P6Q", nodeNameTest0.toString());
      assertFalse(selfContext0.isChildOrderingRequired());
      assertEquals(0, selfContext0.getPosition());
      assertEquals(0, selfContext0.getDocumentOrder());
      
      // Undeclared exception!
//      try { 
        coreFunction1.computeValue(selfContext0);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // Incorrect number of arguments: round()
//         //
//         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(20, expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(20, coreFunction0.getFunctionCode());
      assertEquals(0, expressionArray0.length);
      
      String string0 = coreFunction0.toString();
      assertEquals("true()", string0);
      assertNotNull(string0);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(20, coreFunction0.getFunctionCode());
      assertEquals(0, expressionArray0.length);
      
      Constant constant0 = new Constant("true()");
      assertNotNull(constant0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      
      CoreFunction coreFunction1 = new CoreFunction(2009, expressionArray0);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertNotNull(coreFunction1);
      assertEquals(2009, coreFunction1.getFunctionCode());
      assertEquals(0, coreFunction1.getArgumentCount());
      assertEquals(0, expressionArray0.length);
      
      CoreFunction coreFunction2 = new CoreFunction(24, expressionArray0);
      assertFalse(coreFunction2.equals((Object)coreFunction0));
      assertFalse(coreFunction2.equals((Object)coreFunction1));
      assertNotNull(coreFunction2);
      assertEquals(0, coreFunction2.getArgumentCount());
      assertEquals(24, coreFunction2.getFunctionCode());
      assertEquals(0, expressionArray0.length);
      
      Object object0 = coreFunction0.computeValue((EvalContext) null);
      assertFalse(coreFunction0.equals((Object)coreFunction2));
      assertFalse(coreFunction0.equals((Object)coreFunction1));
      assertEquals(true, object0);
      assertNotNull(object0);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(20, coreFunction0.getFunctionCode());
      assertEquals(0, expressionArray0.length);
      assertNotSame(coreFunction0, coreFunction2);
      assertNotSame(coreFunction0, coreFunction1);
      
      // Undeclared exception!
//      try { 
        coreFunction2.functionPosition((EvalContext) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      EvalContext evalContext0 = null;
      QName qName0 = new QName("|00UqoC]7c$ AL", "c@=v` ");
      assertNotNull(qName0);
      assertEquals("|00UqoC]7c$ AL:c@=v` ", qName0.toString());
      assertEquals("c@=v` ", qName0.getName());
      assertEquals("|00UqoC]7c$ AL", qName0.getPrefix());
      
      Locale locale0 = Locale.GERMANY;
      assertNotNull(locale0);
      assertEquals("de_DE", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("DEU", locale0.getISO3Country());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("DE", locale0.getCountry());
      assertEquals("de", locale0.getLanguage());
      
      CoreFunction coreFunction0 = new CoreFunction(10, (Expression[]) null);
      assertNotNull(coreFunction0);
      assertEquals(10, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      
      boolean boolean0 = coreFunction0.computeContextDependent();
      assertFalse(boolean0);
      assertEquals(10, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      
      CoreFunction coreFunction1 = new CoreFunction(27, (Expression[]) null);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertNotNull(coreFunction1);
      assertEquals(27, coreFunction1.getFunctionCode());
      assertEquals(0, coreFunction1.getArgumentCount());
      
      // Undeclared exception!
//      try { 
        coreFunction0.computeValue((EvalContext) null);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // Incorrect number of arguments: starts-with()
//         //
//         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction((-2930), (Expression[]) null);
      assertNotNull(coreFunction0);
      assertEquals((-2930), coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      
      boolean boolean0 = coreFunction0.computeContextDependent();
      assertFalse(boolean0);
      assertEquals((-2930), coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      
      int int0 = coreFunction0.getArgumentCount();
      assertEquals(0, int0);
      assertEquals((-2930), coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      
      CoreFunction coreFunction1 = new CoreFunction(21, (Expression[]) null);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertNotNull(coreFunction1);
      assertEquals(0, coreFunction1.getArgumentCount());
      assertEquals(21, coreFunction1.getFunctionCode());
      
      String string0 = coreFunction1.toString();
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertEquals("false()", string0);
      assertNotNull(string0);
      assertEquals(0, coreFunction1.getArgumentCount());
      assertEquals(21, coreFunction1.getFunctionCode());
      assertNotSame(coreFunction1, coreFunction0);
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(20, expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(20, coreFunction0.getFunctionCode());
      assertEquals(0, expressionArray0.length);
      
      String string0 = coreFunction0.toString();
      assertEquals("true()", string0);
      assertNotNull(string0);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(20, coreFunction0.getFunctionCode());
      assertEquals(0, expressionArray0.length);
      
      EvalContext evalContext0 = null;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      String string1 = coreFunction0.toString();
      assertTrue(string1.equals((Object)string0));
      assertEquals("true()", string1);
      assertNotNull(string1);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(20, coreFunction0.getFunctionCode());
      assertEquals(0, expressionArray0.length);
      
      Constant constant0 = new Constant("true()");
      assertNotNull(constant0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      
      CoreFunction coreFunction1 = new CoreFunction(2009, expressionArray0);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertNotNull(coreFunction1);
      assertEquals(2009, coreFunction1.getFunctionCode());
      assertEquals(0, coreFunction1.getArgumentCount());
      assertEquals(0, expressionArray0.length);
      
      CoreFunction coreFunction2 = new CoreFunction(24, expressionArray0);
      assertFalse(coreFunction2.equals((Object)coreFunction0));
      assertFalse(coreFunction2.equals((Object)coreFunction1));
      assertNotNull(coreFunction2);
      assertEquals(0, coreFunction2.getArgumentCount());
      assertEquals(24, coreFunction2.getFunctionCode());
      assertEquals(0, expressionArray0.length);
      
      // Undeclared exception!
//      try { 
        coreFunction2.computeValue((EvalContext) null);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // Incorrect number of arguments: sum()
//         //
//         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      Expression[] expressionArray0 = null;
      CoreFunction coreFunction0 = new CoreFunction(13, (Expression[]) null);
      assertNotNull(coreFunction0);
      assertEquals(13, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl)JXPathContext.newContext((Object) coreFunction0);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertNotNull(jXPathContextReferenceImpl0);
      assertEquals(13, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      QName qName0 = new QName("", "");
      assertNotNull(qName0);
      assertEquals("", qName0.getName());
      assertEquals("", qName0.getPrefix());
      assertEquals(":", qName0.toString());
      
      Locale locale0 = Locale.KOREAN;
      assertNotNull(locale0);
      assertEquals("ko", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("ko", locale0.toString());
      
      BeanPointer beanPointer0 = (BeanPointer)NodePointer.newNodePointer(qName0, "", locale0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(beanPointer0);
      assertEquals("", qName0.getName());
      assertEquals("", qName0.getPrefix());
      assertEquals(":", qName0.toString());
      assertEquals("ko", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("ko", locale0.toString());
      assertFalse(beanPointer0.isCollection());
      assertEquals(1, beanPointer0.getLength());
      assertNull(beanPointer0.getNamespaceURI());
      assertEquals(Integer.MIN_VALUE, beanPointer0.getIndex());
      assertFalse(beanPointer0.isContainer());
      assertTrue(beanPointer0.isRoot());
      assertTrue(beanPointer0.isNode());
      assertFalse(beanPointer0.isDynamicPropertyDeclarationSupported());
      assertFalse(beanPointer0.isAttribute());
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl1 = new JXPathContextReferenceImpl(jXPathContextReferenceImpl0, coreFunction0, beanPointer0);
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl0));
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertNotNull(jXPathContextReferenceImpl1);
      assertEquals(13, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertEquals("", qName0.getName());
      assertEquals("", qName0.getPrefix());
      assertEquals(":", qName0.toString());
      assertEquals("ko", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("ko", locale0.toString());
      assertFalse(beanPointer0.isCollection());
      assertEquals(1, beanPointer0.getLength());
      assertNull(beanPointer0.getNamespaceURI());
      assertEquals(Integer.MIN_VALUE, beanPointer0.getIndex());
      assertFalse(beanPointer0.isContainer());
      assertTrue(beanPointer0.isRoot());
      assertTrue(beanPointer0.isNode());
      assertFalse(beanPointer0.isDynamicPropertyDeclarationSupported());
      assertFalse(beanPointer0.isAttribute());
      assertFalse(jXPathContextReferenceImpl1.isLenient());
      
      RootContext rootContext0 = new RootContext(jXPathContextReferenceImpl1, beanPointer0);
      assertFalse(jXPathContextReferenceImpl0.equals((Object)jXPathContextReferenceImpl1));
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl0));
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertNotNull(rootContext0);
      assertEquals(13, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertEquals("", qName0.getName());
      assertEquals("", qName0.getPrefix());
      assertEquals(":", qName0.toString());
      assertEquals("ko", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("ko", locale0.toString());
      assertFalse(beanPointer0.isCollection());
      assertEquals(1, beanPointer0.getLength());
      assertNull(beanPointer0.getNamespaceURI());
      assertEquals(Integer.MIN_VALUE, beanPointer0.getIndex());
      assertFalse(beanPointer0.isContainer());
      assertTrue(beanPointer0.isRoot());
      assertTrue(beanPointer0.isNode());
      assertFalse(beanPointer0.isDynamicPropertyDeclarationSupported());
      assertFalse(beanPointer0.isAttribute());
      assertFalse(jXPathContextReferenceImpl1.isLenient());
      assertFalse(rootContext0.isChildOrderingRequired());
      assertEquals(0, rootContext0.getDocumentOrder());
      assertEquals(0, rootContext0.getPosition());
      
      VariablePointer variablePointer0 = (VariablePointer)jXPathContextReferenceImpl1.getVariablePointer(qName0);
      assertFalse(jXPathContextReferenceImpl0.equals((Object)jXPathContextReferenceImpl1));
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl0));
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(variablePointer0);
      assertEquals(13, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertEquals("", qName0.getName());
      assertEquals("", qName0.getPrefix());
      assertEquals(":", qName0.toString());
      assertEquals("ko", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("ko", locale0.toString());
      assertFalse(beanPointer0.isCollection());
      assertEquals(1, beanPointer0.getLength());
      assertNull(beanPointer0.getNamespaceURI());
      assertEquals(Integer.MIN_VALUE, beanPointer0.getIndex());
      assertFalse(beanPointer0.isContainer());
      assertTrue(beanPointer0.isRoot());
      assertTrue(beanPointer0.isNode());
      assertFalse(beanPointer0.isDynamicPropertyDeclarationSupported());
      assertFalse(beanPointer0.isAttribute());
      assertFalse(jXPathContextReferenceImpl1.isLenient());
      assertFalse(variablePointer0.isAttribute());
      assertNull(variablePointer0.getNamespaceURI());
      assertTrue(variablePointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
      assertFalse(variablePointer0.isActual());
      assertFalse(variablePointer0.isNode());
      assertTrue(variablePointer0.isContainer());
      assertNotSame(jXPathContextReferenceImpl0, jXPathContextReferenceImpl1);
      assertNotSame(jXPathContextReferenceImpl1, jXPathContextReferenceImpl0);
      
      RootContext rootContext1 = rootContext0.getRootContext();
      assertFalse(jXPathContextReferenceImpl0.equals((Object)jXPathContextReferenceImpl1));
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl0));
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertNotNull(rootContext1);
      assertEquals(13, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertEquals("", qName0.getName());
      assertEquals("", qName0.getPrefix());
      assertEquals(":", qName0.toString());
      assertEquals("ko", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("ko", locale0.toString());
      assertFalse(beanPointer0.isCollection());
      assertEquals(1, beanPointer0.getLength());
      assertNull(beanPointer0.getNamespaceURI());
      assertEquals(Integer.MIN_VALUE, beanPointer0.getIndex());
      assertFalse(beanPointer0.isContainer());
      assertTrue(beanPointer0.isRoot());
      assertTrue(beanPointer0.isNode());
      assertFalse(beanPointer0.isDynamicPropertyDeclarationSupported());
      assertFalse(beanPointer0.isAttribute());
      assertFalse(jXPathContextReferenceImpl1.isLenient());
      assertFalse(rootContext0.isChildOrderingRequired());
      assertEquals(0, rootContext0.getDocumentOrder());
      assertEquals(0, rootContext0.getPosition());
      assertEquals(0, rootContext1.getPosition());
      assertEquals(0, rootContext1.getDocumentOrder());
      assertFalse(rootContext1.isChildOrderingRequired());
      assertNotSame(jXPathContextReferenceImpl0, jXPathContextReferenceImpl1);
      assertNotSame(jXPathContextReferenceImpl1, jXPathContextReferenceImpl0);
      assertSame(rootContext0, rootContext1);
      assertSame(rootContext1, rootContext0);
      
      // Undeclared exception!
//      try { 
        coreFunction0.functionSubstringAfter(rootContext1);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // Incorrect number of arguments: substring-after()
//         //
//         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(20, expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(20, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(0, expressionArray0.length);
      
      String string0 = coreFunction0.toString();
      assertEquals("true()", string0);
      assertNotNull(string0);
      assertEquals(20, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(0, expressionArray0.length);
      
      boolean boolean0 = coreFunction0.isContextDependent();
      assertFalse(boolean0);
      assertEquals(20, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(0, expressionArray0.length);
      
      boolean boolean1 = coreFunction0.computeContextDependent();
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      assertEquals(20, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(0, expressionArray0.length);
      
      EvalContext evalContext0 = null;
      CoreFunction coreFunction1 = new CoreFunction(20, expressionArray0);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertNotNull(coreFunction1);
      assertEquals(20, coreFunction1.getFunctionCode());
      assertEquals(0, coreFunction1.getArgumentCount());
      assertEquals(0, expressionArray0.length);
      
      QName qName0 = new QName("RupU>hZ");
      assertNotNull(qName0);
      assertEquals("RupU>hZ", qName0.toString());
      assertEquals("RupU>hZ", qName0.getName());
      assertNull(qName0.getPrefix());
      
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
      assertNotNull(nodeNameTest0);
      assertEquals("RupU>hZ", qName0.toString());
      assertEquals("RupU>hZ", qName0.getName());
      assertNull(qName0.getPrefix());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals("RupU>hZ", nodeNameTest0.toString());
      
      DescendantContext descendantContext0 = new DescendantContext((EvalContext) null, false, nodeNameTest0);
      assertNotNull(descendantContext0);
      assertEquals("RupU>hZ", qName0.toString());
      assertEquals("RupU>hZ", qName0.getName());
      assertNull(qName0.getPrefix());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals("RupU>hZ", nodeNameTest0.toString());
      assertEquals(0, descendantContext0.getPosition());
      assertTrue(descendantContext0.isChildOrderingRequired());
      assertEquals(0, descendantContext0.getDocumentOrder());
      
      // Undeclared exception!
//      try { 
        coreFunction1.iteratePointers(descendantContext0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.jxpath.ri.EvalContext", e);
//      }
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[11];
      EvalContext evalContext0 = null;
      QName qName0 = new QName("c@=v` ", "v>,|p%yw$MN'\"#V");
      assertNotNull(qName0);
      assertEquals("c@=v` :v>,|p%yw$MN'\"#V", qName0.toString());
      assertEquals("c@=v` ", qName0.getPrefix());
      assertEquals("v>,|p%yw$MN'\"#V", qName0.getName());
      
      Locale locale0 = Locale.GERMANY;
      assertNotNull(locale0);
      assertEquals("de", locale0.getLanguage());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("DEU", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("DE", locale0.getCountry());
      assertEquals("de_DE", locale0.toString());
      
      CoreFunction coreFunction0 = new CoreFunction(1568, expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(11, coreFunction0.getArgumentCount());
      assertEquals(1568, coreFunction0.getFunctionCode());
      assertEquals(11, expressionArray0.length);
      
      int int0 = 2;
      CoreFunction coreFunction1 = new CoreFunction(2, expressionArray0);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertNotNull(coreFunction1);
      assertEquals(2, coreFunction1.getFunctionCode());
      assertEquals(11, coreFunction1.getArgumentCount());
      assertEquals(11, expressionArray0.length);
      
      // Undeclared exception!
//      try { 
        coreFunction1.iterate((EvalContext) null);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // Incorrect number of arguments: position(null, null, null, null, null, null, null, null, null, null, null)
//         //
//         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      EvalContext evalContext0 = null;
      QName qName0 = new QName("'", "c@=v` ");
      assertNotNull(qName0);
      assertEquals("'", qName0.getPrefix());
      assertEquals("c@=v` ", qName0.getName());
      assertEquals("':c@=v` ", qName0.toString());
      
      Locale locale0 = Locale.GERMANY;
      assertNotNull(locale0);
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("de", locale0.getLanguage());
      assertEquals("DEU", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("DE", locale0.getCountry());
      assertEquals("de_DE", locale0.toString());
      
      CoreFunction coreFunction0 = new CoreFunction(27, (Expression[]) null);
      assertNotNull(coreFunction0);
      assertEquals(27, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      
      boolean boolean0 = coreFunction0.computeContextDependent();
      assertFalse(boolean0);
      assertEquals(27, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      
      CoreFunction coreFunction1 = new CoreFunction(10, (Expression[]) null);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertNotNull(coreFunction1);
      assertEquals(0, coreFunction1.getArgumentCount());
      assertEquals(10, coreFunction1.getFunctionCode());
      
      // Undeclared exception!
//      try { 
        coreFunction0.computeValue((EvalContext) null);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // Incorrect number of arguments: round()
//         //
//         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      Expression[] expressionArray0 = new Expression[2];
      CoreOperationUnion coreOperationUnion0 = new CoreOperationUnion(expressionArray0);
      assertNotNull(coreOperationUnion0);
      assertEquals("|", coreOperationUnion0.getSymbol());
      assertEquals(2, expressionArray0.length);
      
      expressionArray0[0] = (Expression) coreOperationUnion0;
      Step[] stepArray0 = new Step[6];
      QName qName0 = new QName("last", "last");
      assertNotNull(qName0);
      assertEquals("last:last", qName0.toString());
      assertEquals("last", qName0.getPrefix());
      assertEquals("last", qName0.getName());
      
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
      assertNotNull(nodeNameTest0);
      assertEquals("last:last", qName0.toString());
      assertEquals("last", qName0.getPrefix());
      assertEquals("last", qName0.getName());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals("last:last", nodeNameTest0.toString());
      assertNull(nodeNameTest0.getNamespaceURI());
      
      Step step0 = new Step(12, nodeNameTest0, expressionArray0);
      assertNotNull(step0);
      assertEquals("last:last", qName0.toString());
      assertEquals("last", qName0.getPrefix());
      assertEquals("last", qName0.getName());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals("last:last", nodeNameTest0.toString());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertEquals(12, step0.getAxis());
      assertEquals(2, expressionArray0.length);
      
      stepArray0[0] = step0;
      Step step1 = new Step(3220, nodeNameTest0, expressionArray0);
      assertFalse(step1.equals((Object)step0));
      assertNotNull(step1);
      assertEquals("last:last", qName0.toString());
      assertEquals("last", qName0.getPrefix());
      assertEquals("last", qName0.getName());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals("last:last", nodeNameTest0.toString());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertEquals(3220, step1.getAxis());
      assertEquals(2, expressionArray0.length);
      
      stepArray0[1] = step1;
      Step step2 = new Step(2872, nodeNameTest0, expressionArray0);
      assertFalse(step2.equals((Object)step0));
      assertFalse(step2.equals((Object)step1));
      assertNotNull(step2);
      assertEquals("last:last", qName0.toString());
      assertEquals("last", qName0.getPrefix());
      assertEquals("last", qName0.getName());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals("last:last", nodeNameTest0.toString());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertEquals(2872, step2.getAxis());
      assertEquals(2, expressionArray0.length);
      
      stepArray0[2] = step2;
      Step step3 = new Step(25, nodeNameTest0, expressionArray0);
      assertFalse(step3.equals((Object)step0));
      assertFalse(step3.equals((Object)step2));
      assertFalse(step3.equals((Object)step1));
      assertNotNull(step3);
      assertEquals("last:last", qName0.toString());
      assertEquals("last", qName0.getPrefix());
      assertEquals("last", qName0.getName());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals("last:last", nodeNameTest0.toString());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertEquals(25, step3.getAxis());
      assertEquals(2, expressionArray0.length);
      
      stepArray0[3] = step3;
      Step step4 = new Step(3033, nodeNameTest0, expressionArray0);
      assertFalse(step4.equals((Object)step1));
      assertFalse(step4.equals((Object)step2));
      assertFalse(step4.equals((Object)step3));
      assertFalse(step4.equals((Object)step0));
      assertNotNull(step4);
      assertEquals("last:last", qName0.toString());
      assertEquals("last", qName0.getPrefix());
      assertEquals("last", qName0.getName());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals("last:last", nodeNameTest0.toString());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertEquals(3033, step4.getAxis());
      assertEquals(2, expressionArray0.length);
      
      stepArray0[4] = step4;
      Step step5 = new Step((-1290), nodeNameTest0, expressionArray0);
      assertFalse(step5.equals((Object)step2));
      assertFalse(step5.equals((Object)step4));
      assertFalse(step5.equals((Object)step0));
      assertFalse(step5.equals((Object)step3));
      assertFalse(step5.equals((Object)step1));
      assertNotNull(step5);
      assertEquals((-1290), step5.getAxis());
      assertEquals("last:last", qName0.toString());
      assertEquals("last", qName0.getPrefix());
      assertEquals("last", qName0.getName());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals("last:last", nodeNameTest0.toString());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertEquals(2, expressionArray0.length);
      
      stepArray0[5] = step5;
      ExpressionPath expressionPath0 = new ExpressionPath(expressionArray0[0], expressionArray0, stepArray0);
      assertNotNull(expressionPath0);
      assertEquals(2, expressionArray0.length);
      assertEquals(6, stepArray0.length);
      
      expressionArray0[1] = (Expression) expressionPath0;
      CoreFunction coreFunction0 = new CoreFunction(12, expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(2, coreFunction0.getArgumentCount());
      assertEquals(12, coreFunction0.getFunctionCode());
      assertEquals(2, expressionArray0.length);
      
      // Undeclared exception!
      coreFunction0.functionNormalizeSpace((EvalContext) null);
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[2];
      EvalContext evalContext0 = null;
      CoreFunction coreFunction0 = new CoreFunction(2, expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(2, coreFunction0.getArgumentCount());
      assertEquals(2, coreFunction0.getFunctionCode());
      assertEquals(2, expressionArray0.length);
      
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest((-2933));
      assertNotNull(nodeTypeTest0);
      assertEquals((-2933), nodeTypeTest0.getNodeType());
      
      DescendantContext descendantContext0 = new DescendantContext((EvalContext) null, true, nodeTypeTest0);
      assertNotNull(descendantContext0);
      assertEquals((-2933), nodeTypeTest0.getNodeType());
      assertEquals(0, descendantContext0.getDocumentOrder());
      assertEquals(0, descendantContext0.getPosition());
      assertTrue(descendantContext0.isChildOrderingRequired());
      
      // Undeclared exception!
//      try { 
        coreFunction0.functionSum(descendantContext0);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // Incorrect number of arguments: position(null, null)
//         //
//         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[4];
      CoreFunction coreFunction0 = new CoreFunction(3033, expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(4, coreFunction0.getArgumentCount());
      assertEquals(3033, coreFunction0.getFunctionCode());
      assertEquals(4, expressionArray0.length);
      
      CoreOperationDivide coreOperationDivide0 = new CoreOperationDivide(coreFunction0, coreFunction0);
      assertNotNull(coreOperationDivide0);
      assertEquals(4, coreFunction0.getArgumentCount());
      assertEquals(3033, coreFunction0.getFunctionCode());
      assertEquals("div", coreOperationDivide0.getSymbol());
      assertEquals(4, expressionArray0.length);
      
      expressionArray0[0] = (Expression) coreOperationDivide0;
      String string0 = coreFunction0.getFunctionName();
      assertEquals("unknownFunction3033()", string0);
      assertNotNull(string0);
      assertEquals(4, coreFunction0.getArgumentCount());
      assertEquals(3033, coreFunction0.getFunctionCode());
      assertEquals(4, expressionArray0.length);
      
      CoreOperationMultiply coreOperationMultiply0 = new CoreOperationMultiply(coreOperationDivide0, coreFunction0);
      assertNotNull(coreOperationMultiply0);
      assertEquals(4, coreFunction0.getArgumentCount());
      assertEquals(3033, coreFunction0.getFunctionCode());
      assertEquals("div", coreOperationDivide0.getSymbol());
      assertEquals("*", coreOperationMultiply0.getSymbol());
      assertEquals(4, expressionArray0.length);
      
      expressionArray0[1] = (Expression) coreOperationMultiply0;
      CoreOperationAnd coreOperationAnd0 = new CoreOperationAnd(expressionArray0);
      assertNotNull(coreOperationAnd0);
      assertEquals("and", coreOperationAnd0.getSymbol());
      assertEquals(4, expressionArray0.length);
      
      expressionArray0[2] = (Expression) coreOperationAnd0;
      expressionArray0[3] = (Expression) coreOperationMultiply0;
      Integer integer0 = new Integer((-767));
      assertEquals((-767), (int)integer0);
      assertNotNull(integer0);
      
      EvalContext evalContext0 = null;
      Object object0 = coreFunction0.functionConcat((EvalContext) null);
      assertFalse(object0.equals((Object)string0));
      assertEquals("NaNNaNfalseNaN", object0);
      assertNotNull(object0);
      assertEquals(4, coreFunction0.getArgumentCount());
      assertEquals(3033, coreFunction0.getFunctionCode());
      assertEquals(4, expressionArray0.length);
      
      // Undeclared exception!
//      try { 
        coreFunction0.functionTrue((EvalContext) null);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // Incorrect number of arguments: unknownFunction3033()(org.apache.commons.jxpath.ri.compiler.CoreFunction@0000000001 div org.apache.commons.jxpath.ri.compiler.CoreFunction@0000000001, org.apache.commons.jxpath.ri.compiler.CoreOperationDivide@0000000002 * org.apache.commons.jxpath.ri.compiler.CoreFunction@0000000001, org.apache.commons.jxpath.ri.compiler.CoreOperationDivide@0000000002 and org.apache.commons.jxpath.ri.compiler.CoreOperationMultiply@0000000003 and org.apache.commons.jxpath.ri.compiler.CoreOperationAnd@0000000004 and org.apache.commons.jxpath.ri.compiler.CoreOperationMultiply@0000000003, org.apache.commons.jxpath.ri.compiler.CoreOperationDivide@0000000002 * org.apache.commons.jxpath.ri.compiler.CoreFunction@0000000001)
//         //
//         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[6];
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd(expressionArray0);
      assertNotNull(coreOperationAdd0);
      assertEquals("+", coreOperationAdd0.getSymbol());
      assertEquals(6, expressionArray0.length);
      
      CoreOperationEqual coreOperationEqual0 = new CoreOperationEqual(coreOperationAdd0, coreOperationAdd0);
      assertNotNull(coreOperationEqual0);
      assertEquals("+", coreOperationAdd0.getSymbol());
      assertEquals("=", coreOperationEqual0.getSymbol());
      assertEquals(6, expressionArray0.length);
      
      expressionArray0[0] = (Expression) coreOperationEqual0;
      Step[] stepArray0 = new Step[2];
      QName qName0 = new QName("4Ph1;${W{#?d@c\rJK", "ceiling");
      assertNotNull(qName0);
      assertEquals("ceiling", qName0.getName());
      
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
      assertNotNull(nodeNameTest0);
      assertEquals("ceiling", qName0.getName());
      assertFalse(nodeNameTest0.isWildcard());
      assertNull(nodeNameTest0.getNamespaceURI());
      
      Step step0 = new Step((-2315), nodeNameTest0, expressionArray0);
      assertNotNull(step0);
      assertEquals("ceiling", qName0.getName());
      assertFalse(nodeNameTest0.isWildcard());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertEquals((-2315), step0.getAxis());
      assertEquals(6, expressionArray0.length);
      
      stepArray0[0] = step0;
      Step step1 = new Step(700, nodeNameTest0, expressionArray0);
      assertFalse(step1.equals((Object)step0));
      assertNotNull(step1);
      assertEquals("ceiling", qName0.getName());
      assertFalse(nodeNameTest0.isWildcard());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertEquals(700, step1.getAxis());
      assertEquals(6, expressionArray0.length);
      
      stepArray0[1] = step1;
      ExpressionPath expressionPath0 = new ExpressionPath(coreOperationAdd0, expressionArray0, stepArray0);
      assertNotNull(expressionPath0);
      assertEquals("+", coreOperationAdd0.getSymbol());
      assertEquals(6, expressionArray0.length);
      assertEquals(2, stepArray0.length);
      
      expressionArray0[1] = (Expression) expressionPath0;
      CoreOperationOr coreOperationOr0 = new CoreOperationOr(expressionArray0);
      assertNotNull(coreOperationOr0);
      assertEquals("or", coreOperationOr0.getSymbol());
      assertEquals(6, expressionArray0.length);
      
      expressionArray0[2] = (Expression) coreOperationOr0;
      Float float0 = new Float((-705.996F));
      assertEquals((-705.996F), (float)float0, 0.01F);
      assertNotNull(float0);
      
      Constant constant0 = new Constant(float0);
      assertNotNull(constant0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      
      expressionArray0[3] = (Expression) constant0;
      LocationPath locationPath0 = new LocationPath(false, stepArray0);
      assertNotNull(locationPath0);
      assertFalse(locationPath0.isAbsolute());
      assertEquals(2, stepArray0.length);
      
      expressionArray0[4] = (Expression) locationPath0;
      ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, expressionArray0);
      assertNotNull(extensionFunction0);
      assertTrue(extensionFunction0.computeContextDependent());
      assertEquals("ceiling", qName0.getName());
      assertEquals(6, expressionArray0.length);
      
      expressionArray0[5] = (Expression) extensionFunction0;
      CoreFunction coreFunction0 = new CoreFunction(700, expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(6, coreFunction0.getArgumentCount());
      assertEquals(700, coreFunction0.getFunctionCode());
      assertEquals(6, expressionArray0.length);
      
      ParentContext parentContext0 = new ParentContext((EvalContext) null, nodeNameTest0);
      assertNotNull(parentContext0);
      assertEquals("ceiling", qName0.getName());
      assertFalse(nodeNameTest0.isWildcard());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertEquals((-1), parentContext0.getDocumentOrder());
      assertEquals(1, parentContext0.getCurrentPosition());
      assertEquals(0, parentContext0.getPosition());
      assertTrue(parentContext0.isChildOrderingRequired());
      
      SelfContext selfContext0 = new SelfContext(parentContext0, nodeNameTest0);
      assertNotNull(selfContext0);
      assertEquals("ceiling", qName0.getName());
      assertFalse(nodeNameTest0.isWildcard());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertEquals((-1), parentContext0.getDocumentOrder());
      assertEquals(1, parentContext0.getCurrentPosition());
      assertEquals(0, parentContext0.getPosition());
      assertTrue(parentContext0.isChildOrderingRequired());
      assertEquals(1, selfContext0.getDocumentOrder());
      assertTrue(selfContext0.isChildOrderingRequired());
      assertEquals(0, selfContext0.getPosition());
      
      // Undeclared exception!
      coreFunction0.functionNull(selfContext0);
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      QName qName0 = new QName("Cannot fin an element by key - no KeyManager has been specified");
      assertNotNull(qName0);
      assertEquals("Cannot fin an element by key - no KeyManager has been specified", qName0.toString());
      assertEquals("Cannot fin an element by key - no KeyManager has been specified", qName0.getName());
      assertNull(qName0.getPrefix());
      
      ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, expressionArray0);
      assertNotNull(extensionFunction0);
      assertEquals("Cannot fin an element by key - no KeyManager has been specified", qName0.toString());
      assertEquals("Cannot fin an element by key - no KeyManager has been specified", qName0.getName());
      assertNull(qName0.getPrefix());
      assertTrue(extensionFunction0.computeContextDependent());
      assertEquals(1, expressionArray0.length);
      
      expressionArray0[0] = (Expression) extensionFunction0;
      CoreFunction coreFunction0 = new CoreFunction(65550, expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(65550, coreFunction0.getFunctionCode());
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals(1, expressionArray0.length);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)25;
      byteArray0[1] = (byte)30;
      byteArray0[2] = (byte)45;
      byteArray0[3] = (byte) (-1);
      byteArray0[4] = (byte)111;
      byteArray0[5] = (byte) (-70);
      byteArray0[6] = (byte) (-61);
      byteArray0[7] = (byte)72;
      byteArray0[8] = (byte)115;
      boolean boolean0 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertArrayEquals(new byte[] {(byte)25, (byte)30, (byte)45, (byte) (-1), (byte)111, (byte) (-70), (byte) (-61), (byte)72, (byte)115}, byteArray0);
      assertFalse(boolean0);
      assertEquals(9, byteArray0.length);
      
      // Undeclared exception!
//      try { 
        coreFunction0.toString();
//        fail("Expecting exception: StackOverflowError");
      
//      } catch(StackOverflowError e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[9];
      CoreOperationOr coreOperationOr0 = new CoreOperationOr(expressionArray0);
      assertNotNull(coreOperationOr0);
      assertEquals("or", coreOperationOr0.getSymbol());
      assertEquals(9, expressionArray0.length);
      
      CoreFunction coreFunction0 = new CoreFunction(29, expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(29, coreFunction0.getFunctionCode());
      assertEquals(9, coreFunction0.getArgumentCount());
      assertEquals(9, expressionArray0.length);
      
      String string0 = coreFunction0.toString();
      assertEquals("key(null, null, null, null, null, null, null, null, null)", string0);
      assertNotNull(string0);
      assertEquals(29, coreFunction0.getFunctionCode());
      assertEquals(9, coreFunction0.getArgumentCount());
      assertEquals(9, expressionArray0.length);
      
      CoreFunction coreFunction1 = new CoreFunction(11, expressionArray0);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertNotNull(coreFunction1);
      assertEquals(11, coreFunction1.getFunctionCode());
      assertEquals(9, coreFunction1.getArgumentCount());
      assertEquals(9, expressionArray0.length);
      
      // Undeclared exception!
//      try { 
        coreFunction1.isContextDependent();
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.jxpath.ri.compiler.Operation", e);
//      }
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      EvalContext evalContext0 = null;
      Expression[] expressionArray0 = new Expression[9];
      CoreFunction coreFunction0 = new CoreFunction(374, expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(374, coreFunction0.getFunctionCode());
      assertEquals(9, coreFunction0.getArgumentCount());
      assertEquals(9, expressionArray0.length);
      
      Expression expression0 = coreFunction0.getArg3();
      assertNull(expression0);
      assertEquals(374, coreFunction0.getFunctionCode());
      assertEquals(9, coreFunction0.getArgumentCount());
      assertEquals(9, expressionArray0.length);
      
      expressionArray0[0] = null;
      CoreOperationEqual coreOperationEqual0 = new CoreOperationEqual((Expression) null, coreFunction0);
      assertNotNull(coreOperationEqual0);
      assertEquals(374, coreFunction0.getFunctionCode());
      assertEquals(9, coreFunction0.getArgumentCount());
      assertEquals("=", coreOperationEqual0.getSymbol());
      assertEquals(9, expressionArray0.length);
      
      expressionArray0[1] = (Expression) coreOperationEqual0;
      CoreOperationNegate coreOperationNegate0 = new CoreOperationNegate(expression0);
      assertNotNull(coreOperationNegate0);
      assertEquals(374, coreFunction0.getFunctionCode());
      assertEquals(9, coreFunction0.getArgumentCount());
      assertEquals("-", coreOperationNegate0.getSymbol());
      assertEquals(9, expressionArray0.length);
      
      expressionArray0[2] = (Expression) coreOperationNegate0;
      CoreFunction coreFunction1 = new CoreFunction(2300, expressionArray0);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertNotNull(coreFunction1);
      assertEquals(9, coreFunction1.getArgumentCount());
      assertEquals(2300, coreFunction1.getFunctionCode());
      assertEquals(9, expressionArray0.length);
      
      expressionArray0[3] = (Expression) coreFunction1;
      CoreOperationEqual coreOperationEqual1 = new CoreOperationEqual(expressionArray0[3], expressionArray0[3]);
      assertFalse(coreOperationEqual1.equals((Object)coreOperationEqual0));
      assertNotNull(coreOperationEqual1);
      assertEquals("=", coreOperationEqual1.getSymbol());
      assertEquals(9, expressionArray0.length);
      
      expressionArray0[4] = (Expression) coreOperationEqual1;
      CoreOperationAnd coreOperationAnd0 = new CoreOperationAnd((Expression[]) null);
      assertNotNull(coreOperationAnd0);
      assertEquals("and", coreOperationAnd0.getSymbol());
      
      expressionArray0[5] = (Expression) coreOperationAnd0;
      CoreOperationEqual coreOperationEqual2 = new CoreOperationEqual(expressionArray0[3], expressionArray0[1]);
      assertFalse(coreOperationEqual2.equals((Object)coreOperationEqual0));
      assertFalse(coreOperationEqual2.equals((Object)coreOperationEqual1));
      assertNotNull(coreOperationEqual2);
      assertEquals("=", coreOperationEqual2.getSymbol());
      assertEquals(9, expressionArray0.length);
      
      expressionArray0[6] = (Expression) coreOperationEqual2;
      CoreFunction coreFunction2 = new CoreFunction(374, expressionArray0);
      assertFalse(coreFunction2.equals((Object)coreFunction0));
      assertFalse(coreFunction2.equals((Object)coreFunction1));
      assertNotNull(coreFunction2);
      assertEquals(374, coreFunction2.getFunctionCode());
      assertEquals(9, coreFunction2.getArgumentCount());
      assertEquals(9, expressionArray0.length);
      
      CoreOperationNegate coreOperationNegate1 = (CoreOperationNegate)coreFunction2.getArg3();
      assertFalse(coreFunction2.equals((Object)coreFunction0));
      assertFalse(coreFunction2.equals((Object)coreFunction1));
      assertNotNull(coreOperationNegate1);
      assertEquals(374, coreFunction2.getFunctionCode());
      assertEquals(9, coreFunction2.getArgumentCount());
      assertEquals("-", coreOperationNegate1.getSymbol());
      assertEquals(9, expressionArray0.length);
      assertNotSame(coreFunction2, coreFunction0);
      assertNotSame(coreFunction2, coreFunction1);
      assertSame(coreOperationNegate1, coreOperationNegate0);
      
      expressionArray0[7] = (Expression) coreOperationNegate1;
      CoreOperationSubtract coreOperationSubtract0 = new CoreOperationSubtract(coreOperationEqual2, coreFunction0);
      assertFalse(coreFunction0.equals((Object)coreFunction2));
      assertFalse(coreFunction0.equals((Object)coreFunction1));
      assertFalse(coreOperationEqual2.equals((Object)coreOperationEqual0));
      assertFalse(coreOperationEqual2.equals((Object)coreOperationEqual1));
      assertNotNull(coreOperationSubtract0);
      assertEquals(374, coreFunction0.getFunctionCode());
      assertEquals(9, coreFunction0.getArgumentCount());
      assertEquals("-", coreOperationSubtract0.getSymbol());
      assertEquals("=", coreOperationEqual2.getSymbol());
      assertEquals(9, expressionArray0.length);
      
      expressionArray0[8] = (Expression) coreOperationSubtract0;
      CoreFunction coreFunction3 = new CoreFunction(2300, expressionArray0);
      assertFalse(coreFunction3.equals((Object)coreFunction0));
      assertFalse(coreFunction3.equals((Object)coreFunction1));
      assertFalse(coreFunction3.equals((Object)coreFunction2));
      assertNotNull(coreFunction3);
      assertEquals(9, coreFunction3.getArgumentCount());
      assertEquals(2300, coreFunction3.getFunctionCode());
      assertEquals(9, expressionArray0.length);
      
      // Undeclared exception!
//      try { 
        coreFunction2.functionNormalizeSpace((EvalContext) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.evosuite.runtime.System", e);
//      }
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[2];
      CoreFunction coreFunction0 = new CoreFunction(514, expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(514, coreFunction0.getFunctionCode());
      assertEquals(2, coreFunction0.getArgumentCount());
      assertEquals(2, expressionArray0.length);
      
      PredicateContext predicateContext0 = new PredicateContext((EvalContext) null, coreFunction0);
      assertNotNull(predicateContext0);
      assertEquals(514, coreFunction0.getFunctionCode());
      assertEquals(2, coreFunction0.getArgumentCount());
      assertEquals(0, predicateContext0.getDocumentOrder());
      assertFalse(predicateContext0.isChildOrderingRequired());
      assertEquals(0, predicateContext0.getPosition());
      assertEquals(2, expressionArray0.length);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      String string0 = coreFunction0.toString();
      assertEquals("unknownFunction514()(null, null)", string0);
      assertNotNull(string0);
      assertEquals(514, coreFunction0.getFunctionCode());
      assertEquals(2, coreFunction0.getArgumentCount());
      assertEquals(2, expressionArray0.length);
      
      Constant constant0 = new Constant("unknownFunction514()(null, null)");
      assertNotNull(constant0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      
      CoreFunction coreFunction1 = new CoreFunction(514, expressionArray0);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertNotNull(coreFunction1);
      assertEquals(2, coreFunction1.getArgumentCount());
      assertEquals(514, coreFunction1.getFunctionCode());
      assertEquals(2, expressionArray0.length);
      
      // Undeclared exception!
//      try { 
        coreFunction0.functionConcat(predicateContext0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      Constant constant0 = new Constant((String) null);
      assertNotNull(constant0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      
      CoreOperationGreaterThanOrEqual coreOperationGreaterThanOrEqual0 = new CoreOperationGreaterThanOrEqual(constant0, constant0);
      assertNotNull(coreOperationGreaterThanOrEqual0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertEquals(">=", coreOperationGreaterThanOrEqual0.getSymbol());
      
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      assertFalse(boolean0);
      
      expressionArray0[0] = (Expression) coreOperationGreaterThanOrEqual0;
      CoreFunction coreFunction0 = new CoreFunction((-667), expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals((-667), coreFunction0.getFunctionCode());
      assertEquals(1, expressionArray0.length);
      
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("");
      assertNotNull(processingInstructionTest0);
      assertEquals("", processingInstructionTest0.getTarget());
      
      String string0 = processingInstructionTest0.toString();
      assertEquals("processing-instruction('')", string0);
      assertNotNull(string0);
      assertEquals("", processingInstructionTest0.getTarget());
      
      AncestorContext ancestorContext0 = new AncestorContext((EvalContext) null, false, processingInstructionTest0);
      assertNotNull(ancestorContext0);
      assertEquals("", processingInstructionTest0.getTarget());
      assertTrue(ancestorContext0.isChildOrderingRequired());
      assertEquals((-1), ancestorContext0.getDocumentOrder());
      assertEquals(0, ancestorContext0.getPosition());
      
      Object object0 = coreFunction0.functionStringLength(ancestorContext0);
      assertEquals(4.0, object0);
      assertNotNull(object0);
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals((-667), coreFunction0.getFunctionCode());
      assertEquals("", processingInstructionTest0.getTarget());
      assertTrue(ancestorContext0.isChildOrderingRequired());
      assertEquals((-1), ancestorContext0.getDocumentOrder());
      assertEquals(0, ancestorContext0.getPosition());
      assertEquals(1, expressionArray0.length);
      
      Object object1 = coreFunction0.functionCeiling((EvalContext) null);
      assertFalse(object1.equals((Object)object0));
      assertEquals(0.0, object1);
      assertNotNull(object1);
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals((-667), coreFunction0.getFunctionCode());
      assertEquals(1, expressionArray0.length);
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      int int0 = 4;
      String string0 = "key";
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "key");
      assertFalse(boolean0);
      
      CoreFunction coreFunction0 = new CoreFunction(4, expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(4, coreFunction0.getFunctionCode());
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals(1, expressionArray0.length);
      
      CoreOperationDivide coreOperationDivide0 = new CoreOperationDivide(coreFunction0, coreFunction0);
      assertNotNull(coreOperationDivide0);
      assertEquals(4, coreFunction0.getFunctionCode());
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals("div", coreOperationDivide0.getSymbol());
      assertEquals(1, expressionArray0.length);
      
      CoreOperationMultiply coreOperationMultiply0 = new CoreOperationMultiply(coreOperationDivide0, coreOperationDivide0);
      assertNotNull(coreOperationMultiply0);
      assertEquals(4, coreFunction0.getFunctionCode());
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals("div", coreOperationDivide0.getSymbol());
      assertEquals("*", coreOperationMultiply0.getSymbol());
      assertEquals(1, expressionArray0.length);
      
      Expression[] expressionArray1 = new Expression[1];
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      
      EvalContext evalContext0 = null;
      // Undeclared exception!
//      try { 
        coreFunction0.compute((EvalContext) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[6];
      EvalContext evalContext0 = null;
      QName qName0 = new QName("c@=v` ", "c@=v` ");
      assertNotNull(qName0);
      assertEquals("c@=v` :c@=v` ", qName0.toString());
      assertEquals("c@=v` ", qName0.getPrefix());
      assertEquals("c@=v` ", qName0.getName());
      
      Locale locale0 = Locale.GERMANY;
      assertNotNull(locale0);
      assertEquals("", locale0.getVariant());
      assertEquals("DE", locale0.getCountry());
      assertEquals("de", locale0.getLanguage());
      assertEquals("DEU", locale0.getISO3Country());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("de_DE", locale0.toString());
      
      CoreFunction coreFunction0 = new CoreFunction(9, expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(9, coreFunction0.getFunctionCode());
      assertEquals(6, coreFunction0.getArgumentCount());
      assertEquals(6, expressionArray0.length);
      
      String string0 = coreFunction0.getFunctionName();
      assertEquals("concat", string0);
      assertNotNull(string0);
      assertEquals(9, coreFunction0.getFunctionCode());
      assertEquals(6, coreFunction0.getArgumentCount());
      assertEquals(6, expressionArray0.length);
      
      // Undeclared exception!
//      try { 
        coreFunction0.iterate((EvalContext) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      CoreFunction coreFunction0 = new CoreFunction(4, expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals(4, coreFunction0.getFunctionCode());
      assertEquals(1, expressionArray0.length);
      
      EvalContext evalContext0 = null;
      PredicateContext predicateContext0 = new PredicateContext((EvalContext) null, coreFunction0);
      assertNotNull(predicateContext0);
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals(4, coreFunction0.getFunctionCode());
      assertEquals(0, predicateContext0.getPosition());
      assertEquals(0, predicateContext0.getDocumentOrder());
      assertFalse(predicateContext0.isChildOrderingRequired());
      assertEquals(1, expressionArray0.length);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      String string0 = coreFunction0.toString();
      assertEquals("id(null)", string0);
      assertNotNull(string0);
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals(4, coreFunction0.getFunctionCode());
      assertEquals(1, expressionArray0.length);
      
      Constant constant0 = new Constant("$9:%uD)DC`T/");
      assertNotNull(constant0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      
      CoreFunction coreFunction1 = new CoreFunction(4, expressionArray0);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertNotNull(coreFunction1);
      assertEquals(4, coreFunction1.getFunctionCode());
      assertEquals(1, coreFunction1.getArgumentCount());
      assertEquals(1, expressionArray0.length);
      
      // Undeclared exception!
//      try { 
        coreFunction1.computeValue((EvalContext) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "key");
      assertFalse(boolean0);
      
      CoreFunction coreFunction0 = new CoreFunction(7, (Expression[]) null);
      assertNotNull(coreFunction0);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(7, coreFunction0.getFunctionCode());
      
      EvalContext evalContext0 = null;
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("\"parent::\"");
      assertNotNull(processingInstructionTest0);
      assertEquals("\"parent::\"", processingInstructionTest0.getTarget());
      
      boolean boolean1 = coreFunction0.computeContextDependent();
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(7, coreFunction0.getFunctionCode());
      
      CoreFunction coreFunction1 = new CoreFunction(4, expressionArray0);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertNotNull(coreFunction1);
      assertEquals(4, coreFunction1.getFunctionCode());
      assertEquals(1, coreFunction1.getArgumentCount());
      assertEquals(1, expressionArray0.length);
      
      // Undeclared exception!
//      try { 
        coreFunction0.computeValue((EvalContext) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, (String) null);
      CoreFunction coreFunction0 = new CoreFunction((-3527), (Expression[]) null);
      EvalContext evalContext0 = null;
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("`b");
      coreFunction0.computeContextDependent();
      CoreFunction coreFunction1 = new CoreFunction(17, (Expression[]) null);
      // Undeclared exception!
//      try { 
        coreFunction1.computeValue((EvalContext) null);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // Incorrect number of arguments: translate()
//         //
//         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(0, expressionArray0);
      coreFunction0.toString();
      coreFunction0.computeContextDependent();
      coreFunction0.computeContextDependent();
      EvalContext evalContext0 = null;
      CoreFunction coreFunction1 = new CoreFunction(0, expressionArray0);
      Expression[] expressionArray1 = new Expression[1];
      expressionArray1[0] = (Expression) coreFunction1;
      CoreFunction coreFunction2 = new CoreFunction(17, expressionArray1);
      coreFunction2.functionNumber((EvalContext) null);
      // Undeclared exception!
//      try { 
        coreFunction0.functionNot((EvalContext) null);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // Incorrect number of arguments: unknownFunction0()()
//         //
//         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(3, expressionArray0);
      Locale locale0 = Locale.GERMANY;
      CoreFunction coreFunction1 = new CoreFunction(1568, expressionArray0);
      Step[] stepArray0 = new Step[6];
      Step step0 = new Step((-1890), (NodeTest) null, expressionArray0);
      stepArray0[0] = step0;
      Step step1 = new Step(2, (NodeTest) null, expressionArray0);
      stepArray0[1] = step1;
      Step step2 = new Step(3, (NodeTest) null, expressionArray0);
      stepArray0[2] = step2;
      Step step3 = new Step((-1832), (NodeTest) null, expressionArray0);
      stepArray0[3] = step3;
      Step step4 = new Step((-1388), (NodeTest) null, expressionArray0);
      stepArray0[4] = step4;
      Step step5 = new Step(1568, (NodeTest) null, expressionArray0);
      stepArray0[5] = step5;
      ExpressionPath expressionPath0 = new ExpressionPath(coreFunction0, expressionArray0, stepArray0);
      QName qName0 = new QName("Tv.4ar");
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
      PrecedingOrFollowingContext precedingOrFollowingContext0 = new PrecedingOrFollowingContext((EvalContext) null, nodeNameTest0, true);
      expressionPath0.evalSteps(precedingOrFollowingContext0);
      // Undeclared exception!
//      try { 
        coreFunction0.iterate((EvalContext) null);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // Incorrect number of arguments: count()
//         //
//         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[11];
      CoreFunction coreFunction0 = new CoreFunction((-767), expressionArray0);
      Integer integer0 = new Integer((-744));
      EvalContext evalContext0 = null;
      CoreFunction coreFunction1 = new CoreFunction((-1959), expressionArray0);
      Expression[] expressionArray1 = new Expression[5];
      expressionArray1[0] = (Expression) coreFunction0;
      expressionArray1[1] = (Expression) coreFunction1;
      expressionArray1[2] = (Expression) coreFunction1;
      expressionArray1[3] = (Expression) coreFunction1;
      expressionArray1[4] = (Expression) coreFunction1;
      CoreFunction coreFunction2 = new CoreFunction(7, expressionArray1);
      // Undeclared exception!
//      try { 
        coreFunction2.functionName((EvalContext) null);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // Incorrect number of arguments: name(unknownFunction-767()(null, null, null, null, null, null, null, null, null, null, null), unknownFunction-1959()(null, null, null, null, null, null, null, null, null, null, null), unknownFunction-1959()(null, null, null, null, null, null, null, null, null, null, null), unknownFunction-1959()(null, null, null, null, null, null, null, null, null, null, null), unknownFunction-1959()(null, null, null, null, null, null, null, null, null, null, null))
//         //
//         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[6];
      FileSystemHandling.shouldAllThrowIOExceptions();
      CoreOperationSubtract coreOperationSubtract0 = new CoreOperationSubtract(expressionArray0[1], expressionArray0[3]);
      Expression[] expressionArray1 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(15, expressionArray1);
      EvalContext evalContext0 = null;
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("0CpZW=S0aSwrJ)yc,");
      SelfContext selfContext0 = new SelfContext((EvalContext) null, processingInstructionTest0);
      QName qName0 = new QName("0CpZW=S0aSwrJ)yc,");
      QName qName1 = new QName("Y", "Y");
      Locale locale0 = Locale.GERMANY;
      CoreFunction coreFunction1 = new CoreFunction(15, expressionArray1);
      // Undeclared exception!
//      try { 
        coreFunction1.iteratePointers((EvalContext) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "Cannot fin an element by key - no KeyManager has been specified");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "Cannot fin an element by key - no KeyManager has been specified");
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(6, expressionArray0);
      EvalContext evalContext0 = null;
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("`b");
      coreFunction0.computeContextDependent();
      coreFunction0.args = expressionArray0;
      CoreFunction coreFunction1 = new CoreFunction((-3201), expressionArray0);
      // Undeclared exception!
//      try { 
        coreFunction0.computeValue((EvalContext) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(26, (Expression[]) null);
      CoreFunction coreFunction1 = new CoreFunction(26, (Expression[]) null);
      coreFunction0.toString();
      coreFunction0.isContextDependent();
      coreFunction0.computeContextDependent();
      EvalContext evalContext0 = null;
      CoreFunction coreFunction2 = new CoreFunction(5254, (Expression[]) null);
      // Undeclared exception!
//      try { 
        coreFunction0.functionNumber((EvalContext) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(26, (Expression[]) null);
      coreFunction0.computeContextDependent();
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(2);
      AncestorContext ancestorContext0 = new AncestorContext((EvalContext) null, false, nodeTypeTest0);
      SelfContext selfContext0 = new SelfContext(ancestorContext0, nodeTypeTest0);
      InitialContext initialContext0 = null;
//      try {
        initialContext0 = new InitialContext(selfContext0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.jxpath.ri.axes.InitialContext", e);
//      }
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[11];
      CoreFunction coreFunction0 = new CoreFunction((-1952), expressionArray0);
      Integer integer0 = new Integer((-762));
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest((-18));
      CoreFunction coreFunction1 = new CoreFunction((-762), expressionArray0);
      Integer integer1 = new Integer((-1952));
      EvalContext evalContext0 = null;
      Expression[] expressionArray1 = new Expression[5];
      expressionArray1[0] = (Expression) coreFunction1;
      expressionArray1[1] = (Expression) coreFunction1;
      expressionArray1[2] = (Expression) coreFunction0;
      Constant constant0 = new Constant("Y Rc=-pna-mpD\"");
      expressionArray1[3] = (Expression) constant0;
      expressionArray1[4] = (Expression) coreFunction1;
      CoreFunction coreFunction2 = new CoreFunction(18, expressionArray1);
      // Undeclared exception!
//      try { 
        coreFunction2.functionID((EvalContext) null);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // Incorrect number of arguments: boolean(unknownFunction-762()(null, null, null, null, null, null, null, null, null, null, null), unknownFunction-762()(null, null, null, null, null, null, null, null, null, null, null), unknownFunction-1952()(null, null, null, null, null, null, null, null, null, null, null), 'Y Rc=-pna-mpD\"', unknownFunction-762()(null, null, null, null, null, null, null, null, null, null, null))
//         //
//         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[4];
      CoreFunction coreFunction0 = new CoreFunction(3033, expressionArray0);
      CoreOperationAnd coreOperationAnd0 = new CoreOperationAnd(expressionArray0);
      expressionArray0[2] = (Expression) coreOperationAnd0;
      coreFunction0.getArg2();
      CoreFunction coreFunction1 = new CoreFunction((-767), expressionArray0);
      Integer integer0 = new Integer((-767));
      EvalContext evalContext0 = null;
      CoreFunction coreFunction2 = new CoreFunction(3033, expressionArray0);
      // Undeclared exception!
//      try { 
        coreFunction2.functionConcat((EvalContext) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[11];
      CoreFunction coreFunction0 = new CoreFunction((-1952), expressionArray0);
      Integer integer0 = new Integer((-762));
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest((-18));
      Step step0 = new Step((-762), nodeTypeTest0, expressionArray0);
      Step step1 = new Step((-762), nodeTypeTest0, expressionArray0);
      Step step2 = new Step((-222), nodeTypeTest0, expressionArray0);
      Step step3 = new Step(50, nodeTypeTest0, expressionArray0);
      Step[] stepArray0 = new Step[1];
      stepArray0[0] = step0;
      ExpressionPath expressionPath0 = new ExpressionPath(coreFunction0, expressionArray0, stepArray0);
      EvalContext evalContext0 = expressionPath0.evalSteps((EvalContext) null);
      SelfContext selfContext0 = new SelfContext(evalContext0, nodeTypeTest0);
      // Undeclared exception!
//      try { 
        coreFunction0.functionLocalName((EvalContext) null);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // Incorrect number of arguments: unknownFunction-1952()(null, null, null, null, null, null, null, null, null, null, null)
//         //
//         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(3, expressionArray0);
      coreFunction0.toString();
      coreFunction0.computeContextDependent();
      coreFunction0.computeContextDependent();
      EvalContext evalContext0 = null;
      CoreFunction coreFunction1 = new CoreFunction(17, expressionArray0);
      // Undeclared exception!
//      try { 
        coreFunction0.functionString((EvalContext) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[6];
      FileSystemHandling.shouldAllThrowIOExceptions();
      CoreOperationSubtract coreOperationSubtract0 = new CoreOperationSubtract(expressionArray0[1], expressionArray0[3]);
      Expression[] expressionArray1 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(15, expressionArray1);
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("0CpZW=S0aSwrJ)yc,");
      SelfContext selfContext0 = new SelfContext((EvalContext) null, processingInstructionTest0);
      QName qName0 = new QName("0CpZW=S0aSwrJ)yc,");
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, "0CpZW=S0aSwrJ)yc,");
      AttributeContext attributeContext0 = new AttributeContext(selfContext0, nodeNameTest0);
      attributeContext0.getCurrentPosition();
      coreFunction0.functionFalse(attributeContext0);
      coreFunction0.computeContextDependent();
      coreFunction0.functionNull((EvalContext) null);
      // Undeclared exception!
//      try { 
        coreFunction0.functionCeiling(selfContext0);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // Incorrect number of arguments: string-length()
//         //
//         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[11];
      CoreFunction coreFunction0 = new CoreFunction((-1959), expressionArray0);
      Integer integer0 = new Integer((-762));
      CoreFunction coreFunction1 = new CoreFunction((int) integer0, expressionArray0);
      // Undeclared exception!
//      try { 
        coreFunction1.functionTranslate((EvalContext) null);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // Incorrect number of arguments: unknownFunction-762()(null, null, null, null, null, null, null, null, null, null, null)
//         //
//         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(0, expressionArray0);
      coreFunction0.toString();
      coreFunction0.computeContextDependent();
      coreFunction0.computeContextDependent();
      EvalContext evalContext0 = null;
      CoreFunction coreFunction1 = new CoreFunction(0, expressionArray0);
      Expression[] expressionArray1 = new Expression[1];
      expressionArray1[0] = (Expression) coreFunction1;
      CoreFunction coreFunction2 = new CoreFunction(17, expressionArray1);
      coreFunction2.functionString((EvalContext) null);
      coreFunction2.functionSum((EvalContext) null);
      // Undeclared exception!
//      try { 
        coreFunction0.functionPosition((EvalContext) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[4];
      CoreFunction coreFunction0 = new CoreFunction(3033, expressionArray0);
      CoreOperationDivide coreOperationDivide0 = new CoreOperationDivide(coreFunction0, coreFunction0);
      expressionArray0[0] = (Expression) coreOperationDivide0;
      CoreOperationMultiply coreOperationMultiply0 = new CoreOperationMultiply(coreOperationDivide0, coreFunction0);
      expressionArray0[1] = (Expression) coreOperationMultiply0;
      CoreOperationAnd coreOperationAnd0 = new CoreOperationAnd(expressionArray0);
      expressionArray0[2] = (Expression) coreOperationAnd0;
      Expression expression0 = coreFunction0.getArg2();
      expressionArray0[3] = expression0;
      CoreFunction coreFunction1 = new CoreFunction((-767), expressionArray0);
      Integer integer0 = new Integer((-767));
      CoreFunction coreFunction2 = new CoreFunction((-41), expressionArray0);
      coreFunction2.functionConcat((EvalContext) null);
      // Undeclared exception!
//      try { 
        coreFunction1.functionPosition((EvalContext) null);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // Incorrect number of arguments: unknownFunction-767()(org.apache.commons.jxpath.ri.compiler.CoreFunction@0000000001 div org.apache.commons.jxpath.ri.compiler.CoreFunction@0000000001, org.apache.commons.jxpath.ri.compiler.CoreOperationDivide@0000000002 * org.apache.commons.jxpath.ri.compiler.CoreFunction@0000000001, org.apache.commons.jxpath.ri.compiler.CoreOperationDivide@0000000002 and org.apache.commons.jxpath.ri.compiler.CoreOperationMultiply@0000000003 and org.apache.commons.jxpath.ri.compiler.CoreOperationAnd@0000000004 and org.apache.commons.jxpath.ri.compiler.CoreOperationMultiply@0000000003, org.apache.commons.jxpath.ri.compiler.CoreOperationDivide@0000000002 * org.apache.commons.jxpath.ri.compiler.CoreFunction@0000000001)
//         //
//         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(20, expressionArray0);
      coreFunction0.toString();
      coreFunction0.isContextDependent();
      coreFunction0.computeContextDependent();
      EvalContext evalContext0 = null;
      CoreFunction coreFunction1 = new CoreFunction(20, expressionArray0);
      // Undeclared exception!
//      try { 
        coreFunction1.functionNumber((EvalContext) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      Locale locale0 = Locale.GERMANY;
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(0);
      CoreFunction coreFunction0 = new CoreFunction(28, expressionArray0);
      CoreOperationDivide coreOperationDivide0 = new CoreOperationDivide(coreFunction0, coreFunction0);
      Expression[] expressionArray1 = new Expression[6];
      expressionArray1[0] = (Expression) coreOperationDivide0;
      expressionArray1[1] = (Expression) coreOperationDivide0;
      expressionArray1[2] = (Expression) coreFunction0;
      expressionArray1[3] = (Expression) coreFunction0;
      expressionArray1[4] = (Expression) coreOperationDivide0;
      expressionArray1[5] = (Expression) coreOperationDivide0;
      Step[] stepArray0 = new Step[9];
      Step step0 = new Step((-2000), nodeTypeTest0, expressionArray1);
      stepArray0[0] = step0;
      Step step1 = new Step(1480, nodeTypeTest0, expressionArray1);
      stepArray0[1] = step1;
      NodeTypeTest nodeTypeTest1 = new NodeTypeTest((-2000));
      Step step2 = new Step((-3), nodeTypeTest1, expressionArray1);
      stepArray0[2] = step2;
      Step step3 = new Step(1480, nodeTypeTest1, expressionArray0);
      stepArray0[3] = step3;
      Step step4 = new Step(1480, nodeTypeTest1, expressionArray1);
      stepArray0[4] = step4;
      Step step5 = new Step(6, nodeTypeTest1, expressionArray1);
      stepArray0[5] = step5;
      Step step6 = new Step(6, nodeTypeTest0, expressionArray0);
      stepArray0[6] = step6;
      Step step7 = new Step((-1190), nodeTypeTest1, expressionArray1);
      stepArray0[7] = step7;
      Step step8 = new Step(29, nodeTypeTest0, expressionArray0);
      stepArray0[8] = step8;
      ExpressionPath expressionPath0 = new ExpressionPath(coreOperationDivide0, expressionArray1, stepArray0);
      EvalContext evalContext0 = expressionPath0.evalSteps((EvalContext) null);
      SelfContext selfContext0 = new SelfContext(evalContext0, nodeTypeTest1);
      // Undeclared exception!
//      try { 
        coreFunction0.functionLocalName(selfContext0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[9];
      CoreOperationOr coreOperationOr0 = new CoreOperationOr(expressionArray0);
      expressionArray0[0] = (Expression) coreOperationOr0;
      Step[] stepArray0 = new Step[2];
      QName qName0 = new QName("boolean");
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, "boolean");
      Step step0 = new Step(23, nodeNameTest0, expressionArray0);
      stepArray0[0] = step0;
      Step step1 = new Step(23, nodeNameTest0, expressionArray0);
      stepArray0[1] = step1;
      LocationPath locationPath0 = new LocationPath(true, stepArray0);
      expressionArray0[1] = (Expression) locationPath0;
      CoreOperationOr coreOperationOr1 = new CoreOperationOr(expressionArray0);
      CoreOperationSubtract coreOperationSubtract0 = new CoreOperationSubtract(coreOperationOr1, coreOperationOr1);
      expressionArray0[2] = (Expression) coreOperationSubtract0;
      CoreOperationGreaterThan coreOperationGreaterThan0 = new CoreOperationGreaterThan(expressionArray0[2], expressionArray0[1]);
      expressionArray0[3] = (Expression) coreOperationGreaterThan0;
      CoreOperationAnd coreOperationAnd0 = new CoreOperationAnd(expressionArray0);
      expressionArray0[4] = (Expression) coreOperationAnd0;
      CoreOperationDivide coreOperationDivide0 = new CoreOperationDivide(coreOperationOr0, coreOperationOr0);
      expressionArray0[5] = (Expression) coreOperationDivide0;
      Short short0 = new Short((short)21);
      Constant constant0 = new Constant(short0);
      expressionArray0[6] = (Expression) constant0;
      CoreOperationNegate coreOperationNegate0 = new CoreOperationNegate(expressionArray0[0]);
      expressionArray0[7] = (Expression) coreOperationNegate0;
      CoreOperationSubtract coreOperationSubtract1 = new CoreOperationSubtract(coreOperationOr1, coreOperationOr1);
      expressionArray0[8] = (Expression) coreOperationSubtract1;
      CoreFunction coreFunction0 = new CoreFunction(23, expressionArray0);
      // Undeclared exception!
      coreFunction0.functionSum((EvalContext) null);
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[6];
      EvalContext evalContext0 = null;
      QName qName0 = new QName("c@=v` ", "c@=v` ");
      Locale locale0 = Locale.GERMANY;
      int int0 = 1568;
      CoreFunction coreFunction0 = new CoreFunction(1568, expressionArray0);
      // Undeclared exception!
//      try { 
        coreFunction0.functionNumber((EvalContext) null);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // Incorrect number of arguments: unknownFunction1568()(null, null, null, null, null, null)
//         //
//         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      QName qName0 = new QName("", "!");
      Locale locale0 = Locale.GERMANY;
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(0);
      AttributeContext attributeContext0 = new AttributeContext((EvalContext) null, nodeTypeTest0);
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
      DescendantContext descendantContext0 = new DescendantContext(attributeContext0, false, nodeNameTest0);
      AttributeContext attributeContext1 = new AttributeContext(descendantContext0, nodeNameTest0);
      AncestorContext ancestorContext0 = new AncestorContext(attributeContext1, false, nodeTypeTest0);
      EvalContext[] evalContextArray0 = new EvalContext[6];
      evalContextArray0[0] = null;
      evalContextArray0[1] = null;
      evalContextArray0[2] = (EvalContext) attributeContext1;
      evalContextArray0[3] = (EvalContext) attributeContext1;
      evalContextArray0[4] = (EvalContext) ancestorContext0;
      evalContextArray0[5] = (EvalContext) attributeContext0;
      UnionContext unionContext0 = new UnionContext(ancestorContext0, evalContextArray0);
      Expression[] expressionArray1 = new Expression[3];
      CoreOperationAnd coreOperationAnd0 = new CoreOperationAnd(expressionArray0);
      expressionArray1[0] = (Expression) coreOperationAnd0;
      ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, expressionArray1);
      expressionArray1[1] = (Expression) extensionFunction0;
      Integer integer0 = new Integer(286);
      Constant constant0 = new Constant("");
      expressionArray1[2] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction(1481, expressionArray0);
      // Undeclared exception!
//      try { 
        coreFunction0.functionCeiling(evalContextArray0[3]);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[4];
      CoreFunction coreFunction0 = new CoreFunction(3033, expressionArray0);
      coreFunction0.getArg3();
      expressionArray0[0] = null;
      CoreOperationMultiply coreOperationMultiply0 = new CoreOperationMultiply((Expression) null, coreFunction0);
      expressionArray0[1] = (Expression) coreOperationMultiply0;
      CoreOperationAnd coreOperationAnd0 = new CoreOperationAnd(expressionArray0);
      expressionArray0[2] = (Expression) coreOperationAnd0;
      Expression expression0 = coreFunction0.getArg2();
      expressionArray0[3] = expression0;
      CoreFunction coreFunction1 = new CoreFunction((-767), expressionArray0);
      Integer integer0 = new Integer((-767));
      EvalContext evalContext0 = null;
      CoreFunction coreFunction2 = new CoreFunction(14, expressionArray0);
      // Undeclared exception!
//      try { 
        coreFunction2.computeValue((EvalContext) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.evosuite.runtime.System", e);
//      }
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[3];
      CoreOperationOr coreOperationOr0 = new CoreOperationOr(expressionArray0);
      CoreOperationGreaterThanOrEqual coreOperationGreaterThanOrEqual0 = new CoreOperationGreaterThanOrEqual(coreOperationOr0, coreOperationOr0);
      CoreOperationGreaterThan coreOperationGreaterThan0 = new CoreOperationGreaterThan(coreOperationGreaterThanOrEqual0, coreOperationOr0);
      CoreOperationEqual coreOperationEqual0 = new CoreOperationEqual(coreOperationGreaterThan0, coreOperationOr0);
      CoreOperationNegate coreOperationNegate0 = new CoreOperationNegate(coreOperationEqual0);
      expressionArray0[0] = (Expression) coreOperationNegate0;
      CoreOperationDivide coreOperationDivide0 = new CoreOperationDivide(coreOperationGreaterThanOrEqual0, coreOperationGreaterThan0);
      expressionArray0[1] = (Expression) coreOperationDivide0;
      CoreOperationMultiply coreOperationMultiply0 = new CoreOperationMultiply(coreOperationEqual0, expressionArray0[0]);
      expressionArray0[2] = (Expression) coreOperationMultiply0;
      CoreFunction coreFunction0 = new CoreFunction((-1), expressionArray0);
      JXPathContext.newContext((Object) coreFunction0);
      // Undeclared exception!
//      try { 
        coreFunction0.functionString((EvalContext) null);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // Incorrect number of arguments: unknownFunction-1()(-(org.apache.commons.jxpath.ri.compiler.CoreOperationEqual@0000000004), (org.apache.commons.jxpath.ri.compiler.CoreOperationGreaterThanOrEqual@0000000002) div (org.apache.commons.jxpath.ri.compiler.CoreOperationGreaterThan@0000000003), (org.apache.commons.jxpath.ri.compiler.CoreOperationEqual@0000000004) * org.apache.commons.jxpath.ri.compiler.CoreOperationNegate@0000000005)
//         //
//         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction((-2930), (Expression[]) null);
      coreFunction0.args = null;
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(1128);
      ParentContext parentContext0 = new ParentContext((EvalContext) null, nodeTypeTest0);
      PredicateContext predicateContext0 = new PredicateContext(parentContext0, coreFunction0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      coreFunction0.functionStringLength(parentContext0);
      // Undeclared exception!
//      try { 
        coreFunction0.functionFloor(predicateContext0);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // Incorrect number of arguments: unknownFunction-2930()()
//         //
//         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(17, (Expression[]) null);
      coreFunction0.isContextDependent();
      PredicateContext predicateContext0 = new PredicateContext((EvalContext) null, coreFunction0);
      // Undeclared exception!
//      try { 
        predicateContext0.reset();
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.jxpath.ri.axes.PredicateContext", e);
//      }
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[11];
      CoreFunction coreFunction0 = new CoreFunction((-1959), expressionArray0);
      Integer integer0 = new Integer((-762));
      EvalContext evalContext0 = null;
      CoreFunction coreFunction1 = new CoreFunction((int) integer0, expressionArray0);
      Expression[] expressionArray1 = new Expression[1];
      expressionArray1[0] = (Expression) coreFunction0;
      coreFunction1.args = expressionArray1;
      // Undeclared exception!
//      try { 
        coreFunction1.functionID((EvalContext) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      EvalContext evalContext0 = null;
      AttributeContext attributeContext0 = new AttributeContext((EvalContext) null, (NodeTest) null);
      CoreFunction coreFunction0 = new CoreFunction(547, expressionArray0);
      // Undeclared exception!
//      try { 
        coreFunction0.functionLang((EvalContext) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      EvalContext evalContext0 = null;
      QName qName0 = new QName("=8;", "c@=v` ");
      Locale locale0 = Locale.GERMANY;
      CoreFunction coreFunction0 = new CoreFunction(10, (Expression[]) null);
      // Undeclared exception!
//      try { 
        coreFunction0.iterate((EvalContext) null);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // Incorrect number of arguments: starts-with()
//         //
//         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[7];
      CoreOperationSubtract coreOperationSubtract0 = new CoreOperationSubtract(expressionArray0[1], expressionArray0[3]);
      Expression[] expressionArray1 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(15, expressionArray1);
      EvalContext evalContext0 = null;
      String string0 = "`b";
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("`b");
      SelfContext selfContext0 = new SelfContext((EvalContext) null, processingInstructionTest0);
      QName qName0 = new QName("`b", "`b");
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, "`b");
      AttributeContext attributeContext0 = new AttributeContext(selfContext0, nodeNameTest0);
      coreFunction0.functionFalse(attributeContext0);
      coreFunction0.computeContextDependent();
      // Undeclared exception!
//      try { 
        coreFunction0.functionConcat(attributeContext0);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // Incorrect number of arguments: string-length()
//         //
//         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "Cannot fin an element by key - no KeyManager has been specified");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "Cannot fin an element by key - no KeyManager has been specified");
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(6, expressionArray0);
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("`b");
      SelfContext selfContext0 = new SelfContext((EvalContext) null, processingInstructionTest0);
      AttributeContext attributeContext0 = new AttributeContext(selfContext0, processingInstructionTest0);
      coreFunction0.functionFalse(attributeContext0);
      coreFunction0.computeContextDependent();
      coreFunction0.args = expressionArray0;
      CoreFunction coreFunction1 = new CoreFunction(6, (Expression[]) null);
      coreFunction1.functionString(attributeContext0);
      ChildContext childContext0 = new ChildContext((EvalContext) null, processingInstructionTest0, false, false);
      // Undeclared exception!
//      try { 
        coreFunction0.functionSum(childContext0);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // Incorrect number of arguments: namespace-uri()
//         //
//         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      EvalContext evalContext0 = null;
      QName qName0 = new QName("=8;", "c@=v` ");
      Locale locale0 = Locale.GERMANY;
      CoreFunction coreFunction0 = new CoreFunction(10, (Expression[]) null);
      // Undeclared exception!
//      try { 
        coreFunction0.functionLang((EvalContext) null);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // Incorrect number of arguments: starts-with()
//         //
//         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      EvalContext evalContext0 = null;
      AttributeContext attributeContext0 = new AttributeContext((EvalContext) null, (NodeTest) null);
      PrecedingOrFollowingContext precedingOrFollowingContext0 = new PrecedingOrFollowingContext(attributeContext0, (NodeTest) null, true);
      CoreFunction coreFunction0 = new CoreFunction(9, expressionArray0);
      // Undeclared exception!
//      try { 
        coreFunction0.functionBoolean((EvalContext) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "Cannot find an element by key - no KeyManager has been specified");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "Cannot find an element by key - no KeyManager has been specified");
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(6, expressionArray0);
      EvalContext evalContext0 = null;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      Locale locale0 = Locale.CANADA_FRENCH;
      CoreFunction coreFunction1 = new CoreFunction(6, expressionArray0);
      CoreFunction coreFunction2 = new CoreFunction(6, expressionArray0);
      // Undeclared exception!
//      try { 
        coreFunction2.functionRound((EvalContext) null);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // Incorrect number of arguments: namespace-uri()
//         //
//         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      EvalContext evalContext0 = null;
      QName qName0 = new QName("", "!");
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest((String) null);
      SelfContext selfContext0 = new SelfContext((EvalContext) null, processingInstructionTest0);
      AttributeContext attributeContext0 = new AttributeContext((EvalContext) null, processingInstructionTest0);
      CoreFunction coreFunction0 = new CoreFunction((-1286), expressionArray0);
      // Undeclared exception!
//      try { 
        coreFunction0.functionFalse(selfContext0);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // Incorrect number of arguments: unknownFunction-1286()(null)
//         //
//         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      int int0 = 0;
      Expression[] expressionArray0 = new Expression[1];
      EvalContext evalContext0 = null;
      int int1 = 13;
      CoreFunction coreFunction0 = new CoreFunction(13, expressionArray0);
      // Undeclared exception!
//      try { 
        coreFunction0.functionFloor((EvalContext) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      CoreFunction coreFunction0 = new CoreFunction(4, expressionArray0);
      PredicateContext predicateContext0 = new PredicateContext((EvalContext) null, coreFunction0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      coreFunction0.toString();
      // Undeclared exception!
//      try { 
        coreFunction0.functionLast(predicateContext0);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // Incorrect number of arguments: id(null)
//         //
//         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      QName qName0 = new QName("=8;", "c@=v` ");
      Locale locale0 = Locale.GERMANY;
      CoreFunction coreFunction0 = new CoreFunction(10, (Expression[]) null);
      // Undeclared exception!
//      try { 
        coreFunction0.functionSum((EvalContext) null);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // Incorrect number of arguments: starts-with()
//         //
//         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      EvalContext evalContext0 = null;
      QName qName0 = new QName("", "!");
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      Locale locale0 = Locale.CANADA_FRENCH;
      int int0 = 896;
      CoreFunction coreFunction0 = new CoreFunction(896, expressionArray0);
      // Undeclared exception!
//      try { 
        coreFunction0.functionRound((EvalContext) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(0, expressionArray0);
      QName qName0 = new QName((String) null, "");
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
      Step step0 = new Step((-1339), nodeNameTest0, expressionArray0);
      LocationPath locationPath0 = new LocationPath(true, (Step[]) null);
      CoreOperationNegate coreOperationNegate0 = new CoreOperationNegate(locationPath0);
      CoreOperationMod coreOperationMod0 = new CoreOperationMod(coreOperationNegate0, coreFunction0);
      CoreOperationLessThan coreOperationLessThan0 = new CoreOperationLessThan(coreFunction0, coreOperationMod0);
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual(coreOperationLessThan0, coreFunction0);
      EvalContext evalContext0 = null;
      CoreFunction coreFunction1 = new CoreFunction((-3), expressionArray0);
      int int0 = (-1988);
      CoreFunction coreFunction2 = new CoreFunction((-1988), expressionArray0);
      // Undeclared exception!
//      try { 
        coreFunction2.functionBoolean((EvalContext) null);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // Incorrect number of arguments: unknownFunction-1988()()
//         //
//         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test223()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(0, expressionArray0);
      coreFunction0.toString();
      coreFunction0.computeContextDependent();
      coreFunction0.computeContextDependent();
      EvalContext evalContext0 = null;
      PredicateContext predicateContext0 = new PredicateContext((EvalContext) null, coreFunction0);
      CoreFunction coreFunction1 = new CoreFunction(0, expressionArray0);
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("unknownFunction0()()");
      QName qName0 = new QName("=2y$~>CCT{Q", "unknownFunction0()()");
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
      DescendantContext descendantContext0 = new DescendantContext(predicateContext0, false, processingInstructionTest0);
      JXPathContext jXPathContext0 = JXPathContext.newContext((Object) "kG11EIEHZS'oK.)Ck&");
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = new JXPathContextReferenceImpl(jXPathContext0, "", (Pointer) null);
      EvalContext evalContext1 = jXPathContextReferenceImpl0.getAbsoluteRootContext();
      coreFunction1.functionName(evalContext1);
      InitialContext initialContext0 = null;
//      try {
        initialContext0 = new InitialContext(predicateContext0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.jxpath.ri.axes.PredicateContext", e);
//      }
  }

  @Test(timeout = 4000)
  public void test224()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      QName qName0 = new QName("", "!");
      Locale locale0 = Locale.GERMANY;
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(0);
      AttributeContext attributeContext0 = new AttributeContext((EvalContext) null, nodeTypeTest0);
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
      DescendantContext descendantContext0 = new DescendantContext(attributeContext0, false, nodeNameTest0);
      AttributeContext attributeContext1 = new AttributeContext(descendantContext0, nodeNameTest0);
      AncestorContext ancestorContext0 = new AncestorContext(attributeContext1, false, nodeTypeTest0);
      EvalContext[] evalContextArray0 = new EvalContext[6];
      evalContextArray0[2] = (EvalContext) attributeContext1;
      evalContextArray0[3] = (EvalContext) attributeContext1;
      evalContextArray0[4] = (EvalContext) ancestorContext0;
      evalContextArray0[5] = (EvalContext) attributeContext0;
      UnionContext unionContext0 = new UnionContext(ancestorContext0, evalContextArray0);
      Expression[] expressionArray1 = new Expression[3];
      CoreOperationAnd coreOperationAnd0 = new CoreOperationAnd(expressionArray0);
      expressionArray1[0] = (Expression) coreOperationAnd0;
      ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, expressionArray1);
      expressionArray1[1] = (Expression) extensionFunction0;
      Integer integer0 = new Integer(286);
      Locale locale1 = Locale.GERMANY;
      CoreFunction coreFunction0 = new CoreFunction(11, expressionArray1);
      // Undeclared exception!
//      try { 
        coreFunction0.functionNull(evalContextArray0[1]);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.evosuite.runtime.System", e);
//      }
  }

  @Test(timeout = 4000)
  public void test225()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[9];
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd(expressionArray0);
      expressionArray0[1] = (Expression) coreOperationAdd0;
      CoreOperationAnd coreOperationAnd0 = new CoreOperationAnd(expressionArray0);
      expressionArray0[2] = (Expression) coreOperationAnd0;
      int int0 = 19;
      CoreFunction coreFunction0 = new CoreFunction(19, expressionArray0);
      // Undeclared exception!
//      try { 
        coreFunction0.toString();
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.evosuite.runtime.System", e);
//      }
  }

  @Test(timeout = 4000)
  public void test226()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[9];
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd(expressionArray0);
      expressionArray0[1] = (Expression) coreOperationAdd0;
      CoreOperationAnd coreOperationAnd0 = new CoreOperationAnd(expressionArray0);
      expressionArray0[2] = (Expression) coreOperationAnd0;
      int int0 = 0;
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(0);
      EvalContext evalContext0 = null;
      CoreFunction coreFunction0 = new CoreFunction(8, expressionArray0);
      // Undeclared exception!
//      try { 
        coreFunction0.functionStartsWith((EvalContext) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.evosuite.runtime.System", e);
//      }
  }

  @Test(timeout = 4000)
  public void test227()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[9];
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd(expressionArray0);
      expressionArray0[1] = (Expression) coreOperationAdd0;
      CoreOperationAnd coreOperationAnd0 = new CoreOperationAnd(expressionArray0);
      expressionArray0[2] = (Expression) coreOperationAnd0;
      Step[] stepArray0 = new Step[5];
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(0);
      Step step0 = new Step((-836), nodeTypeTest0, expressionArray0);
      stepArray0[1] = step0;
      LocationPath locationPath0 = new LocationPath(false, stepArray0);
      expressionArray0[4] = (Expression) locationPath0;
      CoreOperationMod coreOperationMod0 = new CoreOperationMod(expressionArray0[2], expressionArray0[4]);
      CoreOperationLessThan coreOperationLessThan0 = new CoreOperationLessThan(expressionArray0[1], expressionArray0[2]);
      expressionArray0[6] = (Expression) coreOperationLessThan0;
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual(expressionArray0[5], expressionArray0[0]);
      expressionArray0[7] = (Expression) coreOperationLessThanOrEqual0;
      EvalContext[] evalContextArray0 = new EvalContext[7];
      evalContextArray0[0] = null;
      evalContextArray0[1] = null;
      AncestorContext ancestorContext0 = new AncestorContext(evalContextArray0[0], true, nodeTypeTest0);
      CoreFunction coreFunction0 = new CoreFunction((-836), expressionArray0);
      coreFunction0.getArgumentCount();
      // Undeclared exception!
//      try { 
        coreFunction0.functionNumber(evalContextArray0[0]);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.evosuite.runtime.System", e);
//      }
  }

  @Test(timeout = 4000)
  public void test228()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction((-2930), (Expression[]) null);
      coreFunction0.args = null;
      PredicateContext predicateContext0 = new PredicateContext((EvalContext) null, coreFunction0);
      CoreFunction coreFunction1 = new CoreFunction(10, (Expression[]) null);
      coreFunction0.functionPosition(predicateContext0);
      coreFunction1.getArgumentCount();
      // Undeclared exception!
//      try { 
        coreFunction1.functionNumber((EvalContext) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test229()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      QName qName0 = new QName("", "!");
      Locale locale0 = Locale.GERMANY;
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(0);
      AttributeContext attributeContext0 = new AttributeContext((EvalContext) null, nodeTypeTest0);
      PrecedingOrFollowingContext precedingOrFollowingContext0 = new PrecedingOrFollowingContext((EvalContext) null, nodeTypeTest0, false);
      CoreFunction coreFunction0 = new CoreFunction(28, expressionArray0);
      // Undeclared exception!
//      try { 
        coreFunction0.functionNull(precedingOrFollowingContext0);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // Incorrect number of arguments: unknownFunction28()(null)
//         //
//         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test230()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[9];
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd(expressionArray0);
      expressionArray0[1] = (Expression) coreOperationAdd0;
      CoreOperationAnd coreOperationAnd0 = new CoreOperationAnd(expressionArray0);
      expressionArray0[2] = (Expression) coreOperationAnd0;
      Step[] stepArray0 = new Step[2];
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(0);
      Step step0 = new Step((-836), nodeTypeTest0, expressionArray0);
      stepArray0[1] = step0;
      LocationPath locationPath0 = new LocationPath(false, stepArray0);
      expressionArray0[4] = (Expression) locationPath0;
      CoreOperationMod coreOperationMod0 = new CoreOperationMod(expressionArray0[2], expressionArray0[4]);
      CoreOperationLessThan coreOperationLessThan0 = new CoreOperationLessThan(expressionArray0[1], expressionArray0[2]);
      expressionArray0[6] = (Expression) coreOperationLessThan0;
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual(expressionArray0[5], expressionArray0[0]);
      expressionArray0[7] = (Expression) coreOperationLessThanOrEqual0;
      EvalContext evalContext0 = null;
      CoreFunction coreFunction0 = new CoreFunction((-3), expressionArray0);
      // Undeclared exception!
//      try { 
        coreFunction0.functionBoolean((EvalContext) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.evosuite.runtime.System", e);
//      }
  }

  @Test(timeout = 4000)
  public void test231()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[9];
      CoreFunction coreFunction0 = new CoreFunction(15, expressionArray0);
      coreFunction0.toString();
      // Undeclared exception!
//      try { 
        coreFunction0.computeContextDependent();
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.jxpath.ri.compiler.Operation", e);
//      }
  }

  @Test(timeout = 4000)
  public void test232()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(0, expressionArray0);
      coreFunction0.toString();
      coreFunction0.computeContextDependent();
      coreFunction0.computeContextDependent();
      PredicateContext predicateContext0 = new PredicateContext((EvalContext) null, coreFunction0);
      CoreFunction coreFunction1 = new CoreFunction(0, expressionArray0);
      PredicateContext predicateContext1 = new PredicateContext(predicateContext0, coreFunction1);
      QName qName0 = new QName("-PjV\"", "unknownFunction0()()");
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, "u')PU!n,N.");
      Locale locale0 = Locale.GERMANY;
      coreFunction0.functionNull(predicateContext1);
      // Undeclared exception!
//      try { 
        coreFunction1.functionLocalName(predicateContext0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.jxpath.ri.axes.PredicateContext", e);
//      }
  }

  @Test(timeout = 4000)
  public void test233()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      QName qName0 = new QName("", "!");
      Locale locale0 = Locale.GERMANY;
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(0);
      AttributeContext attributeContext0 = new AttributeContext((EvalContext) null, nodeTypeTest0);
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
      DescendantContext descendantContext0 = new DescendantContext(attributeContext0, false, nodeNameTest0);
      AttributeContext attributeContext1 = new AttributeContext(descendantContext0, nodeNameTest0);
      CoreFunction coreFunction0 = new CoreFunction(30, expressionArray0);
      // Undeclared exception!
//      try { 
        coreFunction0.functionSubstringAfter((EvalContext) null);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // Incorrect number of arguments: format-number(null)
//         //
//         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test234()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction((-44), (Expression[]) null);
      String string0 = coreFunction0.toString();
      assertEquals("unknownFunction-44()()", string0);
      
      coreFunction0.computeContextDependent();
      coreFunction0.computeContextDependent();
      CoreOperationDivide coreOperationDivide0 = new CoreOperationDivide(coreFunction0, coreFunction0);
      CoreOperationGreaterThan coreOperationGreaterThan0 = new CoreOperationGreaterThan(coreOperationDivide0, coreOperationDivide0);
      CoreOperationDivide coreOperationDivide1 = new CoreOperationDivide(coreOperationDivide0, coreOperationGreaterThan0);
      boolean boolean0 = coreOperationGreaterThan0.computeContextDependent();
      assertFalse(boolean0);
      
      CoreOperationSubtract coreOperationSubtract0 = new CoreOperationSubtract(coreOperationDivide0, coreOperationDivide0);
      CoreFunction coreFunction1 = new CoreFunction((-3), expressionArray0);
      coreFunction0.functionNull((EvalContext) null);
      assertEquals((-44), coreFunction0.getFunctionCode());
  }

  @Test(timeout = 4000)
  public void test235()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(17, (Expression[]) null);
      EvalContext evalContext0 = null;
      PredicateContext predicateContext0 = new PredicateContext((EvalContext) null, coreFunction0);
      QName qName0 = new QName(" but object was null.  Terminating to avoid stack recursion.", " but object was null.  Terminating to avoid stack recursion.");
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, " but object was null.  Terminating to avoid stack recursion.");
      ParentContext parentContext0 = new ParentContext(predicateContext0, nodeNameTest0);
      AncestorContext ancestorContext0 = new AncestorContext(parentContext0, false, nodeNameTest0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      coreFunction0.toString();
      // Undeclared exception!
//      try { 
        coreFunction0.functionLast((EvalContext) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test236()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "Cannot find an element by key - no KeyManager has been specified");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "Cannot find an element by key - no KeyManager has been specified");
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(6, expressionArray0);
      EvalContext evalContext0 = null;
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("`b");
      SelfContext selfContext0 = new SelfContext((EvalContext) null, processingInstructionTest0);
      AttributeContext attributeContext0 = new AttributeContext(selfContext0, processingInstructionTest0);
      coreFunction0.functionFalse(attributeContext0);
      coreFunction0.computeContextDependent();
      EvalContext evalContext1 = null;
      coreFunction0.args = expressionArray0;
      // Undeclared exception!
//      try { 
        coreFunction0.functionConcat((EvalContext) null);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // Incorrect number of arguments: namespace-uri()
//         //
//         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test237()  throws Throwable  {
      Expression[] expressionArray0 = null;
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd((Expression[]) null);
      CoreFunction coreFunction0 = new CoreFunction(22, (Expression[]) null);
      Float float0 = new Float(197.73F);
      Constant constant0 = new Constant(float0);
      CoreOperationGreaterThan coreOperationGreaterThan0 = new CoreOperationGreaterThan(constant0, constant0);
      coreFunction0.getFunctionCode();
      EvalContext evalContext0 = null;
      CoreFunction coreFunction1 = new CoreFunction(41, (Expression[]) null);
      // Undeclared exception!
//      try { 
        coreFunction1.functionCount((EvalContext) null);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // Incorrect number of arguments: unknownFunction41()()
//         //
//         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test238()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[9];
      Long long0 = new Long(0);
      Constant constant0 = new Constant(long0);
      expressionArray0[0] = (Expression) constant0;
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd(expressionArray0);
      expressionArray0[1] = (Expression) coreOperationAdd0;
      CoreOperationAnd coreOperationAnd0 = new CoreOperationAnd(expressionArray0);
      expressionArray0[2] = (Expression) coreOperationAnd0;
      CoreOperationLessThan coreOperationLessThan0 = new CoreOperationLessThan(constant0, expressionArray0[2]);
      expressionArray0[3] = (Expression) coreOperationLessThan0;
      Step[] stepArray0 = new Step[2];
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(0);
      Step step0 = new Step(0, nodeTypeTest0, expressionArray0);
      stepArray0[0] = step0;
      Step step1 = new Step(0, nodeTypeTest0, expressionArray0);
      stepArray0[1] = step1;
      LocationPath locationPath0 = new LocationPath(false, stepArray0);
      expressionArray0[4] = (Expression) locationPath0;
      CoreOperationMod coreOperationMod0 = new CoreOperationMod(expressionArray0[2], expressionArray0[4]);
      CoreOperationLessThan coreOperationLessThan1 = new CoreOperationLessThan(expressionArray0[1], expressionArray0[2]);
      expressionArray0[6] = (Expression) coreOperationLessThan1;
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual(expressionArray0[5], expressionArray0[0]);
      expressionArray0[7] = (Expression) coreOperationLessThanOrEqual0;
      Constant constant1 = new Constant(long0);
      expressionArray0[8] = (Expression) constant1;
      CoreFunction coreFunction0 = new CoreFunction(0, expressionArray0);
      EvalContext evalContext0 = null;
      // Undeclared exception!
//      try { 
        coreFunction0.functionPosition((EvalContext) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.evosuite.runtime.System", e);
//      }
  }

  @Test(timeout = 4000)
  public void test239()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(0, expressionArray0);
      coreFunction0.toString();
      coreFunction0.computeContextDependent();
      coreFunction0.computeContextDependent();
      EvalContext evalContext0 = null;
      PredicateContext predicateContext0 = new PredicateContext((EvalContext) null, coreFunction0);
      CoreFunction coreFunction1 = new CoreFunction(0, expressionArray0);
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("unknownFunction0()()");
      AncestorContext ancestorContext0 = new AncestorContext((EvalContext) null, true, processingInstructionTest0);
      EvalContext[] evalContextArray0 = new EvalContext[7];
      evalContextArray0[0] = (EvalContext) predicateContext0;
      evalContextArray0[1] = (EvalContext) predicateContext0;
      evalContextArray0[2] = null;
      evalContextArray0[3] = null;
      evalContextArray0[4] = (EvalContext) ancestorContext0;
      evalContextArray0[5] = (EvalContext) ancestorContext0;
      UnionContext unionContext0 = new UnionContext(predicateContext0, evalContextArray0);
      // Undeclared exception!
//      try { 
        coreFunction0.functionKey(evalContextArray0[4]);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // Incorrect number of arguments: unknownFunction0()()
//         //
//         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test240()  throws Throwable  {
      Expression[] expressionArray0 = null;
      int int0 = 9;
      CoreFunction coreFunction0 = new CoreFunction(9, (Expression[]) null);
      coreFunction0.toString();
      EvalContext evalContext0 = null;
      boolean boolean0 = false;
      QName qName0 = new QName("w*T0iV97?`p", "pax+Q\",ZzOlQjlb7&lE");
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
      NodeNameTest nodeNameTest1 = new NodeNameTest(qName0);
      DescendantContext descendantContext0 = new DescendantContext((EvalContext) null, false, nodeNameTest1);
      // Undeclared exception!
//      try { 
        coreFunction0.functionStringLength((EvalContext) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test241()  throws Throwable  {
      QName qName0 = new QName("mg", "mg");
      Locale locale0 = Locale.GERMANY;
      Expression[] expressionArray0 = new Expression[6];
      CoreFunction coreFunction0 = new CoreFunction(4, expressionArray0);
      CoreOperationSubtract coreOperationSubtract0 = new CoreOperationSubtract(coreFunction0, coreFunction0);
      CoreOperationLessThan coreOperationLessThan0 = new CoreOperationLessThan(coreOperationSubtract0, coreOperationSubtract0);
      expressionArray0[0] = (Expression) coreOperationLessThan0;
      CoreOperationEqual coreOperationEqual0 = new CoreOperationEqual(coreFunction0, coreFunction0);
      expressionArray0[1] = (Expression) coreOperationEqual0;
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd(expressionArray0);
      expressionArray0[2] = (Expression) coreOperationAdd0;
      CoreOperationOr coreOperationOr0 = new CoreOperationOr(expressionArray0);
      expressionArray0[3] = (Expression) coreOperationOr0;
      CoreOperationUnion coreOperationUnion0 = new CoreOperationUnion(expressionArray0);
      expressionArray0[4] = (Expression) coreOperationUnion0;
      CoreOperationAnd coreOperationAnd0 = new CoreOperationAnd(expressionArray0);
      expressionArray0[5] = (Expression) coreOperationAnd0;
      CoreFunction coreFunction1 = new CoreFunction(67, expressionArray0);
      // Undeclared exception!
//      try { 
        coreFunction0.functionSum((EvalContext) null);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // Incorrect number of arguments: id(org.apache.commons.jxpath.ri.compiler.CoreOperationSubtract@0000000003 < org.apache.commons.jxpath.ri.compiler.CoreOperationSubtract@0000000003, org.apache.commons.jxpath.ri.compiler.CoreFunction@0000000002 = org.apache.commons.jxpath.ri.compiler.CoreFunction@0000000002, (org.apache.commons.jxpath.ri.compiler.CoreOperationLessThan@0000000004) + (org.apache.commons.jxpath.ri.compiler.CoreOperationEqual@0000000005) + org.apache.commons.jxpath.ri.compiler.CoreOperationAdd@0000000006 + (org.apache.commons.jxpath.ri.compiler.CoreOperationOr@0000000007) + org.apache.commons.jxpath.ri.compiler.CoreOperationUnion@0000000008 + (org.apache.commons.jxpath.ri.compiler.CoreOperationAnd@0000000009), org.apache.commons.jxpath.ri.compiler.CoreOperationLessThan@0000000004 or org.apache.commons.jxpath.ri.compiler.CoreOperationEqual@0000000005 or org.apache.commons.jxpath.ri.compiler.CoreOperationAdd@0000000006 or org.apache.commons.jxpath.ri.compiler.CoreOperationOr@0000000007 or org.apache.commons.jxpath.ri.compiler.CoreOperationUnion@0000000008 or org.apache.commons.jxpath.ri.compiler.CoreOperationAnd@0000000009, (org.apache.commons.jxpath.ri.compiler.CoreOperationLessThan@0000000004) | (org.apache.commons.jxpath.ri.compiler.CoreOperationEqual@0000000005) | (org.apache.commons.jxpath.ri.compiler.CoreOperationAdd@0000000006) | (org.apache.commons.jxpath.ri.compiler.CoreOperationOr@0000000007) | org.apache.commons.jxpath.ri.compiler.CoreOperationUnion@0000000008 | (org.apache.commons.jxpath.ri.compiler.CoreOperationAnd@0000000009), org.apache.commons.jxpath.ri.compiler.CoreOperationLessThan@0000000004 and org.apache.commons.jxpath.ri.compiler.CoreOperationEqual@0000000005 and org.apache.commons.jxpath.ri.compiler.CoreOperationAdd@0000000006 and (org.apache.commons.jxpath.ri.compiler.CoreOperationOr@0000000007) and org.apache.commons.jxpath.ri.compiler.CoreOperationUnion@0000000008 and org.apache.commons.jxpath.ri.compiler.CoreOperationAnd@0000000009)
//         //
//         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test242()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction((-2930), (Expression[]) null);
      coreFunction0.args = null;
      coreFunction0.toString();
      FileSystemHandling.shouldAllThrowIOExceptions();
      EvalContext evalContext0 = null;
      QName qName0 = new QName("unknownFunction-2930()()", "unknownFunction-2930()()");
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
      DescendantContext descendantContext0 = new DescendantContext((EvalContext) null, false, nodeNameTest0);
      // Undeclared exception!
//      try { 
        coreFunction0.functionContains(descendantContext0);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // Incorrect number of arguments: unknownFunction-2930()()
//         //
//         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test243()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction((-2930), (Expression[]) null);
      coreFunction0.args = null;
      String string0 = coreFunction0.toString();
      assertEquals("unknownFunction-2930()()", string0);
      
      CoreOperationOr coreOperationOr0 = new CoreOperationOr((Expression[]) null);
      CoreOperationGreaterThan coreOperationGreaterThan0 = new CoreOperationGreaterThan(coreFunction0, coreFunction0);
      NameAttributeTest nameAttributeTest0 = new NameAttributeTest(coreFunction0, coreOperationOr0);
      CoreOperationDivide coreOperationDivide0 = new CoreOperationDivide(coreOperationOr0, coreFunction0);
      CoreFunction coreFunction1 = new CoreFunction((-2930), (Expression[]) null);
      assertEquals(0, coreFunction1.getArgumentCount());
      
      QName qName0 = new QName("unknownFunction-2930()()", "org.apache.commons.jxpath.JXPathInvalidSyntaxException");
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
      SelfContext selfContext0 = new SelfContext((EvalContext) null, nodeNameTest0);
      AttributeContext attributeContext0 = new AttributeContext((EvalContext) null, nodeNameTest0);
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("");
      ChildContext childContext0 = new ChildContext(attributeContext0, processingInstructionTest0, false, false);
      PredicateContext predicateContext0 = new PredicateContext(childContext0, coreOperationOr0);
      coreFunction1.functionFalse(selfContext0);
      assertEquals((-2930), coreFunction1.getFunctionCode());
  }

  @Test(timeout = 4000)
  public void test244()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd(expressionArray0);
      CoreFunction coreFunction0 = new CoreFunction((-1988), expressionArray0);
      Float float0 = new Float(1984.0F);
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(32);
      NodeTypeTest nodeTypeTest1 = new NodeTypeTest(1192);
      Step step0 = new Step((-1988), nodeTypeTest1, expressionArray0);
      step0.toString();
      CoreFunction coreFunction1 = new CoreFunction(794, expressionArray0);
      // Undeclared exception!
//      try { 
        coreFunction1.functionString((EvalContext) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test245()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[7];
      CoreOperationEqual coreOperationEqual0 = new CoreOperationEqual((Expression) null, (Expression) null);
      CoreOperationLessThan coreOperationLessThan0 = new CoreOperationLessThan(coreOperationEqual0, coreOperationEqual0);
      expressionArray0[0] = (Expression) coreOperationLessThan0;
      QName qName0 = new QName("+,.");
      VariableReference variableReference0 = new VariableReference(qName0);
      expressionArray0[1] = (Expression) variableReference0;
      CoreOperationNegate coreOperationNegate0 = new CoreOperationNegate(expressionArray0[1]);
      expressionArray0[2] = (Expression) coreOperationNegate0;
      CoreOperationOr coreOperationOr0 = new CoreOperationOr(expressionArray0);
      expressionArray0[3] = (Expression) coreOperationOr0;
      CoreOperationGreaterThan coreOperationGreaterThan0 = new CoreOperationGreaterThan(expressionArray0[2], variableReference0);
      expressionArray0[4] = (Expression) coreOperationGreaterThan0;
      NameAttributeTest nameAttributeTest0 = new NameAttributeTest(coreOperationEqual0, expressionArray0[0]);
      expressionArray0[5] = (Expression) nameAttributeTest0;
      CoreOperationDivide coreOperationDivide0 = new CoreOperationDivide(coreOperationOr0, (Expression) null);
      expressionArray0[6] = (Expression) coreOperationDivide0;
      CoreFunction coreFunction0 = new CoreFunction((-1130), expressionArray0);
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
      SelfContext selfContext0 = new SelfContext((EvalContext) null, nodeNameTest0);
      ChildContext childContext0 = new ChildContext(selfContext0, nodeNameTest0, false, false);
      PredicateContext predicateContext0 = new PredicateContext(childContext0, coreFunction0);
      // Undeclared exception!
//      try { 
        coreFunction0.functionFalse(predicateContext0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.evosuite.runtime.System", e);
//      }
  }

  @Test(timeout = 4000)
  public void test246()  throws Throwable  {
      Step[] stepArray0 = new Step[1];
      Step step0 = new Step((-734), (NodeTest) null, (Expression[]) null);
      step0.toString();
      stepArray0[0] = step0;
      step0.isContextDependent();
      step0.toString();
      CoreFunction coreFunction0 = new CoreFunction(710, (Expression[]) null);
      // Undeclared exception!
//      try { 
        coreFunction0.functionString((EvalContext) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test247()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      Float float0 = new Float(1984.0F);
      QName qName0 = new QName("", "");
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
      DescendantContext descendantContext0 = new DescendantContext((EvalContext) null, true, nodeNameTest0);
      CoreFunction coreFunction0 = new CoreFunction((-2415), expressionArray0);
      coreFunction0.compute((EvalContext) null);
      assertEquals((-2415), coreFunction0.getFunctionCode());
  }

  @Test(timeout = 4000)
  public void test248()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(0, (Expression[]) null);
      JXPathContext jXPathContext0 = JXPathContext.newContext((Object) coreFunction0);
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = new JXPathContextReferenceImpl(jXPathContext0, (Object) null, (Pointer) null);
      EvalContext evalContext0 = jXPathContextReferenceImpl0.getAbsoluteRootContext();
      coreFunction0.computeValue(evalContext0);
      coreFunction0.functionLocalName(evalContext0);
      Constant constant0 = new Constant("root");
      coreFunction0.functionNamespaceURI(evalContext0);
      coreFunction0.computeContextDependent();
      // Undeclared exception!
//      try { 
        coreFunction0.getArg2();
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test249()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(0, expressionArray0);
      coreFunction0.toString();
      coreFunction0.computeContextDependent();
      coreFunction0.computeContextDependent();
      EvalContext evalContext0 = null;
      PredicateContext predicateContext0 = new PredicateContext((EvalContext) null, coreFunction0);
      CoreFunction coreFunction1 = new CoreFunction(0, expressionArray0);
      coreFunction1.functionPosition(predicateContext0);
      coreFunction0.getArgumentCount();
      // Undeclared exception!
//      try { 
        coreFunction1.functionNumber((EvalContext) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test250()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(0, (Expression[]) null);
      JXPathContext.newContext((Object) coreFunction0);
      NameAttributeTest nameAttributeTest0 = new NameAttributeTest(coreFunction0, coreFunction0);
      CoreOperationDivide coreOperationDivide0 = new CoreOperationDivide(nameAttributeTest0, nameAttributeTest0);
      CoreOperationOr coreOperationOr0 = new CoreOperationOr((Expression[]) null);
      Expression[] expressionArray0 = new Expression[3];
      expressionArray0[0] = (Expression) coreOperationDivide0;
      Float float0 = new Float(355.2332F);
      Constant constant0 = new Constant(float0);
      CoreOperationGreaterThan coreOperationGreaterThan0 = new CoreOperationGreaterThan(coreOperationOr0, nameAttributeTest0);
      QName qName0 = new QName((String) null, (String) null);
      VariableReference variableReference0 = new VariableReference(qName0);
      CoreFunction coreFunction1 = new CoreFunction((-762), (Expression[]) null);
      coreFunction0.getFunctionCode();
      EvalContext evalContext0 = null;
      Expression[] expressionArray1 = new Expression[6];
      expressionArray1[0] = (Expression) coreOperationDivide0;
      expressionArray1[1] = (Expression) coreOperationGreaterThan0;
      CoreOperationEqual coreOperationEqual0 = new CoreOperationEqual(coreOperationOr0, coreOperationGreaterThan0);
      expressionArray1[2] = (Expression) coreOperationEqual0;
      expressionArray1[3] = (Expression) coreOperationDivide0;
      expressionArray1[4] = (Expression) coreOperationOr0;
      expressionArray1[5] = (Expression) variableReference0;
      CoreFunction coreFunction2 = new CoreFunction((-47), expressionArray1);
      // Undeclared exception!
//      try { 
        coreFunction1.functionNamespaceURI((EvalContext) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test251()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd(expressionArray0);
      CoreFunction coreFunction0 = new CoreFunction((-1988), expressionArray0);
      Float float0 = new Float(1984.0F);
      Constant constant0 = new Constant(float0);
      CoreOperationGreaterThan coreOperationGreaterThan0 = new CoreOperationGreaterThan(coreFunction0, coreOperationAdd0);
      coreFunction0.getFunctionCode();
      EvalContext evalContext0 = null;
      CoreFunction coreFunction1 = new CoreFunction((-1161), expressionArray0);
      // Undeclared exception!
//      try { 
        coreFunction1.functionCount((EvalContext) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test252()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[7];
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd(expressionArray0);
      CoreOperationDivide coreOperationDivide0 = new CoreOperationDivide(coreOperationAdd0, coreOperationAdd0);
      expressionArray0[0] = (Expression) coreOperationDivide0;
      NameAttributeTest nameAttributeTest0 = new NameAttributeTest(expressionArray0[0], coreOperationDivide0);
      expressionArray0[1] = (Expression) nameAttributeTest0;
      QName qName0 = new QName((String) null, "&TZQ5kS4i82[4Vv!t'[");
      EvalContext evalContext0 = null;
      QName qName1 = new QName("s6V.s@DJ5.(y", (String) null);
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
      CoreFunction coreFunction0 = new CoreFunction(1128, expressionArray0);
      coreFunction0.getArg3();
      PrecedingOrFollowingContext precedingOrFollowingContext0 = new PrecedingOrFollowingContext((EvalContext) null, nodeNameTest0, false);
      // Undeclared exception!
//      try { 
        coreFunction0.functionName((EvalContext) null);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // Incorrect number of arguments: unknownFunction1128()((org.apache.commons.jxpath.ri.compiler.CoreOperationAdd@0000000001) div (org.apache.commons.jxpath.ri.compiler.CoreOperationAdd@0000000001), org.apache.commons.jxpath.ri.compiler.CoreOperationDivide@0000000002 = org.apache.commons.jxpath.ri.compiler.CoreOperationDivide@0000000002, null, null, null, null, null)
//         //
//         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test253()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[9];
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd(expressionArray0);
      expressionArray0[1] = (Expression) coreOperationAdd0;
      CoreOperationAnd coreOperationAnd0 = new CoreOperationAnd(expressionArray0);
      expressionArray0[2] = (Expression) coreOperationAnd0;
      Step[] stepArray0 = new Step[2];
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(0);
      Step step0 = new Step((-836), nodeTypeTest0, expressionArray0);
      stepArray0[1] = step0;
      LocationPath locationPath0 = new LocationPath(false, stepArray0);
      expressionArray0[4] = (Expression) locationPath0;
      CoreOperationMod coreOperationMod0 = new CoreOperationMod(expressionArray0[2], expressionArray0[4]);
      CoreOperationLessThan coreOperationLessThan0 = new CoreOperationLessThan(expressionArray0[1], expressionArray0[2]);
      expressionArray0[6] = (Expression) coreOperationLessThan0;
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual(expressionArray0[5], expressionArray0[0]);
      expressionArray0[7] = (Expression) coreOperationLessThanOrEqual0;
      EvalContext[] evalContextArray0 = new EvalContext[7];
      evalContextArray0[0] = null;
      evalContextArray0[1] = null;
      AncestorContext ancestorContext0 = new AncestorContext(evalContextArray0[0], true, nodeTypeTest0);
      evalContextArray0[2] = (EvalContext) ancestorContext0;
      evalContextArray0[5] = null;
      evalContextArray0[6] = null;
      UnionContext unionContext0 = new UnionContext((EvalContext) null, evalContextArray0);
      CoreFunction coreFunction0 = new CoreFunction((-5481), expressionArray0);
      // Undeclared exception!
//      try { 
        coreFunction0.functionConcat(evalContextArray0[0]);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test254()  throws Throwable  {
      Long long0 = new Long(0L);
      Long long1 = new Long(0);
      Constant constant0 = new Constant(long1);
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd((Expression[]) null);
      CoreOperationAnd coreOperationAnd0 = new CoreOperationAnd((Expression[]) null);
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(0);
      Step step0 = new Step((-3), nodeTypeTest0, (Expression[]) null);
      Step step1 = new Step((-836), nodeTypeTest0, (Expression[]) null);
      Step[] stepArray0 = new Step[5];
      stepArray0[0] = step1;
      stepArray0[1] = step1;
      stepArray0[2] = step0;
      stepArray0[3] = step1;
      stepArray0[4] = step1;
      LocationPath locationPath0 = new LocationPath(true, stepArray0);
      CoreOperationMod coreOperationMod0 = new CoreOperationMod(constant0, locationPath0);
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual(coreOperationMod0, constant0);
      Constant constant1 = new Constant(long0);
      EvalContext evalContext0 = null;
      DescendantContext descendantContext0 = new DescendantContext((EvalContext) null, false, nodeTypeTest0);
      AncestorContext ancestorContext0 = new AncestorContext(descendantContext0, true, nodeTypeTest0);
      CoreFunction coreFunction0 = new CoreFunction(0, (Expression[]) null);
      AttributeContext attributeContext0 = new AttributeContext(descendantContext0, nodeTypeTest0);
      // Undeclared exception!
//      try { 
        coreFunction0.functionSubstringAfter(attributeContext0);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // Incorrect number of arguments: unknownFunction0()()
//         //
//         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test255()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[9];
      CoreFunction coreFunction0 = new CoreFunction(4, expressionArray0);
      coreFunction0.toString();
      // Undeclared exception!
//      try { 
        coreFunction0.computeContextDependent();
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.jxpath.ri.compiler.Operation", e);
//      }
  }

  @Test(timeout = 4000)
  public void test256()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "Nxub,m%KOj@=Bhk");
      Expression[] expressionArray0 = new Expression[2];
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd(expressionArray0);
      expressionArray0[0] = (Expression) coreOperationAdd0;
      CoreOperationMod coreOperationMod0 = new CoreOperationMod(coreOperationAdd0, coreOperationAdd0);
      expressionArray0[1] = (Expression) coreOperationMod0;
      CoreFunction coreFunction0 = new CoreFunction((-109), expressionArray0);
      EvalContext evalContext0 = null;
      NodeNameTest nodeNameTest0 = new NodeNameTest((QName) null);
      AncestorContext ancestorContext0 = new AncestorContext((EvalContext) null, false, nodeNameTest0);
      NodeNameTest nodeNameTest1 = new NodeNameTest((QName) null, "B<");
      SelfContext selfContext0 = new SelfContext((EvalContext) null, nodeNameTest1);
      coreFunction0.iterate(selfContext0);
      NamespaceContext namespaceContext0 = new NamespaceContext(ancestorContext0, nodeNameTest0);
      // Undeclared exception!
//      try { 
        coreFunction0.functionNull(namespaceContext0);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // Incorrect number of arguments: unknownFunction-109()(org.apache.commons.jxpath.ri.compiler.CoreOperationAdd@0000000001 + org.apache.commons.jxpath.ri.compiler.CoreOperationMod@0000000002, (org.apache.commons.jxpath.ri.compiler.CoreOperationAdd@0000000001) mod (org.apache.commons.jxpath.ri.compiler.CoreOperationAdd@0000000001))
//         //
//         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test257()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[7];
      NameAttributeTest nameAttributeTest0 = new NameAttributeTest((Expression) null, (Expression) null);
      expressionArray0[0] = (Expression) nameAttributeTest0;
      CoreOperationEqual coreOperationEqual0 = new CoreOperationEqual(expressionArray0[0], (Expression) null);
      expressionArray0[1] = (Expression) coreOperationEqual0;
      CoreOperationDivide coreOperationDivide0 = new CoreOperationDivide(expressionArray0[1], expressionArray0[1]);
      expressionArray0[2] = (Expression) coreOperationDivide0;
      QName qName0 = new QName("");
      VariableReference variableReference0 = new VariableReference(qName0);
      expressionArray0[3] = (Expression) variableReference0;
      CoreOperationGreaterThan coreOperationGreaterThan0 = new CoreOperationGreaterThan(coreOperationDivide0, expressionArray0[3]);
      expressionArray0[4] = (Expression) coreOperationGreaterThan0;
      CoreOperationDivide coreOperationDivide1 = new CoreOperationDivide(coreOperationGreaterThan0, expressionArray0[2]);
      expressionArray0[5] = (Expression) coreOperationDivide1;
      coreOperationGreaterThan0.computeContextDependent();
      CoreOperationSubtract coreOperationSubtract0 = new CoreOperationSubtract(expressionArray0[1], expressionArray0[3]);
      expressionArray0[6] = (Expression) coreOperationSubtract0;
      CoreFunction coreFunction0 = new CoreFunction(14, expressionArray0);
      // Undeclared exception!
//      try { 
        coreFunction0.functionNull((EvalContext) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.evosuite.runtime.System", e);
//      }
  }

  @Test(timeout = 4000)
  public void test258()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      CoreFunction coreFunction0 = new CoreFunction((-4525), expressionArray0);
      CoreOperationDivide coreOperationDivide0 = new CoreOperationDivide(coreFunction0, coreFunction0);
      NameAttributeTest nameAttributeTest0 = new NameAttributeTest(coreFunction0, coreOperationDivide0);
      QName qName0 = new QName("pz%", (String) null);
      QName qName1 = new QName("s6V.s@DJ5.(y", "");
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
      DescendantContext descendantContext0 = new DescendantContext((EvalContext) null, false, nodeNameTest0);
      CoreFunction coreFunction1 = new CoreFunction((-4525), expressionArray0);
      // Undeclared exception!
//      try { 
        coreFunction0.functionStringLength((EvalContext) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test259()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[7];
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd(expressionArray0);
      CoreOperationDivide coreOperationDivide0 = new CoreOperationDivide(coreOperationAdd0, coreOperationAdd0);
      expressionArray0[0] = (Expression) coreOperationDivide0;
      NameAttributeTest nameAttributeTest0 = new NameAttributeTest(expressionArray0[0], coreOperationDivide0);
      expressionArray0[1] = (Expression) nameAttributeTest0;
      QName qName0 = new QName((String) null, "&TZQ5kS4i82[4Vv!t'[");
      QName qName1 = new QName("s6V.s@DJ5.(y", (String) null);
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
      CoreFunction coreFunction0 = new CoreFunction(1128, expressionArray0);
      coreFunction0.getArg3();
      // Undeclared exception!
//      try { 
        coreFunction0.functionPosition((EvalContext) null);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // Incorrect number of arguments: unknownFunction1128()((org.apache.commons.jxpath.ri.compiler.CoreOperationAdd@0000000001) div (org.apache.commons.jxpath.ri.compiler.CoreOperationAdd@0000000001), org.apache.commons.jxpath.ri.compiler.CoreOperationDivide@0000000002 = org.apache.commons.jxpath.ri.compiler.CoreOperationDivide@0000000002, null, null, null, null, null)
//         //
//         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test260()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd(expressionArray0);
      expressionArray0[0] = (Expression) coreOperationAdd0;
      CoreFunction coreFunction0 = new CoreFunction((-1988), expressionArray0);
      Float float0 = new Float(1984.0F);
      Constant constant0 = new Constant(float0);
      CoreOperationGreaterThan coreOperationGreaterThan0 = new CoreOperationGreaterThan(coreFunction0, coreOperationAdd0);
      QName qName0 = new QName("@^]HJo=@_obe9", "B&(->[Jhk30");
      VariableReference variableReference0 = new VariableReference(qName0);
      CoreFunction coreFunction1 = new CoreFunction((-762), expressionArray0);
      ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, expressionArray0);
      ExtensionFunction extensionFunction1 = new ExtensionFunction(qName0, expressionArray0);
      CoreOperationDivide coreOperationDivide0 = new CoreOperationDivide(coreFunction1, constant0);
      CoreOperationNotEqual coreOperationNotEqual0 = new CoreOperationNotEqual(variableReference0, extensionFunction0);
      Expression[] expressionArray1 = new Expression[0];
      CoreFunction coreFunction2 = new CoreFunction((-316), expressionArray1);
      CoreOperationGreaterThan coreOperationGreaterThan1 = new CoreOperationGreaterThan(coreFunction2, coreOperationNotEqual0);
      CoreFunction coreFunction3 = new CoreFunction((-1988), expressionArray1);
      UnionContext unionContext0 = new UnionContext((EvalContext) null, (EvalContext[]) null);
      CoreFunction coreFunction4 = new CoreFunction(1232, expressionArray1);
      // Undeclared exception!
//      try { 
        coreFunction4.functionNumber((EvalContext) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test261()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[9];
      Long long0 = new Long(0);
      Constant constant0 = new Constant(long0);
      expressionArray0[0] = (Expression) constant0;
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd(expressionArray0);
      expressionArray0[1] = (Expression) coreOperationAdd0;
      CoreOperationAnd coreOperationAnd0 = new CoreOperationAnd(expressionArray0);
      expressionArray0[2] = (Expression) coreOperationAnd0;
      CoreOperationLessThan coreOperationLessThan0 = new CoreOperationLessThan(constant0, expressionArray0[2]);
      expressionArray0[3] = (Expression) coreOperationLessThan0;
      Step[] stepArray0 = new Step[2];
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(0);
      Step step0 = new Step(0, nodeTypeTest0, expressionArray0);
      stepArray0[0] = step0;
      Step step1 = new Step((-836), nodeTypeTest0, expressionArray0);
      stepArray0[1] = step1;
      LocationPath locationPath0 = new LocationPath(false, stepArray0);
      expressionArray0[4] = (Expression) locationPath0;
      CoreOperationMod coreOperationMod0 = new CoreOperationMod(expressionArray0[2], expressionArray0[4]);
      CoreOperationLessThan coreOperationLessThan1 = new CoreOperationLessThan(expressionArray0[1], expressionArray0[2]);
      expressionArray0[6] = (Expression) coreOperationLessThan1;
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual(expressionArray0[5], expressionArray0[0]);
      expressionArray0[7] = (Expression) coreOperationLessThanOrEqual0;
      Constant constant1 = new Constant(long0);
      expressionArray0[8] = (Expression) constant1;
      CoreFunction coreFunction0 = new CoreFunction(0, expressionArray0);
      EvalContext[] evalContextArray0 = new EvalContext[7];
      evalContextArray0[0] = null;
      evalContextArray0[1] = null;
      AncestorContext ancestorContext0 = new AncestorContext(evalContextArray0[0], true, nodeTypeTest0);
      evalContextArray0[2] = (EvalContext) ancestorContext0;
      evalContextArray0[3] = null;
      evalContextArray0[5] = null;
      evalContextArray0[6] = null;
      UnionContext unionContext0 = new UnionContext((EvalContext) null, evalContextArray0);
      // Undeclared exception!
//      try { 
        coreFunction0.functionKey(unionContext0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.evosuite.runtime.System", e);
//      }
  }

  @Test(timeout = 4000)
  public void test262()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      QName qName0 = new QName("", "!");
      Locale locale0 = Locale.GERMANY;
      CoreFunction coreFunction0 = new CoreFunction(896, expressionArray0);
      // Undeclared exception!
//      try { 
        coreFunction0.functionSum((EvalContext) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test263()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[9];
      Long long0 = new Long(0);
      Constant constant0 = new Constant(long0);
      expressionArray0[0] = (Expression) constant0;
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd(expressionArray0);
      expressionArray0[1] = (Expression) coreOperationAdd0;
      CoreOperationAnd coreOperationAnd0 = new CoreOperationAnd(expressionArray0);
      expressionArray0[2] = (Expression) coreOperationAnd0;
      Step[] stepArray0 = new Step[2];
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(0);
      Step step0 = new Step(0, nodeTypeTest0, expressionArray0);
      stepArray0[0] = step0;
      Step step1 = new Step((-836), nodeTypeTest0, expressionArray0);
      stepArray0[1] = step1;
      LocationPath locationPath0 = new LocationPath(false, stepArray0);
      expressionArray0[4] = (Expression) locationPath0;
      CoreOperationMod coreOperationMod0 = new CoreOperationMod(expressionArray0[2], expressionArray0[4]);
      expressionArray0[5] = (Expression) coreOperationMod0;
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual(expressionArray0[5], expressionArray0[0]);
      expressionArray0[7] = (Expression) coreOperationLessThanOrEqual0;
      Constant constant1 = new Constant(long0);
      expressionArray0[8] = (Expression) constant1;
      EvalContext[] evalContextArray0 = new EvalContext[7];
      evalContextArray0[0] = null;
      evalContextArray0[1] = null;
      AncestorContext ancestorContext0 = new AncestorContext(evalContextArray0[0], true, nodeTypeTest0);
      evalContextArray0[2] = (EvalContext) ancestorContext0;
      evalContextArray0[3] = null;
      CoreFunction coreFunction0 = new CoreFunction(0, expressionArray0);
      // Undeclared exception!
//      try { 
        coreFunction0.functionSubstringAfter(evalContextArray0[3]);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.evosuite.runtime.System", e);
//      }
  }

  @Test(timeout = 4000)
  public void test264()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[7];
      NameAttributeTest nameAttributeTest0 = new NameAttributeTest((Expression) null, (Expression) null);
      expressionArray0[0] = (Expression) nameAttributeTest0;
      CoreOperationEqual coreOperationEqual0 = new CoreOperationEqual(expressionArray0[0], (Expression) null);
      expressionArray0[1] = (Expression) coreOperationEqual0;
      CoreOperationDivide coreOperationDivide0 = new CoreOperationDivide(expressionArray0[1], expressionArray0[1]);
      expressionArray0[2] = (Expression) coreOperationDivide0;
      QName qName0 = new QName("");
      VariableReference variableReference0 = new VariableReference(qName0);
      expressionArray0[3] = (Expression) variableReference0;
      CoreOperationGreaterThan coreOperationGreaterThan0 = new CoreOperationGreaterThan(coreOperationDivide0, expressionArray0[3]);
      expressionArray0[4] = (Expression) coreOperationGreaterThan0;
      CoreOperationDivide coreOperationDivide1 = new CoreOperationDivide(coreOperationGreaterThan0, expressionArray0[2]);
      expressionArray0[5] = (Expression) coreOperationDivide1;
      CoreOperationSubtract coreOperationSubtract0 = new CoreOperationSubtract(expressionArray0[1], expressionArray0[3]);
      expressionArray0[6] = (Expression) coreOperationSubtract0;
      CoreFunction coreFunction0 = new CoreFunction((-47), expressionArray0);
      // Undeclared exception!
//      try { 
        coreFunction0.toString();
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.evosuite.runtime.System", e);
//      }
  }

  @Test(timeout = 4000)
  public void test265()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction((-2930), (Expression[]) null);
      coreFunction0.args = null;
      coreFunction0.toString();
      EvalContext evalContext0 = null;
      QName qName0 = new QName("unknownFunction-2930()()", "unknownFunction-2930()()");
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
      DescendantContext descendantContext0 = new DescendantContext((EvalContext) null, false, nodeNameTest0);
      // Undeclared exception!
//      try { 
        coreFunction0.functionStartsWith((EvalContext) null);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // Incorrect number of arguments: unknownFunction-2930()()
//         //
//         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test266()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[9];
      Long long0 = new Long(0);
      Constant constant0 = new Constant(long0);
      expressionArray0[0] = (Expression) constant0;
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd(expressionArray0);
      expressionArray0[1] = (Expression) coreOperationAdd0;
      CoreOperationAnd coreOperationAnd0 = new CoreOperationAnd(expressionArray0);
      expressionArray0[2] = (Expression) coreOperationAnd0;
      Step[] stepArray0 = new Step[2];
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(0);
      Step step0 = new Step(0, nodeTypeTest0, expressionArray0);
      stepArray0[0] = step0;
      Step step1 = new Step((-836), nodeTypeTest0, expressionArray0);
      stepArray0[1] = step1;
      LocationPath locationPath0 = new LocationPath(false, stepArray0);
      expressionArray0[4] = (Expression) locationPath0;
      CoreOperationMod coreOperationMod0 = new CoreOperationMod(expressionArray0[2], expressionArray0[4]);
      expressionArray0[5] = (Expression) coreOperationMod0;
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual(expressionArray0[5], expressionArray0[0]);
      expressionArray0[7] = (Expression) coreOperationLessThanOrEqual0;
      Constant constant1 = new Constant(long0);
      expressionArray0[8] = (Expression) constant1;
      EvalContext[] evalContextArray0 = new EvalContext[7];
      evalContextArray0[0] = null;
      evalContextArray0[1] = null;
      AncestorContext ancestorContext0 = new AncestorContext(evalContextArray0[0], true, nodeTypeTest0);
      evalContextArray0[2] = (EvalContext) ancestorContext0;
      evalContextArray0[3] = null;
      evalContextArray0[4] = null;
      evalContextArray0[5] = null;
      evalContextArray0[6] = null;
      UnionContext unionContext0 = new UnionContext((EvalContext) null, evalContextArray0);
      CoreFunction coreFunction0 = new CoreFunction(0, expressionArray0);
      // Undeclared exception!
//      try { 
        coreFunction0.functionString(ancestorContext0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.evosuite.runtime.System", e);
//      }
  }

  @Test(timeout = 4000)
  public void test267()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd(expressionArray0);
      QName qName0 = new QName("local-name", "local-name");
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, "local-name");
      Expression[] expressionArray1 = new Expression[4];
      expressionArray1[0] = (Expression) coreOperationAdd0;
      expressionArray1[1] = (Expression) coreOperationAdd0;
      expressionArray1[2] = (Expression) coreOperationAdd0;
      expressionArray1[3] = (Expression) coreOperationAdd0;
      Step step0 = new Step((-1988), nodeNameTest0, expressionArray1);
      NodeNameTest nodeNameTest1 = new NodeNameTest(qName0, "");
      Step step1 = new Step((-1988), nodeNameTest0, expressionArray0);
      Step step2 = new Step((-639), nodeNameTest1, expressionArray1);
      Step step3 = new Step((-1520), nodeNameTest1, expressionArray0);
      Step[] stepArray0 = new Step[1];
      stepArray0[0] = step2;
      LocationPath locationPath0 = new LocationPath(true, stepArray0);
      ExpressionPath expressionPath0 = new ExpressionPath(locationPath0, expressionArray1, stepArray0);
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual(expressionPath0, locationPath0);
      ExpressionPath expressionPath1 = new ExpressionPath(locationPath0, expressionArray1, stepArray0);
      ExpressionPath expressionPath2 = new ExpressionPath(expressionPath1, expressionArray1, stepArray0);
      ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, expressionArray1);
      ExtensionFunction extensionFunction1 = new ExtensionFunction(qName0, expressionArray1);
      extensionFunction1.args = expressionArray0;
      CoreOperationDivide coreOperationDivide0 = new CoreOperationDivide(expressionPath1, extensionFunction1);
      CoreOperationNotEqual coreOperationNotEqual0 = new CoreOperationNotEqual(extensionFunction1, extensionFunction0);
      CoreOperationGreaterThan coreOperationGreaterThan0 = new CoreOperationGreaterThan(coreOperationAdd0, expressionArray1[2]);
      CoreFunction coreFunction0 = new CoreFunction(0, expressionArray0);
      EvalContext evalContext0 = null;
      UnionContext unionContext0 = new UnionContext((EvalContext) null, (EvalContext[]) null);
      // Undeclared exception!
//      try { 
        coreFunction0.functionNumber(unionContext0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test268()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[6];
      Double double0 = new Double(0.0);
      Constant constant0 = new Constant(double0);
      NameAttributeTest nameAttributeTest0 = new NameAttributeTest(constant0, constant0);
      CoreOperationSubtract coreOperationSubtract0 = new CoreOperationSubtract(nameAttributeTest0, constant0);
      CoreFunction coreFunction0 = new CoreFunction(0, expressionArray0);
      coreFunction0.getArg1();
      EvalContext evalContext0 = null;
      // Undeclared exception!
//      try { 
        coreFunction0.functionID((EvalContext) null);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // Incorrect number of arguments: unknownFunction0()(null, null, null, null, null, null)
//         //
//         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test269()  throws Throwable  {
      int int0 = (-4525);
      Expression[] expressionArray0 = new Expression[1];
      CoreFunction coreFunction0 = new CoreFunction((-4525), expressionArray0);
      EvalContext evalContext0 = null;
      // Undeclared exception!
//      try { 
        coreFunction0.functionNot((EvalContext) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test270()  throws Throwable  {
      int int0 = (-4525);
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction((-4525), expressionArray0);
      // Undeclared exception!
//      try { 
        coreFunction0.getArg3();
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 2
//         //
//         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test271()  throws Throwable  {
      int int0 = (-2930);
      CoreFunction coreFunction0 = new CoreFunction((-2930), (Expression[]) null);
      coreFunction0.args = null;
      coreFunction0.toString();
      VariableReference variableReference0 = new VariableReference((QName) null);
      CoreFunction coreFunction1 = new CoreFunction((-2914), (Expression[]) null);
      EvalContext evalContext0 = null;
      // Undeclared exception!
//      try { 
        coreFunction0.functionSubstring((EvalContext) null);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // Incorrect number of arguments: unknownFunction-2930()()
//         //
//         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test272()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[7];
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd(expressionArray0);
      CoreOperationDivide coreOperationDivide0 = new CoreOperationDivide(coreOperationAdd0, coreOperationAdd0);
      expressionArray0[0] = (Expression) coreOperationDivide0;
      NameAttributeTest nameAttributeTest0 = new NameAttributeTest(expressionArray0[0], coreOperationDivide0);
      expressionArray0[1] = (Expression) nameAttributeTest0;
      QName qName0 = new QName((String) null, "&TZQ5kS4i82[4Vv!t'[");
      EvalContext evalContext0 = null;
      QName qName1 = new QName("s6V.s@DJ5.(y", (String) null);
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
      DescendantContext descendantContext0 = new DescendantContext((EvalContext) null, false, nodeNameTest0);
      CoreFunction coreFunction0 = new CoreFunction(1128, expressionArray0);
      // Undeclared exception!
//      try { 
        coreFunction0.functionStringLength(descendantContext0);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // Incorrect number of arguments: unknownFunction1128()((org.apache.commons.jxpath.ri.compiler.CoreOperationAdd@0000000001) div (org.apache.commons.jxpath.ri.compiler.CoreOperationAdd@0000000001), org.apache.commons.jxpath.ri.compiler.CoreOperationDivide@0000000002 = org.apache.commons.jxpath.ri.compiler.CoreOperationDivide@0000000002, null, null, null, null, null)
//         //
//         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test273()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[11];
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd(expressionArray0);
      expressionArray0[0] = (Expression) coreOperationAdd0;
      CoreFunction coreFunction0 = new CoreFunction((-1959), expressionArray0);
      CoreFunction coreFunction1 = new CoreFunction((-1959), expressionArray0);
      int int0 = new Integer((-762));
      EvalContext evalContext0 = null;
      CoreFunction coreFunction2 = new CoreFunction((-762), expressionArray0);
      // Undeclared exception!
//      try { 
        coreFunction2.functionNamespaceURI((EvalContext) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.evosuite.runtime.System", e);
//      }
  }

  @Test(timeout = 4000)
  public void test274()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[7];
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd(expressionArray0);
      CoreOperationDivide coreOperationDivide0 = new CoreOperationDivide(coreOperationAdd0, coreOperationAdd0);
      expressionArray0[0] = (Expression) coreOperationDivide0;
      NameAttributeTest nameAttributeTest0 = new NameAttributeTest(expressionArray0[0], coreOperationDivide0);
      expressionArray0[1] = (Expression) nameAttributeTest0;
      String string0 = "&TZQ5kS4i82[4Vv!t'[";
      QName qName0 = new QName((String) null, "&TZQ5kS4i82[4Vv!t'[");
      VariableReference variableReference0 = new VariableReference(qName0);
      CoreFunction coreFunction0 = new CoreFunction(1128, expressionArray0);
      EvalContext evalContext0 = null;
      // Undeclared exception!
//      try { 
        coreFunction0.functionSubstring((EvalContext) null);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // Incorrect number of arguments: unknownFunction1128()((org.apache.commons.jxpath.ri.compiler.CoreOperationAdd@0000000001) div (org.apache.commons.jxpath.ri.compiler.CoreOperationAdd@0000000001), org.apache.commons.jxpath.ri.compiler.CoreOperationDivide@0000000002 = org.apache.commons.jxpath.ri.compiler.CoreOperationDivide@0000000002, null, null, null, null, null)
//         //
//         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test275()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[2];
      String string0 = "starts-with";
      Constant constant0 = new Constant("starts-with");
      CoreOperationDivide coreOperationDivide0 = new CoreOperationDivide(constant0, constant0);
      CoreOperationOr coreOperationOr0 = new CoreOperationOr(expressionArray0);
      coreOperationOr0.args = expressionArray0;
      expressionArray0[1] = (Expression) coreOperationOr0;
      CoreFunction coreFunction0 = new CoreFunction(0, expressionArray0);
      EvalContext evalContext0 = null;
      // Undeclared exception!
//      try { 
        coreFunction0.functionSubstring((EvalContext) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test276()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      CoreFunction coreFunction0 = new CoreFunction(0, expressionArray0);
      coreFunction0.toString();
      // Undeclared exception!
//      try { 
        coreFunction0.computeContextDependent();
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.jxpath.ri.compiler.Operation", e);
//      }
  }

  @Test(timeout = 4000)
  public void test277()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(3593, (Expression[]) null);
      EvalContext[] evalContextArray0 = new EvalContext[9];
      evalContextArray0[0] = null;
      evalContextArray0[1] = null;
      evalContextArray0[2] = null;
      evalContextArray0[3] = null;
      evalContextArray0[4] = null;
      evalContextArray0[5] = null;
      evalContextArray0[6] = null;
      evalContextArray0[7] = null;
      evalContextArray0[8] = null;
      UnionContext unionContext0 = new UnionContext((EvalContext) null, evalContextArray0);
      unionContext0.getValue();
      NodeNameTest nodeNameTest0 = new NodeNameTest((QName) null);
      coreFunction0.computeContextDependent();
      // Undeclared exception!
//      try { 
        coreFunction0.getArg1();
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test278()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(0, expressionArray0);
      // Undeclared exception!
//      try { 
        coreFunction0.getArg1();
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 0
//         //
//         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test279()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[4];
      Integer.getInteger("ymeh|");
      Constant constant0 = new Constant((Number) null);
      expressionArray0[0] = (Expression) constant0;
      CoreOperationUnion coreOperationUnion0 = new CoreOperationUnion(expressionArray0);
      expressionArray0[1] = (Expression) coreOperationUnion0;
      CoreOperationUnion coreOperationUnion1 = new CoreOperationUnion(expressionArray0);
      expressionArray0[2] = (Expression) coreOperationUnion1;
      CoreOperationUnion coreOperationUnion2 = new CoreOperationUnion(expressionArray0);
      expressionArray0[3] = (Expression) coreOperationUnion2;
      CoreFunction coreFunction0 = new CoreFunction((-3876), expressionArray0);
      Expression expression0 = coreFunction0.getArg3();
      assertEquals((-3876), coreFunction0.getFunctionCode());
      assertSame(expression0, coreOperationUnion1);
  }

  @Test(timeout = 4000)
  public void test280()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(0, expressionArray0);
      coreFunction0.toString();
      coreFunction0.computeContextDependent();
      coreFunction0.computeContextDependent();
      PredicateContext predicateContext0 = new PredicateContext((EvalContext) null, coreFunction0);
      QName qName0 = new QName("", "");
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
      DescendantContext descendantContext0 = new DescendantContext(predicateContext0, false, nodeNameTest0);
      AttributeContext attributeContext0 = new AttributeContext(descendantContext0, nodeNameTest0);
      PrecedingOrFollowingContext precedingOrFollowingContext0 = new PrecedingOrFollowingContext(attributeContext0, nodeNameTest0, false);
      // Undeclared exception!
//      try { 
        coreFunction0.functionName(precedingOrFollowingContext0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test281()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(4163, (Expression[]) null);
      Step[] stepArray0 = new Step[1];
      Step step0 = new Step((-734), (NodeTest) null, (Expression[]) null);
      step0.toString();
      stepArray0[0] = step0;
      ExpressionPath expressionPath0 = new ExpressionPath(coreFunction0, (Expression[]) null, stepArray0);
      EvalContext evalContext0 = null;
      int int0 = 3;
      NodeTest nodeTest0 = null;
      // Undeclared exception!
//      try { 
        expressionPath0.iterate((EvalContext) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.jxpath.ri.compiler.ExpressionPath", e);
//      }
  }

  @Test(timeout = 4000)
  public void test282()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[2];
      String string0 = "starts-with";
      Constant constant0 = new Constant("starts-with");
      CoreOperationDivide coreOperationDivide0 = new CoreOperationDivide(constant0, constant0);
      CoreOperationGreaterThanOrEqual coreOperationGreaterThanOrEqual0 = new CoreOperationGreaterThanOrEqual(coreOperationDivide0, constant0);
      expressionArray0[0] = (Expression) coreOperationGreaterThanOrEqual0;
      CoreOperationOr coreOperationOr0 = new CoreOperationOr(expressionArray0);
      expressionArray0[1] = (Expression) coreOperationOr0;
      CoreFunction coreFunction0 = new CoreFunction(0, expressionArray0);
      EvalContext evalContext0 = null;
      // Undeclared exception!
      coreFunction0.functionSubstring((EvalContext) null);
  }

  @Test(timeout = 4000)
  public void test283()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[4];
      CoreOperationAnd coreOperationAnd0 = new CoreOperationAnd(expressionArray0);
      CoreOperationGreaterThanOrEqual coreOperationGreaterThanOrEqual0 = new CoreOperationGreaterThanOrEqual(coreOperationAnd0, coreOperationAnd0);
      CoreOperationSubtract coreOperationSubtract0 = new CoreOperationSubtract(coreOperationGreaterThanOrEqual0, coreOperationGreaterThanOrEqual0);
      expressionArray0[0] = (Expression) coreOperationSubtract0;
      Float float0 = new Float(0.0F);
      Constant constant0 = new Constant(float0);
      expressionArray0[1] = (Expression) constant0;
      CoreOperationGreaterThan coreOperationGreaterThan0 = new CoreOperationGreaterThan(expressionArray0[0], coreOperationGreaterThanOrEqual0);
      expressionArray0[2] = (Expression) coreOperationGreaterThan0;
      QName qName0 = new QName("B@(->[Jhk30", "B@(->[Jhk30");
      VariableReference variableReference0 = new VariableReference(qName0);
      expressionArray0[3] = (Expression) variableReference0;
      CoreFunction coreFunction0 = new CoreFunction(2469, expressionArray0);
      coreFunction0.getFunctionCode();
      EvalContext evalContext0 = null;
      // Undeclared exception!
//      try { 
        coreFunction0.functionNamespaceURI((EvalContext) null);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // Incorrect number of arguments: unknownFunction2469()((org.apache.commons.jxpath.ri.compiler.CoreOperationGreaterThanOrEqual@0000000002) - (org.apache.commons.jxpath.ri.compiler.CoreOperationGreaterThanOrEqual@0000000002), 0, org.apache.commons.jxpath.ri.compiler.CoreOperationSubtract@0000000003 > (org.apache.commons.jxpath.ri.compiler.CoreOperationGreaterThanOrEqual@0000000002), $B@(->[Jhk30:B@(->[Jhk30)
//         //
//         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test284()  throws Throwable  {
      Expression[] expressionArray0 = null;
      CoreFunction coreFunction0 = new CoreFunction(771, (Expression[]) null);
      EvalContext evalContext0 = null;
      coreFunction0.functionTrue((EvalContext) null);
      // Undeclared exception!
//      try { 
        coreFunction0.functionName((EvalContext) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test285()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[4];
      ExpressionPath expressionPath0 = new ExpressionPath((Expression) null, expressionArray0, (Step[]) null);
      expressionArray0[0] = (Expression) expressionPath0;
      CoreOperationGreaterThanOrEqual coreOperationGreaterThanOrEqual0 = new CoreOperationGreaterThanOrEqual(expressionArray0[0], (Expression) null);
      expressionArray0[1] = (Expression) coreOperationGreaterThanOrEqual0;
      CoreOperationOr coreOperationOr0 = new CoreOperationOr(expressionArray0);
      expressionArray0[2] = (Expression) coreOperationOr0;
      CoreOperationDivide coreOperationDivide0 = new CoreOperationDivide((Expression) null, expressionPath0);
      expressionArray0[3] = (Expression) coreOperationDivide0;
      CoreFunction coreFunction0 = new CoreFunction((-345), expressionArray0);
      coreFunction0.getArg2();
      String string0 = "w`{h:.(Oey5,[@na`b";
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("w`{h:.(Oey5,[@na`b");
      AncestorContext ancestorContext0 = new AncestorContext((EvalContext) null, false, processingInstructionTest0);
      processingInstructionTest0.toString();
      // Undeclared exception!
//      try { 
        ancestorContext0.getRootContext();
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.jxpath.ri.EvalContext", e);
//      }
  }

  @Test(timeout = 4000)
  public void test286()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[7];
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd(expressionArray0);
      CoreOperationDivide coreOperationDivide0 = new CoreOperationDivide(coreOperationAdd0, coreOperationAdd0);
      expressionArray0[0] = (Expression) coreOperationDivide0;
      NameAttributeTest nameAttributeTest0 = new NameAttributeTest(expressionArray0[0], coreOperationDivide0);
      expressionArray0[1] = (Expression) nameAttributeTest0;
      QName qName0 = new QName((String) null, "&TZQ5kS4i82[4Vv!t'[");
      VariableReference variableReference0 = new VariableReference(qName0);
      expressionArray0[2] = (Expression) variableReference0;
      CoreOperationDivide coreOperationDivide1 = new CoreOperationDivide(nameAttributeTest0, expressionArray0[2]);
      expressionArray0[3] = (Expression) coreOperationDivide1;
      coreOperationDivide1.toString();
      VariableReference variableReference1 = new VariableReference(qName0);
      expressionArray0[4] = (Expression) variableReference1;
      coreOperationDivide0.toString();
      CoreOperationSubtract coreOperationSubtract0 = new CoreOperationSubtract(variableReference1, expressionArray0[2]);
      expressionArray0[5] = (Expression) coreOperationSubtract0;
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual(variableReference0, expressionArray0[0]);
      expressionArray0[6] = (Expression) coreOperationLessThanOrEqual0;
      CoreFunction coreFunction0 = new CoreFunction(1128, expressionArray0);
      EvalContext evalContext0 = null;
      // Undeclared exception!
//      try { 
        coreFunction0.functionSubstringBefore((EvalContext) null);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // Incorrect number of arguments: unknownFunction1128()((org.apache.commons.jxpath.ri.compiler.CoreOperationAdd@0000000001) div (org.apache.commons.jxpath.ri.compiler.CoreOperationAdd@0000000001), org.apache.commons.jxpath.ri.compiler.CoreOperationDivide@0000000002 = org.apache.commons.jxpath.ri.compiler.CoreOperationDivide@0000000002, $&TZQ5kS4i82[4Vv!t'[, (org.apache.commons.jxpath.ri.compiler.NameAttributeTest@0000000003) div org.apache.commons.jxpath.ri.compiler.VariableReference@0000000005, $&TZQ5kS4i82[4Vv!t'[, org.apache.commons.jxpath.ri.compiler.VariableReference@0000000007 - org.apache.commons.jxpath.ri.compiler.VariableReference@0000000005, org.apache.commons.jxpath.ri.compiler.VariableReference@0000000005 <= org.apache.commons.jxpath.ri.compiler.CoreOperationDivide@0000000002)
//         //
//         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test287()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[4];
      CoreOperationMultiply coreOperationMultiply0 = new CoreOperationMultiply((Expression) null, (Expression) null);
      Constant constant0 = new Constant("");
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual(coreOperationMultiply0, constant0);
      Step[] stepArray0 = new Step[7];
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(2234);
      Step step0 = new Step(2234, nodeTypeTest0, expressionArray0);
      stepArray0[0] = step0;
      Step step1 = new Step(1989, nodeTypeTest0, expressionArray0);
      stepArray0[1] = step1;
      Step step2 = new Step(1989, nodeTypeTest0, expressionArray0);
      stepArray0[2] = step2;
      Step step3 = new Step(2234, nodeTypeTest0, expressionArray0);
      stepArray0[3] = step3;
      Step step4 = new Step(2387, nodeTypeTest0, expressionArray0);
      stepArray0[4] = step4;
      Expression[] expressionArray1 = new Expression[5];
      expressionArray1[0] = (Expression) constant0;
      expressionArray1[1] = null;
      expressionArray1[2] = (Expression) coreOperationLessThanOrEqual0;
      CoreOperationNegate coreOperationNegate0 = new CoreOperationNegate(expressionArray1[2]);
      expressionArray1[3] = (Expression) coreOperationNegate0;
      expressionArray1[4] = null;
      Step step5 = new Step(1989, nodeTypeTest0, expressionArray1);
      stepArray0[5] = step5;
      Step step6 = new Step(2387, nodeTypeTest0, (Expression[]) null);
      stepArray0[6] = step6;
      ExpressionPath expressionPath0 = new ExpressionPath(coreOperationLessThanOrEqual0, expressionArray0, stepArray0);
      NameAttributeTest nameAttributeTest0 = new NameAttributeTest(expressionPath0, (Expression) null);
      expressionArray0[0] = (Expression) nameAttributeTest0;
      Long long0 = new Long(1440L);
      Constant constant1 = new Constant(long0);
      expressionArray0[1] = (Expression) constant1;
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual1 = new CoreOperationLessThanOrEqual(expressionArray1[1], expressionArray1[2]);
      expressionArray0[2] = (Expression) coreOperationLessThanOrEqual1;
      CoreOperationOr coreOperationOr0 = new CoreOperationOr(expressionArray0);
      expressionArray0[3] = (Expression) coreOperationOr0;
      CoreFunction coreFunction0 = new CoreFunction(2234, expressionArray0);
      boolean boolean0 = coreFunction0.computeContextDependent();
      assertTrue(boolean0);
      assertEquals(2234, coreFunction0.getFunctionCode());
  }

  @Test(timeout = 4000)
  public void test288()  throws Throwable  {
      int int0 = (-4525);
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction((-4525), expressionArray0);
      EvalContext evalContext0 = null;
      // Undeclared exception!
//      try { 
        coreFunction0.functionNot((EvalContext) null);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // Incorrect number of arguments: unknownFunction-4525()()
//         //
//         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test289()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction((-2930), (Expression[]) null);
      coreFunction0.args = null;
      coreFunction0.toString();
      QName qName0 = new QName("unknownFunction-2930()()", "unknownFunction-2930()()");
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
      DescendantContext descendantContext0 = new DescendantContext((EvalContext) null, false, nodeNameTest0);
      // Undeclared exception!
//      try { 
        coreFunction0.functionStringLength(descendantContext0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.jxpath.ri.axes.DescendantContext", e);
//      }
  }

  @Test(timeout = 4000)
  public void test290()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(293, expressionArray0);
      boolean boolean0 = coreFunction0.computeContextDependent();
      assertFalse(boolean0);
      
      String string0 = coreFunction0.toString();
      assertEquals("unknownFunction293()()", string0);
      
      Step[] stepArray0 = new Step[6];
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest((-2444));
      Step step0 = new Step(639, nodeTypeTest0, expressionArray0);
      stepArray0[0] = step0;
      Step step1 = new Step(2737, nodeTypeTest0, expressionArray0);
      stepArray0[1] = step1;
      Expression[] expressionArray1 = new Expression[0];
      Step step2 = new Step(293, nodeTypeTest0, expressionArray1);
      stepArray0[2] = step2;
      Step step3 = new Step(639, nodeTypeTest0, expressionArray1);
      stepArray0[3] = step3;
      Step step4 = new Step((-2444), nodeTypeTest0, expressionArray1);
      stepArray0[4] = step4;
      Step step5 = new Step(639, nodeTypeTest0, expressionArray1);
      stepArray0[5] = step5;
      ExpressionPath expressionPath0 = new ExpressionPath(coreFunction0, expressionArray0, stepArray0);
      NodeSetContext nodeSetContext0 = new NodeSetContext((EvalContext) null, (NodeSet) null);
      expressionPath0.evalSteps(nodeSetContext0);
      ChildContext childContext0 = new ChildContext((EvalContext) null, nodeTypeTest0, true, true);
      coreFunction0.functionTrue(childContext0);
      assertEquals(293, coreFunction0.getFunctionCode());
  }

  @Test(timeout = 4000)
  public void test291()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(1024, (Expression[]) null);
      QName qName0 = new QName((String) null, "vz2BF_*D=2%mi;0v");
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, "vz2BF_*D=2%mi;0v");
      AncestorContext ancestorContext0 = new AncestorContext((EvalContext) null, false, nodeNameTest0);
      // Undeclared exception!
//      try { 
        coreFunction0.functionNormalizeSpace(ancestorContext0);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // Incorrect number of arguments: unknownFunction1024()()
//         //
//         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test292()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[9];
      Long long0 = new Long(0);
      Constant constant0 = new Constant(long0);
      expressionArray0[0] = (Expression) constant0;
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd(expressionArray0);
      expressionArray0[1] = (Expression) coreOperationAdd0;
      CoreOperationAnd coreOperationAnd0 = new CoreOperationAnd(expressionArray0);
      expressionArray0[2] = (Expression) coreOperationAnd0;
      CoreOperationLessThan coreOperationLessThan0 = new CoreOperationLessThan(constant0, expressionArray0[2]);
      expressionArray0[3] = (Expression) coreOperationLessThan0;
      Step[] stepArray0 = new Step[2];
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(0);
      Step step0 = new Step(0, nodeTypeTest0, expressionArray0);
      stepArray0[0] = step0;
      Step step1 = new Step((-836), nodeTypeTest0, expressionArray0);
      stepArray0[1] = step1;
      LocationPath locationPath0 = new LocationPath(false, stepArray0);
      expressionArray0[4] = (Expression) locationPath0;
      CoreOperationMod coreOperationMod0 = new CoreOperationMod(expressionArray0[2], expressionArray0[4]);
      expressionArray0[5] = (Expression) coreOperationMod0;
      CoreOperationLessThan coreOperationLessThan1 = new CoreOperationLessThan(expressionArray0[1], expressionArray0[2]);
      expressionArray0[6] = (Expression) coreOperationLessThan1;
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual(expressionArray0[5], expressionArray0[0]);
      expressionArray0[7] = (Expression) coreOperationLessThanOrEqual0;
      Constant constant1 = new Constant(long0);
      expressionArray0[8] = (Expression) constant1;
      CoreFunction coreFunction0 = new CoreFunction(0, expressionArray0);
      EvalContext[] evalContextArray0 = new EvalContext[7];
      evalContextArray0[0] = null;
      evalContextArray0[1] = null;
      AncestorContext ancestorContext0 = new AncestorContext(evalContextArray0[0], true, nodeTypeTest0);
      evalContextArray0[2] = (EvalContext) ancestorContext0;
      evalContextArray0[3] = null;
      evalContextArray0[4] = null;
      evalContextArray0[5] = null;
      evalContextArray0[6] = null;
      UnionContext unionContext0 = new UnionContext((EvalContext) null, evalContextArray0);
      // Undeclared exception!
      coreFunction0.functionKey(unionContext0);
  }

  @Test(timeout = 4000)
  public void test293()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(0, (Expression[]) null);
      // Undeclared exception!
//      try { 
        coreFunction0.getArg2();
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test294()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(0, (Expression[]) null);
      JXPathContext jXPathContext0 = JXPathContext.newContext((Object) coreFunction0);
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = new JXPathContextReferenceImpl(jXPathContext0, (Object) null, (Pointer) null);
      EvalContext evalContext0 = jXPathContextReferenceImpl0.getAbsoluteRootContext();
      coreFunction0.computeValue(evalContext0);
      coreFunction0.functionLocalName(evalContext0);
      // Undeclared exception!
//      try { 
        coreFunction0.getArg3();
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test295()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[6];
      Double double0 = new Double(0.0);
      Constant constant0 = new Constant(double0);
      NameAttributeTest nameAttributeTest0 = new NameAttributeTest(constant0, constant0);
      CoreOperationSubtract coreOperationSubtract0 = new CoreOperationSubtract(nameAttributeTest0, constant0);
      Step[] stepArray0 = new Step[4];
      QName qName0 = new QName("ceiling", "local-name");
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, "");
      Step step0 = new Step(0, nodeNameTest0, expressionArray0);
      stepArray0[0] = step0;
      NodeNameTest nodeNameTest1 = new NodeNameTest(qName0, "ceiling");
      Step step1 = new Step(0, nodeNameTest1, expressionArray0);
      stepArray0[1] = step1;
      Step step2 = new Step(0, nodeNameTest0, expressionArray0);
      stepArray0[2] = step2;
      Step step3 = new Step(3293, nodeNameTest1, expressionArray0);
      stepArray0[3] = step3;
      ExpressionPath expressionPath0 = new ExpressionPath(coreOperationSubtract0, expressionArray0, stepArray0);
      expressionArray0[0] = (Expression) expressionPath0;
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual(constant0, nameAttributeTest0);
      expressionArray0[1] = (Expression) coreOperationLessThanOrEqual0;
      Expression[] expressionArray1 = new Expression[2];
      expressionArray1[0] = (Expression) coreOperationSubtract0;
      expressionArray1[1] = (Expression) expressionPath0;
      ExpressionPath expressionPath1 = new ExpressionPath(expressionArray0[0], expressionArray1, stepArray0);
      expressionArray0[2] = (Expression) expressionPath1;
      Expression[] expressionArray2 = new Expression[6];
      expressionArray2[0] = (Expression) coreOperationSubtract0;
      expressionArray2[1] = (Expression) coreOperationLessThanOrEqual0;
      expressionArray2[2] = (Expression) nameAttributeTest0;
      expressionArray2[3] = (Expression) coreOperationLessThanOrEqual0;
      expressionArray2[4] = (Expression) constant0;
      expressionArray2[5] = (Expression) expressionPath0;
      ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, expressionArray2);
      expressionArray0[3] = (Expression) extensionFunction0;
      CoreOperationDivide coreOperationDivide0 = new CoreOperationDivide(extensionFunction0, expressionArray0[0]);
      expressionArray0[4] = (Expression) coreOperationDivide0;
      CoreOperationNotEqual coreOperationNotEqual0 = new CoreOperationNotEqual(expressionArray2[1], expressionArray2[3]);
      CoreOperationGreaterThan coreOperationGreaterThan0 = new CoreOperationGreaterThan(coreOperationSubtract0, coreOperationNotEqual0);
      expressionArray0[5] = (Expression) coreOperationGreaterThan0;
      CoreFunction coreFunction0 = new CoreFunction(0, expressionArray0);
      UnionContext unionContext0 = new UnionContext((EvalContext) null, (EvalContext[]) null);
      // Undeclared exception!
      coreFunction0.functionNumber(unionContext0);
  }

  @Test(timeout = 4000)
  public void test296()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(3593, (Expression[]) null);
      EvalContext[] evalContextArray0 = new EvalContext[9];
      evalContextArray0[0] = null;
      evalContextArray0[1] = null;
      evalContextArray0[2] = null;
      evalContextArray0[3] = null;
      evalContextArray0[4] = null;
      evalContextArray0[5] = null;
      evalContextArray0[6] = null;
      evalContextArray0[7] = null;
      evalContextArray0[8] = null;
      UnionContext unionContext0 = new UnionContext((EvalContext) null, evalContextArray0);
      unionContext0.getValue();
      NodeNameTest nodeNameTest0 = new NodeNameTest((QName) null);
      DescendantContext descendantContext0 = new DescendantContext(unionContext0, false, nodeNameTest0);
      PredicateContext predicateContext0 = new PredicateContext(descendantContext0, coreFunction0);
      predicateContext0.getCurrentPosition();
      // Undeclared exception!
//      try { 
        coreFunction0.functionFloor(predicateContext0);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // Incorrect number of arguments: unknownFunction3593()()
//         //
//         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test297()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction((-786), expressionArray0);
      coreFunction0.getFunctionName();
      // Undeclared exception!
//      try { 
        coreFunction0.getArg2();
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 1
//         //
//         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test298()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction((-1313), (Expression[]) null);
      // Undeclared exception!
//      try { 
        coreFunction0.getArg3();
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test299()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[2];
      CoreOperationOr coreOperationOr0 = new CoreOperationOr(expressionArray0);
      expressionArray0[0] = (Expression) coreOperationOr0;
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd(expressionArray0);
      expressionArray0[1] = (Expression) coreOperationAdd0;
      coreOperationOr0.toString();
      CoreFunction coreFunction0 = new CoreFunction(10, expressionArray0);
      // Undeclared exception!
//      try { 
        coreFunction0.isContextDependent();
//        fail("Expecting exception: StackOverflowError");
      
//      } catch(StackOverflowError e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test300()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(1757, expressionArray0);
      Expression[] expressionArray1 = new Expression[7];
      expressionArray1[0] = (Expression) coreFunction0;
      expressionArray1[1] = (Expression) coreFunction0;
      expressionArray1[2] = (Expression) coreFunction0;
      expressionArray1[3] = (Expression) coreFunction0;
      expressionArray1[4] = (Expression) coreFunction0;
      expressionArray1[5] = (Expression) coreFunction0;
      CoreOperationGreaterThan coreOperationGreaterThan0 = new CoreOperationGreaterThan(expressionArray1[4], coreFunction0);
      expressionArray1[6] = (Expression) coreOperationGreaterThan0;
      Step[] stepArray0 = new Step[5];
      NodeTest nodeTest0 = null;
      Step step0 = new Step(0, (NodeTest) null, expressionArray1);
      stepArray0[0] = step0;
      int int0 = 2887;
      Expression[] expressionArray2 = new Expression[9];
      expressionArray2[0] = (Expression) coreFunction0;
      expressionArray2[1] = (Expression) coreFunction0;
      expressionArray2[2] = (Expression) coreOperationGreaterThan0;
      expressionArray2[3] = (Expression) coreOperationGreaterThan0;
      expressionArray2[4] = (Expression) coreFunction0;
      CoreOperationUnion coreOperationUnion0 = new CoreOperationUnion(expressionArray1);
      expressionArray2[5] = (Expression) coreOperationUnion0;
      // Undeclared exception!
//      try { 
        coreFunction0.getArg2();
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 1
//         //
//         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
//      }
  }
}
