/*
 * This file was automatically generated by EvoSuite
 * Thu Oct 14 05:46:17 GMT 2021
 */

package org.apache.commons.jxpath.ri.compiler;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.text.DecimalFormat;
import java.util.Locale;
import org.apache.commons.jxpath.BasicNodeSet;
import org.apache.commons.jxpath.BasicVariables;
import org.apache.commons.jxpath.IdentityManager;
import org.apache.commons.jxpath.JXPathContext;
import org.apache.commons.jxpath.NodeSet;
import org.apache.commons.jxpath.Pointer;
import org.apache.commons.jxpath.ri.EvalContext;
import org.apache.commons.jxpath.ri.JXPathContextReferenceImpl;
import org.apache.commons.jxpath.ri.NamespaceResolver;
import org.apache.commons.jxpath.ri.QName;
import org.apache.commons.jxpath.ri.axes.AncestorContext;
import org.apache.commons.jxpath.ri.axes.AttributeContext;
import org.apache.commons.jxpath.ri.axes.ChildContext;
import org.apache.commons.jxpath.ri.axes.DescendantContext;
import org.apache.commons.jxpath.ri.axes.InitialContext;
import org.apache.commons.jxpath.ri.axes.NamespaceContext;
import org.apache.commons.jxpath.ri.axes.NodeSetContext;
import org.apache.commons.jxpath.ri.axes.ParentContext;
import org.apache.commons.jxpath.ri.axes.PrecedingOrFollowingContext;
import org.apache.commons.jxpath.ri.axes.PredicateContext;
import org.apache.commons.jxpath.ri.axes.RootContext;
import org.apache.commons.jxpath.ri.axes.SelfContext;
import org.apache.commons.jxpath.ri.axes.UnionContext;
import org.apache.commons.jxpath.ri.compiler.Constant;
import org.apache.commons.jxpath.ri.compiler.CoreFunction;
import org.apache.commons.jxpath.ri.compiler.CoreOperationAdd;
import org.apache.commons.jxpath.ri.compiler.CoreOperationAnd;
import org.apache.commons.jxpath.ri.compiler.CoreOperationDivide;
import org.apache.commons.jxpath.ri.compiler.CoreOperationEqual;
import org.apache.commons.jxpath.ri.compiler.CoreOperationGreaterThan;
import org.apache.commons.jxpath.ri.compiler.CoreOperationGreaterThanOrEqual;
import org.apache.commons.jxpath.ri.compiler.CoreOperationLessThan;
import org.apache.commons.jxpath.ri.compiler.CoreOperationLessThanOrEqual;
import org.apache.commons.jxpath.ri.compiler.CoreOperationMod;
import org.apache.commons.jxpath.ri.compiler.CoreOperationMultiply;
import org.apache.commons.jxpath.ri.compiler.CoreOperationNegate;
import org.apache.commons.jxpath.ri.compiler.CoreOperationNotEqual;
import org.apache.commons.jxpath.ri.compiler.CoreOperationOr;
import org.apache.commons.jxpath.ri.compiler.CoreOperationSubtract;
import org.apache.commons.jxpath.ri.compiler.CoreOperationUnion;
import org.apache.commons.jxpath.ri.compiler.Expression;
import org.apache.commons.jxpath.ri.compiler.ExpressionPath;
import org.apache.commons.jxpath.ri.compiler.ExtensionFunction;
import org.apache.commons.jxpath.ri.compiler.LocationPath;
import org.apache.commons.jxpath.ri.compiler.NameAttributeTest;
import org.apache.commons.jxpath.ri.compiler.NodeNameTest;
import org.apache.commons.jxpath.ri.compiler.NodeTest;
import org.apache.commons.jxpath.ri.compiler.NodeTypeTest;
import org.apache.commons.jxpath.ri.compiler.ProcessingInstructionTest;
import org.apache.commons.jxpath.ri.compiler.Step;
import org.apache.commons.jxpath.ri.compiler.VariableReference;
import org.apache.commons.jxpath.ri.model.NodePointer;
import org.apache.commons.jxpath.ri.model.VariablePointer;
import org.apache.commons.jxpath.ri.model.beans.BeanPointer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class CoreFunction_ESTest extends CoreFunction_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)56;
      byteArray0[1] = (byte)91;
      byteArray0[2] = (byte)9;
      byteArray0[3] = (byte) (-20);
      byteArray0[4] = (byte) (-22);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Constant constant0 = new Constant("b=s*T");
      CoreOperationMod coreOperationMod0 = new CoreOperationMod(constant0, constant0);
      expressionArray0[0] = (Expression) coreOperationMod0;
      CoreFunction coreFunction0 = new CoreFunction(99, expressionArray0);
      QName qName0 = new QName("id", "b=s*T");
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
      coreFunction0.compute((EvalContext) null);
      coreFunction0.computeValue((EvalContext) null);
      SelfContext selfContext0 = new SelfContext((EvalContext) null, nodeNameTest0);
      coreFunction0.getFunctionName();
      coreFunction0.toString();
      coreFunction0.computeValue(selfContext0);
      coreFunction0.compute(selfContext0);
      // Undeclared exception!
//      try { 
        coreFunction0.functionString((EvalContext) null);
//        fail("Expecting exception: ArithmeticException");
      
//      } catch(ArithmeticException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(2414, expressionArray0);
      JXPathContext jXPathContext0 = JXPathContext.newContext((Object) coreFunction0);
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = new JXPathContextReferenceImpl(jXPathContext0, coreFunction0, (Pointer) null);
      QName qName0 = new QName("count");
      NodePointer nodePointer0 = jXPathContextReferenceImpl0.getVariablePointer(qName0);
      RootContext rootContext0 = new RootContext(jXPathContextReferenceImpl0, nodePointer0);
      nodePointer0.clone();
      RootContext rootContext1 = rootContext0.getRootContext();
      rootContext1.getContextNodePointer();
      // Undeclared exception!
//      try { 
        coreFunction0.functionNumber(rootContext1);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // Undefined variable: count
//         //
//         verifyException("org.apache.commons.jxpath.ri.model.VariablePointer$1", e);
//      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      Constant constant0 = new Constant("[k=h8g");
      CoreOperationDivide coreOperationDivide0 = new CoreOperationDivide(constant0, constant0);
      CoreOperationMod coreOperationMod0 = new CoreOperationMod(constant0, coreOperationDivide0);
      CoreOperationMultiply coreOperationMultiply0 = new CoreOperationMultiply(coreOperationMod0, coreOperationDivide0);
      coreOperationMultiply0.isContextDependent();
      CoreOperationGreaterThanOrEqual coreOperationGreaterThanOrEqual0 = new CoreOperationGreaterThanOrEqual(coreOperationMultiply0, coreOperationDivide0);
      expressionArray0[0] = (Expression) coreOperationGreaterThanOrEqual0;
      CoreFunction coreFunction0 = new CoreFunction((-1295), expressionArray0);
      EvalContext evalContext0 = null;
      // Undeclared exception!
//      try { 
        coreFunction0.functionBoolean((EvalContext) null);
//        fail("Expecting exception: ArithmeticException");
      
//      } catch(ArithmeticException e) {
//         //
//         // / by zero
//         //
//         verifyException("org.apache.commons.jxpath.ri.compiler.CoreOperationMod", e);
//      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      Constant constant0 = new Constant("'eF:T6)xY");
      expressionArray0[0] = (Expression) constant0;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      EvalContext evalContext0 = null;
      CoreFunction coreFunction0 = new CoreFunction(24, expressionArray0);
      // Undeclared exception!
//      try { 
        coreFunction0.compute((EvalContext) null);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // Invalid argument type for 'sum': java.lang.String
//         //
//         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Constant constant0 = new Constant("true|d:*bms?:-'hn)=F})8");
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("true|d:*bms?:-'hn)=F})8");
      processingInstructionTest0.toString();
      Constant constant1 = new Constant((String) null);
      CoreOperationEqual coreOperationEqual0 = new CoreOperationEqual(constant1, constant0);
      Expression[] expressionArray0 = new Expression[2];
      expressionArray0[0] = (Expression) constant1;
      expressionArray0[1] = (Expression) coreOperationEqual0;
      CoreFunction coreFunction0 = new CoreFunction((-1), expressionArray0);
      coreFunction0.functionSubstring((EvalContext) null);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[3];
      ExtensionFunction extensionFunction0 = new ExtensionFunction((QName) null, expressionArray0);
      expressionArray0[0] = (Expression) extensionFunction0;
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd(expressionArray0);
      expressionArray0[1] = (Expression) coreOperationAdd0;
      CoreOperationUnion coreOperationUnion0 = new CoreOperationUnion(expressionArray0);
      expressionArray0[2] = (Expression) coreOperationUnion0;
      CoreFunction coreFunction0 = new CoreFunction(2428, expressionArray0);
      Step[] stepArray0 = new Step[1];
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("falsefalse");
      Step step0 = new Step(1467, processingInstructionTest0, expressionArray0);
      stepArray0[0] = step0;
      ExpressionPath expressionPath0 = new ExpressionPath(coreFunction0, expressionArray0, stepArray0);
      EvalContext evalContext0 = expressionPath0.evalSteps((EvalContext) null);
      // Undeclared exception!
//      try { 
        coreFunction0.functionTrue(evalContext0);
//        fail("Expecting exception: StackOverflowError");
      
//      } catch(StackOverflowError e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(2414, expressionArray0);
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl)JXPathContext.newContext((Object) coreFunction0);
      QName qName0 = null;
      RootContext rootContext0 = new RootContext(jXPathContextReferenceImpl0, (NodePointer) null);
      EvalContext[] evalContextArray0 = new EvalContext[7];
      evalContextArray0[0] = (EvalContext) rootContext0;
      evalContextArray0[1] = (EvalContext) rootContext0;
      evalContextArray0[2] = (EvalContext) rootContext0;
      evalContextArray0[3] = (EvalContext) rootContext0;
      evalContextArray0[4] = (EvalContext) rootContext0;
      evalContextArray0[5] = (EvalContext) rootContext0;
      evalContextArray0[6] = (EvalContext) rootContext0;
      UnionContext unionContext0 = new UnionContext(rootContext0, evalContextArray0);
      // Undeclared exception!
//      try { 
        coreFunction0.functionLocalName(unionContext0);
//        fail("Expecting exception: UnsupportedOperationException");
      
//      } catch(UnsupportedOperationException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.jxpath.ri.axes.RootContext", e);
//      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      Constant constant0 = new Constant("'eF:T6)xY");
      expressionArray0[0] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction(24, expressionArray0);
      // Undeclared exception!
//      try { 
        coreFunction0.computeValue((EvalContext) null);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // Invalid argument type for 'sum': java.lang.String
//         //
//         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Constant constant0 = new Constant("`");
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("`");
      processingInstructionTest0.toString();
      Constant constant1 = new Constant("processing-instruction('`')");
      CoreOperationEqual coreOperationEqual0 = new CoreOperationEqual(constant1, constant0);
      Expression[] expressionArray0 = new Expression[3];
      CoreOperationDivide coreOperationDivide0 = new CoreOperationDivide(constant1, constant0);
      expressionArray0[0] = (Expression) coreOperationDivide0;
      expressionArray0[1] = (Expression) coreOperationEqual0;
      expressionArray0[2] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction(17, expressionArray0);
      coreFunction0.computeValue((EvalContext) null);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Constant constant0 = new Constant("|d:*bm?:-AhA=F})8");
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("|d:*bm?:-AhA=F})8");
      processingInstructionTest0.toString();
      Constant constant1 = new Constant((String) null);
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual(constant1, constant0);
      CoreOperationEqual coreOperationEqual0 = new CoreOperationEqual(constant0, coreOperationLessThanOrEqual0);
      CoreOperationDivide coreOperationDivide0 = new CoreOperationDivide(constant1, constant1);
      Expression[] expressionArray0 = new Expression[3];
      expressionArray0[0] = (Expression) coreOperationEqual0;
      expressionArray0[1] = (Expression) constant1;
      expressionArray0[2] = (Expression) coreOperationEqual0;
      CoreFunction coreFunction0 = new CoreFunction(0, expressionArray0);
      coreFunction0.functionSubstring((EvalContext) null);
      // Undeclared exception!
//      try { 
        coreFunction0.functionBoolean((EvalContext) null);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // Incorrect number of arguments: unknownFunction0()(org.apache.commons.jxpath.ri.compiler.Constant@0000000001 = org.apache.commons.jxpath.ri.compiler.CoreOperationLessThanOrEqual@0000000004, 'null', org.apache.commons.jxpath.ri.compiler.Constant@0000000001 = org.apache.commons.jxpath.ri.compiler.CoreOperationLessThanOrEqual@0000000004)
//         //
//         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(1, (Expression[]) null);
      JXPathContext jXPathContext0 = JXPathContext.newContext((Object) coreFunction0);
      JXPathContext jXPathContext1 = JXPathContext.newContext(jXPathContext0, (Object) "xHN?sWDIS~E:R2&");
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = new JXPathContextReferenceImpl(jXPathContext1, "xHN?sWDIS~E:R2&", (Pointer) null);
      QName qName0 = new QName("xHN?sWDIS~E:R2&", "org.apache.commons.jxpath.ri.compiler.CoreOperationSubtract");
      NodePointer nodePointer0 = jXPathContextReferenceImpl0.getVariablePointer(qName0);
      BasicVariables basicVariables0 = new BasicVariables();
      jXPathContextReferenceImpl0.setVariables(basicVariables0);
      RootContext rootContext0 = new RootContext(jXPathContextReferenceImpl0, nodePointer0);
      RootContext rootContext1 = rootContext0.getRootContext();
      // Undeclared exception!
//      try { 
        coreFunction0.compute(rootContext1);
//        fail("Expecting exception: UnsupportedOperationException");
      
//      } catch(UnsupportedOperationException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.jxpath.ri.axes.RootContext", e);
//      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      QName qName0 = new QName(":cR#z", "true|d:*Lm7?:-'hA=F})8");
      ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, expressionArray0);
      expressionArray0[0] = (Expression) extensionFunction0;
      CoreFunction coreFunction0 = new CoreFunction(1389, expressionArray0);
      JXPathContext jXPathContext0 = JXPathContext.newContext((Object) expressionArray0[0]);
      JXPathContext jXPathContext1 = JXPathContext.newContext(jXPathContext0, (Object) expressionArray0[0]);
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = new JXPathContextReferenceImpl(jXPathContext1, coreFunction0, (Pointer) null);
      EvalContext evalContext0 = jXPathContextReferenceImpl0.getAbsoluteRootContext();
      // Undeclared exception!
      coreFunction0.functionNormalizeSpace(evalContext0);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Constant constant0 = new Constant(", ");
      Expression[] expressionArray0 = new Expression[2];
      expressionArray0[0] = (Expression) constant0;
      expressionArray0[1] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction(30, expressionArray0);
      QName qName0 = new QName("]MMSSo-=FTwbi3");
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
      PrecedingOrFollowingContext precedingOrFollowingContext0 = new PrecedingOrFollowingContext((EvalContext) null, nodeNameTest0, true);
      // Undeclared exception!
//      try { 
        coreFunction0.iteratePointers(precedingOrFollowingContext0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.jxpath.ri.EvalContext", e);
//      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Constant constant0 = new Constant("|d:*bm?:-AhA=F})8");
      CoreOperationEqual coreOperationEqual0 = new CoreOperationEqual(constant0, constant0);
      Expression[] expressionArray0 = new Expression[2];
      expressionArray0[0] = (Expression) constant0;
      expressionArray0[1] = (Expression) coreOperationEqual0;
      EvalContext evalContext0 = null;
      CoreFunction coreFunction0 = new CoreFunction(13, expressionArray0);
      Expression[] expressionArray1 = new Expression[0];
      coreOperationEqual0.args = expressionArray1;
      // Undeclared exception!
//      try { 
        coreFunction0.computeValue((EvalContext) null);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Constant constant0 = new Constant("Cannot register namespaces on a sealed NamespaceResolver");
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("Cannot register namespaces on a sealed NamespaceResolver");
      processingInstructionTest0.toString();
      CoreFunction coreFunction0 = new CoreFunction(778, (Expression[]) null);
      QName qName0 = new QName("Cannot register namespaces on a sealed NamespaceResolver", "5nS]Lg08V");
      Locale locale0 = Locale.CANADA_FRENCH;
      NodePointer nodePointer0 = NodePointer.newNodePointer(qName0, coreFunction0, locale0);
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = new JXPathContextReferenceImpl((JXPathContext) null, "processing-instruction('Cannot register namespaces on a sealed NamespaceResolver')", nodePointer0);
      RootContext rootContext0 = new RootContext(jXPathContextReferenceImpl0, nodePointer0);
      EvalContext evalContext0 = rootContext0.getVariableContext(qName0);
      // Undeclared exception!
//      try { 
        coreFunction0.functionStringLength(evalContext0);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // Undefined variable: Cannot register namespaces on a sealed NamespaceResolver:5nS]Lg08V
//         //
//         verifyException("org.apache.commons.jxpath.ri.model.VariablePointer$1", e);
//      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Constant constant0 = new Constant("8hORqf");
      Expression[] expressionArray0 = new Expression[2];
      CoreOperationMod coreOperationMod0 = new CoreOperationMod(constant0, constant0);
      QName qName0 = new QName("true");
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, "");
      NamespaceContext namespaceContext0 = new NamespaceContext((EvalContext) null, nodeNameTest0);
      SelfContext selfContext0 = new SelfContext(namespaceContext0, nodeNameTest0);
      DescendantContext descendantContext0 = new DescendantContext(selfContext0, true, nodeNameTest0);
      constant0.iterate(descendantContext0);
      expressionArray0[0] = (Expression) coreOperationMod0;
      expressionArray0[1] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction(7, expressionArray0);
      // Undeclared exception!
//      try { 
        coreFunction0.functionContains(descendantContext0);
//        fail("Expecting exception: ArithmeticException");
      
//      } catch(ArithmeticException e) {
//         //
//         // / by zero
//         //
//         verifyException("org.apache.commons.jxpath.ri.compiler.CoreOperationMod", e);
//      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Constant constant0 = new Constant(", ");
      Expression[] expressionArray0 = new Expression[2];
      expressionArray0[0] = (Expression) constant0;
      expressionArray0[1] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction(30, expressionArray0);
      // Undeclared exception!
//      try { 
        coreFunction0.computeValue((EvalContext) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Constant constant0 = new Constant("|d:*bm?:-AhA=F})8");
      CoreOperationEqual coreOperationEqual0 = new CoreOperationEqual(constant0, constant0);
      Expression[] expressionArray0 = new Expression[2];
      expressionArray0[0] = (Expression) constant0;
      expressionArray0[1] = (Expression) coreOperationEqual0;
      EvalContext evalContext0 = null;
      CoreFunction coreFunction0 = new CoreFunction(61, expressionArray0);
      QName qName0 = new QName("Canno");
      ChildContext childContext0 = new ChildContext((EvalContext) null, (NodeTest) null, false, false);
      NodePointer nodePointer0 = NodePointer.newNodePointer(qName0, childContext0, (Locale) null);
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = new JXPathContextReferenceImpl((JXPathContext) null, coreFunction0, nodePointer0);
      RootContext rootContext0 = new RootContext(jXPathContextReferenceImpl0, nodePointer0);
      EvalContext evalContext1 = rootContext0.getConstantContext(expressionArray0[0]);
      // Undeclared exception!
//      try { 
        coreFunction0.functionKey(evalContext1);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // Cannot find an element by key - no KeyManager has been specified
//         //
//         verifyException("org.apache.commons.jxpath.JXPathContext", e);
//      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      Step[] stepArray0 = new Step[6];
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("processing-instruction('/?y6S]B*E9LoU!')true");
      Step step0 = new Step(2228, processingInstructionTest0, expressionArray0);
      stepArray0[0] = step0;
      Step step1 = new Step(1599, processingInstructionTest0, expressionArray0);
      stepArray0[1] = step1;
      Step step2 = new Step(2228, processingInstructionTest0, expressionArray0);
      stepArray0[2] = step2;
      Step step3 = new Step(1599, processingInstructionTest0, expressionArray0);
      stepArray0[3] = step3;
      Step step4 = new Step((-2052), processingInstructionTest0, expressionArray0);
      stepArray0[4] = step4;
      Step step5 = new Step(2228, processingInstructionTest0, expressionArray0);
      stepArray0[5] = step5;
      LocationPath locationPath0 = new LocationPath(false, stepArray0);
      expressionArray0[0] = (Expression) locationPath0;
      CoreFunction coreFunction0 = new CoreFunction(28, expressionArray0);
      // Undeclared exception!
//      try { 
        coreFunction0.compute((EvalContext) null);
//        fail("Expecting exception: StackOverflowError");
      
//      } catch(StackOverflowError e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[2];
      Step[] stepArray0 = new Step[5];
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("proce");
      Step step0 = new Step(10, processingInstructionTest0, expressionArray0);
      stepArray0[0] = step0;
      Step step1 = new Step(10, processingInstructionTest0, expressionArray0);
      stepArray0[1] = step1;
      Step step2 = new Step(18, processingInstructionTest0, expressionArray0);
      stepArray0[2] = step2;
      Step step3 = new Step(18, processingInstructionTest0, expressionArray0);
      stepArray0[3] = step3;
      Step step4 = new Step(10, processingInstructionTest0, (Expression[]) null);
      stepArray0[4] = step4;
      LocationPath locationPath0 = new LocationPath(false, stepArray0);
      expressionArray0[0] = (Expression) locationPath0;
      LocationPath locationPath1 = new LocationPath(false, stepArray0);
      ExpressionPath expressionPath0 = new ExpressionPath(locationPath1, (Expression[]) null, stepArray0);
      expressionArray0[1] = (Expression) expressionPath0;
      CoreFunction coreFunction0 = new CoreFunction(10, expressionArray0);
      ParentContext parentContext0 = new ParentContext((EvalContext) null, processingInstructionTest0);
      AncestorContext ancestorContext0 = new AncestorContext(parentContext0, false, processingInstructionTest0);
      EvalContext evalContext0 = expressionPath0.evalSteps(ancestorContext0);
      NodeSetContext nodeSetContext0 = new NodeSetContext(evalContext0, (NodeSet) null);
      // Undeclared exception!
//      try { 
        coreFunction0.functionNot(nodeSetContext0);
//        fail("Expecting exception: StackOverflowError");
      
//      } catch(StackOverflowError e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      EvalContext evalContext0 = null;
      Expression[] expressionArray0 = new Expression[1];
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)56;
      byteArray0[1] = (byte)91;
      byteArray0[2] = (byte)9;
      byteArray0[3] = (byte) (-20);
      byteArray0[4] = (byte) (-22);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Constant constant0 = new Constant("b=s*T");
      CoreOperationMod coreOperationMod0 = new CoreOperationMod(constant0, constant0);
      expressionArray0[0] = (Expression) coreOperationMod0;
      CoreFunction coreFunction0 = new CoreFunction(22, expressionArray0);
      QName qName0 = new QName("id", "b=s*T");
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
      // Undeclared exception!
//      try { 
        coreFunction0.compute((EvalContext) null);
//        fail("Expecting exception: ArithmeticException");
      
//      } catch(ArithmeticException e) {
//         //
//         // / by zero
//         //
//         verifyException("org.apache.commons.jxpath.ri.compiler.CoreOperationMod", e);
//      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Constant constant0 = new Constant("|d:*bm?:-AhA=F})8");
      CoreOperationEqual coreOperationEqual0 = new CoreOperationEqual(constant0, constant0);
      Expression[] expressionArray0 = new Expression[1];
      expressionArray0[0] = (Expression) constant0;
      coreOperationEqual0.args = expressionArray0;
      constant0.toString();
      Expression[] expressionArray1 = new Expression[2];
      expressionArray1[0] = (Expression) constant0;
      expressionArray1[1] = (Expression) coreOperationEqual0;
      EvalContext evalContext0 = null;
      CoreFunction coreFunction0 = new CoreFunction(61, expressionArray1);
      // Undeclared exception!
//      try { 
        coreFunction0.functionSubstringAfter((EvalContext) null);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      Constant constant0 = new Constant("4");
      expressionArray0[0] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction((-27), expressionArray0);
      JXPathContext jXPathContext0 = JXPathContext.newContext((Object) "4");
      NodeNameTest nodeNameTest0 = new NodeNameTest((QName) null);
      NamespaceContext namespaceContext0 = new NamespaceContext((EvalContext) null, nodeNameTest0);
      NodePointer nodePointer0 = NodePointer.newChildNodePointer((NodePointer) null, (QName) null, namespaceContext0);
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = new JXPathContextReferenceImpl(jXPathContext0, (Object) null, nodePointer0);
      EvalContext evalContext0 = jXPathContextReferenceImpl0.getAbsoluteRootContext();
      coreFunction0.functionLang(evalContext0);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[3];
      Constant constant0 = new Constant((String) null);
      expressionArray0[0] = (Expression) constant0;
      Step[] stepArray0 = new Step[0];
      LocationPath locationPath0 = new LocationPath(true, stepArray0);
      expressionArray0[1] = (Expression) locationPath0;
      ExpressionPath expressionPath0 = new ExpressionPath(constant0, expressionArray0, stepArray0);
      expressionArray0[2] = (Expression) expressionPath0;
      CoreFunction coreFunction0 = new CoreFunction(8, expressionArray0);
      // Undeclared exception!
//      try { 
        coreFunction0.compute((EvalContext) null);
//        fail("Expecting exception: StackOverflowError");
      
//      } catch(StackOverflowError e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      Constant constant0 = new Constant("contains");
      expressionArray0[0] = (Expression) constant0;
      Expression[] expressionArray1 = new Expression[2];
      expressionArray1[0] = (Expression) constant0;
      expressionArray1[1] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction(30, expressionArray1);
      coreFunction0.computeContextDependent();
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Constant constant0 = new Constant("|d:*bm?:-AhA=F})8");
      CoreOperationEqual coreOperationEqual0 = new CoreOperationEqual(constant0, constant0);
      Expression[] expressionArray0 = new Expression[0];
      coreOperationEqual0.args = expressionArray0;
      Expression[] expressionArray1 = new Expression[2];
      expressionArray1[0] = (Expression) constant0;
      expressionArray1[1] = (Expression) coreOperationEqual0;
      EvalContext evalContext0 = null;
      CoreFunction coreFunction0 = new CoreFunction((-493), expressionArray1);
      // Undeclared exception!
//      try { 
        coreFunction0.functionConcat((EvalContext) null);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("!_cW!WMs|&");
      Expression[] expressionArray0 = new Expression[1];
      CoreFunction coreFunction0 = new CoreFunction((-2134), (Expression[]) null);
      expressionArray0[0] = (Expression) coreFunction0;
      CoreFunction coreFunction1 = new CoreFunction((-4085), expressionArray0);
      coreFunction1.functionCount((EvalContext) null);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Constant constant0 = new Constant("`");
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("`");
      processingInstructionTest0.toString();
      Constant constant1 = new Constant("processing-instruction('`')");
      Expression[] expressionArray0 = new Expression[7];
      expressionArray0[1] = (Expression) constant0;
      QName qName0 = new QName("processing-instruction('`')", "xR&kcdJ.q%");
      ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, expressionArray0);
      expressionArray0[2] = (Expression) extensionFunction0;
      expressionArray0[4] = (Expression) constant0;
      expressionArray0[5] = (Expression) constant0;
      expressionArray0[6] = (Expression) constant1;
      CoreFunction coreFunction0 = new CoreFunction(82, expressionArray0);
      // Undeclared exception!
      coreFunction0.functionSum((EvalContext) null);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      Constant constant0 = new Constant("GZ1N) gV[CQ$c0_D_a$");
      expressionArray0[0] = (Expression) constant0;
      Expression[] expressionArray1 = new Expression[3];
      expressionArray1[0] = (Expression) constant0;
      expressionArray1[1] = (Expression) constant0;
      expressionArray1[2] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction(17, expressionArray1);
      coreFunction0.computeValue((EvalContext) null);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      Constant constant0 = new Constant("");
      expressionArray0[0] = (Expression) constant0;
      BasicNodeSet basicNodeSet0 = new BasicNodeSet();
      NodeSetContext nodeSetContext0 = new NodeSetContext((EvalContext) null, basicNodeSet0);
      Locale locale0 = Locale.ITALY;
      CoreFunction coreFunction0 = new CoreFunction(9, expressionArray0);
      coreFunction0.functionLang(nodeSetContext0);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[7];
      CoreFunction coreFunction0 = new CoreFunction(22, expressionArray0);
      Expression[] expressionArray1 = new Expression[6];
      expressionArray1[0] = (Expression) coreFunction0;
      expressionArray1[1] = (Expression) coreFunction0;
      expressionArray1[2] = (Expression) coreFunction0;
      expressionArray1[3] = (Expression) coreFunction0;
      expressionArray1[4] = (Expression) coreFunction0;
      expressionArray1[5] = (Expression) coreFunction0;
      CoreFunction coreFunction1 = new CoreFunction(21, expressionArray1);
      // Undeclared exception!
//      try { 
        coreFunction1.computeValue((EvalContext) null);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // Incorrect number of arguments: false(lang(null, null, null, null, null, null, null), lang(null, null, null, null, null, null, null), lang(null, null, null, null, null, null, null), lang(null, null, null, null, null, null, null), lang(null, null, null, null, null, null, null), lang(null, null, null, null, null, null, null))
//         //
//         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[9];
      Step[] stepArray0 = new Step[2];
      QName qName0 = new QName("%u|d[`5ef#EEugAyh", "A root element cannot be added before the DocType");
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, "A root element cannot be added before the DocType");
      Step step0 = new Step(1039, nodeNameTest0, expressionArray0);
      stepArray0[0] = step0;
      NodeNameTest nodeNameTest1 = new NodeNameTest(qName0, " - no such property");
      Step step1 = new Step(47, nodeNameTest1, expressionArray0);
      stepArray0[1] = step1;
      LocationPath locationPath0 = new LocationPath(true, stepArray0);
      expressionArray0[0] = (Expression) locationPath0;
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual(locationPath0, expressionArray0[0]);
      CoreOperationMultiply coreOperationMultiply0 = new CoreOperationMultiply(locationPath0, coreOperationLessThanOrEqual0);
      expressionArray0[1] = (Expression) coreOperationMultiply0;
      CoreOperationOr coreOperationOr0 = new CoreOperationOr(expressionArray0);
      expressionArray0[2] = (Expression) coreOperationOr0;
      LocationPath locationPath1 = new LocationPath(true, stepArray0);
      expressionArray0[3] = (Expression) locationPath1;
      NameAttributeTest nameAttributeTest0 = new NameAttributeTest(locationPath1, expressionArray0[3]);
      expressionArray0[4] = (Expression) nameAttributeTest0;
      VariableReference variableReference0 = new VariableReference(qName0);
      expressionArray0[5] = (Expression) variableReference0;
      CoreOperationNegate coreOperationNegate0 = new CoreOperationNegate(coreOperationOr0);
      expressionArray0[6] = (Expression) coreOperationNegate0;
      LocationPath locationPath2 = new LocationPath(true, stepArray0);
      expressionArray0[7] = (Expression) locationPath2;
      VariableReference variableReference1 = new VariableReference(qName0);
      expressionArray0[8] = (Expression) variableReference1;
      CoreFunction coreFunction0 = new CoreFunction(117, expressionArray0);
      // Undeclared exception!
//      try { 
        coreFunction0.functionNull((EvalContext) null);
//        fail("Expecting exception: StackOverflowError");
      
//      } catch(StackOverflowError e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(8, expressionArray0);
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl)JXPathContext.newContext((Object) coreFunction0);
      DecimalFormat decimalFormat0 = new DecimalFormat();
      Locale locale0 = Locale.PRC;
      BeanPointer beanPointer0 = (BeanPointer)NodePointer.newNodePointer((QName) null, jXPathContextReferenceImpl0, locale0);
      RootContext rootContext0 = new RootContext(jXPathContextReferenceImpl0, beanPointer0);
      coreFunction0.functionNamespaceURI(rootContext0);
      coreFunction0.isContextDependent();
      coreFunction0.functionNumber(rootContext0);
      // Undeclared exception!
//      try { 
        coreFunction0.functionPosition(rootContext0);
//        fail("Expecting exception: UnsupportedOperationException");
      
//      } catch(UnsupportedOperationException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.jxpath.ri.axes.RootContext", e);
//      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[8];
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd(expressionArray0);
      expressionArray0[0] = (Expression) coreOperationAdd0;
      CoreOperationDivide coreOperationDivide0 = new CoreOperationDivide(coreOperationAdd0, coreOperationAdd0);
      expressionArray0[1] = (Expression) coreOperationDivide0;
      Double double0 = new Double((-1898.0));
      Constant constant0 = new Constant(double0);
      CoreOperationEqual coreOperationEqual0 = new CoreOperationEqual(coreOperationDivide0, constant0);
      expressionArray0[2] = (Expression) coreOperationEqual0;
      NameAttributeTest nameAttributeTest0 = new NameAttributeTest(expressionArray0[1], constant0);
      expressionArray0[3] = (Expression) nameAttributeTest0;
      CoreOperationLessThan coreOperationLessThan0 = new CoreOperationLessThan(constant0, expressionArray0[3]);
      nameAttributeTest0.args = expressionArray0;
      expressionArray0[4] = (Expression) coreOperationLessThan0;
      CoreOperationGreaterThan coreOperationGreaterThan0 = new CoreOperationGreaterThan(coreOperationLessThan0, expressionArray0[1]);
      expressionArray0[5] = (Expression) coreOperationGreaterThan0;
      Step[] stepArray0 = new Step[1];
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(73);
      Step step0 = new Step((-2213), nodeTypeTest0, expressionArray0);
      stepArray0[0] = step0;
      LocationPath locationPath0 = new LocationPath(true, stepArray0);
      expressionArray0[6] = (Expression) locationPath0;
      QName qName0 = new QName("?");
      ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, expressionArray0);
      expressionArray0[7] = (Expression) extensionFunction0;
      CoreFunction coreFunction0 = new CoreFunction(58, expressionArray0);
      JXPathContext jXPathContext0 = JXPathContext.newContext((Object) constant0);
      Locale locale0 = Locale.FRANCE;
      NodePointer nodePointer0 = NodePointer.newNodePointer(qName0, nameAttributeTest0, locale0);
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = new JXPathContextReferenceImpl(jXPathContext0, "?", nodePointer0);
      RootContext rootContext0 = new RootContext(jXPathContextReferenceImpl0, nodePointer0);
      // Undeclared exception!
      coreFunction0.functionBoolean(rootContext0);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Constant constant0 = new Constant("4");
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("4");
      processingInstructionTest0.toString();
      Constant constant1 = new Constant("processing-instruction('4')");
      Expression[] expressionArray0 = new Expression[3];
      expressionArray0[0] = (Expression) constant0;
      expressionArray0[1] = (Expression) constant1;
      CoreOperationGreaterThanOrEqual coreOperationGreaterThanOrEqual0 = new CoreOperationGreaterThanOrEqual(expressionArray0[1], expressionArray0[1]);
      expressionArray0[2] = (Expression) coreOperationGreaterThanOrEqual0;
      CoreFunction coreFunction0 = new CoreFunction(17, expressionArray0);
      AttributeContext attributeContext0 = new AttributeContext((EvalContext) null, processingInstructionTest0);
      coreFunction0.computeValue(attributeContext0);
      coreFunction0.getArg1();
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Constant constant0 = new Constant(" ");
      CoreOperationEqual coreOperationEqual0 = new CoreOperationEqual(constant0, constant0);
      Expression[] expressionArray0 = new Expression[2];
      expressionArray0[0] = (Expression) constant0;
      expressionArray0[1] = (Expression) coreOperationEqual0;
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest((-753));
      AttributeContext attributeContext0 = new AttributeContext((EvalContext) null, nodeTypeTest0);
      coreOperationEqual0.iterate(attributeContext0);
      CoreFunction coreFunction0 = new CoreFunction((-203), expressionArray0);
      coreFunction0.functionSubstringBefore((EvalContext) null);
      // Undeclared exception!
//      try { 
        coreFunction0.functionKey(attributeContext0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.jxpath.ri.EvalContext", e);
//      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[2];
      Step[] stepArray0 = new Step[5];
      QName qName0 = new QName("Wo^\u0006u7UT/oY/. ozT");
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
      Step step0 = new Step(2493, nodeNameTest0, expressionArray0);
      stepArray0[0] = step0;
      Step step1 = new Step(8, nodeNameTest0, expressionArray0);
      stepArray0[1] = step1;
      Step step2 = new Step(1453, nodeNameTest0, expressionArray0);
      stepArray0[2] = step2;
      Step step3 = new Step(2493, nodeNameTest0, expressionArray0);
      stepArray0[3] = step3;
      Expression[] expressionArray1 = new Expression[1];
      CoreOperationOr coreOperationOr0 = new CoreOperationOr(expressionArray1);
      CoreOperationSubtract coreOperationSubtract0 = new CoreOperationSubtract(coreOperationOr0, coreOperationOr0);
      CoreOperationNotEqual coreOperationNotEqual0 = new CoreOperationNotEqual(coreOperationOr0, coreOperationSubtract0);
      expressionArray1[0] = (Expression) coreOperationNotEqual0;
      Step step4 = new Step(32, nodeNameTest0, expressionArray1);
      step0.toString();
      stepArray0[4] = step4;
      LocationPath locationPath0 = new LocationPath(false, stepArray0);
      ExpressionPath expressionPath0 = new ExpressionPath(locationPath0, expressionArray1, stepArray0);
      expressionArray0[0] = (Expression) expressionPath0;
      Constant constant0 = new Constant("P;YD`%");
      expressionArray0[1] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction(8, expressionArray0);
      EvalContext evalContext0 = null;
      // Undeclared exception!
//      try { 
        coreFunction0.functionCount((EvalContext) null);
//        fail("Expecting exception: StackOverflowError");
      
//      } catch(StackOverflowError e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      EvalContext evalContext0 = null;
      Expression[] expressionArray0 = new Expression[1];
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)56;
      byteArray0[1] = (byte)91;
      byteArray0[2] = (byte)9;
      byteArray0[3] = (byte) (-20);
      byteArray0[4] = (byte) (-22);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Constant constant0 = new Constant("b=s*T");
      CoreOperationMod coreOperationMod0 = new CoreOperationMod(constant0, constant0);
      expressionArray0[0] = (Expression) coreOperationMod0;
      CoreFunction coreFunction0 = new CoreFunction(22, expressionArray0);
      QName qName0 = new QName("id", "b=s*T");
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
      SelfContext selfContext0 = new SelfContext((EvalContext) null, nodeNameTest0);
      // Undeclared exception!
//      try { 
        coreFunction0.computeValue(selfContext0);
//        fail("Expecting exception: ArithmeticException");
      
//      } catch(ArithmeticException e) {
//         //
//         // / by zero
//         //
//         verifyException("org.apache.commons.jxpath.ri.compiler.CoreOperationMod", e);
//      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Constant constant0 = new Constant("Cannot register namespaces on a sealed NamespaceResolver");
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("Cannot register namespaces on a sealed NamespaceResolver");
      Constant constant1 = new Constant("Cannot register namespaces on a sealed NamespaceResolver");
      Expression[] expressionArray0 = new Expression[6];
      expressionArray0[0] = (Expression) constant1;
      Step[] stepArray0 = new Step[6];
      Step step0 = new Step((-1082), processingInstructionTest0, expressionArray0);
      stepArray0[2] = step0;
      stepArray0[3] = stepArray0[1];
      Step step1 = new Step((-1082), processingInstructionTest0, expressionArray0);
      stepArray0[4] = step1;
      Step step2 = new Step((-785), processingInstructionTest0, expressionArray0);
      stepArray0[5] = step2;
      LocationPath locationPath0 = new LocationPath(true, stepArray0);
      expressionArray0[1] = (Expression) locationPath0;
      CoreOperationLessThan coreOperationLessThan0 = new CoreOperationLessThan(expressionArray0[0], constant0);
      expressionArray0[2] = (Expression) coreOperationLessThan0;
      expressionArray0[3] = (Expression) constant1;
      expressionArray0[4] = (Expression) constant0;
      expressionArray0[5] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction((-785), expressionArray0);
      // Undeclared exception!
      coreFunction0.functionLast((EvalContext) null);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(8, expressionArray0);
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl)JXPathContext.newContext((Object) coreFunction0);
      DecimalFormat decimalFormat0 = new DecimalFormat();
      Locale locale0 = Locale.PRC;
      InitialContext initialContext0 = (InitialContext)jXPathContextReferenceImpl0.getAbsoluteRootContext();
      coreFunction0.functionLocalName(initialContext0);
      coreFunction0.functionPosition(initialContext0);
      coreFunction0.functionNumber(initialContext0);
      coreFunction0.functionLast(initialContext0);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(8, expressionArray0);
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl)JXPathContext.newContext((Object) coreFunction0);
      DecimalFormat decimalFormat0 = new DecimalFormat();
      Locale locale0 = Locale.PRC;
      BeanPointer beanPointer0 = (BeanPointer)NodePointer.newNodePointer((QName) null, jXPathContextReferenceImpl0, locale0);
      RootContext rootContext0 = new RootContext(jXPathContextReferenceImpl0, beanPointer0);
      coreFunction0.computeValue(rootContext0);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(1, expressionArray0);
      QName qName0 = new QName("org.jdom.DocType", "org.jdom.DocType");
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "org.jdom.DocType");
      NamespaceContext namespaceContext0 = new NamespaceContext((EvalContext) null, nodeNameTest0);
      coreFunction0.computeValue(namespaceContext0);
      coreFunction0.computeValue(namespaceContext0);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      Expression[] expressionArray1 = new Expression[3];
      CoreFunction coreFunction0 = new CoreFunction(9, expressionArray0);
      Expression expression0 = coreFunction0.getArg1();
      expressionArray1[0] = null;
      Step[] stepArray0 = new Step[5];
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(9);
      Step step0 = new Step(38, nodeTypeTest0, expressionArray0);
      stepArray0[0] = step0;
      Step step1 = new Step(38, nodeTypeTest0, expressionArray0);
      stepArray0[1] = step1;
      Step step2 = new Step(9, nodeTypeTest0, expressionArray0);
      stepArray0[2] = step2;
      Step step3 = new Step((-1870), nodeTypeTest0, expressionArray1);
      stepArray0[3] = step3;
      Step step4 = new Step(9, nodeTypeTest0, expressionArray0);
      stepArray0[4] = step4;
      LocationPath locationPath0 = new LocationPath(false, stepArray0);
      expressionArray1[1] = (Expression) locationPath0;
      NameAttributeTest nameAttributeTest0 = new NameAttributeTest((Expression) null, expression0);
      expressionArray1[2] = (Expression) nameAttributeTest0;
      CoreFunction coreFunction1 = new CoreFunction(38, expressionArray1);
      CoreFunction coreFunction2 = new CoreFunction(1, expressionArray1);
      // Undeclared exception!
      coreFunction2.functionKey((EvalContext) null);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Constant constant0 = new Constant("Cannot register namespaces on a sealed NamespaceResolver");
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("Cannot register namespaces on a sealed NamespaceResolver");
      processingInstructionTest0.toString();
      Expression[] expressionArray0 = new Expression[1];
      expressionArray0[0] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction((-760), expressionArray0);
      coreFunction0.functionNormalizeSpace((EvalContext) null);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Constant constant0 = new Constant("FPGe8v($E%I");
      CoreFunction coreFunction0 = new CoreFunction(7, (Expression[]) null);
      coreFunction0.isContextDependent();
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[9];
      Step[] stepArray0 = new Step[2];
      QName qName0 = new QName("%u|d[`5ef#EEugAyh", "A root element cannot be added before the DocType");
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, "A root element cannot be added before the DocType");
      Step step0 = new Step(1039, nodeNameTest0, expressionArray0);
      stepArray0[0] = step0;
      NodeNameTest nodeNameTest1 = new NodeNameTest(qName0, " - no such property");
      Step step1 = new Step(47, nodeNameTest1, expressionArray0);
      stepArray0[1] = step1;
      LocationPath locationPath0 = new LocationPath(true, stepArray0);
      expressionArray0[0] = (Expression) locationPath0;
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual(locationPath0, expressionArray0[0]);
      CoreOperationMultiply coreOperationMultiply0 = new CoreOperationMultiply(locationPath0, coreOperationLessThanOrEqual0);
      expressionArray0[1] = (Expression) coreOperationMultiply0;
      CoreOperationOr coreOperationOr0 = new CoreOperationOr(expressionArray0);
      expressionArray0[2] = (Expression) coreOperationOr0;
      LocationPath locationPath1 = new LocationPath(true, stepArray0);
      expressionArray0[3] = (Expression) locationPath1;
      NameAttributeTest nameAttributeTest0 = new NameAttributeTest(locationPath1, expressionArray0[3]);
      expressionArray0[4] = (Expression) nameAttributeTest0;
      VariableReference variableReference0 = new VariableReference(qName0);
      expressionArray0[5] = (Expression) variableReference0;
      CoreOperationNegate coreOperationNegate0 = new CoreOperationNegate(coreOperationOr0);
      expressionArray0[6] = (Expression) coreOperationNegate0;
      LocationPath locationPath2 = new LocationPath(true, stepArray0);
      expressionArray0[7] = (Expression) locationPath2;
      VariableReference variableReference1 = new VariableReference(qName0);
      expressionArray0[8] = (Expression) variableReference1;
      CoreFunction coreFunction0 = new CoreFunction(117, expressionArray0);
      // Undeclared exception!
//      try { 
        coreFunction0.functionTranslate((EvalContext) null);
//        fail("Expecting exception: StackOverflowError");
      
//      } catch(StackOverflowError e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      Constant constant0 = new Constant("4");
      expressionArray0[0] = (Expression) constant0;
      EvalContext evalContext0 = null;
      CoreFunction coreFunction0 = new CoreFunction(0, expressionArray0);
      Locale locale0 = new Locale("4", "Exception trying to set value with xpath ");
      JXPathContext jXPathContext0 = JXPathContext.newContext((Object) locale0);
      JXPathContext jXPathContext1 = JXPathContext.newContext(jXPathContext0, (Object) "4");
      QName qName0 = new QName("4");
      Locale locale1 = Locale.TRADITIONAL_CHINESE;
      NodePointer nodePointer0 = NodePointer.newNodePointer(qName0, jXPathContext1, locale1);
      NodePointer nodePointer1 = NodePointer.newChildNodePointer(nodePointer0, qName0, "4");
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = new JXPathContextReferenceImpl(jXPathContext1, constant0, nodePointer1);
      RootContext rootContext0 = new RootContext(jXPathContextReferenceImpl0, nodePointer1);
      // Undeclared exception!
//      try { 
        coreFunction0.functionID(rootContext0);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // Cannot find an element by ID - no IdentityManager has been specified
//         //
//         verifyException("org.apache.commons.jxpath.JXPathContext", e);
//      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      Constant constant0 = new Constant("FP]e8a.($EmIY");
      expressionArray0[0] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction(0, expressionArray0);
      coreFunction0.computeContextDependent();
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = mock(JXPathContextReferenceImpl.class, new ViolatedAssumptionAnswer());
      doReturn((IdentityManager) null).when(jXPathContextReferenceImpl0).getIdentityManager();
      doReturn((Locale) null).when(jXPathContextReferenceImpl0).getLocale();
      doReturn((NamespaceResolver) null, (NamespaceResolver) null).when(jXPathContextReferenceImpl0).getNamespaceResolver();
      QName qName0 = new QName("bNZQ.", "bNZQ.");
      Locale locale0 = Locale.FRANCE;
      NodePointer nodePointer0 = NodePointer.newNodePointer(qName0, "FP]e8a.($EmIY", locale0);
      RootContext rootContext0 = new RootContext(jXPathContextReferenceImpl0, nodePointer0);
      JXPathContext jXPathContext0 = rootContext0.getJXPathContext();
      JXPathContextReferenceImpl jXPathContextReferenceImpl1 = new JXPathContextReferenceImpl(jXPathContext0, qName0, nodePointer0);
      EvalContext evalContext0 = jXPathContextReferenceImpl1.getAbsoluteRootContext();
      // Undeclared exception!
//      try { 
        coreFunction0.functionID(evalContext0);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // Cannot find an element by ID - no IdentityManager has been specified
//         //
//         verifyException("org.apache.commons.jxpath.JXPathContext", e);
//      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[3];
      QName qName0 = new QName("d*");
      VariableReference variableReference0 = new VariableReference(qName0);
      CoreOperationSubtract coreOperationSubtract0 = new CoreOperationSubtract(variableReference0, variableReference0);
      Constant constant0 = new Constant("d*");
      CoreOperationDivide coreOperationDivide0 = new CoreOperationDivide(coreOperationSubtract0, constant0);
      CoreOperationGreaterThan coreOperationGreaterThan0 = new CoreOperationGreaterThan(coreOperationDivide0, coreOperationSubtract0);
      expressionArray0[0] = (Expression) coreOperationGreaterThan0;
      CoreOperationAnd coreOperationAnd0 = new CoreOperationAnd(expressionArray0);
      CoreOperationEqual coreOperationEqual0 = new CoreOperationEqual(variableReference0, coreOperationAnd0);
      expressionArray0[1] = (Expression) coreOperationEqual0;
      CoreOperationLessThan coreOperationLessThan0 = new CoreOperationLessThan(coreOperationEqual0, expressionArray0[0]);
      CoreOperationGreaterThanOrEqual coreOperationGreaterThanOrEqual0 = new CoreOperationGreaterThanOrEqual(coreOperationLessThan0, coreOperationLessThan0);
      expressionArray0[2] = (Expression) coreOperationGreaterThanOrEqual0;
      CoreFunction coreFunction0 = new CoreFunction((-2626), expressionArray0);
      // Undeclared exception!
//      try { 
        coreFunction0.functionTranslate((EvalContext) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.jxpath.ri.compiler.VariableReference", e);
//      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Constant constant0 = new Constant("Cannot register namespaces on a sealed NamespaceResolver");
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("Cannot register namespaces on a sealed NamespaceResolver");
      processingInstructionTest0.toString();
      Constant constant1 = new Constant("processing-instruction('Cannot register namespaces on a sealed NamespaceResolver')");
      CoreOperationEqual coreOperationEqual0 = new CoreOperationEqual(constant1, constant0);
      EvalContext evalContext0 = null;
      Expression[] expressionArray0 = new Expression[4];
      Step[] stepArray0 = new Step[2];
      Step step0 = new Step(1221, (NodeTest) null, expressionArray0);
      stepArray0[0] = step0;
      Step step1 = new Step(1221, (NodeTest) null, expressionArray0);
      stepArray0[1] = step1;
      LocationPath locationPath0 = new LocationPath(false, stepArray0);
      expressionArray0[0] = (Expression) locationPath0;
      expressionArray0[1] = (Expression) coreOperationEqual0;
      expressionArray0[2] = (Expression) coreOperationEqual0;
      expressionArray0[3] = (Expression) constant1;
      CoreFunction coreFunction0 = new CoreFunction(500, expressionArray0);
      // Undeclared exception!
//      try { 
        coreFunction0.functionLang((EvalContext) null);
//        fail("Expecting exception: StackOverflowError");
      
//      } catch(StackOverflowError e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Constant constant0 = new Constant("");
      EvalContext evalContext0 = null;
      Expression[] expressionArray0 = new Expression[9];
      expressionArray0[0] = (Expression) constant0;
      expressionArray0[1] = (Expression) constant0;
      expressionArray0[2] = (Expression) constant0;
      expressionArray0[3] = (Expression) constant0;
      QName qName0 = new QName("", (String) null);
      ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, expressionArray0);
      expressionArray0[4] = (Expression) extensionFunction0;
      expressionArray0[5] = (Expression) constant0;
      expressionArray0[6] = (Expression) constant0;
      expressionArray0[7] = (Expression) constant0;
      expressionArray0[8] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction(2958, expressionArray0);
      coreFunction0.computeValue((EvalContext) null);
      // Undeclared exception!
      coreFunction0.functionLang((EvalContext) null);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Constant constant0 = new Constant("");
      CoreOperationEqual coreOperationEqual0 = new CoreOperationEqual(constant0, constant0);
      Expression[] expressionArray0 = new Expression[2];
      expressionArray0[0] = (Expression) constant0;
      expressionArray0[1] = (Expression) coreOperationEqual0;
      CoreFunction coreFunction0 = new CoreFunction(29, expressionArray0);
      coreFunction0.computeContextDependent();
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Constant constant0 = new Constant("4");
      Constant constant1 = new Constant("kiw;M>\"_-");
      Expression[] expressionArray0 = new Expression[9];
      expressionArray0[0] = (Expression) constant1;
      expressionArray0[1] = (Expression) constant1;
      expressionArray0[2] = (Expression) constant0;
      expressionArray0[3] = (Expression) constant0;
      expressionArray0[4] = (Expression) constant0;
      expressionArray0[5] = (Expression) constant0;
      expressionArray0[6] = (Expression) constant0;
      expressionArray0[7] = (Expression) constant0;
      expressionArray0[8] = (Expression) constant1;
      CoreFunction coreFunction0 = new CoreFunction(21, expressionArray0);
      coreFunction0.computeContextDependent();
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Constant constant0 = new Constant("");
      CoreOperationEqual coreOperationEqual0 = new CoreOperationEqual(constant0, constant0);
      Expression[] expressionArray0 = new Expression[2];
      expressionArray0[0] = (Expression) constant0;
      expressionArray0[1] = (Expression) coreOperationEqual0;
      CoreFunction coreFunction0 = new CoreFunction(29, expressionArray0);
      // Undeclared exception!
//      try { 
        coreFunction0.computeValue((EvalContext) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[4];
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd(expressionArray0);
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual(coreOperationAdd0, coreOperationAdd0);
      expressionArray0[0] = (Expression) coreOperationLessThanOrEqual0;
      QName qName0 = new QName("4", "Cannot set undefined variable: ");
      ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, expressionArray0);
      expressionArray0[1] = (Expression) extensionFunction0;
      Step[] stepArray0 = new Step[3];
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("4");
      Step step0 = new Step(41, processingInstructionTest0, expressionArray0);
      stepArray0[0] = step0;
      Step step1 = new Step(65536, processingInstructionTest0, expressionArray0);
      stepArray0[1] = step1;
      Step step2 = new Step((-727), processingInstructionTest0, expressionArray0);
      stepArray0[2] = step2;
      ExpressionPath expressionPath0 = new ExpressionPath(coreOperationLessThanOrEqual0, expressionArray0, stepArray0);
      CoreOperationDivide coreOperationDivide0 = new CoreOperationDivide(coreOperationLessThanOrEqual0, expressionPath0);
      expressionArray0[3] = (Expression) coreOperationDivide0;
      CoreFunction coreFunction0 = new CoreFunction(17, expressionArray0);
      CoreFunction coreFunction1 = new CoreFunction(29, expressionArray0);
      PredicateContext predicateContext0 = new PredicateContext((EvalContext) null, expressionArray0[1]);
      // Undeclared exception!
      coreFunction1.functionSubstringBefore(predicateContext0);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Expression[] expressionArray0 = new Expression[1];
      CoreOperationOr coreOperationOr0 = new CoreOperationOr(expressionArray0);
      expressionArray0[0] = (Expression) coreOperationOr0;
      CoreFunction coreFunction0 = new CoreFunction(1694, expressionArray0);
      PredicateContext predicateContext0 = new PredicateContext((EvalContext) null, expressionArray0[0]);
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest((String) null);
      ChildContext childContext0 = new ChildContext(predicateContext0, processingInstructionTest0, true, true);
      AncestorContext ancestorContext0 = new AncestorContext(childContext0, true, processingInstructionTest0);
      EvalContext[] evalContextArray0 = new EvalContext[8];
      evalContextArray0[0] = (EvalContext) ancestorContext0;
      evalContextArray0[1] = null;
      evalContextArray0[2] = (EvalContext) predicateContext0;
      evalContextArray0[3] = (EvalContext) ancestorContext0;
      evalContextArray0[4] = (EvalContext) ancestorContext0;
      evalContextArray0[5] = null;
      evalContextArray0[6] = (EvalContext) predicateContext0;
      evalContextArray0[7] = (EvalContext) predicateContext0;
      // Undeclared exception!
      coreFunction0.functionNamespaceURI(evalContextArray0[0]);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      EvalContext evalContext0 = null;
      EvoSuiteFile evoSuiteFile0 = null;
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)10;
      Expression[] expressionArray0 = new Expression[3];
      QName qName0 = new QName("R#f;S,s(Gm\u0004kuQURufalse", "R#f;S,s(Gm\u0004kuQURufalse");
      VariableReference variableReference0 = new VariableReference(qName0);
      expressionArray0[0] = (Expression) variableReference0;
      ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, expressionArray0);
      expressionArray0[1] = (Expression) extensionFunction0;
      Expression[] expressionArray1 = new Expression[7];
      expressionArray1[0] = (Expression) variableReference0;
      expressionArray1[1] = (Expression) variableReference0;
      expressionArray1[2] = (Expression) extensionFunction0;
      CoreOperationSubtract coreOperationSubtract0 = new CoreOperationSubtract(expressionArray1[2], expressionArray1[1]);
      expressionArray1[3] = (Expression) coreOperationSubtract0;
      expressionArray1[4] = (Expression) extensionFunction0;
      expressionArray1[5] = (Expression) variableReference0;
      expressionArray1[6] = (Expression) extensionFunction0;
      Step[] stepArray0 = new Step[3];
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(611);
      Step step0 = new Step(48, nodeTypeTest0, expressionArray1);
      stepArray0[0] = step0;
      Step step1 = new Step((-2254), nodeTypeTest0, expressionArray1);
      stepArray0[1] = step1;
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
      Step step2 = new Step((byte)10, nodeNameTest0, expressionArray0);
      stepArray0[2] = step2;
      ExpressionPath expressionPath0 = new ExpressionPath(variableReference0, expressionArray1, stepArray0);
      expressionArray0[2] = (Expression) expressionPath0;
      CoreFunction coreFunction0 = new CoreFunction(495, expressionArray0);
      // Undeclared exception!
      coreFunction0.functionNull((EvalContext) null);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd(expressionArray0);
      CoreOperationMultiply coreOperationMultiply0 = new CoreOperationMultiply(coreOperationAdd0, coreOperationAdd0);
      expressionArray0[0] = (Expression) coreOperationMultiply0;
      CoreFunction coreFunction0 = new CoreFunction(610, expressionArray0);
      // Undeclared exception!
      coreFunction0.functionStringLength((EvalContext) null);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[5];
      QName qName0 = new QName("Was expecting:");
      ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, expressionArray0);
      expressionArray0[0] = (Expression) extensionFunction0;
      CoreOperationMod coreOperationMod0 = new CoreOperationMod(extensionFunction0, expressionArray0[0]);
      expressionArray0[1] = (Expression) coreOperationMod0;
      VariableReference variableReference0 = new VariableReference(qName0);
      expressionArray0[2] = (Expression) variableReference0;
      CoreOperationLessThan coreOperationLessThan0 = new CoreOperationLessThan(expressionArray0[2], expressionArray0[2]);
      expressionArray0[3] = (Expression) coreOperationLessThan0;
      CoreOperationAnd coreOperationAnd0 = new CoreOperationAnd(expressionArray0);
      Expression[] expressionArray1 = new Expression[1];
      Expression[] expressionArray2 = new Expression[9];
      expressionArray2[0] = (Expression) variableReference0;
      expressionArray2[1] = (Expression) extensionFunction0;
      expressionArray2[2] = (Expression) coreOperationAnd0;
      expressionArray2[3] = (Expression) extensionFunction0;
      expressionArray2[4] = (Expression) variableReference0;
      expressionArray2[5] = (Expression) coreOperationAnd0;
      expressionArray2[6] = (Expression) coreOperationAnd0;
      expressionArray2[7] = (Expression) coreOperationLessThan0;
      CoreOperationMod coreOperationMod1 = new CoreOperationMod(expressionArray2[3], expressionArray2[3]);
      expressionArray2[8] = (Expression) coreOperationMod1;
      CoreOperationAnd coreOperationAnd1 = new CoreOperationAnd(expressionArray2);
      expressionArray1[0] = (Expression) coreOperationAnd1;
      coreOperationAnd1.args = expressionArray1;
      coreOperationAnd0.args = expressionArray1;
      expressionArray0[4] = (Expression) coreOperationAnd0;
      CoreFunction coreFunction0 = new CoreFunction(974, expressionArray0);
      RootContext rootContext0 = new RootContext((JXPathContextReferenceImpl) null, (NodePointer) null);
      RootContext rootContext1 = rootContext0.getRootContext();
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(974);
      ChildContext childContext0 = new ChildContext(rootContext1, nodeTypeTest0, false, false);
      // Undeclared exception!
//      try { 
        coreFunction0.functionLast(childContext0);
//        fail("Expecting exception: StackOverflowError");
      
//      } catch(StackOverflowError e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(18, expressionArray0);
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl)JXPathContext.newContext((Object) coreFunction0);
      DecimalFormat decimalFormat0 = new DecimalFormat();
      QName qName0 = null;
      Locale locale0 = Locale.ROOT;
      BeanPointer beanPointer0 = (BeanPointer)NodePointer.newNodePointer((QName) null, jXPathContextReferenceImpl0, locale0);
      RootContext rootContext0 = new RootContext(jXPathContextReferenceImpl0, beanPointer0);
      coreFunction0.functionNamespaceURI(rootContext0);
      coreFunction0.computeContextDependent();
      // Undeclared exception!
//      try { 
        coreFunction0.functionLast(rootContext0);
//        fail("Expecting exception: UnsupportedOperationException");
      
//      } catch(UnsupportedOperationException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.jxpath.ri.axes.RootContext", e);
//      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Constant constant0 = new Constant("Incorrect number of arguments: ");
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("d: Z:zDs1^f1");
      processingInstructionTest0.toString();
      Constant constant1 = new Constant("+AY,_';W1");
      CoreOperationMod coreOperationMod0 = new CoreOperationMod(constant1, constant1);
      CoreOperationNegate coreOperationNegate0 = new CoreOperationNegate(coreOperationMod0);
      CoreOperationSubtract coreOperationSubtract0 = new CoreOperationSubtract(coreOperationNegate0, coreOperationNegate0);
      coreOperationSubtract0.isContextDependent();
      CoreOperationEqual coreOperationEqual0 = new CoreOperationEqual(coreOperationSubtract0, constant0);
      Expression[] expressionArray0 = new Expression[2];
      expressionArray0[0] = (Expression) constant1;
      expressionArray0[1] = (Expression) coreOperationMod0;
      CoreFunction coreFunction0 = new CoreFunction(7, expressionArray0);
      EvalContext evalContext0 = null;
      // Undeclared exception!
//      try { 
        coreFunction0.functionSubstring((EvalContext) null);
//        fail("Expecting exception: ArithmeticException");
      
//      } catch(ArithmeticException e) {
//         //
//         // / by zero
//         //
//         verifyException("org.apache.commons.jxpath.ri.compiler.CoreOperationMod", e);
//      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(18, expressionArray0);
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl)JXPathContext.newContext((Object) coreFunction0);
      DecimalFormat decimalFormat0 = new DecimalFormat();
      CoreFunction coreFunction1 = new CoreFunction(1396, expressionArray0);
      QName qName0 = new QName("");
      VariablePointer variablePointer0 = new VariablePointer(qName0);
      BeanPointer beanPointer0 = (BeanPointer)NodePointer.newChildNodePointer(variablePointer0, qName0, "");
      RootContext rootContext0 = new RootContext(jXPathContextReferenceImpl0, beanPointer0);
      PredicateContext predicateContext0 = new PredicateContext(rootContext0, coreFunction0);
      // Undeclared exception!
//      try { 
        coreFunction0.functionStringLength(predicateContext0);
//        fail("Expecting exception: UnsupportedOperationException");
      
//      } catch(UnsupportedOperationException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.jxpath.ri.axes.RootContext", e);
//      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(18, expressionArray0);
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl)JXPathContext.newContext((Object) coreFunction0);
      DecimalFormat decimalFormat0 = new DecimalFormat();
      Step[] stepArray0 = new Step[3];
      QName qName0 = new QName("substring-before", "3ffpI%h2");
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, "");
      Step step0 = new Step((-2473), nodeNameTest0, expressionArray0);
      stepArray0[0] = step0;
      Step step1 = new Step(13, nodeNameTest0, expressionArray0);
      stepArray0[1] = step1;
      Step step2 = new Step(1578, nodeNameTest0, expressionArray0);
      stepArray0[2] = step2;
      ExpressionPath expressionPath0 = new ExpressionPath((Expression) null, expressionArray0, stepArray0);
      QName qName1 = new QName("starts-with", "");
      VariablePointer variablePointer0 = new VariablePointer(qName1);
      RootContext rootContext0 = new RootContext(jXPathContextReferenceImpl0, variablePointer0);
      RootContext rootContext1 = rootContext0.getRootContext();
      // Undeclared exception!
//      try { 
        coreFunction0.functionString(rootContext1);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // Undefined variable: starts-with:
//         //
//         verifyException("org.apache.commons.jxpath.ri.model.VariablePointer$1", e);
//      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Constant constant0 = new Constant("");
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("y/3DyDJ<g&.I");
      processingInstructionTest0.toString();
      Constant constant1 = new Constant("T");
      CoreOperationEqual coreOperationEqual0 = new CoreOperationEqual(constant0, constant0);
      Expression[] expressionArray0 = new Expression[3];
      expressionArray0[0] = (Expression) constant1;
      expressionArray0[1] = (Expression) coreOperationEqual0;
      expressionArray0[2] = (Expression) constant1;
      CoreFunction coreFunction0 = new CoreFunction(22, expressionArray0);
      coreFunction0.functionSubstring((EvalContext) null);
      // Undeclared exception!
//      try { 
        coreFunction0.functionNull((EvalContext) null);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // Incorrect number of arguments: lang('T', org.apache.commons.jxpath.ri.compiler.Constant@0000000001 = org.apache.commons.jxpath.ri.compiler.Constant@0000000001, 'T')
//         //
//         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Constant constant0 = new Constant("floor");
      CoreFunction coreFunction0 = new CoreFunction(30, (Expression[]) null);
      coreFunction0.computeContextDependent();
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Constant constant0 = new Constant("4");
      Expression[] expressionArray0 = new Expression[1];
      CoreOperationMod coreOperationMod0 = new CoreOperationMod(constant0, constant0);
      expressionArray0[0] = (Expression) coreOperationMod0;
      CoreFunction coreFunction0 = new CoreFunction(17, expressionArray0);
      // Undeclared exception!
//      try { 
        coreFunction0.functionNumber((EvalContext) null);
//        fail("Expecting exception: ArithmeticException");
      
//      } catch(ArithmeticException e) {
//         //
//         // / by zero
//         //
//         verifyException("org.apache.commons.jxpath.ri.compiler.CoreOperationMod", e);
//      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[10];
      CoreFunction coreFunction0 = new CoreFunction(7, expressionArray0);
      // Undeclared exception!
//      try { 
        coreFunction0.functionLast((EvalContext) null);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // Incorrect number of arguments: name(null, null, null, null, null, null, null, null, null, null)
//         //
//         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(1, expressionArray0);
      QName qName0 = new QName("org.jdom.DocType", "org.jdom.DocType");
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
      NamespaceContext namespaceContext0 = new NamespaceContext((EvalContext) null, nodeNameTest0);
      coreFunction0.computeValue(namespaceContext0);
      // Undeclared exception!
//      try { 
        coreFunction0.functionStartsWith(namespaceContext0);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // Incorrect number of arguments: last()
//         //
//         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      DecimalFormat decimalFormat0 = new DecimalFormat();
      Locale locale0 = Locale.ROOT;
      Expression[] expressionArray0 = new Expression[4];
      CoreOperationMod coreOperationMod0 = new CoreOperationMod((Expression) null, (Expression) null);
      expressionArray0[0] = (Expression) coreOperationMod0;
      CoreOperationNegate coreOperationNegate0 = new CoreOperationNegate(expressionArray0[0]);
      expressionArray0[1] = (Expression) coreOperationNegate0;
      CoreOperationNegate coreOperationNegate1 = new CoreOperationNegate(expressionArray0[1]);
      expressionArray0[2] = (Expression) coreOperationNegate1;
      Constant constant0 = new Constant("proce");
      expressionArray0[3] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction(18, expressionArray0);
      EvalContext evalContext0 = null;
      // Undeclared exception!
//      try { 
        coreFunction0.functionFalse((EvalContext) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.evosuite.runtime.System", e);
//      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Constant constant0 = new Constant("");
      Expression[] expressionArray0 = new Expression[2];
      CoreOperationEqual coreOperationEqual0 = new CoreOperationEqual(constant0, constant0);
      expressionArray0[0] = (Expression) coreOperationEqual0;
      expressionArray0[1] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction(17, expressionArray0);
      coreFunction0.functionSubstring((EvalContext) null);
      coreFunction0.getArg1();
      coreFunction0.functionStartsWith((EvalContext) null);
      NodeSetContext nodeSetContext0 = new NodeSetContext((EvalContext) null, (NodeSet) null);
      nodeSetContext0.getCurrentPosition();
      coreFunction0.functionSubstringBefore(nodeSetContext0);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Constant constant0 = new Constant("C<54ykZoq_v}C<54ykZoq_v}");
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("C<54ykZoq_v}C<54ykZoq_v}");
      processingInstructionTest0.toString();
      Constant constant1 = new Constant((String) null);
      CoreOperationEqual coreOperationEqual0 = new CoreOperationEqual(constant0, constant1);
      Expression[] expressionArray0 = new Expression[2];
      expressionArray0[0] = (Expression) coreOperationEqual0;
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd(expressionArray0);
      expressionArray0[1] = (Expression) coreOperationAdd0;
      CoreFunction coreFunction0 = new CoreFunction(0, expressionArray0);
      // Undeclared exception!
      coreFunction0.functionStartsWith((EvalContext) null);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Constant constant0 = new Constant("");
      Expression[] expressionArray0 = new Expression[3];
      expressionArray0[0] = (Expression) constant0;
      expressionArray0[1] = (Expression) constant0;
      expressionArray0[2] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction(30, expressionArray0);
      EvalContext[] evalContextArray0 = new EvalContext[3];
      evalContextArray0[0] = null;
      evalContextArray0[1] = null;
      evalContextArray0[2] = null;
      UnionContext unionContext0 = new UnionContext((EvalContext) null, evalContextArray0);
      // Undeclared exception!
//      try { 
        coreFunction0.computeValue(unionContext0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.jxpath.ri.EvalContext", e);
//      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      CoreOperationOr coreOperationOr0 = new CoreOperationOr(expressionArray0);
      CoreOperationNotEqual coreOperationNotEqual0 = new CoreOperationNotEqual(coreOperationOr0, coreOperationOr0);
      expressionArray0[0] = (Expression) coreOperationNotEqual0;
      CoreFunction coreFunction0 = new CoreFunction(30, expressionArray0);
      // Undeclared exception!
//      try { 
        coreFunction0.functionString((EvalContext) null);
//        fail("Expecting exception: StackOverflowError");
      
//      } catch(StackOverflowError e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[7];
      CoreOperationAnd coreOperationAnd0 = new CoreOperationAnd(expressionArray0);
      CoreOperationMultiply coreOperationMultiply0 = new CoreOperationMultiply(coreOperationAnd0, coreOperationAnd0);
      expressionArray0[0] = (Expression) coreOperationMultiply0;
      CoreOperationNotEqual coreOperationNotEqual0 = new CoreOperationNotEqual(coreOperationMultiply0, expressionArray0[0]);
      expressionArray0[1] = (Expression) coreOperationNotEqual0;
      CoreOperationDivide coreOperationDivide0 = new CoreOperationDivide(coreOperationNotEqual0, coreOperationAnd0);
      expressionArray0[2] = (Expression) coreOperationDivide0;
      Step[] stepArray0 = new Step[1];
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(2436);
      Step step0 = new Step(2436, nodeTypeTest0, expressionArray0);
      stepArray0[0] = step0;
      LocationPath locationPath0 = new LocationPath(true, stepArray0);
      CoreOperationLessThan coreOperationLessThan0 = new CoreOperationLessThan(expressionArray0[0], locationPath0);
      expressionArray0[3] = (Expression) coreOperationLessThan0;
      CoreOperationNegate coreOperationNegate0 = new CoreOperationNegate(expressionArray0[2]);
      expressionArray0[4] = (Expression) coreOperationNegate0;
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual(expressionArray0[1], expressionArray0[4]);
      expressionArray0[5] = (Expression) coreOperationLessThanOrEqual0;
      LocationPath locationPath1 = new LocationPath(true, stepArray0);
      expressionArray0[6] = (Expression) locationPath1;
      CoreFunction coreFunction0 = new CoreFunction((-1551), expressionArray0);
      Step[] stepArray1 = new Step[6];
      stepArray1[0] = step0;
      stepArray1[1] = step0;
      stepArray1[2] = step0;
      stepArray1[3] = step0;
      stepArray1[4] = step0;
      stepArray1[5] = step0;
      ExpressionPath expressionPath0 = new ExpressionPath(coreFunction0, expressionArray0, stepArray1);
      EvalContext evalContext0 = expressionPath0.evalSteps((EvalContext) null);
      // Undeclared exception!
      coreFunction0.functionTranslate(evalContext0);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Constant constant0 = new Constant("[nJ{+9{=Erz");
      EvalContext evalContext0 = null;
      Expression[] expressionArray0 = new Expression[3];
      CoreOperationGreaterThan coreOperationGreaterThan0 = new CoreOperationGreaterThan(constant0, constant0);
      expressionArray0[0] = (Expression) coreOperationGreaterThan0;
      CoreOperationOr coreOperationOr0 = new CoreOperationOr(expressionArray0);
      expressionArray0[1] = (Expression) coreOperationOr0;
      expressionArray0[2] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction(30, expressionArray0);
      // Undeclared exception!
      coreFunction0.computeValue((EvalContext) null);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[5];
      CoreOperationOr coreOperationOr0 = new CoreOperationOr(expressionArray0);
      Step[] stepArray0 = new Step[11];
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(32);
      Step step0 = new Step(5, nodeTypeTest0, expressionArray0);
      stepArray0[0] = step0;
      Step step1 = new Step((-481), nodeTypeTest0, expressionArray0);
      stepArray0[1] = step1;
      Step step2 = new Step(3565, (NodeTest) null, expressionArray0);
      stepArray0[2] = step2;
      Step step3 = new Step((-481), nodeTypeTest0, expressionArray0);
      stepArray0[3] = step3;
      QName qName0 = new QName("c 3t=_B;MjQB~l;Oh ");
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, "4H");
      Step step4 = new Step((-481), nodeNameTest0, expressionArray0);
      stepArray0[4] = step4;
      Step step5 = new Step(109, nodeTypeTest0, expressionArray0);
      stepArray0[5] = step5;
      ExpressionPath expressionPath0 = new ExpressionPath(coreOperationOr0, expressionArray0, stepArray0);
      expressionArray0[0] = (Expression) expressionPath0;
      VariableReference variableReference0 = new VariableReference(qName0);
      expressionArray0[1] = (Expression) variableReference0;
      CoreOperationGreaterThanOrEqual coreOperationGreaterThanOrEqual0 = new CoreOperationGreaterThanOrEqual(variableReference0, variableReference0);
      expressionArray0[2] = (Expression) coreOperationGreaterThanOrEqual0;
      CoreOperationNotEqual coreOperationNotEqual0 = new CoreOperationNotEqual(expressionArray0[1], expressionPath0);
      expressionArray0[3] = (Expression) coreOperationNotEqual0;
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual(expressionArray0[2], expressionPath0);
      expressionArray0[4] = (Expression) coreOperationLessThanOrEqual0;
      CoreFunction coreFunction0 = new CoreFunction(5, expressionArray0);
      // Undeclared exception!
      coreFunction0.functionCeiling((EvalContext) null);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Byte byte0 = new Byte((byte)87);
      Constant constant0 = new Constant(byte0);
      constant0.iterate((EvalContext) null);
      Expression[] expressionArray0 = new Expression[2];
      Constant constant1 = new Constant("\"child::\"");
      expressionArray0[0] = (Expression) constant1;
      expressionArray0[1] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction((-142), expressionArray0);
      coreFunction0.functionSubstringBefore((EvalContext) null);
      coreFunction0.functionSubstring((EvalContext) null);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Expression[] expressionArray0 = new Expression[2];
      Step[] stepArray0 = new Step[0];
      LocationPath locationPath0 = new LocationPath(true, stepArray0);
      QName qName0 = new QName("\"c");
      ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, expressionArray0);
      CoreOperationMultiply coreOperationMultiply0 = new CoreOperationMultiply(locationPath0, extensionFunction0);
      expressionArray0[0] = (Expression) coreOperationMultiply0;
      ExtensionFunction extensionFunction1 = new ExtensionFunction(qName0, expressionArray0);
      expressionArray0[1] = (Expression) extensionFunction1;
      CoreFunction coreFunction0 = new CoreFunction((-3137), expressionArray0);
      CoreOperationUnion coreOperationUnion0 = new CoreOperationUnion(expressionArray0);
      ExpressionPath expressionPath0 = new ExpressionPath(coreOperationUnion0, expressionArray0, stepArray0);
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("3$S,*7uw-X");
      AncestorContext ancestorContext0 = new AncestorContext((EvalContext) null, true, processingInstructionTest0);
      EvalContext evalContext0 = expressionPath0.evalSteps(ancestorContext0);
      expressionPath0.createContextForStep(evalContext0, 100, processingInstructionTest0);
      // Undeclared exception!
      coreFunction0.functionPosition((EvalContext) null);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Constant constant0 = new Constant(" ");
      Constant constant1 = new Constant((String) null);
      Expression[] expressionArray0 = new Expression[5];
      QName qName0 = new QName("rccOs?t-;'_ao%");
      ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, expressionArray0);
      expressionArray0[0] = (Expression) extensionFunction0;
      expressionArray0[1] = (Expression) constant1;
      expressionArray0[2] = (Expression) constant1;
      expressionArray0[3] = (Expression) constant1;
      constant0.toString();
      expressionArray0[4] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction((-2183), expressionArray0);
      // Undeclared exception!
//      try { 
        coreFunction0.functionSum((EvalContext) null);
//        fail("Expecting exception: StackOverflowError");
      
//      } catch(StackOverflowError e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      Expression[] expressionArray1 = new Expression[7];
      CoreOperationOr coreOperationOr0 = new CoreOperationOr(expressionArray0);
      CoreOperationEqual coreOperationEqual0 = new CoreOperationEqual(coreOperationOr0, coreOperationOr0);
      expressionArray1[0] = (Expression) coreOperationEqual0;
      CoreOperationDivide coreOperationDivide0 = new CoreOperationDivide(coreOperationOr0, expressionArray1[0]);
      expressionArray1[1] = (Expression) coreOperationDivide0;
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd(expressionArray1);
      expressionArray1[2] = (Expression) coreOperationAdd0;
      CoreOperationLessThan coreOperationLessThan0 = new CoreOperationLessThan(expressionArray1[0], expressionArray1[1]);
      expressionArray1[3] = (Expression) coreOperationLessThan0;
      QName qName0 = new QName("");
      ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, expressionArray1);
      expressionArray1[4] = (Expression) extensionFunction0;
      ExtensionFunction extensionFunction1 = new ExtensionFunction(qName0, expressionArray0);
      expressionArray1[5] = (Expression) extensionFunction1;
      VariableReference variableReference0 = new VariableReference(qName0);
      expressionArray1[6] = (Expression) variableReference0;
      CoreFunction coreFunction0 = new CoreFunction(30, expressionArray1);
      // Undeclared exception!
      coreFunction0.functionNumber((EvalContext) null);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      EvalContext evalContext0 = null;
      Constant constant0 = new Constant("[nJ{+9{=Erz");
      EvalContext evalContext1 = null;
      Expression[] expressionArray0 = new Expression[2];
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual(constant0, constant0);
      CoreOperationNegate coreOperationNegate0 = new CoreOperationNegate(coreOperationLessThanOrEqual0);
      expressionArray0[1] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction(30, expressionArray0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "[nJ{+9{=Erz");
      // Undeclared exception!
//      try { 
        coreFunction0.computeValue((EvalContext) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Constant constant0 = new Constant("4");
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("4");
      processingInstructionTest0.toString();
      Constant constant1 = new Constant("processing-instruction('4')");
      CoreOperationEqual coreOperationEqual0 = new CoreOperationEqual(constant1, constant0);
      Expression[] expressionArray0 = new Expression[3];
      CoreOperationDivide coreOperationDivide0 = new CoreOperationDivide(constant1, constant0);
      expressionArray0[0] = (Expression) coreOperationDivide0;
      expressionArray0[1] = (Expression) coreOperationEqual0;
      expressionArray0[2] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction(17, expressionArray0);
      coreFunction0.functionSubstring((EvalContext) null);
      coreFunction0.functionTranslate((EvalContext) null);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Constant constant0 = new Constant("");
      Expression[] expressionArray0 = new Expression[9];
      expressionArray0[0] = (Expression) constant0;
      expressionArray0[1] = (Expression) constant0;
      CoreOperationNegate coreOperationNegate0 = new CoreOperationNegate(expressionArray0[0]);
      expressionArray0[2] = (Expression) coreOperationNegate0;
      Step[] stepArray0 = new Step[2];
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("");
      Step step0 = new Step(6, processingInstructionTest0, expressionArray0);
      stepArray0[0] = step0;
      Step step1 = new Step(6, processingInstructionTest0, expressionArray0);
      stepArray0[1] = step1;
      LocationPath locationPath0 = new LocationPath(true, stepArray0);
      expressionArray0[3] = (Expression) locationPath0;
      expressionArray0[4] = (Expression) constant0;
      expressionArray0[5] = (Expression) constant0;
      expressionArray0[6] = (Expression) constant0;
      NameAttributeTest nameAttributeTest0 = new NameAttributeTest(expressionArray0[1], expressionArray0[2]);
      CoreOperationSubtract coreOperationSubtract0 = new CoreOperationSubtract(nameAttributeTest0, coreOperationNegate0);
      expressionArray0[7] = (Expression) coreOperationSubtract0;
      CoreOperationSubtract coreOperationSubtract1 = new CoreOperationSubtract(constant0, expressionArray0[1]);
      expressionArray0[8] = (Expression) coreOperationSubtract1;
      CoreFunction coreFunction0 = new CoreFunction((-833), expressionArray0);
      PredicateContext predicateContext0 = new PredicateContext((EvalContext) null, coreFunction0);
      coreFunction0.computeValue(predicateContext0);
      // Undeclared exception!
      coreFunction0.functionStartsWith(predicateContext0);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Constant constant0 = new Constant("");
      Expression[] expressionArray0 = new Expression[3];
      expressionArray0[0] = (Expression) constant0;
      expressionArray0[1] = (Expression) constant0;
      expressionArray0[2] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction(30, expressionArray0);
      coreFunction0.computeContextDependent();
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Constant constant0 = new Constant("4");
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("y/3DyDJ<g&.I");
      processingInstructionTest0.toString();
      Constant constant1 = new Constant("processing-instruction('y/3DyDJ<g&.I')");
      CoreOperationEqual coreOperationEqual0 = new CoreOperationEqual(constant1, constant0);
      Expression[] expressionArray0 = new Expression[3];
      CoreFunction coreFunction0 = new CoreFunction(17, expressionArray0);
      EvalContext evalContext0 = null;
      PredicateContext predicateContext0 = new PredicateContext((EvalContext) null, coreFunction0);
      UnionContext unionContext0 = new UnionContext(predicateContext0, (EvalContext[]) null);
      // Undeclared exception!
//      try { 
        coreFunction0.computeValue(unionContext0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[6];
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd(expressionArray0);
      expressionArray0[0] = (Expression) coreOperationAdd0;
      CoreOperationNegate coreOperationNegate0 = new CoreOperationNegate(coreOperationAdd0);
      expressionArray0[1] = (Expression) coreOperationNegate0;
      CoreOperationSubtract coreOperationSubtract0 = new CoreOperationSubtract(coreOperationAdd0, coreOperationAdd0);
      expressionArray0[2] = (Expression) coreOperationSubtract0;
      Step[] stepArray0 = new Step[4];
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("org.apache.commons.jxpath.JXPathTypeConversionException");
      Step step0 = new Step(10, processingInstructionTest0, expressionArray0);
      stepArray0[0] = step0;
      Step step1 = new Step(10, processingInstructionTest0, expressionArray0);
      stepArray0[1] = step1;
      Step step2 = new Step(1346, processingInstructionTest0, expressionArray0);
      stepArray0[2] = step2;
      Step step3 = new Step((-1028), processingInstructionTest0, expressionArray0);
      stepArray0[3] = step3;
      LocationPath locationPath0 = new LocationPath(false, stepArray0);
      expressionArray0[3] = (Expression) locationPath0;
      CoreOperationUnion coreOperationUnion0 = new CoreOperationUnion(expressionArray0);
      expressionArray0[4] = (Expression) coreOperationUnion0;
      Constant constant0 = new Constant("org.apache.commons.jxpath.JXPathTypeConversionException");
      expressionArray0[5] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction(10, expressionArray0);
      ChildContext childContext0 = new ChildContext((EvalContext) null, processingInstructionTest0, false, false);
      // Undeclared exception!
      coreFunction0.functionFalse(childContext0);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Constant constant0 = new Constant("]e");
      Expression[] expressionArray0 = new Expression[8];
      expressionArray0[0] = (Expression) constant0;
      expressionArray0[1] = (Expression) constant0;
      expressionArray0[2] = (Expression) constant0;
      QName qName0 = new QName("An EntityRef is not allowed at the document rootAn EntityRef is not allowed at the document root");
      ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, expressionArray0);
      expressionArray0[3] = (Expression) extensionFunction0;
      expressionArray0[4] = (Expression) constant0;
      expressionArray0[5] = (Expression) constant0;
      expressionArray0[6] = (Expression) constant0;
      expressionArray0[7] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction(17, expressionArray0);
      EvalContext evalContext0 = null;
      CoreFunction coreFunction1 = new CoreFunction(1401, expressionArray0);
      // Undeclared exception!
      coreFunction0.functionConcat((EvalContext) null);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Constant constant0 = new Constant("4");
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("y/3DyDJ<g&.I");
      processingInstructionTest0.toString();
      Constant constant1 = new Constant("processing-instruction('y/3DyDJ<g&.I')");
      CoreOperationEqual coreOperationEqual0 = new CoreOperationEqual(constant1, constant0);
      Expression[] expressionArray0 = new Expression[3];
      expressionArray0[0] = (Expression) constant1;
      expressionArray0[1] = (Expression) coreOperationEqual0;
      expressionArray0[2] = (Expression) constant1;
      CoreFunction coreFunction0 = new CoreFunction(2163, expressionArray0);
      coreFunction0.functionSubstring((EvalContext) null);
      // Undeclared exception!
//      try { 
        coreFunction0.functionContains((EvalContext) null);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // Incorrect number of arguments: unknownFunction2163()('processing-instruction('y/3DyDJ<g&.I')', org.apache.commons.jxpath.ri.compiler.Constant@0000000003 = org.apache.commons.jxpath.ri.compiler.Constant@0000000001, 'processing-instruction('y/3DyDJ<g&.I')')
//         //
//         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Constant constant0 = new Constant("4");
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("4");
      processingInstructionTest0.toString();
      Constant constant1 = new Constant("processing-instruction('4')");
      CoreOperationEqual coreOperationEqual0 = new CoreOperationEqual(constant1, constant0);
      Expression[] expressionArray0 = new Expression[2];
      expressionArray0[0] = (Expression) constant1;
      expressionArray0[1] = (Expression) coreOperationEqual0;
      CoreFunction coreFunction0 = new CoreFunction(17, expressionArray0);
      coreFunction0.functionSubstring((EvalContext) null);
      coreFunction0.functionContains((EvalContext) null);
      coreFunction0.computeContextDependent();
      coreFunction0.functionSubstringBefore((EvalContext) null);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Constant constant0 = new Constant("4");
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("y/3DyDJ<g&.I");
      processingInstructionTest0.toString();
      Constant constant1 = new Constant("processing-instruction('y/3DyDJ<g&.I')");
      CoreOperationEqual coreOperationEqual0 = new CoreOperationEqual(constant1, constant0);
      Expression[] expressionArray0 = new Expression[2];
      expressionArray0[0] = (Expression) constant1;
      expressionArray0[1] = (Expression) coreOperationEqual0;
      CoreFunction coreFunction0 = new CoreFunction(17, expressionArray0);
      CoreFunction coreFunction1 = new CoreFunction(16000, expressionArray0);
      JXPathContext jXPathContext0 = JXPathContext.newContext((Object) coreFunction0);
      QName qName0 = new QName("4", "y/3DyDJ<g&.I");
      Locale locale0 = Locale.ITALIAN;
      NodePointer nodePointer0 = NodePointer.newNodePointer(qName0, "4", locale0);
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = new JXPathContextReferenceImpl(jXPathContext0, processingInstructionTest0, nodePointer0);
      RootContext rootContext0 = new RootContext(jXPathContextReferenceImpl0, nodePointer0);
      SelfContext selfContext0 = new SelfContext(rootContext0, processingInstructionTest0);
      coreFunction1.functionSubstringAfter(selfContext0);
      // Undeclared exception!
//      try { 
        coreFunction0.functionPosition(selfContext0);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // Incorrect number of arguments: translate('processing-instruction('y/3DyDJ<g&.I')', org.apache.commons.jxpath.ri.compiler.Constant@0000000003 = org.apache.commons.jxpath.ri.compiler.Constant@0000000001)
//         //
//         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[5];
      Step[] stepArray0 = new Step[9];
      QName qName0 = new QName("false");
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
      Step step0 = new Step(3625, nodeNameTest0, expressionArray0);
      stepArray0[0] = step0;
      Step step1 = new Step(3625, nodeNameTest0, expressionArray0);
      stepArray0[1] = step1;
      Step step2 = new Step(3625, nodeNameTest0, expressionArray0);
      stepArray0[2] = step2;
      Step step3 = new Step(3625, nodeNameTest0, expressionArray0);
      stepArray0[3] = step3;
      Step step4 = new Step(3625, nodeNameTest0, expressionArray0);
      stepArray0[4] = step4;
      NodeNameTest nodeNameTest1 = new NodeNameTest(qName0, "ZXE.UnZLb_vyV*5bZQ");
      Step step5 = new Step(3625, nodeNameTest1, expressionArray0);
      stepArray0[5] = step5;
      Step step6 = new Step(3625, nodeNameTest1, expressionArray0);
      stepArray0[6] = step6;
      Step step7 = new Step(98, nodeNameTest1, expressionArray0);
      stepArray0[7] = step7;
      Step step8 = new Step(890, nodeNameTest0, expressionArray0);
      stepArray0[8] = step8;
      LocationPath locationPath0 = new LocationPath(false, stepArray0);
      expressionArray0[0] = (Expression) locationPath0;
      CoreOperationNotEqual coreOperationNotEqual0 = new CoreOperationNotEqual(locationPath0, expressionArray0[0]);
      expressionArray0[1] = (Expression) coreOperationNotEqual0;
      CoreOperationDivide coreOperationDivide0 = new CoreOperationDivide(locationPath0, expressionArray0[0]);
      expressionArray0[2] = (Expression) coreOperationDivide0;
      CoreOperationDivide coreOperationDivide1 = new CoreOperationDivide(coreOperationNotEqual0, expressionArray0[2]);
      expressionArray0[3] = (Expression) coreOperationDivide1;
      CoreOperationMultiply coreOperationMultiply0 = new CoreOperationMultiply(coreOperationNotEqual0, coreOperationDivide1);
      expressionArray0[4] = (Expression) coreOperationMultiply0;
      CoreFunction coreFunction0 = new CoreFunction(3625, expressionArray0);
      // Undeclared exception!
//      try { 
        coreFunction0.toString();
//        fail("Expecting exception: StackOverflowError");
      
//      } catch(StackOverflowError e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[3];
      CoreFunction coreFunction0 = new CoreFunction((-1), expressionArray0);
      coreFunction0.getArg1();
      expressionArray0[0] = null;
      QName qName0 = new QName("Hzv++mWN&r9tJ");
      ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, expressionArray0);
      expressionArray0[1] = (Expression) extensionFunction0;
      CoreOperationAnd coreOperationAnd0 = new CoreOperationAnd(expressionArray0);
      expressionArray0[2] = (Expression) coreOperationAnd0;
      CoreFunction coreFunction1 = new CoreFunction(60, expressionArray0);
      // Undeclared exception!
      coreFunction1.functionID((EvalContext) null);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Constant constant0 = new Constant("4");
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("y/3DyDJ<g&.I");
      processingInstructionTest0.toString();
      Constant constant1 = new Constant("processing-instruction('y/3DyDJ<g&.I')");
      CoreOperationEqual coreOperationEqual0 = new CoreOperationEqual(constant1, constant0);
      Expression[] expressionArray0 = new Expression[2];
      expressionArray0[0] = (Expression) constant1;
      expressionArray0[1] = (Expression) coreOperationEqual0;
      CoreFunction coreFunction0 = new CoreFunction(17, expressionArray0);
      coreFunction0.functionSubstring((EvalContext) null);
      coreFunction0.functionContains((EvalContext) null);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[7];
      VariableReference variableReference0 = new VariableReference((QName) null);
      expressionArray0[0] = (Expression) variableReference0;
      CoreOperationGreaterThan coreOperationGreaterThan0 = new CoreOperationGreaterThan(variableReference0, expressionArray0[0]);
      expressionArray0[1] = (Expression) coreOperationGreaterThan0;
      ExtensionFunction extensionFunction0 = new ExtensionFunction((QName) null, expressionArray0);
      expressionArray0[2] = (Expression) extensionFunction0;
      Step[] stepArray0 = new Step[2];
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(18);
      Step step0 = new Step((-266), nodeTypeTest0, expressionArray0);
      stepArray0[0] = step0;
      Step step1 = new Step((-266), nodeTypeTest0, expressionArray0);
      stepArray0[1] = step1;
      ExpressionPath expressionPath0 = new ExpressionPath(coreOperationGreaterThan0, expressionArray0, stepArray0);
      expressionArray0[4] = (Expression) expressionPath0;
      CoreOperationUnion coreOperationUnion0 = new CoreOperationUnion(expressionArray0);
      expressionArray0[5] = (Expression) coreOperationUnion0;
      CoreOperationDivide coreOperationDivide0 = new CoreOperationDivide(coreOperationUnion0, extensionFunction0);
      expressionArray0[6] = (Expression) coreOperationDivide0;
      CoreFunction coreFunction0 = new CoreFunction(10, expressionArray0);
      EvalContext evalContext0 = null;
      // Undeclared exception!
      coreFunction0.functionStringLength((EvalContext) null);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Constant constant0 = new Constant((String) null);
      Constant constant1 = new Constant((String) null);
      Expression[] expressionArray0 = new Expression[1];
      expressionArray0[0] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction(11, expressionArray0);
      CoreFunction coreFunction1 = new CoreFunction(9, expressionArray0);
      CoreFunction coreFunction2 = new CoreFunction(9, expressionArray0);
      coreFunction2.functionSum((EvalContext) null);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[2];
      Constant constant0 = new Constant("?");
      Expression[] expressionArray1 = new Expression[2];
      CoreFunction coreFunction0 = new CoreFunction(1401, expressionArray1);
      coreFunction0.getFunctionName();
      // Undeclared exception!
//      try { 
        coreFunction0.functionContains((EvalContext) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Constant constant0 = new Constant("");
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("y/3DyDJ<g&.I");
      processingInstructionTest0.toString();
      Constant constant1 = new Constant("processing-instruction('y/3DyDJ<g&.I')");
      CoreOperationEqual coreOperationEqual0 = new CoreOperationEqual(constant1, constant0);
      Expression[] expressionArray0 = new Expression[2];
      expressionArray0[0] = (Expression) constant1;
      expressionArray0[1] = (Expression) coreOperationEqual0;
      CoreFunction coreFunction0 = new CoreFunction(17, expressionArray0);
      coreFunction0.functionStartsWith((EvalContext) null);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(18, expressionArray0);
      JXPathContext jXPathContext0 = JXPathContext.newContext((Object) coreFunction0);
      DecimalFormat decimalFormat0 = new DecimalFormat();
      JXPathContext.newContext(jXPathContext0, (Object) decimalFormat0);
      Step[] stepArray0 = new Step[2];
      QName qName0 = new QName("namespace-uri");
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, "");
      Step step0 = new Step(18, nodeNameTest0, expressionArray0);
      stepArray0[0] = step0;
      Step step1 = new Step(18, nodeNameTest0, expressionArray0);
      stepArray0[1] = step1;
      ExpressionPath expressionPath0 = new ExpressionPath(coreFunction0, expressionArray0, stepArray0);
      expressionPath0.createContextForStep((EvalContext) null, 28, nodeNameTest0);
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(28);
      AncestorContext ancestorContext0 = new AncestorContext((EvalContext) null, true, nodeTypeTest0);
      coreFunction0.functionPosition(ancestorContext0);
      Locale locale0 = Locale.CHINA;
      NodePointer.newNodePointer((QName) null, decimalFormat0, locale0);
      PredicateContext predicateContext0 = new PredicateContext((EvalContext) null, coreFunction0);
      // Undeclared exception!
//      try { 
        coreFunction0.functionLast(predicateContext0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.jxpath.ri.axes.PredicateContext", e);
//      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      Constant constant0 = new Constant("?");
      CoreFunction coreFunction0 = new CoreFunction(1401, expressionArray0);
      Expression[] expressionArray1 = new Expression[2];
      expressionArray1[0] = (Expression) constant0;
      expressionArray1[1] = (Expression) coreFunction0;
      CoreFunction coreFunction1 = new CoreFunction(1401, expressionArray1);
      coreFunction1.functionConcat((EvalContext) null);
      coreFunction1.functionSubstring((EvalContext) null);
      coreFunction1.functionContains((EvalContext) null);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      CoreFunction coreFunction0 = new CoreFunction(25, expressionArray0);
      EvalContext evalContext0 = null;
      // Undeclared exception!
//      try { 
        coreFunction0.computeValue((EvalContext) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("y/3DyDJ<g&.I");
      processingInstructionTest0.toString();
      Constant constant0 = new Constant("C<54ykZoq_v}C<54ykZoq_v}");
      CoreOperationEqual coreOperationEqual0 = new CoreOperationEqual(constant0, constant0);
      Expression[] expressionArray0 = new Expression[2];
      CoreOperationAnd coreOperationAnd0 = new CoreOperationAnd(expressionArray0);
      expressionArray0[0] = (Expression) coreOperationAnd0;
      expressionArray0[1] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction(0, expressionArray0);
      DescendantContext descendantContext0 = new DescendantContext((EvalContext) null, true, processingInstructionTest0);
      // Undeclared exception!
      coreFunction0.functionSubstring(descendantContext0);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[8];
      CoreOperationOr coreOperationOr0 = new CoreOperationOr(expressionArray0);
      expressionArray0[0] = (Expression) coreOperationOr0;
      CoreOperationOr coreOperationOr1 = new CoreOperationOr(expressionArray0);
      expressionArray0[1] = (Expression) coreOperationOr1;
      CoreOperationOr coreOperationOr2 = new CoreOperationOr(expressionArray0);
      expressionArray0[2] = (Expression) coreOperationOr2;
      Step[] stepArray0 = new Step[7];
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(13);
      Step step0 = new Step(13, nodeTypeTest0, expressionArray0);
      stepArray0[0] = step0;
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest(" ]rIbKV9");
      Step step1 = new Step(13, processingInstructionTest0, expressionArray0);
      stepArray0[1] = step1;
      Step step2 = new Step(0, nodeTypeTest0, expressionArray0);
      stepArray0[2] = step2;
      Expression[] expressionArray1 = new Expression[6];
      expressionArray1[0] = (Expression) coreOperationOr2;
      expressionArray1[1] = (Expression) coreOperationOr2;
      expressionArray1[2] = (Expression) coreOperationOr2;
      expressionArray1[3] = (Expression) coreOperationOr2;
      expressionArray1[4] = (Expression) coreOperationOr2;
      expressionArray1[5] = (Expression) coreOperationOr1;
      Step step3 = new Step(30, processingInstructionTest0, expressionArray1);
      stepArray0[3] = step3;
      Step step4 = new Step(30, processingInstructionTest0, expressionArray0);
      stepArray0[4] = step4;
      Step step5 = new Step(0, nodeTypeTest0, expressionArray0);
      stepArray0[5] = step5;
      Step step6 = new Step(1219, processingInstructionTest0, expressionArray1);
      stepArray0[6] = step6;
      ExpressionPath expressionPath0 = new ExpressionPath(expressionArray0[0], expressionArray0, stepArray0);
      expressionArray0[3] = (Expression) expressionPath0;
      CoreOperationNegate coreOperationNegate0 = new CoreOperationNegate(expressionArray1[0]);
      expressionArray0[4] = (Expression) coreOperationNegate0;
      QName qName0 = new QName(" ]rIbKV9", "()");
      VariableReference variableReference0 = new VariableReference(qName0);
      expressionArray0[5] = (Expression) variableReference0;
      CoreOperationUnion coreOperationUnion0 = new CoreOperationUnion(expressionArray1);
      expressionArray0[6] = (Expression) coreOperationUnion0;
      CoreOperationEqual coreOperationEqual0 = new CoreOperationEqual(coreOperationUnion0, variableReference0);
      expressionArray0[7] = (Expression) coreOperationEqual0;
      CoreFunction coreFunction0 = new CoreFunction(2400, expressionArray0);
      // Undeclared exception!
      coreFunction0.functionNormalizeSpace((EvalContext) null);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[5];
      Step[] stepArray0 = new Step[7];
      Step step0 = new Step(65528, (NodeTest) null, expressionArray0);
      stepArray0[0] = step0;
      Step step1 = new Step(13, (NodeTest) null, expressionArray0);
      stepArray0[1] = step1;
      Expression[] expressionArray1 = new Expression[8];
      Double double0 = Expression.NOT_A_NUMBER;
      Constant constant0 = new Constant(double0);
      CoreOperationEqual coreOperationEqual0 = new CoreOperationEqual(constant0, constant0);
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual(coreOperationEqual0, coreOperationEqual0);
      expressionArray1[0] = (Expression) coreOperationLessThanOrEqual0;
      CoreOperationAnd coreOperationAnd0 = new CoreOperationAnd(expressionArray1);
      expressionArray1[1] = (Expression) coreOperationAnd0;
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual1 = new CoreOperationLessThanOrEqual(expressionArray1[0], expressionArray1[0]);
      expressionArray1[2] = (Expression) coreOperationLessThanOrEqual1;
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual2 = new CoreOperationLessThanOrEqual(expressionArray1[0], expressionArray1[2]);
      expressionArray1[3] = (Expression) coreOperationLessThanOrEqual2;
      CoreOperationAnd coreOperationAnd1 = new CoreOperationAnd(expressionArray1);
      expressionArray1[4] = (Expression) coreOperationAnd1;
      CoreOperationAnd coreOperationAnd2 = new CoreOperationAnd(expressionArray0);
      expressionArray1[5] = (Expression) coreOperationAnd2;
      CoreOperationNegate coreOperationNegate0 = new CoreOperationNegate(expressionArray1[4]);
      expressionArray1[6] = (Expression) coreOperationNegate0;
      Constant constant1 = new Constant(double0);
      expressionArray1[7] = (Expression) constant1;
      Step step2 = new Step(32, (NodeTest) null, expressionArray1);
      stepArray0[2] = step2;
      Step step3 = new Step(65528, (NodeTest) null, expressionArray1);
      stepArray0[3] = step3;
      Step step4 = new Step(17, (NodeTest) null, expressionArray0);
      stepArray0[4] = step4;
      Step step5 = new Step(65528, (NodeTest) null, expressionArray1);
      stepArray0[5] = step5;
      Step step6 = new Step(32, (NodeTest) null, expressionArray0);
      stepArray0[6] = step6;
      LocationPath locationPath0 = new LocationPath(true, stepArray0);
      expressionArray0[0] = (Expression) locationPath0;
      CoreOperationAnd coreOperationAnd3 = new CoreOperationAnd(expressionArray1);
      expressionArray0[1] = (Expression) coreOperationAnd3;
      CoreOperationEqual coreOperationEqual1 = new CoreOperationEqual(locationPath0, coreOperationLessThanOrEqual0);
      expressionArray0[2] = (Expression) coreOperationEqual1;
      Constant constant2 = new Constant(double0);
      expressionArray0[3] = (Expression) constant2;
      CoreOperationOr coreOperationOr0 = new CoreOperationOr(expressionArray1);
      expressionArray0[4] = (Expression) coreOperationOr0;
      CoreFunction coreFunction0 = new CoreFunction(13, expressionArray0);
      // Undeclared exception!
//      try { 
        coreFunction0.functionNamespaceURI((EvalContext) null);
//        fail("Expecting exception: StackOverflowError");
      
//      } catch(StackOverflowError e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      Expression[] expressionArray1 = new Expression[7];
      CoreFunction coreFunction0 = new CoreFunction(1967, expressionArray0);
      coreFunction0.functionTrue((EvalContext) null);
      QName qName0 = new QName("count", "count");
      ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, expressionArray0);
      CoreOperationGreaterThanOrEqual coreOperationGreaterThanOrEqual0 = new CoreOperationGreaterThanOrEqual(extensionFunction0, extensionFunction0);
      expressionArray1[0] = (Expression) coreOperationGreaterThanOrEqual0;
      CoreOperationEqual coreOperationEqual0 = new CoreOperationEqual(extensionFunction0, coreOperationGreaterThanOrEqual0);
      expressionArray1[1] = (Expression) coreOperationEqual0;
      ExtensionFunction extensionFunction1 = new ExtensionFunction(qName0, expressionArray1);
      expressionArray1[2] = (Expression) extensionFunction1;
      Short short0 = new Short((short)29);
      Constant constant0 = new Constant(short0);
      expressionArray1[3] = (Expression) constant0;
      CoreOperationUnion coreOperationUnion0 = new CoreOperationUnion(expressionArray1);
      expressionArray1[4] = (Expression) coreOperationUnion0;
      CoreOperationNotEqual coreOperationNotEqual0 = new CoreOperationNotEqual(coreOperationUnion0, expressionArray1[1]);
      NameAttributeTest nameAttributeTest0 = new NameAttributeTest(expressionArray1[1], coreOperationNotEqual0);
      expressionArray1[5] = (Expression) nameAttributeTest0;
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd(expressionArray1);
      expressionArray1[6] = (Expression) coreOperationAdd0;
      CoreFunction coreFunction1 = new CoreFunction(1, expressionArray1);
      // Undeclared exception!
      coreFunction1.functionContains((EvalContext) null);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[9];
      EvalContext evalContext0 = null;
      CoreFunction coreFunction0 = new CoreFunction(30, expressionArray0);
      // Undeclared exception!
//      try { 
        coreFunction0.computeValue((EvalContext) null);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // Incorrect number of arguments: format-number(null, null, null, null, null, null, null, null, null)
//         //
//         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      Constant constant0 = new Constant("");
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("y/3DyDJ<g&.I");
      processingInstructionTest0.toString();
      Constant constant1 = new Constant("processing-instruction('y/3DyDJ<g&.I')");
      CoreOperationEqual coreOperationEqual0 = new CoreOperationEqual(constant1, constant0);
      Expression[] expressionArray0 = new Expression[2];
      expressionArray0[0] = (Expression) constant1;
      expressionArray0[1] = (Expression) coreOperationEqual0;
      CoreFunction coreFunction0 = new CoreFunction(17, expressionArray0);
      DescendantContext descendantContext0 = new DescendantContext((EvalContext) null, false, processingInstructionTest0);
      coreFunction0.functionSubstring(descendantContext0);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      Expression[] expressionArray1 = new Expression[8];
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd(expressionArray0);
      CoreOperationGreaterThanOrEqual coreOperationGreaterThanOrEqual0 = new CoreOperationGreaterThanOrEqual(coreOperationAdd0, coreOperationAdd0);
      CoreOperationNegate coreOperationNegate0 = new CoreOperationNegate(coreOperationGreaterThanOrEqual0);
      CoreOperationMod coreOperationMod0 = new CoreOperationMod(coreOperationNegate0, coreOperationGreaterThanOrEqual0);
      expressionArray1[0] = (Expression) coreOperationMod0;
      CoreOperationDivide coreOperationDivide0 = new CoreOperationDivide(coreOperationGreaterThanOrEqual0, expressionArray1[0]);
      expressionArray1[1] = (Expression) coreOperationDivide0;
      CoreOperationAnd coreOperationAnd0 = new CoreOperationAnd(expressionArray0);
      expressionArray1[2] = (Expression) coreOperationAnd0;
      CoreOperationUnion coreOperationUnion0 = new CoreOperationUnion(expressionArray0);
      expressionArray1[3] = (Expression) coreOperationUnion0;
      CoreOperationGreaterThan coreOperationGreaterThan0 = new CoreOperationGreaterThan(expressionArray1[3], coreOperationMod0);
      expressionArray1[4] = (Expression) coreOperationGreaterThan0;
      CoreOperationDivide coreOperationDivide1 = new CoreOperationDivide(expressionArray1[0], coreOperationUnion0);
      expressionArray1[5] = (Expression) coreOperationDivide1;
      ExtensionFunction extensionFunction0 = new ExtensionFunction((QName) null, expressionArray1);
      expressionArray1[6] = (Expression) extensionFunction0;
      coreOperationGreaterThan0.computeContextDependent();
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual(expressionArray1[5], expressionArray1[5]);
      expressionArray1[7] = (Expression) coreOperationLessThanOrEqual0;
      CoreFunction coreFunction0 = new CoreFunction((-1949), expressionArray1);
      // Undeclared exception!
//      try { 
        coreFunction0.functionConcat((EvalContext) null);
//        fail("Expecting exception: ArithmeticException");
      
//      } catch(ArithmeticException e) {
//         //
//         // / by zero
//         //
//         verifyException("org.apache.commons.jxpath.ri.compiler.CoreOperationMod", e);
//      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Expression[] expressionArray0 = new Expression[1];
      CoreOperationOr coreOperationOr0 = new CoreOperationOr(expressionArray0);
      expressionArray0[0] = (Expression) coreOperationOr0;
      CoreFunction coreFunction0 = new CoreFunction(1694, expressionArray0);
      PredicateContext predicateContext0 = new PredicateContext((EvalContext) null, expressionArray0[0]);
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest((String) null);
      ChildContext childContext0 = new ChildContext(predicateContext0, processingInstructionTest0, true, true);
      AncestorContext ancestorContext0 = new AncestorContext(childContext0, true, processingInstructionTest0);
      EvalContext[] evalContextArray0 = new EvalContext[8];
      evalContextArray0[0] = (EvalContext) ancestorContext0;
      evalContextArray0[1] = null;
      evalContextArray0[2] = (EvalContext) predicateContext0;
      evalContextArray0[3] = (EvalContext) ancestorContext0;
      evalContextArray0[4] = (EvalContext) ancestorContext0;
      evalContextArray0[5] = null;
      evalContextArray0[6] = (EvalContext) predicateContext0;
      evalContextArray0[7] = (EvalContext) predicateContext0;
      UnionContext unionContext0 = new UnionContext(ancestorContext0, evalContextArray0);
      // Undeclared exception!
      coreFunction0.functionCount(unionContext0);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      Constant constant0 = new Constant("GG");
      Constant constant1 = new Constant("GG");
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("C<54ykZoq_v}C<54ykZoq_v}");
      processingInstructionTest0.toString();
      CoreOperationEqual coreOperationEqual0 = new CoreOperationEqual(constant1, constant0);
      Expression[] expressionArray0 = new Expression[3];
      expressionArray0[0] = (Expression) coreOperationEqual0;
      expressionArray0[1] = (Expression) constant0;
      expressionArray0[2] = (Expression) constant1;
      CoreFunction coreFunction0 = new CoreFunction(2, expressionArray0);
      BasicNodeSet basicNodeSet0 = new BasicNodeSet();
      NodeSetContext nodeSetContext0 = new NodeSetContext((EvalContext) null, basicNodeSet0);
      DescendantContext descendantContext0 = new DescendantContext(nodeSetContext0, true, processingInstructionTest0);
      coreFunction0.functionSubstring(descendantContext0);
      // Undeclared exception!
//      try { 
        coreFunction0.functionKey(nodeSetContext0);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // Incorrect number of arguments: position(org.apache.commons.jxpath.ri.compiler.Constant@0000000002 = org.apache.commons.jxpath.ri.compiler.Constant@0000000001, 'GG', 'GG')
//         //
//         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "E8z<Sdg");
      Expression[] expressionArray0 = new Expression[6];
      Constant constant0 = new Constant("E8z<Sdg");
      expressionArray0[0] = (Expression) constant0;
      CoreOperationNegate coreOperationNegate0 = new CoreOperationNegate(expressionArray0[0]);
      expressionArray0[1] = (Expression) coreOperationNegate0;
      CoreOperationGreaterThan coreOperationGreaterThan0 = new CoreOperationGreaterThan(expressionArray0[0], expressionArray0[0]);
      expressionArray0[2] = (Expression) coreOperationGreaterThan0;
      CoreOperationOr coreOperationOr0 = new CoreOperationOr(expressionArray0);
      expressionArray0[3] = (Expression) coreOperationOr0;
      CoreOperationMultiply coreOperationMultiply0 = new CoreOperationMultiply(expressionArray0[2], coreOperationOr0);
      expressionArray0[4] = (Expression) coreOperationMultiply0;
      Step[] stepArray0 = new Step[9];
      QName qName0 = new QName("E8z<Sdg", "E8z<Sdg");
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
      Step step0 = new Step(3770, nodeNameTest0, expressionArray0);
      stepArray0[0] = step0;
      Step step1 = new Step((-88), nodeNameTest0, expressionArray0);
      stepArray0[1] = step1;
      Step step2 = new Step((-88), nodeNameTest0, expressionArray0);
      stepArray0[2] = step2;
      Step step3 = new Step((-88), nodeNameTest0, expressionArray0);
      stepArray0[3] = step3;
      Step step4 = new Step((-88), nodeNameTest0, expressionArray0);
      stepArray0[4] = step4;
      Step step5 = new Step(35, nodeNameTest0, expressionArray0);
      stepArray0[5] = step5;
      Step step6 = new Step((-1340), nodeNameTest0, expressionArray0);
      stepArray0[6] = step6;
      QName qName1 = new QName("h?zBVA~@8WT^,");
      NodeNameTest nodeNameTest1 = new NodeNameTest(qName1);
      Step step7 = new Step(3770, nodeNameTest1, expressionArray0);
      stepArray0[7] = step7;
      Step step8 = new Step(2, nodeNameTest0, expressionArray0);
      stepArray0[8] = step8;
      ExpressionPath expressionPath0 = new ExpressionPath(expressionArray0[0], expressionArray0, stepArray0);
      expressionArray0[5] = (Expression) expressionPath0;
      CoreFunction coreFunction0 = new CoreFunction(3336, expressionArray0);
      // Undeclared exception!
      coreFunction0.computeContextDependent();
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      Constant constant0 = new Constant("");
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("");
      processingInstructionTest0.toString();
      Expression[] expressionArray0 = new Expression[2];
      CoreOperationEqual coreOperationEqual0 = new CoreOperationEqual(constant0, constant0);
      expressionArray0[0] = (Expression) coreOperationEqual0;
      expressionArray0[1] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction(17, expressionArray0);
      DescendantContext descendantContext0 = new DescendantContext((EvalContext) null, false, processingInstructionTest0);
      coreFunction0.functionSubstring((EvalContext) null);
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      Constant constant0 = new Constant("[nJ{+9{=Erz");
      EvalContext evalContext0 = null;
      CoreFunction coreFunction0 = new CoreFunction(7, expressionArray0);
      CoreFunction coreFunction1 = new CoreFunction(7, expressionArray0);
      // Undeclared exception!
//      try { 
        coreFunction1.computeValue((EvalContext) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      EvalContext evalContext0 = null;
      Expression[] expressionArray0 = new Expression[4];
      ExtensionFunction extensionFunction0 = new ExtensionFunction((QName) null, expressionArray0);
      expressionArray0[0] = (Expression) extensionFunction0;
      CoreOperationGreaterThanOrEqual coreOperationGreaterThanOrEqual0 = new CoreOperationGreaterThanOrEqual(expressionArray0[0], extensionFunction0);
      expressionArray0[1] = (Expression) coreOperationGreaterThanOrEqual0;
      CoreFunction coreFunction0 = new CoreFunction(20, expressionArray0);
      Expression expression0 = coreFunction0.getArg1();
      expressionArray0[2] = expression0;
      Constant constant0 = new Constant("Szfk$N;3`@-E!8+");
      expressionArray0[3] = (Expression) constant0;
      CoreFunction coreFunction1 = new CoreFunction(12, expressionArray0);
      // Undeclared exception!
      coreFunction1.computeValue((EvalContext) null);
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      Constant constant0 = new Constant("GG");
      Expression[] expressionArray0 = new Expression[2];
      CoreOperationMod coreOperationMod0 = new CoreOperationMod(constant0, constant0);
      expressionArray0[0] = (Expression) coreOperationMod0;
      expressionArray0[1] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction((-143), expressionArray0);
      coreFunction0.computeValue((EvalContext) null);
      // Undeclared exception!
//      try { 
        coreFunction0.functionStartsWith((EvalContext) null);
//        fail("Expecting exception: ArithmeticException");
      
//      } catch(ArithmeticException e) {
//         //
//         // / by zero
//         //
//         verifyException("org.apache.commons.jxpath.ri.compiler.CoreOperationMod", e);
//      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      EvalContext evalContext0 = null;
      Expression[] expressionArray0 = new Expression[4];
      CoreOperationUnion coreOperationUnion0 = new CoreOperationUnion(expressionArray0);
      CoreOperationMod coreOperationMod0 = new CoreOperationMod(coreOperationUnion0, coreOperationUnion0);
      CoreOperationNotEqual coreOperationNotEqual0 = new CoreOperationNotEqual(coreOperationMod0, coreOperationMod0);
      expressionArray0[0] = (Expression) coreOperationNotEqual0;
      QName qName0 = new QName("org.apache.commons.jxpath.ri.parser.XPathParser$JJCalls");
      ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, expressionArray0);
      expressionArray0[1] = (Expression) extensionFunction0;
      VariableReference variableReference0 = new VariableReference(qName0);
      expressionArray0[2] = (Expression) variableReference0;
      QName qName1 = new QName("org.apache.commons.jxpath.ri.parser.XPathParser$JJCalls", "org.apache.commons.jxpath.ri.parser.XPathParser$JJCalls");
      ExtensionFunction extensionFunction1 = new ExtensionFunction(qName1, expressionArray0);
      CoreOperationSubtract coreOperationSubtract0 = new CoreOperationSubtract(coreOperationMod0, extensionFunction1);
      expressionArray0[3] = (Expression) coreOperationSubtract0;
      CoreFunction coreFunction0 = new CoreFunction(11, expressionArray0);
      // Undeclared exception!
//      try { 
        coreFunction0.functionConcat((EvalContext) null);
//        fail("Expecting exception: StackOverflowError");
      
//      } catch(StackOverflowError e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(26, expressionArray0);
      EvalContext evalContext0 = null;
      // Undeclared exception!
//      try { 
        coreFunction0.computeValue((EvalContext) null);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // Incorrect number of arguments: ceiling()
//         //
//         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(1020, (Expression[]) null);
      coreFunction0.getFunctionName();
      // Undeclared exception!
//      try { 
        coreFunction0.getArg3();
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "Cannot set value of an element of a ");
      int int0 = 2853;
      Expression[] expressionArray0 = new Expression[2];
      String string0 = "C<54ykZoq_v}C<54ykZoq_v}";
      QName qName0 = new QName("C<54ykZoq_v}C<54ykZoq_v}");
      VariableReference variableReference0 = new VariableReference(qName0);
      expressionArray0[0] = (Expression) variableReference0;
      ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, expressionArray0);
      expressionArray0[1] = (Expression) extensionFunction0;
      CoreFunction coreFunction0 = new CoreFunction(2853, expressionArray0);
      EvalContext evalContext0 = null;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      coreFunction0.computeValue((EvalContext) null);
      coreFunction0.compute((EvalContext) null);
      coreFunction0.getArg2();
      coreFunction0.computeValue((EvalContext) null);
      // Undeclared exception!
      coreFunction0.functionRound((EvalContext) null);
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(26, expressionArray0);
      boolean boolean0 = coreFunction0.computeContextDependent();
      assertEquals(26, coreFunction0.getFunctionCode());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      Long long0 = new Long(20);
      FileSystemHandling.shouldAllThrowIOExceptions();
      Constant constant0 = new Constant(long0);
      Expression[] expressionArray0 = new Expression[1];
      expressionArray0[0] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction(27, expressionArray0);
      CoreFunction coreFunction1 = new CoreFunction(27, expressionArray0);
      coreFunction0.computeContextDependent();
      CoreFunction coreFunction2 = new CoreFunction(20, expressionArray0);
      boolean boolean0 = coreFunction2.computeContextDependent();
      assertFalse(boolean0);
      
      coreFunction2.functionString((EvalContext) null);
      Object object0 = coreFunction1.functionRound((EvalContext) null);
      assertEquals(27, coreFunction1.getFunctionCode());
      assertEquals(20.0, object0);
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Expression[] expressionArray0 = new Expression[1];
      Expression[] expressionArray1 = new Expression[8];
      Step[] stepArray0 = new Step[1];
      QName qName0 = new QName("_H<^>[!j<U", "_H<^>[!j<U");
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, "_H<^>[!j<U");
      Expression[] expressionArray2 = new Expression[8];
      CoreOperationAnd coreOperationAnd0 = new CoreOperationAnd(expressionArray1);
      expressionArray2[0] = (Expression) coreOperationAnd0;
      NameAttributeTest nameAttributeTest0 = new NameAttributeTest(coreOperationAnd0, coreOperationAnd0);
      expressionArray2[1] = (Expression) nameAttributeTest0;
      CoreOperationLessThan coreOperationLessThan0 = new CoreOperationLessThan(coreOperationAnd0, expressionArray2[1]);
      expressionArray2[2] = (Expression) coreOperationLessThan0;
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual(nameAttributeTest0, expressionArray2[1]);
      expressionArray2[3] = (Expression) coreOperationLessThanOrEqual0;
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd(expressionArray1);
      expressionArray2[4] = (Expression) coreOperationAdd0;
      ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, expressionArray2);
      expressionArray2[5] = (Expression) extensionFunction0;
      ExtensionFunction extensionFunction1 = new ExtensionFunction(qName0, expressionArray0);
      NameAttributeTest nameAttributeTest1 = new NameAttributeTest(extensionFunction1, coreOperationLessThanOrEqual0);
      expressionArray2[6] = (Expression) nameAttributeTest1;
      ExtensionFunction extensionFunction2 = new ExtensionFunction(qName0, expressionArray0);
      expressionArray2[7] = (Expression) extensionFunction2;
      Step step0 = new Step(1409, nodeNameTest0, expressionArray2);
      stepArray0[0] = step0;
      LocationPath locationPath0 = new LocationPath(false, stepArray0);
      CoreOperationSubtract coreOperationSubtract0 = new CoreOperationSubtract(locationPath0, coreOperationLessThan0);
      expressionArray1[0] = (Expression) coreOperationSubtract0;
      CoreOperationUnion coreOperationUnion0 = new CoreOperationUnion(expressionArray0);
      expressionArray1[1] = (Expression) coreOperationUnion0;
      CoreOperationNotEqual coreOperationNotEqual0 = new CoreOperationNotEqual(nameAttributeTest0, expressionArray2[3]);
      expressionArray1[2] = (Expression) coreOperationNotEqual0;
      CoreOperationUnion coreOperationUnion1 = new CoreOperationUnion(expressionArray0);
      expressionArray1[3] = (Expression) coreOperationUnion1;
      Float float0 = new Float((-3119.51F));
      Constant constant0 = new Constant(float0);
      expressionArray1[4] = (Expression) constant0;
      CoreOperationGreaterThan coreOperationGreaterThan0 = new CoreOperationGreaterThan(extensionFunction1, coreOperationSubtract0);
      expressionArray1[5] = (Expression) coreOperationGreaterThan0;
      CoreOperationAdd coreOperationAdd1 = new CoreOperationAdd(expressionArray0);
      expressionArray1[6] = (Expression) coreOperationAdd1;
      VariableReference variableReference0 = new VariableReference(qName0);
      expressionArray1[7] = (Expression) variableReference0;
      CoreOperationOr coreOperationOr0 = new CoreOperationOr(expressionArray1);
      CoreOperationNegate coreOperationNegate0 = new CoreOperationNegate(coreOperationOr0);
      ExpressionPath expressionPath0 = new ExpressionPath(coreOperationNegate0, expressionArray0, stepArray0);
      expressionArray0[0] = (Expression) expressionPath0;
      CoreFunction coreFunction0 = new CoreFunction(1409, expressionArray0);
      // Undeclared exception!
//      try { 
        coreFunction0.functionContains((EvalContext) null);
//        fail("Expecting exception: StackOverflowError");
      
//      } catch(StackOverflowError e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      Long long0 = new Long(20);
      FileSystemHandling.shouldAllThrowIOExceptions();
      Constant constant0 = new Constant(long0);
      Expression[] expressionArray0 = new Expression[1];
      expressionArray0[0] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction(27, expressionArray0);
      CoreFunction coreFunction1 = new CoreFunction(27, expressionArray0);
      boolean boolean0 = coreFunction0.computeContextDependent();
      assertFalse(boolean0);
      
      CoreFunction coreFunction2 = new CoreFunction(20, expressionArray0);
      coreFunction2.functionString((EvalContext) null);
      assertEquals(20, coreFunction2.getFunctionCode());
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      Constant constant0 = new Constant("An EntityRef is not allowed at the document root");
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(17);
      Expression[] expressionArray0 = new Expression[2];
      expressionArray0[0] = (Expression) constant0;
      expressionArray0[1] = (Expression) constant0;
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("An EntityRef is not allowed at the document root");
      processingInstructionTest0.toString();
      CoreFunction coreFunction0 = new CoreFunction(17, expressionArray0);
      DescendantContext descendantContext0 = new DescendantContext((EvalContext) null, false, processingInstructionTest0);
      ParentContext parentContext0 = new ParentContext(descendantContext0, nodeTypeTest0);
      SelfContext selfContext0 = new SelfContext(parentContext0, nodeTypeTest0);
      coreFunction0.functionSubstring(selfContext0);
      // Undeclared exception!
//      try { 
        coreFunction0.functionString(parentContext0);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // Incorrect number of arguments: translate('An EntityRef is not allowed at the document root', 'An EntityRef is not allowed at the document root')
//         //
//         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      Constant constant0 = new Constant("[nJ{+9{=Erz");
      expressionArray0[0] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction(6, expressionArray0);
      Object object0 = coreFunction0.computeValue((EvalContext) null);
      assertNotNull(object0);
      
      coreFunction0.functionName((EvalContext) null);
      assertEquals(6, coreFunction0.getFunctionCode());
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[4];
      Constant constant0 = new Constant((Number) null);
      expressionArray0[0] = (Expression) constant0;
      QName qName0 = new QName("", "");
      ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, expressionArray0);
      expressionArray0[1] = (Expression) extensionFunction0;
      Constant constant1 = new Constant((Number) null);
      expressionArray0[2] = (Expression) constant1;
      CoreOperationLessThan coreOperationLessThan0 = new CoreOperationLessThan(constant1, extensionFunction0);
      expressionArray0[3] = (Expression) coreOperationLessThan0;
      CoreFunction coreFunction0 = new CoreFunction(0, expressionArray0);
      Step[] stepArray0 = new Step[0];
      ExpressionPath expressionPath0 = new ExpressionPath(expressionArray0[3], expressionArray0, stepArray0);
      EvalContext evalContext0 = expressionPath0.createContextForStep((EvalContext) null, 2, (NodeTest) null);
      // Undeclared exception!
      coreFunction0.functionFloor(evalContext0);
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      Constant constant0 = new Constant("");
      expressionArray0[0] = (Expression) constant0;
      Double double0 = Expression.ONE;
      CoreFunction coreFunction0 = new CoreFunction(19, expressionArray0);
      QName qName0 = new QName("");
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
      PrecedingOrFollowingContext precedingOrFollowingContext0 = new PrecedingOrFollowingContext((EvalContext) null, nodeNameTest0, false);
      coreFunction0.functionNot(precedingOrFollowingContext0);
      CoreFunction coreFunction1 = new CoreFunction(19, expressionArray0);
      coreFunction0.computeContextDependent();
      CoreFunction coreFunction2 = new CoreFunction(13, expressionArray0);
      coreFunction2.functionString((EvalContext) null);
      // Undeclared exception!
//      try { 
        coreFunction1.getArg3();
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 2
//         //
//         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      EvalContext evalContext0 = null;
      Long long0 = new Long(20);
      FileSystemHandling.shouldAllThrowIOExceptions();
      Constant constant0 = new Constant(long0);
      CoreFunction coreFunction0 = new CoreFunction(8, expressionArray0);
      // Undeclared exception!
//      try { 
        coreFunction0.compute((EvalContext) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      EvalContext evalContext0 = null;
      Expression[] expressionArray1 = new Expression[6];
      CoreOperationNegate coreOperationNegate0 = new CoreOperationNegate((Expression) null);
      expressionArray1[0] = (Expression) coreOperationNegate0;
      CoreOperationMod coreOperationMod0 = new CoreOperationMod(expressionArray1[0], (Expression) null);
      CoreOperationDivide coreOperationDivide0 = new CoreOperationDivide(coreOperationNegate0, coreOperationMod0);
      NameAttributeTest nameAttributeTest0 = new NameAttributeTest(coreOperationDivide0, coreOperationDivide0);
      expressionArray1[1] = (Expression) nameAttributeTest0;
      CoreOperationGreaterThan coreOperationGreaterThan0 = new CoreOperationGreaterThan(coreOperationNegate0, coreOperationNegate0);
      expressionArray1[2] = (Expression) coreOperationGreaterThan0;
      CoreFunction coreFunction0 = new CoreFunction(13, expressionArray1);
      Expression expression0 = coreFunction0.getArg1();
      expressionArray1[3] = expression0;
      Constant constant0 = new Constant((Number) null);
      expressionArray1[4] = (Expression) constant0;
      CoreOperationAnd coreOperationAnd0 = new CoreOperationAnd(expressionArray0);
      expressionArray1[5] = (Expression) coreOperationAnd0;
      CoreFunction coreFunction1 = new CoreFunction(3, expressionArray1);
      CoreFunction coreFunction2 = new CoreFunction(13, expressionArray1);
      PredicateContext predicateContext0 = new PredicateContext((EvalContext) null, coreFunction2);
      // Undeclared exception!
//      try { 
        coreFunction0.computeValue(predicateContext0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.evosuite.runtime.System", e);
//      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      Constant constant0 = new Constant("");
      Expression[] expressionArray0 = new Expression[1];
      expressionArray0[0] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction(5, expressionArray0);
      CoreFunction coreFunction1 = new CoreFunction(5, expressionArray0);
      Object object0 = coreFunction1.compute((EvalContext) null);
      assertNotNull(object0);
      
      coreFunction0.functionNormalizeSpace((EvalContext) null);
      assertEquals(5, coreFunction0.getFunctionCode());
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      Expression[] expressionArray1 = new Expression[6];
      Expression[] expressionArray2 = null;
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd((Expression[]) null);
      expressionArray1[0] = (Expression) coreOperationAdd0;
      CoreOperationMultiply coreOperationMultiply0 = new CoreOperationMultiply(expressionArray1[0], coreOperationAdd0);
      expressionArray1[1] = (Expression) coreOperationMultiply0;
      QName qName0 = new QName("~w;p7kOlR^)ydtq", "~w;p7kOlR^)ydtq");
      VariableReference variableReference0 = new VariableReference(qName0);
      expressionArray1[2] = (Expression) variableReference0;
      CoreOperationAnd coreOperationAnd0 = new CoreOperationAnd(expressionArray0);
      expressionArray1[5] = (Expression) coreOperationAnd0;
      CoreFunction coreFunction0 = new CoreFunction(18, expressionArray1);
      coreFunction0.getArg1();
      // Undeclared exception!
//      try { 
        coreFunction0.computeValue((EvalContext) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[7];
      CoreOperationUnion coreOperationUnion0 = new CoreOperationUnion(expressionArray0);
      CoreOperationNegate coreOperationNegate0 = new CoreOperationNegate(coreOperationUnion0);
      expressionArray0[0] = (Expression) coreOperationNegate0;
      CoreOperationNegate coreOperationNegate1 = new CoreOperationNegate(coreOperationUnion0);
      VariableReference variableReference0 = new VariableReference((QName) null);
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual(coreOperationNegate1, variableReference0);
      expressionArray0[1] = (Expression) coreOperationLessThanOrEqual0;
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd(expressionArray0);
      expressionArray0[2] = (Expression) coreOperationAdd0;
      CoreOperationMod coreOperationMod0 = new CoreOperationMod(coreOperationNegate1, expressionArray0[1]);
      expressionArray0[3] = (Expression) coreOperationMod0;
      CoreOperationEqual coreOperationEqual0 = new CoreOperationEqual(coreOperationMod0, expressionArray0[1]);
      expressionArray0[4] = (Expression) coreOperationEqual0;
      Step[] stepArray0 = new Step[1];
      Step step0 = new Step((-456), (NodeTest) null, expressionArray0);
      stepArray0[0] = step0;
      LocationPath locationPath0 = new LocationPath(false, stepArray0);
      expressionArray0[5] = (Expression) locationPath0;
      CoreOperationGreaterThanOrEqual coreOperationGreaterThanOrEqual0 = new CoreOperationGreaterThanOrEqual(variableReference0, expressionArray0[5]);
      CoreOperationMultiply coreOperationMultiply0 = new CoreOperationMultiply(coreOperationNegate0, coreOperationGreaterThanOrEqual0);
      expressionArray0[6] = (Expression) coreOperationMultiply0;
      CoreFunction coreFunction0 = new CoreFunction((-132774720), expressionArray0);
      // Undeclared exception!
      coreFunction0.toString();
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      EvalContext evalContext0 = null;
      Expression[] expressionArray0 = new Expression[3];
      QName qName0 = new QName((String) null, "");
      ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, expressionArray0);
      expressionArray0[0] = (Expression) extensionFunction0;
      CoreOperationEqual coreOperationEqual0 = new CoreOperationEqual(extensionFunction0, extensionFunction0);
      expressionArray0[1] = (Expression) coreOperationEqual0;
      CoreFunction coreFunction0 = new CoreFunction((-3490), expressionArray0);
      Expression expression0 = coreFunction0.getArg2();
      expressionArray0[2] = expression0;
      CoreFunction coreFunction1 = new CoreFunction((-2629), expressionArray0);
      // Undeclared exception!
//      try { 
        coreFunction1.functionLocalName((EvalContext) null);
//        fail("Expecting exception: StackOverflowError");
      
//      } catch(StackOverflowError e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      EvalContext evalContext0 = null;
      CoreFunction coreFunction0 = new CoreFunction(10, expressionArray0);
      // Undeclared exception!
//      try { 
        coreFunction0.computeValue((EvalContext) null);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // Incorrect number of arguments: starts-with(null)
//         //
//         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(2417, expressionArray0);
      JXPathContext jXPathContext0 = JXPathContext.newContext((Object) coreFunction0);
      DecimalFormat decimalFormat0 = new DecimalFormat();
      JXPathContext jXPathContext1 = JXPathContext.newContext(jXPathContext0, (Object) decimalFormat0);
      Locale locale0 = Locale.GERMAN;
      NodePointer nodePointer0 = NodePointer.newNodePointer((QName) null, decimalFormat0, locale0);
      NodePointer nodePointer1 = NodePointer.newChildNodePointer(nodePointer0, (QName) null, decimalFormat0);
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = new JXPathContextReferenceImpl(jXPathContext1, coreFunction0, nodePointer1);
      RootContext rootContext0 = new RootContext(jXPathContextReferenceImpl0, nodePointer0);
      coreFunction0.functionNamespaceURI(rootContext0);
      EvalContext evalContext0 = null;
      // Undeclared exception!
//      try { 
        coreFunction0.functionStringLength((EvalContext) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      Constant constant0 = new Constant("An EntityRef is not allowed at the document root");
      Expression[] expressionArray0 = new Expression[9];
      expressionArray0[0] = (Expression) constant0;
      expressionArray0[1] = (Expression) constant0;
      expressionArray0[2] = (Expression) constant0;
      expressionArray0[3] = (Expression) constant0;
      expressionArray0[4] = (Expression) constant0;
      expressionArray0[5] = (Expression) constant0;
      expressionArray0[6] = (Expression) constant0;
      CoreOperationDivide coreOperationDivide0 = new CoreOperationDivide(expressionArray0[0], expressionArray0[0]);
      expressionArray0[7] = (Expression) coreOperationDivide0;
      CoreOperationMod coreOperationMod0 = new CoreOperationMod(expressionArray0[7], coreOperationDivide0);
      expressionArray0[8] = (Expression) coreOperationMod0;
      CoreFunction coreFunction0 = new CoreFunction(12, expressionArray0);
      QName qName0 = new QName("An EntityRef is not allowed at the document root");
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
      Step step0 = new Step(967, nodeNameTest0, expressionArray0);
      Step[] stepArray0 = new Step[1];
      stepArray0[0] = step0;
      ExpressionPath expressionPath0 = new ExpressionPath(expressionArray0[7], expressionArray0, stepArray0);
      EvalContext evalContext0 = null;
      EvalContext evalContext1 = expressionPath0.evalSteps((EvalContext) null);
      // Undeclared exception!
//      try { 
        coreFunction0.computeValue(evalContext1);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // Incorrect number of arguments: substring-before('An EntityRef is not allowed at the document root', 'An EntityRef is not allowed at the document root', 'An EntityRef is not allowed at the document root', 'An EntityRef is not allowed at the document root', 'An EntityRef is not allowed at the document root', 'An EntityRef is not allowed at the document root', 'An EntityRef is not allowed at the document root', org.apache.commons.jxpath.ri.compiler.Constant@0000000001 div org.apache.commons.jxpath.ri.compiler.Constant@0000000001, org.apache.commons.jxpath.ri.compiler.CoreOperationDivide@0000000002 mod (org.apache.commons.jxpath.ri.compiler.CoreOperationDivide@0000000002))
//         //
//         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      Expression[] expressionArray1 = new Expression[3];
      QName qName0 = new QName("uNfKs,2wa/z*r");
      VariableReference variableReference0 = new VariableReference(qName0);
      expressionArray1[0] = (Expression) variableReference0;
      QName qName1 = new QName("uNfKs,2wa/z*r", "VPDJM/f~3");
      ExtensionFunction extensionFunction0 = new ExtensionFunction(qName1, expressionArray1);
      expressionArray1[1] = (Expression) extensionFunction0;
      Step[] stepArray0 = new Step[6];
      QName qName2 = new QName("VPDJM/f~3", "uIr>R>60-Jr:DuoO");
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName2);
      Step step0 = new Step((-725), nodeNameTest0, expressionArray0);
      stepArray0[0] = step0;
      Step step1 = new Step(9, nodeNameTest0, expressionArray0);
      stepArray0[1] = step1;
      Step step2 = new Step((-725), nodeNameTest0, expressionArray1);
      stepArray0[2] = step2;
      Step step3 = new Step(45, nodeNameTest0, expressionArray0);
      stepArray0[3] = step3;
      Step step4 = new Step(9, nodeNameTest0, expressionArray1);
      stepArray0[4] = step4;
      Step step5 = new Step(45, nodeNameTest0, expressionArray1);
      stepArray0[5] = step5;
      ExpressionPath expressionPath0 = new ExpressionPath(variableReference0, expressionArray1, stepArray0);
      expressionArray1[2] = (Expression) expressionPath0;
      CoreFunction coreFunction0 = new CoreFunction((-725), expressionArray1);
      coreFunction0.computeValue((EvalContext) null);
      // Undeclared exception!
      coreFunction0.functionString((EvalContext) null);
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      Constant constant0 = new Constant("An EntityRef is not allowed at the document root");
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(2);
      Expression[] expressionArray0 = new Expression[2];
      expressionArray0[0] = (Expression) constant0;
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("An EntityRef is not allowed at the document root");
      processingInstructionTest0.toString();
      FileSystemHandling.shouldAllThrowIOExceptions();
      PredicateContext predicateContext0 = new PredicateContext((EvalContext) null, expressionArray0[0]);
      CoreFunction coreFunction0 = new CoreFunction((-15), expressionArray0);
      coreFunction0.toString();
      // Undeclared exception!
//      try { 
        coreFunction0.functionSubstringBefore(predicateContext0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      EvalContext evalContext0 = null;
      CoreFunction coreFunction0 = new CoreFunction(5, expressionArray0);
      CoreFunction coreFunction1 = new CoreFunction(5, expressionArray0);
      // Undeclared exception!
//      try { 
        coreFunction1.computeValue((EvalContext) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      String string0 = "";
      Constant constant0 = new Constant("");
      CoreFunction coreFunction0 = new CoreFunction(15, expressionArray0);
      EvalContext evalContext0 = null;
      BasicNodeSet basicNodeSet0 = new BasicNodeSet();
      NodeSetContext nodeSetContext0 = new NodeSetContext((EvalContext) null, basicNodeSet0);
      EvalContext[] evalContextArray0 = new EvalContext[0];
      UnionContext unionContext0 = new UnionContext(nodeSetContext0, evalContextArray0);
      // Undeclared exception!
//      try { 
        coreFunction0.computeValue(unionContext0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      Constant constant0 = new Constant("An EntityRef is not allowed at the document root");
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(2);
      Expression[] expressionArray0 = new Expression[2];
      expressionArray0[0] = (Expression) constant0;
      expressionArray0[1] = (Expression) constant0;
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("An EntityRef is not allowed at the document root");
      processingInstructionTest0.toString();
      FileSystemHandling.shouldAllThrowIOExceptions();
      PredicateContext predicateContext0 = new PredicateContext((EvalContext) null, expressionArray0[0]);
      CoreFunction coreFunction0 = new CoreFunction((-15), expressionArray0);
      String string0 = coreFunction0.toString();
      assertEquals("unknownFunction-15()('An EntityRef is not allowed at the document root', 'An EntityRef is not allowed at the document root')", string0);
      
      Object object0 = coreFunction0.functionSubstringBefore(predicateContext0);
      assertEquals("", object0);
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      EvalContext evalContext0 = null;
      CoreFunction coreFunction0 = new CoreFunction(14, expressionArray0);
      CoreFunction coreFunction1 = new CoreFunction(14, expressionArray0);
      // Undeclared exception!
//      try { 
        coreFunction1.computeValue((EvalContext) null);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // Incorrect number of arguments: substring(null)
//         //
//         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      EvalContext evalContext0 = null;
      Expression[] expressionArray0 = new Expression[8];
      Constant constant0 = new Constant((String) null);
      CoreOperationEqual coreOperationEqual0 = new CoreOperationEqual(constant0, constant0);
      expressionArray0[0] = (Expression) coreOperationEqual0;
      Step[] stepArray0 = new Step[1];
      Step step0 = new Step((-2816), (NodeTest) null, expressionArray0);
      stepArray0[0] = step0;
      LocationPath locationPath0 = new LocationPath(true, stepArray0);
      expressionArray0[1] = (Expression) locationPath0;
      CoreFunction coreFunction0 = new CoreFunction(6, expressionArray0);
      Expression expression0 = coreFunction0.getArg2();
      expressionArray0[2] = expression0;
      CoreOperationGreaterThan coreOperationGreaterThan0 = new CoreOperationGreaterThan(expressionArray0[0], expressionArray0[3]);
      expressionArray0[4] = (Expression) coreOperationGreaterThan0;
      coreFunction0.getArg3();
      CoreOperationGreaterThan coreOperationGreaterThan1 = new CoreOperationGreaterThan(expressionArray0[0], expressionArray0[0]);
      expressionArray0[6] = (Expression) coreOperationGreaterThan1;
      Constant constant1 = new Constant((String) null);
      expressionArray0[7] = (Expression) constant1;
      CoreFunction coreFunction1 = new CoreFunction(6, expressionArray0);
      // Undeclared exception!
      coreFunction0.computeValue((EvalContext) null);
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      int int0 = 75;
      Expression[] expressionArray0 = null;
      CoreFunction coreFunction0 = new CoreFunction(75, (Expression[]) null);
      // Undeclared exception!
//      try { 
        coreFunction0.getArg2();
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      Long long0 = new Long(20);
      FileSystemHandling.shouldAllThrowIOExceptions();
      Constant constant0 = new Constant(long0);
      CoreFunction coreFunction0 = new CoreFunction(20, expressionArray0);
      // Undeclared exception!
//      try { 
        coreFunction0.functionNormalizeSpace((EvalContext) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(18, expressionArray0);
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("*");
      NamespaceContext namespaceContext0 = new NamespaceContext((EvalContext) null, processingInstructionTest0);
      PrecedingOrFollowingContext precedingOrFollowingContext0 = new PrecedingOrFollowingContext((EvalContext) null, processingInstructionTest0, true);
      coreFunction0.functionNumber(precedingOrFollowingContext0);
      coreFunction0.computeContextDependent();
      // Undeclared exception!
//      try { 
        coreFunction0.functionNamespaceURI(namespaceContext0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[6];
      CoreFunction coreFunction0 = new CoreFunction(3, expressionArray0);
      EvalContext evalContext0 = null;
      // Undeclared exception!
//      try { 
        coreFunction0.computeValue((EvalContext) null);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // Incorrect number of arguments: count(null, null, null, null, null, null)
//         //
//         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "Z&>IcR0k^Sv|~~fK%");
      Expression[] expressionArray0 = new Expression[7];
      LocationPath locationPath0 = new LocationPath(false, (Step[]) null);
      CoreOperationSubtract coreOperationSubtract0 = new CoreOperationSubtract(locationPath0, locationPath0);
      expressionArray0[0] = (Expression) coreOperationSubtract0;
      QName qName0 = new QName("Z&>IcR0k^Sv|~~fK%");
      VariableReference variableReference0 = new VariableReference(qName0);
      expressionArray0[1] = (Expression) variableReference0;
      CoreOperationGreaterThan coreOperationGreaterThan0 = new CoreOperationGreaterThan(variableReference0, expressionArray0[0]);
      expressionArray0[2] = (Expression) coreOperationGreaterThan0;
      ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, expressionArray0);
      expressionArray0[3] = (Expression) extensionFunction0;
      LocationPath locationPath1 = new LocationPath(false, (Step[]) null);
      expressionArray0[4] = (Expression) locationPath1;
      Expression[] expressionArray1 = new Expression[8];
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual(variableReference0, expressionArray0[0]);
      expressionArray1[0] = (Expression) coreOperationLessThanOrEqual0;
      expressionArray1[1] = (Expression) variableReference0;
      expressionArray1[2] = (Expression) extensionFunction0;
      expressionArray1[3] = (Expression) variableReference0;
      expressionArray1[4] = (Expression) coreOperationGreaterThan0;
      expressionArray1[5] = (Expression) variableReference0;
      expressionArray1[6] = (Expression) locationPath0;
      expressionArray1[7] = (Expression) locationPath0;
      CoreOperationUnion coreOperationUnion0 = new CoreOperationUnion(expressionArray1);
      expressionArray0[5] = (Expression) coreOperationUnion0;
      NameAttributeTest nameAttributeTest0 = new NameAttributeTest(expressionArray1[2], expressionArray0[5]);
      expressionArray0[6] = (Expression) nameAttributeTest0;
      CoreFunction coreFunction0 = new CoreFunction(1, expressionArray0);
      // Undeclared exception!
      coreFunction0.functionLocalName((EvalContext) null);
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      CoreOperationDivide coreOperationDivide0 = new CoreOperationDivide((Expression) null, (Expression) null);
      Long long0 = new Long(798L);
      Constant constant0 = new Constant(long0);
      Expression[] expressionArray0 = new Expression[1];
      expressionArray0[0] = (Expression) constant0;
      Expression[] expressionArray1 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(14, expressionArray1);
      // Undeclared exception!
//      try { 
        coreFunction0.compute((EvalContext) null);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // Incorrect number of arguments: substring()
//         //
//         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[2];
      Step[] stepArray0 = new Step[9];
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("translate");
      Step step0 = new Step(13, processingInstructionTest0, expressionArray0);
      stepArray0[0] = step0;
      Step step1 = new Step((-2413), processingInstructionTest0, expressionArray0);
      stepArray0[1] = step1;
      QName qName0 = new QName("name", "@_c");
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, "name");
      Step step2 = new Step(17, nodeNameTest0, expressionArray0);
      stepArray0[2] = step2;
      Step step3 = new Step((-2489), nodeNameTest0, expressionArray0);
      stepArray0[3] = step3;
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(3895);
      Step step4 = new Step((-1891), nodeTypeTest0, expressionArray0);
      stepArray0[4] = step4;
      Step step5 = new Step((-2489), nodeNameTest0, expressionArray0);
      stepArray0[5] = step5;
      Step step6 = new Step(0, nodeNameTest0, expressionArray0);
      stepArray0[6] = step6;
      NodeNameTest nodeNameTest1 = new NodeNameTest(qName0);
      Step step7 = new Step(17, nodeNameTest1, expressionArray0);
      stepArray0[7] = step7;
      Step step8 = new Step(3895, nodeTypeTest0, expressionArray0);
      stepArray0[8] = step8;
      LocationPath locationPath0 = new LocationPath(false, stepArray0);
      expressionArray0[0] = (Expression) locationPath0;
      CoreOperationMod coreOperationMod0 = new CoreOperationMod(expressionArray0[0], locationPath0);
      expressionArray0[1] = (Expression) coreOperationMod0;
      CoreFunction coreFunction0 = new CoreFunction((-1602), expressionArray0);
      // Undeclared exception!
//      try { 
        coreFunction0.functionFloor((EvalContext) null);
//        fail("Expecting exception: StackOverflowError");
      
//      } catch(StackOverflowError e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      Long long0 = new Long(121L);
      CoreFunction coreFunction0 = new CoreFunction((-3792), expressionArray0);
      // Undeclared exception!
//      try { 
        coreFunction0.functionCeiling((EvalContext) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[8];
      Constant constant0 = new Constant("$2q*DUdedGxq@Em>$I");
      expressionArray0[0] = (Expression) constant0;
      Constant constant1 = new Constant("");
      expressionArray0[1] = (Expression) constant1;
      Step[] stepArray0 = new Step[8];
      QName qName0 = new QName("}");
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
      Step step0 = new Step(25, nodeNameTest0, expressionArray0);
      stepArray0[0] = step0;
      Step step1 = new Step(25, nodeNameTest0, expressionArray0);
      stepArray0[1] = step1;
      Step step2 = new Step(25, nodeNameTest0, expressionArray0);
      stepArray0[2] = step2;
      Step step3 = new Step(41, nodeNameTest0, expressionArray0);
      stepArray0[3] = step3;
      Step step4 = new Step(1875, (NodeTest) null, expressionArray0);
      stepArray0[4] = step4;
      Step step5 = new Step(41, (NodeTest) null, expressionArray0);
      stepArray0[5] = step5;
      Step step6 = new Step(425, nodeNameTest0, expressionArray0);
      stepArray0[6] = step6;
      Step step7 = new Step(37, (NodeTest) null, expressionArray0);
      stepArray0[7] = step7;
      ExpressionPath expressionPath0 = new ExpressionPath(expressionArray0[0], expressionArray0, stepArray0);
      expressionArray0[2] = (Expression) expressionPath0;
      CoreOperationNotEqual coreOperationNotEqual0 = new CoreOperationNotEqual(constant0, expressionArray0[0]);
      expressionArray0[3] = (Expression) coreOperationNotEqual0;
      ExpressionPath expressionPath1 = new ExpressionPath(expressionArray0[3], expressionArray0, stepArray0);
      expressionArray0[4] = (Expression) expressionPath1;
      NameAttributeTest nameAttributeTest0 = new NameAttributeTest(constant0, expressionArray0[2]);
      expressionArray0[5] = (Expression) nameAttributeTest0;
      CoreOperationDivide coreOperationDivide0 = new CoreOperationDivide(expressionArray0[4], expressionArray0[5]);
      expressionArray0[6] = (Expression) coreOperationDivide0;
      CoreOperationEqual coreOperationEqual0 = new CoreOperationEqual(coreOperationNotEqual0, constant0);
      expressionArray0[7] = (Expression) coreOperationEqual0;
      CoreFunction coreFunction0 = new CoreFunction(37, expressionArray0);
      PredicateContext predicateContext0 = new PredicateContext((EvalContext) null, expressionArray0[0]);
      AncestorContext ancestorContext0 = new AncestorContext(predicateContext0, false, (NodeTest) null);
      AttributeContext attributeContext0 = new AttributeContext(ancestorContext0, nodeNameTest0);
      // Undeclared exception!
      coreFunction0.functionTrue(attributeContext0);
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      Constant constant0 = new Constant("Jb(fpVfB -zDfO?{");
      Expression[] expressionArray0 = new Expression[4];
      expressionArray0[0] = (Expression) constant0;
      CoreOperationNegate coreOperationNegate0 = new CoreOperationNegate(expressionArray0[0]);
      expressionArray0[1] = (Expression) coreOperationNegate0;
      Step[] stepArray0 = new Step[8];
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(94);
      Step step0 = new Step(28, nodeTypeTest0, expressionArray0);
      stepArray0[0] = step0;
      Step step1 = new Step(28, nodeTypeTest0, expressionArray0);
      stepArray0[1] = step1;
      Step step2 = new Step(28, nodeTypeTest0, expressionArray0);
      stepArray0[2] = step2;
      Step step3 = new Step(94, nodeTypeTest0, expressionArray0);
      stepArray0[3] = step3;
      Step step4 = new Step((-1509), nodeTypeTest0, expressionArray0);
      stepArray0[4] = step4;
      Step step5 = new Step(32, nodeTypeTest0, expressionArray0);
      stepArray0[5] = step5;
      QName qName0 = new QName("=>{4j}%s2ye2Xl/Z", "=>{4j}%s2ye2Xl/Z");
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, "j%-r3.msljcJB");
      Expression[] expressionArray1 = new Expression[3];
      expressionArray1[0] = (Expression) constant0;
      expressionArray1[1] = (Expression) constant0;
      expressionArray1[2] = (Expression) coreOperationNegate0;
      Step step6 = new Step((-1509), nodeNameTest0, expressionArray1);
      stepArray0[6] = step6;
      Step step7 = new Step(32, nodeTypeTest0, expressionArray0);
      stepArray0[7] = step7;
      LocationPath locationPath0 = new LocationPath(true, stepArray0);
      expressionArray0[2] = (Expression) locationPath0;
      expressionArray0[3] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction(28, expressionArray0);
      BasicNodeSet basicNodeSet0 = new BasicNodeSet();
      NodeSetContext nodeSetContext0 = new NodeSetContext((EvalContext) null, basicNodeSet0);
      EvalContext[] evalContextArray0 = new EvalContext[3];
      evalContextArray0[0] = null;
      evalContextArray0[1] = (EvalContext) nodeSetContext0;
      evalContextArray0[2] = null;
      UnionContext unionContext0 = new UnionContext(nodeSetContext0, evalContextArray0);
      DescendantContext descendantContext0 = new DescendantContext(unionContext0, true, nodeTypeTest0);
      SelfContext selfContext0 = new SelfContext(descendantContext0, nodeNameTest0);
      // Undeclared exception!
      coreFunction0.functionNumber(selfContext0);
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      EvalContext evalContext0 = null;
      Expression[] expressionArray0 = new Expression[4];
      Expression[] expressionArray1 = new Expression[3];
      expressionArray1[0] = null;
      expressionArray1[1] = null;
      expressionArray1[2] = null;
      CoreFunction coreFunction0 = new CoreFunction(16, expressionArray1);
      // Undeclared exception!
//      try { 
        coreFunction0.computeValue((EvalContext) null);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // Incorrect number of arguments: normalize-space(null, null, null)
//         //
//         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[2];
      CoreFunction coreFunction0 = new CoreFunction(22, expressionArray0);
      EvalContext evalContext0 = null;
      // Undeclared exception!
//      try { 
        coreFunction0.functionStartsWith((EvalContext) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(24);
      CoreFunction coreFunction0 = new CoreFunction(24, (Expression[]) null);
      boolean boolean0 = coreFunction0.computeContextDependent();
      assertFalse(boolean0);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      String string0 = coreFunction0.toString();
      assertEquals("sum()", string0);
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      Constant constant0 = new Constant("C<54ykZoq_v}");
      Expression[] expressionArray0 = new Expression[8];
      expressionArray0[0] = (Expression) constant0;
      expressionArray0[1] = (Expression) constant0;
      expressionArray0[2] = (Expression) constant0;
      expressionArray0[3] = (Expression) constant0;
      expressionArray0[4] = (Expression) constant0;
      expressionArray0[5] = (Expression) constant0;
      expressionArray0[6] = (Expression) constant0;
      expressionArray0[7] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction(12, expressionArray0);
      boolean boolean0 = coreFunction0.computeContextDependent();
      assertFalse(boolean0);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      coreFunction0.getArg3();
      assertEquals(12, coreFunction0.getFunctionCode());
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      Constant constant0 = new Constant("C<54ykZoq_v}");
      Expression[] expressionArray0 = new Expression[2];
      expressionArray0[0] = (Expression) constant0;
      expressionArray0[1] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction(0, expressionArray0);
      Object object0 = coreFunction0.functionStartsWith((EvalContext) null);
      assertEquals(true, object0);
      assertEquals(0, coreFunction0.getFunctionCode());
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "E}=CoG1[K+9qEEX6UT");
      Expression[] expressionArray0 = new Expression[2];
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd(expressionArray0);
      CoreOperationMultiply coreOperationMultiply0 = new CoreOperationMultiply(coreOperationAdd0, coreOperationAdd0);
      expressionArray0[0] = (Expression) coreOperationMultiply0;
      CoreFunction coreFunction0 = new CoreFunction((-1258), expressionArray0);
      coreFunction0.getArg2();
      expressionArray0[1] = null;
      CoreFunction coreFunction1 = new CoreFunction((-1258), expressionArray0);
      // Undeclared exception!
      coreFunction1.functionSubstringBefore((EvalContext) null);
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = null;
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-15);
      byteArray0[1] = (byte)16;
      byte byte0 = (byte)98;
      Expression[] expressionArray0 = new Expression[2];
      CoreOperationOr coreOperationOr0 = new CoreOperationOr(expressionArray0);
      expressionArray0[0] = (Expression) coreOperationOr0;
      CoreOperationNegate coreOperationNegate0 = new CoreOperationNegate(coreOperationOr0);
      expressionArray0[1] = (Expression) coreOperationNegate0;
      CoreFunction coreFunction0 = new CoreFunction((byte)98, expressionArray0);
      // Undeclared exception!
      coreFunction0.functionSubstring((EvalContext) null);
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[3];
      QName qName0 = new QName((String) null, "lang");
      VariableReference variableReference0 = new VariableReference(qName0);
      expressionArray0[0] = (Expression) variableReference0;
      ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, expressionArray0);
      expressionArray0[1] = (Expression) extensionFunction0;
      CoreOperationNotEqual coreOperationNotEqual0 = new CoreOperationNotEqual(expressionArray0[1], (Expression) null);
      expressionArray0[2] = (Expression) coreOperationNotEqual0;
      CoreFunction coreFunction0 = new CoreFunction(1043, expressionArray0);
      CoreFunction coreFunction1 = new CoreFunction(3993, expressionArray0);
      // Undeclared exception!
      coreFunction0.functionName((EvalContext) null);
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[5];
      CoreOperationOr coreOperationOr0 = new CoreOperationOr(expressionArray0);
      Step[] stepArray0 = new Step[6];
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(32);
      Step step0 = new Step(14, nodeTypeTest0, expressionArray0);
      stepArray0[0] = step0;
      Step step1 = new Step((-481), nodeTypeTest0, expressionArray0);
      stepArray0[1] = step1;
      Step step2 = new Step(3565, nodeTypeTest0, expressionArray0);
      stepArray0[2] = step2;
      Step step3 = new Step((-481), nodeTypeTest0, expressionArray0);
      stepArray0[3] = step3;
      QName qName0 = new QName("c 3t=_B;MjQB~l;Oh ");
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, "4H");
      Step step4 = new Step((-481), nodeNameTest0, expressionArray0);
      stepArray0[4] = step4;
      Step step5 = new Step(109, nodeTypeTest0, expressionArray0);
      stepArray0[5] = step5;
      ExpressionPath expressionPath0 = new ExpressionPath(coreOperationOr0, expressionArray0, stepArray0);
      expressionArray0[0] = (Expression) expressionPath0;
      VariableReference variableReference0 = new VariableReference(qName0);
      expressionArray0[1] = (Expression) variableReference0;
      CoreOperationGreaterThanOrEqual coreOperationGreaterThanOrEqual0 = new CoreOperationGreaterThanOrEqual(variableReference0, variableReference0);
      expressionArray0[2] = (Expression) coreOperationGreaterThanOrEqual0;
      CoreOperationNotEqual coreOperationNotEqual0 = new CoreOperationNotEqual(expressionArray0[1], expressionPath0);
      expressionArray0[3] = (Expression) coreOperationNotEqual0;
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual(expressionArray0[2], expressionPath0);
      expressionArray0[4] = (Expression) coreOperationLessThanOrEqual0;
      CoreFunction coreFunction0 = new CoreFunction(14, expressionArray0);
      // Undeclared exception!
      coreFunction0.functionCeiling((EvalContext) null);
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      Constant constant0 = new Constant("");
      expressionArray0[0] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction(10, expressionArray0);
      coreFunction0.computeContextDependent();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      // Undeclared exception!
//      try { 
        coreFunction0.getArg3();
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 2
//         //
//         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      CoreFunction coreFunction0 = new CoreFunction(11, expressionArray0);
      coreFunction0.toString();
      // Undeclared exception!
//      try { 
        coreFunction0.functionFloor((EvalContext) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      CoreFunction coreFunction0 = new CoreFunction(24, expressionArray0);
      Step[] stepArray0 = new Step[2];
      QName qName0 = new QName("");
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
      Step step0 = new Step(24, nodeNameTest0, expressionArray0);
      stepArray0[1] = step0;
      CoreFunction coreFunction1 = new CoreFunction(24, expressionArray0);
      CoreFunction coreFunction2 = new CoreFunction(24, expressionArray0);
      coreFunction2.toString();
      // Undeclared exception!
//      try { 
        coreFunction1.functionTrue((EvalContext) null);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // Incorrect number of arguments: sum(null)
//         //
//         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[6];
      CoreOperationGreaterThan coreOperationGreaterThan0 = new CoreOperationGreaterThan((Expression) null, (Expression) null);
      expressionArray0[0] = (Expression) coreOperationGreaterThan0;
      Long long0 = new Long((-4204));
      Constant constant0 = new Constant(long0);
      expressionArray0[1] = (Expression) constant0;
      CoreOperationMultiply coreOperationMultiply0 = new CoreOperationMultiply(coreOperationGreaterThan0, expressionArray0[0]);
      expressionArray0[2] = (Expression) coreOperationMultiply0;
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd(expressionArray0);
      expressionArray0[3] = (Expression) coreOperationAdd0;
      CoreOperationGreaterThanOrEqual coreOperationGreaterThanOrEqual0 = new CoreOperationGreaterThanOrEqual((Expression) null, (Expression) null);
      expressionArray0[4] = (Expression) coreOperationGreaterThanOrEqual0;
      CoreOperationLessThan coreOperationLessThan0 = new CoreOperationLessThan((Expression) null, coreOperationMultiply0);
      expressionArray0[5] = (Expression) coreOperationLessThan0;
      CoreFunction coreFunction0 = new CoreFunction((-4204), expressionArray0);
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("");
      DescendantContext descendantContext0 = new DescendantContext((EvalContext) null, false, processingInstructionTest0);
      // Undeclared exception!
//      try { 
        coreFunction0.functionTrue(descendantContext0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.evosuite.runtime.System", e);
//      }
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      CoreOperationDivide coreOperationDivide0 = new CoreOperationDivide((Expression) null, (Expression) null);
      Long long0 = new Long(798L);
      Constant constant0 = new Constant(long0);
      Expression[] expressionArray0 = new Expression[1];
      expressionArray0[0] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction(11, expressionArray0);
      Object object0 = coreFunction0.functionNormalizeSpace((EvalContext) null);
      assertEquals("798", object0);
      assertEquals(11, coreFunction0.getFunctionCode());
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      Constant constant0 = new Constant(">L=L'.Y3Z");
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(11);
      Expression[] expressionArray0 = new Expression[6];
      expressionArray0[0] = (Expression) constant0;
      expressionArray0[1] = (Expression) constant0;
      expressionArray0[2] = (Expression) constant0;
      expressionArray0[3] = (Expression) constant0;
      expressionArray0[4] = (Expression) constant0;
      expressionArray0[5] = (Expression) constant0;
      Step step0 = new Step(11, nodeTypeTest0, expressionArray0);
      CoreFunction coreFunction0 = new CoreFunction((-1761), expressionArray0);
      coreFunction0.getArg1();
      CoreOperationNegate coreOperationNegate0 = new CoreOperationNegate(expressionArray0[4]);
      EvalContext evalContext0 = null;
      ChildContext childContext0 = new ChildContext((EvalContext) null, nodeTypeTest0, true, true);
      CoreFunction coreFunction1 = new CoreFunction(22, expressionArray0);
      // Undeclared exception!
//      try { 
        coreFunction1.computeValue((EvalContext) null);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // Incorrect number of arguments: lang('>L=L'.Y3Z', '>L=L'.Y3Z', '>L=L'.Y3Z', '>L=L'.Y3Z', '>L=L'.Y3Z', '>L=L'.Y3Z')
//         //
//         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[5];
      CoreOperationUnion coreOperationUnion0 = new CoreOperationUnion(expressionArray0);
      expressionArray0[0] = (Expression) coreOperationUnion0;
      CoreOperationAnd coreOperationAnd0 = new CoreOperationAnd(expressionArray0);
      expressionArray0[1] = (Expression) coreOperationAnd0;
      NameAttributeTest nameAttributeTest0 = new NameAttributeTest(coreOperationAnd0, expressionArray0[0]);
      expressionArray0[2] = (Expression) nameAttributeTest0;
      Float float0 = new Float((double) 21);
      Constant constant0 = new Constant(float0);
      expressionArray0[3] = (Expression) constant0;
      QName qName0 = new QName("!Bf9%C-", "!Bf9%C-");
      VariableReference variableReference0 = new VariableReference(qName0);
      expressionArray0[4] = (Expression) variableReference0;
      CoreFunction coreFunction0 = new CoreFunction(21, expressionArray0);
      BasicNodeSet basicNodeSet0 = new BasicNodeSet();
      NodeSetContext nodeSetContext0 = new NodeSetContext((EvalContext) null, basicNodeSet0);
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(40);
      PrecedingOrFollowingContext precedingOrFollowingContext0 = new PrecedingOrFollowingContext(nodeSetContext0, nodeTypeTest0, false);
      // Undeclared exception!
//      try { 
        coreFunction0.functionBoolean(precedingOrFollowingContext0);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // Incorrect number of arguments: false(org.apache.commons.jxpath.ri.compiler.CoreOperationUnion@0000000001 | (org.apache.commons.jxpath.ri.compiler.CoreOperationAnd@0000000002) | (org.apache.commons.jxpath.ri.compiler.NameAttributeTest@0000000003) | org.apache.commons.jxpath.ri.compiler.Constant@0000000004 | org.apache.commons.jxpath.ri.compiler.VariableReference@0000000006, org.apache.commons.jxpath.ri.compiler.CoreOperationUnion@0000000001 and org.apache.commons.jxpath.ri.compiler.CoreOperationAnd@0000000002 and org.apache.commons.jxpath.ri.compiler.NameAttributeTest@0000000003 and org.apache.commons.jxpath.ri.compiler.Constant@0000000004 and org.apache.commons.jxpath.ri.compiler.VariableReference@0000000006, (org.apache.commons.jxpath.ri.compiler.CoreOperationAnd@0000000002) = org.apache.commons.jxpath.ri.compiler.CoreOperationUnion@0000000001, 21, $!Bf9%C-:!Bf9%C-)
//         //
//         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      QName qName0 = new QName("E}=CoG1[K+9qEEX6UT");
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "E}=CoG1[K+9qEEX6UT");
      Expression[] expressionArray0 = new Expression[4];
      CoreOperationSubtract coreOperationSubtract0 = new CoreOperationSubtract((Expression) null, (Expression) null);
      CoreOperationGreaterThan coreOperationGreaterThan0 = new CoreOperationGreaterThan(coreOperationSubtract0, coreOperationSubtract0);
      CoreOperationGreaterThanOrEqual coreOperationGreaterThanOrEqual0 = new CoreOperationGreaterThanOrEqual(coreOperationGreaterThan0, coreOperationGreaterThan0);
      expressionArray0[0] = (Expression) coreOperationGreaterThanOrEqual0;
      CoreOperationGreaterThan coreOperationGreaterThan1 = new CoreOperationGreaterThan((Expression) null, coreOperationGreaterThan0);
      expressionArray0[1] = (Expression) coreOperationGreaterThan1;
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd(expressionArray0);
      expressionArray0[2] = (Expression) coreOperationAdd0;
      CoreFunction coreFunction0 = new CoreFunction(9, expressionArray0);
      // Undeclared exception!
//      try { 
        coreFunction0.toString();
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.evosuite.runtime.System", e);
//      }
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      Constant constant0 = new Constant("C<54ykZoq_v}");
      Expression[] expressionArray0 = new Expression[2];
      expressionArray0[0] = (Expression) constant0;
      expressionArray0[1] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction(0, expressionArray0);
      CoreFunction coreFunction1 = new CoreFunction((-3308), expressionArray0);
      // Undeclared exception!
//      try { 
        coreFunction1.functionKey((EvalContext) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      Constant constant0 = new Constant("2woVa1xi:");
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(9);
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(9, expressionArray0);
      AncestorContext ancestorContext0 = new AncestorContext((EvalContext) null, true, nodeTypeTest0);
      AttributeContext attributeContext0 = new AttributeContext(ancestorContext0, nodeTypeTest0);
      NamespaceContext namespaceContext0 = new NamespaceContext(attributeContext0, nodeTypeTest0);
      // Undeclared exception!
//      try { 
        coreFunction0.functionLocalName(attributeContext0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      QName qName0 = new QName("", "");
      ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, expressionArray0);
      expressionArray0[0] = (Expression) extensionFunction0;
      CoreFunction coreFunction0 = new CoreFunction(176, expressionArray0);
      JXPathContext jXPathContext0 = JXPathContext.newContext((Object) coreFunction0);
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(363);
      AttributeContext attributeContext0 = new AttributeContext((EvalContext) null, nodeTypeTest0);
      Locale locale0 = new Locale("");
      NodePointer nodePointer0 = NodePointer.newNodePointer(qName0, attributeContext0, locale0);
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = new JXPathContextReferenceImpl(jXPathContext0, extensionFunction0, nodePointer0);
      RootContext rootContext0 = new RootContext(jXPathContextReferenceImpl0, nodePointer0);
      // Undeclared exception!
      coreFunction0.functionName(rootContext0);
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      Constant constant0 = new Constant("");
      expressionArray0[0] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction(11, expressionArray0);
      CoreFunction coreFunction1 = new CoreFunction(3993, expressionArray0);
      Object object0 = coreFunction0.functionCount((EvalContext) null);
      assertEquals(11, coreFunction0.getFunctionCode());
      assertEquals(1.0, object0);
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      Constant constant0 = new Constant("GG");
      Constant constant1 = new Constant("GG");
      EvalContext evalContext0 = null;
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(32);
      Expression[] expressionArray0 = new Expression[5];
      expressionArray0[0] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction(1346, expressionArray0);
      coreFunction0.getArg3();
      expressionArray0[1] = null;
      expressionArray0[2] = (Expression) constant0;
      expressionArray0[3] = (Expression) constant1;
      expressionArray0[4] = (Expression) constant1;
      CoreFunction coreFunction1 = new CoreFunction(32, expressionArray0);
      // Undeclared exception!
//      try { 
        coreFunction1.functionStringLength((EvalContext) null);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // Incorrect number of arguments: unknownFunction32()('GG', null, 'GG', 'GG', 'GG')
//         //
//         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      int int0 = 4;
      Expression[] expressionArray0 = new Expression[1];
      Constant constant0 = new Constant("n");
      expressionArray0[0] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction(4, expressionArray0);
      EvalContext evalContext0 = null;
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest((-2636));
      // Undeclared exception!
//      try { 
        coreFunction0.computeValue((EvalContext) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      int int0 = 20;
      EvalContext evalContext0 = null;
      int int1 = (-295);
      Expression[] expressionArray0 = new Expression[3];
      CoreFunction coreFunction0 = new CoreFunction(1, expressionArray0);
      CoreOperationGreaterThan coreOperationGreaterThan0 = new CoreOperationGreaterThan(coreFunction0, coreFunction0);
      CoreOperationEqual coreOperationEqual0 = new CoreOperationEqual(coreOperationGreaterThan0, coreFunction0);
      CoreOperationNotEqual coreOperationNotEqual0 = new CoreOperationNotEqual(coreOperationGreaterThan0, coreOperationEqual0);
      expressionArray0[0] = (Expression) coreOperationNotEqual0;
      coreFunction0.getArg3();
      expressionArray0[1] = null;
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd(expressionArray0);
      expressionArray0[2] = (Expression) coreOperationAdd0;
      CoreFunction coreFunction1 = new CoreFunction((-295), expressionArray0);
      // Undeclared exception!
//      try { 
        coreFunction0.computeValue((EvalContext) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.evosuite.runtime.System", e);
//      }
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      Constant constant0 = new Constant((String) null);
      CoreFunction coreFunction0 = new CoreFunction(15, expressionArray0);
      coreFunction0.toString();
      EvalContext evalContext0 = null;
      // Undeclared exception!
//      try { 
        coreFunction0.functionID((EvalContext) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction((-2627), expressionArray0);
      coreFunction0.getFunctionName();
      Long long0 = new Long((-2627));
      Constant constant0 = new Constant(long0);
      CoreFunction coreFunction1 = new CoreFunction((-2627), expressionArray0);
      // Undeclared exception!
//      try { 
        coreFunction0.functionNamespaceURI((EvalContext) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      Constant constant0 = new Constant("\"nu@:*KukJ]hdC");
      expressionArray0[0] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction(30, expressionArray0);
      PredicateContext predicateContext0 = new PredicateContext((EvalContext) null, coreFunction0);
      coreFunction0.functionNumber(predicateContext0);
      PredicateContext predicateContext1 = new PredicateContext((EvalContext) null, expressionArray0[0]);
      coreFunction0.functionBoolean(predicateContext1);
      // Undeclared exception!
//      try { 
        coreFunction0.functionTrue(predicateContext0);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // Incorrect number of arguments: format-number('\"nu@:*KukJ]hdC')
//         //
//         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      Constant constant0 = new Constant("-R60J%c&fL");
      constant0.toString();
      Expression[] expressionArray0 = new Expression[6];
      expressionArray0[0] = (Expression) constant0;
      expressionArray0[1] = (Expression) constant0;
      expressionArray0[2] = (Expression) constant0;
      expressionArray0[3] = (Expression) constant0;
      expressionArray0[4] = (Expression) constant0;
      expressionArray0[5] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction(5, expressionArray0);
      coreFunction0.isContextDependent();
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("");
      processingInstructionTest0.toString();
      Expression[] expressionArray1 = new Expression[2];
      expressionArray1[0] = (Expression) coreFunction0;
      expressionArray1[1] = (Expression) constant0;
      CoreFunction coreFunction1 = new CoreFunction(5, expressionArray1);
      ExpressionPath expressionPath0 = new ExpressionPath(expressionArray0[3], expressionArray1, (Step[]) null);
      Expression[] expressionArray2 = new Expression[5];
      expressionArray2[0] = (Expression) coreFunction0;
      expressionArray2[1] = (Expression) expressionPath0;
      expressionArray2[2] = (Expression) expressionPath0;
      expressionArray2[3] = (Expression) coreFunction1;
      expressionArray2[4] = (Expression) coreFunction0;
      CoreFunction coreFunction2 = new CoreFunction(427, expressionArray2);
      coreFunction1.isContextDependent();
      // Undeclared exception!
//      try { 
        coreFunction2.functionLang((EvalContext) null);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // Incorrect number of arguments: unknownFunction427()(local-name('-R60J%c&fL', '-R60J%c&fL', '-R60J%c&fL', '-R60J%c&fL', '-R60J%c&fL', '-R60J%c&fL'), '-R60J%c&fL'[local-name('-R60J%c&fL', '-R60J%c&fL', '-R60J%c&fL', '-R60J%c&fL', '-R60J%c&fL', '-R60J%c&fL')]['-R60J%c&fL'], '-R60J%c&fL'[local-name('-R60J%c&fL', '-R60J%c&fL', '-R60J%c&fL', '-R60J%c&fL', '-R60J%c&fL', '-R60J%c&fL')]['-R60J%c&fL'], local-name(local-name('-R60J%c&fL', '-R60J%c&fL', '-R60J%c&fL', '-R60J%c&fL', '-R60J%c&fL', '-R60J%c&fL'), '-R60J%c&fL'), local-name('-R60J%c&fL', '-R60J%c&fL', '-R60J%c&fL', '-R60J%c&fL', '-R60J%c&fL', '-R60J%c&fL'))
//         //
//         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(18);
      Expression[] expressionArray0 = new Expression[1];
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd(expressionArray0);
      CoreOperationLessThan coreOperationLessThan0 = new CoreOperationLessThan(coreOperationAdd0, coreOperationAdd0);
      expressionArray0[0] = (Expression) coreOperationLessThan0;
      CoreFunction coreFunction0 = new CoreFunction(14, expressionArray0);
      coreFunction0.toString();
      assertEquals(14, coreFunction0.getFunctionCode());
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(18);
      CoreFunction coreFunction0 = new CoreFunction(18, expressionArray0);
      boolean boolean0 = coreFunction0.computeContextDependent();
      assertTrue(boolean0);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      String string0 = coreFunction0.toString();
      assertEquals("boolean()", string0);
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = mock(JXPathContextReferenceImpl.class, new ViolatedAssumptionAnswer());
      doReturn((Locale) null).when(jXPathContextReferenceImpl0).getLocale();
      doReturn((NamespaceResolver) null, (NamespaceResolver) null).when(jXPathContextReferenceImpl0).getNamespaceResolver();
      QName qName0 = new QName("ZVx;r'w");
      VariablePointer variablePointer0 = new VariablePointer(qName0);
      RootContext rootContext0 = new RootContext(jXPathContextReferenceImpl0, variablePointer0);
      JXPathContext jXPathContext0 = rootContext0.getJXPathContext();
      JXPathContextReferenceImpl jXPathContextReferenceImpl1 = new JXPathContextReferenceImpl(jXPathContext0, qName0, (Pointer) null);
      EvalContext evalContext0 = jXPathContextReferenceImpl1.getAbsoluteRootContext();
      coreFunction0.functionName(evalContext0);
      assertEquals(18, coreFunction0.getFunctionCode());
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      EvalContext evalContext0 = null;
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(18);
      CoreFunction coreFunction0 = new CoreFunction(18, expressionArray0);
      coreFunction0.computeContextDependent();
      // Undeclared exception!
//      try { 
        coreFunction0.functionStartsWith((EvalContext) null);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // Incorrect number of arguments: boolean()
//         //
//         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction((-2622), expressionArray0);
      coreFunction0.getFunctionName();
      Long long0 = new Long((-2622));
      Constant constant0 = new Constant(long0);
      Step[] stepArray0 = new Step[1];
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("unknownFunction-2622()");
      processingInstructionTest0.toString();
      ExpressionPath expressionPath0 = new ExpressionPath(constant0, expressionArray0, stepArray0);
      CoreFunction coreFunction1 = new CoreFunction(15, expressionArray0);
      coreFunction1.isContextDependent();
      EvalContext evalContext0 = null;
      // Undeclared exception!
//      try { 
        coreFunction1.functionLang((EvalContext) null);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // Incorrect number of arguments: string-length()
//         //
//         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      Constant constant0 = new Constant("");
      expressionArray0[0] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction(11, expressionArray0);
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest((-2636));
      CoreFunction coreFunction1 = new CoreFunction(11, expressionArray0);
      coreFunction0.functionStringLength((EvalContext) null);
      // Undeclared exception!
//      try { 
        coreFunction0.functionSum((EvalContext) null);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // Invalid argument type for 'sum': java.lang.String
//         //
//         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      Long long0 = new Long((-2627));
      Step[] stepArray0 = new Step[6];
      QName qName0 = new QName("", "");
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
      Step step0 = new Step((-2627), nodeNameTest0, expressionArray0);
      stepArray0[0] = step0;
      Step step1 = new Step((-2627), nodeNameTest0, expressionArray0);
      stepArray0[1] = step1;
      Step step2 = new Step(1566, nodeNameTest0, expressionArray0);
      stepArray0[2] = step2;
      Step step3 = new Step(95, nodeNameTest0, expressionArray0);
      stepArray0[3] = step3;
      Step step4 = new Step(2, nodeNameTest0, expressionArray0);
      stepArray0[4] = step4;
      Step step5 = new Step((-2627), nodeNameTest0, expressionArray0);
      stepArray0[5] = step5;
      LocationPath locationPath0 = new LocationPath(true, stepArray0);
      CoreFunction coreFunction0 = new CoreFunction(32, expressionArray0);
      CoreFunction coreFunction1 = new CoreFunction(7, expressionArray0);
      coreFunction1.computeContextDependent();
      // Undeclared exception!
//      try { 
        coreFunction0.getArg1();
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      Constant constant0 = new Constant("An EntityRef is not allowed at the document root");
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(2);
      Expression[] expressionArray0 = new Expression[3];
      CoreOperationNotEqual coreOperationNotEqual0 = new CoreOperationNotEqual(constant0, constant0);
      expressionArray0[0] = (Expression) coreOperationNotEqual0;
      expressionArray0[1] = (Expression) constant0;
      expressionArray0[2] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction(23, expressionArray0);
      QName qName0 = new QName("W;`,em1><M");
      QName qName1 = new QName("oAN[I8);*)Vn9", "W;`,em1><M");
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName1);
      Step step0 = new Step(13, nodeTypeTest0, expressionArray0);
      Step[] stepArray0 = new Step[6];
      stepArray0[0] = step0;
      stepArray0[1] = step0;
      Step step1 = new Step(13, nodeNameTest0, expressionArray0);
      stepArray0[2] = step1;
      stepArray0[3] = step0;
      stepArray0[4] = step0;
      stepArray0[5] = step0;
      ExpressionPath expressionPath0 = new ExpressionPath(expressionArray0[1], expressionArray0, stepArray0);
      EvalContext evalContext0 = null;
      // Undeclared exception!
//      try { 
        coreFunction0.computeValue((EvalContext) null);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // Incorrect number of arguments: number(org.apache.commons.jxpath.ri.compiler.Constant@0000000001 != org.apache.commons.jxpath.ri.compiler.Constant@0000000001, 'An EntityRef is not allowed at the document root', 'An EntityRef is not allowed at the document root')
//         //
//         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      Constant constant0 = new Constant("C<54ykZoq_v}");
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(0);
      Expression[] expressionArray0 = new Expression[2];
      expressionArray0[1] = (Expression) constant0;
      Step step0 = new Step(40, nodeTypeTest0, expressionArray0);
      CoreFunction coreFunction0 = new CoreFunction(11, expressionArray0);
      coreFunction0.getArg1();
      CoreOperationNegate coreOperationNegate0 = new CoreOperationNegate(expressionArray0[1]);
      EvalContext evalContext0 = null;
      ChildContext childContext0 = new ChildContext((EvalContext) null, nodeTypeTest0, false, true);
      // Undeclared exception!
//      try { 
        coreFunction0.computeValue((EvalContext) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      Constant constant0 = new Constant("");
      expressionArray0[0] = (Expression) constant0;
      QName qName0 = new QName("");
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
      ChildContext childContext0 = new ChildContext((EvalContext) null, nodeNameTest0, true, false);
      constant0.iterate(childContext0);
      CoreFunction coreFunction0 = new CoreFunction(13, expressionArray0);
      PredicateContext predicateContext0 = new PredicateContext((EvalContext) null, coreFunction0);
      coreFunction0.functionNumber(predicateContext0);
      coreFunction0.functionNot(predicateContext0);
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest((-2627));
      // Undeclared exception!
//      try { 
        coreFunction0.compute((EvalContext) null);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // Incorrect number of arguments: substring-after('')
//         //
//         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      EvalContext evalContext0 = null;
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(18);
      CoreFunction coreFunction0 = new CoreFunction(18, expressionArray0);
      coreFunction0.computeContextDependent();
      // Undeclared exception!
//      try { 
        coreFunction0.functionLast((EvalContext) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      Constant constant0 = new Constant("An EntityRef is not allowed at the document root");
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(2);
      Expression[] expressionArray0 = new Expression[2];
      expressionArray0[0] = (Expression) constant0;
      expressionArray0[1] = (Expression) constant0;
      Step step0 = new Step(2, nodeTypeTest0, expressionArray0);
      int int0 = 17;
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("An EntityRef is not allowed at the document root");
      processingInstructionTest0.toString();
      FileSystemHandling.shouldAllThrowIOExceptions();
      EvalContext evalContext0 = null;
      PredicateContext predicateContext0 = new PredicateContext((EvalContext) null, expressionArray0[0]);
      CoreFunction coreFunction0 = new CoreFunction(7, expressionArray0);
      // Undeclared exception!
//      try { 
        coreFunction0.functionCeiling((EvalContext) null);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // Incorrect number of arguments: name('An EntityRef is not allowed at the document root', 'An EntityRef is not allowed at the document root')
//         //
//         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      LocationPath locationPath0 = new LocationPath(true, (Step[]) null);
      CoreOperationLessThan coreOperationLessThan0 = new CoreOperationLessThan(locationPath0, locationPath0);
      EvalContext evalContext0 = null;
      PredicateContext predicateContext0 = new PredicateContext((EvalContext) null, locationPath0);
      int int0 = (-2326);
      Expression[] expressionArray0 = new Expression[8];
      expressionArray0[0] = (Expression) locationPath0;
      expressionArray0[1] = (Expression) locationPath0;
      expressionArray0[2] = (Expression) coreOperationLessThan0;
      expressionArray0[3] = (Expression) locationPath0;
      expressionArray0[4] = (Expression) coreOperationLessThan0;
      CoreOperationGreaterThanOrEqual coreOperationGreaterThanOrEqual0 = new CoreOperationGreaterThanOrEqual(locationPath0, locationPath0);
      expressionArray0[5] = (Expression) coreOperationGreaterThanOrEqual0;
      expressionArray0[6] = (Expression) locationPath0;
      expressionArray0[7] = (Expression) coreOperationLessThan0;
      CoreFunction coreFunction0 = new CoreFunction((-2326), expressionArray0);
      coreFunction0.computeContextDependent();
      boolean boolean0 = false;
      // Undeclared exception!
//      try { 
        coreFunction0.functionSubstringBefore(predicateContext0);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // Incorrect number of arguments: unknownFunction-2326()(, , org.apache.commons.jxpath.ri.compiler.LocationPath@0000000001 < org.apache.commons.jxpath.ri.compiler.LocationPath@0000000001, , org.apache.commons.jxpath.ri.compiler.LocationPath@0000000001 < org.apache.commons.jxpath.ri.compiler.LocationPath@0000000001, org.apache.commons.jxpath.ri.compiler.LocationPath@0000000001 >= org.apache.commons.jxpath.ri.compiler.LocationPath@0000000001, , org.apache.commons.jxpath.ri.compiler.LocationPath@0000000001 < org.apache.commons.jxpath.ri.compiler.LocationPath@0000000001)
//         //
//         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      Constant constant0 = new Constant("");
      Constant constant1 = new Constant("");
      Expression[] expressionArray0 = new Expression[8];
      expressionArray0[0] = (Expression) constant1;
      expressionArray0[1] = (Expression) constant1;
      expressionArray0[2] = (Expression) constant1;
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      expressionArray0[3] = (Expression) constant1;
      expressionArray0[4] = (Expression) constant0;
      expressionArray0[5] = (Expression) constant1;
      expressionArray0[6] = (Expression) constant1;
      expressionArray0[7] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction(32, expressionArray0);
      coreFunction0.functionConcat((EvalContext) null);
      // Undeclared exception!
//      try { 
        coreFunction0.functionString((EvalContext) null);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // Incorrect number of arguments: unknownFunction32()('', '', '', '', '', '', '', '')
//         //
//         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction((-2627), expressionArray0);
      coreFunction0.getFunctionName();
      Long long0 = new Long((-2627));
      Constant constant0 = new Constant(long0);
      Step[] stepArray0 = new Step[1];
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("unknownFunction-2627()");
      processingInstructionTest0.toString();
      ExpressionPath expressionPath0 = new ExpressionPath(constant0, expressionArray0, stepArray0);
      CoreFunction coreFunction1 = new CoreFunction(23, expressionArray0);
      coreFunction1.computeContextDependent();
      // Undeclared exception!
//      try { 
        coreFunction0.getArg1();
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(14, expressionArray0);
      coreFunction0.getArgumentCount();
      CoreFunction coreFunction1 = new CoreFunction(14, expressionArray0);
      coreFunction0.isContextDependent();
      EvalContext evalContext0 = null;
      PredicateContext predicateContext0 = new PredicateContext((EvalContext) null, coreFunction1);
      CoreFunction coreFunction2 = new CoreFunction(22, expressionArray0);
      coreFunction2.computeContextDependent();
      // Undeclared exception!
//      try { 
        coreFunction0.functionName((EvalContext) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      Constant constant0 = new Constant("\"nu@:*KukJ]hdC");
      expressionArray0[0] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction(30, expressionArray0);
      PredicateContext predicateContext0 = new PredicateContext((EvalContext) null, coreFunction0);
      coreFunction0.functionNumber(predicateContext0);
      coreFunction0.functionNot(predicateContext0);
      CoreFunction coreFunction1 = new CoreFunction(3, expressionArray0);
      coreFunction1.computeContextDependent();
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(3);
      coreFunction1.computeContextDependent();
      // Undeclared exception!
//      try { 
        coreFunction0.functionNull(predicateContext0);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // Incorrect number of arguments: format-number('\"nu@:*KukJ]hdC')
//         //
//         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      EvalContext evalContext0 = null;
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(18);
      CoreFunction coreFunction0 = new CoreFunction(1346, expressionArray0);
      // Undeclared exception!
//      try { 
        coreFunction0.functionStringLength((EvalContext) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      Constant constant0 = new Constant("An EntityRef is not allowed at the document root");
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(2);
      Expression[] expressionArray0 = new Expression[2];
      expressionArray0[0] = (Expression) constant0;
      expressionArray0[1] = (Expression) constant0;
      Step step0 = new Step(2, nodeTypeTest0, expressionArray0);
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("An EntityRef is not allowed at the document root");
      processingInstructionTest0.toString();
      FileSystemHandling.shouldAllThrowIOExceptions();
      CoreFunction coreFunction0 = new CoreFunction(1, expressionArray0);
      coreFunction0.computeContextDependent();
      EvalContext evalContext0 = null;
      // Undeclared exception!
//      try { 
        coreFunction0.functionLast((EvalContext) null);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // Incorrect number of arguments: last('An EntityRef is not allowed at the document root', 'An EntityRef is not allowed at the document root')
//         //
//         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      CoreFunction coreFunction0 = new CoreFunction(24, expressionArray0);
      Step[] stepArray0 = new Step[2];
      QName qName0 = new QName("");
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
      Step step0 = new Step(24, nodeNameTest0, expressionArray0);
      stepArray0[1] = step0;
      ExpressionPath expressionPath0 = new ExpressionPath(coreFunction0, expressionArray0, stepArray0);
      EvalContext evalContext0 = null;
      // Undeclared exception!
//      try { 
        coreFunction0.computeValue((EvalContext) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      Constant constant0 = new Constant("\"nu@:*KukJ]hdC");
      expressionArray0[0] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction(30, expressionArray0);
      PredicateContext predicateContext0 = new PredicateContext((EvalContext) null, coreFunction0);
      coreFunction0.functionNumber(predicateContext0);
      coreFunction0.functionNot(predicateContext0);
      CoreFunction coreFunction1 = new CoreFunction(25, expressionArray0);
      coreFunction1.computeContextDependent();
      CoreFunction coreFunction2 = new CoreFunction(30, expressionArray0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      // Undeclared exception!
//      try { 
        coreFunction0.functionTranslate(predicateContext0);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // Incorrect number of arguments: format-number('\"nu@:*KukJ]hdC')
//         //
//         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      Constant constant0 = new Constant("f#``r0Wh[?v:x4Ux");
      CoreFunction coreFunction0 = new CoreFunction((-2627), expressionArray0);
      EvalContext evalContext0 = null;
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(12);
      CoreFunction coreFunction1 = new CoreFunction(12, expressionArray0);
      // Undeclared exception!
//      try { 
        coreFunction1.functionBoolean((EvalContext) null);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // Incorrect number of arguments: substring-before()
//         //
//         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      Constant constant0 = new Constant("");
      expressionArray0[0] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction(30, expressionArray0);
      EvalContext evalContext0 = null;
      PredicateContext predicateContext0 = new PredicateContext((EvalContext) null, coreFunction0);
      coreFunction0.functionNumber(predicateContext0);
      // Undeclared exception!
//      try { 
        coreFunction0.computeValue((EvalContext) null);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // Incorrect number of arguments: format-number('')
//         //
//         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(0, expressionArray0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      VariableReference variableReference0 = new VariableReference((QName) null);
      CoreFunction coreFunction1 = new CoreFunction(0, expressionArray0);
      coreFunction0.toString();
      EvalContext evalContext0 = null;
      CoreFunction coreFunction2 = new CoreFunction(0, expressionArray0);
      // Undeclared exception!
//      try { 
        coreFunction2.functionCount((EvalContext) null);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // Incorrect number of arguments: unknownFunction0()()
//         //
//         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[2];
      LocationPath locationPath0 = new LocationPath(true, (Step[]) null);
      CoreFunction coreFunction0 = new CoreFunction((-568), expressionArray0);
      CoreFunction coreFunction1 = new CoreFunction(2, expressionArray0);
      // Undeclared exception!
//      try { 
        coreFunction1.functionKey((EvalContext) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      Step[] stepArray0 = new Step[0];
      LocationPath locationPath0 = new LocationPath(true, stepArray0);
      expressionArray0[0] = (Expression) locationPath0;
      CoreFunction coreFunction0 = new CoreFunction(0, expressionArray0);
      CoreFunction coreFunction1 = new CoreFunction(5, expressionArray0);
      boolean boolean0 = coreFunction1.computeContextDependent();
      assertFalse(boolean0);
      assertEquals(5, coreFunction1.getFunctionCode());
      
      coreFunction0.getArg1();
      assertEquals(0, coreFunction0.getFunctionCode());
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      int int0 = 2;
      Expression[] expressionArray0 = new Expression[2];
      Constant constant0 = new Constant("=hUg$95w+m");
      CoreFunction coreFunction0 = new CoreFunction(16, expressionArray0);
      PredicateContext predicateContext0 = new PredicateContext((EvalContext) null, coreFunction0);
      // Undeclared exception!
//      try { 
        coreFunction0.functionConcat(predicateContext0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Expression[] expressionArray0 = new Expression[1];
      FileSystemHandling.shouldAllThrowIOExceptions();
      VariableReference variableReference0 = new VariableReference((QName) null);
      expressionArray0[0] = (Expression) variableReference0;
      CoreFunction coreFunction0 = new CoreFunction(25, expressionArray0);
      coreFunction0.toString();
      EvalContext evalContext0 = null;
      // Undeclared exception!
//      try { 
        coreFunction0.functionCount((EvalContext) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.jxpath.ri.compiler.VariableReference", e);
//      }
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      int int0 = (-2627);
      Expression[] expressionArray0 = new Expression[0];
      Long long0 = new Long((-2627));
      CoreFunction coreFunction0 = new CoreFunction((-2627), expressionArray0);
      EvalContext evalContext0 = null;
      // Undeclared exception!
//      try { 
        coreFunction0.functionPosition((EvalContext) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Expression[] expressionArray0 = new Expression[4];
      CoreOperationOr coreOperationOr0 = new CoreOperationOr(expressionArray0);
      expressionArray0[0] = (Expression) coreOperationOr0;
      CoreOperationMod coreOperationMod0 = new CoreOperationMod(expressionArray0[0], expressionArray0[0]);
      expressionArray0[1] = (Expression) coreOperationMod0;
      CoreOperationNegate coreOperationNegate0 = new CoreOperationNegate(coreOperationOr0);
      expressionArray0[2] = (Expression) coreOperationNegate0;
      CoreOperationEqual coreOperationEqual0 = new CoreOperationEqual(coreOperationMod0, expressionArray0[1]);
      expressionArray0[3] = (Expression) coreOperationEqual0;
      CoreFunction coreFunction0 = new CoreFunction(3, expressionArray0);
      Step[] stepArray0 = new Step[7];
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(10);
      Step step0 = new Step(825, nodeTypeTest0, expressionArray0);
      stepArray0[0] = step0;
      Step step1 = new Step(2737, nodeTypeTest0, expressionArray0);
      stepArray0[1] = step1;
      Step step2 = new Step(2737, nodeTypeTest0, expressionArray0);
      stepArray0[2] = step2;
      Step step3 = new Step(10, nodeTypeTest0, expressionArray0);
      stepArray0[3] = step3;
      NodeTypeTest nodeTypeTest1 = new NodeTypeTest(32);
      Step step4 = new Step(28, nodeTypeTest1, expressionArray0);
      stepArray0[4] = step4;
      Step step5 = new Step(1024, nodeTypeTest0, expressionArray0);
      stepArray0[5] = step5;
      Step step6 = new Step(3, nodeTypeTest0, expressionArray0);
      stepArray0[6] = step6;
      ExpressionPath expressionPath0 = new ExpressionPath(coreOperationOr0, expressionArray0, stepArray0);
      EvalContext evalContext0 = expressionPath0.evalSteps((EvalContext) null);
      // Undeclared exception!
//      try { 
        coreFunction0.functionPosition(evalContext0);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // Incorrect number of arguments: count(org.apache.commons.jxpath.ri.compiler.CoreOperationOr@0000000001 or org.apache.commons.jxpath.ri.compiler.CoreOperationMod@0000000002 or org.apache.commons.jxpath.ri.compiler.CoreOperationNegate@0000000003 or org.apache.commons.jxpath.ri.compiler.CoreOperationEqual@0000000004, (org.apache.commons.jxpath.ri.compiler.CoreOperationOr@0000000001) mod (org.apache.commons.jxpath.ri.compiler.CoreOperationOr@0000000001), -(org.apache.commons.jxpath.ri.compiler.CoreOperationOr@0000000001), org.apache.commons.jxpath.ri.compiler.CoreOperationMod@0000000002 = org.apache.commons.jxpath.ri.compiler.CoreOperationMod@0000000002)
//         //
//         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      Constant constant0 = new Constant("");
      expressionArray0[0] = (Expression) constant0;
      constant0.toString();
      CoreFunction coreFunction0 = new CoreFunction(9, expressionArray0);
      Step[] stepArray0 = new Step[5];
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("org.jdom.Document");
      Step step0 = new Step(9, processingInstructionTest0, expressionArray0);
      stepArray0[0] = step0;
      Step step1 = new Step(13, processingInstructionTest0, expressionArray0);
      stepArray0[1] = step1;
      Step step2 = new Step(9, processingInstructionTest0, expressionArray0);
      stepArray0[2] = step2;
      Step step3 = new Step(13, processingInstructionTest0, expressionArray0);
      stepArray0[3] = step3;
      Step step4 = new Step((-668), processingInstructionTest0, expressionArray0);
      stepArray0[4] = step4;
      LocationPath locationPath0 = new LocationPath(true, stepArray0);
      CoreFunction coreFunction1 = new CoreFunction(13, expressionArray0);
      CoreFunction coreFunction2 = new CoreFunction((-3529), expressionArray0);
      boolean boolean0 = coreFunction1.computeContextDependent();
      assertFalse(boolean0);
      
      CoreFunction coreFunction3 = new CoreFunction(9, expressionArray0);
      coreFunction3.getArg1();
      assertEquals(9, coreFunction3.getFunctionCode());
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      Constant constant0 = new Constant("");
      expressionArray0[0] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction(28, expressionArray0);
      Step[] stepArray0 = new Step[7];
      Step step0 = new Step(28, (NodeTest) null, expressionArray0);
      stepArray0[0] = step0;
      Step step1 = new Step((-360), (NodeTest) null, expressionArray0);
      stepArray0[1] = step1;
      Step step2 = new Step(15, (NodeTest) null, expressionArray0);
      stepArray0[2] = step2;
      Step step3 = new Step(13, (NodeTest) null, expressionArray0);
      stepArray0[3] = step3;
      Step step4 = new Step(1424, (NodeTest) null, expressionArray0);
      stepArray0[4] = step4;
      Step step5 = new Step((-173), (NodeTest) null, expressionArray0);
      stepArray0[5] = step5;
      Expression[] expressionArray1 = new Expression[7];
      QName qName0 = new QName("");
      VariableReference variableReference0 = new VariableReference(qName0);
      expressionArray1[0] = (Expression) variableReference0;
      expressionArray1[1] = (Expression) coreFunction0;
      expressionArray1[2] = (Expression) coreFunction0;
      expressionArray1[3] = (Expression) constant0;
      expressionArray1[4] = (Expression) coreFunction0;
      expressionArray1[5] = (Expression) constant0;
      expressionArray1[6] = (Expression) constant0;
      Step step6 = new Step(0, (NodeTest) null, expressionArray1);
      stepArray0[6] = step6;
      ExpressionPath expressionPath0 = new ExpressionPath(coreFunction0, expressionArray0, stepArray0);
      expressionPath0.createContextForStep((EvalContext) null, 799, (NodeTest) null);
      // Undeclared exception!
//      try { 
        coreFunction0.computeValue((EvalContext) null);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // Incorrect number of arguments: unknownFunction28()('')
//         //
//         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[2];
      Float float0 = new Float(71.5223);
      Constant constant0 = new Constant(float0);
      expressionArray0[0] = (Expression) constant0;
      Constant constant1 = new Constant(float0);
      expressionArray0[1] = (Expression) constant1;
      CoreFunction coreFunction0 = new CoreFunction(633, expressionArray0);
      coreFunction0.isContextDependent();
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("true");
      processingInstructionTest0.toString();
      FileSystemHandling.shouldAllThrowIOExceptions();
      Step[] stepArray0 = new Step[2];
      Step step0 = new Step((-305), processingInstructionTest0, expressionArray0);
      stepArray0[0] = step0;
      Step step1 = new Step((-546), processingInstructionTest0, expressionArray0);
      stepArray0[1] = step1;
      ExpressionPath expressionPath0 = new ExpressionPath(constant1, expressionArray0, stepArray0);
      PredicateContext predicateContext0 = new PredicateContext((EvalContext) null, expressionPath0);
      coreFunction0.functionSubstringAfter((EvalContext) null);
      CoreFunction coreFunction1 = new CoreFunction((-546), expressionArray0);
      // Undeclared exception!
//      try { 
        coreFunction1.functionLast((EvalContext) null);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // Incorrect number of arguments: unknownFunction-546()(71.52230072021484, 71.52230072021484)
//         //
//         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      Constant constant0 = new Constant("An EntityRef is not allowed at the document root");
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(2);
      Expression[] expressionArray0 = new Expression[2];
      expressionArray0[0] = (Expression) constant0;
      expressionArray0[1] = (Expression) constant0;
      Step step0 = new Step(2, nodeTypeTest0, expressionArray0);
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("An EntityRef is not allowed at the document root");
      processingInstructionTest0.toString();
      FileSystemHandling.shouldAllThrowIOExceptions();
      PredicateContext predicateContext0 = new PredicateContext((EvalContext) null, expressionArray0[0]);
      CoreFunction coreFunction0 = new CoreFunction(7, expressionArray0);
      Object object0 = coreFunction0.functionSubstringAfter((EvalContext) null);
      assertEquals("", object0);
      
      CoreFunction coreFunction1 = new CoreFunction(17, expressionArray0);
      CoreFunction coreFunction2 = new CoreFunction(13, expressionArray0);
      boolean boolean0 = coreFunction1.computeContextDependent();
      assertFalse(boolean0);
      
      String string0 = coreFunction2.getFunctionName();
      assertEquals("substring-after", string0);
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(6, expressionArray0);
      NodeNameTest nodeNameTest0 = new NodeNameTest((QName) null);
      Step step0 = new Step(2568, nodeNameTest0, expressionArray0);
      Step step1 = new Step(41, nodeNameTest0, expressionArray0);
      Step step2 = new Step(6, nodeNameTest0, expressionArray0);
      Step step3 = new Step(2568, nodeNameTest0, expressionArray0);
      CoreFunction coreFunction1 = new CoreFunction(1631, expressionArray0);
      CoreFunction coreFunction2 = new CoreFunction(16, expressionArray0);
      coreFunction0.computeContextDependent();
      // Undeclared exception!
//      try { 
        coreFunction2.getArg1();
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      int int0 = 2;
      Constant constant0 = new Constant("An EntityRef is not allowed at the document root");
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(2);
      Expression[] expressionArray0 = new Expression[2];
      expressionArray0[0] = (Expression) constant0;
      expressionArray0[1] = (Expression) constant0;
      Step step0 = new Step(2, nodeTypeTest0, expressionArray0);
      Expression[] expressionArray1 = new Expression[5];
      expressionArray1[0] = (Expression) constant0;
      expressionArray1[1] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction(17, expressionArray1);
      Expression expression0 = coreFunction0.getArg1();
      expressionArray1[2] = expression0;
      expressionArray1[3] = (Expression) constant0;
      CoreOperationNegate coreOperationNegate0 = new CoreOperationNegate(constant0);
      expressionArray1[4] = (Expression) coreOperationNegate0;
      EvalContext evalContext0 = null;
      ChildContext childContext0 = new ChildContext((EvalContext) null, nodeTypeTest0, true, true);
      // Undeclared exception!
//      try { 
        coreFunction0.computeValue(childContext0);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // Incorrect number of arguments: translate('An EntityRef is not allowed at the document root', 'An EntityRef is not allowed at the document root', 'An EntityRef is not allowed at the document root', 'An EntityRef is not allowed at the document root', -org.apache.commons.jxpath.ri.compiler.Constant@0000000001)
//         //
//         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      CoreOperationUnion coreOperationUnion0 = new CoreOperationUnion(expressionArray0);
      CoreOperationSubtract coreOperationSubtract0 = new CoreOperationSubtract(coreOperationUnion0, coreOperationUnion0);
      expressionArray0[0] = (Expression) coreOperationSubtract0;
      CoreFunction coreFunction0 = new CoreFunction(2244, expressionArray0);
      Constant constant0 = new Constant("st1qU5w@1-sElIb");
      CoreFunction coreFunction1 = new CoreFunction(4187, expressionArray0);
      EvalContext evalContext0 = null;
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(9);
      CoreFunction coreFunction2 = new CoreFunction(9, expressionArray0);
      // Undeclared exception!
//      try { 
        coreFunction2.functionBoolean((EvalContext) null);
//        fail("Expecting exception: StackOverflowError");
      
//      } catch(StackOverflowError e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(6);
      EvalContext evalContext0 = null;
      Expression[] expressionArray0 = new Expression[6];
      CoreFunction coreFunction0 = new CoreFunction(6, expressionArray0);
      Expression expression0 = coreFunction0.getArg1();
      expressionArray0[0] = null;
      CoreOperationEqual coreOperationEqual0 = new CoreOperationEqual(expression0, expression0);
      expressionArray0[1] = (Expression) coreOperationEqual0;
      Expression expression1 = coreFunction0.getArg2();
      expressionArray0[2] = expression1;
      Expression[] expressionArray1 = new Expression[8];
      expressionArray1[0] = null;
      expressionArray1[1] = (Expression) coreOperationEqual0;
      expressionArray1[2] = (Expression) coreOperationEqual0;
      expressionArray1[3] = (Expression) coreOperationEqual0;
      expressionArray1[4] = (Expression) coreFunction0;
      expressionArray1[5] = expression1;
      expressionArray1[6] = (Expression) coreFunction0;
      expressionArray1[7] = null;
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd(expressionArray1);
      expressionArray0[3] = (Expression) coreOperationAdd0;
      CoreOperationSubtract coreOperationSubtract0 = new CoreOperationSubtract(expression0, expression0);
      expressionArray0[4] = (Expression) coreOperationSubtract0;
      CoreOperationNotEqual coreOperationNotEqual0 = new CoreOperationNotEqual(coreFunction0, expressionArray1[2]);
      expressionArray0[5] = (Expression) coreOperationNotEqual0;
      CoreFunction coreFunction1 = new CoreFunction(6, expressionArray0);
      // Undeclared exception!
//      try { 
        coreFunction1.compute((EvalContext) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.evosuite.runtime.System", e);
//      }
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      int int0 = 11;
      Expression[] expressionArray0 = new Expression[1];
      Constant constant0 = new Constant("");
      expressionArray0[0] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction(11, expressionArray0);
      EvalContext evalContext0 = null;
      int int1 = (-2636);
      Step[] stepArray0 = new Step[7];
      Step step0 = new Step(11, (NodeTest) null, expressionArray0);
      stepArray0[0] = step0;
      Step step1 = new Step((-360), (NodeTest) null, expressionArray0);
      stepArray0[1] = step1;
      Step step2 = new Step((-716), (NodeTest) null, expressionArray0);
      stepArray0[2] = step2;
      Step step3 = new Step(13, (NodeTest) null, expressionArray0);
      stepArray0[3] = step3;
      Step step4 = new Step(1424, (NodeTest) null, expressionArray0);
      stepArray0[4] = step4;
      Step step5 = new Step((-173), (NodeTest) null, expressionArray0);
      stepArray0[5] = step5;
      Expression[] expressionArray1 = new Expression[7];
      QName qName0 = new QName("");
      VariableReference variableReference0 = new VariableReference(qName0);
      expressionArray1[0] = (Expression) variableReference0;
      expressionArray1[1] = (Expression) coreFunction0;
      expressionArray1[2] = (Expression) coreFunction0;
      expressionArray1[3] = (Expression) constant0;
      expressionArray1[4] = (Expression) coreFunction0;
      expressionArray1[5] = (Expression) constant0;
      expressionArray1[6] = (Expression) constant0;
      Step step6 = new Step(0, (NodeTest) null, expressionArray1);
      stepArray0[6] = step6;
      ExpressionPath expressionPath0 = new ExpressionPath(coreFunction0, expressionArray0, stepArray0);
      expressionPath0.createContextForStep((EvalContext) null, 799, (NodeTest) null);
      // Undeclared exception!
//      try { 
        coreFunction0.computeValue((EvalContext) null);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // Incorrect number of arguments: contains('')
//         //
//         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(14);
      NodeTypeTest nodeTypeTest1 = new NodeTypeTest(14);
      Expression[] expressionArray0 = new Expression[1];
      int int0 = 1;
      CoreFunction coreFunction0 = new CoreFunction(1, expressionArray0);
      CoreOperationEqual coreOperationEqual0 = new CoreOperationEqual(coreFunction0, coreFunction0);
      expressionArray0[0] = (Expression) coreOperationEqual0;
      Step step0 = new Step(14, nodeTypeTest1, expressionArray0);
      Step step1 = new Step(20, nodeTypeTest0, expressionArray0);
      Step[] stepArray0 = new Step[6];
      stepArray0[0] = step1;
      stepArray0[1] = step1;
      stepArray0[2] = step1;
      stepArray0[3] = step1;
      Step step2 = new Step(3121, nodeTypeTest0, expressionArray0);
      stepArray0[4] = step2;
      stepArray0[5] = step1;
      ExpressionPath expressionPath0 = new ExpressionPath(expressionArray0[0], expressionArray0, stepArray0);
      EvalContext evalContext0 = null;
      // Undeclared exception!
//      try { 
        coreFunction0.computeValue((EvalContext) null);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // Incorrect number of arguments: last(org.apache.commons.jxpath.ri.compiler.CoreFunction@0000000003 = org.apache.commons.jxpath.ri.compiler.CoreFunction@0000000003)
//         //
//         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Expression[] expressionArray0 = new Expression[1];
      VariableReference variableReference0 = new VariableReference((QName) null);
      expressionArray0[0] = (Expression) variableReference0;
      CoreFunction coreFunction0 = new CoreFunction(25, expressionArray0);
      coreFunction0.toString();
      // Undeclared exception!
//      try { 
        coreFunction0.functionTrue((EvalContext) null);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // Incorrect number of arguments: floor($null)
//         //
//         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction((-2627), expressionArray0);
      coreFunction0.getFunctionName();
      coreFunction0.computeContextDependent();
      Long long0 = new Long(0L);
      Constant constant0 = new Constant(long0);
      Step[] stepArray0 = new Step[1];
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("div");
      Step step0 = new Step((-2627), processingInstructionTest0, expressionArray0);
      stepArray0[0] = step0;
      ExpressionPath expressionPath0 = new ExpressionPath(constant0, expressionArray0, stepArray0);
      coreFunction0.functionTrue((EvalContext) null);
      // Undeclared exception!
//      try { 
        coreFunction0.functionRound((EvalContext) null);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // Incorrect number of arguments: unknownFunction-2627()()
//         //
//         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest((-1099));
      Step step0 = new Step((-1099), nodeTypeTest0, expressionArray0);
      Step step1 = new Step((-21), nodeTypeTest0, expressionArray0);
      ExtensionFunction extensionFunction0 = new ExtensionFunction((QName) null, expressionArray0);
      CoreOperationGreaterThan coreOperationGreaterThan0 = new CoreOperationGreaterThan(extensionFunction0, extensionFunction0);
      Step[] stepArray0 = new Step[1];
      stepArray0[0] = step1;
      ExpressionPath expressionPath0 = new ExpressionPath(coreOperationGreaterThan0, expressionArray0, stepArray0);
      EvalContext evalContext0 = null;
      CoreFunction coreFunction0 = new CoreFunction(20, expressionArray0);
      // Undeclared exception!
//      try { 
        coreFunction0.computeValue((EvalContext) null);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // Incorrect number of arguments: true(null)
//         //
//         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction((-2627), expressionArray0);
      coreFunction0.getFunctionName();
      Long long0 = new Long((-2627));
      Constant constant0 = new Constant(long0);
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("div");
      processingInstructionTest0.toString();
      CoreFunction coreFunction1 = new CoreFunction(3679, expressionArray0);
      coreFunction1.computeContextDependent();
      coreFunction0.functionFalse((EvalContext) null);
      // Undeclared exception!
//      try { 
        coreFunction1.functionName((EvalContext) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test223()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      Constant constant0 = new Constant("");
      expressionArray0[0] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction(30, expressionArray0);
      QName qName0 = new QName((String) null, (String) null);
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
      Step step0 = new Step(910, nodeNameTest0, expressionArray0);
      coreFunction0.functionString((EvalContext) null);
      Step step1 = new Step(910, nodeNameTest0, expressionArray0);
      step1.isContextDependent();
      step0.toString();
      EvalContext evalContext0 = null;
      PredicateContext predicateContext0 = new PredicateContext((EvalContext) null, coreFunction0);
      Expression[] expressionArray1 = new Expression[6];
      expressionArray1[0] = (Expression) coreFunction0;
      expressionArray1[1] = (Expression) coreFunction0;
      coreFunction0.functionBoolean(predicateContext0);
      // Undeclared exception!
//      try { 
        coreFunction0.functionTrue(predicateContext0);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // Incorrect number of arguments: format-number('')
//         //
//         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test224()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      Constant constant0 = new Constant("\" could not be added to the top level of the document: ");
      expressionArray0[0] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction(30, expressionArray0);
      EvalContext evalContext0 = null;
      coreFunction0.functionCeiling((EvalContext) null);
      PredicateContext predicateContext0 = new PredicateContext((EvalContext) null, coreFunction0);
      coreFunction0.functionNumber(predicateContext0);
      coreFunction0.functionNot(predicateContext0);
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest((-2627));
      coreFunction0.functionLocalName(predicateContext0);
      CoreFunction coreFunction1 = new CoreFunction((-2627), expressionArray0);
      // Undeclared exception!
//      try { 
        coreFunction0.functionStartsWith(predicateContext0);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // Incorrect number of arguments: format-number('\" could not be added to the top level of the document: ')
//         //
//         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test225()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      Constant constant0 = new Constant("");
      expressionArray0[0] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction(30, expressionArray0);
      QName qName0 = new QName((String) null, (String) null);
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
      Step step0 = new Step(910, nodeNameTest0, expressionArray0);
      Step step1 = new Step(910, nodeNameTest0, expressionArray0);
      step1.isContextDependent();
      step0.toString();
      PredicateContext predicateContext0 = new PredicateContext((EvalContext) null, coreFunction0);
      Expression[] expressionArray1 = new Expression[6];
      expressionArray1[0] = (Expression) coreFunction0;
      expressionArray1[1] = (Expression) coreFunction0;
      expressionArray1[2] = (Expression) constant0;
      expressionArray1[3] = (Expression) constant0;
      CoreOperationNegate coreOperationNegate0 = new CoreOperationNegate(coreFunction0);
      expressionArray1[4] = (Expression) coreOperationNegate0;
      expressionArray1[5] = (Expression) coreFunction0;
      boolean boolean0 = coreFunction0.computeContextDependent();
      assertEquals(30, coreFunction0.getFunctionCode());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test226()  throws Throwable  {
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(19);
      Constant constant0 = new Constant("");
      Short short0 = new Short((short)17);
      Constant constant1 = new Constant(short0);
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("");
      processingInstructionTest0.toString();
      Expression[] expressionArray0 = new Expression[4];
      expressionArray0[0] = (Expression) constant1;
      expressionArray0[1] = (Expression) constant1;
      expressionArray0[2] = (Expression) constant0;
      expressionArray0[3] = (Expression) constant1;
      Step[] stepArray0 = new Step[3];
      Step step0 = new Step((-778), processingInstructionTest0, expressionArray0);
      stepArray0[0] = step0;
      NodeTypeTest nodeTypeTest1 = new NodeTypeTest((-778));
      Step step1 = new Step((short)17, nodeTypeTest1, expressionArray0);
      stepArray0[1] = step1;
      Expression[] expressionArray1 = new Expression[0];
      Step step2 = new Step(40, nodeTypeTest1, expressionArray1);
      stepArray0[2] = step2;
      ExpressionPath expressionPath0 = new ExpressionPath(constant1, expressionArray0, stepArray0);
      EvalContext evalContext0 = null;
      expressionPath0.createContextForStep((EvalContext) null, 30, nodeTypeTest0);
      CoreFunction coreFunction0 = new CoreFunction(21, expressionArray0);
      coreFunction0.getFunctionName();
      CoreFunction coreFunction1 = new CoreFunction((-778), expressionArray0);
      // Undeclared exception!
//      try { 
        coreFunction1.functionLocalName((EvalContext) null);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // Incorrect number of arguments: unknownFunction-778()(17, 17, '', 17)
//         //
//         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test227()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(6, expressionArray0);
      Expression[] expressionArray1 = new Expression[6];
      expressionArray1[0] = (Expression) coreFunction0;
      expressionArray1[1] = (Expression) coreFunction0;
      expressionArray1[2] = (Expression) coreFunction0;
      expressionArray1[3] = (Expression) coreFunction0;
      expressionArray1[4] = (Expression) coreFunction0;
      expressionArray1[1] = (Expression) coreFunction0;
      Step[] stepArray0 = new Step[2];
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(6);
      Step step0 = new Step(14, nodeTypeTest0, expressionArray1);
      stepArray0[0] = step0;
      Step step1 = new Step(20, nodeTypeTest0, expressionArray1);
      stepArray0[1] = step1;
      ExpressionPath expressionPath0 = new ExpressionPath(coreFunction0, expressionArray1, stepArray0);
      EvalContext evalContext0 = null;
      // Undeclared exception!
//      try { 
        coreFunction0.computeValue((EvalContext) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test228()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[2];
      QName qName0 = new QName("[Comment: ");
      ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, expressionArray0);
      CoreOperationNotEqual coreOperationNotEqual0 = new CoreOperationNotEqual(extensionFunction0, extensionFunction0);
      expressionArray0[0] = (Expression) coreOperationNotEqual0;
      NameAttributeTest nameAttributeTest0 = new NameAttributeTest(expressionArray0[0], expressionArray0[0]);
      expressionArray0[1] = (Expression) nameAttributeTest0;
      CoreFunction coreFunction0 = new CoreFunction(28, expressionArray0);
      coreFunction0.isContextDependent();
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest((String) null);
      FileSystemHandling.shouldAllThrowIOExceptions();
      EvalContext evalContext0 = null;
      PredicateContext predicateContext0 = new PredicateContext((EvalContext) null, expressionArray0[1]);
      // Undeclared exception!
//      try { 
        coreFunction0.functionSubstringAfter((EvalContext) null);
//        fail("Expecting exception: StackOverflowError");
      
//      } catch(StackOverflowError e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test229()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[14];
      CoreFunction coreFunction0 = new CoreFunction(2, expressionArray0);
      ExpressionPath expressionPath0 = new ExpressionPath(expressionArray0[1], expressionArray0, (Step[]) null);
      // Undeclared exception!
//      try { 
        coreFunction0.functionConcat((EvalContext) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test230()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(28, expressionArray0);
      coreFunction0.isContextDependent();
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("Jb(fpVfB -zDfO?{");
      EvalContext evalContext0 = null;
      PredicateContext predicateContext0 = new PredicateContext((EvalContext) null, coreFunction0);
      Expression[] expressionArray1 = new Expression[2];
      expressionArray1[0] = (Expression) coreFunction0;
      expressionArray1[1] = (Expression) coreFunction0;
      CoreFunction coreFunction1 = new CoreFunction(9, expressionArray1);
      coreFunction0.computeContextDependent();
      // Undeclared exception!
//      try { 
        coreFunction0.functionLast(predicateContext0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.jxpath.ri.axes.PredicateContext", e);
//      }
  }

  @Test(timeout = 4000)
  public void test231()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      Constant constant0 = new Constant("");
      expressionArray0[0] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction(11, expressionArray0);
      CoreFunction coreFunction1 = new CoreFunction(11, expressionArray0);
      coreFunction0.toString();
      // Undeclared exception!
//      try { 
        coreFunction0.functionID((EvalContext) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test232()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      QName qName0 = new QName(")yEMvHCUk2c#", ")yEMvHCUk2c#");
      ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, expressionArray0);
      CoreOperationMod coreOperationMod0 = new CoreOperationMod(extensionFunction0, extensionFunction0);
      EvalContext evalContext0 = null;
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest((-2636));
      Expression[] expressionArray1 = new Expression[1];
      expressionArray1[0] = (Expression) extensionFunction0;
      CoreFunction coreFunction0 = new CoreFunction((-2636), expressionArray1);
      // Undeclared exception!
//      try { 
        coreFunction0.functionBoolean((EvalContext) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.jxpath.ri.compiler.ExtensionFunction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test233()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[3];
      QName qName0 = new QName("", "");
      VariableReference variableReference0 = new VariableReference(qName0);
      CoreOperationLessThan coreOperationLessThan0 = new CoreOperationLessThan(variableReference0, variableReference0);
      expressionArray0[0] = (Expression) coreOperationLessThan0;
      CoreOperationGreaterThanOrEqual coreOperationGreaterThanOrEqual0 = new CoreOperationGreaterThanOrEqual(coreOperationLessThan0, coreOperationLessThan0);
      expressionArray0[1] = (Expression) coreOperationGreaterThanOrEqual0;
      CoreOperationNotEqual coreOperationNotEqual0 = new CoreOperationNotEqual(coreOperationGreaterThanOrEqual0, coreOperationLessThan0);
      expressionArray0[2] = (Expression) coreOperationNotEqual0;
      CoreFunction coreFunction0 = new CoreFunction(16, expressionArray0);
      RootContext rootContext0 = new RootContext((JXPathContextReferenceImpl) null, (NodePointer) null);
      PredicateContext predicateContext0 = new PredicateContext(rootContext0, expressionArray0[2]);
      BasicNodeSet basicNodeSet0 = new BasicNodeSet();
      NodeSetContext nodeSetContext0 = new NodeSetContext(predicateContext0, basicNodeSet0);
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("");
      PrecedingOrFollowingContext precedingOrFollowingContext0 = new PrecedingOrFollowingContext(nodeSetContext0, processingInstructionTest0, true);
      ChildContext childContext0 = new ChildContext(precedingOrFollowingContext0, processingInstructionTest0, true, true);
      // Undeclared exception!
//      try { 
        coreFunction0.functionFloor(childContext0);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // Incorrect number of arguments: normalize-space(org.apache.commons.jxpath.ri.compiler.VariableReference@0000000002 < org.apache.commons.jxpath.ri.compiler.VariableReference@0000000002, org.apache.commons.jxpath.ri.compiler.CoreOperationLessThan@0000000003 >= (org.apache.commons.jxpath.ri.compiler.CoreOperationLessThan@0000000003), org.apache.commons.jxpath.ri.compiler.CoreOperationGreaterThanOrEqual@0000000004 != org.apache.commons.jxpath.ri.compiler.CoreOperationLessThan@0000000003)
//         //
//         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test234()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[14];
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest((-66));
      Long long0 = new Long(2);
      EvalContext evalContext0 = null;
      CoreFunction coreFunction0 = new CoreFunction(10, expressionArray0);
      // Undeclared exception!
//      try { 
        coreFunction0.compute((EvalContext) null);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // Incorrect number of arguments: starts-with(null, null, null, null, null, null, null, null, null, null, null, null, null, null)
//         //
//         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test235()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      Long long0 = new Long(16L);
      EvalContext evalContext0 = null;
      CoreFunction coreFunction0 = new CoreFunction((-2798), expressionArray0);
      coreFunction0.compute((EvalContext) null);
      coreFunction0.compute((EvalContext) null);
      // Undeclared exception!
//      try { 
        coreFunction0.functionNot((EvalContext) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test236()  throws Throwable  {
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(19);
      Constant constant0 = new Constant("");
      Expression[] expressionArray0 = new Expression[4];
      expressionArray0[0] = (Expression) constant0;
      expressionArray0[1] = (Expression) constant0;
      expressionArray0[2] = (Expression) constant0;
      expressionArray0[3] = (Expression) constant0;
      ExpressionPath expressionPath0 = new ExpressionPath(constant0, expressionArray0, (Step[]) null);
      EvalContext evalContext0 = null;
      CoreFunction coreFunction0 = new CoreFunction(19, expressionArray0);
      // Undeclared exception!
//      try { 
        coreFunction0.computeValue((EvalContext) null);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // Incorrect number of arguments: not('', '', '', '')
//         //
//         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test237()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      CoreFunction coreFunction0 = new CoreFunction(23, expressionArray0);
      Step[] stepArray0 = new Step[2];
      QName qName0 = new QName("");
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
      Step step0 = new Step(23, nodeNameTest0, expressionArray0);
      stepArray0[0] = step0;
      Step step1 = new Step(23, nodeNameTest0, expressionArray0);
      stepArray0[1] = step1;
      ExpressionPath expressionPath0 = new ExpressionPath(coreFunction0, expressionArray0, stepArray0);
      EvalContext evalContext0 = null;
      // Undeclared exception!
//      try { 
        coreFunction0.computeValue((EvalContext) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test238()  throws Throwable  {
      Constant constant0 = new Constant("An EntityRef is not allowed at the document root");
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(2);
      Expression[] expressionArray0 = new Expression[2];
      expressionArray0[0] = (Expression) constant0;
      expressionArray0[1] = (Expression) constant0;
      Step step0 = new Step(2, nodeTypeTest0, expressionArray0);
      Expression[] expressionArray1 = new Expression[5];
      expressionArray1[0] = (Expression) constant0;
      expressionArray1[1] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction(17, expressionArray1);
      Expression expression0 = coreFunction0.getArg1();
      expressionArray1[2] = expression0;
      expressionArray1[3] = (Expression) constant0;
      CoreOperationNegate coreOperationNegate0 = new CoreOperationNegate(constant0);
      expressionArray1[4] = (Expression) coreOperationNegate0;
      nodeTypeTest0.toString();
      Step step1 = new Step((-1670), nodeTypeTest0, expressionArray1);
      Step step2 = new Step(18, nodeTypeTest0, expressionArray0);
      Step step3 = new Step(2919, nodeTypeTest0, expressionArray1);
      Step step4 = new Step(8, nodeTypeTest0, expressionArray1);
      step3.isContextDependent();
      coreFunction0.getFunctionName();
      PredicateContext predicateContext0 = new PredicateContext((EvalContext) null, expressionArray1[1]);
      CoreFunction coreFunction1 = new CoreFunction(8, expressionArray1);
      coreFunction1.computeContextDependent();
      // Undeclared exception!
//      try { 
        coreFunction1.functionSubstring((EvalContext) null);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // Incorrect number of arguments: string('An EntityRef is not allowed at the document root', 'An EntityRef is not allowed at the document root', 'An EntityRef is not allowed at the document root', 'An EntityRef is not allowed at the document root', -org.apache.commons.jxpath.ri.compiler.Constant@0000000001)
//         //
//         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test239()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      Step[] stepArray0 = new Step[0];
      LocationPath locationPath0 = new LocationPath(true, stepArray0);
      expressionArray0[0] = (Expression) locationPath0;
      CoreFunction coreFunction0 = new CoreFunction(0, expressionArray0);
      CoreFunction coreFunction1 = new CoreFunction(16, expressionArray0);
      ExpressionPath expressionPath0 = new ExpressionPath(locationPath0, expressionArray0, stepArray0);
      CoreFunction coreFunction2 = new CoreFunction(2381, expressionArray0);
      coreFunction1.computeContextDependent();
      EvalContext evalContext0 = null;
      // Undeclared exception!
//      try { 
        coreFunction0.functionFalse((EvalContext) null);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // Incorrect number of arguments: unknownFunction0()()
//         //
//         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test240()  throws Throwable  {
      Constant constant0 = new Constant("An EntityRef is not allowed at the document root");
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(2);
      Expression[] expressionArray0 = new Expression[2];
      expressionArray0[0] = (Expression) constant0;
      expressionArray0[1] = (Expression) constant0;
      Step step0 = new Step(2, nodeTypeTest0, expressionArray0);
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("An EntityRef is not allowed at the document root");
      processingInstructionTest0.toString();
      FileSystemHandling.shouldAllThrowIOExceptions();
      EvalContext evalContext0 = null;
      PredicateContext predicateContext0 = new PredicateContext((EvalContext) null, expressionArray0[0]);
      CoreFunction coreFunction0 = new CoreFunction(7, expressionArray0);
      coreFunction0.functionSubstringAfter((EvalContext) null);
      CoreFunction coreFunction1 = new CoreFunction(17, expressionArray0);
      CoreFunction coreFunction2 = new CoreFunction(13, expressionArray0);
      Step[] stepArray0 = new Step[2];
      stepArray0[0] = step0;
      stepArray0[1] = step0;
      ExpressionPath expressionPath0 = new ExpressionPath(coreFunction1, expressionArray0, stepArray0);
      EvalContext evalContext1 = expressionPath0.createContextForStep(predicateContext0, 2, processingInstructionTest0);
      // Undeclared exception!
//      try { 
        coreFunction2.functionLast(evalContext1);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // Incorrect number of arguments: substring-after('An EntityRef is not allowed at the document root', 'An EntityRef is not allowed at the document root')
//         //
//         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test241()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      Constant constant0 = new Constant("\" could not be added to the top level of the document: ");
      expressionArray0[0] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction(30, expressionArray0);
      EvalContext evalContext0 = null;
      PredicateContext predicateContext0 = new PredicateContext((EvalContext) null, coreFunction0);
      coreFunction0.functionNumber(predicateContext0);
      coreFunction0.functionNot(predicateContext0);
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest((-2627));
      coreFunction0.functionLocalName(predicateContext0);
      CoreFunction coreFunction1 = new CoreFunction((-2627), expressionArray0);
      // Undeclared exception!
//      try { 
        coreFunction0.functionStartsWith(predicateContext0);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // Incorrect number of arguments: format-number('\" could not be added to the top level of the document: ')
//         //
//         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test242()  throws Throwable  {
      Constant constant0 = new Constant("An EntityRef is not allowed at the document root");
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(2);
      Expression[] expressionArray0 = new Expression[2];
      expressionArray0[0] = (Expression) constant0;
      expressionArray0[1] = (Expression) constant0;
      Step step0 = new Step(2, nodeTypeTest0, expressionArray0);
      Expression[] expressionArray1 = new Expression[5];
      expressionArray1[0] = (Expression) constant0;
      expressionArray1[1] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction(17, expressionArray1);
      Expression expression0 = coreFunction0.getArg1();
      expressionArray1[2] = expression0;
      expressionArray1[3] = (Expression) constant0;
      CoreOperationNegate coreOperationNegate0 = new CoreOperationNegate(constant0);
      expressionArray1[4] = (Expression) coreOperationNegate0;
      Step step1 = new Step((-1670), nodeTypeTest0, expressionArray1);
      Step step2 = new Step(18, nodeTypeTest0, expressionArray0);
      Step step3 = new Step(2919, nodeTypeTest0, expressionArray1);
      Step step4 = new Step(8, nodeTypeTest0, expressionArray1);
      step3.isContextDependent();
      coreFunction0.getFunctionName();
      EvalContext evalContext0 = null;
      PredicateContext predicateContext0 = new PredicateContext((EvalContext) null, expressionArray1[1]);
      CoreFunction coreFunction1 = new CoreFunction(8, expressionArray1);
      // Undeclared exception!
//      try { 
        coreFunction1.functionSubstringAfter((EvalContext) null);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // Incorrect number of arguments: string('An EntityRef is not allowed at the document root', 'An EntityRef is not allowed at the document root', 'An EntityRef is not allowed at the document root', 'An EntityRef is not allowed at the document root', -org.apache.commons.jxpath.ri.compiler.Constant@0000000001)
//         //
//         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test243()  throws Throwable  {
      Step[] stepArray0 = null;
      Expression[] expressionArray0 = new Expression[6];
      CoreFunction coreFunction0 = new CoreFunction(6, expressionArray0);
      ExpressionPath expressionPath0 = new ExpressionPath(expressionArray0[0], expressionArray0, (Step[]) null);
      EvalContext evalContext0 = null;
      // Undeclared exception!
//      try { 
        coreFunction0.computeValue((EvalContext) null);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // Incorrect number of arguments: namespace-uri(null, null, null, null, null, null)
//         //
//         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test244()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      Constant constant0 = new Constant("");
      expressionArray0[0] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction(11, expressionArray0);
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest((-2636));
      CoreFunction coreFunction1 = new CoreFunction(11, expressionArray0);
      Object object0 = coreFunction0.functionBoolean((EvalContext) null);
      assertEquals(false, object0);
      
      coreFunction0.functionNormalizeSpace((EvalContext) null);
      assertEquals(11, coreFunction0.getFunctionCode());
  }

  @Test(timeout = 4000)
  public void test245()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest((-2798));
      Long long0 = new Long(0L);
      CoreFunction coreFunction0 = new CoreFunction((-2798), expressionArray0);
      CoreOperationMod coreOperationMod0 = new CoreOperationMod(coreFunction0, (Expression) null);
      CoreFunction coreFunction1 = new CoreFunction((-2798), expressionArray0);
      coreFunction0.toString();
      // Undeclared exception!
//      try { 
        coreFunction1.functionID((EvalContext) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test246()  throws Throwable  {
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(19);
      Constant constant0 = new Constant("");
      int int0 = 40;
      Expression[] expressionArray0 = null;
      CoreFunction coreFunction0 = new CoreFunction(40, (Expression[]) null);
      EvalContext evalContext0 = null;
      PredicateContext predicateContext0 = new PredicateContext((EvalContext) null, coreFunction0);
      // Undeclared exception!
//      try { 
        coreFunction0.functionNumber(predicateContext0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.jxpath.ri.axes.PredicateContext", e);
//      }
  }

  @Test(timeout = 4000)
  public void test247()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest((-2798));
      Long long0 = new Long(0L);
      EvalContext evalContext0 = null;
      CoreFunction coreFunction0 = new CoreFunction((-2798), expressionArray0);
      coreFunction0.compute((EvalContext) null);
      // Undeclared exception!
//      try { 
        coreFunction0.functionSubstring((EvalContext) null);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // Incorrect number of arguments: unknownFunction-2798()(null)
//         //
//         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test248()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[2];
      Step[] stepArray0 = null;
      LocationPath locationPath0 = new LocationPath(true, (Step[]) null);
      expressionArray0[0] = (Expression) locationPath0;
      CoreOperationLessThan coreOperationLessThan0 = new CoreOperationLessThan(locationPath0, locationPath0);
      expressionArray0[1] = (Expression) coreOperationLessThan0;
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("div");
      processingInstructionTest0.toString();
      CoreFunction coreFunction0 = new CoreFunction(2081, expressionArray0);
      coreFunction0.getArg1();
      // Undeclared exception!
//      try { 
        coreFunction0.functionSubstring((EvalContext) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.jxpath.ri.compiler.LocationPath", e);
//      }
  }

  @Test(timeout = 4000)
  public void test249()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      Constant constant0 = new Constant("");
      expressionArray0[0] = (Expression) constant0;
      constant0.toString();
      CoreFunction coreFunction0 = new CoreFunction(9, expressionArray0);
      coreFunction0.isContextDependent();
      JXPathContext jXPathContext0 = JXPathContext.newContext((Object) "''");
      EvalContext evalContext0 = null;
      BasicNodeSet basicNodeSet0 = new BasicNodeSet();
      NodeSetContext nodeSetContext0 = new NodeSetContext((EvalContext) null, basicNodeSet0);
      PredicateContext predicateContext0 = new PredicateContext((EvalContext) null, coreFunction0);
      Locale locale0 = Locale.ITALY;
      NodePointer nodePointer0 = NodePointer.newNodePointer((QName) null, predicateContext0, locale0);
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = new JXPathContextReferenceImpl(jXPathContext0, nodeSetContext0, nodePointer0);
      RootContext rootContext0 = new RootContext(jXPathContextReferenceImpl0, nodePointer0);
      // Undeclared exception!
//      try { 
        coreFunction0.computeValue(nodeSetContext0);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // Incorrect number of arguments: concat('')
//         //
//         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test250()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      Constant constant0 = new Constant("");
      expressionArray0[0] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction(30, expressionArray0);
      PredicateContext predicateContext0 = new PredicateContext((EvalContext) null, coreFunction0);
      coreFunction0.functionNumber(predicateContext0);
      coreFunction0.functionNot(predicateContext0);
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest((-2627));
      AttributeContext attributeContext0 = new AttributeContext((EvalContext) null, nodeTypeTest0);
      coreFunction0.functionLocalName(attributeContext0);
      // Undeclared exception!
//      try { 
        coreFunction0.compute((EvalContext) null);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // Incorrect number of arguments: format-number('')
//         //
//         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test251()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      Constant constant0 = new Constant("");
      expressionArray0[0] = (Expression) constant0;
      constant0.toString();
      CoreFunction coreFunction0 = new CoreFunction(9, expressionArray0);
      coreFunction0.isContextDependent();
      JXPathContext.newContext((Object) "''");
      BasicNodeSet basicNodeSet0 = new BasicNodeSet();
      Locale locale0 = Locale.ITALY;
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("");
      Step step0 = new Step(9, processingInstructionTest0, expressionArray0);
      step0.isContextDependent();
      step0.toString();
      PredicateContext predicateContext0 = new PredicateContext((EvalContext) null, expressionArray0[0]);
      CoreFunction coreFunction1 = new CoreFunction(22, expressionArray0);
      // Undeclared exception!
//      try { 
        coreFunction1.functionStartsWith((EvalContext) null);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // Incorrect number of arguments: lang('')
//         //
//         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test252()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      Constant constant0 = new Constant("");
      expressionArray0[0] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction(30, expressionArray0);
      PredicateContext predicateContext0 = new PredicateContext((EvalContext) null, coreFunction0);
      coreFunction0.functionNumber(predicateContext0);
      coreFunction0.functionNot(predicateContext0);
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest((-2627));
      coreFunction0.functionLocalName(predicateContext0);
      coreFunction0.functionName((EvalContext) null);
      coreFunction0.functionBoolean((EvalContext) null);
      // Undeclared exception!
//      try { 
        coreFunction0.functionTrue(predicateContext0);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // Incorrect number of arguments: format-number('')
//         //
//         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test253()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      Constant constant0 = new Constant("");
      expressionArray0[0] = (Expression) constant0;
      constant0.toString();
      constant0.toString();
      Long long0 = new Long((-1L));
      EvalContext evalContext0 = null;
      CoreFunction coreFunction0 = new CoreFunction(19, expressionArray0);
      coreFunction0.functionFloor((EvalContext) null);
      // Undeclared exception!
//      try { 
        coreFunction0.functionLast((EvalContext) null);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // Incorrect number of arguments: not('')
//         //
//         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test254()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[6];
      String string0 = "\"q,8";
      QName qName0 = new QName("\"q,8");
      ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, expressionArray0);
      CoreOperationMultiply coreOperationMultiply0 = new CoreOperationMultiply(extensionFunction0, extensionFunction0);
      expressionArray0[0] = (Expression) coreOperationMultiply0;
      CoreOperationNegate coreOperationNegate0 = new CoreOperationNegate(extensionFunction0);
      expressionArray0[1] = (Expression) coreOperationNegate0;
      coreOperationNegate0.toString();
      CoreOperationEqual coreOperationEqual0 = new CoreOperationEqual(extensionFunction0, expressionArray0[1]);
      expressionArray0[2] = (Expression) coreOperationEqual0;
      Constant constant0 = new Constant("ew'W|");
      expressionArray0[3] = (Expression) constant0;
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd(expressionArray0);
      expressionArray0[4] = (Expression) coreOperationAdd0;
      ExtensionFunction extensionFunction1 = new ExtensionFunction(qName0, expressionArray0);
      extensionFunction1.args = expressionArray0;
      CoreOperationGreaterThanOrEqual coreOperationGreaterThanOrEqual0 = new CoreOperationGreaterThanOrEqual(extensionFunction1, expressionArray0[1]);
      expressionArray0[5] = (Expression) coreOperationGreaterThanOrEqual0;
      CoreFunction coreFunction0 = new CoreFunction(29, expressionArray0);
      coreFunction0.getArgumentCount();
      coreFunction0.getArg2();
      EvalContext evalContext0 = null;
      // Undeclared exception!
//      try { 
        coreFunction0.functionNamespaceURI((EvalContext) null);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // Incorrect number of arguments: key(org.apache.commons.jxpath.ri.compiler.ExtensionFunction@0000000002 * org.apache.commons.jxpath.ri.compiler.ExtensionFunction@0000000002, -org.apache.commons.jxpath.ri.compiler.ExtensionFunction@0000000002, org.apache.commons.jxpath.ri.compiler.ExtensionFunction@0000000002 = org.apache.commons.jxpath.ri.compiler.CoreOperationNegate@0000000004, 'ew'W|', org.apache.commons.jxpath.ri.compiler.CoreOperationMultiply@0000000003 + org.apache.commons.jxpath.ri.compiler.CoreOperationNegate@0000000004 + (org.apache.commons.jxpath.ri.compiler.CoreOperationEqual@0000000005) + org.apache.commons.jxpath.ri.compiler.Constant@0000000006 + org.apache.commons.jxpath.ri.compiler.CoreOperationAdd@0000000007 + (org.apache.commons.jxpath.ri.compiler.CoreOperationGreaterThanOrEqual@0000000009), org.apache.commons.jxpath.ri.compiler.ExtensionFunction@0000000008 >= org.apache.commons.jxpath.ri.compiler.CoreOperationNegate@0000000004)
//         //
//         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test255()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      Constant constant0 = new Constant("");
      expressionArray0[0] = (Expression) constant0;
      constant0.toString();
      CoreFunction coreFunction0 = new CoreFunction(9, expressionArray0);
      boolean boolean0 = coreFunction0.isContextDependent();
      JXPathContext jXPathContext0 = JXPathContext.newContext((Object) "''");
      BasicNodeSet basicNodeSet0 = new BasicNodeSet();
      NodeSetContext nodeSetContext0 = new NodeSetContext((EvalContext) null, basicNodeSet0);
      PredicateContext predicateContext0 = new PredicateContext((EvalContext) null, coreFunction0);
      Locale locale0 = Locale.KOREAN;
      NodePointer nodePointer0 = NodePointer.newNodePointer((QName) null, predicateContext0, locale0);
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = new JXPathContextReferenceImpl(jXPathContext0, nodeSetContext0, nodePointer0);
      RootContext rootContext0 = new RootContext(jXPathContextReferenceImpl0, nodePointer0);
      EvalContext evalContext0 = rootContext0.getConstantContext((Object) null);
      evalContext0.reset();
      constant0.iterate(evalContext0);
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("");
      Step step0 = new Step(9, processingInstructionTest0, expressionArray0);
      step0.isContextDependent();
      step0.toString();
      PredicateContext predicateContext1 = new PredicateContext((EvalContext) null, expressionArray0[0]);
      CoreFunction coreFunction1 = new CoreFunction(Integer.MIN_VALUE, expressionArray0);
      coreFunction0.computeContextDependent();
      coreFunction1.functionLocalName(rootContext0);
      coreFunction1.functionName(rootContext0);
      Object object0 = coreFunction1.functionBoolean(predicateContext0);
      assertEquals(9, coreFunction0.getFunctionCode());
      assertTrue(object0.equals((Object)boolean0));
  }

  @Test(timeout = 4000)
  public void test256()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(9);
      Long long0 = new Long(9);
      EvalContext evalContext0 = null;
      CoreFunction coreFunction0 = new CoreFunction(9, expressionArray0);
      // Undeclared exception!
//      try { 
        coreFunction0.compute((EvalContext) null);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // Incorrect number of arguments: concat(null)
//         //
//         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test257()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[6];
      CoreOperationLessThan coreOperationLessThan0 = new CoreOperationLessThan((Expression) null, (Expression) null);
      expressionArray0[0] = (Expression) coreOperationLessThan0;
      String string0 = "'";
      QName qName0 = new QName("'", "");
      VariableReference variableReference0 = new VariableReference(qName0);
      expressionArray0[1] = (Expression) variableReference0;
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual(coreOperationLessThan0, variableReference0);
      expressionArray0[2] = (Expression) coreOperationLessThanOrEqual0;
      CoreOperationDivide coreOperationDivide0 = new CoreOperationDivide(coreOperationLessThanOrEqual0, variableReference0);
      expressionArray0[3] = (Expression) coreOperationDivide0;
      ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, expressionArray0);
      NameAttributeTest nameAttributeTest0 = new NameAttributeTest(variableReference0, extensionFunction0);
      expressionArray0[4] = (Expression) nameAttributeTest0;
      int int0 = 7;
      CoreFunction coreFunction0 = new CoreFunction(7, expressionArray0);
      Expression expression0 = coreFunction0.getArg2();
      expressionArray0[5] = expression0;
      CoreFunction coreFunction1 = new CoreFunction(0, expressionArray0);
      EvalContext evalContext0 = null;
      // Undeclared exception!
//      try { 
        coreFunction0.functionKey((EvalContext) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.evosuite.runtime.System", e);
//      }
  }

  @Test(timeout = 4000)
  public void test258()  throws Throwable  {
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(9);
      Expression[] expressionArray0 = new Expression[3];
      Long long0 = new Long(9);
      EvalContext evalContext0 = null;
      CoreFunction coreFunction0 = new CoreFunction(6, expressionArray0);
      // Undeclared exception!
//      try { 
        coreFunction0.functionFloor((EvalContext) null);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // Incorrect number of arguments: namespace-uri(null, null, null)
//         //
//         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test259()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      Constant constant0 = new Constant("");
      expressionArray0[0] = (Expression) constant0;
      constant0.toString();
      CoreFunction coreFunction0 = new CoreFunction(9, expressionArray0);
      boolean boolean0 = coreFunction0.isContextDependent();
      assertFalse(boolean0);
      
      JXPathContext jXPathContext0 = JXPathContext.newContext((Object) "''");
      BasicNodeSet basicNodeSet0 = new BasicNodeSet();
      NodeSetContext nodeSetContext0 = new NodeSetContext((EvalContext) null, basicNodeSet0);
      PredicateContext predicateContext0 = new PredicateContext((EvalContext) null, coreFunction0);
      Locale locale0 = Locale.ITALY;
      NodePointer nodePointer0 = NodePointer.newNodePointer((QName) null, predicateContext0, locale0);
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = new JXPathContextReferenceImpl(jXPathContext0, nodeSetContext0, nodePointer0);
      RootContext rootContext0 = new RootContext(jXPathContextReferenceImpl0, nodePointer0);
      EvalContext evalContext0 = rootContext0.getConstantContext((Object) null);
      constant0.iterate(evalContext0);
      CoreFunction coreFunction1 = new CoreFunction(1251, expressionArray0);
      coreFunction0.functionRound((EvalContext) null);
      coreFunction0.functionNamespaceURI(evalContext0);
      assertEquals(9, coreFunction0.getFunctionCode());
  }

  @Test(timeout = 4000)
  public void test260()  throws Throwable  {
      Constant constant0 = new Constant("prY:vGQJ<9B6d");
      Step[] stepArray0 = new Step[6];
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(9);
      Expression[] expressionArray0 = new Expression[3];
      expressionArray0[0] = (Expression) constant0;
      expressionArray0[1] = (Expression) constant0;
      expressionArray0[2] = (Expression) constant0;
      Step step0 = new Step(9, nodeTypeTest0, expressionArray0);
      stepArray0[0] = step0;
      Step step1 = new Step(17, nodeTypeTest0, expressionArray0);
      stepArray0[1] = step1;
      Step step2 = new Step(17, nodeTypeTest0, expressionArray0);
      stepArray0[2] = step1;
      Step step3 = new Step((-648), nodeTypeTest0, expressionArray0);
      stepArray0[3] = step3;
      Step step4 = new Step(17, nodeTypeTest0, expressionArray0);
      stepArray0[4] = step4;
      step4.isContextDependent();
      step2.toString();
      PredicateContext predicateContext0 = new PredicateContext((EvalContext) null, constant0);
      ExpressionPath expressionPath0 = new ExpressionPath(expressionArray0[2], expressionArray0, stepArray0);
      expressionPath0.createContextForStep((EvalContext) null, 17, nodeTypeTest0);
      CoreFunction coreFunction0 = new CoreFunction(4, expressionArray0);
      // Undeclared exception!
//      try { 
        coreFunction0.functionName((EvalContext) null);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // Incorrect number of arguments: id('prY:vGQJ<9B6d', 'prY:vGQJ<9B6d', 'prY:vGQJ<9B6d')
//         //
//         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test261()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      Constant constant0 = new Constant("");
      constant0.toString();
      CoreFunction coreFunction0 = new CoreFunction(28, expressionArray0);
      coreFunction0.isContextDependent();
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("Jb(fpVfB -zDfO?{");
      processingInstructionTest0.toString();
      Step step0 = new Step((-2627), processingInstructionTest0, expressionArray0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      step0.toString();
      PredicateContext predicateContext0 = new PredicateContext((EvalContext) null, coreFunction0);
      CoreFunction coreFunction1 = new CoreFunction((-2627), expressionArray0);
      coreFunction1.computeContextDependent();
      // Undeclared exception!
//      try { 
        coreFunction0.functionSubstringAfter((EvalContext) null);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // Incorrect number of arguments: unknownFunction28()()
//         //
//         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test262()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction((-2627), expressionArray0);
      coreFunction0.getFunctionName();
      coreFunction0.computeContextDependent();
      Long long0 = new Long(0L);
      Constant constant0 = new Constant(long0);
      Step[] stepArray0 = new Step[1];
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("div");
      Step step0 = new Step((-2627), processingInstructionTest0, expressionArray0);
      processingInstructionTest0.toString();
      stepArray0[0] = step0;
      ExpressionPath expressionPath0 = new ExpressionPath(constant0, expressionArray0, stepArray0);
      expressionPath0.createContextForStep((EvalContext) null, (-2627), processingInstructionTest0);
      constant0.toString();
      // Undeclared exception!
//      try { 
        coreFunction0.functionLast((EvalContext) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test263()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      Constant constant0 = new Constant("");
      expressionArray0[0] = (Expression) constant0;
      constant0.toString();
      CoreFunction coreFunction0 = new CoreFunction(9, expressionArray0);
      coreFunction0.isContextDependent();
      JXPathContext.newContext((Object) "''");
      PredicateContext predicateContext0 = new PredicateContext((EvalContext) null, coreFunction0);
      Locale locale0 = Locale.ITALY;
      NodePointer.newNodePointer((QName) null, predicateContext0, locale0);
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("");
      Step step0 = new Step(9, processingInstructionTest0, expressionArray0);
      ProcessingInstructionTest processingInstructionTest1 = new ProcessingInstructionTest("<<unknown namespace>>");
      processingInstructionTest1.toString();
      Step step1 = new Step(9, processingInstructionTest1, expressionArray0);
      ExpressionPath expressionPath0 = new ExpressionPath(expressionArray0[0], expressionArray0, (Step[]) null);
      coreFunction0.functionName((EvalContext) null);
      // Undeclared exception!
//      try { 
        coreFunction0.functionContains(predicateContext0);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // Incorrect number of arguments: concat('')
//         //
//         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test264()  throws Throwable  {
      LocationPath locationPath0 = new LocationPath(true, (Step[]) null);
      CoreOperationLessThan coreOperationLessThan0 = new CoreOperationLessThan((Expression) null, (Expression) null);
      Expression[] expressionArray0 = new Expression[6];
      expressionArray0[0] = null;
      expressionArray0[1] = (Expression) locationPath0;
      expressionArray0[2] = null;
      expressionArray0[3] = null;
      expressionArray0[4] = (Expression) locationPath0;
      expressionArray0[5] = null;
      CoreFunction coreFunction0 = new CoreFunction(2428, expressionArray0);
      coreFunction0.getArg1();
      ExpressionPath expressionPath0 = new ExpressionPath((Expression) null, expressionArray0, (Step[]) null);
      EvalContext evalContext0 = null;
      CoreFunction coreFunction1 = new CoreFunction(34, expressionArray0);
      coreFunction1.computeValue((EvalContext) null);
      // Undeclared exception!
//      try { 
        coreFunction0.functionBoolean((EvalContext) null);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // Incorrect number of arguments: unknownFunction2428()(null, , null, null, , null)
//         //
//         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test265()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      CoreOperationUnion coreOperationUnion0 = new CoreOperationUnion(expressionArray0);
      CoreOperationGreaterThan coreOperationGreaterThan0 = new CoreOperationGreaterThan(coreOperationUnion0, coreOperationUnion0);
      CoreOperationMod coreOperationMod0 = new CoreOperationMod(coreOperationGreaterThan0, coreOperationUnion0);
      EvalContext evalContext0 = null;
      CoreFunction coreFunction0 = new CoreFunction(0, expressionArray0);
      coreFunction0.computeValue((EvalContext) null);
      CoreFunction coreFunction1 = new CoreFunction(2203, expressionArray0);
      // Undeclared exception!
//      try { 
        coreFunction1.functionConcat((EvalContext) null);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // Incorrect number of arguments: unknownFunction2203()(null)
//         //
//         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test266()  throws Throwable  {
      Step[] stepArray0 = null;
      LocationPath locationPath0 = new LocationPath(true, (Step[]) null);
      CoreOperationLessThan coreOperationLessThan0 = new CoreOperationLessThan(locationPath0, locationPath0);
      Expression[] expressionArray0 = new Expression[6];
      expressionArray0[0] = (Expression) coreOperationLessThan0;
      expressionArray0[1] = (Expression) coreOperationLessThan0;
      expressionArray0[2] = (Expression) locationPath0;
      expressionArray0[3] = (Expression) coreOperationLessThan0;
      expressionArray0[4] = (Expression) locationPath0;
      expressionArray0[5] = (Expression) coreOperationLessThan0;
      CoreFunction coreFunction0 = new CoreFunction(27, expressionArray0);
      ExpressionPath expressionPath0 = new ExpressionPath(expressionArray0[0], expressionArray0, (Step[]) null);
      EvalContext evalContext0 = null;
      // Undeclared exception!
//      try { 
        coreFunction0.computeValue((EvalContext) null);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // Incorrect number of arguments: round(org.apache.commons.jxpath.ri.compiler.LocationPath@0000000001 < org.apache.commons.jxpath.ri.compiler.LocationPath@0000000001, org.apache.commons.jxpath.ri.compiler.LocationPath@0000000001 < org.apache.commons.jxpath.ri.compiler.LocationPath@0000000001, , org.apache.commons.jxpath.ri.compiler.LocationPath@0000000001 < org.apache.commons.jxpath.ri.compiler.LocationPath@0000000001, , org.apache.commons.jxpath.ri.compiler.LocationPath@0000000001 < org.apache.commons.jxpath.ri.compiler.LocationPath@0000000001)
//         //
//         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test267()  throws Throwable  {
      Constant constant0 = new Constant("An EntityRef is not allowed at the document root");
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(2);
      Expression[] expressionArray0 = new Expression[2];
      expressionArray0[0] = (Expression) constant0;
      expressionArray0[1] = (Expression) constant0;
      Step step0 = new Step(2, nodeTypeTest0, expressionArray0);
      Expression[] expressionArray1 = new Expression[5];
      expressionArray1[0] = (Expression) constant0;
      expressionArray1[1] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction(17, expressionArray1);
      Expression expression0 = coreFunction0.getArg1();
      expressionArray1[2] = expression0;
      expressionArray1[3] = (Expression) constant0;
      CoreOperationNegate coreOperationNegate0 = new CoreOperationNegate(constant0);
      expressionArray1[4] = (Expression) coreOperationNegate0;
      Step step1 = new Step((-1670), nodeTypeTest0, expressionArray1);
      Step step2 = new Step(18, nodeTypeTest0, expressionArray0);
      Step step3 = new Step(2919, nodeTypeTest0, expressionArray1);
      Step step4 = new Step(8, nodeTypeTest0, expressionArray1);
      step3.isContextDependent();
      String string0 = coreFunction0.getFunctionName();
      assertEquals("translate", string0);
      
      PredicateContext predicateContext0 = new PredicateContext((EvalContext) null, expressionArray1[1]);
      CoreFunction coreFunction1 = new CoreFunction(8, expressionArray1);
      boolean boolean0 = coreFunction1.computeContextDependent();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test268()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction((-2627), expressionArray0);
      coreFunction0.getFunctionName();
      coreFunction0.computeContextDependent();
      Long long0 = new Long(0L);
      Constant constant0 = new Constant(long0);
      Step[] stepArray0 = new Step[1];
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("div");
      Step step0 = new Step((-2627), processingInstructionTest0, expressionArray0);
      processingInstructionTest0.toString();
      stepArray0[0] = step0;
      ExpressionPath expressionPath0 = new ExpressionPath(constant0, expressionArray0, stepArray0);
      expressionPath0.createContextForStep((EvalContext) null, (-2627), processingInstructionTest0);
      constant0.toString();
      // Undeclared exception!
//      try { 
        coreFunction0.functionLocalName((EvalContext) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test269()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      Constant constant0 = new Constant("");
      expressionArray0[0] = (Expression) constant0;
      constant0.toString();
      CoreFunction coreFunction0 = new CoreFunction(9, expressionArray0);
      coreFunction0.isContextDependent();
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("");
      processingInstructionTest0.toString();
      CoreFunction coreFunction1 = new CoreFunction(2381, expressionArray0);
      Step[] stepArray0 = new Step[0];
      ExpressionPath expressionPath0 = new ExpressionPath(coreFunction0, expressionArray0, stepArray0);
      CoreFunction coreFunction2 = new CoreFunction(11, expressionArray0);
      coreFunction2.computeContextDependent();
      // Undeclared exception!
//      try { 
        coreFunction1.functionLang((EvalContext) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test270()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[6];
      CoreOperationOr coreOperationOr0 = new CoreOperationOr(expressionArray0);
      expressionArray0[0] = (Expression) coreOperationOr0;
      CoreFunction coreFunction0 = new CoreFunction(11, expressionArray0);
      EvalContext evalContext0 = null;
      // Undeclared exception!
//      try { 
        coreFunction0.functionLast((EvalContext) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.evosuite.runtime.System", e);
//      }
  }

  @Test(timeout = 4000)
  public void test271()  throws Throwable  {
      Constant constant0 = new Constant("prY:vGQJ<9B6d");
      Step[] stepArray0 = new Step[6];
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(9);
      Expression[] expressionArray0 = new Expression[3];
      expressionArray0[0] = (Expression) constant0;
      expressionArray0[1] = (Expression) constant0;
      expressionArray0[2] = (Expression) constant0;
      Long long0 = new Long(9);
      Constant constant1 = new Constant(long0);
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("prY:vGQJ<9B6d");
      constant1.toString();
      Expression[] expressionArray1 = new Expression[9];
      expressionArray1[0] = (Expression) constant0;
      expressionArray1[1] = (Expression) constant1;
      expressionArray1[2] = (Expression) constant1;
      expressionArray1[3] = (Expression) constant0;
      expressionArray1[4] = (Expression) constant0;
      expressionArray1[5] = (Expression) constant1;
      expressionArray1[6] = (Expression) constant0;
      expressionArray1[7] = (Expression) constant0;
      expressionArray1[8] = (Expression) constant0;
      Step step0 = new Step(40, processingInstructionTest0, expressionArray1);
      ExpressionPath expressionPath0 = new ExpressionPath(constant0, expressionArray0, stepArray0);
      expressionPath0.createContextForStep((EvalContext) null, (-448), processingInstructionTest0);
      CoreFunction coreFunction0 = new CoreFunction(6, expressionArray0);
      // Undeclared exception!
//      try { 
        coreFunction0.functionName((EvalContext) null);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // Incorrect number of arguments: namespace-uri('prY:vGQJ<9B6d', 'prY:vGQJ<9B6d', 'prY:vGQJ<9B6d')
//         //
//         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test272()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      Constant constant0 = new Constant("");
      expressionArray0[0] = (Expression) constant0;
      constant0.toString();
      CoreFunction coreFunction0 = new CoreFunction(9, expressionArray0);
      coreFunction0.isContextDependent();
      JXPathContext jXPathContext0 = JXPathContext.newContext((Object) "''");
      BasicNodeSet basicNodeSet0 = new BasicNodeSet();
      NodeSetContext nodeSetContext0 = new NodeSetContext((EvalContext) null, basicNodeSet0);
      PredicateContext predicateContext0 = new PredicateContext((EvalContext) null, coreFunction0);
      Locale locale0 = Locale.ITALY;
      NodePointer nodePointer0 = NodePointer.newNodePointer((QName) null, predicateContext0, locale0);
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = new JXPathContextReferenceImpl(jXPathContext0, nodeSetContext0, nodePointer0);
      RootContext rootContext0 = new RootContext(jXPathContextReferenceImpl0, nodePointer0);
      EvalContext evalContext0 = rootContext0.getConstantContext((Object) null);
      constant0.iterate(evalContext0);
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("");
      Step step0 = new Step(9, processingInstructionTest0, expressionArray0);
      step0.isContextDependent();
      step0.toString();
      PredicateContext predicateContext1 = new PredicateContext((EvalContext) null, expressionArray0[0]);
      CoreFunction coreFunction1 = new CoreFunction(22, expressionArray0);
      coreFunction1.computeContextDependent();
      RootContext rootContext1 = new RootContext(jXPathContextReferenceImpl0, nodePointer0);
      AncestorContext ancestorContext0 = new AncestorContext(rootContext1, false, processingInstructionTest0);
      // Undeclared exception!
//      try { 
        coreFunction0.functionSum(ancestorContext0);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // Invalid argument type for 'sum': java.lang.String
//         //
//         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test273()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[2];
      CoreFunction coreFunction0 = new CoreFunction(2, expressionArray0);
      ExpressionPath expressionPath0 = new ExpressionPath(expressionArray0[1], expressionArray0, (Step[]) null);
      EvalContext evalContext0 = null;
      // Undeclared exception!
//      try { 
        coreFunction0.functionLocalName((EvalContext) null);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // Incorrect number of arguments: position(null, null)
//         //
//         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test274()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      Constant constant0 = new Constant("");
      expressionArray0[0] = (Expression) constant0;
      constant0.toString();
      CoreFunction coreFunction0 = new CoreFunction(9, expressionArray0);
      coreFunction0.isContextDependent();
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("");
      processingInstructionTest0.toString();
      Step step0 = new Step(9, processingInstructionTest0, expressionArray0);
      step0.isContextDependent();
      step0.toString();
      PredicateContext predicateContext0 = new PredicateContext((EvalContext) null, expressionArray0[0]);
      CoreFunction coreFunction1 = new CoreFunction(22, expressionArray0);
      coreFunction1.computeContextDependent();
      // Undeclared exception!
//      try { 
        coreFunction1.functionLast(predicateContext0);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // Incorrect number of arguments: lang('')
//         //
//         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test275()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      Constant constant0 = new Constant("");
      expressionArray0[0] = (Expression) constant0;
      constant0.toString();
      CoreFunction coreFunction0 = new CoreFunction(9, expressionArray0);
      boolean boolean0 = coreFunction0.isContextDependent();
      assertFalse(boolean0);
      
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("");
      Step step0 = new Step(9, processingInstructionTest0, expressionArray0);
      step0.isContextDependent();
      step0.toString();
      CoreFunction coreFunction1 = new CoreFunction(10, expressionArray0);
      coreFunction0.functionRound((EvalContext) null);
      assertEquals(9, coreFunction0.getFunctionCode());
  }

  @Test(timeout = 4000)
  public void test276()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      Constant constant0 = new Constant("");
      expressionArray0[0] = (Expression) constant0;
      constant0.toString();
      CoreFunction coreFunction0 = new CoreFunction(9, expressionArray0);
      boolean boolean0 = coreFunction0.isContextDependent();
      assertFalse(boolean0);
      
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("");
      Step step0 = new Step(9, processingInstructionTest0, expressionArray0);
      step0.isContextDependent();
      step0.toString();
      PredicateContext predicateContext0 = new PredicateContext((EvalContext) null, expressionArray0[0]);
      CoreFunction coreFunction1 = new CoreFunction(22, expressionArray0);
      boolean boolean1 = coreFunction1.computeContextDependent();
      assertFalse(boolean1);
      assertEquals(22, coreFunction1.getFunctionCode());
  }

  @Test(timeout = 4000)
  public void test277()  throws Throwable  {
      Constant constant0 = new Constant("prY:vGQJ<9B6d");
      Step[] stepArray0 = new Step[6];
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(9);
      LocationPath locationPath0 = new LocationPath(true, stepArray0);
      CoreFunction coreFunction0 = new CoreFunction((-36), (Expression[]) null);
      coreFunction0.computeContextDependent();
      LocationPath locationPath1 = new LocationPath(true, stepArray0);
      CoreFunction coreFunction1 = new CoreFunction((-36), (Expression[]) null);
      coreFunction0.computeContextDependent();
      CoreFunction coreFunction2 = new CoreFunction((-1039), (Expression[]) null);
      coreFunction2.getFunctionCode();
      // Undeclared exception!
//      try { 
        coreFunction0.getArg1();
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test278()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[2];
      LocationPath locationPath0 = new LocationPath(true, (Step[]) null);
      expressionArray0[0] = (Expression) locationPath0;
      CoreOperationLessThan coreOperationLessThan0 = new CoreOperationLessThan(locationPath0, locationPath0);
      expressionArray0[1] = (Expression) coreOperationLessThan0;
      CoreFunction coreFunction0 = new CoreFunction(2, expressionArray0);
      ExpressionPath expressionPath0 = new ExpressionPath(expressionArray0[1], expressionArray0, (Step[]) null);
      CoreFunction coreFunction1 = new CoreFunction(2428, expressionArray0);
      coreFunction0.computeContextDependent();
      // Undeclared exception!
//      try { 
        coreFunction1.functionLang((EvalContext) null);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // Incorrect number of arguments: unknownFunction2428()(, org.apache.commons.jxpath.ri.compiler.LocationPath@0000000001 < org.apache.commons.jxpath.ri.compiler.LocationPath@0000000001)
//         //
//         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test279()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      Step[] stepArray0 = new Step[0];
      LocationPath locationPath0 = new LocationPath(true, stepArray0);
      CoreFunction coreFunction0 = new CoreFunction(0, expressionArray0);
      coreFunction0.getArgumentCount();
      EvalContext evalContext0 = null;
      coreFunction0.iteratePointers((EvalContext) null);
      // Undeclared exception!
//      try { 
        coreFunction0.functionString((EvalContext) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test280()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      CoreFunction coreFunction0 = new CoreFunction(93, expressionArray0);
      EvalContext evalContext0 = null;
      // Undeclared exception!
//      try { 
        coreFunction0.functionKey((EvalContext) null);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // Incorrect number of arguments: unknownFunction93()(null)
//         //
//         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test281()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      CoreOperationOr coreOperationOr0 = new CoreOperationOr(expressionArray0);
      expressionArray0[0] = (Expression) coreOperationOr0;
      CoreFunction coreFunction0 = new CoreFunction(11, expressionArray0);
      EvalContext evalContext0 = null;
      // Undeclared exception!
//      try { 
        coreFunction0.functionLast((EvalContext) null);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // Incorrect number of arguments: contains(ororg.apache.commons.jxpath.ri.compiler.CoreOperationOr@0000000001)
//         //
//         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test282()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      Step[] stepArray0 = new Step[0];
      LocationPath locationPath0 = new LocationPath(true, stepArray0);
      expressionArray0[0] = (Expression) locationPath0;
      CoreFunction coreFunction0 = new CoreFunction(0, expressionArray0);
      coreFunction0.computeContextDependent();
      // Undeclared exception!
//      try { 
        coreFunction0.functionSum((EvalContext) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.jxpath.ri.compiler.LocationPath", e);
//      }
  }

  @Test(timeout = 4000)
  public void test283()  throws Throwable  {
      Constant constant0 = new Constant("{TXOUy#;62lS");
      CoreOperationSubtract coreOperationSubtract0 = new CoreOperationSubtract(constant0, constant0);
      Expression[] expressionArray0 = new Expression[8];
      expressionArray0[0] = (Expression) coreOperationSubtract0;
      CoreOperationNotEqual coreOperationNotEqual0 = new CoreOperationNotEqual(coreOperationSubtract0, coreOperationSubtract0);
      expressionArray0[1] = (Expression) coreOperationNotEqual0;
      expressionArray0[2] = (Expression) constant0;
      expressionArray0[3] = (Expression) coreOperationSubtract0;
      CoreFunction coreFunction0 = new CoreFunction((-636), expressionArray0);
      Expression expression0 = coreFunction0.getArg3();
      expressionArray0[4] = expression0;
      expressionArray0[5] = (Expression) coreOperationSubtract0;
      expressionArray0[6] = (Expression) coreOperationSubtract0;
      expressionArray0[7] = (Expression) coreOperationSubtract0;
      ExpressionPath expressionPath0 = new ExpressionPath(constant0, expressionArray0, (Step[]) null);
      CoreOperationGreaterThanOrEqual coreOperationGreaterThanOrEqual0 = new CoreOperationGreaterThanOrEqual(coreOperationSubtract0, constant0);
      QName qName0 = new QName("");
      QName qName1 = new QName("{TXOUy#;62lS", "");
      VariableReference variableReference0 = new VariableReference(qName1);
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual(expressionArray0[6], expressionArray0[7]);
      ExpressionPath expressionPath1 = new ExpressionPath(constant0, expressionArray0, (Step[]) null);
      CoreOperationGreaterThanOrEqual coreOperationGreaterThanOrEqual1 = new CoreOperationGreaterThanOrEqual(expressionArray0[5], expressionPath1);
      Double double0 = new Double((-636));
      Constant constant1 = new Constant(double0);
      CoreOperationDivide coreOperationDivide0 = new CoreOperationDivide(expressionArray0[5], expressionArray0[3]);
      Constant constant2 = new Constant("");
      CoreFunction coreFunction1 = new CoreFunction(2633, expressionArray0);
      // Undeclared exception!
//      try { 
        coreFunction0.functionPosition((EvalContext) null);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // Incorrect number of arguments: unknownFunction-636()(org.apache.commons.jxpath.ri.compiler.Constant@0000000001 - org.apache.commons.jxpath.ri.compiler.Constant@0000000001, org.apache.commons.jxpath.ri.compiler.CoreOperationSubtract@0000000002 != org.apache.commons.jxpath.ri.compiler.CoreOperationSubtract@0000000002, '{TXOUy#;62lS', org.apache.commons.jxpath.ri.compiler.Constant@0000000001 - org.apache.commons.jxpath.ri.compiler.Constant@0000000001, '{TXOUy#;62lS', org.apache.commons.jxpath.ri.compiler.Constant@0000000001 - org.apache.commons.jxpath.ri.compiler.Constant@0000000001, org.apache.commons.jxpath.ri.compiler.Constant@0000000001 - org.apache.commons.jxpath.ri.compiler.Constant@0000000001, org.apache.commons.jxpath.ri.compiler.Constant@0000000001 - org.apache.commons.jxpath.ri.compiler.Constant@0000000001)
//         //
//         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test284()  throws Throwable  {
      LocationPath locationPath0 = new LocationPath(true, (Step[]) null);
      CoreOperationLessThan coreOperationLessThan0 = new CoreOperationLessThan((Expression) null, (Expression) null);
      Expression[] expressionArray0 = new Expression[6];
      expressionArray0[0] = null;
      expressionArray0[1] = (Expression) locationPath0;
      expressionArray0[2] = null;
      expressionArray0[3] = null;
      expressionArray0[4] = (Expression) locationPath0;
      expressionArray0[5] = null;
      CoreFunction coreFunction0 = new CoreFunction(2428, expressionArray0);
      ExpressionPath expressionPath0 = new ExpressionPath(expressionArray0[4], expressionArray0, (Step[]) null);
      EvalContext evalContext0 = null;
      CoreFunction coreFunction1 = new CoreFunction(41, expressionArray0);
      coreFunction1.computeValue((EvalContext) null);
      // Undeclared exception!
//      try { 
        coreFunction0.functionBoolean((EvalContext) null);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // Incorrect number of arguments: unknownFunction2428()(null, , null, null, , null)
//         //
//         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test285()  throws Throwable  {
      Constant constant0 = new Constant("prY:vGQJ<9B6d");
      Step[] stepArray0 = new Step[6];
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(9);
      Expression[] expressionArray0 = new Expression[3];
      expressionArray0[0] = (Expression) constant0;
      expressionArray0[1] = (Expression) constant0;
      expressionArray0[2] = (Expression) constant0;
      Step step0 = new Step(9, nodeTypeTest0, expressionArray0);
      stepArray0[0] = step0;
      Step step1 = new Step(17, nodeTypeTest0, expressionArray0);
      stepArray0[1] = step1;
      Step step2 = new Step(17, nodeTypeTest0, expressionArray0);
      stepArray0[2] = step2;
      Step step3 = new Step((-648), nodeTypeTest0, expressionArray0);
      stepArray0[3] = step3;
      Step step4 = new Step(17, nodeTypeTest0, expressionArray0);
      stepArray0[4] = step4;
      step4.isContextDependent();
      step2.toString();
      PredicateContext predicateContext0 = new PredicateContext((EvalContext) null, constant0);
      CoreFunction coreFunction0 = new CoreFunction(4, expressionArray0);
      boolean boolean0 = coreFunction0.computeContextDependent();
      assertFalse(boolean0);
      assertEquals(4, coreFunction0.getFunctionCode());
  }

  @Test(timeout = 4000)
  public void test286()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(40, (Expression[]) null);
      Step[] stepArray0 = new Step[3];
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("vsa7+0]n7");
      int int0 = coreFunction0.getArgumentCount();
      assertEquals(40, coreFunction0.getFunctionCode());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test287()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[4];
      ExtensionFunction extensionFunction0 = new ExtensionFunction((QName) null, expressionArray0);
      CoreOperationLessThan coreOperationLessThan0 = new CoreOperationLessThan(extensionFunction0, extensionFunction0);
      coreOperationLessThan0.isContextDependent();
      CoreFunction coreFunction0 = new CoreFunction((-2339), expressionArray0);
      coreFunction0.getArgumentCount();
      EvalContext evalContext0 = null;
      coreFunction0.iteratePointers((EvalContext) null);
      // Undeclared exception!
//      try { 
        coreFunction0.functionString((EvalContext) null);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // Incorrect number of arguments: unknownFunction-2339()(null, null, null, null)
//         //
//         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test288()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[3];
      ExtensionFunction extensionFunction0 = new ExtensionFunction((QName) null, expressionArray0);
      expressionArray0[0] = (Expression) extensionFunction0;
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd(expressionArray0);
      expressionArray0[0] = (Expression) coreOperationAdd0;
      CoreOperationUnion coreOperationUnion0 = new CoreOperationUnion(expressionArray0);
      expressionArray0[2] = (Expression) coreOperationUnion0;
      CoreFunction coreFunction0 = new CoreFunction(2428, expressionArray0);
      // Undeclared exception!
//      try { 
        coreFunction0.functionRound((EvalContext) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.evosuite.runtime.System", e);
//      }
  }

  @Test(timeout = 4000)
  public void test289()  throws Throwable  {
      Constant constant0 = new Constant("prY:vGQJ<9B6d");
      Step[] stepArray0 = new Step[6];
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(9);
      Expression[] expressionArray0 = new Expression[3];
      expressionArray0[0] = (Expression) constant0;
      expressionArray0[1] = (Expression) constant0;
      expressionArray0[2] = (Expression) constant0;
      Step step0 = new Step(9, nodeTypeTest0, expressionArray0);
      stepArray0[0] = step0;
      Step step1 = new Step(17, nodeTypeTest0, expressionArray0);
      stepArray0[1] = step1;
      Step step2 = new Step(17, nodeTypeTest0, expressionArray0);
      stepArray0[2] = step2;
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("prY:vGQJ<9B6d");
      Step step3 = new Step(12, processingInstructionTest0, expressionArray0);
      CoreOperationOr coreOperationOr0 = new CoreOperationOr(expressionArray0);
      ExpressionPath expressionPath0 = new ExpressionPath(coreOperationOr0, expressionArray0, stepArray0);
      expressionPath0.createContextForStep((EvalContext) null, 367, nodeTypeTest0);
      CoreFunction coreFunction0 = new CoreFunction((-648), expressionArray0);
      // Undeclared exception!
//      try { 
        coreFunction0.functionName((EvalContext) null);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // Incorrect number of arguments: unknownFunction-648()('prY:vGQJ<9B6d', 'prY:vGQJ<9B6d', 'prY:vGQJ<9B6d')
//         //
//         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test290()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(93, expressionArray0);
      EvalContext evalContext0 = null;
      // Undeclared exception!
//      try { 
        coreFunction0.functionContains((EvalContext) null);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // Incorrect number of arguments: unknownFunction93()()
//         //
//         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test291()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      Step[] stepArray0 = new Step[0];
      LocationPath locationPath0 = new LocationPath(true, stepArray0);
      expressionArray0[0] = (Expression) locationPath0;
      CoreFunction coreFunction0 = new CoreFunction(0, expressionArray0);
      coreFunction0.computeContextDependent();
      // Undeclared exception!
//      try { 
        coreFunction0.functionLang((EvalContext) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.jxpath.ri.compiler.LocationPath", e);
//      }
  }

  @Test(timeout = 4000)
  public void test292()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      boolean boolean0 = true;
      Step[] stepArray0 = new Step[4];
      int int0 = 2167;
      NodeTest nodeTest0 = null;
      Step step0 = new Step(2167, (NodeTest) null, expressionArray0);
      stepArray0[0] = step0;
      int int1 = 630;
      Expression[] expressionArray1 = new Expression[1];
      Expression[] expressionArray2 = new Expression[2];
      QName qName0 = new QName("");
      VariableReference variableReference0 = new VariableReference(qName0);
      NameAttributeTest nameAttributeTest0 = new NameAttributeTest(variableReference0, variableReference0);
      expressionArray2[0] = (Expression) nameAttributeTest0;
      CoreOperationGreaterThanOrEqual coreOperationGreaterThanOrEqual0 = new CoreOperationGreaterThanOrEqual(variableReference0, variableReference0);
      expressionArray2[1] = (Expression) coreOperationGreaterThanOrEqual0;
      CoreFunction coreFunction0 = new CoreFunction(9, expressionArray2);
      // Undeclared exception!
//      try { 
        coreFunction0.getArg3();
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 2
//         //
//         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test293()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      EvalContext[] evalContextArray0 = new EvalContext[7];
      evalContextArray0[4] = null;
      evalContextArray0[5] = null;
      UnionContext unionContext0 = new UnionContext((EvalContext) null, evalContextArray0);
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(1800);
      DescendantContext descendantContext0 = new DescendantContext((EvalContext) null, false, nodeTypeTest0);
      CoreFunction coreFunction0 = new CoreFunction(1, expressionArray0);
      // Undeclared exception!
//      try { 
        coreFunction0.functionLocalName(evalContextArray0[6]);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test294()  throws Throwable  {
      Constant constant0 = new Constant("prY:vGQJ<9B6d");
      Step[] stepArray0 = new Step[6];
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(9);
      Expression[] expressionArray0 = new Expression[3];
      expressionArray0[0] = (Expression) constant0;
      expressionArray0[1] = (Expression) constant0;
      expressionArray0[2] = (Expression) constant0;
      Step step0 = new Step(9, nodeTypeTest0, expressionArray0);
      stepArray0[0] = step0;
      Step step1 = new Step(17, nodeTypeTest0, expressionArray0);
      stepArray0[1] = step1;
      Step step2 = new Step(17, nodeTypeTest0, expressionArray0);
      stepArray0[2] = step2;
      Step step3 = new Step((-648), nodeTypeTest0, expressionArray0);
      stepArray0[3] = step3;
      Step step4 = new Step(17, nodeTypeTest0, expressionArray0);
      stepArray0[4] = step4;
      step4.isContextDependent();
      step2.toString();
      Step step5 = new Step(4, nodeTypeTest0, expressionArray0);
      stepArray0[5] = step5;
      LocationPath locationPath0 = new LocationPath(true, stepArray0);
      CoreFunction coreFunction0 = new CoreFunction(16, expressionArray0);
      boolean boolean0 = coreFunction0.computeContextDependent();
      assertEquals(16, coreFunction0.getFunctionCode());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test295()  throws Throwable  {
      int int0 = 2;
      Expression[] expressionArray0 = new Expression[2];
      boolean boolean0 = true;
      LocationPath locationPath0 = new LocationPath(true, (Step[]) null);
      expressionArray0[0] = (Expression) locationPath0;
      CoreOperationLessThan coreOperationLessThan0 = new CoreOperationLessThan(locationPath0, locationPath0);
      expressionArray0[1] = (Expression) coreOperationLessThan0;
      CoreFunction coreFunction0 = new CoreFunction(2, expressionArray0);
      ExpressionPath expressionPath0 = new ExpressionPath(expressionArray0[1], expressionArray0, (Step[]) null);
      EvalContext evalContext0 = null;
      // Undeclared exception!
//      try { 
        coreFunction0.computeValue((EvalContext) null);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // Incorrect number of arguments: position(, org.apache.commons.jxpath.ri.compiler.LocationPath@0000000001 < org.apache.commons.jxpath.ri.compiler.LocationPath@0000000001)
//         //
//         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test296()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction((-2627), expressionArray0);
      String string0 = coreFunction0.getFunctionName();
      assertEquals("unknownFunction-2627()", string0);
      
      boolean boolean0 = coreFunction0.computeContextDependent();
      assertFalse(boolean0);
      
      Long long0 = new Long((-2627));
      Constant constant0 = new Constant(long0);
      Step[] stepArray0 = new Step[1];
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("div");
      Step step0 = new Step((-2627), processingInstructionTest0, expressionArray0);
      stepArray0[0] = step0;
      QName qName0 = new QName("unknownFunction-2627()");
      NodePointer nodePointer0 = NodePointer.newChildNodePointer((NodePointer) null, qName0, constant0);
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = mock(JXPathContextReferenceImpl.class, new ViolatedAssumptionAnswer());
      doReturn((Locale) null, (Locale) null).when(jXPathContextReferenceImpl0).getLocale();
      doReturn((NamespaceResolver) null).when(jXPathContextReferenceImpl0).getNamespaceResolver();
      RootContext rootContext0 = new RootContext(jXPathContextReferenceImpl0, (NodePointer) null);
      JXPathContext jXPathContext0 = rootContext0.getJXPathContext();
      PredicateContext predicateContext0 = new PredicateContext(rootContext0, constant0);
      JXPathContextReferenceImpl jXPathContextReferenceImpl1 = new JXPathContextReferenceImpl(jXPathContext0, predicateContext0, (Pointer) null);
      RootContext rootContext1 = new RootContext(jXPathContextReferenceImpl1, nodePointer0);
      rootContext0.getJXPathContext();
      EvalContext[] evalContextArray0 = new EvalContext[8];
      evalContextArray0[0] = (EvalContext) rootContext0;
      evalContextArray0[1] = (EvalContext) predicateContext0;
      evalContextArray0[2] = (EvalContext) rootContext0;
      PrecedingOrFollowingContext precedingOrFollowingContext0 = new PrecedingOrFollowingContext(rootContext0, processingInstructionTest0, true);
      evalContextArray0[3] = (EvalContext) precedingOrFollowingContext0;
      evalContextArray0[4] = (EvalContext) predicateContext0;
      evalContextArray0[6] = (EvalContext) rootContext1;
      evalContextArray0[7] = (EvalContext) predicateContext0;
      UnionContext unionContext0 = new UnionContext(rootContext0, evalContextArray0);
      JXPathContextReferenceImpl jXPathContextReferenceImpl2 = new JXPathContextReferenceImpl(jXPathContextReferenceImpl1, unionContext0, (Pointer) null);
      jXPathContextReferenceImpl2.getAbsoluteRootContext();
      coreFunction0.functionNull(rootContext1);
      assertEquals((-2627), coreFunction0.getFunctionCode());
  }

  @Test(timeout = 4000)
  public void test297()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[9];
      CoreOperationGreaterThanOrEqual coreOperationGreaterThanOrEqual0 = new CoreOperationGreaterThanOrEqual(expressionArray0[0], expressionArray0[0]);
      expressionArray0[2] = (Expression) coreOperationGreaterThanOrEqual0;
      Double double0 = new Double((-573.4));
      Constant constant0 = new Constant(double0);
      CoreFunction coreFunction0 = new CoreFunction(7, expressionArray0);
      // Undeclared exception!
//      try { 
        coreFunction0.functionName((EvalContext) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.evosuite.runtime.System", e);
//      }
  }

  @Test(timeout = 4000)
  public void test298()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[2];
      LocationPath locationPath0 = new LocationPath(true, (Step[]) null);
      expressionArray0[0] = (Expression) locationPath0;
      CoreOperationLessThan coreOperationLessThan0 = new CoreOperationLessThan(locationPath0, locationPath0);
      Expression[] expressionArray1 = new Expression[8];
      expressionArray1[0] = (Expression) coreOperationLessThan0;
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)4;
      byteArray0[1] = (byte)41;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      expressionArray1[1] = (Expression) locationPath0;
      expressionArray1[2] = (Expression) locationPath0;
      expressionArray1[3] = (Expression) coreOperationLessThan0;
      expressionArray1[4] = (Expression) coreOperationLessThan0;
      expressionArray1[5] = (Expression) locationPath0;
      expressionArray1[6] = (Expression) coreOperationLessThan0;
      expressionArray1[7] = (Expression) locationPath0;
      CoreFunction coreFunction0 = new CoreFunction(2, expressionArray1);
      JXPathContext jXPathContext0 = JXPathContext.newContext((Object) expressionArray1[2]);
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(2);
      ParentContext parentContext0 = new ParentContext((EvalContext) null, nodeTypeTest0);
      PrecedingOrFollowingContext precedingOrFollowingContext0 = new PrecedingOrFollowingContext((EvalContext) null, nodeTypeTest0, true);
      precedingOrFollowingContext0.getCurrentNodePointer();
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = new JXPathContextReferenceImpl(jXPathContext0, parentContext0, (Pointer) null);
      EvalContext evalContext0 = jXPathContextReferenceImpl0.getAbsoluteRootContext();
      // Undeclared exception!
//      try { 
        coreFunction0.iteratePointers(evalContext0);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // Incorrect number of arguments: position(org.apache.commons.jxpath.ri.compiler.LocationPath@0000000001 < org.apache.commons.jxpath.ri.compiler.LocationPath@0000000001, , , org.apache.commons.jxpath.ri.compiler.LocationPath@0000000001 < org.apache.commons.jxpath.ri.compiler.LocationPath@0000000001, org.apache.commons.jxpath.ri.compiler.LocationPath@0000000001 < org.apache.commons.jxpath.ri.compiler.LocationPath@0000000001, , org.apache.commons.jxpath.ri.compiler.LocationPath@0000000001 < org.apache.commons.jxpath.ri.compiler.LocationPath@0000000001, )
//         //
//         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test299()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[3];
      int int0 = 4060;
      CoreFunction coreFunction0 = new CoreFunction(4060, expressionArray0);
      coreFunction0.getFunctionName();
      // Undeclared exception!
//      try { 
        coreFunction0.computeContextDependent();
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.jxpath.ri.compiler.Operation", e);
//      }
  }

  @Test(timeout = 4000)
  public void test300()  throws Throwable  {
      int int0 = 34;
      Expression[] expressionArray0 = new Expression[2];
      Step[] stepArray0 = null;
      LocationPath locationPath0 = new LocationPath(true, (Step[]) null);
      expressionArray0[0] = (Expression) locationPath0;
      CoreOperationLessThan coreOperationLessThan0 = new CoreOperationLessThan(locationPath0, locationPath0);
      expressionArray0[1] = (Expression) coreOperationLessThan0;
      CoreFunction coreFunction0 = new CoreFunction(34, expressionArray0);
      coreFunction0.computeContextDependent();
      EvalContext evalContext0 = null;
      // Undeclared exception!
//      try { 
        coreFunction0.functionSubstringAfter((EvalContext) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.jxpath.ri.compiler.LocationPath", e);
//      }
  }

  @Test(timeout = 4000)
  public void test301()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(0, expressionArray0);
      coreFunction0.getArgumentCount();
      coreFunction0.toString();
      coreFunction0.toString();
      coreFunction0.getFunctionName();
      coreFunction0.getFunctionCode();
      // Undeclared exception!
//      try { 
        coreFunction0.getArg1();
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test302()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[9];
      CoreOperationGreaterThanOrEqual coreOperationGreaterThanOrEqual0 = new CoreOperationGreaterThanOrEqual(expressionArray0[0], expressionArray0[0]);
      expressionArray0[2] = (Expression) coreOperationGreaterThanOrEqual0;
      Double double0 = new Double((-573.4));
      Constant constant0 = new Constant(double0);
      expressionArray0[6] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction((-2546), expressionArray0);
      // Undeclared exception!
//      try { 
        coreFunction0.functionName((EvalContext) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.evosuite.runtime.System", e);
//      }
  }

  @Test(timeout = 4000)
  public void test303()  throws Throwable  {
      int int0 = (-2339);
      Expression[] expressionArray0 = new Expression[4];
      ExtensionFunction extensionFunction0 = new ExtensionFunction((QName) null, expressionArray0);
      CoreOperationLessThan coreOperationLessThan0 = new CoreOperationLessThan(extensionFunction0, extensionFunction0);
      coreOperationLessThan0.isContextDependent();
      expressionArray0[0] = (Expression) coreOperationLessThan0;
      ExtensionFunction extensionFunction1 = new ExtensionFunction((QName) null, expressionArray0);
      extensionFunction0.toString();
      CoreFunction coreFunction0 = new CoreFunction(890, expressionArray0);
      coreFunction0.getArg2();
      expressionArray0[2] = (Expression) null;
      CoreOperationMultiply coreOperationMultiply0 = new CoreOperationMultiply(coreFunction0, extensionFunction1);
      expressionArray0[3] = (Expression) coreOperationMultiply0;
      CoreFunction coreFunction1 = new CoreFunction((-2339), expressionArray0);
      coreFunction1.computeContextDependent();
      EvalContext evalContext0 = null;
      // Undeclared exception!
//      try { 
        coreFunction0.functionSubstringAfter((EvalContext) null);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // Incorrect number of arguments: unknownFunction890()(org.apache.commons.jxpath.ri.compiler.ExtensionFunction@0000000001 < org.apache.commons.jxpath.ri.compiler.ExtensionFunction@0000000001, null, null, org.apache.commons.jxpath.ri.compiler.CoreFunction@0000000004 * org.apache.commons.jxpath.ri.compiler.ExtensionFunction@0000000003)
//         //
//         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test304()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      Constant constant0 = new Constant("");
      constant0.toString();
      expressionArray0[0] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction(9, expressionArray0);
      PredicateContext predicateContext0 = new PredicateContext((EvalContext) null, coreFunction0);
      coreFunction0.functionNumber(predicateContext0);
      coreFunction0.getArg1();
      assertEquals(9, coreFunction0.getFunctionCode());
  }

  @Test(timeout = 4000)
  public void test305()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[4];
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual((Expression) null, (Expression) null);
      expressionArray0[0] = (Expression) coreOperationLessThanOrEqual0;
      QName qName0 = new QName("");
      Constant constant0 = new Constant("sum");
      CoreFunction coreFunction0 = new CoreFunction((-636), expressionArray0);
      PredicateContext predicateContext0 = new PredicateContext((EvalContext) null, expressionArray0[0]);
      // Undeclared exception!
//      try { 
        coreFunction0.functionNumber(predicateContext0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.evosuite.runtime.System", e);
//      }
  }

  @Test(timeout = 4000)
  public void test306()  throws Throwable  {
      Constant constant0 = new Constant("prY:vGQJ<9B6d");
      CoreOperationSubtract coreOperationSubtract0 = new CoreOperationSubtract(constant0, constant0);
      Expression[] expressionArray0 = new Expression[4];
      expressionArray0[0] = (Expression) constant0;
      expressionArray0[1] = (Expression) coreOperationSubtract0;
      expressionArray0[2] = (Expression) coreOperationSubtract0;
      expressionArray0[3] = (Expression) constant0;
      ExpressionPath expressionPath0 = new ExpressionPath(coreOperationSubtract0, expressionArray0, (Step[]) null);
      CoreOperationGreaterThanOrEqual coreOperationGreaterThanOrEqual0 = new CoreOperationGreaterThanOrEqual(expressionArray0[1], expressionArray0[3]);
      QName qName0 = new QName("prY:vGQJ<9B6d");
      QName qName1 = new QName("", (String) null);
      VariableReference variableReference0 = new VariableReference(qName1);
      CoreOperationGreaterThan coreOperationGreaterThan0 = new CoreOperationGreaterThan(variableReference0, (Expression) null);
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual((Expression) null, expressionArray0[0]);
      CoreOperationGreaterThanOrEqual coreOperationGreaterThanOrEqual1 = new CoreOperationGreaterThanOrEqual(coreOperationLessThanOrEqual0, coreOperationGreaterThanOrEqual0);
      Double double0 = new Double((-1990.8331776232));
      Constant constant1 = new Constant(double0);
      CoreOperationDivide coreOperationDivide0 = new CoreOperationDivide(coreOperationLessThanOrEqual0, expressionArray0[0]);
      Constant constant2 = new Constant("prY:vGQJ<9B6d");
      CoreFunction coreFunction0 = new CoreFunction(9, expressionArray0);
      // Undeclared exception!
//      try { 
        coreFunction0.functionPosition((EvalContext) null);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // Incorrect number of arguments: concat('prY:vGQJ<9B6d', org.apache.commons.jxpath.ri.compiler.Constant@0000000001 - org.apache.commons.jxpath.ri.compiler.Constant@0000000001, org.apache.commons.jxpath.ri.compiler.Constant@0000000001 - org.apache.commons.jxpath.ri.compiler.Constant@0000000001, 'prY:vGQJ<9B6d')
//         //
//         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test307()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[9];
      Constant constant0 = new Constant("false");
      CoreFunction coreFunction0 = new CoreFunction(367, expressionArray0);
      PredicateContext predicateContext0 = new PredicateContext((EvalContext) null, coreFunction0);
      NamespaceContext namespaceContext0 = new NamespaceContext((EvalContext) null, (NodeTest) null);
      // Undeclared exception!
//      try { 
        coreFunction0.functionNumber(namespaceContext0);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // Incorrect number of arguments: unknownFunction367()(null, null, null, null, null, null, null, null, null)
//         //
//         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test308()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[4];
      QName qName0 = null;
      ExtensionFunction extensionFunction0 = new ExtensionFunction((QName) null, expressionArray0);
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd(expressionArray0);
      Expression[] expressionArray1 = new Expression[0];
      CoreOperationUnion coreOperationUnion0 = new CoreOperationUnion(expressionArray1);
      CoreFunction coreFunction0 = new CoreFunction(4060, expressionArray0);
      EvalContext evalContext0 = null;
      // Undeclared exception!
//      try { 
        coreFunction0.functionRound((EvalContext) null);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // Incorrect number of arguments: unknownFunction4060()(null, null, null, null)
//         //
//         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test309()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[3];
      QName qName0 = null;
      ExtensionFunction extensionFunction0 = new ExtensionFunction((QName) null, expressionArray0);
      CoreFunction coreFunction0 = new CoreFunction((-2945), expressionArray0);
      coreFunction0.getArgumentCount();
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("OA.");
      Step step0 = new Step((-1390), processingInstructionTest0, expressionArray0);
      Step step1 = new Step(1880, processingInstructionTest0, expressionArray0);
      Step step2 = new Step((-1390), processingInstructionTest0, expressionArray0);
      Step step3 = new Step(1670, processingInstructionTest0, expressionArray0);
      Expression[] expressionArray1 = new Expression[2];
      expressionArray1[0] = (Expression) coreFunction0;
      expressionArray1[1] = (Expression) coreFunction0;
      Step step4 = new Step(2, processingInstructionTest0, expressionArray1);
      Step step5 = new Step(1670, processingInstructionTest0, expressionArray1);
      Step[] stepArray0 = new Step[2];
      stepArray0[0] = step4;
      step4.toString();
      stepArray0[1] = step5;
      ExpressionPath expressionPath0 = new ExpressionPath(coreFunction0, expressionArray0, stepArray0);
      ProcessingInstructionTest processingInstructionTest1 = new ProcessingInstructionTest("OA.");
      ParentContext parentContext0 = new ParentContext((EvalContext) null, processingInstructionTest1);
      expressionPath0.evalSteps(parentContext0);
      AncestorContext ancestorContext0 = new AncestorContext(parentContext0, false, processingInstructionTest1);
      // Undeclared exception!
//      try { 
        ancestorContext0.getRootContext();
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.jxpath.ri.EvalContext", e);
//      }
  }

  @Test(timeout = 4000)
  public void test310()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      Constant constant0 = new Constant("");
      expressionArray0[0] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction(9, expressionArray0);
      PredicateContext predicateContext0 = new PredicateContext((EvalContext) null, coreFunction0);
      assertEquals(1, coreFunction0.getArgumentCount());
      
      coreFunction0.functionNumber(predicateContext0);
      assertEquals(9, coreFunction0.getFunctionCode());
      
      Object object0 = coreFunction0.functionNot(predicateContext0);
      assertEquals(true, object0);
      
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest((-2627));
      AttributeContext attributeContext0 = new AttributeContext((EvalContext) null, nodeTypeTest0);
      coreFunction0.functionLocalName(attributeContext0);
      assertEquals(9, coreFunction0.getFunctionCode());
  }

  @Test(timeout = 4000)
  public void test311()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      Constant constant0 = new Constant("");
      expressionArray0[0] = (Expression) constant0;
      constant0.toString();
      CoreFunction coreFunction0 = new CoreFunction(9, expressionArray0);
      coreFunction0.isContextDependent();
      PredicateContext predicateContext0 = new PredicateContext((EvalContext) null, coreFunction0);
      Double double0 = Expression.ZERO;
      assertEquals(0.0, (double)double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test312()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd(expressionArray0);
      expressionArray0[0] = (Expression) coreOperationAdd0;
      CoreFunction coreFunction0 = new CoreFunction(0, expressionArray0);
      EvalContext evalContext0 = null;
      // Undeclared exception!
      coreFunction0.functionID((EvalContext) null);
  }

  @Test(timeout = 4000)
  public void test313()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(40, (Expression[]) null);
      Step[] stepArray0 = new Step[3];
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("D*7=|A52g^<?");
      Step step0 = new Step(165, processingInstructionTest0, (Expression[]) null);
      stepArray0[0] = step0;
      Step step1 = new Step(1004, processingInstructionTest0, (Expression[]) null);
      stepArray0[1] = step1;
      Step step2 = new Step(18, processingInstructionTest0, (Expression[]) null);
      stepArray0[2] = step2;
      ExpressionPath expressionPath0 = new ExpressionPath(coreFunction0, (Expression[]) null, stepArray0);
      ProcessingInstructionTest processingInstructionTest1 = new ProcessingInstructionTest("D*7=|A52g^<?");
      AttributeContext attributeContext0 = new AttributeContext((EvalContext) null, processingInstructionTest1);
      SelfContext selfContext0 = new SelfContext(attributeContext0, processingInstructionTest1);
      expressionPath0.evalSteps(selfContext0);
      ParentContext parentContext0 = new ParentContext((EvalContext) null, processingInstructionTest1);
      coreFunction0.compute(parentContext0);
      assertEquals(40, coreFunction0.getFunctionCode());
  }

  @Test(timeout = 4000)
  public void test314()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(0, (Expression[]) null);
      Expression[] expressionArray0 = new Expression[6];
      expressionArray0[0] = (Expression) coreFunction0;
      expressionArray0[1] = (Expression) coreFunction0;
      expressionArray0[2] = (Expression) coreFunction0;
      expressionArray0[3] = (Expression) coreFunction0;
      CoreOperationOr coreOperationOr0 = new CoreOperationOr((Expression[]) null);
      expressionArray0[4] = (Expression) coreOperationOr0;
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd((Expression[]) null);
      expressionArray0[5] = (Expression) coreOperationAdd0;
      Step[] stepArray0 = new Step[2];
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("org.apache.commons.jxpath.ri.model.beans.PropertyOwnerPointer");
      Step step0 = new Step(0, processingInstructionTest0, (Expression[]) null);
      stepArray0[0] = step0;
      Step step1 = new Step(0, processingInstructionTest0, expressionArray0);
      stepArray0[1] = step1;
      ExpressionPath expressionPath0 = new ExpressionPath(coreFunction0, expressionArray0, stepArray0);
      // Undeclared exception!
//      try { 
        step1.toString();
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test315()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(20, (Expression[]) null);
      coreFunction0.getFunctionCode();
      EvalContext evalContext0 = null;
      boolean boolean0 = false;
      NodeTest nodeTest0 = null;
      // Undeclared exception!
//      try { 
        coreFunction0.functionNormalizeSpace((EvalContext) null);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // Incorrect number of arguments: true()
//         //
//         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test316()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[9];
      Constant constant0 = new Constant("false");
      CoreOperationSubtract coreOperationSubtract0 = new CoreOperationSubtract(constant0, constant0);
      expressionArray0[0] = (Expression) coreOperationSubtract0;
      ExpressionPath expressionPath0 = new ExpressionPath(constant0, expressionArray0, (Step[]) null);
      expressionArray0[1] = (Expression) expressionPath0;
      CoreOperationGreaterThanOrEqual coreOperationGreaterThanOrEqual0 = new CoreOperationGreaterThanOrEqual(expressionArray0[0], expressionArray0[0]);
      expressionArray0[2] = (Expression) coreOperationGreaterThanOrEqual0;
      QName qName0 = new QName("false");
      VariableReference variableReference0 = new VariableReference(qName0);
      expressionArray0[3] = (Expression) variableReference0;
      CoreOperationGreaterThan coreOperationGreaterThan0 = new CoreOperationGreaterThan(constant0, constant0);
      expressionArray0[4] = (Expression) coreOperationGreaterThan0;
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual(expressionArray0[0], coreOperationGreaterThan0);
      CoreOperationGreaterThanOrEqual coreOperationGreaterThanOrEqual1 = new CoreOperationGreaterThanOrEqual(coreOperationLessThanOrEqual0, expressionArray0[0]);
      expressionArray0[5] = (Expression) coreOperationGreaterThanOrEqual1;
      Double double0 = new Double((-573.4));
      Constant constant1 = new Constant(double0);
      expressionArray0[6] = (Expression) constant1;
      CoreOperationDivide coreOperationDivide0 = new CoreOperationDivide(coreOperationGreaterThanOrEqual1, expressionArray0[1]);
      expressionArray0[7] = (Expression) coreOperationDivide0;
      Constant constant2 = new Constant("false");
      expressionArray0[8] = (Expression) constant2;
      CoreFunction coreFunction0 = new CoreFunction((-2546), expressionArray0);
      // Undeclared exception!
      coreFunction0.functionPosition((EvalContext) null);
  }

  @Test(timeout = 4000)
  public void test317()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "E}=CoG1[K+9qEEX6UT");
      EvalContext evalContext0 = null;
      Expression[] expressionArray0 = new Expression[4];
      CoreOperationSubtract coreOperationSubtract0 = new CoreOperationSubtract((Expression) null, (Expression) null);
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd(expressionArray0);
      expressionArray0[2] = (Expression) coreOperationAdd0;
      CoreOperationAdd coreOperationAdd1 = new CoreOperationAdd(expressionArray0);
      expressionArray0[3] = (Expression) coreOperationAdd1;
      CoreFunction coreFunction0 = new CoreFunction(9, expressionArray0);
      // Undeclared exception!
//      try { 
        coreFunction0.functionNull((EvalContext) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.evosuite.runtime.System", e);
//      }
  }

  @Test(timeout = 4000)
  public void test318()  throws Throwable  {
      int int0 = 9;
      Expression[] expressionArray0 = new Expression[1];
      Constant constant0 = new Constant("");
      JXPathContext jXPathContext0 = JXPathContext.newContext((Object) "");
      DecimalFormat decimalFormat0 = new DecimalFormat();
      JXPathContext.newContext(jXPathContext0, (Object) decimalFormat0);
      CoreFunction coreFunction0 = new CoreFunction(9, expressionArray0);
      EvalContext evalContext0 = null;
      // Undeclared exception!
//      try { 
        coreFunction0.functionNull((EvalContext) null);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // Incorrect number of arguments: concat(null)
//         //
//         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test319()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[4];
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual((Expression) null, (Expression) null);
      expressionArray0[0] = (Expression) coreOperationLessThanOrEqual0;
      QName qName0 = new QName("");
      ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, expressionArray0);
      expressionArray0[1] = (Expression) extensionFunction0;
      Double double0 = new Double(1589.1825682433027);
      Constant constant0 = new Constant(double0);
      expressionArray0[2] = (Expression) constant0;
      Step[] stepArray0 = new Step[5];
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
      Step step0 = new Step(9, nodeNameTest0, expressionArray0);
      stepArray0[0] = step0;
      Step step1 = new Step(1739, nodeNameTest0, expressionArray0);
      stepArray0[1] = step1;
      Step step2 = new Step(0, nodeNameTest0, expressionArray0);
      stepArray0[2] = step2;
      Expression[] expressionArray1 = new Expression[3];
      expressionArray1[0] = null;
      expressionArray1[1] = (Expression) coreOperationLessThanOrEqual0;
      expressionArray1[2] = (Expression) constant0;
      Step step3 = new Step(0, nodeNameTest0, expressionArray1);
      stepArray0[3] = step3;
      Step step4 = new Step(0, nodeNameTest0, expressionArray0);
      stepArray0[4] = step4;
      ExpressionPath expressionPath0 = new ExpressionPath(coreOperationLessThanOrEqual0, expressionArray0, stepArray0);
      CoreOperationEqual coreOperationEqual0 = new CoreOperationEqual(expressionPath0, constant0);
      expressionArray0[3] = (Expression) coreOperationEqual0;
      CoreFunction coreFunction0 = new CoreFunction((-1), expressionArray0);
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = mock(JXPathContextReferenceImpl.class, new ViolatedAssumptionAnswer());
      doReturn((Locale) null).when(jXPathContextReferenceImpl0).getLocale();
      doReturn((NamespaceResolver) null, (NamespaceResolver) null).when(jXPathContextReferenceImpl0).getNamespaceResolver();
      NodePointer nodePointer0 = NodePointer.newChildNodePointer((NodePointer) null, qName0, step0);
      RootContext rootContext0 = new RootContext(jXPathContextReferenceImpl0, nodePointer0);
      JXPathContext jXPathContext0 = rootContext0.getJXPathContext();
      JXPathContextReferenceImpl jXPathContextReferenceImpl1 = new JXPathContextReferenceImpl(jXPathContext0, (Object) null, (Pointer) null);
      EvalContext evalContext0 = jXPathContextReferenceImpl1.getAbsoluteRootContext();
      // Undeclared exception!
//      try { 
        coreFunction0.functionNull(evalContext0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.evosuite.runtime.System", e);
//      }
  }

  @Test(timeout = 4000)
  public void test320()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction((-639), expressionArray0);
      // Undeclared exception!
//      try { 
        coreFunction0.getArg2();
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 1
//         //
//         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test321()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[2];
      LocationPath locationPath0 = new LocationPath(true, (Step[]) null);
      expressionArray0[0] = (Expression) locationPath0;
      CoreOperationLessThan coreOperationLessThan0 = new CoreOperationLessThan(locationPath0, locationPath0);
      expressionArray0[1] = (Expression) coreOperationLessThan0;
      CoreFunction coreFunction0 = new CoreFunction(2, expressionArray0);
      ExpressionPath expressionPath0 = new ExpressionPath(expressionArray0[1], expressionArray0, (Step[]) null);
      QName qName0 = new QName("");
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
      expressionPath0.createContextForStep((EvalContext) null, 3988, nodeNameTest0);
      AttributeContext attributeContext0 = new AttributeContext((EvalContext) null, nodeNameTest0);
      // Undeclared exception!
//      try { 
        coreFunction0.functionID(attributeContext0);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // Incorrect number of arguments: position(, org.apache.commons.jxpath.ri.compiler.LocationPath@0000000001 < org.apache.commons.jxpath.ri.compiler.LocationPath@0000000001)
//         //
//         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test322()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(618, expressionArray0);
      EvalContext evalContext0 = null;
      NodeTest nodeTest0 = null;
      AncestorContext ancestorContext0 = new AncestorContext((EvalContext) null, false, (NodeTest) null);
      coreFunction0.iteratePointers((EvalContext) null);
      // Undeclared exception!
//      try { 
        ancestorContext0.getJXPathContext();
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.jxpath.ri.EvalContext", e);
//      }
  }

  @Test(timeout = 4000)
  public void test323()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(0, expressionArray0);
      coreFunction0.getArgumentCount();
      EvalContext evalContext0 = null;
      coreFunction0.iteratePointers((EvalContext) null);
      coreFunction0.toString();
      // Undeclared exception!
//      try { 
        coreFunction0.functionString((EvalContext) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test324()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[2];
      QName qName0 = new QName("");
      VariableReference variableReference0 = new VariableReference(qName0);
      CoreOperationNegate coreOperationNegate0 = new CoreOperationNegate(variableReference0);
      CoreOperationEqual coreOperationEqual0 = new CoreOperationEqual(coreOperationNegate0, coreOperationNegate0);
      CoreOperationMultiply coreOperationMultiply0 = new CoreOperationMultiply(coreOperationEqual0, variableReference0);
      expressionArray0[0] = (Expression) coreOperationMultiply0;
      CoreOperationNegate coreOperationNegate1 = new CoreOperationNegate(variableReference0);
      expressionArray0[1] = (Expression) coreOperationNegate1;
      coreOperationNegate1.toString();
      coreOperationMultiply0.computeContextDependent();
      CoreFunction coreFunction0 = new CoreFunction((-1), expressionArray0);
      coreFunction0.getArgumentCount();
      Step[] stepArray0 = new Step[6];
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("");
      Step step0 = new Step(2, processingInstructionTest0, expressionArray0);
      stepArray0[0] = step0;
      Step step1 = new Step(1880, processingInstructionTest0, expressionArray0);
      stepArray0[1] = step1;
      Step step2 = new Step((-1), processingInstructionTest0, expressionArray0);
      stepArray0[2] = step2;
      Step step3 = new Step(764, processingInstructionTest0, expressionArray0);
      stepArray0[3] = step3;
      Step step4 = new Step(2, processingInstructionTest0, expressionArray0);
      stepArray0[4] = step4;
      Expression[] expressionArray1 = new Expression[5];
      expressionArray1[0] = (Expression) coreOperationMultiply0;
      expressionArray1[1] = (Expression) coreOperationMultiply0;
      expressionArray1[2] = (Expression) variableReference0;
      expressionArray1[3] = (Expression) coreOperationNegate1;
      expressionArray1[4] = (Expression) coreOperationNegate0;
      Step step5 = new Step((-442), processingInstructionTest0, expressionArray1);
      stepArray0[5] = step5;
      ExpressionPath expressionPath0 = new ExpressionPath(coreOperationNegate1, expressionArray0, stepArray0);
      ProcessingInstructionTest processingInstructionTest1 = new ProcessingInstructionTest("CvxqFUh4");
      ParentContext parentContext0 = new ParentContext((EvalContext) null, processingInstructionTest1);
      EvalContext evalContext0 = expressionPath0.evalSteps(parentContext0);
      // Undeclared exception!
//      try { 
        coreFunction0.functionNot(evalContext0);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // Incorrect number of arguments: unknownFunction-1()((org.apache.commons.jxpath.ri.compiler.CoreOperationEqual@0000000004) * org.apache.commons.jxpath.ri.compiler.VariableReference@0000000002, -org.apache.commons.jxpath.ri.compiler.VariableReference@0000000002)
//         //
//         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test325()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(1, (Expression[]) null);
      Step[] stepArray0 = new Step[6];
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("");
      Step step0 = new Step((-826), processingInstructionTest0, (Expression[]) null);
      stepArray0[0] = step0;
      Step step1 = new Step((-826), processingInstructionTest0, (Expression[]) null);
      stepArray0[1] = step1;
      Step step2 = new Step((-826), processingInstructionTest0, (Expression[]) null);
      stepArray0[2] = step2;
      Step step3 = new Step(1, processingInstructionTest0, (Expression[]) null);
      stepArray0[3] = step3;
      Step step4 = new Step(9, processingInstructionTest0, (Expression[]) null);
      stepArray0[4] = step4;
      Step step5 = new Step(40, processingInstructionTest0, (Expression[]) null);
      stepArray0[5] = step5;
      ExpressionPath expressionPath0 = new ExpressionPath(coreFunction0, (Expression[]) null, stepArray0);
      ProcessingInstructionTest processingInstructionTest1 = new ProcessingInstructionTest("");
      EvalContext evalContext0 = expressionPath0.createContextForStep((EvalContext) null, 1, processingInstructionTest1);
      // Undeclared exception!
//      try { 
        coreFunction0.functionSum(evalContext0);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // Incorrect number of arguments: last()
//         //
//         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test326()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[3];
      ExtensionFunction extensionFunction0 = new ExtensionFunction((QName) null, expressionArray0);
      expressionArray0[0] = (Expression) extensionFunction0;
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd(expressionArray0);
      expressionArray0[1] = (Expression) coreOperationAdd0;
      CoreOperationUnion coreOperationUnion0 = new CoreOperationUnion(expressionArray0);
      expressionArray0[2] = (Expression) coreOperationUnion0;
      CoreFunction coreFunction0 = new CoreFunction(2428, expressionArray0);
      // Undeclared exception!
//      try { 
        coreFunction0.functionRound((EvalContext) null);
//        fail("Expecting exception: StackOverflowError");
      
//      } catch(StackOverflowError e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test327()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction((-2627), expressionArray0);
      coreFunction0.getFunctionName();
      coreFunction0.computeContextDependent();
      Long long0 = new Long(0L);
      Constant constant0 = new Constant(long0);
      Step[] stepArray0 = new Step[1];
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("div");
      Step step0 = new Step((-2627), processingInstructionTest0, expressionArray0);
      stepArray0[0] = step0;
      ExpressionPath expressionPath0 = new ExpressionPath(constant0, expressionArray0, stepArray0);
      expressionPath0.createContextForStep((EvalContext) null, (-2627), processingInstructionTest0);
      // Undeclared exception!
//      try { 
        coreFunction0.functionName((EvalContext) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
//      }
  }
}
