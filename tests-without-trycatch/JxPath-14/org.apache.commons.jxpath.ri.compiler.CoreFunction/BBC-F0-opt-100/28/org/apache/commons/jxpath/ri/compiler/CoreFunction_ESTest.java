/*
 * This file was automatically generated by EvoSuite
 * Sat Oct 23 05:29:24 GMT 2021
 */

package org.apache.commons.jxpath.ri.compiler;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Locale;
import org.apache.commons.jxpath.BasicNodeSet;
import org.apache.commons.jxpath.BasicVariables;
import org.apache.commons.jxpath.JXPathContext;
import org.apache.commons.jxpath.KeyManager;
import org.apache.commons.jxpath.NodeSet;
import org.apache.commons.jxpath.Pointer;
import org.apache.commons.jxpath.Variables;
import org.apache.commons.jxpath.ri.EvalContext;
import org.apache.commons.jxpath.ri.JXPathContextReferenceImpl;
import org.apache.commons.jxpath.ri.NamespaceResolver;
import org.apache.commons.jxpath.ri.QName;
import org.apache.commons.jxpath.ri.axes.AncestorContext;
import org.apache.commons.jxpath.ri.axes.AttributeContext;
import org.apache.commons.jxpath.ri.axes.ChildContext;
import org.apache.commons.jxpath.ri.axes.DescendantContext;
import org.apache.commons.jxpath.ri.axes.InitialContext;
import org.apache.commons.jxpath.ri.axes.NamespaceContext;
import org.apache.commons.jxpath.ri.axes.NodeSetContext;
import org.apache.commons.jxpath.ri.axes.ParentContext;
import org.apache.commons.jxpath.ri.axes.PrecedingOrFollowingContext;
import org.apache.commons.jxpath.ri.axes.PredicateContext;
import org.apache.commons.jxpath.ri.axes.RootContext;
import org.apache.commons.jxpath.ri.axes.SelfContext;
import org.apache.commons.jxpath.ri.axes.UnionContext;
import org.apache.commons.jxpath.ri.compiler.Constant;
import org.apache.commons.jxpath.ri.compiler.CoreFunction;
import org.apache.commons.jxpath.ri.compiler.CoreOperationAdd;
import org.apache.commons.jxpath.ri.compiler.CoreOperationAnd;
import org.apache.commons.jxpath.ri.compiler.CoreOperationDivide;
import org.apache.commons.jxpath.ri.compiler.CoreOperationEqual;
import org.apache.commons.jxpath.ri.compiler.CoreOperationGreaterThan;
import org.apache.commons.jxpath.ri.compiler.CoreOperationGreaterThanOrEqual;
import org.apache.commons.jxpath.ri.compiler.CoreOperationLessThan;
import org.apache.commons.jxpath.ri.compiler.CoreOperationLessThanOrEqual;
import org.apache.commons.jxpath.ri.compiler.CoreOperationMod;
import org.apache.commons.jxpath.ri.compiler.CoreOperationMultiply;
import org.apache.commons.jxpath.ri.compiler.CoreOperationNegate;
import org.apache.commons.jxpath.ri.compiler.CoreOperationNotEqual;
import org.apache.commons.jxpath.ri.compiler.CoreOperationOr;
import org.apache.commons.jxpath.ri.compiler.CoreOperationSubtract;
import org.apache.commons.jxpath.ri.compiler.CoreOperationUnion;
import org.apache.commons.jxpath.ri.compiler.Expression;
import org.apache.commons.jxpath.ri.compiler.ExpressionPath;
import org.apache.commons.jxpath.ri.compiler.ExtensionFunction;
import org.apache.commons.jxpath.ri.compiler.LocationPath;
import org.apache.commons.jxpath.ri.compiler.NameAttributeTest;
import org.apache.commons.jxpath.ri.compiler.NodeNameTest;
import org.apache.commons.jxpath.ri.compiler.NodeTest;
import org.apache.commons.jxpath.ri.compiler.NodeTypeTest;
import org.apache.commons.jxpath.ri.compiler.ProcessingInstructionTest;
import org.apache.commons.jxpath.ri.compiler.Step;
import org.apache.commons.jxpath.ri.compiler.VariableReference;
import org.apache.commons.jxpath.ri.model.NodePointer;
import org.apache.commons.jxpath.ri.model.VariablePointer;
import org.apache.commons.jxpath.ri.model.beans.BeanPointer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class CoreFunction_ESTest extends CoreFunction_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Expression[] expressionArray0 = new Expression[3];
      CoreFunction coreFunction0 = new CoreFunction(32, expressionArray0);
      Expression[] expressionArray1 = new Expression[1];
      CoreOperationGreaterThanOrEqual coreOperationGreaterThanOrEqual0 = new CoreOperationGreaterThanOrEqual(coreFunction0, coreFunction0);
      CoreOperationMod coreOperationMod0 = new CoreOperationMod(coreOperationGreaterThanOrEqual0, coreOperationGreaterThanOrEqual0);
      expressionArray1[0] = (Expression) coreOperationMod0;
      CoreFunction coreFunction1 = new CoreFunction(21, expressionArray1);
      CoreFunction coreFunction2 = new CoreFunction(21, expressionArray1);
      // Undeclared exception!
//      try { 
        coreFunction2.functionStringLength((EvalContext) null);
//        fail("Expecting exception: ArithmeticException");
      
//      } catch(ArithmeticException e) {
//         //
//         // / by zero
//         //
//         verifyException("org.apache.commons.jxpath.ri.compiler.CoreOperationMod", e);
//      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Byte byte0 = new Byte((byte)13);
      Double double0 = Expression.ONE;
      Constant constant0 = new Constant(double0);
      Constant constant1 = new Constant("org.apache.commons.jxpath.ri.axes.AttributeContext");
      Expression[] expressionArray0 = new Expression[3];
      expressionArray0[0] = (Expression) constant1;
      expressionArray0[1] = (Expression) constant1;
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual(constant1, expressionArray0[1]);
      expressionArray0[2] = (Expression) coreOperationLessThanOrEqual0;
      CoreFunction coreFunction0 = new CoreFunction((byte) (-5), expressionArray0);
      coreFunction0.functionTranslate((EvalContext) null);
      // Undeclared exception!
//      try { 
        coreFunction0.functionNumber((EvalContext) null);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // Incorrect number of arguments: unknownFunction-5()('org.apache.commons.jxpath.ri.axes.AttributeContext', 'org.apache.commons.jxpath.ri.axes.AttributeContext', org.apache.commons.jxpath.ri.compiler.Constant@0000000002 <= org.apache.commons.jxpath.ri.compiler.Constant@0000000002)
//         //
//         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Byte byte0 = new Byte((byte)2);
      Constant constant0 = new Constant(byte0);
      Expression[] expressionArray0 = new Expression[3];
      expressionArray0[0] = (Expression) constant0;
      expressionArray0[1] = (Expression) constant0;
      expressionArray0[2] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction(3, expressionArray0);
      coreFunction0.functionSubstring((EvalContext) null);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(1, expressionArray0);
      QName qName0 = new QName("jiKP|#maLh\"", "jiKP|#maLh\"");
      Locale locale0 = Locale.UK;
      NodePointer nodePointer0 = NodePointer.newNodePointer(qName0, coreFunction0, locale0);
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl)JXPathContext.newContext((Object) "jiKP|#maLh\"");
      RootContext rootContext0 = new RootContext(jXPathContextReferenceImpl0, nodePointer0);
      coreFunction0.functionNamespaceURI(rootContext0);
      // Undeclared exception!
//      try { 
        coreFunction0.computeValue(rootContext0);
//        fail("Expecting exception: UnsupportedOperationException");
      
//      } catch(UnsupportedOperationException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.jxpath.ri.axes.RootContext", e);
//      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Byte byte0 = new Byte((byte) (-5));
      Constant constant0 = new Constant(byte0);
      Constant constant1 = new Constant("-21");
      Expression[] expressionArray0 = new Expression[3];
      expressionArray0[0] = (Expression) constant1;
      expressionArray0[1] = (Expression) constant1;
      expressionArray0[2] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction(32, expressionArray0);
      ExpressionPath expressionPath0 = new ExpressionPath(coreFunction0, expressionArray0, (Step[]) null);
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest((-1308));
      expressionPath0.createContextForStep((EvalContext) null, (byte) (-5), nodeTypeTest0);
      coreFunction0.functionTranslate((EvalContext) null);
      // Undeclared exception!
//      try { 
        coreFunction0.functionNumber((EvalContext) null);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // Incorrect number of arguments: unknownFunction32()('-21', '-21', -5)
//         //
//         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Byte byte0 = new Byte((byte) (-5));
      Constant constant0 = new Constant(byte0);
      Constant constant1 = new Constant("-21");
      Expression[] expressionArray0 = new Expression[3];
      expressionArray0[0] = (Expression) constant1;
      expressionArray0[1] = (Expression) constant0;
      expressionArray0[2] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction((-1308), expressionArray0);
      coreFunction0.functionTranslate((EvalContext) null);
      // Undeclared exception!
//      try { 
        coreFunction0.functionNumber((EvalContext) null);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // Incorrect number of arguments: unknownFunction-1308()('-21', -5, -5)
//         //
//         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Byte byte0 = new Byte((byte) (-46));
      Constant constant0 = new Constant(byte0);
      Expression[] expressionArray0 = new Expression[3];
      expressionArray0[0] = (Expression) constant0;
      expressionArray0[1] = (Expression) constant0;
      CoreOperationEqual coreOperationEqual0 = new CoreOperationEqual(expressionArray0[1], expressionArray0[0]);
      expressionArray0[2] = (Expression) coreOperationEqual0;
      CoreFunction coreFunction0 = new CoreFunction(2159, expressionArray0);
      coreFunction0.functionSubstring((EvalContext) null);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Byte byte0 = new Byte((byte)2);
      Constant constant0 = new Constant(byte0);
      Expression[] expressionArray0 = new Expression[2];
      expressionArray0[0] = (Expression) constant0;
      expressionArray0[1] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction((byte)2, expressionArray0);
      coreFunction0.functionSubstring((EvalContext) null);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Byte byte0 = new Byte((byte) (-5));
      Constant constant0 = new Constant(byte0);
      Expression[] expressionArray0 = new Expression[3];
      CoreFunction coreFunction0 = new CoreFunction(261, expressionArray0);
      CoreOperationSubtract coreOperationSubtract0 = new CoreOperationSubtract(coreFunction0, constant0);
      expressionArray0[0] = (Expression) coreOperationSubtract0;
      expressionArray0[1] = (Expression) constant0;
      expressionArray0[2] = (Expression) constant0;
      CoreFunction coreFunction1 = new CoreFunction(1973, expressionArray0);
      coreFunction1.functionSubstring((EvalContext) null);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      EvalContext evalContext0 = null;
      Byte byte0 = new Byte((byte)1);
      Constant constant0 = new Constant(byte0);
      Expression[] expressionArray0 = new Expression[3];
      expressionArray0[0] = (Expression) constant0;
      expressionArray0[1] = (Expression) constant0;
      expressionArray0[2] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction((byte)1, expressionArray0);
      coreFunction0.functionSubstring((EvalContext) null);
      // Undeclared exception!
//      try { 
        coreFunction0.functionStringLength((EvalContext) null);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // Incorrect number of arguments: last(1, 1, 1)
//         //
//         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Byte byte0 = new Byte((byte)1);
      Constant constant0 = new Constant(byte0);
      Constant constant1 = new Constant("");
      Expression[] expressionArray0 = new Expression[2];
      expressionArray0[0] = (Expression) constant1;
      expressionArray0[1] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction((byte)1, expressionArray0);
      coreFunction0.functionSubstringBefore((EvalContext) null);
      coreFunction0.functionSubstring((EvalContext) null);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction((-19), expressionArray0);
      QName qName0 = new QName("jiKP|q#maLh\"");
      Locale locale0 = Locale.KOREAN;
      NodePointer nodePointer0 = NodePointer.newNodePointer(qName0, coreFunction0, locale0);
      JXPathContext jXPathContext0 = JXPathContext.newContext((Object) "jiKP|q#maLh\"");
      CoreFunction coreFunction1 = new CoreFunction((-19), expressionArray0);
      Integer integer0 = new Integer(20);
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = new JXPathContextReferenceImpl(jXPathContext0, integer0, nodePointer0);
      RootContext rootContext0 = new RootContext(jXPathContextReferenceImpl0, nodePointer0);
      EvalContext[] evalContextArray0 = new EvalContext[6];
      evalContextArray0[0] = (EvalContext) rootContext0;
      evalContextArray0[1] = (EvalContext) rootContext0;
      evalContextArray0[2] = (EvalContext) rootContext0;
      evalContextArray0[3] = (EvalContext) rootContext0;
      evalContextArray0[4] = (EvalContext) rootContext0;
      evalContextArray0[5] = (EvalContext) rootContext0;
      UnionContext unionContext0 = new UnionContext(rootContext0, evalContextArray0);
      EvalContext evalContext0 = rootContext0.getConstantContext(unionContext0);
      // Undeclared exception!
//      try { 
        coreFunction1.functionStringLength(evalContext0);
//        fail("Expecting exception: UnsupportedOperationException");
      
//      } catch(UnsupportedOperationException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.jxpath.ri.axes.RootContext", e);
//      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction((-19), expressionArray0);
      QName qName0 = new QName("jiKP|q#maLh\"");
      Locale locale0 = Locale.KOREAN;
      NodePointer nodePointer0 = NodePointer.newNodePointer(qName0, "jiKP|q#maLh\"", locale0);
      JXPathContext jXPathContext0 = JXPathContext.newContext((Object) qName0);
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = new JXPathContextReferenceImpl(jXPathContext0, coreFunction0, nodePointer0);
      RootContext rootContext0 = new RootContext(jXPathContextReferenceImpl0, nodePointer0);
      PredicateContext predicateContext0 = new PredicateContext(rootContext0, coreFunction0);
      // Undeclared exception!
//      try { 
        coreFunction0.functionNamespaceURI(predicateContext0);
//        fail("Expecting exception: UnsupportedOperationException");
      
//      } catch(UnsupportedOperationException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.jxpath.ri.axes.RootContext", e);
//      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Byte byte0 = new Byte((byte)1);
      Constant constant0 = new Constant(byte0);
      Constant constant1 = new Constant(",V");
      Expression[] expressionArray0 = new Expression[2];
      expressionArray0[0] = (Expression) constant1;
      expressionArray0[1] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction((byte)1, expressionArray0);
      coreFunction0.functionSubstringBefore((EvalContext) null);
      coreFunction0.functionSubstring((EvalContext) null);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "V");
      CoreFunction coreFunction0 = new CoreFunction((-32), expressionArray0);
      QName qName0 = new QName("jiKP|q#maLh\"");
      Locale locale0 = Locale.JAPANESE;
      NodePointer nodePointer0 = NodePointer.newNodePointer(qName0, coreFunction0, locale0);
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl)JXPathContext.newContext((Object) "jiKP|q#maLh\"");
      Integer integer0 = new Integer(Integer.MIN_VALUE);
      JXPathContextReferenceImpl jXPathContextReferenceImpl1 = new JXPathContextReferenceImpl(jXPathContextReferenceImpl0, integer0, nodePointer0);
      BasicVariables basicVariables0 = new BasicVariables();
      VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
      RootContext rootContext0 = new RootContext(jXPathContextReferenceImpl0, variablePointer0);
      coreFunction0.functionNamespaceURI(rootContext0);
      CoreFunction coreFunction1 = new CoreFunction((-32), expressionArray0);
      // Undeclared exception!
//      try { 
        coreFunction1.functionStringLength(rootContext0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // No such variable: 'jiKP|q#maLh\"'
//         //
//         verifyException("org.apache.commons.jxpath.BasicVariables", e);
//      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Byte byte0 = new Byte((byte)0);
      Constant constant0 = new Constant(byte0);
      Constant constant1 = new Constant(",V");
      Expression[] expressionArray0 = new Expression[2];
      QName qName0 = new QName("true");
      ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, expressionArray0);
      expressionArray0[0] = (Expression) extensionFunction0;
      expressionArray0[1] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction((byte)0, expressionArray0);
      // Undeclared exception!
//      try { 
        coreFunction0.functionSubstringBefore((EvalContext) null);
//        fail("Expecting exception: StackOverflowError");
      
//      } catch(StackOverflowError e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Byte byte0 = new Byte((byte) (-10));
      Constant constant0 = new Constant(byte0);
      Constant constant1 = new Constant(",V");
      Expression[] expressionArray0 = new Expression[8];
      expressionArray0[0] = (Expression) constant0;
      expressionArray0[1] = (Expression) constant1;
      expressionArray0[2] = (Expression) constant1;
      CoreOperationUnion coreOperationUnion0 = new CoreOperationUnion(expressionArray0);
      expressionArray0[3] = (Expression) coreOperationUnion0;
      expressionArray0[4] = (Expression) constant0;
      expressionArray0[5] = (Expression) constant1;
      NameAttributeTest nameAttributeTest0 = new NameAttributeTest((Expression) null, expressionArray0[0]);
      expressionArray0[6] = (Expression) nameAttributeTest0;
      expressionArray0[7] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction((-388), expressionArray0);
      // Undeclared exception!
//      try { 
        coreFunction0.functionTrue((EvalContext) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.evosuite.runtime.System", e);
//      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(5, expressionArray0);
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = new JXPathContextReferenceImpl((JXPathContext) null, (Object) null, (Pointer) null);
      BasicVariables basicVariables0 = new BasicVariables();
      QName qName0 = new QName("org.apache.commons.jxpath.ri.axes.AncestorContext", "org.apache.commons.jxpath.ri.axes.AncestorContext");
      VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
      RootContext rootContext0 = new RootContext(jXPathContextReferenceImpl0, variablePointer0);
      ChildContext childContext0 = new ChildContext(rootContext0, (NodeTest) null, false, false);
      // Undeclared exception!
//      try { 
        coreFunction0.functionNumber(childContext0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // No such variable: 'org.apache.commons.jxpath.ri.axes.AncestorContext:org.apache.commons.jxpath.ri.axes.AncestorContext'
//         //
//         verifyException("org.apache.commons.jxpath.BasicVariables", e);
//      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Constant constant0 = new Constant((String) null);
      Expression[] expressionArray0 = new Expression[1];
      expressionArray0[0] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction(4, expressionArray0);
      coreFunction0.functionSum((EvalContext) null);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      EvalContext evalContext0 = null;
      Expression[] expressionArray0 = new Expression[2];
      Byte byte0 = Byte.valueOf((byte) (-95));
      Constant constant0 = new Constant(byte0);
      expressionArray0[0] = (Expression) constant0;
      QName qName0 = new QName("n");
      ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, expressionArray0);
      expressionArray0[1] = (Expression) extensionFunction0;
      CoreFunction coreFunction0 = new CoreFunction(5, expressionArray0);
      // Undeclared exception!
      coreFunction0.compute((EvalContext) null);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Constant constant0 = new Constant("");
      Expression[] expressionArray0 = new Expression[1];
      expressionArray0[0] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction(4, expressionArray0);
      CoreFunction coreFunction1 = new CoreFunction(4, expressionArray0);
      JXPathContext jXPathContext0 = JXPathContext.newContext((Object) "");
      JXPathContext jXPathContext1 = JXPathContext.newContext(jXPathContext0, (Object) null);
      EvalContext[] evalContextArray0 = new EvalContext[0];
      UnionContext unionContext0 = new UnionContext((EvalContext) null, evalContextArray0);
      QName qName0 = new QName("");
      Locale locale0 = Locale.FRANCE;
      NodePointer nodePointer0 = NodePointer.newNodePointer(qName0, jXPathContext0, locale0);
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = new JXPathContextReferenceImpl(jXPathContext1, unionContext0, nodePointer0);
      RootContext rootContext0 = new RootContext(jXPathContextReferenceImpl0, nodePointer0);
      // Undeclared exception!
//      try { 
        coreFunction1.compute(rootContext0);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // Cannot find an element by ID - no IdentityManager has been specified
//         //
//         verifyException("org.apache.commons.jxpath.JXPathContext", e);
//      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[4];
      Constant constant0 = new Constant("MjGlZL1BcDyHpf)<ym/");
      expressionArray0[0] = (Expression) constant0;
      Step[] stepArray0 = new Step[5];
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("MjGlZL1BcDyHpf)<ym/");
      Step step0 = new Step((-1073741824), processingInstructionTest0, expressionArray0);
      stepArray0[0] = step0;
      Step step1 = new Step((-1073741824), processingInstructionTest0, expressionArray0);
      stepArray0[1] = step1;
      Step step2 = new Step((-1577), processingInstructionTest0, expressionArray0);
      stepArray0[2] = step2;
      Step step3 = new Step(722, processingInstructionTest0, expressionArray0);
      stepArray0[3] = step3;
      Step step4 = new Step((-1366), processingInstructionTest0, expressionArray0);
      stepArray0[4] = step4;
      LocationPath locationPath0 = new LocationPath(true, stepArray0);
      expressionArray0[1] = (Expression) locationPath0;
      CoreOperationDivide coreOperationDivide0 = new CoreOperationDivide(constant0, expressionArray0[0]);
      expressionArray0[2] = (Expression) coreOperationDivide0;
      CoreOperationMultiply coreOperationMultiply0 = new CoreOperationMultiply(locationPath0, expressionArray0[0]);
      expressionArray0[3] = (Expression) coreOperationMultiply0;
      CoreFunction coreFunction0 = new CoreFunction((-1577), expressionArray0);
      // Undeclared exception!
//      try { 
        coreFunction0.functionNull((EvalContext) null);
//        fail("Expecting exception: StackOverflowError");
      
//      } catch(StackOverflowError e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(22, expressionArray0);
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = new JXPathContextReferenceImpl((JXPathContext) null, (Object) null, (Pointer) null);
      QName qName0 = new QName("' ", "' ");
      Locale locale0 = Locale.PRC;
      NodePointer nodePointer0 = NodePointer.newNodePointer(qName0, qName0, locale0);
      RootContext rootContext0 = new RootContext(jXPathContextReferenceImpl0, nodePointer0);
      RootContext rootContext1 = rootContext0.getRootContext();
      InitialContext initialContext0 = new InitialContext(rootContext0);
      EvalContext evalContext0 = rootContext1.getConstantContext(initialContext0);
      coreFunction0.functionLast(evalContext0);
      CoreFunction coreFunction1 = new CoreFunction(22, expressionArray0);
      // Undeclared exception!
//      try { 
        coreFunction1.functionRound(evalContext0);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // Incorrect number of arguments: lang()
//         //
//         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      Constant constant0 = new Constant("In");
      CoreOperationMod coreOperationMod0 = new CoreOperationMod(constant0, constant0);
      CoreOperationMultiply coreOperationMultiply0 = new CoreOperationMultiply(coreOperationMod0, coreOperationMod0);
      expressionArray0[0] = (Expression) coreOperationMultiply0;
      CoreFunction coreFunction0 = new CoreFunction(4846, expressionArray0);
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = mock(JXPathContextReferenceImpl.class, new ViolatedAssumptionAnswer());
      doReturn((Locale) null).when(jXPathContextReferenceImpl0).getLocale();
      doReturn((NamespaceResolver) null).when(jXPathContextReferenceImpl0).getNamespaceResolver();
      RootContext rootContext0 = new RootContext(jXPathContextReferenceImpl0, (NodePointer) null);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, false);
      QName qName0 = new QName("In", "=b]3&>5[a[");
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, "kb]3)>5[a[-7");
      AncestorContext ancestorContext0 = new AncestorContext(rootContext0, true, nodeNameTest0);
      JXPathContext jXPathContext0 = ancestorContext0.getJXPathContext();
      JXPathContextReferenceImpl jXPathContextReferenceImpl1 = new JXPathContextReferenceImpl(jXPathContext0, "=b]3&>5[a[", (Pointer) null);
      EvalContext evalContext0 = jXPathContextReferenceImpl1.getAbsoluteRootContext();
      // Undeclared exception!
//      try { 
        coreFunction0.functionSum(evalContext0);
//        fail("Expecting exception: ArithmeticException");
      
//      } catch(ArithmeticException e) {
//         //
//         // / by zero
//         //
//         verifyException("org.apache.commons.jxpath.ri.compiler.CoreOperationMod", e);
//      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[3];
      Expression[] expressionArray1 = new Expression[4];
      CoreOperationAnd coreOperationAnd0 = new CoreOperationAnd(expressionArray1);
      CoreFunction coreFunction0 = new CoreFunction(30, expressionArray0);
      // Undeclared exception!
//      try { 
        coreFunction0.computeValue((EvalContext) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[5];
      Constant constant0 = new Constant("contains");
      CoreOperationNegate coreOperationNegate0 = new CoreOperationNegate(constant0);
      CoreOperationMultiply coreOperationMultiply0 = new CoreOperationMultiply(coreOperationNegate0, constant0);
      expressionArray0[0] = (Expression) coreOperationMultiply0;
      Constant constant1 = new Constant((String) null);
      expressionArray0[1] = (Expression) constant1;
      Step[] stepArray0 = new Step[1];
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest((-2426));
      Step step0 = new Step(46, nodeTypeTest0, expressionArray0);
      stepArray0[0] = step0;
      LocationPath locationPath0 = new LocationPath(false, stepArray0);
      expressionArray0[2] = (Expression) locationPath0;
      ExpressionPath expressionPath0 = new ExpressionPath(constant0, expressionArray0, stepArray0);
      expressionArray0[3] = (Expression) expressionPath0;
      Constant constant2 = new Constant("contains");
      expressionArray0[4] = (Expression) constant2;
      CoreFunction coreFunction0 = new CoreFunction((-691), expressionArray0);
      AttributeContext attributeContext0 = new AttributeContext((EvalContext) null, nodeTypeTest0);
      ChildContext childContext0 = new ChildContext(attributeContext0, nodeTypeTest0, true, false);
      expressionPath0.createContextForStep(childContext0, (-2528), nodeTypeTest0);
      // Undeclared exception!
      coreFunction0.functionTrue((EvalContext) null);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(22, expressionArray0);
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = new JXPathContextReferenceImpl((JXPathContext) null, (Object) null, (Pointer) null);
      QName qName0 = new QName("' ", "' ");
      Locale locale0 = Locale.CANADA_FRENCH;
      NodePointer nodePointer0 = NodePointer.newNodePointer(qName0, qName0, locale0);
      RootContext rootContext0 = new RootContext(jXPathContextReferenceImpl0, nodePointer0);
      EvalContext evalContext0 = rootContext0.getConstantContext((Object) null);
      coreFunction0.functionNamespaceURI(evalContext0);
      // Undeclared exception!
//      try { 
        coreFunction0.functionPosition(rootContext0);
//        fail("Expecting exception: UnsupportedOperationException");
      
//      } catch(UnsupportedOperationException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.jxpath.ri.axes.RootContext", e);
//      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(3173);
      nodeTypeTest0.toString();
      AttributeContext attributeContext0 = new AttributeContext((EvalContext) null, nodeTypeTest0);
      attributeContext0.setPosition(3173);
      CoreFunction coreFunction0 = new CoreFunction(3173, (Expression[]) null);
      coreFunction0.functionLast(attributeContext0);
      // Undeclared exception!
//      try { 
        coreFunction0.functionString((EvalContext) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(22, expressionArray0);
      coreFunction0.computeContextDependent();
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = new JXPathContextReferenceImpl((JXPathContext) null, (Object) null, (Pointer) null);
      QName qName0 = new QName("' ", "' ");
      Locale locale0 = Locale.CANADA_FRENCH;
      NodePointer nodePointer0 = NodePointer.newNodePointer(qName0, qName0, locale0);
      RootContext rootContext0 = new RootContext(jXPathContextReferenceImpl0, nodePointer0);
      EvalContext evalContext0 = rootContext0.getConstantContext((Object) null);
      coreFunction0.functionNamespaceURI(evalContext0);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Constant constant0 = new Constant("+");
      Expression[] expressionArray0 = new Expression[1];
      Expression[] expressionArray1 = new Expression[7];
      expressionArray1[0] = (Expression) constant0;
      expressionArray1[1] = (Expression) constant0;
      expressionArray1[2] = (Expression) constant0;
      QName qName0 = new QName("+");
      ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, expressionArray1);
      expressionArray1[3] = (Expression) extensionFunction0;
      expressionArray1[4] = (Expression) constant0;
      expressionArray1[5] = (Expression) constant0;
      expressionArray1[6] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction(513, expressionArray1);
      // Undeclared exception!
      coreFunction0.functionFalse((EvalContext) null);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Constant constant0 = new Constant((String) null);
      PredicateContext predicateContext0 = new PredicateContext((EvalContext) null, constant0);
      Expression[] expressionArray0 = new Expression[1];
      expressionArray0[0] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction(24, expressionArray0);
      coreFunction0.computeValue(predicateContext0);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Byte byte0 = new Byte((byte) (-7));
      Constant constant0 = new Constant(byte0);
      Constant constant1 = new Constant("kb]3)>5[a[");
      Expression[] expressionArray0 = new Expression[2];
      CoreOperationMod coreOperationMod0 = new CoreOperationMod(constant0, constant1);
      expressionArray0[0] = (Expression) coreOperationMod0;
      expressionArray0[1] = (Expression) constant1;
      CoreFunction coreFunction0 = new CoreFunction((byte) (-7), expressionArray0);
      EvalContext evalContext0 = null;
      // Undeclared exception!
//      try { 
        coreFunction0.functionSubstringBefore((EvalContext) null);
//        fail("Expecting exception: ArithmeticException");
      
//      } catch(ArithmeticException e) {
//         //
//         // / by zero
//         //
//         verifyException("org.apache.commons.jxpath.ri.compiler.CoreOperationMod", e);
//      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[5];
      Byte byte0 = new Byte((byte)6);
      Constant constant0 = new Constant(byte0);
      expressionArray0[0] = (Expression) constant0;
      Step[] stepArray0 = new Step[1];
      QName qName0 = new QName("17");
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
      Step step0 = new Step(2241, nodeNameTest0, expressionArray0);
      stepArray0[0] = step0;
      LocationPath locationPath0 = new LocationPath(true, stepArray0);
      expressionArray0[1] = (Expression) locationPath0;
      CoreOperationSubtract coreOperationSubtract0 = new CoreOperationSubtract(expressionArray0[1], expressionArray0[0]);
      expressionArray0[2] = (Expression) coreOperationSubtract0;
      CoreOperationOr coreOperationOr0 = new CoreOperationOr(expressionArray0);
      expressionArray0[3] = (Expression) coreOperationOr0;
      VariableReference variableReference0 = new VariableReference(qName0);
      expressionArray0[4] = (Expression) variableReference0;
      CoreFunction coreFunction0 = new CoreFunction(9, expressionArray0);
      // Undeclared exception!
//      try { 
        coreFunction0.functionKey((EvalContext) null);
//        fail("Expecting exception: StackOverflowError");
      
//      } catch(StackOverflowError e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Constant constant0 = new Constant("Invalid argument type for 'sum': ");
      Expression[] expressionArray0 = new Expression[1];
      expressionArray0[0] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction((-1516), expressionArray0);
      coreFunction0.functionNormalizeSpace((EvalContext) null);
      // Undeclared exception!
//      try { 
        coreFunction0.functionSubstring((EvalContext) null);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // Incorrect number of arguments: unknownFunction-1516()('Invalid argument type for 'sum': ')
//         //
//         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[7];
      Constant constant0 = new Constant("-25");
      CoreOperationGreaterThanOrEqual coreOperationGreaterThanOrEqual0 = new CoreOperationGreaterThanOrEqual(constant0, constant0);
      CoreOperationNotEqual coreOperationNotEqual0 = new CoreOperationNotEqual(coreOperationGreaterThanOrEqual0, (Expression) null);
      CoreOperationDivide coreOperationDivide0 = new CoreOperationDivide(coreOperationNotEqual0, coreOperationNotEqual0);
      expressionArray0[0] = (Expression) coreOperationDivide0;
      CoreOperationOr coreOperationOr0 = new CoreOperationOr(expressionArray0);
      expressionArray0[1] = (Expression) coreOperationOr0;
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual(coreOperationNotEqual0, coreOperationNotEqual0);
      expressionArray0[2] = (Expression) coreOperationLessThanOrEqual0;
      ExtensionFunction extensionFunction0 = new ExtensionFunction((QName) null, expressionArray0);
      CoreOperationSubtract coreOperationSubtract0 = new CoreOperationSubtract(extensionFunction0, expressionArray0[2]);
      expressionArray0[3] = (Expression) coreOperationSubtract0;
      Step[] stepArray0 = new Step[3];
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(1610612736);
      Step step0 = new Step((-30), nodeTypeTest0, expressionArray0);
      stepArray0[0] = step0;
      Step step1 = new Step((-588), nodeTypeTest0, expressionArray0);
      stepArray0[1] = step1;
      Step step2 = new Step((-30), nodeTypeTest0, expressionArray0);
      stepArray0[2] = step2;
      LocationPath locationPath0 = new LocationPath(false, stepArray0);
      expressionArray0[4] = (Expression) locationPath0;
      CoreOperationUnion coreOperationUnion0 = new CoreOperationUnion(expressionArray0);
      expressionArray0[5] = (Expression) coreOperationUnion0;
      CoreOperationNotEqual coreOperationNotEqual1 = new CoreOperationNotEqual(expressionArray0[2], coreOperationLessThanOrEqual0);
      CoreOperationEqual coreOperationEqual0 = new CoreOperationEqual(coreOperationOr0, coreOperationNotEqual1);
      expressionArray0[6] = (Expression) coreOperationEqual0;
      CoreFunction coreFunction0 = new CoreFunction((-1555), expressionArray0);
      // Undeclared exception!
      coreFunction0.functionFloor((EvalContext) null);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[3];
      Constant constant0 = new Constant("y,AG");
      CoreOperationGreaterThan coreOperationGreaterThan0 = new CoreOperationGreaterThan(constant0, constant0);
      CoreOperationMultiply coreOperationMultiply0 = new CoreOperationMultiply(coreOperationGreaterThan0, constant0);
      CoreOperationGreaterThanOrEqual coreOperationGreaterThanOrEqual0 = new CoreOperationGreaterThanOrEqual(coreOperationMultiply0, coreOperationMultiply0);
      expressionArray0[0] = (Expression) coreOperationGreaterThanOrEqual0;
      CoreOperationNegate coreOperationNegate0 = new CoreOperationNegate(expressionArray0[0]);
      expressionArray0[1] = (Expression) coreOperationNegate0;
      Step[] stepArray0 = new Step[2];
      NodeNameTest nodeNameTest0 = new NodeNameTest((QName) null);
      Step step0 = new Step(24, nodeNameTest0, expressionArray0);
      stepArray0[0] = step0;
      Step step1 = new Step(2, nodeNameTest0, expressionArray0);
      stepArray0[1] = step1;
      LocationPath locationPath0 = new LocationPath(false, stepArray0);
      CoreOperationMultiply coreOperationMultiply1 = new CoreOperationMultiply(coreOperationGreaterThan0, locationPath0);
      ExpressionPath expressionPath0 = new ExpressionPath(coreOperationMultiply1, expressionArray0, stepArray0);
      expressionArray0[2] = (Expression) expressionPath0;
      CoreFunction coreFunction0 = new CoreFunction(24, expressionArray0);
      // Undeclared exception!
      coreFunction0.functionRound((EvalContext) null);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[2];
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      QName qName0 = new QName("", "");
      ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, expressionArray0);
      expressionArray0[0] = (Expression) extensionFunction0;
      CoreOperationGreaterThanOrEqual coreOperationGreaterThanOrEqual0 = new CoreOperationGreaterThanOrEqual(extensionFunction0, extensionFunction0);
      expressionArray0[1] = (Expression) coreOperationGreaterThanOrEqual0;
      CoreFunction coreFunction0 = new CoreFunction((-1), expressionArray0);
      JXPathContext jXPathContext0 = JXPathContext.newContext((Object) expressionArray0[1]);
      JXPathContext jXPathContext1 = JXPathContext.newContext(jXPathContext0, (Object) coreOperationGreaterThanOrEqual0);
      VariablePointer variablePointer0 = new VariablePointer(qName0);
      Locale locale0 = Locale.CHINA;
      NodePointer nodePointer0 = NodePointer.newNodePointer(qName0, variablePointer0, locale0);
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = new JXPathContextReferenceImpl(jXPathContext1, expressionArray0[1], nodePointer0);
      RootContext rootContext0 = new RootContext(jXPathContextReferenceImpl0, variablePointer0);
      jXPathContext1.getRelativeContext(nodePointer0);
      PredicateContext predicateContext0 = new PredicateContext(rootContext0, expressionArray0[0]);
      // Undeclared exception!
//      try { 
        coreFunction0.functionSubstring(rootContext0);
//        fail("Expecting exception: StackOverflowError");
      
//      } catch(StackOverflowError e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(18, (Expression[]) null);
      coreFunction0.computeContextDependent();
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("#Grgi^/^|40jN )WY<>");
      AttributeContext attributeContext0 = new AttributeContext((EvalContext) null, processingInstructionTest0);
      // Undeclared exception!
//      try { 
        coreFunction0.functionLang(attributeContext0);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // Incorrect number of arguments: boolean()
//         //
//         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(19, (Expression[]) null);
      CoreFunction coreFunction1 = new CoreFunction((-3050), (Expression[]) null);
      JXPathContext jXPathContext0 = JXPathContext.newContext((Object) coreFunction0);
      QName qName0 = new QName("ceiling");
      Locale locale0 = Locale.FRENCH;
      NodePointer nodePointer0 = NodePointer.newNodePointer(qName0, coreFunction1, locale0);
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = new JXPathContextReferenceImpl(jXPathContext0, coreFunction1, nodePointer0);
      RootContext rootContext0 = new RootContext(jXPathContextReferenceImpl0, nodePointer0);
      PredicateContext predicateContext0 = new PredicateContext(rootContext0, coreFunction1);
      // Undeclared exception!
//      try { 
        coreFunction1.functionName(predicateContext0);
//        fail("Expecting exception: UnsupportedOperationException");
      
//      } catch(UnsupportedOperationException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.jxpath.ri.axes.RootContext", e);
//      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[4];
      Double double0 = new Double(105);
      Constant constant0 = new Constant(double0);
      expressionArray0[0] = (Expression) constant0;
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd(expressionArray0);
      expressionArray0[1] = (Expression) coreOperationAdd0;
      CoreOperationGreaterThanOrEqual coreOperationGreaterThanOrEqual0 = new CoreOperationGreaterThanOrEqual(coreOperationAdd0, expressionArray0[1]);
      expressionArray0[2] = (Expression) coreOperationGreaterThanOrEqual0;
      QName qName0 = new QName("}");
      ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, expressionArray0);
      expressionArray0[3] = (Expression) extensionFunction0;
      CoreFunction coreFunction0 = new CoreFunction(105, expressionArray0);
      // Undeclared exception!
      coreFunction0.functionTrue((EvalContext) null);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(19, (Expression[]) null);
      coreFunction0.computeContextDependent();
      BasicVariables basicVariables0 = new BasicVariables();
      VariablePointer variablePointer0 = new VariablePointer(basicVariables0, (QName) null);
      Locale locale0 = Locale.JAPANESE;
      NodePointer nodePointer0 = NodePointer.newNodePointer((QName) null, variablePointer0, locale0);
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = new JXPathContextReferenceImpl((JXPathContext) null, (Object) null, nodePointer0);
      RootContext rootContext0 = new RootContext(jXPathContextReferenceImpl0, nodePointer0);
      // Undeclared exception!
//      try { 
        coreFunction0.functionLast(rootContext0);
//        fail("Expecting exception: UnsupportedOperationException");
      
//      } catch(UnsupportedOperationException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.jxpath.ri.axes.RootContext", e);
//      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[6];
      Constant constant0 = new Constant("=-I_p\"4L\"5&b");
      CoreOperationMultiply coreOperationMultiply0 = new CoreOperationMultiply(constant0, constant0);
      expressionArray0[0] = (Expression) coreOperationMultiply0;
      NameAttributeTest nameAttributeTest0 = new NameAttributeTest(expressionArray0[1], coreOperationMultiply0);
      expressionArray0[2] = (Expression) nameAttributeTest0;
      QName qName0 = new QName("=-I_p\"4L\"5&b", "=-I_p\"4L\"5&b");
      ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, expressionArray0);
      expressionArray0[3] = (Expression) extensionFunction0;
      CoreOperationNotEqual coreOperationNotEqual0 = new CoreOperationNotEqual(coreOperationMultiply0, expressionArray0[0]);
      expressionArray0[4] = (Expression) coreOperationNotEqual0;
      CoreOperationOr coreOperationOr0 = new CoreOperationOr(expressionArray0);
      expressionArray0[5] = (Expression) coreOperationOr0;
      CoreFunction coreFunction0 = new CoreFunction(2125, expressionArray0);
      EvalContext evalContext0 = null;
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, "=-I_p\"4L\"5&b");
      boolean boolean0 = false;
      PrecedingOrFollowingContext precedingOrFollowingContext0 = new PrecedingOrFollowingContext((EvalContext) null, nodeNameTest0, false);
      BasicNodeSet basicNodeSet0 = new BasicNodeSet();
      NodeSetContext nodeSetContext0 = new NodeSetContext(precedingOrFollowingContext0, basicNodeSet0);
      precedingOrFollowingContext0.toString();
      ParentContext parentContext0 = new ParentContext(nodeSetContext0, nodeNameTest0);
      PredicateContext predicateContext0 = new PredicateContext(parentContext0, expressionArray0[5]);
      // Undeclared exception!
//      try { 
        coreFunction0.functionNull(predicateContext0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.evosuite.runtime.System", e);
//      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      EvalContext evalContext0 = null;
      Byte byte0 = new Byte((byte)95);
      Constant constant0 = new Constant(byte0);
      Constant constant1 = new Constant("Sb13)>5#F[");
      Expression[] expressionArray0 = new Expression[7];
      expressionArray0[0] = (Expression) constant0;
      expressionArray0[1] = (Expression) constant0;
      expressionArray0[2] = (Expression) constant1;
      expressionArray0[3] = (Expression) constant1;
      ExpressionPath expressionPath0 = new ExpressionPath(expressionArray0[2], expressionArray0, (Step[]) null);
      expressionArray0[4] = (Expression) expressionPath0;
      expressionArray0[5] = (Expression) constant0;
      expressionArray0[6] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction((byte)0, expressionArray0);
      // Undeclared exception!
      coreFunction0.functionStartsWith((EvalContext) null);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      CoreFunction coreFunction0 = new CoreFunction(2467, (Expression[]) null);
      EvalContext evalContext0 = null;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      AttributeContext attributeContext0 = new AttributeContext((EvalContext) null, (NodeTest) null);
      coreFunction0.functionLast(attributeContext0);
      // Undeclared exception!
//      try { 
        coreFunction0.functionContains(attributeContext0);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // Incorrect number of arguments: unknownFunction2467()()
//         //
//         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      Expression[] expressionArray1 = new Expression[9];
      CoreOperationOr coreOperationOr0 = new CoreOperationOr(expressionArray0);
      CoreOperationSubtract coreOperationSubtract0 = new CoreOperationSubtract(coreOperationOr0, coreOperationOr0);
      expressionArray1[0] = (Expression) coreOperationSubtract0;
      CoreOperationUnion coreOperationUnion0 = new CoreOperationUnion(expressionArray0);
      expressionArray1[1] = (Expression) coreOperationUnion0;
      CoreOperationGreaterThanOrEqual coreOperationGreaterThanOrEqual0 = new CoreOperationGreaterThanOrEqual(expressionArray1[0], coreOperationOr0);
      expressionArray1[2] = (Expression) coreOperationGreaterThanOrEqual0;
      CoreOperationMod coreOperationMod0 = new CoreOperationMod(coreOperationUnion0, coreOperationOr0);
      expressionArray1[3] = (Expression) coreOperationMod0;
      Double double0 = new Double(3528.464221341);
      Constant constant0 = new Constant(double0);
      expressionArray1[4] = (Expression) constant0;
      Step[] stepArray0 = new Step[1];
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(2);
      Step step0 = new Step(54, nodeTypeTest0, expressionArray1);
      stepArray0[0] = step0;
      LocationPath locationPath0 = new LocationPath(false, stepArray0);
      expressionArray1[5] = (Expression) locationPath0;
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd(expressionArray1);
      expressionArray1[6] = (Expression) coreOperationAdd0;
      CoreOperationAdd coreOperationAdd1 = new CoreOperationAdd((Expression[]) null);
      expressionArray1[7] = (Expression) coreOperationAdd1;
      CoreOperationMultiply coreOperationMultiply0 = new CoreOperationMultiply(expressionArray1[7], expressionArray1[3]);
      expressionArray1[8] = (Expression) coreOperationMultiply0;
      CoreFunction coreFunction0 = new CoreFunction(2189, expressionArray1);
      Expression expression0 = coreFunction0.getArg3();
      expressionArray0[0] = expression0;
      CoreFunction coreFunction1 = new CoreFunction(15, expressionArray0);
      // Undeclared exception!
//      try { 
        coreFunction1.computeValue((EvalContext) null);
//        fail("Expecting exception: StackOverflowError");
      
//      } catch(StackOverflowError e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Constant constant0 = new Constant("Tj*NW+#");
      Expression[] expressionArray0 = new Expression[1];
      constant0.iterate((EvalContext) null);
      CoreFunction coreFunction0 = new CoreFunction(14, expressionArray0);
      // Undeclared exception!
//      try { 
        coreFunction0.computeValue((EvalContext) null);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // Incorrect number of arguments: substring(null)
//         //
//         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      EvalContext evalContext0 = null;
      Short short0 = new Short((short)32);
      Constant constant0 = new Constant(short0);
      Constant constant1 = new Constant("T)t<W+3T)t<W+3");
      CoreFunction coreFunction0 = new CoreFunction(18, (Expression[]) null);
      // Undeclared exception!
//      try { 
        coreFunction0.computeValue((EvalContext) null);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // Incorrect number of arguments: boolean()
//         //
//         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Constant constant0 = new Constant("T)tW+3");
      Expression[] expressionArray0 = new Expression[2];
      expressionArray0[0] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction(1173, expressionArray0);
      expressionArray0[1] = (Expression) coreFunction0;
      CoreFunction coreFunction1 = new CoreFunction(1173, expressionArray0);
      coreFunction1.functionSubstringAfter((EvalContext) null);
      coreFunction1.functionPosition((EvalContext) null);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      EvalContext evalContext0 = null;
      Expression[] expressionArray0 = new Expression[2];
      Byte byte0 = new Byte((byte) (-10));
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "T)t<W+3T)t<W+3-86");
      Constant constant0 = new Constant(byte0);
      expressionArray0[0] = (Expression) constant0;
      Constant constant1 = new Constant("T)t<W+3T)t<W+3");
      expressionArray0[1] = (Expression) constant1;
      CoreFunction coreFunction0 = new CoreFunction(30, expressionArray0);
      coreFunction0.functionContains((EvalContext) null);
      // Undeclared exception!
//      try { 
        coreFunction0.computeValue((EvalContext) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[5];
      CoreOperationOr coreOperationOr0 = new CoreOperationOr(expressionArray0);
      CoreOperationSubtract coreOperationSubtract0 = new CoreOperationSubtract(coreOperationOr0, coreOperationOr0);
      CoreOperationNotEqual coreOperationNotEqual0 = new CoreOperationNotEqual(coreOperationSubtract0, coreOperationSubtract0);
      expressionArray0[0] = (Expression) coreOperationNotEqual0;
      CoreOperationLessThan coreOperationLessThan0 = new CoreOperationLessThan(coreOperationOr0, coreOperationOr0);
      CoreOperationDivide coreOperationDivide0 = new CoreOperationDivide(coreOperationLessThan0, expressionArray0[0]);
      expressionArray0[1] = (Expression) coreOperationDivide0;
      CoreOperationMultiply coreOperationMultiply0 = new CoreOperationMultiply(coreOperationNotEqual0, coreOperationSubtract0);
      expressionArray0[2] = (Expression) coreOperationMultiply0;
      LocationPath locationPath0 = new LocationPath(false, (Step[]) null);
      expressionArray0[3] = (Expression) locationPath0;
      LocationPath locationPath1 = new LocationPath(false, (Step[]) null);
      expressionArray0[4] = (Expression) locationPath1;
      CoreFunction coreFunction0 = new CoreFunction((-309), expressionArray0);
      PredicateContext predicateContext0 = new PredicateContext((EvalContext) null, coreOperationOr0);
      // Undeclared exception!
//      try { 
        coreFunction0.functionConcat(predicateContext0);
//        fail("Expecting exception: StackOverflowError");
      
//      } catch(StackOverflowError e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction((-3254), (Expression[]) null);
      CoreFunction coreFunction1 = new CoreFunction(6, (Expression[]) null);
      coreFunction1.computeContextDependent();
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      EvalContext evalContext0 = null;
      Expression[] expressionArray0 = new Expression[1];
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd(expressionArray0);
      expressionArray0[0] = (Expression) coreOperationAdd0;
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "org.apache.commons.jxpath.ri.model.VariablePointerFactory$1");
      CoreOperationAnd coreOperationAnd0 = new CoreOperationAnd(expressionArray0);
      CoreOperationDivide coreOperationDivide0 = new CoreOperationDivide(expressionArray0[0], expressionArray0[0]);
      CoreFunction coreFunction0 = new CoreFunction((-132774720), expressionArray0);
      EvalContext evalContext1 = null;
      CoreFunction coreFunction1 = new CoreFunction((-132774720), expressionArray0);
      // Undeclared exception!
      coreFunction1.functionNamespaceURI((EvalContext) null);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[2];
      Byte byte0 = new Byte((byte) (-10));
      Constant constant0 = new Constant(byte0);
      expressionArray0[0] = (Expression) constant0;
      Constant constant1 = new Constant("T)t<W+3T)t<W+3");
      expressionArray0[1] = (Expression) constant1;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "T)t<W+3T)t<W+3");
      CoreFunction coreFunction0 = new CoreFunction((byte) (-10), expressionArray0);
      coreFunction0.functionStartsWith((EvalContext) null);
      coreFunction0.functionContains((EvalContext) null);
      coreFunction0.computeContextDependent();
      coreFunction0.functionSubstringAfter((EvalContext) null);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[2];
      Byte byte0 = new Byte((byte) (-10));
      Constant constant0 = new Constant(byte0);
      expressionArray0[0] = (Expression) constant0;
      Constant constant1 = new Constant("T)t<W+3T)t<W+3");
      expressionArray0[1] = (Expression) constant1;
      CoreFunction coreFunction0 = new CoreFunction(82, expressionArray0);
      coreFunction0.functionStartsWith((EvalContext) null);
      coreFunction0.functionContains((EvalContext) null);
      coreFunction0.computeContextDependent();
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(14, (Expression[]) null);
      coreFunction0.isContextDependent();
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[6];
      CoreOperationOr coreOperationOr0 = new CoreOperationOr(expressionArray0);
      expressionArray0[0] = (Expression) coreOperationOr0;
      QName qName0 = new QName("i*>3me0B)79KFN]", "i*>3me0B)79KFN]");
      VariableReference variableReference0 = new VariableReference(qName0);
      expressionArray0[1] = (Expression) variableReference0;
      Double double0 = Expression.NOT_A_NUMBER;
      Constant constant0 = new Constant(double0);
      expressionArray0[2] = (Expression) constant0;
      Step[] stepArray0 = new Step[3];
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
      Step step0 = new Step((-2301), nodeNameTest0, expressionArray0);
      stepArray0[0] = step0;
      Step step1 = new Step(1896, nodeNameTest0, expressionArray0);
      stepArray0[1] = step1;
      Step step2 = new Step(1896, nodeNameTest0, expressionArray0);
      stepArray0[2] = step2;
      ExpressionPath expressionPath0 = new ExpressionPath(constant0, expressionArray0, stepArray0);
      expressionArray0[3] = (Expression) expressionPath0;
      LocationPath locationPath0 = new LocationPath(true, stepArray0);
      expressionArray0[4] = (Expression) locationPath0;
      CoreFunction coreFunction0 = new CoreFunction(1896, expressionArray0);
      Expression expression0 = coreFunction0.getArg1();
      expressionArray0[5] = expression0;
      CoreFunction coreFunction1 = new CoreFunction(1896, expressionArray0);
      EvalContext evalContext0 = null;
      // Undeclared exception!
      coreFunction0.functionBoolean((EvalContext) null);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      int int0 = 2423;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Expression[] expressionArray0 = new Expression[3];
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Constant constant0 = new Constant("H-eYR");
      expressionArray0[0] = (Expression) constant0;
      CoreOperationGreaterThanOrEqual coreOperationGreaterThanOrEqual0 = new CoreOperationGreaterThanOrEqual(constant0, expressionArray0[0]);
      expressionArray0[1] = (Expression) coreOperationGreaterThanOrEqual0;
      EvalContext evalContext0 = null;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      constant0.iterate((EvalContext) null);
      QName qName0 = new QName("-48-48", "-48-48");
      ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, expressionArray0);
      expressionArray0[2] = (Expression) extensionFunction0;
      CoreFunction coreFunction0 = new CoreFunction(2423, expressionArray0);
      EvalContext evalContext1 = null;
      // Undeclared exception!
      coreFunction0.functionLast((EvalContext) null);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      EvalContext evalContext0 = null;
      Expression[] expressionArray0 = new Expression[1];
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd(expressionArray0);
      CoreOperationSubtract coreOperationSubtract0 = new CoreOperationSubtract(coreOperationAdd0, coreOperationAdd0);
      CoreOperationLessThan coreOperationLessThan0 = new CoreOperationLessThan(coreOperationSubtract0, coreOperationAdd0);
      NameAttributeTest nameAttributeTest0 = new NameAttributeTest(coreOperationLessThan0, coreOperationLessThan0);
      nameAttributeTest0.isContextDependent();
      CoreOperationDivide coreOperationDivide0 = new CoreOperationDivide(nameAttributeTest0, coreOperationSubtract0);
      expressionArray0[0] = (Expression) coreOperationDivide0;
      CoreFunction coreFunction0 = new CoreFunction(15, expressionArray0);
      // Undeclared exception!
//      try { 
        coreFunction0.functionString((EvalContext) null);
//        fail("Expecting exception: StackOverflowError");
      
//      } catch(StackOverflowError e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Expression[] expressionArray0 = new Expression[4];
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd(expressionArray0);
      CoreOperationGreaterThanOrEqual coreOperationGreaterThanOrEqual0 = new CoreOperationGreaterThanOrEqual(coreOperationAdd0, coreOperationAdd0);
      CoreOperationDivide coreOperationDivide0 = new CoreOperationDivide(coreOperationGreaterThanOrEqual0, coreOperationGreaterThanOrEqual0);
      expressionArray0[0] = (Expression) coreOperationDivide0;
      Expression[] expressionArray1 = new Expression[7];
      expressionArray1[0] = (Expression) coreOperationAdd0;
      expressionArray1[1] = (Expression) coreOperationDivide0;
      expressionArray1[2] = (Expression) coreOperationGreaterThanOrEqual0;
      expressionArray1[3] = (Expression) coreOperationDivide0;
      expressionArray1[4] = (Expression) coreOperationGreaterThanOrEqual0;
      expressionArray1[5] = (Expression) coreOperationDivide0;
      expressionArray1[6] = (Expression) coreOperationAdd0;
      Step[] stepArray0 = new Step[9];
      QName qName0 = new QName("Expression context [", "name");
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, "_*Wr");
      Step step0 = new Step(17, nodeNameTest0, expressionArray0);
      stepArray0[0] = step0;
      Step step1 = new Step(1693, nodeNameTest0, expressionArray0);
      stepArray0[1] = step1;
      Step step2 = new Step(17, nodeNameTest0, expressionArray0);
      stepArray0[2] = step2;
      Step step3 = new Step(1502, nodeNameTest0, expressionArray1);
      stepArray0[3] = step3;
      NodeNameTest nodeNameTest1 = new NodeNameTest(qName0);
      Step step4 = new Step(1568, nodeNameTest1, expressionArray0);
      stepArray0[4] = step4;
      Step step5 = new Step(1568, nodeNameTest0, expressionArray0);
      stepArray0[5] = step5;
      Step step6 = new Step(1502, nodeNameTest0, expressionArray0);
      stepArray0[6] = step6;
      Step step7 = new Step(13, nodeNameTest1, expressionArray1);
      stepArray0[7] = step7;
      Step step8 = new Step(10, nodeNameTest1, expressionArray0);
      stepArray0[8] = step8;
      ExpressionPath expressionPath0 = new ExpressionPath(expressionArray0[0], expressionArray1, stepArray0);
      expressionArray0[1] = (Expression) expressionPath0;
      CoreOperationAnd coreOperationAnd0 = new CoreOperationAnd(expressionArray1);
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual(coreOperationAnd0, expressionArray1[6]);
      expressionArray0[2] = (Expression) coreOperationLessThanOrEqual0;
      CoreOperationMod coreOperationMod0 = new CoreOperationMod(expressionArray1[6], expressionArray1[5]);
      expressionArray0[3] = (Expression) coreOperationMod0;
      CoreFunction coreFunction0 = new CoreFunction(17, expressionArray0);
      // Undeclared exception!
      coreFunction0.functionSubstringBefore((EvalContext) null);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      QName qName0 = new QName("qyZ~7JA)LFV", "");
      ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, expressionArray0);
      expressionArray0[0] = (Expression) extensionFunction0;
      CoreFunction coreFunction0 = new CoreFunction(41, expressionArray0);
      EvalContext evalContext0 = null;
      // Undeclared exception!
//      try { 
        coreFunction0.functionLast((EvalContext) null);
//        fail("Expecting exception: StackOverflowError");
      
//      } catch(StackOverflowError e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Constant constant0 = new Constant((String) null);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Expression[] expressionArray0 = new Expression[1];
      expressionArray0[0] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction(1, expressionArray0);
      coreFunction0.functionBoolean((EvalContext) null);
      coreFunction0.functionNamespaceURI((EvalContext) null);
      coreFunction0.functionCount((EvalContext) null);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Constant constant0 = new Constant("uw]i.(Rii}2bN8u0");
      EvalContext evalContext0 = null;
      constant0.iterate((EvalContext) null);
      Expression[] expressionArray0 = new Expression[9];
      QName qName0 = new QName((String) null, ")%O-");
      ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, expressionArray0);
      expressionArray0[0] = (Expression) extensionFunction0;
      expressionArray0[1] = (Expression) constant0;
      expressionArray0[2] = (Expression) constant0;
      expressionArray0[3] = (Expression) constant0;
      expressionArray0[4] = (Expression) constant0;
      expressionArray0[5] = (Expression) constant0;
      expressionArray0[6] = (Expression) constant0;
      expressionArray0[7] = (Expression) constant0;
      expressionArray0[8] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction(24, expressionArray0);
      // Undeclared exception!
//      try { 
        coreFunction0.functionFalse((EvalContext) null);
//        fail("Expecting exception: StackOverflowError");
      
//      } catch(StackOverflowError e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      CoreOperationOr coreOperationOr0 = new CoreOperationOr(expressionArray0);
      expressionArray0[0] = (Expression) coreOperationOr0;
      CoreFunction coreFunction0 = new CoreFunction(15, expressionArray0);
      // Undeclared exception!
      coreFunction0.functionNumber((EvalContext) null);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Constant constant0 = new Constant("7");
      constant0.toString();
      Expression[] expressionArray0 = new Expression[2];
      expressionArray0[0] = (Expression) constant0;
      expressionArray0[1] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction((-3836), expressionArray0);
      coreFunction0.functionConcat((EvalContext) null);
      coreFunction0.functionSubstring((EvalContext) null);
      // Undeclared exception!
//      try { 
        coreFunction0.functionTranslate((EvalContext) null);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // Incorrect number of arguments: unknownFunction-3836()('7', '7')
//         //
//         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[3];
      ExtensionFunction extensionFunction0 = new ExtensionFunction((QName) null, expressionArray0);
      expressionArray0[0] = (Expression) extensionFunction0;
      NameAttributeTest nameAttributeTest0 = new NameAttributeTest(extensionFunction0, extensionFunction0);
      expressionArray0[1] = (Expression) nameAttributeTest0;
      CoreOperationNotEqual coreOperationNotEqual0 = new CoreOperationNotEqual(extensionFunction0, expressionArray0[0]);
      expressionArray0[2] = (Expression) coreOperationNotEqual0;
      CoreFunction coreFunction0 = new CoreFunction(2130, expressionArray0);
      EvalContext evalContext0 = null;
      // Undeclared exception!
//      try { 
        coreFunction0.functionLang((EvalContext) null);
//        fail("Expecting exception: StackOverflowError");
      
//      } catch(StackOverflowError e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Constant constant0 = new Constant((String) null);
      Expression[] expressionArray0 = new Expression[1];
      expressionArray0[0] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction(1, expressionArray0);
      coreFunction0.functionBoolean((EvalContext) null);
      coreFunction0.functionNamespaceURI((EvalContext) null);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(26, expressionArray0);
      coreFunction0.computeContextDependent();
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Constant constant0 = new Constant("o)t\"+3");
      CoreFunction coreFunction0 = new CoreFunction(29, (Expression[]) null);
      coreFunction0.computeContextDependent();
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[2];
      Byte byte0 = new Byte((byte) (-48));
      Constant constant0 = new Constant(byte0);
      expressionArray0[0] = (Expression) constant0;
      Constant constant1 = new Constant((String) null);
      expressionArray0[1] = (Expression) constant1;
      CoreFunction coreFunction0 = new CoreFunction(82, expressionArray0);
      coreFunction0.functionStartsWith((EvalContext) null);
      CoreFunction coreFunction1 = new CoreFunction((byte) (-48), expressionArray0);
      coreFunction1.functionSubstringBefore((EvalContext) null);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Constant constant0 = new Constant("T)tW+3");
      EvalContext evalContext0 = null;
      Expression[] expressionArray0 = new Expression[5];
      Integer integer0 = new Integer((-3600));
      Constant constant1 = new Constant(integer0);
      expressionArray0[0] = (Expression) constant1;
      expressionArray0[1] = (Expression) constant0;
      Step[] stepArray0 = new Step[2];
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest((String) null);
      Step step0 = new Step(1285, processingInstructionTest0, expressionArray0);
      stepArray0[0] = step0;
      Step step1 = new Step(1, processingInstructionTest0, expressionArray0);
      stepArray0[1] = step1;
      ExpressionPath expressionPath0 = new ExpressionPath(constant0, expressionArray0, stepArray0);
      expressionArray0[2] = (Expression) expressionPath0;
      expressionArray0[3] = (Expression) constant0;
      expressionArray0[4] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction(1285, expressionArray0);
      QName qName0 = new QName("T)tW+3");
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, "T)tW+3T)tW+3");
      ParentContext parentContext0 = new ParentContext((EvalContext) null, processingInstructionTest0);
      // Undeclared exception!
      coreFunction0.functionContains((EvalContext) null);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(5, (Expression[]) null);
      coreFunction0.isContextDependent();
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(21, (Expression[]) null);
      coreFunction0.isContextDependent();
      // Undeclared exception!
//      try { 
        coreFunction0.getArg2();
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[2];
      Byte byte0 = new Byte((byte) (-48));
      Constant constant0 = new Constant(byte0);
      expressionArray0[0] = (Expression) constant0;
      Constant constant1 = new Constant("T)t<W+3T)t<W+3");
      expressionArray0[1] = (Expression) constant1;
      CoreFunction coreFunction0 = new CoreFunction(0, expressionArray0);
      coreFunction0.iterate((EvalContext) null);
      coreFunction0.functionStartsWith((EvalContext) null);
      coreFunction0.functionSubstringBefore((EvalContext) null);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[6];
      Constant constant0 = new Constant("=-I_p\"4L\"5&b");
      CoreOperationMultiply coreOperationMultiply0 = new CoreOperationMultiply(constant0, constant0);
      expressionArray0[0] = (Expression) coreOperationMultiply0;
      CoreOperationMod coreOperationMod0 = new CoreOperationMod(expressionArray0[0], expressionArray0[0]);
      expressionArray0[1] = (Expression) coreOperationMod0;
      NameAttributeTest nameAttributeTest0 = new NameAttributeTest(expressionArray0[1], coreOperationMultiply0);
      expressionArray0[2] = (Expression) nameAttributeTest0;
      QName qName0 = new QName("=-I_p\"4L\"5&b", "=-I_p\"4L\"5&b");
      ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, expressionArray0);
      expressionArray0[3] = (Expression) extensionFunction0;
      CoreOperationNotEqual coreOperationNotEqual0 = new CoreOperationNotEqual(coreOperationMultiply0, expressionArray0[0]);
      expressionArray0[4] = (Expression) coreOperationNotEqual0;
      CoreOperationOr coreOperationOr0 = new CoreOperationOr(expressionArray0);
      expressionArray0[5] = (Expression) coreOperationOr0;
      CoreFunction coreFunction0 = new CoreFunction(2125, expressionArray0);
      EvalContext evalContext0 = null;
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, "=-I_p\"4L\"5&b");
      boolean boolean0 = false;
      PrecedingOrFollowingContext precedingOrFollowingContext0 = new PrecedingOrFollowingContext((EvalContext) null, nodeNameTest0, false);
      BasicNodeSet basicNodeSet0 = new BasicNodeSet();
      NodeSetContext nodeSetContext0 = new NodeSetContext(precedingOrFollowingContext0, basicNodeSet0);
      ParentContext parentContext0 = new ParentContext(nodeSetContext0, nodeNameTest0);
      PredicateContext predicateContext0 = new PredicateContext(parentContext0, expressionArray0[5]);
      // Undeclared exception!
      coreFunction0.functionNull(predicateContext0);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      EvalContext evalContext0 = null;
      Expression[] expressionArray0 = new Expression[4];
      CoreOperationUnion coreOperationUnion0 = new CoreOperationUnion(expressionArray0);
      CoreOperationMultiply coreOperationMultiply0 = new CoreOperationMultiply(coreOperationUnion0, coreOperationUnion0);
      expressionArray0[0] = (Expression) coreOperationMultiply0;
      QName qName0 = new QName("4ylbK&F'VE04ylbK&F'VE0", (String) null);
      VariableReference variableReference0 = new VariableReference(qName0);
      expressionArray0[1] = (Expression) variableReference0;
      CoreOperationEqual coreOperationEqual0 = new CoreOperationEqual(variableReference0, coreOperationUnion0);
      expressionArray0[2] = (Expression) coreOperationEqual0;
      Step[] stepArray0 = new Step[4];
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, "0l;");
      Step step0 = new Step(3, nodeNameTest0, expressionArray0);
      stepArray0[0] = step0;
      Step step1 = new Step(9, nodeNameTest0, expressionArray0);
      stepArray0[1] = step1;
      Step step2 = new Step((-1508), nodeNameTest0, expressionArray0);
      stepArray0[2] = step2;
      Step step3 = new Step(9, nodeNameTest0, expressionArray0);
      stepArray0[3] = step3;
      ExpressionPath expressionPath0 = new ExpressionPath((Expression) null, expressionArray0, stepArray0);
      expressionArray0[3] = (Expression) expressionPath0;
      CoreFunction coreFunction0 = new CoreFunction(3, expressionArray0);
      // Undeclared exception!
      coreFunction0.functionPosition((EvalContext) null);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Constant constant0 = new Constant("T)tW+3");
      Expression[] expressionArray0 = new Expression[1];
      expressionArray0[0] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction(12, expressionArray0);
      coreFunction0.computeContextDependent();
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(28, (Expression[]) null);
      coreFunction0.computeContextDependent();
      coreFunction0.computeValue((EvalContext) null);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Constant constant0 = new Constant("F3\"%@ ?>`");
      constant0.toString();
      Expression[] expressionArray0 = new Expression[2];
      expressionArray0[0] = (Expression) constant0;
      expressionArray0[1] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction(30, expressionArray0);
      coreFunction0.computeContextDependent();
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Constant constant0 = new Constant("z_2XZ!]MB*c E $");
      int int0 = 22;
      CoreFunction coreFunction0 = new CoreFunction(1285, (Expression[]) null);
      coreFunction0.computeContextDependent();
      CoreFunction coreFunction1 = new CoreFunction(1285, (Expression[]) null);
      Expression[] expressionArray0 = new Expression[8];
      Byte byte0 = new Byte((byte) (-21));
      Constant constant1 = new Constant(byte0);
      expressionArray0[0] = (Expression) constant1;
      expressionArray0[1] = (Expression) coreFunction1;
      ExtensionFunction extensionFunction0 = new ExtensionFunction((QName) null, expressionArray0);
      expressionArray0[2] = (Expression) extensionFunction0;
      expressionArray0[3] = (Expression) coreFunction0;
      expressionArray0[4] = (Expression) constant0;
      expressionArray0[5] = (Expression) coreFunction0;
      expressionArray0[6] = (Expression) constant0;
      expressionArray0[7] = (Expression) coreFunction0;
      CoreFunction coreFunction2 = new CoreFunction(22, expressionArray0);
      // Undeclared exception!
      coreFunction2.toString();
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Constant constant0 = new Constant(")W3");
      Expression[] expressionArray0 = new Expression[1];
      expressionArray0[0] = (Expression) constant0;
      EvalContext evalContext0 = null;
      constant0.iterate((EvalContext) null);
      CoreFunction coreFunction0 = new CoreFunction(24, expressionArray0);
      coreFunction0.functionBoolean((EvalContext) null);
      // Undeclared exception!
//      try { 
        coreFunction0.compute((EvalContext) null);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // Invalid argument type for 'sum': java.lang.String
//         //
//         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      EvalContext evalContext0 = null;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      CoreFunction coreFunction0 = new CoreFunction(21, (Expression[]) null);
      CoreFunction coreFunction1 = new CoreFunction(21, (Expression[]) null);
      coreFunction1.computeValue((EvalContext) null);
      // Undeclared exception!
//      try { 
        coreFunction1.functionString((EvalContext) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Constant constant0 = new Constant(")W+3");
      Expression[] expressionArray0 = new Expression[7];
      CoreFunction coreFunction0 = new CoreFunction(0, expressionArray0);
      coreFunction0.getArg3();
      expressionArray0[0] = null;
      expressionArray0[1] = (Expression) constant0;
      expressionArray0[2] = (Expression) constant0;
      expressionArray0[3] = (Expression) constant0;
      expressionArray0[4] = (Expression) constant0;
      expressionArray0[5] = (Expression) constant0;
      expressionArray0[6] = (Expression) constant0;
      CoreFunction coreFunction1 = new CoreFunction(0, expressionArray0);
      CoreFunction coreFunction2 = new CoreFunction(0, expressionArray0);
      CoreFunction coreFunction3 = new CoreFunction(30, expressionArray0);
      // Undeclared exception!
//      try { 
        coreFunction3.compute((EvalContext) null);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // Incorrect number of arguments: format-number(null, ')W+3', ')W+3', ')W+3', ')W+3', ')W+3', ')W+3')
//         //
//         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      Constant constant0 = new Constant("MJ8AhG");
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual(constant0, constant0);
      CoreOperationDivide coreOperationDivide0 = new CoreOperationDivide(coreOperationLessThanOrEqual0, coreOperationLessThanOrEqual0);
      coreOperationDivide0.args = expressionArray0;
      expressionArray0[0] = (Expression) coreOperationDivide0;
      CoreFunction coreFunction0 = new CoreFunction(1, expressionArray0);
      EvalContext evalContext0 = null;
      // Undeclared exception!
//      try { 
        coreFunction0.functionRound((EvalContext) null);
//        fail("Expecting exception: StackOverflowError");
      
//      } catch(StackOverflowError e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Constant constant0 = new Constant("contains");
      EvalContext evalContext0 = null;
      constant0.iterate((EvalContext) null);
      Expression[] expressionArray0 = new Expression[6];
      expressionArray0[0] = (Expression) constant0;
      NameAttributeTest nameAttributeTest0 = new NameAttributeTest(constant0, expressionArray0[0]);
      expressionArray0[1] = (Expression) nameAttributeTest0;
      expressionArray0[2] = (Expression) constant0;
      ExpressionPath expressionPath0 = new ExpressionPath(expressionArray0[0], expressionArray0, (Step[]) null);
      expressionArray0[3] = (Expression) expressionPath0;
      expressionArray0[4] = (Expression) constant0;
      expressionArray0[5] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction(0, expressionArray0);
      CoreFunction coreFunction1 = new CoreFunction(30, expressionArray0);
      coreFunction1.isContextDependent();
      // Undeclared exception!
      coreFunction1.functionCeiling((EvalContext) null);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Constant constant0 = new Constant("4ylbK&F'VE0");
      constant0.toString();
      Expression[] expressionArray0 = new Expression[2];
      expressionArray0[0] = (Expression) constant0;
      expressionArray0[1] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction((-366), expressionArray0);
      coreFunction0.iterate((EvalContext) null);
      coreFunction0.functionStartsWith((EvalContext) null);
      coreFunction0.functionSubstringBefore((EvalContext) null);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)40;
      byteArray0[6] = (byte)40;
      Expression[] expressionArray0 = new Expression[2];
      Constant constant0 = new Constant("bR;x");
      CoreOperationNegate coreOperationNegate0 = new CoreOperationNegate(constant0);
      expressionArray0[0] = (Expression) coreOperationNegate0;
      QName qName0 = new QName("4ylbK&F'VE04ylbK&F'VE0", "4ylbK&F'VE04ylbK&F'VE0");
      ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, expressionArray0);
      expressionArray0[1] = (Expression) extensionFunction0;
      extensionFunction0.isContextDependent();
      CoreFunction coreFunction0 = new CoreFunction((-22), expressionArray0);
      coreFunction0.computeContextDependent();
      CoreFunction coreFunction1 = new CoreFunction(30, expressionArray0);
      CoreFunction coreFunction2 = new CoreFunction((-1618), expressionArray0);
      // Undeclared exception!
      coreFunction2.functionKey((EvalContext) null);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(23, (Expression[]) null);
      coreFunction0.computeContextDependent();
      coreFunction0.functionFalse((EvalContext) null);
      // Undeclared exception!
//      try { 
        coreFunction0.computeValue((EvalContext) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "T)tW+3");
      Constant constant0 = new Constant("T)tW+3");
      EvalContext evalContext0 = null;
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(122880);
      constant0.iterate((EvalContext) null);
      Expression[] expressionArray0 = new Expression[8];
      expressionArray0[0] = (Expression) constant0;
      expressionArray0[1] = (Expression) constant0;
      expressionArray0[2] = (Expression) constant0;
      expressionArray0[3] = (Expression) constant0;
      expressionArray0[4] = (Expression) constant0;
      expressionArray0[5] = (Expression) constant0;
      CoreOperationOr coreOperationOr0 = new CoreOperationOr(expressionArray0);
      expressionArray0[6] = (Expression) coreOperationOr0;
      CoreOperationMod coreOperationMod0 = new CoreOperationMod(constant0, constant0);
      expressionArray0[7] = (Expression) coreOperationMod0;
      CoreFunction coreFunction0 = new CoreFunction((-2668), expressionArray0);
      // Undeclared exception!
//      try { 
        coreFunction0.functionConcat((EvalContext) null);
//        fail("Expecting exception: ArithmeticException");
      
//      } catch(ArithmeticException e) {
//         //
//         // / by zero
//         //
//         verifyException("org.apache.commons.jxpath.ri.compiler.CoreOperationMod", e);
//      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Constant constant0 = new Constant(")W+3");
      EvalContext evalContext0 = null;
      constant0.iterate((EvalContext) null);
      Expression[] expressionArray0 = new Expression[8];
      expressionArray0[0] = (Expression) constant0;
      expressionArray0[1] = (Expression) constant0;
      expressionArray0[2] = (Expression) constant0;
      expressionArray0[3] = (Expression) constant0;
      expressionArray0[4] = (Expression) constant0;
      expressionArray0[5] = (Expression) constant0;
      CoreOperationNegate coreOperationNegate0 = new CoreOperationNegate(expressionArray0[0]);
      CoreOperationDivide coreOperationDivide0 = new CoreOperationDivide(expressionArray0[4], coreOperationNegate0);
      expressionArray0[6] = (Expression) coreOperationDivide0;
      coreOperationNegate0.toString();
      expressionArray0[7] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction(30, expressionArray0);
      coreFunction0.isContextDependent();
      // Undeclared exception!
//      try { 
        coreFunction0.functionCeiling((EvalContext) null);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // Incorrect number of arguments: format-number(')W+3', ')W+3', ')W+3', ')W+3', ')W+3', ')W+3', org.apache.commons.jxpath.ri.compiler.Constant@0000000001 div org.apache.commons.jxpath.ri.compiler.CoreOperationNegate@0000000002, ')W+3')
//         //
//         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Constant constant0 = new Constant("T)tW+3");
      constant0.toString();
      CoreFunction coreFunction0 = new CoreFunction(1, (Expression[]) null);
      // Undeclared exception!
//      try { 
        coreFunction0.computeValue((EvalContext) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[2];
      Float float0 = new Float(0.0F);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-116);
      byteArray0[1] = (byte)31;
      byteArray0[2] = (byte) (-40);
      byteArray0[3] = (byte) (-64);
      byteArray0[4] = (byte) (-68);
      byteArray0[5] = (byte) (-60);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Constant constant0 = new Constant(float0);
      CoreOperationMod coreOperationMod0 = new CoreOperationMod(constant0, constant0);
      expressionArray0[0] = (Expression) coreOperationMod0;
      Step[] stepArray0 = new Step[3];
      NodeTest nodeTest0 = null;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Step step0 = new Step((-1598), (NodeTest) null, expressionArray0);
      stepArray0[0] = step0;
      QName qName0 = new QName("{.}t8i2e7>", "{.}t8i2e7>");
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
      Step step1 = new Step((-1598), nodeNameTest0, expressionArray0);
      stepArray0[1] = step1;
      Step step2 = new Step(3, (NodeTest) null, expressionArray0);
      stepArray0[2] = step2;
      ExpressionPath expressionPath0 = new ExpressionPath(expressionArray0[0], expressionArray0, stepArray0);
      expressionArray0[1] = (Expression) expressionPath0;
      CoreFunction coreFunction0 = new CoreFunction(24, expressionArray0);
      EvalContext evalContext0 = null;
      // Undeclared exception!
//      try { 
        coreFunction0.functionSubstring((EvalContext) null);
//        fail("Expecting exception: ArithmeticException");
      
//      } catch(ArithmeticException e) {
//         //
//         // / by zero
//         //
//         verifyException("org.apache.commons.jxpath.ri.compiler.CoreOperationMod", e);
//      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[2];
      Constant constant0 = new Constant("bR;x");
      CoreOperationNegate coreOperationNegate0 = new CoreOperationNegate(constant0);
      expressionArray0[0] = (Expression) coreOperationNegate0;
      QName qName0 = new QName("4ylbK&F'VE0ylbK&F'VE0", "4ylbK&F'VE0ylbK&F'VE0");
      ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, expressionArray0);
      expressionArray0[1] = (Expression) extensionFunction0;
      FileSystemHandling.shouldAllThrowIOExceptions();
      CoreFunction coreFunction0 = new CoreFunction((-22), expressionArray0);
      coreFunction0.computeContextDependent();
      CoreFunction coreFunction1 = new CoreFunction(30, expressionArray0);
      EvalContext evalContext0 = null;
      CoreFunction coreFunction2 = new CoreFunction((-1), expressionArray0);
      // Undeclared exception!
      coreFunction2.functionSubstringAfter((EvalContext) null);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Constant constant0 = new Constant("v3Mn");
      Expression[] expressionArray0 = new Expression[1];
      expressionArray0[0] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction(25, expressionArray0);
      boolean boolean0 = coreFunction0.computeContextDependent();
      assertFalse(boolean0);
      assertEquals(25, coreFunction0.getFunctionCode());
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(28, (Expression[]) null);
      coreFunction0.isContextDependent();
      BasicNodeSet basicNodeSet0 = new BasicNodeSet();
      NodeSetContext nodeSetContext0 = new NodeSetContext((EvalContext) null, basicNodeSet0);
      InitialContext initialContext0 = null;
//      try {
        initialContext0 = new InitialContext(nodeSetContext0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.jxpath.ri.axes.InitialContext", e);
//      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[2];
      QName qName0 = new QName("[0''6].9d`Vm?c ");
      ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, expressionArray0);
      expressionArray0[0] = (Expression) extensionFunction0;
      CoreOperationLessThan coreOperationLessThan0 = new CoreOperationLessThan(extensionFunction0, expressionArray0[0]);
      expressionArray0[1] = (Expression) coreOperationLessThan0;
      CoreFunction coreFunction0 = new CoreFunction((-1587), expressionArray0);
      EvalContext evalContext0 = null;
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, "J,Zur1 q");
      AncestorContext ancestorContext0 = new AncestorContext((EvalContext) null, false, nodeNameTest0);
      // Undeclared exception!
//      try { 
        coreFunction0.functionNumber(ancestorContext0);
//        fail("Expecting exception: StackOverflowError");
      
//      } catch(StackOverflowError e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Constant constant0 = new Constant("");
      CoreOperationNegate coreOperationNegate0 = new CoreOperationNegate(constant0);
      QName qName0 = new QName("rd>", "4ylbK&F'VE04ylbK&F'VE0");
      ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, (Expression[]) null);
      extensionFunction0.isContextDependent();
      CoreFunction coreFunction0 = new CoreFunction(3, (Expression[]) null);
      coreFunction0.computeContextDependent();
      CoreFunction coreFunction1 = new CoreFunction(1877, (Expression[]) null);
      EvalContext evalContext0 = null;
      CoreFunction coreFunction2 = new CoreFunction(30, (Expression[]) null);
      // Undeclared exception!
//      try { 
        coreFunction0.computeValue((EvalContext) null);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // Incorrect number of arguments: count()
//         //
//         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Constant constant0 = new Constant(")W+3");
      Expression[] expressionArray0 = new Expression[1];
      expressionArray0[0] = (Expression) constant0;
      constant0.iterate((EvalContext) null);
      CoreFunction coreFunction0 = new CoreFunction(24, expressionArray0);
      // Undeclared exception!
//      try { 
        coreFunction0.computeValue((EvalContext) null);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // Invalid argument type for 'sum': java.lang.String
//         //
//         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      EvalContext evalContext0 = null;
      Expression[] expressionArray0 = new Expression[2];
      CoreFunction coreFunction0 = new CoreFunction(5, expressionArray0);
      // Undeclared exception!
//      try { 
        coreFunction0.computeValue((EvalContext) null);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // Incorrect number of arguments: local-name(null, null)
//         //
//         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(8, (Expression[]) null);
      boolean boolean0 = coreFunction0.computeContextDependent();
      assertTrue(boolean0);
      
      CoreFunction coreFunction1 = new CoreFunction(8, (Expression[]) null);
      CoreFunction coreFunction2 = new CoreFunction(8, (Expression[]) null);
      String string0 = coreFunction0.getFunctionName();
      assertEquals("string", string0);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "contains");
      CoreFunction coreFunction0 = new CoreFunction(15, (Expression[]) null);
      coreFunction0.computeContextDependent();
      // Undeclared exception!
//      try { 
        coreFunction0.computeValue((EvalContext) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Constant constant0 = new Constant("T)tW+3");
      Expression[] expressionArray0 = new Expression[1];
      expressionArray0[0] = (Expression) constant0;
      constant0.iterate((EvalContext) null);
      CoreFunction coreFunction0 = new CoreFunction(11, expressionArray0);
      boolean boolean0 = coreFunction0.computeContextDependent();
      assertFalse(boolean0);
      
      CoreFunction coreFunction1 = new CoreFunction(22, expressionArray0);
      CoreFunction coreFunction2 = new CoreFunction(22, expressionArray0);
      assertEquals(22, coreFunction2.getFunctionCode());
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)40;
      byteArray0[1] = (byte)40;
      Expression[] expressionArray0 = new Expression[2];
      Constant constant0 = new Constant("bR;x");
      CoreOperationNegate coreOperationNegate0 = new CoreOperationNegate(constant0);
      expressionArray0[0] = (Expression) coreOperationNegate0;
      QName qName0 = new QName("4ylbK&F'VE04ylbK&F'VE0", "4ylbK&F'VE04ylbK&F'VE0");
      ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, expressionArray0);
      expressionArray0[1] = (Expression) extensionFunction0;
      extensionFunction0.isContextDependent();
      CoreFunction coreFunction0 = new CoreFunction((-22), expressionArray0);
      coreFunction0.computeContextDependent();
      CoreFunction coreFunction1 = new CoreFunction(30, expressionArray0);
      EvalContext evalContext0 = null;
      CoreFunction coreFunction2 = new CoreFunction(30, expressionArray0);
      EvalContext evalContext1 = null;
      // Undeclared exception!
      coreFunction2.computeValue((EvalContext) null);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Constant constant0 = new Constant("T)tW+3");
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)40;
      byteArray0[1] = (byte)19;
      byteArray0[2] = (byte)19;
      byteArray0[4] = (byte) (-1);
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(22, expressionArray0);
      boolean boolean0 = coreFunction0.computeContextDependent();
      assertTrue(boolean0);
      
      CoreFunction coreFunction1 = new CoreFunction((byte)19, expressionArray0);
      CoreFunction coreFunction2 = new CoreFunction((byte)19, expressionArray0);
      assertEquals(19, coreFunction2.getFunctionCode());
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(22, (Expression[]) null);
      coreFunction0.computeContextDependent();
      coreFunction0.toString();
      // Undeclared exception!
//      try { 
        coreFunction0.computeValue((EvalContext) null);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // Incorrect number of arguments: lang()
//         //
//         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      EvalContext evalContext0 = null;
      CoreFunction coreFunction0 = new CoreFunction(20, (Expression[]) null);
      coreFunction0.isContextDependent();
      CoreFunction coreFunction1 = new CoreFunction(803, (Expression[]) null);
      // Undeclared exception!
//      try { 
        coreFunction1.functionTranslate((EvalContext) null);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // Incorrect number of arguments: unknownFunction803()()
//         //
//         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      Constant constant0 = new Constant("T)tW+3");
      Expression[] expressionArray0 = new Expression[1];
      expressionArray0[0] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction(30, expressionArray0);
      coreFunction0.computeContextDependent();
      CoreFunction coreFunction1 = new CoreFunction(30, expressionArray0);
      EvalContext evalContext0 = null;
      // Undeclared exception!
//      try { 
        coreFunction0.computeValue((EvalContext) null);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // Incorrect number of arguments: format-number('T)tW+3')
//         //
//         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(22, (Expression[]) null);
      CoreFunction coreFunction1 = new CoreFunction(22, (Expression[]) null);
      boolean boolean0 = coreFunction1.isContextDependent();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(13, (Expression[]) null);
      coreFunction0.computeContextDependent();
      // Undeclared exception!
//      try { 
        coreFunction0.computeValue((EvalContext) null);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // Incorrect number of arguments: substring-after()
//         //
//         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(7, (Expression[]) null);
      coreFunction0.isContextDependent();
      CoreFunction coreFunction1 = new CoreFunction(7, (Expression[]) null);
      EvalContext evalContext0 = null;
      // Undeclared exception!
//      try { 
        coreFunction1.computeValue((EvalContext) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[9];
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd(expressionArray0);
      expressionArray0[0] = (Expression) coreOperationAdd0;
      CoreOperationNotEqual coreOperationNotEqual0 = new CoreOperationNotEqual(expressionArray0[0], coreOperationAdd0);
      expressionArray0[1] = (Expression) coreOperationNotEqual0;
      CoreOperationMultiply coreOperationMultiply0 = new CoreOperationMultiply(expressionArray0[0], coreOperationNotEqual0);
      expressionArray0[2] = (Expression) coreOperationMultiply0;
      CoreOperationDivide coreOperationDivide0 = new CoreOperationDivide(coreOperationMultiply0, expressionArray0[0]);
      expressionArray0[3] = (Expression) coreOperationDivide0;
      CoreOperationMod coreOperationMod0 = new CoreOperationMod(coreOperationMultiply0, coreOperationAdd0);
      expressionArray0[4] = (Expression) coreOperationMod0;
      Step[] stepArray0 = new Step[1];
      QName qName0 = new QName("rrVi(;!=(Pkp@:Pw", "rrVi(;!=(Pkp@:Pw");
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
      Step step0 = new Step(2560, nodeNameTest0, expressionArray0);
      stepArray0[0] = step0;
      ExpressionPath expressionPath0 = new ExpressionPath(expressionArray0[1], expressionArray0, stepArray0);
      expressionArray0[5] = (Expression) expressionPath0;
      CoreOperationGreaterThan coreOperationGreaterThan0 = new CoreOperationGreaterThan(coreOperationNotEqual0, coreOperationMultiply0);
      expressionArray0[6] = (Expression) coreOperationGreaterThan0;
      CoreOperationSubtract coreOperationSubtract0 = new CoreOperationSubtract(expressionArray0[6], expressionArray0[3]);
      expressionArray0[7] = (Expression) coreOperationSubtract0;
      CoreOperationNotEqual coreOperationNotEqual1 = new CoreOperationNotEqual(expressionArray0[0], expressionArray0[6]);
      expressionArray0[8] = (Expression) coreOperationNotEqual1;
      CoreFunction coreFunction0 = new CoreFunction(2560, expressionArray0);
      Expression expression0 = coreFunction0.getArg3();
      PredicateContext predicateContext0 = new PredicateContext((EvalContext) null, expression0);
      // Undeclared exception!
      coreFunction0.functionTranslate(predicateContext0);
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[4];
      CoreOperationOr coreOperationOr0 = new CoreOperationOr(expressionArray0);
      expressionArray0[0] = (Expression) coreOperationOr0;
      QName qName0 = new QName("contains", "[m)_");
      VariableReference variableReference0 = new VariableReference(qName0);
      expressionArray0[1] = (Expression) variableReference0;
      CoreOperationAnd coreOperationAnd0 = new CoreOperationAnd(expressionArray0);
      expressionArray0[2] = (Expression) coreOperationAnd0;
      ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, expressionArray0);
      expressionArray0[3] = (Expression) extensionFunction0;
      CoreFunction coreFunction0 = new CoreFunction(20, expressionArray0);
      // Undeclared exception!
      coreFunction0.computeValue((EvalContext) null);
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(19, (Expression[]) null);
      coreFunction0.computeContextDependent();
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(19);
      AttributeContext attributeContext0 = new AttributeContext((EvalContext) null, nodeTypeTest0);
      coreFunction0.functionPosition(attributeContext0);
      // Undeclared exception!
//      try { 
        coreFunction0.computeValue((EvalContext) null);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // Incorrect number of arguments: not()
//         //
//         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(15, (Expression[]) null);
      // Undeclared exception!
//      try { 
        coreFunction0.computeValue((EvalContext) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      Constant constant0 = new Constant("T)tW+3");
      Expression[] expressionArray0 = new Expression[1];
      expressionArray0[0] = (Expression) constant0;
      constant0.iterate((EvalContext) null);
      CoreFunction coreFunction0 = new CoreFunction(16, expressionArray0);
      coreFunction0.computeContextDependent();
      coreFunction0.functionCount((EvalContext) null);
      coreFunction0.compute((EvalContext) null);
      CoreFunction coreFunction1 = new CoreFunction(16, expressionArray0);
      coreFunction1.functionNamespaceURI((EvalContext) null);
      // Undeclared exception!
//      try { 
        coreFunction0.functionLast((EvalContext) null);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // Incorrect number of arguments: normalize-space('T)tW+3')
//         //
//         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(19, (Expression[]) null);
      coreFunction0.computeContextDependent();
      // Undeclared exception!
//      try { 
        coreFunction0.computeValue((EvalContext) null);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // Incorrect number of arguments: not()
//         //
//         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(1324, (Expression[]) null);
      coreFunction0.computeContextDependent();
      CoreFunction coreFunction1 = new CoreFunction(1324, (Expression[]) null);
      EvalContext evalContext0 = null;
      Expression[] expressionArray0 = new Expression[9];
      expressionArray0[0] = (Expression) coreFunction1;
      expressionArray0[1] = (Expression) coreFunction1;
      expressionArray0[2] = (Expression) coreFunction1;
      expressionArray0[3] = (Expression) coreFunction1;
      expressionArray0[4] = (Expression) coreFunction0;
      expressionArray0[5] = (Expression) coreFunction0;
      expressionArray0[6] = (Expression) coreFunction1;
      expressionArray0[7] = (Expression) coreFunction1;
      expressionArray0[8] = (Expression) coreFunction1;
      CoreFunction coreFunction2 = new CoreFunction(29, expressionArray0);
      // Undeclared exception!
//      try { 
        coreFunction2.computeValue((EvalContext) null);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // Incorrect number of arguments: key(unknownFunction1324()(), unknownFunction1324()(), unknownFunction1324()(), unknownFunction1324()(), unknownFunction1324()(), unknownFunction1324()(), unknownFunction1324()(), unknownFunction1324()(), unknownFunction1324()())
//         //
//         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      Constant constant0 = new Constant("T)tW+3");
      Expression[] expressionArray0 = new Expression[1];
      expressionArray0[0] = (Expression) constant0;
      constant0.iterate((EvalContext) null);
      CoreFunction coreFunction0 = new CoreFunction(16, expressionArray0);
      Object object0 = coreFunction0.functionCount((EvalContext) null);
      assertEquals(1.0, object0);
      
      Object object1 = coreFunction0.compute((EvalContext) null);
      assertEquals("T)tW+3", object1);
      assertEquals(16, coreFunction0.getFunctionCode());
      assertNotNull(object1);
      
      CoreFunction coreFunction1 = new CoreFunction(16, expressionArray0);
      Object object2 = coreFunction1.functionNamespaceURI((EvalContext) null);
      assertFalse(object2.equals((Object)object1));
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      EvalContext evalContext0 = null;
      CoreFunction coreFunction0 = new CoreFunction(23, (Expression[]) null);
      // Undeclared exception!
//      try { 
        coreFunction0.computeValue((EvalContext) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)23;
      byteArray0[1] = (byte)112;
      byteArray0[2] = (byte)96;
      byteArray0[3] = (byte) (-36);
      byteArray0[4] = (byte)15;
      byteArray0[5] = (byte)86;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      CoreFunction coreFunction0 = new CoreFunction(27, (Expression[]) null);
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest((byte)96);
      ChildContext childContext0 = new ChildContext((EvalContext) null, nodeTypeTest0, true, false);
      DescendantContext descendantContext0 = new DescendantContext(childContext0, false, nodeTypeTest0);
      SelfContext selfContext0 = new SelfContext(descendantContext0, nodeTypeTest0);
      // Undeclared exception!
//      try { 
        coreFunction0.functionLast(selfContext0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.jxpath.ri.axes.ChildContext", e);
//      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      Constant constant0 = new Constant("-]@I");
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(23);
      constant0.iterate((EvalContext) null);
      CoreFunction coreFunction0 = new CoreFunction(23, (Expression[]) null);
      // Undeclared exception!
//      try { 
        coreFunction0.functionTranslate((EvalContext) null);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // Incorrect number of arguments: number()
//         //
//         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[3];
      QName qName0 = new QName("T)t<W+3", "T)t<W+3");
      ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, expressionArray0);
      CoreOperationNotEqual coreOperationNotEqual0 = new CoreOperationNotEqual(extensionFunction0, extensionFunction0);
      expressionArray0[0] = (Expression) coreOperationNotEqual0;
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd(expressionArray0);
      expressionArray0[1] = (Expression) coreOperationAdd0;
      Step[] stepArray0 = new Step[3];
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
      Step step0 = new Step(6, nodeNameTest0, expressionArray0);
      stepArray0[0] = step0;
      Step step1 = new Step(544, nodeNameTest0, expressionArray0);
      stepArray0[1] = step1;
      Step step2 = new Step(544, nodeNameTest0, expressionArray0);
      stepArray0[2] = step2;
      ExpressionPath expressionPath0 = new ExpressionPath(extensionFunction0, expressionArray0, stepArray0);
      expressionArray0[2] = (Expression) expressionPath0;
      CoreFunction coreFunction0 = new CoreFunction(425, expressionArray0);
      // Undeclared exception!
      coreFunction0.functionString((EvalContext) null);
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)40;
      byteArray0[1] = (byte)40;
      byteArray0[2] = (byte)72;
      byteArray0[3] = (byte)32;
      byteArray0[4] = (byte)32;
      byteArray0[5] = (byte)19;
      byteArray0[6] = (byte) (-1);
      byteArray0[7] = (byte) (-75);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(24, expressionArray0);
      boolean boolean0 = coreFunction0.computeContextDependent();
      assertFalse(boolean0);
      
      CoreFunction coreFunction1 = new CoreFunction(1048576, expressionArray0);
      CoreFunction coreFunction2 = new CoreFunction(40, expressionArray0);
      assertEquals(40, coreFunction2.getFunctionCode());
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      Constant constant0 = new Constant("");
      constant0.toString();
      Expression[] expressionArray0 = new Expression[2];
      expressionArray0[0] = (Expression) constant0;
      expressionArray0[1] = (Expression) constant0;
      constant0.toString();
      CoreFunction coreFunction0 = new CoreFunction((-3836), expressionArray0);
      coreFunction0.functionSubstringAfter((EvalContext) null);
      coreFunction0.functionConcat((EvalContext) null);
      coreFunction0.functionSubstring((EvalContext) null);
      boolean boolean0 = coreFunction0.isContextDependent();
      assertFalse(boolean0);
      assertEquals((-3836), coreFunction0.getFunctionCode());
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      CoreFunction coreFunction0 = new CoreFunction(19, (Expression[]) null);
      EvalContext evalContext0 = null;
      // Undeclared exception!
//      try { 
        coreFunction0.computeValue((EvalContext) null);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // Incorrect number of arguments: not()
//         //
//         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      Constant constant0 = new Constant("T)tW+3");
      Expression[] expressionArray0 = new Expression[1];
      expressionArray0[0] = (Expression) constant0;
      constant0.iterate((EvalContext) null);
      CoreFunction coreFunction0 = new CoreFunction(16, expressionArray0);
      coreFunction0.functionCount((EvalContext) null);
      coreFunction0.computeValue((EvalContext) null);
      // Undeclared exception!
//      try { 
        coreFunction0.functionKey((EvalContext) null);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // Incorrect number of arguments: normalize-space('T)tW+3')
//         //
//         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      EvalContext evalContext0 = null;
      CoreFunction coreFunction0 = new CoreFunction(17, expressionArray0);
      coreFunction0.isContextDependent();
      JXPathContext.newContext((Object) null);
      PredicateContext predicateContext0 = new PredicateContext((EvalContext) null, coreFunction0);
      // Undeclared exception!
//      try { 
        predicateContext0.getCurrentNodePointer();
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.jxpath.ri.axes.PredicateContext", e);
//      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[2];
      NameAttributeTest nameAttributeTest0 = new NameAttributeTest((Expression) null, (Expression) null);
      CoreOperationNegate coreOperationNegate0 = new CoreOperationNegate(nameAttributeTest0);
      expressionArray0[0] = (Expression) coreOperationNegate0;
      CoreOperationDivide coreOperationDivide0 = new CoreOperationDivide(expressionArray0[0], (Expression) null);
      expressionArray0[1] = (Expression) coreOperationDivide0;
      CoreFunction coreFunction0 = new CoreFunction(6, expressionArray0);
      EvalContext evalContext0 = null;
      // Undeclared exception!
//      try { 
        coreFunction0.computeValue((EvalContext) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.evosuite.runtime.System", e);
//      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      Constant constant0 = new Constant("T)tW+3");
      Expression[] expressionArray0 = new Expression[1];
      expressionArray0[0] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction(528, expressionArray0);
      coreFunction0.functionFloor((EvalContext) null);
      Object object0 = coreFunction0.functionCount((EvalContext) null);
      assertEquals(1.0, object0);
      assertEquals(528, coreFunction0.getFunctionCode());
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      EvalContext evalContext0 = null;
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, ",r<");
      CoreFunction coreFunction0 = new CoreFunction(14, (Expression[]) null);
      // Undeclared exception!
//      try { 
        coreFunction0.functionSum((EvalContext) null);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // Incorrect number of arguments: substring()
//         //
//         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction((-1056), (Expression[]) null);
      CoreFunction coreFunction1 = new CoreFunction(4, (Expression[]) null);
      coreFunction1.computeContextDependent();
      EvalContext evalContext0 = null;
      CoreFunction coreFunction2 = new CoreFunction((-1759), (Expression[]) null);
      CoreFunction coreFunction3 = new CoreFunction(4, (Expression[]) null);
      // Undeclared exception!
//      try { 
        coreFunction3.computeValue((EvalContext) null);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // Incorrect number of arguments: id()
//         //
//         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[3];
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd(expressionArray0);
      CoreOperationNotEqual coreOperationNotEqual0 = new CoreOperationNotEqual(coreOperationAdd0, coreOperationAdd0);
      expressionArray0[0] = (Expression) coreOperationNotEqual0;
      Step[] stepArray0 = new Step[6];
      QName qName0 = new QName("c,", "c,");
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
      Step step0 = new Step(482, nodeNameTest0, expressionArray0);
      stepArray0[0] = step0;
      Step step1 = new Step(1, nodeNameTest0, expressionArray0);
      stepArray0[1] = step1;
      Expression[] expressionArray1 = new Expression[6];
      expressionArray1[0] = (Expression) coreOperationNotEqual0;
      expressionArray1[1] = (Expression) coreOperationNotEqual0;
      expressionArray1[2] = (Expression) coreOperationAdd0;
      expressionArray1[3] = (Expression) coreOperationNotEqual0;
      expressionArray1[4] = (Expression) coreOperationAdd0;
      expressionArray1[5] = (Expression) coreOperationNotEqual0;
      Step step2 = new Step(482, nodeNameTest0, expressionArray1);
      stepArray0[2] = step2;
      NodeNameTest nodeNameTest1 = new NodeNameTest(qName0, "Expression context [");
      Step step3 = new Step(482, nodeNameTest1, expressionArray1);
      stepArray0[3] = step3;
      Step step4 = new Step((-188), nodeNameTest1, expressionArray1);
      stepArray0[4] = step4;
      Step step5 = new Step((-64), nodeNameTest1, expressionArray0);
      stepArray0[5] = step5;
      LocationPath locationPath0 = new LocationPath(false, stepArray0);
      expressionArray0[1] = (Expression) locationPath0;
      CoreOperationMultiply coreOperationMultiply0 = new CoreOperationMultiply(coreOperationNotEqual0, expressionArray1[1]);
      ExpressionPath expressionPath0 = new ExpressionPath(coreOperationMultiply0, expressionArray0, stepArray0);
      expressionArray0[2] = (Expression) expressionPath0;
      CoreFunction coreFunction0 = new CoreFunction(482, expressionArray0);
      NamespaceContext namespaceContext0 = new NamespaceContext((EvalContext) null, nodeNameTest1);
      EvalContext[] evalContextArray0 = new EvalContext[9];
      JXPathContext jXPathContext0 = JXPathContext.newContext((Object) step1);
      NamespaceResolver namespaceResolver0 = new NamespaceResolver((NamespaceResolver) null);
      namespaceResolver0.getNamespaceContextPointer();
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = new JXPathContextReferenceImpl(jXPathContext0, step4, (Pointer) null);
      EvalContext evalContext0 = jXPathContextReferenceImpl0.getAbsoluteRootContext();
      evalContextArray0[0] = evalContext0;
      evalContextArray0[1] = (EvalContext) namespaceContext0;
      evalContextArray0[2] = (EvalContext) namespaceContext0;
      evalContextArray0[3] = (EvalContext) namespaceContext0;
      evalContextArray0[4] = (EvalContext) namespaceContext0;
      evalContextArray0[5] = (EvalContext) namespaceContext0;
      evalContextArray0[6] = null;
      evalContextArray0[7] = (EvalContext) namespaceContext0;
      evalContextArray0[8] = (EvalContext) namespaceContext0;
      UnionContext unionContext0 = new UnionContext(namespaceContext0, evalContextArray0);
      // Undeclared exception!
      coreFunction0.functionCeiling(unionContext0);
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[6];
      CoreOperationNotEqual coreOperationNotEqual0 = new CoreOperationNotEqual((Expression) null, (Expression) null);
      CoreFunction coreFunction0 = new CoreFunction(11, expressionArray0);
      EvalContext evalContext0 = null;
      // Undeclared exception!
//      try { 
        coreFunction0.computeValue((EvalContext) null);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // Incorrect number of arguments: contains(null, null, null, null, null, null)
//         //
//         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      Constant constant0 = new Constant("T)t<W+3");
      Expression[] expressionArray0 = new Expression[2];
      expressionArray0[0] = (Expression) constant0;
      expressionArray0[1] = (Expression) constant0;
      constant0.toString();
      CoreFunction coreFunction0 = new CoreFunction((-1720), expressionArray0);
      coreFunction0.computeValue((EvalContext) null);
      CoreFunction coreFunction1 = new CoreFunction(9, expressionArray0);
      coreFunction1.computeValue((EvalContext) null);
      // Undeclared exception!
//      try { 
        coreFunction0.functionKey((EvalContext) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      EvalContext evalContext0 = null;
      Expression[] expressionArray0 = new Expression[7];
      Step[] stepArray0 = new Step[2];
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest((-1537));
      Step step0 = new Step(7, nodeTypeTest0, expressionArray0);
      stepArray0[0] = step0;
      Step step1 = new Step(20, nodeTypeTest0, expressionArray0);
      stepArray0[1] = step1;
      LocationPath locationPath0 = new LocationPath(true, stepArray0);
      expressionArray0[0] = (Expression) locationPath0;
      CoreFunction coreFunction0 = new CoreFunction(20, expressionArray0);
      Expression expression0 = coreFunction0.getArg3();
      expressionArray0[1] = null;
      CoreOperationMultiply coreOperationMultiply0 = new CoreOperationMultiply(expressionArray0[0], locationPath0);
      expressionArray0[2] = (Expression) coreOperationMultiply0;
      CoreFunction coreFunction1 = new CoreFunction(13, expressionArray0);
      coreFunction1.getArg2();
      QName qName0 = new QName("T)tW+3T)tW+3");
      ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, expressionArray0);
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual((Expression) null, extensionFunction0);
      expressionArray0[3] = (Expression) coreOperationLessThanOrEqual0;
      VariableReference variableReference0 = new VariableReference(qName0);
      expressionArray0[4] = (Expression) variableReference0;
      CoreOperationAnd coreOperationAnd0 = new CoreOperationAnd(expressionArray0);
      expressionArray0[5] = (Expression) coreOperationAnd0;
      CoreOperationDivide coreOperationDivide0 = new CoreOperationDivide((Expression) null, expression0);
      CoreOperationGreaterThanOrEqual coreOperationGreaterThanOrEqual0 = new CoreOperationGreaterThanOrEqual(coreOperationDivide0, coreFunction0);
      expressionArray0[6] = (Expression) coreOperationGreaterThanOrEqual0;
      CoreFunction coreFunction2 = new CoreFunction(7, expressionArray0);
      // Undeclared exception!
//      try { 
        coreFunction0.functionFloor((EvalContext) null);
//        fail("Expecting exception: StackOverflowError");
      
//      } catch(StackOverflowError e) {
//      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Constant constant0 = new Constant("translate");
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual(constant0, constant0);
      CoreOperationLessThan coreOperationLessThan0 = new CoreOperationLessThan(constant0, coreOperationLessThanOrEqual0);
      CoreOperationGreaterThan coreOperationGreaterThan0 = new CoreOperationGreaterThan(coreOperationLessThan0, coreOperationLessThan0);
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual1 = new CoreOperationLessThanOrEqual(coreOperationLessThan0, constant0);
      coreOperationLessThanOrEqual1.isContextDependent();
      coreOperationGreaterThan0.computeContextDependent();
      Expression[] expressionArray0 = new Expression[3];
      expressionArray0[0] = (Expression) coreOperationLessThan0;
      expressionArray0[1] = (Expression) coreOperationLessThan0;
      expressionArray0[2] = (Expression) coreOperationGreaterThan0;
      CoreFunction coreFunction0 = new CoreFunction(7, expressionArray0);
      coreFunction0.getArg2();
      coreFunction0.computeContextDependent();
      RootContext rootContext0 = new RootContext((JXPathContextReferenceImpl) null, (NodePointer) null);
      rootContext0.getJXPathContext();
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = new JXPathContextReferenceImpl((JXPathContext) null, rootContext0, (Pointer) null);
      RootContext rootContext1 = new RootContext(jXPathContextReferenceImpl0, (NodePointer) null);
      rootContext0.getRootContext();
      CoreFunction coreFunction1 = new CoreFunction(7, expressionArray0);
      CoreFunction coreFunction2 = new CoreFunction(3014, (Expression[]) null);
      // Undeclared exception!
//      try { 
        coreFunction2.functionNamespaceURI(rootContext1);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction((-1056), (Expression[]) null);
      CoreFunction coreFunction1 = new CoreFunction(30, (Expression[]) null);
      coreFunction1.computeContextDependent();
      EvalContext evalContext0 = null;
      CoreFunction coreFunction2 = new CoreFunction((-1755), (Expression[]) null);
      coreFunction2.computeValue((EvalContext) null);
      CoreFunction coreFunction3 = new CoreFunction(30, (Expression[]) null);
      // Undeclared exception!
//      try { 
        coreFunction3.computeValue((EvalContext) null);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // Incorrect number of arguments: format-number()
//         //
//         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Expression[] expressionArray0 = new Expression[2];
      CoreFunction coreFunction0 = new CoreFunction(26, expressionArray0);
      EvalContext evalContext0 = null;
      // Undeclared exception!
//      try { 
        coreFunction0.computeValue((EvalContext) null);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // Incorrect number of arguments: ceiling(null, null)
//         //
//         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      String string0 = "translate";
      Constant constant0 = new Constant("translate");
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual(constant0, constant0);
      CoreOperationLessThan coreOperationLessThan0 = new CoreOperationLessThan(constant0, coreOperationLessThanOrEqual0);
      CoreOperationGreaterThan coreOperationGreaterThan0 = new CoreOperationGreaterThan(coreOperationLessThan0, coreOperationLessThan0);
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual1 = new CoreOperationLessThanOrEqual(coreOperationLessThan0, constant0);
      coreOperationLessThanOrEqual1.isContextDependent();
      EvalContext evalContext0 = null;
      CoreFunction coreFunction0 = new CoreFunction(7, (Expression[]) null);
      // Undeclared exception!
//      try { 
        coreFunction0.computeValue((EvalContext) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      int int0 = 20;
      Expression[] expressionArray0 = new Expression[2];
      CoreFunction coreFunction0 = new CoreFunction(20, expressionArray0);
      CoreFunction coreFunction1 = new CoreFunction(20, expressionArray0);
      EvalContext[] evalContextArray0 = new EvalContext[7];
      evalContextArray0[0] = null;
      evalContextArray0[1] = null;
      evalContextArray0[2] = null;
      evalContextArray0[3] = null;
      evalContextArray0[4] = null;
      evalContextArray0[5] = null;
      evalContextArray0[6] = null;
      UnionContext unionContext0 = new UnionContext((EvalContext) null, evalContextArray0);
      // Undeclared exception!
//      try { 
        coreFunction1.computeValue(unionContext0);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // Incorrect number of arguments: true(null, null)
//         //
//         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Constant constant0 = new Constant("translate");
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual(constant0, constant0);
      CoreOperationLessThan coreOperationLessThan0 = new CoreOperationLessThan(constant0, coreOperationLessThanOrEqual0);
      CoreOperationGreaterThan coreOperationGreaterThan0 = new CoreOperationGreaterThan(coreOperationLessThan0, coreOperationLessThan0);
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual1 = new CoreOperationLessThanOrEqual(coreOperationLessThan0, constant0);
      coreOperationLessThanOrEqual1.isContextDependent();
      coreOperationGreaterThan0.computeContextDependent();
      Expression[] expressionArray0 = new Expression[3];
      expressionArray0[0] = (Expression) coreOperationLessThan0;
      expressionArray0[1] = (Expression) coreOperationLessThan0;
      expressionArray0[2] = (Expression) coreOperationGreaterThan0;
      CoreFunction coreFunction0 = new CoreFunction(7, expressionArray0);
      coreFunction0.getArg2();
      coreFunction0.computeContextDependent();
      RootContext rootContext0 = new RootContext((JXPathContextReferenceImpl) null, (NodePointer) null);
      rootContext0.getJXPathContext();
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = new JXPathContextReferenceImpl((JXPathContext) null, rootContext0, (Pointer) null);
      RootContext rootContext1 = new RootContext(jXPathContextReferenceImpl0, (NodePointer) null);
      rootContext0.getRootContext();
      CoreFunction coreFunction1 = new CoreFunction(7, expressionArray0);
      CoreFunction coreFunction2 = new CoreFunction(3014, (Expression[]) null);
      CoreFunction coreFunction3 = new CoreFunction((-1061), (Expression[]) null);
      coreFunction3.functionNumber(rootContext0);
      // Undeclared exception!
//      try { 
        coreFunction1.functionTrue(rootContext1);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // Incorrect number of arguments: name(org.apache.commons.jxpath.ri.compiler.Constant@0000000001 < (org.apache.commons.jxpath.ri.compiler.CoreOperationLessThanOrEqual@0000000002), org.apache.commons.jxpath.ri.compiler.Constant@0000000001 < (org.apache.commons.jxpath.ri.compiler.CoreOperationLessThanOrEqual@0000000002), org.apache.commons.jxpath.ri.compiler.CoreOperationLessThan@0000000003 > (org.apache.commons.jxpath.ri.compiler.CoreOperationLessThan@0000000003))
//         //
//         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      Expression[] expressionArray0 = null;
      CoreFunction coreFunction0 = new CoreFunction((-1056), (Expression[]) null);
      int int0 = 4;
      CoreFunction coreFunction1 = new CoreFunction(4, (Expression[]) null);
      coreFunction1.computeContextDependent();
      EvalContext evalContext0 = null;
      CoreFunction coreFunction2 = new CoreFunction((-1759), (Expression[]) null);
      // Undeclared exception!
//      try { 
        coreFunction2.functionSubstring((EvalContext) null);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // Incorrect number of arguments: unknownFunction-1759()()
//         //
//         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Expression[] expressionArray0 = new Expression[7];
      Constant constant0 = new Constant("ywFI.5l./6[=-");
      expressionArray0[0] = (Expression) constant0;
      QName qName0 = new QName("'\"[");
      ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, expressionArray0);
      expressionArray0[1] = (Expression) extensionFunction0;
      CoreOperationNotEqual coreOperationNotEqual0 = new CoreOperationNotEqual(extensionFunction0, expressionArray0[1]);
      expressionArray0[2] = (Expression) coreOperationNotEqual0;
      QName qName1 = new QName("key", "I-Olh]3nT\"T.r");
      VariableReference variableReference0 = new VariableReference(qName1);
      expressionArray0[3] = (Expression) variableReference0;
      CoreOperationNegate coreOperationNegate0 = new CoreOperationNegate(expressionArray0[2]);
      expressionArray0[4] = (Expression) coreOperationNegate0;
      CoreOperationOr coreOperationOr0 = new CoreOperationOr(expressionArray0);
      expressionArray0[5] = (Expression) coreOperationOr0;
      CoreFunction coreFunction0 = new CoreFunction(99, expressionArray0);
      Expression expression0 = coreFunction0.getArg1();
      expressionArray0[6] = expression0;
      CoreFunction coreFunction1 = new CoreFunction(117, expressionArray0);
      coreFunction0.computeValue((EvalContext) null);
      CoreFunction coreFunction2 = new CoreFunction(3, expressionArray0);
      // Undeclared exception!
      coreFunction2.functionStringLength((EvalContext) null);
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      Constant constant0 = new Constant("T)tW+3");
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest((-400));
      AttributeContext attributeContext0 = new AttributeContext((EvalContext) null, nodeTypeTest0);
      PredicateContext predicateContext0 = new PredicateContext(attributeContext0, constant0);
      Expression[] expressionArray0 = new Expression[2];
      expressionArray0[0] = (Expression) constant0;
      expressionArray0[1] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction((-400), expressionArray0);
      CoreFunction coreFunction1 = new CoreFunction(32, expressionArray0);
      coreFunction0.computeValue((EvalContext) null);
      // Undeclared exception!
//      try { 
        coreFunction0.functionKey(attributeContext0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.jxpath.ri.EvalContext", e);
//      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      int int0 = 9;
      Expression[] expressionArray0 = new Expression[8];
      CoreFunction coreFunction0 = new CoreFunction(9, expressionArray0);
      EvalContext evalContext0 = null;
      // Undeclared exception!
//      try { 
        coreFunction0.computeValue((EvalContext) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreOperationUnion coreOperationUnion0 = new CoreOperationUnion(expressionArray0);
      EvalContext evalContext0 = null;
      CoreFunction coreFunction0 = new CoreFunction(30, expressionArray0);
      // Undeclared exception!
//      try { 
        coreFunction0.computeValue((EvalContext) null);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // Incorrect number of arguments: format-number()
//         //
//         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(17, (Expression[]) null);
      EvalContext evalContext0 = null;
      // Undeclared exception!
//      try { 
        coreFunction0.compute((EvalContext) null);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // Incorrect number of arguments: translate()
//         //
//         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      EvalContext evalContext0 = null;
      CoreFunction coreFunction0 = new CoreFunction(17, expressionArray0);
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/usr/lib/jvm/java-1.8.0-openjdk-1.8.0.272.b10-0.fc31.x86_64/jre/lib/jxpath.properties");
      FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      coreFunction0.isContextDependent();
      JXPathContext.newContext((Object) null);
      // Undeclared exception!
//      try { 
        coreFunction0.functionSubstringAfter((EvalContext) null);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // Incorrect number of arguments: translate()
//         //
//         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(17, (Expression[]) null);
      // Undeclared exception!
//      try { 
        coreFunction0.computeValue((EvalContext) null);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // Incorrect number of arguments: translate()
//         //
//         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      EvalContext evalContext0 = null;
      CoreFunction coreFunction0 = new CoreFunction(2, (Expression[]) null);
      coreFunction0.computeContextDependent();
      // Undeclared exception!
//      try { 
        coreFunction0.computeValue((EvalContext) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      Constant constant0 = new Constant("T)tW+3");
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest((-400));
      AttributeContext attributeContext0 = new AttributeContext((EvalContext) null, nodeTypeTest0);
      PredicateContext predicateContext0 = new PredicateContext(attributeContext0, constant0);
      nodeTypeTest0.toString();
      constant0.toString();
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("T)tW+3");
      Expression[] expressionArray0 = new Expression[1];
      CoreFunction coreFunction0 = new CoreFunction(10, expressionArray0);
      // Undeclared exception!
//      try { 
        coreFunction0.computeValue(predicateContext0);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // Incorrect number of arguments: starts-with(null)
//         //
//         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      Constant constant0 = new Constant("T)tW+3");
      int int0 = 1;
      Expression[] expressionArray0 = new Expression[9];
      expressionArray0[0] = (Expression) constant0;
      expressionArray0[1] = (Expression) constant0;
      expressionArray0[2] = (Expression) constant0;
      expressionArray0[3] = (Expression) constant0;
      expressionArray0[4] = (Expression) constant0;
      expressionArray0[5] = (Expression) constant0;
      expressionArray0[6] = (Expression) constant0;
      expressionArray0[7] = (Expression) constant0;
      expressionArray0[8] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction(1, expressionArray0);
      coreFunction0.computeContextDependent();
      EvalContext evalContext0 = null;
      // Undeclared exception!
//      try { 
        coreFunction0.functionSubstring((EvalContext) null);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // Incorrect number of arguments: last('T)tW+3', 'T)tW+3', 'T)tW+3', 'T)tW+3', 'T)tW+3', 'T)tW+3', 'T)tW+3', 'T)tW+3', 'T)tW+3')
//         //
//         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[2];
      CoreFunction coreFunction0 = new CoreFunction(30, expressionArray0);
      EvalContext evalContext0 = null;
      // Undeclared exception!
//      try { 
        coreFunction0.functionCount((EvalContext) null);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // Incorrect number of arguments: format-number(null, null)
//         //
//         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      Constant constant0 = new Constant("T)tW+3");
      Expression[] expressionArray0 = new Expression[2];
      expressionArray0[0] = (Expression) constant0;
      expressionArray0[1] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction(50, expressionArray0);
      coreFunction0.functionStartsWith((EvalContext) null);
      Expression[] expressionArray1 = new Expression[1];
      CoreOperationGreaterThanOrEqual coreOperationGreaterThanOrEqual0 = new CoreOperationGreaterThanOrEqual((Expression) null, expressionArray0[0]);
      expressionArray1[0] = (Expression) coreOperationGreaterThanOrEqual0;
      CoreFunction coreFunction1 = new CoreFunction(13, expressionArray1);
      // Undeclared exception!
//      try { 
        coreFunction1.compute((EvalContext) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.evosuite.runtime.System", e);
//      }
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      EvalContext evalContext0 = null;
      Double double0 = Expression.NOT_A_NUMBER;
      Constant constant0 = new Constant(double0);
      constant0.toString();
      CoreFunction coreFunction0 = new CoreFunction(5, (Expression[]) null);
      // Undeclared exception!
//      try { 
        coreFunction0.functionSubstringAfter((EvalContext) null);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // Incorrect number of arguments: local-name()
//         //
//         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      Constant constant0 = new Constant("T)tW+3");
      Expression[] expressionArray0 = new Expression[2];
      expressionArray0[0] = (Expression) constant0;
      expressionArray0[1] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction(1285, expressionArray0);
      QName qName0 = new QName("", "\u0005K{3J%hreC^fWY]\"D");
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, "\u0005K{3J%hreC^fWY]\"D");
      ParentContext parentContext0 = new ParentContext((EvalContext) null, nodeNameTest0);
      coreFunction0.functionContains(parentContext0);
      CoreFunction coreFunction1 = new CoreFunction(1285, expressionArray0);
      // Undeclared exception!
//      try { 
        coreFunction1.functionKey((EvalContext) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      Constant constant0 = new Constant("T)tW+3");
      Expression[] expressionArray0 = new Expression[1];
      CoreFunction coreFunction0 = new CoreFunction(5, expressionArray0);
      EvalContext evalContext0 = null;
      // Undeclared exception!
//      try { 
        coreFunction0.iteratePointers((EvalContext) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(9, (Expression[]) null);
      coreFunction0.computeContextDependent();
      EvalContext evalContext0 = null;
      // Undeclared exception!
//      try { 
        coreFunction0.functionID((EvalContext) null);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // Incorrect number of arguments: concat()
//         //
//         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(9, (Expression[]) null);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "3fE[$5A^7MM]");
      EvalContext evalContext0 = null;
      // Undeclared exception!
//      try { 
        coreFunction0.iteratePointers((EvalContext) null);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // Incorrect number of arguments: concat()
//         //
//         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      Constant constant0 = new Constant("T)tW+3");
      Expression[] expressionArray0 = new Expression[1];
      expressionArray0[0] = (Expression) constant0;
      constant0.iterate((EvalContext) null);
      CoreFunction coreFunction0 = new CoreFunction(16, expressionArray0);
      coreFunction0.functionCount((EvalContext) null);
      coreFunction0.compute((EvalContext) null);
      // Undeclared exception!
//      try { 
        coreFunction0.functionKey((EvalContext) null);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // Incorrect number of arguments: normalize-space('T)tW+3')
//         //
//         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      EvalContext evalContext0 = null;
      Expression[] expressionArray0 = new Expression[1];
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd(expressionArray0);
      NameAttributeTest nameAttributeTest0 = new NameAttributeTest(coreOperationAdd0, coreOperationAdd0);
      CoreOperationLessThan coreOperationLessThan0 = new CoreOperationLessThan(nameAttributeTest0, coreOperationAdd0);
      expressionArray0[0] = (Expression) coreOperationLessThan0;
      CoreFunction coreFunction0 = new CoreFunction(103, expressionArray0);
      // Undeclared exception!
//      try { 
        coreFunction0.functionCount((EvalContext) null);
//        fail("Expecting exception: StackOverflowError");
      
//      } catch(StackOverflowError e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      Constant constant0 = new Constant("T)tW+3");
      Expression[] expressionArray0 = new Expression[4];
      expressionArray0[0] = (Expression) constant0;
      expressionArray0[1] = (Expression) constant0;
      expressionArray0[2] = (Expression) constant0;
      CoreOperationOr coreOperationOr0 = new CoreOperationOr(expressionArray0);
      expressionArray0[3] = (Expression) coreOperationOr0;
      CoreFunction coreFunction0 = new CoreFunction((-1067), expressionArray0);
      EvalContext evalContext0 = null;
      BasicNodeSet basicNodeSet0 = new BasicNodeSet();
      coreFunction0.functionConcat((EvalContext) null);
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest((-1067));
      QName qName0 = new QName("T)tW+3");
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, "T)tW+3");
      NamespaceContext namespaceContext0 = new NamespaceContext((EvalContext) null, nodeNameTest0);
      CoreOperationGreaterThanOrEqual coreOperationGreaterThanOrEqual0 = new CoreOperationGreaterThanOrEqual(expressionArray0[3], expressionArray0[0]);
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual(expressionArray0[0], expressionArray0[0]);
      CoreOperationMod coreOperationMod0 = new CoreOperationMod(expressionArray0[0], coreOperationGreaterThanOrEqual0);
      CoreFunction coreFunction1 = new CoreFunction((-905), expressionArray0);
      // Undeclared exception!
//      try { 
        coreFunction1.functionStringLength((EvalContext) null);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // Incorrect number of arguments: unknownFunction-905()('T)tW+3', 'T)tW+3', 'T)tW+3', org.apache.commons.jxpath.ri.compiler.Constant@0000000001 or org.apache.commons.jxpath.ri.compiler.Constant@0000000001 or org.apache.commons.jxpath.ri.compiler.Constant@0000000001 or org.apache.commons.jxpath.ri.compiler.CoreOperationOr@0000000002)
//         //
//         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      Constant constant0 = new Constant("T)tW+3");
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest((-400));
      AttributeContext attributeContext0 = new AttributeContext((EvalContext) null, nodeTypeTest0);
      PredicateContext predicateContext0 = new PredicateContext(attributeContext0, constant0);
      nodeTypeTest0.toString();
      constant0.toString();
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("T)tW+3");
      BasicNodeSet basicNodeSet0 = new BasicNodeSet();
      NodeSetContext nodeSetContext0 = new NodeSetContext(attributeContext0, basicNodeSet0);
      Expression[] expressionArray0 = new Expression[1];
      expressionArray0[0] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction((-2625), expressionArray0);
      coreFunction0.functionName((EvalContext) null);
      assertEquals((-2625), coreFunction0.getFunctionCode());
      
      // Undeclared exception!
//      try { 
        coreFunction0.functionSum(attributeContext0);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // Invalid argument type for 'sum': java.lang.String
//         //
//         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      Constant constant0 = new Constant("T)tW+3");
      EvalContext evalContext0 = null;
      Expression[] expressionArray0 = new Expression[2];
      expressionArray0[0] = (Expression) constant0;
      expressionArray0[1] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction(1285, expressionArray0);
      QName qName0 = new QName("", "\u0005K{3J%hreC^fWY]\"D");
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, "\u0005K{3J%hreC^fWY]\"D");
      ParentContext parentContext0 = new ParentContext((EvalContext) null, nodeNameTest0);
      coreFunction0.functionContains(parentContext0);
      // Undeclared exception!
//      try { 
        coreFunction0.functionNot((EvalContext) null);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // Incorrect number of arguments: unknownFunction1285()('T)tW+3', 'T)tW+3')
//         //
//         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreOperationUnion coreOperationUnion0 = new CoreOperationUnion(expressionArray0);
      CoreFunction coreFunction0 = new CoreFunction(8, expressionArray0);
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest((-3352));
      nodeTypeTest0.toString();
      Constant constant0 = new Constant("");
      constant0.toString();
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("8)Gh");
      BasicNodeSet basicNodeSet0 = new BasicNodeSet();
      CoreFunction coreFunction1 = new CoreFunction(21, expressionArray0);
      // Undeclared exception!
//      try { 
        coreFunction1.functionBoolean((EvalContext) null);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // Incorrect number of arguments: false()
//         //
//         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      String string0 = "T)tW+3";
      Constant constant0 = new Constant("T)tW+3");
      int int0 = 8;
      int int1 = 3;
      Expression[] expressionArray0 = new Expression[2];
      expressionArray0[0] = (Expression) constant0;
      expressionArray0[1] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction(3, expressionArray0);
      EvalContext evalContext0 = null;
      // Undeclared exception!
//      try { 
        coreFunction0.computeValue((EvalContext) null);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // Incorrect number of arguments: count('T)tW+3', 'T)tW+3')
//         //
//         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      String string0 = "T)tW+3";
      Constant constant0 = new Constant("T)tW+3");
      EvalContext evalContext0 = null;
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest((-400));
      Expression[] expressionArray0 = new Expression[7];
      expressionArray0[0] = (Expression) constant0;
      expressionArray0[1] = (Expression) constant0;
      expressionArray0[2] = (Expression) constant0;
      expressionArray0[3] = (Expression) constant0;
      expressionArray0[4] = (Expression) constant0;
      expressionArray0[5] = (Expression) constant0;
      CoreOperationUnion coreOperationUnion0 = new CoreOperationUnion(expressionArray0);
      expressionArray0[6] = (Expression) coreOperationUnion0;
      CoreFunction coreFunction0 = new CoreFunction(27, expressionArray0);
      // Undeclared exception!
      coreFunction0.computeContextDependent();
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      ExtensionFunction extensionFunction0 = new ExtensionFunction((QName) null, expressionArray0);
      expressionArray0[0] = (Expression) extensionFunction0;
      CoreFunction coreFunction0 = new CoreFunction(50, expressionArray0);
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = mock(JXPathContextReferenceImpl.class, new ViolatedAssumptionAnswer());
      doReturn((Locale) null).when(jXPathContextReferenceImpl0).getLocale();
      doReturn((NamespaceResolver) null, (NamespaceResolver) null).when(jXPathContextReferenceImpl0).getNamespaceResolver();
      Locale locale0 = Locale.GERMAN;
      NodePointer nodePointer0 = NodePointer.newNodePointer((QName) null, jXPathContextReferenceImpl0, locale0);
      RootContext rootContext0 = new RootContext(jXPathContextReferenceImpl0, nodePointer0);
      JXPathContext jXPathContext0 = rootContext0.getJXPathContext();
      NodeNameTest nodeNameTest0 = new NodeNameTest((QName) null, "No write method");
      NamespaceContext namespaceContext0 = new NamespaceContext(rootContext0, nodeNameTest0);
      JXPathContextReferenceImpl jXPathContextReferenceImpl1 = new JXPathContextReferenceImpl(jXPathContext0, namespaceContext0, nodePointer0);
      EvalContext evalContext0 = jXPathContextReferenceImpl1.getAbsoluteRootContext();
      // Undeclared exception!
//      try { 
        coreFunction0.functionPosition(evalContext0);
//        fail("Expecting exception: StackOverflowError");
      
//      } catch(StackOverflowError e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      Constant constant0 = new Constant("T)tW+3");
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest((-400));
      AttributeContext attributeContext0 = new AttributeContext((EvalContext) null, nodeTypeTest0);
      Expression[] expressionArray0 = new Expression[1];
      expressionArray0[0] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction((-400), expressionArray0);
      coreFunction0.computeValue((EvalContext) null);
      coreFunction0.functionRound(attributeContext0);
      // Undeclared exception!
//      try { 
        coreFunction0.functionLang(attributeContext0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.jxpath.ri.EvalContext", e);
//      }
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      Constant constant0 = new Constant("T)tW+3");
      Expression[] expressionArray0 = new Expression[2];
      expressionArray0[0] = (Expression) constant0;
      EvalContext evalContext0 = null;
      CoreFunction coreFunction0 = new CoreFunction(16, expressionArray0);
      // Undeclared exception!
//      try { 
        coreFunction0.functionSubstringBefore((EvalContext) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("!F\".Y!x'A7");
      CoreFunction coreFunction0 = new CoreFunction(25, (Expression[]) null);
      EvalContext[] evalContextArray0 = new EvalContext[0];
      UnionContext unionContext0 = new UnionContext((EvalContext) null, evalContextArray0);
      coreFunction0.functionFalse(unionContext0);
      assertEquals(25, coreFunction0.getFunctionCode());
      
      // Undeclared exception!
//      try { 
        coreFunction0.computeValue(unionContext0);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // Incorrect number of arguments: floor()
//         //
//         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      Constant constant0 = new Constant("T)tW+3");
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest((-400));
      AttributeContext attributeContext0 = new AttributeContext((EvalContext) null, nodeTypeTest0);
      PredicateContext predicateContext0 = new PredicateContext(attributeContext0, constant0);
      nodeTypeTest0.toString();
      constant0.toString();
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("T)tW+3");
      BasicNodeSet basicNodeSet0 = new BasicNodeSet();
      NodeSetContext nodeSetContext0 = new NodeSetContext(attributeContext0, basicNodeSet0);
      Expression[] expressionArray0 = new Expression[1];
      expressionArray0[0] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction((-724), expressionArray0);
      Object object0 = coreFunction0.functionNot(nodeSetContext0);
      assertEquals(false, object0);
      assertEquals((-724), coreFunction0.getFunctionCode());
      
      Object object1 = coreFunction0.functionCount((EvalContext) null);
      assertEquals((-724), coreFunction0.getFunctionCode());
      assertEquals(1.0, object1);
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, (String) null);
      Constant constant0 = new Constant((String) null);
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest((-528));
      AttributeContext attributeContext0 = new AttributeContext((EvalContext) null, nodeTypeTest0);
      PredicateContext predicateContext0 = new PredicateContext(attributeContext0, constant0);
      nodeTypeTest0.toString();
      constant0.toString();
      AttributeContext attributeContext1 = new AttributeContext(predicateContext0, nodeTypeTest0);
      constant0.iterate(attributeContext1);
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("");
      Expression[] expressionArray0 = new Expression[1];
      expressionArray0[0] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction(5, expressionArray0);
      Object object0 = coreFunction0.functionNot(predicateContext0);
      assertEquals(true, object0);
      
      coreFunction0.functionRound(attributeContext0);
      assertEquals(5, coreFunction0.getFunctionCode());
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      Expression[] expressionArray0 = null;
      EvalContext evalContext0 = null;
      int int0 = 12;
      CoreFunction coreFunction0 = new CoreFunction(12, (Expression[]) null);
      // Undeclared exception!
//      try { 
        coreFunction0.computeValue((EvalContext) null);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // Incorrect number of arguments: substring-before()
//         //
//         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[6];
      CoreFunction coreFunction0 = new CoreFunction(21, expressionArray0);
      coreFunction0.getArg1();
      CoreOperationNotEqual coreOperationNotEqual0 = new CoreOperationNotEqual((Expression) null, (Expression) null);
      CoreOperationEqual coreOperationEqual0 = new CoreOperationEqual((Expression) null, (Expression) null);
      CoreOperationMultiply coreOperationMultiply0 = new CoreOperationMultiply(coreOperationNotEqual0, coreFunction0);
      CoreFunction coreFunction1 = new CoreFunction(18, expressionArray0);
      EvalContext evalContext0 = null;
      // Undeclared exception!
//      try { 
        coreFunction1.compute((EvalContext) null);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // Incorrect number of arguments: boolean(null, null, null, null, null, null)
//         //
//         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Expression[] expressionArray0 = new Expression[4];
      CoreOperationMod coreOperationMod0 = new CoreOperationMod((Expression) null, (Expression) null);
      expressionArray0[0] = (Expression) coreOperationMod0;
      Step[] stepArray0 = new Step[9];
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(41);
      Step step0 = new Step(41, nodeTypeTest0, expressionArray0);
      stepArray0[0] = step0;
      Expression[] expressionArray1 = new Expression[5];
      expressionArray1[0] = (Expression) coreOperationMod0;
      expressionArray1[1] = null;
      expressionArray1[2] = null;
      expressionArray1[3] = null;
      expressionArray1[4] = (Expression) coreOperationMod0;
      Step step1 = new Step(41, nodeTypeTest0, expressionArray1);
      stepArray0[1] = step1;
      QName qName0 = new QName("contains");
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, "contains");
      Step step2 = new Step(192, nodeNameTest0, expressionArray0);
      stepArray0[2] = step2;
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("");
      Step step3 = new Step(8, processingInstructionTest0, expressionArray1);
      stepArray0[3] = step3;
      Step step4 = new Step(13, nodeTypeTest0, expressionArray1);
      stepArray0[4] = step4;
      Step step5 = new Step(0, processingInstructionTest0, expressionArray1);
      stepArray0[5] = step5;
      Expression[] expressionArray2 = new Expression[8];
      expressionArray2[0] = (Expression) coreOperationMod0;
      expressionArray2[1] = null;
      expressionArray2[2] = (Expression) coreOperationMod0;
      expressionArray2[3] = null;
      expressionArray2[4] = (Expression) coreOperationMod0;
      expressionArray2[5] = null;
      expressionArray2[6] = null;
      expressionArray2[7] = null;
      Step step6 = new Step((-2289), nodeNameTest0, expressionArray2);
      stepArray0[6] = step6;
      Step step7 = new Step((-2654), processingInstructionTest0, expressionArray2);
      stepArray0[7] = step7;
      Step step8 = new Step(3249, nodeTypeTest0, expressionArray1);
      stepArray0[8] = step8;
      ExpressionPath expressionPath0 = new ExpressionPath((Expression) null, expressionArray0, stepArray0);
      expressionArray0[1] = (Expression) expressionPath0;
      Expression[] expressionArray3 = new Expression[4];
      expressionArray3[0] = (Expression) expressionPath0;
      expressionArray3[1] = (Expression) coreOperationMod0;
      expressionArray3[2] = (Expression) expressionPath0;
      expressionArray3[3] = (Expression) coreOperationMod0;
      ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, expressionArray3);
      expressionArray0[2] = (Expression) extensionFunction0;
      CoreOperationMultiply coreOperationMultiply0 = new CoreOperationMultiply(expressionPath0, expressionArray2[0]);
      expressionArray0[3] = (Expression) coreOperationMultiply0;
      CoreFunction coreFunction0 = new CoreFunction(192, expressionArray0);
      ParentContext parentContext0 = new ParentContext((EvalContext) null, nodeNameTest0);
      DescendantContext descendantContext0 = new DescendantContext(parentContext0, false, nodeNameTest0);
      PredicateContext predicateContext0 = new PredicateContext(descendantContext0, expressionArray2[2]);
      NamespaceContext namespaceContext0 = new NamespaceContext(predicateContext0, processingInstructionTest0);
      PrecedingOrFollowingContext precedingOrFollowingContext0 = new PrecedingOrFollowingContext(namespaceContext0, nodeNameTest0, false);
      // Undeclared exception!
//      try { 
        coreFunction0.functionBoolean(precedingOrFollowingContext0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.evosuite.runtime.System", e);
//      }
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      Expression[] expressionArray0 = null;
      Expression[] expressionArray1 = new Expression[1];
      Step[] stepArray0 = new Step[6];
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest((-2256));
      Step step0 = new Step(215, nodeTypeTest0, (Expression[]) null);
      stepArray0[0] = step0;
      Step step1 = new Step(27, nodeTypeTest0, expressionArray1);
      stepArray0[1] = step1;
      Step step2 = new Step((-2256), nodeTypeTest0, (Expression[]) null);
      stepArray0[2] = step2;
      Step step3 = new Step(2, nodeTypeTest0, expressionArray1);
      stepArray0[3] = step3;
      Step step4 = new Step(15, nodeTypeTest0, expressionArray1);
      stepArray0[4] = step4;
      step0.isContextDependent();
      Step step5 = new Step((-4449), nodeTypeTest0, expressionArray1);
      stepArray0[5] = step5;
      LocationPath locationPath0 = new LocationPath(true, stepArray0);
      expressionArray1[0] = (Expression) locationPath0;
      CoreFunction coreFunction0 = new CoreFunction(27, expressionArray1);
      int int0 = 6;
      CoreFunction coreFunction1 = new CoreFunction(215, expressionArray1);
      EvalContext evalContext0 = null;
      // Undeclared exception!
//      try { 
        coreFunction1.functionStartsWith((EvalContext) null);
//        fail("Expecting exception: StackOverflowError");
      
//      } catch(StackOverflowError e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      int int0 = 7;
      Expression[] expressionArray0 = null;
      EvalContext evalContext0 = null;
      CoreFunction coreFunction0 = new CoreFunction(27, (Expression[]) null);
      // Undeclared exception!
//      try { 
        coreFunction0.computeValue((EvalContext) null);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // Incorrect number of arguments: round()
//         //
//         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      int int0 = (-400);
      Constant constant0 = new Constant("T)tW+3");
      EvalContext evalContext0 = null;
      NameAttributeTest nameAttributeTest0 = new NameAttributeTest(constant0, constant0);
      CoreOperationLessThan coreOperationLessThan0 = new CoreOperationLessThan(nameAttributeTest0, constant0);
      CoreOperationGreaterThan coreOperationGreaterThan0 = new CoreOperationGreaterThan(coreOperationLessThan0, coreOperationLessThan0);
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual(coreOperationGreaterThan0, coreOperationLessThan0);
      coreOperationLessThanOrEqual0.isContextDependent();
      coreOperationGreaterThan0.computeContextDependent();
      Expression[] expressionArray0 = new Expression[2];
      expressionArray0[0] = (Expression) nameAttributeTest0;
      expressionArray0[1] = (Expression) coreOperationGreaterThan0;
      CoreFunction coreFunction0 = new CoreFunction(384, expressionArray0);
      coreFunction0.getArg2();
      coreFunction0.computeContextDependent();
      NodePointer nodePointer0 = null;
      InitialContext initialContext0 = null;
//      try {
        initialContext0 = new InitialContext((EvalContext) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.jxpath.ri.axes.InitialContext", e);
//      }
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      Constant constant0 = new Constant("T)tW+3");
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest((-400));
      AttributeContext attributeContext0 = new AttributeContext((EvalContext) null, nodeTypeTest0);
      PredicateContext predicateContext0 = new PredicateContext(attributeContext0, constant0);
      nodeTypeTest0.toString();
      constant0.toString();
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("T)tW+3");
      BasicNodeSet basicNodeSet0 = new BasicNodeSet();
      NodeSetContext nodeSetContext0 = new NodeSetContext(attributeContext0, basicNodeSet0);
      Expression[] expressionArray0 = new Expression[1];
      constant0.toString();
      expressionArray0[0] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction((-2625), expressionArray0);
      coreFunction0.functionName((EvalContext) null);
      boolean boolean0 = coreFunction0.computeContextDependent();
      assertFalse(boolean0);
      
      coreFunction0.functionCeiling((EvalContext) null);
      assertEquals((-2625), coreFunction0.getFunctionCode());
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      int int0 = 13;
      Expression[] expressionArray0 = new Expression[8];
      CoreFunction coreFunction0 = new CoreFunction(13, expressionArray0);
      EvalContext evalContext0 = null;
      int int1 = 47;
      // Undeclared exception!
//      try { 
        coreFunction0.computeValue((EvalContext) null);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // Incorrect number of arguments: substring-after(null, null, null, null, null, null, null, null)
//         //
//         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreOperationUnion coreOperationUnion0 = new CoreOperationUnion(expressionArray0);
      EvalContext evalContext0 = null;
      CoreFunction coreFunction0 = new CoreFunction(8, expressionArray0);
      // Undeclared exception!
//      try { 
        coreFunction0.computeValue((EvalContext) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      Constant constant0 = new Constant("");
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest((-5250));
      AttributeContext attributeContext0 = new AttributeContext((EvalContext) null, nodeTypeTest0);
      CoreOperationDivide coreOperationDivide0 = new CoreOperationDivide(constant0, constant0);
      PredicateContext predicateContext0 = new PredicateContext((EvalContext) null, coreOperationDivide0);
      nodeTypeTest0.toString();
      constant0.toString();
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest((String) null);
      BasicNodeSet basicNodeSet0 = new BasicNodeSet();
      NodeSetContext nodeSetContext0 = new NodeSetContext(predicateContext0, basicNodeSet0);
      CoreFunction coreFunction0 = new CoreFunction((-724), (Expression[]) null);
      CoreFunction coreFunction1 = new CoreFunction(4, (Expression[]) null);
      coreFunction1.getArgumentCount();
      // Undeclared exception!
//      try { 
        coreFunction1.functionBoolean(attributeContext0);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // Incorrect number of arguments: id()
//         //
//         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      EvalContext evalContext0 = null;
      CoreFunction coreFunction0 = new CoreFunction(7, (Expression[]) null);
      // Undeclared exception!
//      try { 
        coreFunction0.iteratePointers((EvalContext) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Constant constant0 = new Constant("");
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(8);
      AttributeContext attributeContext0 = new AttributeContext((EvalContext) null, nodeTypeTest0);
      PredicateContext predicateContext0 = new PredicateContext(attributeContext0, constant0);
      nodeTypeTest0.toString();
      constant0.toString();
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("UNKNOWN()");
      BasicNodeSet basicNodeSet0 = new BasicNodeSet();
      NodeSetContext nodeSetContext0 = new NodeSetContext(attributeContext0, basicNodeSet0);
      Expression[] expressionArray0 = new Expression[2];
      expressionArray0[0] = (Expression) constant0;
      expressionArray0[1] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction(8, expressionArray0);
      // Undeclared exception!
//      try { 
        coreFunction0.functionLocalName(attributeContext0);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // Incorrect number of arguments: string('', '')
//         //
//         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[6];
      CoreOperationUnion coreOperationUnion0 = new CoreOperationUnion(expressionArray0);
      EvalContext evalContext0 = null;
      int int0 = 2;
      CoreFunction coreFunction0 = new CoreFunction(2, expressionArray0);
      // Undeclared exception!
//      try { 
        coreFunction0.computeValue((EvalContext) null);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // Incorrect number of arguments: position(null, null, null, null, null, null)
//         //
//         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      Constant constant0 = new Constant("T)tW+3");
      EvalContext evalContext0 = null;
      Expression[] expressionArray0 = new Expression[2];
      CoreFunction coreFunction0 = new CoreFunction((-400), expressionArray0);
      // Undeclared exception!
//      try { 
        coreFunction0.functionSubstringBefore((EvalContext) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction((-400), expressionArray0);
      EvalContext evalContext0 = null;
      CoreFunction coreFunction1 = new CoreFunction((-400), expressionArray0);
      // Undeclared exception!
//      try { 
        coreFunction1.functionNumber((EvalContext) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      EvalContext evalContext0 = null;
      Expression[] expressionArray0 = new Expression[9];
      CoreOperationOr coreOperationOr0 = new CoreOperationOr(expressionArray0);
      expressionArray0[0] = (Expression) coreOperationOr0;
      CoreFunction coreFunction0 = new CoreFunction(2, expressionArray0);
      CoreFunction coreFunction1 = new CoreFunction((-16), expressionArray0);
      // Undeclared exception!
//      try { 
        coreFunction0.functionFloor((EvalContext) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.evosuite.runtime.System", e);
//      }
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(32, expressionArray0);
      EvalContext evalContext0 = null;
      Expression[] expressionArray1 = new Expression[1];
      CoreOperationGreaterThanOrEqual coreOperationGreaterThanOrEqual0 = new CoreOperationGreaterThanOrEqual(coreFunction0, coreFunction0);
      CoreOperationMod coreOperationMod0 = new CoreOperationMod(coreOperationGreaterThanOrEqual0, coreOperationGreaterThanOrEqual0);
      expressionArray1[0] = (Expression) coreOperationMod0;
      CoreFunction coreFunction1 = new CoreFunction(7, expressionArray1);
      CoreFunction coreFunction2 = new CoreFunction(7, expressionArray1);
      // Undeclared exception!
//      try { 
        coreFunction1.functionFloor((EvalContext) null);
//        fail("Expecting exception: ArithmeticException");
      
//      } catch(ArithmeticException e) {
//         //
//         // / by zero
//         //
//         verifyException("org.apache.commons.jxpath.ri.compiler.CoreOperationMod", e);
//      }
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      Constant constant0 = new Constant("WlIN+2CG@dV]NP");
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest((-400));
      AttributeContext attributeContext0 = new AttributeContext((EvalContext) null, nodeTypeTest0);
      PredicateContext predicateContext0 = new PredicateContext(attributeContext0, constant0);
      Expression[] expressionArray0 = new Expression[3];
      expressionArray0[0] = (Expression) constant0;
      expressionArray0[1] = (Expression) constant0;
      expressionArray0[2] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction(2445, expressionArray0);
      Object object0 = coreFunction0.functionSubstring((EvalContext) null);
      ChildContext childContext0 = new ChildContext((EvalContext) null, nodeTypeTest0, true, false);
      Object object1 = coreFunction0.functionTranslate(childContext0);
      assertFalse(object1.equals((Object)object0));
      assertEquals(2445, coreFunction0.getFunctionCode());
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      int int0 = 13;
      Expression[] expressionArray0 = new Expression[8];
      CoreFunction coreFunction0 = new CoreFunction(13, expressionArray0);
      EvalContext evalContext0 = null;
      int int1 = 47;
      // Undeclared exception!
//      try { 
        coreFunction0.compute((EvalContext) null);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // Incorrect number of arguments: substring-after(null, null, null, null, null, null, null, null)
//         //
//         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      EvalContext evalContext0 = null;
      CoreFunction coreFunction0 = new CoreFunction(3, (Expression[]) null);
      // Undeclared exception!
//      try { 
        coreFunction0.functionSubstringAfter((EvalContext) null);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // Incorrect number of arguments: count()
//         //
//         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      Constant constant0 = new Constant("T)tW+3");
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest((-400));
      AttributeContext attributeContext0 = new AttributeContext((EvalContext) null, nodeTypeTest0);
      nodeTypeTest0.toString();
      PredicateContext predicateContext0 = new PredicateContext(attributeContext0, constant0);
      nodeTypeTest0.toString();
      constant0.toString();
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("T)tW+3");
      BasicNodeSet basicNodeSet0 = new BasicNodeSet();
      NodeSetContext nodeSetContext0 = new NodeSetContext(attributeContext0, basicNodeSet0);
      Expression[] expressionArray0 = new Expression[1];
      expressionArray0[0] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction((-1952), expressionArray0);
      coreFunction0.functionLocalName(attributeContext0);
      Object object0 = coreFunction0.functionBoolean(predicateContext0);
      assertEquals(true, object0);
      assertEquals((-1952), coreFunction0.getFunctionCode());
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[2];
      Expression[] expressionArray1 = new Expression[1];
      Constant constant0 = new Constant("");
      CoreOperationDivide coreOperationDivide0 = new CoreOperationDivide(constant0, constant0);
      expressionArray1[0] = (Expression) coreOperationDivide0;
      CoreOperationUnion coreOperationUnion0 = new CoreOperationUnion(expressionArray1);
      expressionArray0[0] = (Expression) coreOperationUnion0;
      CoreOperationMod coreOperationMod0 = new CoreOperationMod(expressionArray0[0], coreOperationDivide0);
      expressionArray0[1] = (Expression) coreOperationMod0;
      CoreFunction coreFunction0 = new CoreFunction((-400), expressionArray0);
      coreOperationDivide0.args = expressionArray1;
      EvalContext evalContext0 = null;
      CoreFunction coreFunction1 = new CoreFunction((-409), expressionArray1);
      // Undeclared exception!
//      try { 
        coreFunction1.functionStringLength((EvalContext) null);
//        fail("Expecting exception: StackOverflowError");
      
//      } catch(StackOverflowError e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      EvalContext evalContext0 = null;
      int int0 = 306;
      Expression[] expressionArray0 = new Expression[1];
      CoreFunction coreFunction0 = new CoreFunction(28, expressionArray0);
      // Undeclared exception!
//      try { 
        coreFunction0.getArg2();
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 1
//         //
//         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      Constant constant0 = new Constant("T)tW+3");
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest((-400));
      AttributeContext attributeContext0 = new AttributeContext((EvalContext) null, nodeTypeTest0);
      CoreOperationGreaterThanOrEqual coreOperationGreaterThanOrEqual0 = new CoreOperationGreaterThanOrEqual(constant0, constant0);
      CoreOperationMod coreOperationMod0 = new CoreOperationMod(constant0, coreOperationGreaterThanOrEqual0);
      Expression[] expressionArray0 = new Expression[5];
      CoreOperationUnion coreOperationUnion0 = new CoreOperationUnion(expressionArray0);
      expressionArray0[0] = (Expression) coreOperationUnion0;
      expressionArray0[1] = (Expression) coreOperationMod0;
      expressionArray0[2] = (Expression) coreOperationMod0;
      CoreOperationUnion coreOperationUnion1 = new CoreOperationUnion(expressionArray0);
      CoreOperationMod coreOperationMod1 = new CoreOperationMod(coreOperationUnion1, expressionArray0[2]);
      expressionArray0[3] = (Expression) coreOperationMod1;
      QName qName0 = new QName("T)tW+3", (String) null);
      ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, expressionArray0);
      expressionArray0[4] = (Expression) extensionFunction0;
      CoreFunction coreFunction0 = new CoreFunction((-2423), expressionArray0);
      CoreFunction coreFunction1 = new CoreFunction(7, expressionArray0);
      // Undeclared exception!
      coreFunction0.functionLang(attributeContext0);
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      EvalContext evalContext0 = null;
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest((-400));
      int int0 = 112;
      CoreFunction coreFunction0 = new CoreFunction(112, expressionArray0);
      // Undeclared exception!
//      try { 
        coreFunction0.getArg1();
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 0
//         //
//         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[6];
      CoreOperationNotEqual coreOperationNotEqual0 = new CoreOperationNotEqual((Expression) null, (Expression) null);
      expressionArray0[0] = (Expression) coreOperationNotEqual0;
      CoreOperationEqual coreOperationEqual0 = new CoreOperationEqual((Expression) null, (Expression) null);
      expressionArray0[1] = (Expression) coreOperationEqual0;
      CoreOperationLessThan coreOperationLessThan0 = new CoreOperationLessThan(coreOperationNotEqual0, expressionArray0[1]);
      expressionArray0[2] = (Expression) coreOperationLessThan0;
      CoreOperationGreaterThan coreOperationGreaterThan0 = new CoreOperationGreaterThan(expressionArray0[2], expressionArray0[2]);
      expressionArray0[3] = (Expression) coreOperationGreaterThan0;
      CoreOperationMultiply coreOperationMultiply0 = new CoreOperationMultiply(coreOperationLessThan0, expressionArray0[3]);
      expressionArray0[4] = (Expression) coreOperationMultiply0;
      CoreOperationGreaterThan coreOperationGreaterThan1 = new CoreOperationGreaterThan(expressionArray0[2], (Expression) null);
      expressionArray0[5] = (Expression) coreOperationGreaterThan1;
      CoreFunction coreFunction0 = new CoreFunction(10, expressionArray0);
      // Undeclared exception!
//      try { 
        coreFunction0.compute((EvalContext) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.evosuite.runtime.System", e);
//      }
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(32, expressionArray0);
      EvalContext evalContext0 = null;
      Expression[] expressionArray1 = new Expression[1];
      CoreOperationGreaterThanOrEqual coreOperationGreaterThanOrEqual0 = new CoreOperationGreaterThanOrEqual(coreFunction0, coreFunction0);
      CoreOperationMod coreOperationMod0 = new CoreOperationMod(coreOperationGreaterThanOrEqual0, coreOperationGreaterThanOrEqual0);
      expressionArray1[0] = (Expression) coreOperationMod0;
      CoreFunction coreFunction1 = new CoreFunction(7, expressionArray1);
      CoreFunction coreFunction2 = new CoreFunction(7, expressionArray1);
      // Undeclared exception!
//      try { 
        coreFunction2.functionLang((EvalContext) null);
//        fail("Expecting exception: ArithmeticException");
      
//      } catch(ArithmeticException e) {
//         //
//         // / by zero
//         //
//         verifyException("org.apache.commons.jxpath.ri.compiler.CoreOperationMod", e);
//      }
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      Constant constant0 = new Constant("T)tW+3");
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest((-400));
      AttributeContext attributeContext0 = new AttributeContext((EvalContext) null, nodeTypeTest0);
      PredicateContext predicateContext0 = new PredicateContext(attributeContext0, constant0);
      nodeTypeTest0.toString();
      constant0.toString();
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("T)tW+3");
      BasicNodeSet basicNodeSet0 = new BasicNodeSet();
      NodeSetContext nodeSetContext0 = new NodeSetContext(attributeContext0, basicNodeSet0);
      Expression[] expressionArray0 = new Expression[1];
      expressionArray0[0] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction((-1952), expressionArray0);
      coreFunction0.functionLocalName(attributeContext0);
      assertEquals((-1952), coreFunction0.getFunctionCode());
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      Constant constant0 = new Constant("T)tW+3");
      Expression[] expressionArray0 = new Expression[1];
      expressionArray0[0] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction(797, expressionArray0);
      EvalContext evalContext0 = null;
      // Undeclared exception!
//      try { 
        coreFunction0.functionID((EvalContext) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      Constant constant0 = new Constant("T)tW+3");
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest((-400));
      AttributeContext attributeContext0 = new AttributeContext((EvalContext) null, nodeTypeTest0);
      PredicateContext predicateContext0 = new PredicateContext(attributeContext0, constant0);
      Expression[] expressionArray0 = new Expression[2];
      expressionArray0[0] = (Expression) constant0;
      expressionArray0[1] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction((-400), expressionArray0);
      coreFunction0.functionSubstring((EvalContext) null);
      // Undeclared exception!
//      try { 
        coreFunction0.functionTranslate(predicateContext0);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // Incorrect number of arguments: unknownFunction-400()('T)tW+3', 'T)tW+3')
//         //
//         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      int int0 = (-400);
      Constant constant0 = new Constant("T)tW+3");
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest((-400));
      AttributeContext attributeContext0 = new AttributeContext((EvalContext) null, nodeTypeTest0);
      PredicateContext predicateContext0 = new PredicateContext(attributeContext0, constant0);
      Expression[] expressionArray0 = new Expression[2];
      CoreFunction coreFunction0 = new CoreFunction((-400), expressionArray0);
      // Undeclared exception!
//      try { 
        coreFunction0.functionStartsWith(predicateContext0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      QName qName0 = new QName("RBOb7 ^dGm$,");
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      VariableReference variableReference0 = new VariableReference(qName0);
      CoreOperationMod coreOperationMod0 = new CoreOperationMod(variableReference0, variableReference0);
      CoreOperationGreaterThan coreOperationGreaterThan0 = new CoreOperationGreaterThan(coreOperationMod0, variableReference0);
      CoreOperationNegate coreOperationNegate0 = new CoreOperationNegate(coreOperationGreaterThan0);
      expressionArray0[0] = (Expression) coreOperationNegate0;
      variableReference0.toString();
      CoreFunction coreFunction0 = new CoreFunction((-2460), expressionArray0);
      coreOperationGreaterThan0.args = expressionArray0;
      EvalContext evalContext0 = null;
      // Undeclared exception!
//      try { 
        coreFunction0.functionNormalizeSpace((EvalContext) null);
//        fail("Expecting exception: StackOverflowError");
      
//      } catch(StackOverflowError e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      CoreOperationAnd coreOperationAnd0 = new CoreOperationAnd(expressionArray0);
      expressionArray0[0] = (Expression) coreOperationAnd0;
      CoreFunction coreFunction0 = new CoreFunction(18, expressionArray0);
      EvalContext evalContext0 = null;
      QName qName0 = new QName("");
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, "");
      NamespaceContext namespaceContext0 = new NamespaceContext((EvalContext) null, nodeNameTest0);
      coreOperationAnd0.toString();
      DescendantContext descendantContext0 = new DescendantContext(namespaceContext0, false, nodeNameTest0);
      // Undeclared exception!
//      try { 
        coreFunction0.functionID(descendantContext0);
//        fail("Expecting exception: StackOverflowError");
      
//      } catch(StackOverflowError e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      Constant constant0 = new Constant("T)tW+3");
      EvalContext evalContext0 = null;
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest((-400));
      AttributeContext attributeContext0 = new AttributeContext((EvalContext) null, nodeTypeTest0);
      PredicateContext predicateContext0 = new PredicateContext(attributeContext0, constant0);
      EvoSuiteFile evoSuiteFile0 = null;
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction((-400), expressionArray0);
      // Undeclared exception!
//      try { 
        coreFunction0.functionLocalName(attributeContext0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest((-400));
      AttributeContext attributeContext0 = new AttributeContext((EvalContext) null, nodeTypeTest0);
      Expression[] expressionArray0 = new Expression[2];
      CoreFunction coreFunction0 = new CoreFunction((-400), expressionArray0);
      // Undeclared exception!
//      try { 
        coreFunction0.functionSubstringAfter((EvalContext) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[8];
      EvalContext evalContext0 = null;
      CoreFunction coreFunction0 = new CoreFunction(41, expressionArray0);
      coreFunction0.compute((EvalContext) null);
      // Undeclared exception!
//      try { 
        coreFunction0.functionName((EvalContext) null);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // Incorrect number of arguments: unknownFunction41()(null, null, null, null, null, null, null, null)
//         //
//         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[2];
      CoreFunction coreFunction0 = new CoreFunction(120, expressionArray0);
      Expression[] expressionArray1 = new Expression[2];
      expressionArray1[0] = (Expression) coreFunction0;
      CoreOperationAnd coreOperationAnd0 = new CoreOperationAnd(expressionArray1);
      expressionArray1[1] = (Expression) coreOperationAnd0;
      CoreFunction coreFunction1 = new CoreFunction(120, expressionArray1);
      EvalContext evalContext0 = null;
      BasicNodeSet basicNodeSet0 = new BasicNodeSet();
      NodeSetContext nodeSetContext0 = new NodeSetContext((EvalContext) null, basicNodeSet0);
      // Undeclared exception!
//      try { 
        coreFunction1.functionNumber(nodeSetContext0);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // Incorrect number of arguments: unknownFunction120()(unknownFunction120()(null, null), org.apache.commons.jxpath.ri.compiler.CoreFunction@0000000001 and org.apache.commons.jxpath.ri.compiler.CoreOperationAnd@0000000002)
//         //
//         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[14];
      CoreOperationAnd coreOperationAnd0 = new CoreOperationAnd(expressionArray0);
      CoreOperationDivide coreOperationDivide0 = new CoreOperationDivide(coreOperationAnd0, coreOperationAnd0);
      expressionArray0[0] = (Expression) coreOperationDivide0;
      CoreFunction coreFunction0 = new CoreFunction(16, expressionArray0);
      EvalContext evalContext0 = null;
      int int0 = 9;
      CoreFunction coreFunction1 = new CoreFunction(9, expressionArray0);
      Expression[] expressionArray1 = new Expression[0];
      CoreFunction coreFunction2 = new CoreFunction(16, expressionArray1);
      Step[] stepArray0 = new Step[5];
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest((String) null);
      Expression[] expressionArray2 = new Expression[3];
      expressionArray2[0] = (Expression) coreFunction1;
      expressionArray2[1] = (Expression) coreFunction0;
      expressionArray2[2] = (Expression) coreOperationDivide0;
      Step step0 = new Step((-239), processingInstructionTest0, expressionArray2);
      stepArray0[0] = step0;
      Step step1 = new Step(16, processingInstructionTest0, expressionArray2);
      stepArray0[1] = step1;
      Step step2 = new Step(9, processingInstructionTest0, expressionArray2);
      stepArray0[2] = step2;
      Step step3 = new Step(9, processingInstructionTest0, expressionArray0);
      stepArray0[3] = step3;
      Step step4 = new Step(9, processingInstructionTest0, expressionArray1);
      stepArray0[4] = step4;
      ExpressionPath expressionPath0 = new ExpressionPath(expressionArray0[0], expressionArray1, stepArray0);
      EvalContext evalContext1 = expressionPath0.evalSteps((EvalContext) null);
      // Undeclared exception!
//      try { 
        coreFunction2.compute(evalContext1);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // Incorrect number of arguments: normalize-space()
//         //
//         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      EvalContext evalContext0 = null;
      int int0 = (-1203);
      EvalContext evalContext1 = null;
      int int1 = (-2162);
      Expression[] expressionArray0 = new Expression[6];
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual((Expression) null, (Expression) null);
      CoreOperationEqual coreOperationEqual0 = new CoreOperationEqual(coreOperationLessThanOrEqual0, (Expression) null);
      expressionArray0[2] = (Expression) coreOperationEqual0;
      CoreOperationUnion coreOperationUnion0 = new CoreOperationUnion(expressionArray0);
      expressionArray0[1] = (Expression) coreOperationUnion0;
      Constant constant0 = new Constant("Y|C.6&rUft");
      expressionArray0[2] = (Expression) constant0;
      CoreOperationMod coreOperationMod0 = new CoreOperationMod(expressionArray0[0], coreOperationEqual0);
      expressionArray0[3] = (Expression) coreOperationMod0;
      QName qName0 = new QName("Y|C.6&rUft");
      ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, expressionArray0);
      expressionArray0[4] = (Expression) extensionFunction0;
      CoreOperationDivide coreOperationDivide0 = new CoreOperationDivide(expressionArray0[3], extensionFunction0);
      CoreFunction coreFunction0 = new CoreFunction((-2162), expressionArray0);
      coreFunction0.computeValue((EvalContext) null);
      // Undeclared exception!
//      try { 
        coreFunction0.functionLang((EvalContext) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.evosuite.runtime.System", e);
//      }
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(24, expressionArray0);
      EvalContext evalContext0 = null;
      EvalContext evalContext1 = null;
      // Undeclared exception!
//      try { 
        coreFunction0.computeValue((EvalContext) null);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // Incorrect number of arguments: sum()
//         //
//         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      int int0 = 120;
      Expression[] expressionArray0 = new Expression[2];
      CoreFunction coreFunction0 = new CoreFunction(120, expressionArray0);
      EvalContext evalContext0 = null;
      BasicNodeSet basicNodeSet0 = new BasicNodeSet();
      // Undeclared exception!
//      try { 
        coreFunction0.functionConcat((EvalContext) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      int int0 = (-6983);
      Expression[] expressionArray0 = null;
      CoreFunction coreFunction0 = new CoreFunction((-6983), (Expression[]) null);
      EvalContext evalContext0 = null;
      CoreFunction coreFunction1 = new CoreFunction(47, (Expression[]) null);
      CoreFunction coreFunction2 = new CoreFunction(6, (Expression[]) null);
      // Undeclared exception!
//      try { 
        coreFunction2.functionStartsWith((EvalContext) null);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // Incorrect number of arguments: namespace-uri()
//         //
//         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      Constant constant0 = new Constant("T)tW+3");
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest((-400));
      AttributeContext attributeContext0 = new AttributeContext((EvalContext) null, nodeTypeTest0);
      PredicateContext predicateContext0 = new PredicateContext(attributeContext0, constant0);
      Expression[] expressionArray0 = new Expression[2];
      expressionArray0[0] = (Expression) constant0;
      expressionArray0[1] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction((-400), expressionArray0);
      coreFunction0.functionSubstringAfter((EvalContext) null);
      coreFunction0.getArgumentCount();
      // Undeclared exception!
//      try { 
        coreFunction0.functionBoolean(attributeContext0);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // Incorrect number of arguments: unknownFunction-400()('T)tW+3', 'T)tW+3')
//         //
//         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[14];
      CoreOperationAnd coreOperationAnd0 = new CoreOperationAnd(expressionArray0);
      CoreOperationDivide coreOperationDivide0 = new CoreOperationDivide(coreOperationAnd0, coreOperationAnd0);
      expressionArray0[0] = (Expression) coreOperationDivide0;
      CoreFunction coreFunction0 = new CoreFunction(28, expressionArray0);
      // Undeclared exception!
//      try { 
        coreFunction0.functionSubstringAfter((EvalContext) null);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // Incorrect number of arguments: unknownFunction28()((org.apache.commons.jxpath.ri.compiler.CoreOperationAnd@0000000001) div (org.apache.commons.jxpath.ri.compiler.CoreOperationAnd@0000000001), null, null, null, null, null, null, null, null, null, null, null, null, null)
//         //
//         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[9];
      CoreFunction coreFunction0 = new CoreFunction(9, expressionArray0);
      EvalContext evalContext0 = null;
      // Undeclared exception!
//      try { 
        coreFunction0.functionCount((EvalContext) null);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // Incorrect number of arguments: concat(null, null, null, null, null, null, null, null, null)
//         //
//         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      int int0 = 16;
      Expression[] expressionArray0 = new Expression[14];
      CoreOperationAnd coreOperationAnd0 = new CoreOperationAnd(expressionArray0);
      CoreOperationDivide coreOperationDivide0 = new CoreOperationDivide(coreOperationAnd0, coreOperationAnd0);
      CoreFunction coreFunction0 = new CoreFunction(16, expressionArray0);
      EvalContext evalContext0 = null;
      UnionContext unionContext0 = new UnionContext((EvalContext) null, (EvalContext[]) null);
      // Undeclared exception!
//      try { 
        coreFunction0.iteratePointers(unionContext0);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // Incorrect number of arguments: normalize-space(null, null, null, null, null, null, null, null, null, null, null, null, null, null)
//         //
//         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      Constant constant0 = new Constant("xq\"/ezwX]=r;?f");
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest((-286));
      AttributeContext attributeContext0 = new AttributeContext((EvalContext) null, nodeTypeTest0);
      SelfContext selfContext0 = new SelfContext(attributeContext0, nodeTypeTest0);
      CoreOperationNotEqual coreOperationNotEqual0 = new CoreOperationNotEqual(constant0, constant0);
      PredicateContext predicateContext0 = new PredicateContext(selfContext0, coreOperationNotEqual0);
      nodeTypeTest0.toString();
      constant0.toString();
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("'xq\"/ezwX]=r;?f'");
      BasicNodeSet basicNodeSet0 = new BasicNodeSet();
      NodeSetContext nodeSetContext0 = new NodeSetContext((EvalContext) null, basicNodeSet0);
      CoreFunction coreFunction0 = new CoreFunction(4194304, expressionArray0);
      // Undeclared exception!
//      try { 
        coreFunction0.functionNot(selfContext0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[7];
      CoreFunction coreFunction0 = new CoreFunction(20, expressionArray0);
      EvalContext evalContext0 = null;
      CoreFunction coreFunction1 = new CoreFunction(20, expressionArray0);
      CoreFunction coreFunction2 = new CoreFunction(19, expressionArray0);
      // Undeclared exception!
//      try { 
        coreFunction2.functionNamespaceURI((EvalContext) null);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // Incorrect number of arguments: not(null, null, null, null, null, null, null)
//         //
//         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[8];
      Constant constant0 = new Constant("z/_e");
      CoreOperationGreaterThanOrEqual coreOperationGreaterThanOrEqual0 = new CoreOperationGreaterThanOrEqual(constant0, constant0);
      expressionArray0[0] = (Expression) coreOperationGreaterThanOrEqual0;
      CoreOperationGreaterThan coreOperationGreaterThan0 = new CoreOperationGreaterThan(expressionArray0[0], coreOperationGreaterThanOrEqual0);
      expressionArray0[1] = (Expression) coreOperationGreaterThan0;
      CoreOperationAnd coreOperationAnd0 = new CoreOperationAnd(expressionArray0);
      expressionArray0[2] = (Expression) coreOperationAnd0;
      CoreOperationGreaterThanOrEqual coreOperationGreaterThanOrEqual1 = new CoreOperationGreaterThanOrEqual(coreOperationGreaterThan0, coreOperationGreaterThan0);
      expressionArray0[3] = (Expression) coreOperationGreaterThanOrEqual1;
      CoreOperationNotEqual coreOperationNotEqual0 = new CoreOperationNotEqual(expressionArray0[3], expressionArray0[2]);
      expressionArray0[4] = (Expression) coreOperationNotEqual0;
      CoreOperationGreaterThanOrEqual coreOperationGreaterThanOrEqual2 = new CoreOperationGreaterThanOrEqual(expressionArray0[0], coreOperationGreaterThanOrEqual0);
      expressionArray0[5] = (Expression) coreOperationGreaterThanOrEqual2;
      QName qName0 = new QName("CE\"r4#?f", "");
      VariableReference variableReference0 = new VariableReference(qName0);
      expressionArray0[6] = (Expression) variableReference0;
      Step[] stepArray0 = new Step[3];
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
      Step step0 = new Step(151, nodeNameTest0, expressionArray0);
      stepArray0[0] = step0;
      Step step1 = new Step(151, nodeNameTest0, expressionArray0);
      stepArray0[1] = step1;
      Step step2 = new Step(1026, nodeNameTest0, expressionArray0);
      stepArray0[2] = step2;
      LocationPath locationPath0 = new LocationPath(true, stepArray0);
      expressionArray0[7] = (Expression) locationPath0;
      CoreFunction coreFunction0 = new CoreFunction(151, expressionArray0);
      JXPathContext jXPathContext0 = JXPathContext.newContext((Object) expressionArray0[1]);
      JXPathContext jXPathContext1 = JXPathContext.newContext(jXPathContext0, (Object) expressionArray0[1]);
      Locale locale0 = Locale.US;
      NodePointer nodePointer0 = NodePointer.newNodePointer(qName0, expressionArray0[1], locale0);
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = new JXPathContextReferenceImpl(jXPathContext1, "CE\"r4#?f", nodePointer0);
      RootContext rootContext0 = new RootContext(jXPathContextReferenceImpl0, nodePointer0);
      // Undeclared exception!
      coreFunction0.functionSubstring(rootContext0);
  }

  @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[7];
      CoreFunction coreFunction0 = new CoreFunction(20, expressionArray0);
      // Undeclared exception!
//      try { 
        coreFunction0.iteratePointers((EvalContext) null);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // Incorrect number of arguments: true(null, null, null, null, null, null, null)
//         //
//         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(18, (Expression[]) null);
      PredicateContext predicateContext0 = new PredicateContext((EvalContext) null, coreFunction0);
      // Undeclared exception!
//      try { 
        coreFunction0.functionCeiling(predicateContext0);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // Incorrect number of arguments: boolean()
//         //
//         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test223()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[14];
      CoreFunction coreFunction0 = new CoreFunction(65, expressionArray0);
      coreFunction0.getArg1();
      CoreFunction coreFunction1 = new CoreFunction(16, expressionArray0);
      EvalContext evalContext0 = null;
      ParentContext parentContext0 = new ParentContext((EvalContext) null, (NodeTest) null);
      ChildContext childContext0 = new ChildContext(parentContext0, (NodeTest) null, false, false);
      // Undeclared exception!
//      try { 
        coreFunction1.functionName(parentContext0);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // Incorrect number of arguments: normalize-space(null, null, null, null, null, null, null, null, null, null, null, null, null, null)
//         //
//         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test224()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[6];
      CoreOperationUnion coreOperationUnion0 = new CoreOperationUnion(expressionArray0);
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual(coreOperationUnion0, expressionArray0[0]);
      expressionArray0[1] = (Expression) coreOperationLessThanOrEqual0;
      CoreOperationMultiply coreOperationMultiply0 = new CoreOperationMultiply(coreOperationUnion0, coreOperationUnion0);
      expressionArray0[2] = (Expression) coreOperationMultiply0;
      Expression[] expressionArray1 = new Expression[2];
      expressionArray1[0] = (Expression) coreOperationLessThanOrEqual0;
      expressionArray1[1] = (Expression) coreOperationUnion0;
      CoreOperationOr coreOperationOr0 = new CoreOperationOr(expressionArray1);
      expressionArray0[3] = (Expression) coreOperationOr0;
      Step[] stepArray0 = new Step[9];
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("translate");
      Step step0 = new Step(2674, processingInstructionTest0, expressionArray0);
      stepArray0[0] = step0;
      Step step1 = new Step((-528), processingInstructionTest0, expressionArray0);
      stepArray0[1] = step1;
      Step step2 = new Step(1248, processingInstructionTest0, expressionArray1);
      stepArray0[2] = step2;
      QName qName0 = new QName("translate", "");
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, "translate");
      Step step3 = new Step((-528), nodeNameTest0, expressionArray0);
      stepArray0[3] = step3;
      Step step4 = new Step((-1472), nodeNameTest0, expressionArray1);
      stepArray0[4] = step4;
      Step step5 = new Step((-375), processingInstructionTest0, expressionArray1);
      stepArray0[6] = step5;
      NodeNameTest nodeNameTest1 = new NodeNameTest(qName0);
      Step step6 = new Step((-1472), nodeNameTest1, expressionArray1);
      stepArray0[8] = step6;
      ExpressionPath expressionPath0 = new ExpressionPath(coreOperationUnion0, expressionArray1, stepArray0);
      CoreOperationMultiply coreOperationMultiply1 = new CoreOperationMultiply(expressionArray1[1], expressionArray1[1]);
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual1 = new CoreOperationLessThanOrEqual(expressionPath0, coreOperationMultiply1);
      expressionArray0[4] = (Expression) coreOperationLessThanOrEqual1;
      CoreOperationMod coreOperationMod0 = new CoreOperationMod(expressionArray0[1], coreOperationMultiply0);
      expressionArray0[5] = (Expression) coreOperationMod0;
      CoreFunction coreFunction0 = new CoreFunction(2674, expressionArray0);
      // Undeclared exception!
//      try { 
        coreFunction0.computeContextDependent();
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.jxpath.ri.compiler.Operation", e);
//      }
  }

  @Test(timeout = 4000)
  public void test225()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[9];
      Step[] stepArray0 = new Step[3];
      QName qName0 = new QName("), ");
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, "");
      Step step0 = new Step(24, nodeNameTest0, expressionArray0);
      stepArray0[0] = step0;
      Step step1 = new Step((-1), nodeNameTest0, expressionArray0);
      stepArray0[1] = step1;
      Step step2 = new Step(24, nodeNameTest0, expressionArray0);
      stepArray0[2] = step2;
      LocationPath locationPath0 = new LocationPath(true, stepArray0);
      expressionArray0[0] = (Expression) locationPath0;
      CoreOperationSubtract coreOperationSubtract0 = new CoreOperationSubtract(locationPath0, expressionArray0[0]);
      expressionArray0[1] = (Expression) coreOperationSubtract0;
      ExpressionPath expressionPath0 = new ExpressionPath(expressionArray0[0], expressionArray0, stepArray0);
      expressionArray0[2] = (Expression) expressionPath0;
      CoreOperationNotEqual coreOperationNotEqual0 = new CoreOperationNotEqual(expressionArray0[2], locationPath0);
      expressionArray0[3] = (Expression) coreOperationNotEqual0;
      VariableReference variableReference0 = new VariableReference(qName0);
      expressionArray0[4] = (Expression) variableReference0;
      ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, expressionArray0);
      expressionArray0[5] = (Expression) extensionFunction0;
      CoreOperationAnd coreOperationAnd0 = new CoreOperationAnd(expressionArray0);
      expressionArray0[6] = (Expression) coreOperationAnd0;
      VariableReference variableReference1 = new VariableReference(qName0);
      expressionArray0[7] = (Expression) variableReference1;
      NameAttributeTest nameAttributeTest0 = new NameAttributeTest(extensionFunction0, expressionArray0[4]);
      expressionArray0[8] = (Expression) nameAttributeTest0;
      CoreFunction coreFunction0 = new CoreFunction((-1), expressionArray0);
      // Undeclared exception!
//      try { 
        coreFunction0.toString();
//        fail("Expecting exception: StackOverflowError");
      
//      } catch(StackOverflowError e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test226()  throws Throwable  {
      Constant constant0 = new Constant("T)tW+3");
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest((-400));
      AttributeContext attributeContext0 = new AttributeContext((EvalContext) null, nodeTypeTest0);
      PredicateContext predicateContext0 = new PredicateContext(attributeContext0, constant0);
      nodeTypeTest0.toString();
      constant0.toString();
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("T)tW+3");
      BasicNodeSet basicNodeSet0 = new BasicNodeSet();
      NodeSetContext nodeSetContext0 = new NodeSetContext(attributeContext0, basicNodeSet0);
      Expression[] expressionArray0 = new Expression[1];
      expressionArray0[0] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction((-724), expressionArray0);
      Object object0 = coreFunction0.functionNot(nodeSetContext0);
      assertEquals(false, object0);
      
      coreFunction0.functionNumber(attributeContext0);
      assertEquals((-724), coreFunction0.getFunctionCode());
  }

  @Test(timeout = 4000)
  public void test227()  throws Throwable  {
      EvalContext evalContext0 = null;
      VariableReference variableReference0 = new VariableReference((QName) null);
      Expression[] expressionArray0 = new Expression[9];
      CoreOperationOr coreOperationOr0 = new CoreOperationOr(expressionArray0);
      expressionArray0[0] = (Expression) coreOperationOr0;
      CoreFunction coreFunction0 = new CoreFunction(2, expressionArray0);
      // Undeclared exception!
//      try { 
        coreFunction0.iteratePointers((EvalContext) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.evosuite.runtime.System", e);
//      }
  }

  @Test(timeout = 4000)
  public void test228()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[6];
      CoreFunction coreFunction0 = new CoreFunction(1539, expressionArray0);
      JXPathContext jXPathContext0 = JXPathContext.newContext((Object) coreFunction0);
      QName qName0 = new QName(")p0l@LrhJ&U-");
      Locale locale0 = Locale.ITALIAN;
      NodePointer nodePointer0 = NodePointer.newNodePointer(qName0, qName0, locale0);
      nodePointer0.getLength();
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = new JXPathContextReferenceImpl(jXPathContext0, coreFunction0, nodePointer0);
      JXPathContext.newContext((Object) qName0);
      EvalContext evalContext0 = jXPathContextReferenceImpl0.getAbsoluteRootContext();
      CoreFunction coreFunction1 = new CoreFunction(1106, expressionArray0);
      CoreFunction coreFunction2 = new CoreFunction(26, expressionArray0);
      // Undeclared exception!
//      try { 
        coreFunction2.functionNot(evalContext0);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // Incorrect number of arguments: ceiling(null, null, null, null, null, null)
//         //
//         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test229()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[14];
      CoreOperationAnd coreOperationAnd0 = new CoreOperationAnd(expressionArray0);
      CoreOperationDivide coreOperationDivide0 = new CoreOperationDivide(coreOperationAnd0, coreOperationAnd0);
      expressionArray0[0] = (Expression) coreOperationDivide0;
      CoreFunction coreFunction0 = new CoreFunction(16, expressionArray0);
      CoreOperationOr coreOperationOr0 = new CoreOperationOr(expressionArray0);
      CoreOperationEqual coreOperationEqual0 = new CoreOperationEqual(coreOperationOr0, coreOperationAnd0);
      CoreOperationUnion coreOperationUnion0 = new CoreOperationUnion(expressionArray0);
      CoreFunction coreFunction1 = new CoreFunction(27, expressionArray0);
      CoreOperationSubtract coreOperationSubtract0 = new CoreOperationSubtract(coreFunction0, expressionArray0[0]);
      Expression[] expressionArray1 = new Expression[5];
      expressionArray0[3] = (Expression) coreOperationAnd0;
      expressionArray1[1] = (Expression) coreOperationOr0;
      expressionArray1[2] = (Expression) coreOperationEqual0;
      expressionArray1[3] = (Expression) coreFunction0;
      expressionArray1[4] = (Expression) coreFunction0;
      Step[] stepArray0 = new Step[1];
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("2koO]G");
      Step step0 = new Step(16, processingInstructionTest0, expressionArray0);
      stepArray0[0] = step0;
      ExpressionPath expressionPath0 = new ExpressionPath(coreOperationSubtract0, expressionArray1, stepArray0);
      EvalContext[] evalContextArray0 = new EvalContext[4];
      CoreFunction coreFunction2 = new CoreFunction(16, expressionArray1);
      UnionContext unionContext0 = new UnionContext((EvalContext) null, evalContextArray0);
      AttributeContext attributeContext0 = new AttributeContext(unionContext0, processingInstructionTest0);
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(16);
      PrecedingOrFollowingContext precedingOrFollowingContext0 = new PrecedingOrFollowingContext(attributeContext0, nodeTypeTest0, true);
      AncestorContext ancestorContext0 = new AncestorContext(precedingOrFollowingContext0, true, nodeTypeTest0);
      // Undeclared exception!
//      try { 
        coreFunction0.functionNormalizeSpace(ancestorContext0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.evosuite.runtime.System", e);
//      }
  }

  @Test(timeout = 4000)
  public void test230()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(513, expressionArray0);
      EvalContext evalContext0 = null;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, true);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      BasicNodeSet basicNodeSet0 = new BasicNodeSet();
      NodeSetContext nodeSetContext0 = new NodeSetContext((EvalContext) null, basicNodeSet0);
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(513);
      ParentContext parentContext0 = new ParentContext(nodeSetContext0, nodeTypeTest0);
      PredicateContext predicateContext0 = new PredicateContext(parentContext0, coreFunction0);
      predicateContext0.getValue();
      AttributeContext attributeContext0 = new AttributeContext(predicateContext0, nodeTypeTest0);
      coreFunction0.functionNull(attributeContext0);
      // Undeclared exception!
//      try { 
        coreFunction0.functionConcat((EvalContext) null);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // Incorrect number of arguments: unknownFunction513()()
//         //
//         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test231()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(1, expressionArray0);
      // Undeclared exception!
//      try { 
        coreFunction0.functionLocalName((EvalContext) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test232()  throws Throwable  {
      VariableReference variableReference0 = new VariableReference((QName) null);
      Expression[] expressionArray0 = new Expression[7];
      expressionArray0[0] = (Expression) variableReference0;
      expressionArray0[1] = (Expression) variableReference0;
      expressionArray0[2] = (Expression) variableReference0;
      expressionArray0[3] = (Expression) variableReference0;
      expressionArray0[4] = (Expression) variableReference0;
      expressionArray0[5] = (Expression) variableReference0;
      expressionArray0[6] = (Expression) variableReference0;
      CoreFunction coreFunction0 = new CoreFunction(7, expressionArray0);
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("aL");
      BasicNodeSet basicNodeSet0 = new BasicNodeSet();
      NodeSetContext nodeSetContext0 = new NodeSetContext((EvalContext) null, basicNodeSet0);
      // Undeclared exception!
//      try { 
        coreFunction0.functionSubstring(nodeSetContext0);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // Incorrect number of arguments: name($null, $null, $null, $null, $null, $null, $null)
//         //
//         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test233()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[14];
      CoreOperationAnd coreOperationAnd0 = new CoreOperationAnd(expressionArray0);
      CoreOperationDivide coreOperationDivide0 = new CoreOperationDivide(coreOperationAnd0, coreOperationAnd0);
      expressionArray0[0] = (Expression) coreOperationDivide0;
      CoreFunction coreFunction0 = new CoreFunction(16, expressionArray0);
      EvalContext evalContext0 = null;
      int int0 = 9;
      CoreFunction coreFunction1 = new CoreFunction(9, expressionArray0);
      Expression[] expressionArray1 = new Expression[0];
      CoreFunction coreFunction2 = new CoreFunction(16, expressionArray1);
      // Undeclared exception!
//      try { 
        coreFunction2.functionNamespaceURI((EvalContext) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test234()  throws Throwable  {
      Constant constant0 = new Constant("T)tW+3");
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest((-400));
      AttributeContext attributeContext0 = new AttributeContext((EvalContext) null, nodeTypeTest0);
      PredicateContext predicateContext0 = new PredicateContext(attributeContext0, constant0);
      nodeTypeTest0.toString();
      constant0.toString();
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("T)tW+3");
      BasicNodeSet basicNodeSet0 = new BasicNodeSet();
      NodeSetContext nodeSetContext0 = new NodeSetContext(attributeContext0, basicNodeSet0);
      Expression[] expressionArray0 = new Expression[1];
      expressionArray0[0] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction((-724), expressionArray0);
      Object object0 = coreFunction0.functionNormalizeSpace((EvalContext) null);
      assertEquals("T)tW+3", object0);
      assertEquals((-724), coreFunction0.getFunctionCode());
  }

  @Test(timeout = 4000)
  public void test235()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[3];
      String string0 = "!B4&Rk6V{L$'F";
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Constant constant0 = new Constant("!B4&Rk6V{L$'F");
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual(constant0, constant0);
      expressionArray0[0] = (Expression) coreOperationLessThanOrEqual0;
      CoreOperationLessThan coreOperationLessThan0 = new CoreOperationLessThan(coreOperationLessThanOrEqual0, coreOperationLessThanOrEqual0);
      expressionArray0[1] = (Expression) coreOperationLessThan0;
      CoreOperationGreaterThan coreOperationGreaterThan0 = new CoreOperationGreaterThan(expressionArray0[0], expressionArray0[1]);
      expressionArray0[2] = (Expression) coreOperationGreaterThan0;
      coreOperationLessThanOrEqual0.isContextDependent();
      coreOperationGreaterThan0.computeContextDependent();
      CoreFunction coreFunction0 = new CoreFunction(10, expressionArray0);
      coreFunction0.getArg2();
      coreFunction0.computeContextDependent();
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = mock(JXPathContextReferenceImpl.class, new ViolatedAssumptionAnswer());
      RootContext rootContext0 = new RootContext(jXPathContextReferenceImpl0, (NodePointer) null);
      RootContext rootContext1 = rootContext0.getRootContext();
      JXPathContext jXPathContext0 = JXPathContext.newContext((Object) rootContext1);
      Variables variables0 = jXPathContext0.getVariables();
      jXPathContext0.setVariables(variables0);
      RootContext rootContext2 = rootContext0.getRootContext();
      JXPathContextReferenceImpl jXPathContextReferenceImpl1 = new JXPathContextReferenceImpl(jXPathContext0, rootContext2, (Pointer) null);
      jXPathContextReferenceImpl1.getKeyManager();
      jXPathContextReferenceImpl1.setKeyManager((KeyManager) null);
      EvalContext evalContext0 = jXPathContextReferenceImpl1.getAbsoluteRootContext();
      // Undeclared exception!
//      try { 
        coreFunction0.functionContains(evalContext0);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // Incorrect number of arguments: starts-with(org.apache.commons.jxpath.ri.compiler.Constant@0000000001 <= org.apache.commons.jxpath.ri.compiler.Constant@0000000001, org.apache.commons.jxpath.ri.compiler.CoreOperationLessThanOrEqual@0000000002 < (org.apache.commons.jxpath.ri.compiler.CoreOperationLessThanOrEqual@0000000002), org.apache.commons.jxpath.ri.compiler.CoreOperationLessThanOrEqual@0000000002 > (org.apache.commons.jxpath.ri.compiler.CoreOperationLessThan@0000000003))
//         //
//         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test236()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[3];
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Constant constant0 = new Constant("[");
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual(constant0, constant0);
      expressionArray0[0] = (Expression) coreOperationLessThanOrEqual0;
      CoreOperationLessThan coreOperationLessThan0 = new CoreOperationLessThan(coreOperationLessThanOrEqual0, coreOperationLessThanOrEqual0);
      expressionArray0[1] = (Expression) coreOperationLessThan0;
      CoreOperationGreaterThan coreOperationGreaterThan0 = new CoreOperationGreaterThan(expressionArray0[0], expressionArray0[1]);
      expressionArray0[2] = (Expression) coreOperationGreaterThan0;
      coreOperationLessThanOrEqual0.isContextDependent();
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)101;
      byteArray0[1] = (byte) (-4);
      byteArray0[2] = (byte)25;
      byteArray0[3] = (byte)29;
      byteArray0[4] = (byte)28;
      byteArray0[5] = (byte)32;
      byteArray0[6] = (byte)14;
      byteArray0[7] = (byte) (-51);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      CoreFunction coreFunction0 = new CoreFunction(10, expressionArray0);
      coreFunction0.getArg2();
      coreFunction0.isContextDependent();
      // Undeclared exception!
//      try { 
        coreFunction0.functionString((EvalContext) null);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // Incorrect number of arguments: starts-with(org.apache.commons.jxpath.ri.compiler.Constant@0000000001 <= org.apache.commons.jxpath.ri.compiler.Constant@0000000001, org.apache.commons.jxpath.ri.compiler.CoreOperationLessThanOrEqual@0000000002 < (org.apache.commons.jxpath.ri.compiler.CoreOperationLessThanOrEqual@0000000002), org.apache.commons.jxpath.ri.compiler.CoreOperationLessThanOrEqual@0000000002 > (org.apache.commons.jxpath.ri.compiler.CoreOperationLessThan@0000000003))
//         //
//         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test237()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      CoreFunction coreFunction0 = new CoreFunction(27, (Expression[]) null);
      coreFunction0.computeContextDependent();
      // Undeclared exception!
//      try { 
        coreFunction0.functionNumber((EvalContext) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test238()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      EvalContext evalContext0 = null;
      Expression[] expressionArray0 = new Expression[1];
      VariableReference variableReference0 = new VariableReference((QName) null);
      CoreFunction coreFunction0 = new CoreFunction((-724), expressionArray0);
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest((-724));
      // Undeclared exception!
//      try { 
        coreFunction0.functionPosition((EvalContext) null);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // Incorrect number of arguments: unknownFunction-724()(null)
//         //
//         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test239()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[14];
      CoreOperationAnd coreOperationAnd0 = new CoreOperationAnd(expressionArray0);
      CoreOperationDivide coreOperationDivide0 = new CoreOperationDivide(coreOperationAnd0, coreOperationAnd0);
      expressionArray0[0] = (Expression) coreOperationDivide0;
      CoreFunction coreFunction0 = new CoreFunction(16, expressionArray0);
      CoreOperationOr coreOperationOr0 = new CoreOperationOr(expressionArray0);
      CoreOperationEqual coreOperationEqual0 = new CoreOperationEqual(coreOperationOr0, coreOperationAnd0);
      CoreOperationUnion coreOperationUnion0 = new CoreOperationUnion(expressionArray0);
      CoreFunction coreFunction1 = new CoreFunction(27, expressionArray0);
      CoreOperationSubtract coreOperationSubtract0 = new CoreOperationSubtract(coreFunction0, expressionArray0[0]);
      Expression[] expressionArray1 = new Expression[5];
      expressionArray1[0] = (Expression) coreOperationAnd0;
      expressionArray1[1] = (Expression) coreOperationOr0;
      expressionArray1[2] = (Expression) coreOperationEqual0;
      expressionArray1[3] = (Expression) coreFunction0;
      expressionArray1[4] = (Expression) coreFunction0;
      Step[] stepArray0 = new Step[1];
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("2koO]G");
      Step step0 = new Step(16, processingInstructionTest0, expressionArray0);
      stepArray0[0] = step0;
      ExpressionPath expressionPath0 = new ExpressionPath(coreOperationSubtract0, expressionArray1, stepArray0);
      EvalContext evalContext0 = expressionPath0.evalSteps((EvalContext) null);
      EvalContext[] evalContextArray0 = new EvalContext[4];
      evalContextArray0[0] = null;
      evalContextArray0[1] = evalContext0;
      evalContextArray0[2] = null;
      AncestorContext ancestorContext0 = new AncestorContext((EvalContext) null, true, processingInstructionTest0);
      evalContextArray0[3] = (EvalContext) ancestorContext0;
      UnionContext unionContext0 = new UnionContext(evalContext0, evalContextArray0);
      CoreFunction coreFunction2 = new CoreFunction(22, expressionArray1);
      // Undeclared exception!
//      try { 
        coreFunction2.functionSubstring(evalContextArray0[1]);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.evosuite.runtime.System", e);
//      }
  }

  @Test(timeout = 4000)
  public void test240()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[3];
      String string0 = "true";
      CoreFunction coreFunction0 = new CoreFunction(120, expressionArray0);
      EvalContext evalContext0 = null;
      coreFunction0.computeValue((EvalContext) null);
      // Undeclared exception!
//      try { 
        coreFunction0.functionLang((EvalContext) null);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // Incorrect number of arguments: unknownFunction120()(null, null, null)
//         //
//         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test241()  throws Throwable  {
      EvalContext evalContext0 = null;
      Expression[] expressionArray0 = new Expression[15];
      CoreFunction coreFunction0 = new CoreFunction((-724), expressionArray0);
      // Undeclared exception!
//      try { 
        coreFunction0.functionNamespaceURI((EvalContext) null);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // Incorrect number of arguments: unknownFunction-724()(null, null, null, null, null, null, null, null, null, null, null, null, null, null, null)
//         //
//         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test242()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(27, (Expression[]) null);
      CoreOperationDivide coreOperationDivide0 = new CoreOperationDivide(coreFunction0, coreFunction0);
      Expression[] expressionArray0 = new Expression[1];
      expressionArray0[0] = (Expression) coreFunction0;
      CoreFunction coreFunction1 = new CoreFunction(170, expressionArray0);
      ExpressionPath expressionPath0 = new ExpressionPath(coreFunction0, (Expression[]) null, (Step[]) null);
      EvalContext evalContext0 = null;
      NodeTest nodeTest0 = null;
      ParentContext parentContext0 = new ParentContext((EvalContext) null, (NodeTest) null);
      CoreFunction coreFunction2 = new CoreFunction((-2945), expressionArray0);
      // Undeclared exception!
//      try { 
        coreFunction2.functionBoolean(parentContext0);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // Incorrect number of arguments: round()
//         //
//         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test243()  throws Throwable  {
      VariableReference variableReference0 = new VariableReference((QName) null);
      Expression[] expressionArray0 = new Expression[9];
      CoreOperationOr coreOperationOr0 = new CoreOperationOr(expressionArray0);
      expressionArray0[0] = (Expression) coreOperationOr0;
      expressionArray0[1] = (Expression) variableReference0;
      expressionArray0[2] = (Expression) variableReference0;
      expressionArray0[3] = (Expression) variableReference0;
      expressionArray0[4] = (Expression) variableReference0;
      expressionArray0[5] = (Expression) variableReference0;
      expressionArray0[6] = (Expression) variableReference0;
      expressionArray0[4] = (Expression) variableReference0;
      CoreOperationNotEqual coreOperationNotEqual0 = new CoreOperationNotEqual(expressionArray0[4], expressionArray0[5]);
      expressionArray0[8] = (Expression) coreOperationNotEqual0;
      CoreFunction coreFunction0 = new CoreFunction(2, expressionArray0);
      // Undeclared exception!
//      try { 
        coreFunction0.functionKey((EvalContext) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.evosuite.runtime.System", e);
//      }
  }

  @Test(timeout = 4000)
  public void test244()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[6];
      CoreFunction coreFunction0 = new CoreFunction(1539, expressionArray0);
      JXPathContext jXPathContext0 = JXPathContext.newContext((Object) coreFunction0);
      QName qName0 = new QName(")p0l@LrhJ&U-");
      Locale locale0 = Locale.ITALIAN;
      NodePointer nodePointer0 = NodePointer.newNodePointer(qName0, qName0, locale0);
      nodePointer0.getLength();
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = new JXPathContextReferenceImpl(jXPathContext0, coreFunction0, nodePointer0);
      JXPathContext.newContext((Object) qName0);
      EvalContext evalContext0 = jXPathContextReferenceImpl0.getAbsoluteRootContext();
      // Undeclared exception!
//      try { 
        coreFunction0.functionCount(evalContext0);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // Incorrect number of arguments: unknownFunction1539()(null, null, null, null, null, null)
//         //
//         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test245()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      CoreFunction coreFunction0 = new CoreFunction(0, expressionArray0);
      Step[] stepArray0 = new Step[1];
      Step step0 = new Step((-212), (NodeTest) null, expressionArray0);
      stepArray0[0] = step0;
      ChildContext childContext0 = new ChildContext((EvalContext) null, (NodeTest) null, true, true);
      // Undeclared exception!
//      try { 
        coreFunction0.functionCeiling(childContext0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test246()  throws Throwable  {
      EvalContext evalContext0 = null;
      Expression[] expressionArray0 = new Expression[1];
      VariableReference variableReference0 = new VariableReference((QName) null);
      expressionArray0[0] = (Expression) variableReference0;
      CoreFunction coreFunction0 = new CoreFunction((-724), expressionArray0);
      // Undeclared exception!
//      try { 
        coreFunction0.functionNamespaceURI((EvalContext) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.jxpath.ri.compiler.VariableReference", e);
//      }
  }

  @Test(timeout = 4000)
  public void test247()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[8];
      CoreFunction coreFunction0 = new CoreFunction(29, expressionArray0);
      EvalContext evalContext0 = null;
      // Undeclared exception!
//      try { 
        coreFunction0.functionContains((EvalContext) null);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // Incorrect number of arguments: key(null, null, null, null, null, null, null, null)
//         //
//         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test248()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[14];
      CoreOperationAnd coreOperationAnd0 = new CoreOperationAnd(expressionArray0);
      CoreOperationDivide coreOperationDivide0 = new CoreOperationDivide(coreOperationAnd0, coreOperationAnd0);
      expressionArray0[0] = (Expression) coreOperationDivide0;
      CoreFunction coreFunction0 = new CoreFunction(16, expressionArray0);
      EvalContext evalContext0 = null;
      CoreOperationOr coreOperationOr0 = new CoreOperationOr(expressionArray0);
      CoreOperationEqual coreOperationEqual0 = new CoreOperationEqual(coreOperationOr0, coreOperationAnd0);
      CoreOperationUnion coreOperationUnion0 = new CoreOperationUnion(expressionArray0);
      CoreFunction coreFunction1 = new CoreFunction(27, expressionArray0);
      QName qName0 = new QName("xBx*7", "W");
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, "dn6?u]6!}Uw@KOPgtL*");
      // Undeclared exception!
//      try { 
        coreFunction1.functionLang((EvalContext) null);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // Incorrect number of arguments: round((org.apache.commons.jxpath.ri.compiler.CoreOperationAnd@0000000001) div (org.apache.commons.jxpath.ri.compiler.CoreOperationAnd@0000000001), null, null, null, null, null, null, null, null, null, null, null, null, null)
//         //
//         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test249()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[7];
      Constant constant0 = new Constant("1]j\"nVA'VUU");
      expressionArray0[0] = (Expression) constant0;
      CoreOperationDivide coreOperationDivide0 = new CoreOperationDivide(expressionArray0[0], constant0);
      CoreFunction coreFunction0 = new CoreFunction(20, expressionArray0);
      CoreOperationOr coreOperationOr0 = new CoreOperationOr(expressionArray0);
      CoreOperationEqual coreOperationEqual0 = new CoreOperationEqual(coreOperationDivide0, coreFunction0);
      CoreOperationUnion coreOperationUnion0 = new CoreOperationUnion(expressionArray0);
      CoreFunction coreFunction1 = new CoreFunction(27, expressionArray0);
      QName qName0 = new QName(">3\"37_U3zY.bR[?Cp[.", "xB`x*7");
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, "2kFp&");
      PrecedingOrFollowingContext precedingOrFollowingContext0 = new PrecedingOrFollowingContext((EvalContext) null, nodeNameTest0, false);
      precedingOrFollowingContext0.toString();
      // Undeclared exception!
//      try { 
        coreFunction1.functionFloor((EvalContext) null);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // Incorrect number of arguments: round('1]j\"nVA'VUU', null, null, null, null, null, null)
//         //
//         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test250()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[14];
      CoreOperationAnd coreOperationAnd0 = new CoreOperationAnd(expressionArray0);
      QName qName0 = new QName("id");
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, "(4F7~");
      Step step0 = new Step(41, nodeNameTest0, (Expression[]) null);
      Step step1 = new Step(4070, nodeNameTest0, (Expression[]) null);
      Step step2 = new Step(101, nodeNameTest0, (Expression[]) null);
      NodeNameTest nodeNameTest1 = new NodeNameTest(qName0, "(4F7~");
      Step step3 = new Step(22, nodeNameTest1, expressionArray0);
      Step step4 = new Step(101, nodeNameTest0, (Expression[]) null);
      Step step5 = new Step((-1), nodeNameTest1, expressionArray0);
      CoreOperationGreaterThanOrEqual coreOperationGreaterThanOrEqual0 = new CoreOperationGreaterThanOrEqual(coreOperationAnd0, coreOperationAnd0);
      CoreOperationGreaterThan coreOperationGreaterThan0 = new CoreOperationGreaterThan(coreOperationGreaterThanOrEqual0, coreOperationAnd0);
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual(coreOperationGreaterThan0, coreOperationGreaterThanOrEqual0);
      CoreFunction coreFunction0 = new CoreFunction(10, (Expression[]) null);
      EvalContext evalContext0 = null;
      SelfContext selfContext0 = new SelfContext((EvalContext) null, nodeNameTest0);
      PredicateContext predicateContext0 = new PredicateContext((EvalContext) null, coreFunction0);
      // Undeclared exception!
//      try { 
        coreFunction0.functionContains((EvalContext) null);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // Incorrect number of arguments: starts-with()
//         //
//         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test251()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      CoreFunction coreFunction0 = new CoreFunction(2593, expressionArray0);
      Constant constant0 = new Constant("N-F`");
      CoreFunction coreFunction1 = new CoreFunction(2593, expressionArray0);
      coreFunction1.toString();
      // Undeclared exception!
//      try { 
        coreFunction1.functionString((EvalContext) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test252()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[3];
      CoreFunction coreFunction0 = new CoreFunction((-1524), expressionArray0);
      coreFunction0.getArg3();
      CoreOperationDivide coreOperationDivide0 = new CoreOperationDivide((Expression) null, coreFunction0);
      expressionArray0[0] = (Expression) coreOperationDivide0;
      CoreOperationDivide coreOperationDivide1 = new CoreOperationDivide((Expression) null, (Expression) null);
      expressionArray0[1] = (Expression) coreOperationDivide1;
      CoreOperationDivide coreOperationDivide2 = new CoreOperationDivide(coreFunction0, coreOperationDivide1);
      expressionArray0[2] = (Expression) coreOperationDivide2;
      CoreOperationAnd coreOperationAnd0 = new CoreOperationAnd(expressionArray0);
      CoreOperationDivide coreOperationDivide3 = new CoreOperationDivide(coreOperationDivide1, expressionArray0[1]);
      CoreFunction coreFunction1 = new CoreFunction(32767, expressionArray0);
      Step step0 = new Step(13, (NodeTest) null, expressionArray0);
      Step[] stepArray0 = new Step[0];
      ExpressionPath expressionPath0 = new ExpressionPath(coreOperationDivide0, expressionArray0, stepArray0);
      NodeNameTest nodeNameTest0 = new NodeNameTest((QName) null);
      EvalContext evalContext0 = null;
      SelfContext selfContext0 = new SelfContext((EvalContext) null, (NodeTest) null);
      PredicateContext predicateContext0 = new PredicateContext(selfContext0, coreOperationDivide2);
      boolean boolean0 = false;
      AncestorContext ancestorContext0 = new AncestorContext((EvalContext) null, true, (NodeTest) null);
      expressionPath0.createContextForStep((EvalContext) null, (-1278), (NodeTest) null);
      // Undeclared exception!
//      try { 
        coreFunction1.functionSum(predicateContext0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.evosuite.runtime.System", e);
//      }
  }

  @Test(timeout = 4000)
  public void test253()  throws Throwable  {
      Step[] stepArray0 = new Step[20];
      Expression[] expressionArray0 = new Expression[1];
      VariableReference variableReference0 = new VariableReference((QName) null);
      expressionArray0[0] = (Expression) variableReference0;
      CoreFunction coreFunction0 = new CoreFunction((-724), expressionArray0);
      // Undeclared exception!
//      try { 
        coreFunction0.functionCount((EvalContext) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.jxpath.ri.compiler.VariableReference", e);
//      }
  }

  @Test(timeout = 4000)
  public void test254()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(27, (Expression[]) null);
      CoreOperationDivide coreOperationDivide0 = new CoreOperationDivide(coreFunction0, coreFunction0);
      Expression[] expressionArray0 = new Expression[1];
      expressionArray0[0] = (Expression) coreFunction0;
      CoreFunction coreFunction1 = new CoreFunction(170, expressionArray0);
      ExpressionPath expressionPath0 = new ExpressionPath(coreFunction0, (Expression[]) null, (Step[]) null);
      ParentContext parentContext0 = new ParentContext((EvalContext) null, (NodeTest) null);
      ChildContext childContext0 = new ChildContext(parentContext0, (NodeTest) null, false, true);
      // Undeclared exception!
//      try { 
        coreFunction1.functionName(parentContext0);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // Incorrect number of arguments: round()
//         //
//         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test255()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[7];
      Constant constant0 = new Constant("1]j\"nVA'VUU");
      expressionArray0[0] = (Expression) constant0;
      QName qName0 = new QName("1]j\"nVA'VUU");
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, "");
      Step step0 = new Step(41, nodeNameTest0, (Expression[]) null);
      Step step1 = new Step((-1), nodeNameTest0, (Expression[]) null);
      Step step2 = new Step(10, nodeNameTest0, (Expression[]) null);
      CoreOperationOr coreOperationOr0 = new CoreOperationOr(expressionArray0);
      CoreOperationEqual coreOperationEqual0 = new CoreOperationEqual(coreOperationOr0, constant0);
      CoreOperationSubtract coreOperationSubtract0 = new CoreOperationSubtract(constant0, expressionArray0[0]);
      CoreOperationNegate coreOperationNegate0 = new CoreOperationNegate(coreOperationOr0);
      Constant constant1 = new Constant("");
      Expression[] expressionArray1 = new Expression[5];
      expressionArray1[0] = (Expression) coreOperationSubtract0;
      expressionArray1[1] = (Expression) coreOperationOr0;
      expressionArray1[2] = (Expression) coreOperationNegate0;
      expressionArray1[3] = (Expression) coreOperationNegate0;
      expressionArray1[4] = (Expression) coreOperationEqual0;
      CoreFunction coreFunction0 = new CoreFunction((-1), expressionArray1);
      // Undeclared exception!
//      try { 
        coreFunction0.toString();
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.evosuite.runtime.System", e);
//      }
  }

  @Test(timeout = 4000)
  public void test256()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[7];
      Constant constant0 = new Constant("1]j\"nVA'VUU");
      expressionArray0[0] = (Expression) constant0;
      QName qName0 = new QName("1]j\"nVA'VUU");
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, "");
      CoreFunction coreFunction0 = new CoreFunction(20, expressionArray0);
      coreFunction0.getFunctionName();
      coreFunction0.getFunctionName();
      coreFunction0.toString();
      coreFunction0.getArg3();
      coreFunction0.getArg2();
      BasicNodeSet basicNodeSet0 = new BasicNodeSet();
      NodeSetContext nodeSetContext0 = new NodeSetContext((EvalContext) null, basicNodeSet0);
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("true");
      NamespaceContext namespaceContext0 = new NamespaceContext(nodeSetContext0, processingInstructionTest0);
      PredicateContext predicateContext0 = new PredicateContext(namespaceContext0, constant0);
      EvalContext[] evalContextArray0 = new EvalContext[7];
      evalContextArray0[0] = (EvalContext) namespaceContext0;
      evalContextArray0[1] = (EvalContext) namespaceContext0;
      evalContextArray0[2] = (EvalContext) predicateContext0;
      evalContextArray0[3] = (EvalContext) nodeSetContext0;
      evalContextArray0[4] = null;
      evalContextArray0[5] = (EvalContext) namespaceContext0;
      evalContextArray0[6] = null;
      UnionContext unionContext0 = new UnionContext(predicateContext0, evalContextArray0);
      // Undeclared exception!
//      try { 
        coreFunction0.functionSubstring(unionContext0);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // Incorrect number of arguments: true('1]j\"nVA'VUU', null, null, null, null, null, null)
//         //
//         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test257()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(15, (Expression[]) null);
      // Undeclared exception!
//      try { 
        coreFunction0.functionSubstring((EvalContext) null);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // Incorrect number of arguments: string-length()
//         //
//         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test258()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[6];
      CoreFunction coreFunction0 = new CoreFunction(1554, expressionArray0);
      JXPathContext jXPathContext0 = JXPathContext.newContext((Object) coreFunction0);
      QName qName0 = new QName(")p0l@LrhJ&U-");
      Locale locale0 = Locale.ITALIAN;
      NodePointer nodePointer0 = NodePointer.newNodePointer(qName0, qName0, locale0);
      nodePointer0.getLength();
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = new JXPathContextReferenceImpl(jXPathContext0, coreFunction0, nodePointer0);
      JXPathContext.newContext((Object) qName0);
      EvalContext evalContext0 = jXPathContextReferenceImpl0.getAbsoluteRootContext();
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, ")p0l@LrhJ&U-");
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)0;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      PredicateContext predicateContext0 = new PredicateContext(evalContext0, coreFunction0);
      predicateContext0.nextSet();
      // Undeclared exception!
//      try { 
        coreFunction0.functionTrue(predicateContext0);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // Incorrect number of arguments: unknownFunction1554()(null, null, null, null, null, null)
//         //
//         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test259()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[6];
      CoreFunction coreFunction0 = new CoreFunction(1554, expressionArray0);
      JXPathContext.newContext((Object) coreFunction0);
      QName qName0 = new QName(")p0l@LrhJ&U-");
      Locale locale0 = Locale.ITALIAN;
      NodePointer.newNodePointer(qName0, qName0, locale0);
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
      SelfContext selfContext0 = new SelfContext((EvalContext) null, nodeNameTest0);
      PredicateContext predicateContext0 = new PredicateContext((EvalContext) null, coreFunction0);
      AncestorContext ancestorContext0 = new AncestorContext(predicateContext0, false, nodeNameTest0);
      Step[] stepArray0 = new Step[1];
      Step step0 = new Step(1554, nodeNameTest0, expressionArray0);
      stepArray0[0] = step0;
      ExpressionPath expressionPath0 = new ExpressionPath(coreFunction0, expressionArray0, stepArray0);
      int int0 = 24;
      expressionPath0.createContextForStep(predicateContext0, 24, nodeNameTest0);
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(24);
      AncestorContext ancestorContext1 = new AncestorContext(predicateContext0, true, nodeTypeTest0);
      // Undeclared exception!
//      try { 
        coreFunction0.functionSum(ancestorContext1);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // Incorrect number of arguments: unknownFunction1554()(null, null, null, null, null, null)
//         //
//         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test260()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(1, expressionArray0);
      EvalContext evalContext0 = null;
      // Undeclared exception!
//      try { 
        coreFunction0.iteratePointers((EvalContext) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test261()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[3];
      CoreFunction coreFunction0 = new CoreFunction(120, expressionArray0);
      EvalContext evalContext0 = null;
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("true");
      // Undeclared exception!
//      try { 
        coreFunction0.functionNull((EvalContext) null);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // Incorrect number of arguments: unknownFunction120()(null, null, null)
//         //
//         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test262()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[14];
      CoreOperationAnd coreOperationAnd0 = new CoreOperationAnd(expressionArray0);
      CoreFunction coreFunction0 = new CoreFunction(16, expressionArray0);
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("hqW\";");
      BasicNodeSet basicNodeSet0 = new BasicNodeSet();
      // Undeclared exception!
//      try { 
        coreFunction0.functionSubstring((EvalContext) null);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // Incorrect number of arguments: normalize-space(null, null, null, null, null, null, null, null, null, null, null, null, null, null)
//         //
//         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test263()  throws Throwable  {
      CoreOperationSubtract coreOperationSubtract0 = new CoreOperationSubtract((Expression) null, (Expression) null);
      Expression[] expressionArray0 = new Expression[2];
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd(expressionArray0);
      expressionArray0[0] = (Expression) coreOperationAdd0;
      expressionArray0[1] = (Expression) coreOperationSubtract0;
      CoreFunction coreFunction0 = new CoreFunction(2795, expressionArray0);
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("");
      CoreFunction coreFunction1 = new CoreFunction((-1), expressionArray0);
      // Undeclared exception!
//      try { 
        coreFunction1.functionFalse((EvalContext) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.evosuite.runtime.System", e);
//      }
  }

  @Test(timeout = 4000)
  public void test264()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[3];
      CoreOperationUnion coreOperationUnion0 = new CoreOperationUnion(expressionArray0);
      CoreFunction coreFunction0 = new CoreFunction(25, expressionArray0);
      EvalContext evalContext0 = null;
      // Undeclared exception!
//      try { 
        coreFunction0.iteratePointers((EvalContext) null);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // Incorrect number of arguments: floor(null, null, null)
//         //
//         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test265()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(27, (Expression[]) null);
      Step step0 = new Step((-212), (NodeTest) null, (Expression[]) null);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      NodeNameTest nodeNameTest0 = new NodeNameTest((QName) null, "starts-with");
      NamespaceContext namespaceContext0 = new NamespaceContext((EvalContext) null, nodeNameTest0);
      SelfContext selfContext0 = new SelfContext(namespaceContext0, nodeNameTest0);
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("substring-before");
      CoreFunction coreFunction1 = new CoreFunction(2906, (Expression[]) null);
      // Undeclared exception!
//      try { 
        coreFunction0.functionNormalizeSpace(namespaceContext0);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // Incorrect number of arguments: round()
//         //
//         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test266()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[3];
      CoreFunction coreFunction0 = new CoreFunction(124, expressionArray0);
      EvalContext evalContext0 = null;
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("");
      CoreFunction coreFunction1 = new CoreFunction(124, expressionArray0);
      // Undeclared exception!
//      try { 
        coreFunction1.functionLocalName((EvalContext) null);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // Incorrect number of arguments: unknownFunction124()(null, null, null)
//         //
//         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test267()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(32, (Expression[]) null);
      EvalContext evalContext0 = null;
      EvalContext evalContext1 = null;
      // Undeclared exception!
//      try { 
        coreFunction0.functionLast((EvalContext) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test268()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(13, expressionArray0);
      EvalContext evalContext0 = null;
      // Undeclared exception!
//      try { 
        coreFunction0.functionTranslate((EvalContext) null);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // Incorrect number of arguments: substring-after()
//         //
//         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test269()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[5];
      Double double0 = new Double(0.0);
      Constant constant0 = new Constant(double0);
      expressionArray0[0] = (Expression) constant0;
      Constant constant1 = new Constant(double0);
      expressionArray0[1] = (Expression) constant1;
      CoreOperationNegate coreOperationNegate0 = new CoreOperationNegate(constant0);
      expressionArray0[2] = (Expression) coreOperationNegate0;
      CoreFunction coreFunction0 = new CoreFunction(13, expressionArray0);
      Expression expression0 = coreFunction0.getArg2();
      expressionArray0[3] = expression0;
      NameAttributeTest nameAttributeTest0 = new NameAttributeTest(expressionArray0[3], expressionArray0[1]);
      expressionArray0[4] = (Expression) nameAttributeTest0;
      CoreOperationAnd coreOperationAnd0 = new CoreOperationAnd(expressionArray0);
      CoreFunction coreFunction1 = new CoreFunction(2818, expressionArray0);
      // Undeclared exception!
//      try { 
        coreFunction0.functionLocalName((EvalContext) null);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // Incorrect number of arguments: substring-after(0, 0, -org.apache.commons.jxpath.ri.compiler.Constant@0000000001, 0, org.apache.commons.jxpath.ri.compiler.Constant@0000000002 = org.apache.commons.jxpath.ri.compiler.Constant@0000000002)
//         //
//         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test270()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      CoreOperationAnd coreOperationAnd0 = new CoreOperationAnd(expressionArray0);
      CoreOperationDivide coreOperationDivide0 = new CoreOperationDivide(coreOperationAnd0, coreOperationAnd0);
      CoreFunction coreFunction0 = new CoreFunction((-15), expressionArray0);
      Step[] stepArray0 = new Step[5];
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("F}]P< B6tr*U%+");
      Step step0 = new Step(0, processingInstructionTest0, expressionArray0);
      stepArray0[0] = step0;
      Step step1 = new Step(32, processingInstructionTest0, expressionArray0);
      stepArray0[1] = step1;
      Step step2 = new Step((-15), processingInstructionTest0, expressionArray0);
      stepArray0[2] = step2;
      Expression[] expressionArray1 = new Expression[5];
      expressionArray1[0] = (Expression) coreOperationDivide0;
      expressionArray1[1] = (Expression) coreFunction0;
      expressionArray1[2] = (Expression) coreFunction0;
      expressionArray1[3] = (Expression) coreOperationDivide0;
      expressionArray1[4] = (Expression) coreOperationDivide0;
      Step step3 = new Step(56, processingInstructionTest0, expressionArray1);
      stepArray0[3] = step3;
      Step step4 = new Step((-15), processingInstructionTest0, expressionArray1);
      stepArray0[4] = step4;
      ExpressionPath expressionPath0 = new ExpressionPath(coreOperationAnd0, expressionArray0, stepArray0);
      CoreOperationOr coreOperationOr0 = new CoreOperationOr(expressionArray1);
      CoreOperationEqual coreOperationEqual0 = new CoreOperationEqual(expressionArray1[0], expressionArray1[1]);
      CoreOperationSubtract coreOperationSubtract0 = new CoreOperationSubtract(expressionPath0, expressionArray1[2]);
      CoreOperationNegate coreOperationNegate0 = new CoreOperationNegate(expressionPath0);
      Constant constant0 = new Constant("Invalid argument type for 'sum': ");
      CoreFunction coreFunction1 = new CoreFunction(0, expressionArray0);
      // Undeclared exception!
//      try { 
        coreFunction0.functionID((EvalContext) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test271()  throws Throwable  {
      CoreOperationSubtract coreOperationSubtract0 = new CoreOperationSubtract((Expression) null, (Expression) null);
      Expression[] expressionArray0 = new Expression[8];
      expressionArray0[0] = null;
      expressionArray0[1] = null;
      expressionArray0[2] = (Expression) coreOperationSubtract0;
      expressionArray0[3] = null;
      expressionArray0[4] = (Expression) coreOperationSubtract0;
      expressionArray0[5] = null;
      CoreOperationUnion coreOperationUnion0 = new CoreOperationUnion(expressionArray0);
      expressionArray0[6] = (Expression) coreOperationUnion0;
      expressionArray0[7] = null;
      CoreFunction coreFunction0 = new CoreFunction((-400), expressionArray0);
      EvalContext evalContext0 = null;
      coreFunction0.iteratePointers((EvalContext) null);
      CoreFunction coreFunction1 = new CoreFunction((-400), expressionArray0);
      // Undeclared exception!
//      try { 
        coreFunction1.functionStartsWith((EvalContext) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.evosuite.runtime.System", e);
//      }
  }

  @Test(timeout = 4000)
  public void test272()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[8];
      CoreOperationAnd coreOperationAnd0 = new CoreOperationAnd(expressionArray0);
      CoreOperationMod coreOperationMod0 = new CoreOperationMod(expressionArray0[1], expressionArray0[6]);
      QName qName0 = new QName("p@", "AJGvA");
      ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, expressionArray0);
      CoreOperationUnion coreOperationUnion0 = new CoreOperationUnion(expressionArray0);
      CoreFunction coreFunction0 = new CoreFunction((-1496), expressionArray0);
      EvalContext evalContext0 = null;
      QName qName1 = new QName("Yd@E-.ScR", "xB`x*7");
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName1, "count");
      PrecedingOrFollowingContext precedingOrFollowingContext0 = new PrecedingOrFollowingContext((EvalContext) null, nodeNameTest0, false);
      precedingOrFollowingContext0.toString();
      // Undeclared exception!
//      try { 
        coreFunction0.functionCeiling((EvalContext) null);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // Incorrect number of arguments: unknownFunction-1496()(null, null, null, null, null, null, null, null)
//         //
//         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test273()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[14];
      CoreOperationAnd coreOperationAnd0 = new CoreOperationAnd(expressionArray0);
      CoreOperationDivide coreOperationDivide0 = new CoreOperationDivide(coreOperationAnd0, coreOperationAnd0);
      expressionArray0[0] = (Expression) coreOperationDivide0;
      CoreFunction coreFunction0 = new CoreFunction(16, expressionArray0);
      Step[] stepArray0 = new Step[1];
      ExpressionPath expressionPath0 = new ExpressionPath(coreOperationAnd0, expressionArray0, stepArray0);
      CoreOperationOr coreOperationOr0 = new CoreOperationOr(expressionArray0);
      CoreOperationEqual coreOperationEqual0 = new CoreOperationEqual(coreOperationOr0, coreOperationAnd0);
      CoreOperationSubtract coreOperationSubtract0 = new CoreOperationSubtract(expressionPath0, expressionArray0[0]);
      CoreOperationNegate coreOperationNegate0 = new CoreOperationNegate(coreOperationOr0);
      Constant constant0 = new Constant("V(*dFL`O\\@1Ugr");
      CoreFunction coreFunction1 = new CoreFunction(16, expressionArray0);
      coreFunction1.toString();
      // Undeclared exception!
//      try { 
        coreFunction1.functionString((EvalContext) null);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // Incorrect number of arguments: normalize-space((org.apache.commons.jxpath.ri.compiler.CoreOperationAnd@0000000001) div (org.apache.commons.jxpath.ri.compiler.CoreOperationAnd@0000000001), null, null, null, null, null, null, null, null, null, null, null, null, null)
//         //
//         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test274()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction((-400), expressionArray0);
      CoreFunction coreFunction1 = new CoreFunction(10, expressionArray0);
      // Undeclared exception!
//      try { 
        coreFunction1.functionStringLength((EvalContext) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test275()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction((-400), expressionArray0);
      Constant constant0 = new Constant("T)tW+3");
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest((-400));
      AttributeContext attributeContext0 = new AttributeContext((EvalContext) null, nodeTypeTest0);
      PredicateContext predicateContext0 = new PredicateContext(attributeContext0, constant0);
      nodeTypeTest0.toString();
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("T)tW+3");
      NameAttributeTest nameAttributeTest0 = new NameAttributeTest(constant0, coreFunction0);
      nameAttributeTest0.toString();
      BasicNodeSet basicNodeSet0 = new BasicNodeSet();
      NodeSetContext nodeSetContext0 = new NodeSetContext(attributeContext0, basicNodeSet0);
      coreFunction0.functionString(nodeSetContext0);
      // Undeclared exception!
//      try { 
        coreFunction0.functionSubstringAfter(predicateContext0);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // Incorrect number of arguments: unknownFunction-400()()
//         //
//         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test276()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[3];
      CoreFunction coreFunction0 = new CoreFunction(124, expressionArray0);
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("");
      CoreFunction coreFunction1 = new CoreFunction(124, expressionArray0);
      // Undeclared exception!
//      try { 
        coreFunction1.functionFalse((EvalContext) null);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // Incorrect number of arguments: unknownFunction124()(null, null, null)
//         //
//         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test277()  throws Throwable  {
      int int0 = (-1918);
      Expression[] expressionArray0 = null;
      CoreFunction coreFunction0 = new CoreFunction((-1918), (Expression[]) null);
      // Undeclared exception!
//      try { 
        coreFunction0.getArg1();
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test278()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[2];
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      QName qName0 = new QName("", "");
      ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, expressionArray0);
      expressionArray0[0] = (Expression) extensionFunction0;
      CoreOperationGreaterThanOrEqual coreOperationGreaterThanOrEqual0 = new CoreOperationGreaterThanOrEqual(extensionFunction0, extensionFunction0);
      expressionArray0[1] = (Expression) coreOperationGreaterThanOrEqual0;
      CoreFunction coreFunction0 = new CoreFunction((-1), expressionArray0);
      JXPathContext jXPathContext0 = JXPathContext.newContext((Object) expressionArray0[1]);
      JXPathContext jXPathContext1 = JXPathContext.newContext(jXPathContext0, (Object) coreOperationGreaterThanOrEqual0);
      VariablePointer variablePointer0 = new VariablePointer(qName0);
      Locale locale0 = Locale.CHINA;
      NodePointer nodePointer0 = NodePointer.newNodePointer(qName0, variablePointer0, locale0);
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = new JXPathContextReferenceImpl(jXPathContext1, expressionArray0[1], nodePointer0);
      RootContext rootContext0 = new RootContext(jXPathContextReferenceImpl0, variablePointer0);
      PredicateContext predicateContext0 = new PredicateContext(rootContext0, expressionArray0[0]);
      // Undeclared exception!
//      try { 
        coreFunction0.functionName(predicateContext0);
//        fail("Expecting exception: StackOverflowError");
      
//      } catch(StackOverflowError e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test279()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      CoreFunction coreFunction0 = new CoreFunction((-3603), expressionArray0);
      EvalContext evalContext0 = null;
      coreFunction0.iteratePointers((EvalContext) null);
      // Undeclared exception!
//      try { 
        coreFunction0.functionRound((EvalContext) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test280()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "!OAY");
      EvalContext evalContext0 = null;
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(2526, expressionArray0);
      // Undeclared exception!
//      try { 
        coreFunction0.functionRound((EvalContext) null);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // Incorrect number of arguments: unknownFunction2526()()
//         //
//         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test281()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction((-400), expressionArray0);
      // Undeclared exception!
//      try { 
        coreFunction0.functionNot((EvalContext) null);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // Incorrect number of arguments: unknownFunction-400()()
//         //
//         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test282()  throws Throwable  {
      Expression[] expressionArray0 = null;
      CoreOperationAnd coreOperationAnd0 = new CoreOperationAnd((Expression[]) null);
      CoreOperationDivide coreOperationDivide0 = new CoreOperationDivide(coreOperationAnd0, coreOperationAnd0);
      CoreFunction coreFunction0 = new CoreFunction(27, (Expression[]) null);
      Step step0 = new Step((-212), (NodeTest) null, (Expression[]) null);
      QName qName0 = null;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      String string0 = "";
      NodeNameTest nodeNameTest0 = new NodeNameTest((QName) null, "starts-with");
      NamespaceContext namespaceContext0 = new NamespaceContext((EvalContext) null, nodeNameTest0);
      SelfContext selfContext0 = new SelfContext(namespaceContext0, nodeNameTest0);
      PredicateContext predicateContext0 = new PredicateContext(selfContext0, coreOperationDivide0);
      AncestorContext ancestorContext0 = new AncestorContext(predicateContext0, false, (NodeTest) null);
      DescendantContext descendantContext0 = new DescendantContext((EvalContext) null, false, nodeNameTest0);
      // Undeclared exception!
//      try { 
        coreFunction0.functionSubstring(predicateContext0);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // Incorrect number of arguments: round()
//         //
//         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test283()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(476, (Expression[]) null);
      assertEquals(0, coreFunction0.getArgumentCount());
      
      QName qName0 = new QName("unknownFunction");
      VariablePointer variablePointer0 = new VariablePointer(qName0);
      EvalContext[] evalContextArray0 = new EvalContext[1];
      coreFunction0.functionTrue(evalContextArray0[0]);
      coreFunction0.functionTrue(evalContextArray0[0]);
      assertEquals(476, coreFunction0.getFunctionCode());
  }

  @Test(timeout = 4000)
  public void test284()  throws Throwable  {
      CoreOperationOr coreOperationOr0 = new CoreOperationOr((Expression[]) null);
      CoreOperationEqual coreOperationEqual0 = new CoreOperationEqual(coreOperationOr0, coreOperationOr0);
      CoreOperationMod coreOperationMod0 = new CoreOperationMod(coreOperationEqual0, coreOperationEqual0);
      CoreOperationGreaterThan coreOperationGreaterThan0 = new CoreOperationGreaterThan(coreOperationMod0, coreOperationOr0);
      CoreFunction coreFunction0 = new CoreFunction((-2383), (Expression[]) null);
      coreFunction0.getArgumentCount();
      AncestorContext ancestorContext0 = new AncestorContext((EvalContext) null, false, (NodeTest) null);
      // Undeclared exception!
//      try { 
        coreFunction0.functionPosition((EvalContext) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test285()  throws Throwable  {
      EvalContext evalContext0 = null;
      Expression[] expressionArray0 = new Expression[5];
      boolean boolean0 = true;
      Step[] stepArray0 = new Step[5];
      QName qName0 = new QName("Nx(|I'h@`MC=]i<T!?");
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, "QRAPD1#");
      Expression[] expressionArray1 = new Expression[2];
      CoreOperationOr coreOperationOr0 = new CoreOperationOr(expressionArray1);
      expressionArray1[0] = (Expression) coreOperationOr0;
      CoreOperationAnd coreOperationAnd0 = new CoreOperationAnd(expressionArray0);
      expressionArray1[1] = (Expression) coreOperationAnd0;
      Step step0 = new Step((-1), nodeNameTest0, expressionArray1);
      stepArray0[0] = step0;
      Step step1 = new Step((-3603), nodeNameTest0, expressionArray1);
      stepArray0[1] = step1;
      Step step2 = new Step((-2785), nodeNameTest0, expressionArray1);
      stepArray0[2] = step2;
      Step step3 = new Step((-2366), nodeNameTest0, expressionArray0);
      stepArray0[3] = step3;
      Step step4 = new Step((-2785), nodeNameTest0, (Expression[]) null);
      stepArray0[4] = step4;
      CoreFunction coreFunction0 = new CoreFunction((-2366), expressionArray1);
      // Undeclared exception!
      coreFunction0.functionContains((EvalContext) null);
  }

  @Test(timeout = 4000)
  public void test286()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[3];
      CoreOperationSubtract coreOperationSubtract0 = new CoreOperationSubtract((Expression) null, (Expression) null);
      expressionArray0[0] = (Expression) coreOperationSubtract0;
      CoreOperationEqual coreOperationEqual0 = new CoreOperationEqual(expressionArray0[0], expressionArray0[0]);
      expressionArray0[1] = (Expression) coreOperationEqual0;
      CoreFunction coreFunction0 = new CoreFunction(745, expressionArray0);
      coreFunction0.getArg3();
      EvalContext evalContext0 = null;
      BasicNodeSet basicNodeSet0 = new BasicNodeSet();
      NodeSetContext nodeSetContext0 = new NodeSetContext((EvalContext) null, basicNodeSet0);
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("");
      coreOperationEqual0.toString();
      // Undeclared exception!
//      try { 
        coreFunction0.functionSubstring(nodeSetContext0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.jxpath.ri.compiler.CoreOperationSubtract", e);
//      }
  }

  @Test(timeout = 4000)
  public void test287()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[6];
      CoreFunction coreFunction0 = new CoreFunction(1554, expressionArray0);
      JXPathContext jXPathContext0 = JXPathContext.newContext((Object) coreFunction0);
      QName qName0 = new QName(")p0l@LrhJ&U-");
      Locale locale0 = Locale.ITALIAN;
      NodePointer nodePointer0 = NodePointer.newNodePointer(qName0, qName0, locale0);
      nodePointer0.getLength();
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = new JXPathContextReferenceImpl(jXPathContext0, coreFunction0, nodePointer0);
      JXPathContext.newContext((Object) qName0);
      EvalContext evalContext0 = jXPathContextReferenceImpl0.getAbsoluteRootContext();
      // Undeclared exception!
//      try { 
        coreFunction0.functionStringLength(evalContext0);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // Incorrect number of arguments: unknownFunction1554()(null, null, null, null, null, null)
//         //
//         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test288()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction((-3603), expressionArray0);
      EvalContext evalContext0 = null;
      coreFunction0.iteratePointers((EvalContext) null);
      // Undeclared exception!
//      try { 
        coreFunction0.functionStartsWith((EvalContext) null);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // Incorrect number of arguments: unknownFunction-3603()()
//         //
//         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test289()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      Expression[] expressionArray1 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(1554, expressionArray1);
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl)JXPathContext.newContext((Object) coreFunction0);
      QName qName0 = new QName(")p0l@LrhJ&U-");
      Locale locale0 = Locale.ITALIAN;
      BeanPointer beanPointer0 = (BeanPointer)NodePointer.newNodePointer(qName0, qName0, locale0);
      beanPointer0.getLength();
      RootContext rootContext0 = new RootContext(jXPathContextReferenceImpl0, beanPointer0);
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, "f1W");
      AncestorContext ancestorContext0 = new AncestorContext(rootContext0, true, nodeNameTest0);
      PredicateContext predicateContext0 = new PredicateContext(ancestorContext0, coreFunction0);
      BasicNodeSet basicNodeSet0 = new BasicNodeSet();
      NodeSetContext nodeSetContext0 = new NodeSetContext(predicateContext0, basicNodeSet0);
      coreFunction0.functionNull(nodeSetContext0);
      JXPathContextReferenceImpl jXPathContextReferenceImpl1 = new JXPathContextReferenceImpl(jXPathContextReferenceImpl0, (Object) null, beanPointer0);
      PredicateContext predicateContext1 = new PredicateContext(ancestorContext0, coreFunction0);
      JXPathContext.newContext((Object) predicateContext1);
      jXPathContextReferenceImpl1.getAbsoluteRootContext();
      coreFunction0.functionStringLength(rootContext0);
      coreFunction0.functionName(rootContext0);
      CoreFunction coreFunction1 = new CoreFunction(1, expressionArray0);
      // Undeclared exception!
//      try { 
        coreFunction1.functionBoolean(predicateContext1);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // Incorrect number of arguments: last()
//         //
//         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test290()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[14];
      CoreOperationAnd coreOperationAnd0 = new CoreOperationAnd(expressionArray0);
      CoreOperationDivide coreOperationDivide0 = new CoreOperationDivide(coreOperationAnd0, coreOperationAnd0);
      expressionArray0[0] = (Expression) coreOperationDivide0;
      CoreFunction coreFunction0 = new CoreFunction(16, expressionArray0);
      Step[] stepArray0 = new Step[1];
      ExpressionPath expressionPath0 = new ExpressionPath(coreOperationAnd0, expressionArray0, stepArray0);
      expressionPath0.createContextForStep((EvalContext) null, 16, (NodeTest) null);
      ChildContext childContext0 = new ChildContext((EvalContext) null, (NodeTest) null, true, false);
      // Undeclared exception!
//      try { 
        coreFunction0.functionName((EvalContext) null);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // Incorrect number of arguments: normalize-space((org.apache.commons.jxpath.ri.compiler.CoreOperationAnd@0000000001) div (org.apache.commons.jxpath.ri.compiler.CoreOperationAnd@0000000001), null, null, null, null, null, null, null, null, null, null, null, null, null)
//         //
//         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test291()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[3];
      CoreOperationSubtract coreOperationSubtract0 = new CoreOperationSubtract((Expression) null, (Expression) null);
      expressionArray0[0] = (Expression) coreOperationSubtract0;
      CoreOperationEqual coreOperationEqual0 = new CoreOperationEqual(expressionArray0[0], expressionArray0[0]);
      expressionArray0[1] = (Expression) coreOperationEqual0;
      CoreOperationNegate coreOperationNegate0 = new CoreOperationNegate(expressionArray0[1]);
      expressionArray0[2] = (Expression) coreOperationNegate0;
      CoreFunction coreFunction0 = new CoreFunction(745, expressionArray0);
      coreFunction0.getArg3();
      BasicNodeSet basicNodeSet0 = new BasicNodeSet();
      NodeSetContext nodeSetContext0 = new NodeSetContext((EvalContext) null, basicNodeSet0);
      Constant constant0 = new Constant("a5>");
      PredicateContext predicateContext0 = new PredicateContext(nodeSetContext0, constant0);
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("");
      coreOperationEqual0.toString();
      SelfContext selfContext0 = new SelfContext(predicateContext0, processingInstructionTest0);
      PrecedingOrFollowingContext precedingOrFollowingContext0 = new PrecedingOrFollowingContext(selfContext0, processingInstructionTest0, true);
      // Undeclared exception!
//      try { 
        coreFunction0.functionContains(precedingOrFollowingContext0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.evosuite.runtime.System", e);
//      }
  }

  @Test(timeout = 4000)
  public void test292()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      CoreOperationAnd coreOperationAnd0 = new CoreOperationAnd(expressionArray0);
      CoreOperationDivide coreOperationDivide0 = new CoreOperationDivide(coreOperationAnd0, coreOperationAnd0);
      expressionArray0[0] = (Expression) coreOperationDivide0;
      CoreFunction coreFunction0 = new CoreFunction(0, expressionArray0);
      Expression[] expressionArray1 = new Expression[8];
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual(coreOperationAnd0, coreFunction0);
      expressionArray1[0] = (Expression) coreOperationLessThanOrEqual0;
      expressionArray1[1] = (Expression) coreOperationDivide0;
      expressionArray1[2] = (Expression) coreFunction0;
      expressionArray1[3] = (Expression) coreOperationAnd0;
      expressionArray1[4] = (Expression) coreOperationDivide0;
      expressionArray1[5] = (Expression) coreOperationAnd0;
      expressionArray1[6] = (Expression) coreOperationAnd0;
      expressionArray1[7] = (Expression) coreOperationAnd0;
      CoreOperationAnd coreOperationAnd1 = new CoreOperationAnd(expressionArray1);
      CoreOperationMod coreOperationMod0 = new CoreOperationMod(expressionArray1[1], expressionArray1[6]);
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd(expressionArray0);
      QName qName0 = new QName("p@", "AJGvA");
      ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, expressionArray1);
      CoreOperationUnion coreOperationUnion0 = new CoreOperationUnion(expressionArray1);
      CoreFunction coreFunction1 = new CoreFunction((-1496), expressionArray1);
      QName qName1 = new QName("Yd@E-.ScR", "xB`x*7");
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName1, "count");
      PrecedingOrFollowingContext precedingOrFollowingContext0 = new PrecedingOrFollowingContext((EvalContext) null, nodeNameTest0, false);
      precedingOrFollowingContext0.toString();
      // Undeclared exception!
//      try { 
        coreFunction0.functionKey(precedingOrFollowingContext0);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // Incorrect number of arguments: unknownFunction0()((org.apache.commons.jxpath.ri.compiler.CoreOperationAnd@0000000001) div (org.apache.commons.jxpath.ri.compiler.CoreOperationAnd@0000000001))
//         //
//         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test293()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[5];
      Step[] stepArray0 = new Step[5];
      QName qName0 = new QName("Nx(|I'h@`MC=]i<T!?");
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, "QRAPD1#");
      Expression[] expressionArray1 = new Expression[2];
      CoreOperationOr coreOperationOr0 = new CoreOperationOr(expressionArray1);
      expressionArray1[0] = (Expression) coreOperationOr0;
      CoreOperationAnd coreOperationAnd0 = new CoreOperationAnd(expressionArray0);
      expressionArray1[1] = (Expression) coreOperationAnd0;
      Step step0 = new Step((-1), nodeNameTest0, expressionArray1);
      stepArray0[0] = step0;
      Step step1 = new Step((-3603), nodeNameTest0, expressionArray1);
      stepArray0[1] = step1;
      Step step2 = new Step((-2785), nodeNameTest0, expressionArray1);
      stepArray0[2] = step2;
      Step step3 = new Step((-2366), nodeNameTest0, expressionArray0);
      stepArray0[3] = step3;
      Step step4 = new Step((-2785), nodeNameTest0, (Expression[]) null);
      stepArray0[4] = step4;
      LocationPath locationPath0 = new LocationPath(true, stepArray0);
      CoreOperationNegate coreOperationNegate0 = new CoreOperationNegate(locationPath0);
      expressionArray0[0] = (Expression) coreOperationNegate0;
      CoreOperationOr coreOperationOr1 = new CoreOperationOr(expressionArray1);
      CoreOperationEqual coreOperationEqual0 = new CoreOperationEqual(locationPath0, coreOperationOr1);
      expressionArray0[1] = (Expression) coreOperationEqual0;
      CoreOperationSubtract coreOperationSubtract0 = new CoreOperationSubtract(expressionArray0[0], locationPath0);
      expressionArray0[2] = (Expression) coreOperationSubtract0;
      CoreOperationNegate coreOperationNegate1 = new CoreOperationNegate(locationPath0);
      expressionArray0[3] = (Expression) coreOperationNegate1;
      Constant constant0 = new Constant("Nx(|I'h@`MC=]i<T!?");
      expressionArray0[4] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction((-2785), expressionArray0);
      // Undeclared exception!
//      try { 
        coreFunction0.functionID((EvalContext) null);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // Incorrect number of arguments: unknownFunction-2785()(-org.apache.commons.jxpath.ri.compiler.LocationPath@0000000010, org.apache.commons.jxpath.ri.compiler.LocationPath@0000000010 = (org.apache.commons.jxpath.ri.compiler.CoreOperationOr@0000000012), org.apache.commons.jxpath.ri.compiler.CoreOperationNegate@0000000011 - org.apache.commons.jxpath.ri.compiler.LocationPath@0000000010, -org.apache.commons.jxpath.ri.compiler.LocationPath@0000000010, 'Nx(|I'h@`MC=]i<T!?')
//         //
//         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test294()  throws Throwable  {
      CoreOperationOr coreOperationOr0 = new CoreOperationOr((Expression[]) null);
      CoreOperationEqual coreOperationEqual0 = new CoreOperationEqual(coreOperationOr0, coreOperationOr0);
      CoreOperationMod coreOperationMod0 = new CoreOperationMod(coreOperationEqual0, coreOperationEqual0);
      CoreOperationGreaterThan coreOperationGreaterThan0 = new CoreOperationGreaterThan(coreOperationMod0, coreOperationOr0);
      CoreFunction coreFunction0 = new CoreFunction((-2383), (Expression[]) null);
      coreFunction0.getArgumentCount();
      AncestorContext ancestorContext0 = new AncestorContext((EvalContext) null, false, (NodeTest) null);
      // Undeclared exception!
//      try { 
        coreFunction0.functionSubstring(ancestorContext0);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // Incorrect number of arguments: unknownFunction-2383()()
//         //
//         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test295()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[3];
      QName qName0 = new QName("");
      VariableReference variableReference0 = new VariableReference(qName0);
      variableReference0.toString();
      expressionArray0[0] = (Expression) variableReference0;
      NameAttributeTest nameAttributeTest0 = new NameAttributeTest(variableReference0, expressionArray0[0]);
      NameAttributeTest nameAttributeTest1 = new NameAttributeTest(expressionArray0[1], expressionArray0[0]);
      expressionArray0[2] = (Expression) nameAttributeTest1;
      CoreFunction coreFunction0 = new CoreFunction(91, expressionArray0);
      EvalContext evalContext0 = null;
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("");
      // Undeclared exception!
//      try { 
        coreFunction0.functionTranslate((EvalContext) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.jxpath.ri.compiler.VariableReference", e);
//      }
  }

  @Test(timeout = 4000)
  public void test296()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(1, (Expression[]) null);
      coreFunction0.getFunctionName();
      coreFunction0.getFunctionName();
      coreFunction0.toString();
      // Undeclared exception!
//      try { 
        coreFunction0.getArg3();
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test297()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      CoreOperationAnd coreOperationAnd0 = new CoreOperationAnd(expressionArray0);
      CoreOperationDivide coreOperationDivide0 = new CoreOperationDivide(coreOperationAnd0, coreOperationAnd0);
      expressionArray0[0] = (Expression) coreOperationDivide0;
      CoreFunction coreFunction0 = new CoreFunction(0, expressionArray0);
      Step step0 = new Step((-212), (NodeTest) null, expressionArray0);
      coreFunction0.getFunctionName();
      CoreFunction coreFunction1 = new CoreFunction((-1195), expressionArray0);
      EvalContext evalContext0 = null;
      // Undeclared exception!
//      try { 
        coreFunction1.functionContains((EvalContext) null);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // Incorrect number of arguments: unknownFunction-1195()((org.apache.commons.jxpath.ri.compiler.CoreOperationAnd@0000000001) div (org.apache.commons.jxpath.ri.compiler.CoreOperationAnd@0000000001))
//         //
//         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test298()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(1, (Expression[]) null);
      EvalContext evalContext0 = null;
      // Undeclared exception!
//      try { 
        coreFunction0.functionSubstringAfter((EvalContext) null);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // Incorrect number of arguments: last()
//         //
//         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test299()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[8];
      CoreFunction coreFunction0 = new CoreFunction(1466, expressionArray0);
      Expression expression0 = coreFunction0.getArg3();
      expressionArray0[0] = null;
      CoreOperationOr coreOperationOr0 = new CoreOperationOr(expressionArray0);
      expressionArray0[1] = (Expression) coreOperationOr0;
      CoreOperationGreaterThan coreOperationGreaterThan0 = new CoreOperationGreaterThan(expressionArray0[1], expression0);
      expressionArray0[2] = (Expression) coreOperationGreaterThan0;
      Expression expression1 = coreFunction0.getArg3();
      assertNotNull(expression1);
      
      expressionArray0[3] = expression1;
      CoreOperationNegate coreOperationNegate0 = new CoreOperationNegate(coreOperationOr0);
      CoreOperationMod coreOperationMod0 = new CoreOperationMod(expressionArray0[2], coreOperationNegate0);
      expressionArray0[4] = (Expression) coreOperationMod0;
      QName qName0 = new QName("org.apache.commons.jxpath.ri.compiler.CoreOperationGreaterThanOrEqual", "org.apache.commons.jxpath.ri.compiler.CoreOperationGreaterThanOrEqual");
      ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, expressionArray0);
      Step[] stepArray0 = new Step[0];
      ExpressionPath expressionPath0 = new ExpressionPath(extensionFunction0, expressionArray0, stepArray0);
      expressionArray0[5] = (Expression) expressionPath0;
      CoreOperationUnion coreOperationUnion0 = new CoreOperationUnion(expressionArray0);
      expressionArray0[6] = (Expression) coreOperationUnion0;
      ExpressionPath expressionPath1 = new ExpressionPath(coreOperationUnion0, expressionArray0, stepArray0);
      expressionArray0[7] = (Expression) expressionPath1;
      CoreFunction coreFunction1 = new CoreFunction((-124), expressionArray0);
      assertEquals((-124), coreFunction1.getFunctionCode());
  }

  @Test(timeout = 4000)
  public void test300()  throws Throwable  {
      int int0 = (-1195);
      Expression[] expressionArray0 = new Expression[1];
      LocationPath locationPath0 = new LocationPath(true, (Step[]) null);
      expressionArray0[0] = (Expression) locationPath0;
      CoreFunction coreFunction0 = new CoreFunction((-1195), expressionArray0);
      coreFunction0.getArgumentCount();
      ExpressionPath expressionPath0 = new ExpressionPath(expressionArray0[0], expressionArray0, (Step[]) null);
      EvalContext evalContext0 = null;
      coreFunction0.toString();
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest((-256));
      // Undeclared exception!
//      try { 
        coreFunction0.functionLast((EvalContext) null);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // Incorrect number of arguments: unknownFunction-1195()()
//         //
//         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test301()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(0, expressionArray0);
      Expression[] expressionArray1 = new Expression[6];
      expressionArray1[0] = (Expression) coreFunction0;
      expressionArray1[1] = (Expression) coreFunction0;
      expressionArray1[2] = (Expression) coreFunction0;
      expressionArray1[3] = (Expression) coreFunction0;
      expressionArray1[4] = (Expression) coreFunction0;
      expressionArray1[5] = (Expression) coreFunction0;
      Step[] stepArray0 = new Step[0];
      ExpressionPath expressionPath0 = new ExpressionPath(coreFunction0, expressionArray1, stepArray0);
      DescendantContext descendantContext0 = new DescendantContext((EvalContext) null, true, (NodeTest) null);
      expressionPath0.createContextForStep(descendantContext0, 0, (NodeTest) null);
      ChildContext childContext0 = new ChildContext((EvalContext) null, (NodeTest) null, true, false);
      // Undeclared exception!
//      try { 
        coreFunction0.functionName(childContext0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.jxpath.ri.axes.ChildContext", e);
//      }
  }

  @Test(timeout = 4000)
  public void test302()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction((-2120), (Expression[]) null);
      EvalContext evalContext0 = null;
      QName qName0 = new QName("p0~X;V~,)EG8^");
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
      AttributeContext attributeContext0 = new AttributeContext((EvalContext) null, nodeNameTest0);
      // Undeclared exception!
//      try { 
        coreFunction0.functionSubstringBefore(attributeContext0);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // Incorrect number of arguments: unknownFunction-2120()()
//         //
//         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test303()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[9];
      Constant constant0 = new Constant("ww+n`8FNWs");
      CoreOperationNegate coreOperationNegate0 = new CoreOperationNegate(constant0);
      expressionArray0[0] = (Expression) coreOperationNegate0;
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd(expressionArray0);
      expressionArray0[1] = (Expression) coreOperationAdd0;
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual(expressionArray0[0], coreOperationAdd0);
      expressionArray0[2] = (Expression) coreOperationLessThanOrEqual0;
      Constant constant1 = new Constant("");
      expressionArray0[3] = (Expression) constant1;
      CoreOperationAnd coreOperationAnd0 = new CoreOperationAnd(expressionArray0);
      expressionArray0[4] = (Expression) coreOperationAnd0;
      CoreOperationMod coreOperationMod0 = new CoreOperationMod(constant0, constant1);
      expressionArray0[5] = (Expression) coreOperationMod0;
      Constant constant2 = new Constant("");
      NameAttributeTest nameAttributeTest0 = new NameAttributeTest(constant2, coreOperationLessThanOrEqual0);
      expressionArray0[6] = (Expression) nameAttributeTest0;
      Step[] stepArray0 = new Step[7];
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("starts-with");
      Step step0 = new Step(0, processingInstructionTest0, expressionArray0);
      stepArray0[0] = step0;
      Step step1 = new Step(0, processingInstructionTest0, expressionArray0);
      stepArray0[1] = step1;
      Step step2 = new Step(0, processingInstructionTest0, expressionArray0);
      stepArray0[2] = step2;
      Expression[] expressionArray1 = new Expression[1];
      expressionArray1[0] = (Expression) coreOperationMod0;
      Step step3 = new Step(0, processingInstructionTest0, expressionArray1);
      stepArray0[3] = step3;
      Step step4 = new Step(8, processingInstructionTest0, expressionArray1);
      stepArray0[4] = step4;
      Step step5 = new Step(8, processingInstructionTest0, expressionArray0);
      stepArray0[5] = step5;
      Step step6 = new Step((-3565), processingInstructionTest0, expressionArray1);
      stepArray0[6] = step6;
      ExpressionPath expressionPath0 = new ExpressionPath(expressionArray0[6], expressionArray0, stepArray0);
      expressionArray0[7] = (Expression) expressionPath0;
      CoreOperationOr coreOperationOr0 = new CoreOperationOr(expressionArray0);
      expressionArray0[8] = (Expression) coreOperationOr0;
      CoreFunction coreFunction0 = new CoreFunction(0, expressionArray0);
      int int0 = coreFunction0.getFunctionCode();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test304()  throws Throwable  {
      int int0 = 47;
      Expression[] expressionArray0 = null;
      CoreFunction coreFunction0 = new CoreFunction(47, (Expression[]) null);
      EvalContext evalContext0 = null;
      // Undeclared exception!
//      try { 
        coreFunction0.functionTranslate((EvalContext) null);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // Incorrect number of arguments: unknownFunction47()()
//         //
//         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test305()  throws Throwable  {
      int int0 = 93;
      CoreFunction coreFunction0 = new CoreFunction(93, (Expression[]) null);
      Expression[] expressionArray0 = new Expression[6];
      expressionArray0[0] = (Expression) coreFunction0;
      expressionArray0[1] = (Expression) coreFunction0;
      expressionArray0[2] = (Expression) coreFunction0;
      expressionArray0[3] = (Expression) coreFunction0;
      expressionArray0[4] = (Expression) coreFunction0;
      // Undeclared exception!
//      try { 
        coreFunction0.getArg2();
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test306()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(1554, expressionArray0);
      JXPathContext jXPathContext0 = JXPathContext.newContext((Object) coreFunction0);
      String string0 = ")p0l@LrhJ&U-";
      QName qName0 = new QName(")p0l@LrhJ&U-");
      Locale locale0 = Locale.ITALIAN;
      NodePointer nodePointer0 = NodePointer.newNodePointer(qName0, qName0, locale0);
      nodePointer0.getLength();
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = new JXPathContextReferenceImpl(jXPathContext0, coreFunction0, nodePointer0);
      JXPathContext.newContext((Object) qName0);
      EvalContext evalContext0 = jXPathContextReferenceImpl0.getAbsoluteRootContext();
      coreFunction0.functionStringLength(evalContext0);
      coreFunction0.functionName(evalContext0);
      // Undeclared exception!
//      try { 
        coreFunction0.functionBoolean(evalContext0);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // Incorrect number of arguments: unknownFunction1554()()
//         //
//         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test307()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[6];
      CoreOperationEqual coreOperationEqual0 = new CoreOperationEqual((Expression) null, (Expression) null);
      expressionArray0[0] = (Expression) coreOperationEqual0;
      Constant constant0 = new Constant("");
      expressionArray0[1] = (Expression) constant0;
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual(expressionArray0[0], constant0);
      expressionArray0[2] = (Expression) coreOperationLessThanOrEqual0;
      CoreOperationUnion coreOperationUnion0 = new CoreOperationUnion(expressionArray0);
      expressionArray0[3] = (Expression) coreOperationUnion0;
      Constant constant1 = new Constant("");
      expressionArray0[4] = (Expression) constant1;
      CoreOperationOr coreOperationOr0 = new CoreOperationOr(expressionArray0);
      expressionArray0[5] = (Expression) coreOperationOr0;
      CoreFunction coreFunction0 = new CoreFunction(2062, expressionArray0);
      coreFunction0.getFunctionCode();
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = null;
      Object object0 = new Object();
      QName qName0 = new QName("B$}zmZx)ToFc", "");
      Locale locale0 = Locale.TAIWAN;
      NodePointer nodePointer0 = NodePointer.newNodePointer(qName0, qName0, locale0);
      JXPathContextReferenceImpl jXPathContextReferenceImpl1 = new JXPathContextReferenceImpl((JXPathContext) null, object0, nodePointer0);
      // Undeclared exception!
//      try { 
        jXPathContextReferenceImpl1.selectNodes((String) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.io.StringReader", e);
//      }
  }

  @Test(timeout = 4000)
  public void test308()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[3];
      QName qName0 = new QName("");
      VariableReference variableReference0 = new VariableReference(qName0);
      variableReference0.toString();
      expressionArray0[0] = (Expression) variableReference0;
      NameAttributeTest nameAttributeTest0 = new NameAttributeTest(variableReference0, expressionArray0[0]);
      expressionArray0[1] = (Expression) nameAttributeTest0;
      NameAttributeTest nameAttributeTest1 = new NameAttributeTest(expressionArray0[1], expressionArray0[0]);
      expressionArray0[2] = (Expression) nameAttributeTest1;
      CoreFunction coreFunction0 = new CoreFunction(91, expressionArray0);
      EvalContext evalContext0 = null;
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("");
      PrecedingOrFollowingContext precedingOrFollowingContext0 = new PrecedingOrFollowingContext((EvalContext) null, processingInstructionTest0, true);
      // Undeclared exception!
//      try { 
        coreFunction0.functionConcat(precedingOrFollowingContext0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.jxpath.ri.EvalContext", e);
//      }
  }

  @Test(timeout = 4000)
  public void test309()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction((-3603), expressionArray0);
      EvalContext evalContext0 = null;
      // Undeclared exception!
//      try { 
        coreFunction0.functionStartsWith((EvalContext) null);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // Incorrect number of arguments: unknownFunction-3603()()
//         //
//         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test310()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[8];
      CoreOperationMultiply coreOperationMultiply0 = new CoreOperationMultiply((Expression) null, (Expression) null);
      expressionArray0[0] = (Expression) coreOperationMultiply0;
      CoreOperationLessThan coreOperationLessThan0 = new CoreOperationLessThan(expressionArray0[0], coreOperationMultiply0);
      expressionArray0[1] = (Expression) coreOperationLessThan0;
      CoreOperationNegate coreOperationNegate0 = new CoreOperationNegate(expressionArray0[0]);
      expressionArray0[2] = (Expression) coreOperationNegate0;
      CoreOperationNegate coreOperationNegate1 = new CoreOperationNegate(expressionArray0[1]);
      expressionArray0[3] = (Expression) coreOperationNegate1;
      CoreOperationUnion coreOperationUnion0 = new CoreOperationUnion(expressionArray0);
      expressionArray0[4] = (Expression) coreOperationUnion0;
      CoreOperationOr coreOperationOr0 = new CoreOperationOr(expressionArray0);
      expressionArray0[5] = (Expression) coreOperationOr0;
      CoreOperationOr coreOperationOr1 = new CoreOperationOr(expressionArray0);
      expressionArray0[6] = (Expression) coreOperationOr1;
      CoreOperationGreaterThan coreOperationGreaterThan0 = new CoreOperationGreaterThan(coreOperationNegate0, coreOperationMultiply0);
      expressionArray0[7] = (Expression) coreOperationGreaterThan0;
      CoreFunction coreFunction0 = new CoreFunction(46, expressionArray0);
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(46);
      ParentContext parentContext0 = new ParentContext((EvalContext) null, nodeTypeTest0);
      DescendantContext descendantContext0 = new DescendantContext(parentContext0, true, nodeTypeTest0);
      NodeSetContext nodeSetContext0 = new NodeSetContext(descendantContext0, (NodeSet) null);
      PrecedingOrFollowingContext precedingOrFollowingContext0 = new PrecedingOrFollowingContext(nodeSetContext0, nodeTypeTest0, true);
      // Undeclared exception!
//      try { 
        coreFunction0.functionPosition(precedingOrFollowingContext0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.evosuite.runtime.System", e);
//      }
  }

  @Test(timeout = 4000)
  public void test311()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      CoreOperationOr coreOperationOr0 = new CoreOperationOr(expressionArray0);
      CoreOperationEqual coreOperationEqual0 = new CoreOperationEqual(coreOperationOr0, coreOperationOr0);
      CoreOperationMod coreOperationMod0 = new CoreOperationMod(coreOperationEqual0, coreOperationEqual0);
      CoreOperationGreaterThan coreOperationGreaterThan0 = new CoreOperationGreaterThan(coreOperationMod0, coreOperationOr0);
      expressionArray0[0] = (Expression) coreOperationGreaterThan0;
      CoreFunction coreFunction0 = new CoreFunction(0, expressionArray0);
      int int0 = coreFunction0.getArgumentCount();
      assertEquals(0, coreFunction0.getFunctionCode());
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test312()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(476, (Expression[]) null);
      coreFunction0.computeContextDependent();
      QName qName0 = new QName("unknownFunction");
      VariablePointer variablePointer0 = new VariablePointer(qName0);
      RootContext rootContext0 = null;
//      try {
        rootContext0 = new RootContext((JXPathContextReferenceImpl) null, variablePointer0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.jxpath.ri.axes.RootContext", e);
//      }
  }

  @Test(timeout = 4000)
  public void test313()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[7];
      QName qName0 = new QName("", "");
      VariableReference variableReference0 = new VariableReference(qName0);
      expressionArray0[0] = (Expression) variableReference0;
      CoreOperationNegate coreOperationNegate0 = new CoreOperationNegate(expressionArray0[0]);
      CoreOperationGreaterThanOrEqual coreOperationGreaterThanOrEqual0 = new CoreOperationGreaterThanOrEqual(coreOperationNegate0, variableReference0);
      expressionArray0[1] = (Expression) coreOperationGreaterThanOrEqual0;
      CoreOperationGreaterThanOrEqual coreOperationGreaterThanOrEqual1 = new CoreOperationGreaterThanOrEqual(expressionArray0[0], coreOperationNegate0);
      expressionArray0[2] = (Expression) coreOperationGreaterThanOrEqual1;
      CoreOperationGreaterThan coreOperationGreaterThan0 = new CoreOperationGreaterThan(coreOperationGreaterThanOrEqual1, coreOperationNegate0);
      expressionArray0[3] = (Expression) coreOperationGreaterThan0;
      CoreOperationGreaterThanOrEqual coreOperationGreaterThanOrEqual2 = new CoreOperationGreaterThanOrEqual(expressionArray0[2], expressionArray0[2]);
      expressionArray0[4] = (Expression) coreOperationGreaterThanOrEqual2;
      CoreOperationMultiply coreOperationMultiply0 = new CoreOperationMultiply(expressionArray0[4], coreOperationGreaterThan0);
      expressionArray0[5] = (Expression) coreOperationMultiply0;
      CoreFunction coreFunction0 = new CoreFunction(20, expressionArray0);
      Expression expression0 = coreFunction0.getArg1();
      expressionArray0[6] = expression0;
      CoreFunction coreFunction1 = new CoreFunction(20, expressionArray0);
      JXPathContext jXPathContext0 = JXPathContext.newContext((Object) "");
      VariablePointer variablePointer0 = new VariablePointer(qName0);
      JXPathContext jXPathContext1 = JXPathContext.newContext(jXPathContext0, (Object) variablePointer0);
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = null;
//      try {
        jXPathContextReferenceImpl0 = new JXPathContextReferenceImpl(jXPathContext1, expressionArray0[4], variablePointer0);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // Undefined variable: :
//         //
//         verifyException("org.apache.commons.jxpath.ri.model.VariablePointer", e);
//      }
  }

  @Test(timeout = 4000)
  public void test314()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction((-1), (Expression[]) null);
      coreFunction0.getFunctionCode();
      JXPathContext jXPathContext0 = JXPathContext.newContext((Object) coreFunction0);
      QName qName0 = new QName("");
      VariablePointer variablePointer0 = new VariablePointer(qName0);
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = null;
//      try {
        jXPathContextReferenceImpl0 = new JXPathContextReferenceImpl(jXPathContext0, coreFunction0, variablePointer0);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // Undefined variable: 
//         //
//         verifyException("org.apache.commons.jxpath.ri.model.VariablePointer", e);
//      }
  }

  @Test(timeout = 4000)
  public void test315()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(32, (Expression[]) null);
      EvalContext evalContext0 = null;
      // Undeclared exception!
//      try { 
        coreFunction0.functionSubstring((EvalContext) null);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // Incorrect number of arguments: unknownFunction32()()
//         //
//         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test316()  throws Throwable  {
      int int0 = (-1047);
      Expression[] expressionArray0 = new Expression[2];
      String string0 = "i>up`D6qtL";
      Constant constant0 = new Constant("i>up`D6qtL");
      CoreOperationNegate coreOperationNegate0 = new CoreOperationNegate(constant0);
      expressionArray0[0] = (Expression) coreOperationNegate0;
      String string1 = "sum";
      Expression[] expressionArray1 = new Expression[8];
      expressionArray1[0] = (Expression) coreOperationNegate0;
      expressionArray1[1] = (Expression) constant0;
      expressionArray1[2] = (Expression) coreOperationNegate0;
      expressionArray1[3] = (Expression) coreOperationNegate0;
      int int1 = 30;
      CoreFunction coreFunction0 = new CoreFunction(30, expressionArray0);
      // Undeclared exception!
//      try { 
        coreFunction0.getArg3();
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 2
//         //
//         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
//      }
  }

  @Test(timeout = 4000)
  public void test317()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[8];
      Step[] stepArray0 = new Step[7];
      Step step0 = new Step(1460, (NodeTest) null, expressionArray0);
      stepArray0[0] = step0;
      Step step1 = new Step(32, (NodeTest) null, expressionArray0);
      stepArray0[1] = step1;
      Step step2 = new Step(607, (NodeTest) null, expressionArray0);
      stepArray0[2] = step2;
      Step step3 = new Step(0, (NodeTest) null, expressionArray0);
      stepArray0[3] = step3;
      Step step4 = new Step(1460, (NodeTest) null, expressionArray0);
      stepArray0[4] = step4;
      Expression[] expressionArray1 = new Expression[2];
      QName qName0 = new QName("7ZW(jm'O\"xVTr");
      VariableReference variableReference0 = new VariableReference(qName0);
      CoreOperationNegate coreOperationNegate0 = new CoreOperationNegate(variableReference0);
      Step[] stepArray1 = new Step[5];
      stepArray1[0] = step2;
      stepArray1[1] = step3;
      stepArray1[2] = step1;
      stepArray1[3] = step1;
      stepArray1[4] = step0;
      ExpressionPath expressionPath0 = new ExpressionPath(coreOperationNegate0, expressionArray1, stepArray1);
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual(expressionPath0, variableReference0);
      expressionArray1[0] = (Expression) coreOperationLessThanOrEqual0;
      Constant constant0 = new Constant("7ZW(jm'O\"xVTr");
      expressionArray1[1] = (Expression) constant0;
      Step step5 = new Step(1749, (NodeTest) null, expressionArray1);
      stepArray0[5] = step5;
      Step step6 = new Step(32, (NodeTest) null, expressionArray0);
      stepArray0[6] = step6;
      LocationPath locationPath0 = new LocationPath(true, stepArray0);
      CoreOperationGreaterThan coreOperationGreaterThan0 = new CoreOperationGreaterThan(locationPath0, expressionArray1[0]);
      CoreOperationNotEqual coreOperationNotEqual0 = new CoreOperationNotEqual(coreOperationGreaterThan0, coreOperationNegate0);
      CoreOperationDivide coreOperationDivide0 = new CoreOperationDivide(coreOperationNotEqual0, coreOperationNotEqual0);
      CoreOperationSubtract coreOperationSubtract0 = new CoreOperationSubtract(coreOperationDivide0, coreOperationNotEqual0);
      expressionArray0[0] = (Expression) coreOperationSubtract0;
      CoreOperationAnd coreOperationAnd0 = new CoreOperationAnd(expressionArray0);
      expressionArray0[1] = (Expression) coreOperationAnd0;
      LocationPath locationPath1 = new LocationPath(true, stepArray0);
      expressionArray0[2] = (Expression) locationPath1;
      CoreOperationLessThan coreOperationLessThan0 = new CoreOperationLessThan(coreOperationGreaterThan0, coreOperationSubtract0);
      expressionArray0[3] = (Expression) coreOperationLessThan0;
      CoreOperationGreaterThan coreOperationGreaterThan1 = new CoreOperationGreaterThan(variableReference0, expressionArray0[0]);
      expressionArray0[4] = (Expression) coreOperationGreaterThan1;
      CoreOperationDivide coreOperationDivide1 = new CoreOperationDivide(expressionArray0[4], coreOperationSubtract0);
      CoreOperationLessThan coreOperationLessThan1 = new CoreOperationLessThan(coreOperationDivide1, coreOperationLessThan0);
      expressionArray0[5] = (Expression) coreOperationLessThan1;
      CoreOperationGreaterThan coreOperationGreaterThan2 = new CoreOperationGreaterThan(coreOperationNotEqual0, expressionArray0[4]);
      ExpressionPath expressionPath1 = new ExpressionPath(coreOperationGreaterThan2, expressionArray1, stepArray0);
      expressionArray0[6] = (Expression) expressionPath1;
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual1 = new CoreOperationLessThanOrEqual(locationPath1, coreOperationDivide1);
      expressionArray0[7] = (Expression) coreOperationLessThanOrEqual1;
      CoreFunction coreFunction0 = new CoreFunction(1460, expressionArray0);
      assertEquals(1460, coreFunction0.getFunctionCode());
  }
}
