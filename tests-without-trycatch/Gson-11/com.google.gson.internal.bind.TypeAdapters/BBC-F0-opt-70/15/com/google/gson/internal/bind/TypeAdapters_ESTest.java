/*
 * This file was automatically generated by EvoSuite
 * Thu Oct 21 01:43:35 GMT 2021
 */

package com.google.gson.internal.bind;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.gson.Gson;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonNull;
import com.google.gson.JsonObject;
import com.google.gson.JsonPrimitive;
import com.google.gson.JsonSerializer;
import com.google.gson.TypeAdapter;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.internal.Excluder;
import com.google.gson.internal.bind.ObjectTypeAdapter;
import com.google.gson.internal.bind.TreeTypeAdapter;
import com.google.gson.internal.bind.TypeAdapterRuntimeTypeWrapper;
import com.google.gson.internal.bind.TypeAdapters;
import com.google.gson.reflect.TypeToken;
import com.google.gson.stream.JsonWriter;
import java.io.Reader;
import java.io.StringReader;
import java.io.Writer;
import java.lang.reflect.Type;
import java.net.InetAddress;
import java.net.URI;
import java.net.URL;
import java.time.temporal.ChronoField;
import java.util.BitSet;
import java.util.Calendar;
import java.util.Currency;
import java.util.GregorianCalendar;
import java.util.Locale;
import java.util.UUID;
import java.util.concurrent.atomic.AtomicBoolean;
import java.util.concurrent.atomic.AtomicInteger;
import java.util.concurrent.atomic.AtomicIntegerArray;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.mock.java.net.MockInetAddress;
import org.evosuite.runtime.mock.java.net.MockURI;
import org.evosuite.runtime.mock.java.net.MockURL;
import org.evosuite.runtime.mock.java.util.MockCalendar;
import org.evosuite.runtime.mock.java.util.MockGregorianCalendar;
import org.evosuite.runtime.mock.java.util.MockUUID;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class TypeAdapters_ESTest extends TypeAdapters_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Gson gson0 = new Gson();
      Class<Calendar> class0 = Calendar.class;
      Class<GregorianCalendar> class1 = GregorianCalendar.class;
      TypeToken<Calendar> typeToken0 = TypeToken.get(class0);
      TypeAdapter<Calendar> typeAdapter0 = gson0.getAdapter(typeToken0);
      TypeAdapterFactory typeAdapterFactory0 = TypeAdapters.newFactoryForMultipleTypes(class0, (Class<? extends Calendar>) class1, (TypeAdapter<? super Calendar>) typeAdapter0);
      assertNotNull(typeAdapterFactory0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Gson gson0 = new Gson();
      Class<AtomicIntegerArray> class0 = AtomicIntegerArray.class;
//      try { 
        gson0.fromJson("com.google.gson.JsonIOException", (Type) class0);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // org.evosuite.runtime.mock.java.lang.MockThrowable: Expected BEGIN_ARRAY but was STRING at line 1 column 1 path $
//         //
//         verifyException("com.google.gson.Gson", e);
//      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Gson gson0 = new Gson();
      StringReader stringReader0 = new StringReader("|}[ub");
      Class<URI> class0 = URI.class;
//      try { 
        gson0.fromJson((Reader) stringReader0, class0);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // java.net.URISyntaxException: Illegal character in path at index 0: |
//         //
//         verifyException("com.google.gson.internal.bind.TypeAdapters$23", e);
//      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Class<Byte> class0 = Byte.class;
      TypeAdapterFactory typeAdapterFactory0 = TypeAdapters.newFactory(class0, class0, (TypeAdapter<? super Byte>) null);
      assertNotNull(typeAdapterFactory0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Gson gson0 = new Gson();
      Boolean boolean0 = Boolean.valueOf(false);
      JsonPrimitive jsonPrimitive0 = new JsonPrimitive(boolean0);
      String string0 = gson0.toJson((JsonElement) jsonPrimitive0);
      assertEquals("false", string0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Gson gson0 = new Gson();
      String string0 = gson0.toJson((Object) null);
      assertEquals("null", string0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Gson gson0 = new Gson();
      Excluder excluder0 = gson0.excluder();
      StringReader stringReader0 = new StringReader("3");
      JsonSerializer<URL> jsonSerializer0 = (JsonSerializer<URL>) mock(JsonSerializer.class, new ViolatedAssumptionAnswer());
      JsonDeserializer<URL> jsonDeserializer0 = (JsonDeserializer<URL>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(jsonDeserializer0).deserialize(any(com.google.gson.JsonElement.class) , any(java.lang.reflect.Type.class) , any(com.google.gson.JsonDeserializationContext.class));
      Class<URL> class0 = URL.class;
      TypeToken<URL> typeToken0 = TypeToken.get(class0);
      TreeTypeAdapter<URL> treeTypeAdapter0 = new TreeTypeAdapter<URL>(jsonSerializer0, jsonDeserializer0, gson0, typeToken0, excluder0);
      Class<Short> class1 = Short.TYPE;
      TypeAdapterRuntimeTypeWrapper<URL> typeAdapterRuntimeTypeWrapper0 = new TypeAdapterRuntimeTypeWrapper<URL>(gson0, treeTypeAdapter0, class1);
      URL uRL0 = typeAdapterRuntimeTypeWrapper0.fromJson((Reader) stringReader0);
      assertNull(uRL0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Gson gson0 = new Gson();
      Class<GregorianCalendar> class0 = GregorianCalendar.class;
      TypeToken<GregorianCalendar> typeToken0 = TypeToken.get(class0);
      TypeAdapter<GregorianCalendar> typeAdapter0 = gson0.getAdapter(typeToken0);
      assertNotNull(typeAdapter0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Gson gson0 = new Gson();
      ChronoField chronoField0 = ChronoField.MILLI_OF_DAY;
      JsonElement jsonElement0 = gson0.toJsonTree((Object) chronoField0);
      assertFalse(jsonElement0.isJsonArray());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Gson gson0 = new Gson();
      JsonElement jsonElement0 = gson0.toJsonTree((Object) gson0);
      MockFile mockFile0 = new MockFile((String) null, "com.google.gson.internal.bind.TypeAdapters$26");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      gson0.toJson(jsonElement0, (Appendable) mockPrintWriter0);
      assertTrue(jsonElement0.isJsonObject());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Gson gson0 = new Gson();
      Excluder excluder0 = new Excluder();
      Locale locale0 = Locale.ITALY;
      JsonSerializer<Object> jsonSerializer0 = (JsonSerializer<Object>) mock(JsonSerializer.class, new ViolatedAssumptionAnswer());
      doReturn((JsonElement) null).when(jsonSerializer0).serialize(any() , any(java.lang.reflect.Type.class) , any(com.google.gson.JsonSerializationContext.class));
      JsonDeserializer<Object> jsonDeserializer0 = (JsonDeserializer<Object>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      Class<Object> class0 = Object.class;
      TypeToken<Object> typeToken0 = TypeToken.get(class0);
      TreeTypeAdapter<Object> treeTypeAdapter0 = new TreeTypeAdapter<Object>(jsonSerializer0, jsonDeserializer0, gson0, typeToken0, excluder0);
      JsonElement jsonElement0 = treeTypeAdapter0.toJsonTree(locale0);
      assertFalse(jsonElement0.isJsonPrimitive());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Gson gson0 = new Gson();
      Class<JsonArray> class0 = JsonArray.class;
//      try { 
        gson0.fromJson("['~#an5j", class0);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // org.evosuite.runtime.mock.java.lang.MockThrowable: Unterminated string at line 1 column 9 path $[0]
//         //
//         verifyException("com.google.gson.Gson", e);
//      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Gson gson0 = new Gson();
      JsonArray jsonArray0 = new JsonArray();
      Class<JsonObject> class0 = JsonObject.class;
//      try { 
        gson0.fromJson((JsonElement) jsonArray0, class0);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // Expected a com.google.gson.JsonObject but was com.google.gson.JsonArray
//         //
//         verifyException("com.google.gson.internal.bind.TypeAdapters$35$1", e);
//      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Gson gson0 = new Gson();
      Class<JsonArray> class0 = JsonArray.class;
//      try { 
        gson0.fromJson("null", class0);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // Expected a com.google.gson.JsonArray but was com.google.gson.JsonNull
//         //
//         verifyException("com.google.gson.internal.bind.TypeAdapters$35$1", e);
//      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      UUID uUID0 = MockUUID.randomUUID();
      Gson gson0 = new Gson();
      JsonElement jsonElement0 = gson0.toJsonTree((Object) uUID0);
      Class<JsonObject> class0 = JsonObject.class;
//      try { 
        gson0.fromJson(jsonElement0, class0);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // Expected a com.google.gson.JsonObject but was com.google.gson.JsonPrimitive
//         //
//         verifyException("com.google.gson.internal.bind.TypeAdapters$35$1", e);
//      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Gson gson0 = new Gson();
      Boolean boolean0 = Boolean.valueOf(true);
      JsonPrimitive jsonPrimitive0 = new JsonPrimitive(boolean0);
      Class<JsonObject> class0 = JsonObject.class;
//      try { 
        gson0.fromJson((JsonElement) jsonPrimitive0, class0);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // Expected a com.google.gson.JsonObject but was com.google.gson.JsonPrimitive
//         //
//         verifyException("com.google.gson.internal.bind.TypeAdapters$35$1", e);
//      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      JsonObject jsonObject0 = new JsonObject();
      Byte byte0 = new Byte((byte) (-113));
      jsonObject0.addProperty("cLONO4pN2&G", (Number) byte0);
      Gson gson0 = new Gson();
      Class<JsonObject> class0 = JsonObject.class;
      JsonObject jsonObject1 = gson0.fromJson((JsonElement) jsonObject0, class0);
      assertFalse(jsonObject1.isJsonArray());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Class<Locale> class0 = Locale.class;
      Gson gson0 = new Gson();
      JsonElement jsonElement0 = gson0.toJsonTree((Object) null, (Type) class0);
      assertFalse(jsonElement0.isJsonObject());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Gson gson0 = new Gson();
      Locale locale0 = Locale.FRENCH;
      JsonElement jsonElement0 = gson0.toJsonTree((Object) locale0);
      assertTrue(jsonElement0.isJsonPrimitive());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Class<Locale> class0 = Locale.class;
      Gson gson0 = new Gson();
      Object object0 = gson0.fromJson("LOWER_CASE_WITH_DASHES", (Type) class0);
      assertEquals("lower_CASE_WITH", object0.toString());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Class<Locale> class0 = Locale.class;
      Gson gson0 = new Gson();
//      try { 
        gson0.fromJson("EBX?_\"yAn]8{", (Type) class0);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // org.evosuite.runtime.mock.java.lang.MockThrowable: Use JsonReader.setLenient(true) to accept malformed JSON at line 1 column 11 path $
//         //
//         verifyException("com.google.gson.Gson", e);
//      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Class<Locale> class0 = Locale.class;
      Gson gson0 = new Gson();
      // Undeclared exception!
//      try { 
        gson0.fromJson("_", (Type) class0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.util.Locale", e);
//      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Class<Locale> class0 = Locale.class;
      Gson gson0 = new Gson();
//      try { 
        gson0.fromJson("Expected one JSON element but was ", (Type) class0);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // org.evosuite.runtime.mock.java.lang.MockThrowable: Use JsonReader.setLenient(true) to accept malformed JSON at line 1 column 11 path $
//         //
//         verifyException("com.google.gson.Gson", e);
//      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Gson gson0 = new Gson();
      Class<Calendar> class0 = Calendar.class;
//      try { 
        gson0.fromJson("itOQ", class0);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // org.evosuite.runtime.mock.java.lang.MockThrowable: Expected BEGIN_OBJECT but was STRING at line 1 column 1 path $
//         //
//         verifyException("com.google.gson.Gson", e);
//      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Gson gson0 = new Gson();
      Class<UUID> class0 = UUID.class;
      UUID uUID0 = gson0.fromJson("null", class0);
      assertNull(uUID0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Gson gson0 = new Gson();
      Class<UUID> class0 = UUID.class;
      UUID uUID0 = gson0.fromJson("com.google.gson.internal.bind.TypeAdapters$15", class0);
      assertEquals((-9079256848728588288L), uUID0.getLeastSignificantBits());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Gson gson0 = new Gson();
      Class<InetAddress> class0 = InetAddress.class;
      TypeToken<InetAddress> typeToken0 = TypeToken.get(class0);
      Class<? super InetAddress> class1 = typeToken0.getRawType();
      JsonElement jsonElement0 = gson0.toJsonTree((Object) null, (Type) class1);
      assertTrue(jsonElement0.isJsonNull());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Gson gson0 = new Gson();
      InetAddress inetAddress0 = MockInetAddress.getLoopbackAddress();
      JsonPrimitive jsonPrimitive0 = (JsonPrimitive)gson0.toJsonTree((Object) inetAddress0);
      assertFalse(jsonPrimitive0.isBoolean());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Gson gson0 = new Gson();
      Class<InetAddress> class0 = InetAddress.class;
      Float float0 = gson0.fromJson("null", (Type) class0);
      assertNull(float0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Gson gson0 = new Gson();
      Class<InetAddress> class0 = InetAddress.class;
      TypeToken<InetAddress> typeToken0 = TypeToken.get(class0);
      Class<? super InetAddress> class1 = typeToken0.getRawType();
//      try { 
        gson0.fromJson("1ufQloe\"]H'in>h^mF", (Type) class1);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // org.evosuite.runtime.mock.java.lang.MockThrowable: Use JsonReader.setLenient(true) to accept malformed JSON at line 1 column 10 path $
//         //
//         verifyException("com.google.gson.Gson", e);
//      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Gson gson0 = new Gson();
      URI uRI0 = MockURI.aFileURI;
      JsonPrimitive jsonPrimitive0 = (JsonPrimitive)gson0.toJsonTree((Object) uRI0);
      assertFalse(jsonPrimitive0.isNumber());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Class<URI> class0 = URI.class;
      Gson gson0 = new Gson();
      Float float0 = gson0.fromJson("null", (Type) class0);
      assertNull(float0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Class<UUID> class0 = UUID.class;
      Gson gson0 = new Gson();
      TypeAdapter<URL> typeAdapter0 = TypeAdapters.URL;
      TypeAdapterRuntimeTypeWrapper<URL> typeAdapterRuntimeTypeWrapper0 = new TypeAdapterRuntimeTypeWrapper<URL>(gson0, typeAdapter0, class0);
      MockFile mockFile0 = new MockFile("EQy^#");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0);
      typeAdapterRuntimeTypeWrapper0.toJson((Writer) mockPrintWriter0, (URL) null);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Gson gson0 = new Gson();
      URL uRL0 = MockURL.getFileExample();
      JsonElement jsonElement0 = gson0.toJsonTree((Object) uRL0);
      assertFalse(jsonElement0.isJsonNull());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Gson gson0 = new Gson();
      Class<URL> class0 = URL.class;
      JsonNull jsonNull0 = JsonNull.INSTANCE;
      String string0 = gson0.fromJson((JsonElement) jsonNull0, (Type) class0);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Gson gson0 = new Gson();
      Class<URL> class0 = URL.class;
//      try { 
        gson0.fromJson("b#M\"\"9r[YTKC{n]L", class0);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // java.net.MalformedURLException: no protocol: b
//         //
//         verifyException("com.google.gson.Gson", e);
//      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Gson gson0 = new Gson();
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "Cannot allocate ");
      JsonElement jsonElement0 = gson0.toJsonTree((Object) stringBuffer0);
      assertFalse(jsonElement0.isJsonObject());
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Gson gson0 = new Gson();
      StringReader stringReader0 = new StringReader("null");
      Class<StringBuffer> class0 = StringBuffer.class;
      StringBuffer stringBuffer0 = gson0.fromJson((Reader) stringReader0, class0);
      assertNull(stringBuffer0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Gson gson0 = new Gson();
      StringReader stringReader0 = new StringReader("kHp6Vl");
      Class<StringBuffer> class0 = StringBuffer.class;
      StringBuffer stringBuffer0 = gson0.fromJson((Reader) stringReader0, class0);
      assertEquals("kHp6Vl", stringBuffer0.toString());
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Class<StringBuilder> class0 = StringBuilder.class;
      Gson gson0 = new Gson();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("T");
      JsonWriter jsonWriter0 = new JsonWriter(mockPrintWriter0);
      gson0.toJson((Object) null, (Type) class0, jsonWriter0);
      assertFalse(jsonWriter0.isLenient());
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Gson gson0 = new Gson();
      StringBuilder stringBuilder0 = new StringBuilder(1744);
      JsonPrimitive jsonPrimitive0 = (JsonPrimitive)gson0.toJsonTree((Object) stringBuilder0);
      assertTrue(jsonPrimitive0.isString());
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Gson gson0 = new Gson();
      Class<StringBuilder> class0 = StringBuilder.class;
      StringBuilder stringBuilder0 = gson0.fromJson("BOOLEAN", class0);
      assertEquals("BOOLEAN", stringBuilder0.toString());
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Gson gson0 = new Gson();
      Class<String> class0 = String.class;
      String string0 = gson0.fromJson("FALSE", class0);
      assertEquals("false", string0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Gson gson0 = new Gson();
      Class<String> class0 = String.class;
      String string0 = gson0.fromJson("null", class0);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Gson gson0 = new Gson();
      Class<String> class0 = String.class;
      String string0 = gson0.fromJson("4ts", class0);
      assertEquals("4ts", string0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Gson gson0 = new Gson();
      Class<Character> class0 = Character.TYPE;
      JsonElement jsonElement0 = gson0.toJsonTree((Object) null, (Type) class0);
      assertFalse(jsonElement0.isJsonPrimitive());
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Gson gson0 = new Gson();
      Character character0 = new Character('A');
      String string0 = gson0.toJson((Object) character0);
      assertEquals("\"A\"", string0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Class<Character> class0 = Character.TYPE;
      Gson gson0 = new Gson();
//      try { 
        gson0.fromJson("3 E:u-`paP?VE7U", (Type) class0);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // org.evosuite.runtime.mock.java.lang.MockThrowable: Use JsonReader.setLenient(true) to accept malformed JSON at line 1 column 4 path $
//         //
//         verifyException("com.google.gson.Gson", e);
//      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Gson gson0 = new Gson();
      Class<Character> class0 = Character.TYPE;
      JsonNull jsonNull0 = JsonNull.INSTANCE;
      JsonArray jsonArray0 = gson0.fromJson((JsonElement) jsonNull0, (Type) class0);
      assertNull(jsonArray0);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Gson gson0 = new Gson();
      Class<Character> class0 = Character.TYPE;
//      try { 
        gson0.fromJson("sCannot {llocat)ve ", (Type) class0);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // Expecting character, got: sCannot
//         //
//         verifyException("com.google.gson.internal.bind.TypeAdapters$16", e);
//      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Gson gson0 = new Gson();
      Class<Long> class0 = Long.TYPE;
      Float float0 = gson0.fromJson("null", (Type) class0);
      assertNull(float0);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Gson gson0 = new Gson();
      Class<Long> class0 = Long.TYPE;
//      try { 
        gson0.fromJson("9XkC2XKH?k<qv>PEg", (Type) class0);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // java.lang.NumberFormatException: For input string: \"9XkC2XKH?k<qv>PEg\"
//         //
//         verifyException("com.google.gson.internal.bind.TypeAdapters$12", e);
//      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Gson gson0 = new Gson();
      int[] intArray0 = new int[1];
      AtomicIntegerArray atomicIntegerArray0 = new AtomicIntegerArray(intArray0);
      JsonArray jsonArray0 = (JsonArray)gson0.toJsonTree((Object) atomicIntegerArray0);
      assertEquals(1, jsonArray0.size());
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Gson gson0 = new Gson();
      Class<Integer> class0 = Integer.TYPE;
      Float float0 = gson0.fromJson("null", (Type) class0);
      assertNull(float0);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Gson gson0 = new Gson();
      Class<Integer> class0 = Integer.TYPE;
//      try { 
        gson0.fromJson("\"00000000-0100-4000-8200-000003000000\"", (Type) class0);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // java.lang.NumberFormatException: For input string: \"00000000-0100-4000-8200-000003000000\"
//         //
//         verifyException("com.google.gson.internal.bind.TypeAdapters$11", e);
//      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Gson gson0 = new Gson();
      Class<Short> class0 = Short.TYPE;
      Float float0 = gson0.fromJson("null", (Type) class0);
      assertNull(float0);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Gson gson0 = new Gson();
      Class<Short> class0 = Short.TYPE;
//      try { 
        gson0.fromJson("f.:P ^t=V>tzT <0]qU", (Type) class0);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // java.lang.NumberFormatException: For input string: \"f.\"
//         //
//         verifyException("com.google.gson.internal.bind.TypeAdapters$10", e);
//      }
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Gson gson0 = new Gson();
      Class<Byte> class0 = Byte.TYPE;
      Float float0 = gson0.fromJson("null", (Type) class0);
      assertNull(float0);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Gson gson0 = new Gson();
      Class<Byte> class0 = Byte.TYPE;
//      try { 
        gson0.fromJson("EBX?_\"yAn]8{", (Type) class0);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // java.lang.NumberFormatException: For input string: \"EBX?_\"yAn\"
//         //
//         verifyException("com.google.gson.internal.bind.TypeAdapters$9", e);
//      }
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Gson gson0 = new Gson();
      Class<Boolean> class0 = Boolean.TYPE;
//      try { 
        gson0.fromJson("9?/oXu[v", (Type) class0);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // org.evosuite.runtime.mock.java.lang.MockThrowable: Use JsonReader.setLenient(true) to accept malformed JSON at line 1 column 4 path $
//         //
//         verifyException("com.google.gson.Gson", e);
//      }
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Class<Boolean> class0 = Boolean.TYPE;
      Gson gson0 = new Gson();
      Float float0 = gson0.fromJson("null", (Type) class0);
      assertNull(float0);
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Gson gson0 = new Gson();
      Class<Boolean> class0 = Boolean.TYPE;
//      try { 
        gson0.fromJson("[]", (Type) class0);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // org.evosuite.runtime.mock.java.lang.MockThrowable: Expected a boolean but was BEGIN_ARRAY at line 1 column 2 path $
//         //
//         verifyException("com.google.gson.Gson", e);
//      }
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Gson gson0 = new Gson();
      long[] longArray0 = new long[4];
      longArray0[0] = (-1745L);
      BitSet bitSet0 = BitSet.valueOf(longArray0);
      JsonArray jsonArray0 = (JsonArray)gson0.toJsonTree((Object) bitSet0);
      assertEquals(64, jsonArray0.size());
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Gson gson0 = new Gson();
      StringReader stringReader0 = new StringReader("[~#an5j");
      Class<BitSet> class0 = BitSet.class;
//      try { 
        gson0.fromJson((Reader) stringReader0, class0);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // Error: Expecting: bitset number value (1, 0), Found: ~
//         //
//         verifyException("com.google.gson.internal.bind.TypeAdapters$6", e);
//      }
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Gson gson0 = new Gson();
      StringReader stringReader0 = new StringReader("null");
      Class<BitSet> class0 = BitSet.class;
      BitSet bitSet0 = gson0.fromJson((Reader) stringReader0, class0);
      assertNull(bitSet0);
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      Gson gson0 = new Gson();
      Class<MockCalendar> class0 = MockCalendar.class;
      // Undeclared exception!
//      try { 
        gson0.toJson((Object) class0);
//        fail("Expecting exception: UnsupportedOperationException");
      
//      } catch(UnsupportedOperationException e) {
//         //
//         // Attempted to serialize java.lang.Class: org.evosuite.runtime.mock.java.util.MockCalendar. Forgot to register a type adapter?
//         //
//         verifyException("com.google.gson.internal.bind.TypeAdapters$5", e);
//      }
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      Class<Currency> class0 = Currency.class;
      Gson gson0 = new Gson();
      // Undeclared exception!
//      try { 
        gson0.fromJson("1ufQloe\"]H'in>h^mF", (Type) class0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.util.Currency", e);
//      }
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      Gson gson0 = new Gson();
      Locale locale0 = Locale.KOREA;
      Currency currency0 = Currency.getInstance(locale0);
      JsonPrimitive jsonPrimitive0 = (JsonPrimitive)gson0.toJsonTree((Object) currency0);
      assertFalse(jsonPrimitive0.isNumber());
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      Gson gson0 = new Gson();
      AtomicInteger atomicInteger0 = new AtomicInteger(2);
      JsonElement jsonElement0 = gson0.toJsonTree((Object) atomicInteger0);
      assertFalse(jsonElement0.isJsonObject());
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      Gson gson0 = new Gson();
      Class<AtomicInteger> class0 = AtomicInteger.class;
//      try { 
        gson0.fromJson("\"q\"", class0);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // java.lang.NumberFormatException: For input string: \"q\"
//         //
//         verifyException("com.google.gson.internal.bind.TypeAdapters$1", e);
//      }
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      Gson gson0 = new Gson();
      AtomicBoolean atomicBoolean0 = new AtomicBoolean();
      JsonElement jsonElement0 = gson0.toJsonTree((Object) atomicBoolean0);
      assertFalse(jsonElement0.isJsonObject());
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      Gson gson0 = new Gson();
      Class<AtomicBoolean> class0 = AtomicBoolean.class;
//      try { 
        gson0.fromJson("-O&+&MGH", class0);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // org.evosuite.runtime.mock.java.lang.MockThrowable: Expected a boolean but was STRING at line 1 column 1 path $
//         //
//         verifyException("com.google.gson.Gson", e);
//      }
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      Gson gson0 = new Gson();
      Byte byte0 = new Byte((byte)84);
      String string0 = gson0.toJson((Object) byte0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      Gson gson0 = new Gson();
      JsonArray jsonArray0 = new JsonArray();
      String string0 = gson0.toJson((Object) jsonArray0);
      assertEquals("[]", string0);
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      Gson gson0 = new Gson();
      Short short0 = Short.valueOf((short)14);
      JsonPrimitive jsonPrimitive0 = (JsonPrimitive)gson0.toJsonTree((Object) short0);
      assertTrue(jsonPrimitive0.isNumber());
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      Gson gson0 = new Gson();
      Class<MockGregorianCalendar> class0 = MockGregorianCalendar.class;
      TypeAdapterFactory typeAdapterFactory0 = TypeAdapters.newFactory(class0, (TypeAdapter<MockGregorianCalendar>) null);
      Class<AtomicBoolean> class1 = AtomicBoolean.class;
      TypeToken<AtomicBoolean> typeToken0 = TypeToken.get(class1);
      JsonSerializer<AtomicBoolean> jsonSerializer0 = (JsonSerializer<AtomicBoolean>) mock(JsonSerializer.class, new ViolatedAssumptionAnswer());
      JsonDeserializer<AtomicBoolean> jsonDeserializer0 = (JsonDeserializer<AtomicBoolean>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      TreeTypeAdapter<AtomicBoolean> treeTypeAdapter0 = new TreeTypeAdapter<AtomicBoolean>(jsonSerializer0, jsonDeserializer0, gson0, typeToken0, typeAdapterFactory0);
      TypeAdapterFactory typeAdapterFactory1 = TypeAdapters.newFactory(typeToken0, (TypeAdapter<AtomicBoolean>) treeTypeAdapter0);
      assertFalse(typeAdapterFactory1.equals((Object)typeAdapterFactory0));
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      Gson gson0 = new Gson();
      Class<Integer> class0 = Integer.class;
      Class<Float> class1 = Float.TYPE;
      TypeAdapterRuntimeTypeWrapper<Integer> typeAdapterRuntimeTypeWrapper0 = new TypeAdapterRuntimeTypeWrapper<Integer>(gson0, (TypeAdapter<Integer>) null, class1);
      TypeAdapterFactory typeAdapterFactory0 = TypeAdapters.newTypeHierarchyFactory(class0, (TypeAdapter<Integer>) typeAdapterRuntimeTypeWrapper0);
      assertNotNull(typeAdapterFactory0);
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      Class<Currency> class0 = Currency.class;
      Gson gson0 = new Gson();
      ObjectTypeAdapter objectTypeAdapter0 = new ObjectTypeAdapter(gson0);
      TypeAdapterFactory typeAdapterFactory0 = TypeAdapters.newFactoryForMultipleTypes(class0, (Class<? extends Currency>) class0, (TypeAdapter<? super Currency>) objectTypeAdapter0);
      assertNotNull(typeAdapterFactory0);
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      Gson gson0 = new Gson();
      String string0 = gson0.toString();
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      Gson gson0 = new Gson();
      Locale locale0 = Locale.FRENCH;
      Calendar calendar0 = MockCalendar.getInstance(locale0);
      JsonElement jsonElement0 = gson0.toJsonTree((Object) calendar0);
      assertTrue(jsonElement0.isJsonObject());
  }
}
